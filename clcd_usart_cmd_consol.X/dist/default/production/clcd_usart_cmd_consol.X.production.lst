

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Oct 27 20:42:15 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F46K22 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK0
   146  003738                     __pidataBANK0:
   147                           	opt stack 0
   148                           
   149                           ;initializer for _str
   150  003738  49                 	db	73
   151  003739  4E                 	db	78
   152  00373A  49                 	db	73
   153  00373B  54                 	db	84
   154  00373C  5F                 	db	95
   155  00373D  53                 	db	83
   156  00373E  55                 	db	85
   157  00373F  43                 	db	67
   158  003740  43                 	db	67
   159  003741  45                 	db	69
   160  003742  53                 	db	83
   161  003743  53                 	db	83
   162  003744  00                 	db	0
   163                           
   164                           	psect	mediumconst
   165  00FD22                     __pmediumconst:
   166                           	opt stack 0
   167  00FD22  00                 	db	0
   168  00FD23                     _dpowers:
   169                           	opt stack 0
   170  00FD23  0001               	dw	1
   171  00FD25  000A               	dw	10
   172  00FD27  0064               	dw	100
   173  00FD29  03E8               	dw	1000
   174  00FD2B  2710               	dw	10000
   175  00FD2D                     __end_of_dpowers:
   176                           	opt stack 0
   177  00FD2D                     STR_17:
   178  00FD2D  73                 	db	115	;'s'
   179  00FD2E  74                 	db	116	;'t'
   180  00FD2F  72                 	db	114	;'r'
   181  00FD30  6C                 	db	108	;'l'
   182  00FD31  65                 	db	101	;'e'
   183  00FD32  6E                 	db	110	;'n'
   184  00FD33  20                 	db	32
   185  00FD34  3D                 	db	61	;'='
   186  00FD35  20                 	db	32
   187  00FD36  25                 	db	37
   188  00FD37  64                 	db	100	;'d'
   189  00FD38  2C                 	db	44
   190  00FD39  20                 	db	32
   191  00FD3A  69                 	db	105	;'i'
   192  00FD3B  3D                 	db	61	;'='
   193  00FD3C  25                 	db	37
   194  00FD3D  64                 	db	100	;'d'
   195  00FD3E  2C                 	db	44
   196  00FD3F  20                 	db	32
   197  00FD40  63                 	db	99	;'c'
   198  00FD41  6F                 	db	111	;'o'
   199  00FD42  6C                 	db	108	;'l'
   200  00FD43  2E                 	db	46
   201  00FD44  2E                 	db	46
   202  00FD45  20                 	db	32
   203  00FD46  3D                 	db	61	;'='
   204  00FD47  20                 	db	32
   205  00FD48  25                 	db	37
   206  00FD49  64                 	db	100	;'d'
   207  00FD4A  0D                 	db	13
   208  00FD4B  0A                 	db	10
   209  00FD4C  00                 	db	0
   210  00FD4D                     STR_61:
   211  00FD4D  63                 	db	99	;'c'
   212  00FD4E  6D                 	db	109	;'m'
   213  00FD4F  64                 	db	100	;'d'
   214  00FD50  5F                 	db	95	;'_'
   215  00FD51  64                 	db	100	;'d'
   216  00FD52  61                 	db	97	;'a'
   217  00FD53  74                 	db	116	;'t'
   218  00FD54  61                 	db	97	;'a'
   219  00FD55  2E                 	db	46
   220  00FD56  73                 	db	115	;'s'
   221  00FD57  74                 	db	116	;'t'
   222  00FD58  61                 	db	97	;'a'
   223  00FD59  72                 	db	114	;'r'
   224  00FD5A  74                 	db	116	;'t'
   225  00FD5B  5F                 	db	95	;'_'
   226  00FD5C  63                 	db	99	;'c'
   227  00FD5D  6F                 	db	111	;'o'
   228  00FD5E  6C                 	db	108	;'l'
   229  00FD5F  20                 	db	32
   230  00FD60  3D                 	db	61	;'='
   231  00FD61  20                 	db	32
   232  00FD62  25                 	db	37
   233  00FD63  64                 	db	100	;'d'
   234  00FD64  2C                 	db	44
   235  00FD65  0D                 	db	13
   236  00FD66  0A                 	db	10
   237  00FD67  00                 	db	0
   238  00FD68                     STR_59:
   239  00FD68  63                 	db	99	;'c'
   240  00FD69  6D                 	db	109	;'m'
   241  00FD6A  64                 	db	100	;'d'
   242  00FD6B  5F                 	db	95	;'_'
   243  00FD6C  64                 	db	100	;'d'
   244  00FD6D  61                 	db	97	;'a'
   245  00FD6E  74                 	db	116	;'t'
   246  00FD6F  61                 	db	97	;'a'
   247  00FD70  2E                 	db	46
   248  00FD71  73                 	db	115	;'s'
   249  00FD72  74                 	db	116	;'t'
   250  00FD73  61                 	db	97	;'a'
   251  00FD74  72                 	db	114	;'r'
   252  00FD75  74                 	db	116	;'t'
   253  00FD76  5F                 	db	95	;'_'
   254  00FD77  72                 	db	114	;'r'
   255  00FD78  6F                 	db	111	;'o'
   256  00FD79  77                 	db	119	;'w'
   257  00FD7A  20                 	db	32
   258  00FD7B  3D                 	db	61	;'='
   259  00FD7C  20                 	db	32
   260  00FD7D  25                 	db	37
   261  00FD7E  64                 	db	100	;'d'
   262  00FD7F  2C                 	db	44
   263  00FD80  0D                 	db	13
   264  00FD81  0A                 	db	10
   265  00FD82  00                 	db	0
   266  00FD83                     STR_6:
   267  00FD83  64                 	db	100	;'d'
   268  00FD84  69                 	db	105	;'i'
   269  00FD85  73                 	db	115	;'s'
   270  00FD86  70                 	db	112	;'p'
   271  00FD87  6C                 	db	108	;'l'
   272  00FD88  61                 	db	97	;'a'
   273  00FD89  79                 	db	121	;'y'
   274  00FD8A  5F                 	db	95	;'_'
   275  00FD8B  63                 	db	99	;'c'
   276  00FD8C  68                 	db	104	;'h'
   277  00FD8D  61                 	db	97	;'a'
   278  00FD8E  72                 	db	114	;'r'
   279  00FD8F  5F                 	db	95	;'_'
   280  00FD90  63                 	db	99	;'c'
   281  00FD91  6F                 	db	111	;'o'
   282  00FD92  75                 	db	117	;'u'
   283  00FD93  6E                 	db	110	;'n'
   284  00FD94  74                 	db	116	;'t'
   285  00FD95  20                 	db	32
   286  00FD96  3D                 	db	61	;'='
   287  00FD97  20                 	db	32
   288  00FD98  25                 	db	37
   289  00FD99  64                 	db	100	;'d'
   290  00FD9A  0D                 	db	13
   291  00FD9B  0A                 	db	10
   292  00FD9C  00                 	db	0
   293  00FD9D                     STR_66:
   294  00FD9D  63                 	db	99	;'c'
   295  00FD9E  6D                 	db	109	;'m'
   296  00FD9F  64                 	db	100	;'d'
   297  00FDA0  5F                 	db	95	;'_'
   298  00FDA1  64                 	db	100	;'d'
   299  00FDA2  61                 	db	97	;'a'
   300  00FDA3  74                 	db	116	;'t'
   301  00FDA4  61                 	db	97	;'a'
   302  00FDA5  2E                 	db	46
   303  00FDA6  65                 	db	101	;'e'
   304  00FDA7  6E                 	db	110	;'n'
   305  00FDA8  64                 	db	100	;'d'
   306  00FDA9  5F                 	db	95	;'_'
   307  00FDAA  63                 	db	99	;'c'
   308  00FDAB  6F                 	db	111	;'o'
   309  00FDAC  6C                 	db	108	;'l'
   310  00FDAD  20                 	db	32
   311  00FDAE  3D                 	db	61	;'='
   312  00FDAF  20                 	db	32
   313  00FDB0  25                 	db	37
   314  00FDB1  64                 	db	100	;'d'
   315  00FDB2  2C                 	db	44
   316  00FDB3  0D                 	db	13
   317  00FDB4  0A                 	db	10
   318  00FDB5  00                 	db	0
   319  00FDB6                     STR_63:
   320  00FDB6  63                 	db	99	;'c'
   321  00FDB7  6D                 	db	109	;'m'
   322  00FDB8  64                 	db	100	;'d'
   323  00FDB9  5F                 	db	95	;'_'
   324  00FDBA  64                 	db	100	;'d'
   325  00FDBB  61                 	db	97	;'a'
   326  00FDBC  74                 	db	116	;'t'
   327  00FDBD  61                 	db	97	;'a'
   328  00FDBE  2E                 	db	46
   329  00FDBF  65                 	db	101	;'e'
   330  00FDC0  6E                 	db	110	;'n'
   331  00FDC1  64                 	db	100	;'d'
   332  00FDC2  5F                 	db	95	;'_'
   333  00FDC3  72                 	db	114	;'r'
   334  00FDC4  6F                 	db	111	;'o'
   335  00FDC5  77                 	db	119	;'w'
   336  00FDC6  20                 	db	32
   337  00FDC7  3D                 	db	61	;'='
   338  00FDC8  20                 	db	32
   339  00FDC9  25                 	db	37
   340  00FDCA  64                 	db	100	;'d'
   341  00FDCB  2C                 	db	44
   342  00FDCC  0D                 	db	13
   343  00FDCD  0A                 	db	10
   344  00FDCE  00                 	db	0
   345  00FDCF                     STR_19:
   346  00FDCF  69                 	db	105	;'i'
   347  00FDD0  20                 	db	32
   348  00FDD1  3D                 	db	61	;'='
   349  00FDD2  20                 	db	32
   350  00FDD3  25                 	db	37
   351  00FDD4  64                 	db	100	;'d'
   352  00FDD5  2C                 	db	44
   353  00FDD6  20                 	db	32
   354  00FDD7  63                 	db	99	;'c'
   355  00FDD8  6F                 	db	111	;'o'
   356  00FDD9  6C                 	db	108	;'l'
   357  00FDDA  2E                 	db	46
   358  00FDDB  2E                 	db	46
   359  00FDDC  32                 	db	50	;'2'
   360  00FDDD  20                 	db	32
   361  00FDDE  3D                 	db	61	;'='
   362  00FDDF  20                 	db	32
   363  00FDE0  25                 	db	37
   364  00FDE1  73                 	db	115	;'s'
   365  00FDE2  0D                 	db	13
   366  00FDE3  0A                 	db	10
   367  00FDE4  00                 	db	0
   368  00FDE5                     STR_10:
   369  00FDE5  73                 	db	115	;'s'
   370  00FDE6  69                 	db	105	;'i'
   371  00FDE7  7A                 	db	122	;'z'
   372  00FDE8  65                 	db	101	;'e'
   373  00FDE9  6F                 	db	111	;'o'
   374  00FDEA  66                 	db	102	;'f'
   375  00FDEB  28                 	db	40
   376  00FDEC  73                 	db	115	;'s'
   377  00FDED  74                 	db	116	;'t'
   378  00FDEE  72                 	db	114	;'r'
   379  00FDEF  29                 	db	41
   380  00FDF0  20                 	db	32
   381  00FDF1  3D                 	db	61	;'='
   382  00FDF2  20                 	db	32
   383  00FDF3  25                 	db	37
   384  00FDF4  64                 	db	100	;'d'
   385  00FDF5  0D                 	db	13
   386  00FDF6  0A                 	db	10
   387  00FDF7  00                 	db	0
   388  00FDF8                     STR_117:
   389  00FDF8  49                 	db	73	;'I'
   390  00FDF9  6E                 	db	110	;'n'
   391  00FDFA  69                 	db	105	;'i'
   392  00FDFB  74                 	db	116	;'t'
   393  00FDFC  5F                 	db	95	;'_'
   394  00FDFD  63                 	db	99	;'c'
   395  00FDFE  6F                 	db	111	;'o'
   396  00FDFF  6D                 	db	109	;'m'
   397  00FE00  70                 	db	112	;'p'
   398  00FE01  6C                 	db	108	;'l'
   399  00FE02  65                 	db	101	;'e'
   400  00FE03  74                 	db	116	;'t'
   401  00FE04  65                 	db	101	;'e'
   402  00FE05  2E                 	db	46
   403  00FE06  2E                 	db	46
   404  00FE07  0D                 	db	13
   405  00FE08  0A                 	db	10
   406  00FE09  00                 	db	0
   407  00FE0A                     STR_3:
   408  00FE0A  73                 	db	115	;'s'
   409  00FE0B  74                 	db	116	;'t'
   410  00FE0C  72                 	db	114	;'r'
   411  00FE0D  69                 	db	105	;'i'
   412  00FE0E  6E                 	db	110	;'n'
   413  00FE0F  67                 	db	103	;'g'
   414  00FE10  5F                 	db	95	;'_'
   415  00FE11  63                 	db	99	;'c'
   416  00FE12  6F                 	db	111	;'o'
   417  00FE13  75                 	db	117	;'u'
   418  00FE14  6E                 	db	110	;'n'
   419  00FE15  74                 	db	116	;'t'
   420  00FE16  20                 	db	32
   421  00FE17  3D                 	db	61	;'='
   422  00FE18  20                 	db	32
   423  00FE19  25                 	db	37
   424  00FE1A  64                 	db	100	;'d'
   425  00FE1B  00                 	db	0
   426  00FE1C                     STR_4:
   427  00FE1C  75                 	db	117	;'u'
   428  00FE1D  69                 	db	105	;'i'
   429  00FE1E  64                 	db	100	;'d'
   430  00FE1F  5F                 	db	95	;'_'
   431  00FE20  72                 	db	114	;'r'
   432  00FE21  61                 	db	97	;'a'
   433  00FE22  6E                 	db	110	;'n'
   434  00FE23  67                 	db	103	;'g'
   435  00FE24  65                 	db	101	;'e'
   436  00FE25  20                 	db	32
   437  00FE26  3D                 	db	61	;'='
   438  00FE27  20                 	db	32
   439  00FE28  25                 	db	37
   440  00FE29  64                 	db	100	;'d'
   441  00FE2A  0D                 	db	13
   442  00FE2B  0A                 	db	10
   443  00FE2C  00                 	db	0
   444  00FE2D  6D                 	db	109	;'m'
   445  00FE2E  69                 	db	105	;'i'
   446  00FE2F  64                 	db	100	;'d'
   447  00FE30  5F                 	db	95	;'_'
   448  00FE31  63                 	db	99	;'c'
   449  00FE32  68                 	db	104	;'h'
   450  00FE33  61                 	db	97	;'a'
   451  00FE34  72                 	db	114	;'r'
   452  00FE35  20                 	db	32
   453  00FE36  3D                 	db	61	;'='
   454  00FE37  20                 	db	32
   455  00FE38  25                 	db	37
   456  00FE39  64                 	db	100	;'d'
   457  00FE3A  0D                 	db	13
   458  00FE3B  0A                 	db	10
   459  00FE3C  00                 	db	0
   460  00FE3D  25                 	db	37
   461  00FE3E  73                 	db	115	;'s'
   462  00FE3F  2C                 	db	44
   463  00FE40  20                 	db	32
   464  00FE41  73                 	db	115	;'s'
   465  00FE42  74                 	db	116	;'t'
   466  00FE43  72                 	db	114	;'r'
   467  00FE44  6C                 	db	108	;'l'
   468  00FE45  65                 	db	101	;'e'
   469  00FE46  6E                 	db	110	;'n'
   470  00FE47  20                 	db	32
   471  00FE48  25                 	db	37
   472  00FE49  64                 	db	100	;'d'
   473  00FE4A  0D                 	db	13
   474  00FE4B  0A                 	db	10
   475  00FE4C  00                 	db	0
   476  00FE4D                     STR_7:
   477  00FE4D  63                 	db	99	;'c'
   478  00FE4E  6F                 	db	111	;'o'
   479  00FE4F  6E                 	db	110	;'n'
   480  00FE50  66                 	db	102	;'f'
   481  00FE51  6C                 	db	108	;'l'
   482  00FE52  69                 	db	105	;'i'
   483  00FE53  63                 	db	99	;'c'
   484  00FE54  74                 	db	116	;'t'
   485  00FE55  3A                 	db	58	;':'
   486  00FE56  20                 	db	32
   487  00FE57  75                 	db	117	;'u'
   488  00FE58  69                 	db	105	;'i'
   489  00FE59  64                 	db	100	;'d'
   490  00FE5A  0D                 	db	13
   491  00FE5B  0A                 	db	10
   492  00FE5C  00                 	db	0
   493  00FE5D                     STR_18:
   494  00FE5D  73                 	db	115	;'s'
   495  00FE5E  74                 	db	116	;'t'
   496  00FE5F  72                 	db	114	;'r'
   497  00FE60  5B                 	db	91	;'['
   498  00FE61  25                 	db	37
   499  00FE62  64                 	db	100	;'d'
   500  00FE63  5D                 	db	93	;']'
   501  00FE64  20                 	db	32
   502  00FE65  3D                 	db	61	;'='
   503  00FE66  20                 	db	32
   504  00FE67  25                 	db	37
   505  00FE68  64                 	db	100	;'d'
   506  00FE69  0D                 	db	13
   507  00FE6A  0A                 	db	10
   508  00FE6B  00                 	db	0
   509  00FE6C                     STR_110:
   510  00FE6C  45                 	db	69	;'E'
   511  00FE6D  52                 	db	82	;'R'
   512  00FE6E  52                 	db	82	;'R'
   513  00FE6F  5F                 	db	95	;'_'
   514  00FE70  53                 	db	83	;'S'
   515  00FE71  43                 	db	67	;'C'
   516  00FE72  52                 	db	82	;'R'
   517  00FE73  4F                 	db	79	;'O'
   518  00FE74  4C                 	db	76	;'L'
   519  00FE75  4C                 	db	76	;'L'
   520  00FE76  5F                 	db	95	;'_'
   521  00FE77  53                 	db	83	;'S'
   522  00FE78  45                 	db	69	;'E'
   523  00FE79  54                 	db	84	;'T'
   524  00FE7A  00                 	db	0
   525  00FE7B                     STR_16:
   526  00FE7B  63                 	db	99	;'c'
   527  00FE7C  6F                 	db	111	;'o'
   528  00FE7D  6C                 	db	108	;'l'
   529  00FE7E  2E                 	db	46
   530  00FE7F  2E                 	db	46
   531  00FE80  31                 	db	49	;'1'
   532  00FE81  20                 	db	32
   533  00FE82  3D                 	db	61	;'='
   534  00FE83  20                 	db	32
   535  00FE84  25                 	db	37
   536  00FE85  73                 	db	115	;'s'
   537  00FE86  0D                 	db	13
   538  00FE87  0A                 	db	10
   539  00FE88  00                 	db	0
   540  00FE89                     STR_53:
   541  00FE89  73                 	db	115	;'s'
   542  00FE8A  63                 	db	99	;'c'
   543  00FE8B  72                 	db	114	;'r'
   544  00FE8C  6F                 	db	111	;'o'
   545  00FE8D  6C                 	db	108	;'l'
   546  00FE8E  6C                 	db	108	;'l'
   547  00FE8F  20                 	db	32
   548  00FE90  3D                 	db	61	;'='
   549  00FE91  20                 	db	32
   550  00FE92  25                 	db	37
   551  00FE93  64                 	db	100	;'d'
   552  00FE94  2C                 	db	44
   553  00FE95  20                 	db	32
   554  00FE96  00                 	db	0
   555  00FE97                     STR_73:
   556  00FE97  0D                 	db	13
   557  00FE98  0A                 	db	10
   558  00FE99  25                 	db	37
   559  00FE9A  73                 	db	115	;'s'
   560  00FE9B  2E                 	db	46
   561  00FE9C  2E                 	db	46
   562  00FE9D  2C                 	db	44
   563  00FE9E  20                 	db	32
   564  00FE9F  4F                 	db	79	;'O'
   565  00FEA0  4B                 	db	75	;'K'
   566  00FEA1  0D                 	db	13
   567  00FEA2  0A                 	db	10
   568  00FEA3  00                 	db	0
   569  00FEA4                     STR_57:
   570  00FEA4  75                 	db	117	;'u'
   571  00FEA5  69                 	db	105	;'i'
   572  00FEA6  64                 	db	100	;'d'
   573  00FEA7  20                 	db	32
   574  00FEA8  3D                 	db	61	;'='
   575  00FEA9  20                 	db	32
   576  00FEAA  25                 	db	37
   577  00FEAB  64                 	db	100	;'d'
   578  00FEAC  2C                 	db	44
   579  00FEAD  0D                 	db	13
   580  00FEAE  0A                 	db	10
   581  00FEAF  00                 	db	0
   582  00FEB0                     STR_114:
   583  00FEB0  49                 	db	73	;'I'
   584  00FEB1  6E                 	db	110	;'n'
   585  00FEB2  69                 	db	105	;'i'
   586  00FEB3  74                 	db	116	;'t'
   587  00FEB4  5F                 	db	95	;'_'
   588  00FEB5  44                 	db	68	;'D'
   589  00FEB6  6F                 	db	111	;'o'
   590  00FEB7  6E                 	db	110	;'n'
   591  00FEB8  65                 	db	101	;'e'
   592  00FEB9  0D                 	db	13
   593  00FEBA  0A                 	db	10
   594  00FEBB  00                 	db	0
   595  00FEBC                     STR_39:
   596  00FEBC  74                 	db	116	;'t'
   597  00FEBD  65                 	db	101	;'e'
   598  00FEBE  6D                 	db	109	;'m'
   599  00FEBF  70                 	db	112	;'p'
   600  00FEC0  20                 	db	32
   601  00FEC1  3D                 	db	61	;'='
   602  00FEC2  20                 	db	32
   603  00FEC3  25                 	db	37
   604  00FEC4  73                 	db	115	;'s'
   605  00FEC5  2C                 	db	44
   606  00FEC6  20                 	db	32
   607  00FEC7  00                 	db	0
   608  00FEC8                     STR_108:
   609  00FEC8  45                 	db	69	;'E'
   610  00FEC9  52                 	db	82	;'R'
   611  00FECA  52                 	db	82	;'R'
   612  00FECB  5F                 	db	95	;'_'
   613  00FECC  52                 	db	82	;'R'
   614  00FECD  4F                 	db	79	;'O'
   615  00FECE  57                 	db	87	;'W'
   616  00FECF  5F                 	db	95	;'_'
   617  00FED0  43                 	db	67	;'C'
   618  00FED1  4F                 	db	79	;'O'
   619  00FED2  4C                 	db	76	;'L'
   620  00FED3  00                 	db	0
   621  00FED4                     STR_45:
   622  00FED4  4B                 	db	75	;'K'
   623  00FED5  4C                 	db	76	;'L'
   624  00FED6  4D                 	db	77	;'M'
   625  00FED7  2B                 	db	43
   626  00FED8  53                 	db	83	;'S'
   627  00FED9  44                 	db	68	;'D'
   628  00FEDA  53                 	db	83	;'S'
   629  00FEDB  43                 	db	67	;'C'
   630  00FEDC  52                 	db	82	;'R'
   631  00FEDD  4F                 	db	79	;'O'
   632  00FEDE  4C                 	db	76	;'L'
   633  00FEDF  00                 	db	0
   634  00FEE0                     STR_113:
   635  00FEE0  45                 	db	69	;'E'
   636  00FEE1  52                 	db	82	;'R'
   637  00FEE2  52                 	db	82	;'R'
   638  00FEE3  5F                 	db	95	;'_'
   639  00FEE4  43                 	db	67	;'C'
   640  00FEE5  4D                 	db	77	;'M'
   641  00FEE6  44                 	db	68	;'D'
   642  00FEE7  5F                 	db	95	;'_'
   643  00FEE8  4C                 	db	76	;'L'
   644  00FEE9  45                 	db	69	;'E'
   645  00FEEA  4E                 	db	78	;'N'
   646  00FEEB  00                 	db	0
   647  00FEEC                     STR_106:
   648  00FEEC  45                 	db	69	;'E'
   649  00FEED  52                 	db	82	;'R'
   650  00FEEE  52                 	db	82	;'R'
   651  00FEEF  5F                 	db	95	;'_'
   652  00FEF0  53                 	db	83	;'S'
   653  00FEF1  54                 	db	84	;'T'
   654  00FEF2  52                 	db	82	;'R'
   655  00FEF3  5F                 	db	95	;'_'
   656  00FEF4  53                 	db	83	;'S'
   657  00FEF5  45                 	db	69	;'E'
   658  00FEF6  54                 	db	84	;'T'
   659  00FEF7  00                 	db	0
   660  00FEF8                     STR_87:
   661  00FEF8  25                 	db	37
   662  00FEF9  64                 	db	100	;'d'
   663  00FEFA  2C                 	db	44
   664  00FEFB  25                 	db	37
   665  00FEFC  63                 	db	99	;'c'
   666  00FEFD  2D                 	db	45
   667  00FEFE  25                 	db	37
   668  00FEFF  63                 	db	99	;'c'
   669  00FF00  0D                 	db	13
   670  00FF01  0A                 	db	10
   671  00FF02  00                 	db	0
   672  00FF03                     STR_21:
   673  00FF03  43                 	db	67	;'C'
   674  00FF04  6F                 	db	111	;'o'
   675  00FF05  6C                 	db	108	;'l'
   676  00FF06  20                 	db	32
   677  00FF07  3D                 	db	61	;'='
   678  00FF08  20                 	db	32
   679  00FF09  25                 	db	37
   680  00FF0A  64                 	db	100	;'d'
   681  00FF0B  0D                 	db	13
   682  00FF0C  0A                 	db	10
   683  00FF0D  00                 	db	0
   684  00FF0E                     STR_15:
   685  00FF0E  72                 	db	114	;'r'
   686  00FF0F  6F                 	db	111	;'o'
   687  00FF10  77                 	db	119	;'w'
   688  00FF11  20                 	db	32
   689  00FF12  3D                 	db	61	;'='
   690  00FF13  20                 	db	32
   691  00FF14  25                 	db	37
   692  00FF15  64                 	db	100	;'d'
   693  00FF16  0D                 	db	13
   694  00FF17  0A                 	db	10
   695  00FF18  00                 	db	0
   696  00FF19                     STR_65:
   697  00FF19  63                 	db	99	;'c'
   698  00FF1A  6F                 	db	111	;'o'
   699  00FF1B  6C                 	db	108	;'l'
   700  00FF1C  20                 	db	32
   701  00FF1D  3D                 	db	61	;'='
   702  00FF1E  20                 	db	32
   703  00FF1F  25                 	db	37
   704  00FF20  73                 	db	115	;'s'
   705  00FF21  0D                 	db	13
   706  00FF22  0A                 	db	10
   707  00FF23  00                 	db	0
   708  00FF24                     STR_44:
   709  00FF24  73                 	db	115	;'s'
   710  00FF25  74                 	db	116	;'t'
   711  00FF26  72                 	db	114	;'r'
   712  00FF27  20                 	db	32
   713  00FF28  3D                 	db	61	;'='
   714  00FF29  20                 	db	32
   715  00FF2A  25                 	db	37
   716  00FF2B  73                 	db	115	;'s'
   717  00FF2C  0D                 	db	13
   718  00FF2D  0A                 	db	10
   719  00FF2E  00                 	db	0
   720  00FF2F                     STR_42:
   721  00FF2F  75                 	db	117	;'u'
   722  00FF30  69                 	db	105	;'i'
   723  00FF31  64                 	db	100	;'d'
   724  00FF32  20                 	db	32
   725  00FF33  3D                 	db	61	;'='
   726  00FF34  20                 	db	32
   727  00FF35  25                 	db	37
   728  00FF36  64                 	db	100	;'d'
   729  00FF37  2C                 	db	44
   730  00FF38  20                 	db	32
   731  00FF39  00                 	db	0
   732  00FF3A                     STR_54:
   733  00FF3A  4B                 	db	75	;'K'
   734  00FF3B  4C                 	db	76	;'L'
   735  00FF3C  4D                 	db	77	;'M'
   736  00FF3D  2B                 	db	43
   737  00FF3E  53                 	db	83	;'S'
   738  00FF3F  44                 	db	68	;'D'
   739  00FF40  53                 	db	83	;'S'
   740  00FF41  45                 	db	69	;'E'
   741  00FF42  52                 	db	82	;'R'
   742  00FF43  43                 	db	67	;'C'
   743  00FF44  00                 	db	0
   744  00FF45                     STR_67:
   745  00FF45  4B                 	db	75	;'K'
   746  00FF46  4C                 	db	76	;'L'
   747  00FF47  4D                 	db	77	;'M'
   748  00FF48  2B                 	db	43
   749  00FF49  55                 	db	85	;'U'
   750  00FF4A  50                 	db	80	;'P'
   751  00FF4B  44                 	db	68	;'D'
   752  00FF4C  41                 	db	65	;'A'
   753  00FF4D  54                 	db	84	;'T'
   754  00FF4E  45                 	db	69	;'E'
   755  00FF4F  00                 	db	0
   756  00FF50                     STR_27:
   757  00FF50  4B                 	db	75	;'K'
   758  00FF51  4C                 	db	76	;'L'
   759  00FF52  4D                 	db	77	;'M'
   760  00FF53  2B                 	db	43
   761  00FF54  4C                 	db	76	;'L'
   762  00FF55  43                 	db	67	;'C'
   763  00FF56  44                 	db	68	;'D'
   764  00FF57  53                 	db	83	;'S'
   765  00FF58  3F                 	db	63	;'?'
   766  00FF59  00                 	db	0
   767  00FF5A                     STR_35:
   768  00FF5A  4B                 	db	75	;'K'
   769  00FF5B  4C                 	db	76	;'L'
   770  00FF5C  4D                 	db	77	;'M'
   771  00FF5D  2B                 	db	43
   772  00FF5E  47                 	db	71	;'G'
   773  00FF5F  4D                 	db	77	;'M'
   774  00FF60  44                 	db	68	;'D'
   775  00FF61  53                 	db	83	;'S'
   776  00FF62  3F                 	db	63	;'?'
   777  00FF63  00                 	db	0
   778  00FF64                     STR_37:
   779  00FF64  4B                 	db	75	;'K'
   780  00FF65  4C                 	db	76	;'L'
   781  00FF66  4D                 	db	77	;'M'
   782  00FF67  2B                 	db	43
   783  00FF68  53                 	db	83	;'S'
   784  00FF69  44                 	db	68	;'D'
   785  00FF6A  53                 	db	83	;'S'
   786  00FF6B  54                 	db	84	;'T'
   787  00FF6C  52                 	db	82	;'R'
   788  00FF6D  00                 	db	0
   789  00FF6E                     STR_46:
   790  00FF6E  25                 	db	37
   791  00FF6F  73                 	db	115	;'s'
   792  00FF70  2E                 	db	46
   793  00FF71  2E                 	db	46
   794  00FF72  2E                 	db	46
   795  00FF73  34                 	db	52	;'4'
   796  00FF74  0D                 	db	13
   797  00FF75  0A                 	db	10
   798  00FF76  00                 	db	0
   799  00FF77                     STR_49:
   800  00FF77  25                 	db	37
   801  00FF78  73                 	db	115	;'s'
   802  00FF79  2E                 	db	46
   803  00FF7A  2E                 	db	46
   804  00FF7B  2E                 	db	46
   805  00FF7C  35                 	db	53	;'5'
   806  00FF7D  0D                 	db	13
   807  00FF7E  0A                 	db	10
   808  00FF7F  00                 	db	0
   809  00FF80                     STR_52:
   810  00FF80  25                 	db	37
   811  00FF81  73                 	db	115	;'s'
   812  00FF82  2E                 	db	46
   813  00FF83  2E                 	db	46
   814  00FF84  2E                 	db	46
   815  00FF85  36                 	db	54	;'6'
   816  00FF86  0D                 	db	13
   817  00FF87  0A                 	db	10
   818  00FF88  00                 	db	0
   819  00FF89                     STR_30:
   820  00FF89  4B                 	db	75	;'K'
   821  00FF8A  4C                 	db	76	;'L'
   822  00FF8B  4D                 	db	77	;'M'
   823  00FF8C  2B                 	db	43
   824  00FF8D  4C                 	db	76	;'L'
   825  00FF8E  43                 	db	67	;'C'
   826  00FF8F  44                 	db	68	;'D'
   827  00FF90  53                 	db	83	;'S'
   828  00FF91  00                 	db	0
   829  00FF92                     STR_2:
   830  00FF92  63                 	db	99	;'c'
   831  00FF93  6F                 	db	111	;'o'
   832  00FF94  6C                 	db	108	;'l'
   833  00FF95  20                 	db	32
   834  00FF96  3D                 	db	61	;'='
   835  00FF97  20                 	db	32
   836  00FF98  25                 	db	37
   837  00FF99  64                 	db	100	;'d'
   838  00FF9A  00                 	db	0
   839  00FF9B                     STR_1:
   840  00FF9B  72                 	db	114	;'r'
   841  00FF9C  6F                 	db	111	;'o'
   842  00FF9D  77                 	db	119	;'w'
   843  00FF9E  20                 	db	32
   844  00FF9F  3D                 	db	61	;'='
   845  00FFA0  20                 	db	32
   846  00FFA1  25                 	db	37
   847  00FFA2  64                 	db	100	;'d'
   848  00FFA3  00                 	db	0
   849  00FFA4                     STR_29:
   850  00FFA4  2E                 	db	46
   851  00FFA5  2E                 	db	46
   852  00FFA6  2E                 	db	46
   853  00FFA7  2E                 	db	46
   854  00FFA8  2E                 	db	46
   855  00FFA9  0D                 	db	13
   856  00FFAA  0A                 	db	10
   857  00FFAB  00                 	db	0
   858  00FFAC                     STR_22:
   859  00FFAC  25                 	db	37
   860  00FFAD  73                 	db	115	;'s'
   861  00FFAE  2E                 	db	46
   862  00FFAF  2E                 	db	46
   863  00FFB0  32                 	db	50	;'2'
   864  00FFB1  0D                 	db	13
   865  00FFB2  0A                 	db	10
   866  00FFB3  00                 	db	0
   867  00FFB4                     STR_23:
   868  00FFB4  4B                 	db	75	;'K'
   869  00FFB5  4C                 	db	76	;'L'
   870  00FFB6  4D                 	db	77	;'M'
   871  00FFB7  2B                 	db	43
   872  00FFB8  4D                 	db	77	;'M'
   873  00FFB9  43                 	db	67	;'C'
   874  00FFBA  3F                 	db	63	;'?'
   875  00FFBB  00                 	db	0
   876  00FFBC                     STR_25:
   877  00FFBC  4B                 	db	75	;'K'
   878  00FFBD  4C                 	db	76	;'L'
   879  00FFBE  4D                 	db	77	;'M'
   880  00FFBF  2B                 	db	43
   881  00FFC0  4D                 	db	77	;'M'
   882  00FFC1  52                 	db	82	;'R'
   883  00FFC2  3F                 	db	63	;'?'
   884  00FFC3  00                 	db	0
   885  00FFC4                     STR_14:
   886  00FFC4  69                 	db	105	;'i'
   887  00FFC5  3D                 	db	61	;'='
   888  00FFC6  25                 	db	37
   889  00FFC7  64                 	db	100	;'d'
   890  00FFC8  2C                 	db	44
   891  00FFC9  0D                 	db	13
   892  00FFCA  0A                 	db	10
   893  00FFCB  00                 	db	0
   894  00FFCC                     STR_118:
   895  00FFCC  28                 	db	40
   896  00FFCD  6E                 	db	110	;'n'
   897  00FFCE  75                 	db	117	;'u'
   898  00FFCF  6C                 	db	108	;'l'
   899  00FFD0  6C                 	db	108	;'l'
   900  00FFD1  29                 	db	41
   901  00FFD2  00                 	db	0
   902  00FFD3                     STR_33:
   903  00FFD3  25                 	db	37
   904  00FFD4  73                 	db	115	;'s'
   905  00FFD5  2E                 	db	46
   906  00FFD6  2E                 	db	46
   907  00FFD7  0D                 	db	13
   908  00FFD8  0A                 	db	10
   909  00FFD9  00                 	db	0
   910  00FFDA                     STR_105:
   911  00FFDA  0D                 	db	13
   912  00FFDB  0A                 	db	10
   913  00FFDC  25                 	db	37
   914  00FFDD  73                 	db	115	;'s'
   915  00FFDE  0D                 	db	13
   916  00FFDF  0A                 	db	10
   917  00FFE0  00                 	db	0
   918  00FFE1                     STR_24:
   919  00FFE1  2D                 	db	45
   920  00FFE2  27                 	db	39
   921  00FFE3  2C                 	db	44
   922  00FFE4  20                 	db	32
   923  00FFE5  2F                 	db	47
   924  00FFE6  3D                 	db	61	;'='
   925  00FFE7  00                 	db	0
   926  00FFE8                     STR_102:
   927  00FFE8  45                 	db	69	;'E'
   928  00FFE9  52                 	db	82	;'R'
   929  00FFEA  52                 	db	82	;'R'
   930  00FFEB  4F                 	db	79	;'O'
   931  00FFEC  52                 	db	82	;'R'
   932  00FFED  00                 	db	0
   933  00FFEE                     STR_8:
   934  00FFEE  25                 	db	37
   935  00FFEF  63                 	db	99	;'c'
   936  00FFF0  2C                 	db	44
   937  00FFF1  20                 	db	32
   938  00FFF2  00                 	db	0
   939  00FFF3                     STR_5:
   940  00FFF3  34                 	db	52	;'4'
   941  00FFF4  2C                 	db	44
   942  00FFF5  32                 	db	50	;'2'
   943  00FFF6  30                 	db	48	;'0'
   944  00FFF7  00                 	db	0
   945  00FFF8                     STR_68:
   946  00FFF8  4B                 	db	75	;'K'
   947  00FFF9  4C                 	db	76	;'L'
   948  00FFFA  4D                 	db	77	;'M'
   949  00FFFB  00                 	db	0
   950  00FFFC                     STR_112:
   951  00FFFC  25                 	db	37
   952  00FFFD  63                 	db	99	;'c'
   953  00FFFE  00                 	db	0
   954  0000                     
   955                           ; #config settings
   956  00FFFF  00                 	db	0	; dummy byte at the end
   957  0000                     
   958                           	psect	nvCOMRAM
   959  00004E                     __pnvCOMRAM:
   960                           	opt stack 0
   961  00004E                     _timer0ReloadVal:
   962                           	opt stack 0
   963  00004E                     	ds	2
   964                           
   965                           	psect	nvBANK0
   966  0000F9                     __pnvBANK0:
   967                           	opt stack 0
   968  0000F9                     _TMR0_InterruptHandler:
   969                           	opt stack 0
   970  0000F9                     	ds	2
   971  0000FB                     _timer1ReloadVal:
   972                           	opt stack 0
   973  0000FB                     	ds	2
   974  0000FD                     _timer5ReloadVal:
   975                           	opt stack 0
   976  0000FD                     	ds	2
   977  0000FF                     _eusart1TxBufferRemaining:
   978                           	opt stack 0
   979  0000FF                     	ds	1
   980  0000                     _TMR5	set	3919
   981  0000                     _ANSELA	set	3896
   982  0000                     _ANSELB	set	3897
   983  0000                     _ANSELC	set	3898
   984  0000                     _ANSELD	set	3899
   985  0000                     _ANSELE	set	3900
   986  0000                     _T5CON	set	3918
   987  0000                     _T5CONbits	set	3918
   988  0000                     _T5GCON	set	3917
   989  0000                     _T5GCONbits	set	3917
   990  0000                     _TMR5H	set	3920
   991  0000                     _TMR5L	set	3919
   992  0000                     _TMR1	set	4046
   993  0000                     _BAUDCON1	set	4024
   994  0000                     _INTCON2bits	set	4081
   995  0000                     _INTCONbits	set	4082
   996  0000                     _LATA	set	3977
   997  0000                     _LATB	set	3978
   998  0000                     _LATC	set	3979
   999  0000                     _LATD	set	3980
  1000  0000                     _LATE	set	3981
  1001  0000                     _LATEbits	set	3981
  1002  0000                     _OSCCON	set	4051
  1003  0000                     _OSCCON2	set	4050
  1004  0000                     _OSCTUNE	set	3995
  1005  0000                     _PIE1bits	set	3997
  1006  0000                     _PIR1bits	set	3998
  1007  0000                     _PIR5bits	set	3966
  1008  0000                     _PORTAbits	set	3968
  1009  0000                     _PORTD	set	3971
  1010  0000                     _PORTDbits	set	3971
  1011  0000                     _RCONbits	set	4048
  1012  0000                     _RCREG1	set	4014
  1013  0000                     _RCSTA1	set	4011
  1014  0000                     _RCSTA1bits	set	4011
  1015  0000                     _SPBRG1	set	4015
  1016  0000                     _SPBRGH1	set	4016
  1017  0000                     _T0CON	set	4053
  1018  0000                     _T0CONbits	set	4053
  1019  0000                     _T1CON	set	4045
  1020  0000                     _T1CONbits	set	4045
  1021  0000                     _T1GCON	set	4044
  1022  0000                     _T1GCONbits	set	4044
  1023  0000                     _TMR0H	set	4055
  1024  0000                     _TMR0L	set	4054
  1025  0000                     _TMR1H	set	4047
  1026  0000                     _TMR1L	set	4046
  1027  0000                     _TRISA	set	3986
  1028  0000                     _TRISB	set	3987
  1029  0000                     _TRISC	set	3988
  1030  0000                     _TRISD	set	3989
  1031  0000                     _TRISE	set	3990
  1032  0000                     _TXREG1	set	4013
  1033  0000                     _TXSTA1	set	4012
  1034  0000                     _WPUB	set	3937
  1035                           
  1036                           	psect	cinit
  1037  002E9C                     __pcinit:
  1038                           	opt stack 0
  1039  002E9C                     start_initialization:
  1040                           	opt stack 0
  1041  002E9C                     __initialization:
  1042                           	opt stack 0
  1043                           
  1044                           ; Initialize objects allocated to BANK0 (13 bytes)
  1045                           ; load TBLPTR registers with __pidataBANK0
  1046  002E9C  0E38               	movlw	low __pidataBANK0
  1047  002E9E  6EF6               	movwf	tblptrl,c
  1048  002EA0  0E37               	movlw	high __pidataBANK0
  1049  002EA2  6EF7               	movwf	tblptrh,c
  1050  002EA4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1051  002EA6  6EF8               	movwf	tblptru,c
  1052  002EA8  EE00  F0EC         	lfsr	0,__pdataBANK0
  1053  002EAC  EE10 F00D          	lfsr	1,13
  1054  002EB0                     copy_data0:
  1055  002EB0  0009               	tblrd		*+
  1056  002EB2  CFF5 FFEE          	movff	tablat,postinc0
  1057  002EB6  50E5               	movf	postdec1,w,c
  1058  002EB8  50E1               	movf	fsr1l,w,c
  1059  002EBA  E1FA               	bnz	copy_data0
  1060                           
  1061                           ; Clear objects allocated to BIGRAM (1080 bytes)
  1062  002EBC  EE02  F096         	lfsr	0,__pbssBIGRAM
  1063  002EC0  EE14 F038          	lfsr	1,1080
  1064  002EC4                     clear_0:
  1065  002EC4  6AEE               	clrf	postinc0,c
  1066  002EC6  50E5               	movf	postdec1,w,c
  1067  002EC8  50E1               	movf	fsr1l,w,c
  1068  002ECA  E1FC               	bnz	clear_0
  1069  002ECC  50E2               	movf	fsr1h,w,c
  1070  002ECE  E1FA               	bnz	clear_0
  1071                           
  1072                           ; Clear objects allocated to BANK2 (150 bytes)
  1073  002ED0  EE02  F000         	lfsr	0,__pbssBANK2
  1074  002ED4  0E96               	movlw	150
  1075  002ED6                     clear_1:
  1076  002ED6  6AEE               	clrf	postinc0,c
  1077  002ED8  06E8               	decf	wreg,f,c
  1078  002EDA  E1FD               	bnz	clear_1
  1079                           
  1080                           ; Clear objects allocated to BANK1 (120 bytes)
  1081  002EDC  EE01  F000         	lfsr	0,__pbssBANK1
  1082  002EE0  0E78               	movlw	120
  1083  002EE2                     clear_2:
  1084  002EE2  6AEE               	clrf	postinc0,c
  1085  002EE4  06E8               	decf	wreg,f,c
  1086  002EE6  E1FD               	bnz	clear_2
  1087                           
  1088                           ; Clear objects allocated to BANK0 (122 bytes)
  1089  002EE8  EE00  F060         	lfsr	0,__pbssBANK0
  1090  002EEC  0E7A               	movlw	122
  1091  002EEE                     clear_3:
  1092  002EEE  6AEE               	clrf	postinc0,c
  1093  002EF0  06E8               	decf	wreg,f,c
  1094  002EF2  E1FD               	bnz	clear_3
  1095                           
  1096                           ; Clear objects allocated to COMRAM (13 bytes)
  1097  002EF4  EE00  F041         	lfsr	0,__pbssCOMRAM
  1098  002EF8  0E0D               	movlw	13
  1099  002EFA                     clear_4:
  1100  002EFA  6AEE               	clrf	postinc0,c
  1101  002EFC  06E8               	decf	wreg,f,c
  1102  002EFE  E1FD               	bnz	clear_4
  1103  002F00                     end_of_initialization:
  1104                           	opt stack 0
  1105  002F00                     __end_of__initialization:
  1106                           	opt stack 0
  1107  002F00  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1108  002F02  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1109  002F04  0100               	movlb	0
  1110  002F06  EFE1  F017         	goto	_main	;jump to C main() function
  1111                           tblptru	equ	0xFF8
  1112                           tblptrh	equ	0xFF7
  1113                           tblptrl	equ	0xFF6
  1114                           tablat	equ	0xFF5
  1115                           postinc0	equ	0xFEE
  1116                           wreg	equ	0xFE8
  1117                           postdec1	equ	0xFE5
  1118                           fsr1h	equ	0xFE2
  1119                           fsr1l	equ	0xFE1
  1120                           
  1121                           	psect	bssCOMRAM
  1122  000041                     __pbssCOMRAM:
  1123                           	opt stack 0
  1124  000041                     _LCD_16x2_DISPLAY:
  1125                           	opt stack 0
  1126  000041                     	ds	1
  1127  000042                     _conflict_data_count:
  1128                           	opt stack 0
  1129  000042                     	ds	1
  1130  000043                     _data_count:
  1131                           	opt stack 0
  1132  000043                     	ds	1
  1133  000044                     _eusart1RxCount:
  1134                           	opt stack 0
  1135  000044                     	ds	1
  1136  000045                     _eusart1RxHead:
  1137                           	opt stack 0
  1138  000045                     	ds	1
  1139  000046                     _eusart1RxTail:
  1140                           	opt stack 0
  1141  000046                     	ds	1
  1142  000047                     _eusart1TxHead:
  1143                           	opt stack 0
  1144  000047                     	ds	1
  1145  000048                     _eusart1TxTail:
  1146                           	opt stack 0
  1147  000048                     	ds	1
  1148  000049                     _clcd_config_data:
  1149                           	opt stack 0
  1150  000049                     	ds	5
  1151                           tblptru	equ	0xFF8
  1152                           tblptrh	equ	0xFF7
  1153                           tblptrl	equ	0xFF6
  1154                           tablat	equ	0xFF5
  1155                           postinc0	equ	0xFEE
  1156                           wreg	equ	0xFE8
  1157                           postdec1	equ	0xFE5
  1158                           fsr1h	equ	0xFE2
  1159                           fsr1l	equ	0xFE1
  1160                           
  1161                           	psect	bssBANK0
  1162  000060                     __pbssBANK0:
  1163                           	opt stack 0
  1164  000060                     _eusart1RxBuffer:
  1165                           	opt stack 0
  1166  000060                     	ds	8
  1167  000068                     _eusart1TxBuffer:
  1168                           	opt stack 0
  1169  000068                     	ds	8
  1170  000070                     _TMR1_InterruptHandler:
  1171                           	opt stack 0
  1172  000070                     	ds	2
  1173  000072                     _TMR5_InterruptHandler:
  1174                           	opt stack 0
  1175  000072                     	ds	2
  1176  000074                     _display_struct_count:
  1177                           	opt stack 0
  1178  000074                     	ds	2
  1179  000076                     _print_data_ready:
  1180                           	opt stack 0
  1181  000076                     	ds	2
  1182  000078                     	ds	2
  1183  00007A                     cmd_consol_task@i:
  1184                           	opt stack 0
  1185  00007A                     	ds	2
  1186  00007C                     strtok@sp:
  1187                           	opt stack 0
  1188  00007C                     	ds	2
  1189  00007E                     _LCD_20x4_DISPLAY:
  1190                           	opt stack 0
  1191  00007E                     	ds	1
  1192  00007F                     _check:
  1193                           	opt stack 0
  1194  00007F                     	ds	1
  1195  000080                     _clcd_init_col:
  1196                           	opt stack 0
  1197  000080                     	ds	1
  1198  000081                     _clcd_init_row:
  1199                           	opt stack 0
  1200  000081                     	ds	1
  1201  000082                     _cmd_consol_state:
  1202                           	opt stack 0
  1203  000082                     	ds	1
  1204  000083                     _display:
  1205                           	opt stack 0
  1206  000083                     	ds	1
  1207  000084                     _valid_cmd:
  1208                           	opt stack 0
  1209  000084                     	ds	1
  1210  000085                     	ds	1
  1211  000086                     _cmd_data:
  1212                           	opt stack 0
  1213  000086                     	ds	49
  1214  0000B7                     _conflict_arr:
  1215                           	opt stack 0
  1216  0000B7                     	ds	20
  1217  0000CB                     _CMD:
  1218                           	opt stack 0
  1219  0000CB                     	ds	15
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           postinc0	equ	0xFEE
  1225                           wreg	equ	0xFE8
  1226                           postdec1	equ	0xFE5
  1227                           fsr1h	equ	0xFE2
  1228                           fsr1l	equ	0xFE1
  1229                           
  1230                           	psect	dataBANK0
  1231  0000EC                     __pdataBANK0:
  1232                           	opt stack 0
  1233  0000EC                     _str:
  1234                           	opt stack 0
  1235  0000EC                     	ds	13
  1236                           tblptru	equ	0xFF8
  1237                           tblptrh	equ	0xFF7
  1238                           tblptrl	equ	0xFF6
  1239                           tablat	equ	0xFF5
  1240                           postinc0	equ	0xFEE
  1241                           wreg	equ	0xFE8
  1242                           postdec1	equ	0xFE5
  1243                           fsr1h	equ	0xFE2
  1244                           fsr1l	equ	0xFE1
  1245                           
  1246                           	psect	bssBANK1
  1247  000100                     __pbssBANK1:
  1248                           	opt stack 0
  1249  000100                     _lcd_display_array:
  1250                           	opt stack 0
  1251  000100                     	ds	80
  1252  000150                     _str_data:
  1253                           	opt stack 0
  1254  000150                     	ds	40
  1255                           tblptru	equ	0xFF8
  1256                           tblptrh	equ	0xFF7
  1257                           tblptrl	equ	0xFF6
  1258                           tablat	equ	0xFF5
  1259                           postinc0	equ	0xFEE
  1260                           wreg	equ	0xFE8
  1261                           postdec1	equ	0xFE5
  1262                           fsr1h	equ	0xFE2
  1263                           fsr1l	equ	0xFE1
  1264                           
  1265                           	psect	bssBANK2
  1266  000200                     __pbssBANK2:
  1267                           	opt stack 0
  1268  000200                     _uart_str:
  1269                           	opt stack 0
  1270  000200                     	ds	150
  1271                           tblptru	equ	0xFF8
  1272                           tblptrh	equ	0xFF7
  1273                           tblptrl	equ	0xFF6
  1274                           tablat	equ	0xFF5
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           postdec1	equ	0xFE5
  1278                           fsr1h	equ	0xFE2
  1279                           fsr1l	equ	0xFE1
  1280                           
  1281                           	psect	bssBIGRAM
  1282  000296                     __pbssBIGRAM:
  1283                           	opt stack 0
  1284  000296                     _clcd_display_string_details:
  1285                           	opt stack 0
  1286  000296                     	ds	1080
  1287                           tblptru	equ	0xFF8
  1288                           tblptrh	equ	0xFF7
  1289                           tblptrl	equ	0xFF6
  1290                           tablat	equ	0xFF5
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           postdec1	equ	0xFE5
  1294                           fsr1h	equ	0xFE2
  1295                           fsr1l	equ	0xFE1
  1296                           
  1297                           	psect	cstackBANK1
  1298  000178                     __pcstackBANK1:
  1299                           	opt stack 0
  1300  000178                     update_string_data@start_point:
  1301                           	opt stack 0
  1302                           
  1303                           ; 1 bytes @ 0x0
  1304  000178                     	ds	1
  1305  000179                     update_string_data@end_point:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x1
  1309  000179                     	ds	1
  1310  00017A                     update_string_data@exist_uid_idx:
  1311                           	opt stack 0
  1312                           
  1313                           ; 1 bytes @ 0x2
  1314  00017A                     	ds	1
  1315  00017B                     update_string_data@i:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x3
  1319  00017B                     	ds	2
  1320  00017D                     ??_reply_to_host:
  1321                           
  1322                           ; 1 bytes @ 0x5
  1323  00017D                     	ds	3
  1324  000180                     reply_to_host@ch:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x8
  1328  000180                     	ds	1
  1329  000181                     ??_cmd_consol_task:
  1330                           
  1331                           ; 1 bytes @ 0x9
  1332  000181                     	ds	1
  1333  000182                     cmd_consol_task@ch:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0xA
  1337  000182                     	ds	1
  1338                           tblptru	equ	0xFF8
  1339                           tblptrh	equ	0xFF7
  1340                           tblptrl	equ	0xFF6
  1341                           tablat	equ	0xFF5
  1342                           postinc0	equ	0xFEE
  1343                           wreg	equ	0xFE8
  1344                           postdec1	equ	0xFE5
  1345                           fsr1h	equ	0xFE2
  1346                           fsr1l	equ	0xFE1
  1347                           
  1348                           	psect	cstackBANK0
  1349  0000DA                     __pcstackBANK0:
  1350                           	opt stack 0
  1351  0000DA                     ??_scroll_right_to_left:
  1352  0000DA                     scroll_off@k:
  1353                           	opt stack 0
  1354  0000DA                     parse_cmd_str@str:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x0
  1358  0000DA                     	ds	2
  1359  0000DC                     ??_parse_cmd_str:
  1360  0000DC                     scroll_off@line:
  1361                           	opt stack 0
  1362                           
  1363                           ; 1 bytes @ 0x2
  1364  0000DC                     	ds	1
  1365  0000DD                     scroll_off@display_char_count:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x3
  1369  0000DD                     	ds	1
  1370  0000DE                     scroll_off@str_len:
  1371                           	opt stack 0
  1372                           
  1373                           ; 1 bytes @ 0x4
  1374  0000DE                     	ds	1
  1375  0000DF                     parse_cmd_str@i:
  1376                           	opt stack 0
  1377  0000DF                     scroll_off@j:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0x5
  1381  0000DF                     	ds	1
  1382  0000E0                     parse_cmd_str@i_1689:
  1383                           	opt stack 0
  1384                           
  1385                           ; 1 bytes @ 0x6
  1386  0000E0                     	ds	1
  1387  0000E1                     parse_cmd_str@row:
  1388                           	opt stack 0
  1389  0000E1                     scroll_off@i:
  1390                           	opt stack 0
  1391                           
  1392                           ; 2 bytes @ 0x7
  1393  0000E1                     	ds	1
  1394  0000E2                     parse_cmd_str@column:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x8
  1398  0000E2                     	ds	1
  1399  0000E3                     parse_cmd_str@i_1680:
  1400                           	opt stack 0
  1401                           
  1402                           ; 1 bytes @ 0x9
  1403  0000E3                     	ds	1
  1404  0000E4                     parse_cmd_str@uid:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0xA
  1408  0000E4                     	ds	1
  1409  0000E5                     parse_cmd_str@scroll:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0xB
  1413  0000E5                     	ds	1
  1414  0000E6                     parse_cmd_str@uid_1677:
  1415                           	opt stack 0
  1416                           
  1417                           ; 1 bytes @ 0xC
  1418  0000E6                     	ds	1
  1419  0000E7                     parse_cmd_str@uid_1688:
  1420                           	opt stack 0
  1421  0000E7                     update_string_data@data:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0xD
  1425  0000E7                     	ds	1
  1426  0000E8                     parse_cmd_str@ptr:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0xE
  1430  0000E8                     	ds	1
  1431  0000E9                     ??_update_string_data:
  1432                           
  1433                           ; 1 bytes @ 0xF
  1434  0000E9                     	ds	1
  1435  0000EA                     parse_cmd_str@temp:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x10
  1439  0000EA                     	ds	2
  1440                           tblptru	equ	0xFF8
  1441                           tblptrh	equ	0xFF7
  1442                           tblptrl	equ	0xFF6
  1443                           tablat	equ	0xFF5
  1444                           postinc0	equ	0xFEE
  1445                           wreg	equ	0xFE8
  1446                           postdec1	equ	0xFE5
  1447                           fsr1h	equ	0xFE2
  1448                           fsr1l	equ	0xFE1
  1449                           
  1450                           	psect	cstackCOMRAM
  1451  000001                     __pcstackCOMRAM:
  1452                           	opt stack 0
  1453  000001                     ??_heart_beat:
  1454  000001                     
  1455                           ; 1 bytes @ 0x0
  1456  000001                     	ds	1
  1457  000002                     ??_INTERRUPT_InterruptManager:
  1458  000002                     
  1459                           ; 1 bytes @ 0x1
  1460  000002                     	ds	14
  1461  000010                     ??_isdigit:
  1462  000010                     ?_strcmp:
  1463                           	opt stack 0
  1464  000010                     ?_strchr:
  1465                           	opt stack 0
  1466  000010                     ?_max_display_support:
  1467                           	opt stack 0
  1468  000010                     ?___awdiv:
  1469                           	opt stack 0
  1470  000010                     ?___lwdiv:
  1471                           	opt stack 0
  1472  000010                     EUSART1_Read@readValue:
  1473                           	opt stack 0
  1474  000010                     EUSART1_Write@txData:
  1475                           	opt stack 0
  1476  000010                     TMR0_SetInterruptHandler@InterruptHandler:
  1477                           	opt stack 0
  1478  000010                     delay@delay:
  1479                           	opt stack 0
  1480  000010                     __delay_MS@delay:
  1481                           	opt stack 0
  1482  000010                     ___awdiv@dividend:
  1483                           	opt stack 0
  1484  000010                     ___lwdiv@dividend:
  1485                           	opt stack 0
  1486  000010                     memcpy@d1:
  1487                           	opt stack 0
  1488  000010                     strcmp@s1:
  1489                           	opt stack 0
  1490  000010                     strcpy@to:
  1491                           	opt stack 0
  1492  000010                     strncpy@to:
  1493                           	opt stack 0
  1494  000010                     strchr@ptr:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0xF
  1498  000010                     	ds	1
  1499  000011                     putch@txData:
  1500                           	opt stack 0
  1501  000011                     _isdigit$2175:
  1502                           	opt stack 0
  1503                           
  1504                           ; 1 bytes @ 0x10
  1505  000011                     	ds	1
  1506  000012                     ??_TMR0_Initialize:
  1507  000012                     ??__delay_MS:
  1508  000012                     ??_delay:
  1509  000012                     isdigit@c:
  1510                           	opt stack 0
  1511  000012                     ___awdiv@divisor:
  1512                           	opt stack 0
  1513  000012                     ___lwdiv@divisor:
  1514                           	opt stack 0
  1515  000012                     memcpy@s1:
  1516                           	opt stack 0
  1517  000012                     strcmp@s2:
  1518                           	opt stack 0
  1519  000012                     strcpy@from:
  1520                           	opt stack 0
  1521  000012                     strncpy@from:
  1522                           	opt stack 0
  1523  000012                     cputs@s:
  1524                           	opt stack 0
  1525  000012                     strchr@chr:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x11
  1529  000012                     	ds	1
  1530  000013                     delay@val:
  1531                           	opt stack 0
  1532  000013                     __delay_MS@val:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x12
  1536  000013                     	ds	1
  1537  000014                     ??_strcmp:
  1538  000014                     ??_strchr:
  1539  000014                     ___awdiv@counter:
  1540                           	opt stack 0
  1541  000014                     ___lwdiv@counter:
  1542                           	opt stack 0
  1543  000014                     memcpy@n:
  1544                           	opt stack 0
  1545  000014                     puts@s:
  1546                           	opt stack 0
  1547  000014                     strcpy@cp:
  1548                           	opt stack 0
  1549  000014                     strncpy@size:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x13
  1553  000014                     	ds	1
  1554  000015                     ___awdiv@sign:
  1555                           	opt stack 0
  1556  000015                     strcmp@r:
  1557                           	opt stack 0
  1558  000015                     delay@i:
  1559                           	opt stack 0
  1560  000015                     ___lwdiv@quotient:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x14
  1564  000015                     	ds	1
  1565  000016                     ?_strspn:
  1566                           	opt stack 0
  1567  000016                     ?_strcspn:
  1568                           	opt stack 0
  1569  000016                     ___awdiv@quotient:
  1570                           	opt stack 0
  1571  000016                     memcpy@d:
  1572                           	opt stack 0
  1573  000016                     strncpy@cp:
  1574                           	opt stack 0
  1575  000016                     strcspn@s1:
  1576                           	opt stack 0
  1577  000016                     strspn@s1:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x15
  1581  000016                     	ds	1
  1582  000017                     ?___lwmod:
  1583                           	opt stack 0
  1584  000017                     write_lcd_cmd@cmd:
  1585                           	opt stack 0
  1586  000017                     write_lcd_data@data:
  1587                           	opt stack 0
  1588  000017                     ___lwmod@dividend:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x16
  1592  000017                     	ds	1
  1593  000018                     ?___wmul:
  1594                           	opt stack 0
  1595  000018                     set_cursor@col_number:
  1596                           	opt stack 0
  1597  000018                     write_str@str:
  1598                           	opt stack 0
  1599  000018                     ___wmul@multiplier:
  1600                           	opt stack 0
  1601  000018                     memcpy@s:
  1602                           	opt stack 0
  1603  000018                     strcspn@s2:
  1604                           	opt stack 0
  1605  000018                     strspn@s2:
  1606                           	opt stack 0
  1607                           
  1608                           ; 2 bytes @ 0x17
  1609  000018                     	ds	1
  1610  000019                     set_cursor@row_number:
  1611                           	opt stack 0
  1612  000019                     ___lwmod@divisor:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x18
  1616  000019                     	ds	1
  1617  00001A                     ??_strspn:
  1618  00001A                     ??_strcspn:
  1619  00001A                     write_str@i:
  1620                           	opt stack 0
  1621  00001A                     ___wmul@multiplicand:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x19
  1625  00001A                     	ds	1
  1626  00001B                     ___lwmod@counter:
  1627                           	opt stack 0
  1628  00001B                     strcspn@i:
  1629                           	opt stack 0
  1630  00001B                     strspn@i:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x1A
  1634  00001B                     	ds	1
  1635  00001C                     ___wmul@product:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x1B
  1639  00001C                     	ds	1
  1640  00001D                     ?_strtok:
  1641                           	opt stack 0
  1642  00001D                     strtok@s1:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0x1C
  1646  00001D                     	ds	1
  1647  00001E                     ?_strlen:
  1648                           	opt stack 0
  1649  00001E                     ?_atoi:
  1650                           	opt stack 0
  1651  00001E                     atoi@s:
  1652                           	opt stack 0
  1653  00001E                     strlen@s:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x1D
  1657  00001E                     	ds	1
  1658  00001F                     strtok@s2:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x1E
  1662  00001F                     	ds	1
  1663  000020                     ??_strlen:
  1664  000020                     ??_atoi:
  1665                           
  1666                           ; 1 bytes @ 0x1F
  1667  000020                     	ds	1
  1668  000021                     
  1669                           ; 1 bytes @ 0x20
  1670  000021                     	ds	1
  1671  000022                     atoi@sign:
  1672                           	opt stack 0
  1673  000022                     strlen@cp:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x21
  1677  000022                     	ds	1
  1678  000023                     atoi@a:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x22
  1682  000023                     	ds	1
  1683  000024                     ?_printf:
  1684                           	opt stack 0
  1685  000024                     ?_strncmp:
  1686                           	opt stack 0
  1687  000024                     printf@f:
  1688                           	opt stack 0
  1689  000024                     memset@p1:
  1690                           	opt stack 0
  1691  000024                     strncmp@s1:
  1692                           	opt stack 0
  1693                           
  1694                           ; 2 bytes @ 0x23
  1695  000024                     	ds	2
  1696  000026                     memset@c:
  1697                           	opt stack 0
  1698  000026                     strncmp@s2:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x25
  1702  000026                     	ds	2
  1703  000028                     memset@n:
  1704                           	opt stack 0
  1705  000028                     strncmp@len:
  1706                           	opt stack 0
  1707                           
  1708                           ; 2 bytes @ 0x27
  1709  000028                     	ds	2
  1710  00002A                     ??_strncmp:
  1711  00002A                     memset@p:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0x29
  1715  00002A                     	ds	2
  1716  00002C                     ??_printf:
  1717  00002C                     scroll_left_to_right@clcd_display_string_details:
  1718                           	opt stack 0
  1719                           
  1720                           ; 2 bytes @ 0x2B
  1721  00002C                     	ds	1
  1722  00002D                     ?_strstr:
  1723                           	opt stack 0
  1724  00002D                     printf@flag:
  1725                           	opt stack 0
  1726  00002D                     strstr@s1:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x2C
  1730  00002D                     	ds	1
  1731  00002E                     ??_scroll_left_to_right:
  1732  00002E                     printf@prec:
  1733                           	opt stack 0
  1734                           
  1735                           ; 1 bytes @ 0x2D
  1736  00002E                     	ds	1
  1737  00002F                     printf@cp:
  1738                           	opt stack 0
  1739  00002F                     strstr@s2:
  1740                           	opt stack 0
  1741                           
  1742                           ; 2 bytes @ 0x2E
  1743  00002F                     	ds	2
  1744  000031                     printf@ap:
  1745                           	opt stack 0
  1746                           
  1747                           ; 2 bytes @ 0x30
  1748  000031                     	ds	2
  1749  000033                     printf@val:
  1750                           	opt stack 0
  1751                           
  1752                           ; 2 bytes @ 0x32
  1753  000033                     	ds	2
  1754  000035                     printf@c:
  1755                           	opt stack 0
  1756                           
  1757                           ; 1 bytes @ 0x34
  1758  000035                     	ds	1
  1759  000036                     init_clcd_cusotom_lcd@clcd_init_col:
  1760                           	opt stack 0
  1761  000036                     conflict_check@new_start_point:
  1762                           	opt stack 0
  1763  000036                     scroll_left_to_right@line:
  1764                           	opt stack 0
  1765  000036                     copy_data@clcd_str_data:
  1766                           	opt stack 0
  1767  000036                     scroll_right_to_left@clcd_display_string_details:
  1768                           	opt stack 0
  1769  000036                     scroll_off@clcd_display_string_details:
  1770                           	opt stack 0
  1771  000036                     collect_row@str:
  1772                           	opt stack 0
  1773  000036                     collect_column@str:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x35
  1777  000036                     	ds	1
  1778  000037                     init_clcd_cusotom_lcd@clcd_init_row:
  1779                           	opt stack 0
  1780  000037                     conflict_check@new_end_point:
  1781                           	opt stack 0
  1782                           
  1783                           ; 1 bytes @ 0x36
  1784  000037                     	ds	1
  1785  000038                     ??_conflict_check:
  1786  000038                     ??_scroll_off:
  1787  000038                     scroll_right_to_left@line:
  1788                           	opt stack 0
  1789  000038                     copy_data@data:
  1790                           	opt stack 0
  1791  000038                     collect_row@data_row:
  1792                           	opt stack 0
  1793  000038                     collect_column@data_column:
  1794                           	opt stack 0
  1795                           
  1796                           ; 2 bytes @ 0x37
  1797  000038                     	ds	2
  1798  00003A                     ??_copy_data:
  1799  00003A                     ??_collect_row:
  1800  00003A                     ??_collect_column:
  1801                           
  1802                           ; 1 bytes @ 0x39
  1803  00003A                     	ds	1
  1804  00003B                     conflict_check@exist_uid_idx:
  1805                           	opt stack 0
  1806                           
  1807                           ; 1 bytes @ 0x3A
  1808  00003B                     	ds	1
  1809  00003C                     ??_make_display:
  1810  00003C                     conflict_check@conflict:
  1811                           	opt stack 0
  1812                           
  1813                           ; 1 bytes @ 0x3B
  1814  00003C                     	ds	1
  1815  00003D                     collect_column@column:
  1816                           	opt stack 0
  1817  00003D                     conflict_check@i:
  1818                           	opt stack 0
  1819  00003D                     collect_row@i:
  1820                           	opt stack 0
  1821                           
  1822                           ; 2 bytes @ 0x3C
  1823  00003D                     	ds	1
  1824  00003E                     collect_column@i:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x3D
  1828  00003E                     	ds	1
  1829  00003F                     collect_row@row:
  1830                           	opt stack 0
  1831  00003F                     make_display@count:
  1832                           	opt stack 0
  1833                           
  1834                           ; 2 bytes @ 0x3E
  1835  00003F                     	ds	2
  1836  000041                     tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           postinc0	equ	0xFEE
  1841                           wreg	equ	0xFE8
  1842                           postdec1	equ	0xFE5
  1843                           fsr1h	equ	0xFE2
  1844                           fsr1l	equ	0xFE1
  1845                           
  1846                           ; 1 bytes @ 0x40
  1847 ;;
  1848 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1849 ;;
  1850 ;; *************** function _main *****************
  1851 ;; Defined at:
  1852 ;;		line 77 in file "main.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;		None
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;		None
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1870 ;;Total ram usage:        0 bytes
  1871 ;; Hardware stack levels required when called:   14
  1872 ;; This function calls:
  1873 ;;		_SYSTEM_Initialize
  1874 ;;		_TMR0_SetInterruptHandler
  1875 ;;		_TMR0_StartTimer
  1876 ;;		_TMR0_StopTimer
  1877 ;;		_TMR1_StopTimer
  1878 ;;		_TMR5_StopTimer
  1879 ;;		__delay_MS
  1880 ;;		_cmd_consol_task
  1881 ;;		_console_init
  1882 ;;		_make_display
  1883 ;;		_printf
  1884 ;; This function is called by:
  1885 ;;		Startup code after reset
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           	psect	text0
  1890  002FC2                     __ptext0:
  1891                           	opt stack 0
  1892  002FC2                     _main:
  1893                           	opt stack 17
  1894                           
  1895                           ;main.c: 80: SYSTEM_Initialize();
  1896                           
  1897                           ;incstack = 0
  1898  002FC2  EC13  F01B         	call	_SYSTEM_Initialize	;wreg free
  1899                           
  1900                           ;main.c: 81: TMR5_StopTimer();
  1901  002FC6  ECD0  F01B         	call	_TMR5_StopTimer	;wreg free
  1902                           
  1903                           ;main.c: 82: TMR1_StopTimer();
  1904  002FCA  ECD6  F01B         	call	_TMR1_StopTimer	;wreg free
  1905                           
  1906                           ;main.c: 83: TMR0_StopTimer();
  1907  002FCE  ECD8  F01B         	call	_TMR0_StopTimer	;wreg free
  1908                           
  1909                           ;main.c: 85: TMR0_SetInterruptHandler(make_array);
  1910  002FD2  0E5E               	movlw	low _make_array
  1911  002FD4  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  1912  002FD6  0E37               	movlw	high _make_array
  1913  002FD8  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  1914  002FDA  ECC4  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  1915                           
  1916                           ;main.c: 105: (INTCONbits.GIE = 1);
  1917  002FDE  8EF2               	bsf	intcon,7,c	;volatile
  1918                           
  1919                           ;main.c: 111: (INTCONbits.PEIE = 1);
  1920  002FE0  8CF2               	bsf	intcon,6,c	;volatile
  1921                           
  1922                           ;main.c: 115: console_init();
  1923  002FE2  ECDA  F016         	call	_console_init	;wreg free
  1924                           
  1925                           ;main.c: 116: _delay_MS(1000);
  1926  002FE6  0E03               	movlw	3
  1927  002FE8  6E11               	movwf	__delay_MS@delay+1,c
  1928  002FEA  0EE8               	movlw	232
  1929  002FEC  6E10               	movwf	__delay_MS@delay,c
  1930  002FEE  EC42  F019         	call	__delay_MS	;wreg free
  1931                           
  1932                           ;main.c: 118: printf("Init_complete..\r\n");
  1933  002FF2  0EF8               	movlw	low STR_117
  1934  002FF4  6E24               	movwf	printf@f,c
  1935  002FF6  0EFD               	movlw	high STR_117
  1936  002FF8  6E25               	movwf	printf@f+1,c
  1937  002FFA  EC0F  F00F         	call	_printf	;wreg free
  1938                           
  1939                           ;main.c: 133: TMR0_StartTimer();
  1940  002FFE  ECDC  F01B         	call	_TMR0_StartTimer	;wreg free
  1941  003002                     l7175:
  1942                           
  1943                           ;main.c: 137: {
  1944                           ;main.c: 139: cmd_consol_task();
  1945  003002  ECBB  F011         	call	_cmd_consol_task	;wreg free
  1946                           
  1947                           ;main.c: 140: if(display == 1){make_display();display = 0;}
  1948  003006  0100               	movlb	0	; () banked
  1949  003008  0583               	decf	_display& (0+255),w,b
  1950  00300A  A4D8               	btfss	status,2,c
  1951  00300C  D7FA               	goto	l7175
  1952                           
  1953                           ; BSR set to: 0
  1954  00300E  EC1E  F00E         	call	_make_display	;wreg free
  1955  003012  0E00               	movlw	0
  1956  003014  0100               	movlb	0	; () banked
  1957  003016  6F83               	movwf	_display& (0+255),b
  1958                           
  1959                           ; BSR set to: 0
  1960                           
  1961                           ; BSR set to: 0
  1962  003018  D7F4               	goto	l7175
  1963  00301A                     __end_of_main:
  1964                           	opt stack 0
  1965                           tblptru	equ	0xFF8
  1966                           tblptrh	equ	0xFF7
  1967                           tblptrl	equ	0xFF6
  1968                           tablat	equ	0xFF5
  1969                           intcon	equ	0xFF2
  1970                           postinc0	equ	0xFEE
  1971                           wreg	equ	0xFE8
  1972                           postdec1	equ	0xFE5
  1973                           fsr1h	equ	0xFE2
  1974                           fsr1l	equ	0xFE1
  1975                           status	equ	0xFD8
  1976                           
  1977 ;; *************** function _console_init *****************
  1978 ;; Defined at:
  1979 ;;		line 330 in file "cmd_consol.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;		None
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;		None
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      void 
  1986 ;; Registers used:
  1987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;Total ram usage:        0 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; Hardware stack levels required when called:    7
  2000 ;; This function calls:
  2001 ;;		_clear_cmd_data
  2002 ;;		_memset
  2003 ;; This function is called by:
  2004 ;;		_main
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           	psect	text1
  2009  002DB4                     __ptext1:
  2010                           	opt stack 0
  2011  002DB4                     _console_init:
  2012                           	opt stack 23
  2013                           
  2014                           ;cmd_consol.c: 331: cmd_consol_state = CMD_CONSOL_INIT;
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;incstack = 0
  2018  002DB4  0E00               	movlw	0
  2019  002DB6  0100               	movlb	0	; () banked
  2020  002DB8  6F82               	movwf	_cmd_consol_state& (0+255),b
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;cmd_consol.c: 332: clear_cmd_data();
  2024  002DBA  EC15  F01A         	call	_clear_cmd_data	;wreg free
  2025                           
  2026                           ;cmd_consol.c: 333: valid_cmd = 0;
  2027  002DBE  0E00               	movlw	0
  2028  002DC0  0100               	movlb	0	; () banked
  2029  002DC2  6F84               	movwf	_valid_cmd& (0+255),b
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;cmd_consol.c: 334: clcd_init_row = 0;
  2033  002DC4  0E00               	movlw	0
  2034  002DC6  0100               	movlb	0	; () banked
  2035  002DC8  6F81               	movwf	_clcd_init_row& (0+255),b
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;cmd_consol.c: 335: clcd_init_col = 0;
  2039  002DCA  0E00               	movlw	0
  2040  002DCC  0100               	movlb	0	; () banked
  2041  002DCE  6F80               	movwf	_clcd_init_col& (0+255),b
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;cmd_consol.c: 336: check = 0;
  2045  002DD0  0E00               	movlw	0
  2046  002DD2  0100               	movlb	0	; () banked
  2047  002DD4  6F7F               	movwf	_check& (0+255),b
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;cmd_consol.c: 337: memset(CMD, 0, sizeof (CMD));
  2051  002DD6  0ECB               	movlw	low _CMD
  2052  002DD8  6E24               	movwf	memset@p1,c
  2053  002DDA  0E00               	movlw	high _CMD
  2054  002DDC  6E25               	movwf	memset@p1+1,c
  2055  002DDE  0E00               	movlw	0
  2056  002DE0  6E27               	movwf	memset@c+1,c
  2057  002DE2  0E00               	movlw	0
  2058  002DE4  6E26               	movwf	memset@c,c
  2059  002DE6  0E00               	movlw	0
  2060  002DE8  6E29               	movwf	memset@n+1,c
  2061  002DEA  0E0F               	movlw	15
  2062  002DEC  6E28               	movwf	memset@n,c
  2063  002DEE  EC5E  F01A         	call	_memset	;wreg free
  2064                           
  2065                           ;cmd_consol.c: 338: memset(str_data, 0, sizeof (str_data));
  2066  002DF2  0E50               	movlw	low _str_data
  2067  002DF4  6E24               	movwf	memset@p1,c
  2068  002DF6  0E01               	movlw	high _str_data
  2069  002DF8  6E25               	movwf	memset@p1+1,c
  2070  002DFA  0E00               	movlw	0
  2071  002DFC  6E27               	movwf	memset@c+1,c
  2072  002DFE  0E00               	movlw	0
  2073  002E00  6E26               	movwf	memset@c,c
  2074  002E02  0E00               	movlw	0
  2075  002E04  6E29               	movwf	memset@n+1,c
  2076  002E06  0E28               	movlw	40
  2077  002E08  6E28               	movwf	memset@n,c
  2078  002E0A  EC5E  F01A         	call	_memset	;wreg free
  2079                           
  2080                           ;cmd_consol.c: 339: memset(uart_str, 0, sizeof (uart_str));
  2081  002E0E  0E00               	movlw	low _uart_str
  2082  002E10  6E24               	movwf	memset@p1,c
  2083  002E12  0E02               	movlw	high _uart_str
  2084  002E14  6E25               	movwf	memset@p1+1,c
  2085  002E16  0E00               	movlw	0
  2086  002E18  6E27               	movwf	memset@c+1,c
  2087  002E1A  0E00               	movlw	0
  2088  002E1C  6E26               	movwf	memset@c,c
  2089  002E1E  0E00               	movlw	0
  2090  002E20  6E29               	movwf	memset@n+1,c
  2091  002E22  0E96               	movlw	150
  2092  002E24  6E28               	movwf	memset@n,c
  2093  002E26  EC5E  F01A         	call	_memset	;wreg free
  2094  002E2A  0012               	return		;funcret
  2095  002E2C                     __end_of_console_init:
  2096                           	opt stack 0
  2097                           tblptru	equ	0xFF8
  2098                           tblptrh	equ	0xFF7
  2099                           tblptrl	equ	0xFF6
  2100                           tablat	equ	0xFF5
  2101                           intcon	equ	0xFF2
  2102                           postinc0	equ	0xFEE
  2103                           wreg	equ	0xFE8
  2104                           postdec1	equ	0xFE5
  2105                           fsr1h	equ	0xFE2
  2106                           fsr1l	equ	0xFE1
  2107                           status	equ	0xFD8
  2108                           
  2109 ;; *************** function _clear_cmd_data *****************
  2110 ;; Defined at:
  2111 ;;		line 8 in file "cmd_consol.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;		None
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;		None
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  1    wreg      void 
  2118 ;; Registers used:
  2119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;Total ram usage:        0 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; Hardware stack levels required when called:    6
  2132 ;; This function calls:
  2133 ;;		_memset
  2134 ;; This function is called by:
  2135 ;;		_console_init
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           	psect	text2
  2140  00342A                     __ptext2:
  2141                           	opt stack 0
  2142  00342A                     _clear_cmd_data:
  2143                           	opt stack 23
  2144                           
  2145                           ;cmd_consol.c: 9: memset(&cmd_data, 0, sizeof (CMD_CONSOL_DATA));
  2146                           
  2147                           ;incstack = 0
  2148  00342A  0E86               	movlw	low _cmd_data
  2149  00342C  6E24               	movwf	memset@p1,c
  2150  00342E  0E00               	movlw	high _cmd_data
  2151  003430  6E25               	movwf	memset@p1+1,c
  2152  003432  0E00               	movlw	0
  2153  003434  6E27               	movwf	memset@c+1,c
  2154  003436  0E00               	movlw	0
  2155  003438  6E26               	movwf	memset@c,c
  2156  00343A  0E00               	movlw	0
  2157  00343C  6E29               	movwf	memset@n+1,c
  2158  00343E  0E31               	movlw	49
  2159  003440  6E28               	movwf	memset@n,c
  2160  003442  EC5E  F01A         	call	_memset	;wreg free
  2161                           
  2162                           ;cmd_consol.c: 11: cmd_data.scroll = -1;
  2163  003446  0100               	movlb	0	; () banked
  2164  003448  69B5               	setf	(_cmd_data+47)& (0+255),b
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;cmd_consol.c: 12: cmd_data.end_col = cmd_data.start_col = -1;
  2168  00344A  0100               	movlb	0	; () banked
  2169  00344C  69B1               	setf	(_cmd_data+43)& (0+255),b
  2170  00344E  0100               	movlb	0	; () banked
  2171  003450  69B3               	setf	(_cmd_data+45)& (0+255),b
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;cmd_consol.c: 13: cmd_data.end_row = cmd_data.end_row = -1;
  2175  003452  0100               	movlb	0	; () banked
  2176  003454  69B2               	setf	(_cmd_data+44)& (0+255),b
  2177  003456  0100               	movlb	0	; () banked
  2178  003458  69B2               	setf	(_cmd_data+44)& (0+255),b
  2179                           
  2180                           ; BSR set to: 0
  2181  00345A  0012               	return		;funcret
  2182  00345C                     __end_of_clear_cmd_data:
  2183                           	opt stack 0
  2184                           tblptru	equ	0xFF8
  2185                           tblptrh	equ	0xFF7
  2186                           tblptrl	equ	0xFF6
  2187                           tablat	equ	0xFF5
  2188                           intcon	equ	0xFF2
  2189                           postinc0	equ	0xFEE
  2190                           wreg	equ	0xFE8
  2191                           postdec1	equ	0xFE5
  2192                           fsr1h	equ	0xFE2
  2193                           fsr1l	equ	0xFE1
  2194                           status	equ	0xFD8
  2195                           
  2196 ;; *************** function _cmd_consol_task *****************
  2197 ;; Defined at:
  2198 ;;		line 342 in file "cmd_consol.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;		None
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  ch              1   10[BANK1 ] unsigned char 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;Total ram usage:        2 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:   13
  2219 ;; This function calls:
  2220 ;;		_getch
  2221 ;;		_memset
  2222 ;;		_parse_cmd_str
  2223 ;;		_printf
  2224 ;;		_puts
  2225 ;;		_reply_to_host
  2226 ;; This function is called by:
  2227 ;;		_main
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text3
  2232  002376                     __ptext3:
  2233                           	opt stack 0
  2234  002376                     _cmd_consol_task:
  2235                           	opt stack 17
  2236                           
  2237                           ;cmd_consol.c: 343: if ((eusart1RxCount) > 0) {
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;incstack = 0
  2241  002376  5044               	movf	_eusart1RxCount,w,c	;volatile
  2242  002378  B4D8               	btfsc	status,2,c
  2243  00237A  D0C2               	goto	l7053
  2244                           
  2245                           ;cmd_consol.c: 344: static int i = 0;
  2246                           ;cmd_consol.c: 345: unsigned char ch = 0;
  2247  00237C  0E00               	movlw	0
  2248  00237E  0101               	movlb	1	; () banked
  2249  002380  6F82               	movwf	cmd_consol_task@ch& (0+255),b
  2250                           
  2251                           ;cmd_consol.c: 346: while ((eusart1RxCount)) {
  2252  002382  D03F               	goto	l7015
  2253  002384                     l6997:
  2254                           
  2255                           ;cmd_consol.c: 347: ch = getch();
  2256  002384  ECCD  F01B         	call	_getch	;wreg free
  2257  002388  0101               	movlb	1	; () banked
  2258  00238A  6F82               	movwf	cmd_consol_task@ch& (0+255),b
  2259                           
  2260                           ; BSR set to: 1
  2261                           ;cmd_consol.c: 348: if (ch == '\n' || ch == '\r') {
  2262  00238C  0E0A               	movlw	10
  2263  00238E  0101               	movlb	1	; () banked
  2264  002390  1982               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2265  002392  B4D8               	btfsc	status,2,c
  2266  002394  D005               	goto	l7003
  2267                           
  2268                           ; BSR set to: 1
  2269  002396  0E0D               	movlw	13
  2270  002398  0101               	movlb	1	; () banked
  2271  00239A  1982               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2272  00239C  A4D8               	btfss	status,2,c
  2273  00239E  D00F               	goto	l7009
  2274  0023A0                     l7003:
  2275                           
  2276                           ; BSR set to: 1
  2277                           ;cmd_consol.c: 349: i = 0;
  2278  0023A0  0E00               	movlw	0
  2279  0023A2  0100               	movlb	0	; () banked
  2280  0023A4  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2281  0023A6  0E00               	movlw	0
  2282  0023A8  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2283                           
  2284                           ;cmd_consol.c: 350: check = 1;
  2285  0023AA  0E01               	movlw	1
  2286  0023AC  0100               	movlb	0	; () banked
  2287  0023AE  6F7F               	movwf	_check& (0+255),b
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;cmd_consol.c: 351: printf("\r\n");
  2291  0023B0  0EAD               	movlw	low (STR_57+9)
  2292  0023B2  6E24               	movwf	printf@f,c
  2293  0023B4  0EFE               	movlw	high (STR_57+9)
  2294  0023B6  6E25               	movwf	printf@f+1,c
  2295  0023B8  EC0F  F00F         	call	_printf	;wreg free
  2296                           
  2297                           ;cmd_consol.c: 352: break;
  2298  0023BC  D025               	goto	l7017
  2299  0023BE                     l7009:
  2300                           
  2301                           ;cmd_consol.c: 354: uart_str[i] = ch;
  2302  0023BE  0E00               	movlw	low _uart_str
  2303  0023C0  0100               	movlb	0	; () banked
  2304  0023C2  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2305  0023C4  6ED9               	movwf	fsr2l,c
  2306  0023C6  0E02               	movlw	high _uart_str
  2307  0023C8  0100               	movlb	0	; () banked
  2308  0023CA  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2309  0023CC  6EDA               	movwf	fsr2h,c
  2310  0023CE  C182  FFDF         	movff	cmd_consol_task@ch,indf2
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;cmd_consol.c: 355: printf("%c", uart_str[i]);
  2314  0023D2  0EFC               	movlw	low STR_112
  2315  0023D4  6E24               	movwf	printf@f,c
  2316  0023D6  0EFF               	movlw	high STR_112
  2317  0023D8  6E25               	movwf	printf@f+1,c
  2318  0023DA  0E00               	movlw	low _uart_str
  2319  0023DC  0100               	movlb	0	; () banked
  2320  0023DE  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2321  0023E0  6ED9               	movwf	fsr2l,c
  2322  0023E2  0E02               	movlw	high _uart_str
  2323  0023E4  0100               	movlb	0	; () banked
  2324  0023E6  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2325  0023E8  6EDA               	movwf	fsr2h,c
  2326  0023EA  50DF               	movf	indf2,w,c
  2327  0023EC  0101               	movlb	1	; () banked
  2328  0023EE  6F81               	movwf	??_cmd_consol_task& (0+255),b
  2329  0023F0  0101               	movlb	1	; () banked
  2330  0023F2  5181               	movf	??_cmd_consol_task& (0+255),w,b
  2331  0023F4  6E26               	movwf	?_printf+2,c
  2332  0023F6  6A27               	clrf	?_printf+3,c
  2333  0023F8  EC0F  F00F         	call	_printf	;wreg free
  2334                           
  2335                           ;cmd_consol.c: 356: }
  2336                           ;cmd_consol.c: 357: i++;
  2337  0023FC  0100               	movlb	0	; () banked
  2338  0023FE  4B7A               	infsnz	cmd_consol_task@i& (0+255),f,b
  2339  002400  2B7B               	incf	(cmd_consol_task@i+1)& (0+255),f,b
  2340  002402                     l7015:
  2341  002402  5044               	movf	_eusart1RxCount,w,c	;volatile
  2342  002404  A4D8               	btfss	status,2,c
  2343  002406  D7BE               	goto	l6997
  2344  002408                     l7017:
  2345                           
  2346                           ;cmd_consol.c: 358: }
  2347                           ;cmd_consol.c: 359: if (i > 150) {
  2348  002408  0100               	movlb	0	; () banked
  2349  00240A  BF7B               	btfsc	(cmd_consol_task@i+1)& (0+255),7,b
  2350  00240C  D079               	goto	l7053
  2351  00240E  0100               	movlb	0	; () banked
  2352  002410  517B               	movf	(cmd_consol_task@i+1)& (0+255),w,b
  2353  002412  E105               	bnz	u7380
  2354  002414  0E97               	movlw	151
  2355  002416  0100               	movlb	0	; () banked
  2356  002418  5D7A               	subwf	cmd_consol_task@i& (0+255),w,b
  2357  00241A  A0D8               	btfss	status,0,c
  2358  00241C  D071               	goto	l7053
  2359  00241E                     u7380:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;cmd_consol.c: 360: puts("ERR_CMD_LEN");
  2363  00241E  0EE0               	movlw	low STR_113
  2364  002420  6E14               	movwf	puts@s,c
  2365  002422  0EFE               	movlw	high STR_113
  2366  002424  6E15               	movwf	puts@s+1,c
  2367  002426  EC58  F01B         	call	_puts	;wreg free
  2368                           
  2369                           ;cmd_consol.c: 361: i = 0;
  2370  00242A  0E00               	movlw	0
  2371  00242C  0100               	movlb	0	; () banked
  2372  00242E  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2373  002430  0E00               	movlw	0
  2374  002432  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;cmd_consol.c: 362: }
  2378                           ;cmd_consol.c: 363: }
  2379                           ;cmd_consol.c: 364: switch (cmd_consol_state) {
  2380                           
  2381                           ; BSR set to: 0
  2382  002434  D065               	goto	l7053
  2383  002436                     l7023:
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;cmd_consol.c: 366: {
  2387                           ;cmd_consol.c: 367: memset(CMD, 0, sizeof (CMD));
  2388  002436  0ECB               	movlw	low _CMD
  2389  002438  6E24               	movwf	memset@p1,c
  2390  00243A  0E00               	movlw	high _CMD
  2391  00243C  6E25               	movwf	memset@p1+1,c
  2392  00243E  0E00               	movlw	0
  2393  002440  6E27               	movwf	memset@c+1,c
  2394  002442  0E00               	movlw	0
  2395  002444  6E26               	movwf	memset@c,c
  2396  002446  0E00               	movlw	0
  2397  002448  6E29               	movwf	memset@n+1,c
  2398  00244A  0E0F               	movlw	15
  2399  00244C  6E28               	movwf	memset@n,c
  2400  00244E  EC5E  F01A         	call	_memset	;wreg free
  2401                           
  2402                           ;cmd_consol.c: 368: memset(uart_str, 0, sizeof (uart_str));
  2403  002452  0E00               	movlw	low _uart_str
  2404  002454  6E24               	movwf	memset@p1,c
  2405  002456  0E02               	movlw	high _uart_str
  2406  002458  6E25               	movwf	memset@p1+1,c
  2407  00245A  0E00               	movlw	0
  2408  00245C  6E27               	movwf	memset@c+1,c
  2409  00245E  0E00               	movlw	0
  2410  002460  6E26               	movwf	memset@c,c
  2411  002462  0E00               	movlw	0
  2412  002464  6E29               	movwf	memset@n+1,c
  2413  002466  0E96               	movlw	150
  2414  002468  6E28               	movwf	memset@n,c
  2415  00246A  EC5E  F01A         	call	_memset	;wreg free
  2416                           
  2417                           ;cmd_consol.c: 369: valid_cmd = 0;
  2418  00246E  0E00               	movlw	0
  2419  002470  0100               	movlb	0	; () banked
  2420  002472  6F84               	movwf	_valid_cmd& (0+255),b
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;cmd_consol.c: 370: puts("Init_Done\r\n");
  2424  002474  0EB0               	movlw	low STR_114
  2425  002476  6E14               	movwf	puts@s,c
  2426  002478  0EFE               	movlw	high STR_114
  2427  00247A  6E15               	movwf	puts@s+1,c
  2428  00247C  EC58  F01B         	call	_puts	;wreg free
  2429                           
  2430                           ;cmd_consol.c: 371: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2431  002480  0E01               	movlw	1
  2432  002482  0100               	movlb	0	; () banked
  2433  002484  6F82               	movwf	_cmd_consol_state& (0+255),b
  2434                           
  2435                           ;cmd_consol.c: 372: break;
  2436  002486  0012               	return	
  2437  002488                     l7031:
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;cmd_consol.c: 375: {
  2441                           ;cmd_consol.c: 376: static int i = 0;
  2442                           ;cmd_consol.c: 378: if (check == 1) {
  2443  002488  0100               	movlb	0	; () banked
  2444  00248A  057F               	decf	_check& (0+255),w,b
  2445  00248C  A4D8               	btfss	status,2,c
  2446  00248E  0012               	return	
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;cmd_consol.c: 379: check = 0;
  2450  002490  0E00               	movlw	0
  2451  002492  0100               	movlb	0	; () banked
  2452  002494  6F7F               	movwf	_check& (0+255),b
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;cmd_consol.c: 380: if (parse_cmd_str(uart_str) == 0) {
  2456  002496  0E00               	movlw	low _uart_str
  2457  002498  0100               	movlb	0	; () banked
  2458  00249A  6FDA               	movwf	parse_cmd_str@str& (0+255),b
  2459  00249C  0E02               	movlw	high _uart_str
  2460  00249E  0100               	movlb	0	; () banked
  2461  0024A0  6FDB               	movwf	(parse_cmd_str@str+1)& (0+255),b
  2462  0024A2  EC55  F000         	call	_parse_cmd_str	;wreg free
  2463  0024A6  0900               	iorlw	0
  2464  0024A8  A4D8               	btfss	status,2,c
  2465  0024AA  D012               	goto	l7041
  2466                           
  2467                           ;cmd_consol.c: 381: memset(uart_str, 0, sizeof (uart_str));
  2468  0024AC  0E00               	movlw	low _uart_str
  2469  0024AE  6E24               	movwf	memset@p1,c
  2470  0024B0  0E02               	movlw	high _uart_str
  2471  0024B2  6E25               	movwf	memset@p1+1,c
  2472  0024B4  0E00               	movlw	0
  2473  0024B6  6E27               	movwf	memset@c+1,c
  2474  0024B8  0E00               	movlw	0
  2475  0024BA  6E26               	movwf	memset@c,c
  2476  0024BC  0E00               	movlw	0
  2477  0024BE  6E29               	movwf	memset@n+1,c
  2478  0024C0  0E96               	movlw	150
  2479  0024C2  6E28               	movwf	memset@n,c
  2480  0024C4  EC5E  F01A         	call	_memset	;wreg free
  2481                           
  2482                           ;cmd_consol.c: 382: cmd_consol_state = CMD_CONSOL_REPLY_HOST;
  2483  0024C8  0E02               	movlw	2
  2484  0024CA  0100               	movlb	0	; () banked
  2485  0024CC  6F82               	movwf	_cmd_consol_state& (0+255),b
  2486                           
  2487                           ;cmd_consol.c: 383: } else {
  2488  0024CE  0012               	return	
  2489  0024D0                     l7041:
  2490                           
  2491                           ;cmd_consol.c: 384: printf("%s\r\n", "ERROR");
  2492  0024D0  0EDC               	movlw	low (STR_105+2)
  2493  0024D2  6E24               	movwf	printf@f,c
  2494  0024D4  0EFF               	movlw	high (STR_105+2)
  2495  0024D6  6E25               	movwf	printf@f+1,c
  2496  0024D8  0EE8               	movlw	low STR_102
  2497  0024DA  6E26               	movwf	?_printf+2,c
  2498  0024DC  0EFF               	movlw	high STR_102
  2499  0024DE  6E27               	movwf	?_printf+3,c
  2500  0024E0  EC0F  F00F         	call	_printf	;wreg free
  2501                           
  2502                           ;cmd_consol.c: 385: }
  2503                           ;cmd_consol.c: 386: }
  2504                           ;cmd_consol.c: 387: break;
  2505  0024E4  0012               	return	
  2506  0024E6                     l7043:
  2507                           
  2508                           ;cmd_consol.c: 390: {
  2509                           ;cmd_consol.c: 391: if (valid_cmd == 1) {
  2510  0024E6  0100               	movlb	0	; () banked
  2511  0024E8  0584               	decf	_valid_cmd& (0+255),w,b
  2512  0024EA  A4D8               	btfss	status,2,c
  2513  0024EC  D005               	goto	l7049
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;cmd_consol.c: 392: reply_to_host();
  2517  0024EE  EC7D  F008         	call	_reply_to_host	;wreg free
  2518                           
  2519                           ;cmd_consol.c: 393: valid_cmd = 0;
  2520  0024F2  0E00               	movlw	0
  2521  0024F4  0100               	movlb	0	; () banked
  2522  0024F6  6F84               	movwf	_valid_cmd& (0+255),b
  2523  0024F8                     l7049:
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;cmd_consol.c: 395: }
  2527                           ;cmd_consol.c: 396: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2528  0024F8  0E01               	movlw	1
  2529  0024FA  0100               	movlb	0	; () banked
  2530  0024FC  6F82               	movwf	_cmd_consol_state& (0+255),b
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;cmd_consol.c: 398: }
  2534                           ;cmd_consol.c: 399: }
  2535                           
  2536                           ;cmd_consol.c: 397: break;
  2537  0024FE  0012               	return	
  2538  002500                     l7053:
  2539  002500  0100               	movlb	0	; () banked
  2540  002502  5182               	movf	_cmd_consol_state& (0+255),w,b
  2541                           
  2542                           ; Switch size 1, requested type "space"
  2543                           ; Number of cases is 3, Range of values is 0 to 2
  2544                           ; switch strategies available:
  2545                           ; Name         Instructions Cycles
  2546                           ; simple_byte           10     6 (average)
  2547                           ;	Chosen strategy is simple_byte
  2548  002504  0A00               	xorlw	0	; case 0
  2549  002506  B4D8               	btfsc	status,2,c
  2550  002508  D796               	goto	l7023
  2551  00250A  0A01               	xorlw	1	; case 1
  2552  00250C  B4D8               	btfsc	status,2,c
  2553  00250E  D7BC               	goto	l7031
  2554  002510  0A03               	xorlw	3	; case 2
  2555  002512  A4D8               	btfss	status,2,c
  2556  002514  0012               	return	
  2557  002516  D7E7               	goto	l7043
  2558  002518                     __end_of_cmd_consol_task:
  2559                           	opt stack 0
  2560                           tblptru	equ	0xFF8
  2561                           tblptrh	equ	0xFF7
  2562                           tblptrl	equ	0xFF6
  2563                           tablat	equ	0xFF5
  2564                           intcon	equ	0xFF2
  2565                           postinc0	equ	0xFEE
  2566                           wreg	equ	0xFE8
  2567                           postdec1	equ	0xFE5
  2568                           fsr1h	equ	0xFE2
  2569                           fsr1l	equ	0xFE1
  2570                           indf2	equ	0xFDF
  2571                           fsr2h	equ	0xFDA
  2572                           fsr2l	equ	0xFD9
  2573                           status	equ	0xFD8
  2574                           
  2575 ;; *************** function _reply_to_host *****************
  2576 ;; Defined at:
  2577 ;;		line 283 in file "cmd_consol.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;		None
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;  ch              1    8[BANK1 ] unsigned char 
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      void 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;Total ram usage:        4 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:   12
  2598 ;; This function calls:
  2599 ;;		_clcd_max_col
  2600 ;;		_clcd_max_row
  2601 ;;		_init_clcd_cusotom_lcd
  2602 ;;		_max_display_str
  2603 ;;		_max_display_support
  2604 ;;		_max_uid_range
  2605 ;;		_min_uid_range
  2606 ;;		_printf
  2607 ;;		_puts
  2608 ;;		_strcmp
  2609 ;;		_update_string_data
  2610 ;; This function is called by:
  2611 ;;		_cmd_consol_task
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           	psect	text4
  2616  0010FA                     __ptext4:
  2617                           	opt stack 0
  2618  0010FA                     _reply_to_host:
  2619                           	opt stack 17
  2620                           
  2621                           ;cmd_consol.c: 284: if (strcmp(CMD, "KLM") == 0) {
  2622                           
  2623                           ;incstack = 0
  2624  0010FA  0ECB               	movlw	low _CMD
  2625  0010FC  6E10               	movwf	strcmp@s1,c
  2626  0010FE  0E00               	movlw	high _CMD
  2627  001100  6E11               	movwf	strcmp@s1+1,c
  2628  001102  0EF8               	movlw	low STR_68
  2629  001104  6E12               	movwf	strcmp@s2,c
  2630  001106  0EFF               	movlw	high STR_68
  2631  001108  6E13               	movwf	strcmp@s2+1,c
  2632  00110A  ECB0  F018         	call	_strcmp	;wreg free
  2633  00110E  5010               	movf	?_strcmp,w,c
  2634  001110  1011               	iorwf	?_strcmp+1,w,c
  2635  001112  A4D8               	btfss	status,2,c
  2636  001114  D007               	goto	l6883
  2637                           
  2638                           ;cmd_consol.c: 285: puts("OK\r\n");
  2639  001116  0E9F               	movlw	low (STR_73+8)
  2640  001118  6E14               	movwf	puts@s,c
  2641  00111A  0EFE               	movlw	high (STR_73+8)
  2642  00111C  6E15               	movwf	puts@s+1,c
  2643  00111E  EC58  F01B         	call	_puts	;wreg free
  2644                           
  2645                           ;cmd_consol.c: 286: } else if (strcmp(CMD, "KLM+LCDS?") == 0) {
  2646  001122  0012               	return	
  2647  001124                     l6883:
  2648  001124  0ECB               	movlw	low _CMD
  2649  001126  6E10               	movwf	strcmp@s1,c
  2650  001128  0E00               	movlw	high _CMD
  2651  00112A  6E11               	movwf	strcmp@s1+1,c
  2652  00112C  0E50               	movlw	low STR_27
  2653  00112E  6E12               	movwf	strcmp@s2,c
  2654  001130  0EFF               	movlw	high STR_27
  2655  001132  6E13               	movwf	strcmp@s2+1,c
  2656  001134  ECB0  F018         	call	_strcmp	;wreg free
  2657  001138  5010               	movf	?_strcmp,w,c
  2658  00113A  1011               	iorwf	?_strcmp+1,w,c
  2659  00113C  A4D8               	btfss	status,2,c
  2660  00113E  D017               	goto	l6887
  2661                           
  2662                           ;cmd_consol.c: 287: printf("%s\r\n", max_display_support());
  2663  001140  0EDC               	movlw	low (STR_105+2)
  2664  001142  6E24               	movwf	printf@f,c
  2665  001144  0EFF               	movlw	high (STR_105+2)
  2666  001146  6E25               	movwf	printf@f+1,c
  2667  001148  ECB5  F01B         	call	_max_display_support	;wreg free
  2668  00114C  C010  F026         	movff	?_max_display_support,?_printf+2
  2669  001150  C011  F027         	movff	?_max_display_support+1,?_printf+3
  2670  001154  EC0F  F00F         	call	_printf	;wreg free
  2671                           
  2672                           ;cmd_consol.c: 288: printf("\r\n%s.., OK\r\n", "KLM+LCDS?");
  2673  001158  0E97               	movlw	low STR_73
  2674  00115A  6E24               	movwf	printf@f,c
  2675  00115C  0EFE               	movlw	high STR_73
  2676  00115E  6E25               	movwf	printf@f+1,c
  2677  001160  0E50               	movlw	low STR_27
  2678  001162  6E26               	movwf	?_printf+2,c
  2679  001164  0EFF               	movlw	high STR_27
  2680  001166  6E27               	movwf	?_printf+3,c
  2681  001168  EC0F  F00F         	call	_printf	;wreg free
  2682                           
  2683                           ;cmd_consol.c: 289: } else if (strcmp(CMD, "KLM+MC?") == 0) {
  2684  00116C  0012               	return	
  2685  00116E                     l6887:
  2686  00116E  0ECB               	movlw	low _CMD
  2687  001170  6E10               	movwf	strcmp@s1,c
  2688  001172  0E00               	movlw	high _CMD
  2689  001174  6E11               	movwf	strcmp@s1+1,c
  2690  001176  0EB4               	movlw	low STR_23
  2691  001178  6E12               	movwf	strcmp@s2,c
  2692  00117A  0EFF               	movlw	high STR_23
  2693  00117C  6E13               	movwf	strcmp@s2+1,c
  2694  00117E  ECB0  F018         	call	_strcmp	;wreg free
  2695  001182  5010               	movf	?_strcmp,w,c
  2696  001184  1011               	iorwf	?_strcmp+1,w,c
  2697  001186  A4D8               	btfss	status,2,c
  2698  001188  D019               	goto	l6891
  2699                           
  2700                           ;cmd_consol.c: 290: printf("%d\r\n", clcd_max_col());
  2701  00118A  0EF3               	movlw	low (STR_10+14)
  2702  00118C  6E24               	movwf	printf@f,c
  2703  00118E  0EFD               	movlw	high (STR_10+14)
  2704  001190  6E25               	movwf	printf@f+1,c
  2705  001192  EC8E  F01B         	call	_clcd_max_col	;wreg free
  2706  001196  0101               	movlb	1	; () banked
  2707  001198  6F7D               	movwf	??_reply_to_host& (0+255),b
  2708  00119A  0101               	movlb	1	; () banked
  2709  00119C  517D               	movf	??_reply_to_host& (0+255),w,b
  2710  00119E  6E26               	movwf	?_printf+2,c
  2711  0011A0  6A27               	clrf	?_printf+3,c
  2712  0011A2  EC0F  F00F         	call	_printf	;wreg free
  2713                           
  2714                           ;cmd_consol.c: 291: printf("\r\n%s.., OK\r\n", "KLM+MC?");
  2715  0011A6  0E97               	movlw	low STR_73
  2716  0011A8  6E24               	movwf	printf@f,c
  2717  0011AA  0EFE               	movlw	high STR_73
  2718  0011AC  6E25               	movwf	printf@f+1,c
  2719  0011AE  0EB4               	movlw	low STR_23
  2720  0011B0  6E26               	movwf	?_printf+2,c
  2721  0011B2  0EFF               	movlw	high STR_23
  2722  0011B4  6E27               	movwf	?_printf+3,c
  2723  0011B6  EC0F  F00F         	call	_printf	;wreg free
  2724                           
  2725                           ;cmd_consol.c: 292: } else if (strcmp(CMD, "KLM+MR?") == 0) {
  2726  0011BA  0012               	return	
  2727  0011BC                     l6891:
  2728  0011BC  0ECB               	movlw	low _CMD
  2729  0011BE  6E10               	movwf	strcmp@s1,c
  2730  0011C0  0E00               	movlw	high _CMD
  2731  0011C2  6E11               	movwf	strcmp@s1+1,c
  2732  0011C4  0EBC               	movlw	low STR_25
  2733  0011C6  6E12               	movwf	strcmp@s2,c
  2734  0011C8  0EFF               	movlw	high STR_25
  2735  0011CA  6E13               	movwf	strcmp@s2+1,c
  2736  0011CC  ECB0  F018         	call	_strcmp	;wreg free
  2737  0011D0  5010               	movf	?_strcmp,w,c
  2738  0011D2  1011               	iorwf	?_strcmp+1,w,c
  2739  0011D4  A4D8               	btfss	status,2,c
  2740  0011D6  D019               	goto	l6895
  2741                           
  2742                           ;cmd_consol.c: 293: printf("%d\r\n", clcd_max_row());
  2743  0011D8  0EF3               	movlw	low (STR_10+14)
  2744  0011DA  6E24               	movwf	printf@f,c
  2745  0011DC  0EFD               	movlw	high (STR_10+14)
  2746  0011DE  6E25               	movwf	printf@f+1,c
  2747  0011E0  EC87  F01B         	call	_clcd_max_row	;wreg free
  2748  0011E4  0101               	movlb	1	; () banked
  2749  0011E6  6F7D               	movwf	??_reply_to_host& (0+255),b
  2750  0011E8  0101               	movlb	1	; () banked
  2751  0011EA  517D               	movf	??_reply_to_host& (0+255),w,b
  2752  0011EC  6E26               	movwf	?_printf+2,c
  2753  0011EE  6A27               	clrf	?_printf+3,c
  2754  0011F0  EC0F  F00F         	call	_printf	;wreg free
  2755                           
  2756                           ;cmd_consol.c: 294: printf("\r\n%s.., OK\r\n", "KLM+MR?");
  2757  0011F4  0E97               	movlw	low STR_73
  2758  0011F6  6E24               	movwf	printf@f,c
  2759  0011F8  0EFE               	movlw	high STR_73
  2760  0011FA  6E25               	movwf	printf@f+1,c
  2761  0011FC  0EBC               	movlw	low STR_25
  2762  0011FE  6E26               	movwf	?_printf+2,c
  2763  001200  0EFF               	movlw	high STR_25
  2764  001202  6E27               	movwf	?_printf+3,c
  2765  001204  EC0F  F00F         	call	_printf	;wreg free
  2766                           
  2767                           ;cmd_consol.c: 295: } else if (strcmp(CMD, "KLM+LCDS") == 0) {
  2768  001208  0012               	return	
  2769  00120A                     l6895:
  2770  00120A  0ECB               	movlw	low _CMD
  2771  00120C  6E10               	movwf	strcmp@s1,c
  2772  00120E  0E00               	movlw	high _CMD
  2773  001210  6E11               	movwf	strcmp@s1+1,c
  2774  001212  0E89               	movlw	low STR_30
  2775  001214  6E12               	movwf	strcmp@s2,c
  2776  001216  0EFF               	movlw	high STR_30
  2777  001218  6E13               	movwf	strcmp@s2+1,c
  2778  00121A  ECB0  F018         	call	_strcmp	;wreg free
  2779  00121E  5010               	movf	?_strcmp,w,c
  2780  001220  1011               	iorwf	?_strcmp+1,w,c
  2781  001222  A4D8               	btfss	status,2,c
  2782  001224  D011               	goto	l6901
  2783                           
  2784                           ;cmd_consol.c: 296: init_clcd_cusotom_lcd(clcd_init_row, clcd_init_col);
  2785  001226  C080  F036         	movff	_clcd_init_col,init_clcd_cusotom_lcd@clcd_init_col
  2786  00122A  0100               	movlb	0	; () banked
  2787  00122C  5181               	movf	_clcd_init_row& (0+255),w,b
  2788  00122E  EC08  F014         	call	_init_clcd_cusotom_lcd
  2789                           
  2790                           ;cmd_consol.c: 297: printf("\r\n%s.., OK\r\n", "KLM+LCDS");
  2791  001232  0E97               	movlw	low STR_73
  2792  001234  6E24               	movwf	printf@f,c
  2793  001236  0EFE               	movlw	high STR_73
  2794  001238  6E25               	movwf	printf@f+1,c
  2795  00123A  0E89               	movlw	low STR_30
  2796  00123C  6E26               	movwf	?_printf+2,c
  2797  00123E  0EFF               	movlw	high STR_30
  2798  001240  6E27               	movwf	?_printf+3,c
  2799  001242  EC0F  F00F         	call	_printf	;wreg free
  2800                           
  2801                           ;cmd_consol.c: 298: } else if (strcmp(CMD, "KLM+GMDS?") == 0) {
  2802  001246  0012               	return	
  2803  001248                     l6901:
  2804  001248  0ECB               	movlw	low _CMD
  2805  00124A  6E10               	movwf	strcmp@s1,c
  2806  00124C  0E00               	movlw	high _CMD
  2807  00124E  6E11               	movwf	strcmp@s1+1,c
  2808  001250  0E5A               	movlw	low STR_35
  2809  001252  6E12               	movwf	strcmp@s2,c
  2810  001254  0EFF               	movlw	high STR_35
  2811  001256  6E13               	movwf	strcmp@s2+1,c
  2812  001258  ECB0  F018         	call	_strcmp	;wreg free
  2813  00125C  5010               	movf	?_strcmp,w,c
  2814  00125E  1011               	iorwf	?_strcmp+1,w,c
  2815  001260  A4D8               	btfss	status,2,c
  2816  001262  D03D               	goto	l6909
  2817                           
  2818                           ;cmd_consol.c: 299: if (max_display_str() != 0) {
  2819  001264  EC80  F01B         	call	_max_display_str	;wreg free
  2820  001268  0900               	iorlw	0
  2821  00126A  B4D8               	btfsc	status,2,c
  2822  00126C  D01F               	goto	l6907
  2823                           
  2824                           ;cmd_consol.c: 300: printf("%d,%c-%c\r\n", max_display_str(), min_uid_range(), max_uid_r
      +                          ange());
  2825  00126E  0EF8               	movlw	low STR_87
  2826  001270  6E24               	movwf	printf@f,c
  2827  001272  0EFE               	movlw	high STR_87
  2828  001274  6E25               	movwf	printf@f+1,c
  2829  001276  EC80  F01B         	call	_max_display_str	;wreg free
  2830  00127A  0101               	movlb	1	; () banked
  2831  00127C  6F7D               	movwf	??_reply_to_host& (0+255),b
  2832  00127E  0101               	movlb	1	; () banked
  2833  001280  517D               	movf	??_reply_to_host& (0+255),w,b
  2834  001282  6E26               	movwf	?_printf+2,c
  2835  001284  6A27               	clrf	?_printf+3,c
  2836  001286  EC72  F01B         	call	_min_uid_range	;wreg free
  2837  00128A  0101               	movlb	1	; () banked
  2838  00128C  6F7E               	movwf	(??_reply_to_host+1)& (0+255),b
  2839  00128E  0101               	movlb	1	; () banked
  2840  001290  517E               	movf	(??_reply_to_host+1)& (0+255),w,b
  2841  001292  6E28               	movwf	?_printf+4,c
  2842  001294  6A29               	clrf	?_printf+5,c
  2843  001296  EC79  F01B         	call	_max_uid_range	;wreg free
  2844  00129A  0101               	movlb	1	; () banked
  2845  00129C  6F7F               	movwf	(??_reply_to_host+2)& (0+255),b
  2846  00129E  0101               	movlb	1	; () banked
  2847  0012A0  517F               	movf	(??_reply_to_host+2)& (0+255),w,b
  2848  0012A2  6E2A               	movwf	?_printf+6,c
  2849  0012A4  6A2B               	clrf	?_printf+7,c
  2850  0012A6  EC0F  F00F         	call	_printf	;wreg free
  2851                           
  2852                           ;cmd_consol.c: 301: } else {
  2853  0012AA  D00E               	goto	l786
  2854  0012AC                     l6907:
  2855                           
  2856                           ;cmd_consol.c: 302: printf("%d\r\n", max_display_str());
  2857  0012AC  0EF3               	movlw	low (STR_10+14)
  2858  0012AE  6E24               	movwf	printf@f,c
  2859  0012B0  0EFD               	movlw	high (STR_10+14)
  2860  0012B2  6E25               	movwf	printf@f+1,c
  2861  0012B4  EC80  F01B         	call	_max_display_str	;wreg free
  2862  0012B8  0101               	movlb	1	; () banked
  2863  0012BA  6F7D               	movwf	??_reply_to_host& (0+255),b
  2864  0012BC  0101               	movlb	1	; () banked
  2865  0012BE  517D               	movf	??_reply_to_host& (0+255),w,b
  2866  0012C0  6E26               	movwf	?_printf+2,c
  2867  0012C2  6A27               	clrf	?_printf+3,c
  2868  0012C4  EC0F  F00F         	call	_printf	;wreg free
  2869  0012C8                     l786:
  2870                           
  2871                           ;cmd_consol.c: 303: }
  2872                           ;cmd_consol.c: 304: printf("\r\n%s.., OK\r\n", "KLM+GMDS?");
  2873  0012C8  0E97               	movlw	low STR_73
  2874  0012CA  6E24               	movwf	printf@f,c
  2875  0012CC  0EFE               	movlw	high STR_73
  2876  0012CE  6E25               	movwf	printf@f+1,c
  2877  0012D0  0E5A               	movlw	low STR_35
  2878  0012D2  6E26               	movwf	?_printf+2,c
  2879  0012D4  0EFF               	movlw	high STR_35
  2880  0012D6  6E27               	movwf	?_printf+3,c
  2881  0012D8  EC0F  F00F         	call	_printf	;wreg free
  2882                           
  2883                           ;cmd_consol.c: 305: } else if (strcmp(CMD, "KLM+SDSTR") == 0) {
  2884  0012DC  0012               	return	
  2885  0012DE                     l6909:
  2886  0012DE  0ECB               	movlw	low _CMD
  2887  0012E0  6E10               	movwf	strcmp@s1,c
  2888  0012E2  0E00               	movlw	high _CMD
  2889  0012E4  6E11               	movwf	strcmp@s1+1,c
  2890  0012E6  0E64               	movlw	low STR_37
  2891  0012E8  6E12               	movwf	strcmp@s2,c
  2892  0012EA  0EFF               	movlw	high STR_37
  2893  0012EC  6E13               	movwf	strcmp@s2+1,c
  2894  0012EE  ECB0  F018         	call	_strcmp	;wreg free
  2895  0012F2  5010               	movf	?_strcmp,w,c
  2896  0012F4  1011               	iorwf	?_strcmp+1,w,c
  2897  0012F6  A4D8               	btfss	status,2,c
  2898  0012F8  D00B               	goto	l6913
  2899                           
  2900                           ;cmd_consol.c: 306: printf("\r\n%s.., OK\r\n", "KLM+SDSTR");
  2901  0012FA  0E97               	movlw	low STR_73
  2902  0012FC  6E24               	movwf	printf@f,c
  2903  0012FE  0EFE               	movlw	high STR_73
  2904  001300  6E25               	movwf	printf@f+1,c
  2905  001302  0E64               	movlw	low STR_37
  2906  001304  6E26               	movwf	?_printf+2,c
  2907  001306  0EFF               	movlw	high STR_37
  2908  001308  6E27               	movwf	?_printf+3,c
  2909  00130A  EC0F  F00F         	call	_printf	;wreg free
  2910                           
  2911                           ;cmd_consol.c: 307: } else if (strcmp(CMD, "KLM+SDSCROL") == 0) {
  2912  00130E  0012               	return	
  2913  001310                     l6913:
  2914  001310  0ECB               	movlw	low _CMD
  2915  001312  6E10               	movwf	strcmp@s1,c
  2916  001314  0E00               	movlw	high _CMD
  2917  001316  6E11               	movwf	strcmp@s1+1,c
  2918  001318  0ED4               	movlw	low STR_45
  2919  00131A  6E12               	movwf	strcmp@s2,c
  2920  00131C  0EFE               	movlw	high STR_45
  2921  00131E  6E13               	movwf	strcmp@s2+1,c
  2922  001320  ECB0  F018         	call	_strcmp	;wreg free
  2923  001324  5010               	movf	?_strcmp,w,c
  2924  001326  1011               	iorwf	?_strcmp+1,w,c
  2925  001328  A4D8               	btfss	status,2,c
  2926  00132A  D00B               	goto	l6917
  2927                           
  2928                           ;cmd_consol.c: 308: printf("\r\n%s.., OK\r\n", "KLM+SDSCROL");
  2929  00132C  0E97               	movlw	low STR_73
  2930  00132E  6E24               	movwf	printf@f,c
  2931  001330  0EFE               	movlw	high STR_73
  2932  001332  6E25               	movwf	printf@f+1,c
  2933  001334  0ED4               	movlw	low STR_45
  2934  001336  6E26               	movwf	?_printf+2,c
  2935  001338  0EFE               	movlw	high STR_45
  2936  00133A  6E27               	movwf	?_printf+3,c
  2937  00133C  EC0F  F00F         	call	_printf	;wreg free
  2938                           
  2939                           ;cmd_consol.c: 309: } else if (strcmp(CMD, "KLM+SDSERC") == 0) {
  2940  001340  0012               	return	
  2941  001342                     l6917:
  2942  001342  0ECB               	movlw	low _CMD
  2943  001344  6E10               	movwf	strcmp@s1,c
  2944  001346  0E00               	movlw	high _CMD
  2945  001348  6E11               	movwf	strcmp@s1+1,c
  2946  00134A  0E3A               	movlw	low STR_54
  2947  00134C  6E12               	movwf	strcmp@s2,c
  2948  00134E  0EFF               	movlw	high STR_54
  2949  001350  6E13               	movwf	strcmp@s2+1,c
  2950  001352  ECB0  F018         	call	_strcmp	;wreg free
  2951  001356  5010               	movf	?_strcmp,w,c
  2952  001358  1011               	iorwf	?_strcmp+1,w,c
  2953  00135A  A4D8               	btfss	status,2,c
  2954  00135C  D00B               	goto	l6921
  2955                           
  2956                           ;cmd_consol.c: 310: printf("\r\n%s.., OK\r\n", "KLM+SDSERC");
  2957  00135E  0E97               	movlw	low STR_73
  2958  001360  6E24               	movwf	printf@f,c
  2959  001362  0EFE               	movlw	high STR_73
  2960  001364  6E25               	movwf	printf@f+1,c
  2961  001366  0E3A               	movlw	low STR_54
  2962  001368  6E26               	movwf	?_printf+2,c
  2963  00136A  0EFF               	movlw	high STR_54
  2964  00136C  6E27               	movwf	?_printf+3,c
  2965  00136E  EC0F  F00F         	call	_printf	;wreg free
  2966                           
  2967                           ;cmd_consol.c: 311: } else if (strcmp(CMD, "KLM+UPDATE") == 0) {
  2968  001372  0012               	return	
  2969  001374                     l6921:
  2970  001374  0ECB               	movlw	low _CMD
  2971  001376  6E10               	movwf	strcmp@s1,c
  2972  001378  0E00               	movlw	high _CMD
  2973  00137A  6E11               	movwf	strcmp@s1+1,c
  2974  00137C  0E45               	movlw	low STR_67
  2975  00137E  6E12               	movwf	strcmp@s2,c
  2976  001380  0EFF               	movlw	high STR_67
  2977  001382  6E13               	movwf	strcmp@s2+1,c
  2978  001384  ECB0  F018         	call	_strcmp	;wreg free
  2979  001388  5010               	movf	?_strcmp,w,c
  2980  00138A  1011               	iorwf	?_strcmp+1,w,c
  2981  00138C  A4D8               	btfss	status,2,c
  2982  00138E  0012               	return	
  2983                           
  2984                           ;cmd_consol.c: 312: if (cmd_data.data_set == 1 && cmd_data.row_col_set == 1 && cmd_data.
      +                          scroll_set == 1) {
  2985  001390  0100               	movlb	0	; () banked
  2986  001392  05AF               	decf	(_cmd_data+41)& (0+255),w,b
  2987  001394  A4D8               	btfss	status,2,c
  2988  001396  D02C               	goto	l6937
  2989                           
  2990                           ; BSR set to: 0
  2991  001398  0100               	movlb	0	; () banked
  2992  00139A  05B4               	decf	(_cmd_data+46)& (0+255),w,b
  2993  00139C  A4D8               	btfss	status,2,c
  2994  00139E  D028               	goto	l6937
  2995                           
  2996                           ; BSR set to: 0
  2997  0013A0  0100               	movlb	0	; () banked
  2998  0013A2  05B6               	decf	(_cmd_data+48)& (0+255),w,b
  2999  0013A4  A4D8               	btfss	status,2,c
  3000  0013A6  D024               	goto	l6937
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;cmd_consol.c: 313: char ch = update_string_data(&cmd_data);
  3004  0013A8  0E86               	movlw	low _cmd_data
  3005  0013AA  0100               	movlb	0	; () banked
  3006  0013AC  6FE7               	movwf	update_string_data@data& (0+255),b
  3007  0013AE  0E00               	movlw	high _cmd_data
  3008  0013B0  0100               	movlb	0	; () banked
  3009  0013B2  6FE8               	movwf	(update_string_data@data+1)& (0+255),b
  3010  0013B4  EC8C  F012         	call	_update_string_data	;wreg free
  3011  0013B8  0101               	movlb	1	; () banked
  3012  0013BA  6F80               	movwf	reply_to_host@ch& (0+255),b
  3013                           
  3014                           ; BSR set to: 1
  3015                           ;cmd_consol.c: 314: if(ch == 1)
  3016  0013BC  0101               	movlb	1	; () banked
  3017  0013BE  0580               	decf	reply_to_host@ch& (0+255),w,b
  3018  0013C0  A4D8               	btfss	status,2,c
  3019  0013C2  D00B               	goto	l6935
  3020                           
  3021                           ; BSR set to: 1
  3022                           ;cmd_consol.c: 315: printf("%s\r\n","ERROR");
  3023  0013C4  0EDC               	movlw	low (STR_105+2)
  3024  0013C6  6E24               	movwf	printf@f,c
  3025  0013C8  0EFF               	movlw	high (STR_105+2)
  3026  0013CA  6E25               	movwf	printf@f+1,c
  3027  0013CC  0EE8               	movlw	low STR_102
  3028  0013CE  6E26               	movwf	?_printf+2,c
  3029  0013D0  0EFF               	movlw	high STR_102
  3030  0013D2  6E27               	movwf	?_printf+3,c
  3031  0013D4  EC0F  F00F         	call	_printf	;wreg free
  3032  0013D8  0012               	return	
  3033  0013DA                     l6935:
  3034                           
  3035                           ;cmd_consol.c: 316: else
  3036                           ;cmd_consol.c: 317: printf("\r\n%s.., OK\r\n", "KLM+UPDATE");
  3037  0013DA  0E97               	movlw	low STR_73
  3038  0013DC  6E24               	movwf	printf@f,c
  3039  0013DE  0EFE               	movlw	high STR_73
  3040  0013E0  6E25               	movwf	printf@f+1,c
  3041  0013E2  0E45               	movlw	low STR_67
  3042  0013E4  6E26               	movwf	?_printf+2,c
  3043  0013E6  0EFF               	movlw	high STR_67
  3044  0013E8  6E27               	movwf	?_printf+3,c
  3045  0013EA  EC0F  F00F         	call	_printf	;wreg free
  3046                           
  3047                           ;cmd_consol.c: 318: } else {
  3048  0013EE  0012               	return	
  3049  0013F0                     l6937:
  3050                           
  3051                           ;cmd_consol.c: 319: if (cmd_data.data_set == 0) {
  3052  0013F0  0100               	movlb	0	; () banked
  3053  0013F2  51AF               	movf	(_cmd_data+41)& (0+255),w,b
  3054  0013F4  A4D8               	btfss	status,2,c
  3055  0013F6  D00B               	goto	l6941
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;cmd_consol.c: 320: printf("\r\n%s\r\n", "ERR_STR_SET");
  3059  0013F8  0EDA               	movlw	low STR_105
  3060  0013FA  6E24               	movwf	printf@f,c
  3061  0013FC  0EFF               	movlw	high STR_105
  3062  0013FE  6E25               	movwf	printf@f+1,c
  3063  001400  0EEC               	movlw	low STR_106
  3064  001402  6E26               	movwf	?_printf+2,c
  3065  001404  0EFE               	movlw	high STR_106
  3066  001406  6E27               	movwf	?_printf+3,c
  3067  001408  EC0F  F00F         	call	_printf	;wreg free
  3068                           
  3069                           ;cmd_consol.c: 321: } else if (cmd_data.row_col_set == 0) {
  3070  00140C  0012               	return	
  3071  00140E                     l6941:
  3072  00140E  0100               	movlb	0	; () banked
  3073  001410  51B4               	movf	(_cmd_data+46)& (0+255),w,b
  3074  001412  A4D8               	btfss	status,2,c
  3075  001414  D00B               	goto	l6945
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;cmd_consol.c: 322: printf("\r\n%s\r\n", "ERR_ROW_COL");
  3079  001416  0EDA               	movlw	low STR_105
  3080  001418  6E24               	movwf	printf@f,c
  3081  00141A  0EFF               	movlw	high STR_105
  3082  00141C  6E25               	movwf	printf@f+1,c
  3083  00141E  0EC8               	movlw	low STR_108
  3084  001420  6E26               	movwf	?_printf+2,c
  3085  001422  0EFE               	movlw	high STR_108
  3086  001424  6E27               	movwf	?_printf+3,c
  3087  001426  EC0F  F00F         	call	_printf	;wreg free
  3088                           
  3089                           ;cmd_consol.c: 323: } else if (cmd_data.scroll_set == 0) {
  3090  00142A  0012               	return	
  3091  00142C                     l6945:
  3092  00142C  0100               	movlb	0	; () banked
  3093  00142E  51B6               	movf	(_cmd_data+48)& (0+255),w,b
  3094  001430  A4D8               	btfss	status,2,c
  3095  001432  0012               	return	
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;cmd_consol.c: 324: printf("\r\n%s\r\n", "ERR_SCROLL_SET");
  3099  001434  0EDA               	movlw	low STR_105
  3100  001436  6E24               	movwf	printf@f,c
  3101  001438  0EFF               	movlw	high STR_105
  3102  00143A  6E25               	movwf	printf@f+1,c
  3103  00143C  0E6C               	movlw	low STR_110
  3104  00143E  6E26               	movwf	?_printf+2,c
  3105  001440  0EFE               	movlw	high STR_110
  3106  001442  6E27               	movwf	?_printf+3,c
  3107  001444  EC0F  F00F         	call	_printf	;wreg free
  3108  001448  0012               	return	
  3109  00144A                     __end_of_reply_to_host:
  3110                           	opt stack 0
  3111                           tblptru	equ	0xFF8
  3112                           tblptrh	equ	0xFF7
  3113                           tblptrl	equ	0xFF6
  3114                           tablat	equ	0xFF5
  3115                           intcon	equ	0xFF2
  3116                           postinc0	equ	0xFEE
  3117                           wreg	equ	0xFE8
  3118                           postdec1	equ	0xFE5
  3119                           fsr1h	equ	0xFE2
  3120                           fsr1l	equ	0xFE1
  3121                           indf2	equ	0xFDF
  3122                           fsr2h	equ	0xFDA
  3123                           fsr2l	equ	0xFD9
  3124                           status	equ	0xFD8
  3125                           
  3126 ;; *************** function _update_string_data *****************
  3127 ;; Defined at:
  3128 ;;		line 176 in file "clcd.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;  data            2   13[BANK0 ] PTR struct .
  3131 ;;		 -> cmd_data(49), 
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;  i               2    3[BANK1 ] int 
  3134 ;;  exist_uid_id    1    2[BANK1 ] unsigned char 
  3135 ;;  end_point       1    1[BANK1 ] unsigned char 
  3136 ;;  start_point     1    0[BANK1 ] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      unsigned char 
  3139 ;; Registers used:
  3140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3146 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Totals:         0       5       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;Total ram usage:       10 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:   10
  3153 ;; This function calls:
  3154 ;;		___wmul
  3155 ;;		_conflict_check
  3156 ;;		_copy_data
  3157 ;;		_make_display
  3158 ;;		_memset
  3159 ;; This function is called by:
  3160 ;;		_reply_to_host
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text5
  3165  002518                     __ptext5:
  3166                           	opt stack 0
  3167  002518                     _update_string_data:
  3168                           	opt stack 18
  3169                           
  3170                           ;clcd.c: 177: int i = 0;
  3171                           
  3172                           ;incstack = 0
  3173  002518  0E00               	movlw	0
  3174  00251A  0101               	movlb	1	; () banked
  3175  00251C  6F7C               	movwf	(update_string_data@i+1)& (0+255),b
  3176  00251E  0E00               	movlw	0
  3177  002520  6F7B               	movwf	update_string_data@i& (0+255),b
  3178                           
  3179                           ; BSR set to: 1
  3180                           ;clcd.c: 178: char exist_uid_idx=-1;
  3181  002522  0101               	movlb	1	; () banked
  3182  002524  697A               	setf	update_string_data@exist_uid_idx& (0+255),b
  3183                           
  3184                           ; BSR set to: 1
  3185                           ;clcd.c: 179: char start_point, end_point;
  3186                           ;clcd.c: 181: start_point = (data->start_row * clcd_config_data.clcd_max_col) + data->st
      +                          art_col;
  3187  002526  0100               	movlb	0	; () banked
  3188  002528  EE20 F02B          	lfsr	2,43
  3189  00252C  51E7               	movf	update_string_data@data& (0+255),w,b
  3190  00252E  26D9               	addwf	fsr2l,f,c
  3191  002530  51E8               	movf	(update_string_data@data+1)& (0+255),w,b
  3192  002532  22DA               	addwfc	fsr2h,f,c
  3193  002534  50DF               	movf	indf2,w,c
  3194  002536  0100               	movlb	0	; () banked
  3195  002538  6FE9               	movwf	??_update_string_data& (0+255),b
  3196  00253A  0100               	movlb	0	; () banked
  3197  00253C  EE20 F02A          	lfsr	2,42
  3198  002540  51E7               	movf	update_string_data@data& (0+255),w,b
  3199  002542  26D9               	addwf	fsr2l,f,c
  3200  002544  51E8               	movf	(update_string_data@data+1)& (0+255),w,b
  3201  002546  22DA               	addwfc	fsr2h,f,c
  3202  002548  50DF               	movf	indf2,w,c
  3203  00254A  024B               	mulwf	_clcd_config_data+2,c
  3204  00254C  50F3               	movf	prodl,w,c
  3205  00254E  0100               	movlb	0	; () banked
  3206  002550  25E9               	addwf	??_update_string_data& (0+255),w,b
  3207  002552  0101               	movlb	1	; () banked
  3208  002554  6F78               	movwf	update_string_data@start_point& (0+255),b
  3209                           
  3210                           ; BSR set to: 1
  3211                           ;clcd.c: 182: end_point = (data->end_row * clcd_config_data.clcd_max_col) + data->end_co
      +                          l;
  3212  002556  0100               	movlb	0	; () banked
  3213  002558  EE20 F02D          	lfsr	2,45
  3214  00255C  51E7               	movf	update_string_data@data& (0+255),w,b
  3215  00255E  26D9               	addwf	fsr2l,f,c
  3216  002560  51E8               	movf	(update_string_data@data+1)& (0+255),w,b
  3217  002562  22DA               	addwfc	fsr2h,f,c
  3218  002564  50DF               	movf	indf2,w,c
  3219  002566  0100               	movlb	0	; () banked
  3220  002568  6FE9               	movwf	??_update_string_data& (0+255),b
  3221  00256A  0100               	movlb	0	; () banked
  3222  00256C  EE20 F02C          	lfsr	2,44
  3223  002570  51E7               	movf	update_string_data@data& (0+255),w,b
  3224  002572  26D9               	addwf	fsr2l,f,c
  3225  002574  51E8               	movf	(update_string_data@data+1)& (0+255),w,b
  3226  002576  22DA               	addwfc	fsr2h,f,c
  3227  002578  50DF               	movf	indf2,w,c
  3228  00257A  024B               	mulwf	_clcd_config_data+2,c
  3229  00257C  50F3               	movf	prodl,w,c
  3230  00257E  0100               	movlb	0	; () banked
  3231  002580  25E9               	addwf	??_update_string_data& (0+255),w,b
  3232  002582  0101               	movlb	1	; () banked
  3233  002584  6F79               	movwf	update_string_data@end_point& (0+255),b
  3234                           
  3235                           ; BSR set to: 1
  3236                           ;clcd.c: 184: if (data_count < clcd_config_data.clcd_max_display_string) {
  3237  002586  504D               	movf	_clcd_config_data+4,w,c
  3238  002588  5C43               	subwf	_data_count,w,c
  3239  00258A  B0D8               	btfsc	status,0,c
  3240  00258C  D090               	goto	l6331
  3241                           
  3242                           ; BSR set to: 1
  3243                           ;clcd.c: 185: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3244  00258E  0E00               	movlw	0
  3245  002590  0101               	movlb	1	; () banked
  3246  002592  6F7C               	movwf	(update_string_data@i+1)& (0+255),b
  3247  002594  0E00               	movlw	0
  3248  002596  6F7B               	movwf	update_string_data@i& (0+255),b
  3249  002598  D053               	goto	l6321
  3250  00259A                     l6297:
  3251                           
  3252                           ;clcd.c: 186: if (clcd_display_string_details[i].uid == data->uid) {
  3253  00259A  C0E7  FFD9         	movff	update_string_data@data,fsr2l
  3254  00259E  C0E8  FFDA         	movff	update_string_data@data+1,fsr2h
  3255  0025A2  C17B  F018         	movff	update_string_data@i,___wmul@multiplier
  3256  0025A6  C17C  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  3257  0025AA  0E00               	movlw	0
  3258  0025AC  6E1B               	movwf	___wmul@multiplicand+1,c
  3259  0025AE  0E36               	movlw	54
  3260  0025B0  6E1A               	movwf	___wmul@multiplicand,c
  3261  0025B2  EC8A  F01A         	call	___wmul	;wreg free
  3262  0025B6  0E96               	movlw	low _clcd_display_string_details
  3263  0025B8  2418               	addwf	?___wmul,w,c
  3264  0025BA  6EE1               	movwf	fsr1l,c
  3265  0025BC  0E02               	movlw	high _clcd_display_string_details
  3266  0025BE  2019               	addwfc	?___wmul+1,w,c
  3267  0025C0  6EE2               	movwf	fsr1h,c
  3268  0025C2  50E7               	movf	231,w,c
  3269  0025C4  0B7F               	andlw	127
  3270  0025C6  0100               	movlb	0	; () banked
  3271  0025C8  6FEA               	movwf	(??_update_string_data+1)& (0+255),b
  3272  0025CA  50DE               	movf	postinc2,w,c
  3273  0025CC  0100               	movlb	0	; () banked
  3274  0025CE  19EA               	xorwf	(??_update_string_data+1)& (0+255),w,b
  3275  0025D0  A4D8               	btfss	status,2,c
  3276  0025D2  D028               	goto	l6313
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;clcd.c: 187: exist_uid_idx = i;
  3280  0025D4  C17B  F17A         	movff	update_string_data@i,update_string_data@exist_uid_idx
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;clcd.c: 188: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  3284  0025D8  5042               	movf	_conflict_data_count,w,c
  3285  0025DA  0D01               	mullw	1
  3286  0025DC  0EB7               	movlw	low _conflict_arr
  3287  0025DE  24F3               	addwf	prodl,w,c
  3288  0025E0  6ED9               	movwf	fsr2l,c
  3289  0025E2  0E00               	movlw	high _conflict_arr
  3290  0025E4  20F4               	addwfc	prodh,w,c
  3291  0025E6  6EDA               	movwf	fsr2h,c
  3292  0025E8  C17B  F018         	movff	update_string_data@i,___wmul@multiplier
  3293  0025EC  C17C  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  3294  0025F0  0E00               	movlw	0
  3295  0025F2  6E1B               	movwf	___wmul@multiplicand+1,c
  3296  0025F4  0E36               	movlw	54
  3297  0025F6  6E1A               	movwf	___wmul@multiplicand,c
  3298  0025F8  EC8A  F01A         	call	___wmul	;wreg free
  3299  0025FC  0E96               	movlw	low _clcd_display_string_details
  3300  0025FE  2418               	addwf	?___wmul,w,c
  3301  002600  6EE1               	movwf	fsr1l,c
  3302  002602  0E02               	movlw	high _clcd_display_string_details
  3303  002604  2019               	addwfc	?___wmul+1,w,c
  3304  002606  6EE2               	movwf	fsr1h,c
  3305  002608  50E7               	movf	231,w,c
  3306  00260A  0B7F               	andlw	127
  3307  00260C  6EDF               	movwf	indf2,c
  3308  00260E  2A42               	incf	_conflict_data_count,f,c
  3309                           
  3310                           ;clcd.c: 189: conflict_check(exist_uid_idx, start_point, end_point);
  3311  002610  C178  F036         	movff	update_string_data@start_point,conflict_check@new_start_point
  3312  002614  C179  F037         	movff	update_string_data@end_point,conflict_check@new_end_point
  3313  002618  0101               	movlb	1	; () banked
  3314  00261A  517A               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3315  00261C  ECC1  F00B         	call	_conflict_check
  3316  002620                     l6307:
  3317                           
  3318                           ;clcd.c: 190: return 1;
  3319  002620  0E01               	movlw	1
  3320  002622  0012               	return	
  3321  002624                     l6313:
  3322                           
  3323                           ;clcd.c: 192: {
  3324                           ;clcd.c: 193: if(conflict_check(exist_uid_idx, start_point, end_point) == 1)
  3325  002624  C178  F036         	movff	update_string_data@start_point,conflict_check@new_start_point
  3326  002628  C179  F037         	movff	update_string_data@end_point,conflict_check@new_end_point
  3327  00262C  0101               	movlb	1	; () banked
  3328  00262E  517A               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3329  002630  ECC1  F00B         	call	_conflict_check
  3330  002634  06E8               	decf	wreg,f,c
  3331  002636  B4D8               	btfsc	status,2,c
  3332  002638  D7F3               	goto	l6307
  3333                           
  3334                           ;clcd.c: 194: return 1;
  3335  00263A  0101               	movlb	1	; () banked
  3336  00263C  4B7B               	infsnz	update_string_data@i& (0+255),f,b
  3337  00263E  2B7C               	incf	(update_string_data@i+1)& (0+255),f,b
  3338  002640                     l6321:
  3339                           
  3340                           ; BSR set to: 1
  3341  002640  504D               	movf	_clcd_config_data+4,w,c
  3342  002642  0100               	movlb	0	; () banked
  3343  002644  6FE9               	movwf	??_update_string_data& (0+255),b
  3344  002646  6BEA               	clrf	(??_update_string_data+1)& (0+255),b
  3345  002648  0100               	movlb	0	; () banked
  3346  00264A  51E9               	movf	??_update_string_data& (0+255),w,b
  3347  00264C  0101               	movlb	1	; () banked
  3348  00264E  5D7B               	subwf	update_string_data@i& (0+255),w,b
  3349  002650  0101               	movlb	1	; () banked
  3350  002652  517C               	movf	(update_string_data@i+1)& (0+255),w,b
  3351  002654  0A80               	xorlw	128
  3352  002656  0100               	movlb	0	; () banked
  3353  002658  6FEB               	movwf	(??_update_string_data+2)& (0+255),b
  3354  00265A  0100               	movlb	0	; () banked
  3355  00265C  51EA               	movf	(??_update_string_data+1)& (0+255),w,b
  3356  00265E  0A80               	xorlw	128
  3357  002660  0100               	movlb	0	; () banked
  3358  002662  59EB               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3359  002664  A0D8               	btfss	status,0,c
  3360  002666  D799               	goto	l6297
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;clcd.c: 195: }
  3364                           ;clcd.c: 196: }
  3365                           ;clcd.c: 197: memset(&clcd_display_string_details[data_count], 0, sizeof (CLCD_STRING_DI
      +                          SPLAY_DETAILS));
  3366                           
  3367                           ; BSR set to: 0
  3368  002668  5043               	movf	_data_count,w,c
  3369  00266A  0D36               	mullw	54
  3370  00266C  0E96               	movlw	low _clcd_display_string_details
  3371  00266E  24F3               	addwf	prodl,w,c
  3372  002670  6E24               	movwf	memset@p1,c
  3373  002672  0E02               	movlw	high _clcd_display_string_details
  3374  002674  20F4               	addwfc	prodh,w,c
  3375  002676  6E25               	movwf	memset@p1+1,c
  3376  002678  0E00               	movlw	0
  3377  00267A  6E27               	movwf	memset@c+1,c
  3378  00267C  0E00               	movlw	0
  3379  00267E  6E26               	movwf	memset@c,c
  3380  002680  0E00               	movlw	0
  3381  002682  6E29               	movwf	memset@n+1,c
  3382  002684  0E36               	movlw	54
  3383  002686  6E28               	movwf	memset@n,c
  3384  002688  EC5E  F01A         	call	_memset	;wreg free
  3385                           
  3386                           ;clcd.c: 198: copy_data(&clcd_display_string_details[data_count], data);
  3387  00268C  5043               	movf	_data_count,w,c
  3388  00268E  0D36               	mullw	54
  3389  002690  0E96               	movlw	low _clcd_display_string_details
  3390  002692  24F3               	addwf	prodl,w,c
  3391  002694  6E36               	movwf	copy_data@clcd_str_data,c
  3392  002696  0E02               	movlw	high _clcd_display_string_details
  3393  002698  20F4               	addwfc	prodh,w,c
  3394  00269A  6E37               	movwf	copy_data@clcd_str_data+1,c
  3395  00269C  C0E7  F038         	movff	update_string_data@data,copy_data@data
  3396  0026A0  C0E8  F039         	movff	update_string_data@data+1,copy_data@data+1
  3397  0026A4  EC23  F00D         	call	_copy_data	;wreg free
  3398                           
  3399                           ;clcd.c: 199: data_count++;
  3400  0026A8  2A43               	incf	_data_count,f,c
  3401                           
  3402                           ;clcd.c: 200: make_display();
  3403  0026AA  EC1E  F00E         	call	_make_display	;wreg free
  3404  0026AE                     l6331:
  3405                           
  3406                           ;clcd.c: 203: }
  3407                           ;clcd.c: 204: return 0;
  3408  0026AE  0E00               	movlw	0
  3409  0026B0  0012               	return	
  3410  0026B2                     __end_of_update_string_data:
  3411                           	opt stack 0
  3412                           tblptru	equ	0xFF8
  3413                           tblptrh	equ	0xFF7
  3414                           tblptrl	equ	0xFF6
  3415                           tablat	equ	0xFF5
  3416                           prodh	equ	0xFF4
  3417                           prodl	equ	0xFF3
  3418                           intcon	equ	0xFF2
  3419                           postinc0	equ	0xFEE
  3420                           wreg	equ	0xFE8
  3421                           postdec1	equ	0xFE5
  3422                           fsr1h	equ	0xFE2
  3423                           fsr1l	equ	0xFE1
  3424                           indf2	equ	0xFDF
  3425                           postinc2	equ	0xFDE
  3426                           fsr2h	equ	0xFDA
  3427                           fsr2l	equ	0xFD9
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function _make_display *****************
  3431 ;; Defined at:
  3432 ;;		line 582 in file "clcd.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;		None
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;  count           2   62[COMRAM] int 
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  1    wreg      void 
  3439 ;; Registers used:
  3440 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;Total ram usage:        5 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; Hardware stack levels required when called:    9
  3453 ;; This function calls:
  3454 ;;		___wmul
  3455 ;;		_display_text
  3456 ;;		_scroll_left_to_right
  3457 ;;		_scroll_off
  3458 ;;		_scroll_right_to_left
  3459 ;;		_strlen
  3460 ;; This function is called by:
  3461 ;;		_update_string_data
  3462 ;;		_main
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text6
  3467  001C3C                     __ptext6:
  3468                           	opt stack 0
  3469  001C3C                     _make_display:
  3470                           	opt stack 21
  3471                           
  3472                           ;clcd.c: 583: int count = 0;
  3473                           
  3474                           ;incstack = 0
  3475  001C3C  0E00               	movlw	0
  3476  001C3E  6E40               	movwf	make_display@count+1,c
  3477  001C40  0E00               	movlw	0
  3478  001C42  6E3F               	movwf	make_display@count,c
  3479                           
  3480                           ;clcd.c: 584: for (count = 0; count < clcd_config_data.clcd_max_display_string; count++)
      +                           {
  3481  001C44  0E00               	movlw	0
  3482  001C46  6E40               	movwf	make_display@count+1,c
  3483  001C48  0E00               	movlw	0
  3484  001C4A  6E3F               	movwf	make_display@count,c
  3485  001C4C  D0D3               	goto	l6069
  3486  001C4E                     l6049:
  3487                           
  3488                           ;clcd.c: 585: if (strlen(clcd_display_string_details[count].string) != 0 && clcd_display
      +                          _string_details[count].direction == 2) {
  3489  001C4E  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3490  001C52  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3491  001C56  0E00               	movlw	0
  3492  001C58  6E1B               	movwf	___wmul@multiplicand+1,c
  3493  001C5A  0E36               	movlw	54
  3494  001C5C  6E1A               	movwf	___wmul@multiplicand,c
  3495  001C5E  EC8A  F01A         	call	___wmul	;wreg free
  3496  001C62  0E01               	movlw	1
  3497  001C64  2618               	addwf	?___wmul,f,c
  3498  001C66  0E00               	movlw	0
  3499  001C68  2219               	addwfc	?___wmul+1,f,c
  3500  001C6A  0E96               	movlw	low _clcd_display_string_details
  3501  001C6C  2418               	addwf	?___wmul,w,c
  3502  001C6E  6E1E               	movwf	strlen@s,c
  3503  001C70  0E02               	movlw	high _clcd_display_string_details
  3504  001C72  2019               	addwfc	?___wmul+1,w,c
  3505  001C74  6E1F               	movwf	strlen@s+1,c
  3506  001C76  EC0D  F018         	call	_strlen	;wreg free
  3507  001C7A  501E               	movf	?_strlen,w,c
  3508  001C7C  101F               	iorwf	?_strlen+1,w,c
  3509  001C7E  B4D8               	btfsc	status,2,c
  3510  001C80  D02C               	goto	l6055
  3511  001C82  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3512  001C86  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3513  001C8A  0E00               	movlw	0
  3514  001C8C  6E1B               	movwf	___wmul@multiplicand+1,c
  3515  001C8E  0E36               	movlw	54
  3516  001C90  6E1A               	movwf	___wmul@multiplicand,c
  3517  001C92  EC8A  F01A         	call	___wmul	;wreg free
  3518  001C96  0E30               	movlw	48
  3519  001C98  2618               	addwf	?___wmul,f,c
  3520  001C9A  0E00               	movlw	0
  3521  001C9C  2219               	addwfc	?___wmul+1,f,c
  3522  001C9E  0E96               	movlw	low _clcd_display_string_details
  3523  001CA0  2418               	addwf	?___wmul,w,c
  3524  001CA2  6ED9               	movwf	fsr2l,c
  3525  001CA4  0E02               	movlw	high _clcd_display_string_details
  3526  001CA6  2019               	addwfc	?___wmul+1,w,c
  3527  001CA8  6EDA               	movwf	fsr2h,c
  3528  001CAA  50DF               	movf	223,w,c
  3529  001CAC  0B07               	andlw	7
  3530  001CAE  0A02               	xorlw	2
  3531  001CB0  A4D8               	btfss	status,2,c
  3532  001CB2  D013               	goto	l6055
  3533                           
  3534                           ;clcd.c: 586: scroll_left_to_right(&clcd_display_string_details[count]);
  3535  001CB4  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3536  001CB8  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3537  001CBC  0E00               	movlw	0
  3538  001CBE  6E1B               	movwf	___wmul@multiplicand+1,c
  3539  001CC0  0E36               	movlw	54
  3540  001CC2  6E1A               	movwf	___wmul@multiplicand,c
  3541  001CC4  EC8A  F01A         	call	___wmul	;wreg free
  3542  001CC8  0E96               	movlw	low _clcd_display_string_details
  3543  001CCA  2418               	addwf	?___wmul,w,c
  3544  001CCC  6E2C               	movwf	scroll_left_to_right@clcd_display_string_details,c
  3545  001CCE  0E02               	movlw	high _clcd_display_string_details
  3546  001CD0  2019               	addwfc	?___wmul+1,w,c
  3547  001CD2  6E2D               	movwf	scroll_left_to_right@clcd_display_string_details+1,c
  3548  001CD4  EC25  F00A         	call	_scroll_left_to_right	;wreg free
  3549                           
  3550                           ;clcd.c: 587: }
  3551  001CD8  D08B               	goto	l6067
  3552  001CDA                     l6055:
  3553                           
  3554                           ;clcd.c: 588: else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_di
      +                          splay_string_details[count].direction == 1) {
  3555  001CDA  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3556  001CDE  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3557  001CE2  0E00               	movlw	0
  3558  001CE4  6E1B               	movwf	___wmul@multiplicand+1,c
  3559  001CE6  0E36               	movlw	54
  3560  001CE8  6E1A               	movwf	___wmul@multiplicand,c
  3561  001CEA  EC8A  F01A         	call	___wmul	;wreg free
  3562  001CEE  0E01               	movlw	1
  3563  001CF0  2618               	addwf	?___wmul,f,c
  3564  001CF2  0E00               	movlw	0
  3565  001CF4  2219               	addwfc	?___wmul+1,f,c
  3566  001CF6  0E96               	movlw	low _clcd_display_string_details
  3567  001CF8  2418               	addwf	?___wmul,w,c
  3568  001CFA  6E1E               	movwf	strlen@s,c
  3569  001CFC  0E02               	movlw	high _clcd_display_string_details
  3570  001CFE  2019               	addwfc	?___wmul+1,w,c
  3571  001D00  6E1F               	movwf	strlen@s+1,c
  3572  001D02  EC0D  F018         	call	_strlen	;wreg free
  3573  001D06  501E               	movf	?_strlen,w,c
  3574  001D08  101F               	iorwf	?_strlen+1,w,c
  3575  001D0A  B4D8               	btfsc	status,2,c
  3576  001D0C  D02C               	goto	l6061
  3577  001D0E  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3578  001D12  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3579  001D16  0E00               	movlw	0
  3580  001D18  6E1B               	movwf	___wmul@multiplicand+1,c
  3581  001D1A  0E36               	movlw	54
  3582  001D1C  6E1A               	movwf	___wmul@multiplicand,c
  3583  001D1E  EC8A  F01A         	call	___wmul	;wreg free
  3584  001D22  0E30               	movlw	48
  3585  001D24  2618               	addwf	?___wmul,f,c
  3586  001D26  0E00               	movlw	0
  3587  001D28  2219               	addwfc	?___wmul+1,f,c
  3588  001D2A  0E96               	movlw	low _clcd_display_string_details
  3589  001D2C  2418               	addwf	?___wmul,w,c
  3590  001D2E  6ED9               	movwf	fsr2l,c
  3591  001D30  0E02               	movlw	high _clcd_display_string_details
  3592  001D32  2019               	addwfc	?___wmul+1,w,c
  3593  001D34  6EDA               	movwf	fsr2h,c
  3594  001D36  50DF               	movf	223,w,c
  3595  001D38  0B07               	andlw	7
  3596  001D3A  06E8               	decf	wreg,f,c
  3597  001D3C  A4D8               	btfss	status,2,c
  3598  001D3E  D013               	goto	l6061
  3599                           
  3600                           ;clcd.c: 589: scroll_right_to_left(&clcd_display_string_details[count]);
  3601  001D40  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3602  001D44  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3603  001D48  0E00               	movlw	0
  3604  001D4A  6E1B               	movwf	___wmul@multiplicand+1,c
  3605  001D4C  0E36               	movlw	54
  3606  001D4E  6E1A               	movwf	___wmul@multiplicand,c
  3607  001D50  EC8A  F01A         	call	___wmul	;wreg free
  3608  001D54  0E96               	movlw	low _clcd_display_string_details
  3609  001D56  2418               	addwf	?___wmul,w,c
  3610  001D58  6E36               	movwf	scroll_right_to_left@clcd_display_string_details,c
  3611  001D5A  0E02               	movlw	high _clcd_display_string_details
  3612  001D5C  2019               	addwfc	?___wmul+1,w,c
  3613  001D5E  6E37               	movwf	scroll_right_to_left@clcd_display_string_details+1,c
  3614  001D60  EC47  F006         	call	_scroll_right_to_left	;wreg free
  3615                           
  3616                           ;clcd.c: 590: }else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_d
      +                          isplay_string_details[count].direction == 0) {
  3617  001D64  D045               	goto	l6067
  3618  001D66                     l6061:
  3619  001D66  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3620  001D6A  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3621  001D6E  0E00               	movlw	0
  3622  001D70  6E1B               	movwf	___wmul@multiplicand+1,c
  3623  001D72  0E36               	movlw	54
  3624  001D74  6E1A               	movwf	___wmul@multiplicand,c
  3625  001D76  EC8A  F01A         	call	___wmul	;wreg free
  3626  001D7A  0E01               	movlw	1
  3627  001D7C  2618               	addwf	?___wmul,f,c
  3628  001D7E  0E00               	movlw	0
  3629  001D80  2219               	addwfc	?___wmul+1,f,c
  3630  001D82  0E96               	movlw	low _clcd_display_string_details
  3631  001D84  2418               	addwf	?___wmul,w,c
  3632  001D86  6E1E               	movwf	strlen@s,c
  3633  001D88  0E02               	movlw	high _clcd_display_string_details
  3634  001D8A  2019               	addwfc	?___wmul+1,w,c
  3635  001D8C  6E1F               	movwf	strlen@s+1,c
  3636  001D8E  EC0D  F018         	call	_strlen	;wreg free
  3637  001D92  501E               	movf	?_strlen,w,c
  3638  001D94  101F               	iorwf	?_strlen+1,w,c
  3639  001D96  B4D8               	btfsc	status,2,c
  3640  001D98  D02B               	goto	l6067
  3641  001D9A  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3642  001D9E  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3643  001DA2  0E00               	movlw	0
  3644  001DA4  6E1B               	movwf	___wmul@multiplicand+1,c
  3645  001DA6  0E36               	movlw	54
  3646  001DA8  6E1A               	movwf	___wmul@multiplicand,c
  3647  001DAA  EC8A  F01A         	call	___wmul	;wreg free
  3648  001DAE  0E30               	movlw	48
  3649  001DB0  2618               	addwf	?___wmul,f,c
  3650  001DB2  0E00               	movlw	0
  3651  001DB4  2219               	addwfc	?___wmul+1,f,c
  3652  001DB6  0E96               	movlw	low _clcd_display_string_details
  3653  001DB8  2418               	addwf	?___wmul,w,c
  3654  001DBA  6ED9               	movwf	fsr2l,c
  3655  001DBC  0E02               	movlw	high _clcd_display_string_details
  3656  001DBE  2019               	addwfc	?___wmul+1,w,c
  3657  001DC0  6EDA               	movwf	fsr2h,c
  3658  001DC2  50DF               	movf	223,w,c
  3659  001DC4  0B07               	andlw	7
  3660  001DC6  0900               	iorlw	0
  3661  001DC8  A4D8               	btfss	status,2,c
  3662  001DCA  D012               	goto	l6067
  3663                           
  3664                           ;clcd.c: 591: scroll_off(&clcd_display_string_details[count]);
  3665  001DCC  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3666  001DD0  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3667  001DD4  0E00               	movlw	0
  3668  001DD6  6E1B               	movwf	___wmul@multiplicand+1,c
  3669  001DD8  0E36               	movlw	54
  3670  001DDA  6E1A               	movwf	___wmul@multiplicand,c
  3671  001DDC  EC8A  F01A         	call	___wmul	;wreg free
  3672  001DE0  0E96               	movlw	low _clcd_display_string_details
  3673  001DE2  2418               	addwf	?___wmul,w,c
  3674  001DE4  6E36               	movwf	scroll_off@clcd_display_string_details,c
  3675  001DE6  0E02               	movlw	high _clcd_display_string_details
  3676  001DE8  2019               	addwfc	?___wmul+1,w,c
  3677  001DEA  6E37               	movwf	scroll_off@clcd_display_string_details+1,c
  3678  001DEC  ECE3  F010         	call	_scroll_off	;wreg free
  3679  001DF0                     l6067:
  3680  001DF0  4A3F               	infsnz	make_display@count,f,c
  3681  001DF2  2A40               	incf	make_display@count+1,f,c
  3682  001DF4                     l6069:
  3683  001DF4  504D               	movf	_clcd_config_data+4,w,c
  3684  001DF6  6E3C               	movwf	??_make_display& (0+255),c
  3685  001DF8  6A3D               	clrf	(??_make_display+1)& (0+255),c
  3686  001DFA  503C               	movf	??_make_display,w,c
  3687  001DFC  5C3F               	subwf	make_display@count,w,c
  3688  001DFE  5040               	movf	make_display@count+1,w,c
  3689  001E00  0A80               	xorlw	128
  3690  001E02  6E3E               	movwf	(??_make_display+2)& (0+255),c
  3691  001E04  503D               	movf	??_make_display+1,w,c
  3692  001E06  0A80               	xorlw	128
  3693  001E08  583E               	subwfb	(??_make_display+2)& (0+255),w,c
  3694  001E0A  A0D8               	btfss	status,0,c
  3695  001E0C  D720               	goto	l6049
  3696                           
  3697                           ;clcd.c: 592: }
  3698                           ;clcd.c: 593: }
  3699                           ;clcd.c: 594: print_data_ready = 1;
  3700  001E0E  0E00               	movlw	0
  3701  001E10  0100               	movlb	0	; () banked
  3702  001E12  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  3703  001E14  0E01               	movlw	1
  3704  001E16  6F76               	movwf	_print_data_ready& (0+255),b
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;clcd.c: 595: display_text();
  3708  001E18  EC55  F016         	call	_display_text	;wreg free
  3709  001E1C  0012               	return		;funcret
  3710  001E1E                     __end_of_make_display:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           prodh	equ	0xFF4
  3717                           prodl	equ	0xFF3
  3718                           intcon	equ	0xFF2
  3719                           postinc0	equ	0xFEE
  3720                           wreg	equ	0xFE8
  3721                           postdec1	equ	0xFE5
  3722                           fsr1h	equ	0xFE2
  3723                           fsr1l	equ	0xFE1
  3724                           indf2	equ	0xFDF
  3725                           postinc2	equ	0xFDE
  3726                           fsr2h	equ	0xFDA
  3727                           fsr2l	equ	0xFD9
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function _scroll_right_to_left *****************
  3731 ;; Defined at:
  3732 ;;		line 438 in file "clcd.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;  clcd_display    2   53[COMRAM] PTR struct .
  3735 ;;		 -> clcd_display_string_details(1080), 
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  line            1   55[COMRAM] unsigned char 
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  1    wreg      void 
  3740 ;; Registers used:
  3741 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3747 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Temps:          0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Totals:         3      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;Total ram usage:       16 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    8
  3754 ;; This function calls:
  3755 ;;		_memcpy
  3756 ;;		_memset
  3757 ;;		_printf
  3758 ;;		_strncpy
  3759 ;; This function is called by:
  3760 ;;		_make_display
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           	psect	text7
  3765  000C8E                     __ptext7:
  3766                           	opt stack 0
  3767  000C8E                     _scroll_right_to_left:
  3768                           	opt stack 21
  3769                           
  3770                           ;clcd.c: 440: char line = -1;
  3771                           
  3772                           ;incstack = 0
  3773  000C8E  6838               	setf	scroll_right_to_left@line,c
  3774                           
  3775                           ;clcd.c: 441: if (clcd_display_string_details->start_row == 0)
  3776  000C90  EE20 F02A          	lfsr	2,42
  3777  000C94  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3778  000C96  26D9               	addwf	fsr2l,f,c
  3779  000C98  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3780  000C9A  22DA               	addwfc	fsr2h,f,c
  3781  000C9C  50DF               	movf	indf2,w,c
  3782  000C9E  0B7F               	andlw	127
  3783  000CA0  0900               	iorlw	0
  3784  000CA2  A4D8               	btfss	status,2,c
  3785  000CA4  D002               	goto	l5819
  3786                           
  3787                           ;clcd.c: 442: line = 0;
  3788  000CA6  0E00               	movlw	0
  3789  000CA8  D00C               	goto	L1
  3790  000CAA                     l5819:
  3791                           
  3792                           ;clcd.c: 443: else if (clcd_display_string_details->start_row == 1)
  3793  000CAA  EE20 F02A          	lfsr	2,42
  3794  000CAE  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3795  000CB0  26D9               	addwf	fsr2l,f,c
  3796  000CB2  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3797  000CB4  22DA               	addwfc	fsr2h,f,c
  3798  000CB6  50DF               	movf	indf2,w,c
  3799  000CB8  0B7F               	andlw	127
  3800  000CBA  06E8               	decf	wreg,f,c
  3801  000CBC  A4D8               	btfss	status,2,c
  3802  000CBE  D002               	goto	l5823
  3803                           
  3804                           ;clcd.c: 444: line = 1;
  3805  000CC0  0E01               	movlw	1
  3806  000CC2                     L1:
  3807  000CC2  6E38               	movwf	scroll_right_to_left@line,c
  3808  000CC4                     l5823:
  3809                           
  3810                           ;clcd.c: 445: if (clcd_display_string_details->start_row == 2)
  3811  000CC4  EE20 F02A          	lfsr	2,42
  3812  000CC8  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3813  000CCA  26D9               	addwf	fsr2l,f,c
  3814  000CCC  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3815  000CCE  22DA               	addwfc	fsr2h,f,c
  3816  000CD0  50DF               	movf	indf2,w,c
  3817  000CD2  0B7F               	andlw	127
  3818  000CD4  0A02               	xorlw	2
  3819  000CD6  A4D8               	btfss	status,2,c
  3820  000CD8  D002               	goto	l5827
  3821                           
  3822                           ;clcd.c: 446: line = 2;
  3823  000CDA  0E02               	movlw	2
  3824  000CDC  6E38               	movwf	scroll_right_to_left@line,c
  3825  000CDE                     l5827:
  3826                           
  3827                           ;clcd.c: 447: if (clcd_display_string_details->start_row == 3)
  3828  000CDE  EE20 F02A          	lfsr	2,42
  3829  000CE2  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3830  000CE4  26D9               	addwf	fsr2l,f,c
  3831  000CE6  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3832  000CE8  22DA               	addwfc	fsr2h,f,c
  3833  000CEA  50DF               	movf	indf2,w,c
  3834  000CEC  0B7F               	andlw	127
  3835  000CEE  0A03               	xorlw	3
  3836  000CF0  A4D8               	btfss	status,2,c
  3837  000CF2  D002               	goto	l5831
  3838                           
  3839                           ;clcd.c: 448: line = 3;
  3840  000CF4  0E03               	movlw	3
  3841  000CF6  6E38               	movwf	scroll_right_to_left@line,c
  3842  000CF8                     l5831:
  3843                           
  3844                           ;clcd.c: 450: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  3845                           ;clcd.c: 451: ' ', clcd_display_string_details->display_char_count);
  3846  000CF8  5038               	movf	scroll_right_to_left@line,w,c
  3847  000CFA  0D14               	mullw	20
  3848  000CFC  0E00               	movlw	low _lcd_display_array
  3849  000CFE  0100               	movlb	0	; () banked
  3850  000D00  6FDA               	movwf	??_scroll_right_to_left& (0+255),b
  3851  000D02  0E01               	movlw	high _lcd_display_array
  3852  000D04  0100               	movlb	0	; () banked
  3853  000D06  6FDB               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  3854  000D08  50F3               	movf	prodl,w,c
  3855  000D0A  0100               	movlb	0	; () banked
  3856  000D0C  27DA               	addwf	??_scroll_right_to_left& (0+255),f,b
  3857  000D0E  50F4               	movf	prodh,w,c
  3858  000D10  0100               	movlb	0	; () banked
  3859  000D12  23DB               	addwfc	(??_scroll_right_to_left+1)& (0+255),f,b
  3860  000D14  EE20 F02B          	lfsr	2,43
  3861  000D18  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3862  000D1A  26D9               	addwf	fsr2l,f,c
  3863  000D1C  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3864  000D1E  22DA               	addwfc	fsr2h,f,c
  3865  000D20  50DF               	movf	indf2,w,c
  3866  000D22  0B7F               	andlw	127
  3867  000D24  0100               	movlb	0	; () banked
  3868  000D26  6FDC               	movwf	(??_scroll_right_to_left+2)& (0+255),b
  3869  000D28  0100               	movlb	0	; () banked
  3870  000D2A  51DC               	movf	(??_scroll_right_to_left+2)& (0+255),w,b
  3871  000D2C  0D01               	mullw	1
  3872  000D2E  50F3               	movf	prodl,w,c
  3873  000D30  0100               	movlb	0	; () banked
  3874  000D32  25DA               	addwf	??_scroll_right_to_left& (0+255),w,b
  3875  000D34  6E24               	movwf	memset@p1,c
  3876  000D36  50F4               	movf	prodh,w,c
  3877  000D38  0100               	movlb	0	; () banked
  3878  000D3A  21DB               	addwfc	(??_scroll_right_to_left+1)& (0+255),w,b
  3879  000D3C  6E25               	movwf	memset@p1+1,c
  3880  000D3E  0E00               	movlw	0
  3881  000D40  6E27               	movwf	memset@c+1,c
  3882  000D42  0E20               	movlw	32
  3883  000D44  6E26               	movwf	memset@c,c
  3884  000D46  EE20 F031          	lfsr	2,49
  3885  000D4A  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3886  000D4C  26D9               	addwf	fsr2l,f,c
  3887  000D4E  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3888  000D50  22DA               	addwfc	fsr2h,f,c
  3889  000D52  50DF               	movf	indf2,w,c
  3890  000D54  0100               	movlb	0	; () banked
  3891  000D56  6FDD               	movwf	(??_scroll_right_to_left+3)& (0+255),b
  3892  000D58  0100               	movlb	0	; () banked
  3893  000D5A  51DD               	movf	(??_scroll_right_to_left+3)& (0+255),w,b
  3894  000D5C  6E28               	movwf	memset@n,c
  3895  000D5E  6A29               	clrf	memset@n+1,c
  3896  000D60  EC5E  F01A         	call	_memset	;wreg free
  3897                           
  3898                           ;clcd.c: 452: if (clcd_display_string_details->length_count_for_left_scroll > clcd_displ
      +                          ay_string_details->strlen) {
  3899  000D64  EE20 F029          	lfsr	2,41
  3900  000D68  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3901  000D6A  26D9               	addwf	fsr2l,f,c
  3902  000D6C  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3903  000D6E  22DA               	addwfc	fsr2h,f,c
  3904  000D70  50DF               	movf	indf2,w,c
  3905  000D72  0B7F               	andlw	127
  3906  000D74  0100               	movlb	0	; () banked
  3907  000D76  6FDA               	movwf	??_scroll_right_to_left& (0+255),b
  3908  000D78  EE20 F034          	lfsr	2,52
  3909  000D7C  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3910  000D7E  26D9               	addwf	fsr2l,f,c
  3911  000D80  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3912  000D82  22DA               	addwfc	fsr2h,f,c
  3913  000D84  50DF               	movf	indf2,w,c
  3914  000D86  0B7F               	andlw	127
  3915  000D88  0100               	movlb	0	; () banked
  3916  000D8A  5DDA               	subwf	??_scroll_right_to_left& (0+255),w,b
  3917  000D8C  B0D8               	btfsc	status,0,c
  3918  000D8E  D0C1               	goto	l5839
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;clcd.c: 453: printf("%d", (clcd_display_string_details->end_col - clcd_display_string_d
      +                          etails->length_decount_for_left_scroll - 1));
  3922  000D90  0E98               	movlw	low (STR_2+6)
  3923  000D92  6E24               	movwf	printf@f,c
  3924  000D94  0EFF               	movlw	high (STR_2+6)
  3925  000D96  6E25               	movwf	printf@f+1,c
  3926  000D98  EE20 F035          	lfsr	2,53
  3927  000D9C  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3928  000D9E  26D9               	addwf	fsr2l,f,c
  3929  000DA0  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3930  000DA2  22DA               	addwfc	fsr2h,f,c
  3931  000DA4  50DF               	movf	indf2,w,c
  3932  000DA6  0B7F               	andlw	127
  3933  000DA8  0100               	movlb	0	; () banked
  3934  000DAA  6FDA               	movwf	??_scroll_right_to_left& (0+255),b
  3935  000DAC  6BDB               	clrf	(??_scroll_right_to_left+1)& (0+255),b
  3936  000DAE  0100               	movlb	0	; () banked
  3937  000DB0  1FDA               	comf	??_scroll_right_to_left& (0+255),f,b
  3938  000DB2  1FDB               	comf	(??_scroll_right_to_left+1)& (0+255),f,b
  3939  000DB4  4BDA               	infsnz	??_scroll_right_to_left& (0+255),f,b
  3940  000DB6  2BDB               	incf	(??_scroll_right_to_left+1)& (0+255),f,b
  3941  000DB8  EE20 F02E          	lfsr	2,46
  3942  000DBC  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3943  000DBE  26D9               	addwf	fsr2l,f,c
  3944  000DC0  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3945  000DC2  22DA               	addwfc	fsr2h,f,c
  3946  000DC4  50DF               	movf	indf2,w,c
  3947  000DC6  0B7F               	andlw	127
  3948  000DC8  0100               	movlb	0	; () banked
  3949  000DCA  6FDC               	movwf	(??_scroll_right_to_left+2)& (0+255),b
  3950  000DCC  6BDD               	clrf	(??_scroll_right_to_left+3)& (0+255),b
  3951  000DCE  0100               	movlb	0	; () banked
  3952  000DD0  51DA               	movf	??_scroll_right_to_left& (0+255),w,b
  3953  000DD2  0100               	movlb	0	; () banked
  3954  000DD4  27DC               	addwf	(??_scroll_right_to_left+2)& (0+255),f,b
  3955  000DD6  0100               	movlb	0	; () banked
  3956  000DD8  51DB               	movf	(??_scroll_right_to_left+1)& (0+255),w,b
  3957  000DDA  0100               	movlb	0	; () banked
  3958  000DDC  23DD               	addwfc	(??_scroll_right_to_left+3)& (0+255),f,b
  3959  000DDE  0EFF               	movlw	255
  3960  000DE0  0100               	movlb	0	; () banked
  3961  000DE2  25DC               	addwf	(??_scroll_right_to_left+2)& (0+255),w,b
  3962  000DE4  6E26               	movwf	?_printf+2,c
  3963  000DE6  0EFF               	movlw	255
  3964  000DE8  0100               	movlb	0	; () banked
  3965  000DEA  21DD               	addwfc	(??_scroll_right_to_left+3)& (0+255),w,b
  3966  000DEC  6E27               	movwf	?_printf+3,c
  3967  000DEE  EC0F  F00F         	call	_printf	;wreg free
  3968                           
  3969                           ;clcd.c: 454: strncpy(lcd_display_array[line]+(clcd_display_string_details->end_col - cl
      +                          cd_display_string_details->length_decount_for_left_scroll - 1),
  3970                           ;clcd.c: 455: clcd_display_string_details->string, (clcd_display_string_details->display
      +                          _char_count -
  3971                           ;clcd.c: 456: (clcd_display_string_details->display_char_count - (clcd_display_string_de
      +                          tails->length_decount_for_left_scroll + 1))));
  3972  000DF2  5038               	movf	scroll_right_to_left@line,w,c
  3973  000DF4  0D14               	mullw	20
  3974  000DF6  0EFF               	movlw	255
  3975  000DF8  0100               	movlb	0	; () banked
  3976  000DFA  6FDA               	movwf	??_scroll_right_to_left& (0+255),b
  3977  000DFC  0EFF               	movlw	255
  3978  000DFE  0100               	movlb	0	; () banked
  3979  000E00  6FDB               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  3980  000E02  EE20 F035          	lfsr	2,53
  3981  000E06  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3982  000E08  26D9               	addwf	fsr2l,f,c
  3983  000E0A  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3984  000E0C  22DA               	addwfc	fsr2h,f,c
  3985  000E0E  50DF               	movf	indf2,w,c
  3986  000E10  0B7F               	andlw	127
  3987  000E12  0100               	movlb	0	; () banked
  3988  000E14  6FDC               	movwf	(??_scroll_right_to_left+2)& (0+255),b
  3989  000E16  6BDD               	clrf	(??_scroll_right_to_left+3)& (0+255),b
  3990  000E18  0100               	movlb	0	; () banked
  3991  000E1A  1FDC               	comf	(??_scroll_right_to_left+2)& (0+255),f,b
  3992  000E1C  1FDD               	comf	(??_scroll_right_to_left+3)& (0+255),f,b
  3993  000E1E  4BDC               	infsnz	(??_scroll_right_to_left+2)& (0+255),f,b
  3994  000E20  2BDD               	incf	(??_scroll_right_to_left+3)& (0+255),f,b
  3995  000E22  EE20 F02E          	lfsr	2,46
  3996  000E26  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  3997  000E28  26D9               	addwf	fsr2l,f,c
  3998  000E2A  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  3999  000E2C  22DA               	addwfc	fsr2h,f,c
  4000  000E2E  50DF               	movf	indf2,w,c
  4001  000E30  0B7F               	andlw	127
  4002  000E32  0100               	movlb	0	; () banked
  4003  000E34  6FDE               	movwf	(??_scroll_right_to_left+4)& (0+255),b
  4004  000E36  6BDF               	clrf	(??_scroll_right_to_left+5)& (0+255),b
  4005  000E38  0100               	movlb	0	; () banked
  4006  000E3A  51DC               	movf	(??_scroll_right_to_left+2)& (0+255),w,b
  4007  000E3C  0100               	movlb	0	; () banked
  4008  000E3E  27DE               	addwf	(??_scroll_right_to_left+4)& (0+255),f,b
  4009  000E40  0100               	movlb	0	; () banked
  4010  000E42  51DD               	movf	(??_scroll_right_to_left+3)& (0+255),w,b
  4011  000E44  0100               	movlb	0	; () banked
  4012  000E46  23DF               	addwfc	(??_scroll_right_to_left+5)& (0+255),f,b
  4013  000E48  0100               	movlb	0	; () banked
  4014  000E4A  51DA               	movf	??_scroll_right_to_left& (0+255),w,b
  4015  000E4C  0100               	movlb	0	; () banked
  4016  000E4E  27DE               	addwf	(??_scroll_right_to_left+4)& (0+255),f,b
  4017  000E50  0100               	movlb	0	; () banked
  4018  000E52  51DB               	movf	(??_scroll_right_to_left+1)& (0+255),w,b
  4019  000E54  0100               	movlb	0	; () banked
  4020  000E56  23DF               	addwfc	(??_scroll_right_to_left+5)& (0+255),f,b
  4021  000E58  0E00               	movlw	low _lcd_display_array
  4022  000E5A  0100               	movlb	0	; () banked
  4023  000E5C  6FE0               	movwf	(??_scroll_right_to_left+6)& (0+255),b
  4024  000E5E  0E01               	movlw	high _lcd_display_array
  4025  000E60  0100               	movlb	0	; () banked
  4026  000E62  6FE1               	movwf	(??_scroll_right_to_left+7)& (0+255),b
  4027  000E64  0100               	movlb	0	; () banked
  4028  000E66  51DE               	movf	(??_scroll_right_to_left+4)& (0+255),w,b
  4029  000E68  0100               	movlb	0	; () banked
  4030  000E6A  27E0               	addwf	(??_scroll_right_to_left+6)& (0+255),f,b
  4031  000E6C  0100               	movlb	0	; () banked
  4032  000E6E  51DF               	movf	(??_scroll_right_to_left+5)& (0+255),w,b
  4033  000E70  0100               	movlb	0	; () banked
  4034  000E72  23E1               	addwfc	(??_scroll_right_to_left+7)& (0+255),f,b
  4035  000E74  50F3               	movf	prodl,w,c
  4036  000E76  0100               	movlb	0	; () banked
  4037  000E78  25E0               	addwf	(??_scroll_right_to_left+6)& (0+255),w,b
  4038  000E7A  6E10               	movwf	strncpy@to,c
  4039  000E7C  50F4               	movf	prodh,w,c
  4040  000E7E  0100               	movlb	0	; () banked
  4041  000E80  21E1               	addwfc	(??_scroll_right_to_left+7)& (0+255),w,b
  4042  000E82  6E11               	movwf	strncpy@to+1,c
  4043  000E84  0E01               	movlw	1
  4044  000E86  2436               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4045  000E88  6E12               	movwf	strncpy@from,c
  4046  000E8A  0E00               	movlw	0
  4047  000E8C  2037               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4048  000E8E  6E13               	movwf	strncpy@from+1,c
  4049  000E90  EE20 F035          	lfsr	2,53
  4050  000E94  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4051  000E96  26D9               	addwf	fsr2l,f,c
  4052  000E98  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4053  000E9A  22DA               	addwfc	fsr2h,f,c
  4054  000E9C  50DF               	movf	indf2,w,c
  4055  000E9E  0B7F               	andlw	127
  4056  000EA0  0100               	movlb	0	; () banked
  4057  000EA2  6FE2               	movwf	(??_scroll_right_to_left+8)& (0+255),b
  4058  000EA4  6BE3               	clrf	(??_scroll_right_to_left+9)& (0+255),b
  4059  000EA6  0E01               	movlw	1
  4060  000EA8  0100               	movlb	0	; () banked
  4061  000EAA  27E2               	addwf	(??_scroll_right_to_left+8)& (0+255),f,b
  4062  000EAC  0E00               	movlw	0
  4063  000EAE  23E3               	addwfc	(??_scroll_right_to_left+9)& (0+255),f,b
  4064  000EB0  0100               	movlb	0	; () banked
  4065  000EB2  1FE2               	comf	(??_scroll_right_to_left+8)& (0+255),f,b
  4066  000EB4  1FE3               	comf	(??_scroll_right_to_left+9)& (0+255),f,b
  4067  000EB6  4BE2               	infsnz	(??_scroll_right_to_left+8)& (0+255),f,b
  4068  000EB8  2BE3               	incf	(??_scroll_right_to_left+9)& (0+255),f,b
  4069  000EBA  EE20 F031          	lfsr	2,49
  4070  000EBE  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4071  000EC0  26D9               	addwf	fsr2l,f,c
  4072  000EC2  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4073  000EC4  22DA               	addwfc	fsr2h,f,c
  4074  000EC6  50DF               	movf	indf2,w,c
  4075  000EC8  0100               	movlb	0	; () banked
  4076  000ECA  6FE4               	movwf	(??_scroll_right_to_left+10)& (0+255),b
  4077  000ECC  6BE5               	clrf	(??_scroll_right_to_left+11)& (0+255),b
  4078  000ECE  0100               	movlb	0	; () banked
  4079  000ED0  51E2               	movf	(??_scroll_right_to_left+8)& (0+255),w,b
  4080  000ED2  0100               	movlb	0	; () banked
  4081  000ED4  27E4               	addwf	(??_scroll_right_to_left+10)& (0+255),f,b
  4082  000ED6  0100               	movlb	0	; () banked
  4083  000ED8  51E3               	movf	(??_scroll_right_to_left+9)& (0+255),w,b
  4084  000EDA  0100               	movlb	0	; () banked
  4085  000EDC  23E5               	addwfc	(??_scroll_right_to_left+11)& (0+255),f,b
  4086  000EDE  0100               	movlb	0	; () banked
  4087  000EE0  1FE4               	comf	(??_scroll_right_to_left+10)& (0+255),f,b
  4088  000EE2  1FE5               	comf	(??_scroll_right_to_left+11)& (0+255),f,b
  4089  000EE4  4BE4               	infsnz	(??_scroll_right_to_left+10)& (0+255),f,b
  4090  000EE6  2BE5               	incf	(??_scroll_right_to_left+11)& (0+255),f,b
  4091  000EE8  EE20 F031          	lfsr	2,49
  4092  000EEC  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4093  000EEE  26D9               	addwf	fsr2l,f,c
  4094  000EF0  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4095  000EF2  22DA               	addwfc	fsr2h,f,c
  4096  000EF4  50DF               	movf	indf2,w,c
  4097  000EF6  0100               	movlb	0	; () banked
  4098  000EF8  6FE6               	movwf	(??_scroll_right_to_left+12)& (0+255),b
  4099  000EFA  0100               	movlb	0	; () banked
  4100  000EFC  51E6               	movf	(??_scroll_right_to_left+12)& (0+255),w,b
  4101  000EFE  0100               	movlb	0	; () banked
  4102  000F00  25E4               	addwf	(??_scroll_right_to_left+10)& (0+255),w,b
  4103  000F02  6E14               	movwf	strncpy@size,c
  4104  000F04  0E00               	movlw	0
  4105  000F06  0100               	movlb	0	; () banked
  4106  000F08  21E5               	addwfc	(??_scroll_right_to_left+11)& (0+255),w,b
  4107  000F0A  6E15               	movwf	strncpy@size+1,c
  4108  000F0C  EC85  F017         	call	_strncpy	;wreg free
  4109                           
  4110                           ;clcd.c: 457: } else {
  4111  000F10  D063               	goto	l5843
  4112  000F12                     l5839:
  4113                           
  4114                           ;clcd.c: 458: if (clcd_display_string_details->string[clcd_display_string_details->lengt
      +                          h_count_for_left_scroll] != (0)) {
  4115  000F12  EE20 F034          	lfsr	2,52
  4116  000F16  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4117  000F18  26D9               	addwf	fsr2l,f,c
  4118  000F1A  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4119  000F1C  22DA               	addwfc	fsr2h,f,c
  4120  000F1E  50DF               	movf	indf2,w,c
  4121  000F20  0B7F               	andlw	127
  4122  000F22  0100               	movlb	0	; () banked
  4123  000F24  6FDA               	movwf	??_scroll_right_to_left& (0+255),b
  4124  000F26  0100               	movlb	0	; () banked
  4125  000F28  51DA               	movf	??_scroll_right_to_left& (0+255),w,b
  4126  000F2A  0D01               	mullw	1
  4127  000F2C  0E01               	movlw	1
  4128  000F2E  26F3               	addwf	prodl,f,c
  4129  000F30  0E00               	movlw	0
  4130  000F32  22F4               	addwfc	prodh,f,c
  4131  000F34  50F3               	movf	prodl,w,c
  4132  000F36  2436               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4133  000F38  6ED9               	movwf	fsr2l,c
  4134  000F3A  50F4               	movf	prodh,w,c
  4135  000F3C  2037               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4136  000F3E  6EDA               	movwf	fsr2h,c
  4137  000F40  50DF               	movf	indf2,w,c
  4138  000F42  B4D8               	btfsc	status,2,c
  4139  000F44  D049               	goto	l5843
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;clcd.c: 459: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  4143                           ;clcd.c: 460: clcd_display_string_details->string + clcd_display_string_details->length_
      +                          count_for_left_scroll,
  4144                           ;clcd.c: 461: clcd_display_string_details->display_char_count);
  4145  000F46  5038               	movf	scroll_right_to_left@line,w,c
  4146  000F48  0D14               	mullw	20
  4147  000F4A  0E00               	movlw	low _lcd_display_array
  4148  000F4C  0100               	movlb	0	; () banked
  4149  000F4E  6FDA               	movwf	??_scroll_right_to_left& (0+255),b
  4150  000F50  0E01               	movlw	high _lcd_display_array
  4151  000F52  0100               	movlb	0	; () banked
  4152  000F54  6FDB               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4153  000F56  50F3               	movf	prodl,w,c
  4154  000F58  0100               	movlb	0	; () banked
  4155  000F5A  27DA               	addwf	??_scroll_right_to_left& (0+255),f,b
  4156  000F5C  50F4               	movf	prodh,w,c
  4157  000F5E  0100               	movlb	0	; () banked
  4158  000F60  23DB               	addwfc	(??_scroll_right_to_left+1)& (0+255),f,b
  4159  000F62  EE20 F02B          	lfsr	2,43
  4160  000F66  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4161  000F68  26D9               	addwf	fsr2l,f,c
  4162  000F6A  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4163  000F6C  22DA               	addwfc	fsr2h,f,c
  4164  000F6E  50DF               	movf	indf2,w,c
  4165  000F70  0B7F               	andlw	127
  4166  000F72  0100               	movlb	0	; () banked
  4167  000F74  6FDC               	movwf	(??_scroll_right_to_left+2)& (0+255),b
  4168  000F76  0100               	movlb	0	; () banked
  4169  000F78  51DC               	movf	(??_scroll_right_to_left+2)& (0+255),w,b
  4170  000F7A  0D01               	mullw	1
  4171  000F7C  50F3               	movf	prodl,w,c
  4172  000F7E  0100               	movlb	0	; () banked
  4173  000F80  25DA               	addwf	??_scroll_right_to_left& (0+255),w,b
  4174  000F82  6E10               	movwf	memcpy@d1,c
  4175  000F84  50F4               	movf	prodh,w,c
  4176  000F86  0100               	movlb	0	; () banked
  4177  000F88  21DB               	addwfc	(??_scroll_right_to_left+1)& (0+255),w,b
  4178  000F8A  6E11               	movwf	memcpy@d1+1,c
  4179  000F8C  EE20 F034          	lfsr	2,52
  4180  000F90  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4181  000F92  26D9               	addwf	fsr2l,f,c
  4182  000F94  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4183  000F96  22DA               	addwfc	fsr2h,f,c
  4184  000F98  50DF               	movf	indf2,w,c
  4185  000F9A  0B7F               	andlw	127
  4186  000F9C  0100               	movlb	0	; () banked
  4187  000F9E  6FDD               	movwf	(??_scroll_right_to_left+3)& (0+255),b
  4188  000FA0  0100               	movlb	0	; () banked
  4189  000FA2  51DD               	movf	(??_scroll_right_to_left+3)& (0+255),w,b
  4190  000FA4  0D01               	mullw	1
  4191  000FA6  0E01               	movlw	1
  4192  000FA8  26F3               	addwf	prodl,f,c
  4193  000FAA  0E00               	movlw	0
  4194  000FAC  22F4               	addwfc	prodh,f,c
  4195  000FAE  50F3               	movf	prodl,w,c
  4196  000FB0  2436               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4197  000FB2  6E12               	movwf	memcpy@s1,c
  4198  000FB4  50F4               	movf	prodh,w,c
  4199  000FB6  2037               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4200  000FB8  6E13               	movwf	memcpy@s1+1,c
  4201  000FBA  EE20 F031          	lfsr	2,49
  4202  000FBE  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4203  000FC0  26D9               	addwf	fsr2l,f,c
  4204  000FC2  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4205  000FC4  22DA               	addwfc	fsr2h,f,c
  4206  000FC6  50DF               	movf	indf2,w,c
  4207  000FC8  0100               	movlb	0	; () banked
  4208  000FCA  6FDE               	movwf	(??_scroll_right_to_left+4)& (0+255),b
  4209  000FCC  0100               	movlb	0	; () banked
  4210  000FCE  51DE               	movf	(??_scroll_right_to_left+4)& (0+255),w,b
  4211  000FD0  6E14               	movwf	memcpy@n,c
  4212  000FD2  6A15               	clrf	memcpy@n+1,c
  4213  000FD4  EC85  F019         	call	_memcpy	;wreg free
  4214  000FD8                     l5843:
  4215                           
  4216                           ;clcd.c: 464: }
  4217                           ;clcd.c: 465: }
  4218                           ;clcd.c: 467: if (clcd_display_string_details->length_count_for_left_scroll <= clcd_disp
      +                          lay_string_details->strlen)
  4219  000FD8  EE20 F034          	lfsr	2,52
  4220  000FDC  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4221  000FDE  26D9               	addwf	fsr2l,f,c
  4222  000FE0  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4223  000FE2  22DA               	addwfc	fsr2h,f,c
  4224  000FE4  50DF               	movf	indf2,w,c
  4225  000FE6  0B7F               	andlw	127
  4226  000FE8  0100               	movlb	0	; () banked
  4227  000FEA  6FDA               	movwf	??_scroll_right_to_left& (0+255),b
  4228  000FEC  EE20 F029          	lfsr	2,41
  4229  000FF0  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4230  000FF2  26D9               	addwf	fsr2l,f,c
  4231  000FF4  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4232  000FF6  22DA               	addwfc	fsr2h,f,c
  4233  000FF8  50DF               	movf	indf2,w,c
  4234  000FFA  0B7F               	andlw	127
  4235  000FFC  0100               	movlb	0	; () banked
  4236  000FFE  6FDB               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4237  001000  0100               	movlb	0	; () banked
  4238  001002  51DA               	movf	??_scroll_right_to_left& (0+255),w,b
  4239  001004  0100               	movlb	0	; () banked
  4240  001006  5DDB               	subwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4241  001008  A0D8               	btfss	status,0,c
  4242  00100A  D019               	goto	l5847
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;clcd.c: 468: {
  4246                           ;clcd.c: 469: clcd_display_string_details->length_count_for_left_scroll++;
  4247  00100C  0E01               	movlw	1
  4248  00100E  0100               	movlb	0	; () banked
  4249  001010  6FDA               	movwf	??_scroll_right_to_left& (0+255),b
  4250  001012  EE20 F034          	lfsr	2,52
  4251  001016  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4252  001018  26D9               	addwf	fsr2l,f,c
  4253  00101A  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4254  00101C  22DA               	addwfc	fsr2h,f,c
  4255  00101E  50DF               	movf	indf2,w,c
  4256  001020  0B7F               	andlw	127
  4257  001022  0100               	movlb	0	; () banked
  4258  001024  6FDB               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4259  001026  0100               	movlb	0	; () banked
  4260  001028  51DA               	movf	??_scroll_right_to_left& (0+255),w,b
  4261  00102A  0100               	movlb	0	; () banked
  4262  00102C  27DB               	addwf	(??_scroll_right_to_left+1)& (0+255),f,b
  4263  00102E  50DF               	movf	indf2,w,c
  4264  001030  0100               	movlb	0	; () banked
  4265  001032  19DB               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4266  001034  0B80               	andlw	-128
  4267  001036  0100               	movlb	0	; () banked
  4268  001038  19DB               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4269  00103A  6EDF               	movwf	indf2,c
  4270                           
  4271                           ;clcd.c: 470: } else if (clcd_display_string_details->length_count_for_left_scroll > clc
      +                          d_display_string_details->strlen)
  4272  00103C  0012               	return	
  4273  00103E                     l5847:
  4274                           
  4275                           ; BSR set to: 0
  4276  00103E  EE20 F029          	lfsr	2,41
  4277  001042  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4278  001044  26D9               	addwf	fsr2l,f,c
  4279  001046  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4280  001048  22DA               	addwfc	fsr2h,f,c
  4281  00104A  50DF               	movf	indf2,w,c
  4282  00104C  0B7F               	andlw	127
  4283  00104E  0100               	movlb	0	; () banked
  4284  001050  6FDA               	movwf	??_scroll_right_to_left& (0+255),b
  4285  001052  EE20 F034          	lfsr	2,52
  4286  001056  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4287  001058  26D9               	addwf	fsr2l,f,c
  4288  00105A  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4289  00105C  22DA               	addwfc	fsr2h,f,c
  4290  00105E  50DF               	movf	indf2,w,c
  4291  001060  0B7F               	andlw	127
  4292  001062  0100               	movlb	0	; () banked
  4293  001064  5DDA               	subwf	??_scroll_right_to_left& (0+255),w,b
  4294  001066  B0D8               	btfsc	status,0,c
  4295  001068  0012               	return	
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;clcd.c: 471: {
  4299                           ;clcd.c: 472: clcd_display_string_details->length_decount_for_left_scroll++;
  4300  00106A  0E01               	movlw	1
  4301  00106C  0100               	movlb	0	; () banked
  4302  00106E  6FDA               	movwf	??_scroll_right_to_left& (0+255),b
  4303  001070  EE20 F035          	lfsr	2,53
  4304  001074  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4305  001076  26D9               	addwf	fsr2l,f,c
  4306  001078  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4307  00107A  22DA               	addwfc	fsr2h,f,c
  4308  00107C  50DF               	movf	indf2,w,c
  4309  00107E  0B7F               	andlw	127
  4310  001080  0100               	movlb	0	; () banked
  4311  001082  6FDB               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4312  001084  0100               	movlb	0	; () banked
  4313  001086  51DA               	movf	??_scroll_right_to_left& (0+255),w,b
  4314  001088  0100               	movlb	0	; () banked
  4315  00108A  27DB               	addwf	(??_scroll_right_to_left+1)& (0+255),f,b
  4316  00108C  50DF               	movf	indf2,w,c
  4317  00108E  0100               	movlb	0	; () banked
  4318  001090  19DB               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4319  001092  0B80               	andlw	-128
  4320  001094  0100               	movlb	0	; () banked
  4321  001096  19DB               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4322  001098  6EDF               	movwf	indf2,c
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;clcd.c: 473: if (clcd_display_string_details->length_decount_for_left_scroll == clcd_di
      +                          splay_string_details->display_char_count) {
  4326  00109A  EE20 F031          	lfsr	2,49
  4327  00109E  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4328  0010A0  26D9               	addwf	fsr2l,f,c
  4329  0010A2  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4330  0010A4  22DA               	addwfc	fsr2h,f,c
  4331  0010A6  EE10 F035          	lfsr	1,53
  4332  0010AA  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4333  0010AC  26E1               	addwf	fsr1l,f,c
  4334  0010AE  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4335  0010B0  22E2               	addwfc	fsr1h,f,c
  4336  0010B2  50E7               	movf	indf1,w,c
  4337  0010B4  0B7F               	andlw	127
  4338  0010B6  0100               	movlb	0	; () banked
  4339  0010B8  6FDB               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4340  0010BA  50DE               	movf	postinc2,w,c
  4341  0010BC  0100               	movlb	0	; () banked
  4342  0010BE  19DB               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4343  0010C0  A4D8               	btfss	status,2,c
  4344  0010C2  0012               	return	
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;clcd.c: 474: clcd_display_string_details->length_decount_for_left_scroll = 0;
  4348  0010C4  EE20 F035          	lfsr	2,53
  4349  0010C8  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4350  0010CA  26D9               	addwf	fsr2l,f,c
  4351  0010CC  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4352  0010CE  22DA               	addwfc	fsr2h,f,c
  4353  0010D0  90DF               	bcf	indf2,0,c
  4354  0010D2  92DF               	bcf	indf2,1,c
  4355  0010D4  94DF               	bcf	indf2,2,c
  4356  0010D6  96DF               	bcf	indf2,3,c
  4357  0010D8  98DF               	bcf	indf2,4,c
  4358  0010DA  9ADF               	bcf	indf2,5,c
  4359  0010DC  9CDF               	bcf	indf2,6,c
  4360                           
  4361                           ;clcd.c: 475: clcd_display_string_details->length_count_for_left_scroll = 0;
  4362  0010DE  EE20 F034          	lfsr	2,52
  4363  0010E2  5036               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4364  0010E4  26D9               	addwf	fsr2l,f,c
  4365  0010E6  5037               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4366  0010E8  22DA               	addwfc	fsr2h,f,c
  4367  0010EA  90DF               	bcf	indf2,0,c
  4368  0010EC  92DF               	bcf	indf2,1,c
  4369  0010EE  94DF               	bcf	indf2,2,c
  4370  0010F0  96DF               	bcf	indf2,3,c
  4371  0010F2  98DF               	bcf	indf2,4,c
  4372  0010F4  9ADF               	bcf	indf2,5,c
  4373  0010F6  9CDF               	bcf	indf2,6,c
  4374                           
  4375                           ; BSR set to: 0
  4376                           
  4377                           ; BSR set to: 0
  4378  0010F8  0012               	return	
  4379  0010FA                     __end_of_scroll_right_to_left:
  4380                           	opt stack 0
  4381                           tblptru	equ	0xFF8
  4382                           tblptrh	equ	0xFF7
  4383                           tblptrl	equ	0xFF6
  4384                           tablat	equ	0xFF5
  4385                           prodh	equ	0xFF4
  4386                           prodl	equ	0xFF3
  4387                           intcon	equ	0xFF2
  4388                           postinc0	equ	0xFEE
  4389                           wreg	equ	0xFE8
  4390                           indf1	equ	0xFE7
  4391                           postdec1	equ	0xFE5
  4392                           fsr1h	equ	0xFE2
  4393                           fsr1l	equ	0xFE1
  4394                           indf2	equ	0xFDF
  4395                           postinc2	equ	0xFDE
  4396                           fsr2h	equ	0xFDA
  4397                           fsr2l	equ	0xFD9
  4398                           status	equ	0xFD8
  4399                           
  4400 ;; *************** function _strncpy *****************
  4401 ;; Defined at:
  4402 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncpy.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  to              2   15[COMRAM] PTR unsigned char 
  4405 ;;		 -> lcd_display_array(80), 
  4406 ;;  from            2   17[COMRAM] PTR const unsigned char 
  4407 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1080), 
  4408 ;;  size            2   19[COMRAM] unsigned int 
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;  cp              2   21[COMRAM] PTR unsigned char 
  4411 ;;		 -> lcd_display_array(80), 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  2   15[COMRAM] PTR unsigned char 
  4414 ;; Registers used:
  4415 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4421 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;Total ram usage:        8 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    5
  4428 ;; This function calls:
  4429 ;;		Nothing
  4430 ;; This function is called by:
  4431 ;;		_scroll_right_to_left
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text8
  4436  002F0A                     __ptext8:
  4437                           	opt stack 0
  4438  002F0A                     _strncpy:
  4439                           	opt stack 23
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;incstack = 0
  4443  002F0A  C010  F016         	movff	strncpy@to,strncpy@cp
  4444  002F0E  C011  F017         	movff	strncpy@to+1,strncpy@cp+1
  4445  002F12  D014               	goto	l5733
  4446  002F14                     l5727:
  4447  002F14  0614               	decf	strncpy@size,f,c
  4448  002F16  A0D8               	btfss	status,0,c
  4449  002F18  0615               	decf	strncpy@size+1,f,c
  4450  002F1A  C012  FFD9         	movff	strncpy@from,fsr2l
  4451  002F1E  C013  FFDA         	movff	strncpy@from+1,fsr2h
  4452  002F22  4A12               	infsnz	strncpy@from,f,c
  4453  002F24  2A13               	incf	strncpy@from+1,f,c
  4454  002F26  C016  FFE1         	movff	strncpy@cp,fsr1l
  4455  002F2A  C017  FFE2         	movff	strncpy@cp+1,fsr1h
  4456  002F2E  4A16               	infsnz	strncpy@cp,f,c
  4457  002F30  2A17               	incf	strncpy@cp+1,f,c
  4458  002F32  CFDF FFE7          	movff	indf2,indf1
  4459  002F36  50E7               	movf	indf1,w,c
  4460  002F38  B4D8               	btfsc	status,2,c
  4461  002F3A  D00D               	goto	l5739
  4462  002F3C                     l5733:
  4463  002F3C  5014               	movf	strncpy@size,w,c
  4464  002F3E  1015               	iorwf	strncpy@size+1,w,c
  4465  002F40  B4D8               	btfsc	status,2,c
  4466  002F42  D009               	goto	l5739
  4467  002F44  D7E7               	goto	l5727
  4468  002F46                     l5735:
  4469  002F46  C016  FFD9         	movff	strncpy@cp,fsr2l
  4470  002F4A  C017  FFDA         	movff	strncpy@cp+1,fsr2h
  4471  002F4E  0E00               	movlw	0
  4472  002F50  6EDF               	movwf	indf2,c
  4473  002F52  4A16               	infsnz	strncpy@cp,f,c
  4474  002F54  2A17               	incf	strncpy@cp+1,f,c
  4475  002F56                     l5739:
  4476  002F56  0614               	decf	strncpy@size,f,c
  4477  002F58  A0D8               	btfss	status,0,c
  4478  002F5A  0615               	decf	strncpy@size+1,f,c
  4479  002F5C  2814               	incf	strncpy@size,w,c
  4480  002F5E  E1F3               	bnz	l5735
  4481  002F60  2815               	incf	strncpy@size+1,w,c
  4482  002F62  B4D8               	btfsc	status,2,c
  4483  002F64  0012               	return	
  4484  002F66  D7EF               	goto	l5735
  4485  002F68                     __end_of_strncpy:
  4486                           	opt stack 0
  4487                           tblptru	equ	0xFF8
  4488                           tblptrh	equ	0xFF7
  4489                           tblptrl	equ	0xFF6
  4490                           tablat	equ	0xFF5
  4491                           prodh	equ	0xFF4
  4492                           prodl	equ	0xFF3
  4493                           intcon	equ	0xFF2
  4494                           postinc0	equ	0xFEE
  4495                           wreg	equ	0xFE8
  4496                           indf1	equ	0xFE7
  4497                           postdec1	equ	0xFE5
  4498                           fsr1h	equ	0xFE2
  4499                           fsr1l	equ	0xFE1
  4500                           indf2	equ	0xFDF
  4501                           postinc2	equ	0xFDE
  4502                           fsr2h	equ	0xFDA
  4503                           fsr2l	equ	0xFD9
  4504                           status	equ	0xFD8
  4505                           
  4506 ;; *************** function _scroll_off *****************
  4507 ;; Defined at:
  4508 ;;		line 482 in file "clcd.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;  clcd_display    2   53[COMRAM] PTR struct .
  4511 ;;		 -> clcd_display_string_details(1080), 
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  i               2    7[BANK0 ] int 
  4514 ;;  j               2    5[BANK0 ] int 
  4515 ;;  k               2    0[BANK0 ] int 
  4516 ;;  str_len         1    4[BANK0 ] unsigned char 
  4517 ;;  display_char    1    3[BANK0 ] unsigned char 
  4518 ;;  line            1    2[BANK0 ] unsigned char 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      void 
  4521 ;; Registers used:
  4522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4528 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;Total ram usage:       15 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    8
  4535 ;; This function calls:
  4536 ;;		_printf
  4537 ;;		_strlen
  4538 ;; This function is called by:
  4539 ;;		_make_display
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text9
  4544  0021C6                     __ptext9:
  4545                           	opt stack 0
  4546  0021C6                     _scroll_off:
  4547                           	opt stack 21
  4548                           
  4549                           ;clcd.c: 483: char line = -1;
  4550                           
  4551                           ;incstack = 0
  4552  0021C6  0100               	movlb	0	; () banked
  4553  0021C8  69DC               	setf	scroll_off@line& (0+255),b
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;clcd.c: 485: int i = 0;
  4557  0021CA  0E00               	movlw	0
  4558  0021CC  0100               	movlb	0	; () banked
  4559  0021CE  6FE2               	movwf	(scroll_off@i+1)& (0+255),b
  4560  0021D0  0E00               	movlw	0
  4561  0021D2  6FE1               	movwf	scroll_off@i& (0+255),b
  4562                           
  4563                           ;clcd.c: 486: int j = 0, k = 0;
  4564  0021D4  0E00               	movlw	0
  4565  0021D6  0100               	movlb	0	; () banked
  4566  0021D8  6FE0               	movwf	(scroll_off@j+1)& (0+255),b
  4567  0021DA  0E00               	movlw	0
  4568  0021DC  6FDF               	movwf	scroll_off@j& (0+255),b
  4569  0021DE  0E00               	movlw	0
  4570  0021E0  0100               	movlb	0	; () banked
  4571  0021E2  6FDB               	movwf	(scroll_off@k+1)& (0+255),b
  4572  0021E4  0E00               	movlw	0
  4573  0021E6  6FDA               	movwf	scroll_off@k& (0+255),b
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;clcd.c: 487: char display_char_count = clcd_display_string_details->end_point - clcd_di
      +                          splay_string_details->start_point;
  4577  0021E8  EE20 F02F          	lfsr	2,47
  4578  0021EC  5036               	movf	scroll_off@clcd_display_string_details,w,c
  4579  0021EE  26D9               	addwf	fsr2l,f,c
  4580  0021F0  5037               	movf	scroll_off@clcd_display_string_details+1,w,c
  4581  0021F2  22DA               	addwfc	fsr2h,f,c
  4582  0021F4  50DF               	movf	indf2,w,c
  4583  0021F6  0B7F               	andlw	127
  4584  0021F8  6E38               	movwf	??_scroll_off& (0+255),c
  4585  0021FA  EE20 F02C          	lfsr	2,44
  4586  0021FE  5036               	movf	scroll_off@clcd_display_string_details,w,c
  4587  002200  26D9               	addwf	fsr2l,f,c
  4588  002202  5037               	movf	scroll_off@clcd_display_string_details+1,w,c
  4589  002204  22DA               	addwfc	fsr2h,f,c
  4590  002206  50DF               	movf	indf2,w,c
  4591  002208  0B7F               	andlw	127
  4592  00220A  0800               	sublw	0
  4593  00220C  2438               	addwf	??_scroll_off,w,c
  4594  00220E  0100               	movlb	0	; () banked
  4595  002210  6FDD               	movwf	scroll_off@display_char_count& (0+255),b
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;clcd.c: 488: char str_len = strlen(clcd_display_string_details->string);
  4599  002212  0E01               	movlw	1
  4600  002214  2436               	addwf	scroll_off@clcd_display_string_details,w,c
  4601  002216  6E1E               	movwf	strlen@s,c
  4602  002218  0E00               	movlw	0
  4603  00221A  2037               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4604  00221C  6E1F               	movwf	strlen@s+1,c
  4605  00221E  EC0D  F018         	call	_strlen	;wreg free
  4606  002222  501E               	movf	?_strlen,w,c
  4607  002224  0100               	movlb	0	; () banked
  4608  002226  6FDE               	movwf	scroll_off@str_len& (0+255),b
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;clcd.c: 489: line = clcd_display_string_details->start_row;
  4612  002228  EE20 F02A          	lfsr	2,42
  4613  00222C  5036               	movf	scroll_off@clcd_display_string_details,w,c
  4614  00222E  26D9               	addwf	fsr2l,f,c
  4615  002230  5037               	movf	scroll_off@clcd_display_string_details+1,w,c
  4616  002232  22DA               	addwfc	fsr2h,f,c
  4617  002234  50DF               	movf	indf2,w,c
  4618  002236  0B7F               	andlw	127
  4619  002238  0100               	movlb	0	; () banked
  4620  00223A  6FDC               	movwf	scroll_off@line& (0+255),b
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;clcd.c: 490: j = clcd_display_string_details->start_col;
  4624  00223C  EE20 F02B          	lfsr	2,43
  4625  002240  5036               	movf	scroll_off@clcd_display_string_details,w,c
  4626  002242  26D9               	addwf	fsr2l,f,c
  4627  002244  5037               	movf	scroll_off@clcd_display_string_details+1,w,c
  4628  002246  22DA               	addwfc	fsr2h,f,c
  4629  002248  50DF               	movf	indf2,w,c
  4630  00224A  0B7F               	andlw	127
  4631  00224C  6E38               	movwf	??_scroll_off& (0+255),c
  4632  00224E  5038               	movf	??_scroll_off,w,c
  4633  002250  0100               	movlb	0	; () banked
  4634  002252  6FDF               	movwf	scroll_off@j& (0+255),b
  4635  002254  6BE0               	clrf	(scroll_off@j+1)& (0+255),b
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;clcd.c: 491: for (i = 0; i < str_len;) {
  4639  002256  0E00               	movlw	0
  4640  002258  0100               	movlb	0	; () banked
  4641  00225A  6FE2               	movwf	(scroll_off@i+1)& (0+255),b
  4642  00225C  0E00               	movlw	0
  4643  00225E  6FE1               	movwf	scroll_off@i& (0+255),b
  4644  002260  D079               	goto	l5895
  4645  002262                     l5869:
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;clcd.c: 493: lcd_display_array[line][j] = clcd_display_string_details->string[i++];
  4649  002262  0E01               	movlw	1
  4650  002264  0100               	movlb	0	; () banked
  4651  002266  25E1               	addwf	scroll_off@i& (0+255),w,b
  4652  002268  6E38               	movwf	??_scroll_off& (0+255),c
  4653  00226A  0E00               	movlw	0
  4654  00226C  0100               	movlb	0	; () banked
  4655  00226E  21E2               	addwfc	(scroll_off@i+1)& (0+255),w,b
  4656  002270  6E39               	movwf	(??_scroll_off+1)& (0+255),c
  4657  002272  5038               	movf	??_scroll_off,w,c
  4658  002274  2436               	addwf	scroll_off@clcd_display_string_details,w,c
  4659  002276  6ED9               	movwf	fsr2l,c
  4660  002278  5039               	movf	??_scroll_off+1,w,c
  4661  00227A  2037               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4662  00227C  6EDA               	movwf	fsr2h,c
  4663  00227E  0100               	movlb	0	; () banked
  4664  002280  51DC               	movf	scroll_off@line& (0+255),w,b
  4665  002282  0D14               	mullw	20
  4666  002284  0E00               	movlw	low _lcd_display_array
  4667  002286  6E3A               	movwf	(??_scroll_off+2)& (0+255),c
  4668  002288  0E01               	movlw	high _lcd_display_array
  4669  00228A  6E3B               	movwf	(??_scroll_off+3)& (0+255),c
  4670  00228C  50F3               	movf	prodl,w,c
  4671  00228E  263A               	addwf	??_scroll_off+2,f,c
  4672  002290  50F4               	movf	prodh,w,c
  4673  002292  223B               	addwfc	??_scroll_off+3,f,c
  4674  002294  0100               	movlb	0	; () banked
  4675  002296  51DF               	movf	scroll_off@j& (0+255),w,b
  4676  002298  243A               	addwf	??_scroll_off+2,w,c
  4677  00229A  6EE1               	movwf	fsr1l,c
  4678  00229C  0100               	movlb	0	; () banked
  4679  00229E  51E0               	movf	(scroll_off@j+1)& (0+255),w,b
  4680  0022A0  203B               	addwfc	??_scroll_off+3,w,c
  4681  0022A2  6EE2               	movwf	fsr1h,c
  4682  0022A4  CFDF FFE7          	movff	indf2,indf1
  4683                           
  4684                           ; BSR set to: 0
  4685  0022A8  0100               	movlb	0	; () banked
  4686  0022AA  4BE1               	infsnz	scroll_off@i& (0+255),f,b
  4687  0022AC  2BE2               	incf	(scroll_off@i+1)& (0+255),f,b
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;clcd.c: 494: if (i >= str_len)break;
  4691  0022AE  0100               	movlb	0	; () banked
  4692  0022B0  51DE               	movf	scroll_off@str_len& (0+255),w,b
  4693  0022B2  6E38               	movwf	??_scroll_off& (0+255),c
  4694  0022B4  6A39               	clrf	(??_scroll_off+1)& (0+255),c
  4695  0022B6  5038               	movf	??_scroll_off,w,c
  4696  0022B8  0100               	movlb	0	; () banked
  4697  0022BA  5DE1               	subwf	scroll_off@i& (0+255),w,b
  4698  0022BC  0100               	movlb	0	; () banked
  4699  0022BE  51E2               	movf	(scroll_off@i+1)& (0+255),w,b
  4700  0022C0  0A80               	xorlw	128
  4701  0022C2  6E3A               	movwf	(??_scroll_off+2)& (0+255),c
  4702  0022C4  5039               	movf	??_scroll_off+1,w,c
  4703  0022C6  0A80               	xorlw	128
  4704  0022C8  583A               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4705  0022CA  B0D8               	btfsc	status,0,c
  4706  0022CC  D022               	goto	l5885
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;clcd.c: 495: if (i >= display_char_count)break;
  4710                           
  4711                           ; BSR set to: 0
  4712                           
  4713                           ; BSR set to: 0
  4714  0022CE  0100               	movlb	0	; () banked
  4715  0022D0  51DD               	movf	scroll_off@display_char_count& (0+255),w,b
  4716  0022D2  6E38               	movwf	??_scroll_off& (0+255),c
  4717  0022D4  6A39               	clrf	(??_scroll_off+1)& (0+255),c
  4718  0022D6  5038               	movf	??_scroll_off,w,c
  4719  0022D8  0100               	movlb	0	; () banked
  4720  0022DA  5DE1               	subwf	scroll_off@i& (0+255),w,b
  4721  0022DC  0100               	movlb	0	; () banked
  4722  0022DE  51E2               	movf	(scroll_off@i+1)& (0+255),w,b
  4723  0022E0  0A80               	xorlw	128
  4724  0022E2  6E3A               	movwf	(??_scroll_off+2)& (0+255),c
  4725  0022E4  5039               	movf	??_scroll_off+1,w,c
  4726  0022E6  0A80               	xorlw	128
  4727  0022E8  583A               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4728  0022EA  B0D8               	btfsc	status,0,c
  4729  0022EC  D012               	goto	l5885
  4730                           
  4731                           ; BSR set to: 0
  4732                           
  4733                           ; BSR set to: 0
  4734                           
  4735                           ; BSR set to: 0
  4736  0022EE  0100               	movlb	0	; () banked
  4737  0022F0  4BDF               	infsnz	scroll_off@j& (0+255),f,b
  4738  0022F2  2BE0               	incf	(scroll_off@j+1)& (0+255),f,b
  4739  0022F4                     l5883:
  4740                           
  4741                           ; BSR set to: 0
  4742  0022F4  504B               	movf	_clcd_config_data+2,w,c
  4743  0022F6  6E38               	movwf	??_scroll_off& (0+255),c
  4744  0022F8  6A39               	clrf	(??_scroll_off+1)& (0+255),c
  4745  0022FA  5038               	movf	??_scroll_off,w,c
  4746  0022FC  0100               	movlb	0	; () banked
  4747  0022FE  5DDF               	subwf	scroll_off@j& (0+255),w,b
  4748  002300  0100               	movlb	0	; () banked
  4749  002302  51E0               	movf	(scroll_off@j+1)& (0+255),w,b
  4750  002304  0A80               	xorlw	128
  4751  002306  6E3A               	movwf	(??_scroll_off+2)& (0+255),c
  4752  002308  5039               	movf	??_scroll_off+1,w,c
  4753  00230A  0A80               	xorlw	128
  4754  00230C  583A               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4755  00230E  A0D8               	btfss	status,0,c
  4756  002310  D7A8               	goto	l5869
  4757  002312                     l5885:
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;clcd.c: 496: }
  4761                           ;clcd.c: 497: printf("i=%d,\r\n", i);
  4762  002312  0EC4               	movlw	low STR_14
  4763  002314  6E24               	movwf	printf@f,c
  4764  002316  0EFF               	movlw	high STR_14
  4765  002318  6E25               	movwf	printf@f+1,c
  4766  00231A  C0E1  F026         	movff	scroll_off@i,?_printf+2
  4767  00231E  C0E2  F027         	movff	scroll_off@i+1,?_printf+3
  4768  002322  EC0F  F00F         	call	_printf	;wreg free
  4769                           
  4770                           ;clcd.c: 498: j = 0;
  4771  002326  0E00               	movlw	0
  4772  002328  0100               	movlb	0	; () banked
  4773  00232A  6FE0               	movwf	(scroll_off@j+1)& (0+255),b
  4774  00232C  0E00               	movlw	0
  4775  00232E  6FDF               	movwf	scroll_off@j& (0+255),b
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;clcd.c: 499: line++;
  4779  002330  0100               	movlb	0	; () banked
  4780  002332  2BDC               	incf	scroll_off@line& (0+255),f,b
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;clcd.c: 500: if (i >= display_char_count)break;
  4784  002334  0100               	movlb	0	; () banked
  4785  002336  51DD               	movf	scroll_off@display_char_count& (0+255),w,b
  4786  002338  6E38               	movwf	??_scroll_off& (0+255),c
  4787  00233A  6A39               	clrf	(??_scroll_off+1)& (0+255),c
  4788  00233C  5038               	movf	??_scroll_off,w,c
  4789  00233E  0100               	movlb	0	; () banked
  4790  002340  5DE1               	subwf	scroll_off@i& (0+255),w,b
  4791  002342  0100               	movlb	0	; () banked
  4792  002344  51E2               	movf	(scroll_off@i+1)& (0+255),w,b
  4793  002346  0A80               	xorlw	128
  4794  002348  6E3A               	movwf	(??_scroll_off+2)& (0+255),c
  4795  00234A  5039               	movf	??_scroll_off+1,w,c
  4796  00234C  0A80               	xorlw	128
  4797  00234E  583A               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4798  002350  B0D8               	btfsc	status,0,c
  4799  002352  0012               	return	
  4800  002354                     l5895:
  4801                           
  4802                           ; BSR set to: 0
  4803  002354  0100               	movlb	0	; () banked
  4804  002356  51DE               	movf	scroll_off@str_len& (0+255),w,b
  4805  002358  6E38               	movwf	??_scroll_off& (0+255),c
  4806  00235A  6A39               	clrf	(??_scroll_off+1)& (0+255),c
  4807  00235C  5038               	movf	??_scroll_off,w,c
  4808  00235E  0100               	movlb	0	; () banked
  4809  002360  5DE1               	subwf	scroll_off@i& (0+255),w,b
  4810  002362  0100               	movlb	0	; () banked
  4811  002364  51E2               	movf	(scroll_off@i+1)& (0+255),w,b
  4812  002366  0A80               	xorlw	128
  4813  002368  6E3A               	movwf	(??_scroll_off+2)& (0+255),c
  4814  00236A  5039               	movf	??_scroll_off+1,w,c
  4815  00236C  0A80               	xorlw	128
  4816  00236E  583A               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4817  002370  B0D8               	btfsc	status,0,c
  4818  002372  0012               	return	
  4819  002374  D7BF               	goto	l5883
  4820  002376                     __end_of_scroll_off:
  4821                           	opt stack 0
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           prodh	equ	0xFF4
  4827                           prodl	equ	0xFF3
  4828                           intcon	equ	0xFF2
  4829                           postinc0	equ	0xFEE
  4830                           wreg	equ	0xFE8
  4831                           indf1	equ	0xFE7
  4832                           postdec1	equ	0xFE5
  4833                           fsr1h	equ	0xFE2
  4834                           fsr1l	equ	0xFE1
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           fsr2h	equ	0xFDA
  4838                           fsr2l	equ	0xFD9
  4839                           status	equ	0xFD8
  4840                           
  4841 ;; *************** function _scroll_left_to_right *****************
  4842 ;; Defined at:
  4843 ;;		line 398 in file "clcd.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  clcd_display    2   43[COMRAM] PTR struct .
  4846 ;;		 -> clcd_display_string_details(1080), 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  line            1   53[COMRAM] unsigned char 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  1    wreg      void 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4858 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;Total ram usage:       11 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    6
  4865 ;; This function calls:
  4866 ;;		_memcpy
  4867 ;;		_memset
  4868 ;; This function is called by:
  4869 ;;		_make_display
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text10
  4874  00144A                     __ptext10:
  4875                           	opt stack 0
  4876  00144A                     _scroll_left_to_right:
  4877                           	opt stack 23
  4878                           
  4879                           ;clcd.c: 399: char line = -1;
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;incstack = 0
  4883  00144A  6836               	setf	scroll_left_to_right@line,c
  4884                           
  4885                           ;clcd.c: 400: if (clcd_display_string_details->start_row == 0)
  4886  00144C  EE20 F02A          	lfsr	2,42
  4887  001450  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4888  001452  26D9               	addwf	fsr2l,f,c
  4889  001454  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4890  001456  22DA               	addwfc	fsr2h,f,c
  4891  001458  50DF               	movf	indf2,w,c
  4892  00145A  0B7F               	andlw	127
  4893  00145C  0900               	iorlw	0
  4894  00145E  A4D8               	btfss	status,2,c
  4895  001460  D002               	goto	l5779
  4896                           
  4897                           ;clcd.c: 401: line = 0;
  4898  001462  0E00               	movlw	0
  4899  001464  D00C               	goto	L2
  4900  001466                     l5779:
  4901                           
  4902                           ;clcd.c: 402: else if (clcd_display_string_details->start_row == 1)
  4903  001466  EE20 F02A          	lfsr	2,42
  4904  00146A  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4905  00146C  26D9               	addwf	fsr2l,f,c
  4906  00146E  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4907  001470  22DA               	addwfc	fsr2h,f,c
  4908  001472  50DF               	movf	indf2,w,c
  4909  001474  0B7F               	andlw	127
  4910  001476  06E8               	decf	wreg,f,c
  4911  001478  A4D8               	btfss	status,2,c
  4912  00147A  D002               	goto	l5783
  4913                           
  4914                           ;clcd.c: 403: line = 1;
  4915  00147C  0E01               	movlw	1
  4916  00147E                     L2:
  4917  00147E  6E36               	movwf	scroll_left_to_right@line,c
  4918  001480                     l5783:
  4919                           
  4920                           ;clcd.c: 404: if (clcd_display_string_details->start_row == 2)
  4921  001480  EE20 F02A          	lfsr	2,42
  4922  001484  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4923  001486  26D9               	addwf	fsr2l,f,c
  4924  001488  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4925  00148A  22DA               	addwfc	fsr2h,f,c
  4926  00148C  50DF               	movf	indf2,w,c
  4927  00148E  0B7F               	andlw	127
  4928  001490  0A02               	xorlw	2
  4929  001492  A4D8               	btfss	status,2,c
  4930  001494  D002               	goto	l5787
  4931                           
  4932                           ;clcd.c: 405: line = 2;
  4933  001496  0E02               	movlw	2
  4934  001498  6E36               	movwf	scroll_left_to_right@line,c
  4935  00149A                     l5787:
  4936                           
  4937                           ;clcd.c: 406: if (clcd_display_string_details->start_row == 3)
  4938  00149A  EE20 F02A          	lfsr	2,42
  4939  00149E  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4940  0014A0  26D9               	addwf	fsr2l,f,c
  4941  0014A2  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4942  0014A4  22DA               	addwfc	fsr2h,f,c
  4943  0014A6  50DF               	movf	indf2,w,c
  4944  0014A8  0B7F               	andlw	127
  4945  0014AA  0A03               	xorlw	3
  4946  0014AC  A4D8               	btfss	status,2,c
  4947  0014AE  D002               	goto	l5791
  4948                           
  4949                           ;clcd.c: 407: line = 3;
  4950  0014B0  0E03               	movlw	3
  4951  0014B2  6E36               	movwf	scroll_left_to_right@line,c
  4952  0014B4                     l5791:
  4953                           
  4954                           ;clcd.c: 409: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  4955                           ;clcd.c: 410: ' ', clcd_display_string_details->display_char_count);
  4956  0014B4  5036               	movf	scroll_left_to_right@line,w,c
  4957  0014B6  0D14               	mullw	20
  4958  0014B8  0E00               	movlw	low _lcd_display_array
  4959  0014BA  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  4960  0014BC  0E01               	movlw	high _lcd_display_array
  4961  0014BE  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  4962  0014C0  50F3               	movf	prodl,w,c
  4963  0014C2  262E               	addwf	??_scroll_left_to_right,f,c
  4964  0014C4  50F4               	movf	prodh,w,c
  4965  0014C6  222F               	addwfc	??_scroll_left_to_right+1,f,c
  4966  0014C8  EE20 F02B          	lfsr	2,43
  4967  0014CC  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4968  0014CE  26D9               	addwf	fsr2l,f,c
  4969  0014D0  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4970  0014D2  22DA               	addwfc	fsr2h,f,c
  4971  0014D4  50DF               	movf	indf2,w,c
  4972  0014D6  0B7F               	andlw	127
  4973  0014D8  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  4974  0014DA  5030               	movf	??_scroll_left_to_right+2,w,c
  4975  0014DC  0D01               	mullw	1
  4976  0014DE  50F3               	movf	prodl,w,c
  4977  0014E0  242E               	addwf	??_scroll_left_to_right,w,c
  4978  0014E2  6E24               	movwf	memset@p1,c
  4979  0014E4  50F4               	movf	prodh,w,c
  4980  0014E6  202F               	addwfc	??_scroll_left_to_right+1,w,c
  4981  0014E8  6E25               	movwf	memset@p1+1,c
  4982  0014EA  0E00               	movlw	0
  4983  0014EC  6E27               	movwf	memset@c+1,c
  4984  0014EE  0E20               	movlw	32
  4985  0014F0  6E26               	movwf	memset@c,c
  4986  0014F2  EE20 F031          	lfsr	2,49
  4987  0014F6  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4988  0014F8  26D9               	addwf	fsr2l,f,c
  4989  0014FA  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4990  0014FC  22DA               	addwfc	fsr2h,f,c
  4991  0014FE  50DF               	movf	indf2,w,c
  4992  001500  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  4993  001502  5031               	movf	??_scroll_left_to_right+3,w,c
  4994  001504  6E28               	movwf	memset@n,c
  4995  001506  6A29               	clrf	memset@n+1,c
  4996  001508  EC5E  F01A         	call	_memset	;wreg free
  4997                           
  4998                           ;clcd.c: 412: if (clcd_display_string_details->length_count_for_right_scroll > clcd_disp
      +                          lay_string_details->display_char_count) {
  4999  00150C  EE20 F031          	lfsr	2,49
  5000  001510  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5001  001512  26D9               	addwf	fsr2l,f,c
  5002  001514  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5003  001516  22DA               	addwfc	fsr2h,f,c
  5004  001518  50DF               	movf	indf2,w,c
  5005  00151A  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5006  00151C  EE20 F032          	lfsr	2,50
  5007  001520  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5008  001522  26D9               	addwf	fsr2l,f,c
  5009  001524  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5010  001526  22DA               	addwfc	fsr2h,f,c
  5011  001528  50DF               	movf	indf2,w,c
  5012  00152A  0B7F               	andlw	127
  5013  00152C  5C2E               	subwf	??_scroll_left_to_right,w,c
  5014  00152E  B0D8               	btfsc	status,0,c
  5015  001530  D054               	goto	l5799
  5016                           
  5017                           ;clcd.c: 413: if (clcd_display_string_details->string[0] != (0)) {
  5018  001532  EE20 F001          	lfsr	2,1
  5019  001536  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5020  001538  26D9               	addwf	fsr2l,f,c
  5021  00153A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5022  00153C  22DA               	addwfc	fsr2h,f,c
  5023  00153E  50DF               	movf	indf2,w,c
  5024  001540  B4D8               	btfsc	status,2,c
  5025  001542  D0A2               	goto	l5803
  5026                           
  5027                           ;clcd.c: 414: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  5028                           ;clcd.c: 415: clcd_display_string_details->string +
  5029                           ;clcd.c: 416: ((clcd_display_string_details->strlen - 1) - clcd_display_string_details->
      +                          length_decount_for_right_scroll),
  5030                           ;clcd.c: 417: clcd_display_string_details->display_char_count);
  5031  001544  5036               	movf	scroll_left_to_right@line,w,c
  5032  001546  0D14               	mullw	20
  5033  001548  0E00               	movlw	low _lcd_display_array
  5034  00154A  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5035  00154C  0E01               	movlw	high _lcd_display_array
  5036  00154E  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5037  001550  50F3               	movf	prodl,w,c
  5038  001552  262E               	addwf	??_scroll_left_to_right,f,c
  5039  001554  50F4               	movf	prodh,w,c
  5040  001556  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5041  001558  EE20 F02B          	lfsr	2,43
  5042  00155C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5043  00155E  26D9               	addwf	fsr2l,f,c
  5044  001560  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5045  001562  22DA               	addwfc	fsr2h,f,c
  5046  001564  50DF               	movf	indf2,w,c
  5047  001566  0B7F               	andlw	127
  5048  001568  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5049  00156A  5030               	movf	??_scroll_left_to_right+2,w,c
  5050  00156C  0D01               	mullw	1
  5051  00156E  50F3               	movf	prodl,w,c
  5052  001570  242E               	addwf	??_scroll_left_to_right,w,c
  5053  001572  6E10               	movwf	memcpy@d1,c
  5054  001574  50F4               	movf	prodh,w,c
  5055  001576  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5056  001578  6E11               	movwf	memcpy@d1+1,c
  5057  00157A  EE20 F033          	lfsr	2,51
  5058  00157E  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5059  001580  26D9               	addwf	fsr2l,f,c
  5060  001582  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5061  001584  22DA               	addwfc	fsr2h,f,c
  5062  001586  50DF               	movf	indf2,w,c
  5063  001588  0B7F               	andlw	127
  5064  00158A  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5065  00158C  6A32               	clrf	(??_scroll_left_to_right+4)& (0+255),c
  5066  00158E  1E31               	comf	??_scroll_left_to_right+3,f,c
  5067  001590  1E32               	comf	??_scroll_left_to_right+4,f,c
  5068  001592  4A31               	infsnz	??_scroll_left_to_right+3,f,c
  5069  001594  2A32               	incf	??_scroll_left_to_right+4,f,c
  5070  001596  EE20 F029          	lfsr	2,41
  5071  00159A  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5072  00159C  26D9               	addwf	fsr2l,f,c
  5073  00159E  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5074  0015A0  22DA               	addwfc	fsr2h,f,c
  5075  0015A2  50DF               	movf	indf2,w,c
  5076  0015A4  0B7F               	andlw	127
  5077  0015A6  6E33               	movwf	(??_scroll_left_to_right+5)& (0+255),c
  5078  0015A8  6A34               	clrf	(??_scroll_left_to_right+6)& (0+255),c
  5079  0015AA  5031               	movf	??_scroll_left_to_right+3,w,c
  5080  0015AC  2633               	addwf	??_scroll_left_to_right+5,f,c
  5081  0015AE  5032               	movf	??_scroll_left_to_right+4,w,c
  5082  0015B0  2234               	addwfc	??_scroll_left_to_right+6,f,c
  5083  0015B2  5033               	movf	??_scroll_left_to_right+5,w,c
  5084  0015B4  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5085  0015B6  6E12               	movwf	memcpy@s1,c
  5086  0015B8  5034               	movf	??_scroll_left_to_right+6,w,c
  5087  0015BA  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5088  0015BC  6E13               	movwf	memcpy@s1+1,c
  5089  0015BE  EE20 F031          	lfsr	2,49
  5090  0015C2  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5091  0015C4  26D9               	addwf	fsr2l,f,c
  5092  0015C6  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5093  0015C8  22DA               	addwfc	fsr2h,f,c
  5094  0015CA  50DF               	movf	indf2,w,c
  5095  0015CC  6E35               	movwf	(??_scroll_left_to_right+7)& (0+255),c
  5096  0015CE  5035               	movf	??_scroll_left_to_right+7,w,c
  5097  0015D0  6E14               	movwf	memcpy@n,c
  5098  0015D2  6A15               	clrf	memcpy@n+1,c
  5099  0015D4  EC85  F019         	call	_memcpy	;wreg free
  5100                           
  5101                           ;clcd.c: 418: }
  5102                           ;clcd.c: 419: } else {
  5103  0015D8  D057               	goto	l5803
  5104  0015DA                     l5799:
  5105                           
  5106                           ;clcd.c: 420: if (clcd_display_string_details->string[0] != (0)) {
  5107  0015DA  EE20 F001          	lfsr	2,1
  5108  0015DE  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5109  0015E0  26D9               	addwf	fsr2l,f,c
  5110  0015E2  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5111  0015E4  22DA               	addwfc	fsr2h,f,c
  5112  0015E6  50DF               	movf	indf2,w,c
  5113  0015E8  B4D8               	btfsc	status,2,c
  5114  0015EA  D04E               	goto	l5803
  5115                           
  5116                           ;clcd.c: 421: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col +
  5117                           ;clcd.c: 422: clcd_display_string_details->length_count_for_right_scroll,
  5118                           ;clcd.c: 423: clcd_display_string_details->string,
  5119                           ;clcd.c: 424: clcd_display_string_details->display_char_count - clcd_display_string_deta
      +                          ils->length_count_for_right_scroll);
  5120  0015EC  5036               	movf	scroll_left_to_right@line,w,c
  5121  0015EE  0D14               	mullw	20
  5122  0015F0  0E00               	movlw	low _lcd_display_array
  5123  0015F2  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5124  0015F4  0E01               	movlw	high _lcd_display_array
  5125  0015F6  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5126  0015F8  50F3               	movf	prodl,w,c
  5127  0015FA  262E               	addwf	??_scroll_left_to_right,f,c
  5128  0015FC  50F4               	movf	prodh,w,c
  5129  0015FE  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5130  001600  EE20 F02B          	lfsr	2,43
  5131  001604  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5132  001606  26D9               	addwf	fsr2l,f,c
  5133  001608  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5134  00160A  22DA               	addwfc	fsr2h,f,c
  5135  00160C  50DF               	movf	indf2,w,c
  5136  00160E  0B7F               	andlw	127
  5137  001610  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5138  001612  5030               	movf	??_scroll_left_to_right+2,w,c
  5139  001614  0D01               	mullw	1
  5140  001616  50F3               	movf	prodl,w,c
  5141  001618  262E               	addwf	??_scroll_left_to_right,f,c
  5142  00161A  50F4               	movf	prodh,w,c
  5143  00161C  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5144  00161E  EE20 F032          	lfsr	2,50
  5145  001622  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5146  001624  26D9               	addwf	fsr2l,f,c
  5147  001626  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5148  001628  22DA               	addwfc	fsr2h,f,c
  5149  00162A  50DF               	movf	indf2,w,c
  5150  00162C  0B7F               	andlw	127
  5151  00162E  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5152  001630  5031               	movf	??_scroll_left_to_right+3,w,c
  5153  001632  0D01               	mullw	1
  5154  001634  50F3               	movf	prodl,w,c
  5155  001636  242E               	addwf	??_scroll_left_to_right,w,c
  5156  001638  6E10               	movwf	memcpy@d1,c
  5157  00163A  50F4               	movf	prodh,w,c
  5158  00163C  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5159  00163E  6E11               	movwf	memcpy@d1+1,c
  5160  001640  0E01               	movlw	1
  5161  001642  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5162  001644  6E12               	movwf	memcpy@s1,c
  5163  001646  0E00               	movlw	0
  5164  001648  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5165  00164A  6E13               	movwf	memcpy@s1+1,c
  5166  00164C  EE20 F032          	lfsr	2,50
  5167  001650  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5168  001652  26D9               	addwf	fsr2l,f,c
  5169  001654  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5170  001656  22DA               	addwfc	fsr2h,f,c
  5171  001658  50DF               	movf	indf2,w,c
  5172  00165A  0B7F               	andlw	127
  5173  00165C  6E32               	movwf	(??_scroll_left_to_right+4)& (0+255),c
  5174  00165E  6A33               	clrf	(??_scroll_left_to_right+5)& (0+255),c
  5175  001660  1E32               	comf	??_scroll_left_to_right+4,f,c
  5176  001662  1E33               	comf	??_scroll_left_to_right+5,f,c
  5177  001664  4A32               	infsnz	??_scroll_left_to_right+4,f,c
  5178  001666  2A33               	incf	??_scroll_left_to_right+5,f,c
  5179  001668  EE20 F031          	lfsr	2,49
  5180  00166C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5181  00166E  26D9               	addwf	fsr2l,f,c
  5182  001670  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5183  001672  22DA               	addwfc	fsr2h,f,c
  5184  001674  50DF               	movf	indf2,w,c
  5185  001676  6E34               	movwf	(??_scroll_left_to_right+6)& (0+255),c
  5186  001678  5034               	movf	??_scroll_left_to_right+6,w,c
  5187  00167A  2432               	addwf	??_scroll_left_to_right+4,w,c
  5188  00167C  6E14               	movwf	memcpy@n,c
  5189  00167E  0E00               	movlw	0
  5190  001680  2033               	addwfc	??_scroll_left_to_right+5,w,c
  5191  001682  6E15               	movwf	memcpy@n+1,c
  5192  001684  EC85  F019         	call	_memcpy	;wreg free
  5193  001688                     l5803:
  5194                           
  5195                           ;clcd.c: 425: }
  5196                           ;clcd.c: 426: }
  5197                           ;clcd.c: 427: if (clcd_display_string_details->length_count_for_right_scroll <= clcd_dis
      +                          play_string_details->display_char_count) {
  5198  001688  EE20 F032          	lfsr	2,50
  5199  00168C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5200  00168E  26D9               	addwf	fsr2l,f,c
  5201  001690  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5202  001692  22DA               	addwfc	fsr2h,f,c
  5203  001694  50DF               	movf	indf2,w,c
  5204  001696  0B7F               	andlw	127
  5205  001698  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5206  00169A  EE20 F031          	lfsr	2,49
  5207  00169E  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5208  0016A0  26D9               	addwf	fsr2l,f,c
  5209  0016A2  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5210  0016A4  22DA               	addwfc	fsr2h,f,c
  5211  0016A6  502E               	movf	??_scroll_left_to_right,w,c
  5212  0016A8  5CDE               	subwf	postinc2,w,c
  5213  0016AA  A0D8               	btfss	status,0,c
  5214  0016AC  D013               	goto	l5807
  5215                           
  5216                           ;clcd.c: 428: clcd_display_string_details->length_count_for_right_scroll++;
  5217  0016AE  0E01               	movlw	1
  5218  0016B0  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5219  0016B2  EE20 F032          	lfsr	2,50
  5220  0016B6  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5221  0016B8  26D9               	addwf	fsr2l,f,c
  5222  0016BA  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5223  0016BC  22DA               	addwfc	fsr2h,f,c
  5224  0016BE  50DF               	movf	indf2,w,c
  5225  0016C0  0B7F               	andlw	127
  5226  0016C2  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5227  0016C4  502E               	movf	??_scroll_left_to_right,w,c
  5228  0016C6  262F               	addwf	??_scroll_left_to_right+1,f,c
  5229  0016C8  50DF               	movf	indf2,w,c
  5230  0016CA  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5231  0016CC  0B80               	andlw	-128
  5232  0016CE  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5233  0016D0  6EDF               	movwf	indf2,c
  5234                           
  5235                           ;clcd.c: 429: } else if (clcd_display_string_details->length_decount_for_right_scroll < 
      +                          clcd_display_string_details->strlen) {
  5236  0016D2  0012               	return	
  5237  0016D4                     l5807:
  5238  0016D4  EE20 F033          	lfsr	2,51
  5239  0016D8  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5240  0016DA  26D9               	addwf	fsr2l,f,c
  5241  0016DC  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5242  0016DE  22DA               	addwfc	fsr2h,f,c
  5243  0016E0  50DF               	movf	indf2,w,c
  5244  0016E2  0B7F               	andlw	127
  5245  0016E4  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5246  0016E6  EE20 F029          	lfsr	2,41
  5247  0016EA  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5248  0016EC  26D9               	addwf	fsr2l,f,c
  5249  0016EE  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5250  0016F0  22DA               	addwfc	fsr2h,f,c
  5251  0016F2  50DF               	movf	indf2,w,c
  5252  0016F4  0B7F               	andlw	127
  5253  0016F6  5C2E               	subwf	??_scroll_left_to_right,w,c
  5254  0016F8  B0D8               	btfsc	status,0,c
  5255  0016FA  0012               	return	
  5256                           
  5257                           ;clcd.c: 430: clcd_display_string_details->length_decount_for_right_scroll++;
  5258  0016FC  0E01               	movlw	1
  5259  0016FE  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5260  001700  EE20 F033          	lfsr	2,51
  5261  001704  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5262  001706  26D9               	addwf	fsr2l,f,c
  5263  001708  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5264  00170A  22DA               	addwfc	fsr2h,f,c
  5265  00170C  50DF               	movf	indf2,w,c
  5266  00170E  0B7F               	andlw	127
  5267  001710  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5268  001712  502E               	movf	??_scroll_left_to_right,w,c
  5269  001714  262F               	addwf	??_scroll_left_to_right+1,f,c
  5270  001716  50DF               	movf	indf2,w,c
  5271  001718  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5272  00171A  0B80               	andlw	-128
  5273  00171C  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5274  00171E  6EDF               	movwf	indf2,c
  5275                           
  5276                           ;clcd.c: 431: if (clcd_display_string_details->length_decount_for_right_scroll >= clcd_d
      +                          isplay_string_details->strlen) {
  5277  001720  EE20 F029          	lfsr	2,41
  5278  001724  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5279  001726  26D9               	addwf	fsr2l,f,c
  5280  001728  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5281  00172A  22DA               	addwfc	fsr2h,f,c
  5282  00172C  50DF               	movf	indf2,w,c
  5283  00172E  0B7F               	andlw	127
  5284  001730  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5285  001732  EE20 F033          	lfsr	2,51
  5286  001736  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5287  001738  26D9               	addwf	fsr2l,f,c
  5288  00173A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5289  00173C  22DA               	addwfc	fsr2h,f,c
  5290  00173E  50DF               	movf	indf2,w,c
  5291  001740  0B7F               	andlw	127
  5292  001742  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5293  001744  502E               	movf	??_scroll_left_to_right,w,c
  5294  001746  5C2F               	subwf	??_scroll_left_to_right+1,w,c
  5295  001748  A0D8               	btfss	status,0,c
  5296  00174A  0012               	return	
  5297                           
  5298                           ;clcd.c: 432: clcd_display_string_details->length_count_for_right_scroll = 0;
  5299  00174C  EE20 F032          	lfsr	2,50
  5300  001750  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5301  001752  26D9               	addwf	fsr2l,f,c
  5302  001754  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5303  001756  22DA               	addwfc	fsr2h,f,c
  5304  001758  90DF               	bcf	indf2,0,c
  5305  00175A  92DF               	bcf	indf2,1,c
  5306  00175C  94DF               	bcf	indf2,2,c
  5307  00175E  96DF               	bcf	indf2,3,c
  5308  001760  98DF               	bcf	indf2,4,c
  5309  001762  9ADF               	bcf	indf2,5,c
  5310  001764  9CDF               	bcf	indf2,6,c
  5311                           
  5312                           ;clcd.c: 433: clcd_display_string_details->length_decount_for_right_scroll = 0;
  5313  001766  EE20 F033          	lfsr	2,51
  5314  00176A  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5315  00176C  26D9               	addwf	fsr2l,f,c
  5316  00176E  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5317  001770  22DA               	addwfc	fsr2h,f,c
  5318  001772  90DF               	bcf	indf2,0,c
  5319  001774  92DF               	bcf	indf2,1,c
  5320  001776  94DF               	bcf	indf2,2,c
  5321  001778  96DF               	bcf	indf2,3,c
  5322  00177A  98DF               	bcf	indf2,4,c
  5323  00177C  9ADF               	bcf	indf2,5,c
  5324  00177E  9CDF               	bcf	indf2,6,c
  5325  001780  0012               	return	
  5326  001782                     __end_of_scroll_left_to_right:
  5327                           	opt stack 0
  5328                           tblptru	equ	0xFF8
  5329                           tblptrh	equ	0xFF7
  5330                           tblptrl	equ	0xFF6
  5331                           tablat	equ	0xFF5
  5332                           prodh	equ	0xFF4
  5333                           prodl	equ	0xFF3
  5334                           intcon	equ	0xFF2
  5335                           postinc0	equ	0xFEE
  5336                           wreg	equ	0xFE8
  5337                           indf1	equ	0xFE7
  5338                           postdec1	equ	0xFE5
  5339                           fsr1h	equ	0xFE2
  5340                           fsr1l	equ	0xFE1
  5341                           indf2	equ	0xFDF
  5342                           postinc2	equ	0xFDE
  5343                           fsr2h	equ	0xFDA
  5344                           fsr2l	equ	0xFD9
  5345                           status	equ	0xFD8
  5346                           
  5347 ;; *************** function _display_text *****************
  5348 ;; Defined at:
  5349 ;;		line 598 in file "clcd.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;		None
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;		None
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  1    wreg      void 
  5356 ;; Registers used:
  5357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;Total ram usage:        0 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:    8
  5370 ;; This function calls:
  5371 ;;		_char_enter_mode_left_to_right
  5372 ;;		_set_cursor
  5373 ;;		_write_lcd_cmd
  5374 ;;		_write_str
  5375 ;; This function is called by:
  5376 ;;		_make_display
  5377 ;;		_display_screen
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           	psect	text11
  5382  002CAA                     __ptext11:
  5383                           	opt stack 0
  5384  002CAA                     _display_text:
  5385                           	opt stack 21
  5386                           
  5387                           ;clcd.c: 599: if (print_data_ready == 1) {
  5388                           
  5389                           ;incstack = 0
  5390  002CAA  0100               	movlb	0	; () banked
  5391  002CAC  0576               	decf	_print_data_ready& (0+255),w,b
  5392  002CAE  0100               	movlb	0	; () banked
  5393  002CB0  1177               	iorwf	(_print_data_ready+1)& (0+255),w,b
  5394  002CB2  A4D8               	btfss	status,2,c
  5395  002CB4  D037               	goto	l5913
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;clcd.c: 600: write_lcd_cmd(0x01);;
  5399  002CB6  0E01               	movlw	1
  5400  002CB8  EC31  F01B         	call	_write_lcd_cmd
  5401                           
  5402                           ;clcd.c: 601: char_enter_mode_left_to_right();
  5403  002CBC  ECC9  F01B         	call	_char_enter_mode_left_to_right	;wreg free
  5404                           
  5405                           ;clcd.c: 602: set_cursor(0x80, 0);
  5406  002CC0  0E00               	movlw	0
  5407  002CC2  6E18               	movwf	set_cursor@col_number,c
  5408  002CC4  0E80               	movlw	128
  5409  002CC6  EC4D  F01B         	call	_set_cursor
  5410                           
  5411                           ;clcd.c: 603: write_str(lcd_display_array[0]);
  5412  002CCA  0E00               	movlw	low _lcd_display_array
  5413  002CCC  6E18               	movwf	write_str@str,c
  5414  002CCE  0E01               	movlw	high _lcd_display_array
  5415  002CD0  6E19               	movwf	write_str@str+1,c
  5416  002CD2  ECB0  F01A         	call	_write_str	;wreg free
  5417                           
  5418                           ;clcd.c: 604: set_cursor(0xC0, 0);
  5419  002CD6  0E00               	movlw	0
  5420  002CD8  6E18               	movwf	set_cursor@col_number,c
  5421  002CDA  0EC0               	movlw	192
  5422  002CDC  EC4D  F01B         	call	_set_cursor
  5423                           
  5424                           ;clcd.c: 605: write_str(lcd_display_array[1]);
  5425  002CE0  0E14               	movlw	low (_lcd_display_array+20)
  5426  002CE2  6E18               	movwf	write_str@str,c
  5427  002CE4  0E01               	movlw	high (_lcd_display_array+20)
  5428  002CE6  6E19               	movwf	write_str@str+1,c
  5429  002CE8  ECB0  F01A         	call	_write_str	;wreg free
  5430                           
  5431                           ;clcd.c: 606: set_cursor(0x94, 0);
  5432  002CEC  0E00               	movlw	0
  5433  002CEE  6E18               	movwf	set_cursor@col_number,c
  5434  002CF0  0E94               	movlw	148
  5435  002CF2  EC4D  F01B         	call	_set_cursor
  5436                           
  5437                           ;clcd.c: 607: write_str(lcd_display_array[2]);
  5438  002CF6  0E28               	movlw	low (_lcd_display_array+40)
  5439  002CF8  6E18               	movwf	write_str@str,c
  5440  002CFA  0E01               	movlw	high (_lcd_display_array+40)
  5441  002CFC  6E19               	movwf	write_str@str+1,c
  5442  002CFE  ECB0  F01A         	call	_write_str	;wreg free
  5443                           
  5444                           ;clcd.c: 608: set_cursor(0xD4, 0);
  5445  002D02  0E00               	movlw	0
  5446  002D04  6E18               	movwf	set_cursor@col_number,c
  5447  002D06  0ED4               	movlw	212
  5448  002D08  EC4D  F01B         	call	_set_cursor
  5449                           
  5450                           ;clcd.c: 609: write_str(lcd_display_array[3]);
  5451  002D0C  0E3C               	movlw	low (_lcd_display_array+60)
  5452  002D0E  6E18               	movwf	write_str@str,c
  5453  002D10  0E01               	movlw	high (_lcd_display_array+60)
  5454  002D12  6E19               	movwf	write_str@str+1,c
  5455  002D14  ECB0  F01A         	call	_write_str	;wreg free
  5456                           
  5457                           ;clcd.c: 610: print_data_ready = 0;
  5458  002D18  0E00               	movlw	0
  5459  002D1A  0100               	movlb	0	; () banked
  5460  002D1C  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5461  002D1E  0E00               	movlw	0
  5462  002D20  6F76               	movwf	_print_data_ready& (0+255),b
  5463                           
  5464                           ;clcd.c: 611: } else {
  5465  002D22  0012               	return	
  5466  002D24                     l5913:
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;clcd.c: 612: print_data_ready = 0;
  5470  002D24  0E00               	movlw	0
  5471  002D26  0100               	movlb	0	; () banked
  5472  002D28  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5473  002D2A  0E00               	movlw	0
  5474  002D2C  6F76               	movwf	_print_data_ready& (0+255),b
  5475  002D2E  0012               	return	
  5476  002D30                     __end_of_display_text:
  5477                           	opt stack 0
  5478                           tblptru	equ	0xFF8
  5479                           tblptrh	equ	0xFF7
  5480                           tblptrl	equ	0xFF6
  5481                           tablat	equ	0xFF5
  5482                           prodh	equ	0xFF4
  5483                           prodl	equ	0xFF3
  5484                           intcon	equ	0xFF2
  5485                           postinc0	equ	0xFEE
  5486                           wreg	equ	0xFE8
  5487                           indf1	equ	0xFE7
  5488                           postdec1	equ	0xFE5
  5489                           fsr1h	equ	0xFE2
  5490                           fsr1l	equ	0xFE1
  5491                           indf2	equ	0xFDF
  5492                           postinc2	equ	0xFDE
  5493                           fsr2h	equ	0xFDA
  5494                           fsr2l	equ	0xFD9
  5495                           status	equ	0xFD8
  5496                           
  5497 ;; *************** function _set_cursor *****************
  5498 ;; Defined at:
  5499 ;;		line 216 in file "clcd.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;  row_number      1    wreg     unsigned char 
  5502 ;;  col_number      1   23[COMRAM] unsigned char 
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;  row_number      1   24[COMRAM] unsigned char 
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  1    wreg      void 
  5507 ;; Registers used:
  5508 ;;		wreg, status,2, status,0, cstack
  5509 ;; Tracked objects:
  5510 ;;		On entry : 0/0
  5511 ;;		On exit  : 0/0
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5514 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5518 ;;Total ram usage:        2 bytes
  5519 ;; Hardware stack levels used:    1
  5520 ;; Hardware stack levels required when called:    7
  5521 ;; This function calls:
  5522 ;;		_write_lcd_cmd
  5523 ;; This function is called by:
  5524 ;;		_display_text
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           	psect	text12
  5529  00369A                     __ptext12:
  5530                           	opt stack 0
  5531  00369A                     _set_cursor:
  5532                           	opt stack 21
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;incstack = 0
  5536                           ;set_cursor@row_number stored from wreg
  5537  00369A  6E19               	movwf	set_cursor@row_number,c
  5538                           
  5539                           ;clcd.c: 217: if (col_number > 20) {
  5540  00369C  0E14               	movlw	20
  5541  00369E  6418               	cpfsgt	set_cursor@col_number,c
  5542  0036A0  D002               	goto	l5721
  5543                           
  5544                           ;clcd.c: 218: col_number = 0;
  5545  0036A2  0E00               	movlw	0
  5546  0036A4  6E18               	movwf	set_cursor@col_number,c
  5547  0036A6                     l5721:
  5548                           
  5549                           ;clcd.c: 219: }
  5550                           ;clcd.c: 220: write_lcd_cmd(col_number + row_number);
  5551  0036A6  5018               	movf	set_cursor@col_number,w,c
  5552  0036A8  2419               	addwf	set_cursor@row_number,w,c
  5553  0036AA  EC31  F01B         	call	_write_lcd_cmd
  5554  0036AE  0012               	return		;funcret
  5555  0036B0                     __end_of_set_cursor:
  5556                           	opt stack 0
  5557                           tblptru	equ	0xFF8
  5558                           tblptrh	equ	0xFF7
  5559                           tblptrl	equ	0xFF6
  5560                           tablat	equ	0xFF5
  5561                           prodh	equ	0xFF4
  5562                           prodl	equ	0xFF3
  5563                           intcon	equ	0xFF2
  5564                           postinc0	equ	0xFEE
  5565                           wreg	equ	0xFE8
  5566                           indf1	equ	0xFE7
  5567                           postdec1	equ	0xFE5
  5568                           fsr1h	equ	0xFE2
  5569                           fsr1l	equ	0xFE1
  5570                           indf2	equ	0xFDF
  5571                           postinc2	equ	0xFDE
  5572                           fsr2h	equ	0xFDA
  5573                           fsr2l	equ	0xFD9
  5574                           status	equ	0xFD8
  5575                           
  5576 ;; *************** function _char_enter_mode_left_to_right *****************
  5577 ;; Defined at:
  5578 ;;		line 257 in file "clcd.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;		None
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;		None
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      void 
  5585 ;; Registers used:
  5586 ;;		wreg, status,2, status,0, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;Total ram usage:        0 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    7
  5599 ;; This function calls:
  5600 ;;		_write_lcd_cmd
  5601 ;; This function is called by:
  5602 ;;		_display_text
  5603 ;; This function uses a non-reentrant model
  5604 ;;
  5605                           
  5606                           	psect	text13
  5607  003792                     __ptext13:
  5608                           	opt stack 0
  5609  003792                     _char_enter_mode_left_to_right:
  5610                           	opt stack 21
  5611                           
  5612                           ;clcd.c: 261: write_lcd_cmd(0x06);
  5613                           
  5614                           ;incstack = 0
  5615  003792  0E06               	movlw	6
  5616  003794  EC31  F01B         	call	_write_lcd_cmd
  5617  003798  0012               	return		;funcret
  5618  00379A                     __end_of_char_enter_mode_left_to_right:
  5619                           	opt stack 0
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           prodh	equ	0xFF4
  5625                           prodl	equ	0xFF3
  5626                           intcon	equ	0xFF2
  5627                           postinc0	equ	0xFEE
  5628                           wreg	equ	0xFE8
  5629                           indf1	equ	0xFE7
  5630                           postdec1	equ	0xFE5
  5631                           fsr1h	equ	0xFE2
  5632                           fsr1l	equ	0xFE1
  5633                           indf2	equ	0xFDF
  5634                           postinc2	equ	0xFDE
  5635                           fsr2h	equ	0xFDA
  5636                           fsr2l	equ	0xFD9
  5637                           status	equ	0xFD8
  5638                           
  5639 ;; *************** function _copy_data *****************
  5640 ;; Defined at:
  5641 ;;		line 121 in file "clcd.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;  clcd_str_dat    2   53[COMRAM] PTR struct .
  5644 ;;		 -> clcd_display_string_details(1080), 
  5645 ;;  data            2   55[COMRAM] PTR struct .
  5646 ;;		 -> cmd_data(49), 
  5647 ;; Auto vars:     Size  Location     Type
  5648 ;;  col2            1    0        unsigned char 
  5649 ;;  row2            1    0        unsigned char 
  5650 ;;  col1            1    0        unsigned char 
  5651 ;;  row1            1    0        unsigned char 
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  1    wreg      void 
  5654 ;; Registers used:
  5655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5661 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5663 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5664 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5665 ;;Total ram usage:        6 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    8
  5668 ;; This function calls:
  5669 ;;		_printf
  5670 ;;		_strcpy
  5671 ;;		_strlen
  5672 ;; This function is called by:
  5673 ;;		_update_string_data
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           	psect	text14
  5678  001A46                     __ptext14:
  5679                           	opt stack 0
  5680  001A46                     _copy_data:
  5681                           	opt stack 19
  5682                           
  5683                           ;clcd.c: 122: char row1, col1, row2, col2;
  5684                           ;clcd.c: 123: clcd_str_data->uid = data->uid;
  5685                           
  5686                           ;incstack = 0
  5687  001A46  C038  FFD9         	movff	copy_data@data,fsr2l
  5688  001A4A  C039  FFDA         	movff	copy_data@data+1,fsr2h
  5689  001A4E  50DF               	movf	indf2,w,c
  5690  001A50  6E3A               	movwf	??_copy_data& (0+255),c
  5691  001A52  C036  FFD9         	movff	copy_data@clcd_str_data,fsr2l
  5692  001A56  C037  FFDA         	movff	copy_data@clcd_str_data+1,fsr2h
  5693  001A5A  50DF               	movf	indf2,w,c
  5694  001A5C  183A               	xorwf	??_copy_data,w,c
  5695  001A5E  0B80               	andlw	-128
  5696  001A60  183A               	xorwf	??_copy_data,w,c
  5697  001A62  6EDF               	movwf	indf2,c
  5698                           
  5699                           ;clcd.c: 124: strcpy(clcd_str_data->string, data->data);
  5700  001A64  0E01               	movlw	1
  5701  001A66  2436               	addwf	copy_data@clcd_str_data,w,c
  5702  001A68  6E10               	movwf	strcpy@to,c
  5703  001A6A  0E00               	movlw	0
  5704  001A6C  2037               	addwfc	copy_data@clcd_str_data+1,w,c
  5705  001A6E  6E11               	movwf	strcpy@to+1,c
  5706  001A70  0E01               	movlw	1
  5707  001A72  2438               	addwf	copy_data@data,w,c
  5708  001A74  6E12               	movwf	strcpy@from,c
  5709  001A76  0E00               	movlw	0
  5710  001A78  2039               	addwfc	copy_data@data+1,w,c
  5711  001A7A  6E13               	movwf	strcpy@from+1,c
  5712  001A7C  EC1F  F019         	call	_strcpy	;wreg free
  5713                           
  5714                           ;clcd.c: 125: clcd_str_data->strlen = strlen(clcd_str_data->string);
  5715  001A80  0E01               	movlw	1
  5716  001A82  2436               	addwf	copy_data@clcd_str_data,w,c
  5717  001A84  6E1E               	movwf	strlen@s,c
  5718  001A86  0E00               	movlw	0
  5719  001A88  2037               	addwfc	copy_data@clcd_str_data+1,w,c
  5720  001A8A  6E1F               	movwf	strlen@s+1,c
  5721  001A8C  EC0D  F018         	call	_strlen	;wreg free
  5722  001A90  EE20 F029          	lfsr	2,41
  5723  001A94  5036               	movf	copy_data@clcd_str_data,w,c
  5724  001A96  26D9               	addwf	fsr2l,f,c
  5725  001A98  5037               	movf	copy_data@clcd_str_data+1,w,c
  5726  001A9A  22DA               	addwfc	fsr2h,f,c
  5727  001A9C  50DF               	movf	indf2,w,c
  5728  001A9E  181E               	xorwf	?_strlen,w,c
  5729  001AA0  0B80               	andlw	-128
  5730  001AA2  181E               	xorwf	?_strlen,w,c
  5731  001AA4  6EDF               	movwf	indf2,c
  5732                           
  5733                           ;clcd.c: 126: clcd_str_data->start_row = data->start_row;
  5734  001AA6  EE20 F02A          	lfsr	2,42
  5735  001AAA  5038               	movf	copy_data@data,w,c
  5736  001AAC  26D9               	addwf	fsr2l,f,c
  5737  001AAE  5039               	movf	copy_data@data+1,w,c
  5738  001AB0  22DA               	addwfc	fsr2h,f,c
  5739  001AB2  50DF               	movf	indf2,w,c
  5740  001AB4  6E3A               	movwf	??_copy_data& (0+255),c
  5741  001AB6  EE20 F02A          	lfsr	2,42
  5742  001ABA  5036               	movf	copy_data@clcd_str_data,w,c
  5743  001ABC  26D9               	addwf	fsr2l,f,c
  5744  001ABE  5037               	movf	copy_data@clcd_str_data+1,w,c
  5745  001AC0  22DA               	addwfc	fsr2h,f,c
  5746  001AC2  50DF               	movf	indf2,w,c
  5747  001AC4  183A               	xorwf	??_copy_data,w,c
  5748  001AC6  0B80               	andlw	-128
  5749  001AC8  183A               	xorwf	??_copy_data,w,c
  5750  001ACA  6EDF               	movwf	indf2,c
  5751                           
  5752                           ;clcd.c: 127: clcd_str_data->start_col = data->start_col;
  5753  001ACC  EE20 F02B          	lfsr	2,43
  5754  001AD0  5038               	movf	copy_data@data,w,c
  5755  001AD2  26D9               	addwf	fsr2l,f,c
  5756  001AD4  5039               	movf	copy_data@data+1,w,c
  5757  001AD6  22DA               	addwfc	fsr2h,f,c
  5758  001AD8  50DF               	movf	indf2,w,c
  5759  001ADA  6E3A               	movwf	??_copy_data& (0+255),c
  5760  001ADC  EE20 F02B          	lfsr	2,43
  5761  001AE0  5036               	movf	copy_data@clcd_str_data,w,c
  5762  001AE2  26D9               	addwf	fsr2l,f,c
  5763  001AE4  5037               	movf	copy_data@clcd_str_data+1,w,c
  5764  001AE6  22DA               	addwfc	fsr2h,f,c
  5765  001AE8  50DF               	movf	indf2,w,c
  5766  001AEA  183A               	xorwf	??_copy_data,w,c
  5767  001AEC  0B80               	andlw	-128
  5768  001AEE  183A               	xorwf	??_copy_data,w,c
  5769  001AF0  6EDF               	movwf	indf2,c
  5770                           
  5771                           ;clcd.c: 128: clcd_str_data->end_row = data->end_row;
  5772  001AF2  EE20 F02C          	lfsr	2,44
  5773  001AF6  5038               	movf	copy_data@data,w,c
  5774  001AF8  26D9               	addwf	fsr2l,f,c
  5775  001AFA  5039               	movf	copy_data@data+1,w,c
  5776  001AFC  22DA               	addwfc	fsr2h,f,c
  5777  001AFE  50DF               	movf	indf2,w,c
  5778  001B00  6E3A               	movwf	??_copy_data& (0+255),c
  5779  001B02  EE20 F02D          	lfsr	2,45
  5780  001B06  5036               	movf	copy_data@clcd_str_data,w,c
  5781  001B08  26D9               	addwf	fsr2l,f,c
  5782  001B0A  5037               	movf	copy_data@clcd_str_data+1,w,c
  5783  001B0C  22DA               	addwfc	fsr2h,f,c
  5784  001B0E  50DF               	movf	indf2,w,c
  5785  001B10  183A               	xorwf	??_copy_data,w,c
  5786  001B12  0B80               	andlw	-128
  5787  001B14  183A               	xorwf	??_copy_data,w,c
  5788  001B16  6EDF               	movwf	indf2,c
  5789                           
  5790                           ;clcd.c: 129: clcd_str_data->end_col = data->end_col;
  5791  001B18  EE20 F02D          	lfsr	2,45
  5792  001B1C  5038               	movf	copy_data@data,w,c
  5793  001B1E  26D9               	addwf	fsr2l,f,c
  5794  001B20  5039               	movf	copy_data@data+1,w,c
  5795  001B22  22DA               	addwfc	fsr2h,f,c
  5796  001B24  50DF               	movf	indf2,w,c
  5797  001B26  6E3A               	movwf	??_copy_data& (0+255),c
  5798  001B28  EE20 F02E          	lfsr	2,46
  5799  001B2C  5036               	movf	copy_data@clcd_str_data,w,c
  5800  001B2E  26D9               	addwf	fsr2l,f,c
  5801  001B30  5037               	movf	copy_data@clcd_str_data+1,w,c
  5802  001B32  22DA               	addwfc	fsr2h,f,c
  5803  001B34  50DF               	movf	indf2,w,c
  5804  001B36  183A               	xorwf	??_copy_data,w,c
  5805  001B38  0B80               	andlw	-128
  5806  001B3A  183A               	xorwf	??_copy_data,w,c
  5807  001B3C  6EDF               	movwf	indf2,c
  5808                           
  5809                           ;clcd.c: 130: clcd_str_data->start_point = (clcd_str_data->start_row * clcd_config_data.
      +                          clcd_max_col) + clcd_str_data->start_col;
  5810  001B3E  EE20 F02B          	lfsr	2,43
  5811  001B42  5036               	movf	copy_data@clcd_str_data,w,c
  5812  001B44  26D9               	addwf	fsr2l,f,c
  5813  001B46  5037               	movf	copy_data@clcd_str_data+1,w,c
  5814  001B48  22DA               	addwfc	fsr2h,f,c
  5815  001B4A  50DF               	movf	indf2,w,c
  5816  001B4C  0B7F               	andlw	127
  5817  001B4E  6E3A               	movwf	??_copy_data& (0+255),c
  5818  001B50  EE20 F02A          	lfsr	2,42
  5819  001B54  5036               	movf	copy_data@clcd_str_data,w,c
  5820  001B56  26D9               	addwf	fsr2l,f,c
  5821  001B58  5037               	movf	copy_data@clcd_str_data+1,w,c
  5822  001B5A  22DA               	addwfc	fsr2h,f,c
  5823  001B5C  50DF               	movf	indf2,w,c
  5824  001B5E  0B7F               	andlw	127
  5825  001B60  024B               	mulwf	_clcd_config_data+2,c
  5826  001B62  50F3               	movf	prodl,w,c
  5827  001B64  243A               	addwf	??_copy_data,w,c
  5828  001B66  6E3B               	movwf	(??_copy_data+1)& (0+255),c
  5829  001B68  EE20 F02C          	lfsr	2,44
  5830  001B6C  5036               	movf	copy_data@clcd_str_data,w,c
  5831  001B6E  26D9               	addwf	fsr2l,f,c
  5832  001B70  5037               	movf	copy_data@clcd_str_data+1,w,c
  5833  001B72  22DA               	addwfc	fsr2h,f,c
  5834  001B74  50DF               	movf	indf2,w,c
  5835  001B76  183B               	xorwf	??_copy_data+1,w,c
  5836  001B78  0B80               	andlw	-128
  5837  001B7A  183B               	xorwf	??_copy_data+1,w,c
  5838  001B7C  6EDF               	movwf	indf2,c
  5839                           
  5840                           ;clcd.c: 131: clcd_str_data->end_point = (clcd_str_data->end_row * clcd_config_data.clcd
      +                          _max_col) + clcd_str_data->end_col;
  5841  001B7E  EE20 F02E          	lfsr	2,46
  5842  001B82  5036               	movf	copy_data@clcd_str_data,w,c
  5843  001B84  26D9               	addwf	fsr2l,f,c
  5844  001B86  5037               	movf	copy_data@clcd_str_data+1,w,c
  5845  001B88  22DA               	addwfc	fsr2h,f,c
  5846  001B8A  50DF               	movf	indf2,w,c
  5847  001B8C  0B7F               	andlw	127
  5848  001B8E  6E3A               	movwf	??_copy_data& (0+255),c
  5849  001B90  EE20 F02D          	lfsr	2,45
  5850  001B94  5036               	movf	copy_data@clcd_str_data,w,c
  5851  001B96  26D9               	addwf	fsr2l,f,c
  5852  001B98  5037               	movf	copy_data@clcd_str_data+1,w,c
  5853  001B9A  22DA               	addwfc	fsr2h,f,c
  5854  001B9C  50DF               	movf	indf2,w,c
  5855  001B9E  0B7F               	andlw	127
  5856  001BA0  024B               	mulwf	_clcd_config_data+2,c
  5857  001BA2  50F3               	movf	prodl,w,c
  5858  001BA4  243A               	addwf	??_copy_data,w,c
  5859  001BA6  6E3B               	movwf	(??_copy_data+1)& (0+255),c
  5860  001BA8  EE20 F02F          	lfsr	2,47
  5861  001BAC  5036               	movf	copy_data@clcd_str_data,w,c
  5862  001BAE  26D9               	addwf	fsr2l,f,c
  5863  001BB0  5037               	movf	copy_data@clcd_str_data+1,w,c
  5864  001BB2  22DA               	addwfc	fsr2h,f,c
  5865  001BB4  50DF               	movf	indf2,w,c
  5866  001BB6  183B               	xorwf	??_copy_data+1,w,c
  5867  001BB8  0B80               	andlw	-128
  5868  001BBA  183B               	xorwf	??_copy_data+1,w,c
  5869  001BBC  6EDF               	movwf	indf2,c
  5870                           
  5871                           ;clcd.c: 132: clcd_str_data->direction = data->scroll;
  5872  001BBE  EE20 F02F          	lfsr	2,47
  5873  001BC2  5038               	movf	copy_data@data,w,c
  5874  001BC4  26D9               	addwf	fsr2l,f,c
  5875  001BC6  5039               	movf	copy_data@data+1,w,c
  5876  001BC8  22DA               	addwfc	fsr2h,f,c
  5877  001BCA  50DF               	movf	indf2,w,c
  5878  001BCC  6E3A               	movwf	??_copy_data& (0+255),c
  5879  001BCE  EE20 F030          	lfsr	2,48
  5880  001BD2  5036               	movf	copy_data@clcd_str_data,w,c
  5881  001BD4  26D9               	addwf	fsr2l,f,c
  5882  001BD6  5037               	movf	copy_data@clcd_str_data+1,w,c
  5883  001BD8  22DA               	addwfc	fsr2h,f,c
  5884  001BDA  50DF               	movf	indf2,w,c
  5885  001BDC  183A               	xorwf	??_copy_data,w,c
  5886  001BDE  0BF8               	andlw	-8
  5887  001BE0  183A               	xorwf	??_copy_data,w,c
  5888  001BE2  6EDF               	movwf	indf2,c
  5889                           
  5890                           ;clcd.c: 133: clcd_str_data->display_char_count = clcd_str_data->end_point - clcd_str_da
      +                          ta->start_point;
  5891  001BE4  EE20 F031          	lfsr	2,49
  5892  001BE8  5036               	movf	copy_data@clcd_str_data,w,c
  5893  001BEA  26D9               	addwf	fsr2l,f,c
  5894  001BEC  5037               	movf	copy_data@clcd_str_data+1,w,c
  5895  001BEE  22DA               	addwfc	fsr2h,f,c
  5896  001BF0  EE10 F02F          	lfsr	1,47
  5897  001BF4  5036               	movf	copy_data@clcd_str_data,w,c
  5898  001BF6  26E1               	addwf	fsr1l,f,c
  5899  001BF8  5037               	movf	copy_data@clcd_str_data+1,w,c
  5900  001BFA  22E2               	addwfc	fsr1h,f,c
  5901  001BFC  50E7               	movf	indf1,w,c
  5902  001BFE  0B7F               	andlw	127
  5903  001C00  6E3A               	movwf	??_copy_data& (0+255),c
  5904  001C02  EE10 F02C          	lfsr	1,44
  5905  001C06  5036               	movf	copy_data@clcd_str_data,w,c
  5906  001C08  26E1               	addwf	fsr1l,f,c
  5907  001C0A  5037               	movf	copy_data@clcd_str_data+1,w,c
  5908  001C0C  22E2               	addwfc	fsr1h,f,c
  5909  001C0E  50E7               	movf	indf1,w,c
  5910  001C10  0B7F               	andlw	127
  5911  001C12  0800               	sublw	0
  5912  001C14  243A               	addwf	??_copy_data,w,c
  5913  001C16  6EDF               	movwf	indf2,c
  5914                           
  5915                           ;clcd.c: 134: printf("display_char_count = %d\r\n", clcd_str_data->display_char_count);
  5916  001C18  0E83               	movlw	low STR_6
  5917  001C1A  6E24               	movwf	printf@f,c
  5918  001C1C  0EFD               	movlw	high STR_6
  5919  001C1E  6E25               	movwf	printf@f+1,c
  5920  001C20  EE20 F031          	lfsr	2,49
  5921  001C24  5036               	movf	copy_data@clcd_str_data,w,c
  5922  001C26  26D9               	addwf	fsr2l,f,c
  5923  001C28  5037               	movf	copy_data@clcd_str_data+1,w,c
  5924  001C2A  22DA               	addwfc	fsr2h,f,c
  5925  001C2C  50DF               	movf	indf2,w,c
  5926  001C2E  6E3A               	movwf	??_copy_data& (0+255),c
  5927  001C30  503A               	movf	??_copy_data,w,c
  5928  001C32  6E26               	movwf	?_printf+2,c
  5929  001C34  6A27               	clrf	?_printf+3,c
  5930  001C36  EC0F  F00F         	call	_printf	;wreg free
  5931  001C3A  0012               	return		;funcret
  5932  001C3C                     __end_of_copy_data:
  5933                           	opt stack 0
  5934                           tblptru	equ	0xFF8
  5935                           tblptrh	equ	0xFF7
  5936                           tblptrl	equ	0xFF6
  5937                           tablat	equ	0xFF5
  5938                           prodh	equ	0xFF4
  5939                           prodl	equ	0xFF3
  5940                           intcon	equ	0xFF2
  5941                           postinc0	equ	0xFEE
  5942                           wreg	equ	0xFE8
  5943                           indf1	equ	0xFE7
  5944                           postdec1	equ	0xFE5
  5945                           fsr1h	equ	0xFE2
  5946                           fsr1l	equ	0xFE1
  5947                           indf2	equ	0xFDF
  5948                           postinc2	equ	0xFDE
  5949                           fsr2h	equ	0xFDA
  5950                           fsr2l	equ	0xFD9
  5951                           status	equ	0xFD8
  5952                           
  5953 ;; *************** function _conflict_check *****************
  5954 ;; Defined at:
  5955 ;;		line 137 in file "clcd.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  exist_uid_id    1    wreg     unsigned char 
  5958 ;;  new_start_po    1   53[COMRAM] unsigned char 
  5959 ;;  new_end_poin    1   54[COMRAM] unsigned char 
  5960 ;; Auto vars:     Size  Location     Type
  5961 ;;  exist_uid_id    1   58[COMRAM] unsigned char 
  5962 ;;  i               2   60[COMRAM] int 
  5963 ;;  conflict        1   59[COMRAM] unsigned char 
  5964 ;; Return value:  Size  Location     Type
  5965 ;;                  1    wreg      unsigned char 
  5966 ;; Registers used:
  5967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5968 ;; Tracked objects:
  5969 ;;		On entry : 0/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5973 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5974 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5975 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5976 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;Total ram usage:        9 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:    8
  5980 ;; This function calls:
  5981 ;;		___wmul
  5982 ;;		_printf
  5983 ;; This function is called by:
  5984 ;;		_update_string_data
  5985 ;; This function uses a non-reentrant model
  5986 ;;
  5987                           
  5988                           	psect	text15
  5989  001782                     __ptext15:
  5990                           	opt stack 0
  5991  001782                     _conflict_check:
  5992                           	opt stack 19
  5993                           
  5994                           ;incstack = 0
  5995                           ;conflict_check@exist_uid_idx stored from wreg
  5996  001782  6E3B               	movwf	conflict_check@exist_uid_idx,c
  5997                           
  5998                           ;clcd.c: 139: int i = 0;
  5999  001784  0E00               	movlw	0
  6000  001786  6E3E               	movwf	conflict_check@i+1,c
  6001  001788  0E00               	movlw	0
  6002  00178A  6E3D               	movwf	conflict_check@i,c
  6003                           
  6004                           ;clcd.c: 140: bool conflict = 0;
  6005  00178C  0E00               	movlw	0
  6006  00178E  6E3C               	movwf	conflict_check@conflict,c
  6007                           
  6008                           ;clcd.c: 142: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  6009  001790  0E00               	movlw	0
  6010  001792  6E3E               	movwf	conflict_check@i+1,c
  6011  001794  0E00               	movlw	0
  6012  001796  6E3D               	movwf	conflict_check@i,c
  6013  001798  D10D               	goto	l6027
  6014  00179A                     l5985:
  6015                           
  6016                           ;clcd.c: 143: if(exist_uid_idx != i && clcd_display_string_details[i].uid !=0)
  6017  00179A  503B               	movf	conflict_check@exist_uid_idx,w,c
  6018  00179C  6E38               	movwf	??_conflict_check& (0+255),c
  6019  00179E  6A39               	clrf	(??_conflict_check+1)& (0+255),c
  6020  0017A0  503D               	movf	conflict_check@i,w,c
  6021  0017A2  1838               	xorwf	??_conflict_check,w,c
  6022  0017A4  E104               	bnz	u5770
  6023  0017A6  503E               	movf	conflict_check@i+1,w,c
  6024  0017A8  1839               	xorwf	??_conflict_check+1,w,c
  6025  0017AA  B4D8               	btfsc	status,2,c
  6026  0017AC  D101               	goto	l6025
  6027  0017AE                     u5770:
  6028  0017AE  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6029  0017B2  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6030  0017B6  0E00               	movlw	0
  6031  0017B8  6E1B               	movwf	___wmul@multiplicand+1,c
  6032  0017BA  0E36               	movlw	54
  6033  0017BC  6E1A               	movwf	___wmul@multiplicand,c
  6034  0017BE  EC8A  F01A         	call	___wmul	;wreg free
  6035  0017C2  0E96               	movlw	low _clcd_display_string_details
  6036  0017C4  2418               	addwf	?___wmul,w,c
  6037  0017C6  6ED9               	movwf	fsr2l,c
  6038  0017C8  0E02               	movlw	high _clcd_display_string_details
  6039  0017CA  2019               	addwfc	?___wmul+1,w,c
  6040  0017CC  6EDA               	movwf	fsr2h,c
  6041  0017CE  50DF               	movf	223,w,c
  6042  0017D0  0B7F               	andlw	127
  6043  0017D2  0900               	iorlw	0
  6044  0017D4  B4D8               	btfsc	status,2,c
  6045  0017D6  D0EC               	goto	l6025
  6046                           
  6047                           ;clcd.c: 144: {
  6048                           ;clcd.c: 145: if(new_start_point >= clcd_display_string_details[i].start_point && new_st
      +                          art_point <= clcd_display_string_details[i].end_point )
  6049  0017D8  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6050  0017DC  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6051  0017E0  0E00               	movlw	0
  6052  0017E2  6E1B               	movwf	___wmul@multiplicand+1,c
  6053  0017E4  0E36               	movlw	54
  6054  0017E6  6E1A               	movwf	___wmul@multiplicand,c
  6055  0017E8  EC8A  F01A         	call	___wmul	;wreg free
  6056  0017EC  0E2C               	movlw	44
  6057  0017EE  2618               	addwf	?___wmul,f,c
  6058  0017F0  0E00               	movlw	0
  6059  0017F2  2219               	addwfc	?___wmul+1,f,c
  6060  0017F4  0E96               	movlw	low _clcd_display_string_details
  6061  0017F6  2418               	addwf	?___wmul,w,c
  6062  0017F8  6ED9               	movwf	fsr2l,c
  6063  0017FA  0E02               	movlw	high _clcd_display_string_details
  6064  0017FC  2019               	addwfc	?___wmul+1,w,c
  6065  0017FE  6EDA               	movwf	fsr2h,c
  6066  001800  50DF               	movf	223,w,c
  6067  001802  0B7F               	andlw	127
  6068  001804  6E38               	movwf	??_conflict_check& (0+255),c
  6069  001806  5038               	movf	??_conflict_check,w,c
  6070  001808  5C36               	subwf	conflict_check@new_start_point,w,c
  6071  00180A  A0D8               	btfss	status,0,c
  6072  00180C  D033               	goto	l6001
  6073  00180E  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6074  001812  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6075  001816  0E00               	movlw	0
  6076  001818  6E1B               	movwf	___wmul@multiplicand+1,c
  6077  00181A  0E36               	movlw	54
  6078  00181C  6E1A               	movwf	___wmul@multiplicand,c
  6079  00181E  EC8A  F01A         	call	___wmul	;wreg free
  6080  001822  0E2F               	movlw	47
  6081  001824  2618               	addwf	?___wmul,f,c
  6082  001826  0E00               	movlw	0
  6083  001828  2219               	addwfc	?___wmul+1,f,c
  6084  00182A  0E96               	movlw	low _clcd_display_string_details
  6085  00182C  2418               	addwf	?___wmul,w,c
  6086  00182E  6ED9               	movwf	fsr2l,c
  6087  001830  0E02               	movlw	high _clcd_display_string_details
  6088  001832  2019               	addwfc	?___wmul+1,w,c
  6089  001834  6EDA               	movwf	fsr2h,c
  6090  001836  50DF               	movf	223,w,c
  6091  001838  0B7F               	andlw	127
  6092  00183A  6E38               	movwf	??_conflict_check& (0+255),c
  6093  00183C  5036               	movf	conflict_check@new_start_point,w,c
  6094  00183E  5C38               	subwf	??_conflict_check,w,c
  6095  001840  A0D8               	btfss	status,0,c
  6096  001842  D018               	goto	l6001
  6097                           
  6098                           ;clcd.c: 146: {
  6099                           ;clcd.c: 147: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6100  001844  5042               	movf	_conflict_data_count,w,c
  6101  001846  0D01               	mullw	1
  6102  001848  0EB7               	movlw	low _conflict_arr
  6103  00184A  24F3               	addwf	prodl,w,c
  6104  00184C  6ED9               	movwf	fsr2l,c
  6105  00184E  0E00               	movlw	high _conflict_arr
  6106  001850  20F4               	addwfc	prodh,w,c
  6107  001852  6EDA               	movwf	fsr2h,c
  6108  001854  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6109  001858  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6110  00185C  0E00               	movlw	0
  6111  00185E  6E1B               	movwf	___wmul@multiplicand+1,c
  6112  001860  0E36               	movlw	54
  6113  001862  6E1A               	movwf	___wmul@multiplicand,c
  6114  001864  EC8A  F01A         	call	___wmul	;wreg free
  6115  001868  D096               	goto	L4
  6116  00186A                     l5995:
  6117  00186A  2A42               	incf	_conflict_data_count,f,c
  6118  00186C  D09E               	goto	L5
  6119  00186E                     l5999:
  6120                           
  6121                           ;clcd.c: 149: conflict = 1;
  6122  00186E  0E01               	movlw	1
  6123  001870  6E3C               	movwf	conflict_check@conflict,c
  6124                           
  6125                           ;clcd.c: 150: continue;
  6126  001872  D09E               	goto	l6025
  6127  001874                     l6001:
  6128                           
  6129                           ;clcd.c: 151: }
  6130                           ;clcd.c: 152: if(new_end_point >= clcd_display_string_details[i].start_point && new_end_
      +                          point >= clcd_display_string_details[i].end_point)
  6131  001874  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6132  001878  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6133  00187C  0E00               	movlw	0
  6134  00187E  6E1B               	movwf	___wmul@multiplicand+1,c
  6135  001880  0E36               	movlw	54
  6136  001882  6E1A               	movwf	___wmul@multiplicand,c
  6137  001884  EC8A  F01A         	call	___wmul	;wreg free
  6138  001888  0E2C               	movlw	44
  6139  00188A  2618               	addwf	?___wmul,f,c
  6140  00188C  0E00               	movlw	0
  6141  00188E  2219               	addwfc	?___wmul+1,f,c
  6142  001890  0E96               	movlw	low _clcd_display_string_details
  6143  001892  2418               	addwf	?___wmul,w,c
  6144  001894  6ED9               	movwf	fsr2l,c
  6145  001896  0E02               	movlw	high _clcd_display_string_details
  6146  001898  2019               	addwfc	?___wmul+1,w,c
  6147  00189A  6EDA               	movwf	fsr2h,c
  6148  00189C  50DF               	movf	223,w,c
  6149  00189E  0B7F               	andlw	127
  6150  0018A0  6E38               	movwf	??_conflict_check& (0+255),c
  6151  0018A2  5038               	movf	??_conflict_check,w,c
  6152  0018A4  5C37               	subwf	conflict_check@new_end_point,w,c
  6153  0018A6  A0D8               	btfss	status,0,c
  6154  0018A8  D02E               	goto	l6013
  6155  0018AA  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6156  0018AE  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6157  0018B2  0E00               	movlw	0
  6158  0018B4  6E1B               	movwf	___wmul@multiplicand+1,c
  6159  0018B6  0E36               	movlw	54
  6160  0018B8  6E1A               	movwf	___wmul@multiplicand,c
  6161  0018BA  EC8A  F01A         	call	___wmul	;wreg free
  6162  0018BE  0E2F               	movlw	47
  6163  0018C0  2618               	addwf	?___wmul,f,c
  6164  0018C2  0E00               	movlw	0
  6165  0018C4  2219               	addwfc	?___wmul+1,f,c
  6166  0018C6  0E96               	movlw	low _clcd_display_string_details
  6167  0018C8  2418               	addwf	?___wmul,w,c
  6168  0018CA  6ED9               	movwf	fsr2l,c
  6169  0018CC  0E02               	movlw	high _clcd_display_string_details
  6170  0018CE  2019               	addwfc	?___wmul+1,w,c
  6171  0018D0  6EDA               	movwf	fsr2h,c
  6172  0018D2  50DF               	movf	223,w,c
  6173  0018D4  0B7F               	andlw	127
  6174  0018D6  6E38               	movwf	??_conflict_check& (0+255),c
  6175  0018D8  5038               	movf	??_conflict_check,w,c
  6176  0018DA  5C37               	subwf	conflict_check@new_end_point,w,c
  6177  0018DC  A0D8               	btfss	status,0,c
  6178  0018DE  D013               	goto	l6013
  6179                           
  6180                           ;clcd.c: 153: {
  6181                           ;clcd.c: 154: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6182  0018E0  5042               	movf	_conflict_data_count,w,c
  6183  0018E2  0D01               	mullw	1
  6184  0018E4  0EB7               	movlw	low _conflict_arr
  6185  0018E6  24F3               	addwf	prodl,w,c
  6186  0018E8  6ED9               	movwf	fsr2l,c
  6187  0018EA  0E00               	movlw	high _conflict_arr
  6188  0018EC  20F4               	addwfc	prodh,w,c
  6189  0018EE  6EDA               	movwf	fsr2h,c
  6190  0018F0  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6191  0018F4  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6192  0018F8  0E00               	movlw	0
  6193  0018FA  6E1B               	movwf	___wmul@multiplicand+1,c
  6194  0018FC  0E36               	movlw	54
  6195  0018FE  6E1A               	movwf	___wmul@multiplicand,c
  6196  001900  EC8A  F01A         	call	___wmul	;wreg free
  6197  001904  D048               	goto	L4
  6198  001906                     l6013:
  6199                           
  6200                           ;clcd.c: 157: }
  6201                           ;clcd.c: 158: if(new_start_point <= clcd_display_string_details[i].start_point && new_en
      +                          d_point >= clcd_display_string_details[i].end_point){
  6202  001906  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6203  00190A  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6204  00190E  0E00               	movlw	0
  6205  001910  6E1B               	movwf	___wmul@multiplicand+1,c
  6206  001912  0E36               	movlw	54
  6207  001914  6E1A               	movwf	___wmul@multiplicand,c
  6208  001916  EC8A  F01A         	call	___wmul	;wreg free
  6209  00191A  0E2C               	movlw	44
  6210  00191C  2618               	addwf	?___wmul,f,c
  6211  00191E  0E00               	movlw	0
  6212  001920  2219               	addwfc	?___wmul+1,f,c
  6213  001922  0E96               	movlw	low _clcd_display_string_details
  6214  001924  2418               	addwf	?___wmul,w,c
  6215  001926  6ED9               	movwf	fsr2l,c
  6216  001928  0E02               	movlw	high _clcd_display_string_details
  6217  00192A  2019               	addwfc	?___wmul+1,w,c
  6218  00192C  6EDA               	movwf	fsr2h,c
  6219  00192E  50DF               	movf	223,w,c
  6220  001930  0B7F               	andlw	127
  6221  001932  6E38               	movwf	??_conflict_check& (0+255),c
  6222  001934  5036               	movf	conflict_check@new_start_point,w,c
  6223  001936  5C38               	subwf	??_conflict_check,w,c
  6224  001938  A0D8               	btfss	status,0,c
  6225  00193A  D03A               	goto	l6025
  6226  00193C  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6227  001940  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6228  001944  0E00               	movlw	0
  6229  001946  6E1B               	movwf	___wmul@multiplicand+1,c
  6230  001948  0E36               	movlw	54
  6231  00194A  6E1A               	movwf	___wmul@multiplicand,c
  6232  00194C  EC8A  F01A         	call	___wmul	;wreg free
  6233  001950  0E2F               	movlw	47
  6234  001952  2618               	addwf	?___wmul,f,c
  6235  001954  0E00               	movlw	0
  6236  001956  2219               	addwfc	?___wmul+1,f,c
  6237  001958  0E96               	movlw	low _clcd_display_string_details
  6238  00195A  2418               	addwf	?___wmul,w,c
  6239  00195C  6ED9               	movwf	fsr2l,c
  6240  00195E  0E02               	movlw	high _clcd_display_string_details
  6241  001960  2019               	addwfc	?___wmul+1,w,c
  6242  001962  6EDA               	movwf	fsr2h,c
  6243  001964  50DF               	movf	223,w,c
  6244  001966  0B7F               	andlw	127
  6245  001968  6E38               	movwf	??_conflict_check& (0+255),c
  6246  00196A  5038               	movf	??_conflict_check,w,c
  6247  00196C  5C37               	subwf	conflict_check@new_end_point,w,c
  6248  00196E  A0D8               	btfss	status,0,c
  6249  001970  D01F               	goto	l6025
  6250                           
  6251                           ;clcd.c: 159: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6252  001972  5042               	movf	_conflict_data_count,w,c
  6253  001974  0D01               	mullw	1
  6254  001976  0EB7               	movlw	low _conflict_arr
  6255  001978  24F3               	addwf	prodl,w,c
  6256  00197A  6ED9               	movwf	fsr2l,c
  6257  00197C  0E00               	movlw	high _conflict_arr
  6258  00197E  20F4               	addwfc	prodh,w,c
  6259  001980  6EDA               	movwf	fsr2h,c
  6260  001982  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6261  001986  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6262  00198A  0E00               	movlw	0
  6263  00198C  6E1B               	movwf	___wmul@multiplicand+1,c
  6264  00198E  0E36               	movlw	54
  6265  001990  6E1A               	movwf	___wmul@multiplicand,c
  6266  001992  EC8A  F01A         	call	___wmul	;wreg free
  6267  001996                     L4:
  6268  001996  0E96               	movlw	low _clcd_display_string_details
  6269  001998  2418               	addwf	?___wmul,w,c
  6270  00199A  6EE1               	movwf	fsr1l,c
  6271  00199C  0E02               	movlw	high _clcd_display_string_details
  6272  00199E  2019               	addwfc	?___wmul+1,w,c
  6273  0019A0  6EE2               	movwf	fsr1h,c
  6274  0019A2  50E7               	movf	231,w,c
  6275  0019A4  0B7F               	andlw	127
  6276  0019A6  6EDF               	movwf	indf2,c
  6277  0019A8  D760               	goto	l5995
  6278  0019AA                     L5:
  6279                           
  6280                           ;clcd.c: 160: i++;conflict = 1;
  6281  0019AA  4A3D               	infsnz	conflict_check@i,f,c
  6282  0019AC  2A3E               	incf	conflict_check@i+1,f,c
  6283  0019AE  D75F               	goto	l5999
  6284  0019B0                     l6025:
  6285  0019B0  4A3D               	infsnz	conflict_check@i,f,c
  6286  0019B2  2A3E               	incf	conflict_check@i+1,f,c
  6287  0019B4                     l6027:
  6288  0019B4  504D               	movf	_clcd_config_data+4,w,c
  6289  0019B6  6E38               	movwf	??_conflict_check& (0+255),c
  6290  0019B8  6A39               	clrf	(??_conflict_check+1)& (0+255),c
  6291  0019BA  5038               	movf	??_conflict_check,w,c
  6292  0019BC  5C3D               	subwf	conflict_check@i,w,c
  6293  0019BE  503E               	movf	conflict_check@i+1,w,c
  6294  0019C0  0A80               	xorlw	128
  6295  0019C2  6E3A               	movwf	(??_conflict_check+2)& (0+255),c
  6296  0019C4  5039               	movf	??_conflict_check+1,w,c
  6297  0019C6  0A80               	xorlw	128
  6298  0019C8  583A               	subwfb	(??_conflict_check+2)& (0+255),w,c
  6299  0019CA  A0D8               	btfss	status,0,c
  6300  0019CC  D6E6               	goto	l5985
  6301                           
  6302                           ;clcd.c: 162: }
  6303                           ;clcd.c: 163: }
  6304                           ;clcd.c: 164: }
  6305                           ;clcd.c: 166: printf("conflict: uid\r\n");
  6306  0019CE  0E4D               	movlw	low STR_7
  6307  0019D0  6E24               	movwf	printf@f,c
  6308  0019D2  0EFE               	movlw	high STR_7
  6309  0019D4  6E25               	movwf	printf@f+1,c
  6310  0019D6  EC0F  F00F         	call	_printf	;wreg free
  6311                           
  6312                           ;clcd.c: 167: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  6313  0019DA  0E00               	movlw	0
  6314  0019DC  6E3E               	movwf	conflict_check@i+1,c
  6315  0019DE  0E00               	movlw	0
  6316  0019E0  6E3D               	movwf	conflict_check@i,c
  6317  0019E2  D01C               	goto	l6039
  6318  0019E4                     l6033:
  6319                           
  6320                           ;clcd.c: 168: if(conflict_arr[i]!=0)
  6321  0019E4  0EB7               	movlw	low _conflict_arr
  6322  0019E6  243D               	addwf	conflict_check@i,w,c
  6323  0019E8  6ED9               	movwf	fsr2l,c
  6324  0019EA  0E00               	movlw	high _conflict_arr
  6325  0019EC  203E               	addwfc	conflict_check@i+1,w,c
  6326  0019EE  6EDA               	movwf	fsr2h,c
  6327  0019F0  50DF               	movf	indf2,w,c
  6328  0019F2  B4D8               	btfsc	status,2,c
  6329  0019F4  D011               	goto	l6037
  6330                           
  6331                           ;clcd.c: 169: printf("%c, ",conflict_arr[i]);
  6332  0019F6  0EEE               	movlw	low STR_8
  6333  0019F8  6E24               	movwf	printf@f,c
  6334  0019FA  0EFF               	movlw	high STR_8
  6335  0019FC  6E25               	movwf	printf@f+1,c
  6336  0019FE  0EB7               	movlw	low _conflict_arr
  6337  001A00  243D               	addwf	conflict_check@i,w,c
  6338  001A02  6ED9               	movwf	fsr2l,c
  6339  001A04  0E00               	movlw	high _conflict_arr
  6340  001A06  203E               	addwfc	conflict_check@i+1,w,c
  6341  001A08  6EDA               	movwf	fsr2h,c
  6342  001A0A  50DF               	movf	indf2,w,c
  6343  001A0C  6E38               	movwf	??_conflict_check& (0+255),c
  6344  001A0E  5038               	movf	??_conflict_check,w,c
  6345  001A10  6E26               	movwf	?_printf+2,c
  6346  001A12  6A27               	clrf	?_printf+3,c
  6347  001A14  EC0F  F00F         	call	_printf	;wreg free
  6348  001A18                     l6037:
  6349  001A18  4A3D               	infsnz	conflict_check@i,f,c
  6350  001A1A  2A3E               	incf	conflict_check@i+1,f,c
  6351  001A1C                     l6039:
  6352  001A1C  504D               	movf	_clcd_config_data+4,w,c
  6353  001A1E  6E38               	movwf	??_conflict_check& (0+255),c
  6354  001A20  6A39               	clrf	(??_conflict_check+1)& (0+255),c
  6355  001A22  5038               	movf	??_conflict_check,w,c
  6356  001A24  5C3D               	subwf	conflict_check@i,w,c
  6357  001A26  503E               	movf	conflict_check@i+1,w,c
  6358  001A28  0A80               	xorlw	128
  6359  001A2A  6E3A               	movwf	(??_conflict_check+2)& (0+255),c
  6360  001A2C  5039               	movf	??_conflict_check+1,w,c
  6361  001A2E  0A80               	xorlw	128
  6362  001A30  583A               	subwfb	(??_conflict_check+2)& (0+255),w,c
  6363  001A32  A0D8               	btfss	status,0,c
  6364  001A34  D7D7               	goto	l6033
  6365                           
  6366                           ;clcd.c: 170: }
  6367                           ;clcd.c: 171: printf("\r\n");
  6368  001A36  0EAD               	movlw	low (STR_57+9)
  6369  001A38  6E24               	movwf	printf@f,c
  6370  001A3A  0EFE               	movlw	high (STR_57+9)
  6371  001A3C  6E25               	movwf	printf@f+1,c
  6372  001A3E  EC0F  F00F         	call	_printf	;wreg free
  6373                           
  6374                           ;clcd.c: 172: return conflict;
  6375  001A42  503C               	movf	conflict_check@conflict,w,c
  6376  001A44  0012               	return	
  6377  001A46                     __end_of_conflict_check:
  6378                           	opt stack 0
  6379                           tblptru	equ	0xFF8
  6380                           tblptrh	equ	0xFF7
  6381                           tblptrl	equ	0xFF6
  6382                           tablat	equ	0xFF5
  6383                           prodh	equ	0xFF4
  6384                           prodl	equ	0xFF3
  6385                           intcon	equ	0xFF2
  6386                           postinc0	equ	0xFEE
  6387                           wreg	equ	0xFE8
  6388                           indf1	equ	0xFE7
  6389                           postdec1	equ	0xFE5
  6390                           fsr1h	equ	0xFE2
  6391                           fsr1l	equ	0xFE1
  6392                           indf2	equ	0xFDF
  6393                           postinc2	equ	0xFDE
  6394                           fsr2h	equ	0xFDA
  6395                           fsr2l	equ	0xFD9
  6396                           status	equ	0xFD8
  6397                           
  6398 ;; *************** function _strcmp *****************
  6399 ;; Defined at:
  6400 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  6401 ;; Parameters:    Size  Location     Type
  6402 ;;  s1              2   15[COMRAM] PTR const unsigned char 
  6403 ;;		 -> CMD(15), 
  6404 ;;  s2              2   17[COMRAM] PTR const unsigned char 
  6405 ;;		 -> STR_100(11), STR_97(11), STR_94(12), STR_91(10), 
  6406 ;;		 -> STR_86(10), STR_83(9), STR_79(8), STR_75(8), 
  6407 ;;		 -> STR_71(10), STR_69(4), 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  r               1   20[COMRAM] char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  2   15[COMRAM] int 
  6412 ;; Registers used:
  6413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6419 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;Total ram usage:        6 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    5
  6426 ;; This function calls:
  6427 ;;		Nothing
  6428 ;; This function is called by:
  6429 ;;		_reply_to_host
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           	psect	text16
  6434  003160                     __ptext16:
  6435                           	opt stack 0
  6436  003160                     _strcmp:
  6437                           	opt stack 23
  6438                           
  6439                           ;incstack = 0
  6440  003160  D004               	goto	l6463
  6441  003162                     l6461:
  6442  003162  4A10               	infsnz	strcmp@s1,f,c
  6443  003164  2A11               	incf	strcmp@s1+1,f,c
  6444  003166  4A12               	infsnz	strcmp@s2,f,c
  6445  003168  2A13               	incf	strcmp@s2+1,f,c
  6446  00316A                     l6463:
  6447  00316A  C010  FFD9         	movff	strcmp@s1,fsr2l
  6448  00316E  C011  FFDA         	movff	strcmp@s1+1,fsr2h
  6449  003172  50DF               	movf	indf2,w,c
  6450  003174  6E14               	movwf	??_strcmp& (0+255),c
  6451  003176  C012  FFF6         	movff	strcmp@s2,tblptrl
  6452  00317A  C013  FFF7         	movff	strcmp@s2+1,tblptrh
  6453  00317E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6454  00317E  6AF8               	clrf	tblptru,c
  6455  003180                     	endif
  6456  003180                     	if	0	;tblptru may be non-zero
  6457  003180                     	endif
  6458  003180  0008               	tblrd		*
  6459  003182  50F5               	movf	tablat,w,c
  6460  003184  0800               	sublw	0
  6461  003186  2414               	addwf	??_strcmp,w,c
  6462  003188  6E15               	movwf	strcmp@r,c
  6463  00318A  5015               	movf	strcmp@r,w,c
  6464  00318C  A4D8               	btfss	status,2,c
  6465  00318E  D007               	goto	l6467
  6466  003190  C010  FFD9         	movff	strcmp@s1,fsr2l
  6467  003194  C011  FFDA         	movff	strcmp@s1+1,fsr2h
  6468  003198  50DF               	movf	indf2,w,c
  6469  00319A  A4D8               	btfss	status,2,c
  6470  00319C  D7E2               	goto	l6461
  6471  00319E                     l6467:
  6472  00319E  5015               	movf	strcmp@r,w,c
  6473  0031A0  6E10               	movwf	?_strcmp,c
  6474  0031A2  6A11               	clrf	?_strcmp+1,c
  6475  0031A4  BE10               	btfsc	?_strcmp,7,c
  6476  0031A6  0611               	decf	?_strcmp+1,f,c
  6477  0031A8  0012               	return	
  6478  0031AA                     __end_of_strcmp:
  6479                           	opt stack 0
  6480                           tblptru	equ	0xFF8
  6481                           tblptrh	equ	0xFF7
  6482                           tblptrl	equ	0xFF6
  6483                           tablat	equ	0xFF5
  6484                           prodh	equ	0xFF4
  6485                           prodl	equ	0xFF3
  6486                           intcon	equ	0xFF2
  6487                           postinc0	equ	0xFEE
  6488                           wreg	equ	0xFE8
  6489                           indf1	equ	0xFE7
  6490                           postdec1	equ	0xFE5
  6491                           fsr1h	equ	0xFE2
  6492                           fsr1l	equ	0xFE1
  6493                           indf2	equ	0xFDF
  6494                           postinc2	equ	0xFDE
  6495                           fsr2h	equ	0xFDA
  6496                           fsr2l	equ	0xFD9
  6497                           status	equ	0xFD8
  6498                           
  6499 ;; *************** function _puts *****************
  6500 ;; Defined at:
  6501 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\puts.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;  s               2   19[COMRAM] PTR const unsigned char 
  6504 ;;		 -> STR_114(12), STR_113(12), STR_70(5), 
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;		None
  6507 ;; Return value:  Size  Location     Type
  6508 ;;                  2   19[COMRAM] int 
  6509 ;; Registers used:
  6510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6516 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;Total ram usage:        2 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    8
  6523 ;; This function calls:
  6524 ;;		_cputs
  6525 ;;		_putch
  6526 ;; This function is called by:
  6527 ;;		_reply_to_host
  6528 ;;		_cmd_consol_task
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text17
  6533  0036B0                     __ptext17:
  6534                           	opt stack 0
  6535  0036B0                     _puts:
  6536                           	opt stack 20
  6537                           
  6538                           ;incstack = 0
  6539  0036B0  C014  F012         	movff	puts@s,cputs@s
  6540  0036B4  C015  F013         	movff	puts@s+1,cputs@s+1
  6541  0036B8  EC47  F01A         	call	_cputs	;wreg free
  6542  0036BC  0E0A               	movlw	10
  6543  0036BE  ECBF  F01B         	call	_putch
  6544  0036C2  0012               	return		;funcret
  6545  0036C4                     __end_of_puts:
  6546                           	opt stack 0
  6547                           tblptru	equ	0xFF8
  6548                           tblptrh	equ	0xFF7
  6549                           tblptrl	equ	0xFF6
  6550                           tablat	equ	0xFF5
  6551                           prodh	equ	0xFF4
  6552                           prodl	equ	0xFF3
  6553                           intcon	equ	0xFF2
  6554                           postinc0	equ	0xFEE
  6555                           wreg	equ	0xFE8
  6556                           indf1	equ	0xFE7
  6557                           postdec1	equ	0xFE5
  6558                           fsr1h	equ	0xFE2
  6559                           fsr1l	equ	0xFE1
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           fsr2h	equ	0xFDA
  6563                           fsr2l	equ	0xFD9
  6564                           status	equ	0xFD8
  6565                           
  6566 ;; *************** function _cputs *****************
  6567 ;; Defined at:
  6568 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\cputs.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;  s               2   17[COMRAM] PTR const unsigned char 
  6571 ;;		 -> STR_114(12), STR_113(12), STR_70(5), 
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;		None
  6574 ;; Return value:  Size  Location     Type
  6575 ;;                  1    wreg      void 
  6576 ;; Registers used:
  6577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6583 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;Total ram usage:        2 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    7
  6590 ;; This function calls:
  6591 ;;		_putch
  6592 ;; This function is called by:
  6593 ;;		_puts
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           	psect	text18
  6598  00348E                     __ptext18:
  6599                           	opt stack 0
  6600  00348E                     _cputs:
  6601                           	opt stack 20
  6602                           
  6603                           ;incstack = 0
  6604  00348E  D00B               	goto	l6137
  6605  003490                     l6133:
  6606  003490  C012  FFF6         	movff	cputs@s,tblptrl
  6607  003494  C013  FFF7         	movff	cputs@s+1,tblptrh
  6608  003498                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6609  003498  6AF8               	clrf	tblptru,c
  6610  00349A                     	endif
  6611  00349A                     	if	0	;tblptru may be non-zero
  6612  00349A                     	endif
  6613  00349A  0008               	tblrd		*
  6614  00349C  50F5               	movf	tablat,w,c
  6615  00349E  ECBF  F01B         	call	_putch
  6616  0034A2  4A12               	infsnz	cputs@s,f,c
  6617  0034A4  2A13               	incf	cputs@s+1,f,c
  6618  0034A6                     l6137:
  6619  0034A6  C012  FFF6         	movff	cputs@s,tblptrl
  6620  0034AA  C013  FFF7         	movff	cputs@s+1,tblptrh
  6621  0034AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6622  0034AE  6AF8               	clrf	tblptru,c
  6623  0034B0                     	endif
  6624  0034B0                     	if	0	;tblptru may be non-zero
  6625  0034B0                     	endif
  6626  0034B0  0008               	tblrd		*
  6627  0034B2  50F5               	movf	tablat,w,c
  6628  0034B4  0900               	iorlw	0
  6629  0034B6  B4D8               	btfsc	status,2,c
  6630  0034B8  0012               	return	
  6631  0034BA  D7EA               	goto	l6133
  6632  0034BC                     __end_of_cputs:
  6633                           	opt stack 0
  6634                           tblptru	equ	0xFF8
  6635                           tblptrh	equ	0xFF7
  6636                           tblptrl	equ	0xFF6
  6637                           tablat	equ	0xFF5
  6638                           prodh	equ	0xFF4
  6639                           prodl	equ	0xFF3
  6640                           intcon	equ	0xFF2
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           indf1	equ	0xFE7
  6644                           postdec1	equ	0xFE5
  6645                           fsr1h	equ	0xFE2
  6646                           fsr1l	equ	0xFE1
  6647                           indf2	equ	0xFDF
  6648                           postinc2	equ	0xFDE
  6649                           fsr2h	equ	0xFDA
  6650                           fsr2l	equ	0xFD9
  6651                           status	equ	0xFD8
  6652                           
  6653 ;; *************** function _min_uid_range *****************
  6654 ;; Defined at:
  6655 ;;		line 88 in file "clcd.c"
  6656 ;; Parameters:    Size  Location     Type
  6657 ;;		None
  6658 ;; Auto vars:     Size  Location     Type
  6659 ;;		None
  6660 ;; Return value:  Size  Location     Type
  6661 ;;                  1    wreg      unsigned char 
  6662 ;; Registers used:
  6663 ;;		wreg, status,2
  6664 ;; Tracked objects:
  6665 ;;		On entry : 0/0
  6666 ;;		On exit  : 0/0
  6667 ;;		Unchanged: 0/0
  6668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6673 ;;Total ram usage:        0 bytes
  6674 ;; Hardware stack levels used:    1
  6675 ;; Hardware stack levels required when called:    5
  6676 ;; This function calls:
  6677 ;;		Nothing
  6678 ;; This function is called by:
  6679 ;;		_reply_to_host
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           	psect	text19
  6684  0036E4                     __ptext19:
  6685                           	opt stack 0
  6686  0036E4                     _min_uid_range:
  6687                           	opt stack 23
  6688                           
  6689                           ;clcd.c: 89: if (clcd_config_data.init_done == 0)
  6690                           
  6691                           ;incstack = 0
  6692  0036E4  5049               	movf	_clcd_config_data,w,c
  6693  0036E6  A4D8               	btfss	status,2,c
  6694  0036E8  D002               	goto	l6241
  6695                           
  6696                           ;clcd.c: 90: return 0;
  6697  0036EA  0E00               	movlw	0
  6698  0036EC  0012               	return	
  6699  0036EE                     l6241:
  6700                           
  6701                           ;clcd.c: 91: else
  6702                           ;clcd.c: 92: return 'A';
  6703  0036EE  0E41               	movlw	65
  6704  0036F0  0012               	return	
  6705  0036F2                     __end_of_min_uid_range:
  6706                           	opt stack 0
  6707                           tblptru	equ	0xFF8
  6708                           tblptrh	equ	0xFF7
  6709                           tblptrl	equ	0xFF6
  6710                           tablat	equ	0xFF5
  6711                           prodh	equ	0xFF4
  6712                           prodl	equ	0xFF3
  6713                           intcon	equ	0xFF2
  6714                           postinc0	equ	0xFEE
  6715                           wreg	equ	0xFE8
  6716                           indf1	equ	0xFE7
  6717                           postdec1	equ	0xFE5
  6718                           fsr1h	equ	0xFE2
  6719                           fsr1l	equ	0xFE1
  6720                           indf2	equ	0xFDF
  6721                           postinc2	equ	0xFDE
  6722                           fsr2h	equ	0xFDA
  6723                           fsr2l	equ	0xFD9
  6724                           status	equ	0xFD8
  6725                           
  6726 ;; *************** function _max_uid_range *****************
  6727 ;; Defined at:
  6728 ;;		line 95 in file "clcd.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;		None
  6731 ;; Auto vars:     Size  Location     Type
  6732 ;;		None
  6733 ;; Return value:  Size  Location     Type
  6734 ;;                  1    wreg      unsigned char 
  6735 ;; Registers used:
  6736 ;;		wreg, status,2, status,0
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6746 ;;Total ram usage:        0 bytes
  6747 ;; Hardware stack levels used:    1
  6748 ;; Hardware stack levels required when called:    5
  6749 ;; This function calls:
  6750 ;;		Nothing
  6751 ;; This function is called by:
  6752 ;;		_reply_to_host
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text20
  6757  0036F2                     __ptext20:
  6758                           	opt stack 0
  6759  0036F2                     _max_uid_range:
  6760                           	opt stack 23
  6761                           
  6762                           ;clcd.c: 96: if (clcd_config_data.init_done == 0)
  6763                           
  6764                           ;incstack = 0
  6765  0036F2  5049               	movf	_clcd_config_data,w,c
  6766  0036F4  A4D8               	btfss	status,2,c
  6767  0036F6  D002               	goto	l6253
  6768                           
  6769                           ;clcd.c: 97: return 0;
  6770  0036F8  0E00               	movlw	0
  6771  0036FA  0012               	return	
  6772  0036FC                     l6253:
  6773                           
  6774                           ;clcd.c: 98: else
  6775                           ;clcd.c: 99: return clcd_config_data.uid_range - 1;
  6776  0036FC  044C               	decf	_clcd_config_data+3,w,c
  6777  0036FE  0012               	return	
  6778  003700                     __end_of_max_uid_range:
  6779                           	opt stack 0
  6780                           tblptru	equ	0xFF8
  6781                           tblptrh	equ	0xFF7
  6782                           tblptrl	equ	0xFF6
  6783                           tablat	equ	0xFF5
  6784                           prodh	equ	0xFF4
  6785                           prodl	equ	0xFF3
  6786                           intcon	equ	0xFF2
  6787                           postinc0	equ	0xFEE
  6788                           wreg	equ	0xFE8
  6789                           indf1	equ	0xFE7
  6790                           postdec1	equ	0xFE5
  6791                           fsr1h	equ	0xFE2
  6792                           fsr1l	equ	0xFE1
  6793                           indf2	equ	0xFDF
  6794                           postinc2	equ	0xFDE
  6795                           fsr2h	equ	0xFDA
  6796                           fsr2l	equ	0xFD9
  6797                           status	equ	0xFD8
  6798                           
  6799 ;; *************** function _max_display_support *****************
  6800 ;; Defined at:
  6801 ;;		line 102 in file "clcd.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;		None
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;		None
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  2   15[COMRAM] PTR unsigned char 
  6808 ;; Registers used:
  6809 ;;		wreg, status,2, status,0
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6815 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;Total ram usage:        2 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    5
  6822 ;; This function calls:
  6823 ;;		Nothing
  6824 ;; This function is called by:
  6825 ;;		_reply_to_host
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text21
  6830  00376A                     __ptext21:
  6831                           	opt stack 0
  6832  00376A                     _max_display_support:
  6833                           	opt stack 23
  6834                           
  6835                           ;clcd.c: 104: return "4,20";
  6836                           
  6837                           ;incstack = 0
  6838  00376A  0EF3               	movlw	low STR_5
  6839  00376C  6E10               	movwf	?_max_display_support,c
  6840  00376E  0EFF               	movlw	high STR_5
  6841  003770  6E11               	movwf	?_max_display_support+1,c
  6842  003772  0012               	return	
  6843  003774                     __end_of_max_display_support:
  6844                           	opt stack 0
  6845                           tblptru	equ	0xFF8
  6846                           tblptrh	equ	0xFF7
  6847                           tblptrl	equ	0xFF6
  6848                           tablat	equ	0xFF5
  6849                           prodh	equ	0xFF4
  6850                           prodl	equ	0xFF3
  6851                           intcon	equ	0xFF2
  6852                           postinc0	equ	0xFEE
  6853                           wreg	equ	0xFE8
  6854                           indf1	equ	0xFE7
  6855                           postdec1	equ	0xFE5
  6856                           fsr1h	equ	0xFE2
  6857                           fsr1l	equ	0xFE1
  6858                           indf2	equ	0xFDF
  6859                           postinc2	equ	0xFDE
  6860                           fsr2h	equ	0xFDA
  6861                           fsr2l	equ	0xFD9
  6862                           status	equ	0xFD8
  6863                           
  6864 ;; *************** function _max_display_str *****************
  6865 ;; Defined at:
  6866 ;;		line 81 in file "clcd.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      unsigned char 
  6873 ;; Registers used:
  6874 ;;		wreg, status,2
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6884 ;;Total ram usage:        0 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    5
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_reply_to_host
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text22
  6895  003700                     __ptext22:
  6896                           	opt stack 0
  6897  003700                     _max_display_str:
  6898                           	opt stack 23
  6899                           
  6900                           ;clcd.c: 82: if (clcd_config_data.init_done == 0)
  6901                           
  6902                           ;incstack = 0
  6903  003700  5049               	movf	_clcd_config_data,w,c
  6904  003702  A4D8               	btfss	status,2,c
  6905  003704  D002               	goto	l6229
  6906                           
  6907                           ;clcd.c: 83: return 0;
  6908  003706  0E00               	movlw	0
  6909  003708  0012               	return	
  6910  00370A                     l6229:
  6911                           
  6912                           ;clcd.c: 84: else
  6913                           ;clcd.c: 85: return clcd_config_data.clcd_max_display_string;
  6914  00370A  504D               	movf	_clcd_config_data+4,w,c
  6915  00370C  0012               	return	
  6916  00370E                     __end_of_max_display_str:
  6917                           	opt stack 0
  6918                           tblptru	equ	0xFF8
  6919                           tblptrh	equ	0xFF7
  6920                           tblptrl	equ	0xFF6
  6921                           tablat	equ	0xFF5
  6922                           prodh	equ	0xFF4
  6923                           prodl	equ	0xFF3
  6924                           intcon	equ	0xFF2
  6925                           postinc0	equ	0xFEE
  6926                           wreg	equ	0xFE8
  6927                           indf1	equ	0xFE7
  6928                           postdec1	equ	0xFE5
  6929                           fsr1h	equ	0xFE2
  6930                           fsr1l	equ	0xFE1
  6931                           indf2	equ	0xFDF
  6932                           postinc2	equ	0xFDE
  6933                           fsr2h	equ	0xFDA
  6934                           fsr2l	equ	0xFD9
  6935                           status	equ	0xFD8
  6936                           
  6937 ;; *************** function _init_clcd_cusotom_lcd *****************
  6938 ;; Defined at:
  6939 ;;		line 49 in file "clcd.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;  clcd_init_ro    1    wreg     unsigned char 
  6942 ;;  clcd_init_co    1   53[COMRAM] unsigned char 
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;  clcd_init_ro    1   54[COMRAM] unsigned char 
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  1    wreg      void 
  6947 ;; Registers used:
  6948 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6954 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6957 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6958 ;;Total ram usage:        2 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:   11
  6961 ;; This function calls:
  6962 ;;		___awdiv
  6963 ;;		___wmul
  6964 ;;		_init_CLCD_config
  6965 ;;		_memset
  6966 ;;		_printf
  6967 ;; This function is called by:
  6968 ;;		_reply_to_host
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           	psect	text23
  6973  002810                     __ptext23:
  6974                           	opt stack 0
  6975  002810                     _init_clcd_cusotom_lcd:
  6976                           	opt stack 17
  6977                           
  6978                           ;incstack = 0
  6979                           ;init_clcd_cusotom_lcd@clcd_init_row stored from wreg
  6980  002810  6E37               	movwf	init_clcd_cusotom_lcd@clcd_init_row,c
  6981                           
  6982                           ;clcd.c: 50: init_CLCD_config();
  6983  002812  ECAB  F015         	call	_init_CLCD_config	;wreg free
  6984                           
  6985                           ;clcd.c: 51: data_count=0;
  6986  002816  0E00               	movlw	0
  6987  002818  6E43               	movwf	_data_count,c
  6988                           
  6989                           ;clcd.c: 52: memset(clcd_display_string_details, 0, sizeof(clcd_display_string_details))
      +                          ;
  6990  00281A  0E96               	movlw	low _clcd_display_string_details
  6991  00281C  6E24               	movwf	memset@p1,c
  6992  00281E  0E02               	movlw	high _clcd_display_string_details
  6993  002820  6E25               	movwf	memset@p1+1,c
  6994  002822  0E00               	movlw	0
  6995  002824  6E27               	movwf	memset@c+1,c
  6996  002826  0E00               	movlw	0
  6997  002828  6E26               	movwf	memset@c,c
  6998  00282A  0E04               	movlw	4
  6999  00282C  6E29               	movwf	memset@n+1,c
  7000  00282E  0E38               	movlw	56
  7001  002830  6E28               	movwf	memset@n,c
  7002  002832  EC5E  F01A         	call	_memset	;wreg free
  7003                           
  7004                           ;clcd.c: 53: memset(conflict_arr, 0, sizeof(conflict_arr));
  7005  002836  0EB7               	movlw	low _conflict_arr
  7006  002838  6E24               	movwf	memset@p1,c
  7007  00283A  0E00               	movlw	high _conflict_arr
  7008  00283C  6E25               	movwf	memset@p1+1,c
  7009  00283E  0E00               	movlw	0
  7010  002840  6E27               	movwf	memset@c+1,c
  7011  002842  0E00               	movlw	0
  7012  002844  6E26               	movwf	memset@c,c
  7013  002846  0E00               	movlw	0
  7014  002848  6E29               	movwf	memset@n+1,c
  7015  00284A  0E14               	movlw	20
  7016  00284C  6E28               	movwf	memset@n,c
  7017  00284E  EC5E  F01A         	call	_memset	;wreg free
  7018                           
  7019                           ;clcd.c: 54: clcd_config_data.init_done = 1;
  7020  002852  0E01               	movlw	1
  7021  002854  6E49               	movwf	_clcd_config_data,c
  7022                           
  7023                           ;clcd.c: 55: printf("row = %d", clcd_init_row);
  7024  002856  0E9B               	movlw	low STR_1
  7025  002858  6E24               	movwf	printf@f,c
  7026  00285A  0EFF               	movlw	high STR_1
  7027  00285C  6E25               	movwf	printf@f+1,c
  7028  00285E  C037  F026         	movff	init_clcd_cusotom_lcd@clcd_init_row,?_printf+2
  7029  002862  6A27               	clrf	?_printf+3,c
  7030  002864  EC0F  F00F         	call	_printf	;wreg free
  7031                           
  7032                           ;clcd.c: 56: clcd_config_data.clcd_max_row = clcd_init_row;
  7033  002868  C037  F04A         	movff	init_clcd_cusotom_lcd@clcd_init_row,_clcd_config_data+1
  7034                           
  7035                           ;clcd.c: 57: printf("col = %d", clcd_init_col);
  7036  00286C  0E92               	movlw	low STR_2
  7037  00286E  6E24               	movwf	printf@f,c
  7038  002870  0EFF               	movlw	high STR_2
  7039  002872  6E25               	movwf	printf@f+1,c
  7040  002874  C036  F026         	movff	init_clcd_cusotom_lcd@clcd_init_col,?_printf+2
  7041  002878  6A27               	clrf	?_printf+3,c
  7042  00287A  EC0F  F00F         	call	_printf	;wreg free
  7043                           
  7044                           ;clcd.c: 58: clcd_config_data.clcd_max_col = clcd_init_col;
  7045  00287E  C036  F04B         	movff	init_clcd_cusotom_lcd@clcd_init_col,_clcd_config_data+2
  7046                           
  7047                           ;clcd.c: 59: printf("string_count = %d", (clcd_init_col / 4) * clcd_init_row);
  7048  002882  0E0A               	movlw	low STR_3
  7049  002884  6E24               	movwf	printf@f,c
  7050  002886  0EFE               	movlw	high STR_3
  7051  002888  6E25               	movwf	printf@f+1,c
  7052  00288A  0E00               	movlw	0
  7053  00288C  6E13               	movwf	___awdiv@divisor+1,c
  7054  00288E  0E04               	movlw	4
  7055  002890  6E12               	movwf	___awdiv@divisor,c
  7056  002892  C036  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7057  002896  6A11               	clrf	___awdiv@dividend+1,c
  7058  002898  EC98  F016         	call	___awdiv	;wreg free
  7059  00289C  C010  F018         	movff	?___awdiv,___wmul@multiplier
  7060  0028A0  C011  F019         	movff	?___awdiv+1,___wmul@multiplier+1
  7061  0028A4  C037  F01A         	movff	init_clcd_cusotom_lcd@clcd_init_row,___wmul@multiplicand
  7062  0028A8  6A1B               	clrf	___wmul@multiplicand+1,c
  7063  0028AA  EC8A  F01A         	call	___wmul	;wreg free
  7064  0028AE  C018  F026         	movff	?___wmul,?_printf+2
  7065  0028B2  C019  F027         	movff	?___wmul+1,?_printf+3
  7066  0028B6  EC0F  F00F         	call	_printf	;wreg free
  7067                           
  7068                           ;clcd.c: 60: clcd_config_data.clcd_max_display_string = (clcd_init_col / 4) * clcd_init_
      +                          row;
  7069  0028BA  C036  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7070  0028BE  6A11               	clrf	___awdiv@dividend+1,c
  7071  0028C0  0E00               	movlw	0
  7072  0028C2  6E13               	movwf	___awdiv@divisor+1,c
  7073  0028C4  0E04               	movlw	4
  7074  0028C6  6E12               	movwf	___awdiv@divisor,c
  7075  0028C8  EC98  F016         	call	___awdiv	;wreg free
  7076  0028CC  5010               	movf	?___awdiv,w,c
  7077  0028CE  0237               	mulwf	init_clcd_cusotom_lcd@clcd_init_row,c
  7078  0028D0  CFF3 F04D          	movff	prodl,_clcd_config_data+4
  7079                           
  7080                           ;clcd.c: 61: clcd_config_data.uid_range = 'A' + clcd_config_data.clcd_max_display_string
      +                          ;
  7081  0028D4  504D               	movf	_clcd_config_data+4,w,c
  7082  0028D6  0F41               	addlw	65
  7083  0028D8  6E4C               	movwf	_clcd_config_data+3,c
  7084                           
  7085                           ;clcd.c: 62: printf("uid_range = %d\r\n", clcd_config_data.uid_range);
  7086  0028DA  0E1C               	movlw	low STR_4
  7087  0028DC  6E24               	movwf	printf@f,c
  7088  0028DE  0EFE               	movlw	high STR_4
  7089  0028E0  6E25               	movwf	printf@f+1,c
  7090  0028E2  C04C  F026         	movff	_clcd_config_data+3,?_printf+2
  7091  0028E6  6A27               	clrf	?_printf+3,c
  7092  0028E8  EC0F  F00F         	call	_printf	;wreg free
  7093  0028EC  0012               	return		;funcret
  7094  0028EE                     __end_of_init_clcd_cusotom_lcd:
  7095                           	opt stack 0
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodh	equ	0xFF4
  7101                           prodl	equ	0xFF3
  7102                           intcon	equ	0xFF2
  7103                           postinc0	equ	0xFEE
  7104                           wreg	equ	0xFE8
  7105                           indf1	equ	0xFE7
  7106                           postdec1	equ	0xFE5
  7107                           fsr1h	equ	0xFE2
  7108                           fsr1l	equ	0xFE1
  7109                           indf2	equ	0xFDF
  7110                           postinc2	equ	0xFDE
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115 ;; *************** function _init_CLCD_config *****************
  7116 ;; Defined at:
  7117 ;;		line 15 in file "clcd.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;		None
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;		None
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  1    wreg      void 
  7124 ;; Registers used:
  7125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;Total ram usage:        0 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:   10
  7138 ;; This function calls:
  7139 ;;		__delay_MS
  7140 ;;		_clcd_display_string_config
  7141 ;;		_memset
  7142 ;;		_reset_clcd
  7143 ;;		_write_lcd_cmd
  7144 ;; This function is called by:
  7145 ;;		_init_clcd_cusotom_lcd
  7146 ;;		_init_clcd_lcd_16x2
  7147 ;;		_init_clcd_lcd_20x4
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           	psect	text24
  7152  002B56                     __ptext24:
  7153                           	opt stack 0
  7154  002B56                     _init_CLCD_config:
  7155                           	opt stack 17
  7156                           
  7157                           ;clcd.c: 16: memset(&clcd_config_data, 0, sizeof (CLCD_CONFIG_DATA));
  7158                           
  7159                           ;incstack = 0
  7160  002B56  0E49               	movlw	low _clcd_config_data
  7161  002B58  6E24               	movwf	memset@p1,c
  7162  002B5A  0E00               	movlw	high _clcd_config_data
  7163  002B5C  6E25               	movwf	memset@p1+1,c
  7164  002B5E  0E00               	movlw	0
  7165  002B60  6E27               	movwf	memset@c+1,c
  7166  002B62  0E00               	movlw	0
  7167  002B64  6E26               	movwf	memset@c,c
  7168  002B66  0E00               	movlw	0
  7169  002B68  6E29               	movwf	memset@n+1,c
  7170  002B6A  0E05               	movlw	5
  7171  002B6C  6E28               	movwf	memset@n,c
  7172  002B6E  EC5E  F01A         	call	_memset	;wreg free
  7173                           
  7174                           ;clcd.c: 18: TRISD = 0x00;
  7175  002B72  0E00               	movlw	0
  7176  002B74  6E95               	movwf	3989,c	;volatile
  7177                           
  7178                           ;clcd.c: 21: TRISA = (unsigned char) (TRISA | 0xF0);
  7179  002B76  5092               	movf	3986,w,c	;volatile
  7180  002B78  09F0               	iorlw	240
  7181  002B7A  6E92               	movwf	3986,c	;volatile
  7182                           
  7183                           ;clcd.c: 23: PORTAbits.RA0 = 0;
  7184  002B7C  9080               	bcf	3968,0,c	;volatile
  7185                           
  7186                           ;clcd.c: 24: _delay_MS(250);
  7187  002B7E  0E00               	movlw	0
  7188  002B80  6E11               	movwf	__delay_MS@delay+1,c
  7189  002B82  0EFA               	movlw	250
  7190  002B84  6E10               	movwf	__delay_MS@delay,c
  7191  002B86  EC42  F019         	call	__delay_MS	;wreg free
  7192                           
  7193                           ;clcd.c: 27: write_lcd_cmd(0X38);
  7194  002B8A  0E38               	movlw	56
  7195  002B8C  EC31  F01B         	call	_write_lcd_cmd
  7196                           
  7197                           ;clcd.c: 28: _delay_MS(250);
  7198  002B90  0E00               	movlw	0
  7199  002B92  6E11               	movwf	__delay_MS@delay+1,c
  7200  002B94  0EFA               	movlw	250
  7201  002B96  6E10               	movwf	__delay_MS@delay,c
  7202  002B98  EC42  F019         	call	__delay_MS	;wreg free
  7203                           
  7204                           ;clcd.c: 30: write_lcd_cmd(0x0E);;
  7205  002B9C  0E0E               	movlw	14
  7206  002B9E  EC31  F01B         	call	_write_lcd_cmd
  7207                           
  7208                           ;clcd.c: 31: _delay_MS(250);
  7209  002BA2  0E00               	movlw	0
  7210  002BA4  6E11               	movwf	__delay_MS@delay+1,c
  7211  002BA6  0EFA               	movlw	250
  7212  002BA8  6E10               	movwf	__delay_MS@delay,c
  7213  002BAA  EC42  F019         	call	__delay_MS	;wreg free
  7214                           
  7215                           ;clcd.c: 33: write_lcd_cmd(0x01);;
  7216  002BAE  0E01               	movlw	1
  7217  002BB0  EC31  F01B         	call	_write_lcd_cmd
  7218                           
  7219                           ;clcd.c: 34: _delay_MS(250);
  7220  002BB4  0E00               	movlw	0
  7221  002BB6  6E11               	movwf	__delay_MS@delay+1,c
  7222  002BB8  0EFA               	movlw	250
  7223  002BBA  6E10               	movwf	__delay_MS@delay,c
  7224  002BBC  EC42  F019         	call	__delay_MS	;wreg free
  7225                           
  7226                           ;clcd.c: 36: write_lcd_cmd(0x06);;
  7227  002BC0  0E06               	movlw	6
  7228  002BC2  EC31  F01B         	call	_write_lcd_cmd
  7229                           
  7230                           ;clcd.c: 37: _delay_MS(250);
  7231  002BC6  0E00               	movlw	0
  7232  002BC8  6E11               	movwf	__delay_MS@delay+1,c
  7233  002BCA  0EFA               	movlw	250
  7234  002BCC  6E10               	movwf	__delay_MS@delay,c
  7235  002BCE  EC42  F019         	call	__delay_MS	;wreg free
  7236                           
  7237                           ;clcd.c: 39: write_lcd_cmd(0x0F);
  7238  002BD2  0E0F               	movlw	15
  7239  002BD4  EC31  F01B         	call	_write_lcd_cmd
  7240                           
  7241                           ;clcd.c: 40: _delay_MS(250);
  7242  002BD8  0E00               	movlw	0
  7243  002BDA  6E11               	movwf	__delay_MS@delay+1,c
  7244  002BDC  0EFA               	movlw	250
  7245  002BDE  6E10               	movwf	__delay_MS@delay,c
  7246  002BE0  EC42  F019         	call	__delay_MS	;wreg free
  7247                           
  7248                           ;clcd.c: 42: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7249  002BE4  0E00               	movlw	low _lcd_display_array
  7250  002BE6  6E24               	movwf	memset@p1,c
  7251  002BE8  0E01               	movlw	high _lcd_display_array
  7252  002BEA  6E25               	movwf	memset@p1+1,c
  7253  002BEC  0E00               	movlw	0
  7254  002BEE  6E27               	movwf	memset@c+1,c
  7255  002BF0  0E20               	movlw	32
  7256  002BF2  6E26               	movwf	memset@c,c
  7257  002BF4  0E00               	movlw	0
  7258  002BF6  6E29               	movwf	memset@n+1,c
  7259  002BF8  0E50               	movlw	80
  7260  002BFA  6E28               	movwf	memset@n,c
  7261  002BFC  EC5E  F01A         	call	_memset	;wreg free
  7262                           
  7263                           ;clcd.c: 44: clcd_display_string_config();
  7264  002C00  ECB4  F017         	call	_clcd_display_string_config	;wreg free
  7265                           
  7266                           ;clcd.c: 46: reset_clcd();
  7267  002C04  ECBA  F01B         	call	_reset_clcd	;wreg free
  7268  002C08  0012               	return		;funcret
  7269  002C0A                     __end_of_init_CLCD_config:
  7270                           	opt stack 0
  7271                           tblptru	equ	0xFF8
  7272                           tblptrh	equ	0xFF7
  7273                           tblptrl	equ	0xFF6
  7274                           tablat	equ	0xFF5
  7275                           prodh	equ	0xFF4
  7276                           prodl	equ	0xFF3
  7277                           intcon	equ	0xFF2
  7278                           postinc0	equ	0xFEE
  7279                           wreg	equ	0xFE8
  7280                           indf1	equ	0xFE7
  7281                           postdec1	equ	0xFE5
  7282                           fsr1h	equ	0xFE2
  7283                           fsr1l	equ	0xFE1
  7284                           indf2	equ	0xFDF
  7285                           postinc2	equ	0xFDE
  7286                           fsr2h	equ	0xFDA
  7287                           fsr2l	equ	0xFD9
  7288                           status	equ	0xFD8
  7289                           
  7290 ;; *************** function _write_lcd_cmd *****************
  7291 ;; Defined at:
  7292 ;;		line 291 in file "clcd.c"
  7293 ;; Parameters:    Size  Location     Type
  7294 ;;  cmd             1    wreg     unsigned char 
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;  cmd             1   22[COMRAM] unsigned char 
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  1    wreg      void 
  7299 ;; Registers used:
  7300 ;;		wreg, status,2, status,0, cstack
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7310 ;;Total ram usage:        1 bytes
  7311 ;; Hardware stack levels used:    1
  7312 ;; Hardware stack levels required when called:    6
  7313 ;; This function calls:
  7314 ;;		_delay
  7315 ;; This function is called by:
  7316 ;;		_init_CLCD_config
  7317 ;;		_set_cursor
  7318 ;;		_char_enter_mode_left_to_right
  7319 ;;		_display_text
  7320 ;;		_set_cursor_at_home
  7321 ;;		_display_and_cursor_control
  7322 ;;		_scroll_display_right
  7323 ;;		_scroll_display_left
  7324 ;;		_put_string
  7325 ;;		_put_char
  7326 ;; This function uses a non-reentrant model
  7327 ;;
  7328                           
  7329                           	psect	text25
  7330  003662                     __ptext25:
  7331                           	opt stack 0
  7332  003662                     _write_lcd_cmd:
  7333                           	opt stack 22
  7334                           
  7335                           ;incstack = 0
  7336                           ;write_lcd_cmd@cmd stored from wreg
  7337  003662  6E17               	movwf	write_lcd_cmd@cmd,c
  7338                           
  7339                           ;clcd.c: 292: PORTD = cmd;
  7340  003664  C017  FF83         	movff	write_lcd_cmd@cmd,3971	;volatile
  7341                           
  7342                           ;clcd.c: 293: PORTAbits.RA2 = 0;
  7343  003668  9480               	bcf	3968,2,c	;volatile
  7344                           
  7345                           ;clcd.c: 294: PORTAbits.RA1 = 0;
  7346  00366A  9280               	bcf	3968,1,c	;volatile
  7347                           
  7348                           ;clcd.c: 295: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7349  00366C  8080               	bsf	3968,0,c	;volatile
  7350  00366E  0E00               	movlw	0
  7351  003670  6E11               	movwf	delay@delay+1,c
  7352  003672  0E01               	movlw	1
  7353  003674  6E10               	movwf	delay@delay,c
  7354  003676  ECD5  F018         	call	_delay	;wreg free
  7355  00367A  9080               	bcf	3968,0,c	;volatile
  7356  00367C  0012               	return		;funcret
  7357  00367E                     __end_of_write_lcd_cmd:
  7358                           	opt stack 0
  7359                           tblptru	equ	0xFF8
  7360                           tblptrh	equ	0xFF7
  7361                           tblptrl	equ	0xFF6
  7362                           tablat	equ	0xFF5
  7363                           prodh	equ	0xFF4
  7364                           prodl	equ	0xFF3
  7365                           intcon	equ	0xFF2
  7366                           postinc0	equ	0xFEE
  7367                           wreg	equ	0xFE8
  7368                           indf1	equ	0xFE7
  7369                           postdec1	equ	0xFE5
  7370                           fsr1h	equ	0xFE2
  7371                           fsr1l	equ	0xFE1
  7372                           indf2	equ	0xFDF
  7373                           postinc2	equ	0xFDE
  7374                           fsr2h	equ	0xFDA
  7375                           fsr2l	equ	0xFD9
  7376                           status	equ	0xFD8
  7377                           
  7378 ;; *************** function _reset_clcd *****************
  7379 ;; Defined at:
  7380 ;;		line 10 in file "clcd.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;		None
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;		None
  7385 ;; Return value:  Size  Location     Type
  7386 ;;                  1    wreg      void 
  7387 ;; Registers used:
  7388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7389 ;; Tracked objects:
  7390 ;;		On entry : 0/0
  7391 ;;		On exit  : 0/0
  7392 ;;		Unchanged: 0/0
  7393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;Total ram usage:        0 bytes
  7399 ;; Hardware stack levels used:    1
  7400 ;; Hardware stack levels required when called:    9
  7401 ;; This function calls:
  7402 ;;		_clear_display_array
  7403 ;;		_reset_display_structure_count
  7404 ;; This function is called by:
  7405 ;;		_init_CLCD_config
  7406 ;; This function uses a non-reentrant model
  7407 ;;
  7408                           
  7409                           	psect	text26
  7410  003774                     __ptext26:
  7411                           	opt stack 0
  7412  003774                     _reset_clcd:
  7413                           	opt stack 17
  7414                           
  7415                           ;clcd.c: 11: clear_display_array();
  7416                           
  7417                           ;incstack = 0
  7418  003774  ECD4  F01A         	call	_clear_display_array	;wreg free
  7419                           
  7420                           ;clcd.c: 12: reset_display_structure_count();
  7421  003778  EC62  F01B         	call	_reset_display_structure_count	;wreg free
  7422  00377C  0012               	return		;funcret
  7423  00377E                     __end_of_reset_clcd:
  7424                           	opt stack 0
  7425                           tblptru	equ	0xFF8
  7426                           tblptrh	equ	0xFF7
  7427                           tblptrl	equ	0xFF6
  7428                           tablat	equ	0xFF5
  7429                           prodh	equ	0xFF4
  7430                           prodl	equ	0xFF3
  7431                           intcon	equ	0xFF2
  7432                           postinc0	equ	0xFEE
  7433                           wreg	equ	0xFE8
  7434                           indf1	equ	0xFE7
  7435                           postdec1	equ	0xFE5
  7436                           fsr1h	equ	0xFE2
  7437                           fsr1l	equ	0xFE1
  7438                           indf2	equ	0xFDF
  7439                           postinc2	equ	0xFDE
  7440                           fsr2h	equ	0xFDA
  7441                           fsr2l	equ	0xFD9
  7442                           status	equ	0xFD8
  7443                           
  7444 ;; *************** function _clear_display_array *****************
  7445 ;; Defined at:
  7446 ;;		line 392 in file "clcd.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;		None
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;		None
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  1    wreg      void 
  7453 ;; Registers used:
  7454 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;Total ram usage:        0 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    8
  7467 ;; This function calls:
  7468 ;;		_memset
  7469 ;;		_reset_display_structure_count
  7470 ;; This function is called by:
  7471 ;;		_reset_clcd
  7472 ;; This function uses a non-reentrant model
  7473 ;;
  7474                           
  7475                           	psect	text27
  7476  0035A8                     __ptext27:
  7477                           	opt stack 0
  7478  0035A8                     _clear_display_array:
  7479                           	opt stack 17
  7480                           
  7481                           ;clcd.c: 393: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7482                           
  7483                           ;incstack = 0
  7484  0035A8  0E00               	movlw	low _lcd_display_array
  7485  0035AA  6E24               	movwf	memset@p1,c
  7486  0035AC  0E01               	movlw	high _lcd_display_array
  7487  0035AE  6E25               	movwf	memset@p1+1,c
  7488  0035B0  0E00               	movlw	0
  7489  0035B2  6E27               	movwf	memset@c+1,c
  7490  0035B4  0E20               	movlw	32
  7491  0035B6  6E26               	movwf	memset@c,c
  7492  0035B8  0E00               	movlw	0
  7493  0035BA  6E29               	movwf	memset@n+1,c
  7494  0035BC  0E50               	movlw	80
  7495  0035BE  6E28               	movwf	memset@n,c
  7496  0035C0  EC5E  F01A         	call	_memset	;wreg free
  7497                           
  7498                           ;clcd.c: 394: reset_display_structure_count();
  7499  0035C4  EC62  F01B         	call	_reset_display_structure_count	;wreg free
  7500  0035C8  0012               	return		;funcret
  7501  0035CA                     __end_of_clear_display_array:
  7502                           	opt stack 0
  7503                           tblptru	equ	0xFF8
  7504                           tblptrh	equ	0xFF7
  7505                           tblptrl	equ	0xFF6
  7506                           tablat	equ	0xFF5
  7507                           prodh	equ	0xFF4
  7508                           prodl	equ	0xFF3
  7509                           intcon	equ	0xFF2
  7510                           postinc0	equ	0xFEE
  7511                           wreg	equ	0xFE8
  7512                           indf1	equ	0xFE7
  7513                           postdec1	equ	0xFE5
  7514                           fsr1h	equ	0xFE2
  7515                           fsr1l	equ	0xFE1
  7516                           indf2	equ	0xFDF
  7517                           postinc2	equ	0xFDE
  7518                           fsr2h	equ	0xFDA
  7519                           fsr2l	equ	0xFD9
  7520                           status	equ	0xFD8
  7521                           
  7522 ;; *************** function _reset_display_structure_count *****************
  7523 ;; Defined at:
  7524 ;;		line 387 in file "clcd.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;		None
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  1    wreg      void 
  7531 ;; Registers used:
  7532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;Total ram usage:        0 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    7
  7545 ;; This function calls:
  7546 ;;		_clear_display_structure
  7547 ;; This function is called by:
  7548 ;;		_reset_clcd
  7549 ;;		_clear_display_array
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553                           	psect	text28
  7554  0036C4                     __ptext28:
  7555                           	opt stack 0
  7556  0036C4                     _reset_display_structure_count:
  7557                           	opt stack 18
  7558                           
  7559                           ;clcd.c: 388: display_struct_count = 0;
  7560                           
  7561                           ;incstack = 0
  7562  0036C4  0E00               	movlw	0
  7563  0036C6  0100               	movlb	0	; () banked
  7564  0036C8  6F75               	movwf	(_display_struct_count+1)& (0+255),b
  7565  0036CA  0E00               	movlw	0
  7566  0036CC  6F74               	movwf	_display_struct_count& (0+255),b
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;clcd.c: 389: clear_display_structure();
  7570  0036CE  ECF5  F01A         	call	_clear_display_structure	;wreg free
  7571  0036D2  0012               	return		;funcret
  7572  0036D4                     __end_of_reset_display_structure_count:
  7573                           	opt stack 0
  7574                           tblptru	equ	0xFF8
  7575                           tblptrh	equ	0xFF7
  7576                           tblptrl	equ	0xFF6
  7577                           tablat	equ	0xFF5
  7578                           prodh	equ	0xFF4
  7579                           prodl	equ	0xFF3
  7580                           intcon	equ	0xFF2
  7581                           postinc0	equ	0xFEE
  7582                           wreg	equ	0xFE8
  7583                           indf1	equ	0xFE7
  7584                           postdec1	equ	0xFE5
  7585                           fsr1h	equ	0xFE2
  7586                           fsr1l	equ	0xFE1
  7587                           indf2	equ	0xFDF
  7588                           postinc2	equ	0xFDE
  7589                           fsr2h	equ	0xFDA
  7590                           fsr2l	equ	0xFD9
  7591                           status	equ	0xFD8
  7592                           
  7593 ;; *************** function _clear_display_structure *****************
  7594 ;; Defined at:
  7595 ;;		line 383 in file "clcd.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;		None
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;		None
  7600 ;; Return value:  Size  Location     Type
  7601 ;;                  1    wreg      void 
  7602 ;; Registers used:
  7603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;Total ram usage:        0 bytes
  7614 ;; Hardware stack levels used:    1
  7615 ;; Hardware stack levels required when called:    6
  7616 ;; This function calls:
  7617 ;;		_memset
  7618 ;; This function is called by:
  7619 ;;		_reset_display_structure_count
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           	psect	text29
  7624  0035EA                     __ptext29:
  7625                           	opt stack 0
  7626  0035EA                     _clear_display_structure:
  7627                           	opt stack 18
  7628                           
  7629                           ;clcd.c: 384: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details
      +                          ));
  7630                           
  7631                           ;incstack = 0
  7632  0035EA  0E96               	movlw	low _clcd_display_string_details
  7633  0035EC  6E24               	movwf	memset@p1,c
  7634  0035EE  0E02               	movlw	high _clcd_display_string_details
  7635  0035F0  6E25               	movwf	memset@p1+1,c
  7636  0035F2  0E00               	movlw	0
  7637  0035F4  6E27               	movwf	memset@c+1,c
  7638  0035F6  0E00               	movlw	0
  7639  0035F8  6E26               	movwf	memset@c,c
  7640  0035FA  0E04               	movlw	4
  7641  0035FC  6E29               	movwf	memset@n+1,c
  7642  0035FE  0E38               	movlw	56
  7643  003600  6E28               	movwf	memset@n,c
  7644  003602  EC5E  F01A         	call	_memset	;wreg free
  7645  003606  0012               	return		;funcret
  7646  003608                     __end_of_clear_display_structure:
  7647                           	opt stack 0
  7648                           tblptru	equ	0xFF8
  7649                           tblptrh	equ	0xFF7
  7650                           tblptrl	equ	0xFF6
  7651                           tablat	equ	0xFF5
  7652                           prodh	equ	0xFF4
  7653                           prodl	equ	0xFF3
  7654                           intcon	equ	0xFF2
  7655                           postinc0	equ	0xFEE
  7656                           wreg	equ	0xFE8
  7657                           indf1	equ	0xFE7
  7658                           postdec1	equ	0xFE5
  7659                           fsr1h	equ	0xFE2
  7660                           fsr1l	equ	0xFE1
  7661                           indf2	equ	0xFDF
  7662                           postinc2	equ	0xFDE
  7663                           fsr2h	equ	0xFDA
  7664                           fsr2l	equ	0xFD9
  7665                           status	equ	0xFD8
  7666                           
  7667 ;; *************** function _clcd_display_string_config *****************
  7668 ;; Defined at:
  7669 ;;		line 209 in file "clcd.c"
  7670 ;; Parameters:    Size  Location     Type
  7671 ;;		None
  7672 ;; Auto vars:     Size  Location     Type
  7673 ;;		None
  7674 ;; Return value:  Size  Location     Type
  7675 ;;                  1    wreg      void 
  7676 ;; Registers used:
  7677 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7678 ;; Tracked objects:
  7679 ;;		On entry : 0/0
  7680 ;;		On exit  : 0/0
  7681 ;;		Unchanged: 0/0
  7682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7687 ;;Total ram usage:        0 bytes
  7688 ;; Hardware stack levels used:    1
  7689 ;; Hardware stack levels required when called:    8
  7690 ;; This function calls:
  7691 ;;		_memcpy
  7692 ;;		_memset
  7693 ;;		_printf
  7694 ;;		_write_str
  7695 ;; This function is called by:
  7696 ;;		_init_CLCD_config
  7697 ;; This function uses a non-reentrant model
  7698 ;;
  7699                           
  7700                           	psect	text30
  7701  002F68                     __ptext30:
  7702                           	opt stack 0
  7703  002F68                     _clcd_display_string_config:
  7704                           	opt stack 18
  7705                           
  7706                           ;clcd.c: 210: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7707                           
  7708                           ;incstack = 0
  7709  002F68  0E00               	movlw	low _lcd_display_array
  7710  002F6A  6E24               	movwf	memset@p1,c
  7711  002F6C  0E01               	movlw	high _lcd_display_array
  7712  002F6E  6E25               	movwf	memset@p1+1,c
  7713  002F70  0E00               	movlw	0
  7714  002F72  6E27               	movwf	memset@c+1,c
  7715  002F74  0E20               	movlw	32
  7716  002F76  6E26               	movwf	memset@c,c
  7717  002F78  0E00               	movlw	0
  7718  002F7A  6E29               	movwf	memset@n+1,c
  7719  002F7C  0E50               	movlw	80
  7720  002F7E  6E28               	movwf	memset@n,c
  7721  002F80  EC5E  F01A         	call	_memset	;wreg free
  7722                           
  7723                           ;clcd.c: 211: printf("sizeof(str) = %d\r\n", sizeof (str));
  7724  002F84  0EE5               	movlw	low STR_10
  7725  002F86  6E24               	movwf	printf@f,c
  7726  002F88  0EFD               	movlw	high STR_10
  7727  002F8A  6E25               	movwf	printf@f+1,c
  7728  002F8C  0E00               	movlw	0
  7729  002F8E  6E27               	movwf	?_printf+3,c
  7730  002F90  0E0D               	movlw	13
  7731  002F92  6E26               	movwf	?_printf+2,c
  7732  002F94  EC0F  F00F         	call	_printf	;wreg free
  7733                           
  7734                           ;clcd.c: 212: memcpy(lcd_display_array[0], str, sizeof (str));
  7735  002F98  0E00               	movlw	low _lcd_display_array
  7736  002F9A  6E10               	movwf	memcpy@d1,c
  7737  002F9C  0E01               	movlw	high _lcd_display_array
  7738  002F9E  6E11               	movwf	memcpy@d1+1,c
  7739  002FA0  0EEC               	movlw	low _str
  7740  002FA2  6E12               	movwf	memcpy@s1,c
  7741  002FA4  0E00               	movlw	high _str
  7742  002FA6  6E13               	movwf	memcpy@s1+1,c
  7743  002FA8  0E00               	movlw	0
  7744  002FAA  6E15               	movwf	memcpy@n+1,c
  7745  002FAC  0E0D               	movlw	13
  7746  002FAE  6E14               	movwf	memcpy@n,c
  7747  002FB0  EC85  F019         	call	_memcpy	;wreg free
  7748                           
  7749                           ;clcd.c: 213: write_str(lcd_display_array[0]);
  7750  002FB4  0E00               	movlw	low _lcd_display_array
  7751  002FB6  6E18               	movwf	write_str@str,c
  7752  002FB8  0E01               	movlw	high _lcd_display_array
  7753  002FBA  6E19               	movwf	write_str@str+1,c
  7754  002FBC  ECB0  F01A         	call	_write_str	;wreg free
  7755  002FC0  0012               	return		;funcret
  7756  002FC2                     __end_of_clcd_display_string_config:
  7757                           	opt stack 0
  7758                           tblptru	equ	0xFF8
  7759                           tblptrh	equ	0xFF7
  7760                           tblptrl	equ	0xFF6
  7761                           tablat	equ	0xFF5
  7762                           prodh	equ	0xFF4
  7763                           prodl	equ	0xFF3
  7764                           intcon	equ	0xFF2
  7765                           postinc0	equ	0xFEE
  7766                           wreg	equ	0xFE8
  7767                           indf1	equ	0xFE7
  7768                           postdec1	equ	0xFE5
  7769                           fsr1h	equ	0xFE2
  7770                           fsr1l	equ	0xFE1
  7771                           indf2	equ	0xFDF
  7772                           postinc2	equ	0xFDE
  7773                           fsr2h	equ	0xFDA
  7774                           fsr2l	equ	0xFD9
  7775                           status	equ	0xFD8
  7776                           
  7777 ;; *************** function _write_str *****************
  7778 ;; Defined at:
  7779 ;;		line 305 in file "clcd.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;  str             2   23[COMRAM] PTR const unsigned char 
  7782 ;;		 -> lcd_display_array(80), 
  7783 ;; Auto vars:     Size  Location     Type
  7784 ;;  i               1   25[COMRAM] unsigned char 
  7785 ;; Return value:  Size  Location     Type
  7786 ;;                  1    wreg      void 
  7787 ;; Registers used:
  7788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7789 ;; Tracked objects:
  7790 ;;		On entry : 0/0
  7791 ;;		On exit  : 0/0
  7792 ;;		Unchanged: 0/0
  7793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7797 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7798 ;;Total ram usage:        3 bytes
  7799 ;; Hardware stack levels used:    1
  7800 ;; Hardware stack levels required when called:    7
  7801 ;; This function calls:
  7802 ;;		_write_lcd_data
  7803 ;; This function is called by:
  7804 ;;		_clcd_display_string_config
  7805 ;;		_display_text
  7806 ;;		_put_string
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           	psect	text31
  7811  003560                     __ptext31:
  7812                           	opt stack 0
  7813  003560                     _write_str:
  7814                           	opt stack 21
  7815                           
  7816                           ;clcd.c: 307: unsigned char i = 0;
  7817                           
  7818                           ;incstack = 0
  7819  003560  0E00               	movlw	0
  7820  003562  6E1A               	movwf	write_str@i,c
  7821                           
  7822                           ;clcd.c: 308: while (i < clcd_config_data.clcd_max_col) {
  7823  003564  D00A               	goto	l5715
  7824  003566                     l5709:
  7825                           
  7826                           ;clcd.c: 310: write_lcd_data(*str++);
  7827  003566  C018  FFD9         	movff	write_str@str,fsr2l
  7828  00356A  C019  FFDA         	movff	write_str@str+1,fsr2h
  7829  00356E  50DF               	movf	indf2,w,c
  7830  003570  EC3F  F01B         	call	_write_lcd_data
  7831  003574  4A18               	infsnz	write_str@str,f,c
  7832  003576  2A19               	incf	write_str@str+1,f,c
  7833                           
  7834                           ;clcd.c: 314: i++;
  7835  003578  2A1A               	incf	write_str@i,f,c
  7836  00357A                     l5715:
  7837  00357A  504B               	movf	_clcd_config_data+2,w,c
  7838  00357C  5C1A               	subwf	write_str@i,w,c
  7839  00357E  B0D8               	btfsc	status,0,c
  7840  003580  0012               	return	
  7841  003582  D7F1               	goto	l5709
  7842  003584                     __end_of_write_str:
  7843                           	opt stack 0
  7844                           tblptru	equ	0xFF8
  7845                           tblptrh	equ	0xFF7
  7846                           tblptrl	equ	0xFF6
  7847                           tablat	equ	0xFF5
  7848                           prodh	equ	0xFF4
  7849                           prodl	equ	0xFF3
  7850                           intcon	equ	0xFF2
  7851                           postinc0	equ	0xFEE
  7852                           wreg	equ	0xFE8
  7853                           indf1	equ	0xFE7
  7854                           postdec1	equ	0xFE5
  7855                           fsr1h	equ	0xFE2
  7856                           fsr1l	equ	0xFE1
  7857                           indf2	equ	0xFDF
  7858                           postinc2	equ	0xFDE
  7859                           fsr2h	equ	0xFDA
  7860                           fsr2l	equ	0xFD9
  7861                           status	equ	0xFD8
  7862                           
  7863 ;; *************** function _write_lcd_data *****************
  7864 ;; Defined at:
  7865 ;;		line 298 in file "clcd.c"
  7866 ;; Parameters:    Size  Location     Type
  7867 ;;  data            1    wreg     unsigned char 
  7868 ;; Auto vars:     Size  Location     Type
  7869 ;;  data            1   22[COMRAM] unsigned char 
  7870 ;; Return value:  Size  Location     Type
  7871 ;;                  1    wreg      void 
  7872 ;; Registers used:
  7873 ;;		wreg, status,2, status,0, cstack
  7874 ;; Tracked objects:
  7875 ;;		On entry : 0/0
  7876 ;;		On exit  : 0/0
  7877 ;;		Unchanged: 0/0
  7878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7883 ;;Total ram usage:        1 bytes
  7884 ;; Hardware stack levels used:    1
  7885 ;; Hardware stack levels required when called:    6
  7886 ;; This function calls:
  7887 ;;		_delay
  7888 ;; This function is called by:
  7889 ;;		_write_str
  7890 ;;		_put_char
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           	psect	text32
  7895  00367E                     __ptext32:
  7896                           	opt stack 0
  7897  00367E                     _write_lcd_data:
  7898                           	opt stack 21
  7899                           
  7900                           ;incstack = 0
  7901                           ;write_lcd_data@data stored from wreg
  7902  00367E  6E17               	movwf	write_lcd_data@data,c
  7903                           
  7904                           ;clcd.c: 299: PORTAbits.RA2 = 1;
  7905  003680  8480               	bsf	3968,2,c	;volatile
  7906                           
  7907                           ;clcd.c: 300: PORTAbits.RA1 = 0;
  7908  003682  9280               	bcf	3968,1,c	;volatile
  7909                           
  7910                           ;clcd.c: 301: PORTD = data;
  7911  003684  C017  FF83         	movff	write_lcd_data@data,3971	;volatile
  7912                           
  7913                           ;clcd.c: 302: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7914  003688  8080               	bsf	3968,0,c	;volatile
  7915  00368A  0E00               	movlw	0
  7916  00368C  6E11               	movwf	delay@delay+1,c
  7917  00368E  0E01               	movlw	1
  7918  003690  6E10               	movwf	delay@delay,c
  7919  003692  ECD5  F018         	call	_delay	;wreg free
  7920  003696  9080               	bcf	3968,0,c	;volatile
  7921  003698  0012               	return		;funcret
  7922  00369A                     __end_of_write_lcd_data:
  7923                           	opt stack 0
  7924                           tblptru	equ	0xFF8
  7925                           tblptrh	equ	0xFF7
  7926                           tblptrl	equ	0xFF6
  7927                           tablat	equ	0xFF5
  7928                           prodh	equ	0xFF4
  7929                           prodl	equ	0xFF3
  7930                           intcon	equ	0xFF2
  7931                           postinc0	equ	0xFEE
  7932                           wreg	equ	0xFE8
  7933                           indf1	equ	0xFE7
  7934                           postdec1	equ	0xFE5
  7935                           fsr1h	equ	0xFE2
  7936                           fsr1l	equ	0xFE1
  7937                           indf2	equ	0xFDF
  7938                           postinc2	equ	0xFDE
  7939                           fsr2h	equ	0xFDA
  7940                           fsr2l	equ	0xFD9
  7941                           status	equ	0xFD8
  7942                           
  7943 ;; *************** function _delay *****************
  7944 ;; Defined at:
  7945 ;;		line 5 in file "delay.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;  delay           2   15[COMRAM] int 
  7948 ;; Auto vars:     Size  Location     Type
  7949 ;;  i               2   20[COMRAM] int 
  7950 ;;  val             2   18[COMRAM] int 
  7951 ;; Return value:  Size  Location     Type
  7952 ;;                  1    wreg      void 
  7953 ;; Registers used:
  7954 ;;		wreg, status,2, status,0
  7955 ;; Tracked objects:
  7956 ;;		On entry : 0/0
  7957 ;;		On exit  : 0/0
  7958 ;;		Unchanged: 0/0
  7959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7960 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7962 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7963 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7964 ;;Total ram usage:        7 bytes
  7965 ;; Hardware stack levels used:    1
  7966 ;; Hardware stack levels required when called:    5
  7967 ;; This function calls:
  7968 ;;		Nothing
  7969 ;; This function is called by:
  7970 ;;		_write_lcd_cmd
  7971 ;;		_write_lcd_data
  7972 ;;		_is_busy
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           	psect	text33
  7977  0031AA                     __ptext33:
  7978                           	opt stack 0
  7979  0031AA                     _delay:
  7980                           	opt stack 21
  7981                           
  7982                           ;delay.c: 7: int val = 0, i;
  7983                           
  7984                           ;incstack = 0
  7985  0031AA  0E00               	movlw	0
  7986  0031AC  6E14               	movwf	delay@val+1,c
  7987  0031AE  0E00               	movlw	0
  7988  0031B0  6E13               	movwf	delay@val,c
  7989                           
  7990                           ;delay.c: 8: for (val = 0; val < delay; val++) {
  7991  0031B2  0E00               	movlw	0
  7992  0031B4  6E14               	movwf	delay@val+1,c
  7993  0031B6  0E00               	movlw	0
  7994  0031B8  6E13               	movwf	delay@val,c
  7995  0031BA  D011               	goto	l5533
  7996  0031BC                     l5521:
  7997                           
  7998                           ;delay.c: 9: for(i=0; i<350; i++)
  7999  0031BC  0E00               	movlw	0
  8000  0031BE  6E16               	movwf	delay@i+1,c
  8001  0031C0  0E00               	movlw	0
  8002  0031C2  6E15               	movwf	delay@i,c
  8003  0031C4                     l5523:
  8004  0031C4  BE16               	btfsc	delay@i+1,7,c
  8005  0031C6  D006               	goto	l5527
  8006  0031C8  0E5E               	movlw	94
  8007  0031CA  5C15               	subwf	delay@i,w,c
  8008  0031CC  0E01               	movlw	1
  8009  0031CE  5816               	subwfb	delay@i+1,w,c
  8010  0031D0  B0D8               	btfsc	status,0,c
  8011  0031D2  D003               	goto	l5531
  8012  0031D4                     l5527:
  8013                           
  8014                           ;delay.c: 10: {
  8015  0031D4  4A15               	infsnz	delay@i,f,c
  8016  0031D6  2A16               	incf	delay@i+1,f,c
  8017  0031D8  D7F5               	goto	l5523
  8018  0031DA                     l5531:
  8019  0031DA  4A13               	infsnz	delay@val,f,c
  8020  0031DC  2A14               	incf	delay@val+1,f,c
  8021  0031DE                     l5533:
  8022  0031DE  5010               	movf	delay@delay,w,c
  8023  0031E0  5C13               	subwf	delay@val,w,c
  8024  0031E2  5014               	movf	delay@val+1,w,c
  8025  0031E4  0A80               	xorlw	128
  8026  0031E6  6E12               	movwf	??_delay& (0+255),c
  8027  0031E8  5011               	movf	delay@delay+1,w,c
  8028  0031EA  0A80               	xorlw	128
  8029  0031EC  5812               	subwfb	??_delay& (0+255),w,c
  8030  0031EE  B0D8               	btfsc	status,0,c
  8031  0031F0  0012               	return	
  8032  0031F2  D7E4               	goto	l5521
  8033  0031F4                     __end_of_delay:
  8034                           	opt stack 0
  8035                           tblptru	equ	0xFF8
  8036                           tblptrh	equ	0xFF7
  8037                           tblptrl	equ	0xFF6
  8038                           tablat	equ	0xFF5
  8039                           prodh	equ	0xFF4
  8040                           prodl	equ	0xFF3
  8041                           intcon	equ	0xFF2
  8042                           postinc0	equ	0xFEE
  8043                           wreg	equ	0xFE8
  8044                           indf1	equ	0xFE7
  8045                           postdec1	equ	0xFE5
  8046                           fsr1h	equ	0xFE2
  8047                           fsr1l	equ	0xFE1
  8048                           indf2	equ	0xFDF
  8049                           postinc2	equ	0xFDE
  8050                           fsr2h	equ	0xFDA
  8051                           fsr2l	equ	0xFD9
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function _memcpy *****************
  8055 ;; Defined at:
  8056 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memcpy.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;  d1              2   15[COMRAM] PTR void 
  8059 ;;		 -> lcd_display_array(80), 
  8060 ;;  s1              2   17[COMRAM] PTR const void 
  8061 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1080), 
  8062 ;;  n               2   19[COMRAM] unsigned int 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  s               2   23[COMRAM] PTR const unsigned char 
  8065 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1080), 
  8066 ;;  d               2   21[COMRAM] PTR unsigned char 
  8067 ;;		 -> lcd_display_array(80), 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  2   15[COMRAM] PTR void 
  8070 ;; Registers used:
  8071 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8077 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8080 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8081 ;;Total ram usage:       10 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; Hardware stack levels required when called:    5
  8084 ;; This function calls:
  8085 ;;		Nothing
  8086 ;; This function is called by:
  8087 ;;		_clcd_display_string_config
  8088 ;;		_scroll_left_to_right
  8089 ;;		_scroll_right_to_left
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           	psect	text34
  8094  00330A                     __ptext34:
  8095                           	opt stack 0
  8096  00330A                     _memcpy:
  8097                           	opt stack 23
  8098                           
  8099                           ;incstack = 0
  8100  00330A  C012  F018         	movff	memcpy@s1,memcpy@s
  8101  00330E  C013  F019         	movff	memcpy@s1+1,memcpy@s+1
  8102  003312  C010  F016         	movff	memcpy@d1,memcpy@d
  8103  003316  C011  F017         	movff	memcpy@d1+1,memcpy@d+1
  8104  00331A  D00E               	goto	l5705
  8105  00331C                     l5699:
  8106  00331C  C018  FFD9         	movff	memcpy@s,fsr2l
  8107  003320  C019  FFDA         	movff	memcpy@s+1,fsr2h
  8108  003324  C016  FFE1         	movff	memcpy@d,fsr1l
  8109  003328  C017  FFE2         	movff	memcpy@d+1,fsr1h
  8110  00332C  CFDF FFE7          	movff	indf2,indf1
  8111  003330  4A18               	infsnz	memcpy@s,f,c
  8112  003332  2A19               	incf	memcpy@s+1,f,c
  8113  003334  4A16               	infsnz	memcpy@d,f,c
  8114  003336  2A17               	incf	memcpy@d+1,f,c
  8115  003338                     l5705:
  8116  003338  0614               	decf	memcpy@n,f,c
  8117  00333A  A0D8               	btfss	status,0,c
  8118  00333C  0615               	decf	memcpy@n+1,f,c
  8119  00333E  2814               	incf	memcpy@n,w,c
  8120  003340  E1ED               	bnz	l5699
  8121  003342  2815               	incf	memcpy@n+1,w,c
  8122  003344  B4D8               	btfsc	status,2,c
  8123  003346  0012               	return	
  8124  003348  D7E9               	goto	l5699
  8125  00334A                     __end_of_memcpy:
  8126                           	opt stack 0
  8127                           tblptru	equ	0xFF8
  8128                           tblptrh	equ	0xFF7
  8129                           tblptrl	equ	0xFF6
  8130                           tablat	equ	0xFF5
  8131                           prodh	equ	0xFF4
  8132                           prodl	equ	0xFF3
  8133                           intcon	equ	0xFF2
  8134                           postinc0	equ	0xFEE
  8135                           wreg	equ	0xFE8
  8136                           indf1	equ	0xFE7
  8137                           postdec1	equ	0xFE5
  8138                           fsr1h	equ	0xFE2
  8139                           fsr1l	equ	0xFE1
  8140                           indf2	equ	0xFDF
  8141                           postinc2	equ	0xFDE
  8142                           fsr2h	equ	0xFDA
  8143                           fsr2l	equ	0xFD9
  8144                           status	equ	0xFD8
  8145                           
  8146 ;; *************** function __delay_MS *****************
  8147 ;; Defined at:
  8148 ;;		line 29 in file "delay.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;  delay           2   15[COMRAM] int 
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;  val             2   18[COMRAM] int 
  8153 ;; Return value:  Size  Location     Type
  8154 ;;                  1    wreg      void 
  8155 ;; Registers used:
  8156 ;;		wreg, status,2, status,0, cstack
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8162 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8163 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8164 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8165 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;Total ram usage:        5 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:    6
  8169 ;; This function calls:
  8170 ;;		_TMR1_HasOverflowOccured
  8171 ;;		_TMR1_Reload
  8172 ;;		_TMR1_StartTimer
  8173 ;;		_TMR1_StopTimer
  8174 ;; This function is called by:
  8175 ;;		_init_CLCD_config
  8176 ;;		_main
  8177 ;;		_put_char
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           	psect	text35
  8182  003284                     __ptext35:
  8183                           	opt stack 0
  8184  003284                     __delay_MS:
  8185                           	opt stack 20
  8186                           
  8187                           ;delay.c: 30: int val = 0;
  8188                           
  8189                           ;incstack = 0
  8190  003284  0E00               	movlw	0
  8191  003286  6E14               	movwf	__delay_MS@val+1,c
  8192  003288  0E00               	movlw	0
  8193  00328A  6E13               	movwf	__delay_MS@val,c
  8194                           
  8195                           ;delay.c: 31: for (val = 0; val < delay; val++) {
  8196  00328C  0E00               	movlw	0
  8197  00328E  6E14               	movwf	__delay_MS@val+1,c
  8198  003290  0E00               	movlw	0
  8199  003292  6E13               	movwf	__delay_MS@val,c
  8200  003294  D00E               	goto	l5757
  8201  003296                     l5745:
  8202                           
  8203                           ;delay.c: 32: TMR1_Reload();
  8204  003296  ECA3  F01B         	call	_TMR1_Reload	;wreg free
  8205                           
  8206                           ;delay.c: 33: TMR1_StartTimer();
  8207  00329A  ECDA  F01B         	call	_TMR1_StartTimer	;wreg free
  8208  00329E                     l5749:
  8209  00329E  ECA9  F01B         	call	_TMR1_HasOverflowOccured	;wreg free
  8210  0032A2  0900               	iorlw	0
  8211  0032A4  B4D8               	btfsc	status,2,c
  8212  0032A6  D7FB               	goto	l5749
  8213                           
  8214                           ;delay.c: 35: TMR1_StopTimer();
  8215  0032A8  ECD6  F01B         	call	_TMR1_StopTimer	;wreg free
  8216                           
  8217                           ;delay.c: 36: PIR1bits.TMR1IF = 0;
  8218  0032AC  909E               	bcf	3998,0,c	;volatile
  8219  0032AE  4A13               	infsnz	__delay_MS@val,f,c
  8220  0032B0  2A14               	incf	__delay_MS@val+1,f,c
  8221  0032B2                     l5757:
  8222  0032B2  5010               	movf	__delay_MS@delay,w,c
  8223  0032B4  5C13               	subwf	__delay_MS@val,w,c
  8224  0032B6  5014               	movf	__delay_MS@val+1,w,c
  8225  0032B8  0A80               	xorlw	128
  8226  0032BA  6E12               	movwf	??__delay_MS& (0+255),c
  8227  0032BC  5011               	movf	__delay_MS@delay+1,w,c
  8228  0032BE  0A80               	xorlw	128
  8229  0032C0  5812               	subwfb	??__delay_MS& (0+255),w,c
  8230  0032C2  B0D8               	btfsc	status,0,c
  8231  0032C4  0012               	return	
  8232  0032C6  D7E7               	goto	l5745
  8233  0032C8                     __end_of__delay_MS:
  8234                           	opt stack 0
  8235                           tblptru	equ	0xFF8
  8236                           tblptrh	equ	0xFF7
  8237                           tblptrl	equ	0xFF6
  8238                           tablat	equ	0xFF5
  8239                           prodh	equ	0xFF4
  8240                           prodl	equ	0xFF3
  8241                           intcon	equ	0xFF2
  8242                           postinc0	equ	0xFEE
  8243                           wreg	equ	0xFE8
  8244                           indf1	equ	0xFE7
  8245                           postdec1	equ	0xFE5
  8246                           fsr1h	equ	0xFE2
  8247                           fsr1l	equ	0xFE1
  8248                           indf2	equ	0xFDF
  8249                           postinc2	equ	0xFDE
  8250                           fsr2h	equ	0xFDA
  8251                           fsr2l	equ	0xFD9
  8252                           status	equ	0xFD8
  8253                           
  8254 ;; *************** function _TMR1_StopTimer *****************
  8255 ;; Defined at:
  8256 ;;		line 94 in file "mcc_generated_files/tmr1.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;		None
  8259 ;; Auto vars:     Size  Location     Type
  8260 ;;		None
  8261 ;; Return value:  Size  Location     Type
  8262 ;;                  1    wreg      void 
  8263 ;; Registers used:
  8264 ;;		None
  8265 ;; Tracked objects:
  8266 ;;		On entry : 0/0
  8267 ;;		On exit  : 0/0
  8268 ;;		Unchanged: 0/0
  8269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8274 ;;Total ram usage:        0 bytes
  8275 ;; Hardware stack levels used:    1
  8276 ;; Hardware stack levels required when called:    5
  8277 ;; This function calls:
  8278 ;;		Nothing
  8279 ;; This function is called by:
  8280 ;;		__delay_MS
  8281 ;;		_main
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           	psect	text36
  8286  0037AC                     __ptext36:
  8287                           	opt stack 0
  8288  0037AC                     _TMR1_StopTimer:
  8289                           	opt stack 20
  8290                           
  8291                           ;tmr1.c: 97: T1CONbits.TMR1ON = 0;
  8292                           
  8293                           ;incstack = 0
  8294  0037AC  90CD               	bcf	4045,0,c	;volatile
  8295  0037AE  0012               	return		;funcret
  8296  0037B0                     __end_of_TMR1_StopTimer:
  8297                           	opt stack 0
  8298                           tblptru	equ	0xFF8
  8299                           tblptrh	equ	0xFF7
  8300                           tblptrl	equ	0xFF6
  8301                           tablat	equ	0xFF5
  8302                           prodh	equ	0xFF4
  8303                           prodl	equ	0xFF3
  8304                           intcon	equ	0xFF2
  8305                           postinc0	equ	0xFEE
  8306                           wreg	equ	0xFE8
  8307                           indf1	equ	0xFE7
  8308                           postdec1	equ	0xFE5
  8309                           fsr1h	equ	0xFE2
  8310                           fsr1l	equ	0xFE1
  8311                           indf2	equ	0xFDF
  8312                           postinc2	equ	0xFDE
  8313                           fsr2h	equ	0xFDA
  8314                           fsr2l	equ	0xFD9
  8315                           status	equ	0xFD8
  8316                           
  8317 ;; *************** function _TMR1_Reload *****************
  8318 ;; Defined at:
  8319 ;;		line 136 in file "mcc_generated_files/tmr1.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;		None
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;		None
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  1    wreg      void 
  8326 ;; Registers used:
  8327 ;;		wreg, status,2
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8337 ;;Total ram usage:        0 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    5
  8340 ;; This function calls:
  8341 ;;		Nothing
  8342 ;; This function is called by:
  8343 ;;		__delay_MS
  8344 ;; This function uses a non-reentrant model
  8345 ;;
  8346                           
  8347                           	psect	text37
  8348  003746                     __ptext37:
  8349                           	opt stack 0
  8350  003746                     _TMR1_Reload:
  8351                           	opt stack 20
  8352                           
  8353                           ;tmr1.c: 139: TMR1H = (timer1ReloadVal >> 8);
  8354                           
  8355                           ;incstack = 0
  8356  003746  0100               	movlb	0	; () banked
  8357  003748  51FC               	movf	(_timer1ReloadVal+1)& (0+255),w,b	;volatile
  8358  00374A  6ECF               	movwf	4047,c	;volatile
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;tmr1.c: 140: TMR1L = (uint8_t) timer1ReloadVal;
  8362  00374C  C0FB  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8363                           
  8364                           ; BSR set to: 0
  8365  003750  0012               	return		;funcret
  8366  003752                     __end_of_TMR1_Reload:
  8367                           	opt stack 0
  8368                           tblptru	equ	0xFF8
  8369                           tblptrh	equ	0xFF7
  8370                           tblptrl	equ	0xFF6
  8371                           tablat	equ	0xFF5
  8372                           prodh	equ	0xFF4
  8373                           prodl	equ	0xFF3
  8374                           intcon	equ	0xFF2
  8375                           postinc0	equ	0xFEE
  8376                           wreg	equ	0xFE8
  8377                           indf1	equ	0xFE7
  8378                           postdec1	equ	0xFE5
  8379                           fsr1h	equ	0xFE2
  8380                           fsr1l	equ	0xFE1
  8381                           indf2	equ	0xFDF
  8382                           postinc2	equ	0xFDE
  8383                           fsr2h	equ	0xFDA
  8384                           fsr2l	equ	0xFD9
  8385                           status	equ	0xFD8
  8386                           
  8387 ;; *************** function _TMR1_HasOverflowOccured *****************
  8388 ;; Defined at:
  8389 ;;		line 153 in file "mcc_generated_files/tmr1.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;		None
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;		None
  8394 ;; Return value:  Size  Location     Type
  8395 ;;                  1    wreg      unsigned char 
  8396 ;; Registers used:
  8397 ;;		wreg
  8398 ;; Tracked objects:
  8399 ;;		On entry : 0/0
  8400 ;;		On exit  : 0/0
  8401 ;;		Unchanged: 0/0
  8402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8407 ;;Total ram usage:        0 bytes
  8408 ;; Hardware stack levels used:    1
  8409 ;; Hardware stack levels required when called:    5
  8410 ;; This function calls:
  8411 ;;		Nothing
  8412 ;; This function is called by:
  8413 ;;		__delay_MS
  8414 ;; This function uses a non-reentrant model
  8415 ;;
  8416                           
  8417                           	psect	text38
  8418  003752                     __ptext38:
  8419                           	opt stack 0
  8420  003752                     _TMR1_HasOverflowOccured:
  8421                           	opt stack 20
  8422                           
  8423                           ;tmr1.c: 156: return(PIR1bits.TMR1IF);
  8424                           
  8425                           ; BSR set to: 0
  8426                           ;incstack = 0
  8427  003752  A09E               	btfss	3998,0,c	;volatile
  8428  003754  D002               	goto	u5230
  8429  003756  0E01               	movlw	1
  8430  003758  0012               	return	
  8431  00375A                     u5230:
  8432  00375A  0E00               	movlw	0
  8433  00375C  0012               	return	
  8434  00375E                     __end_of_TMR1_HasOverflowOccured:
  8435                           	opt stack 0
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           prodh	equ	0xFF4
  8441                           prodl	equ	0xFF3
  8442                           intcon	equ	0xFF2
  8443                           postinc0	equ	0xFEE
  8444                           wreg	equ	0xFE8
  8445                           indf1	equ	0xFE7
  8446                           postdec1	equ	0xFE5
  8447                           fsr1h	equ	0xFE2
  8448                           fsr1l	equ	0xFE1
  8449                           indf2	equ	0xFDF
  8450                           postinc2	equ	0xFDE
  8451                           fsr2h	equ	0xFDA
  8452                           fsr2l	equ	0xFD9
  8453                           status	equ	0xFD8
  8454                           
  8455 ;; *************** function ___awdiv *****************
  8456 ;; Defined at:
  8457 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8458 ;; Parameters:    Size  Location     Type
  8459 ;;  dividend        2   15[COMRAM] int 
  8460 ;;  divisor         2   17[COMRAM] int 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  quotient        2   21[COMRAM] int 
  8463 ;;  sign            1   20[COMRAM] unsigned char 
  8464 ;;  counter         1   19[COMRAM] unsigned char 
  8465 ;; Return value:  Size  Location     Type
  8466 ;;                  2   15[COMRAM] int 
  8467 ;; Registers used:
  8468 ;;		wreg, status,2, status,0
  8469 ;; Tracked objects:
  8470 ;;		On entry : 0/0
  8471 ;;		On exit  : 0/0
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;Total ram usage:        8 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:    5
  8481 ;; This function calls:
  8482 ;;		Nothing
  8483 ;; This function is called by:
  8484 ;;		_init_clcd_cusotom_lcd
  8485 ;;		_display_string
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           	psect	text39
  8490  002D30                     __ptext39:
  8491                           	opt stack 0
  8492  002D30                     ___awdiv:
  8493                           	opt stack 22
  8494                           
  8495                           ;incstack = 0
  8496  002D30  0E00               	movlw	0
  8497  002D32  6E15               	movwf	___awdiv@sign,c
  8498  002D34  AE13               	btfss	___awdiv@divisor+1,7,c
  8499  002D36  D006               	goto	l6095
  8500  002D38  6C12               	negf	___awdiv@divisor,c
  8501  002D3A  1E13               	comf	___awdiv@divisor+1,f,c
  8502  002D3C  B0D8               	btfsc	status,0,c
  8503  002D3E  2A13               	incf	___awdiv@divisor+1,f,c
  8504  002D40  0E01               	movlw	1
  8505  002D42  6E15               	movwf	___awdiv@sign,c
  8506  002D44                     l6095:
  8507  002D44  AE11               	btfss	___awdiv@dividend+1,7,c
  8508  002D46  D006               	goto	l6101
  8509  002D48  6C10               	negf	___awdiv@dividend,c
  8510  002D4A  1E11               	comf	___awdiv@dividend+1,f,c
  8511  002D4C  B0D8               	btfsc	status,0,c
  8512  002D4E  2A11               	incf	___awdiv@dividend+1,f,c
  8513  002D50  0E01               	movlw	1
  8514  002D52  1A15               	xorwf	___awdiv@sign,f,c
  8515  002D54                     l6101:
  8516  002D54  0E00               	movlw	0
  8517  002D56  6E17               	movwf	___awdiv@quotient+1,c
  8518  002D58  0E00               	movlw	0
  8519  002D5A  6E16               	movwf	___awdiv@quotient,c
  8520  002D5C  5012               	movf	___awdiv@divisor,w,c
  8521  002D5E  1013               	iorwf	___awdiv@divisor+1,w,c
  8522  002D60  B4D8               	btfsc	status,2,c
  8523  002D62  D01C               	goto	l6123
  8524  002D64  0E01               	movlw	1
  8525  002D66  6E14               	movwf	___awdiv@counter,c
  8526  002D68  D004               	goto	l6109
  8527  002D6A                     l6107:
  8528  002D6A  90D8               	bcf	status,0,c
  8529  002D6C  3612               	rlcf	___awdiv@divisor,f,c
  8530  002D6E  3613               	rlcf	___awdiv@divisor+1,f,c
  8531  002D70  2A14               	incf	___awdiv@counter,f,c
  8532  002D72                     l6109:
  8533  002D72  AE13               	btfss	___awdiv@divisor+1,7,c
  8534  002D74  D7FA               	goto	l6107
  8535  002D76                     l6111:
  8536  002D76  90D8               	bcf	status,0,c
  8537  002D78  3616               	rlcf	___awdiv@quotient,f,c
  8538  002D7A  3617               	rlcf	___awdiv@quotient+1,f,c
  8539  002D7C  5012               	movf	___awdiv@divisor,w,c
  8540  002D7E  5C10               	subwf	___awdiv@dividend,w,c
  8541  002D80  5013               	movf	___awdiv@divisor+1,w,c
  8542  002D82  5811               	subwfb	___awdiv@dividend+1,w,c
  8543  002D84  A0D8               	btfss	status,0,c
  8544  002D86  D005               	goto	l6119
  8545  002D88  5012               	movf	___awdiv@divisor,w,c
  8546  002D8A  5E10               	subwf	___awdiv@dividend,f,c
  8547  002D8C  5013               	movf	___awdiv@divisor+1,w,c
  8548  002D8E  5A11               	subwfb	___awdiv@dividend+1,f,c
  8549  002D90  8016               	bsf	___awdiv@quotient,0,c
  8550  002D92                     l6119:
  8551  002D92  90D8               	bcf	status,0,c
  8552  002D94  3213               	rrcf	___awdiv@divisor+1,f,c
  8553  002D96  3212               	rrcf	___awdiv@divisor,f,c
  8554  002D98  2E14               	decfsz	___awdiv@counter,f,c
  8555  002D9A  D7ED               	goto	l6111
  8556  002D9C                     l6123:
  8557  002D9C  5015               	movf	___awdiv@sign,w,c
  8558  002D9E  B4D8               	btfsc	status,2,c
  8559  002DA0  D004               	goto	l6127
  8560  002DA2  6C16               	negf	___awdiv@quotient,c
  8561  002DA4  1E17               	comf	___awdiv@quotient+1,f,c
  8562  002DA6  B0D8               	btfsc	status,0,c
  8563  002DA8  2A17               	incf	___awdiv@quotient+1,f,c
  8564  002DAA                     l6127:
  8565  002DAA  C016  F010         	movff	___awdiv@quotient,?___awdiv
  8566  002DAE  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
  8567  002DB2  0012               	return	
  8568  002DB4                     __end_of___awdiv:
  8569                           	opt stack 0
  8570                           tblptru	equ	0xFF8
  8571                           tblptrh	equ	0xFF7
  8572                           tblptrl	equ	0xFF6
  8573                           tablat	equ	0xFF5
  8574                           prodh	equ	0xFF4
  8575                           prodl	equ	0xFF3
  8576                           intcon	equ	0xFF2
  8577                           postinc0	equ	0xFEE
  8578                           wreg	equ	0xFE8
  8579                           indf1	equ	0xFE7
  8580                           postdec1	equ	0xFE5
  8581                           fsr1h	equ	0xFE2
  8582                           fsr1l	equ	0xFE1
  8583                           indf2	equ	0xFDF
  8584                           postinc2	equ	0xFDE
  8585                           fsr2h	equ	0xFDA
  8586                           fsr2l	equ	0xFD9
  8587                           status	equ	0xFD8
  8588                           
  8589 ;; *************** function _clcd_max_row *****************
  8590 ;; Defined at:
  8591 ;;		line 107 in file "clcd.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;		None
  8594 ;; Auto vars:     Size  Location     Type
  8595 ;;		None
  8596 ;; Return value:  Size  Location     Type
  8597 ;;                  1    wreg      unsigned char 
  8598 ;; Registers used:
  8599 ;;		wreg, status,2
  8600 ;; Tracked objects:
  8601 ;;		On entry : 0/0
  8602 ;;		On exit  : 0/0
  8603 ;;		Unchanged: 0/0
  8604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8609 ;;Total ram usage:        0 bytes
  8610 ;; Hardware stack levels used:    1
  8611 ;; Hardware stack levels required when called:    5
  8612 ;; This function calls:
  8613 ;;		Nothing
  8614 ;; This function is called by:
  8615 ;;		_reply_to_host
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619                           	psect	text40
  8620  00370E                     __ptext40:
  8621                           	opt stack 0
  8622  00370E                     _clcd_max_row:
  8623                           	opt stack 23
  8624                           
  8625                           ;clcd.c: 108: if (clcd_config_data.init_done == 0)
  8626                           
  8627                           ;incstack = 0
  8628  00370E  5049               	movf	_clcd_config_data,w,c
  8629  003710  A4D8               	btfss	status,2,c
  8630  003712  D002               	goto	l6269
  8631                           
  8632                           ;clcd.c: 109: return 0;
  8633  003714  0E00               	movlw	0
  8634  003716  0012               	return	
  8635  003718                     l6269:
  8636                           
  8637                           ;clcd.c: 110: else
  8638                           ;clcd.c: 111: return clcd_config_data.clcd_max_row;
  8639  003718  504A               	movf	_clcd_config_data+1,w,c
  8640  00371A  0012               	return	
  8641  00371C                     __end_of_clcd_max_row:
  8642                           	opt stack 0
  8643                           tblptru	equ	0xFF8
  8644                           tblptrh	equ	0xFF7
  8645                           tblptrl	equ	0xFF6
  8646                           tablat	equ	0xFF5
  8647                           prodh	equ	0xFF4
  8648                           prodl	equ	0xFF3
  8649                           intcon	equ	0xFF2
  8650                           postinc0	equ	0xFEE
  8651                           wreg	equ	0xFE8
  8652                           indf1	equ	0xFE7
  8653                           postdec1	equ	0xFE5
  8654                           fsr1h	equ	0xFE2
  8655                           fsr1l	equ	0xFE1
  8656                           indf2	equ	0xFDF
  8657                           postinc2	equ	0xFDE
  8658                           fsr2h	equ	0xFDA
  8659                           fsr2l	equ	0xFD9
  8660                           status	equ	0xFD8
  8661                           
  8662 ;; *************** function _clcd_max_col *****************
  8663 ;; Defined at:
  8664 ;;		line 114 in file "clcd.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;		None
  8667 ;; Auto vars:     Size  Location     Type
  8668 ;;		None
  8669 ;; Return value:  Size  Location     Type
  8670 ;;                  1    wreg      unsigned char 
  8671 ;; Registers used:
  8672 ;;		wreg, status,2
  8673 ;; Tracked objects:
  8674 ;;		On entry : 0/0
  8675 ;;		On exit  : 0/0
  8676 ;;		Unchanged: 0/0
  8677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;Total ram usage:        0 bytes
  8683 ;; Hardware stack levels used:    1
  8684 ;; Hardware stack levels required when called:    5
  8685 ;; This function calls:
  8686 ;;		Nothing
  8687 ;; This function is called by:
  8688 ;;		_reply_to_host
  8689 ;; This function uses a non-reentrant model
  8690 ;;
  8691                           
  8692                           	psect	text41
  8693  00371C                     __ptext41:
  8694                           	opt stack 0
  8695  00371C                     _clcd_max_col:
  8696                           	opt stack 23
  8697                           
  8698                           ;clcd.c: 115: if (clcd_config_data.init_done == 0)
  8699                           
  8700                           ;incstack = 0
  8701  00371C  5049               	movf	_clcd_config_data,w,c
  8702  00371E  A4D8               	btfss	status,2,c
  8703  003720  D002               	goto	l6281
  8704                           
  8705                           ;clcd.c: 116: return 0;
  8706  003722  0E00               	movlw	0
  8707  003724  0012               	return	
  8708  003726                     l6281:
  8709                           
  8710                           ;clcd.c: 117: else
  8711                           ;clcd.c: 118: return clcd_config_data.clcd_max_col;
  8712  003726  504B               	movf	_clcd_config_data+2,w,c
  8713  003728  0012               	return	
  8714  00372A                     __end_of_clcd_max_col:
  8715                           	opt stack 0
  8716                           tblptru	equ	0xFF8
  8717                           tblptrh	equ	0xFF7
  8718                           tblptrl	equ	0xFF6
  8719                           tablat	equ	0xFF5
  8720                           prodh	equ	0xFF4
  8721                           prodl	equ	0xFF3
  8722                           intcon	equ	0xFF2
  8723                           postinc0	equ	0xFEE
  8724                           wreg	equ	0xFE8
  8725                           indf1	equ	0xFE7
  8726                           postdec1	equ	0xFE5
  8727                           fsr1h	equ	0xFE2
  8728                           fsr1l	equ	0xFE1
  8729                           indf2	equ	0xFDF
  8730                           postinc2	equ	0xFDE
  8731                           fsr2h	equ	0xFDA
  8732                           fsr2l	equ	0xFD9
  8733                           status	equ	0xFD8
  8734                           
  8735 ;; *************** function _parse_cmd_str *****************
  8736 ;; Defined at:
  8737 ;;		line 58 in file "cmd_consol.c"
  8738 ;; Parameters:    Size  Location     Type
  8739 ;;  str             2    0[BANK0 ] PTR unsigned char 
  8740 ;;		 -> uart_str(150), 
  8741 ;; Auto vars:     Size  Location     Type
  8742 ;;  i               1    6[BANK0 ] unsigned char 
  8743 ;;  i               1    9[BANK0 ] unsigned char 
  8744 ;;  i               1    5[BANK0 ] unsigned char 
  8745 ;;  uid             1   13[BANK0 ] unsigned char 
  8746 ;;  uid             1   12[BANK0 ] unsigned char 
  8747 ;;  scroll          1   11[BANK0 ] unsigned char 
  8748 ;;  uid             1   10[BANK0 ] unsigned char 
  8749 ;;  column          1    8[BANK0 ] unsigned char 
  8750 ;;  row             1    7[BANK0 ] unsigned char 
  8751 ;;  temp            2   16[BANK0 ] PTR unsigned char 
  8752 ;;		 -> uart_str(150), STR_64(7), STR_62(7), STR_60(7), 
  8753 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
  8754 ;;		 -> STR_48(7), STR_47(7), STR_43(7), STR_40(7), 
  8755 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
  8756 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
  8757 ;;		 -> STR_24(7), NULL(0), 
  8758 ;;  ptr             2   14[BANK0 ] PTR unsigned char 
  8759 ;;		 -> uart_str(150), 
  8760 ;; Return value:  Size  Location     Type
  8761 ;;                  1    wreg      unsigned char 
  8762 ;; Registers used:
  8763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8764 ;; Tracked objects:
  8765 ;;		On entry : 0/0
  8766 ;;		On exit  : 0/0
  8767 ;;		Unchanged: 0/0
  8768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8769 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8772 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8773 ;;Total ram usage:       18 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; Hardware stack levels required when called:    9
  8776 ;; This function calls:
  8777 ;;		_atoi
  8778 ;;		_collect_column
  8779 ;;		_collect_row
  8780 ;;		_isdigit
  8781 ;;		_memset
  8782 ;;		_printf
  8783 ;;		_strcpy
  8784 ;;		_strlen
  8785 ;;		_strstr
  8786 ;;		_strtok
  8787 ;; This function is called by:
  8788 ;;		_cmd_consol_task
  8789 ;; This function uses a non-reentrant model
  8790 ;;
  8791                           
  8792                           	psect	text42
  8793  0000AA                     __ptext42:
  8794                           	opt stack 0
  8795  0000AA                     _parse_cmd_str:
  8796                           	opt stack 20
  8797                           
  8798                           ;cmd_consol.c: 59: printf("%s..2\r\n", str);
  8799                           
  8800                           ;incstack = 0
  8801  0000AA  0EAC               	movlw	low STR_22
  8802  0000AC  6E24               	movwf	printf@f,c
  8803  0000AE  0EFF               	movlw	high STR_22
  8804  0000B0  6E25               	movwf	printf@f+1,c
  8805  0000B2  C0DA  F026         	movff	parse_cmd_str@str,?_printf+2
  8806  0000B6  C0DB  F027         	movff	parse_cmd_str@str+1,?_printf+3
  8807  0000BA  EC0F  F00F         	call	_printf	;wreg free
  8808                           
  8809                           ;cmd_consol.c: 60: char *temp;
  8810                           ;cmd_consol.c: 61: char *ptr = str;
  8811  0000BE  C0DA  F0E8         	movff	parse_cmd_str@str,parse_cmd_str@ptr
  8812  0000C2  C0DB  F0E9         	movff	parse_cmd_str@str+1,parse_cmd_str@ptr+1
  8813                           
  8814                           ;cmd_consol.c: 62: if ((temp = strstr(ptr, "KLM+MC?")) != (0)) {
  8815  0000C6  C0E8  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8816  0000CA  C0E9  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8817  0000CE  0EB4               	movlw	low STR_23
  8818  0000D0  6E2F               	movwf	strstr@s2,c
  8819  0000D2  0EFF               	movlw	high STR_23
  8820  0000D4  6E30               	movwf	strstr@s2+1,c
  8821  0000D6  EC05  F016         	call	_strstr	;wreg free
  8822  0000DA  C02D  F0EA         	movff	?_strstr,parse_cmd_str@temp
  8823  0000DE  C02E  F0EB         	movff	?_strstr+1,parse_cmd_str@temp+1
  8824  0000E2  0100               	movlb	0	; () banked
  8825  0000E4  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  8826  0000E6  0100               	movlb	0	; () banked
  8827  0000E8  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8828  0000EA  B4D8               	btfsc	status,2,c
  8829  0000EC  D038               	goto	l6527
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;cmd_consol.c: 63: temp = strtok(ptr, "-', /=");
  8833  0000EE  C0E8  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  8834  0000F2  C0E9  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  8835  0000F6  0EE1               	movlw	low STR_24
  8836  0000F8  6E1F               	movwf	strtok@s2,c
  8837  0000FA  0EFF               	movlw	high STR_24
  8838  0000FC  6E20               	movwf	strtok@s2+1,c
  8839  0000FE  EC4C  F015         	call	_strtok	;wreg free
  8840  000102  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  8841  000106  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  8842                           
  8843                           ;cmd_consol.c: 64: if (temp != (0)) {
  8844  00010A  0100               	movlb	0	; () banked
  8845  00010C  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  8846  00010E  0100               	movlb	0	; () banked
  8847  000110  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8848  000112  B4D8               	btfsc	status,2,c
  8849  000114  EF31  F006         	goto	l6873
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;cmd_consol.c: 65: strcpy(CMD, temp);
  8853  000118  0ECB               	movlw	low _CMD
  8854  00011A  6E10               	movwf	strcpy@to,c
  8855  00011C  0E00               	movlw	high _CMD
  8856  00011E  6E11               	movwf	strcpy@to+1,c
  8857  000120  C0EA  F012         	movff	parse_cmd_str@temp,strcpy@from
  8858  000124  C0EB  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  8859  000128  EC1F  F019         	call	_strcpy	;wreg free
  8860                           
  8861                           ;cmd_consol.c: 66: valid_cmd = 1;
  8862  00012C  0E01               	movlw	1
  8863  00012E  0100               	movlb	0	; () banked
  8864  000130  6F84               	movwf	_valid_cmd& (0+255),b
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;cmd_consol.c: 67: memset(str, 0, strlen(str));
  8868  000132  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  8869  000136  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  8870  00013A  0E00               	movlw	0
  8871  00013C  6E27               	movwf	memset@c+1,c
  8872  00013E  0E00               	movlw	0
  8873  000140  6E26               	movwf	memset@c,c
  8874  000142  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  8875  000146  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  8876  00014A  EC0D  F018         	call	_strlen	;wreg free
  8877  00014E  C01E  F028         	movff	?_strlen,memset@n
  8878  000152  C01F  F029         	movff	?_strlen+1,memset@n+1
  8879  000156  EC5E  F01A         	call	_memset	;wreg free
  8880  00015A                     l6523:
  8881                           
  8882                           ;cmd_consol.c: 68: return 0;
  8883  00015A  0E00               	movlw	0
  8884  00015C  0012               	return	
  8885  00015E                     l6527:
  8886  00015E  C0E8  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8887  000162  C0E9  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8888  000166  0EBC               	movlw	low STR_25
  8889  000168  6E2F               	movwf	strstr@s2,c
  8890  00016A  0EFF               	movlw	high STR_25
  8891  00016C  6E30               	movwf	strstr@s2+1,c
  8892  00016E  EC05  F016         	call	_strstr	;wreg free
  8893  000172  C02D  F0EA         	movff	?_strstr,parse_cmd_str@temp
  8894  000176  C02E  F0EB         	movff	?_strstr+1,parse_cmd_str@temp+1
  8895  00017A  0100               	movlb	0	; () banked
  8896  00017C  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  8897  00017E  0100               	movlb	0	; () banked
  8898  000180  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8899  000182  B4D8               	btfsc	status,2,c
  8900  000184  D037               	goto	l6543
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;cmd_consol.c: 71: temp = strtok(ptr, "-', /=");
  8904  000186  C0E8  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  8905  00018A  C0E9  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  8906  00018E  0EE1               	movlw	low STR_24
  8907  000190  6E1F               	movwf	strtok@s2,c
  8908  000192  0EFF               	movlw	high STR_24
  8909  000194  6E20               	movwf	strtok@s2+1,c
  8910  000196  EC4C  F015         	call	_strtok	;wreg free
  8911  00019A  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  8912  00019E  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  8913                           
  8914                           ;cmd_consol.c: 72: if (temp != (0)) {
  8915  0001A2  0100               	movlb	0	; () banked
  8916  0001A4  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  8917  0001A6  0100               	movlb	0	; () banked
  8918  0001A8  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8919  0001AA  B4D8               	btfsc	status,2,c
  8920  0001AC  EF31  F006         	goto	l6873
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;cmd_consol.c: 73: strcpy(CMD, temp);
  8924  0001B0  0ECB               	movlw	low _CMD
  8925  0001B2  6E10               	movwf	strcpy@to,c
  8926  0001B4  0E00               	movlw	high _CMD
  8927  0001B6  6E11               	movwf	strcpy@to+1,c
  8928  0001B8  C0EA  F012         	movff	parse_cmd_str@temp,strcpy@from
  8929  0001BC  C0EB  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  8930  0001C0  EC1F  F019         	call	_strcpy	;wreg free
  8931                           
  8932                           ;cmd_consol.c: 74: valid_cmd = 1;
  8933  0001C4  0E01               	movlw	1
  8934  0001C6  0100               	movlb	0	; () banked
  8935  0001C8  6F84               	movwf	_valid_cmd& (0+255),b
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;cmd_consol.c: 75: memset(str, 0, strlen(str));
  8939  0001CA  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  8940  0001CE  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  8941  0001D2  0E00               	movlw	0
  8942  0001D4  6E27               	movwf	memset@c+1,c
  8943  0001D6  0E00               	movlw	0
  8944  0001D8  6E26               	movwf	memset@c,c
  8945  0001DA  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  8946  0001DE  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  8947  0001E2  EC0D  F018         	call	_strlen	;wreg free
  8948  0001E6  C01E  F028         	movff	?_strlen,memset@n
  8949  0001EA  C01F  F029         	movff	?_strlen+1,memset@n+1
  8950  0001EE  EC5E  F01A         	call	_memset	;wreg free
  8951  0001F2  D7B3               	goto	l6523
  8952  0001F4                     l6543:
  8953  0001F4  C0E8  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8954  0001F8  C0E9  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8955  0001FC  0E50               	movlw	low STR_27
  8956  0001FE  6E2F               	movwf	strstr@s2,c
  8957  000200  0EFF               	movlw	high STR_27
  8958  000202  6E30               	movwf	strstr@s2+1,c
  8959  000204  EC05  F016         	call	_strstr	;wreg free
  8960  000208  502D               	movf	?_strstr,w,c
  8961  00020A  102E               	iorwf	?_strstr+1,w,c
  8962  00020C  B4D8               	btfsc	status,2,c
  8963  00020E  D002               	goto	u6630
  8964  000210  0E01               	movlw	1
  8965  000212  D001               	goto	u6640
  8966  000214                     u6630:
  8967  000214  0E00               	movlw	0
  8968  000216                     u6640:
  8969  000216  0100               	movlb	0	; () banked
  8970  000218  6FEA               	movwf	parse_cmd_str@temp& (0+255),b
  8971  00021A  6BEB               	clrf	(parse_cmd_str@temp+1)& (0+255),b
  8972  00021C  0100               	movlb	0	; () banked
  8973  00021E  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  8974  000220  0100               	movlb	0	; () banked
  8975  000222  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8976  000224  B4D8               	btfsc	status,2,c
  8977  000226  D03D               	goto	l6561
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;cmd_consol.c: 79: temp = strtok(ptr, "-', /=");
  8981  000228  C0E8  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  8982  00022C  C0E9  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  8983  000230  0EE1               	movlw	low STR_24
  8984  000232  6E1F               	movwf	strtok@s2,c
  8985  000234  0EFF               	movlw	high STR_24
  8986  000236  6E20               	movwf	strtok@s2+1,c
  8987  000238  EC4C  F015         	call	_strtok	;wreg free
  8988  00023C  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  8989  000240  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  8990                           
  8991                           ;cmd_consol.c: 80: if (temp != (0)) {
  8992  000244  0100               	movlb	0	; () banked
  8993  000246  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  8994  000248  0100               	movlb	0	; () banked
  8995  00024A  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8996  00024C  B4D8               	btfsc	status,2,c
  8997  00024E  EF31  F006         	goto	l6873
  8998                           
  8999                           ; BSR set to: 0
  9000                           ;cmd_consol.c: 81: strcpy(CMD, temp);
  9001  000252  0ECB               	movlw	low _CMD
  9002  000254  6E10               	movwf	strcpy@to,c
  9003  000256  0E00               	movlw	high _CMD
  9004  000258  6E11               	movwf	strcpy@to+1,c
  9005  00025A  C0EA  F012         	movff	parse_cmd_str@temp,strcpy@from
  9006  00025E  C0EB  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9007  000262  EC1F  F019         	call	_strcpy	;wreg free
  9008                           
  9009                           ;cmd_consol.c: 82: valid_cmd = 1;
  9010  000266  0E01               	movlw	1
  9011  000268  0100               	movlb	0	; () banked
  9012  00026A  6F84               	movwf	_valid_cmd& (0+255),b
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;cmd_consol.c: 83: memset(str, 0, strlen(str));
  9016  00026C  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9017  000270  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9018  000274  0E00               	movlw	0
  9019  000276  6E27               	movwf	memset@c+1,c
  9020  000278  0E00               	movlw	0
  9021  00027A  6E26               	movwf	memset@c,c
  9022  00027C  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9023  000280  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9024  000284  EC0D  F018         	call	_strlen	;wreg free
  9025  000288  C01E  F028         	movff	?_strlen,memset@n
  9026  00028C  C01F  F029         	movff	?_strlen+1,memset@n+1
  9027  000290  EC5E  F01A         	call	_memset	;wreg free
  9028                           
  9029                           ;cmd_consol.c: 84: printf(".....\r\n");
  9030  000294  0EA4               	movlw	low STR_29
  9031  000296  6E24               	movwf	printf@f,c
  9032  000298  0EFF               	movlw	high STR_29
  9033  00029A  6E25               	movwf	printf@f+1,c
  9034  00029C  EC0F  F00F         	call	_printf	;wreg free
  9035  0002A0  D75C               	goto	l6523
  9036  0002A2                     l6561:
  9037  0002A2  C0E8  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9038  0002A6  C0E9  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9039  0002AA  0E89               	movlw	low STR_30
  9040  0002AC  6E2F               	movwf	strstr@s2,c
  9041  0002AE  0EFF               	movlw	high STR_30
  9042  0002B0  6E30               	movwf	strstr@s2+1,c
  9043  0002B2  EC05  F016         	call	_strstr	;wreg free
  9044  0002B6  C02D  F0EA         	movff	?_strstr,parse_cmd_str@temp
  9045  0002BA  C02E  F0EB         	movff	?_strstr+1,parse_cmd_str@temp+1
  9046  0002BE  0100               	movlb	0	; () banked
  9047  0002C0  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9048  0002C2  0100               	movlb	0	; () banked
  9049  0002C4  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9050  0002C6  B4D8               	btfsc	status,2,c
  9051  0002C8  D093               	goto	l6599
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;cmd_consol.c: 88: temp = strtok(ptr, "-', /=");
  9055  0002CA  C0E8  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9056  0002CE  C0E9  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9057  0002D2  0EE1               	movlw	low STR_24
  9058  0002D4  6E1F               	movwf	strtok@s2,c
  9059  0002D6  0EFF               	movlw	high STR_24
  9060  0002D8  6E20               	movwf	strtok@s2+1,c
  9061  0002DA  EC4C  F015         	call	_strtok	;wreg free
  9062  0002DE  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9063  0002E2  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9064                           
  9065                           ;cmd_consol.c: 89: if (temp != (0)) {
  9066  0002E6  0100               	movlb	0	; () banked
  9067  0002E8  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9068  0002EA  0100               	movlb	0	; () banked
  9069  0002EC  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9070  0002EE  B4D8               	btfsc	status,2,c
  9071  0002F0  EF31  F006         	goto	l6873
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;cmd_consol.c: 90: strcpy(CMD, temp);
  9075  0002F4  0ECB               	movlw	low _CMD
  9076  0002F6  6E10               	movwf	strcpy@to,c
  9077  0002F8  0E00               	movlw	high _CMD
  9078  0002FA  6E11               	movwf	strcpy@to+1,c
  9079  0002FC  C0EA  F012         	movff	parse_cmd_str@temp,strcpy@from
  9080  000300  C0EB  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9081  000304  EC1F  F019         	call	_strcpy	;wreg free
  9082                           
  9083                           ;cmd_consol.c: 91: temp = strtok((0), "-', /=");
  9084  000308  0E00               	movlw	0
  9085  00030A  6E1D               	movwf	strtok@s1,c
  9086  00030C  0E00               	movlw	0
  9087  00030E  6E1E               	movwf	strtok@s1+1,c
  9088  000310  0EE1               	movlw	low STR_24
  9089  000312  6E1F               	movwf	strtok@s2,c
  9090  000314  0EFF               	movlw	high STR_24
  9091  000316  6E20               	movwf	strtok@s2+1,c
  9092  000318  EC4C  F015         	call	_strtok	;wreg free
  9093  00031C  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9094  000320  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9095                           
  9096                           ;cmd_consol.c: 92: printf("%s..\r\n", temp);
  9097  000324  0ED3               	movlw	low STR_33
  9098  000326  6E24               	movwf	printf@f,c
  9099  000328  0EFF               	movlw	high STR_33
  9100  00032A  6E25               	movwf	printf@f+1,c
  9101  00032C  C0EA  F026         	movff	parse_cmd_str@temp,?_printf+2
  9102  000330  C0EB  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9103  000334  EC0F  F00F         	call	_printf	;wreg free
  9104                           
  9105                           ;cmd_consol.c: 93: char row = 0, column = 0;
  9106  000338  0E00               	movlw	0
  9107  00033A  0100               	movlb	0	; () banked
  9108  00033C  6FE1               	movwf	parse_cmd_str@row& (0+255),b
  9109                           
  9110                           ; BSR set to: 0
  9111  00033E  0E00               	movlw	0
  9112  000340  0100               	movlb	0	; () banked
  9113  000342  6FE2               	movwf	parse_cmd_str@column& (0+255),b
  9114                           
  9115                           ; BSR set to: 0
  9116                           ;cmd_consol.c: 94: if (temp != (0)) {
  9117  000344  0100               	movlb	0	; () banked
  9118  000346  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9119  000348  0100               	movlb	0	; () banked
  9120  00034A  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9121  00034C  B4D8               	btfsc	status,2,c
  9122  00034E  EF31  F006         	goto	l6873
  9123                           
  9124                           ; BSR set to: 0
  9125                           ;cmd_consol.c: 95: row = atoi(temp);
  9126  000352  C0EA  F01E         	movff	parse_cmd_str@temp,atoi@s
  9127  000356  C0EB  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
  9128  00035A  EC59  F013         	call	_atoi	;wreg free
  9129  00035E  501E               	movf	?_atoi,w,c
  9130  000360  0100               	movlb	0	; () banked
  9131  000362  6FE1               	movwf	parse_cmd_str@row& (0+255),b
  9132                           
  9133                           ; BSR set to: 0
  9134                           ;cmd_consol.c: 96: if (row > 0) {
  9135  000364  0100               	movlb	0	; () banked
  9136  000366  51E1               	movf	parse_cmd_str@row& (0+255),w,b
  9137  000368  0100               	movlb	0	; () banked
  9138  00036A  B4D8               	btfsc	status,2,c
  9139  00036C  EF31  F006         	goto	l6873
  9140                           
  9141                           ; BSR set to: 0
  9142                           ;cmd_consol.c: 97: temp = strtok((0), "-', /=");
  9143  000370  0E00               	movlw	0
  9144  000372  6E1D               	movwf	strtok@s1,c
  9145  000374  0E00               	movlw	0
  9146  000376  6E1E               	movwf	strtok@s1+1,c
  9147  000378  0EE1               	movlw	low STR_24
  9148  00037A  6E1F               	movwf	strtok@s2,c
  9149  00037C  0EFF               	movlw	high STR_24
  9150  00037E  6E20               	movwf	strtok@s2+1,c
  9151  000380  EC4C  F015         	call	_strtok	;wreg free
  9152  000384  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9153  000388  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9154                           
  9155                           ;cmd_consol.c: 98: if (temp != (0)) {
  9156  00038C  0100               	movlb	0	; () banked
  9157  00038E  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9158  000390  0100               	movlb	0	; () banked
  9159  000392  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9160  000394  B4D8               	btfsc	status,2,c
  9161  000396  EF31  F006         	goto	l6873
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;cmd_consol.c: 99: column = atoi(temp);
  9165  00039A  C0EA  F01E         	movff	parse_cmd_str@temp,atoi@s
  9166  00039E  C0EB  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
  9167  0003A2  EC59  F013         	call	_atoi	;wreg free
  9168  0003A6  501E               	movf	?_atoi,w,c
  9169  0003A8  0100               	movlb	0	; () banked
  9170  0003AA  6FE2               	movwf	parse_cmd_str@column& (0+255),b
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;cmd_consol.c: 100: if (column > 0) {
  9174  0003AC  0100               	movlb	0	; () banked
  9175  0003AE  51E2               	movf	parse_cmd_str@column& (0+255),w,b
  9176  0003B0  0100               	movlb	0	; () banked
  9177  0003B2  B4D8               	btfsc	status,2,c
  9178  0003B4  EF31  F006         	goto	l6873
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;cmd_consol.c: 101: clcd_init_col = column;
  9182  0003B8  C0E2  F080         	movff	parse_cmd_str@column,_clcd_init_col
  9183                           
  9184                           ;cmd_consol.c: 102: clcd_init_row = row;
  9185  0003BC  C0E1  F081         	movff	parse_cmd_str@row,_clcd_init_row
  9186                           
  9187                           ; BSR set to: 0
  9188                           ;cmd_consol.c: 103: valid_cmd = 1;
  9189  0003C0  0E01               	movlw	1
  9190  0003C2  0100               	movlb	0	; () banked
  9191  0003C4  6F84               	movwf	_valid_cmd& (0+255),b
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;cmd_consol.c: 104: memset(str, 0, strlen(str));
  9195  0003C6  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9196  0003CA  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9197  0003CE  0E00               	movlw	0
  9198  0003D0  6E27               	movwf	memset@c+1,c
  9199  0003D2  0E00               	movlw	0
  9200  0003D4  6E26               	movwf	memset@c,c
  9201  0003D6  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9202  0003DA  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9203  0003DE  EC0D  F018         	call	_strlen	;wreg free
  9204  0003E2  C01E  F028         	movff	?_strlen,memset@n
  9205  0003E6  C01F  F029         	movff	?_strlen+1,memset@n+1
  9206  0003EA  EC5E  F01A         	call	_memset	;wreg free
  9207  0003EE  D6B5               	goto	l6523
  9208  0003F0                     l6599:
  9209  0003F0  C0E8  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9210  0003F4  C0E9  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9211  0003F8  0E5A               	movlw	low STR_35
  9212  0003FA  6E2F               	movwf	strstr@s2,c
  9213  0003FC  0EFF               	movlw	high STR_35
  9214  0003FE  6E30               	movwf	strstr@s2+1,c
  9215  000400  EC05  F016         	call	_strstr	;wreg free
  9216  000404  C02D  F0EA         	movff	?_strstr,parse_cmd_str@temp
  9217  000408  C02E  F0EB         	movff	?_strstr+1,parse_cmd_str@temp+1
  9218  00040C  0100               	movlb	0	; () banked
  9219  00040E  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9220  000410  0100               	movlb	0	; () banked
  9221  000412  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9222  000414  B4D8               	btfsc	status,2,c
  9223  000416  D037               	goto	l6615
  9224                           
  9225                           ; BSR set to: 0
  9226                           ;cmd_consol.c: 114: temp = strtok(ptr, "-', /=");
  9227  000418  C0E8  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9228  00041C  C0E9  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9229  000420  0EE1               	movlw	low STR_24
  9230  000422  6E1F               	movwf	strtok@s2,c
  9231  000424  0EFF               	movlw	high STR_24
  9232  000426  6E20               	movwf	strtok@s2+1,c
  9233  000428  EC4C  F015         	call	_strtok	;wreg free
  9234  00042C  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9235  000430  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9236                           
  9237                           ;cmd_consol.c: 115: if (temp != (0)) {
  9238  000434  0100               	movlb	0	; () banked
  9239  000436  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9240  000438  0100               	movlb	0	; () banked
  9241  00043A  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9242  00043C  B4D8               	btfsc	status,2,c
  9243  00043E  EF31  F006         	goto	l6873
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;cmd_consol.c: 116: strcpy(CMD, temp);
  9247  000442  0ECB               	movlw	low _CMD
  9248  000444  6E10               	movwf	strcpy@to,c
  9249  000446  0E00               	movlw	high _CMD
  9250  000448  6E11               	movwf	strcpy@to+1,c
  9251  00044A  C0EA  F012         	movff	parse_cmd_str@temp,strcpy@from
  9252  00044E  C0EB  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9253  000452  EC1F  F019         	call	_strcpy	;wreg free
  9254                           
  9255                           ;cmd_consol.c: 117: valid_cmd = 1;
  9256  000456  0E01               	movlw	1
  9257  000458  0100               	movlb	0	; () banked
  9258  00045A  6F84               	movwf	_valid_cmd& (0+255),b
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;cmd_consol.c: 118: memset(str, 0, strlen(str));
  9262  00045C  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9263  000460  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9264  000464  0E00               	movlw	0
  9265  000466  6E27               	movwf	memset@c+1,c
  9266  000468  0E00               	movlw	0
  9267  00046A  6E26               	movwf	memset@c,c
  9268  00046C  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9269  000470  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9270  000474  EC0D  F018         	call	_strlen	;wreg free
  9271  000478  C01E  F028         	movff	?_strlen,memset@n
  9272  00047C  C01F  F029         	movff	?_strlen+1,memset@n+1
  9273  000480  EC5E  F01A         	call	_memset	;wreg free
  9274  000484  D66A               	goto	l6523
  9275  000486                     l6615:
  9276  000486  C0E8  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9277  00048A  C0E9  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9278  00048E  0E64               	movlw	low STR_37
  9279  000490  6E2F               	movwf	strstr@s2,c
  9280  000492  0EFF               	movlw	high STR_37
  9281  000494  6E30               	movwf	strstr@s2+1,c
  9282  000496  EC05  F016         	call	_strstr	;wreg free
  9283  00049A  C02D  F0EA         	movff	?_strstr,parse_cmd_str@temp
  9284  00049E  C02E  F0EB         	movff	?_strstr+1,parse_cmd_str@temp+1
  9285  0004A2  0100               	movlb	0	; () banked
  9286  0004A4  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9287  0004A6  0100               	movlb	0	; () banked
  9288  0004A8  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9289  0004AA  B4D8               	btfsc	status,2,c
  9290  0004AC  D0CE               	goto	l6679
  9291                           
  9292                           ; BSR set to: 0
  9293                           ;cmd_consol.c: 123: if (clcd_config_data.init_done == 1) {
  9294  0004AE  0449               	decf	_clcd_config_data,w,c
  9295  0004B0  A4D8               	btfss	status,2,c
  9296  0004B2  D3D7               	goto	l6873
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;cmd_consol.c: 124: cmd_data.data_set = 0;
  9300  0004B4  0E00               	movlw	0
  9301  0004B6  0100               	movlb	0	; () banked
  9302  0004B8  6FAF               	movwf	(_cmd_data+41)& (0+255),b
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;cmd_consol.c: 125: temp = strtok(ptr, "-', /=");
  9306  0004BA  C0E8  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9307  0004BE  C0E9  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9308  0004C2  0EE1               	movlw	low STR_24
  9309  0004C4  6E1F               	movwf	strtok@s2,c
  9310  0004C6  0EFF               	movlw	high STR_24
  9311  0004C8  6E20               	movwf	strtok@s2+1,c
  9312  0004CA  EC4C  F015         	call	_strtok	;wreg free
  9313  0004CE  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9314  0004D2  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9315                           
  9316                           ;cmd_consol.c: 126: if (temp != (0)) {
  9317  0004D6  0100               	movlb	0	; () banked
  9318  0004D8  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9319  0004DA  0100               	movlb	0	; () banked
  9320  0004DC  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9321  0004DE  B4D8               	btfsc	status,2,c
  9322  0004E0  D3C0               	goto	l6873
  9323                           
  9324                           ; BSR set to: 0
  9325                           ;cmd_consol.c: 127: printf("temp = %s, ", temp);
  9326  0004E2  0EBC               	movlw	low STR_39
  9327  0004E4  6E24               	movwf	printf@f,c
  9328  0004E6  0EFE               	movlw	high STR_39
  9329  0004E8  6E25               	movwf	printf@f+1,c
  9330  0004EA  C0EA  F026         	movff	parse_cmd_str@temp,?_printf+2
  9331  0004EE  C0EB  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9332  0004F2  EC0F  F00F         	call	_printf	;wreg free
  9333                           
  9334                           ;cmd_consol.c: 128: strcpy(CMD, temp);
  9335  0004F6  0ECB               	movlw	low _CMD
  9336  0004F8  6E10               	movwf	strcpy@to,c
  9337  0004FA  0E00               	movlw	high _CMD
  9338  0004FC  6E11               	movwf	strcpy@to+1,c
  9339  0004FE  C0EA  F012         	movff	parse_cmd_str@temp,strcpy@from
  9340  000502  C0EB  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9341  000506  EC1F  F019         	call	_strcpy	;wreg free
  9342                           
  9343                           ;cmd_consol.c: 129: char uid = 0;
  9344  00050A  0E00               	movlw	0
  9345  00050C  0100               	movlb	0	; () banked
  9346  00050E  6FE4               	movwf	parse_cmd_str@uid& (0+255),b
  9347                           
  9348                           ; BSR set to: 0
  9349                           ;cmd_consol.c: 130: cmd_data.uid = -1;
  9350  000510  0100               	movlb	0	; () banked
  9351  000512  6986               	setf	_cmd_data& (0+255),b
  9352                           
  9353                           ; BSR set to: 0
  9354                           ;cmd_consol.c: 131: temp = strtok((0), "-', /=");
  9355  000514  0E00               	movlw	0
  9356  000516  6E1D               	movwf	strtok@s1,c
  9357  000518  0E00               	movlw	0
  9358  00051A  6E1E               	movwf	strtok@s1+1,c
  9359  00051C  0EE1               	movlw	low STR_24
  9360  00051E  6E1F               	movwf	strtok@s2,c
  9361  000520  0EFF               	movlw	high STR_24
  9362  000522  6E20               	movwf	strtok@s2+1,c
  9363  000524  EC4C  F015         	call	_strtok	;wreg free
  9364  000528  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9365  00052C  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9366                           
  9367                           ;cmd_consol.c: 132: if (temp != (0)) {
  9368  000530  0100               	movlb	0	; () banked
  9369  000532  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9370  000534  0100               	movlb	0	; () banked
  9371  000536  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9372  000538  B4D8               	btfsc	status,2,c
  9373  00053A  D393               	goto	l6873
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;cmd_consol.c: 133: printf("temp = %s, ", temp);
  9377  00053C  0EBC               	movlw	low STR_39
  9378  00053E  6E24               	movwf	printf@f,c
  9379  000540  0EFE               	movlw	high STR_39
  9380  000542  6E25               	movwf	printf@f+1,c
  9381  000544  C0EA  F026         	movff	parse_cmd_str@temp,?_printf+2
  9382  000548  C0EB  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9383  00054C  EC0F  F00F         	call	_printf	;wreg free
  9384                           
  9385                           ;cmd_consol.c: 134: char i = 0;
  9386  000550  0E00               	movlw	0
  9387  000552  0100               	movlb	0	; () banked
  9388  000554  6FDF               	movwf	parse_cmd_str@i& (0+255),b
  9389                           
  9390                           ; BSR set to: 0
  9391                           ;cmd_consol.c: 135: uid = temp[0];
  9392  000556  C0EA  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9393  00055A  C0EB  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9394  00055E  0E00               	movlw	low (__mediumconst shr (0+16))
  9395  000560  6EF8               	movwf	tblptru,c
  9396  000562  0E0F               	movlw	(high __ramtop+-1)
  9397  000564  64F7               	cpfsgt	tblptrh,c
  9398  000566  D003               	bra	u6797
  9399  000568  0008               	tblrd		*
  9400  00056A  50F5               	movf	tablat,w,c
  9401  00056C  D005               	bra	u6790
  9402  00056E                     u6797:
  9403  00056E  CFF6 FFE9          	movff	tblptrl,fsr0l
  9404  000572  CFF7 FFEA          	movff	tblptrh,fsr0h
  9405  000576  50EF               	movf	indf0,w,c
  9406  000578                     u6790:
  9407  000578  0100               	movlb	0	; () banked
  9408  00057A  6FE4               	movwf	parse_cmd_str@uid& (0+255),b
  9409                           
  9410                           ; BSR set to: 0
  9411                           ;cmd_consol.c: 136: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9412  00057C  0E40               	movlw	64
  9413  00057E  0100               	movlb	0	; () banked
  9414  000580  65E4               	cpfsgt	parse_cmd_str@uid& (0+255),b
  9415  000582  D061               	goto	l6675
  9416                           
  9417                           ; BSR set to: 0
  9418  000584  504C               	movf	_clcd_config_data+3,w,c
  9419  000586  0100               	movlb	0	; () banked
  9420  000588  5DE4               	subwf	parse_cmd_str@uid& (0+255),w,b
  9421  00058A  B0D8               	btfsc	status,0,c
  9422  00058C  D05C               	goto	l6675
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;cmd_consol.c: 137: printf("uid = %d, ", uid);
  9426  00058E  0E2F               	movlw	low STR_42
  9427  000590  6E24               	movwf	printf@f,c
  9428  000592  0EFF               	movlw	high STR_42
  9429  000594  6E25               	movwf	printf@f+1,c
  9430  000596  C0E4  F026         	movff	parse_cmd_str@uid,?_printf+2
  9431  00059A  6A27               	clrf	?_printf+3,c
  9432  00059C  EC0F  F00F         	call	_printf	;wreg free
  9433                           
  9434                           ;cmd_consol.c: 138: cmd_data.uid = uid;
  9435  0005A0  C0E4  F086         	movff	parse_cmd_str@uid,_cmd_data
  9436                           
  9437                           ;cmd_consol.c: 139: temp = strtok((0), "-', /=");
  9438  0005A4  0E00               	movlw	0
  9439  0005A6  6E1D               	movwf	strtok@s1,c
  9440  0005A8  0E00               	movlw	0
  9441  0005AA  6E1E               	movwf	strtok@s1+1,c
  9442  0005AC  0EE1               	movlw	low STR_24
  9443  0005AE  6E1F               	movwf	strtok@s2,c
  9444  0005B0  0EFF               	movlw	high STR_24
  9445  0005B2  6E20               	movwf	strtok@s2+1,c
  9446  0005B4  EC4C  F015         	call	_strtok	;wreg free
  9447  0005B8  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9448  0005BC  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9449                           
  9450                           ;cmd_consol.c: 140: if (temp != (0)) {
  9451  0005C0  0100               	movlb	0	; () banked
  9452  0005C2  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9453  0005C4  0100               	movlb	0	; () banked
  9454  0005C6  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9455  0005C8  B4D8               	btfsc	status,2,c
  9456  0005CA  D34B               	goto	l6873
  9457                           
  9458                           ; BSR set to: 0
  9459                           ;cmd_consol.c: 141: printf("str = %s\r\n", temp);
  9460  0005CC  0E24               	movlw	low STR_44
  9461  0005CE  6E24               	movwf	printf@f,c
  9462  0005D0  0EFF               	movlw	high STR_44
  9463  0005D2  6E25               	movwf	printf@f+1,c
  9464  0005D4  C0EA  F026         	movff	parse_cmd_str@temp,?_printf+2
  9465  0005D8  C0EB  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9466  0005DC  EC0F  F00F         	call	_printf	;wreg free
  9467                           
  9468                           ;cmd_consol.c: 142: if (strlen(temp) < 40) {
  9469  0005E0  C0EA  F01E         	movff	parse_cmd_str@temp,strlen@s
  9470  0005E4  C0EB  F01F         	movff	parse_cmd_str@temp+1,strlen@s+1
  9471  0005E8  EC0D  F018         	call	_strlen	;wreg free
  9472  0005EC  501F               	movf	?_strlen+1,w,c
  9473  0005EE  E129               	bnz	l6671
  9474  0005F0  0E28               	movlw	40
  9475  0005F2  5C1E               	subwf	?_strlen,w,c
  9476  0005F4  B0D8               	btfsc	status,0,c
  9477  0005F6  D025               	goto	l6671
  9478                           
  9479                           ;cmd_consol.c: 143: strcpy(cmd_data.data, temp);
  9480  0005F8  0E87               	movlw	low (_cmd_data+1)
  9481  0005FA  6E10               	movwf	strcpy@to,c
  9482  0005FC  0E00               	movlw	high (_cmd_data+1)
  9483  0005FE  6E11               	movwf	strcpy@to+1,c
  9484  000600  C0EA  F012         	movff	parse_cmd_str@temp,strcpy@from
  9485  000604  C0EB  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9486  000608  EC1F  F019         	call	_strcpy	;wreg free
  9487                           
  9488                           ;cmd_consol.c: 144: valid_cmd = 1;
  9489  00060C  0E01               	movlw	1
  9490  00060E  0100               	movlb	0	; () banked
  9491  000610  6F84               	movwf	_valid_cmd& (0+255),b
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;cmd_consol.c: 145: cmd_data.data_set = 1;
  9495  000612  0E01               	movlw	1
  9496  000614  0100               	movlb	0	; () banked
  9497  000616  6FAF               	movwf	(_cmd_data+41)& (0+255),b
  9498                           
  9499                           ;cmd_consol.c: 146: memset(str, 0, strlen(str));
  9500  000618  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9501  00061C  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9502  000620  0E00               	movlw	0
  9503  000622  6E27               	movwf	memset@c+1,c
  9504  000624  0E00               	movlw	0
  9505  000626  6E26               	movwf	memset@c,c
  9506  000628  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9507  00062C  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9508  000630  EC0D  F018         	call	_strlen	;wreg free
  9509  000634  C01E  F028         	movff	?_strlen,memset@n
  9510  000638  C01F  F029         	movff	?_strlen+1,memset@n+1
  9511  00063C  EC5E  F01A         	call	_memset	;wreg free
  9512  000640  D58C               	goto	l6523
  9513  000642                     l6671:
  9514                           
  9515                           ;cmd_consol.c: 149: return 2;
  9516  000642  0E02               	movlw	2
  9517  000644  0012               	return	
  9518  000646                     l6675:
  9519                           
  9520                           ;cmd_consol.c: 153: return 7;
  9521  000646  0E07               	movlw	7
  9522  000648  0012               	return	
  9523  00064A                     l6679:
  9524  00064A  C0E8  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9525  00064E  C0E9  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9526  000652  0ED4               	movlw	low STR_45
  9527  000654  6E2F               	movwf	strstr@s2,c
  9528  000656  0EFE               	movlw	high STR_45
  9529  000658  6E30               	movwf	strstr@s2+1,c
  9530  00065A  EC05  F016         	call	_strstr	;wreg free
  9531  00065E  C02D  F0EA         	movff	?_strstr,parse_cmd_str@temp
  9532  000662  C02E  F0EB         	movff	?_strstr+1,parse_cmd_str@temp+1
  9533  000666  0100               	movlb	0	; () banked
  9534  000668  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9535  00066A  0100               	movlb	0	; () banked
  9536  00066C  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9537  00066E  B4D8               	btfsc	status,2,c
  9538  000670  D135               	goto	l6761
  9539                           
  9540                           ; BSR set to: 0
  9541                           ;cmd_consol.c: 159: printf("%s...4\r\n", temp);
  9542  000672  0E6E               	movlw	low STR_46
  9543  000674  6E24               	movwf	printf@f,c
  9544  000676  0EFF               	movlw	high STR_46
  9545  000678  6E25               	movwf	printf@f+1,c
  9546  00067A  C0EA  F026         	movff	parse_cmd_str@temp,?_printf+2
  9547  00067E  C0EB  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9548  000682  EC0F  F00F         	call	_printf	;wreg free
  9549                           
  9550                           ;cmd_consol.c: 160: if (clcd_config_data.init_done == 1) {
  9551  000686  0449               	decf	_clcd_config_data,w,c
  9552  000688  A4D8               	btfss	status,2,c
  9553  00068A  D2EB               	goto	l6873
  9554                           
  9555                           ;cmd_consol.c: 161: cmd_data.scroll_set = 0;
  9556  00068C  0E00               	movlw	0
  9557  00068E  0100               	movlb	0	; () banked
  9558  000690  6FB6               	movwf	(_cmd_data+48)& (0+255),b
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;cmd_consol.c: 162: temp = strtok(ptr, "-', /=");
  9562  000692  C0E8  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9563  000696  C0E9  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9564  00069A  0EE1               	movlw	low STR_24
  9565  00069C  6E1F               	movwf	strtok@s2,c
  9566  00069E  0EFF               	movlw	high STR_24
  9567  0006A0  6E20               	movwf	strtok@s2+1,c
  9568  0006A2  EC4C  F015         	call	_strtok	;wreg free
  9569  0006A6  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9570  0006AA  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9571                           
  9572                           ;cmd_consol.c: 163: if (temp != (0)) {
  9573  0006AE  0100               	movlb	0	; () banked
  9574  0006B0  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9575  0006B2  0100               	movlb	0	; () banked
  9576  0006B4  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9577  0006B6  B4D8               	btfsc	status,2,c
  9578  0006B8  D2D4               	goto	l6873
  9579                           
  9580                           ; BSR set to: 0
  9581                           ;cmd_consol.c: 164: strcpy(CMD, temp);
  9582  0006BA  0ECB               	movlw	low _CMD
  9583  0006BC  6E10               	movwf	strcpy@to,c
  9584  0006BE  0E00               	movlw	high _CMD
  9585  0006C0  6E11               	movwf	strcpy@to+1,c
  9586  0006C2  C0EA  F012         	movff	parse_cmd_str@temp,strcpy@from
  9587  0006C6  C0EB  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9588  0006CA  EC1F  F019         	call	_strcpy	;wreg free
  9589                           
  9590                           ;cmd_consol.c: 165: char scroll = 0;
  9591  0006CE  0E00               	movlw	0
  9592  0006D0  0100               	movlb	0	; () banked
  9593  0006D2  6FE5               	movwf	parse_cmd_str@scroll& (0+255),b
  9594                           
  9595                           ; BSR set to: 0
  9596                           ;cmd_consol.c: 166: char uid = 0;
  9597  0006D4  0E00               	movlw	0
  9598  0006D6  0100               	movlb	0	; () banked
  9599  0006D8  6FE6               	movwf	parse_cmd_str@uid_1677& (0+255),b
  9600                           
  9601                           ;cmd_consol.c: 167: temp = strtok((0), "-', /=");
  9602  0006DA  0E00               	movlw	0
  9603  0006DC  6E1D               	movwf	strtok@s1,c
  9604  0006DE  0E00               	movlw	0
  9605  0006E0  6E1E               	movwf	strtok@s1+1,c
  9606  0006E2  0EE1               	movlw	low STR_24
  9607  0006E4  6E1F               	movwf	strtok@s2,c
  9608  0006E6  0EFF               	movlw	high STR_24
  9609  0006E8  6E20               	movwf	strtok@s2+1,c
  9610  0006EA  EC4C  F015         	call	_strtok	;wreg free
  9611  0006EE  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9612  0006F2  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9613                           
  9614                           ;cmd_consol.c: 168: if (temp != (0)) {
  9615  0006F6  0100               	movlb	0	; () banked
  9616  0006F8  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9617  0006FA  0100               	movlb	0	; () banked
  9618  0006FC  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9619  0006FE  B4D8               	btfsc	status,2,c
  9620  000700  D2B0               	goto	l6873
  9621                           
  9622                           ; BSR set to: 0
  9623                           ;cmd_consol.c: 169: printf("%s...5\r\n", temp);
  9624  000702  0E77               	movlw	low STR_49
  9625  000704  6E24               	movwf	printf@f,c
  9626  000706  0EFF               	movlw	high STR_49
  9627  000708  6E25               	movwf	printf@f+1,c
  9628  00070A  C0EA  F026         	movff	parse_cmd_str@temp,?_printf+2
  9629  00070E  C0EB  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9630  000712  EC0F  F00F         	call	_printf	;wreg free
  9631                           
  9632                           ;cmd_consol.c: 170: char i = 0;
  9633  000716  0E00               	movlw	0
  9634  000718  0100               	movlb	0	; () banked
  9635  00071A  6FE3               	movwf	parse_cmd_str@i_1680& (0+255),b
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;cmd_consol.c: 171: uid = temp[0];
  9639  00071C  C0EA  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9640  000720  C0EB  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9641  000724  0E00               	movlw	low (__mediumconst shr (0+16))
  9642  000726  6EF8               	movwf	tblptru,c
  9643  000728  0E0F               	movlw	(high __ramtop+-1)
  9644  00072A  64F7               	cpfsgt	tblptrh,c
  9645  00072C  D003               	bra	u6887
  9646  00072E  0008               	tblrd		*
  9647  000730  50F5               	movf	tablat,w,c
  9648  000732  D005               	bra	u6880
  9649  000734                     u6887:
  9650  000734  CFF6 FFE9          	movff	tblptrl,fsr0l
  9651  000738  CFF7 FFEA          	movff	tblptrh,fsr0h
  9652  00073C  50EF               	movf	indf0,w,c
  9653  00073E                     u6880:
  9654  00073E  0100               	movlb	0	; () banked
  9655  000740  6FE6               	movwf	parse_cmd_str@uid_1677& (0+255),b
  9656                           
  9657                           ; BSR set to: 0
  9658                           ;cmd_consol.c: 172: cmd_data.scroll = -1;
  9659  000742  0100               	movlb	0	; () banked
  9660  000744  69B5               	setf	(_cmd_data+47)& (0+255),b
  9661                           
  9662                           ; BSR set to: 0
  9663                           ;cmd_consol.c: 173: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9664  000746  0E40               	movlw	64
  9665  000748  0100               	movlb	0	; () banked
  9666  00074A  65E6               	cpfsgt	parse_cmd_str@uid_1677& (0+255),b
  9667  00074C  D0C5               	goto	l6757
  9668                           
  9669                           ; BSR set to: 0
  9670  00074E  504C               	movf	_clcd_config_data+3,w,c
  9671  000750  0100               	movlb	0	; () banked
  9672  000752  5DE6               	subwf	parse_cmd_str@uid_1677& (0+255),w,b
  9673  000754  B0D8               	btfsc	status,0,c
  9674  000756  D0C0               	goto	l6757
  9675                           
  9676                           ; BSR set to: 0
  9677                           ;cmd_consol.c: 174: printf("uid = %d, ", uid);
  9678  000758  0E2F               	movlw	low STR_42
  9679  00075A  6E24               	movwf	printf@f,c
  9680  00075C  0EFF               	movlw	high STR_42
  9681  00075E  6E25               	movwf	printf@f+1,c
  9682  000760  C0E6  F026         	movff	parse_cmd_str@uid_1677,?_printf+2
  9683  000764  6A27               	clrf	?_printf+3,c
  9684  000766  EC0F  F00F         	call	_printf	;wreg free
  9685                           
  9686                           ;cmd_consol.c: 175: if (uid == cmd_data.uid) {
  9687  00076A  0100               	movlb	0	; () banked
  9688  00076C  51E6               	movf	parse_cmd_str@uid_1677& (0+255),w,b
  9689  00076E  0100               	movlb	0	; () banked
  9690  000770  1986               	xorwf	_cmd_data& (0+255),w,b
  9691  000772  A4D8               	btfss	status,2,c
  9692  000774  D276               	goto	l6873
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;cmd_consol.c: 176: temp = strtok((0), "-', /=");
  9696  000776  0E00               	movlw	0
  9697  000778  6E1D               	movwf	strtok@s1,c
  9698  00077A  0E00               	movlw	0
  9699  00077C  6E1E               	movwf	strtok@s1+1,c
  9700  00077E  0EE1               	movlw	low STR_24
  9701  000780  6E1F               	movwf	strtok@s2,c
  9702  000782  0EFF               	movlw	high STR_24
  9703  000784  6E20               	movwf	strtok@s2+1,c
  9704  000786  EC4C  F015         	call	_strtok	;wreg free
  9705  00078A  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9706  00078E  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9707                           
  9708                           ;cmd_consol.c: 177: if (temp != (0)) {
  9709  000792  0100               	movlb	0	; () banked
  9710  000794  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9711  000796  0100               	movlb	0	; () banked
  9712  000798  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9713  00079A  B4D8               	btfsc	status,2,c
  9714  00079C  D262               	goto	l6873
  9715                           
  9716                           ; BSR set to: 0
  9717                           ;cmd_consol.c: 178: printf("%s...6\r\n", temp);
  9718  00079E  0E80               	movlw	low STR_52
  9719  0007A0  6E24               	movwf	printf@f,c
  9720  0007A2  0EFF               	movlw	high STR_52
  9721  0007A4  6E25               	movwf	printf@f+1,c
  9722  0007A6  C0EA  F026         	movff	parse_cmd_str@temp,?_printf+2
  9723  0007AA  C0EB  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9724  0007AE  EC0F  F00F         	call	_printf	;wreg free
  9725                           
  9726                           ;cmd_consol.c: 179: for (i = 0; i < strlen(temp); i++) {
  9727  0007B2  0E00               	movlw	0
  9728  0007B4  0100               	movlb	0	; () banked
  9729  0007B6  6FE3               	movwf	parse_cmd_str@i_1680& (0+255),b
  9730  0007B8  D050               	goto	l6733
  9731  0007BA                     l6723:
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;cmd_consol.c: 180: if (isdigit(temp[i]) == 1) {
  9735  0007BA  0100               	movlb	0	; () banked
  9736  0007BC  51E3               	movf	parse_cmd_str@i_1680& (0+255),w,b
  9737  0007BE  0D01               	mullw	1
  9738  0007C0  C0EA  F0DC         	movff	parse_cmd_str@temp,??_parse_cmd_str
  9739  0007C4  C0EB  F0DD         	movff	parse_cmd_str@temp+1,??_parse_cmd_str+1
  9740  0007C8  50F3               	movf	prodl,w,c
  9741  0007CA  0100               	movlb	0	; () banked
  9742  0007CC  27DC               	addwf	??_parse_cmd_str& (0+255),f,b
  9743  0007CE  50F4               	movf	prodh,w,c
  9744  0007D0  0100               	movlb	0	; () banked
  9745  0007D2  23DD               	addwfc	(??_parse_cmd_str+1)& (0+255),f,b
  9746  0007D4  C0DC  FFF6         	movff	??_parse_cmd_str,tblptrl
  9747  0007D8  C0DD  FFF7         	movff	??_parse_cmd_str+1,tblptrh
  9748  0007DC  0E00               	movlw	low (__mediumconst shr (0+16))
  9749  0007DE  6EF8               	movwf	tblptru,c
  9750  0007E0  0E0F               	movlw	(high __ramtop+-1)
  9751  0007E2  64F7               	cpfsgt	tblptrh,c
  9752  0007E4  D003               	bra	u6937
  9753  0007E6  0008               	tblrd		*
  9754  0007E8  50F5               	movf	tablat,w,c
  9755  0007EA  D005               	bra	u6930
  9756  0007EC                     u6937:
  9757  0007EC  CFF6 FFE9          	movff	tblptrl,fsr0l
  9758  0007F0  CFF7 FFEA          	movff	tblptrh,fsr0h
  9759  0007F4  50EF               	movf	indf0,w,c
  9760  0007F6                     u6930:
  9761  0007F6  EC04  F01B         	call	_isdigit
  9762  0007FA  A0D8               	btfss	status,0,c
  9763  0007FC  D02A               	goto	l6727
  9764                           
  9765                           ;cmd_consol.c: 181: scroll = scroll * 10 + (temp[i] - '0');
  9766  0007FE  0100               	movlb	0	; () banked
  9767  000800  51E3               	movf	parse_cmd_str@i_1680& (0+255),w,b
  9768  000802  0D01               	mullw	1
  9769  000804  C0EA  F0DC         	movff	parse_cmd_str@temp,??_parse_cmd_str
  9770  000808  C0EB  F0DD         	movff	parse_cmd_str@temp+1,??_parse_cmd_str+1
  9771  00080C  50F3               	movf	prodl,w,c
  9772  00080E  0100               	movlb	0	; () banked
  9773  000810  27DC               	addwf	??_parse_cmd_str& (0+255),f,b
  9774  000812  50F4               	movf	prodh,w,c
  9775  000814  0100               	movlb	0	; () banked
  9776  000816  23DD               	addwfc	(??_parse_cmd_str+1)& (0+255),f,b
  9777  000818  C0DC  FFF6         	movff	??_parse_cmd_str,tblptrl
  9778  00081C  C0DD  FFF7         	movff	??_parse_cmd_str+1,tblptrh
  9779  000820  0E00               	movlw	low (__mediumconst shr (0+16))
  9780  000822  6EF8               	movwf	tblptru,c
  9781  000824  0E0F               	movlw	(high __ramtop+-1)
  9782  000826  64F7               	cpfsgt	tblptrh,c
  9783  000828  D003               	bra	u6957
  9784  00082A  0008               	tblrd		*
  9785  00082C  50F5               	movf	tablat,w,c
  9786  00082E  D005               	bra	u6950
  9787  000830                     u6957:
  9788  000830  CFF6 FFE9          	movff	tblptrl,fsr0l
  9789  000834  CFF7 FFEA          	movff	tblptrh,fsr0h
  9790  000838  50EF               	movf	indf0,w,c
  9791  00083A                     u6950:
  9792  00083A  0100               	movlb	0	; () banked
  9793  00083C  6FDE               	movwf	(??_parse_cmd_str+2)& (0+255),b
  9794  00083E  0100               	movlb	0	; () banked
  9795  000840  51E5               	movf	parse_cmd_str@scroll& (0+255),w,b
  9796  000842  0D0A               	mullw	10
  9797  000844  50F3               	movf	prodl,w,c
  9798  000846  0100               	movlb	0	; () banked
  9799  000848  25DE               	addwf	(??_parse_cmd_str+2)& (0+255),w,b
  9800  00084A  0FD0               	addlw	208
  9801  00084C  0100               	movlb	0	; () banked
  9802  00084E  6FE5               	movwf	parse_cmd_str@scroll& (0+255),b
  9803                           
  9804                           ;cmd_consol.c: 182: } else {
  9805  000850  D002               	goto	l6731
  9806  000852                     l6727:
  9807                           
  9808                           ;cmd_consol.c: 184: return 0;
  9809  000852  0E00               	movlw	0
  9810  000854  0012               	return	
  9811  000856                     l6731:
  9812  000856  0100               	movlb	0	; () banked
  9813  000858  2BE3               	incf	parse_cmd_str@i_1680& (0+255),f,b
  9814  00085A                     l6733:
  9815                           
  9816                           ; BSR set to: 0
  9817  00085A  C0EA  F01E         	movff	parse_cmd_str@temp,strlen@s
  9818  00085E  C0EB  F01F         	movff	parse_cmd_str@temp+1,strlen@s+1
  9819  000862  EC0D  F018         	call	_strlen	;wreg free
  9820  000866  0100               	movlb	0	; () banked
  9821  000868  51E3               	movf	parse_cmd_str@i_1680& (0+255),w,b
  9822  00086A  0100               	movlb	0	; () banked
  9823  00086C  6FDC               	movwf	??_parse_cmd_str& (0+255),b
  9824  00086E  6BDD               	clrf	(??_parse_cmd_str+1)& (0+255),b
  9825  000870  501E               	movf	?_strlen,w,c
  9826  000872  0100               	movlb	0	; () banked
  9827  000874  5DDC               	subwf	??_parse_cmd_str& (0+255),w,b
  9828  000876  501F               	movf	?_strlen+1,w,c
  9829  000878  0100               	movlb	0	; () banked
  9830  00087A  59DD               	subwfb	(??_parse_cmd_str+1)& (0+255),w,b
  9831  00087C  A0D8               	btfss	status,0,c
  9832  00087E  D79D               	goto	l6723
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;cmd_consol.c: 185: }
  9836                           ;cmd_consol.c: 186: }
  9837                           ;cmd_consol.c: 188: if (scroll < 3) {
  9838                           
  9839                           ; BSR set to: 0
  9840  000880  0E03               	movlw	3
  9841  000882  0100               	movlb	0	; () banked
  9842  000884  61E5               	cpfslt	parse_cmd_str@scroll& (0+255),b
  9843  000886  D026               	goto	l6753
  9844                           
  9845                           ; BSR set to: 0
  9846                           ;cmd_consol.c: 189: printf("scroll = %d, ", scroll);
  9847  000888  0E89               	movlw	low STR_53
  9848  00088A  6E24               	movwf	printf@f,c
  9849  00088C  0EFE               	movlw	high STR_53
  9850  00088E  6E25               	movwf	printf@f+1,c
  9851  000890  C0E5  F026         	movff	parse_cmd_str@scroll,?_printf+2
  9852  000894  6A27               	clrf	?_printf+3,c
  9853  000896  EC0F  F00F         	call	_printf	;wreg free
  9854                           
  9855                           ;cmd_consol.c: 190: cmd_data.scroll = scroll;
  9856  00089A  C0E5  F0B5         	movff	parse_cmd_str@scroll,_cmd_data+47
  9857                           
  9858                           ;cmd_consol.c: 191: cmd_data.scroll_set = 1;
  9859  00089E  0E01               	movlw	1
  9860  0008A0  0100               	movlb	0	; () banked
  9861  0008A2  6FB6               	movwf	(_cmd_data+48)& (0+255),b
  9862                           
  9863                           ; BSR set to: 0
  9864                           ;cmd_consol.c: 192: valid_cmd = 1;
  9865  0008A4  0E01               	movlw	1
  9866  0008A6  0100               	movlb	0	; () banked
  9867  0008A8  6F84               	movwf	_valid_cmd& (0+255),b
  9868                           
  9869                           ; BSR set to: 0
  9870                           ;cmd_consol.c: 193: memset(str, 0, strlen(str));
  9871  0008AA  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9872  0008AE  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9873  0008B2  0E00               	movlw	0
  9874  0008B4  6E27               	movwf	memset@c+1,c
  9875  0008B6  0E00               	movlw	0
  9876  0008B8  6E26               	movwf	memset@c,c
  9877  0008BA  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9878  0008BE  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9879  0008C2  EC0D  F018         	call	_strlen	;wreg free
  9880  0008C6  C01E  F028         	movff	?_strlen,memset@n
  9881  0008CA  C01F  F029         	movff	?_strlen+1,memset@n+1
  9882  0008CE  EC5E  F01A         	call	_memset	;wreg free
  9883  0008D2  D443               	goto	l6523
  9884  0008D4                     l6753:
  9885                           
  9886                           ;cmd_consol.c: 196: return 4;
  9887  0008D4  0E04               	movlw	4
  9888  0008D6  0012               	return	
  9889  0008D8                     l6757:
  9890                           
  9891                           ;cmd_consol.c: 201: return 7;
  9892  0008D8  0E07               	movlw	7
  9893  0008DA  0012               	return	
  9894  0008DC                     l6761:
  9895  0008DC  C0E8  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9896  0008E0  C0E9  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9897  0008E4  0E3A               	movlw	low STR_54
  9898  0008E6  6E2F               	movwf	strstr@s2,c
  9899  0008E8  0EFF               	movlw	high STR_54
  9900  0008EA  6E30               	movwf	strstr@s2+1,c
  9901  0008EC  EC05  F016         	call	_strstr	;wreg free
  9902  0008F0  C02D  F0EA         	movff	?_strstr,parse_cmd_str@temp
  9903  0008F4  C02E  F0EB         	movff	?_strstr+1,parse_cmd_str@temp+1
  9904  0008F8  0100               	movlb	0	; () banked
  9905  0008FA  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9906  0008FC  0100               	movlb	0	; () banked
  9907  0008FE  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9908  000900  B4D8               	btfsc	status,2,c
  9909  000902  D145               	goto	l6851
  9910                           
  9911                           ; BSR set to: 0
  9912                           ;cmd_consol.c: 207: if (clcd_config_data.init_done == 1) {
  9913  000904  0449               	decf	_clcd_config_data,w,c
  9914  000906  A4D8               	btfss	status,2,c
  9915  000908  D1AC               	goto	l6873
  9916                           
  9917                           ; BSR set to: 0
  9918                           ;cmd_consol.c: 208: cmd_data.row_col_set = 0;
  9919  00090A  0E00               	movlw	0
  9920  00090C  0100               	movlb	0	; () banked
  9921  00090E  6FB4               	movwf	(_cmd_data+46)& (0+255),b
  9922                           
  9923                           ; BSR set to: 0
  9924                           ;cmd_consol.c: 209: temp = strtok(ptr, "-', /=");
  9925  000910  C0E8  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9926  000914  C0E9  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9927  000918  0EE1               	movlw	low STR_24
  9928  00091A  6E1F               	movwf	strtok@s2,c
  9929  00091C  0EFF               	movlw	high STR_24
  9930  00091E  6E20               	movwf	strtok@s2+1,c
  9931  000920  EC4C  F015         	call	_strtok	;wreg free
  9932  000924  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9933  000928  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9934                           
  9935                           ;cmd_consol.c: 210: if (temp != (0)) {
  9936  00092C  0100               	movlb	0	; () banked
  9937  00092E  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9938  000930  0100               	movlb	0	; () banked
  9939  000932  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9940  000934  B4D8               	btfsc	status,2,c
  9941  000936  D195               	goto	l6873
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;cmd_consol.c: 211: strcpy(CMD, temp);
  9945  000938  0ECB               	movlw	low _CMD
  9946  00093A  6E10               	movwf	strcpy@to,c
  9947  00093C  0E00               	movlw	high _CMD
  9948  00093E  6E11               	movwf	strcpy@to+1,c
  9949  000940  C0EA  F012         	movff	parse_cmd_str@temp,strcpy@from
  9950  000944  C0EB  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9951  000948  EC1F  F019         	call	_strcpy	;wreg free
  9952                           
  9953                           ;cmd_consol.c: 212: temp = strtok((0), "-', /=");
  9954  00094C  0E00               	movlw	0
  9955  00094E  6E1D               	movwf	strtok@s1,c
  9956  000950  0E00               	movlw	0
  9957  000952  6E1E               	movwf	strtok@s1+1,c
  9958  000954  0EE1               	movlw	low STR_24
  9959  000956  6E1F               	movwf	strtok@s2,c
  9960  000958  0EFF               	movlw	high STR_24
  9961  00095A  6E20               	movwf	strtok@s2+1,c
  9962  00095C  EC4C  F015         	call	_strtok	;wreg free
  9963  000960  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
  9964  000964  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
  9965                           
  9966                           ;cmd_consol.c: 213: char uid = 0;
  9967  000968  0E00               	movlw	0
  9968  00096A  0100               	movlb	0	; () banked
  9969  00096C  6FE7               	movwf	parse_cmd_str@uid_1688& (0+255),b
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;cmd_consol.c: 214: if (temp != (0)) {
  9973  00096E  0100               	movlb	0	; () banked
  9974  000970  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
  9975  000972  0100               	movlb	0	; () banked
  9976  000974  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9977  000976  B4D8               	btfsc	status,2,c
  9978  000978  D174               	goto	l6873
  9979                           
  9980                           ; BSR set to: 0
  9981                           ;cmd_consol.c: 215: char i = 0;
  9982  00097A  0E00               	movlw	0
  9983  00097C  0100               	movlb	0	; () banked
  9984  00097E  6FE0               	movwf	parse_cmd_str@i_1689& (0+255),b
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;cmd_consol.c: 216: uid = temp[0];
  9988  000980  C0EA  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9989  000984  C0EB  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9990  000988  0E00               	movlw	low (__mediumconst shr (0+16))
  9991  00098A  6EF8               	movwf	tblptru,c
  9992  00098C  0E0F               	movlw	(high __ramtop+-1)
  9993  00098E  64F7               	cpfsgt	tblptrh,c
  9994  000990  D003               	bra	u7027
  9995  000992  0008               	tblrd		*
  9996  000994  50F5               	movf	tablat,w,c
  9997  000996  D005               	bra	u7020
  9998  000998                     u7027:
  9999  000998  CFF6 FFE9          	movff	tblptrl,fsr0l
 10000  00099C  CFF7 FFEA          	movff	tblptrh,fsr0h
 10001  0009A0  50EF               	movf	indf0,w,c
 10002  0009A2                     u7020:
 10003  0009A2  0100               	movlb	0	; () banked
 10004  0009A4  6FE7               	movwf	parse_cmd_str@uid_1688& (0+255),b
 10005                           
 10006                           ; BSR set to: 0
 10007                           ;cmd_consol.c: 217: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
 10008  0009A6  0E40               	movlw	64
 10009  0009A8  0100               	movlb	0	; () banked
 10010  0009AA  65E7               	cpfsgt	parse_cmd_str@uid_1688& (0+255),b
 10011  0009AC  D0EE               	goto	l6847
 10012                           
 10013                           ; BSR set to: 0
 10014  0009AE  504C               	movf	_clcd_config_data+3,w,c
 10015  0009B0  0100               	movlb	0	; () banked
 10016  0009B2  5DE7               	subwf	parse_cmd_str@uid_1688& (0+255),w,b
 10017  0009B4  B0D8               	btfsc	status,0,c
 10018  0009B6  D0E9               	goto	l6847
 10019                           
 10020                           ; BSR set to: 0
 10021                           ;cmd_consol.c: 218: printf("uid = %d,\r\n", uid);
 10022  0009B8  0EA4               	movlw	low STR_57
 10023  0009BA  6E24               	movwf	printf@f,c
 10024  0009BC  0EFE               	movlw	high STR_57
 10025  0009BE  6E25               	movwf	printf@f+1,c
 10026  0009C0  C0E7  F026         	movff	parse_cmd_str@uid_1688,?_printf+2
 10027  0009C4  6A27               	clrf	?_printf+3,c
 10028  0009C6  EC0F  F00F         	call	_printf	;wreg free
 10029                           
 10030                           ;cmd_consol.c: 219: if (uid == cmd_data.uid) {
 10031  0009CA  0100               	movlb	0	; () banked
 10032  0009CC  51E7               	movf	parse_cmd_str@uid_1688& (0+255),w,b
 10033  0009CE  0100               	movlb	0	; () banked
 10034  0009D0  1986               	xorwf	_cmd_data& (0+255),w,b
 10035  0009D2  A4D8               	btfss	status,2,c
 10036  0009D4  D146               	goto	l6873
 10037                           
 10038                           ; BSR set to: 0
 10039                           ;cmd_consol.c: 220: temp = strtok((0), "-', /=");
 10040  0009D6  0E00               	movlw	0
 10041  0009D8  6E1D               	movwf	strtok@s1,c
 10042  0009DA  0E00               	movlw	0
 10043  0009DC  6E1E               	movwf	strtok@s1+1,c
 10044  0009DE  0EE1               	movlw	low STR_24
 10045  0009E0  6E1F               	movwf	strtok@s2,c
 10046  0009E2  0EFF               	movlw	high STR_24
 10047  0009E4  6E20               	movwf	strtok@s2+1,c
 10048  0009E6  EC4C  F015         	call	_strtok	;wreg free
 10049  0009EA  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
 10050  0009EE  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
 10051                           
 10052                           ;cmd_consol.c: 221: if (temp != (0)) {
 10053  0009F2  0100               	movlb	0	; () banked
 10054  0009F4  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
 10055  0009F6  0100               	movlb	0	; () banked
 10056  0009F8  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10057  0009FA  B4D8               	btfsc	status,2,c
 10058  0009FC  D132               	goto	l6873
 10059                           
 10060                           ; BSR set to: 0
 10061                           ;cmd_consol.c: 222: collect_row(temp, &cmd_data.start_row);
 10062  0009FE  C0EA  F036         	movff	parse_cmd_str@temp,collect_row@str
 10063  000A02  C0EB  F037         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10064  000A06  0EB0               	movlw	low (_cmd_data+42)
 10065  000A08  6E38               	movwf	collect_row@data_row,c
 10066  000A0A  0E00               	movlw	high (_cmd_data+42)
 10067  000A0C  6E39               	movwf	collect_row@data_row+1,c
 10068  000A0E  EC77  F014         	call	_collect_row	;wreg free
 10069                           
 10070                           ;cmd_consol.c: 223: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 10071  000A12  0E68               	movlw	low STR_59
 10072  000A14  6E24               	movwf	printf@f,c
 10073  000A16  0EFD               	movlw	high STR_59
 10074  000A18  6E25               	movwf	printf@f+1,c
 10075  000A1A  C0B0  F026         	movff	_cmd_data+42,?_printf+2
 10076  000A1E  6A27               	clrf	?_printf+3,c
 10077  000A20  EC0F  F00F         	call	_printf	;wreg free
 10078                           
 10079                           ;cmd_consol.c: 224: if (cmd_data.start_row != 255) {
 10080  000A24  0100               	movlb	0	; () banked
 10081  000A26  29B0               	incf	(_cmd_data+42)& (0+255),w,b
 10082  000A28  B4D8               	btfsc	status,2,c
 10083  000A2A  D0AD               	goto	l6843
 10084                           
 10085                           ; BSR set to: 0
 10086                           ;cmd_consol.c: 225: temp = strtok((0), "-', /=");
 10087  000A2C  0E00               	movlw	0
 10088  000A2E  6E1D               	movwf	strtok@s1,c
 10089  000A30  0E00               	movlw	0
 10090  000A32  6E1E               	movwf	strtok@s1+1,c
 10091  000A34  0EE1               	movlw	low STR_24
 10092  000A36  6E1F               	movwf	strtok@s2,c
 10093  000A38  0EFF               	movlw	high STR_24
 10094  000A3A  6E20               	movwf	strtok@s2+1,c
 10095  000A3C  EC4C  F015         	call	_strtok	;wreg free
 10096  000A40  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
 10097  000A44  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
 10098                           
 10099                           ;cmd_consol.c: 226: if (temp != (0)) {
 10100  000A48  0100               	movlb	0	; () banked
 10101  000A4A  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
 10102  000A4C  0100               	movlb	0	; () banked
 10103  000A4E  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10104  000A50  B4D8               	btfsc	status,2,c
 10105  000A52  D107               	goto	l6873
 10106                           
 10107                           ; BSR set to: 0
 10108                           ;cmd_consol.c: 227: collect_column(temp, &cmd_data.start_col);
 10109  000A54  C0EA  F036         	movff	parse_cmd_str@temp,collect_column@str
 10110  000A58  C0EB  F037         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10111  000A5C  0EB1               	movlw	low (_cmd_data+43)
 10112  000A5E  6E38               	movwf	collect_column@data_column,c
 10113  000A60  0E00               	movlw	high (_cmd_data+43)
 10114  000A62  6E39               	movwf	collect_column@data_column+1,c
 10115  000A64  ECFB  F00F         	call	_collect_column	;wreg free
 10116                           
 10117                           ;cmd_consol.c: 228: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 10118  000A68  0E4D               	movlw	low STR_61
 10119  000A6A  6E24               	movwf	printf@f,c
 10120  000A6C  0EFD               	movlw	high STR_61
 10121  000A6E  6E25               	movwf	printf@f+1,c
 10122  000A70  C0B1  F026         	movff	_cmd_data+43,?_printf+2
 10123  000A74  6A27               	clrf	?_printf+3,c
 10124  000A76  EC0F  F00F         	call	_printf	;wreg free
 10125                           
 10126                           ;cmd_consol.c: 229: if (cmd_data.start_row != 255) {
 10127  000A7A  0100               	movlb	0	; () banked
 10128  000A7C  29B0               	incf	(_cmd_data+42)& (0+255),w,b
 10129  000A7E  B4D8               	btfsc	status,2,c
 10130  000A80  D080               	goto	l6839
 10131                           
 10132                           ; BSR set to: 0
 10133                           ;cmd_consol.c: 230: temp = strtok((0), "-', /=");
 10134  000A82  0E00               	movlw	0
 10135  000A84  6E1D               	movwf	strtok@s1,c
 10136  000A86  0E00               	movlw	0
 10137  000A88  6E1E               	movwf	strtok@s1+1,c
 10138  000A8A  0EE1               	movlw	low STR_24
 10139  000A8C  6E1F               	movwf	strtok@s2,c
 10140  000A8E  0EFF               	movlw	high STR_24
 10141  000A90  6E20               	movwf	strtok@s2+1,c
 10142  000A92  EC4C  F015         	call	_strtok	;wreg free
 10143  000A96  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
 10144  000A9A  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
 10145                           
 10146                           ;cmd_consol.c: 231: if (temp != (0)) {
 10147  000A9E  0100               	movlb	0	; () banked
 10148  000AA0  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
 10149  000AA2  0100               	movlb	0	; () banked
 10150  000AA4  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10151  000AA6  B4D8               	btfsc	status,2,c
 10152  000AA8  D0DC               	goto	l6873
 10153                           
 10154                           ; BSR set to: 0
 10155                           ;cmd_consol.c: 232: collect_row(temp, &cmd_data.end_row);
 10156  000AAA  C0EA  F036         	movff	parse_cmd_str@temp,collect_row@str
 10157  000AAE  C0EB  F037         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10158  000AB2  0EB2               	movlw	low (_cmd_data+44)
 10159  000AB4  6E38               	movwf	collect_row@data_row,c
 10160  000AB6  0E00               	movlw	high (_cmd_data+44)
 10161  000AB8  6E39               	movwf	collect_row@data_row+1,c
 10162  000ABA  EC77  F014         	call	_collect_row	;wreg free
 10163                           
 10164                           ;cmd_consol.c: 233: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 10165  000ABE  0EB6               	movlw	low STR_63
 10166  000AC0  6E24               	movwf	printf@f,c
 10167  000AC2  0EFD               	movlw	high STR_63
 10168  000AC4  6E25               	movwf	printf@f+1,c
 10169  000AC6  C0B2  F026         	movff	_cmd_data+44,?_printf+2
 10170  000ACA  6A27               	clrf	?_printf+3,c
 10171  000ACC  EC0F  F00F         	call	_printf	;wreg free
 10172                           
 10173                           ;cmd_consol.c: 234: if (cmd_data.end_row != 255) {
 10174  000AD0  0100               	movlb	0	; () banked
 10175  000AD2  29B2               	incf	(_cmd_data+44)& (0+255),w,b
 10176  000AD4  B4D8               	btfsc	status,2,c
 10177  000AD6  D053               	goto	l6835
 10178                           
 10179                           ; BSR set to: 0
 10180                           ;cmd_consol.c: 235: temp = strtok((0), "-', /=");
 10181  000AD8  0E00               	movlw	0
 10182  000ADA  6E1D               	movwf	strtok@s1,c
 10183  000ADC  0E00               	movlw	0
 10184  000ADE  6E1E               	movwf	strtok@s1+1,c
 10185  000AE0  0EE1               	movlw	low STR_24
 10186  000AE2  6E1F               	movwf	strtok@s2,c
 10187  000AE4  0EFF               	movlw	high STR_24
 10188  000AE6  6E20               	movwf	strtok@s2+1,c
 10189  000AE8  EC4C  F015         	call	_strtok	;wreg free
 10190  000AEC  C01D  F0EA         	movff	?_strtok,parse_cmd_str@temp
 10191  000AF0  C01E  F0EB         	movff	?_strtok+1,parse_cmd_str@temp+1
 10192                           
 10193                           ;cmd_consol.c: 236: if (temp != (0)) {
 10194  000AF4  0100               	movlb	0	; () banked
 10195  000AF6  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
 10196  000AF8  0100               	movlb	0	; () banked
 10197  000AFA  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10198  000AFC  B4D8               	btfsc	status,2,c
 10199  000AFE  D0B1               	goto	l6873
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;cmd_consol.c: 237: printf("col = %s\r\n", temp);
 10203  000B00  0E19               	movlw	low STR_65
 10204  000B02  6E24               	movwf	printf@f,c
 10205  000B04  0EFF               	movlw	high STR_65
 10206  000B06  6E25               	movwf	printf@f+1,c
 10207  000B08  C0EA  F026         	movff	parse_cmd_str@temp,?_printf+2
 10208  000B0C  C0EB  F027         	movff	parse_cmd_str@temp+1,?_printf+3
 10209  000B10  EC0F  F00F         	call	_printf	;wreg free
 10210                           
 10211                           ;cmd_consol.c: 238: collect_column(temp, &cmd_data.end_col);
 10212  000B14  C0EA  F036         	movff	parse_cmd_str@temp,collect_column@str
 10213  000B18  C0EB  F037         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10214  000B1C  0EB3               	movlw	low (_cmd_data+45)
 10215  000B1E  6E38               	movwf	collect_column@data_column,c
 10216  000B20  0E00               	movlw	high (_cmd_data+45)
 10217  000B22  6E39               	movwf	collect_column@data_column+1,c
 10218  000B24  ECFB  F00F         	call	_collect_column	;wreg free
 10219                           
 10220                           ;cmd_consol.c: 239: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 10221  000B28  0E9D               	movlw	low STR_66
 10222  000B2A  6E24               	movwf	printf@f,c
 10223  000B2C  0EFD               	movlw	high STR_66
 10224  000B2E  6E25               	movwf	printf@f+1,c
 10225  000B30  C0B3  F026         	movff	_cmd_data+45,?_printf+2
 10226  000B34  6A27               	clrf	?_printf+3,c
 10227  000B36  EC0F  F00F         	call	_printf	;wreg free
 10228                           
 10229                           ;cmd_consol.c: 240: if (cmd_data.end_row != 255) {
 10230  000B3A  0100               	movlb	0	; () banked
 10231  000B3C  29B2               	incf	(_cmd_data+44)& (0+255),w,b
 10232  000B3E  B4D8               	btfsc	status,2,c
 10233  000B40  D01C               	goto	l6831
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;cmd_consol.c: 241: cmd_data.row_col_set = 1;
 10237  000B42  0E01               	movlw	1
 10238  000B44  0100               	movlb	0	; () banked
 10239  000B46  6FB4               	movwf	(_cmd_data+46)& (0+255),b
 10240                           
 10241                           ;cmd_consol.c: 242: valid_cmd = 1;
 10242  000B48  0E01               	movlw	1
 10243  000B4A  0100               	movlb	0	; () banked
 10244  000B4C  6F84               	movwf	_valid_cmd& (0+255),b
 10245                           
 10246                           ; BSR set to: 0
 10247                           ;cmd_consol.c: 243: memset(str, 0, strlen(str));
 10248  000B4E  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10249  000B52  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10250  000B56  0E00               	movlw	0
 10251  000B58  6E27               	movwf	memset@c+1,c
 10252  000B5A  0E00               	movlw	0
 10253  000B5C  6E26               	movwf	memset@c,c
 10254  000B5E  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10255  000B62  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10256  000B66  EC0D  F018         	call	_strlen	;wreg free
 10257  000B6A  C01E  F028         	movff	?_strlen,memset@n
 10258  000B6E  C01F  F029         	movff	?_strlen+1,memset@n+1
 10259  000B72  EC5E  F01A         	call	_memset	;wreg free
 10260  000B76  EFAD  F000         	goto	l6523
 10261  000B7A                     l6831:
 10262                           
 10263                           ;cmd_consol.c: 246: return 3;
 10264  000B7A  0E03               	movlw	3
 10265  000B7C  0012               	return	
 10266  000B7E                     l6835:
 10267                           
 10268                           ;cmd_consol.c: 250: return 3;
 10269  000B7E  0E03               	movlw	3
 10270  000B80  0012               	return	
 10271  000B82                     l6839:
 10272                           
 10273                           ;cmd_consol.c: 254: return 3;
 10274  000B82  0E03               	movlw	3
 10275  000B84  0012               	return	
 10276  000B86                     l6843:
 10277                           
 10278                           ;cmd_consol.c: 258: return 3;
 10279  000B86  0E03               	movlw	3
 10280  000B88  0012               	return	
 10281  000B8A                     l6847:
 10282                           
 10283                           ;cmd_consol.c: 263: return 7;
 10284  000B8A  0E07               	movlw	7
 10285  000B8C  0012               	return	
 10286  000B8E                     l6851:
 10287  000B8E  C0E8  F02D         	movff	parse_cmd_str@ptr,strstr@s1
 10288  000B92  C0E9  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10289  000B96  0E45               	movlw	low STR_67
 10290  000B98  6E2F               	movwf	strstr@s2,c
 10291  000B9A  0EFF               	movlw	high STR_67
 10292  000B9C  6E30               	movwf	strstr@s2+1,c
 10293  000B9E  EC05  F016         	call	_strstr	;wreg free
 10294  000BA2  C02D  F0EA         	movff	?_strstr,parse_cmd_str@temp
 10295  000BA6  C02E  F0EB         	movff	?_strstr+1,parse_cmd_str@temp+1
 10296  000BAA  0100               	movlb	0	; () banked
 10297  000BAC  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
 10298  000BAE  0100               	movlb	0	; () banked
 10299  000BB0  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10300  000BB2  B4D8               	btfsc	status,2,c
 10301  000BB4  D01F               	goto	l6863
 10302                           
 10303                           ; BSR set to: 0
 10304                           ;cmd_consol.c: 269: strcpy(CMD, temp);
 10305  000BB6  0ECB               	movlw	low _CMD
 10306  000BB8  6E10               	movwf	strcpy@to,c
 10307  000BBA  0E00               	movlw	high _CMD
 10308  000BBC  6E11               	movwf	strcpy@to+1,c
 10309  000BBE  C0EA  F012         	movff	parse_cmd_str@temp,strcpy@from
 10310  000BC2  C0EB  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10311  000BC6  EC1F  F019         	call	_strcpy	;wreg free
 10312                           
 10313                           ;cmd_consol.c: 270: memset(str, 0, strlen(str));
 10314  000BCA  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10315  000BCE  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10316  000BD2  0E00               	movlw	0
 10317  000BD4  6E27               	movwf	memset@c+1,c
 10318  000BD6  0E00               	movlw	0
 10319  000BD8  6E26               	movwf	memset@c,c
 10320  000BDA  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10321  000BDE  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10322  000BE2  EC0D  F018         	call	_strlen	;wreg free
 10323  000BE6  C01E  F028         	movff	?_strlen,memset@n
 10324  000BEA  C01F  F029         	movff	?_strlen+1,memset@n+1
 10325  000BEE  EC5E  F01A         	call	_memset	;wreg free
 10326  000BF2  D032               	goto	l6867
 10327  000BF4                     l6863:
 10328                           
 10329                           ; BSR set to: 0
 10330  000BF4  C0E8  F02D         	movff	parse_cmd_str@ptr,strstr@s1
 10331  000BF8  C0E9  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10332  000BFC  0EF8               	movlw	low STR_68
 10333  000BFE  6E2F               	movwf	strstr@s2,c
 10334  000C00  0EFF               	movlw	high STR_68
 10335  000C02  6E30               	movwf	strstr@s2+1,c
 10336  000C04  EC05  F016         	call	_strstr	;wreg free
 10337  000C08  C02D  F0EA         	movff	?_strstr,parse_cmd_str@temp
 10338  000C0C  C02E  F0EB         	movff	?_strstr+1,parse_cmd_str@temp+1
 10339  000C10  0100               	movlb	0	; () banked
 10340  000C12  51EA               	movf	parse_cmd_str@temp& (0+255),w,b
 10341  000C14  0100               	movlb	0	; () banked
 10342  000C16  11EB               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10343  000C18  B4D8               	btfsc	status,2,c
 10344  000C1A  D023               	goto	l6873
 10345                           
 10346                           ; BSR set to: 0
 10347                           ;cmd_consol.c: 274: strcpy(CMD, temp);
 10348  000C1C  0ECB               	movlw	low _CMD
 10349  000C1E  6E10               	movwf	strcpy@to,c
 10350  000C20  0E00               	movlw	high _CMD
 10351  000C22  6E11               	movwf	strcpy@to+1,c
 10352  000C24  C0EA  F012         	movff	parse_cmd_str@temp,strcpy@from
 10353  000C28  C0EB  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10354  000C2C  EC1F  F019         	call	_strcpy	;wreg free
 10355                           
 10356                           ;cmd_consol.c: 275: memset(str, 0, strlen(str));
 10357  000C30  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10358  000C34  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10359  000C38  0E00               	movlw	0
 10360  000C3A  6E27               	movwf	memset@c+1,c
 10361  000C3C  0E00               	movlw	0
 10362  000C3E  6E26               	movwf	memset@c,c
 10363  000C40  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10364  000C44  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10365  000C48  EC0D  F018         	call	_strlen	;wreg free
 10366  000C4C  C01E  F028         	movff	?_strlen,memset@n
 10367  000C50  C01F  F029         	movff	?_strlen+1,memset@n+1
 10368  000C54  EC5E  F01A         	call	_memset	;wreg free
 10369  000C58                     l6867:
 10370                           
 10371                           ;cmd_consol.c: 276: valid_cmd = 1;
 10372  000C58  0E01               	movlw	1
 10373  000C5A  0100               	movlb	0	; () banked
 10374  000C5C  6F84               	movwf	_valid_cmd& (0+255),b
 10375  000C5E  EFAD  F000         	goto	l6523
 10376  000C62                     l6873:
 10377                           
 10378                           ;cmd_consol.c: 278: }
 10379                           ;cmd_consol.c: 279: memset(str, 0, strlen(str));
 10380  000C62  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10381  000C66  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10382  000C6A  0E00               	movlw	0
 10383  000C6C  6E27               	movwf	memset@c+1,c
 10384  000C6E  0E00               	movlw	0
 10385  000C70  6E26               	movwf	memset@c,c
 10386  000C72  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10387  000C76  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10388  000C7A  EC0D  F018         	call	_strlen	;wreg free
 10389  000C7E  C01E  F028         	movff	?_strlen,memset@n
 10390  000C82  C01F  F029         	movff	?_strlen+1,memset@n+1
 10391  000C86  EC5E  F01A         	call	_memset	;wreg free
 10392                           
 10393                           ;cmd_consol.c: 280: return 1;
 10394  000C8A  0E01               	movlw	1
 10395  000C8C  0012               	return	
 10396  000C8E                     __end_of_parse_cmd_str:
 10397                           	opt stack 0
 10398                           tblptru	equ	0xFF8
 10399                           tblptrh	equ	0xFF7
 10400                           tblptrl	equ	0xFF6
 10401                           tablat	equ	0xFF5
 10402                           prodh	equ	0xFF4
 10403                           prodl	equ	0xFF3
 10404                           intcon	equ	0xFF2
 10405                           indf0	equ	0xFEF
 10406                           postinc0	equ	0xFEE
 10407                           fsr0h	equ	0xFEA
 10408                           fsr0l	equ	0xFE9
 10409                           wreg	equ	0xFE8
 10410                           indf1	equ	0xFE7
 10411                           postdec1	equ	0xFE5
 10412                           fsr1h	equ	0xFE2
 10413                           fsr1l	equ	0xFE1
 10414                           indf2	equ	0xFDF
 10415                           postinc2	equ	0xFDE
 10416                           fsr2h	equ	0xFDA
 10417                           fsr2l	equ	0xFD9
 10418                           status	equ	0xFD8
 10419                           
 10420 ;; *************** function _strtok *****************
 10421 ;; Defined at:
 10422 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strtok.c"
 10423 ;; Parameters:    Size  Location     Type
 10424 ;;  s1              2   28[COMRAM] PTR unsigned char 
 10425 ;;		 -> uart_str(150), NULL(0), 
 10426 ;;  s2              2   30[COMRAM] PTR const unsigned char 
 10427 ;;		 -> STR_64(7), STR_62(7), STR_60(7), STR_58(7), 
 10428 ;;		 -> STR_56(7), STR_55(7), STR_51(7), STR_48(7), 
 10429 ;;		 -> STR_47(7), STR_43(7), STR_40(7), STR_38(7), 
 10430 ;;		 -> STR_36(7), STR_34(7), STR_32(7), STR_31(7), 
 10431 ;;		 -> STR_28(7), STR_26(7), STR_24(7), 
 10432 ;; Auto vars:     Size  Location     Type
 10433 ;;		None
 10434 ;; Return value:  Size  Location     Type
 10435 ;;                  2   28[COMRAM] PTR unsigned char 
 10436 ;; Registers used:
 10437 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10438 ;; Tracked objects:
 10439 ;;		On entry : 0/0
 10440 ;;		On exit  : 0/0
 10441 ;;		Unchanged: 0/0
 10442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10443 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10446 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;Total ram usage:        4 bytes
 10448 ;; Hardware stack levels used:    1
 10449 ;; Hardware stack levels required when called:    7
 10450 ;; This function calls:
 10451 ;;		_strcspn
 10452 ;;		_strspn
 10453 ;; This function is called by:
 10454 ;;		_parse_cmd_str
 10455 ;; This function uses a non-reentrant model
 10456 ;;
 10457                           
 10458                           	psect	text43
 10459  002A98                     __ptext43:
 10460                           	opt stack 0
 10461  002A98                     _strtok:
 10462                           	opt stack 21
 10463                           
 10464                           ;incstack = 0
 10465  002A98  501D               	movf	strtok@s1,w,c
 10466  002A9A  101E               	iorwf	strtok@s1+1,w,c
 10467  002A9C  A4D8               	btfss	status,2,c
 10468  002A9E  D004               	goto	l1632
 10469  002AA0  C07C  F01D         	movff	strtok@sp,strtok@s1
 10470  002AA4  C07D  F01E         	movff	strtok@sp+1,strtok@s1+1
 10471  002AA8                     l1632:
 10472  002AA8  501D               	movf	strtok@s1,w,c
 10473  002AAA  101E               	iorwf	strtok@s1+1,w,c
 10474  002AAC  A4D8               	btfss	status,2,c
 10475  002AAE  D005               	goto	l6411
 10476  002AB0  0E00               	movlw	0
 10477  002AB2  6E1D               	movwf	?_strtok,c
 10478  002AB4  0E00               	movlw	0
 10479  002AB6  6E1E               	movwf	?_strtok+1,c
 10480  002AB8  0012               	return	
 10481  002ABA                     l6411:
 10482  002ABA  C01D  F016         	movff	strtok@s1,strspn@s1
 10483  002ABE  C01E  F017         	movff	strtok@s1+1,strspn@s1+1
 10484  002AC2  C01F  F018         	movff	strtok@s2,strspn@s2
 10485  002AC6  C020  F019         	movff	strtok@s2+1,strspn@s2+1
 10486  002ACA  EC60  F018         	call	_strspn	;wreg free
 10487  002ACE  5016               	movf	?_strspn,w,c
 10488  002AD0  261D               	addwf	strtok@s1,f,c
 10489  002AD2  5017               	movf	?_strspn+1,w,c
 10490  002AD4  221E               	addwfc	strtok@s1+1,f,c
 10491  002AD6  C01D  FFD9         	movff	strtok@s1,fsr2l
 10492  002ADA  C01E  FFDA         	movff	strtok@s1+1,fsr2h
 10493  002ADE  50DF               	movf	indf2,w,c
 10494  002AE0  A4D8               	btfss	status,2,c
 10495  002AE2  D00B               	goto	l6419
 10496  002AE4  0E00               	movlw	0
 10497  002AE6  0100               	movlb	0	; () banked
 10498  002AE8  6F7C               	movwf	strtok@sp& (0+255),b
 10499  002AEA  0E00               	movlw	0
 10500  002AEC  0100               	movlb	0	; () banked
 10501  002AEE  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10502  002AF0  C07C  F01D         	movff	strtok@sp,?_strtok
 10503  002AF4  C07D  F01E         	movff	strtok@sp+1,?_strtok+1
 10504                           
 10505                           ; BSR set to: 0
 10506  002AF8  0012               	return	
 10507  002AFA                     l6419:
 10508  002AFA  C01D  F016         	movff	strtok@s1,strcspn@s1
 10509  002AFE  C01E  F017         	movff	strtok@s1+1,strcspn@s1+1
 10510  002B02  C01F  F018         	movff	strtok@s2,strcspn@s2
 10511  002B06  C020  F019         	movff	strtok@s2+1,strcspn@s2+1
 10512  002B0A  EC88  F018         	call	_strcspn	;wreg free
 10513  002B0E  5016               	movf	?_strcspn,w,c
 10514  002B10  241D               	addwf	strtok@s1,w,c
 10515  002B12  0100               	movlb	0	; () banked
 10516  002B14  6F7C               	movwf	strtok@sp& (0+255),b
 10517  002B16  5017               	movf	?_strcspn+1,w,c
 10518  002B18  201E               	addwfc	strtok@s1+1,w,c
 10519  002B1A  0100               	movlb	0	; () banked
 10520  002B1C  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10521                           
 10522                           ; BSR set to: 0
 10523  002B1E  C07C  FFD9         	movff	strtok@sp,fsr2l
 10524  002B22  C07D  FFDA         	movff	strtok@sp+1,fsr2h
 10525  002B26  50DF               	movf	indf2,w,c
 10526  002B28  B4D8               	btfsc	status,2,c
 10527  002B2A  D00A               	goto	l6427
 10528                           
 10529                           ; BSR set to: 0
 10530  002B2C  C07C  FFD9         	movff	strtok@sp,fsr2l
 10531  002B30  C07D  FFDA         	movff	strtok@sp+1,fsr2h
 10532  002B34  0E00               	movlw	0
 10533  002B36  6EDF               	movwf	indf2,c
 10534                           
 10535                           ; BSR set to: 0
 10536  002B38  0100               	movlb	0	; () banked
 10537  002B3A  4B7C               	infsnz	strtok@sp& (0+255),f,b
 10538  002B3C  2B7D               	incf	(strtok@sp+1)& (0+255),f,b
 10539  002B3E  D006               	goto	l1637
 10540  002B40                     l6427:
 10541                           
 10542                           ; BSR set to: 0
 10543  002B40  0E00               	movlw	0
 10544  002B42  0100               	movlb	0	; () banked
 10545  002B44  6F7C               	movwf	strtok@sp& (0+255),b
 10546  002B46  0E00               	movlw	0
 10547  002B48  0100               	movlb	0	; () banked
 10548  002B4A  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10549  002B4C                     l1637:
 10550                           
 10551                           ; BSR set to: 0
 10552  002B4C  C01D  F01D         	movff	strtok@s1,?_strtok
 10553  002B50  C01E  F01E         	movff	strtok@s1+1,?_strtok+1
 10554  002B54  0012               	return	
 10555  002B56                     __end_of_strtok:
 10556                           	opt stack 0
 10557                           tblptru	equ	0xFF8
 10558                           tblptrh	equ	0xFF7
 10559                           tblptrl	equ	0xFF6
 10560                           tablat	equ	0xFF5
 10561                           prodh	equ	0xFF4
 10562                           prodl	equ	0xFF3
 10563                           intcon	equ	0xFF2
 10564                           indf0	equ	0xFEF
 10565                           postinc0	equ	0xFEE
 10566                           fsr0h	equ	0xFEA
 10567                           fsr0l	equ	0xFE9
 10568                           wreg	equ	0xFE8
 10569                           indf1	equ	0xFE7
 10570                           postdec1	equ	0xFE5
 10571                           fsr1h	equ	0xFE2
 10572                           fsr1l	equ	0xFE1
 10573                           indf2	equ	0xFDF
 10574                           postinc2	equ	0xFDE
 10575                           fsr2h	equ	0xFDA
 10576                           fsr2l	equ	0xFD9
 10577                           status	equ	0xFD8
 10578                           
 10579 ;; *************** function _strspn *****************
 10580 ;; Defined at:
 10581 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strspn.c"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;  s1              2   21[COMRAM] PTR const unsigned char 
 10584 ;;		 -> uart_str(150), NULL(0), 
 10585 ;;  s2              2   23[COMRAM] PTR const unsigned char 
 10586 ;;		 -> STR_64(7), STR_62(7), STR_60(7), STR_58(7), 
 10587 ;;		 -> STR_56(7), STR_55(7), STR_51(7), STR_48(7), 
 10588 ;;		 -> STR_47(7), STR_43(7), STR_40(7), STR_38(7), 
 10589 ;;		 -> STR_36(7), STR_34(7), STR_32(7), STR_31(7), 
 10590 ;;		 -> STR_28(7), STR_26(7), STR_24(7), 
 10591 ;; Auto vars:     Size  Location     Type
 10592 ;;  i               2   26[COMRAM] unsigned int 
 10593 ;; Return value:  Size  Location     Type
 10594 ;;                  2   21[COMRAM] unsigned int 
 10595 ;; Registers used:
 10596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10597 ;; Tracked objects:
 10598 ;;		On entry : 0/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10602 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10603 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;Total ram usage:        7 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:    6
 10609 ;; This function calls:
 10610 ;;		_strchr
 10611 ;; This function is called by:
 10612 ;;		_strtok
 10613 ;; This function uses a non-reentrant model
 10614 ;;
 10615                           
 10616                           	psect	text44
 10617  0030C0                     __ptext44:
 10618                           	opt stack 0
 10619  0030C0                     _strspn:
 10620                           	opt stack 21
 10621                           
 10622                           ;incstack = 0
 10623  0030C0  0E00               	movlw	0
 10624  0030C2  6E1C               	movwf	strspn@i+1,c
 10625  0030C4  0E00               	movlw	0
 10626  0030C6  6E1B               	movwf	strspn@i,c
 10627  0030C8  D004               	goto	l6161
 10628  0030CA                     l6159:
 10629  0030CA  4A16               	infsnz	strspn@s1,f,c
 10630  0030CC  2A17               	incf	strspn@s1+1,f,c
 10631  0030CE  4A1B               	infsnz	strspn@i,f,c
 10632  0030D0  2A1C               	incf	strspn@i+1,f,c
 10633  0030D2                     l6161:
 10634  0030D2  C016  FFD9         	movff	strspn@s1,fsr2l
 10635  0030D6  C017  FFDA         	movff	strspn@s1+1,fsr2h
 10636  0030DA  50DF               	movf	indf2,w,c
 10637  0030DC  B4D8               	btfsc	status,2,c
 10638  0030DE  D013               	goto	l1698
 10639  0030E0  C018  F010         	movff	strspn@s2,strchr@ptr
 10640  0030E4  C019  F011         	movff	strspn@s2+1,strchr@ptr+1
 10641  0030E8  C016  FFD9         	movff	strspn@s1,fsr2l
 10642  0030EC  C017  FFDA         	movff	strspn@s1+1,fsr2h
 10643  0030F0  50DF               	movf	indf2,w,c
 10644  0030F2  6E1A               	movwf	??_strspn& (0+255),c
 10645  0030F4  501A               	movf	??_strspn,w,c
 10646  0030F6  6E12               	movwf	strchr@chr,c
 10647  0030F8  6A13               	clrf	strchr@chr+1,c
 10648  0030FA  EC16  F017         	call	_strchr	;wreg free
 10649  0030FE  5010               	movf	?_strchr,w,c
 10650  003100  1011               	iorwf	?_strchr+1,w,c
 10651  003102  A4D8               	btfss	status,2,c
 10652  003104  D7E2               	goto	l6159
 10653  003106                     l1698:
 10654  003106  C01B  F016         	movff	strspn@i,?_strspn
 10655  00310A  C01C  F017         	movff	strspn@i+1,?_strspn+1
 10656  00310E  0012               	return		;funcret
 10657  003110                     __end_of_strspn:
 10658                           	opt stack 0
 10659                           tblptru	equ	0xFF8
 10660                           tblptrh	equ	0xFF7
 10661                           tblptrl	equ	0xFF6
 10662                           tablat	equ	0xFF5
 10663                           prodh	equ	0xFF4
 10664                           prodl	equ	0xFF3
 10665                           intcon	equ	0xFF2
 10666                           indf0	equ	0xFEF
 10667                           postinc0	equ	0xFEE
 10668                           fsr0h	equ	0xFEA
 10669                           fsr0l	equ	0xFE9
 10670                           wreg	equ	0xFE8
 10671                           indf1	equ	0xFE7
 10672                           postdec1	equ	0xFE5
 10673                           fsr1h	equ	0xFE2
 10674                           fsr1l	equ	0xFE1
 10675                           indf2	equ	0xFDF
 10676                           postinc2	equ	0xFDE
 10677                           fsr2h	equ	0xFDA
 10678                           fsr2l	equ	0xFD9
 10679                           status	equ	0xFD8
 10680                           
 10681 ;; *************** function _strcspn *****************
 10682 ;; Defined at:
 10683 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcspn.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;  s1              2   21[COMRAM] PTR const unsigned char 
 10686 ;;		 -> uart_str(150), NULL(0), 
 10687 ;;  s2              2   23[COMRAM] PTR const unsigned char 
 10688 ;;		 -> STR_64(7), STR_62(7), STR_60(7), STR_58(7), 
 10689 ;;		 -> STR_56(7), STR_55(7), STR_51(7), STR_48(7), 
 10690 ;;		 -> STR_47(7), STR_43(7), STR_40(7), STR_38(7), 
 10691 ;;		 -> STR_36(7), STR_34(7), STR_32(7), STR_31(7), 
 10692 ;;		 -> STR_28(7), STR_26(7), STR_24(7), 
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;  i               2   26[COMRAM] unsigned int 
 10695 ;; Return value:  Size  Location     Type
 10696 ;;                  2   21[COMRAM] unsigned int 
 10697 ;; Registers used:
 10698 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10699 ;; Tracked objects:
 10700 ;;		On entry : 0/0
 10701 ;;		On exit  : 0/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10705 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10706 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10707 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10708 ;;Total ram usage:        7 bytes
 10709 ;; Hardware stack levels used:    1
 10710 ;; Hardware stack levels required when called:    6
 10711 ;; This function calls:
 10712 ;;		_strchr
 10713 ;; This function is called by:
 10714 ;;		_strtok
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           	psect	text45
 10719  003110                     __ptext45:
 10720                           	opt stack 0
 10721  003110                     _strcspn:
 10722                           	opt stack 21
 10723                           
 10724                           ;incstack = 0
 10725  003110  0E00               	movlw	0
 10726  003112  6E1C               	movwf	strcspn@i+1,c
 10727  003114  0E00               	movlw	0
 10728  003116  6E1B               	movwf	strcspn@i,c
 10729  003118  D004               	goto	l6169
 10730  00311A                     l6167:
 10731  00311A  4A16               	infsnz	strcspn@s1,f,c
 10732  00311C  2A17               	incf	strcspn@s1+1,f,c
 10733  00311E  4A1B               	infsnz	strcspn@i,f,c
 10734  003120  2A1C               	incf	strcspn@i+1,f,c
 10735  003122                     l6169:
 10736  003122  C016  FFD9         	movff	strcspn@s1,fsr2l
 10737  003126  C017  FFDA         	movff	strcspn@s1+1,fsr2h
 10738  00312A  50DF               	movf	indf2,w,c
 10739  00312C  B4D8               	btfsc	status,2,c
 10740  00312E  D013               	goto	l1679
 10741  003130  C018  F010         	movff	strcspn@s2,strchr@ptr
 10742  003134  C019  F011         	movff	strcspn@s2+1,strchr@ptr+1
 10743  003138  C016  FFD9         	movff	strcspn@s1,fsr2l
 10744  00313C  C017  FFDA         	movff	strcspn@s1+1,fsr2h
 10745  003140  50DF               	movf	indf2,w,c
 10746  003142  6E1A               	movwf	??_strcspn& (0+255),c
 10747  003144  501A               	movf	??_strcspn,w,c
 10748  003146  6E12               	movwf	strchr@chr,c
 10749  003148  6A13               	clrf	strchr@chr+1,c
 10750  00314A  EC16  F017         	call	_strchr	;wreg free
 10751  00314E  5010               	movf	?_strchr,w,c
 10752  003150  1011               	iorwf	?_strchr+1,w,c
 10753  003152  B4D8               	btfsc	status,2,c
 10754  003154  D7E2               	goto	l6167
 10755  003156                     l1679:
 10756  003156  C01B  F016         	movff	strcspn@i,?_strcspn
 10757  00315A  C01C  F017         	movff	strcspn@i+1,?_strcspn+1
 10758  00315E  0012               	return		;funcret
 10759  003160                     __end_of_strcspn:
 10760                           	opt stack 0
 10761                           tblptru	equ	0xFF8
 10762                           tblptrh	equ	0xFF7
 10763                           tblptrl	equ	0xFF6
 10764                           tablat	equ	0xFF5
 10765                           prodh	equ	0xFF4
 10766                           prodl	equ	0xFF3
 10767                           intcon	equ	0xFF2
 10768                           indf0	equ	0xFEF
 10769                           postinc0	equ	0xFEE
 10770                           fsr0h	equ	0xFEA
 10771                           fsr0l	equ	0xFE9
 10772                           wreg	equ	0xFE8
 10773                           indf1	equ	0xFE7
 10774                           postdec1	equ	0xFE5
 10775                           fsr1h	equ	0xFE2
 10776                           fsr1l	equ	0xFE1
 10777                           indf2	equ	0xFDF
 10778                           postinc2	equ	0xFDE
 10779                           fsr2h	equ	0xFDA
 10780                           fsr2l	equ	0xFD9
 10781                           status	equ	0xFD8
 10782                           
 10783 ;; *************** function _strstr *****************
 10784 ;; Defined at:
 10785 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strstr.c"
 10786 ;; Parameters:    Size  Location     Type
 10787 ;;  s1              2   44[COMRAM] PTR const unsigned char 
 10788 ;;		 -> uart_str(150), STR_64(7), STR_62(7), STR_60(7), 
 10789 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 10790 ;;		 -> STR_48(7), STR_47(7), STR_43(7), STR_40(7), 
 10791 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 10792 ;;		 -> STR_31(7), STR_28(7), STR_26(7), STR_24(7), 
 10793 ;;		 -> NULL(0), 
 10794 ;;  s2              2   46[COMRAM] PTR const unsigned char 
 10795 ;;		 -> STR_68(4), STR_67(11), STR_54(11), STR_45(12), 
 10796 ;;		 -> STR_37(10), STR_35(10), STR_30(9), STR_27(10), 
 10797 ;;		 -> STR_25(8), STR_23(8), 
 10798 ;; Auto vars:     Size  Location     Type
 10799 ;;		None
 10800 ;; Return value:  Size  Location     Type
 10801 ;;                  2   44[COMRAM] PTR unsigned char 
 10802 ;; Registers used:
 10803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10804 ;; Tracked objects:
 10805 ;;		On entry : 0/0
 10806 ;;		On exit  : 0/0
 10807 ;;		Unchanged: 0/0
 10808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10809 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10812 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10813 ;;Total ram usage:        4 bytes
 10814 ;; Hardware stack levels used:    1
 10815 ;; Hardware stack levels required when called:    6
 10816 ;; This function calls:
 10817 ;;		_strchr
 10818 ;;		_strlen
 10819 ;;		_strncmp
 10820 ;; This function is called by:
 10821 ;;		_parse_cmd_str
 10822 ;; This function uses a non-reentrant model
 10823 ;;
 10824                           
 10825                           	psect	text46
 10826  002C0A                     __ptext46:
 10827                           	opt stack 0
 10828  002C0A                     _strstr:
 10829                           	opt stack 22
 10830                           
 10831                           ;incstack = 0
 10832  002C0A  D032               	goto	l6395
 10833  002C0C                     l6387:
 10834  002C0C  C02D  F024         	movff	strstr@s1,strncmp@s1
 10835  002C10  C02E  F025         	movff	strstr@s1+1,strncmp@s1+1
 10836  002C14  C02F  F026         	movff	strstr@s2,strncmp@s2
 10837  002C18  C030  F027         	movff	strstr@s2+1,strncmp@s2+1
 10838  002C1C  C02F  F01E         	movff	strstr@s2,strlen@s
 10839  002C20  C030  F01F         	movff	strstr@s2+1,strlen@s+1
 10840  002C24  EC0D  F018         	call	_strlen	;wreg free
 10841  002C28  C01E  F028         	movff	?_strlen,strncmp@len
 10842  002C2C  C01F  F029         	movff	?_strlen+1,strncmp@len+1
 10843  002C30  ECE4  F014         	call	_strncmp	;wreg free
 10844  002C34  5024               	movf	?_strncmp,w,c
 10845  002C36  1025               	iorwf	?_strncmp+1,w,c
 10846  002C38  A4D8               	btfss	status,2,c
 10847  002C3A  D005               	goto	l6393
 10848  002C3C  C02D  F02D         	movff	strstr@s1,?_strstr
 10849  002C40  C02E  F02E         	movff	strstr@s1+1,?_strstr+1
 10850  002C44  0012               	return	
 10851  002C46                     l6393:
 10852  002C46  0E01               	movlw	1
 10853  002C48  242D               	addwf	strstr@s1,w,c
 10854  002C4A  6E10               	movwf	strchr@ptr,c
 10855  002C4C  0E00               	movlw	0
 10856  002C4E  202E               	addwfc	strstr@s1+1,w,c
 10857  002C50  6E11               	movwf	strchr@ptr+1,c
 10858  002C52  C02F  FFF6         	movff	strstr@s2,tblptrl
 10859  002C56  C030  FFF7         	movff	strstr@s2+1,tblptrh
 10860  002C5A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10861  002C5A  6AF8               	clrf	tblptru,c
 10862  002C5C                     	endif
 10863  002C5C                     	if	0	;tblptru may be non-zero
 10864  002C5C                     	endif
 10865  002C5C  0008               	tblrd		*
 10866  002C5E  50F5               	movf	tablat,w,c
 10867  002C60  6E12               	movwf	strchr@chr,c
 10868  002C62  6A13               	clrf	strchr@chr+1,c
 10869  002C64  EC16  F017         	call	_strchr	;wreg free
 10870  002C68  C010  F02D         	movff	?_strchr,strstr@s1
 10871  002C6C  C011  F02E         	movff	?_strchr+1,strstr@s1+1
 10872  002C70                     l6395:
 10873  002C70  502D               	movf	strstr@s1,w,c
 10874  002C72  102E               	iorwf	strstr@s1+1,w,c
 10875  002C74  B4D8               	btfsc	status,2,c
 10876  002C76  D014               	goto	l6399
 10877  002C78  C02D  FFF6         	movff	strstr@s1,tblptrl
 10878  002C7C  C02E  FFF7         	movff	strstr@s1+1,tblptrh
 10879  002C80  0E00               	movlw	low (__mediumconst shr (0+16))
 10880  002C82  6EF8               	movwf	tblptru,c
 10881  002C84  0E0F               	movlw	(high __ramtop+-1)
 10882  002C86  64F7               	cpfsgt	tblptrh,c
 10883  002C88  D003               	bra	u6387
 10884  002C8A  0008               	tblrd		*
 10885  002C8C  50F5               	movf	tablat,w,c
 10886  002C8E  D005               	bra	u6380
 10887  002C90                     u6387:
 10888  002C90  CFF6 FFE9          	movff	tblptrl,fsr0l
 10889  002C94  CFF7 FFEA          	movff	tblptrh,fsr0h
 10890  002C98  50EF               	movf	indf0,w,c
 10891  002C9A                     u6380:
 10892  002C9A  0900               	iorlw	0
 10893  002C9C  A4D8               	btfss	status,2,c
 10894  002C9E  D7B6               	goto	l6387
 10895  002CA0                     l6399:
 10896  002CA0  0E00               	movlw	0
 10897  002CA2  6E2D               	movwf	?_strstr,c
 10898  002CA4  0E00               	movlw	0
 10899  002CA6  6E2E               	movwf	?_strstr+1,c
 10900  002CA8  0012               	return	
 10901  002CAA                     __end_of_strstr:
 10902                           	opt stack 0
 10903                           tblptru	equ	0xFF8
 10904                           tblptrh	equ	0xFF7
 10905                           tblptrl	equ	0xFF6
 10906                           tablat	equ	0xFF5
 10907                           prodh	equ	0xFF4
 10908                           prodl	equ	0xFF3
 10909                           intcon	equ	0xFF2
 10910                           indf0	equ	0xFEF
 10911                           postinc0	equ	0xFEE
 10912                           fsr0h	equ	0xFEA
 10913                           fsr0l	equ	0xFE9
 10914                           wreg	equ	0xFE8
 10915                           indf1	equ	0xFE7
 10916                           postdec1	equ	0xFE5
 10917                           fsr1h	equ	0xFE2
 10918                           fsr1l	equ	0xFE1
 10919                           indf2	equ	0xFDF
 10920                           postinc2	equ	0xFDE
 10921                           fsr2h	equ	0xFDA
 10922                           fsr2l	equ	0xFD9
 10923                           status	equ	0xFD8
 10924                           
 10925 ;; *************** function _strncmp *****************
 10926 ;; Defined at:
 10927 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncmp.c"
 10928 ;; Parameters:    Size  Location     Type
 10929 ;;  s1              2   35[COMRAM] PTR const unsigned char 
 10930 ;;		 -> uart_str(150), STR_64(7), STR_62(7), STR_60(7), 
 10931 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 10932 ;;		 -> STR_48(7), STR_47(7), STR_43(7), STR_40(7), 
 10933 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 10934 ;;		 -> STR_31(7), STR_28(7), STR_26(7), STR_24(7), 
 10935 ;;		 -> NULL(0), 
 10936 ;;  s2              2   37[COMRAM] PTR const unsigned char 
 10937 ;;		 -> STR_68(4), STR_67(11), STR_54(11), STR_45(12), 
 10938 ;;		 -> STR_37(10), STR_35(10), STR_30(9), STR_27(10), 
 10939 ;;		 -> STR_25(8), STR_23(8), 
 10940 ;;  len             2   39[COMRAM] unsigned int 
 10941 ;; Auto vars:     Size  Location     Type
 10942 ;;		None
 10943 ;; Return value:  Size  Location     Type
 10944 ;;                  2   35[COMRAM] int 
 10945 ;; Registers used:
 10946 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 10947 ;; Tracked objects:
 10948 ;;		On entry : 0/0
 10949 ;;		On exit  : 0/0
 10950 ;;		Unchanged: 0/0
 10951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10952 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10954 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10955 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10956 ;;Total ram usage:        9 bytes
 10957 ;; Hardware stack levels used:    1
 10958 ;; Hardware stack levels required when called:    5
 10959 ;; This function calls:
 10960 ;;		Nothing
 10961 ;; This function is called by:
 10962 ;;		_strstr
 10963 ;; This function uses a non-reentrant model
 10964 ;;
 10965                           
 10966                           	psect	text47
 10967  0029C8                     __ptext47:
 10968                           	opt stack 0
 10969  0029C8                     _strncmp:
 10970                           	opt stack 22
 10971                           
 10972                           ;incstack = 0
 10973  0029C8  D05A               	goto	l6151
 10974  0029CA                     l6141:
 10975  0029CA  C024  FFF6         	movff	strncmp@s1,tblptrl
 10976  0029CE  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 10977  0029D2  0E00               	movlw	low (__mediumconst shr (0+16))
 10978  0029D4  6EF8               	movwf	tblptru,c
 10979  0029D6  0E0F               	movlw	(high __ramtop+-1)
 10980  0029D8  64F7               	cpfsgt	tblptrh,c
 10981  0029DA  D003               	bra	u6047
 10982  0029DC  0008               	tblrd		*
 10983  0029DE  50F5               	movf	tablat,w,c
 10984  0029E0  D005               	bra	u6040
 10985  0029E2                     u6047:
 10986  0029E2  CFF6 FFE9          	movff	tblptrl,fsr0l
 10987  0029E6  CFF7 FFEA          	movff	tblptrh,fsr0h
 10988  0029EA  50EF               	movf	indf0,w,c
 10989  0029EC                     u6040:
 10990  0029EC  0900               	iorlw	0
 10991  0029EE  B4D8               	btfsc	status,2,c
 10992  0029F0  D01C               	goto	l6145
 10993  0029F2  C026  FFF6         	movff	strncmp@s2,tblptrl
 10994  0029F6  C027  FFF7         	movff	strncmp@s2+1,tblptrh
 10995  0029FA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10996  0029FA  6AF8               	clrf	tblptru,c
 10997  0029FC                     	endif
 10998  0029FC                     	if	0	;tblptru may be non-zero
 10999  0029FC                     	endif
 11000  0029FC  0008               	tblrd		*
 11001  0029FE  CFF5 F02A          	movff	tablat,??_strncmp
 11002  002A02  C024  FFF6         	movff	strncmp@s1,tblptrl
 11003  002A06  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 11004  002A0A  0E00               	movlw	low (__mediumconst shr (0+16))
 11005  002A0C  6EF8               	movwf	tblptru,c
 11006  002A0E  0E0F               	movlw	(high __ramtop+-1)
 11007  002A10  64F7               	cpfsgt	tblptrh,c
 11008  002A12  D003               	bra	u6067
 11009  002A14  0008               	tblrd		*
 11010  002A16  50F5               	movf	tablat,w,c
 11011  002A18  D005               	bra	u6065
 11012  002A1A                     u6067:
 11013  002A1A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11014  002A1E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11015  002A22  50EF               	movf	indf0,w,c
 11016  002A24                     u6065:
 11017  002A24  182A               	xorwf	??_strncmp,w,c
 11018  002A26  B4D8               	btfsc	status,2,c
 11019  002A28  D026               	goto	l6149
 11020  002A2A                     l6145:
 11021  002A2A  C026  FFF6         	movff	strncmp@s2,tblptrl
 11022  002A2E  C027  FFF7         	movff	strncmp@s2+1,tblptrh
 11023  002A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11024  002A32  6AF8               	clrf	tblptru,c
 11025  002A34                     	endif
 11026  002A34                     	if	0	;tblptru may be non-zero
 11027  002A34                     	endif
 11028  002A34  0008               	tblrd		*
 11029  002A36  50F5               	movf	tablat,w,c
 11030  002A38  6E2A               	movwf	??_strncmp& (0+255),c
 11031  002A3A  6A2B               	clrf	(??_strncmp+1)& (0+255),c
 11032  002A3C  1E2A               	comf	??_strncmp,f,c
 11033  002A3E  1E2B               	comf	??_strncmp+1,f,c
 11034  002A40  4A2A               	infsnz	??_strncmp,f,c
 11035  002A42  2A2B               	incf	??_strncmp+1,f,c
 11036  002A44  C024  FFF6         	movff	strncmp@s1,tblptrl
 11037  002A48  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 11038  002A4C  0E00               	movlw	low (__mediumconst shr (0+16))
 11039  002A4E  6EF8               	movwf	tblptru,c
 11040  002A50  0E0F               	movlw	(high __ramtop+-1)
 11041  002A52  64F7               	cpfsgt	tblptrh,c
 11042  002A54  D003               	bra	u6077
 11043  002A56  0008               	tblrd		*
 11044  002A58  50F5               	movf	tablat,w,c
 11045  002A5A  D005               	bra	u6070
 11046  002A5C                     u6077:
 11047  002A5C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11048  002A60  CFF7 FFEA          	movff	tblptrh,fsr0h
 11049  002A64  50EF               	movf	indf0,w,c
 11050  002A66                     u6070:
 11051  002A66  6E2C               	movwf	(??_strncmp+2)& (0+255),c
 11052  002A68  502C               	movf	??_strncmp+2,w,c
 11053  002A6A  242A               	addwf	??_strncmp,w,c
 11054  002A6C  6E24               	movwf	?_strncmp,c
 11055  002A6E  0E00               	movlw	0
 11056  002A70  202B               	addwfc	??_strncmp+1,w,c
 11057  002A72  6E25               	movwf	?_strncmp+1,c
 11058  002A74  0012               	return	
 11059  002A76                     l6149:
 11060  002A76  4A24               	infsnz	strncmp@s1,f,c
 11061  002A78  2A25               	incf	strncmp@s1+1,f,c
 11062  002A7A  4A26               	infsnz	strncmp@s2,f,c
 11063  002A7C  2A27               	incf	strncmp@s2+1,f,c
 11064  002A7E                     l6151:
 11065  002A7E  0628               	decf	strncmp@len,f,c
 11066  002A80  A0D8               	btfss	status,0,c
 11067  002A82  0629               	decf	strncmp@len+1,f,c
 11068  002A84  2828               	incf	strncmp@len,w,c
 11069  002A86  E1A1               	bnz	l6141
 11070  002A88  2829               	incf	strncmp@len+1,w,c
 11071  002A8A  A4D8               	btfss	status,2,c
 11072  002A8C  D79E               	goto	l6141
 11073  002A8E  0E00               	movlw	0
 11074  002A90  6E25               	movwf	?_strncmp+1,c
 11075  002A92  0E00               	movlw	0
 11076  002A94  6E24               	movwf	?_strncmp,c
 11077  002A96  0012               	return	
 11078  002A98                     __end_of_strncmp:
 11079                           	opt stack 0
 11080                           tblptru	equ	0xFF8
 11081                           tblptrh	equ	0xFF7
 11082                           tblptrl	equ	0xFF6
 11083                           tablat	equ	0xFF5
 11084                           prodh	equ	0xFF4
 11085                           prodl	equ	0xFF3
 11086                           intcon	equ	0xFF2
 11087                           indf0	equ	0xFEF
 11088                           postinc0	equ	0xFEE
 11089                           fsr0h	equ	0xFEA
 11090                           fsr0l	equ	0xFE9
 11091                           wreg	equ	0xFE8
 11092                           indf1	equ	0xFE7
 11093                           postdec1	equ	0xFE5
 11094                           fsr1h	equ	0xFE2
 11095                           fsr1l	equ	0xFE1
 11096                           indf2	equ	0xFDF
 11097                           postinc2	equ	0xFDE
 11098                           fsr2h	equ	0xFDA
 11099                           fsr2l	equ	0xFD9
 11100                           status	equ	0xFD8
 11101                           
 11102 ;; *************** function _strchr *****************
 11103 ;; Defined at:
 11104 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strchr.c"
 11105 ;; Parameters:    Size  Location     Type
 11106 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
 11107 ;;		 -> uart_str(150), STR_64(7), STR_62(7), STR_60(7), 
 11108 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 11109 ;;		 -> STR_48(7), STR_47(7), STR_43(7), STR_40(7), 
 11110 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 11111 ;;		 -> STR_31(7), STR_28(7), STR_26(7), STR_24(7), 
 11112 ;;		 -> NULL(0), 
 11113 ;;  chr             2   17[COMRAM] int 
 11114 ;; Auto vars:     Size  Location     Type
 11115 ;;		None
 11116 ;; Return value:  Size  Location     Type
 11117 ;;                  2   15[COMRAM] PTR unsigned char 
 11118 ;; Registers used:
 11119 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 11120 ;; Tracked objects:
 11121 ;;		On entry : 0/0
 11122 ;;		On exit  : 0/0
 11123 ;;		Unchanged: 0/0
 11124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11125 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11127 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11128 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11129 ;;Total ram usage:        6 bytes
 11130 ;; Hardware stack levels used:    1
 11131 ;; Hardware stack levels required when called:    5
 11132 ;; This function calls:
 11133 ;;		Nothing
 11134 ;; This function is called by:
 11135 ;;		_strstr
 11136 ;;		_strcspn
 11137 ;;		_strspn
 11138 ;; This function uses a non-reentrant model
 11139 ;;
 11140                           
 11141                           	psect	text48
 11142  002E2C                     __ptext48:
 11143                           	opt stack 0
 11144  002E2C                     _strchr:
 11145                           	opt stack 21
 11146  002E2C  C010  FFF6         	movff	strchr@ptr,tblptrl
 11147  002E30  C011  FFF7         	movff	strchr@ptr+1,tblptrh
 11148  002E34  0E00               	movlw	low (__mediumconst shr (0+16))
 11149  002E36  6EF8               	movwf	tblptru,c
 11150  002E38  0E0F               	movlw	(high __ramtop+-1)
 11151  002E3A  64F7               	cpfsgt	tblptrh,c
 11152  002E3C  D003               	bra	u5737
 11153  002E3E  0008               	tblrd		*
 11154  002E40  50F5               	movf	tablat,w,c
 11155  002E42  D005               	bra	u5730
 11156  002E44                     u5737:
 11157  002E44  CFF6 FFE9          	movff	tblptrl,fsr0l
 11158  002E48  CFF7 FFEA          	movff	tblptrh,fsr0h
 11159  002E4C  50EF               	movf	indf0,w,c
 11160  002E4E                     u5730:
 11161  002E4E  1812               	xorwf	strchr@chr,w,c
 11162  002E50  A4D8               	btfss	status,2,c
 11163  002E52  D005               	goto	l5927
 11164  002E54  C010  F010         	movff	strchr@ptr,?_strchr
 11165  002E58  C011  F011         	movff	strchr@ptr+1,?_strchr+1
 11166  002E5C  0012               	return	
 11167  002E5E                     l5927:
 11168  002E5E  5010               	movf	strchr@ptr,w,c
 11169  002E60  6E14               	movwf	??_strchr& (0+255),c
 11170  002E62  5011               	movf	strchr@ptr+1,w,c
 11171  002E64  6E15               	movwf	(??_strchr+1)& (0+255),c
 11172  002E66  4A10               	infsnz	strchr@ptr,f,c
 11173  002E68  2A11               	incf	strchr@ptr+1,f,c
 11174  002E6A  C014  FFF6         	movff	??_strchr,tblptrl
 11175  002E6E  C015  FFF7         	movff	??_strchr+1,tblptrh
 11176  002E72  0E00               	movlw	low (__mediumconst shr (0+16))
 11177  002E74  6EF8               	movwf	tblptru,c
 11178  002E76  0E0F               	movlw	(high __ramtop+-1)
 11179  002E78  64F7               	cpfsgt	tblptrh,c
 11180  002E7A  D003               	bra	u5757
 11181  002E7C  0008               	tblrd		*
 11182  002E7E  50F5               	movf	tablat,w,c
 11183  002E80  D005               	bra	u5750
 11184  002E82                     u5757:
 11185  002E82  CFF6 FFE9          	movff	tblptrl,fsr0l
 11186  002E86  CFF7 FFEA          	movff	tblptrh,fsr0h
 11187  002E8A  50EF               	movf	indf0,w,c
 11188  002E8C                     u5750:
 11189  002E8C  0900               	iorlw	0
 11190  002E8E  A4D8               	btfss	status,2,c
 11191  002E90  D7CD               	goto	l5921
 11192  002E92  0E00               	movlw	0
 11193  002E94  6E10               	movwf	?_strchr,c
 11194  002E96  0E00               	movlw	0
 11195  002E98  6E11               	movwf	?_strchr+1,c
 11196  002E9A  0012               	return	
 11197  002E9C                     __end_of_strchr:
 11198                           	opt stack 0
 11199                           tblptru	equ	0xFF8
 11200                           tblptrh	equ	0xFF7
 11201                           tblptrl	equ	0xFF6
 11202                           tablat	equ	0xFF5
 11203                           prodh	equ	0xFF4
 11204                           prodl	equ	0xFF3
 11205                           intcon	equ	0xFF2
 11206                           indf0	equ	0xFEF
 11207                           postinc0	equ	0xFEE
 11208                           fsr0h	equ	0xFEA
 11209                           fsr0l	equ	0xFE9
 11210                           wreg	equ	0xFE8
 11211                           indf1	equ	0xFE7
 11212                           postdec1	equ	0xFE5
 11213                           fsr1h	equ	0xFE2
 11214                           fsr1l	equ	0xFE1
 11215                           indf2	equ	0xFDF
 11216                           postinc2	equ	0xFDE
 11217                           fsr2h	equ	0xFDA
 11218                           fsr2l	equ	0xFD9
 11219                           status	equ	0xFD8
 11220                           
 11221 ;; *************** function _strcpy *****************
 11222 ;; Defined at:
 11223 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;  to              2   15[COMRAM] PTR unsigned char 
 11226 ;;		 -> CMD(15), cmd_data(49), clcd_display_string_details(1080), 
 11227 ;;  from            2   17[COMRAM] PTR const unsigned char 
 11228 ;;		 -> uart_str(150), STR_64(7), STR_62(7), STR_60(7), 
 11229 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 11230 ;;		 -> STR_48(7), STR_47(7), cmd_data.data(40), STR_43(7), 
 11231 ;;		 -> STR_40(7), STR_38(7), STR_36(7), STR_34(7), 
 11232 ;;		 -> STR_32(7), STR_31(7), STR_28(7), RAM(3895), 
 11233 ;;		 -> STR_26(7), STR_24(7), NULL(0), cmd_data(49), 
 11234 ;; Auto vars:     Size  Location     Type
 11235 ;;  cp              2   19[COMRAM] PTR unsigned char 
 11236 ;;		 -> CMD(15), cmd_data(49), clcd_display_string_details(1080), 
 11237 ;; Return value:  Size  Location     Type
 11238 ;;                  2   15[COMRAM] PTR unsigned char 
 11239 ;; Registers used:
 11240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11241 ;; Tracked objects:
 11242 ;;		On entry : 0/0
 11243 ;;		On exit  : 0/0
 11244 ;;		Unchanged: 0/0
 11245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11246 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11247 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11249 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11250 ;;Total ram usage:        6 bytes
 11251 ;; Hardware stack levels used:    1
 11252 ;; Hardware stack levels required when called:    5
 11253 ;; This function calls:
 11254 ;;		Nothing
 11255 ;; This function is called by:
 11256 ;;		_copy_data
 11257 ;;		_parse_cmd_str
 11258 ;; This function uses a non-reentrant model
 11259 ;;
 11260                           
 11261                           	psect	text49
 11262  00323E                     __ptext49:
 11263                           	opt stack 0
 11264  00323E                     _strcpy:
 11265                           	opt stack 21
 11266                           
 11267                           ;incstack = 0
 11268  00323E  C010  F014         	movff	strcpy@to,strcpy@cp
 11269  003242  C011  F015         	movff	strcpy@to+1,strcpy@cp+1
 11270  003246  D004               	goto	l5771
 11271  003248                     l5769:
 11272  003248  4A14               	infsnz	strcpy@cp,f,c
 11273  00324A  2A15               	incf	strcpy@cp+1,f,c
 11274  00324C  4A12               	infsnz	strcpy@from,f,c
 11275  00324E  2A13               	incf	strcpy@from+1,f,c
 11276  003250                     l5771:
 11277  003250  C012  FFF6         	movff	strcpy@from,tblptrl
 11278  003254  C013  FFF7         	movff	strcpy@from+1,tblptrh
 11279  003258  0E00               	movlw	low (__mediumconst shr (0+16))
 11280  00325A  6EF8               	movwf	tblptru,c
 11281  00325C  C014  FFD9         	movff	strcpy@cp,fsr2l
 11282  003260  C015  FFDA         	movff	strcpy@cp+1,fsr2h
 11283  003264  0E0F               	movlw	(high __ramtop+-1)
 11284  003266  64F7               	cpfsgt	tblptrh,c
 11285  003268  D003               	bra	u5467
 11286  00326A  0008               	tblrd		*
 11287  00326C  50F5               	movf	tablat,w,c
 11288  00326E  D005               	bra	u5460
 11289  003270                     u5467:
 11290  003270  CFF6 FFE9          	movff	tblptrl,fsr0l
 11291  003274  CFF7 FFEA          	movff	tblptrh,fsr0h
 11292  003278  50EF               	movf	indf0,w,c
 11293  00327A                     u5460:
 11294  00327A  6EDF               	movwf	indf2,c
 11295  00327C  50DF               	movf	indf2,w,c
 11296  00327E  B4D8               	btfsc	status,2,c
 11297  003280  0012               	return	
 11298  003282  D7E2               	goto	l5769
 11299  003284                     __end_of_strcpy:
 11300                           	opt stack 0
 11301                           tblptru	equ	0xFF8
 11302                           tblptrh	equ	0xFF7
 11303                           tblptrl	equ	0xFF6
 11304                           tablat	equ	0xFF5
 11305                           prodh	equ	0xFF4
 11306                           prodl	equ	0xFF3
 11307                           intcon	equ	0xFF2
 11308                           indf0	equ	0xFEF
 11309                           postinc0	equ	0xFEE
 11310                           fsr0h	equ	0xFEA
 11311                           fsr0l	equ	0xFE9
 11312                           wreg	equ	0xFE8
 11313                           indf1	equ	0xFE7
 11314                           postdec1	equ	0xFE5
 11315                           fsr1h	equ	0xFE2
 11316                           fsr1l	equ	0xFE1
 11317                           indf2	equ	0xFDF
 11318                           postinc2	equ	0xFDE
 11319                           fsr2h	equ	0xFDA
 11320                           fsr2l	equ	0xFD9
 11321                           status	equ	0xFD8
 11322                           
 11323 ;; *************** function _memset *****************
 11324 ;; Defined at:
 11325 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memset.c"
 11326 ;; Parameters:    Size  Location     Type
 11327 ;;  p1              2   35[COMRAM] PTR void 
 11328 ;;		 -> uart_str(150), str_data(40), CMD(15), cmd_data(49), 
 11329 ;;		 -> conflict_arr(20), clcd_display_string_details(1080), lcd_display_array(80), clcd_config_data(5), 
 11330 ;;  c               2   37[COMRAM] int 
 11331 ;;  n               2   39[COMRAM] unsigned int 
 11332 ;; Auto vars:     Size  Location     Type
 11333 ;;  p               2   41[COMRAM] PTR unsigned char 
 11334 ;;		 -> uart_str(150), str_data(40), CMD(15), cmd_data(49), 
 11335 ;;		 -> conflict_arr(20), clcd_display_string_details(1080), lcd_display_array(80), clcd_config_data(5), 
 11336 ;; Return value:  Size  Location     Type
 11337 ;;                  2   35[COMRAM] PTR void 
 11338 ;; Registers used:
 11339 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : 0/0
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11345 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11346 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11348 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11349 ;;Total ram usage:        8 bytes
 11350 ;; Hardware stack levels used:    1
 11351 ;; Hardware stack levels required when called:    5
 11352 ;; This function calls:
 11353 ;;		Nothing
 11354 ;; This function is called by:
 11355 ;;		_init_CLCD_config
 11356 ;;		_init_clcd_cusotom_lcd
 11357 ;;		_update_string_data
 11358 ;;		_clcd_display_string_config
 11359 ;;		_clear_display_structure
 11360 ;;		_clear_display_array
 11361 ;;		_scroll_left_to_right
 11362 ;;		_scroll_right_to_left
 11363 ;;		_clear_cmd_data
 11364 ;;		_parse_cmd_str
 11365 ;;		_console_init
 11366 ;;		_cmd_consol_task
 11367 ;; This function uses a non-reentrant model
 11368 ;;
 11369                           
 11370                           	psect	text50
 11371  0034BC                     __ptext50:
 11372                           	opt stack 0
 11373  0034BC                     _memset:
 11374                           	opt stack 23
 11375                           
 11376                           ;incstack = 0
 11377  0034BC  C024  F02A         	movff	memset@p1,memset@p
 11378  0034C0  C025  F02B         	movff	memset@p1+1,memset@p+1
 11379  0034C4  D008               	goto	l5499
 11380  0034C6                     l5495:
 11381  0034C6  C02A  FFD9         	movff	memset@p,fsr2l
 11382  0034CA  C02B  FFDA         	movff	memset@p+1,fsr2h
 11383  0034CE  C026  FFDF         	movff	memset@c,indf2
 11384  0034D2  4A2A               	infsnz	memset@p,f,c
 11385  0034D4  2A2B               	incf	memset@p+1,f,c
 11386  0034D6                     l5499:
 11387  0034D6  0628               	decf	memset@n,f,c
 11388  0034D8  A0D8               	btfss	status,0,c
 11389  0034DA  0629               	decf	memset@n+1,f,c
 11390  0034DC  2828               	incf	memset@n,w,c
 11391  0034DE  E1F3               	bnz	l5495
 11392  0034E0  2829               	incf	memset@n+1,w,c
 11393  0034E2  B4D8               	btfsc	status,2,c
 11394  0034E4  0012               	return	
 11395  0034E6  D7EF               	goto	l5495
 11396  0034E8                     __end_of_memset:
 11397                           	opt stack 0
 11398                           tblptru	equ	0xFF8
 11399                           tblptrh	equ	0xFF7
 11400                           tblptrl	equ	0xFF6
 11401                           tablat	equ	0xFF5
 11402                           prodh	equ	0xFF4
 11403                           prodl	equ	0xFF3
 11404                           intcon	equ	0xFF2
 11405                           indf0	equ	0xFEF
 11406                           postinc0	equ	0xFEE
 11407                           fsr0h	equ	0xFEA
 11408                           fsr0l	equ	0xFE9
 11409                           wreg	equ	0xFE8
 11410                           indf1	equ	0xFE7
 11411                           postdec1	equ	0xFE5
 11412                           fsr1h	equ	0xFE2
 11413                           fsr1l	equ	0xFE1
 11414                           indf2	equ	0xFDF
 11415                           postinc2	equ	0xFDE
 11416                           fsr2h	equ	0xFDA
 11417                           fsr2l	equ	0xFD9
 11418                           status	equ	0xFD8
 11419                           
 11420 ;; *************** function _collect_row *****************
 11421 ;; Defined at:
 11422 ;;		line 16 in file "cmd_consol.c"
 11423 ;; Parameters:    Size  Location     Type
 11424 ;;  str             2   53[COMRAM] PTR unsigned char 
 11425 ;;		 -> uart_str(150), STR_64(7), STR_62(7), STR_60(7), 
 11426 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 11427 ;;		 -> STR_48(7), STR_47(7), STR_43(7), STR_40(7), 
 11428 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 11429 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
 11430 ;;		 -> STR_24(7), NULL(0), 
 11431 ;;  data_row        2   55[COMRAM] PTR unsigned char 
 11432 ;;		 -> cmd_data(49), 
 11433 ;; Auto vars:     Size  Location     Type
 11434 ;;  i               2   60[COMRAM] int 
 11435 ;;  row             1   62[COMRAM] unsigned char 
 11436 ;; Return value:  Size  Location     Type
 11437 ;;                  1    wreg      void 
 11438 ;; Registers used:
 11439 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11440 ;; Tracked objects:
 11441 ;;		On entry : 0/0
 11442 ;;		On exit  : 0/0
 11443 ;;		Unchanged: 0/0
 11444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11446 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11447 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11448 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11449 ;;Total ram usage:       10 bytes
 11450 ;; Hardware stack levels used:    1
 11451 ;; Hardware stack levels required when called:    8
 11452 ;; This function calls:
 11453 ;;		_isdigit
 11454 ;;		_printf
 11455 ;;		_strlen
 11456 ;; This function is called by:
 11457 ;;		_parse_cmd_str
 11458 ;; This function uses a non-reentrant model
 11459 ;;
 11460                           
 11461                           	psect	text51
 11462  0028EE                     __ptext51:
 11463                           	opt stack 0
 11464  0028EE                     _collect_row:
 11465                           	opt stack 20
 11466                           
 11467                           ;cmd_consol.c: 17: char row = 0;
 11468                           
 11469                           ;incstack = 0
 11470  0028EE  0E00               	movlw	0
 11471  0028F0  6E3F               	movwf	collect_row@row,c
 11472                           
 11473                           ;cmd_consol.c: 18: int i = 0;
 11474  0028F2  0E00               	movlw	0
 11475  0028F4  6E3E               	movwf	collect_row@i+1,c
 11476  0028F6  0E00               	movlw	0
 11477  0028F8  6E3D               	movwf	collect_row@i,c
 11478                           
 11479                           ;cmd_consol.c: 19: for (i = 0; i < strlen(str); i++) {
 11480  0028FA  0E00               	movlw	0
 11481  0028FC  6E3E               	movwf	collect_row@i+1,c
 11482  0028FE  0E00               	movlw	0
 11483  002900  6E3D               	movwf	collect_row@i,c
 11484  002902  D03B               	goto	l6343
 11485  002904                     l6337:
 11486                           
 11487                           ;cmd_consol.c: 20: if (isdigit(str[i]) == 1)
 11488  002904  503D               	movf	collect_row@i,w,c
 11489  002906  2436               	addwf	collect_row@str,w,c
 11490  002908  6E3A               	movwf	??_collect_row& (0+255),c
 11491  00290A  503E               	movf	collect_row@i+1,w,c
 11492  00290C  2037               	addwfc	collect_row@str+1,w,c
 11493  00290E  6E3B               	movwf	(??_collect_row+1)& (0+255),c
 11494  002910  C03A  FFF6         	movff	??_collect_row,tblptrl
 11495  002914  C03B  FFF7         	movff	??_collect_row+1,tblptrh
 11496  002918  0E00               	movlw	low (__mediumconst shr (0+16))
 11497  00291A  6EF8               	movwf	tblptru,c
 11498  00291C  0E0F               	movlw	(high __ramtop+-1)
 11499  00291E  64F7               	cpfsgt	tblptrh,c
 11500  002920  D003               	bra	u6247
 11501  002922  0008               	tblrd		*
 11502  002924  50F5               	movf	tablat,w,c
 11503  002926  D005               	bra	u6240
 11504  002928                     u6247:
 11505  002928  CFF6 FFE9          	movff	tblptrl,fsr0l
 11506  00292C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11507  002930  50EF               	movf	indf0,w,c
 11508  002932                     u6240:
 11509  002932  EC04  F01B         	call	_isdigit
 11510  002936  A0D8               	btfss	status,0,c
 11511  002938  0012               	return	
 11512                           
 11513                           ;cmd_consol.c: 21: row = row * 10 + (str[i] - '0');
 11514  00293A  503D               	movf	collect_row@i,w,c
 11515  00293C  2436               	addwf	collect_row@str,w,c
 11516  00293E  6E3A               	movwf	??_collect_row& (0+255),c
 11517  002940  503E               	movf	collect_row@i+1,w,c
 11518  002942  2037               	addwfc	collect_row@str+1,w,c
 11519  002944  6E3B               	movwf	(??_collect_row+1)& (0+255),c
 11520  002946  C03A  FFF6         	movff	??_collect_row,tblptrl
 11521  00294A  C03B  FFF7         	movff	??_collect_row+1,tblptrh
 11522  00294E  0E00               	movlw	low (__mediumconst shr (0+16))
 11523  002950  6EF8               	movwf	tblptru,c
 11524  002952  0E0F               	movlw	(high __ramtop+-1)
 11525  002954  64F7               	cpfsgt	tblptrh,c
 11526  002956  D003               	bra	u6267
 11527  002958  0008               	tblrd		*
 11528  00295A  50F5               	movf	tablat,w,c
 11529  00295C  D005               	bra	u6260
 11530  00295E                     u6267:
 11531  00295E  CFF6 FFE9          	movff	tblptrl,fsr0l
 11532  002962  CFF7 FFEA          	movff	tblptrh,fsr0h
 11533  002966  50EF               	movf	indf0,w,c
 11534  002968                     u6260:
 11535  002968  6E3C               	movwf	(??_collect_row+2)& (0+255),c
 11536  00296A  503F               	movf	collect_row@row,w,c
 11537  00296C  0D0A               	mullw	10
 11538  00296E  50F3               	movf	prodl,w,c
 11539  002970  243C               	addwf	??_collect_row+2,w,c
 11540  002972  0FD0               	addlw	208
 11541  002974  6E3F               	movwf	collect_row@row,c
 11542                           
 11543                           ;cmd_consol.c: 22: else
 11544                           ;cmd_consol.c: 23: return;
 11545  002976  4A3D               	infsnz	collect_row@i,f,c
 11546  002978  2A3E               	incf	collect_row@i+1,f,c
 11547  00297A                     l6343:
 11548  00297A  C036  F01E         	movff	collect_row@str,strlen@s
 11549  00297E  C037  F01F         	movff	collect_row@str+1,strlen@s+1
 11550  002982  EC0D  F018         	call	_strlen	;wreg free
 11551  002986  501E               	movf	?_strlen,w,c
 11552  002988  5C3D               	subwf	collect_row@i,w,c
 11553  00298A  501F               	movf	?_strlen+1,w,c
 11554  00298C  583E               	subwfb	collect_row@i+1,w,c
 11555  00298E  A0D8               	btfss	status,0,c
 11556  002990  D7B9               	goto	l6337
 11557                           
 11558                           ;cmd_consol.c: 24: }
 11559                           ;cmd_consol.c: 25: printf("row = %d\r\n", row);
 11560  002992  0E0E               	movlw	low STR_15
 11561  002994  6E24               	movwf	printf@f,c
 11562  002996  0EFF               	movlw	high STR_15
 11563  002998  6E25               	movwf	printf@f+1,c
 11564  00299A  C03F  F026         	movff	collect_row@row,?_printf+2
 11565  00299E  6A27               	clrf	?_printf+3,c
 11566  0029A0  EC0F  F00F         	call	_printf	;wreg free
 11567                           
 11568                           ;cmd_consol.c: 26: if (row >= clcd_config_data.clcd_max_row) {
 11569  0029A4  504A               	movf	_clcd_config_data+1,w,c
 11570  0029A6  5C3F               	subwf	collect_row@row,w,c
 11571  0029A8  A0D8               	btfss	status,0,c
 11572  0029AA  D007               	goto	l6351
 11573                           
 11574                           ;cmd_consol.c: 27: *data_row = -1;
 11575  0029AC  C038  FFD9         	movff	collect_row@data_row,fsr2l
 11576  0029B0  C039  FFDA         	movff	collect_row@data_row+1,fsr2h
 11577  0029B4  0EFF               	movlw	255
 11578  0029B6  6EDF               	movwf	indf2,c
 11579                           
 11580                           ;cmd_consol.c: 28: } else {
 11581  0029B8  0012               	return	
 11582  0029BA                     l6351:
 11583                           
 11584                           ;cmd_consol.c: 29: *data_row = row;
 11585  0029BA  C038  FFD9         	movff	collect_row@data_row,fsr2l
 11586  0029BE  C039  FFDA         	movff	collect_row@data_row+1,fsr2h
 11587  0029C2  C03F  FFDF         	movff	collect_row@row,indf2
 11588  0029C6  0012               	return	
 11589  0029C8                     __end_of_collect_row:
 11590                           	opt stack 0
 11591                           tblptru	equ	0xFF8
 11592                           tblptrh	equ	0xFF7
 11593                           tblptrl	equ	0xFF6
 11594                           tablat	equ	0xFF5
 11595                           prodh	equ	0xFF4
 11596                           prodl	equ	0xFF3
 11597                           intcon	equ	0xFF2
 11598                           indf0	equ	0xFEF
 11599                           postinc0	equ	0xFEE
 11600                           fsr0h	equ	0xFEA
 11601                           fsr0l	equ	0xFE9
 11602                           wreg	equ	0xFE8
 11603                           indf1	equ	0xFE7
 11604                           postdec1	equ	0xFE5
 11605                           fsr1h	equ	0xFE2
 11606                           fsr1l	equ	0xFE1
 11607                           indf2	equ	0xFDF
 11608                           postinc2	equ	0xFDE
 11609                           fsr2h	equ	0xFDA
 11610                           fsr2l	equ	0xFD9
 11611                           status	equ	0xFD8
 11612                           
 11613 ;; *************** function _collect_column *****************
 11614 ;; Defined at:
 11615 ;;		line 33 in file "cmd_consol.c"
 11616 ;; Parameters:    Size  Location     Type
 11617 ;;  str             2   53[COMRAM] PTR unsigned char 
 11618 ;;		 -> uart_str(150), STR_64(7), STR_62(7), STR_60(7), 
 11619 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 11620 ;;		 -> STR_48(7), STR_47(7), STR_43(7), STR_40(7), 
 11621 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 11622 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
 11623 ;;		 -> STR_24(7), NULL(0), 
 11624 ;;  data_column     2   55[COMRAM] PTR unsigned char 
 11625 ;;		 -> cmd_data(49), 
 11626 ;; Auto vars:     Size  Location     Type
 11627 ;;  i               2   61[COMRAM] int 
 11628 ;;  column          1   60[COMRAM] unsigned char 
 11629 ;; Return value:  Size  Location     Type
 11630 ;;                  1    wreg      void 
 11631 ;; Registers used:
 11632 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11633 ;; Tracked objects:
 11634 ;;		On entry : 0/0
 11635 ;;		On exit  : 0/0
 11636 ;;		Unchanged: 0/0
 11637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11638 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11639 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11640 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11641 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11642 ;;Total ram usage:       10 bytes
 11643 ;; Hardware stack levels used:    1
 11644 ;; Hardware stack levels required when called:    8
 11645 ;; This function calls:
 11646 ;;		_isdigit
 11647 ;;		_printf
 11648 ;;		_strlen
 11649 ;; This function is called by:
 11650 ;;		_parse_cmd_str
 11651 ;; This function uses a non-reentrant model
 11652 ;;
 11653                           
 11654                           	psect	text52
 11655  001FF6                     __ptext52:
 11656                           	opt stack 0
 11657  001FF6                     _collect_column:
 11658                           	opt stack 20
 11659                           
 11660                           ;cmd_consol.c: 34: printf("col..1 = %s\r\n", str);
 11661                           
 11662                           ;incstack = 0
 11663  001FF6  0E7B               	movlw	low STR_16
 11664  001FF8  6E24               	movwf	printf@f,c
 11665  001FFA  0EFE               	movlw	high STR_16
 11666  001FFC  6E25               	movwf	printf@f+1,c
 11667  001FFE  C036  F026         	movff	collect_column@str,?_printf+2
 11668  002002  C037  F027         	movff	collect_column@str+1,?_printf+3
 11669  002006  EC0F  F00F         	call	_printf	;wreg free
 11670                           
 11671                           ;cmd_consol.c: 35: int i = 0;
 11672  00200A  0E00               	movlw	0
 11673  00200C  6E3F               	movwf	collect_column@i+1,c
 11674  00200E  0E00               	movlw	0
 11675  002010  6E3E               	movwf	collect_column@i,c
 11676                           
 11677                           ;cmd_consol.c: 36: char column = 0;
 11678  002012  0E00               	movlw	0
 11679  002014  6E3D               	movwf	collect_column@column,c
 11680                           
 11681                           ;cmd_consol.c: 37: for (i = 0; i < strlen(str); i++) {
 11682  002016  0E00               	movlw	0
 11683  002018  6E3F               	movwf	collect_column@i+1,c
 11684  00201A  0E00               	movlw	0
 11685  00201C  6E3E               	movwf	collect_column@i,c
 11686  00201E  D0AC               	goto	l6375
 11687  002020                     l6361:
 11688                           
 11689                           ;cmd_consol.c: 38: if (isdigit(str[i]) == 1){
 11690  002020  503E               	movf	collect_column@i,w,c
 11691  002022  2436               	addwf	collect_column@str,w,c
 11692  002024  6E3A               	movwf	??_collect_column& (0+255),c
 11693  002026  503F               	movf	collect_column@i+1,w,c
 11694  002028  2037               	addwfc	collect_column@str+1,w,c
 11695  00202A  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11696  00202C  C03A  FFF6         	movff	??_collect_column,tblptrl
 11697  002030  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11698  002034  0E00               	movlw	low (__mediumconst shr (0+16))
 11699  002036  6EF8               	movwf	tblptru,c
 11700  002038  0E0F               	movlw	(high __ramtop+-1)
 11701  00203A  64F7               	cpfsgt	tblptrh,c
 11702  00203C  D003               	bra	u6297
 11703  00203E  0008               	tblrd		*
 11704  002040  50F5               	movf	tablat,w,c
 11705  002042  D005               	bra	u6290
 11706  002044                     u6297:
 11707  002044  CFF6 FFE9          	movff	tblptrl,fsr0l
 11708  002048  CFF7 FFEA          	movff	tblptrh,fsr0h
 11709  00204C  50EF               	movf	indf0,w,c
 11710  00204E                     u6290:
 11711  00204E  EC04  F01B         	call	_isdigit
 11712  002052  A0D8               	btfss	status,0,c
 11713  002054  D05B               	goto	l6369
 11714                           
 11715                           ;cmd_consol.c: 39: column = column * 10 + (str[i] - '0');
 11716  002056  503E               	movf	collect_column@i,w,c
 11717  002058  2436               	addwf	collect_column@str,w,c
 11718  00205A  6E3A               	movwf	??_collect_column& (0+255),c
 11719  00205C  503F               	movf	collect_column@i+1,w,c
 11720  00205E  2037               	addwfc	collect_column@str+1,w,c
 11721  002060  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11722  002062  C03A  FFF6         	movff	??_collect_column,tblptrl
 11723  002066  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11724  00206A  0E00               	movlw	low (__mediumconst shr (0+16))
 11725  00206C  6EF8               	movwf	tblptru,c
 11726  00206E  0E0F               	movlw	(high __ramtop+-1)
 11727  002070  64F7               	cpfsgt	tblptrh,c
 11728  002072  D003               	bra	u6317
 11729  002074  0008               	tblrd		*
 11730  002076  50F5               	movf	tablat,w,c
 11731  002078  D005               	bra	u6310
 11732  00207A                     u6317:
 11733  00207A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11734  00207E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11735  002082  50EF               	movf	indf0,w,c
 11736  002084                     u6310:
 11737  002084  6E3C               	movwf	(??_collect_column+2)& (0+255),c
 11738  002086  503D               	movf	collect_column@column,w,c
 11739  002088  0D0A               	mullw	10
 11740  00208A  50F3               	movf	prodl,w,c
 11741  00208C  243C               	addwf	??_collect_column+2,w,c
 11742  00208E  0FD0               	addlw	208
 11743  002090  6E3D               	movwf	collect_column@column,c
 11744                           
 11745                           ;cmd_consol.c: 40: printf("strlen = %d, i=%d, col.. = %d\r\n",strlen(str),i, column);
 11746  002092  0E2D               	movlw	low STR_17
 11747  002094  6E24               	movwf	printf@f,c
 11748  002096  0EFD               	movlw	high STR_17
 11749  002098  6E25               	movwf	printf@f+1,c
 11750  00209A  C036  F01E         	movff	collect_column@str,strlen@s
 11751  00209E  C037  F01F         	movff	collect_column@str+1,strlen@s+1
 11752  0020A2  EC0D  F018         	call	_strlen	;wreg free
 11753  0020A6  C01E  F026         	movff	?_strlen,?_printf+2
 11754  0020AA  C01F  F027         	movff	?_strlen+1,?_printf+3
 11755  0020AE  C03E  F028         	movff	collect_column@i,?_printf+4
 11756  0020B2  C03F  F029         	movff	collect_column@i+1,?_printf+5
 11757  0020B6  C03D  F02A         	movff	collect_column@column,?_printf+6
 11758  0020BA  6A2B               	clrf	?_printf+7,c
 11759  0020BC  EC0F  F00F         	call	_printf	;wreg free
 11760                           
 11761                           ;cmd_consol.c: 41: printf("str[%d] = %d\r\n", i, str[i]);
 11762  0020C0  0E5D               	movlw	low STR_18
 11763  0020C2  6E24               	movwf	printf@f,c
 11764  0020C4  0EFE               	movlw	high STR_18
 11765  0020C6  6E25               	movwf	printf@f+1,c
 11766  0020C8  C03E  F026         	movff	collect_column@i,?_printf+2
 11767  0020CC  C03F  F027         	movff	collect_column@i+1,?_printf+3
 11768  0020D0  503E               	movf	collect_column@i,w,c
 11769  0020D2  2436               	addwf	collect_column@str,w,c
 11770  0020D4  6E3A               	movwf	??_collect_column& (0+255),c
 11771  0020D6  503F               	movf	collect_column@i+1,w,c
 11772  0020D8  2037               	addwfc	collect_column@str+1,w,c
 11773  0020DA  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11774  0020DC  C03A  FFF6         	movff	??_collect_column,tblptrl
 11775  0020E0  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11776  0020E4  0E00               	movlw	low (__mediumconst shr (0+16))
 11777  0020E6  6EF8               	movwf	tblptru,c
 11778  0020E8  0E0F               	movlw	(high __ramtop+-1)
 11779  0020EA  64F7               	cpfsgt	tblptrh,c
 11780  0020EC  D003               	bra	u6327
 11781  0020EE  0008               	tblrd		*
 11782  0020F0  50F5               	movf	tablat,w,c
 11783  0020F2  D005               	bra	u6320
 11784  0020F4                     u6327:
 11785  0020F4  CFF6 FFE9          	movff	tblptrl,fsr0l
 11786  0020F8  CFF7 FFEA          	movff	tblptrh,fsr0h
 11787  0020FC  50EF               	movf	indf0,w,c
 11788  0020FE                     u6320:
 11789  0020FE  6E3C               	movwf	(??_collect_column+2)& (0+255),c
 11790  002100  503C               	movf	??_collect_column+2,w,c
 11791  002102  6E28               	movwf	?_printf+4,c
 11792  002104  6A29               	clrf	?_printf+5,c
 11793  002106  EC0F  F00F         	call	_printf	;wreg free
 11794                           
 11795                           ;cmd_consol.c: 42: }
 11796  00210A  D034               	goto	l6373
 11797  00210C                     l6369:
 11798                           
 11799                           ;cmd_consol.c: 43: else{
 11800                           ;cmd_consol.c: 44: printf("i = %d, col..2 = %s\r\n",i, str);
 11801  00210C  0ECF               	movlw	low STR_19
 11802  00210E  6E24               	movwf	printf@f,c
 11803  002110  0EFD               	movlw	high STR_19
 11804  002112  6E25               	movwf	printf@f+1,c
 11805  002114  C03E  F026         	movff	collect_column@i,?_printf+2
 11806  002118  C03F  F027         	movff	collect_column@i+1,?_printf+3
 11807  00211C  C036  F028         	movff	collect_column@str,?_printf+4
 11808  002120  C037  F029         	movff	collect_column@str+1,?_printf+5
 11809  002124  EC0F  F00F         	call	_printf	;wreg free
 11810                           
 11811                           ;cmd_consol.c: 45: printf("str[%d] = %d\r\n", i, str[i]);
 11812  002128  0E5D               	movlw	low STR_18
 11813  00212A  6E24               	movwf	printf@f,c
 11814  00212C  0EFE               	movlw	high STR_18
 11815  00212E  6E25               	movwf	printf@f+1,c
 11816  002130  C03E  F026         	movff	collect_column@i,?_printf+2
 11817  002134  C03F  F027         	movff	collect_column@i+1,?_printf+3
 11818  002138  503E               	movf	collect_column@i,w,c
 11819  00213A  2436               	addwf	collect_column@str,w,c
 11820  00213C  6E3A               	movwf	??_collect_column& (0+255),c
 11821  00213E  503F               	movf	collect_column@i+1,w,c
 11822  002140  2037               	addwfc	collect_column@str+1,w,c
 11823  002142  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11824  002144  C03A  FFF6         	movff	??_collect_column,tblptrl
 11825  002148  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11826  00214C  0E00               	movlw	low (__mediumconst shr (0+16))
 11827  00214E  6EF8               	movwf	tblptru,c
 11828  002150  0E0F               	movlw	(high __ramtop+-1)
 11829  002152  64F7               	cpfsgt	tblptrh,c
 11830  002154  D003               	bra	u6337
 11831  002156  0008               	tblrd		*
 11832  002158  50F5               	movf	tablat,w,c
 11833  00215A  D005               	bra	u6330
 11834  00215C                     u6337:
 11835  00215C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11836  002160  CFF7 FFEA          	movff	tblptrh,fsr0h
 11837  002164  50EF               	movf	indf0,w,c
 11838  002166                     u6330:
 11839  002166  6E3C               	movwf	(??_collect_column+2)& (0+255),c
 11840  002168  503C               	movf	??_collect_column+2,w,c
 11841  00216A  6E28               	movwf	?_printf+4,c
 11842  00216C  6A29               	clrf	?_printf+5,c
 11843  00216E  EC0F  F00F         	call	_printf	;wreg free
 11844                           
 11845                           ;cmd_consol.c: 46: return;
 11846  002172  0012               	return	
 11847  002174                     l6373:
 11848  002174  4A3E               	infsnz	collect_column@i,f,c
 11849  002176  2A3F               	incf	collect_column@i+1,f,c
 11850  002178                     l6375:
 11851  002178  C036  F01E         	movff	collect_column@str,strlen@s
 11852  00217C  C037  F01F         	movff	collect_column@str+1,strlen@s+1
 11853  002180  EC0D  F018         	call	_strlen	;wreg free
 11854  002184  501E               	movf	?_strlen,w,c
 11855  002186  5C3E               	subwf	collect_column@i,w,c
 11856  002188  501F               	movf	?_strlen+1,w,c
 11857  00218A  583F               	subwfb	collect_column@i+1,w,c
 11858  00218C  A0D8               	btfss	status,0,c
 11859  00218E  D748               	goto	l6361
 11860                           
 11861                           ;cmd_consol.c: 47: }
 11862                           ;cmd_consol.c: 49: }
 11863                           ;cmd_consol.c: 50: printf("Col = %d\r\n", column);
 11864  002190  0E03               	movlw	low STR_21
 11865  002192  6E24               	movwf	printf@f,c
 11866  002194  0EFF               	movlw	high STR_21
 11867  002196  6E25               	movwf	printf@f+1,c
 11868  002198  C03D  F026         	movff	collect_column@column,?_printf+2
 11869  00219C  6A27               	clrf	?_printf+3,c
 11870  00219E  EC0F  F00F         	call	_printf	;wreg free
 11871                           
 11872                           ;cmd_consol.c: 51: if (column >= clcd_config_data.clcd_max_col) {
 11873  0021A2  504B               	movf	_clcd_config_data+2,w,c
 11874  0021A4  5C3D               	subwf	collect_column@column,w,c
 11875  0021A6  A0D8               	btfss	status,0,c
 11876  0021A8  D007               	goto	l6383
 11877                           
 11878                           ;cmd_consol.c: 52: *data_column = -1;
 11879  0021AA  C038  FFD9         	movff	collect_column@data_column,fsr2l
 11880  0021AE  C039  FFDA         	movff	collect_column@data_column+1,fsr2h
 11881  0021B2  0EFF               	movlw	255
 11882  0021B4  6EDF               	movwf	indf2,c
 11883                           
 11884                           ;cmd_consol.c: 53: } else {
 11885  0021B6  0012               	return	
 11886  0021B8                     l6383:
 11887                           
 11888                           ;cmd_consol.c: 54: *data_column = column;
 11889  0021B8  C038  FFD9         	movff	collect_column@data_column,fsr2l
 11890  0021BC  C039  FFDA         	movff	collect_column@data_column+1,fsr2h
 11891  0021C0  C03D  FFDF         	movff	collect_column@column,indf2
 11892  0021C4  0012               	return	
 11893  0021C6                     __end_of_collect_column:
 11894                           	opt stack 0
 11895                           tblptru	equ	0xFF8
 11896                           tblptrh	equ	0xFF7
 11897                           tblptrl	equ	0xFF6
 11898                           tablat	equ	0xFF5
 11899                           prodh	equ	0xFF4
 11900                           prodl	equ	0xFF3
 11901                           intcon	equ	0xFF2
 11902                           indf0	equ	0xFEF
 11903                           postinc0	equ	0xFEE
 11904                           fsr0h	equ	0xFEA
 11905                           fsr0l	equ	0xFE9
 11906                           wreg	equ	0xFE8
 11907                           indf1	equ	0xFE7
 11908                           postdec1	equ	0xFE5
 11909                           fsr1h	equ	0xFE2
 11910                           fsr1l	equ	0xFE1
 11911                           indf2	equ	0xFDF
 11912                           postinc2	equ	0xFDE
 11913                           fsr2h	equ	0xFDA
 11914                           fsr2l	equ	0xFD9
 11915                           status	equ	0xFD8
 11916                           
 11917 ;; *************** function _strlen *****************
 11918 ;; Defined at:
 11919 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strlen.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;  s               2   29[COMRAM] PTR const unsigned char 
 11922 ;;		 -> uart_str(150), STR_68(4), STR_67(11), STR_64(7), 
 11923 ;;		 -> STR_62(7), STR_60(7), STR_58(7), STR_56(7), 
 11924 ;;		 -> STR_55(7), STR_54(11), STR_51(7), STR_48(7), 
 11925 ;;		 -> STR_47(7), STR_45(12), STR_43(7), STR_40(7), 
 11926 ;;		 -> STR_38(7), STR_37(10), STR_36(7), STR_35(10), 
 11927 ;;		 -> STR_34(7), STR_32(7), STR_31(7), STR_30(9), 
 11928 ;;		 -> STR_28(7), RAM(3895), STR_27(10), STR_26(7), 
 11929 ;;		 -> STR_25(8), STR_24(7), NULL(0), STR_23(8), 
 11930 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1080), 
 11931 ;; Auto vars:     Size  Location     Type
 11932 ;;  cp              2   33[COMRAM] PTR const unsigned char 
 11933 ;;		 -> uart_str(150), STR_68(4), STR_67(11), STR_64(7), 
 11934 ;;		 -> STR_62(7), STR_60(7), STR_58(7), STR_56(7), 
 11935 ;;		 -> STR_55(7), STR_54(11), STR_51(7), STR_48(7), 
 11936 ;;		 -> STR_47(7), STR_45(12), STR_43(7), STR_40(7), 
 11937 ;;		 -> STR_38(7), STR_37(10), STR_36(7), STR_35(10), 
 11938 ;;		 -> STR_34(7), STR_32(7), STR_31(7), STR_30(9), 
 11939 ;;		 -> STR_28(7), RAM(3895), STR_27(10), STR_26(7), 
 11940 ;;		 -> STR_25(8), STR_24(7), NULL(0), STR_23(8), 
 11941 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1080), 
 11942 ;; Return value:  Size  Location     Type
 11943 ;;                  2   29[COMRAM] unsigned int 
 11944 ;; Registers used:
 11945 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 11946 ;; Tracked objects:
 11947 ;;		On entry : 0/0
 11948 ;;		On exit  : 0/0
 11949 ;;		Unchanged: 0/0
 11950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11951 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11953 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11954 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11955 ;;Total ram usage:        6 bytes
 11956 ;; Hardware stack levels used:    1
 11957 ;; Hardware stack levels required when called:    5
 11958 ;; This function calls:
 11959 ;;		Nothing
 11960 ;; This function is called by:
 11961 ;;		_copy_data
 11962 ;;		_scroll_off
 11963 ;;		_make_display
 11964 ;;		_collect_row
 11965 ;;		_collect_column
 11966 ;;		_parse_cmd_str
 11967 ;;		_strstr
 11968 ;;		_put_string
 11969 ;;		_display_string
 11970 ;; This function uses a non-reentrant model
 11971 ;;
 11972                           
 11973                           	psect	text53
 11974  00301A                     __ptext53:
 11975                           	opt stack 0
 11976  00301A                     _strlen:
 11977                           	opt stack 24
 11978                           
 11979                           ;incstack = 0
 11980  00301A  C01E  F022         	movff	strlen@s,strlen@cp
 11981  00301E  C01F  F023         	movff	strlen@s+1,strlen@cp+1
 11982  003022  D002               	goto	l5691
 11983  003024                     l5689:
 11984  003024  4A22               	infsnz	strlen@cp,f,c
 11985  003026  2A23               	incf	strlen@cp+1,f,c
 11986  003028                     l5691:
 11987  003028  C022  FFF6         	movff	strlen@cp,tblptrl
 11988  00302C  C023  FFF7         	movff	strlen@cp+1,tblptrh
 11989  003030  0E00               	movlw	low (__mediumconst shr (0+16))
 11990  003032  6EF8               	movwf	tblptru,c
 11991  003034  0E0F               	movlw	(high __ramtop+-1)
 11992  003036  64F7               	cpfsgt	tblptrh,c
 11993  003038  D003               	bra	u5367
 11994  00303A  0008               	tblrd		*
 11995  00303C  50F5               	movf	tablat,w,c
 11996  00303E  D005               	bra	u5360
 11997  003040                     u5367:
 11998  003040  CFF6 FFE9          	movff	tblptrl,fsr0l
 11999  003044  CFF7 FFEA          	movff	tblptrh,fsr0h
 12000  003048  50EF               	movf	indf0,w,c
 12001  00304A                     u5360:
 12002  00304A  0900               	iorlw	0
 12003  00304C  A4D8               	btfss	status,2,c
 12004  00304E  D7EA               	goto	l5689
 12005  003050  C01E  F020         	movff	strlen@s,??_strlen
 12006  003054  C01F  F021         	movff	strlen@s+1,??_strlen+1
 12007  003058  1E20               	comf	??_strlen,f,c
 12008  00305A  1E21               	comf	??_strlen+1,f,c
 12009  00305C  4A20               	infsnz	??_strlen,f,c
 12010  00305E  2A21               	incf	??_strlen+1,f,c
 12011  003060  5022               	movf	strlen@cp,w,c
 12012  003062  2420               	addwf	??_strlen,w,c
 12013  003064  6E1E               	movwf	?_strlen,c
 12014  003066  5023               	movf	strlen@cp+1,w,c
 12015  003068  2021               	addwfc	??_strlen+1,w,c
 12016  00306A  6E1F               	movwf	?_strlen+1,c
 12017  00306C  0012               	return	
 12018  00306E                     __end_of_strlen:
 12019                           	opt stack 0
 12020                           tblptru	equ	0xFF8
 12021                           tblptrh	equ	0xFF7
 12022                           tblptrl	equ	0xFF6
 12023                           tablat	equ	0xFF5
 12024                           prodh	equ	0xFF4
 12025                           prodl	equ	0xFF3
 12026                           intcon	equ	0xFF2
 12027                           indf0	equ	0xFEF
 12028                           postinc0	equ	0xFEE
 12029                           fsr0h	equ	0xFEA
 12030                           fsr0l	equ	0xFE9
 12031                           wreg	equ	0xFE8
 12032                           indf1	equ	0xFE7
 12033                           postdec1	equ	0xFE5
 12034                           fsr1h	equ	0xFE2
 12035                           fsr1l	equ	0xFE1
 12036                           indf2	equ	0xFDF
 12037                           postinc2	equ	0xFDE
 12038                           fsr2h	equ	0xFDA
 12039                           fsr2l	equ	0xFD9
 12040                           status	equ	0xFD8
 12041                           
 12042 ;; *************** function _printf *****************
 12043 ;; Defined at:
 12044 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;  f               2   35[COMRAM] PTR const unsigned char 
 12047 ;;		 -> STR_117(18), STR_115(5), STR_112(3), STR_111(3), 
 12048 ;;		 -> STR_109(7), STR_107(7), STR_105(7), STR_103(13), 
 12049 ;;		 -> STR_101(5), STR_98(13), STR_95(13), STR_92(13), 
 12050 ;;		 -> STR_89(13), STR_88(5), STR_87(11), STR_84(13), 
 12051 ;;		 -> STR_81(13), STR_80(5), STR_77(13), STR_76(5), 
 12052 ;;		 -> STR_73(13), STR_72(5), STR_66(25), STR_65(11), 
 12053 ;;		 -> STR_63(25), STR_61(27), STR_59(27), STR_57(12), 
 12054 ;;		 -> STR_53(14), STR_52(9), STR_50(11), STR_49(9), 
 12055 ;;		 -> STR_46(9), STR_44(11), STR_42(11), STR_41(12), 
 12056 ;;		 -> STR_39(12), STR_33(7), STR_29(8), STR_22(8), 
 12057 ;;		 -> STR_21(11), STR_20(15), STR_19(22), STR_18(15), 
 12058 ;;		 -> STR_17(32), STR_16(14), STR_15(11), STR_14(8), 
 12059 ;;		 -> STR_13(3), STR_12(16), STR_11(16), STR_10(19), 
 12060 ;;		 -> STR_9(3), STR_8(5), STR_7(16), STR_6(26), 
 12061 ;;		 -> STR_4(17), STR_3(18), STR_2(9), STR_1(9), 
 12062 ;; Auto vars:     Size  Location     Type
 12063 ;;  tmpval          4    0        struct .
 12064 ;;  val             2   50[COMRAM] unsigned int 
 12065 ;;  ap              2   48[COMRAM] PTR void [1]
 12066 ;;		 -> ?_printf(2), 
 12067 ;;  cp              2   46[COMRAM] PTR const unsigned char 
 12068 ;;		 -> STR_118(7), STR_116(6), uart_str(150), STR_110(15), 
 12069 ;;		 -> STR_108(12), STR_106(12), STR_104(11), STR_102(6), 
 12070 ;;		 -> STR_99(11), STR_96(12), STR_93(10), STR_90(10), 
 12071 ;;		 -> STR_85(9), STR_82(8), STR_78(8), STR_74(10), 
 12072 ;;		 -> STR_64(7), STR_62(7), STR_60(7), STR_58(7), 
 12073 ;;		 -> STR_56(7), STR_55(7), STR_51(7), STR_48(7), 
 12074 ;;		 -> STR_47(7), STR_43(7), STR_40(7), STR_38(7), 
 12075 ;;		 -> STR_36(7), STR_34(7), STR_32(7), STR_31(7), 
 12076 ;;		 -> STR_28(7), RAM(3895), STR_26(7), STR_24(7), 
 12077 ;;		 -> NULL(0), STR_5(5), 
 12078 ;;  len             2    0        unsigned int 
 12079 ;;  c               1   52[COMRAM] char 
 12080 ;;  prec            1   45[COMRAM] char 
 12081 ;;  flag            1   44[COMRAM] unsigned char 
 12082 ;; Return value:  Size  Location     Type
 12083 ;;                  2   35[COMRAM] int 
 12084 ;; Registers used:
 12085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12086 ;; Tracked objects:
 12087 ;;		On entry : 0/0
 12088 ;;		On exit  : 0/0
 12089 ;;		Unchanged: 0/0
 12090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12091 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12092 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12093 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12094 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12095 ;;Total ram usage:       18 bytes
 12096 ;; Hardware stack levels used:    1
 12097 ;; Hardware stack levels required when called:    7
 12098 ;; This function calls:
 12099 ;;		___lwdiv
 12100 ;;		___lwmod
 12101 ;;		_putch
 12102 ;; This function is called by:
 12103 ;;		_init_clcd_cusotom_lcd
 12104 ;;		_copy_data
 12105 ;;		_conflict_check
 12106 ;;		_clcd_display_string_config
 12107 ;;		_scroll_right_to_left
 12108 ;;		_scroll_off
 12109 ;;		_collect_row
 12110 ;;		_collect_column
 12111 ;;		_parse_cmd_str
 12112 ;;		_reply_to_host
 12113 ;;		_cmd_consol_task
 12114 ;;		_main
 12115 ;;		_display_string
 12116 ;; This function uses a non-reentrant model
 12117 ;;
 12118                           
 12119                           	psect	text54
 12120  001E1E                     __ptext54:
 12121                           	opt stack 0
 12122  001E1E                     _printf:
 12123                           	opt stack 23
 12124                           
 12125                           ;doprnt.c: 466: va_list ap;
 12126                           ;doprnt.c: 499: signed char c;
 12127                           ;doprnt.c: 506: signed char prec;
 12128                           ;doprnt.c: 508: unsigned char flag;
 12129                           ;doprnt.c: 523: union {
 12130                           ;doprnt.c: 524: unsigned long vd;
 12131                           ;doprnt.c: 525: double integ;
 12132                           ;doprnt.c: 526: } tmpval;
 12133                           ;doprnt.c: 528: unsigned int val;
 12134                           ;doprnt.c: 529: unsigned len;
 12135                           ;doprnt.c: 530: const char * cp;
 12136                           ;doprnt.c: 533: *ap = __va_start();
 12137                           
 12138                           ;incstack = 0
 12139  001E1E  0E26               	movlw	low (?_printf+2)
 12140  001E20  6E31               	movwf	printf@ap,c
 12141  001E22  0E00               	movlw	high (?_printf+2)
 12142  001E24  6E32               	movwf	printf@ap+1,c
 12143                           
 12144                           ;doprnt.c: 536: while(c = *f++) {
 12145  001E26  D0D9               	goto	l5685
 12146  001E28                     l5619:
 12147                           
 12148                           ;doprnt.c: 538: if(c != '%')
 12149  001E28  0E25               	movlw	37
 12150  001E2A  1835               	xorwf	printf@c,w,c
 12151  001E2C  B4D8               	btfsc	status,2,c
 12152  001E2E  D004               	goto	l5623
 12153                           
 12154                           ;doprnt.c: 540: {
 12155                           ;doprnt.c: 541: (putch(c) );
 12156  001E30  5035               	movf	printf@c,w,c
 12157  001E32  ECBF  F01B         	call	_putch
 12158                           
 12159                           ;doprnt.c: 542: continue;
 12160  001E36  D0D1               	goto	l5685
 12161  001E38                     l5623:
 12162                           
 12163                           ;doprnt.c: 543: }
 12164                           ;doprnt.c: 548: flag = 0;
 12165  001E38  0E00               	movlw	0
 12166  001E3A  6E2D               	movwf	printf@flag,c
 12167                           
 12168                           ;doprnt.c: 635: switch(c = *f++) {
 12169  001E3C  D04D               	goto	l5647
 12170  001E3E                     l5625:
 12171                           
 12172                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12173  001E3E  C031  FFD9         	movff	printf@ap,fsr2l
 12174  001E42  C032  FFDA         	movff	printf@ap+1,fsr2h
 12175  001E46  CFDE F02F          	movff	postinc2,printf@cp
 12176  001E4A  CFDD F030          	movff	postdec2,printf@cp+1
 12177  001E4E  0E02               	movlw	2
 12178  001E50  2631               	addwf	printf@ap,f,c
 12179  001E52  0E00               	movlw	0
 12180  001E54  2232               	addwfc	printf@ap+1,f,c
 12181                           
 12182                           ;doprnt.c: 740: if(!cp)
 12183  001E56  502F               	movf	printf@cp,w,c
 12184  001E58  1030               	iorwf	printf@cp+1,w,c
 12185  001E5A  A4D8               	btfss	status,2,c
 12186  001E5C  D01A               	goto	l5637
 12187                           
 12188                           ;doprnt.c: 741: cp = "(null)";
 12189  001E5E  0ECC               	movlw	low STR_118
 12190  001E60  6E2F               	movwf	printf@cp,c
 12191  001E62  0EFF               	movlw	high STR_118
 12192  001E64  6E30               	movwf	printf@cp+1,c
 12193                           
 12194                           ;doprnt.c: 777: while(*cp)
 12195  001E66  D015               	goto	l5637
 12196  001E68                     l5633:
 12197                           
 12198                           ;doprnt.c: 778: (putch(*cp++) );
 12199  001E68  C02F  FFF6         	movff	printf@cp,tblptrl
 12200  001E6C  C030  FFF7         	movff	printf@cp+1,tblptrh
 12201  001E70  0E00               	movlw	low (__mediumconst shr (0+16))
 12202  001E72  6EF8               	movwf	tblptru,c
 12203  001E74  0E0F               	movlw	(high __ramtop+-1)
 12204  001E76  64F7               	cpfsgt	tblptrh,c
 12205  001E78  D003               	bra	u5267
 12206  001E7A  0008               	tblrd		*
 12207  001E7C  50F5               	movf	tablat,w,c
 12208  001E7E  D005               	bra	u5260
 12209  001E80                     u5267:
 12210  001E80  CFF6 FFE9          	movff	tblptrl,fsr0l
 12211  001E84  CFF7 FFEA          	movff	tblptrh,fsr0h
 12212  001E88  50EF               	movf	indf0,w,c
 12213  001E8A                     u5260:
 12214  001E8A  ECBF  F01B         	call	_putch
 12215  001E8E  4A2F               	infsnz	printf@cp,f,c
 12216  001E90  2A30               	incf	printf@cp+1,f,c
 12217  001E92                     l5637:
 12218  001E92  C02F  FFF6         	movff	printf@cp,tblptrl
 12219  001E96  C030  FFF7         	movff	printf@cp+1,tblptrh
 12220  001E9A  0E00               	movlw	low (__mediumconst shr (0+16))
 12221  001E9C  6EF8               	movwf	tblptru,c
 12222  001E9E  0E0F               	movlw	(high __ramtop+-1)
 12223  001EA0  64F7               	cpfsgt	tblptrh,c
 12224  001EA2  D003               	bra	u5277
 12225  001EA4  0008               	tblrd		*
 12226  001EA6  50F5               	movf	tablat,w,c
 12227  001EA8  D005               	bra	u5270
 12228  001EAA                     u5277:
 12229  001EAA  CFF6 FFE9          	movff	tblptrl,fsr0l
 12230  001EAE  CFF7 FFEA          	movff	tblptrh,fsr0h
 12231  001EB2  50EF               	movf	indf0,w,c
 12232  001EB4                     u5270:
 12233  001EB4  0900               	iorlw	0
 12234  001EB6  B4D8               	btfsc	status,2,c
 12235  001EB8  D090               	goto	l5685
 12236  001EBA  D7D6               	goto	l5633
 12237  001EBC                     l5639:
 12238                           
 12239                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 12240  001EBC  C031  FFD9         	movff	printf@ap,fsr2l
 12241  001EC0  C032  FFDA         	movff	printf@ap+1,fsr2h
 12242  001EC4  50DF               	movf	indf2,w,c
 12243  001EC6  6E35               	movwf	printf@c,c
 12244  001EC8  0E02               	movlw	2
 12245  001ECA  2631               	addwf	printf@ap,f,c
 12246  001ECC  0E00               	movlw	0
 12247  001ECE  2232               	addwfc	printf@ap+1,f,c
 12248  001ED0                     l5643:
 12249                           
 12250                           ;doprnt.c: 809: (putch(c) );
 12251  001ED0  5035               	movf	printf@c,w,c
 12252  001ED2  ECBF  F01B         	call	_putch
 12253                           
 12254                           ;doprnt.c: 810: continue;
 12255  001ED6  D081               	goto	l5685
 12256  001ED8                     l5647:
 12257  001ED8  C024  FFF6         	movff	printf@f,tblptrl
 12258  001EDC  C025  FFF7         	movff	printf@f+1,tblptrh
 12259  001EE0  4A24               	infsnz	printf@f,f,c
 12260  001EE2  2A25               	incf	printf@f+1,f,c
 12261  001EE4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12262  001EE4  6AF8               	clrf	tblptru,c
 12263  001EE6                     	endif
 12264  001EE6                     	if	0	;tblptru may be non-zero
 12265  001EE6                     	endif
 12266  001EE6  0008               	tblrd		*
 12267  001EE8  CFF5 F035          	movff	tablat,printf@c
 12268  001EEC  5035               	movf	printf@c,w,c
 12269                           
 12270                           ; Switch size 1, requested type "space"
 12271                           ; Number of cases is 5, Range of values is 0 to 115
 12272                           ; switch strategies available:
 12273                           ; Name         Instructions Cycles
 12274                           ; simple_byte           16     9 (average)
 12275                           ;	Chosen strategy is simple_byte
 12276  001EEE  0A00               	xorlw	0	; case 0
 12277  001EF0  B4D8               	btfsc	status,2,c
 12278  001EF2  0012               	return	
 12279  001EF4  0A63               	xorlw	99	; case 99
 12280  001EF6  B4D8               	btfsc	status,2,c
 12281  001EF8  D7E1               	goto	l5639
 12282  001EFA  0A07               	xorlw	7	; case 100
 12283  001EFC  B4D8               	btfsc	status,2,c
 12284  001EFE  D007               	goto	l5649
 12285  001F00  0A0D               	xorlw	13	; case 105
 12286  001F02  B4D8               	btfsc	status,2,c
 12287  001F04  D004               	goto	l5649
 12288  001F06  0A1A               	xorlw	26	; case 115
 12289  001F08  B4D8               	btfsc	status,2,c
 12290  001F0A  D799               	goto	l5625
 12291  001F0C  D7E1               	goto	l5643
 12292  001F0E                     l5649:
 12293                           
 12294                           ;doprnt.c: 1253: {
 12295                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12296  001F0E  C031  FFD9         	movff	printf@ap,fsr2l
 12297  001F12  C032  FFDA         	movff	printf@ap+1,fsr2h
 12298  001F16  CFDE F033          	movff	postinc2,printf@val
 12299  001F1A  CFDD F034          	movff	postdec2,printf@val+1
 12300  001F1E  0E02               	movlw	2
 12301  001F20  2631               	addwf	printf@ap,f,c
 12302  001F22  0E00               	movlw	0
 12303  001F24  2232               	addwfc	printf@ap+1,f,c
 12304                           
 12305                           ;doprnt.c: 1261: if((int)val < 0) {
 12306  001F26  AE34               	btfss	printf@val+1,7,c
 12307  001F28  D006               	goto	l5659
 12308                           
 12309                           ;doprnt.c: 1262: flag |= 0x03;
 12310  001F2A  0E03               	movlw	3
 12311  001F2C  122D               	iorwf	printf@flag,f,c
 12312                           
 12313                           ;doprnt.c: 1263: val = -val;
 12314  001F2E  6C33               	negf	printf@val,c
 12315  001F30  1E34               	comf	printf@val+1,f,c
 12316  001F32  B0D8               	btfsc	status,0,c
 12317  001F34  2A34               	incf	printf@val+1,f,c
 12318  001F36                     l5659:
 12319                           
 12320                           ;doprnt.c: 1264: }
 12321                           ;doprnt.c: 1266: }
 12322                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12323  001F36  0E01               	movlw	1
 12324  001F38  6E35               	movwf	printf@c,c
 12325  001F3A                     l5661:
 12326  001F3A  0E05               	movlw	5
 12327  001F3C  1835               	xorwf	printf@c,w,c
 12328  001F3E  B4D8               	btfsc	status,2,c
 12329  001F40  D015               	goto	l5673
 12330                           
 12331                           ;doprnt.c: 1306: if(val < dpowers[c])
 12332  001F42  5035               	movf	printf@c,w,c
 12333  001F44  0D02               	mullw	2
 12334  001F46  0E23               	movlw	low _dpowers
 12335  001F48  24F3               	addwf	prodl,w,c
 12336  001F4A  6EF6               	movwf	tblptrl,c
 12337  001F4C  0EFD               	movlw	high _dpowers
 12338  001F4E  20F4               	addwfc	prodh,w,c
 12339  001F50  6EF7               	movwf	tblptrh,c
 12340  001F52                     	if	1	;There are 3 active tblptr bytes
 12341  001F52  6AF8               	clrf	tblptru,c
 12342  001F54  0E00               	movlw	low (__mediumconst shr (0+16))
 12343  001F56  22F8               	addwfc	tblptru,f,c
 12344  001F58                     	endif
 12345  001F58  0009               	tblrd		*+
 12346  001F5A  50F5               	movf	tablat,w,c
 12347  001F5C  5C33               	subwf	printf@val,w,c
 12348  001F5E  0009               	tblrd		*+
 12349  001F60  50F5               	movf	tablat,w,c
 12350  001F62  5834               	subwfb	printf@val+1,w,c
 12351  001F64  A0D8               	btfss	status,0,c
 12352  001F66  D002               	goto	l5673
 12353                           
 12354                           ;doprnt.c: 1307: break;
 12355  001F68  2A35               	incf	printf@c,f,c
 12356  001F6A  D7E7               	goto	l5661
 12357  001F6C                     l5673:
 12358                           
 12359                           ;doprnt.c: 1422: {
 12360                           ;doprnt.c: 1438: if(flag & 0x03)
 12361  001F6C  C02D  F02C         	movff	printf@flag,??_printf
 12362  001F70  0E03               	movlw	3
 12363  001F72  162C               	andwf	??_printf,f,c
 12364  001F74  B4D8               	btfsc	status,2,c
 12365  001F76  D003               	goto	l5677
 12366                           
 12367                           ;doprnt.c: 1439: (putch('-') );
 12368  001F78  0E2D               	movlw	45
 12369  001F7A  ECBF  F01B         	call	_putch
 12370  001F7E                     l5677:
 12371                           
 12372                           ;doprnt.c: 1469: }
 12373                           ;doprnt.c: 1472: prec = c;
 12374  001F7E  C035  F02E         	movff	printf@c,printf@prec
 12375                           
 12376                           ;doprnt.c: 1474: while(prec--) {
 12377  001F82  D027               	goto	l5683
 12378  001F84                     l5679:
 12379                           
 12380                           ;doprnt.c: 1478: {
 12381                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12382  001F84  502E               	movf	printf@prec,w,c
 12383  001F86  0D02               	mullw	2
 12384  001F88  0E23               	movlw	low _dpowers
 12385  001F8A  24F3               	addwf	prodl,w,c
 12386  001F8C  6EF6               	movwf	tblptrl,c
 12387  001F8E  0EFD               	movlw	high _dpowers
 12388  001F90  20F4               	addwfc	prodh,w,c
 12389  001F92  6EF7               	movwf	tblptrh,c
 12390  001F94                     	if	1	;There are 3 active tblptr bytes
 12391  001F94  6AF8               	clrf	tblptru,c
 12392  001F96  0E00               	movlw	low (__mediumconst shr (0+16))
 12393  001F98  22F8               	addwfc	tblptru,f,c
 12394  001F9A                     	endif
 12395  001F9A  0009               	tblrd		*+
 12396  001F9C  CFF5 F012          	movff	tablat,___lwdiv@divisor
 12397  001FA0  000A               	tblrd		*-
 12398  001FA2  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
 12399  001FA6  C033  F010         	movff	printf@val,___lwdiv@dividend
 12400  001FAA  C034  F011         	movff	printf@val+1,___lwdiv@dividend+1
 12401  001FAE  EC37  F018         	call	___lwdiv	;wreg free
 12402  001FB2  C010  F017         	movff	?___lwdiv,___lwmod@dividend
 12403  001FB6  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
 12404  001FBA  0E00               	movlw	0
 12405  001FBC  6E1A               	movwf	___lwmod@divisor+1,c
 12406  001FBE  0E0A               	movlw	10
 12407  001FC0  6E19               	movwf	___lwmod@divisor,c
 12408  001FC2  EC64  F019         	call	___lwmod	;wreg free
 12409  001FC6  5017               	movf	?___lwmod,w,c
 12410  001FC8  0F30               	addlw	48
 12411  001FCA  6E35               	movwf	printf@c,c
 12412                           
 12413                           ;doprnt.c: 1523: }
 12414                           ;doprnt.c: 1524: (putch(c) );
 12415  001FCC  5035               	movf	printf@c,w,c
 12416  001FCE  ECBF  F01B         	call	_putch
 12417  001FD2                     l5683:
 12418  001FD2  062E               	decf	printf@prec,f,c
 12419  001FD4  282E               	incf	printf@prec,w,c
 12420  001FD6  A4D8               	btfss	status,2,c
 12421  001FD8  D7D5               	goto	l5679
 12422  001FDA                     l5685:
 12423  001FDA  C024  FFF6         	movff	printf@f,tblptrl
 12424  001FDE  C025  FFF7         	movff	printf@f+1,tblptrh
 12425  001FE2  4A24               	infsnz	printf@f,f,c
 12426  001FE4  2A25               	incf	printf@f+1,f,c
 12427  001FE6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12428  001FE6  6AF8               	clrf	tblptru,c
 12429  001FE8                     	endif
 12430  001FE8                     	if	0	;tblptru may be non-zero
 12431  001FE8                     	endif
 12432  001FE8  0008               	tblrd		*
 12433  001FEA  CFF5 F035          	movff	tablat,printf@c
 12434  001FEE  5035               	movf	printf@c,w,c
 12435  001FF0  B4D8               	btfsc	status,2,c
 12436  001FF2  0012               	return	
 12437  001FF4  D719               	goto	l5619
 12438  001FF6                     __end_of_printf:
 12439                           	opt stack 0
 12440                           tblptru	equ	0xFF8
 12441                           tblptrh	equ	0xFF7
 12442                           tblptrl	equ	0xFF6
 12443                           tablat	equ	0xFF5
 12444                           prodh	equ	0xFF4
 12445                           prodl	equ	0xFF3
 12446                           intcon	equ	0xFF2
 12447                           indf0	equ	0xFEF
 12448                           postinc0	equ	0xFEE
 12449                           fsr0h	equ	0xFEA
 12450                           fsr0l	equ	0xFE9
 12451                           wreg	equ	0xFE8
 12452                           indf1	equ	0xFE7
 12453                           postdec1	equ	0xFE5
 12454                           fsr1h	equ	0xFE2
 12455                           fsr1l	equ	0xFE1
 12456                           indf2	equ	0xFDF
 12457                           postinc2	equ	0xFDE
 12458                           postdec2	equ	0xFDD
 12459                           fsr2h	equ	0xFDA
 12460                           fsr2l	equ	0xFD9
 12461                           status	equ	0xFD8
 12462                           
 12463 ;; *************** function _putch *****************
 12464 ;; Defined at:
 12465 ;;		line 160 in file "mcc_generated_files/eusart1.c"
 12466 ;; Parameters:    Size  Location     Type
 12467 ;;  txData          1    wreg     unsigned char 
 12468 ;; Auto vars:     Size  Location     Type
 12469 ;;  txData          1   16[COMRAM] unsigned char 
 12470 ;; Return value:  Size  Location     Type
 12471 ;;                  1    wreg      void 
 12472 ;; Registers used:
 12473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12474 ;; Tracked objects:
 12475 ;;		On entry : 0/0
 12476 ;;		On exit  : 0/0
 12477 ;;		Unchanged: 0/0
 12478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12482 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12483 ;;Total ram usage:        1 bytes
 12484 ;; Hardware stack levels used:    1
 12485 ;; Hardware stack levels required when called:    6
 12486 ;; This function calls:
 12487 ;;		_EUSART1_Write
 12488 ;; This function is called by:
 12489 ;;		_printf
 12490 ;;		_puts
 12491 ;;		_cputs
 12492 ;; This function uses a non-reentrant model
 12493 ;;
 12494                           
 12495                           	psect	text55
 12496  00377E                     __ptext55:
 12497                           	opt stack 0
 12498  00377E                     _putch:
 12499                           	opt stack 23
 12500                           
 12501                           ;incstack = 0
 12502                           ;putch@txData stored from wreg
 12503  00377E  6E11               	movwf	putch@txData,c
 12504                           
 12505                           ;eusart1.c: 162: EUSART1_Write(txData);
 12506  003780  5011               	movf	putch@txData,w,c
 12507  003782  ECA5  F019         	call	_EUSART1_Write
 12508  003786  0012               	return		;funcret
 12509  003788                     __end_of_putch:
 12510                           	opt stack 0
 12511                           tblptru	equ	0xFF8
 12512                           tblptrh	equ	0xFF7
 12513                           tblptrl	equ	0xFF6
 12514                           tablat	equ	0xFF5
 12515                           prodh	equ	0xFF4
 12516                           prodl	equ	0xFF3
 12517                           intcon	equ	0xFF2
 12518                           indf0	equ	0xFEF
 12519                           postinc0	equ	0xFEE
 12520                           fsr0h	equ	0xFEA
 12521                           fsr0l	equ	0xFE9
 12522                           wreg	equ	0xFE8
 12523                           indf1	equ	0xFE7
 12524                           postdec1	equ	0xFE5
 12525                           fsr1h	equ	0xFE2
 12526                           fsr1l	equ	0xFE1
 12527                           indf2	equ	0xFDF
 12528                           postinc2	equ	0xFDE
 12529                           postdec2	equ	0xFDD
 12530                           fsr2h	equ	0xFDA
 12531                           fsr2l	equ	0xFD9
 12532                           status	equ	0xFD8
 12533                           
 12534 ;; *************** function _EUSART1_Write *****************
 12535 ;; Defined at:
 12536 ;;		line 132 in file "mcc_generated_files/eusart1.c"
 12537 ;; Parameters:    Size  Location     Type
 12538 ;;  txData          1    wreg     unsigned char 
 12539 ;; Auto vars:     Size  Location     Type
 12540 ;;  txData          1   15[COMRAM] unsigned char 
 12541 ;; Return value:  Size  Location     Type
 12542 ;;                  1    wreg      void 
 12543 ;; Registers used:
 12544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12545 ;; Tracked objects:
 12546 ;;		On entry : 0/0
 12547 ;;		On exit  : 0/0
 12548 ;;		Unchanged: 0/0
 12549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12551 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12553 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12554 ;;Total ram usage:        1 bytes
 12555 ;; Hardware stack levels used:    1
 12556 ;; Hardware stack levels required when called:    5
 12557 ;; This function calls:
 12558 ;;		Nothing
 12559 ;; This function is called by:
 12560 ;;		_putch
 12561 ;; This function uses a non-reentrant model
 12562 ;;
 12563                           
 12564                           	psect	text56
 12565  00334A                     __ptext56:
 12566                           	opt stack 0
 12567  00334A                     _EUSART1_Write:
 12568                           	opt stack 23
 12569                           
 12570                           ;incstack = 0
 12571                           ;EUSART1_Write@txData stored from wreg
 12572  00334A  6E10               	movwf	EUSART1_Write@txData,c
 12573  00334C                     l5503:
 12574  00334C  0100               	movlb	0	; () banked
 12575  00334E  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 12576  003350  B4D8               	btfsc	status,2,c
 12577  003352  D7FC               	goto	l5503
 12578                           
 12579                           ; BSR set to: 0
 12580                           ;eusart1.c: 136: }
 12581                           ;eusart1.c: 138: if(0 == PIE1bits.TX1IE)
 12582  003354  B89D               	btfsc	3997,4,c	;volatile
 12583  003356  D003               	goto	l193
 12584                           
 12585                           ; BSR set to: 0
 12586                           ;eusart1.c: 139: {
 12587                           ;eusart1.c: 140: TXREG1 = txData;
 12588  003358  C010  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 12589                           
 12590                           ;eusart1.c: 141: }
 12591  00335C  D013               	goto	l5517
 12592  00335E                     l193:
 12593                           
 12594                           ; BSR set to: 0
 12595                           ;eusart1.c: 142: else
 12596                           ;eusart1.c: 143: {
 12597                           ;eusart1.c: 144: PIE1bits.TX1IE = 0;
 12598  00335E  989D               	bcf	3997,4,c	;volatile
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;eusart1.c: 145: eusart1TxBuffer[eusart1TxHead++] = txData;
 12602  003360  5047               	movf	_eusart1TxHead,w,c	;volatile
 12603  003362  0D01               	mullw	1
 12604  003364  0E68               	movlw	low _eusart1TxBuffer
 12605  003366  24F3               	addwf	prodl,w,c
 12606  003368  6ED9               	movwf	fsr2l,c
 12607  00336A  0E00               	movlw	high _eusart1TxBuffer
 12608  00336C  20F4               	addwfc	prodh,w,c
 12609  00336E  6EDA               	movwf	fsr2h,c
 12610  003370  C010  FFDF         	movff	EUSART1_Write@txData,indf2
 12611                           
 12612                           ; BSR set to: 0
 12613  003374  2A47               	incf	_eusart1TxHead,f,c	;volatile
 12614                           
 12615                           ; BSR set to: 0
 12616                           ;eusart1.c: 146: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 12617  003376  0E07               	movlw	7
 12618  003378  6447               	cpfsgt	_eusart1TxHead,c	;volatile
 12619  00337A  D002               	goto	l5515
 12620                           
 12621                           ; BSR set to: 0
 12622                           ;eusart1.c: 147: {
 12623                           ;eusart1.c: 148: eusart1TxHead = 0;
 12624  00337C  0E00               	movlw	0
 12625  00337E  6E47               	movwf	_eusart1TxHead,c	;volatile
 12626  003380                     l5515:
 12627                           
 12628                           ; BSR set to: 0
 12629                           ;eusart1.c: 149: }
 12630                           ;eusart1.c: 150: eusart1TxBufferRemaining--;
 12631  003380  0100               	movlb	0	; () banked
 12632  003382  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 12633  003384                     l5517:
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;eusart1.c: 151: }
 12637                           ;eusart1.c: 152: PIE1bits.TX1IE = 1;
 12638  003384  889D               	bsf	3997,4,c	;volatile
 12639                           
 12640                           ; BSR set to: 0
 12641  003386  0012               	return		;funcret
 12642  003388                     __end_of_EUSART1_Write:
 12643                           	opt stack 0
 12644                           tblptru	equ	0xFF8
 12645                           tblptrh	equ	0xFF7
 12646                           tblptrl	equ	0xFF6
 12647                           tablat	equ	0xFF5
 12648                           prodh	equ	0xFF4
 12649                           prodl	equ	0xFF3
 12650                           intcon	equ	0xFF2
 12651                           indf0	equ	0xFEF
 12652                           postinc0	equ	0xFEE
 12653                           fsr0h	equ	0xFEA
 12654                           fsr0l	equ	0xFE9
 12655                           wreg	equ	0xFE8
 12656                           indf1	equ	0xFE7
 12657                           postdec1	equ	0xFE5
 12658                           fsr1h	equ	0xFE2
 12659                           fsr1l	equ	0xFE1
 12660                           indf2	equ	0xFDF
 12661                           postinc2	equ	0xFDE
 12662                           postdec2	equ	0xFDD
 12663                           fsr2h	equ	0xFDA
 12664                           fsr2l	equ	0xFD9
 12665                           status	equ	0xFD8
 12666                           
 12667 ;; *************** function ___lwmod *****************
 12668 ;; Defined at:
 12669 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12670 ;; Parameters:    Size  Location     Type
 12671 ;;  dividend        2   22[COMRAM] unsigned int 
 12672 ;;  divisor         2   24[COMRAM] unsigned int 
 12673 ;; Auto vars:     Size  Location     Type
 12674 ;;  counter         1   26[COMRAM] unsigned char 
 12675 ;; Return value:  Size  Location     Type
 12676 ;;                  2   22[COMRAM] unsigned int 
 12677 ;; Registers used:
 12678 ;;		wreg, status,2, status,0
 12679 ;; Tracked objects:
 12680 ;;		On entry : 0/0
 12681 ;;		On exit  : 0/0
 12682 ;;		Unchanged: 0/0
 12683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12684 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12687 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12688 ;;Total ram usage:        5 bytes
 12689 ;; Hardware stack levels used:    1
 12690 ;; Hardware stack levels required when called:    5
 12691 ;; This function calls:
 12692 ;;		Nothing
 12693 ;; This function is called by:
 12694 ;;		_printf
 12695 ;; This function uses a non-reentrant model
 12696 ;;
 12697                           
 12698                           	psect	text57
 12699  0032C8                     __ptext57:
 12700                           	opt stack 0
 12701  0032C8                     ___lwmod:
 12702                           	opt stack 24
 12703                           
 12704                           ; BSR set to: 0
 12705                           ;incstack = 0
 12706  0032C8  5019               	movf	___lwmod@divisor,w,c
 12707  0032CA  101A               	iorwf	___lwmod@divisor+1,w,c
 12708  0032CC  B4D8               	btfsc	status,2,c
 12709  0032CE  D018               	goto	l1427
 12710  0032D0  0E01               	movlw	1
 12711  0032D2  6E1B               	movwf	___lwmod@counter,c
 12712  0032D4  D004               	goto	l5593
 12713  0032D6                     l5591:
 12714  0032D6  90D8               	bcf	status,0,c
 12715  0032D8  3619               	rlcf	___lwmod@divisor,f,c
 12716  0032DA  361A               	rlcf	___lwmod@divisor+1,f,c
 12717  0032DC  2A1B               	incf	___lwmod@counter,f,c
 12718  0032DE                     l5593:
 12719  0032DE  AE1A               	btfss	___lwmod@divisor+1,7,c
 12720  0032E0  D7FA               	goto	l5591
 12721  0032E2                     l5595:
 12722  0032E2  5019               	movf	___lwmod@divisor,w,c
 12723  0032E4  5C17               	subwf	___lwmod@dividend,w,c
 12724  0032E6  501A               	movf	___lwmod@divisor+1,w,c
 12725  0032E8  5818               	subwfb	___lwmod@dividend+1,w,c
 12726  0032EA  A0D8               	btfss	status,0,c
 12727  0032EC  D004               	goto	l5599
 12728  0032EE  5019               	movf	___lwmod@divisor,w,c
 12729  0032F0  5E17               	subwf	___lwmod@dividend,f,c
 12730  0032F2  501A               	movf	___lwmod@divisor+1,w,c
 12731  0032F4  5A18               	subwfb	___lwmod@dividend+1,f,c
 12732  0032F6                     l5599:
 12733  0032F6  90D8               	bcf	status,0,c
 12734  0032F8  321A               	rrcf	___lwmod@divisor+1,f,c
 12735  0032FA  3219               	rrcf	___lwmod@divisor,f,c
 12736  0032FC  2E1B               	decfsz	___lwmod@counter,f,c
 12737  0032FE  D7F1               	goto	l5595
 12738  003300                     l1427:
 12739  003300  C017  F017         	movff	___lwmod@dividend,?___lwmod
 12740  003304  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
 12741  003308  0012               	return		;funcret
 12742  00330A                     __end_of___lwmod:
 12743                           	opt stack 0
 12744                           tblptru	equ	0xFF8
 12745                           tblptrh	equ	0xFF7
 12746                           tblptrl	equ	0xFF6
 12747                           tablat	equ	0xFF5
 12748                           prodh	equ	0xFF4
 12749                           prodl	equ	0xFF3
 12750                           intcon	equ	0xFF2
 12751                           indf0	equ	0xFEF
 12752                           postinc0	equ	0xFEE
 12753                           fsr0h	equ	0xFEA
 12754                           fsr0l	equ	0xFE9
 12755                           wreg	equ	0xFE8
 12756                           indf1	equ	0xFE7
 12757                           postdec1	equ	0xFE5
 12758                           fsr1h	equ	0xFE2
 12759                           fsr1l	equ	0xFE1
 12760                           indf2	equ	0xFDF
 12761                           postinc2	equ	0xFDE
 12762                           postdec2	equ	0xFDD
 12763                           fsr2h	equ	0xFDA
 12764                           fsr2l	equ	0xFD9
 12765                           status	equ	0xFD8
 12766                           
 12767 ;; *************** function ___lwdiv *****************
 12768 ;; Defined at:
 12769 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12770 ;; Parameters:    Size  Location     Type
 12771 ;;  dividend        2   15[COMRAM] unsigned int 
 12772 ;;  divisor         2   17[COMRAM] unsigned int 
 12773 ;; Auto vars:     Size  Location     Type
 12774 ;;  quotient        2   20[COMRAM] unsigned int 
 12775 ;;  counter         1   19[COMRAM] unsigned char 
 12776 ;; Return value:  Size  Location     Type
 12777 ;;                  2   15[COMRAM] unsigned int 
 12778 ;; Registers used:
 12779 ;;		wreg, status,2, status,0
 12780 ;; Tracked objects:
 12781 ;;		On entry : 0/0
 12782 ;;		On exit  : 0/0
 12783 ;;		Unchanged: 0/0
 12784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12785 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12786 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12788 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12789 ;;Total ram usage:        7 bytes
 12790 ;; Hardware stack levels used:    1
 12791 ;; Hardware stack levels required when called:    5
 12792 ;; This function calls:
 12793 ;;		Nothing
 12794 ;; This function is called by:
 12795 ;;		_printf
 12796 ;; This function uses a non-reentrant model
 12797 ;;
 12798                           
 12799                           	psect	text58
 12800  00306E                     __ptext58:
 12801                           	opt stack 0
 12802  00306E                     ___lwdiv:
 12803                           	opt stack 24
 12804                           
 12805                           ;incstack = 0
 12806  00306E  0E00               	movlw	0
 12807  003070  6E16               	movwf	___lwdiv@quotient+1,c
 12808  003072  0E00               	movlw	0
 12809  003074  6E15               	movwf	___lwdiv@quotient,c
 12810  003076  5012               	movf	___lwdiv@divisor,w,c
 12811  003078  1013               	iorwf	___lwdiv@divisor+1,w,c
 12812  00307A  B4D8               	btfsc	status,2,c
 12813  00307C  D01C               	goto	l1417
 12814  00307E  0E01               	movlw	1
 12815  003080  6E14               	movwf	___lwdiv@counter,c
 12816  003082  D004               	goto	l5573
 12817  003084                     l5571:
 12818  003084  90D8               	bcf	status,0,c
 12819  003086  3612               	rlcf	___lwdiv@divisor,f,c
 12820  003088  3613               	rlcf	___lwdiv@divisor+1,f,c
 12821  00308A  2A14               	incf	___lwdiv@counter,f,c
 12822  00308C                     l5573:
 12823  00308C  AE13               	btfss	___lwdiv@divisor+1,7,c
 12824  00308E  D7FA               	goto	l5571
 12825  003090                     l5575:
 12826  003090  90D8               	bcf	status,0,c
 12827  003092  3615               	rlcf	___lwdiv@quotient,f,c
 12828  003094  3616               	rlcf	___lwdiv@quotient+1,f,c
 12829  003096  5012               	movf	___lwdiv@divisor,w,c
 12830  003098  5C10               	subwf	___lwdiv@dividend,w,c
 12831  00309A  5013               	movf	___lwdiv@divisor+1,w,c
 12832  00309C  5811               	subwfb	___lwdiv@dividend+1,w,c
 12833  00309E  A0D8               	btfss	status,0,c
 12834  0030A0  D005               	goto	l5583
 12835  0030A2  5012               	movf	___lwdiv@divisor,w,c
 12836  0030A4  5E10               	subwf	___lwdiv@dividend,f,c
 12837  0030A6  5013               	movf	___lwdiv@divisor+1,w,c
 12838  0030A8  5A11               	subwfb	___lwdiv@dividend+1,f,c
 12839  0030AA  8015               	bsf	___lwdiv@quotient,0,c
 12840  0030AC                     l5583:
 12841  0030AC  90D8               	bcf	status,0,c
 12842  0030AE  3213               	rrcf	___lwdiv@divisor+1,f,c
 12843  0030B0  3212               	rrcf	___lwdiv@divisor,f,c
 12844  0030B2  2E14               	decfsz	___lwdiv@counter,f,c
 12845  0030B4  D7ED               	goto	l5575
 12846  0030B6                     l1417:
 12847  0030B6  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
 12848  0030BA  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12849  0030BE  0012               	return		;funcret
 12850  0030C0                     __end_of___lwdiv:
 12851                           	opt stack 0
 12852                           tblptru	equ	0xFF8
 12853                           tblptrh	equ	0xFF7
 12854                           tblptrl	equ	0xFF6
 12855                           tablat	equ	0xFF5
 12856                           prodh	equ	0xFF4
 12857                           prodl	equ	0xFF3
 12858                           intcon	equ	0xFF2
 12859                           indf0	equ	0xFEF
 12860                           postinc0	equ	0xFEE
 12861                           fsr0h	equ	0xFEA
 12862                           fsr0l	equ	0xFE9
 12863                           wreg	equ	0xFE8
 12864                           indf1	equ	0xFE7
 12865                           postdec1	equ	0xFE5
 12866                           fsr1h	equ	0xFE2
 12867                           fsr1l	equ	0xFE1
 12868                           indf2	equ	0xFDF
 12869                           postinc2	equ	0xFDE
 12870                           postdec2	equ	0xFDD
 12871                           fsr2h	equ	0xFDA
 12872                           fsr2l	equ	0xFD9
 12873                           status	equ	0xFD8
 12874                           
 12875 ;; *************** function _atoi *****************
 12876 ;; Defined at:
 12877 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
 12878 ;; Parameters:    Size  Location     Type
 12879 ;;  s               2   29[COMRAM] PTR const unsigned char 
 12880 ;;		 -> uart_str(150), STR_64(7), STR_62(7), STR_60(7), 
 12881 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 12882 ;;		 -> STR_48(7), STR_47(7), STR_43(7), STR_40(7), 
 12883 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 12884 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
 12885 ;;		 -> STR_24(7), NULL(0), 
 12886 ;; Auto vars:     Size  Location     Type
 12887 ;;  a               2   34[COMRAM] int 
 12888 ;;  sign            1   33[COMRAM] unsigned char 
 12889 ;; Return value:  Size  Location     Type
 12890 ;;                  2   29[COMRAM] int 
 12891 ;; Registers used:
 12892 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12893 ;; Tracked objects:
 12894 ;;		On entry : 0/0
 12895 ;;		On exit  : 0/0
 12896 ;;		Unchanged: 0/0
 12897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12898 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12899 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12900 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12901 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12902 ;;Total ram usage:        7 bytes
 12903 ;; Hardware stack levels used:    1
 12904 ;; Hardware stack levels required when called:    6
 12905 ;; This function calls:
 12906 ;;		___wmul
 12907 ;;		_isdigit
 12908 ;; This function is called by:
 12909 ;;		_parse_cmd_str
 12910 ;; This function uses a non-reentrant model
 12911 ;;
 12912                           
 12913                           	psect	text59
 12914  0026B2                     __ptext59:
 12915                           	opt stack 0
 12916  0026B2                     _atoi:
 12917                           	opt stack 22
 12918                           
 12919                           ;incstack = 0
 12920  0026B2  D002               	goto	l6435
 12921  0026B4                     l6433:
 12922  0026B4  4A1E               	infsnz	atoi@s,f,c
 12923  0026B6  2A1F               	incf	atoi@s+1,f,c
 12924  0026B8                     l6435:
 12925  0026B8  C01E  FFF6         	movff	atoi@s,tblptrl
 12926  0026BC  C01F  FFF7         	movff	atoi@s+1,tblptrh
 12927  0026C0  0E00               	movlw	low (__mediumconst shr (0+16))
 12928  0026C2  6EF8               	movwf	tblptru,c
 12929  0026C4  0E0F               	movlw	(high __ramtop+-1)
 12930  0026C6  64F7               	cpfsgt	tblptrh,c
 12931  0026C8  D003               	bra	u6447
 12932  0026CA  0008               	tblrd		*
 12933  0026CC  50F5               	movf	tablat,w,c
 12934  0026CE  D005               	bra	u6440
 12935  0026D0                     u6447:
 12936  0026D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 12937  0026D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 12938  0026D8  50EF               	movf	indf0,w,c
 12939  0026DA                     u6440:
 12940  0026DA  0A20               	xorlw	32
 12941  0026DC  B4D8               	btfsc	status,2,c
 12942  0026DE  D7EA               	goto	l6433
 12943  0026E0  C01E  FFF6         	movff	atoi@s,tblptrl
 12944  0026E4  C01F  FFF7         	movff	atoi@s+1,tblptrh
 12945  0026E8  0E00               	movlw	low (__mediumconst shr (0+16))
 12946  0026EA  6EF8               	movwf	tblptru,c
 12947  0026EC  0E0F               	movlw	(high __ramtop+-1)
 12948  0026EE  64F7               	cpfsgt	tblptrh,c
 12949  0026F0  D003               	bra	u6467
 12950  0026F2  0008               	tblrd		*
 12951  0026F4  50F5               	movf	tablat,w,c
 12952  0026F6  D005               	bra	u6460
 12953  0026F8                     u6467:
 12954  0026F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 12955  0026FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 12956  002700  50EF               	movf	indf0,w,c
 12957  002702                     u6460:
 12958  002702  0A09               	xorlw	9
 12959  002704  B4D8               	btfsc	status,2,c
 12960  002706  D7D6               	goto	l6433
 12961  002708  0E00               	movlw	0
 12962  00270A  6E24               	movwf	atoi@a+1,c
 12963  00270C  0E00               	movlw	0
 12964  00270E  6E23               	movwf	atoi@a,c
 12965  002710  0E00               	movlw	0
 12966  002712  6E22               	movwf	atoi@sign,c
 12967  002714  C01E  FFF6         	movff	atoi@s,tblptrl
 12968  002718  C01F  FFF7         	movff	atoi@s+1,tblptrh
 12969  00271C  0E00               	movlw	low (__mediumconst shr (0+16))
 12970  00271E  6EF8               	movwf	tblptru,c
 12971  002720  0E0F               	movlw	(high __ramtop+-1)
 12972  002722  64F7               	cpfsgt	tblptrh,c
 12973  002724  D003               	bra	u6487
 12974  002726  0008               	tblrd		*
 12975  002728  50F5               	movf	tablat,w,c
 12976  00272A  D005               	bra	u6480
 12977  00272C                     u6487:
 12978  00272C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12979  002730  CFF7 FFEA          	movff	tblptrh,fsr0h
 12980  002734  50EF               	movf	indf0,w,c
 12981  002736                     u6480:
 12982  002736  0A2D               	xorlw	45
 12983  002738  A4D8               	btfss	status,2,c
 12984  00273A  D002               	goto	l6445
 12985  00273C  2A22               	incf	atoi@sign,f,c
 12986  00273E  D03C               	goto	l6451
 12987  002740                     l6445:
 12988  002740  C01E  FFF6         	movff	atoi@s,tblptrl
 12989  002744  C01F  FFF7         	movff	atoi@s+1,tblptrh
 12990  002748  0E00               	movlw	low (__mediumconst shr (0+16))
 12991  00274A  6EF8               	movwf	tblptru,c
 12992  00274C  0E0F               	movlw	(high __ramtop+-1)
 12993  00274E  64F7               	cpfsgt	tblptrh,c
 12994  002750  D003               	bra	u6507
 12995  002752  0008               	tblrd		*
 12996  002754  50F5               	movf	tablat,w,c
 12997  002756  D005               	bra	u6500
 12998  002758                     u6507:
 12999  002758  CFF6 FFE9          	movff	tblptrl,fsr0l
 13000  00275C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13001  002760  50EF               	movf	indf0,w,c
 13002  002762                     u6500:
 13003  002762  0A2B               	xorlw	43
 13004  002764  A4D8               	btfss	status,2,c
 13005  002766  D02A               	goto	l6453
 13006  002768  D027               	goto	l6451
 13007  00276A                     l6449:
 13008  00276A  C023  F018         	movff	atoi@a,___wmul@multiplier
 13009  00276E  C024  F019         	movff	atoi@a+1,___wmul@multiplier+1
 13010  002772  0E00               	movlw	0
 13011  002774  6E1B               	movwf	___wmul@multiplicand+1,c
 13012  002776  0E0A               	movlw	10
 13013  002778  6E1A               	movwf	___wmul@multiplicand,c
 13014  00277A  EC8A  F01A         	call	___wmul	;wreg free
 13015  00277E  C01E  FFF6         	movff	atoi@s,tblptrl
 13016  002782  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13017  002786  0E00               	movlw	low (__mediumconst shr (0+16))
 13018  002788  6EF8               	movwf	tblptru,c
 13019  00278A  0E0F               	movlw	(high __ramtop+-1)
 13020  00278C  64F7               	cpfsgt	tblptrh,c
 13021  00278E  D003               	bra	u6527
 13022  002790  0008               	tblrd		*
 13023  002792  50F5               	movf	tablat,w,c
 13024  002794  D005               	bra	u6520
 13025  002796                     u6527:
 13026  002796  CFF6 FFE9          	movff	tblptrl,fsr0l
 13027  00279A  CFF7 FFEA          	movff	tblptrh,fsr0h
 13028  00279E  50EF               	movf	indf0,w,c
 13029  0027A0                     u6520:
 13030  0027A0  6E20               	movwf	??_atoi& (0+255),c
 13031  0027A2  6A21               	clrf	(??_atoi+1)& (0+255),c
 13032  0027A4  5018               	movf	?___wmul,w,c
 13033  0027A6  2620               	addwf	??_atoi,f,c
 13034  0027A8  5019               	movf	?___wmul+1,w,c
 13035  0027AA  2221               	addwfc	??_atoi+1,f,c
 13036  0027AC  0ED0               	movlw	208
 13037  0027AE  2420               	addwf	??_atoi,w,c
 13038  0027B0  6E23               	movwf	atoi@a,c
 13039  0027B2  0EFF               	movlw	255
 13040  0027B4  2021               	addwfc	??_atoi+1,w,c
 13041  0027B6  6E24               	movwf	atoi@a+1,c
 13042  0027B8                     l6451:
 13043  0027B8  4A1E               	infsnz	atoi@s,f,c
 13044  0027BA  2A1F               	incf	atoi@s+1,f,c
 13045  0027BC                     l6453:
 13046  0027BC  C01E  FFF6         	movff	atoi@s,tblptrl
 13047  0027C0  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13048  0027C4  0E00               	movlw	low (__mediumconst shr (0+16))
 13049  0027C6  6EF8               	movwf	tblptru,c
 13050  0027C8  0E0F               	movlw	(high __ramtop+-1)
 13051  0027CA  64F7               	cpfsgt	tblptrh,c
 13052  0027CC  D003               	bra	u6537
 13053  0027CE  0008               	tblrd		*
 13054  0027D0  50F5               	movf	tablat,w,c
 13055  0027D2  D005               	bra	u6530
 13056  0027D4                     u6537:
 13057  0027D4  CFF6 FFE9          	movff	tblptrl,fsr0l
 13058  0027D8  CFF7 FFEA          	movff	tblptrh,fsr0h
 13059  0027DC  50EF               	movf	indf0,w,c
 13060  0027DE                     u6530:
 13061  0027DE  EC04  F01B         	call	_isdigit
 13062  0027E2  B0D8               	btfsc	status,0,c
 13063  0027E4  D7C2               	goto	l6449
 13064  0027E6  5022               	movf	atoi@sign,w,c
 13065  0027E8  B4D8               	btfsc	status,2,c
 13066  0027EA  D00D               	goto	l1167
 13067  0027EC  C023  F020         	movff	atoi@a,??_atoi
 13068  0027F0  C024  F021         	movff	atoi@a+1,??_atoi+1
 13069  0027F4  1E20               	comf	??_atoi,f,c
 13070  0027F6  1E21               	comf	??_atoi+1,f,c
 13071  0027F8  4A20               	infsnz	??_atoi,f,c
 13072  0027FA  2A21               	incf	??_atoi+1,f,c
 13073  0027FC  C020  F01E         	movff	??_atoi,?_atoi
 13074  002800  C021  F01F         	movff	??_atoi+1,?_atoi+1
 13075  002804  0012               	return	
 13076  002806                     l1167:
 13077  002806  C023  F01E         	movff	atoi@a,?_atoi
 13078  00280A  C024  F01F         	movff	atoi@a+1,?_atoi+1
 13079  00280E  0012               	return		;funcret
 13080  002810                     __end_of_atoi:
 13081                           	opt stack 0
 13082                           tblptru	equ	0xFF8
 13083                           tblptrh	equ	0xFF7
 13084                           tblptrl	equ	0xFF6
 13085                           tablat	equ	0xFF5
 13086                           prodh	equ	0xFF4
 13087                           prodl	equ	0xFF3
 13088                           intcon	equ	0xFF2
 13089                           indf0	equ	0xFEF
 13090                           postinc0	equ	0xFEE
 13091                           fsr0h	equ	0xFEA
 13092                           fsr0l	equ	0xFE9
 13093                           wreg	equ	0xFE8
 13094                           indf1	equ	0xFE7
 13095                           postdec1	equ	0xFE5
 13096                           fsr1h	equ	0xFE2
 13097                           fsr1l	equ	0xFE1
 13098                           indf2	equ	0xFDF
 13099                           postinc2	equ	0xFDE
 13100                           postdec2	equ	0xFDD
 13101                           fsr2h	equ	0xFDA
 13102                           fsr2l	equ	0xFD9
 13103                           status	equ	0xFD8
 13104                           
 13105 ;; *************** function _isdigit *****************
 13106 ;; Defined at:
 13107 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13108 ;; Parameters:    Size  Location     Type
 13109 ;;  c               1    wreg     unsigned char 
 13110 ;; Auto vars:     Size  Location     Type
 13111 ;;  c               1   17[COMRAM] unsigned char 
 13112 ;; Return value:  Size  Location     Type
 13113 ;;		None               void
 13114 ;; Registers used:
 13115 ;;		wreg, status,2, status,0
 13116 ;; Tracked objects:
 13117 ;;		On entry : 0/0
 13118 ;;		On exit  : 0/0
 13119 ;;		Unchanged: 0/0
 13120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13122 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13123 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13124 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13125 ;;Total ram usage:        3 bytes
 13126 ;; Hardware stack levels used:    1
 13127 ;; Hardware stack levels required when called:    5
 13128 ;; This function calls:
 13129 ;;		Nothing
 13130 ;; This function is called by:
 13131 ;;		_collect_row
 13132 ;;		_collect_column
 13133 ;;		_parse_cmd_str
 13134 ;;		_atoi
 13135 ;; This function uses a non-reentrant model
 13136 ;;
 13137                           
 13138                           	psect	text60
 13139  003608                     __ptext60:
 13140                           	opt stack 0
 13141  003608                     _isdigit:
 13142                           	opt stack 23
 13143                           
 13144                           ;incstack = 0
 13145                           ;isdigit@c stored from wreg
 13146  003608  6E12               	movwf	isdigit@c,c
 13147  00360A  0E00               	movlw	0
 13148  00360C  6E11               	movwf	_isdigit$2175,c
 13149  00360E  0E3A               	movlw	58
 13150  003610  6012               	cpfslt	isdigit@c,c
 13151  003612  D005               	goto	l6083
 13152  003614  0E2F               	movlw	47
 13153  003616  6412               	cpfsgt	isdigit@c,c
 13154  003618  D002               	goto	l6083
 13155  00361A  0E01               	movlw	1
 13156  00361C  6E11               	movwf	_isdigit$2175,c
 13157  00361E                     l6083:
 13158  00361E  C011  F010         	movff	_isdigit$2175,??_isdigit
 13159  003622  3010               	rrcf	??_isdigit,w,c
 13160  003624  0012               	return	
 13161  003626                     __end_of_isdigit:
 13162                           	opt stack 0
 13163                           tblptru	equ	0xFF8
 13164                           tblptrh	equ	0xFF7
 13165                           tblptrl	equ	0xFF6
 13166                           tablat	equ	0xFF5
 13167                           prodh	equ	0xFF4
 13168                           prodl	equ	0xFF3
 13169                           intcon	equ	0xFF2
 13170                           indf0	equ	0xFEF
 13171                           postinc0	equ	0xFEE
 13172                           fsr0h	equ	0xFEA
 13173                           fsr0l	equ	0xFE9
 13174                           wreg	equ	0xFE8
 13175                           indf1	equ	0xFE7
 13176                           postdec1	equ	0xFE5
 13177                           fsr1h	equ	0xFE2
 13178                           fsr1l	equ	0xFE1
 13179                           indf2	equ	0xFDF
 13180                           postinc2	equ	0xFDE
 13181                           postdec2	equ	0xFDD
 13182                           fsr2h	equ	0xFDA
 13183                           fsr2l	equ	0xFD9
 13184                           status	equ	0xFD8
 13185                           
 13186 ;; *************** function ___wmul *****************
 13187 ;; Defined at:
 13188 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13189 ;; Parameters:    Size  Location     Type
 13190 ;;  multiplier      2   23[COMRAM] unsigned int 
 13191 ;;  multiplicand    2   25[COMRAM] unsigned int 
 13192 ;; Auto vars:     Size  Location     Type
 13193 ;;  product         2   27[COMRAM] unsigned int 
 13194 ;; Return value:  Size  Location     Type
 13195 ;;                  2   23[COMRAM] unsigned int 
 13196 ;; Registers used:
 13197 ;;		wreg, status,2, status,0, prodl, prodh
 13198 ;; Tracked objects:
 13199 ;;		On entry : 0/0
 13200 ;;		On exit  : 0/0
 13201 ;;		Unchanged: 0/0
 13202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13203 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13206 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13207 ;;Total ram usage:        6 bytes
 13208 ;; Hardware stack levels used:    1
 13209 ;; Hardware stack levels required when called:    5
 13210 ;; This function calls:
 13211 ;;		Nothing
 13212 ;; This function is called by:
 13213 ;;		_init_clcd_cusotom_lcd
 13214 ;;		_conflict_check
 13215 ;;		_update_string_data
 13216 ;;		_make_display
 13217 ;;		_atoi
 13218 ;; This function uses a non-reentrant model
 13219 ;;
 13220                           
 13221                           	psect	text61
 13222  003514                     __ptext61:
 13223                           	opt stack 0
 13224  003514                     ___wmul:
 13225                           	opt stack 24
 13226                           
 13227                           ;incstack = 0
 13228  003514  5018               	movf	___wmul@multiplier,w,c
 13229  003516  021A               	mulwf	___wmul@multiplicand,c
 13230  003518  CFF3 F01C          	movff	prodl,___wmul@product
 13231  00351C  CFF4 F01D          	movff	prodh,___wmul@product+1
 13232  003520  5018               	movf	___wmul@multiplier,w,c
 13233  003522  021B               	mulwf	___wmul@multiplicand+1,c
 13234  003524  50F3               	movf	prodl,w,c
 13235  003526  261D               	addwf	___wmul@product+1,f,c
 13236  003528  5019               	movf	___wmul@multiplier+1,w,c
 13237  00352A  021A               	mulwf	___wmul@multiplicand,c
 13238  00352C  50F3               	movf	prodl,w,c
 13239  00352E  261D               	addwf	___wmul@product+1,f,c
 13240  003530  C01C  F018         	movff	___wmul@product,?___wmul
 13241  003534  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 13242  003538  0012               	return	
 13243  00353A                     __end_of___wmul:
 13244                           	opt stack 0
 13245                           tblptru	equ	0xFF8
 13246                           tblptrh	equ	0xFF7
 13247                           tblptrl	equ	0xFF6
 13248                           tablat	equ	0xFF5
 13249                           prodh	equ	0xFF4
 13250                           prodl	equ	0xFF3
 13251                           intcon	equ	0xFF2
 13252                           indf0	equ	0xFEF
 13253                           postinc0	equ	0xFEE
 13254                           fsr0h	equ	0xFEA
 13255                           fsr0l	equ	0xFE9
 13256                           wreg	equ	0xFE8
 13257                           indf1	equ	0xFE7
 13258                           postdec1	equ	0xFE5
 13259                           fsr1h	equ	0xFE2
 13260                           fsr1l	equ	0xFE1
 13261                           indf2	equ	0xFDF
 13262                           postinc2	equ	0xFDE
 13263                           postdec2	equ	0xFDD
 13264                           fsr2h	equ	0xFDA
 13265                           fsr2l	equ	0xFD9
 13266                           status	equ	0xFD8
 13267                           
 13268 ;; *************** function _getch *****************
 13269 ;; Defined at:
 13270 ;;		line 155 in file "mcc_generated_files/eusart1.c"
 13271 ;; Parameters:    Size  Location     Type
 13272 ;;		None
 13273 ;; Auto vars:     Size  Location     Type
 13274 ;;		None
 13275 ;; Return value:  Size  Location     Type
 13276 ;;                  1    wreg      unsigned char 
 13277 ;; Registers used:
 13278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13279 ;; Tracked objects:
 13280 ;;		On entry : 0/0
 13281 ;;		On exit  : 0/0
 13282 ;;		Unchanged: 0/0
 13283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13288 ;;Total ram usage:        0 bytes
 13289 ;; Hardware stack levels used:    1
 13290 ;; Hardware stack levels required when called:    6
 13291 ;; This function calls:
 13292 ;;		_EUSART1_Read
 13293 ;; This function is called by:
 13294 ;;		_cmd_consol_task
 13295 ;; This function uses a non-reentrant model
 13296 ;;
 13297                           
 13298                           	psect	text62
 13299  00379A                     __ptext62:
 13300                           	opt stack 0
 13301  00379A                     _getch:
 13302                           	opt stack 23
 13303                           
 13304                           ;eusart1.c: 157: return EUSART1_Read();
 13305                           
 13306                           ;incstack = 0
 13307  00379A  ECFB  F019         	call	_EUSART1_Read	;wreg free
 13308  00379E  0012               	return	
 13309  0037A0                     __end_of_getch:
 13310                           	opt stack 0
 13311                           tblptru	equ	0xFF8
 13312                           tblptrh	equ	0xFF7
 13313                           tblptrl	equ	0xFF6
 13314                           tablat	equ	0xFF5
 13315                           prodh	equ	0xFF4
 13316                           prodl	equ	0xFF3
 13317                           intcon	equ	0xFF2
 13318                           indf0	equ	0xFEF
 13319                           postinc0	equ	0xFEE
 13320                           fsr0h	equ	0xFEA
 13321                           fsr0l	equ	0xFE9
 13322                           wreg	equ	0xFE8
 13323                           indf1	equ	0xFE7
 13324                           postdec1	equ	0xFE5
 13325                           fsr1h	equ	0xFE2
 13326                           fsr1l	equ	0xFE1
 13327                           indf2	equ	0xFDF
 13328                           postinc2	equ	0xFDE
 13329                           postdec2	equ	0xFDD
 13330                           fsr2h	equ	0xFDA
 13331                           fsr2l	equ	0xFD9
 13332                           status	equ	0xFD8
 13333                           
 13334 ;; *************** function _EUSART1_Read *****************
 13335 ;; Defined at:
 13336 ;;		line 112 in file "mcc_generated_files/eusart1.c"
 13337 ;; Parameters:    Size  Location     Type
 13338 ;;		None
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;  readValue       1   15[COMRAM] unsigned char 
 13341 ;; Return value:  Size  Location     Type
 13342 ;;                  1    wreg      unsigned char 
 13343 ;; Registers used:
 13344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13345 ;; Tracked objects:
 13346 ;;		On entry : 0/0
 13347 ;;		On exit  : 0/0
 13348 ;;		Unchanged: 0/0
 13349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13353 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13354 ;;Total ram usage:        1 bytes
 13355 ;; Hardware stack levels used:    1
 13356 ;; Hardware stack levels required when called:    5
 13357 ;; This function calls:
 13358 ;;		Nothing
 13359 ;; This function is called by:
 13360 ;;		_getch
 13361 ;; This function uses a non-reentrant model
 13362 ;;
 13363                           
 13364                           	psect	text63
 13365  0033F6                     __ptext63:
 13366                           	opt stack 0
 13367  0033F6                     _EUSART1_Read:
 13368                           	opt stack 23
 13369                           
 13370                           ;eusart1.c: 114: uint8_t readValue = 0;
 13371                           
 13372                           ;incstack = 0
 13373  0033F6  0E00               	movlw	0
 13374  0033F8  6E10               	movwf	EUSART1_Read@readValue,c
 13375  0033FA                     l6175:
 13376  0033FA  5044               	movf	_eusart1RxCount,w,c	;volatile
 13377  0033FC  B4D8               	btfsc	status,2,c
 13378  0033FE  D7FD               	goto	l6175
 13379                           
 13380                           ;eusart1.c: 118: }
 13381                           ;eusart1.c: 120: readValue = eusart1RxBuffer[eusart1RxTail++];
 13382  003400  5046               	movf	_eusart1RxTail,w,c	;volatile
 13383  003402  0D01               	mullw	1
 13384  003404  0E60               	movlw	low _eusart1RxBuffer
 13385  003406  24F3               	addwf	prodl,w,c
 13386  003408  6ED9               	movwf	fsr2l,c
 13387  00340A  0E00               	movlw	high _eusart1RxBuffer
 13388  00340C  20F4               	addwfc	prodh,w,c
 13389  00340E  6EDA               	movwf	fsr2h,c
 13390  003410  50DF               	movf	indf2,w,c
 13391  003412  6E10               	movwf	EUSART1_Read@readValue,c
 13392  003414  2A46               	incf	_eusart1RxTail,f,c	;volatile
 13393                           
 13394                           ;eusart1.c: 121: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 13395  003416  0E07               	movlw	7
 13396  003418  6446               	cpfsgt	_eusart1RxTail,c	;volatile
 13397  00341A  D002               	goto	l6185
 13398                           
 13399                           ;eusart1.c: 122: {
 13400                           ;eusart1.c: 123: eusart1RxTail = 0;
 13401  00341C  0E00               	movlw	0
 13402  00341E  6E46               	movwf	_eusart1RxTail,c	;volatile
 13403  003420                     l6185:
 13404                           
 13405                           ;eusart1.c: 124: }
 13406                           ;eusart1.c: 125: PIE1bits.RC1IE = 0;
 13407  003420  9A9D               	bcf	3997,5,c	;volatile
 13408                           
 13409                           ;eusart1.c: 126: eusart1RxCount--;
 13410  003422  0644               	decf	_eusart1RxCount,f,c	;volatile
 13411                           
 13412                           ;eusart1.c: 127: PIE1bits.RC1IE = 1;
 13413  003424  8A9D               	bsf	3997,5,c	;volatile
 13414                           
 13415                           ;eusart1.c: 129: return readValue;
 13416  003426  5010               	movf	EUSART1_Read@readValue,w,c
 13417  003428  0012               	return	
 13418  00342A                     __end_of_EUSART1_Read:
 13419                           	opt stack 0
 13420                           tblptru	equ	0xFF8
 13421                           tblptrh	equ	0xFF7
 13422                           tblptrl	equ	0xFF6
 13423                           tablat	equ	0xFF5
 13424                           prodh	equ	0xFF4
 13425                           prodl	equ	0xFF3
 13426                           intcon	equ	0xFF2
 13427                           indf0	equ	0xFEF
 13428                           postinc0	equ	0xFEE
 13429                           fsr0h	equ	0xFEA
 13430                           fsr0l	equ	0xFE9
 13431                           wreg	equ	0xFE8
 13432                           indf1	equ	0xFE7
 13433                           postdec1	equ	0xFE5
 13434                           fsr1h	equ	0xFE2
 13435                           fsr1l	equ	0xFE1
 13436                           indf2	equ	0xFDF
 13437                           postinc2	equ	0xFDE
 13438                           postdec2	equ	0xFDD
 13439                           fsr2h	equ	0xFDA
 13440                           fsr2l	equ	0xFD9
 13441                           status	equ	0xFD8
 13442                           
 13443 ;; *************** function _TMR5_StopTimer *****************
 13444 ;; Defined at:
 13445 ;;		line 94 in file "mcc_generated_files/tmr5.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;		None
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;		None
 13450 ;; Return value:  Size  Location     Type
 13451 ;;                  1    wreg      void 
 13452 ;; Registers used:
 13453 ;;		None
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13463 ;;Total ram usage:        0 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:    5
 13466 ;; This function calls:
 13467 ;;		Nothing
 13468 ;; This function is called by:
 13469 ;;		_main
 13470 ;;		__delay_10uS
 13471 ;; This function uses a non-reentrant model
 13472 ;;
 13473                           
 13474                           	psect	text64
 13475  0037A0                     __ptext64:
 13476                           	opt stack 0
 13477  0037A0                     _TMR5_StopTimer:
 13478                           	opt stack 25
 13479                           
 13480                           ;tmr5.c: 97: T5CONbits.TMR5ON = 0;
 13481                           
 13482                           ;incstack = 0
 13483  0037A0  010F               	movlb	15	; () banked
 13484  0037A2  914E               	bcf	78,0,b	;volatile
 13485                           
 13486                           ; BSR set to: 15
 13487  0037A4  0012               	return		;funcret
 13488  0037A6                     __end_of_TMR5_StopTimer:
 13489                           	opt stack 0
 13490                           tblptru	equ	0xFF8
 13491                           tblptrh	equ	0xFF7
 13492                           tblptrl	equ	0xFF6
 13493                           tablat	equ	0xFF5
 13494                           prodh	equ	0xFF4
 13495                           prodl	equ	0xFF3
 13496                           intcon	equ	0xFF2
 13497                           indf0	equ	0xFEF
 13498                           postinc0	equ	0xFEE
 13499                           fsr0h	equ	0xFEA
 13500                           fsr0l	equ	0xFE9
 13501                           wreg	equ	0xFE8
 13502                           indf1	equ	0xFE7
 13503                           postdec1	equ	0xFE5
 13504                           fsr1h	equ	0xFE2
 13505                           fsr1l	equ	0xFE1
 13506                           indf2	equ	0xFDF
 13507                           postinc2	equ	0xFDE
 13508                           postdec2	equ	0xFDD
 13509                           fsr2h	equ	0xFDA
 13510                           fsr2l	equ	0xFD9
 13511                           status	equ	0xFD8
 13512                           
 13513 ;; *************** function _TMR0_StopTimer *****************
 13514 ;; Defined at:
 13515 ;;		line 101 in file "mcc_generated_files/tmr0.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;		None
 13518 ;; Auto vars:     Size  Location     Type
 13519 ;;		None
 13520 ;; Return value:  Size  Location     Type
 13521 ;;                  1    wreg      void 
 13522 ;; Registers used:
 13523 ;;		None
 13524 ;; Tracked objects:
 13525 ;;		On entry : 0/0
 13526 ;;		On exit  : 0/0
 13527 ;;		Unchanged: 0/0
 13528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13533 ;;Total ram usage:        0 bytes
 13534 ;; Hardware stack levels used:    1
 13535 ;; Hardware stack levels required when called:    5
 13536 ;; This function calls:
 13537 ;;		Nothing
 13538 ;; This function is called by:
 13539 ;;		_main
 13540 ;; This function uses a non-reentrant model
 13541 ;;
 13542                           
 13543                           	psect	text65
 13544  0037B0                     __ptext65:
 13545                           	opt stack 0
 13546  0037B0                     _TMR0_StopTimer:
 13547                           	opt stack 25
 13548                           
 13549                           ;tmr0.c: 104: T0CONbits.TMR0ON = 0;
 13550                           
 13551                           ; BSR set to: 15
 13552                           ;incstack = 0
 13553  0037B0  9ED5               	bcf	4053,7,c	;volatile
 13554  0037B2  0012               	return		;funcret
 13555  0037B4                     __end_of_TMR0_StopTimer:
 13556                           	opt stack 0
 13557                           tblptru	equ	0xFF8
 13558                           tblptrh	equ	0xFF7
 13559                           tblptrl	equ	0xFF6
 13560                           tablat	equ	0xFF5
 13561                           prodh	equ	0xFF4
 13562                           prodl	equ	0xFF3
 13563                           intcon	equ	0xFF2
 13564                           indf0	equ	0xFEF
 13565                           postinc0	equ	0xFEE
 13566                           fsr0h	equ	0xFEA
 13567                           fsr0l	equ	0xFE9
 13568                           wreg	equ	0xFE8
 13569                           indf1	equ	0xFE7
 13570                           postdec1	equ	0xFE5
 13571                           fsr1h	equ	0xFE2
 13572                           fsr1l	equ	0xFE1
 13573                           indf2	equ	0xFDF
 13574                           postinc2	equ	0xFDE
 13575                           postdec2	equ	0xFDD
 13576                           fsr2h	equ	0xFDA
 13577                           fsr2l	equ	0xFD9
 13578                           status	equ	0xFD8
 13579                           
 13580 ;; *************** function _SYSTEM_Initialize *****************
 13581 ;; Defined at:
 13582 ;;		line 111 in file "mcc_generated_files/mcc.c"
 13583 ;; Parameters:    Size  Location     Type
 13584 ;;		None
 13585 ;; Auto vars:     Size  Location     Type
 13586 ;;		None
 13587 ;; Return value:  Size  Location     Type
 13588 ;;                  1    wreg      void 
 13589 ;; Registers used:
 13590 ;;		wreg, status,2, status,0, cstack
 13591 ;; Tracked objects:
 13592 ;;		On entry : 0/0
 13593 ;;		On exit  : 0/0
 13594 ;;		Unchanged: 0/0
 13595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13600 ;;Total ram usage:        0 bytes
 13601 ;; Hardware stack levels used:    1
 13602 ;; Hardware stack levels required when called:    7
 13603 ;; This function calls:
 13604 ;;		_EUSART1_Initialize
 13605 ;;		_INTERRUPT_Initialize
 13606 ;;		_OSCILLATOR_Initialize
 13607 ;;		_PIN_MANAGER_Initialize
 13608 ;;		_TMR0_Initialize
 13609 ;;		_TMR1_Initialize
 13610 ;;		_TMR5_Initialize
 13611 ;; This function is called by:
 13612 ;;		_main
 13613 ;; This function uses a non-reentrant model
 13614 ;;
 13615                           
 13616                           	psect	text66
 13617  003626                     __ptext66:
 13618                           	opt stack 0
 13619  003626                     _SYSTEM_Initialize:
 13620                           	opt stack 23
 13621                           
 13622                           ;mcc.c: 114: INTERRUPT_Initialize();
 13623                           
 13624                           ;incstack = 0
 13625  003626  ECDE  F01B         	call	_INTERRUPT_Initialize	;wreg free
 13626                           
 13627                           ;mcc.c: 115: PIN_MANAGER_Initialize();
 13628  00362A  ECFA  F018         	call	_PIN_MANAGER_Initialize	;wreg free
 13629                           
 13630                           ;mcc.c: 116: OSCILLATOR_Initialize();
 13631  00362E  EC95  F01B         	call	_OSCILLATOR_Initialize	;wreg free
 13632                           
 13633                           ;mcc.c: 117: TMR5_Initialize();
 13634  003632  EC9D  F01A         	call	_TMR5_Initialize	;wreg free
 13635                           
 13636                           ;mcc.c: 118: TMR1_Initialize();
 13637  003636  ECE5  F01A         	call	_TMR1_Initialize	;wreg free
 13638                           
 13639                           ;mcc.c: 119: TMR0_Initialize();
 13640  00363A  ECC4  F019         	call	_TMR0_Initialize	;wreg free
 13641                           
 13642                           ;mcc.c: 120: EUSART1_Initialize();
 13643  00363E  ECE0  F019         	call	_EUSART1_Initialize	;wreg free
 13644  003642  0012               	return		;funcret
 13645  003644                     __end_of_SYSTEM_Initialize:
 13646                           	opt stack 0
 13647                           tblptru	equ	0xFF8
 13648                           tblptrh	equ	0xFF7
 13649                           tblptrl	equ	0xFF6
 13650                           tablat	equ	0xFF5
 13651                           prodh	equ	0xFF4
 13652                           prodl	equ	0xFF3
 13653                           intcon	equ	0xFF2
 13654                           indf0	equ	0xFEF
 13655                           postinc0	equ	0xFEE
 13656                           fsr0h	equ	0xFEA
 13657                           fsr0l	equ	0xFE9
 13658                           wreg	equ	0xFE8
 13659                           indf1	equ	0xFE7
 13660                           postdec1	equ	0xFE5
 13661                           fsr1h	equ	0xFE2
 13662                           fsr1l	equ	0xFE1
 13663                           indf2	equ	0xFDF
 13664                           postinc2	equ	0xFDE
 13665                           postdec2	equ	0xFDD
 13666                           fsr2h	equ	0xFDA
 13667                           fsr2l	equ	0xFD9
 13668                           status	equ	0xFD8
 13669                           
 13670 ;; *************** function _TMR5_Initialize *****************
 13671 ;; Defined at:
 13672 ;;		line 62 in file "mcc_generated_files/tmr5.c"
 13673 ;; Parameters:    Size  Location     Type
 13674 ;;		None
 13675 ;; Auto vars:     Size  Location     Type
 13676 ;;		None
 13677 ;; Return value:  Size  Location     Type
 13678 ;;                  1    wreg      void 
 13679 ;; Registers used:
 13680 ;;		wreg, status,2, cstack
 13681 ;; Tracked objects:
 13682 ;;		On entry : 0/0
 13683 ;;		On exit  : 0/0
 13684 ;;		Unchanged: 0/0
 13685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13690 ;;Total ram usage:        0 bytes
 13691 ;; Hardware stack levels used:    1
 13692 ;; Hardware stack levels required when called:    6
 13693 ;; This function calls:
 13694 ;;		_TMR5_StartTimer
 13695 ;; This function is called by:
 13696 ;;		_SYSTEM_Initialize
 13697 ;; This function uses a non-reentrant model
 13698 ;;
 13699                           
 13700                           	psect	text67
 13701  00353A                     __ptext67:
 13702                           	opt stack 0
 13703  00353A                     _TMR5_Initialize:
 13704                           	opt stack 23
 13705                           
 13706                           ;tmr5.c: 67: T5CON = 0x12;
 13707                           
 13708                           ;incstack = 0
 13709  00353A  0E12               	movlw	18
 13710  00353C  010F               	movlb	15	; () banked
 13711  00353E  6F4E               	movwf	78,b	;volatile
 13712                           
 13713                           ;tmr5.c: 70: T5GCON = 0x00;
 13714  003540  0E00               	movlw	0
 13715  003542  010F               	movlb	15	; () banked
 13716  003544  6F4D               	movwf	77,b	;volatile
 13717                           
 13718                           ; BSR set to: 15
 13719                           ;tmr5.c: 73: TMR5H = 0xFF;
 13720  003546  010F               	movlb	15	; () banked
 13721  003548  6950               	setf	80,b	;volatile
 13722                           
 13723                           ;tmr5.c: 76: TMR5L = 0xEC;
 13724  00354A  0EEC               	movlw	236
 13725  00354C  010F               	movlb	15	; () banked
 13726  00354E  6F4F               	movwf	79,b	;volatile
 13727                           
 13728                           ; BSR set to: 15
 13729                           ;tmr5.c: 79: timer5ReloadVal=TMR5;
 13730  003550  CF4F F0FD          	movff	3919,_timer5ReloadVal	;volatile
 13731  003554  CF50 F0FE          	movff	3920,_timer5ReloadVal+1	;volatile
 13732                           
 13733                           ; BSR set to: 15
 13734                           ;tmr5.c: 82: PIR5bits.TMR5IF = 0;
 13735  003558  927E               	bcf	3966,1,c	;volatile
 13736                           
 13737                           ; BSR set to: 15
 13738                           ;tmr5.c: 85: TMR5_StartTimer();
 13739  00355A  ECD3  F01B         	call	_TMR5_StartTimer	;wreg free
 13740  00355E  0012               	return		;funcret
 13741  003560                     __end_of_TMR5_Initialize:
 13742                           	opt stack 0
 13743                           tblptru	equ	0xFF8
 13744                           tblptrh	equ	0xFF7
 13745                           tblptrl	equ	0xFF6
 13746                           tablat	equ	0xFF5
 13747                           prodh	equ	0xFF4
 13748                           prodl	equ	0xFF3
 13749                           intcon	equ	0xFF2
 13750                           indf0	equ	0xFEF
 13751                           postinc0	equ	0xFEE
 13752                           fsr0h	equ	0xFEA
 13753                           fsr0l	equ	0xFE9
 13754                           wreg	equ	0xFE8
 13755                           indf1	equ	0xFE7
 13756                           postdec1	equ	0xFE5
 13757                           fsr1h	equ	0xFE2
 13758                           fsr1l	equ	0xFE1
 13759                           indf2	equ	0xFDF
 13760                           postinc2	equ	0xFDE
 13761                           postdec2	equ	0xFDD
 13762                           fsr2h	equ	0xFDA
 13763                           fsr2l	equ	0xFD9
 13764                           status	equ	0xFD8
 13765                           
 13766 ;; *************** function _TMR5_StartTimer *****************
 13767 ;; Defined at:
 13768 ;;		line 88 in file "mcc_generated_files/tmr5.c"
 13769 ;; Parameters:    Size  Location     Type
 13770 ;;		None
 13771 ;; Auto vars:     Size  Location     Type
 13772 ;;		None
 13773 ;; Return value:  Size  Location     Type
 13774 ;;                  1    wreg      void 
 13775 ;; Registers used:
 13776 ;;		None
 13777 ;; Tracked objects:
 13778 ;;		On entry : 0/0
 13779 ;;		On exit  : 0/0
 13780 ;;		Unchanged: 0/0
 13781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13786 ;;Total ram usage:        0 bytes
 13787 ;; Hardware stack levels used:    1
 13788 ;; Hardware stack levels required when called:    5
 13789 ;; This function calls:
 13790 ;;		Nothing
 13791 ;; This function is called by:
 13792 ;;		_TMR5_Initialize
 13793 ;;		__delay_10uS
 13794 ;; This function uses a non-reentrant model
 13795 ;;
 13796                           
 13797                           	psect	text68
 13798  0037A6                     __ptext68:
 13799                           	opt stack 0
 13800  0037A6                     _TMR5_StartTimer:
 13801                           	opt stack 23
 13802                           
 13803                           ;tmr5.c: 91: T5CONbits.TMR5ON = 1;
 13804                           
 13805                           ;incstack = 0
 13806  0037A6  010F               	movlb	15	; () banked
 13807  0037A8  814E               	bsf	78,0,b	;volatile
 13808                           
 13809                           ; BSR set to: 15
 13810  0037AA  0012               	return		;funcret
 13811  0037AC                     __end_of_TMR5_StartTimer:
 13812                           	opt stack 0
 13813                           tblptru	equ	0xFF8
 13814                           tblptrh	equ	0xFF7
 13815                           tblptrl	equ	0xFF6
 13816                           tablat	equ	0xFF5
 13817                           prodh	equ	0xFF4
 13818                           prodl	equ	0xFF3
 13819                           intcon	equ	0xFF2
 13820                           indf0	equ	0xFEF
 13821                           postinc0	equ	0xFEE
 13822                           fsr0h	equ	0xFEA
 13823                           fsr0l	equ	0xFE9
 13824                           wreg	equ	0xFE8
 13825                           indf1	equ	0xFE7
 13826                           postdec1	equ	0xFE5
 13827                           fsr1h	equ	0xFE2
 13828                           fsr1l	equ	0xFE1
 13829                           indf2	equ	0xFDF
 13830                           postinc2	equ	0xFDE
 13831                           postdec2	equ	0xFDD
 13832                           fsr2h	equ	0xFDA
 13833                           fsr2l	equ	0xFD9
 13834                           status	equ	0xFD8
 13835                           
 13836 ;; *************** function _TMR1_Initialize *****************
 13837 ;; Defined at:
 13838 ;;		line 62 in file "mcc_generated_files/tmr1.c"
 13839 ;; Parameters:    Size  Location     Type
 13840 ;;		None
 13841 ;; Auto vars:     Size  Location     Type
 13842 ;;		None
 13843 ;; Return value:  Size  Location     Type
 13844 ;;                  1    wreg      void 
 13845 ;; Registers used:
 13846 ;;		wreg, status,2, cstack
 13847 ;; Tracked objects:
 13848 ;;		On entry : 0/0
 13849 ;;		On exit  : 0/0
 13850 ;;		Unchanged: 0/0
 13851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13856 ;;Total ram usage:        0 bytes
 13857 ;; Hardware stack levels used:    1
 13858 ;; Hardware stack levels required when called:    6
 13859 ;; This function calls:
 13860 ;;		_TMR1_StartTimer
 13861 ;; This function is called by:
 13862 ;;		_SYSTEM_Initialize
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           	psect	text69
 13867  0035CA                     __ptext69:
 13868                           	opt stack 0
 13869  0035CA                     _TMR1_Initialize:
 13870                           	opt stack 23
 13871                           
 13872                           ;tmr1.c: 67: T1CON = 0x32;
 13873                           
 13874                           ; BSR set to: 15
 13875                           ;incstack = 0
 13876  0035CA  0E32               	movlw	50
 13877  0035CC  6ECD               	movwf	4045,c	;volatile
 13878                           
 13879                           ;tmr1.c: 70: T1GCON = 0x00;
 13880  0035CE  0E00               	movlw	0
 13881  0035D0  6ECC               	movwf	4044,c	;volatile
 13882                           
 13883                           ;tmr1.c: 73: TMR1H = 0xFE;
 13884  0035D2  0EFE               	movlw	254
 13885  0035D4  6ECF               	movwf	4047,c	;volatile
 13886                           
 13887                           ;tmr1.c: 76: TMR1L = 0x0C;
 13888  0035D6  0E0C               	movlw	12
 13889  0035D8  6ECE               	movwf	4046,c	;volatile
 13890                           
 13891                           ;tmr1.c: 79: timer1ReloadVal=TMR1;
 13892  0035DA  CFCE F0FB          	movff	4046,_timer1ReloadVal	;volatile
 13893  0035DE  CFCF F0FC          	movff	4047,_timer1ReloadVal+1	;volatile
 13894                           
 13895                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
 13896  0035E2  909E               	bcf	3998,0,c	;volatile
 13897                           
 13898                           ;tmr1.c: 85: TMR1_StartTimer();
 13899  0035E4  ECDA  F01B         	call	_TMR1_StartTimer	;wreg free
 13900  0035E8  0012               	return		;funcret
 13901  0035EA                     __end_of_TMR1_Initialize:
 13902                           	opt stack 0
 13903                           tblptru	equ	0xFF8
 13904                           tblptrh	equ	0xFF7
 13905                           tblptrl	equ	0xFF6
 13906                           tablat	equ	0xFF5
 13907                           prodh	equ	0xFF4
 13908                           prodl	equ	0xFF3
 13909                           intcon	equ	0xFF2
 13910                           indf0	equ	0xFEF
 13911                           postinc0	equ	0xFEE
 13912                           fsr0h	equ	0xFEA
 13913                           fsr0l	equ	0xFE9
 13914                           wreg	equ	0xFE8
 13915                           indf1	equ	0xFE7
 13916                           postdec1	equ	0xFE5
 13917                           fsr1h	equ	0xFE2
 13918                           fsr1l	equ	0xFE1
 13919                           indf2	equ	0xFDF
 13920                           postinc2	equ	0xFDE
 13921                           postdec2	equ	0xFDD
 13922                           fsr2h	equ	0xFDA
 13923                           fsr2l	equ	0xFD9
 13924                           status	equ	0xFD8
 13925                           
 13926 ;; *************** function _TMR1_StartTimer *****************
 13927 ;; Defined at:
 13928 ;;		line 88 in file "mcc_generated_files/tmr1.c"
 13929 ;; Parameters:    Size  Location     Type
 13930 ;;		None
 13931 ;; Auto vars:     Size  Location     Type
 13932 ;;		None
 13933 ;; Return value:  Size  Location     Type
 13934 ;;                  1    wreg      void 
 13935 ;; Registers used:
 13936 ;;		None
 13937 ;; Tracked objects:
 13938 ;;		On entry : 0/0
 13939 ;;		On exit  : 0/0
 13940 ;;		Unchanged: 0/0
 13941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13946 ;;Total ram usage:        0 bytes
 13947 ;; Hardware stack levels used:    1
 13948 ;; Hardware stack levels required when called:    5
 13949 ;; This function calls:
 13950 ;;		Nothing
 13951 ;; This function is called by:
 13952 ;;		_TMR1_Initialize
 13953 ;;		__delay_MS
 13954 ;; This function uses a non-reentrant model
 13955 ;;
 13956                           
 13957                           	psect	text70
 13958  0037B4                     __ptext70:
 13959                           	opt stack 0
 13960  0037B4                     _TMR1_StartTimer:
 13961                           	opt stack 20
 13962                           
 13963                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
 13964                           
 13965                           ;incstack = 0
 13966  0037B4  80CD               	bsf	4045,0,c	;volatile
 13967  0037B6  0012               	return		;funcret
 13968  0037B8                     __end_of_TMR1_StartTimer:
 13969                           	opt stack 0
 13970                           tblptru	equ	0xFF8
 13971                           tblptrh	equ	0xFF7
 13972                           tblptrl	equ	0xFF6
 13973                           tablat	equ	0xFF5
 13974                           prodh	equ	0xFF4
 13975                           prodl	equ	0xFF3
 13976                           intcon	equ	0xFF2
 13977                           indf0	equ	0xFEF
 13978                           postinc0	equ	0xFEE
 13979                           fsr0h	equ	0xFEA
 13980                           fsr0l	equ	0xFE9
 13981                           wreg	equ	0xFE8
 13982                           indf1	equ	0xFE7
 13983                           postdec1	equ	0xFE5
 13984                           fsr1h	equ	0xFE2
 13985                           fsr1l	equ	0xFE1
 13986                           indf2	equ	0xFDF
 13987                           postinc2	equ	0xFDE
 13988                           postdec2	equ	0xFDD
 13989                           fsr2h	equ	0xFDA
 13990                           fsr2l	equ	0xFD9
 13991                           status	equ	0xFD8
 13992                           
 13993 ;; *************** function _TMR0_Initialize *****************
 13994 ;; Defined at:
 13995 ;;		line 66 in file "mcc_generated_files/tmr0.c"
 13996 ;; Parameters:    Size  Location     Type
 13997 ;;		None
 13998 ;; Auto vars:     Size  Location     Type
 13999 ;;		None
 14000 ;; Return value:  Size  Location     Type
 14001 ;;                  1    wreg      void 
 14002 ;; Registers used:
 14003 ;;		wreg, status,2, status,0, cstack
 14004 ;; Tracked objects:
 14005 ;;		On entry : 0/0
 14006 ;;		On exit  : 0/0
 14007 ;;		Unchanged: 0/0
 14008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14011 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14012 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14013 ;;Total ram usage:        2 bytes
 14014 ;; Hardware stack levels used:    1
 14015 ;; Hardware stack levels required when called:    6
 14016 ;; This function calls:
 14017 ;;		_TMR0_SetInterruptHandler
 14018 ;;		_TMR0_StartTimer
 14019 ;; This function is called by:
 14020 ;;		_SYSTEM_Initialize
 14021 ;; This function uses a non-reentrant model
 14022 ;;
 14023                           
 14024                           	psect	text71
 14025  003388                     __ptext71:
 14026                           	opt stack 0
 14027  003388                     _TMR0_Initialize:
 14028                           	opt stack 23
 14029                           
 14030                           ;tmr0.c: 71: T0CON = 0x17;
 14031                           
 14032                           ;incstack = 0
 14033  003388  0E17               	movlw	23
 14034  00338A  6ED5               	movwf	4053,c	;volatile
 14035                           
 14036                           ;tmr0.c: 74: TMR0H = 0xC2;
 14037  00338C  0EC2               	movlw	194
 14038  00338E  6ED7               	movwf	4055,c	;volatile
 14039                           
 14040                           ;tmr0.c: 77: TMR0L = 0xF6;
 14041  003390  0EF6               	movlw	246
 14042  003392  6ED6               	movwf	4054,c	;volatile
 14043                           
 14044                           ;tmr0.c: 80: timer0ReloadVal = (TMR0H << 8) | TMR0L;
 14045  003394  50D6               	movf	4054,w,c	;volatile
 14046  003396  CFD7 F012          	movff	4055,??_TMR0_Initialize	;volatile
 14047  00339A  6A13               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 14048  00339C  C012  F013         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 14049  0033A0  6A12               	clrf	??_TMR0_Initialize,c
 14050  0033A2  1012               	iorwf	??_TMR0_Initialize,w,c
 14051  0033A4  6E4E               	movwf	_timer0ReloadVal,c	;volatile
 14052  0033A6  5013               	movf	??_TMR0_Initialize+1,w,c
 14053  0033A8  6E4F               	movwf	_timer0ReloadVal+1,c	;volatile
 14054                           
 14055                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
 14056  0033AA  94F2               	bcf	intcon,2,c	;volatile
 14057                           
 14058                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
 14059  0033AC  8AF2               	bsf	intcon,5,c	;volatile
 14060                           
 14061                           ;tmr0.c: 89: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 14062  0033AE  0EC0               	movlw	low _TMR0_DefaultInterruptHandler
 14063  0033B0  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
 14064  0033B2  0E37               	movlw	high _TMR0_DefaultInterruptHandler
 14065  0033B4  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
 14066  0033B6  ECC4  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
 14067                           
 14068                           ;tmr0.c: 92: TMR0_StartTimer();
 14069  0033BA  ECDC  F01B         	call	_TMR0_StartTimer	;wreg free
 14070  0033BE  0012               	return		;funcret
 14071  0033C0                     __end_of_TMR0_Initialize:
 14072                           	opt stack 0
 14073                           tblptru	equ	0xFF8
 14074                           tblptrh	equ	0xFF7
 14075                           tblptrl	equ	0xFF6
 14076                           tablat	equ	0xFF5
 14077                           prodh	equ	0xFF4
 14078                           prodl	equ	0xFF3
 14079                           intcon	equ	0xFF2
 14080                           indf0	equ	0xFEF
 14081                           postinc0	equ	0xFEE
 14082                           fsr0h	equ	0xFEA
 14083                           fsr0l	equ	0xFE9
 14084                           wreg	equ	0xFE8
 14085                           indf1	equ	0xFE7
 14086                           postdec1	equ	0xFE5
 14087                           fsr1h	equ	0xFE2
 14088                           fsr1l	equ	0xFE1
 14089                           indf2	equ	0xFDF
 14090                           postinc2	equ	0xFDE
 14091                           postdec2	equ	0xFDD
 14092                           fsr2h	equ	0xFDA
 14093                           fsr2l	equ	0xFD9
 14094                           status	equ	0xFD8
 14095                           
 14096 ;; *************** function _TMR0_StartTimer *****************
 14097 ;; Defined at:
 14098 ;;		line 95 in file "mcc_generated_files/tmr0.c"
 14099 ;; Parameters:    Size  Location     Type
 14100 ;;		None
 14101 ;; Auto vars:     Size  Location     Type
 14102 ;;		None
 14103 ;; Return value:  Size  Location     Type
 14104 ;;                  1    wreg      void 
 14105 ;; Registers used:
 14106 ;;		None
 14107 ;; Tracked objects:
 14108 ;;		On entry : 0/0
 14109 ;;		On exit  : 0/0
 14110 ;;		Unchanged: 0/0
 14111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14116 ;;Total ram usage:        0 bytes
 14117 ;; Hardware stack levels used:    1
 14118 ;; Hardware stack levels required when called:    5
 14119 ;; This function calls:
 14120 ;;		Nothing
 14121 ;; This function is called by:
 14122 ;;		_TMR0_Initialize
 14123 ;;		_main
 14124 ;; This function uses a non-reentrant model
 14125 ;;
 14126                           
 14127                           	psect	text72
 14128  0037B8                     __ptext72:
 14129                           	opt stack 0
 14130  0037B8                     _TMR0_StartTimer:
 14131                           	opt stack 25
 14132                           
 14133                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
 14134                           
 14135                           ;incstack = 0
 14136  0037B8  8ED5               	bsf	4053,7,c	;volatile
 14137  0037BA  0012               	return		;funcret
 14138  0037BC                     __end_of_TMR0_StartTimer:
 14139                           	opt stack 0
 14140                           tblptru	equ	0xFF8
 14141                           tblptrh	equ	0xFF7
 14142                           tblptrl	equ	0xFF6
 14143                           tablat	equ	0xFF5
 14144                           prodh	equ	0xFF4
 14145                           prodl	equ	0xFF3
 14146                           intcon	equ	0xFF2
 14147                           indf0	equ	0xFEF
 14148                           postinc0	equ	0xFEE
 14149                           fsr0h	equ	0xFEA
 14150                           fsr0l	equ	0xFE9
 14151                           wreg	equ	0xFE8
 14152                           indf1	equ	0xFE7
 14153                           postdec1	equ	0xFE5
 14154                           fsr1h	equ	0xFE2
 14155                           fsr1l	equ	0xFE1
 14156                           indf2	equ	0xFDF
 14157                           postinc2	equ	0xFDE
 14158                           postdec2	equ	0xFDD
 14159                           fsr2h	equ	0xFDA
 14160                           fsr2l	equ	0xFD9
 14161                           status	equ	0xFD8
 14162                           
 14163 ;; *************** function _TMR0_SetInterruptHandler *****************
 14164 ;; Defined at:
 14165 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 14166 ;; Parameters:    Size  Location     Type
 14167 ;;  InterruptHan    2   15[COMRAM] PTR void 
 14168 ;;		 -> make_array(1), TMR0_DefaultInterruptHandler(1), 
 14169 ;; Auto vars:     Size  Location     Type
 14170 ;;		None
 14171 ;; Return value:  Size  Location     Type
 14172 ;;                  1    wreg      void 
 14173 ;; Registers used:
 14174 ;;		wreg, status,2, status,0
 14175 ;; Tracked objects:
 14176 ;;		On entry : 0/0
 14177 ;;		On exit  : 0/0
 14178 ;;		Unchanged: 0/0
 14179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14180 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14183 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14184 ;;Total ram usage:        2 bytes
 14185 ;; Hardware stack levels used:    1
 14186 ;; Hardware stack levels required when called:    5
 14187 ;; This function calls:
 14188 ;;		Nothing
 14189 ;; This function is called by:
 14190 ;;		_TMR0_Initialize
 14191 ;;		_main
 14192 ;; This function uses a non-reentrant model
 14193 ;;
 14194                           
 14195                           	psect	text73
 14196  003788                     __ptext73:
 14197                           	opt stack 0
 14198  003788                     _TMR0_SetInterruptHandler:
 14199                           	opt stack 25
 14200                           
 14201                           ;tmr0.c: 163: TMR0_InterruptHandler = InterruptHandler;
 14202                           
 14203                           ;incstack = 0
 14204  003788  C010  F0F9         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
 14205  00378C  C011  F0FA         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
 14206  003790  0012               	return		;funcret
 14207  003792                     __end_of_TMR0_SetInterruptHandler:
 14208                           	opt stack 0
 14209                           tblptru	equ	0xFF8
 14210                           tblptrh	equ	0xFF7
 14211                           tblptrl	equ	0xFF6
 14212                           tablat	equ	0xFF5
 14213                           prodh	equ	0xFF4
 14214                           prodl	equ	0xFF3
 14215                           intcon	equ	0xFF2
 14216                           indf0	equ	0xFEF
 14217                           postinc0	equ	0xFEE
 14218                           fsr0h	equ	0xFEA
 14219                           fsr0l	equ	0xFE9
 14220                           wreg	equ	0xFE8
 14221                           indf1	equ	0xFE7
 14222                           postdec1	equ	0xFE5
 14223                           fsr1h	equ	0xFE2
 14224                           fsr1l	equ	0xFE1
 14225                           indf2	equ	0xFDF
 14226                           postinc2	equ	0xFDE
 14227                           postdec2	equ	0xFDD
 14228                           fsr2h	equ	0xFDA
 14229                           fsr2l	equ	0xFD9
 14230                           status	equ	0xFD8
 14231                           
 14232 ;; *************** function _PIN_MANAGER_Initialize *****************
 14233 ;; Defined at:
 14234 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14235 ;; Parameters:    Size  Location     Type
 14236 ;;		None
 14237 ;; Auto vars:     Size  Location     Type
 14238 ;;		None
 14239 ;; Return value:  Size  Location     Type
 14240 ;;                  1    wreg      void 
 14241 ;; Registers used:
 14242 ;;		wreg, status,2
 14243 ;; Tracked objects:
 14244 ;;		On entry : 0/0
 14245 ;;		On exit  : 0/0
 14246 ;;		Unchanged: 0/0
 14247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14252 ;;Total ram usage:        0 bytes
 14253 ;; Hardware stack levels used:    1
 14254 ;; Hardware stack levels required when called:    5
 14255 ;; This function calls:
 14256 ;;		Nothing
 14257 ;; This function is called by:
 14258 ;;		_SYSTEM_Initialize
 14259 ;; This function uses a non-reentrant model
 14260 ;;
 14261                           
 14262                           	psect	text74
 14263  0031F4                     __ptext74:
 14264                           	opt stack 0
 14265  0031F4                     _PIN_MANAGER_Initialize:
 14266                           	opt stack 24
 14267                           
 14268                           ;pin_manager.c: 56: LATE = 0x00;
 14269                           
 14270                           ;incstack = 0
 14271  0031F4  0E00               	movlw	0
 14272  0031F6  6E8D               	movwf	3981,c	;volatile
 14273                           
 14274                           ;pin_manager.c: 57: LATD = 0x00;
 14275  0031F8  0E00               	movlw	0
 14276  0031FA  6E8C               	movwf	3980,c	;volatile
 14277                           
 14278                           ;pin_manager.c: 58: LATA = 0x00;
 14279  0031FC  0E00               	movlw	0
 14280  0031FE  6E89               	movwf	3977,c	;volatile
 14281                           
 14282                           ;pin_manager.c: 59: LATB = 0x00;
 14283  003200  0E00               	movlw	0
 14284  003202  6E8A               	movwf	3978,c	;volatile
 14285                           
 14286                           ;pin_manager.c: 60: LATC = 0x00;
 14287  003204  0E00               	movlw	0
 14288  003206  6E8B               	movwf	3979,c	;volatile
 14289                           
 14290                           ;pin_manager.c: 65: TRISE = 0x03;
 14291  003208  0E03               	movlw	3
 14292  00320A  6E96               	movwf	3990,c	;volatile
 14293                           
 14294                           ;pin_manager.c: 66: TRISA = 0xF8;
 14295  00320C  0EF8               	movlw	248
 14296  00320E  6E92               	movwf	3986,c	;volatile
 14297                           
 14298                           ;pin_manager.c: 67: TRISB = 0xFF;
 14299  003210  6893               	setf	3987,c	;volatile
 14300                           
 14301                           ;pin_manager.c: 68: TRISC = 0xBF;
 14302  003212  0EBF               	movlw	191
 14303  003214  6E94               	movwf	3988,c	;volatile
 14304                           
 14305                           ;pin_manager.c: 69: TRISD = 0x00;
 14306  003216  0E00               	movlw	0
 14307  003218  6E95               	movwf	3989,c	;volatile
 14308                           
 14309                           ;pin_manager.c: 74: ANSELC = 0x3C;
 14310  00321A  0E3C               	movlw	60
 14311  00321C  010F               	movlb	15	; () banked
 14312  00321E  6F3A               	movwf	58,b	;volatile
 14313                           
 14314                           ;pin_manager.c: 75: ANSELB = 0x3F;
 14315  003220  0E3F               	movlw	63
 14316  003222  010F               	movlb	15	; () banked
 14317  003224  6F39               	movwf	57,b	;volatile
 14318                           
 14319                           ;pin_manager.c: 76: ANSELD = 0x00;
 14320  003226  0E00               	movlw	0
 14321  003228  010F               	movlb	15	; () banked
 14322  00322A  6F3B               	movwf	59,b	;volatile
 14323                           
 14324                           ;pin_manager.c: 77: ANSELE = 0x03;
 14325  00322C  0E03               	movlw	3
 14326  00322E  010F               	movlb	15	; () banked
 14327  003230  6F3C               	movwf	60,b	;volatile
 14328                           
 14329                           ;pin_manager.c: 78: ANSELA = 0x28;
 14330  003232  0E28               	movlw	40
 14331  003234  010F               	movlb	15	; () banked
 14332  003236  6F38               	movwf	56,b	;volatile
 14333                           
 14334                           ; BSR set to: 15
 14335                           ;pin_manager.c: 83: WPUB = 0xFF;
 14336  003238  6861               	setf	3937,c	;volatile
 14337                           
 14338                           ; BSR set to: 15
 14339                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
 14340  00323A  9EF1               	bcf	intcon2,7,c	;volatile
 14341                           
 14342                           ; BSR set to: 15
 14343  00323C  0012               	return		;funcret
 14344  00323E                     __end_of_PIN_MANAGER_Initialize:
 14345                           	opt stack 0
 14346                           tblptru	equ	0xFF8
 14347                           tblptrh	equ	0xFF7
 14348                           tblptrl	equ	0xFF6
 14349                           tablat	equ	0xFF5
 14350                           prodh	equ	0xFF4
 14351                           prodl	equ	0xFF3
 14352                           intcon	equ	0xFF2
 14353                           intcon2	equ	0xFF1
 14354                           indf0	equ	0xFEF
 14355                           postinc0	equ	0xFEE
 14356                           fsr0h	equ	0xFEA
 14357                           fsr0l	equ	0xFE9
 14358                           wreg	equ	0xFE8
 14359                           indf1	equ	0xFE7
 14360                           postdec1	equ	0xFE5
 14361                           fsr1h	equ	0xFE2
 14362                           fsr1l	equ	0xFE1
 14363                           indf2	equ	0xFDF
 14364                           postinc2	equ	0xFDE
 14365                           postdec2	equ	0xFDD
 14366                           fsr2h	equ	0xFDA
 14367                           fsr2l	equ	0xFD9
 14368                           status	equ	0xFD8
 14369                           
 14370 ;; *************** function _OSCILLATOR_Initialize *****************
 14371 ;; Defined at:
 14372 ;;		line 123 in file "mcc_generated_files/mcc.c"
 14373 ;; Parameters:    Size  Location     Type
 14374 ;;		None
 14375 ;; Auto vars:     Size  Location     Type
 14376 ;;		None
 14377 ;; Return value:  Size  Location     Type
 14378 ;;                  1    wreg      void 
 14379 ;; Registers used:
 14380 ;;		wreg, status,2
 14381 ;; Tracked objects:
 14382 ;;		On entry : 0/0
 14383 ;;		On exit  : 0/0
 14384 ;;		Unchanged: 0/0
 14385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14390 ;;Total ram usage:        0 bytes
 14391 ;; Hardware stack levels used:    1
 14392 ;; Hardware stack levels required when called:    5
 14393 ;; This function calls:
 14394 ;;		Nothing
 14395 ;; This function is called by:
 14396 ;;		_SYSTEM_Initialize
 14397 ;; This function uses a non-reentrant model
 14398 ;;
 14399                           
 14400                           	psect	text75
 14401  00372A                     __ptext75:
 14402                           	opt stack 0
 14403  00372A                     _OSCILLATOR_Initialize:
 14404                           	opt stack 24
 14405                           
 14406                           ;mcc.c: 126: OSCCON = 0x70;
 14407                           
 14408                           ; BSR set to: 15
 14409                           ;incstack = 0
 14410  00372A  0E70               	movlw	112
 14411  00372C  6ED3               	movwf	4051,c	;volatile
 14412                           
 14413                           ;mcc.c: 128: OSCCON2 = 0x04;
 14414  00372E  0E04               	movlw	4
 14415  003730  6ED2               	movwf	4050,c	;volatile
 14416                           
 14417                           ;mcc.c: 130: OSCTUNE = 0x80;
 14418  003732  0E80               	movlw	128
 14419  003734  6E9B               	movwf	3995,c	;volatile
 14420  003736  0012               	return		;funcret
 14421  003738                     __end_of_OSCILLATOR_Initialize:
 14422                           	opt stack 0
 14423                           tblptru	equ	0xFF8
 14424                           tblptrh	equ	0xFF7
 14425                           tblptrl	equ	0xFF6
 14426                           tablat	equ	0xFF5
 14427                           prodh	equ	0xFF4
 14428                           prodl	equ	0xFF3
 14429                           intcon	equ	0xFF2
 14430                           intcon2	equ	0xFF1
 14431                           indf0	equ	0xFEF
 14432                           postinc0	equ	0xFEE
 14433                           fsr0h	equ	0xFEA
 14434                           fsr0l	equ	0xFE9
 14435                           wreg	equ	0xFE8
 14436                           indf1	equ	0xFE7
 14437                           postdec1	equ	0xFE5
 14438                           fsr1h	equ	0xFE2
 14439                           fsr1l	equ	0xFE1
 14440                           indf2	equ	0xFDF
 14441                           postinc2	equ	0xFDE
 14442                           postdec2	equ	0xFDD
 14443                           fsr2h	equ	0xFDA
 14444                           fsr2l	equ	0xFD9
 14445                           status	equ	0xFD8
 14446                           
 14447 ;; *************** function _INTERRUPT_Initialize *****************
 14448 ;; Defined at:
 14449 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 14450 ;; Parameters:    Size  Location     Type
 14451 ;;		None
 14452 ;; Auto vars:     Size  Location     Type
 14453 ;;		None
 14454 ;; Return value:  Size  Location     Type
 14455 ;;                  1    wreg      void 
 14456 ;; Registers used:
 14457 ;;		None
 14458 ;; Tracked objects:
 14459 ;;		On entry : 0/0
 14460 ;;		On exit  : 0/0
 14461 ;;		Unchanged: 0/0
 14462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14467 ;;Total ram usage:        0 bytes
 14468 ;; Hardware stack levels used:    1
 14469 ;; Hardware stack levels required when called:    5
 14470 ;; This function calls:
 14471 ;;		Nothing
 14472 ;; This function is called by:
 14473 ;;		_SYSTEM_Initialize
 14474 ;; This function uses a non-reentrant model
 14475 ;;
 14476                           
 14477                           	psect	text76
 14478  0037BC                     __ptext76:
 14479                           	opt stack 0
 14480  0037BC                     _INTERRUPT_Initialize:
 14481                           	opt stack 24
 14482                           
 14483                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
 14484                           
 14485                           ;incstack = 0
 14486  0037BC  9ED0               	bcf	4048,7,c	;volatile
 14487  0037BE  0012               	return		;funcret
 14488  0037C0                     __end_of_INTERRUPT_Initialize:
 14489                           	opt stack 0
 14490                           tblptru	equ	0xFF8
 14491                           tblptrh	equ	0xFF7
 14492                           tblptrl	equ	0xFF6
 14493                           tablat	equ	0xFF5
 14494                           prodh	equ	0xFF4
 14495                           prodl	equ	0xFF3
 14496                           intcon	equ	0xFF2
 14497                           intcon2	equ	0xFF1
 14498                           indf0	equ	0xFEF
 14499                           postinc0	equ	0xFEE
 14500                           fsr0h	equ	0xFEA
 14501                           fsr0l	equ	0xFE9
 14502                           wreg	equ	0xFE8
 14503                           indf1	equ	0xFE7
 14504                           postdec1	equ	0xFE5
 14505                           fsr1h	equ	0xFE2
 14506                           fsr1l	equ	0xFE1
 14507                           indf2	equ	0xFDF
 14508                           postinc2	equ	0xFDE
 14509                           postdec2	equ	0xFDD
 14510                           fsr2h	equ	0xFDA
 14511                           fsr2l	equ	0xFD9
 14512                           status	equ	0xFD8
 14513                           
 14514 ;; *************** function _EUSART1_Initialize *****************
 14515 ;; Defined at:
 14516 ;;		line 75 in file "mcc_generated_files/eusart1.c"
 14517 ;; Parameters:    Size  Location     Type
 14518 ;;		None
 14519 ;; Auto vars:     Size  Location     Type
 14520 ;;		None
 14521 ;; Return value:  Size  Location     Type
 14522 ;;                  1    wreg      void 
 14523 ;; Registers used:
 14524 ;;		wreg, status,2
 14525 ;; Tracked objects:
 14526 ;;		On entry : 0/0
 14527 ;;		On exit  : 0/0
 14528 ;;		Unchanged: 0/0
 14529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14534 ;;Total ram usage:        0 bytes
 14535 ;; Hardware stack levels used:    1
 14536 ;; Hardware stack levels required when called:    5
 14537 ;; This function calls:
 14538 ;;		Nothing
 14539 ;; This function is called by:
 14540 ;;		_SYSTEM_Initialize
 14541 ;; This function uses a non-reentrant model
 14542 ;;
 14543                           
 14544                           	psect	text77
 14545  0033C0                     __ptext77:
 14546                           	opt stack 0
 14547  0033C0                     _EUSART1_Initialize:
 14548                           	opt stack 24
 14549                           
 14550                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
 14551                           
 14552                           ;incstack = 0
 14553  0033C0  9A9D               	bcf	3997,5,c	;volatile
 14554                           
 14555                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
 14556  0033C2  989D               	bcf	3997,4,c	;volatile
 14557                           
 14558                           ;eusart1.c: 84: BAUDCON1 = 0x08;
 14559  0033C4  0E08               	movlw	8
 14560  0033C6  6EB8               	movwf	4024,c	;volatile
 14561                           
 14562                           ;eusart1.c: 87: RCSTA1 = 0x90;
 14563  0033C8  0E90               	movlw	144
 14564  0033CA  6EAB               	movwf	4011,c	;volatile
 14565                           
 14566                           ;eusart1.c: 90: TXSTA1 = 0x24;
 14567  0033CC  0E24               	movlw	36
 14568  0033CE  6EAC               	movwf	4012,c	;volatile
 14569                           
 14570                           ;eusart1.c: 93: SPBRG1 = 0xA0;
 14571  0033D0  0EA0               	movlw	160
 14572  0033D2  6EAF               	movwf	4015,c	;volatile
 14573                           
 14574                           ;eusart1.c: 96: SPBRGH1 = 0x01;
 14575  0033D4  0E01               	movlw	1
 14576  0033D6  6EB0               	movwf	4016,c	;volatile
 14577                           
 14578                           ;eusart1.c: 100: eusart1TxHead = 0;
 14579  0033D8  0E00               	movlw	0
 14580  0033DA  6E47               	movwf	_eusart1TxHead,c	;volatile
 14581                           
 14582                           ;eusart1.c: 101: eusart1TxTail = 0;
 14583  0033DC  0E00               	movlw	0
 14584  0033DE  6E48               	movwf	_eusart1TxTail,c	;volatile
 14585                           
 14586                           ;eusart1.c: 102: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 14587  0033E0  0E08               	movlw	8
 14588  0033E2  0100               	movlb	0	; () banked
 14589  0033E4  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
 14590                           
 14591                           ;eusart1.c: 104: eusart1RxHead = 0;
 14592  0033E6  0E00               	movlw	0
 14593  0033E8  6E45               	movwf	_eusart1RxHead,c	;volatile
 14594                           
 14595                           ;eusart1.c: 105: eusart1RxTail = 0;
 14596  0033EA  0E00               	movlw	0
 14597  0033EC  6E46               	movwf	_eusart1RxTail,c	;volatile
 14598                           
 14599                           ;eusart1.c: 106: eusart1RxCount = 0;
 14600  0033EE  0E00               	movlw	0
 14601  0033F0  6E44               	movwf	_eusart1RxCount,c	;volatile
 14602                           
 14603                           ; BSR set to: 0
 14604                           ;eusart1.c: 109: PIE1bits.RC1IE = 1;
 14605  0033F2  8A9D               	bsf	3997,5,c	;volatile
 14606                           
 14607                           ; BSR set to: 0
 14608  0033F4  0012               	return		;funcret
 14609  0033F6                     __end_of_EUSART1_Initialize:
 14610                           	opt stack 0
 14611                           tblptru	equ	0xFF8
 14612                           tblptrh	equ	0xFF7
 14613                           tblptrl	equ	0xFF6
 14614                           tablat	equ	0xFF5
 14615                           prodh	equ	0xFF4
 14616                           prodl	equ	0xFF3
 14617                           intcon	equ	0xFF2
 14618                           intcon2	equ	0xFF1
 14619                           indf0	equ	0xFEF
 14620                           postinc0	equ	0xFEE
 14621                           fsr0h	equ	0xFEA
 14622                           fsr0l	equ	0xFE9
 14623                           wreg	equ	0xFE8
 14624                           indf1	equ	0xFE7
 14625                           postdec1	equ	0xFE5
 14626                           fsr1h	equ	0xFE2
 14627                           fsr1l	equ	0xFE1
 14628                           indf2	equ	0xFDF
 14629                           postinc2	equ	0xFDE
 14630                           postdec2	equ	0xFDD
 14631                           fsr2h	equ	0xFDA
 14632                           fsr2l	equ	0xFD9
 14633                           status	equ	0xFD8
 14634                           
 14635 ;; *************** function _INTERRUPT_InterruptManager *****************
 14636 ;; Defined at:
 14637 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 14638 ;; Parameters:    Size  Location     Type
 14639 ;;		None
 14640 ;; Auto vars:     Size  Location     Type
 14641 ;;		None
 14642 ;; Return value:  Size  Location     Type
 14643 ;;                  1    wreg      void 
 14644 ;; Registers used:
 14645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 14646 ;; Tracked objects:
 14647 ;;		On entry : 0/0
 14648 ;;		On exit  : 0/0
 14649 ;;		Unchanged: 0/0
 14650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14653 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14654 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14655 ;;Total ram usage:       14 bytes
 14656 ;; Hardware stack levels used:    1
 14657 ;; Hardware stack levels required when called:    4
 14658 ;; This function calls:
 14659 ;;		_EUSART1_Receive_ISR
 14660 ;;		_EUSART1_Transmit_ISR
 14661 ;;		_TMR0_ISR
 14662 ;; This function is called by:
 14663 ;;		Interrupt level 2
 14664 ;; This function uses a non-reentrant model
 14665 ;;
 14666                           
 14667                           	psect	intcode
 14668  000008                     __pintcode:
 14669                           	opt stack 0
 14670  000008                     _INTERRUPT_InterruptManager:
 14671                           	opt stack 17
 14672                           
 14673                           ; BSR set to: 0
 14674                           ;incstack = 0
 14675  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14676  00000A  CFFA F002          	movff	pclath,??_INTERRUPT_InterruptManager
 14677  00000E  CFFB F003          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 14678  000012  CFE9 F004          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 14679  000016  CFEA F005          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 14680  00001A  CFE1 F006          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 14681  00001E  CFE2 F007          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 14682  000022  CFD9 F008          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 14683  000026  CFDA F009          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 14684  00002A  CFF3 F00A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 14685  00002E  CFF4 F00B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 14686  000032  CFF6 F00C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 14687  000036  CFF7 F00D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 14688  00003A  CFF8 F00E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 14689  00003E  CFF5 F00F          	movff	tablat,??_INTERRUPT_InterruptManager+13
 14690                           
 14691                           ;interrupt_manager.c: 60: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 14692  000042  BAF2               	btfsc	intcon,5,c	;volatile
 14693  000044  A4F2               	btfss	intcon,2,c	;volatile
 14694  000046  D003               	goto	i2l60
 14695                           
 14696                           ;interrupt_manager.c: 61: {
 14697                           ;interrupt_manager.c: 62: TMR0_ISR();
 14698  000048  EC6A  F01B         	call	_TMR0_ISR	;wreg free
 14699                           
 14700                           ;interrupt_manager.c: 63: }
 14701  00004C  D00E               	goto	i2l66
 14702  00004E                     i2l60:
 14703                           
 14704                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 14705  00004E  BCF2               	btfsc	intcon,6,c	;volatile
 14706  000050  A89D               	btfss	3997,4,c	;volatile
 14707  000052  D005               	goto	i2l62
 14708  000054  A89E               	btfss	3998,4,c	;volatile
 14709  000056  D003               	goto	i2l62
 14710                           
 14711                           ;interrupt_manager.c: 65: {
 14712                           ;interrupt_manager.c: 66: EUSART1_Transmit_ISR();
 14713  000058  EC2E  F01A         	call	_EUSART1_Transmit_ISR	;wreg free
 14714                           
 14715                           ;interrupt_manager.c: 67: }
 14716  00005C  D006               	goto	i2l66
 14717  00005E                     i2l62:
 14718                           
 14719                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 14720  00005E  BCF2               	btfsc	intcon,6,c	;volatile
 14721  000060  AA9D               	btfss	3997,5,c	;volatile
 14722  000062  D003               	goto	i2l66
 14723  000064  BA9E               	btfsc	3998,5,c	;volatile
 14724                           
 14725                           ;interrupt_manager.c: 69: {
 14726                           ;interrupt_manager.c: 70: EUSART1_Receive_ISR();
 14727  000066  EC74  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 14728  00006A                     i2l66:
 14729  00006A  C00F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 14730  00006E  C00E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 14731  000072  C00D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 14732  000076  C00C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 14733  00007A  C00B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 14734  00007E  C00A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 14735  000082  C009  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 14736  000086  C008  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 14737  00008A  C007  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 14738  00008E  C006  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 14739  000092  C005  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 14740  000096  C004  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 14741  00009A  C003  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 14742  00009E  C002  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 14743  0000A2  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14744  0000A4  0011               	retfie		f
 14745  0000A6                     __end_of_INTERRUPT_InterruptManager:
 14746                           	opt stack 0
 14747                           pclatu	equ	0xFFB
 14748                           pclath	equ	0xFFA
 14749                           tblptru	equ	0xFF8
 14750                           tblptrh	equ	0xFF7
 14751                           tblptrl	equ	0xFF6
 14752                           tablat	equ	0xFF5
 14753                           prodh	equ	0xFF4
 14754                           prodl	equ	0xFF3
 14755                           intcon	equ	0xFF2
 14756                           intcon2	equ	0xFF1
 14757                           indf0	equ	0xFEF
 14758                           postinc0	equ	0xFEE
 14759                           fsr0h	equ	0xFEA
 14760                           fsr0l	equ	0xFE9
 14761                           wreg	equ	0xFE8
 14762                           indf1	equ	0xFE7
 14763                           postdec1	equ	0xFE5
 14764                           fsr1h	equ	0xFE2
 14765                           fsr1l	equ	0xFE1
 14766                           indf2	equ	0xFDF
 14767                           postinc2	equ	0xFDE
 14768                           postdec2	equ	0xFDD
 14769                           fsr2h	equ	0xFDA
 14770                           fsr2l	equ	0xFD9
 14771                           status	equ	0xFD8
 14772                           
 14773 ;; *************** function _TMR0_ISR *****************
 14774 ;; Defined at:
 14775 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 14776 ;; Parameters:    Size  Location     Type
 14777 ;;		None
 14778 ;; Auto vars:     Size  Location     Type
 14779 ;;		None
 14780 ;; Return value:  Size  Location     Type
 14781 ;;                  1    wreg      void 
 14782 ;; Registers used:
 14783 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 14784 ;; Tracked objects:
 14785 ;;		On entry : 0/0
 14786 ;;		On exit  : 0/0
 14787 ;;		Unchanged: 0/0
 14788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14793 ;;Total ram usage:        0 bytes
 14794 ;; Hardware stack levels used:    1
 14795 ;; Hardware stack levels required when called:    3
 14796 ;; This function calls:
 14797 ;;		_TMR0_CallBack
 14798 ;; This function is called by:
 14799 ;;		_INTERRUPT_InterruptManager
 14800 ;; This function uses a non-reentrant model
 14801 ;;
 14802                           
 14803                           	psect	text79
 14804  0036D4                     __ptext79:
 14805                           	opt stack 0
 14806  0036D4                     _TMR0_ISR:
 14807                           	opt stack 17
 14808                           
 14809                           ;tmr0.c: 138: INTCONbits.TMR0IF = 0;
 14810                           
 14811                           ;incstack = 0
 14812  0036D4  94F2               	bcf	intcon,2,c	;volatile
 14813                           
 14814                           ;tmr0.c: 142: TMR0H = timer0ReloadVal >> 8;
 14815  0036D6  504F               	movf	_timer0ReloadVal+1,w,c	;volatile
 14816  0036D8  6ED7               	movwf	4055,c	;volatile
 14817                           
 14818                           ;tmr0.c: 143: TMR0L = (uint8_t) timer0ReloadVal;
 14819  0036DA  C04E  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 14820                           
 14821                           ;tmr0.c: 147: TMR0_CallBack();
 14822  0036DE  ECC2  F01A         	call	_TMR0_CallBack	;wreg free
 14823  0036E2  0012               	return		;funcret
 14824  0036E4                     __end_of_TMR0_ISR:
 14825                           	opt stack 0
 14826                           pclatu	equ	0xFFB
 14827                           pclath	equ	0xFFA
 14828                           tblptru	equ	0xFF8
 14829                           tblptrh	equ	0xFF7
 14830                           tblptrl	equ	0xFF6
 14831                           tablat	equ	0xFF5
 14832                           prodh	equ	0xFF4
 14833                           prodl	equ	0xFF3
 14834                           intcon	equ	0xFF2
 14835                           intcon2	equ	0xFF1
 14836                           indf0	equ	0xFEF
 14837                           postinc0	equ	0xFEE
 14838                           fsr0h	equ	0xFEA
 14839                           fsr0l	equ	0xFE9
 14840                           wreg	equ	0xFE8
 14841                           indf1	equ	0xFE7
 14842                           postdec1	equ	0xFE5
 14843                           fsr1h	equ	0xFE2
 14844                           fsr1l	equ	0xFE1
 14845                           indf2	equ	0xFDF
 14846                           postinc2	equ	0xFDE
 14847                           postdec2	equ	0xFDD
 14848                           fsr2h	equ	0xFDA
 14849                           fsr2l	equ	0xFD9
 14850                           status	equ	0xFD8
 14851                           
 14852 ;; *************** function _TMR0_CallBack *****************
 14853 ;; Defined at:
 14854 ;;		line 152 in file "mcc_generated_files/tmr0.c"
 14855 ;; Parameters:    Size  Location     Type
 14856 ;;		None
 14857 ;; Auto vars:     Size  Location     Type
 14858 ;;		None
 14859 ;; Return value:  Size  Location     Type
 14860 ;;                  1    wreg      void 
 14861 ;; Registers used:
 14862 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 14863 ;; Tracked objects:
 14864 ;;		On entry : 0/0
 14865 ;;		On exit  : 0/0
 14866 ;;		Unchanged: 0/0
 14867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14872 ;;Total ram usage:        0 bytes
 14873 ;; Hardware stack levels used:    1
 14874 ;; Hardware stack levels required when called:    2
 14875 ;; This function calls:
 14876 ;;		Absolute function
 14877 ;;		_TMR0_DefaultInterruptHandler
 14878 ;;		_make_array
 14879 ;; This function is called by:
 14880 ;;		_TMR0_ISR
 14881 ;; This function uses a non-reentrant model
 14882 ;;
 14883                           
 14884                           	psect	text80
 14885  003584                     __ptext80:
 14886                           	opt stack 0
 14887  003584                     _TMR0_CallBack:
 14888                           	opt stack 17
 14889                           
 14890                           ;tmr0.c: 156: if(TMR0_InterruptHandler)
 14891                           
 14892                           ;incstack = 0
 14893  003584  0100               	movlb	0	; () banked
 14894  003586  51F9               	movf	_TMR0_InterruptHandler& (0+255),w,b
 14895  003588  0100               	movlb	0	; () banked
 14896  00358A  11FA               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 14897  00358C  B4D8               	btfsc	status,2,c
 14898  00358E  0012               	return	
 14899                           
 14900                           ; BSR set to: 0
 14901                           ;tmr0.c: 157: {
 14902                           ;tmr0.c: 158: TMR0_InterruptHandler();
 14903  003590  D801               	call	i2u407_48
 14904  003592  0012               	return	
 14905  003594                     i2u407_48:
 14906  003594  0005               	push	
 14907  003596  6EFA               	movwf	pclath,c
 14908  003598  0100               	movlb	0	; () banked
 14909  00359A  51F9               	movf	_TMR0_InterruptHandler& (0+255),w,b
 14910  00359C  6EFD               	movwf	tosl,c
 14911  00359E  51FA               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 14912  0035A0  6EFE               	movwf	tosh,c
 14913  0035A2  6AFF               	clrf	tosu,c
 14914  0035A4  50FA               	movf	pclath,w,c
 14915  0035A6  0012               	return		;indir
 14916  0035A8                     __end_of_TMR0_CallBack:
 14917                           	opt stack 0
 14918                           tosu	equ	0xFFF
 14919                           tosh	equ	0xFFE
 14920                           tosl	equ	0xFFD
 14921                           pclatu	equ	0xFFB
 14922                           pclath	equ	0xFFA
 14923                           tblptru	equ	0xFF8
 14924                           tblptrh	equ	0xFF7
 14925                           tblptrl	equ	0xFF6
 14926                           tablat	equ	0xFF5
 14927                           prodh	equ	0xFF4
 14928                           prodl	equ	0xFF3
 14929                           intcon	equ	0xFF2
 14930                           intcon2	equ	0xFF1
 14931                           indf0	equ	0xFEF
 14932                           postinc0	equ	0xFEE
 14933                           fsr0h	equ	0xFEA
 14934                           fsr0l	equ	0xFE9
 14935                           wreg	equ	0xFE8
 14936                           indf1	equ	0xFE7
 14937                           postdec1	equ	0xFE5
 14938                           fsr1h	equ	0xFE2
 14939                           fsr1l	equ	0xFE1
 14940                           indf2	equ	0xFDF
 14941                           postinc2	equ	0xFDE
 14942                           postdec2	equ	0xFDD
 14943                           fsr2h	equ	0xFDA
 14944                           fsr2l	equ	0xFD9
 14945                           status	equ	0xFD8
 14946                           
 14947 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 14948 ;; Defined at:
 14949 ;;		line 166 in file "mcc_generated_files/tmr0.c"
 14950 ;; Parameters:    Size  Location     Type
 14951 ;;		None
 14952 ;; Auto vars:     Size  Location     Type
 14953 ;;		None
 14954 ;; Return value:  Size  Location     Type
 14955 ;;                  1    wreg      void 
 14956 ;; Registers used:
 14957 ;;		None
 14958 ;; Tracked objects:
 14959 ;;		On entry : 0/0
 14960 ;;		On exit  : 0/0
 14961 ;;		Unchanged: 0/0
 14962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14967 ;;Total ram usage:        0 bytes
 14968 ;; Hardware stack levels used:    1
 14969 ;; This function calls:
 14970 ;;		Nothing
 14971 ;; This function is called by:
 14972 ;;		_TMR0_Initialize
 14973 ;;		_TMR0_CallBack
 14974 ;; This function uses a non-reentrant model
 14975 ;;
 14976                           
 14977                           	psect	text81
 14978  0037C0                     __ptext81:
 14979                           	opt stack 0
 14980  0037C0                     _TMR0_DefaultInterruptHandler:
 14981                           	opt stack 18
 14982                           
 14983                           ;incstack = 0
 14984  0037C0  0012               	return		;funcret
 14985  0037C2                     __end_of_TMR0_DefaultInterruptHandler:
 14986                           	opt stack 0
 14987                           tosu	equ	0xFFF
 14988                           tosh	equ	0xFFE
 14989                           tosl	equ	0xFFD
 14990                           pclatu	equ	0xFFB
 14991                           pclath	equ	0xFFA
 14992                           tblptru	equ	0xFF8
 14993                           tblptrh	equ	0xFF7
 14994                           tblptrl	equ	0xFF6
 14995                           tablat	equ	0xFF5
 14996                           prodh	equ	0xFF4
 14997                           prodl	equ	0xFF3
 14998                           intcon	equ	0xFF2
 14999                           intcon2	equ	0xFF1
 15000                           indf0	equ	0xFEF
 15001                           postinc0	equ	0xFEE
 15002                           fsr0h	equ	0xFEA
 15003                           fsr0l	equ	0xFE9
 15004                           wreg	equ	0xFE8
 15005                           indf1	equ	0xFE7
 15006                           postdec1	equ	0xFE5
 15007                           fsr1h	equ	0xFE2
 15008                           fsr1l	equ	0xFE1
 15009                           indf2	equ	0xFDF
 15010                           postinc2	equ	0xFDE
 15011                           postdec2	equ	0xFDD
 15012                           fsr2h	equ	0xFDA
 15013                           fsr2l	equ	0xFD9
 15014                           status	equ	0xFD8
 15015                           
 15016 ;; *************** function _make_array *****************
 15017 ;; Defined at:
 15018 ;;		line 59 in file "main.c"
 15019 ;; Parameters:    Size  Location     Type
 15020 ;;		None
 15021 ;; Auto vars:     Size  Location     Type
 15022 ;;		None
 15023 ;; Return value:  Size  Location     Type
 15024 ;;                  1    wreg      void 
 15025 ;; Registers used:
 15026 ;;		wreg, status,2, status,0, cstack
 15027 ;; Tracked objects:
 15028 ;;		On entry : 0/0
 15029 ;;		On exit  : 0/0
 15030 ;;		Unchanged: 0/0
 15031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15036 ;;Total ram usage:        0 bytes
 15037 ;; Hardware stack levels used:    1
 15038 ;; Hardware stack levels required when called:    1
 15039 ;; This function calls:
 15040 ;;		_heart_beat
 15041 ;; This function is called by:
 15042 ;;		_main
 15043 ;;		_TMR0_CallBack
 15044 ;; This function uses a non-reentrant model
 15045 ;;
 15046                           
 15047                           	psect	text82
 15048  00375E                     __ptext82:
 15049                           	opt stack 0
 15050  00375E                     _make_array:
 15051                           	opt stack 17
 15052                           
 15053                           ;main.c: 61: static char i=0;
 15054                           ;main.c: 62: heart_beat();
 15055                           
 15056                           ;incstack = 0
 15057  00375E  EC22  F01B         	call	_heart_beat	;wreg free
 15058                           
 15059                           ;main.c: 65: display = 1;
 15060  003762  0E01               	movlw	1
 15061  003764  0100               	movlb	0	; () banked
 15062  003766  6F83               	movwf	_display& (0+255),b
 15063                           
 15064                           ; BSR set to: 0
 15065  003768  0012               	return		;funcret
 15066  00376A                     __end_of_make_array:
 15067                           	opt stack 0
 15068                           tosu	equ	0xFFF
 15069                           tosh	equ	0xFFE
 15070                           tosl	equ	0xFFD
 15071                           pclatu	equ	0xFFB
 15072                           pclath	equ	0xFFA
 15073                           tblptru	equ	0xFF8
 15074                           tblptrh	equ	0xFF7
 15075                           tblptrl	equ	0xFF6
 15076                           tablat	equ	0xFF5
 15077                           prodh	equ	0xFF4
 15078                           prodl	equ	0xFF3
 15079                           intcon	equ	0xFF2
 15080                           intcon2	equ	0xFF1
 15081                           indf0	equ	0xFEF
 15082                           postinc0	equ	0xFEE
 15083                           fsr0h	equ	0xFEA
 15084                           fsr0l	equ	0xFE9
 15085                           wreg	equ	0xFE8
 15086                           indf1	equ	0xFE7
 15087                           postdec1	equ	0xFE5
 15088                           fsr1h	equ	0xFE2
 15089                           fsr1l	equ	0xFE1
 15090                           indf2	equ	0xFDF
 15091                           postinc2	equ	0xFDE
 15092                           postdec2	equ	0xFDD
 15093                           fsr2h	equ	0xFDA
 15094                           fsr2l	equ	0xFD9
 15095                           status	equ	0xFD8
 15096                           
 15097 ;; *************** function _heart_beat *****************
 15098 ;; Defined at:
 15099 ;;		line 54 in file "main.c"
 15100 ;; Parameters:    Size  Location     Type
 15101 ;;		None
 15102 ;; Auto vars:     Size  Location     Type
 15103 ;;		None
 15104 ;; Return value:  Size  Location     Type
 15105 ;;                  1    wreg      void 
 15106 ;; Registers used:
 15107 ;;		wreg, status,2, status,0
 15108 ;; Tracked objects:
 15109 ;;		On entry : 0/0
 15110 ;;		On exit  : 0/0
 15111 ;;		Unchanged: 0/0
 15112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15115 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15116 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15117 ;;Total ram usage:        1 bytes
 15118 ;; Hardware stack levels used:    1
 15119 ;; This function calls:
 15120 ;;		Nothing
 15121 ;; This function is called by:
 15122 ;;		_make_array
 15123 ;; This function uses a non-reentrant model
 15124 ;;
 15125                           
 15126                           	psect	text83
 15127  003644                     __ptext83:
 15128                           	opt stack 0
 15129  003644                     _heart_beat:
 15130                           	opt stack 17
 15131                           
 15132                           ; BSR set to: 0
 15133                           ;incstack = 0
 15134                           ;main.c: 56: do { LATEbits.LATE2 = ~LATEbits.LATE2; } while(0);
 15135  003644  A48D               	btfss	3981,2,c	;volatile
 15136  003646  D002               	goto	i2u344_40
 15137  003648  0E01               	movlw	1
 15138  00364A  D001               	goto	i2u344_46
 15139  00364C                     i2u344_40:
 15140  00364C  0E00               	movlw	0
 15141  00364E                     i2u344_46:
 15142  00364E  0AFF               	xorlw	255
 15143  003650  6E01               	movwf	??_heart_beat& (0+255),c
 15144  003652  4601               	rlncf	??_heart_beat,f,c
 15145  003654  4601               	rlncf	??_heart_beat,f,c
 15146  003656  508D               	movf	3981,w,c	;volatile
 15147  003658  1801               	xorwf	??_heart_beat,w,c
 15148  00365A  0BFB               	andlw	-5
 15149  00365C  1801               	xorwf	??_heart_beat,w,c
 15150  00365E  6E8D               	movwf	3981,c	;volatile
 15151  003660  0012               	return	
 15152  003662                     __end_of_heart_beat:
 15153                           	opt stack 0
 15154                           tosu	equ	0xFFF
 15155                           tosh	equ	0xFFE
 15156                           tosl	equ	0xFFD
 15157                           pclatu	equ	0xFFB
 15158                           pclath	equ	0xFFA
 15159                           tblptru	equ	0xFF8
 15160                           tblptrh	equ	0xFF7
 15161                           tblptrl	equ	0xFF6
 15162                           tablat	equ	0xFF5
 15163                           prodh	equ	0xFF4
 15164                           prodl	equ	0xFF3
 15165                           intcon	equ	0xFF2
 15166                           intcon2	equ	0xFF1
 15167                           indf0	equ	0xFEF
 15168                           postinc0	equ	0xFEE
 15169                           fsr0h	equ	0xFEA
 15170                           fsr0l	equ	0xFE9
 15171                           wreg	equ	0xFE8
 15172                           indf1	equ	0xFE7
 15173                           postdec1	equ	0xFE5
 15174                           fsr1h	equ	0xFE2
 15175                           fsr1l	equ	0xFE1
 15176                           indf2	equ	0xFDF
 15177                           postinc2	equ	0xFDE
 15178                           postdec2	equ	0xFDD
 15179                           fsr2h	equ	0xFDA
 15180                           fsr2l	equ	0xFD9
 15181                           status	equ	0xFD8
 15182                           
 15183 ;; *************** function _EUSART1_Transmit_ISR *****************
 15184 ;; Defined at:
 15185 ;;		line 165 in file "mcc_generated_files/eusart1.c"
 15186 ;; Parameters:    Size  Location     Type
 15187 ;;		None
 15188 ;; Auto vars:     Size  Location     Type
 15189 ;;		None
 15190 ;; Return value:  Size  Location     Type
 15191 ;;                  1    wreg      void 
 15192 ;; Registers used:
 15193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15194 ;; Tracked objects:
 15195 ;;		On entry : 0/0
 15196 ;;		On exit  : 0/0
 15197 ;;		Unchanged: 0/0
 15198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15203 ;;Total ram usage:        0 bytes
 15204 ;; Hardware stack levels used:    1
 15205 ;; This function calls:
 15206 ;;		Nothing
 15207 ;; This function is called by:
 15208 ;;		_INTERRUPT_InterruptManager
 15209 ;; This function uses a non-reentrant model
 15210 ;;
 15211                           
 15212                           	psect	text84
 15213  00345C                     __ptext84:
 15214                           	opt stack 0
 15215  00345C                     _EUSART1_Transmit_ISR:
 15216                           	opt stack 20
 15217                           
 15218                           ;eusart1.c: 169: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 15219                           
 15220                           ;incstack = 0
 15221  00345C  0E08               	movlw	8
 15222  00345E  0100               	movlb	0	; () banked
 15223  003460  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15224  003462  D013               	goto	i2l205
 15225                           
 15226                           ; BSR set to: 0
 15227                           ;eusart1.c: 170: {
 15228                           ;eusart1.c: 171: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 15229  003464  5048               	movf	_eusart1TxTail,w,c	;volatile
 15230  003466  0D01               	mullw	1
 15231  003468  0E68               	movlw	low _eusart1TxBuffer
 15232  00346A  24F3               	addwf	prodl,w,c
 15233  00346C  6ED9               	movwf	fsr2l,c
 15234  00346E  0E00               	movlw	high _eusart1TxBuffer
 15235  003470  20F4               	addwfc	prodh,w,c
 15236  003472  6EDA               	movwf	fsr2h,c
 15237  003474  50DF               	movf	indf2,w,c
 15238  003476  6EAD               	movwf	4013,c	;volatile
 15239                           
 15240                           ; BSR set to: 0
 15241  003478  2A48               	incf	_eusart1TxTail,f,c	;volatile
 15242                           
 15243                           ; BSR set to: 0
 15244                           ;eusart1.c: 172: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 15245  00347A  0E07               	movlw	7
 15246  00347C  6448               	cpfsgt	_eusart1TxTail,c	;volatile
 15247  00347E  D002               	goto	i2l5201
 15248                           
 15249                           ; BSR set to: 0
 15250                           ;eusart1.c: 173: {
 15251                           ;eusart1.c: 174: eusart1TxTail = 0;
 15252  003480  0E00               	movlw	0
 15253  003482  6E48               	movwf	_eusart1TxTail,c	;volatile
 15254  003484                     i2l5201:
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;eusart1.c: 175: }
 15258                           ;eusart1.c: 176: eusart1TxBufferRemaining++;
 15259  003484  0100               	movlb	0	; () banked
 15260  003486  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 15261                           
 15262                           ;eusart1.c: 177: }
 15263  003488  0012               	return	
 15264  00348A                     i2l205:
 15265                           
 15266                           ; BSR set to: 0
 15267                           ;eusart1.c: 178: else
 15268                           ;eusart1.c: 179: {
 15269                           ;eusart1.c: 180: PIE1bits.TX1IE = 0;
 15270  00348A  989D               	bcf	3997,4,c	;volatile
 15271  00348C  0012               	return	
 15272  00348E                     __end_of_EUSART1_Transmit_ISR:
 15273                           	opt stack 0
 15274                           tosu	equ	0xFFF
 15275                           tosh	equ	0xFFE
 15276                           tosl	equ	0xFFD
 15277                           pclatu	equ	0xFFB
 15278                           pclath	equ	0xFFA
 15279                           tblptru	equ	0xFF8
 15280                           tblptrh	equ	0xFF7
 15281                           tblptrl	equ	0xFF6
 15282                           tablat	equ	0xFF5
 15283                           prodh	equ	0xFF4
 15284                           prodl	equ	0xFF3
 15285                           intcon	equ	0xFF2
 15286                           intcon2	equ	0xFF1
 15287                           indf0	equ	0xFEF
 15288                           postinc0	equ	0xFEE
 15289                           fsr0h	equ	0xFEA
 15290                           fsr0l	equ	0xFE9
 15291                           wreg	equ	0xFE8
 15292                           indf1	equ	0xFE7
 15293                           postdec1	equ	0xFE5
 15294                           fsr1h	equ	0xFE2
 15295                           fsr1l	equ	0xFE1
 15296                           indf2	equ	0xFDF
 15297                           postinc2	equ	0xFDE
 15298                           postdec2	equ	0xFDD
 15299                           fsr2h	equ	0xFDA
 15300                           fsr2l	equ	0xFD9
 15301                           status	equ	0xFD8
 15302                           
 15303 ;; *************** function _EUSART1_Receive_ISR *****************
 15304 ;; Defined at:
 15305 ;;		line 184 in file "mcc_generated_files/eusart1.c"
 15306 ;; Parameters:    Size  Location     Type
 15307 ;;		None
 15308 ;; Auto vars:     Size  Location     Type
 15309 ;;		None
 15310 ;; Return value:  Size  Location     Type
 15311 ;;                  1    wreg      void 
 15312 ;; Registers used:
 15313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15314 ;; Tracked objects:
 15315 ;;		On entry : 0/0
 15316 ;;		On exit  : 0/0
 15317 ;;		Unchanged: 0/0
 15318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15323 ;;Total ram usage:        0 bytes
 15324 ;; Hardware stack levels used:    1
 15325 ;; This function calls:
 15326 ;;		Nothing
 15327 ;; This function is called by:
 15328 ;;		_INTERRUPT_InterruptManager
 15329 ;; This function uses a non-reentrant model
 15330 ;;
 15331                           
 15332                           	psect	text85
 15333  0034E8                     __ptext85:
 15334                           	opt stack 0
 15335  0034E8                     _EUSART1_Receive_ISR:
 15336                           	opt stack 20
 15337                           
 15338                           ;eusart1.c: 187: if(1 == RCSTA1bits.OERR)
 15339                           
 15340                           ; BSR set to: 0
 15341                           ;incstack = 0
 15342  0034E8  A2AB               	btfss	4011,1,c	;volatile
 15343  0034EA  D002               	goto	i2l5207
 15344                           
 15345                           ;eusart1.c: 188: {
 15346                           ;eusart1.c: 191: RCSTA1bits.CREN = 0;
 15347  0034EC  98AB               	bcf	4011,4,c	;volatile
 15348                           
 15349                           ;eusart1.c: 192: RCSTA1bits.CREN = 1;
 15350  0034EE  88AB               	bsf	4011,4,c	;volatile
 15351  0034F0                     i2l5207:
 15352                           
 15353                           ;eusart1.c: 193: }
 15354                           ;eusart1.c: 196: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15355  0034F0  5045               	movf	_eusart1RxHead,w,c	;volatile
 15356  0034F2  0D01               	mullw	1
 15357  0034F4  0E60               	movlw	low _eusart1RxBuffer
 15358  0034F6  24F3               	addwf	prodl,w,c
 15359  0034F8  6ED9               	movwf	fsr2l,c
 15360  0034FA  0E00               	movlw	high _eusart1RxBuffer
 15361  0034FC  20F4               	addwfc	prodh,w,c
 15362  0034FE  6EDA               	movwf	fsr2h,c
 15363  003500  CFAE FFDF          	movff	4014,indf2	;volatile
 15364  003504  2A45               	incf	_eusart1RxHead,f,c	;volatile
 15365                           
 15366                           ;eusart1.c: 197: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 15367  003506  0E07               	movlw	7
 15368  003508  6445               	cpfsgt	_eusart1RxHead,c	;volatile
 15369  00350A  D002               	goto	i2l5215
 15370                           
 15371                           ;eusart1.c: 198: {
 15372                           ;eusart1.c: 199: eusart1RxHead = 0;
 15373  00350C  0E00               	movlw	0
 15374  00350E  6E45               	movwf	_eusart1RxHead,c	;volatile
 15375  003510                     i2l5215:
 15376                           
 15377                           ;eusart1.c: 200: }
 15378                           ;eusart1.c: 201: eusart1RxCount++;
 15379  003510  2A44               	incf	_eusart1RxCount,f,c	;volatile
 15380  003512  0012               	return		;funcret
 15381  003514                     __end_of_EUSART1_Receive_ISR:
 15382                           	opt stack 0
 15383                           tosu	equ	0xFFF
 15384                           tosh	equ	0xFFE
 15385                           tosl	equ	0xFFD
 15386                           pclatu	equ	0xFFB
 15387                           pclath	equ	0xFFA
 15388                           tblptru	equ	0xFF8
 15389                           tblptrh	equ	0xFF7
 15390                           tblptrl	equ	0xFF6
 15391                           tablat	equ	0xFF5
 15392                           prodh	equ	0xFF4
 15393                           prodl	equ	0xFF3
 15394                           intcon	equ	0xFF2
 15395                           intcon2	equ	0xFF1
 15396                           indf0	equ	0xFEF
 15397                           postinc0	equ	0xFEE
 15398                           fsr0h	equ	0xFEA
 15399                           fsr0l	equ	0xFE9
 15400                           wreg	equ	0xFE8
 15401                           indf1	equ	0xFE7
 15402                           postdec1	equ	0xFE5
 15403                           fsr1h	equ	0xFE2
 15404                           fsr1l	equ	0xFE1
 15405                           indf2	equ	0xFDF
 15406                           postinc2	equ	0xFDE
 15407                           postdec2	equ	0xFDD
 15408                           fsr2h	equ	0xFDA
 15409                           fsr2l	equ	0xFD9
 15410                           status	equ	0xFD8
 15411                           tosu	equ	0xFFF
 15412                           tosh	equ	0xFFE
 15413                           tosl	equ	0xFFD
 15414                           pclatu	equ	0xFFB
 15415                           pclath	equ	0xFFA
 15416                           tblptru	equ	0xFF8
 15417                           tblptrh	equ	0xFF7
 15418                           tblptrl	equ	0xFF6
 15419                           tablat	equ	0xFF5
 15420                           prodh	equ	0xFF4
 15421                           prodl	equ	0xFF3
 15422                           intcon	equ	0xFF2
 15423                           intcon2	equ	0xFF1
 15424                           indf0	equ	0xFEF
 15425                           postinc0	equ	0xFEE
 15426                           fsr0h	equ	0xFEA
 15427                           fsr0l	equ	0xFE9
 15428                           wreg	equ	0xFE8
 15429                           indf1	equ	0xFE7
 15430                           postdec1	equ	0xFE5
 15431                           fsr1h	equ	0xFE2
 15432                           fsr1l	equ	0xFE1
 15433                           indf2	equ	0xFDF
 15434                           postinc2	equ	0xFDE
 15435                           postdec2	equ	0xFDD
 15436                           fsr2h	equ	0xFDA
 15437                           fsr2l	equ	0xFD9
 15438                           status	equ	0xFD8
 15439                           
 15440                           	psect	text86
 15441  000000                     __ptext86:
 15442                           	opt stack 0
 15443                           tosu	equ	0xFFF
 15444                           tosh	equ	0xFFE
 15445                           tosl	equ	0xFFD
 15446                           pclatu	equ	0xFFB
 15447                           pclath	equ	0xFFA
 15448                           tblptru	equ	0xFF8
 15449                           tblptrh	equ	0xFF7
 15450                           tblptrl	equ	0xFF6
 15451                           tablat	equ	0xFF5
 15452                           prodh	equ	0xFF4
 15453                           prodl	equ	0xFF3
 15454                           intcon	equ	0xFF2
 15455                           intcon2	equ	0xFF1
 15456                           indf0	equ	0xFEF
 15457                           postinc0	equ	0xFEE
 15458                           fsr0h	equ	0xFEA
 15459                           fsr0l	equ	0xFE9
 15460                           wreg	equ	0xFE8
 15461                           indf1	equ	0xFE7
 15462                           postdec1	equ	0xFE5
 15463                           fsr1h	equ	0xFE2
 15464                           fsr1l	equ	0xFE1
 15465                           indf2	equ	0xFDF
 15466                           postinc2	equ	0xFDE
 15467                           postdec2	equ	0xFDD
 15468                           fsr2h	equ	0xFDA
 15469                           fsr2l	equ	0xFD9
 15470                           status	equ	0xFD8
 15471                           
 15472                           	psect	rparam
 15473  0000                     tosu	equ	0xFFF
 15474                           tosh	equ	0xFFE
 15475                           tosl	equ	0xFFD
 15476                           pclatu	equ	0xFFB
 15477                           pclath	equ	0xFFA
 15478                           tblptru	equ	0xFF8
 15479                           tblptrh	equ	0xFF7
 15480                           tblptrl	equ	0xFF6
 15481                           tablat	equ	0xFF5
 15482                           prodh	equ	0xFF4
 15483                           prodl	equ	0xFF3
 15484                           intcon	equ	0xFF2
 15485                           intcon2	equ	0xFF1
 15486                           indf0	equ	0xFEF
 15487                           postinc0	equ	0xFEE
 15488                           fsr0h	equ	0xFEA
 15489                           fsr0l	equ	0xFE9
 15490                           wreg	equ	0xFE8
 15491                           indf1	equ	0xFE7
 15492                           postdec1	equ	0xFE5
 15493                           fsr1h	equ	0xFE2
 15494                           fsr1l	equ	0xFE1
 15495                           indf2	equ	0xFDF
 15496                           postinc2	equ	0xFDE
 15497                           postdec2	equ	0xFDD
 15498                           fsr2h	equ	0xFDA
 15499                           fsr2l	equ	0xFD9
 15500                           status	equ	0xFD8
 15501                           
 15502                           	psect	temp
 15503  000050                     btemp:
 15504                           	opt stack 0
 15505  000050                     	ds	1
 15506  0000                     int$flags	set	btemp
 15507                           tosu	equ	0xFFF
 15508                           tosh	equ	0xFFE
 15509                           tosl	equ	0xFFD
 15510                           pclatu	equ	0xFFB
 15511                           pclath	equ	0xFFA
 15512                           tblptru	equ	0xFF8
 15513                           tblptrh	equ	0xFF7
 15514                           tblptrl	equ	0xFF6
 15515                           tablat	equ	0xFF5
 15516                           prodh	equ	0xFF4
 15517                           prodl	equ	0xFF3
 15518                           intcon	equ	0xFF2
 15519                           intcon2	equ	0xFF1
 15520                           indf0	equ	0xFEF
 15521                           postinc0	equ	0xFEE
 15522                           fsr0h	equ	0xFEA
 15523                           fsr0l	equ	0xFE9
 15524                           wreg	equ	0xFE8
 15525                           indf1	equ	0xFE7
 15526                           postdec1	equ	0xFE5
 15527                           fsr1h	equ	0xFE2
 15528                           fsr1l	equ	0xFE1
 15529                           indf2	equ	0xFDF
 15530                           postinc2	equ	0xFDE
 15531                           postdec2	equ	0xFDD
 15532                           fsr2h	equ	0xFDA
 15533                           fsr2l	equ	0xFD9
 15534                           status	equ	0xFD8


Data Sizes:
    Strings     722
    Constant    10
    Data        13
    BSS         1485
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      79
    BANK0           160     18     160
    BANK1           256     11     131
    BANK2           256      0     150
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), 
		 -> STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), STR_38(CODE[7]), 
		 -> STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), 
		 -> STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_68(CODE[4]), STR_67(CODE[11]), STR_54(CODE[11]), STR_45(CODE[12]), 
		 -> STR_37(CODE[10]), STR_35(CODE[10]), STR_30(CODE[9]), STR_27(CODE[10]), 
		 -> STR_25(CODE[8]), STR_23(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 
		 -> NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), 
		 -> STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), STR_38(CODE[7]), 
		 -> STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), 
		 -> STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 
		 -> NULL(NULL[0]), 

    cputs@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_114(CODE[12]), STR_113(CODE[12]), STR_70(CODE[5]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), 
		 -> STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), STR_38(CODE[7]), 
		 -> STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), 
		 -> STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 
		 -> NULL(NULL[0]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_68(CODE[4]), STR_67(CODE[11]), STR_54(CODE[11]), STR_45(CODE[12]), 
		 -> STR_37(CODE[10]), STR_35(CODE[10]), STR_30(CODE[9]), STR_27(CODE[10]), 
		 -> STR_25(CODE[8]), STR_23(CODE[8]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 
		 -> NULL(NULL[0]), 

    strncpy@from	PTR const unsigned char  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1080]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_68(CODE[4]), STR_67(CODE[11]), STR_64(CODE[7]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_55(CODE[7]), STR_54(CODE[11]), STR_51(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), STR_45(CODE[12]), STR_43(CODE[7]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_37(CODE[10]), STR_36(CODE[7]), STR_35(CODE[10]), 
		 -> STR_34(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), STR_30(CODE[9]), 
		 -> STR_28(CODE[7]), RAM(DATA[3895]), STR_27(CODE[10]), STR_26(CODE[7]), 
		 -> STR_25(CODE[8]), STR_24(CODE[7]), NULL(NULL[0]), STR_23(CODE[8]), 
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1080]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_68(CODE[4]), STR_67(CODE[11]), STR_64(CODE[7]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_55(CODE[7]), STR_54(CODE[11]), STR_51(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), STR_45(CODE[12]), STR_43(CODE[7]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_37(CODE[10]), STR_36(CODE[7]), STR_35(CODE[10]), 
		 -> STR_34(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), STR_30(CODE[9]), 
		 -> STR_28(CODE[7]), RAM(DATA[3895]), STR_27(CODE[10]), STR_26(CODE[7]), 
		 -> STR_25(CODE[8]), STR_24(CODE[7]), NULL(NULL[0]), STR_23(CODE[8]), 
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1080]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), cmd_data.data(BANK0[40]), STR_43(CODE[7]), 
		 -> STR_40(CODE[7]), STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), 
		 -> STR_32(CODE[7]), STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), 
		 -> STR_26(CODE[7]), STR_24(CODE[7]), NULL(NULL[0]), cmd_data(BANK0[49]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[49]), clcd_display_string_details(BIGRAM[1080]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[49]), clcd_display_string_details(BIGRAM[1080]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_100(CODE[11]), STR_97(CODE[11]), STR_94(CODE[12]), STR_91(CODE[10]), 
		 -> STR_86(CODE[10]), STR_83(CODE[9]), STR_79(CODE[8]), STR_75(CODE[8]), 
		 -> STR_71(CODE[10]), STR_69(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 15
		 -> CMD(BANK0[15]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_114(CODE[12]), STR_113(CODE[12]), STR_70(CODE[5]), 

    memset@p1	PTR void  size(2) Largest target is 1080
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), cmd_data(BANK0[49]), 
		 -> conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    memset@p	PTR unsigned char  size(2) Largest target is 1080
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), cmd_data(BANK0[49]), 
		 -> conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1080]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1080]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> STR_24(CODE[7]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_117(CODE[18]), STR_115(CODE[5]), STR_112(CODE[3]), STR_111(CODE[3]), 
		 -> STR_109(CODE[7]), STR_107(CODE[7]), STR_105(CODE[7]), STR_103(CODE[13]), 
		 -> STR_101(CODE[5]), STR_98(CODE[13]), STR_95(CODE[13]), STR_92(CODE[13]), 
		 -> STR_89(CODE[13]), STR_88(CODE[5]), STR_87(CODE[11]), STR_84(CODE[13]), 
		 -> STR_81(CODE[13]), STR_80(CODE[5]), STR_77(CODE[13]), STR_76(CODE[5]), 
		 -> STR_73(CODE[13]), STR_72(CODE[5]), STR_66(CODE[25]), STR_65(CODE[11]), 
		 -> STR_63(CODE[25]), STR_61(CODE[27]), STR_59(CODE[27]), STR_57(CODE[12]), 
		 -> STR_53(CODE[14]), STR_52(CODE[9]), STR_50(CODE[11]), STR_49(CODE[9]), 
		 -> STR_46(CODE[9]), STR_44(CODE[11]), STR_42(CODE[11]), STR_41(CODE[12]), 
		 -> STR_39(CODE[12]), STR_33(CODE[7]), STR_29(CODE[8]), STR_22(CODE[8]), 
		 -> STR_21(CODE[11]), STR_20(CODE[15]), STR_19(CODE[22]), STR_18(CODE[15]), 
		 -> STR_17(CODE[32]), STR_16(CODE[14]), STR_15(CODE[11]), STR_14(CODE[8]), 
		 -> STR_13(CODE[3]), STR_12(CODE[16]), STR_11(CODE[16]), STR_10(CODE[19]), 
		 -> STR_9(CODE[3]), STR_8(CODE[5]), STR_7(CODE[16]), STR_6(CODE[26]), 
		 -> STR_4(CODE[17]), STR_3(CODE[18]), STR_2(CODE[9]), STR_1(CODE[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 3895
		 -> STR_118(CODE[7]), STR_116(CODE[6]), uart_str(BANK2[150]), STR_110(CODE[15]), 
		 -> STR_108(CODE[12]), STR_106(CODE[12]), STR_104(CODE[11]), STR_102(CODE[6]), 
		 -> STR_99(CODE[11]), STR_96(CODE[12]), STR_93(CODE[10]), STR_90(CODE[10]), 
		 -> STR_85(CODE[9]), STR_82(CODE[8]), STR_78(CODE[8]), STR_74(CODE[10]), 
		 -> STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), 
		 -> STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), STR_38(CODE[7]), 
		 -> STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), 
		 -> STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), STR_24(CODE[7]), 
		 -> NULL(NULL[0]), STR_5(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 
		 -> NULL(NULL[0]), 

    parse_cmd_str@temp	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> STR_24(CODE[7]), NULL(NULL[0]), 

    parse_cmd_str@ptr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    parse_cmd_str@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    collect_column@data_column	PTR unsigned char  size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    collect_column@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> STR_24(CODE[7]), NULL(NULL[0]), 

    collect_row@data_row	PTR unsigned char  size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    collect_row@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> STR_24(CODE[7]), NULL(NULL[0]), 

    scroll_off@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    scroll_right_to_left@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    scroll_left_to_right@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    write_str@str	PTR const unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    update_string_data@data	PTR struct . size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[49]), clcd_display_string_details(BIGRAM[1080]), 

    copy_data@data	PTR struct . size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    copy_data@clcd_str_data	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    sp__max_display_support	PTR unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), 

    sp__memset	PTR void  size(2) Largest target is 1080
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), cmd_data(BANK0[49]), 
		 -> conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> make_array(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> make_array(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_make_display
    _console_init->_memset
    _clear_cmd_data->_memset
    _update_string_data->_make_display
    _make_display->_scroll_off
    _scroll_right_to_left->_printf
    _scroll_off->_printf
    _scroll_left_to_right->_memset
    _display_text->_write_str
    _set_cursor->_write_lcd_cmd
    _char_enter_mode_left_to_right->_write_lcd_cmd
    _copy_data->_printf
    _conflict_check->_printf
    _puts->_cputs
    _cputs->_putch
    _init_clcd_cusotom_lcd->_printf
    _write_lcd_cmd->_delay
    _clear_display_array->_memset
    _clear_display_structure->_memset
    _clcd_display_string_config->_printf
    _write_str->_write_lcd_data
    _write_lcd_data->_delay
    _parse_cmd_str->_collect_column
    _parse_cmd_str->_collect_row
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _strstr->_strncmp
    _strncmp->_strlen
    _memset->_strlen
    _collect_row->_printf
    _collect_column->_printf
    _strlen->___wmul
    _printf->_strlen
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    ___wmul->___awdiv
    _getch->_EUSART1_Read
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _make_array->_heart_beat

Critical Paths under _main in BANK0

    _cmd_consol_task->_parse_cmd_str
    _reply_to_host->_update_string_data
    _make_display->_scroll_right_to_left

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_cmd_consol_task
    _cmd_consol_task->_reply_to_host
    _reply_to_host->_update_string_data

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  273251
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                     _TMR1_StopTimer
                     _TMR5_StopTimer
                          __delay_MS
                    _cmd_consol_task
                       _console_init
                       _make_display
                             _printf
 ---------------------------------------------------------------------------------
 (1) _console_init                                         0     0      0   13210
                     _clear_cmd_data
                             _memset
 ---------------------------------------------------------------------------------
 (2) _clear_cmd_data                                       0     0      0    6605
                             _memset
 ---------------------------------------------------------------------------------
 (1) _cmd_consol_task                                      2     2      0  210845
                                              9 BANK1      2     2      0
                              _getch
                             _memset
                      _parse_cmd_str
                             _printf
                               _puts
                      _reply_to_host
 ---------------------------------------------------------------------------------
 (2) _reply_to_host                                        4     4      0  144005
                                              5 BANK1      4     4      0
                       _clcd_max_col
                       _clcd_max_row
              _init_clcd_cusotom_lcd
                    _max_display_str
                _max_display_support
                      _max_uid_range
                      _min_uid_range
                             _printf
                               _puts
                             _strcmp
                 _update_string_data
 ---------------------------------------------------------------------------------
 (3) _update_string_data                                  10     8      2   75169
                                             13 BANK0      5     3      2
                                              0 BANK1      5     5      0
                             ___wmul
                     _conflict_check
                          _copy_data
                       _make_display
                             _memset
 ---------------------------------------------------------------------------------
 (1) _make_display                                         5     5      0   41948
                                             59 COMRAM     5     5      0
                             ___wmul
                       _display_text
               _scroll_left_to_right
                         _scroll_off
               _scroll_right_to_left
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_right_to_left                                16    14      2   15574
                                             53 COMRAM     3     1      2
                                              0 BANK0     13    13      0
                             ___wmul (ARG)
                             _memcpy
                             _memset
                             _printf
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              8     2      6     433
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _scroll_off                                          15    13      2    8944
                                             53 COMRAM     6     4      2
                                              0 BANK0      9     9      0
                             ___wmul (ARG)
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_left_to_right                                11     9      2    8818
                                             43 COMRAM    11     9      2
                             ___wmul (ARG)
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _display_text                                         0     0      0    2541
      _char_enter_mode_left_to_right
                         _set_cursor
                      _write_lcd_cmd
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _set_cursor                                           2     1      1     805
                                             23 COMRAM     2     1      1
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _char_enter_mode_left_to_right                        0     0      0     401
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (4) _copy_data                                           10     6      4   11156
                                             53 COMRAM     6     2      4
                             _printf
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _conflict_check                                       9     7      2   11092
                                             53 COMRAM     9     7      2
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               6     2      4    1673
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _puts                                                 2     0      2     590
                                             19 COMRAM     2     0      2
                              _cputs
                              _putch
 ---------------------------------------------------------------------------------
 (4) _cputs                                                2     0      2     235
                                             17 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _min_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_display_support                                  2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _max_display_str                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_clcd_cusotom_lcd                                2     1      1   60278
                                             53 COMRAM     2     1      1
                            ___awdiv
                             ___wmul
                   _init_CLCD_config
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (4) _init_CLCD_config                                     0     0      0   42406
                          __delay_MS
         _clcd_display_string_config
                             _memset
                         _reset_clcd
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _write_lcd_cmd                                        1     1      0     401
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _reset_clcd                                           0     0      0   19815
                _clear_display_array
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _clear_display_array                                  0     0      0   13210
                             _memset
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _reset_display_structure_count                        0     0      0    6605
            _clear_display_structure
 ---------------------------------------------------------------------------------
 (7) _clear_display_structure                              0     0      0    6605
                             _memset
 ---------------------------------------------------------------------------------
 (5) _clcd_display_string_config                           0     0      0   14898
                             _memcpy
                             _memset
                             _printf
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _write_str                                            3     1      2     934
                                             23 COMRAM     3     1      2
                     _write_lcd_data
 ---------------------------------------------------------------------------------
 (4) _write_lcd_data                                       1     1      0     401
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                7     5      2     370
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     4      6    1098
                                             15 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) __delay_MS                                            5     3      2     687
                                             15 COMRAM     5     3      2
            _TMR1_HasOverflowOccured
                        _TMR1_Reload
                    _TMR1_StartTimer
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     907
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _clcd_max_row                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clcd_max_col                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parse_cmd_str                                       18    16      2   53248
                                              0 BANK0     18    16      2
                               _atoi
                     _collect_column
                        _collect_row
                            _isdigit
                             _memset
                             _printf
                             _strcpy
                             _strlen
                             _strstr
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _strtok                                               4     0      4    4957
                                             28 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (4) _strspn                                               7     3      4     873
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strcspn                                              7     3      4     873
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    4778
                                             44 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     423
                                             35 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) _strchr                                               6     2      4     586
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1957
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6    6605
                                             35 COMRAM     8     2      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _collect_row                                         10     6      4    9033
                                             53 COMRAM    10     6      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_column                                      10     6      4    9405
                                             53 COMRAM    10     6      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2    1978
                                             29 COMRAM     6     4      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _printf                                              24    16      8    6261
                                             35 COMRAM    18    10      8
                            ___awdiv (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                       _clcd_max_col (ARG)
                       _clcd_max_row (ARG)
                    _max_display_str (ARG)
                _max_display_support (ARG)
                      _max_uid_range (ARG)
                      _min_uid_range (ARG)
                              _putch
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             16 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    4361
                                             29 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3774
                                             23 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getch                                                0     0      0      37
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         1     1      0      37
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     150
                                             17 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     150
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         14    14      0       0
                                              1 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                         _make_array *
 ---------------------------------------------------------------------------------
 (13) _make_array                                          0     0      0       0
                         _heart_beat
 ---------------------------------------------------------------------------------
 (14) _heart_beat                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_SetInterruptHandler
   _TMR0_StartTimer
   _TMR0_StopTimer
   _TMR1_StopTimer
   _TMR5_StopTimer
   __delay_MS
     _TMR1_HasOverflowOccured
     _TMR1_Reload
     _TMR1_StartTimer
     _TMR1_StopTimer
   _cmd_consol_task
     _getch
       _EUSART1_Read
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _parse_cmd_str
       _atoi
         ___wmul
           ___awdiv (ARG)
         _isdigit
       _collect_column
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _collect_row
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _isdigit
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strcpy
       _strlen
         ___wmul (ARG)
           ___awdiv (ARG)
       _strstr
         _strchr
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
         _strncmp
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _clcd_max_col (ARG)
       _clcd_max_row (ARG)
       _max_display_str (ARG)
       _max_display_support (ARG)
       _max_uid_range (ARG)
       _min_uid_range (ARG)
       _putch (ARG)
         _EUSART1_Write
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _puts
       _cputs
         _putch
           _EUSART1_Write
       _putch
         _EUSART1_Write
     _reply_to_host
       _clcd_max_col
       _clcd_max_row
       _init_clcd_cusotom_lcd
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _init_CLCD_config
           __delay_MS
             _TMR1_HasOverflowOccured
             _TMR1_Reload
             _TMR1_StartTimer
             _TMR1_StopTimer
           _clcd_display_string_config
             _memcpy
             _memset
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _printf
               ___awdiv (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _clcd_max_col (ARG)
               _clcd_max_row (ARG)
               _max_display_str (ARG)
               _max_display_support (ARG)
               _max_uid_range (ARG)
               _min_uid_range (ARG)
               _putch (ARG)
                 _EUSART1_Write
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _write_str
               _write_lcd_data
                 _delay
           _memset
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _reset_clcd
             _clear_display_array
               _memset
                 _strlen (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
               _reset_display_structure_count
                 _clear_display_structure
                   _memset
                     _strlen (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
             _reset_display_structure_count
               _clear_display_structure
                 _memset
                   _strlen (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
           _write_lcd_cmd
             _delay
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
       _max_display_str
       _max_display_support
       _max_uid_range
       _min_uid_range
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _puts
         _cputs
           _putch
             _EUSART1_Write
         _putch
           _EUSART1_Write
       _strcmp
       _update_string_data
         ___wmul
           ___awdiv (ARG)
         _conflict_check
           ___wmul
             ___awdiv (ARG)
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
         _copy_data
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _strcpy
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _make_display
           ___wmul
             ___awdiv (ARG)
           _display_text
             _char_enter_mode_left_to_right
               _write_lcd_cmd
                 _delay
             _set_cursor
               _write_lcd_cmd
                 _delay
             _write_lcd_cmd
               _delay
             _write_str
               _write_lcd_data
                 _delay
           _scroll_left_to_right
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
           _scroll_off
             ___wmul (ARG)
               ___awdiv (ARG)
             _printf (ARG)
               ___awdiv (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _clcd_max_col (ARG)
               _clcd_max_row (ARG)
               _max_display_str (ARG)
               _max_display_support (ARG)
               _max_uid_range (ARG)
               _min_uid_range (ARG)
               _putch (ARG)
                 _EUSART1_Write
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _scroll_right_to_left
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _printf (ARG)
               ___awdiv (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _clcd_max_col (ARG)
               _clcd_max_row (ARG)
               _max_display_str (ARG)
               _max_display_support (ARG)
               _max_uid_range (ARG)
               _min_uid_range (ARG)
               _putch (ARG)
                 _EUSART1_Write
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _strncpy (ARG)
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
   _console_init
     _clear_cmd_data
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _make_display
     ___wmul
       ___awdiv (ARG)
     _display_text
       _char_enter_mode_left_to_right
         _write_lcd_cmd
           _delay
       _set_cursor
         _write_lcd_cmd
           _delay
       _write_lcd_cmd
         _delay
       _write_str
         _write_lcd_data
           _delay
     _scroll_left_to_right
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _scroll_off
       ___wmul (ARG)
         ___awdiv (ARG)
       _printf (ARG)
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _scroll_right_to_left
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _printf (ARG)
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strncpy (ARG)
     _strlen
       ___wmul (ARG)
         ___awdiv (ARG)
   _printf
     ___awdiv (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
     _clcd_max_col (ARG)
     _clcd_max_row (ARG)
     _max_display_str (ARG)
     _max_display_support (ARG)
     _max_uid_range (ARG)
     _min_uid_range (ARG)
     _putch (ARG)
       _EUSART1_Write
     _strlen (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _make_array *
         _heart_beat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     438      37       27.7%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      B      83       7       51.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4F       1       84.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     208      12        0.0%
DATA                 0      0     640       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Oct 27 20:42:15 2017

                       _eusart1TxBufferRemaining 00FF                            __end_of_parse_cmd_str 0C8E  
                                   ___awdiv@sign 0015                            _init_clcd_cusotom_lcd 2810  
                            ___wmul@multiplicand 001A                                  _timer0ReloadVal 004E  
                                   __CFG_CP0$OFF 000000                                     __CFG_CP1$OFF 000000  
                                   __CFG_CP2$OFF 000000                                     __CFG_CP3$OFF 000000  
                                    __CFG_LVP$ON 000000                                              l193 335E  
                                            l786 12C8                                              _CMD 00CB  
                                   __CFG_CPB$OFF 000000                                     __CFG_CPD$OFF 000000  
                                ?_conflict_check 0036                                    ?_display_text 0001  
                                _timer1ReloadVal 00FB                                              _str 00EC  
                      collect_column@data_column 0038                                              prod 000FF3  
                               _LCD_16x2_DISPLAY 0041                                              tosl 000FFD  
                                            wreg 000FE8                                             l1167 2806  
                                           l1417 30B6                                             l1427 3300  
                                           l1632 2AA8                                             l1637 2B4C  
                                           l6001 1874                                             l6101 2D54  
                                           l6013 1906                                             l1679 3156  
                                           l6111 2D76                                             l6033 19E4  
                                           l6025 19B0                                             l1698 3106  
                                           l6107 2D6A                                             l6123 2D9C  
                                           l6027 19B4                                             l7003 23A0  
                                           l6141 29CA                                             l6109 2D72  
                                           l6133 3490                                             l6037 1A18  
                                           l6061 1D66                                             l5503 334C  
                                           l6151 2A7E                                             l6127 2DAA  
                                           l6119 2D92                                             l6039 1A1C  
                                           l6055 1CDA                                             l7031 2488  
                                           l7023 2436                                             l7015 2402  
                                           l6145 2A2A                                             l6161 30D2  
                                           l5521 31BC                                             l6241 36EE  
                                           l6137 34A6                                             l6049 1C4E  
                                           l6313 2624                                             l6321 2640  
                                           l7041 24D0                                             l7017 2408  
                                           l7009 23BE                                             l6083 361E  
                                           l5515 3380                                             l6411 2ABA  
                                           l5531 31DA                                             l5523 31C4  
                                           l6067 1DF0                                             l6307 2620  
                                           l6331 26AE                                             l7043 24E6  
                                           l5517 3384                                             l6149 2A76  
                                           l5533 31DE                                             l6229 370A  
                                           l6253 36FC                                             l6069 1DF4  
                                           l7053 2500                                             l6175 33FA  
                                           l5623 1E38                                             l6351 29BA  
                                           l6343 297A                                             l6167 311A  
                                           l6159 30CA                                             l6095 2D44  
                                           l5527 31D4                                             l6185 3420  
                                           l6433 26B4                                             l5633 1E68  
                                           l5625 1E3E                                             l6361 2020  
                                           l6337 2904                                             l6169 3122  
                                           l6281 3726                                             l5705 3338  
                                           l5721 36A6                                             l7049 24F8  
                                           l6451 27B8                                             l6435 26B8  
                                           l5571 3084                                             l5643 1ED0  
                                           l5619 1E28                                             l6427 2B40  
                                           l6419 2AFA                                             l6523 015A  
                                           l5715 357A                                             l5803 1688  
                                           l6453 27BC                                             l6445 2740  
                                           l5573 308C                                             l5661 1F3A  
                                           l5637 1E92                                             l6373 2174  
                                           l6269 3718                                             l5709 3566  
                                           l6461 3162                                             l5733 2F3C  
                                           l5583 30AC                                             l5575 3090  
                                           l5591 32D6                                             l5639 1EBC  
                                           l5647 1ED8                                             l6383 21B8  
                                           l6375 2178                                             l5495 34C6  
                                           l6615 0486                                             l6543 01F4  
                                           l6527 015E                                             l6463 316A  
                                           l5807 16D4                                             l5735 2F46  
                                           l5727 2F14                                             l5831 0CF8  
                                           l5823 0CC4                                             l7175 3002  
                                           l6449 276A                                             l5593 32DE  
                                           l5673 1F6C                                             l5649 1F0E  
                                           l6369 210C                                             l5921 2E2C  
                                           l6393 2C46                                             l6561 02A2  
                                           l5745 3296                                             l5913 2D24  
                                           l6297 259A                                             l5595 32E2  
                                           l5683 1FD2                                             l5659 1F36  
                                           l5691 3028                                             l5499 34D6  
                                           l5771 3250                                             l6387 2C0C  
                                           l6395 2C70                                             l6731 0856  
                                           l6723 07BA                                             l6467 319E  
                                           l5739 2F56                                             l5843 0FD8  
                                           l5827 0CDE                                             l5819 0CAA  
                                           l5677 1F7E                                             l5685 1FDA  
                                           l6733 085A                                             l5749 329E  
                                           l5757 32B2                                             l6901 1248  
                                           l5599 32F6                                             l5679 1F84  
                                           l5927 2E5E                                             l6399 2CA0  
                                           l6831 0B7A                                             l6727 0852  
                                           l6671 0642                                             l5791 14B4  
                                           l5783 1480                                             l5847 103E  
                                           l5839 0F12                                             l5689 3024  
                                           l5769 3248                                             l6753 08D4  
                                           l6761 08DC                                             l6921 1374  
                                           l6913 1310                                             l6835 0B7E  
                                           l6843 0B86                                             l6851 0B8E  
                                           l6675 0646                                             l5699 331C  
                                           l5787 149A                                             l5779 1466  
                                           l5883 22F4                                             l6907 12AC  
                                           l6757 08D8                                             l5885 2312  
                                           l5869 2262                                             l6941 140E  
                                           l6917 1342                                             l6909 12DE  
                                           l6863 0BF4                                             l6839 0B82  
                                           l6847 0B8A                                             l6679 064A  
                                           l6599 03F0                                             l5799 15DA  
                                           l5895 2354                                             l6935 13DA  
                                           l6873 0C62                                             l5985 179A  
                                           l6945 142C                                             l6937 13F0  
                                           l6867 0C58                                             l5995 186A  
                                           l6891 11BC                                             l6883 1124  
                                           l5999 186E                                             l6895 120A  
                                           l6887 116E                                             l6997 2384  
               __size_of_clear_display_structure 001E                                             STR_1 FF9B  
                                           STR_2 FF92                                             STR_3 FE0A  
                                           STR_4 FE1C                                             STR_5 FFF3  
                                           STR_6 FD83                                             STR_7 FE4D  
                                           STR_8 FFEE                                             STR_9 FEAD  
                                           _LATA 000F89                                             _LATB 000F8A  
                                           _LATC 000F8B                                             _LATD 000F8C  
                                           _LATE 000F8D                                             u5230 375A  
                                           u6040 29EC                                             u5260 1E8A  
                                           u7020 09A2                                             u5270 1EB4  
                                           u6310 2084                                             u6070 2A66  
                                           u6047 29E2                                             u5360 304A  
                                           u6320 20FE                                             u6240 2932  
                                           u6065 2A24                                             u6330 2166  
                                           u5267 1E80                                             u6067 2A1A  
                                           u7027 0998                                             u6500 2762  
                                           u6260 2968                                             u5460 327A  
                                           u5277 1EAA                                             u6317 207A  
                                           u6077 2A5C                                             u5367 3040  
                                           u6327 20F4                                             u6247 2928  
                                           u6520 27A0                                             u6440 26DA  
                                           u6337 215C                                             u6530 27DE  
                                           u6290 204E                                             u5730 2E4E  
                                           u6507 2758                                             u6267 295E  
                                           u5467 3270                                             i2l60 004E  
                                           u6460 2702                                             u6380 2C9A  
                                           i2l62 005E                                             u5750 2E8C  
                                           u6630 0214                                             u6527 2796  
                                           u6447 26D0                                             u6480 2736  
                                           u6640 0216                                             u6537 27D4  
                                           u6297 2044                                             u5737 2E44  
                                           i2l66 006A                                             u5770 17AE  
                        _TMR1_HasOverflowOccured 3752                                             u6467 26F8  
                                           u6387 2C90                                             u7380 241E  
                                           u5757 2E82                                             u6487 272C  
                                           u6930 07F6                                             u6950 083A  
                                           u6790 0578                                             u6880 073E  
                                           u6937 07EC                                             u6957 0830  
                                           u6797 056E                                             u6887 0734  
                                           _TMR1 000FCE                                             _TMR5 000F4F  
                                           _WPUB 000F61                                    _EUSART1_Write 334A  
                                  ?_make_display 0001                                             _atoi 26B2  
                                           _main 2FC2                                    ?_EUSART1_Read 0001  
                                _TMR0_StartTimer 37B8                                             fsr0h 000FEA  
                                           fsr1h 000FE2                                             indf0 000FEF  
                                           fsr2h 000FDA                                             fsr0l 000FE9  
                                           indf1 000FE7                                             indf2 000FDF  
                                           fsr1l 000FE1                                             fsr2l 000FD9  
                                           btemp 0050                                             _puts 36B0  
                                  __CFG_BORV$190 000000                                             prodh 000FF4  
                                           prodl 000FF3                                             start 00A6  
                                _timer5ReloadVal 00FD                                    __CFG_IESO$OFF 000000  
                           __end_of_clcd_max_col 372A                             __end_of_clcd_max_row 371C  
                                  ?_console_init 0001                                     ___param_bank 000000  
                                   collect_row@i 003D                          __end_of_TMR0_Initialize 33C0  
                 ??_TMR0_DefaultInterruptHandler 0001                   __size_of_OSCILLATOR_Initialize 000E  
                  __end_of_OSCILLATOR_Initialize 3738                                      make_array@i 0085  
                                          ?_atoi 001E                                            ?_main 0001  
                                __end_of___awdiv 2DB4                                   ??_display_text 001B  
                                          STR_10 FDE5                                            STR_11 FE3D  
                                          STR_20 FE5D                                            STR_12 FE2D  
                                          STR_13 FF98                                            STR_21 FF03  
                                          STR_14 FFC4                                            STR_22 FFAC  
                                          STR_30 FF89                                            STR_31 FFE1  
                                          STR_23 FFB4                                            STR_15 FF0E  
                                          STR_40 FFE1                                            STR_32 FFE1  
                                          STR_24 FFE1                                            STR_16 FE7B  
                                          STR_41 FEBC                                            STR_33 FFD3  
                                          STR_25 FFBC                                            STR_17 FD2D  
                                          STR_50 FF2F                                            STR_34 FFE1  
                                          STR_26 FFE1                                            STR_42 FF2F  
                                          STR_18 FE5D                                            STR_51 FFE1  
                                          STR_43 FFE1                                            STR_35 FF5A  
                                          STR_27 FF50                                            STR_19 FDCF  
                                          STR_60 FFE1                                            STR_36 FFE1  
                                          STR_28 FFE1                                            STR_52 FF80  
                                          STR_44 FF24                                            STR_29 FFA4  
                                          STR_37 FF64                                            STR_45 FED4  
                                          STR_53 FE89                                            STR_61 FD4D  
                                          STR_70 FE9F                                            STR_62 FFE1  
                                          STR_38 FFE1                                            STR_46 FF6E  
                                          STR_54 FF3A                                            STR_55 FFE1  
                                          STR_47 FFE1                                            STR_71 FF50  
                                          STR_39 FEBC                                            STR_63 FDB6  
                                          STR_80 FDF3                                            STR_72 FFDC  
                                          STR_64 FFE1                                            STR_56 FFE1  
                                          STR_48 FFE1                                            STR_81 FE97  
                                          STR_49 FF77                                            STR_65 FF19  
                                          STR_57 FEA4                                            STR_73 FE97  
                                          STR_58 FFE1                                            STR_82 FFBC  
                                          STR_74 FF50                                            STR_90 FF5A  
                                          STR_66 FD9D                                            STR_75 FFB4  
                                          STR_91 FF64                                            STR_83 FF89  
                                          STR_67 FF45                                            STR_59 FD68  
                                          STR_92 FE97                                            STR_84 FE97  
                                          STR_76 FDF3                                            STR_68 FFF8  
                                          STR_77 FE97                                            STR_69 FFF8  
                                          STR_93 FF64                                            STR_85 FF89  
                                          STR_78 FFB4                                            STR_86 FF5A  
                                          STR_94 FED4                                            STR_95 FE97  
                                          STR_79 FFBC                                            STR_87 FEF8  
                                          STR_88 FDF3                                            STR_96 FED4  
                                          STR_89 FE97                                            STR_97 FF3A  
                                          STR_98 FE97                                            STR_99 FF3A  
                                _TMR1_StartTimer 37B4                                            ?_puts 0014  
                                          _T0CON 000FD5                                  ___awdiv@divisor 0012  
                                          _T1CON 000FCD                                            _T5CON 000F4E  
                                 __CFG_DEBUG$OFF 000000                                  __end_of___lwdiv 30C0  
                                __end_of___lwmod 330A                                            i2l205 348A  
                                ___awdiv@counter 0014                                            _TMR0H 000FD7  
                                          _TMR1H 000FCF                                            _TMR0L 000FD6  
                                          _TMR1L 000FCE                                            _TMR5H 000F50  
                                          _TMR5L 000F4F                                            _PORTD 000F83  
                                          _TRISA 000F92                                            _TRISB 000F93  
                                          _TRISC 000F94                                            _TRISD 000F95  
                                          _TRISE 000F96                        __size_of_init_CLCD_config 00B4  
              __size_of_TMR0_SetInterruptHandler 000A                                    __CFG_WRT0$OFF 000000  
                                  __CFG_WRT1$OFF 000000                                    __CFG_WRT2$OFF 000000  
                      ?_TMR0_SetInterruptHandler 0010                                    __CFG_WRT3$OFF 000000  
                           _EUSART1_Transmit_ISR 345C                                   __CFG_EBTR0$OFF 000000  
                                 __CFG_FCMEN$OFF 000000                                   __CFG_EBTR1$OFF 000000  
                                 __CFG_EBTR2$OFF 000000                                   __CFG_EBTR3$OFF 000000  
                               __end_of_TMR0_ISR 36E4                                    __CFG_WRTB$OFF 000000  
                                  __CFG_WRTC$OFF 000000                                    __CFG_WRTD$OFF 000000  
                                          _check 007F                                   __CFG_EBTRB$OFF 000000  
                                          _delay 31AA                                            _getch 379A  
                                __end_of_dpowers FD2D                          __end_of_max_display_str 370E  
                                          _cputs 348E                                  __end_of_isdigit 3626  
                             __CFG_MCLRE$EXTMCLR 000000                                            atoi@a 0023  
                                          atoi@s 001E                                            _putch 377E  
                        __size_of_clear_cmd_data 0032                                   ?_EUSART1_Write 0001  
                        __end_of_TMR1_Initialize 35EA                                            pclath 000FFA  
                                 ??_make_display 003C                                            tablat 000FF5  
                                 ??_EUSART1_Read 0010                                            puts@s 0014  
                                          status 000FD8                                   __CFG_HFOFST$ON 000000  
                                __end_of_strcspn 3160                                  __end_of_strncmp 2A98  
                                __end_of_strncpy 2F68                             _scroll_right_to_left 0C8E  
                                 __CFG_PBADEN$ON 000000                         scroll_right_to_left@line 0038  
                                _TMR5_Initialize 353A                                   ??_console_init 002C  
                                __initialization 2E9C                                     __end_of_atoi 2810  
                     __end_of_EUSART1_Initialize 33F6                                     __end_of_main 301A  
                                   __end_of_puts 36C4                           ?_init_clcd_cusotom_lcd 0036  
                    ?_INTERRUPT_InterruptManager 0001                    __size_of_scroll_left_to_right 0338  
                               _cmd_consol_state 0082                                           ??_atoi 0020  
                                         ??_main 0041                                           ??_puts 0016  
                               ??_write_lcd_data 0017                                    __activetblptr 000003  
                                 __CFG_PLLCFG$ON 000000                              collect_row@data_row 0038  
                                  __delay_MS@val 0013                            ?_EUSART1_Transmit_ISR 0001  
                      ??_TMR1_HasOverflowOccured 0010                                  reply_to_host@ch 0180  
                                         ?_delay 0010                          __end_of_TMR0_StartTimer 37BC  
                                         ?_getch 0001                                           ?_cputs 0012  
                                         STR_100 FF45                                           STR_101 FFDC  
                                         STR_102 FFE8                                           STR_110 FE6C  
                                         STR_111 FEAD                                           STR_103 FE97  
                                         STR_104 FF45                                           STR_112 FFFC  
                                         STR_105 FFDA                                           STR_113 FEE0  
                                         STR_106 FEEC                                           STR_114 FEB0  
                                         STR_115 FFDC                                           STR_107 FFDA  
                                         STR_116 FFE8                                           STR_108 FEC8  
                                         STR_109 FFDA                                           STR_117 FDF8  
                                         STR_118 FFCC                                 ___awdiv@dividend 0010  
                                         _ANSELA 000F38                                           ?_putch 0001  
                                         _ANSELB 000F39                                           _ANSELC 000F3A  
                                         _ANSELD 000F3B                                           _ANSELE 000F3C  
                                         _T1GCON 000FCC                                           _T5GCON 000F4D  
                       __size_of_cmd_consol_task 01A2                                   __CFG_WDTEN$OFF 000000  
                                         i2l5201 3484                                           i2l5215 3510  
                                         i2l5207 34F0                                           _RCREG1 000FAE  
                                         _RCSTA1 000FAB                                           _OSCCON 000FD3  
                                         _SPBRG1 000FAF                                           _TXREG1 000FAD  
                          ?_scroll_right_to_left 0036                                           _TXSTA1 000FAC  
                         __size_of_max_uid_range 000E                              _clear_display_array 35A8  
                                 __CFG_XINST$OFF 000000                                collect_column@str 0036  
                        __end_of_TMR1_StartTimer 37B8                                     ?_TMR1_Reload 0001  
                                         ___wmul 3514                                        ??___awdiv 0014  
                                 __CFG_STVREN$ON 000000                                        ??___lwdiv 0014  
                           __size_of_collect_row 00DA                                        ??___lwmod 001B  
                                         _memcpy 330A                                 ?_TMR0_Initialize 0001  
                                         _memset 34BC                                           delay@i 0015  
                                         clear_0 2EC4                                           clear_1 2ED6  
                                         clear_2 2EE2                                           clear_3 2EEE  
                                         clear_4 2EFA                                 ___awdiv@quotient 0016  
                                         _printf 1E1E                                           _strchr 2E2C  
                                         _strcmp 3160                     scroll_off@display_char_count 00DD  
                                         _strcpy 323E                                           _strlen 301A  
                                         _strtok 2A98                                           _strspn 30C0  
                                         _strstr 2C0A                                  _TMR5_StartTimer 37A6  
                                         cputs@s 0012                                        ??_isdigit 0010  
                           ?_clear_display_array 0001                                     __mediumconst FD22  
                                         tblptrh 000FF7                                           tblptrl 000FF6  
                                         tblptru 000FF8                            __end_of_TMR0_CallBack 35A8  
                                ??_EUSART1_Write 0010                          _clear_display_structure 35EA  
       TMR0_SetInterruptHandler@InterruptHandler 0010                                 ?_max_display_str 0001  
                                      ??_strcspn 001A                                  _eusart1RxBuffer 0060  
                    __end_of_max_display_support 3774                                        ??_strncmp 002A  
                                      ??_strncpy 0016                    __size_of_INTERRUPT_Initialize 0004  
                               ??_collect_column 003A                                  _eusart1TxBuffer 0068  
                               ?_TMR1_Initialize 0001                          __end_of_TMR5_Initialize 3560  
                ??_reset_display_structure_count 002C                                _SYSTEM_Initialize 3626  
                          __size_of_clcd_max_col 000E                                       __accesstop 0060  
                          __size_of_clcd_max_row 000E                          __end_of__initialization 2F00  
                             __size_of__delay_MS 0044  scroll_left_to_right@clcd_display_string_details 002C  
                             ?_SYSTEM_Initialize 0001                             __end_of_display_text 2D30  
                                  ___rparam_used 000001              __size_of_clcd_display_string_config 005A  
                                 __pcstackCOMRAM 0001                                     __pidataBANK0 3738  
                            ??_SYSTEM_Initialize 0014                                        ?_TMR0_ISR 0001  
                                  __end_of_delay 31F4                                    __end_of_getch 37A0  
                               ??_conflict_check 0038                                    __end_of_cputs 34BC  
                           _display_struct_count 0074                             cmd_consol_task@_1765 0078  
                                  __end_of_putch 3788                             __end_of_make_display 1E1E  
                           __end_of_EUSART1_Read 342A                                   collect_row@row 003F  
                                 collect_row@str 0036                       __end_of_update_string_data 26B2  
                         __size_of_write_lcd_cmd 001C                           ??_EUSART1_Transmit_ISR 0001  
                          __end_of_reply_to_host 144A                            ??_clear_display_array 002C  
                update_string_data@exist_uid_idx 017A                                 _init_CLCD_config 2B56  
                                  _max_uid_range 36F2                           __size_of_min_uid_range 000E  
                    __end_of_EUSART1_Receive_ISR 3514                                     _clcd_max_col 371C  
                                   _clcd_max_row 370E                             __end_of_console_init 2E2C  
                                        ??_delay 0012                                          ??_getch 0011  
                               ?_TMR0_StartTimer 0001                                          ??_cputs 0014  
                      __end_of_SYSTEM_Initialize 3644                                   _clear_cmd_data 342A  
                                        ??_putch 0011                                    _eusart1RxHead 0045  
                                  _eusart1TxHead 0047                               __size_of_copy_data 01F6  
                                  _eusart1RxTail 0046                                       __pbssBANK0 0060  
                                     __pbssBANK1 0100                                       __pbssBANK2 0200  
                                  _eusart1TxTail 0048                           ??_scroll_right_to_left 00DA  
                                     _data_count 0043                                       __pnvCOMRAM 004E  
          scroll_off@clcd_display_string_details 0036                                ??_cmd_consol_task 0181  
                             __CFG_CCP2MX$PORTC1 000000                 __end_of_TMR0_SetInterruptHandler 3792  
                        __size_of_TMR0_StopTimer 0004                                          ?___wmul 0018  
                               ?_TMR1_StartTimer 0001                                       ??_TMR0_ISR 0002  
                        __end_of_TMR5_StartTimer 37AC                               __CFG_CCP3MX$PORTB5 000000  
                ??_char_enter_mode_left_to_right 0018                                          ?_memcpy 0010  
                                        ?_memset 0024                                          ?_printf 0024  
                                        ?_strchr 0010                                          ?_strcmp 0010  
                                        ?_strcpy 0010                                          ?_strlen 001E  
                                     _heart_beat 3644                          __size_of_TMR1_StopTimer 0004  
                                        ?_strtok 001D                                          ?_strspn 0016  
                                        ?_strstr 002D                                __end_of__delay_MS 32C8  
                                 ?_max_uid_range 0001                        ??_clear_display_structure 002C  
                                        _OSCCON2 000FD2                           __end_of_clear_cmd_data 345C  
                                        _OSCTUNE 000F9B                                          _SPBRGH1 000FB0  
                         copy_data@clcd_str_data 0036                                 write_lcd_cmd@cmd 0017  
                               _print_data_ready 0076                                       _make_array 375E  
                         __size_of_parse_cmd_str 0BE4                                 ?_TMR5_Initialize 0001  
                                  _write_lcd_cmd 3662                                  __CFG_PWRTEN$OFF 000000  
                             __size_of_write_str 0024            __end_of_reset_display_structure_count 36D4  
         __size_of_reset_display_structure_count 0010                    _reset_display_structure_count 36C4  
                                        __Hparam 0000                          ??_init_clcd_cusotom_lcd 0037  
                                  _min_uid_range 36E4                                          __Lparam 0000  
scroll_right_to_left@clcd_display_string_details 0036                                          ___awdiv 2D30  
                                __size_of___wmul 0026                                          ___lwdiv 306E  
                                        ___lwmod 32C8               __end_of_clcd_display_string_config 2FC2  
                     _clcd_display_string_config 2F68                                    copy_data@data 0038  
                              __end_of_copy_data 1C3C                             __size_of_TMR1_Reload 000C  
                                        __pcinit 2E9C                                  __size_of_memcpy 0040  
                                __size_of_memset 002C                                          __ramtop 1000  
                                        __ptext0 2FC2                                          __ptext1 2DB4  
                                        __ptext2 342A                                          __ptext3 2376  
                                        __ptext4 10FA                                          __ptext5 2518  
                                        __ptext6 1C3C                                          __ptext7 0C8E  
                                        __ptext8 2F0A                                          __ptext9 21C6  
                                __size_of_printf 01D8                                          _display 0083  
                                      _T0CONbits 000FD5                          __size_of_TMR5_StopTimer 0006  
                                __size_of_strchr 0070                                  __size_of_strcmp 004A  
                                __size_of_strcpy 0046                                  __size_of_strlen 0054  
                                      _T1CONbits 000FCD                                  __size_of_strtok 00BE  
                                __size_of_strspn 0050                                  __size_of_strstr 00A0  
                                        _dpowers FD23                            _OSCILLATOR_Initialize 372A  
                                     delay@delay 0010                                          _isdigit 3608  
                             _EUSART1_Initialize 33C0                         ??_PIN_MANAGER_Initialize 0010  
                                      _T5CONbits 000F4E                                  ?_clear_cmd_data 0001  
                     __size_of_SYSTEM_Initialize 001E                                          _strcspn 3110  
                                        _strncmp 29C8                                          _strncpy 2F0A  
                          __size_of_display_text 0086                             end_of_initialization 2F00  
                   __end_of_scroll_left_to_right 1782                              ?_EUSART1_Initialize 0001  
                                        memcpy@d 0016                                          memcpy@n 0014  
                                        memcpy@s 0018                                   ?_write_lcd_cmd 0001  
                                    scroll_off@i 00E1                                      scroll_off@j 00DF  
                                    scroll_off@k 00DA                                          memset@c 0026  
                                        memset@n 0028                                          memset@p 002A  
                               cmd_consol_task@i 007A                                   ?_min_uid_range 0001  
                __end_of_clear_display_structure 3608                                   parse_cmd_str@i 00DF  
                                     _reset_clcd 3774                                       _set_cursor 369A  
                                        printf@c 0035                                          printf@f 0024  
                          __size_of_make_display 01E2                                       _scroll_off 21C6  
                                        postdec1 000FE5                                          postdec2 000FDD  
                                        postinc0 000FEE                                          postinc2 000FDE  
                          __size_of_EUSART1_Read 0034                                     _conflict_arr 00B7  
                               ?_TMR5_StartTimer 0001                             ??_EUSART1_Initialize 0010  
                                        strcmp@r 0015                                    _parse_cmd_str 00AA  
                                        strlen@s 001E                                  ??_max_uid_range 0010  
                                        strspn@i 001B                         _TMR0_SetInterruptHandler 3788  
                                      _PORTAbits 000F80                                        _PORTDbits 000F83  
                          __size_of_console_init 0078                                      ?_heart_beat 0001  
                          _TMR5_InterruptHandler 0072            __end_of_char_enter_mode_left_to_right 379A  
         __size_of_char_enter_mode_left_to_right 0008                    _char_enter_mode_left_to_right 3792  
                                   _display_text 2CAA                                __end_of_write_str 3584  
             init_clcd_cusotom_lcd@clcd_init_col 0036                               write_lcd_data@data 0017  
             init_clcd_cusotom_lcd@clcd_init_row 0037                              EUSART1_Write@txData 0010  
                                    ?_make_array 0001                                     _make_display 1C3C  
                                   _EUSART1_Read 33F6                         __end_of_init_CLCD_config 2C0A  
                                  ??_collect_row 003A                                _lcd_display_array 0100  
                                 _TMR0_StopTimer 37B0                                     _console_init 2DB4  
                              make_display@count 003F                     __end_of_INTERRUPT_Initialize 37C0  
                                   write_str@str 0018                                   ?_parse_cmd_str 00DA  
                 ?_reset_display_structure_count 0001                                   __end_of___wmul 353A  
                                collect_column@i 003E                                __size_of_TMR0_ISR 0010  
                                 _TMR1_StopTimer 37AC                                   __end_of_memcpy 334A  
                         ?_OSCILLATOR_Initialize 0001                                   __end_of_memset 34E8  
                       ?_TMR1_HasOverflowOccured 0001                                   __end_of_printf 1FF6  
                         conflict_check@conflict 003C                                   __end_of_strchr 2E9C  
                                 __end_of_strcmp 31AA                                   __end_of_strcpy 3284  
                                 __end_of_strlen 306E                                   __end_of_strtok 2B56  
                                 __end_of_strspn 3110                                   __end_of_strstr 2CAA  
                            start_initialization 2E9C                             set_cursor@col_number 0018  
                       __size_of_TMR0_Initialize 0038                  __size_of_PIN_MANAGER_Initialize 004A  
                                _cmd_consol_task 2376                                      putch@txData 0011  
                                ??_write_lcd_cmd 0017                            __end_of_EUSART1_Write 3388  
                        __size_of_write_lcd_data 001C                             collect_column@column 003D  
                             _update_string_data 2518                                  ??_min_uid_range 0010  
                            __size_of_heart_beat 001E                           __end_of_TMR0_StopTimer 37B4  
                   __size_of_max_display_support 000A                         __size_of_max_display_str 000E  
                                    ?_reset_clcd 0001                              ?_update_string_data 00E7  
                                  _clcd_init_col 0080                         __size_of_TMR1_Initialize 0020  
                                    ?_set_cursor 0018                                    _clcd_init_row 0081  
                                    ?_scroll_off 0036                                         ??___wmul 001C  
                         __size_of_TMR0_CallBack 0024                           __end_of_TMR1_StopTimer 37B0  
                                    __pdataBANK0 00EC                      __end_of_clear_display_array 35CA  
                                       ??_memcpy 0016                                         ??_memset 002A  
                            update_string_data@i 017B                             _scroll_left_to_right 144A  
                                 scroll_off@line 00DC                              __end_of_collect_row 29C8  
                            __size_of_make_array 000C                                         ??_printf 002C  
                                 _TMR5_StopTimer 37A0                                         ??_strchr 0014  
                                       ??_strcmp 0014                                         ??_strcpy 0014  
                                       ??_strlen 0020                                         ??_strtok 0021  
                                       ??_strspn 001A                                   _eusart1RxCount 0044  
                                       ??_strstr 0031                     ??_clcd_display_string_config 0036  
                                    __pbssBIGRAM 0296                                      __pbssCOMRAM 0041  
                           ??_update_string_data 00E9                    __size_of_EUSART1_Transmit_ISR 0032  
                                  __pcstackBANK0 00DA                                    __pcstackBANK1 0178  
                                __delay_MS@delay 0010                                        __delay_MS 3284  
                 ?_char_enter_mode_left_to_right 0001                                     _isdigit$2175 0011  
                   __size_of_EUSART1_Receive_ISR 002C                            _TMR0_InterruptHandler 00F9  
                                      __pnvBANK0 00F9                    __size_of_scroll_right_to_left 046C  
                       __size_of_TMR0_StartTimer 0004                                  ?_TMR0_StopTimer 0001  
                         __size_of_reply_to_host 0350                                 ___lwdiv@dividend 0010  
                         _PIN_MANAGER_Initialize 31F4                                  conflict_check@i 003D  
                                ??_parse_cmd_str 00DC                   __size_of_init_clcd_cusotom_lcd 00DE  
                                      __pintcode 0008                          __size_of_collect_column 01D0  
                  __end_of_init_clcd_cusotom_lcd 28EE                                    __pmediumconst FD22  
                                       ?___awdiv 0010                                         ?___lwdiv 0010  
                                       ?___lwmod 0017                  __end_of_TMR1_HasOverflowOccured 375E  
                                ?_TMR1_StopTimer 0001                           __end_of_TMR5_StopTimer 37A6  
                    update_string_data@end_point 0179                            ?_scroll_left_to_right 002C  
                    ?_clcd_display_string_config 0001                     ??_INTERRUPT_InterruptManager 0002  
                               __CFG_PRICLKEN$ON 000000                                 ??_clear_cmd_data 002C  
                              parse_cmd_str@temp 00EA                          __end_of_cmd_consol_task 2518  
                                      _copy_data 1A46                                         _BAUDCON1 000FB8  
                       __size_of_TMR1_StartTimer 0004                                         ?_isdigit 0001  
                        __size_of_conflict_check 02C4                              __size_of_reset_clcd 000A  
                                     ?__delay_MS 0010                                 ___lwdiv@quotient 0015  
                               _clcd_config_data 0049                                   __size_of_delay 004A  
                            __size_of_set_cursor 0016                                   __size_of_getch 0006  
                                 __size_of_cputs 002E                                    _TMR0_CallBack 3584  
                                       ?_strcspn 0016                                         ?_strncmp 0024  
                            __size_of_scroll_off 01B0                                         ?_strncpy 0010  
                                 __size_of_putch 000A                             _INTERRUPT_Initialize 37BC  
                  conflict_check@new_start_point 0036                             set_cursor@row_number 0019  
                              ??_TMR0_Initialize 0012                              _conflict_data_count 0042  
                                 ___wmul@product 001C                                         _LATEbits 000F8D  
                            parse_cmd_str@i_1680 00E3                              parse_cmd_str@i_1689 00E0  
                                    strncpy@from 0012                                         _PIE1bits 000F9D  
                                    strncpy@size 0014              __size_of_INTERRUPT_InterruptManager 009E  
                                      _valid_cmd 0084                       ??_TMR0_SetInterruptHandler 0012  
                                       i2u344_40 364C                                         i2u407_48 3594  
                                       i2u344_46 364E                                         _PIR1bits 000F9E  
                                       _PIR5bits 000F7E                                      _collect_row 28EE  
                       __size_of_TMR5_Initialize 0026                                         _RCONbits 000FD0  
                                  ??_TMR1_Reload 0010                                 __CFG_WDTPS$32768 000000  
                            parse_cmd_str@column 00E2                                         _TMR0_ISR 36D4  
                              ??_max_display_str 0010                              parse_cmd_str@scroll 00E5  
                                ?_TMR5_StopTimer 0001                         ?_clear_display_structure 0001  
                              ??_TMR1_Initialize 0010                                     ??_heart_beat 0001  
                              ___wmul@multiplier 0018                                       printf@flag 002D  
                                     ?_copy_data 0036                                       printf@prec 002E  
                                  _reply_to_host 10FA                                   ?_TMR0_CallBack 0001  
                                    _INTCON2bits 000FF1                                        copy_data0 2EB0  
                                      _write_str 3560                            ?_INTERRUPT_Initialize 0001  
                                 _write_lcd_data 367E                                     ??_make_array 0002  
                          EUSART1_Read@readValue 0010                               __end_of_heart_beat 3662  
                                       __Hrparam 0000                         scroll_left_to_right@line 0036  
                              ?_init_CLCD_config 0001                    update_string_data@start_point 0178  
                                       __Lrparam 0000                               __CFG_BOREN$SBORDIS 000000  
                             ??_init_CLCD_config 0036                                __CFG_P2BMX$PORTD2 000000  
                         ??_scroll_left_to_right 002E                          ??_OSCILLATOR_Initialize 0010  
                              ??_TMR0_StartTimer 0010                                 __size_of___awdiv 0084  
                    __size_of_EUSART1_Initialize 0036                                 __size_of___lwdiv 0052  
                               __size_of___lwmod 0042                      _clcd_display_string_details 0296  
                             __end_of_make_array 376A                              __end_of_TMR1_Reload 3752  
                          _TMR1_InterruptHandler 0070                            __end_of_max_uid_range 3700  
                                 ?_reply_to_host 0001                                 ?_cmd_consol_task 0001  
                            _max_display_support 376A                         __size_of_TMR5_StartTimer 0006  
                                  ?_clcd_max_col 0001                                         _cmd_data 0086  
                                  ?_clcd_max_row 0001                                 __size_of_isdigit 001E  
                                ___lwdiv@divisor 0012                                      ??__delay_MS 0012  
                         __end_of_write_lcd_data 369A                                  ___lwdiv@counter 0014  
                                       __ptext10 144A                                         __ptext11 2CAA  
                                       __ptext20 36F2                                         __ptext12 369A  
                                       __ptext21 376A                                         __ptext13 3792  
                                     _T1GCONbits 000FCC                                         __ptext30 2F68  
                                       __ptext22 3700                                         __ptext14 1A46  
                                       __ptext31 3560                                         __ptext23 2810  
                                       __ptext15 1782                                         __ptext40 370E  
                                       __ptext32 367E                                         __ptext24 2B56  
                                       __ptext16 3160                                         __ptext41 371C  
                                       __ptext33 31AA                                         __ptext25 3662  
                                       __ptext17 36B0                                         __ptext50 34BC  
                                       __ptext42 00AA                                         __ptext34 330A  
                                       __ptext26 3774                                         __ptext18 348E  
                                       __ptext51 28EE                                         __ptext43 2A98  
                                       __ptext35 3284                                         __ptext27 35A8  
                                       __ptext19 36E4                                         __ptext60 3608  
                                       __ptext52 1FF6                                         __ptext44 30C0  
                                       __ptext36 37AC                                         __ptext28 36C4  
                                       __ptext61 3514                                         __ptext53 301A  
                                       __ptext45 3110                                         __ptext37 3746  
                                       __ptext29 35EA                                         __ptext70 37B4  
                                       __ptext62 379A                                         __ptext54 1E1E  
                                       __ptext46 2C0A                                         __ptext38 3752  
                                       __ptext71 3388                                         __ptext63 33F6  
                                       __ptext55 377E                                         __ptext47 29C8  
                                       __ptext39 2D30                                         __ptext80 3584  
                                       __ptext72 37B8                                         __ptext64 37A0  
                                       __ptext56 334A                                         __ptext48 2E2C  
                                       __ptext81 37C0                                         __ptext73 3788  
                                       __ptext65 37B0                                         __ptext57 32C8  
                                       __ptext49 323E                                         __ptext82 375E  
                                       __ptext74 31F4                                         __ptext66 3626  
                                       __ptext58 306E                                         __ptext83 3644  
                                       __ptext75 372A                                         __ptext67 353A  
                                       __ptext59 26B2                                         __ptext84 345C  
                                       __ptext76 37BC                                         __ptext68 37A6  
                                       __ptext85 34E8                                         __ptext77 33C0  
                                       __ptext69 35CA                                         __ptext86 0000  
                                       __ptext79 36D4                                       ?_write_str 0018  
                               parse_cmd_str@uid 00E4                                 parse_cmd_str@ptr 00E8  
                               parse_cmd_str@row 00E1                                 parse_cmd_str@str 00DA  
                              ??_TMR1_StartTimer 0010                                 __size_of_strcspn 0050  
                               __size_of_strncmp 00D0                                 __size_of_strncpy 005E  
                                     strcpy@from 0012                 __size_of_TMR1_HasOverflowOccured 000C  
                                  __size_of_atoi 015E                                    __size_of_main 0058  
                                     _T5GCONbits 000F4D                                    __size_of_puts 0014  
                                       delay@val 0013                                       strncmp@len 0028  
           __end_of_TMR0_DefaultInterruptHandler 37C2            __size_of_TMR0_DefaultInterruptHandler 0002  
                   _TMR0_DefaultInterruptHandler 37C0                             ?_max_display_support 0010  
                                   ??_reset_clcd 002C                                     ??_set_cursor 0019  
                                 _collect_column 1FF6                                     ??_scroll_off 0038  
                                       _uart_str 0200                                         int$flags 0050  
                                       atoi@sign 0022               __end_of_INTERRUPT_InterruptManager 00A6  
                     _INTERRUPT_InterruptManager 0008                                        printf@val 0033  
                                       _str_data 0150                              _EUSART1_Receive_ISR 34E8  
                                     write_str@i 001A                                ??_TMR5_Initialize 0010  
                                    ??_copy_data 003A                                   ??_clcd_max_col 0010  
                                     _INTCONbits 000FF2                                   ??_clcd_max_row 0010  
                                ??_TMR0_CallBack 0002                                   _conflict_check 1782  
                                       memcpy@d1 0010                                         memcpy@s1 0012  
                                       isdigit@c 0012                                  ?_write_lcd_data 0001  
                         ??_INTERRUPT_Initialize 0010                                         memset@p1 0024  
                             __end_of_reset_clcd 377E                               __end_of_set_cursor 36B0  
                         update_string_data@data 00E7                                cmd_consol_task@ch 0182  
                                       intlevel2 0000                               __end_of_scroll_off 2376  
                               ??_TMR0_StopTimer 0010                             ?_EUSART1_Receive_ISR 0001  
                                      strchr@chr 0012                            __end_of_write_lcd_cmd 367E  
                               ___lwmod@dividend 0017                                        strchr@ptr 0010  
                        ?_PIN_MANAGER_Initialize 0001                            ??_max_display_support 0012  
                                     _RCSTA1bits 000FAB                                        strcspn@s1 0016  
                                      strcspn@s2 0018                            __end_of_min_uid_range 36F2  
                         __end_of_collect_column 21C6                     __end_of_EUSART1_Transmit_ISR 348E  
                                      strncmp@s1 0024                                        strncmp@s2 0026  
                               ??_TMR1_StopTimer 0010                                        strncpy@cp 0016  
                                      strncpy@to 0010                    ?_TMR0_DefaultInterruptHandler 0001  
                                    _TMR1_Reload 3746                                         printf@ap 0031  
                                       printf@cp 002F                                scroll_off@str_len 00DE  
                         __size_of_EUSART1_Write 003E                                  ??_reply_to_host 017D  
                    conflict_check@new_end_point 0037                     __end_of_scroll_right_to_left 10FA  
                         __end_of_conflict_check 1A46                                         strcmp@s1 0010  
                                       strcmp@s2 0012                                  ___lwmod@divisor 0019  
                                _TMR0_Initialize 3388                                         strcpy@cp 0014  
                                       strlen@cp 0022                                         strcpy@to 0010  
                                ___lwmod@counter 001B                                         strcspn@i 001B  
                   __size_of_clear_display_array 0022                            parse_cmd_str@uid_1677 00E6  
                          parse_cmd_str@uid_1688 00E7                      __size_of_update_string_data 019A  
                              __CFG_T3CMX$PORTC0 000000                      conflict_check@exist_uid_idx 003B  
                                       strtok@s1 001D                                         strtok@s2 001F  
                                       strspn@s1 0016                                         strspn@s2 0018  
                                       strtok@sp 007C                                         strstr@s1 002D  
                                       strstr@s2 002F                                 _LCD_20x4_DISPLAY 007E  
                                    ??_write_str 001A                                ??_TMR5_StartTimer 0010  
                          ??_EUSART1_Receive_ISR 0001                   __end_of_PIN_MANAGER_Initialize 323E  
                              __CFG_FOSC$INTIO67 000000                                  _max_display_str 3700  
                                ?_collect_column 0036                                  _TMR1_Initialize 35CA  
                               ??_TMR5_StopTimer 0010                                     ?_collect_row 0036  

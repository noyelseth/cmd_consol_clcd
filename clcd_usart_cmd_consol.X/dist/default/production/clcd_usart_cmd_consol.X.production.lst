

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Nov 11 18:45:37 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   130                           	psect	text108,global,reloc=2,class=CODE,delta=1
   131                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   132                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   133  0000                     
   134                           ; Version 1.40
   135                           ; Generated 01/12/2016 GMT
   136                           ; 
   137                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   138                           ; All rights reserved.
   139                           ; 
   140                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   141                           ; 
   142                           ; Redistribution and use in source and binary forms, with or without modification, are
   143                           ; permitted provided that the following conditions are met:
   144                           ; 
   145                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   146                           ;        conditions and the following disclaimer.
   147                           ; 
   148                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   149                           ;        of conditions and the following disclaimer in the documentation and/or other
   150                           ;        materials provided with the distribution.
   151                           ; 
   152                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   153                           ;        software without specific prior written permission.
   154                           ; 
   155                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   156                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   157                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   158                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   159                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   160                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   161                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   162                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   163                           ; 
   164                           ; 
   165                           ; Code-generator required, PIC18F46K22 Definitions
   166                           ; 
   167                           ; SFR Addresses
   168  0000                     
   169                           	psect	idataBANK1
   170  004D9C                     __pidataBANK1:
   171                           	opt stack 0
   172                           
   173                           ;initializer for _randx
   174  004D9C  0001               	dw	1
   175  004D9E  0000               	dw	0
   176                           
   177                           ;initializer for _uid_count
   178  004DA0  41                 	db	65
   179                           
   180                           ;initializer for _str
   181  004DA1  49                 	db	73
   182  004DA2  4E                 	db	78
   183  004DA3  49                 	db	73
   184  004DA4  54                 	db	84
   185  004DA5  5F                 	db	95
   186  004DA6  53                 	db	83
   187  004DA7  55                 	db	85
   188  004DA8  43                 	db	67
   189  004DA9  43                 	db	67
   190  004DAA  45                 	db	69
   191  004DAB  53                 	db	83
   192  004DAC  53                 	db	83
   193  004DAD  00                 	db	0
   194                           
   195                           	psect	mediumconst
   196  00FC5C                     __pmediumconst:
   197                           	opt stack 0
   198  00FC5C  00                 	db	0
   199  00FC5D                     _dpowers:
   200                           	opt stack 0
   201  00FC5D  0001               	dw	1
   202  00FC5F  000A               	dw	10
   203  00FC61  0064               	dw	100
   204  00FC63  03E8               	dw	1000
   205  00FC65  2710               	dw	10000
   206  00FC67                     __end_of_dpowers:
   207                           	opt stack 0
   208  00FC67                     STR_20:
   209  00FC67  55                 	db	85	;'U'
   210  00FC68  49                 	db	73	;'I'
   211  00FC69  44                 	db	68	;'D'
   212  00FC6A  20                 	db	32
   213  00FC6B  3D                 	db	61	;'='
   214  00FC6C  20                 	db	32
   215  00FC6D  25                 	db	37
   216  00FC6E  63                 	db	99	;'c'
   217  00FC6F  2C                 	db	44
   218  00FC70  20                 	db	32
   219  00FC71  73                 	db	115	;'s'
   220  00FC72  74                 	db	116	;'t'
   221  00FC73  61                 	db	97	;'a'
   222  00FC74  72                 	db	114	;'r'
   223  00FC75  74                 	db	116	;'t'
   224  00FC76  5F                 	db	95	;'_'
   225  00FC77  70                 	db	112	;'p'
   226  00FC78  74                 	db	116	;'t'
   227  00FC79  20                 	db	32
   228  00FC7A  3D                 	db	61	;'='
   229  00FC7B  20                 	db	32
   230  00FC7C  25                 	db	37
   231  00FC7D  64                 	db	100	;'d'
   232  00FC7E  2C                 	db	44
   233  00FC7F  20                 	db	32
   234  00FC80  65                 	db	101	;'e'
   235  00FC81  6E                 	db	110	;'n'
   236  00FC82  64                 	db	100	;'d'
   237  00FC83  5F                 	db	95	;'_'
   238  00FC84  70                 	db	112	;'p'
   239  00FC85  74                 	db	116	;'t'
   240  00FC86  20                 	db	32
   241  00FC87  3D                 	db	61	;'='
   242  00FC88  20                 	db	32
   243  00FC89  25                 	db	37
   244  00FC8A  64                 	db	100	;'d'
   245  00FC8B  0D                 	db	13
   246  00FC8C  0A                 	db	10
   247  00FC8D  00                 	db	0
   248  00FC8E                     STR_17:
   249  00FC8E  55                 	db	85	;'U'
   250  00FC8F  49                 	db	73	;'I'
   251  00FC90  44                 	db	68	;'D'
   252  00FC91  20                 	db	32
   253  00FC92  3D                 	db	61	;'='
   254  00FC93  20                 	db	32
   255  00FC94  25                 	db	37
   256  00FC95  64                 	db	100	;'d'
   257  00FC96  2C                 	db	44
   258  00FC97  20                 	db	32
   259  00FC98  73                 	db	115	;'s'
   260  00FC99  74                 	db	116	;'t'
   261  00FC9A  61                 	db	97	;'a'
   262  00FC9B  72                 	db	114	;'r'
   263  00FC9C  74                 	db	116	;'t'
   264  00FC9D  5F                 	db	95	;'_'
   265  00FC9E  70                 	db	112	;'p'
   266  00FC9F  74                 	db	116	;'t'
   267  00FCA0  20                 	db	32
   268  00FCA1  3D                 	db	61	;'='
   269  00FCA2  20                 	db	32
   270  00FCA3  25                 	db	37
   271  00FCA4  64                 	db	100	;'d'
   272  00FCA5  2C                 	db	44
   273  00FCA6  20                 	db	32
   274  00FCA7  65                 	db	101	;'e'
   275  00FCA8  6E                 	db	110	;'n'
   276  00FCA9  64                 	db	100	;'d'
   277  00FCAA  5F                 	db	95	;'_'
   278  00FCAB  70                 	db	112	;'p'
   279  00FCAC  74                 	db	116	;'t'
   280  00FCAD  20                 	db	32
   281  00FCAE  3D                 	db	61	;'='
   282  00FCAF  20                 	db	32
   283  00FCB0  25                 	db	37
   284  00FCB1  64                 	db	100	;'d'
   285  00FCB2  0D                 	db	13
   286  00FCB3  0A                 	db	10
   287  00FCB4  00                 	db	0
   288  00FCB5                     STR_19:
   289  00FCB5  25                 	db	37
   290  00FCB6  64                 	db	100	;'d'
   291  00FCB7  2E                 	db	46
   292  00FCB8  2E                 	db	46
   293  00FCB9  6A                 	db	106	;'j'
   294  00FCBA  3D                 	db	61	;'='
   295  00FCBB  25                 	db	37
   296  00FCBC  64                 	db	100	;'d'
   297  00FCBD  2C                 	db	44
   298  00FCBE  63                 	db	99	;'c'
   299  00FCBF  6F                 	db	111	;'o'
   300  00FCC0  6E                 	db	110	;'n'
   301  00FCC1  66                 	db	102	;'f'
   302  00FCC2  6C                 	db	108	;'l'
   303  00FCC3  69                 	db	105	;'i'
   304  00FCC4  63                 	db	99	;'c'
   305  00FCC5  74                 	db	116	;'t'
   306  00FCC6  5F                 	db	95	;'_'
   307  00FCC7  63                 	db	99	;'c'
   308  00FCC8  6F                 	db	111	;'o'
   309  00FCC9  75                 	db	117	;'u'
   310  00FCCA  6E                 	db	110	;'n'
   311  00FCCB  74                 	db	116	;'t'
   312  00FCCC  3D                 	db	61	;'='
   313  00FCCD  25                 	db	37
   314  00FCCE  64                 	db	100	;'d'
   315  00FCCF  20                 	db	32
   316  00FCD0  0D                 	db	13
   317  00FCD1  0A                 	db	10
   318  00FCD2  00                 	db	0
   319  00FCD3                     STR_62:
   320  00FCD3  63                 	db	99	;'c'
   321  00FCD4  6D                 	db	109	;'m'
   322  00FCD5  64                 	db	100	;'d'
   323  00FCD6  5F                 	db	95	;'_'
   324  00FCD7  64                 	db	100	;'d'
   325  00FCD8  61                 	db	97	;'a'
   326  00FCD9  74                 	db	116	;'t'
   327  00FCDA  61                 	db	97	;'a'
   328  00FCDB  2E                 	db	46
   329  00FCDC  73                 	db	115	;'s'
   330  00FCDD  74                 	db	116	;'t'
   331  00FCDE  61                 	db	97	;'a'
   332  00FCDF  72                 	db	114	;'r'
   333  00FCE0  74                 	db	116	;'t'
   334  00FCE1  5F                 	db	95	;'_'
   335  00FCE2  63                 	db	99	;'c'
   336  00FCE3  6F                 	db	111	;'o'
   337  00FCE4  6C                 	db	108	;'l'
   338  00FCE5  20                 	db	32
   339  00FCE6  3D                 	db	61	;'='
   340  00FCE7  20                 	db	32
   341  00FCE8  25                 	db	37
   342  00FCE9  64                 	db	100	;'d'
   343  00FCEA  2C                 	db	44
   344  00FCEB  0D                 	db	13
   345  00FCEC  0A                 	db	10
   346  00FCED  00                 	db	0
   347  00FCEE                     STR_60:
   348  00FCEE  63                 	db	99	;'c'
   349  00FCEF  6D                 	db	109	;'m'
   350  00FCF0  64                 	db	100	;'d'
   351  00FCF1  5F                 	db	95	;'_'
   352  00FCF2  64                 	db	100	;'d'
   353  00FCF3  61                 	db	97	;'a'
   354  00FCF4  74                 	db	116	;'t'
   355  00FCF5  61                 	db	97	;'a'
   356  00FCF6  2E                 	db	46
   357  00FCF7  73                 	db	115	;'s'
   358  00FCF8  74                 	db	116	;'t'
   359  00FCF9  61                 	db	97	;'a'
   360  00FCFA  72                 	db	114	;'r'
   361  00FCFB  74                 	db	116	;'t'
   362  00FCFC  5F                 	db	95	;'_'
   363  00FCFD  72                 	db	114	;'r'
   364  00FCFE  6F                 	db	111	;'o'
   365  00FCFF  77                 	db	119	;'w'
   366  00FD00  20                 	db	32
   367  00FD01  3D                 	db	61	;'='
   368  00FD02  20                 	db	32
   369  00FD03  25                 	db	37
   370  00FD04  64                 	db	100	;'d'
   371  00FD05  2C                 	db	44
   372  00FD06  0D                 	db	13
   373  00FD07  0A                 	db	10
   374  00FD08  00                 	db	0
   375  00FD09                     STR_6:
   376  00FD09  64                 	db	100	;'d'
   377  00FD0A  69                 	db	105	;'i'
   378  00FD0B  73                 	db	115	;'s'
   379  00FD0C  70                 	db	112	;'p'
   380  00FD0D  6C                 	db	108	;'l'
   381  00FD0E  61                 	db	97	;'a'
   382  00FD0F  79                 	db	121	;'y'
   383  00FD10  5F                 	db	95	;'_'
   384  00FD11  63                 	db	99	;'c'
   385  00FD12  68                 	db	104	;'h'
   386  00FD13  61                 	db	97	;'a'
   387  00FD14  72                 	db	114	;'r'
   388  00FD15  5F                 	db	95	;'_'
   389  00FD16  63                 	db	99	;'c'
   390  00FD17  6F                 	db	111	;'o'
   391  00FD18  75                 	db	117	;'u'
   392  00FD19  6E                 	db	110	;'n'
   393  00FD1A  74                 	db	116	;'t'
   394  00FD1B  20                 	db	32
   395  00FD1C  3D                 	db	61	;'='
   396  00FD1D  20                 	db	32
   397  00FD1E  25                 	db	37
   398  00FD1F  64                 	db	100	;'d'
   399  00FD20  0D                 	db	13
   400  00FD21  0A                 	db	10
   401  00FD22  00                 	db	0
   402  00FD23                     STR_8:
   403  00FD23  65                 	db	101	;'e'
   404  00FD24  78                 	db	120	;'x'
   405  00FD25  5F                 	db	95	;'_'
   406  00FD26  73                 	db	115	;'s'
   407  00FD27  70                 	db	112	;'p'
   408  00FD28  20                 	db	32
   409  00FD29  3C                 	db	60	;'<'
   410  00FD2A  3D                 	db	61	;'='
   411  00FD2B  20                 	db	32
   412  00FD2C  6E                 	db	110	;'n'
   413  00FD2D  65                 	db	101	;'e'
   414  00FD2E  77                 	db	119	;'w'
   415  00FD2F  5F                 	db	95	;'_'
   416  00FD30  65                 	db	101	;'e'
   417  00FD31  70                 	db	112	;'p'
   418  00FD32  20                 	db	32
   419  00FD33  3C                 	db	60	;'<'
   420  00FD34  3D                 	db	61	;'='
   421  00FD35  65                 	db	101	;'e'
   422  00FD36  78                 	db	120	;'x'
   423  00FD37  5F                 	db	95	;'_'
   424  00FD38  65                 	db	101	;'e'
   425  00FD39  70                 	db	112	;'p'
   426  00FD3A  0D                 	db	13
   427  00FD3B  0A                 	db	10
   428  00FD3C  00                 	db	0
   429  00FD3D                     STR_7:
   430  00FD3D  65                 	db	101	;'e'
   431  00FD3E  78                 	db	120	;'x'
   432  00FD3F  5F                 	db	95	;'_'
   433  00FD40  73                 	db	115	;'s'
   434  00FD41  70                 	db	112	;'p'
   435  00FD42  20                 	db	32
   436  00FD43  3C                 	db	60	;'<'
   437  00FD44  3D                 	db	61	;'='
   438  00FD45  20                 	db	32
   439  00FD46  6E                 	db	110	;'n'
   440  00FD47  65                 	db	101	;'e'
   441  00FD48  77                 	db	119	;'w'
   442  00FD49  5F                 	db	95	;'_'
   443  00FD4A  73                 	db	115	;'s'
   444  00FD4B  70                 	db	112	;'p'
   445  00FD4C  20                 	db	32
   446  00FD4D  3C                 	db	60	;'<'
   447  00FD4E  3D                 	db	61	;'='
   448  00FD4F  65                 	db	101	;'e'
   449  00FD50  78                 	db	120	;'x'
   450  00FD51  5F                 	db	95	;'_'
   451  00FD52  65                 	db	101	;'e'
   452  00FD53  70                 	db	112	;'p'
   453  00FD54  0D                 	db	13
   454  00FD55  0A                 	db	10
   455  00FD56  00                 	db	0
   456  00FD57                     STR_67:
   457  00FD57  63                 	db	99	;'c'
   458  00FD58  6D                 	db	109	;'m'
   459  00FD59  64                 	db	100	;'d'
   460  00FD5A  5F                 	db	95	;'_'
   461  00FD5B  64                 	db	100	;'d'
   462  00FD5C  61                 	db	97	;'a'
   463  00FD5D  74                 	db	116	;'t'
   464  00FD5E  61                 	db	97	;'a'
   465  00FD5F  2E                 	db	46
   466  00FD60  65                 	db	101	;'e'
   467  00FD61  6E                 	db	110	;'n'
   468  00FD62  64                 	db	100	;'d'
   469  00FD63  5F                 	db	95	;'_'
   470  00FD64  63                 	db	99	;'c'
   471  00FD65  6F                 	db	111	;'o'
   472  00FD66  6C                 	db	108	;'l'
   473  00FD67  20                 	db	32
   474  00FD68  3D                 	db	61	;'='
   475  00FD69  20                 	db	32
   476  00FD6A  25                 	db	37
   477  00FD6B  64                 	db	100	;'d'
   478  00FD6C  2C                 	db	44
   479  00FD6D  0D                 	db	13
   480  00FD6E  0A                 	db	10
   481  00FD6F  00                 	db	0
   482  00FD70                     STR_64:
   483  00FD70  63                 	db	99	;'c'
   484  00FD71  6D                 	db	109	;'m'
   485  00FD72  64                 	db	100	;'d'
   486  00FD73  5F                 	db	95	;'_'
   487  00FD74  64                 	db	100	;'d'
   488  00FD75  61                 	db	97	;'a'
   489  00FD76  74                 	db	116	;'t'
   490  00FD77  61                 	db	97	;'a'
   491  00FD78  2E                 	db	46
   492  00FD79  65                 	db	101	;'e'
   493  00FD7A  6E                 	db	110	;'n'
   494  00FD7B  64                 	db	100	;'d'
   495  00FD7C  5F                 	db	95	;'_'
   496  00FD7D  72                 	db	114	;'r'
   497  00FD7E  6F                 	db	111	;'o'
   498  00FD7F  77                 	db	119	;'w'
   499  00FD80  20                 	db	32
   500  00FD81  3D                 	db	61	;'='
   501  00FD82  20                 	db	32
   502  00FD83  25                 	db	37
   503  00FD84  64                 	db	100	;'d'
   504  00FD85  2C                 	db	44
   505  00FD86  0D                 	db	13
   506  00FD87  0A                 	db	10
   507  00FD88  00                 	db	0
   508  00FD89                     STR_11:
   509  00FD89  64                 	db	100	;'d'
   510  00FD8A  69                 	db	105	;'i'
   511  00FD8B  73                 	db	115	;'s'
   512  00FD8C  70                 	db	112	;'p'
   513  00FD8D  6C                 	db	108	;'l'
   514  00FD8E  61                 	db	97	;'a'
   515  00FD8F  79                 	db	121	;'y'
   516  00FD90  5F                 	db	95	;'_'
   517  00FD91  64                 	db	100	;'d'
   518  00FD92  61                 	db	97	;'a'
   519  00FD93  74                 	db	116	;'t'
   520  00FD94  61                 	db	97	;'a'
   521  00FD95  20                 	db	32
   522  00FD96  3D                 	db	61	;'='
   523  00FD97  20                 	db	32
   524  00FD98  25                 	db	37
   525  00FD99  73                 	db	115	;'s'
   526  00FD9A  0D                 	db	13
   527  00FD9B  0A                 	db	10
   528  00FD9C  00                 	db	0
   529  00FD9D                     STR_30:
   530  00FD9D  64                 	db	100	;'d'
   531  00FD9E  69                 	db	105	;'i'
   532  00FD9F  73                 	db	115	;'s'
   533  00FDA0  70                 	db	112	;'p'
   534  00FDA1  6C                 	db	108	;'l'
   535  00FDA2  61                 	db	97	;'a'
   536  00FDA3  79                 	db	121	;'y'
   537  00FDA4  5F                 	db	95	;'_'
   538  00FDA5  66                 	db	102	;'f'
   539  00FDA6  72                 	db	114	;'r'
   540  00FDA7  71                 	db	113	;'q'
   541  00FDA8  20                 	db	32
   542  00FDA9  3D                 	db	61	;'='
   543  00FDAA  20                 	db	32
   544  00FDAB  25                 	db	37
   545  00FDAC  64                 	db	100	;'d'
   546  00FDAD  0D                 	db	13
   547  00FDAE  0A                 	db	10
   548  00FDAF  00                 	db	0
   549  00FDB0                     STR_24:
   550  00FDB0  73                 	db	115	;'s'
   551  00FDB1  69                 	db	105	;'i'
   552  00FDB2  7A                 	db	122	;'z'
   553  00FDB3  65                 	db	101	;'e'
   554  00FDB4  6F                 	db	111	;'o'
   555  00FDB5  66                 	db	102	;'f'
   556  00FDB6  28                 	db	40
   557  00FDB7  73                 	db	115	;'s'
   558  00FDB8  74                 	db	116	;'t'
   559  00FDB9  72                 	db	114	;'r'
   560  00FDBA  29                 	db	41
   561  00FDBB  20                 	db	32
   562  00FDBC  3D                 	db	61	;'='
   563  00FDBD  20                 	db	32
   564  00FDBE  25                 	db	37
   565  00FDBF  64                 	db	100	;'d'
   566  00FDC0  0D                 	db	13
   567  00FDC1  0A                 	db	10
   568  00FDC2  00                 	db	0
   569  00FDC3                     STR_149:
   570  00FDC3  49                 	db	73	;'I'
   571  00FDC4  6E                 	db	110	;'n'
   572  00FDC5  69                 	db	105	;'i'
   573  00FDC6  74                 	db	116	;'t'
   574  00FDC7  5F                 	db	95	;'_'
   575  00FDC8  63                 	db	99	;'c'
   576  00FDC9  6F                 	db	111	;'o'
   577  00FDCA  6D                 	db	109	;'m'
   578  00FDCB  70                 	db	112	;'p'
   579  00FDCC  6C                 	db	108	;'l'
   580  00FDCD  65                 	db	101	;'e'
   581  00FDCE  74                 	db	116	;'t'
   582  00FDCF  65                 	db	101	;'e'
   583  00FDD0  2E                 	db	46
   584  00FDD1  2E                 	db	46
   585  00FDD2  0D                 	db	13
   586  00FDD3  0A                 	db	10
   587  00FDD4  00                 	db	0
   588  00FDD5                     STR_31:
   589  00FDD5  6F                 	db	111	;'o'
   590  00FDD6  76                 	db	118	;'v'
   591  00FDD7  65                 	db	101	;'e'
   592  00FDD8  72                 	db	114	;'r'
   593  00FDD9  5F                 	db	95	;'_'
   594  00FDDA  77                 	db	119	;'w'
   595  00FDDB  72                 	db	114	;'r'
   596  00FDDC  69                 	db	105	;'i'
   597  00FDDD  74                 	db	116	;'t'
   598  00FDDE  65                 	db	101	;'e'
   599  00FDDF  20                 	db	32
   600  00FDE0  3D                 	db	61	;'='
   601  00FDE1  20                 	db	32
   602  00FDE2  25                 	db	37
   603  00FDE3  64                 	db	100	;'d'
   604  00FDE4  0D                 	db	13
   605  00FDE5  0A                 	db	10
   606  00FDE6  00                 	db	0
   607  00FDE7                     STR_3:
   608  00FDE7  73                 	db	115	;'s'
   609  00FDE8  74                 	db	116	;'t'
   610  00FDE9  72                 	db	114	;'r'
   611  00FDEA  69                 	db	105	;'i'
   612  00FDEB  6E                 	db	110	;'n'
   613  00FDEC  67                 	db	103	;'g'
   614  00FDED  5F                 	db	95	;'_'
   615  00FDEE  63                 	db	99	;'c'
   616  00FDEF  6F                 	db	111	;'o'
   617  00FDF0  75                 	db	117	;'u'
   618  00FDF1  6E                 	db	110	;'n'
   619  00FDF2  74                 	db	116	;'t'
   620  00FDF3  20                 	db	32
   621  00FDF4  3D                 	db	61	;'='
   622  00FDF5  20                 	db	32
   623  00FDF6  25                 	db	37
   624  00FDF7  64                 	db	100	;'d'
   625  00FDF8  00                 	db	0
   626  00FDF9                     STR_29:
   627  00FDF9  64                 	db	100	;'d'
   628  00FDFA  69                 	db	105	;'i'
   629  00FDFB  72                 	db	114	;'r'
   630  00FDFC  65                 	db	101	;'e'
   631  00FDFD  63                 	db	99	;'c'
   632  00FDFE  74                 	db	116	;'t'
   633  00FDFF  69                 	db	105	;'i'
   634  00FE00  6F                 	db	111	;'o'
   635  00FE01  6E                 	db	110	;'n'
   636  00FE02  20                 	db	32
   637  00FE03  3D                 	db	61	;'='
   638  00FE04  20                 	db	32
   639  00FE05  25                 	db	37
   640  00FE06  64                 	db	100	;'d'
   641  00FE07  0D                 	db	13
   642  00FE08  0A                 	db	10
   643  00FE09  00                 	db	0
   644  00FE0A                     STR_4:
   645  00FE0A  75                 	db	117	;'u'
   646  00FE0B  69                 	db	105	;'i'
   647  00FE0C  64                 	db	100	;'d'
   648  00FE0D  5F                 	db	95	;'_'
   649  00FE0E  72                 	db	114	;'r'
   650  00FE0F  61                 	db	97	;'a'
   651  00FE10  6E                 	db	110	;'n'
   652  00FE11  67                 	db	103	;'g'
   653  00FE12  65                 	db	101	;'e'
   654  00FE13  20                 	db	32
   655  00FE14  3D                 	db	61	;'='
   656  00FE15  20                 	db	32
   657  00FE16  25                 	db	37
   658  00FE17  64                 	db	100	;'d'
   659  00FE18  0D                 	db	13
   660  00FE19  0A                 	db	10
   661  00FE1A  00                 	db	0
   662  00FE1B  6D                 	db	109	;'m'
   663  00FE1C  69                 	db	105	;'i'
   664  00FE1D  64                 	db	100	;'d'
   665  00FE1E  5F                 	db	95	;'_'
   666  00FE1F  63                 	db	99	;'c'
   667  00FE20  68                 	db	104	;'h'
   668  00FE21  61                 	db	97	;'a'
   669  00FE22  72                 	db	114	;'r'
   670  00FE23  20                 	db	32
   671  00FE24  3D                 	db	61	;'='
   672  00FE25  20                 	db	32
   673  00FE26  25                 	db	37
   674  00FE27  64                 	db	100	;'d'
   675  00FE28  0D                 	db	13
   676  00FE29  0A                 	db	10
   677  00FE2A  00                 	db	0
   678  00FE2B  25                 	db	37
   679  00FE2C  73                 	db	115	;'s'
   680  00FE2D  2C                 	db	44
   681  00FE2E  20                 	db	32
   682  00FE2F  73                 	db	115	;'s'
   683  00FE30  74                 	db	116	;'t'
   684  00FE31  72                 	db	114	;'r'
   685  00FE32  6C                 	db	108	;'l'
   686  00FE33  65                 	db	101	;'e'
   687  00FE34  6E                 	db	110	;'n'
   688  00FE35  20                 	db	32
   689  00FE36  25                 	db	37
   690  00FE37  64                 	db	100	;'d'
   691  00FE38  0D                 	db	13
   692  00FE39  0A                 	db	10
   693  00FE3A  00                 	db	0
   694  00FE3B                     STR_21:
   695  00FE3B  63                 	db	99	;'c'
   696  00FE3C  6F                 	db	111	;'o'
   697  00FE3D  6E                 	db	110	;'n'
   698  00FE3E  66                 	db	102	;'f'
   699  00FE3F  6C                 	db	108	;'l'
   700  00FE40  69                 	db	105	;'i'
   701  00FE41  63                 	db	99	;'c'
   702  00FE42  74                 	db	116	;'t'
   703  00FE43  3A                 	db	58	;':'
   704  00FE44  20                 	db	32
   705  00FE45  75                 	db	117	;'u'
   706  00FE46  69                 	db	105	;'i'
   707  00FE47  64                 	db	100	;'d'
   708  00FE48  0D                 	db	13
   709  00FE49  0A                 	db	10
   710  00FE4A  00                 	db	0
   711  00FE4B                     STR_125:
   712  00FE4B  45                 	db	69	;'E'
   713  00FE4C  52                 	db	82	;'R'
   714  00FE4D  52                 	db	82	;'R'
   715  00FE4E  5F                 	db	95	;'_'
   716  00FE4F  53                 	db	83	;'S'
   717  00FE50  43                 	db	67	;'C'
   718  00FE51  52                 	db	82	;'R'
   719  00FE52  4F                 	db	79	;'O'
   720  00FE53  4C                 	db	76	;'L'
   721  00FE54  4C                 	db	76	;'L'
   722  00FE55  5F                 	db	95	;'_'
   723  00FE56  53                 	db	83	;'S'
   724  00FE57  45                 	db	69	;'E'
   725  00FE58  54                 	db	84	;'T'
   726  00FE59  00                 	db	0
   727  00FE5A                     STR_18:
   728  00FE5A  63                 	db	99	;'c'
   729  00FE5B  6F                 	db	111	;'o'
   730  00FE5C  6E                 	db	110	;'n'
   731  00FE5D  66                 	db	102	;'f'
   732  00FE5E  6C                 	db	108	;'l'
   733  00FE5F  69                 	db	105	;'i'
   734  00FE60  63                 	db	99	;'c'
   735  00FE61  74                 	db	116	;'t'
   736  00FE62  2E                 	db	46
   737  00FE63  2E                 	db	46
   738  00FE64  2E                 	db	46
   739  00FE65  32                 	db	50	;'2'
   740  00FE66  0D                 	db	13
   741  00FE67  0A                 	db	10
   742  00FE68  00                 	db	0
   743  00FE69                     STR_128:
   744  00FE69  45                 	db	69	;'E'
   745  00FE6A  52                 	db	82	;'R'
   746  00FE6B  52                 	db	82	;'R'
   747  00FE6C  5F                 	db	95	;'_'
   748  00FE6D  43                 	db	67	;'C'
   749  00FE6E  4F                 	db	79	;'O'
   750  00FE6F  4E                 	db	78	;'N'
   751  00FE70  46                 	db	70	;'F'
   752  00FE71  4C                 	db	76	;'L'
   753  00FE72  49                 	db	73	;'I'
   754  00FE73  43                 	db	67	;'C'
   755  00FE74  54                 	db	84	;'T'
   756  00FE75  00                 	db	0
   757  00FE76                     STR_58:
   758  00FE76  75                 	db	117	;'u'
   759  00FE77  69                 	db	105	;'i'
   760  00FE78  64                 	db	100	;'d'
   761  00FE79  20                 	db	32
   762  00FE7A  3D                 	db	61	;'='
   763  00FE7B  20                 	db	32
   764  00FE7C  25                 	db	37
   765  00FE7D  64                 	db	100	;'d'
   766  00FE7E  2C                 	db	44
   767  00FE7F  0D                 	db	13
   768  00FE80  0A                 	db	10
   769  00FE81  00                 	db	0
   770  00FE82                     STR_33:
   771  00FE82  43                 	db	67	;'C'
   772  00FE83  6F                 	db	111	;'o'
   773  00FE84  6C                 	db	108	;'l'
   774  00FE85  32                 	db	50	;'2'
   775  00FE86  20                 	db	32
   776  00FE87  3D                 	db	61	;'='
   777  00FE88  20                 	db	32
   778  00FE89  25                 	db	37
   779  00FE8A  64                 	db	100	;'d'
   780  00FE8B  0D                 	db	13
   781  00FE8C  0A                 	db	10
   782  00FE8D  00                 	db	0
   783  00FE8E                     STR_28:
   784  00FE8E  72                 	db	114	;'r'
   785  00FE8F  6F                 	db	111	;'o'
   786  00FE90  77                 	db	119	;'w'
   787  00FE91  32                 	db	50	;'2'
   788  00FE92  20                 	db	32
   789  00FE93  3D                 	db	61	;'='
   790  00FE94  20                 	db	32
   791  00FE95  25                 	db	37
   792  00FE96  64                 	db	100	;'d'
   793  00FE97  0D                 	db	13
   794  00FE98  0A                 	db	10
   795  00FE99  00                 	db	0
   796  00FE9A                     STR_137:
   797  00FE9A  49                 	db	73	;'I'
   798  00FE9B  6E                 	db	110	;'n'
   799  00FE9C  69                 	db	105	;'i'
   800  00FE9D  74                 	db	116	;'t'
   801  00FE9E  5F                 	db	95	;'_'
   802  00FE9F  44                 	db	68	;'D'
   803  00FEA0  6F                 	db	111	;'o'
   804  00FEA1  6E                 	db	110	;'n'
   805  00FEA2  65                 	db	101	;'e'
   806  00FEA3  0D                 	db	13
   807  00FEA4  0A                 	db	10
   808  00FEA5  00                 	db	0
   809  00FEA6                     STR_32:
   810  00FEA6  63                 	db	99	;'c'
   811  00FEA7  6F                 	db	111	;'o'
   812  00FEA8  6C                 	db	108	;'l'
   813  00FEA9  31                 	db	49	;'1'
   814  00FEAA  20                 	db	32
   815  00FEAB  3D                 	db	61	;'='
   816  00FEAC  20                 	db	32
   817  00FEAD  25                 	db	37
   818  00FEAE  73                 	db	115	;'s'
   819  00FEAF  0D                 	db	13
   820  00FEB0  0A                 	db	10
   821  00FEB1  00                 	db	0
   822  00FEB2                     STR_27:
   823  00FEB2  72                 	db	114	;'r'
   824  00FEB3  6F                 	db	111	;'o'
   825  00FEB4  77                 	db	119	;'w'
   826  00FEB5  31                 	db	49	;'1'
   827  00FEB6  20                 	db	32
   828  00FEB7  3D                 	db	61	;'='
   829  00FEB8  20                 	db	32
   830  00FEB9  25                 	db	37
   831  00FEBA  73                 	db	115	;'s'
   832  00FEBB  0D                 	db	13
   833  00FEBC  0A                 	db	10
   834  00FEBD  00                 	db	0
   835  00FEBE                     STR_46:
   836  00FEBE  74                 	db	116	;'t'
   837  00FEBF  65                 	db	101	;'e'
   838  00FEC0  6D                 	db	109	;'m'
   839  00FEC1  70                 	db	112	;'p'
   840  00FEC2  20                 	db	32
   841  00FEC3  3D                 	db	61	;'='
   842  00FEC4  20                 	db	32
   843  00FEC5  25                 	db	37
   844  00FEC6  73                 	db	115	;'s'
   845  00FEC7  2C                 	db	44
   846  00FEC8  20                 	db	32
   847  00FEC9  00                 	db	0
   848  00FECA                     STR_123:
   849  00FECA  45                 	db	69	;'E'
   850  00FECB  52                 	db	82	;'R'
   851  00FECC  52                 	db	82	;'R'
   852  00FECD  5F                 	db	95	;'_'
   853  00FECE  52                 	db	82	;'R'
   854  00FECF  4F                 	db	79	;'O'
   855  00FED0  57                 	db	87	;'W'
   856  00FED1  5F                 	db	95	;'_'
   857  00FED2  43                 	db	67	;'C'
   858  00FED3  4F                 	db	79	;'O'
   859  00FED4  4C                 	db	76	;'L'
   860  00FED5  00                 	db	0
   861  00FED6                     STR_136:
   862  00FED6  45                 	db	69	;'E'
   863  00FED7  52                 	db	82	;'R'
   864  00FED8  52                 	db	82	;'R'
   865  00FED9  5F                 	db	95	;'_'
   866  00FEDA  43                 	db	67	;'C'
   867  00FEDB  4D                 	db	77	;'M'
   868  00FEDC  44                 	db	68	;'D'
   869  00FEDD  5F                 	db	95	;'_'
   870  00FEDE  4C                 	db	76	;'L'
   871  00FEDF  45                 	db	69	;'E'
   872  00FEE0  4E                 	db	78	;'N'
   873  00FEE1  00                 	db	0
   874  00FEE2                     STR_121:
   875  00FEE2  45                 	db	69	;'E'
   876  00FEE3  52                 	db	82	;'R'
   877  00FEE4  52                 	db	82	;'R'
   878  00FEE5  5F                 	db	95	;'_'
   879  00FEE6  53                 	db	83	;'S'
   880  00FEE7  54                 	db	84	;'T'
   881  00FEE8  52                 	db	82	;'R'
   882  00FEE9  5F                 	db	95	;'_'
   883  00FEEA  53                 	db	83	;'S'
   884  00FEEB  45                 	db	69	;'E'
   885  00FEEC  54                 	db	84	;'T'
   886  00FEED  00                 	db	0
   887  00FEEE                     STR_104:
   888  00FEEE  25                 	db	37
   889  00FEEF  73                 	db	115	;'s'
   890  00FEF0  2E                 	db	46
   891  00FEF1  2E                 	db	46
   892  00FEF2  2C                 	db	44
   893  00FEF3  20                 	db	32
   894  00FEF4  4F                 	db	79	;'O'
   895  00FEF5  4B                 	db	75	;'K'
   896  00FEF6  0D                 	db	13
   897  00FEF7  0A                 	db	10
   898  00FEF8  00                 	db	0
   899  00FEF9                     STR_102:
   900  00FEF9  25                 	db	37
   901  00FEFA  64                 	db	100	;'d'
   902  00FEFB  2C                 	db	44
   903  00FEFC  25                 	db	37
   904  00FEFD  63                 	db	99	;'c'
   905  00FEFE  2D                 	db	45
   906  00FEFF  25                 	db	37
   907  00FF00  63                 	db	99	;'c'
   908  00FF01  0D                 	db	13
   909  00FF02  0A                 	db	10
   910  00FF03  00                 	db	0
   911  00FF04                     STR_66:
   912  00FF04  63                 	db	99	;'c'
   913  00FF05  6F                 	db	111	;'o'
   914  00FF06  6C                 	db	108	;'l'
   915  00FF07  20                 	db	32
   916  00FF08  3D                 	db	61	;'='
   917  00FF09  20                 	db	32
   918  00FF0A  25                 	db	37
   919  00FF0B  73                 	db	115	;'s'
   920  00FF0C  0D                 	db	13
   921  00FF0D  0A                 	db	10
   922  00FF0E  00                 	db	0
   923  00FF0F                     STR_72:
   924  00FF0F  64                 	db	100	;'d'
   925  00FF10  61                 	db	97	;'a'
   926  00FF11  74                 	db	116	;'t'
   927  00FF12  61                 	db	97	;'a'
   928  00FF13  3D                 	db	61	;'='
   929  00FF14  25                 	db	37
   930  00FF15  73                 	db	115	;'s'
   931  00FF16  0D                 	db	13
   932  00FF17  0A                 	db	10
   933  00FF18  00                 	db	0
   934  00FF19                     STR_51:
   935  00FF19  25                 	db	37
   936  00FF1A  73                 	db	115	;'s'
   937  00FF1B  2E                 	db	46
   938  00FF1C  2E                 	db	46
   939  00FF1D  2E                 	db	46
   940  00FF1E  34                 	db	52	;'4'
   941  00FF1F  0D                 	db	13
   942  00FF20  0A                 	db	10
   943  00FF21  00                 	db	0
   944  00FF22                     STR_53:
   945  00FF22  25                 	db	37
   946  00FF23  73                 	db	115	;'s'
   947  00FF24  2E                 	db	46
   948  00FF25  2E                 	db	46
   949  00FF26  2E                 	db	46
   950  00FF27  35                 	db	53	;'5'
   951  00FF28  0D                 	db	13
   952  00FF29  0A                 	db	10
   953  00FF2A  00                 	db	0
   954  00FF2B                     STR_55:
   955  00FF2B  25                 	db	37
   956  00FF2C  73                 	db	115	;'s'
   957  00FF2D  2E                 	db	46
   958  00FF2E  2E                 	db	46
   959  00FF2F  2E                 	db	46
   960  00FF30  36                 	db	54	;'6'
   961  00FF31  0D                 	db	13
   962  00FF32  0A                 	db	10
   963  00FF33  00                 	db	0
   964  00FF34                     STR_129:
   965  00FF34  25                 	db	37
   966  00FF35  64                 	db	100	;'d'
   967  00FF36  0D                 	db	13
   968  00FF37  0A                 	db	10
   969  00FF38  4F                 	db	79	;'O'
   970  00FF39  4B                 	db	75	;'K'
   971  00FF3A  0D                 	db	13
   972  00FF3B  0A                 	db	10
   973  00FF3C  00                 	db	0
   974  00FF3D                     STR_93:
   975  00FF3D  25                 	db	37
   976  00FF3E  64                 	db	100	;'d'
   977  00FF3F  0D                 	db	13
   978  00FF40  0A                 	db	10
   979  00FF41  25                 	db	37
   980  00FF42  73                 	db	115	;'s'
   981  00FF43  0D                 	db	13
   982  00FF44  0A                 	db	10
   983  00FF45  00                 	db	0
   984  00FF46                     STR_90:
   985  00FF46  25                 	db	37
   986  00FF47  73                 	db	115	;'s'
   987  00FF48  0D                 	db	13
   988  00FF49  0A                 	db	10
   989  00FF4A  25                 	db	37
   990  00FF4B  73                 	db	115	;'s'
   991  00FF4C  0D                 	db	13
   992  00FF4D  0A                 	db	10
   993  00FF4E  00                 	db	0
   994  00FF4F                     STR_70:
   995  00FF4F  43                 	db	67	;'C'
   996  00FF50  4D                 	db	77	;'M'
   997  00FF51  44                 	db	68	;'D'
   998  00FF52  3D                 	db	61	;'='
   999  00FF53  25                 	db	37
  1000  00FF54  73                 	db	115	;'s'
  1001  00FF55  0D                 	db	13
  1002  00FF56  0A                 	db	10
  1003  00FF57  00                 	db	0
  1004  00FF58                     STR_144:
  1005  00FF58  45                 	db	69	;'E'
  1006  00FF59  52                 	db	82	;'R'
  1007  00FF5A  52                 	db	82	;'R'
  1008  00FF5B  5F                 	db	95	;'_'
  1009  00FF5C  49                 	db	73	;'I'
  1010  00FF5D  4E                 	db	78	;'N'
  1011  00FF5E  49                 	db	73	;'I'
  1012  00FF5F  54                 	db	84	;'T'
  1013  00FF60  00                 	db	0
  1014  00FF61                     STR_2:
  1015  00FF61  63                 	db	99	;'c'
  1016  00FF62  6F                 	db	111	;'o'
  1017  00FF63  6C                 	db	108	;'l'
  1018  00FF64  20                 	db	32
  1019  00FF65  3D                 	db	61	;'='
  1020  00FF66  20                 	db	32
  1021  00FF67  25                 	db	37
  1022  00FF68  64                 	db	100	;'d'
  1023  00FF69  00                 	db	0
  1024  00FF6A                     STR_1:
  1025  00FF6A  72                 	db	114	;'r'
  1026  00FF6B  6F                 	db	111	;'o'
  1027  00FF6C  77                 	db	119	;'w'
  1028  00FF6D  20                 	db	32
  1029  00FF6E  3D                 	db	61	;'='
  1030  00FF6F  20                 	db	32
  1031  00FF70  25                 	db	37
  1032  00FF71  64                 	db	100	;'d'
  1033  00FF72  00                 	db	0
  1034  00FF73                     STR_39:
  1035  00FF73  2E                 	db	46
  1036  00FF74  2E                 	db	46
  1037  00FF75  2E                 	db	46
  1038  00FF76  2E                 	db	46
  1039  00FF77  2E                 	db	46
  1040  00FF78  0D                 	db	13
  1041  00FF79  0A                 	db	10
  1042  00FF7A  00                 	db	0
  1043  00FF7B                     STR_34:
  1044  00FF7B  25                 	db	37
  1045  00FF7C  73                 	db	115	;'s'
  1046  00FF7D  2E                 	db	46
  1047  00FF7E  2E                 	db	46
  1048  00FF7F  32                 	db	50	;'2'
  1049  00FF80  0D                 	db	13
  1050  00FF81  0A                 	db	10
  1051  00FF82  00                 	db	0
  1052  00FF83                     STR_50:
  1053  00FF83  53                 	db	83	;'S'
  1054  00FF84  44                 	db	68	;'D'
  1055  00FF85  53                 	db	83	;'S'
  1056  00FF86  43                 	db	67	;'C'
  1057  00FF87  52                 	db	82	;'R'
  1058  00FF88  4F                 	db	79	;'O'
  1059  00FF89  4C                 	db	76	;'L'
  1060  00FF8A  00                 	db	0
  1061  00FF8B                     STR_150:
  1062  00FF8B  28                 	db	40
  1063  00FF8C  6E                 	db	110	;'n'
  1064  00FF8D  75                 	db	117	;'u'
  1065  00FF8E  6C                 	db	108	;'l'
  1066  00FF8F  6C                 	db	108	;'l'
  1067  00FF90  29                 	db	41
  1068  00FF91  00                 	db	0
  1069  00FF92                     STR_145:
  1070  00FF92  25                 	db	37
  1071  00FF93  73                 	db	115	;'s'
  1072  00FF94  0D                 	db	13
  1073  00FF95  0A                 	db	10
  1074  00FF96  0D                 	db	13
  1075  00FF97  0A                 	db	10
  1076  00FF98  00                 	db	0
  1077  00FF99                     STR_42:
  1078  00FF99  25                 	db	37
  1079  00FF9A  73                 	db	115	;'s'
  1080  00FF9B  2E                 	db	46
  1081  00FF9C  2E                 	db	46
  1082  00FF9D  0D                 	db	13
  1083  00FF9E  0A                 	db	10
  1084  00FF9F  00                 	db	0
  1085  00FFA0                     STR_35:
  1086  00FFA0  2D                 	db	45
  1087  00FFA1  27                 	db	39
  1088  00FFA2  2C                 	db	44
  1089  00FFA3  20                 	db	32
  1090  00FFA4  2F                 	db	47
  1091  00FFA5  3D                 	db	61	;'='
  1092  00FFA6  00                 	db	0
  1093  00FFA7                     STR_56:
  1094  00FFA7  53                 	db	83	;'S'
  1095  00FFA8  44                 	db	68	;'D'
  1096  00FFA9  53                 	db	83	;'S'
  1097  00FFAA  45                 	db	69	;'E'
  1098  00FFAB  52                 	db	82	;'R'
  1099  00FFAC  43                 	db	67	;'C'
  1100  00FFAD  00                 	db	0
  1101  00FFAE                     STR_68:
  1102  00FFAE  55                 	db	85	;'U'
  1103  00FFAF  50                 	db	80	;'P'
  1104  00FFB0  44                 	db	68	;'D'
  1105  00FFB1  41                 	db	65	;'A'
  1106  00FFB2  54                 	db	84	;'T'
  1107  00FFB3  45                 	db	69	;'E'
  1108  00FFB4  00                 	db	0
  1109  00FFB5                     STR_38:
  1110  00FFB5  4C                 	db	76	;'L'
  1111  00FFB6  43                 	db	67	;'C'
  1112  00FFB7  44                 	db	68	;'D'
  1113  00FFB8  53                 	db	83	;'S'
  1114  00FFB9  3F                 	db	63	;'?'
  1115  00FFBA  00                 	db	0
  1116  00FFBB                     STR_44:
  1117  00FFBB  47                 	db	71	;'G'
  1118  00FFBC  4D                 	db	77	;'M'
  1119  00FFBD  44                 	db	68	;'D'
  1120  00FFBE  53                 	db	83	;'S'
  1121  00FFBF  3F                 	db	63	;'?'
  1122  00FFC0  00                 	db	0
  1123  00FFC1                     STR_117:
  1124  00FFC1  45                 	db	69	;'E'
  1125  00FFC2  52                 	db	82	;'R'
  1126  00FFC3  52                 	db	82	;'R'
  1127  00FFC4  4F                 	db	79	;'O'
  1128  00FFC5  52                 	db	82	;'R'
  1129  00FFC6  00                 	db	0
  1130  00FFC7                     STR_45:
  1131  00FFC7  53                 	db	83	;'S'
  1132  00FFC8  44                 	db	68	;'D'
  1133  00FFC9  53                 	db	83	;'S'
  1134  00FFCA  54                 	db	84	;'T'
  1135  00FFCB  52                 	db	82	;'R'
  1136  00FFCC  00                 	db	0
  1137  00FFCD                     STR_139:
  1138  00FFCD  4B                 	db	75	;'K'
  1139  00FFCE  4C                 	db	76	;'L'
  1140  00FFCF  4D                 	db	77	;'M'
  1141  00FFD0  2B                 	db	43
  1142  00FFD1  00                 	db	0
  1143  00FFD2                     STR_69:
  1144  00FFD2  53                 	db	83	;'S'
  1145  00FFD3  53                 	db	83	;'S'
  1146  00FFD4  54                 	db	84	;'T'
  1147  00FFD5  52                 	db	82	;'R'
  1148  00FFD6  00                 	db	0
  1149  00FFD7                     STR_40:
  1150  00FFD7  4C                 	db	76	;'L'
  1151  00FFD8  43                 	db	67	;'C'
  1152  00FFD9  44                 	db	68	;'D'
  1153  00FFDA  53                 	db	83	;'S'
  1154  00FFDB  00                 	db	0
  1155  00FFDC                     STR_22:
  1156  00FFDC  25                 	db	37
  1157  00FFDD  63                 	db	99	;'c'
  1158  00FFDE  2C                 	db	44
  1159  00FFDF  20                 	db	32
  1160  00FFE0  00                 	db	0
  1161  00FFE1                     STR_15:
  1162  00FFE1  25                 	db	37
  1163  00FFE2  64                 	db	100	;'d'
  1164  00FFE3  2C                 	db	44
  1165  00FFE4  20                 	db	32
  1166  00FFE5  00                 	db	0
  1167  00FFE6                     STR_5:
  1168  00FFE6  34                 	db	52	;'4'
  1169  00FFE7  2C                 	db	44
  1170  00FFE8  32                 	db	50	;'2'
  1171  00FFE9  30                 	db	48	;'0'
  1172  00FFEA  00                 	db	0
  1173  00FFEB                     STR_36:
  1174  00FFEB  4D                 	db	77	;'M'
  1175  00FFEC  43                 	db	67	;'C'
  1176  00FFED  3F                 	db	63	;'?'
  1177  00FFEE  00                 	db	0
  1178  00FFEF                     STR_37:
  1179  00FFEF  4D                 	db	77	;'M'
  1180  00FFF0  52                 	db	82	;'R'
  1181  00FFF1  3F                 	db	63	;'?'
  1182  00FFF2  00                 	db	0
  1183  00FFF3                     STR_85:
  1184  00FFF3  4B                 	db	75	;'K'
  1185  00FFF4  4C                 	db	76	;'L'
  1186  00FFF5  4D                 	db	77	;'M'
  1187  00FFF6  00                 	db	0
  1188  00FFF7                     STR_91:
  1189  00FFF7  4F                 	db	79	;'O'
  1190  00FFF8  4B                 	db	75	;'K'
  1191  00FFF9  00                 	db	0
  1192  00FFFA                     STR_134:
  1193  00FFFA  25                 	db	37
  1194  00FFFB  63                 	db	99	;'c'
  1195  00FFFC  00                 	db	0
  1196  00FFFD                     STR_71:
  1197  00FFFD  2C                 	db	44
  1198  00FFFE  00                 	db	0
  1199  0000                     
  1200                           ; #config settings
  1201  00FFFF  00                 	db	0	; dummy byte at the end
  1202  0000                     
  1203                           	psect	nvCOMRAM
  1204  00004E                     __pnvCOMRAM:
  1205                           	opt stack 0
  1206  00004E                     _timer0ReloadVal:
  1207                           	opt stack 0
  1208  00004E                     	ds	2
  1209                           
  1210                           	psect	nvBANK1
  1211  0001EC                     __pnvBANK1:
  1212                           	opt stack 0
  1213  0001EC                     _TMR0_InterruptHandler:
  1214                           	opt stack 0
  1215  0001EC                     	ds	2
  1216  0001EE                     _timer1ReloadVal:
  1217                           	opt stack 0
  1218  0001EE                     	ds	2
  1219  0001F0                     _timer5ReloadVal:
  1220                           	opt stack 0
  1221  0001F0                     	ds	2
  1222  0001F2                     _eusart1TxBufferRemaining:
  1223                           	opt stack 0
  1224  0001F2                     	ds	1
  1225  0000                     _TMR5	set	3919
  1226  0000                     _ANSELA	set	3896
  1227  0000                     _ANSELB	set	3897
  1228  0000                     _ANSELC	set	3898
  1229  0000                     _ANSELD	set	3899
  1230  0000                     _ANSELE	set	3900
  1231  0000                     _T5CON	set	3918
  1232  0000                     _T5CONbits	set	3918
  1233  0000                     _T5GCON	set	3917
  1234  0000                     _T5GCONbits	set	3917
  1235  0000                     _TMR5H	set	3920
  1236  0000                     _TMR5L	set	3919
  1237  0000                     _TMR1	set	4046
  1238  0000                     _BAUDCON1	set	4024
  1239  0000                     _BAUDCON2	set	3952
  1240  0000                     _INTCON2bits	set	4081
  1241  0000                     _INTCONbits	set	4082
  1242  0000                     _LATA	set	3977
  1243  0000                     _LATB	set	3978
  1244  0000                     _LATC	set	3979
  1245  0000                     _LATD	set	3980
  1246  0000                     _LATE	set	3981
  1247  0000                     _LATEbits	set	3981
  1248  0000                     _OSCCON	set	4051
  1249  0000                     _OSCCON2	set	4050
  1250  0000                     _OSCTUNE	set	3995
  1251  0000                     _PIE1bits	set	3997
  1252  0000                     _PIR1bits	set	3998
  1253  0000                     _PIR3bits	set	4004
  1254  0000                     _PIR5bits	set	3966
  1255  0000                     _PORTAbits	set	3968
  1256  0000                     _PORTC	set	3970
  1257  0000                     _PORTCbits	set	3970
  1258  0000                     _PORTD	set	3971
  1259  0000                     _RCONbits	set	4048
  1260  0000                     _RCREG1	set	4014
  1261  0000                     _RCREG2	set	3956
  1262  0000                     _RCSTA1	set	4011
  1263  0000                     _RCSTA1bits	set	4011
  1264  0000                     _RCSTA2	set	3953
  1265  0000                     _RCSTA2bits	set	3953
  1266  0000                     _SPBRG1	set	4015
  1267  0000                     _SPBRG2	set	3957
  1268  0000                     _SPBRGH1	set	4016
  1269  0000                     _SPBRGH2	set	3958
  1270  0000                     _T0CON	set	4053
  1271  0000                     _T0CONbits	set	4053
  1272  0000                     _T1CON	set	4045
  1273  0000                     _T1CONbits	set	4045
  1274  0000                     _T1GCON	set	4044
  1275  0000                     _T1GCONbits	set	4044
  1276  0000                     _TMR0H	set	4055
  1277  0000                     _TMR0L	set	4054
  1278  0000                     _TMR1H	set	4047
  1279  0000                     _TMR1L	set	4046
  1280  0000                     _TRISA	set	3986
  1281  0000                     _TRISB	set	3987
  1282  0000                     _TRISC	set	3988
  1283  0000                     _TRISCbits	set	3988
  1284  0000                     _TRISD	set	3989
  1285  0000                     _TRISE	set	3990
  1286  0000                     _TXREG1	set	4013
  1287  0000                     _TXREG2	set	3955
  1288  0000                     _TXSTA1	set	4012
  1289  0000                     _TXSTA2	set	3954
  1290  0000                     _WPUB	set	3937
  1291                           
  1292                           	psect	cinit
  1293  0041E2                     __pcinit:
  1294                           	opt stack 0
  1295  0041E2                     start_initialization:
  1296                           	opt stack 0
  1297  0041E2                     __initialization:
  1298                           	opt stack 0
  1299                           
  1300                           ; Initialize objects allocated to BANK1 (18 bytes)
  1301                           ; load TBLPTR registers with __pidataBANK1
  1302  0041E2  0E9C               	movlw	low __pidataBANK1
  1303  0041E4  6EF6               	movwf	tblptrl,c
  1304  0041E6  0E4D               	movlw	high __pidataBANK1
  1305  0041E8  6EF7               	movwf	tblptrh,c
  1306  0041EA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1307  0041EC  6EF8               	movwf	tblptru,c
  1308  0041EE  EE01  F0DA         	lfsr	0,__pdataBANK1
  1309  0041F2  EE10 F012          	lfsr	1,18
  1310  0041F6                     copy_data0:
  1311  0041F6  0009               	tblrd		*+
  1312  0041F8  CFF5 FFEE          	movff	tablat,postinc0
  1313  0041FC  50E5               	movf	postdec1,w,c
  1314  0041FE  50E1               	movf	fsr1l,w,c
  1315  004200  E1FA               	bnz	copy_data0
  1316                           
  1317                           ; Clear objects allocated to BIGRAM (1140 bytes)
  1318  004202  EE05  F099         	lfsr	0,__pbssBIGRAM
  1319  004206  EE14 F074          	lfsr	1,1140
  1320  00420A                     clear_0:
  1321  00420A  6AEE               	clrf	postinc0,c
  1322  00420C  50E5               	movf	postdec1,w,c
  1323  00420E  50E1               	movf	fsr1l,w,c
  1324  004210  E1FC               	bnz	clear_0
  1325  004212  50E2               	movf	fsr1h,w,c
  1326  004214  E1FA               	bnz	clear_0
  1327                           
  1328                           ; Clear objects allocated to BANK4 (150 bytes)
  1329  004216  EE04  F000         	lfsr	0,__pbssBANK4
  1330  00421A  0E96               	movlw	150
  1331  00421C                     clear_1:
  1332  00421C  6AEE               	clrf	postinc0,c
  1333  00421E  06E8               	decf	wreg,f,c
  1334  004220  E1FD               	bnz	clear_1
  1335                           
  1336                           ; Clear objects allocated to BANK3 (150 bytes)
  1337  004222  EE03  F000         	lfsr	0,__pbssBANK3
  1338  004226  0E96               	movlw	150
  1339  004228                     clear_2:
  1340  004228  6AEE               	clrf	postinc0,c
  1341  00422A  06E8               	decf	wreg,f,c
  1342  00422C  E1FD               	bnz	clear_2
  1343                           
  1344                           ; Clear objects allocated to BANK2 (204 bytes)
  1345  00422E  EE02  F000         	lfsr	0,__pbssBANK2
  1346  004232  0ECC               	movlw	204
  1347  004234                     clear_3:
  1348  004234  6AEE               	clrf	postinc0,c
  1349  004236  06E8               	decf	wreg,f,c
  1350  004238  E1FD               	bnz	clear_3
  1351                           
  1352                           ; Clear objects allocated to BANK1 (218 bytes)
  1353  00423A  EE01  F000         	lfsr	0,__pbssBANK1
  1354  00423E  0EDA               	movlw	218
  1355  004240                     clear_4:
  1356  004240  6AEE               	clrf	postinc0,c
  1357  004242  06E8               	decf	wreg,f,c
  1358  004244  E1FD               	bnz	clear_4
  1359                           
  1360                           ; Clear objects allocated to BANK0 (1 bytes)
  1361  004246  0100               	movlb	0
  1362  004248  6B75               	clrf	__pbssBANK0& (0+255),b
  1363                           
  1364                           ; Clear objects allocated to COMRAM (13 bytes)
  1365  00424A  EE00  F041         	lfsr	0,__pbssCOMRAM
  1366  00424E  0E0D               	movlw	13
  1367  004250                     clear_5:
  1368  004250  6AEE               	clrf	postinc0,c
  1369  004252  06E8               	decf	wreg,f,c
  1370  004254  E1FD               	bnz	clear_5
  1371  004256                     end_of_initialization:
  1372                           	opt stack 0
  1373  004256                     __end_of__initialization:
  1374                           	opt stack 0
  1375  004256  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1376  004258  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1377  00425A  0100               	movlb	0
  1378  00425C  EF29  F020         	goto	_main	;jump to C main() function
  1379                           tblptru	equ	0xFF8
  1380                           tblptrh	equ	0xFF7
  1381                           tblptrl	equ	0xFF6
  1382                           tablat	equ	0xFF5
  1383                           postinc0	equ	0xFEE
  1384                           wreg	equ	0xFE8
  1385                           postdec1	equ	0xFE5
  1386                           fsr1h	equ	0xFE2
  1387                           fsr1l	equ	0xFE1
  1388                           
  1389                           	psect	bssCOMRAM
  1390  000041                     __pbssCOMRAM:
  1391                           	opt stack 0
  1392  000041                     _clcd_init_row:
  1393                           	opt stack 0
  1394  000041                     	ds	1
  1395  000042                     _conflict_data_count:
  1396                           	opt stack 0
  1397  000042                     	ds	1
  1398  000043                     _data_count:
  1399                           	opt stack 0
  1400  000043                     	ds	1
  1401  000044                     _eusart1RxCount:
  1402                           	opt stack 0
  1403  000044                     	ds	1
  1404  000045                     _eusart1RxHead:
  1405                           	opt stack 0
  1406  000045                     	ds	1
  1407  000046                     _eusart1RxTail:
  1408                           	opt stack 0
  1409  000046                     	ds	1
  1410  000047                     _eusart1TxHead:
  1411                           	opt stack 0
  1412  000047                     	ds	1
  1413  000048                     _eusart1TxTail:
  1414                           	opt stack 0
  1415  000048                     	ds	1
  1416  000049                     _clcd_config_data:
  1417                           	opt stack 0
  1418  000049                     	ds	5
  1419                           tblptru	equ	0xFF8
  1420                           tblptrh	equ	0xFF7
  1421                           tblptrl	equ	0xFF6
  1422                           tablat	equ	0xFF5
  1423                           postinc0	equ	0xFEE
  1424                           wreg	equ	0xFE8
  1425                           postdec1	equ	0xFE5
  1426                           fsr1h	equ	0xFE2
  1427                           fsr1l	equ	0xFE1
  1428                           
  1429                           	psect	bssBANK0
  1430  000075                     __pbssBANK0:
  1431                           	opt stack 0
  1432  000075                     _valid_cmd:
  1433                           	opt stack 0
  1434  000075                     	ds	1
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postdec1	equ	0xFE5
  1442                           fsr1h	equ	0xFE2
  1443                           fsr1l	equ	0xFE1
  1444                           
  1445                           	psect	bssBANK1
  1446  000100                     __pbssBANK1:
  1447                           	opt stack 0
  1448  000100                     _eusart1TxBuffer:
  1449                           	opt stack 0
  1450  000100                     	ds	8
  1451  000108                     _TMR1_InterruptHandler:
  1452                           	opt stack 0
  1453  000108                     	ds	2
  1454  00010A                     _TMR5_InterruptHandler:
  1455                           	opt stack 0
  1456  00010A                     	ds	2
  1457  00010C                     _display_struct_count:
  1458                           	opt stack 0
  1459  00010C                     	ds	2
  1460  00010E                     _print_data_ready:
  1461                           	opt stack 0
  1462  00010E                     	ds	2
  1463  000110                     	ds	2
  1464  000112                     cmd_consol_task@i:
  1465                           	opt stack 0
  1466  000112                     	ds	2
  1467  000114                     strtok@sp:
  1468                           	opt stack 0
  1469  000114                     	ds	2
  1470  000116                     _LCD_16x2_DISPLAY:
  1471                           	opt stack 0
  1472  000116                     	ds	1
  1473  000117                     _LCD_20x4_DISPLAY:
  1474                           	opt stack 0
  1475  000117                     	ds	1
  1476  000118                     _check:
  1477                           	opt stack 0
  1478  000118                     	ds	1
  1479  000119                     _clcd_init_col:
  1480                           	opt stack 0
  1481  000119                     	ds	1
  1482  00011A                     _cmd_consol_state:
  1483                           	opt stack 0
  1484  00011A                     	ds	1
  1485  00011B                     _display:
  1486                           	opt stack 0
  1487  00011B                     	ds	1
  1488  00011C                     _main_state:
  1489                           	opt stack 0
  1490  00011C                     	ds	1
  1491  00011D                     	ds	1
  1492  00011E                     _lcd_display_array:
  1493                           	opt stack 0
  1494  00011E                     	ds	80
  1495  00016E                     _cmd_data:
  1496                           	opt stack 0
  1497  00016E                     	ds	53
  1498  0001A3                     _conflict_arr:
  1499                           	opt stack 0
  1500  0001A3                     	ds	40
  1501  0001CB                     _CMD:
  1502                           	opt stack 0
  1503  0001CB                     	ds	15
  1504                           tblptru	equ	0xFF8
  1505                           tblptrh	equ	0xFF7
  1506                           tblptrl	equ	0xFF6
  1507                           tablat	equ	0xFF5
  1508                           postinc0	equ	0xFEE
  1509                           wreg	equ	0xFE8
  1510                           postdec1	equ	0xFE5
  1511                           fsr1h	equ	0xFE2
  1512                           fsr1l	equ	0xFE1
  1513                           
  1514                           	psect	dataBANK1
  1515  0001DA                     __pdataBANK1:
  1516                           	opt stack 0
  1517  0001DA                     _randx:
  1518                           	opt stack 0
  1519  0001DA                     	ds	4
  1520  0001DE                     	ds	1
  1521  0001DF                     _str:
  1522                           	opt stack 0
  1523  0001DF                     	ds	13
  1524                           tblptru	equ	0xFF8
  1525                           tblptrh	equ	0xFF7
  1526                           tblptrl	equ	0xFF6
  1527                           tablat	equ	0xFF5
  1528                           postinc0	equ	0xFEE
  1529                           wreg	equ	0xFE8
  1530                           postdec1	equ	0xFE5
  1531                           fsr1h	equ	0xFE2
  1532                           fsr1l	equ	0xFE1
  1533                           
  1534                           	psect	bssBANK2
  1535  000200                     __pbssBANK2:
  1536                           	opt stack 0
  1537  000200                     _eusart1RxBuffer:
  1538                           	opt stack 0
  1539  000200                     	ds	64
  1540  000240                     _out_str:
  1541                           	opt stack 0
  1542  000240                     	ds	100
  1543  0002A4                     _str_data:
  1544                           	opt stack 0
  1545  0002A4                     	ds	40
  1546                           tblptru	equ	0xFF8
  1547                           tblptrh	equ	0xFF7
  1548                           tblptrl	equ	0xFF6
  1549                           tablat	equ	0xFF5
  1550                           postinc0	equ	0xFEE
  1551                           wreg	equ	0xFE8
  1552                           postdec1	equ	0xFE5
  1553                           fsr1h	equ	0xFE2
  1554                           fsr1l	equ	0xFE1
  1555                           
  1556                           	psect	bssBANK3
  1557  000300                     __pbssBANK3:
  1558                           	opt stack 0
  1559  000300                     _uart_str:
  1560                           	opt stack 0
  1561  000300                     	ds	150
  1562                           tblptru	equ	0xFF8
  1563                           tblptrh	equ	0xFF7
  1564                           tblptrl	equ	0xFF6
  1565                           tablat	equ	0xFF5
  1566                           postinc0	equ	0xFEE
  1567                           wreg	equ	0xFE8
  1568                           postdec1	equ	0xFE5
  1569                           fsr1h	equ	0xFE2
  1570                           fsr1l	equ	0xFE1
  1571                           
  1572                           	psect	bssBANK4
  1573  000400                     __pbssBANK4:
  1574                           	opt stack 0
  1575  000400                     cmd_consol_task@F7537:
  1576                           	opt stack 0
  1577  000400                     	ds	150
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           postinc0	equ	0xFEE
  1583                           wreg	equ	0xFE8
  1584                           postdec1	equ	0xFE5
  1585                           fsr1h	equ	0xFE2
  1586                           fsr1l	equ	0xFE1
  1587                           
  1588                           	psect	bssBIGRAM
  1589  000599                     __pbssBIGRAM:
  1590                           	opt stack 0
  1591  000599                     _clcd_display_string_details:
  1592                           	opt stack 0
  1593  000599                     	ds	1140
  1594                           tblptru	equ	0xFF8
  1595                           tblptrh	equ	0xFF7
  1596                           tblptrl	equ	0xFF6
  1597                           tablat	equ	0xFF5
  1598                           postinc0	equ	0xFEE
  1599                           wreg	equ	0xFE8
  1600                           postdec1	equ	0xFE5
  1601                           fsr1h	equ	0xFE2
  1602                           fsr1l	equ	0xFE1
  1603                           
  1604                           	psect	cstackBANK5
  1605  000500                     __pcstackBANK5:
  1606                           	opt stack 0
  1607  000500                     cmd_consol_task@temp_uart_str:
  1608                           	opt stack 0
  1609                           
  1610                           ; 150 bytes @ 0x0
  1611  000500                     	ds	150
  1612  000596                     cmd_consol_task@res:
  1613                           	opt stack 0
  1614                           
  1615                           ; 1 bytes @ 0x96
  1616  000596                     	ds	1
  1617  000597                     cmd_consol_task@val:
  1618                           	opt stack 0
  1619                           
  1620                           ; 1 bytes @ 0x97
  1621  000597                     	ds	1
  1622  000598                     cmd_consol_task@ch:
  1623                           	opt stack 0
  1624                           
  1625                           ; 1 bytes @ 0x98
  1626  000598                     	ds	1
  1627                           tblptru	equ	0xFF8
  1628                           tblptrh	equ	0xFF7
  1629                           tblptrl	equ	0xFF6
  1630                           tablat	equ	0xFF5
  1631                           postinc0	equ	0xFEE
  1632                           wreg	equ	0xFE8
  1633                           postdec1	equ	0xFE5
  1634                           fsr1h	equ	0xFE2
  1635                           fsr1l	equ	0xFE1
  1636                           
  1637                           	psect	cstackBANK0
  1638  000060                     __pcstackBANK0:
  1639                           	opt stack 0
  1640  000060                     conflict_check@exist_uid_idx:
  1641                           	opt stack 0
  1642  000060                     set_string_data@data:
  1643                           	opt stack 0
  1644  000060                     parse_cmd_str@str:
  1645                           	opt stack 0
  1646                           
  1647                           ; 2 bytes @ 0x0
  1648  000060                     	ds	1
  1649  000061                     conflict_check@conflict_bool:
  1650                           	opt stack 0
  1651                           
  1652                           ; 1 bytes @ 0x1
  1653  000061                     	ds	1
  1654  000062                     ??_set_string_data:
  1655  000062                     conflict_check@i:
  1656                           	opt stack 0
  1657  000062                     parse_cmd_str@ptr:
  1658                           	opt stack 0
  1659                           
  1660                           ; 2 bytes @ 0x2
  1661  000062                     	ds	2
  1662  000064                     ??_update_string_data:
  1663  000064                     parse_cmd_str@row:
  1664                           	opt stack 0
  1665                           
  1666                           ; 1 bytes @ 0x4
  1667  000064                     	ds	1
  1668  000065                     parse_cmd_str@column:
  1669                           	opt stack 0
  1670                           
  1671                           ; 1 bytes @ 0x5
  1672  000065                     	ds	1
  1673  000066                     set_string_data@start_point:
  1674                           	opt stack 0
  1675  000066                     parse_cmd_str@temp:
  1676                           	opt stack 0
  1677                           
  1678                           ; 2 bytes @ 0x6
  1679  000066                     	ds	1
  1680  000067                     set_string_data@end_point:
  1681                           	opt stack 0
  1682                           
  1683                           ; 1 bytes @ 0x7
  1684  000067                     	ds	1
  1685  000068                     set_string_data@uid:
  1686                           	opt stack 0
  1687  000068                     update_string_data@exist_uid_idx:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x8
  1691  000068                     	ds	1
  1692  000069                     update_string_data@start_point:
  1693                           	opt stack 0
  1694  000069                     set_string_data@conflict_count:
  1695                           	opt stack 0
  1696                           
  1697                           ; 2 bytes @ 0x9
  1698  000069                     	ds	1
  1699  00006A                     update_string_data@end_point:
  1700                           	opt stack 0
  1701                           
  1702                           ; 1 bytes @ 0xA
  1703  00006A                     	ds	1
  1704  00006B                     set_string_data@i:
  1705                           	opt stack 0
  1706  00006B                     update_string_data@i:
  1707                           	opt stack 0
  1708                           
  1709                           ; 2 bytes @ 0xB
  1710  00006B                     	ds	1
  1711  00006C                     set_string_data@j:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0xC
  1715  00006C                     	ds	2
  1716  00006E                     ??_reply_to_host:
  1717                           
  1718                           ; 1 bytes @ 0xE
  1719  00006E                     	ds	3
  1720  000071                     reply_to_host@ch:
  1721                           	opt stack 0
  1722                           
  1723                           ; 1 bytes @ 0x11
  1724  000071                     	ds	1
  1725  000072                     reply_to_host@ch_2113:
  1726                           	opt stack 0
  1727                           
  1728                           ; 1 bytes @ 0x12
  1729  000072                     	ds	1
  1730  000073                     ??_cmd_consol_task:
  1731                           
  1732                           ; 1 bytes @ 0x13
  1733  000073                     	ds	1
  1734  000074                     main@res:
  1735                           	opt stack 0
  1736                           
  1737                           ; 1 bytes @ 0x14
  1738  000074                     	ds	1
  1739                           tblptru	equ	0xFF8
  1740                           tblptrh	equ	0xFF7
  1741                           tblptrl	equ	0xFF6
  1742                           tablat	equ	0xFF5
  1743                           postinc0	equ	0xFEE
  1744                           wreg	equ	0xFE8
  1745                           postdec1	equ	0xFE5
  1746                           fsr1h	equ	0xFE2
  1747                           fsr1l	equ	0xFE1
  1748                           
  1749                           	psect	cstackCOMRAM
  1750  000001                     __pcstackCOMRAM:
  1751                           	opt stack 0
  1752  000001                     ??_heart_beat:
  1753  000001                     
  1754                           ; 1 bytes @ 0x0
  1755  000001                     	ds	1
  1756  000002                     ??_INTERRUPT_InterruptManager:
  1757  000002                     
  1758                           ; 1 bytes @ 0x1
  1759  000002                     	ds	14
  1760  000010                     ??_isdigit:
  1761  000010                     ?_strcmp:
  1762                           	opt stack 0
  1763  000010                     ?_strchr:
  1764                           	opt stack 0
  1765  000010                     ?_max_display_support:
  1766                           	opt stack 0
  1767  000010                     ?___awdiv:
  1768                           	opt stack 0
  1769  000010                     ?___lwdiv:
  1770                           	opt stack 0
  1771  000010                     ?___lmul:
  1772                           	opt stack 0
  1773  000010                     EUSART1_Read@readValue:
  1774                           	opt stack 0
  1775  000010                     EUSART1_Write@txData:
  1776                           	opt stack 0
  1777  000010                     EUSART2_Write@txData:
  1778                           	opt stack 0
  1779  000010                     TMR0_SetInterruptHandler@InterruptHandler:
  1780                           	opt stack 0
  1781  000010                     delay@delay:
  1782                           	opt stack 0
  1783  000010                     __delay_10uS@delay:
  1784                           	opt stack 0
  1785  000010                     __delay_MS@delay:
  1786                           	opt stack 0
  1787  000010                     ___awdiv@dividend:
  1788                           	opt stack 0
  1789  000010                     ___lwdiv@dividend:
  1790                           	opt stack 0
  1791  000010                     memcpy@d1:
  1792                           	opt stack 0
  1793  000010                     srand@x:
  1794                           	opt stack 0
  1795  000010                     strcmp@s1:
  1796                           	opt stack 0
  1797  000010                     strncpy@to:
  1798                           	opt stack 0
  1799  000010                     strchr@ptr:
  1800                           	opt stack 0
  1801  000010                     ___lmul@multiplier:
  1802                           	opt stack 0
  1803                           
  1804                           ; 4 bytes @ 0xF
  1805  000010                     	ds	1
  1806  000011                     putch@txData:
  1807                           	opt stack 0
  1808  000011                     _isdigit$2569:
  1809                           	opt stack 0
  1810  000011                     put_string_usart1@str:
  1811                           	opt stack 0
  1812                           
  1813                           ; 2 bytes @ 0x10
  1814  000011                     	ds	1
  1815  000012                     ??_TMR0_Initialize:
  1816  000012                     ??__delay_MS:
  1817  000012                     ??__delay_10uS:
  1818  000012                     ??_delay:
  1819  000012                     isdigit@c:
  1820                           	opt stack 0
  1821  000012                     ___awdiv@divisor:
  1822                           	opt stack 0
  1823  000012                     ___lwdiv@divisor:
  1824                           	opt stack 0
  1825  000012                     memcpy@s1:
  1826                           	opt stack 0
  1827  000012                     strcmp@s2:
  1828                           	opt stack 0
  1829  000012                     strncpy@from:
  1830                           	opt stack 0
  1831  000012                     cputs@s:
  1832                           	opt stack 0
  1833  000012                     strchr@chr:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0x11
  1837  000012                     	ds	1
  1838  000013                     delay@val:
  1839                           	opt stack 0
  1840  000013                     __delay_10uS@val:
  1841                           	opt stack 0
  1842  000013                     __delay_MS@val:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0x12
  1846  000013                     	ds	1
  1847  000014                     ??_strcmp:
  1848  000014                     ??_strchr:
  1849  000014                     ___awdiv@counter:
  1850                           	opt stack 0
  1851  000014                     ___lwdiv@counter:
  1852                           	opt stack 0
  1853  000014                     memcpy@n:
  1854                           	opt stack 0
  1855  000014                     puts@s:
  1856                           	opt stack 0
  1857  000014                     strncpy@size:
  1858                           	opt stack 0
  1859  000014                     ___lmul@multiplicand:
  1860                           	opt stack 0
  1861                           
  1862                           ; 4 bytes @ 0x13
  1863  000014                     	ds	1
  1864  000015                     ___awdiv@sign:
  1865                           	opt stack 0
  1866  000015                     strcmp@r:
  1867                           	opt stack 0
  1868  000015                     delay@i:
  1869                           	opt stack 0
  1870  000015                     ___lwdiv@quotient:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x14
  1874  000015                     	ds	1
  1875  000016                     ?_strspn:
  1876                           	opt stack 0
  1877  000016                     ?_strcspn:
  1878                           	opt stack 0
  1879  000016                     ___awdiv@quotient:
  1880                           	opt stack 0
  1881  000016                     memcpy@d:
  1882                           	opt stack 0
  1883  000016                     strncpy@cp:
  1884                           	opt stack 0
  1885  000016                     strcspn@s1:
  1886                           	opt stack 0
  1887  000016                     strspn@s1:
  1888                           	opt stack 0
  1889                           
  1890                           ; 2 bytes @ 0x15
  1891  000016                     	ds	1
  1892  000017                     ?___lwmod:
  1893                           	opt stack 0
  1894  000017                     write_lcd_cmd@cmd:
  1895                           	opt stack 0
  1896  000017                     write_lcd_data@data:
  1897                           	opt stack 0
  1898  000017                     ___lwmod@dividend:
  1899                           	opt stack 0
  1900                           
  1901                           ; 2 bytes @ 0x16
  1902  000017                     	ds	1
  1903  000018                     ?___wmul:
  1904                           	opt stack 0
  1905  000018                     set_cursor@col_number:
  1906                           	opt stack 0
  1907  000018                     write_str@str:
  1908                           	opt stack 0
  1909  000018                     ___wmul@multiplier:
  1910                           	opt stack 0
  1911  000018                     memcpy@s:
  1912                           	opt stack 0
  1913  000018                     strcspn@s2:
  1914                           	opt stack 0
  1915  000018                     strspn@s2:
  1916                           	opt stack 0
  1917  000018                     ___lmul@product:
  1918                           	opt stack 0
  1919                           
  1920                           ; 4 bytes @ 0x17
  1921  000018                     	ds	1
  1922  000019                     set_cursor@row_number:
  1923                           	opt stack 0
  1924  000019                     ___lwmod@divisor:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x18
  1928  000019                     	ds	1
  1929  00001A                     ??_strspn:
  1930  00001A                     ??_strcspn:
  1931  00001A                     write_str@i:
  1932                           	opt stack 0
  1933  00001A                     ___wmul@multiplicand:
  1934                           	opt stack 0
  1935                           
  1936                           ; 2 bytes @ 0x19
  1937  00001A                     	ds	1
  1938  00001B                     ___lwmod@counter:
  1939                           	opt stack 0
  1940  00001B                     strcspn@i:
  1941                           	opt stack 0
  1942  00001B                     strspn@i:
  1943                           	opt stack 0
  1944                           
  1945                           ; 2 bytes @ 0x1A
  1946  00001B                     	ds	1
  1947  00001C                     ?_rand:
  1948                           	opt stack 0
  1949  00001C                     ?__doprnt:
  1950                           	opt stack 0
  1951  00001C                     __doprnt@pb:
  1952                           	opt stack 0
  1953  00001C                     ___wmul@product:
  1954                           	opt stack 0
  1955                           
  1956                           ; 2 bytes @ 0x1B
  1957  00001C                     	ds	1
  1958  00001D                     ?_strtok:
  1959                           	opt stack 0
  1960  00001D                     strtok@s1:
  1961                           	opt stack 0
  1962                           
  1963                           ; 2 bytes @ 0x1C
  1964  00001D                     	ds	1
  1965  00001E                     ?_strlen:
  1966                           	opt stack 0
  1967  00001E                     ?_atoi:
  1968                           	opt stack 0
  1969  00001E                     ?___awmod:
  1970                           	opt stack 0
  1971  00001E                     __doprnt@f:
  1972                           	opt stack 0
  1973  00001E                     atoi@s:
  1974                           	opt stack 0
  1975  00001E                     ___awmod@dividend:
  1976                           	opt stack 0
  1977  00001E                     strlen@s:
  1978                           	opt stack 0
  1979                           
  1980                           ; 2 bytes @ 0x1D
  1981  00001E                     	ds	1
  1982  00001F                     strtok@s2:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0x1E
  1986  00001F                     	ds	1
  1987  000020                     ??_strlen:
  1988  000020                     ??_atoi:
  1989  000020                     __doprnt@ap:
  1990                           	opt stack 0
  1991  000020                     ___awmod@divisor:
  1992                           	opt stack 0
  1993                           
  1994                           ; 2 bytes @ 0x1F
  1995  000020                     	ds	1
  1996  000021                     
  1997                           ; 1 bytes @ 0x20
  1998  000021                     	ds	1
  1999  000022                     ??__doprnt:
  2000  000022                     atoi@sign:
  2001                           	opt stack 0
  2002  000022                     ___awmod@counter:
  2003                           	opt stack 0
  2004  000022                     strlen@cp:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x21
  2008  000022                     	ds	1
  2009  000023                     ___awmod@sign:
  2010                           	opt stack 0
  2011  000023                     atoi@a:
  2012                           	opt stack 0
  2013                           
  2014                           ; 2 bytes @ 0x22
  2015  000023                     	ds	1
  2016  000024                     ?_strncmp:
  2017                           	opt stack 0
  2018  000024                     ?_get_new_uid:
  2019                           	opt stack 0
  2020  000024                     __doprnt@flag:
  2021                           	opt stack 0
  2022  000024                     scroll_off@clcd_display_string_details:
  2023                           	opt stack 0
  2024  000024                     get_uid@str:
  2025                           	opt stack 0
  2026  000024                     memset@p1:
  2027                           	opt stack 0
  2028  000024                     strcpy@to:
  2029                           	opt stack 0
  2030  000024                     strncmp@s1:
  2031                           	opt stack 0
  2032                           
  2033                           ; 2 bytes @ 0x23
  2034  000024                     	ds	1
  2035  000025                     __doprnt@prec:
  2036                           	opt stack 0
  2037                           
  2038                           ; 1 bytes @ 0x24
  2039  000025                     	ds	1
  2040  000026                     ??_get_new_uid:
  2041  000026                     ??_scroll_off:
  2042  000026                     get_uid@data_uid:
  2043                           	opt stack 0
  2044  000026                     __doprnt@val:
  2045                           	opt stack 0
  2046  000026                     memset@c:
  2047                           	opt stack 0
  2048  000026                     strcpy@from:
  2049                           	opt stack 0
  2050  000026                     strncmp@s2:
  2051                           	opt stack 0
  2052                           
  2053                           ; 2 bytes @ 0x25
  2054  000026                     	ds	2
  2055  000028                     ??_get_uid:
  2056  000028                     __doprnt@cp:
  2057                           	opt stack 0
  2058  000028                     memset@n:
  2059                           	opt stack 0
  2060  000028                     strcpy@cp:
  2061                           	opt stack 0
  2062  000028                     strncmp@len:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0x27
  2066  000028                     	ds	1
  2067  000029                     get_new_uid@uid:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x28
  2071  000029                     	ds	1
  2072  00002A                     ??_strncmp:
  2073  00002A                     __doprnt@c:
  2074                           	opt stack 0
  2075  00002A                     scroll_off@k:
  2076                           	opt stack 0
  2077  00002A                     get_uid@i:
  2078                           	opt stack 0
  2079  00002A                     memset@p:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x29
  2083  00002A                     	ds	1
  2084  00002B                     ?_printf:
  2085                           	opt stack 0
  2086  00002B                     ?_sprintf:
  2087                           	opt stack 0
  2088  00002B                     get_new_uid@i:
  2089                           	opt stack 0
  2090  00002B                     printf@f:
  2091                           	opt stack 0
  2092  00002B                     sprintf@wh:
  2093                           	opt stack 0
  2094                           
  2095                           ; 2 bytes @ 0x2A
  2096  00002B                     	ds	1
  2097  00002C                     scroll_off@line:
  2098                           	opt stack 0
  2099  00002C                     scroll_left_to_right@clcd_display_string_details:
  2100                           	opt stack 0
  2101  00002C                     scroll_right_to_left@clcd_display_string_details:
  2102                           	opt stack 0
  2103  00002C                     get_uid@uid:
  2104                           	opt stack 0
  2105  00002C                     get_str@str:
  2106                           	opt stack 0
  2107                           
  2108                           ; 2 bytes @ 0x2B
  2109  00002C                     	ds	1
  2110  00002D                     ?_strstr:
  2111                           	opt stack 0
  2112  00002D                     scroll_off@display_char_count:
  2113                           	opt stack 0
  2114  00002D                     sprintf@f:
  2115                           	opt stack 0
  2116  00002D                     strstr@s1:
  2117                           	opt stack 0
  2118                           
  2119                           ; 2 bytes @ 0x2C
  2120  00002D                     	ds	1
  2121  00002E                     ??_scroll_left_to_right:
  2122  00002E                     ??_scroll_right_to_left:
  2123  00002E                     scroll_off@str_len:
  2124                           	opt stack 0
  2125  00002E                     get_str@data_str:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x2D
  2129  00002E                     	ds	1
  2130  00002F                     scroll_off@j:
  2131                           	opt stack 0
  2132  00002F                     strstr@s2:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x2E
  2136  00002F                     	ds	1
  2137  000030                     
  2138                           ; 1 bytes @ 0x2F
  2139  000030                     	ds	1
  2140  000031                     scroll_off@i:
  2141                           	opt stack 0
  2142  000031                     sprintf@ap:
  2143                           	opt stack 0
  2144                           
  2145                           ; 2 bytes @ 0x30
  2146  000031                     	ds	2
  2147  000033                     printf@ap:
  2148                           	opt stack 0
  2149  000033                     sprintf@pb:
  2150                           	opt stack 0
  2151                           
  2152                           ; 4 bytes @ 0x32
  2153  000033                     	ds	2
  2154  000035                     printf@pb:
  2155                           	opt stack 0
  2156                           
  2157                           ; 4 bytes @ 0x34
  2158  000035                     	ds	1
  2159  000036                     scroll_left_to_right@line:
  2160                           	opt stack 0
  2161                           
  2162                           ; 1 bytes @ 0x35
  2163  000036                     	ds	3
  2164  000039                     ??_print_conflict_ids:
  2165  000039                     init_clcd_cusotom_lcd@clcd_init_col:
  2166                           	opt stack 0
  2167  000039                     conflict_check@new_start_point:
  2168                           	opt stack 0
  2169  000039                     conflict@new_end_point:
  2170                           	opt stack 0
  2171  000039                     scroll_right_to_left@line:
  2172                           	opt stack 0
  2173  000039                     copy_data@clcd_str_data:
  2174                           	opt stack 0
  2175  000039                     copy_display_struct@clcd_str_data:
  2176                           	opt stack 0
  2177  000039                     collect_row@str:
  2178                           	opt stack 0
  2179  000039                     get_direction@str:
  2180                           	opt stack 0
  2181  000039                     get_dis_frq@str:
  2182                           	opt stack 0
  2183  000039                     get_over_write_data@str:
  2184                           	opt stack 0
  2185  000039                     collect_column@str:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x38
  2189  000039                     	ds	1
  2190  00003A                     ??_make_display:
  2191  00003A                     ??_conflict:
  2192  00003A                     init_clcd_cusotom_lcd@clcd_init_row:
  2193                           	opt stack 0
  2194  00003A                     conflict_check@new_end_point:
  2195                           	opt stack 0
  2196                           
  2197                           ; 1 bytes @ 0x39
  2198  00003A                     	ds	1
  2199  00003B                     ??_conflict_check:
  2200  00003B                     copy_data@data:
  2201                           	opt stack 0
  2202  00003B                     copy_display_struct@data:
  2203                           	opt stack 0
  2204  00003B                     collect_row@data_row:
  2205                           	opt stack 0
  2206  00003B                     get_direction@data_direction:
  2207                           	opt stack 0
  2208  00003B                     get_dis_frq@data_frq:
  2209                           	opt stack 0
  2210  00003B                     get_over_write_data@over_write_data:
  2211                           	opt stack 0
  2212  00003B                     collect_column@data_column:
  2213                           	opt stack 0
  2214                           
  2215                           ; 2 bytes @ 0x3A
  2216  00003B                     	ds	2
  2217  00003D                     ??_copy_data:
  2218  00003D                     ??_collect_row:
  2219  00003D                     ??_get_direction:
  2220  00003D                     ??_get_dis_frq:
  2221  00003D                     ??_get_over_write_data:
  2222  00003D                     ??_collect_column:
  2223  00003D                     conflict@conflict_bool:
  2224                           	opt stack 0
  2225  00003D                     copy_display_struct@uid:
  2226                           	opt stack 0
  2227  00003D                     print_conflict_ids@conflict_count:
  2228                           	opt stack 0
  2229  00003D                     make_display@count:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0x3C
  2233  00003D                     	ds	1
  2234  00003E                     ??_copy_display_struct:
  2235  00003E                     conflict@new_start_point:
  2236                           	opt stack 0
  2237  00003E                     get_dis_frq@frq:
  2238                           	opt stack 0
  2239  00003E                     get_over_write_data@over_write:
  2240                           	opt stack 0
  2241  00003E                     collect_row@i:
  2242                           	opt stack 0
  2243  00003E                     get_direction@i:
  2244                           	opt stack 0
  2245  00003E                     collect_column@i:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x3D
  2249  00003E                     	ds	1
  2250  00003F                     conflict@i:
  2251                           	opt stack 0
  2252  00003F                     update_string_data@data:
  2253                           	opt stack 0
  2254  00003F                     get_dis_frq@i:
  2255                           	opt stack 0
  2256  00003F                     get_over_write_data@i:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x3E
  2260  00003F                     	ds	1
  2261  000040                     collect_row@row:
  2262                           	opt stack 0
  2263  000040                     get_direction@direction:
  2264                           	opt stack 0
  2265  000040                     collect_column@column:
  2266                           	opt stack 0
  2267                           
  2268                           ; 1 bytes @ 0x3F
  2269  000040                     	ds	1
  2270  000041                     tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           postinc0	equ	0xFEE
  2275                           wreg	equ	0xFE8
  2276                           postdec1	equ	0xFE5
  2277                           fsr1h	equ	0xFE2
  2278                           fsr1l	equ	0xFE1
  2279                           
  2280                           ; 1 bytes @ 0x40
  2281 ;;
  2282 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2283 ;;
  2284 ;; *************** function _main *****************
  2285 ;; Defined at:
  2286 ;;		line 69 in file "main.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;		None
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  res             1   20[BANK0 ] unsigned char 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      void 
  2293 ;; Registers used:
  2294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2304 ;;Total ram usage:        1 bytes
  2305 ;; Hardware stack levels required when called:   14
  2306 ;; This function calls:
  2307 ;;		_SYSTEM_Initialize
  2308 ;;		_TMR0_SetInterruptHandler
  2309 ;;		_TMR0_StartTimer
  2310 ;;		_TMR0_StopTimer
  2311 ;;		_TMR1_StopTimer
  2312 ;;		_TMR5_StopTimer
  2313 ;;		__delay_MS
  2314 ;;		_cmd_consol_task
  2315 ;;		_console_init
  2316 ;;		_display_text
  2317 ;;		_make_display
  2318 ;;		_printf
  2319 ;; This function is called by:
  2320 ;;		Startup code after reset
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text0
  2325  004052                     __ptext0:
  2326                           	opt stack 0
  2327  004052                     _main:
  2328                           	opt stack 17
  2329                           
  2330                           ;main.c: 71: SYSTEM_Initialize();
  2331                           
  2332                           ;incstack = 0
  2333  004052  EC5F  F026         	call	_SYSTEM_Initialize	;wreg free
  2334                           
  2335                           ;main.c: 72: TMR5_StopTimer();
  2336  004056  EC56  F027         	call	_TMR5_StopTimer	;wreg free
  2337                           
  2338                           ;main.c: 73: TMR1_StopTimer();
  2339  00405A  EC5C  F027         	call	_TMR1_StopTimer	;wreg free
  2340                           
  2341                           ;main.c: 74: TMR0_StopTimer();
  2342  00405E  EC5E  F027         	call	_TMR0_StopTimer	;wreg free
  2343                           
  2344                           ;main.c: 76: TMR0_SetInterruptHandler(make_array);
  2345  004062  0E70               	movlw	low _make_array
  2346  004064  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  2347  004066  0E4E               	movlw	high _make_array
  2348  004068  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  2349  00406A  EC4D  F027         	call	_TMR0_SetInterruptHandler	;wreg free
  2350                           
  2351                           ;main.c: 96: (INTCONbits.GIE = 1);
  2352  00406E  8EF2               	bsf	intcon,7,c	;volatile
  2353                           
  2354                           ;main.c: 102: (INTCONbits.PEIE = 1);
  2355  004070  8CF2               	bsf	intcon,6,c	;volatile
  2356                           
  2357                           ;main.c: 106: console_init();
  2358  004072  EC30  F021         	call	_console_init	;wreg free
  2359                           
  2360                           ;main.c: 107: _delay_MS(1000);
  2361  004076  0E03               	movlw	3
  2362  004078  6E11               	movwf	__delay_MS@delay+1,c
  2363  00407A  0EE8               	movlw	232
  2364  00407C  6E10               	movwf	__delay_MS@delay,c
  2365  00407E  ECF6  F023         	call	__delay_MS	;wreg free
  2366                           
  2367                           ;main.c: 109: printf("Init_complete..\r\n");
  2368  004082  0EC3               	movlw	low STR_149
  2369  004084  6E2B               	movwf	printf@f,c
  2370  004086  0EFD               	movlw	high STR_149
  2371  004088  6E2C               	movwf	printf@f+1,c
  2372  00408A  EC12  F025         	call	_printf	;wreg free
  2373                           
  2374                           ;main.c: 124: TMR0_StartTimer();
  2375  00408E  EC62  F027         	call	_TMR0_StartTimer	;wreg free
  2376  004092                     l9571:
  2377                           
  2378                           ;main.c: 130: bool res = cmd_consol_task();
  2379  004092  EC5C  F00D         	call	_cmd_consol_task	;wreg free
  2380  004096  0100               	movlb	0	; () banked
  2381  004098  6F74               	movwf	main@res& (0+255),b
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;main.c: 131: if (res == 1){
  2385  00409A  0100               	movlb	0	; () banked
  2386  00409C  0574               	decf	main@res& (0+255),w,b
  2387  00409E  A4D8               	btfss	status,2,c
  2388  0040A0  D015               	goto	l9591
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;main.c: 133: main_state = MAKE_DISPLAY_STATE;
  2392  0040A2  0E01               	movlw	1
  2393  0040A4  0101               	movlb	1	; () banked
  2394  0040A6  6F1C               	movwf	_main_state& (0+255),b
  2395                           
  2396                           ; BSR set to: 1
  2397                           ;main.c: 134: }
  2398                           ;main.c: 135: switch (main_state) {
  2399  0040A8  D011               	goto	l9591
  2400  0040AA                     l9577:
  2401                           
  2402                           ; BSR set to: 1
  2403                           ;main.c: 144: {
  2404                           ;main.c: 145: make_display();
  2405  0040AA  EC6F  F009         	call	_make_display	;wreg free
  2406                           
  2407                           ;main.c: 146: main_state = DISPLAY_STATE;
  2408  0040AE  0E02               	movlw	2
  2409  0040B0  D00A               	goto	L1
  2410  0040B2                     l9581:
  2411                           
  2412                           ; BSR set to: 1
  2413                           ;main.c: 150: {
  2414                           ;main.c: 151: if (display == 1) {
  2415  0040B2  0101               	movlb	1	; () banked
  2416  0040B4  051B               	decf	_display& (0+255),w,b
  2417  0040B6  A4D8               	btfss	status,2,c
  2418  0040B8  D7EC               	goto	l9571
  2419                           
  2420                           ; BSR set to: 1
  2421                           ;main.c: 152: display_text();
  2422  0040BA  ECB1  F020         	call	_display_text	;wreg free
  2423                           
  2424                           ;main.c: 153: display = 0;
  2425  0040BE  0E00               	movlw	0
  2426  0040C0  0101               	movlb	1	; () banked
  2427  0040C2  6F1B               	movwf	_display& (0+255),b
  2428                           
  2429                           ; BSR set to: 1
  2430                           ;main.c: 154: main_state = MAKE_DISPLAY_STATE;
  2431  0040C4  0E01               	movlw	1
  2432  0040C6                     L1:
  2433  0040C6  0101               	movlb	1	; () banked
  2434  0040C8  6F1C               	movwf	_main_state& (0+255),b
  2435                           
  2436                           ; BSR set to: 1
  2437                           ;main.c: 161: }
  2438                           ;main.c: 162: }
  2439                           
  2440                           ; BSR set to: 1
  2441                           ;main.c: 159: {
  2442                           ;main.c: 160: break;
  2443                           
  2444                           ;main.c: 157: }
  2445                           ;main.c: 158: default:
  2446                           
  2447                           ; BSR set to: 1
  2448                           ;main.c: 155: }
  2449                           ;main.c: 156: break;
  2450  0040CA  D7E3               	goto	l9571
  2451  0040CC                     l9591:
  2452  0040CC  0101               	movlb	1	; () banked
  2453  0040CE  511C               	movf	_main_state& (0+255),w,b
  2454                           
  2455                           ; Switch size 1, requested type "space"
  2456                           ; Number of cases is 2, Range of values is 1 to 2
  2457                           ; switch strategies available:
  2458                           ; Name         Instructions Cycles
  2459                           ; simple_byte            7     4 (average)
  2460                           ;	Chosen strategy is simple_byte
  2461  0040D0  0A01               	xorlw	1	; case 1
  2462  0040D2  B4D8               	btfsc	status,2,c
  2463  0040D4  D7EA               	goto	l9577
  2464  0040D6  0A03               	xorlw	3	; case 2
  2465  0040D8  B4D8               	btfsc	status,2,c
  2466  0040DA  D7EB               	goto	l9581
  2467                           
  2468                           ; BSR set to: 1
  2469                           
  2470                           ; BSR set to: 1
  2471  0040DC  D7DA               	goto	l9571
  2472  0040DE                     __end_of_main:
  2473                           	opt stack 0
  2474                           tblptru	equ	0xFF8
  2475                           tblptrh	equ	0xFF7
  2476                           tblptrl	equ	0xFF6
  2477                           tablat	equ	0xFF5
  2478                           intcon	equ	0xFF2
  2479                           postinc0	equ	0xFEE
  2480                           wreg	equ	0xFE8
  2481                           postdec1	equ	0xFE5
  2482                           fsr1h	equ	0xFE2
  2483                           fsr1l	equ	0xFE1
  2484                           status	equ	0xFD8
  2485                           
  2486 ;; *************** function _console_init *****************
  2487 ;; Defined at:
  2488 ;;		line 567 in file "cmd_consol.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;		None
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;		None
  2493 ;; Return value:  Size  Location     Type
  2494 ;;                  1    wreg      void 
  2495 ;; Registers used:
  2496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2497 ;; Tracked objects:
  2498 ;;		On entry : 0/0
  2499 ;;		On exit  : 0/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;Total ram usage:        0 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    7
  2509 ;; This function calls:
  2510 ;;		_clear_cmd_data
  2511 ;;		_memset
  2512 ;; This function is called by:
  2513 ;;		_main
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	text1
  2518  004260                     __ptext1:
  2519                           	opt stack 0
  2520  004260                     _console_init:
  2521                           	opt stack 23
  2522                           
  2523                           ;cmd_consol.c: 568: cmd_consol_state = CMD_CONSOL_INIT;
  2524                           
  2525                           ; BSR set to: 1
  2526                           ;incstack = 0
  2527  004260  0E00               	movlw	0
  2528  004262  0101               	movlb	1	; () banked
  2529  004264  6F1A               	movwf	_cmd_consol_state& (0+255),b
  2530                           
  2531                           ; BSR set to: 1
  2532                           ;cmd_consol.c: 569: clear_cmd_data();
  2533  004266  EC62  F025         	call	_clear_cmd_data	;wreg free
  2534                           
  2535                           ;cmd_consol.c: 570: valid_cmd = 0;
  2536  00426A  0E00               	movlw	0
  2537  00426C  0100               	movlb	0	; () banked
  2538  00426E  6F75               	movwf	_valid_cmd& (0+255),b
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;cmd_consol.c: 571: clcd_init_row = 0;
  2542  004270  0E00               	movlw	0
  2543  004272  6E41               	movwf	_clcd_init_row,c
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;cmd_consol.c: 572: clcd_init_col = 0;
  2547  004274  0E00               	movlw	0
  2548  004276  0101               	movlb	1	; () banked
  2549  004278  6F19               	movwf	_clcd_init_col& (0+255),b
  2550                           
  2551                           ; BSR set to: 1
  2552                           ;cmd_consol.c: 573: check = 0;
  2553  00427A  0E00               	movlw	0
  2554  00427C  0101               	movlb	1	; () banked
  2555  00427E  6F18               	movwf	_check& (0+255),b
  2556                           
  2557                           ; BSR set to: 1
  2558                           ;cmd_consol.c: 574: memset(CMD, 0, sizeof (CMD));
  2559  004280  0ECB               	movlw	low _CMD
  2560  004282  6E24               	movwf	memset@p1,c
  2561  004284  0E01               	movlw	high _CMD
  2562  004286  6E25               	movwf	memset@p1+1,c
  2563  004288  0E00               	movlw	0
  2564  00428A  6E27               	movwf	memset@c+1,c
  2565  00428C  0E00               	movlw	0
  2566  00428E  6E26               	movwf	memset@c,c
  2567  004290  0E00               	movlw	0
  2568  004292  6E29               	movwf	memset@n+1,c
  2569  004294  0E0F               	movlw	15
  2570  004296  6E28               	movwf	memset@n,c
  2571  004298  ECD8  F025         	call	_memset	;wreg free
  2572                           
  2573                           ;cmd_consol.c: 575: memset(str_data, 0, sizeof (str_data));
  2574  00429C  0EA4               	movlw	low _str_data
  2575  00429E  6E24               	movwf	memset@p1,c
  2576  0042A0  0E02               	movlw	high _str_data
  2577  0042A2  6E25               	movwf	memset@p1+1,c
  2578  0042A4  0E00               	movlw	0
  2579  0042A6  6E27               	movwf	memset@c+1,c
  2580  0042A8  0E00               	movlw	0
  2581  0042AA  6E26               	movwf	memset@c,c
  2582  0042AC  0E00               	movlw	0
  2583  0042AE  6E29               	movwf	memset@n+1,c
  2584  0042B0  0E28               	movlw	40
  2585  0042B2  6E28               	movwf	memset@n,c
  2586  0042B4  ECD8  F025         	call	_memset	;wreg free
  2587                           
  2588                           ;cmd_consol.c: 576: memset(uart_str, 0, sizeof (uart_str));
  2589  0042B8  0E00               	movlw	low _uart_str
  2590  0042BA  6E24               	movwf	memset@p1,c
  2591  0042BC  0E03               	movlw	high _uart_str
  2592  0042BE  6E25               	movwf	memset@p1+1,c
  2593  0042C0  0E00               	movlw	0
  2594  0042C2  6E27               	movwf	memset@c+1,c
  2595  0042C4  0E00               	movlw	0
  2596  0042C6  6E26               	movwf	memset@c,c
  2597  0042C8  0E00               	movlw	0
  2598  0042CA  6E29               	movwf	memset@n+1,c
  2599  0042CC  0E96               	movlw	150
  2600  0042CE  6E28               	movwf	memset@n,c
  2601  0042D0  ECD8  F025         	call	_memset	;wreg free
  2602  0042D4  0012               	return		;funcret
  2603  0042D6                     __end_of_console_init:
  2604                           	opt stack 0
  2605                           tblptru	equ	0xFF8
  2606                           tblptrh	equ	0xFF7
  2607                           tblptrl	equ	0xFF6
  2608                           tablat	equ	0xFF5
  2609                           intcon	equ	0xFF2
  2610                           postinc0	equ	0xFEE
  2611                           wreg	equ	0xFE8
  2612                           postdec1	equ	0xFE5
  2613                           fsr1h	equ	0xFE2
  2614                           fsr1l	equ	0xFE1
  2615                           status	equ	0xFD8
  2616                           
  2617 ;; *************** function _cmd_consol_task *****************
  2618 ;; Defined at:
  2619 ;;		line 579 in file "cmd_consol.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;		None
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  temp_uart_st  150    0[BANK5 ] unsigned char [150]
  2624 ;;  val             1  151[BANK5 ] unsigned char 
  2625 ;;  ch              1  152[BANK5 ] unsigned char 
  2626 ;;  res             1  150[BANK5 ] unsigned char 
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      unsigned char 
  2629 ;; Registers used:
  2630 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Locals:         0       0       0       0       0       0     153       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Totals:         0       1       0       0       0       0     153       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;Total ram usage:      154 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:   13
  2643 ;; This function calls:
  2644 ;;		_EUSART1_Read
  2645 ;;		_memset
  2646 ;;		_parse_cmd_str
  2647 ;;		_printf
  2648 ;;		_put_string_usart1
  2649 ;;		_puts
  2650 ;;		_reply_to_host
  2651 ;;		_sprintf
  2652 ;;		_strcpy
  2653 ;;		_strlen
  2654 ;;		_strstr
  2655 ;; This function is called by:
  2656 ;;		_main
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text2
  2661  001AB8                     __ptext2:
  2662                           	opt stack 0
  2663  001AB8                     _cmd_consol_task:
  2664                           	opt stack 17
  2665                           
  2666                           ;cmd_consol.c: 580: bool res = 0;
  2667                           
  2668                           ;incstack = 0
  2669  001AB8  0E00               	movlw	0
  2670  001ABA  0105               	movlb	5	; () banked
  2671  001ABC  6F96               	movwf	cmd_consol_task@res& (0+255),b
  2672                           
  2673                           ;cmd_consol.c: 581: if ((eusart1RxCount) > 0) {
  2674  001ABE  5044               	movf	_eusart1RxCount,w,c	;volatile
  2675  001AC0  B4D8               	btfsc	status,2,c
  2676  001AC2  D1D9               	goto	l9445
  2677                           
  2678                           ; BSR set to: 5
  2679                           ;cmd_consol.c: 582: static int i = 0;
  2680                           ;cmd_consol.c: 583: unsigned char ch = 0;
  2681  001AC4  0E00               	movlw	0
  2682  001AC6  0105               	movlb	5	; () banked
  2683  001AC8  6F98               	movwf	cmd_consol_task@ch& (0+255),b
  2684                           
  2685                           ;cmd_consol.c: 584: while ((eusart1RxCount)) {
  2686  001ACA  D05C               	goto	l9363
  2687  001ACC                     l9337:
  2688                           
  2689                           ;cmd_consol.c: 585: ch = EUSART1_Read();
  2690  001ACC  EC48  F025         	call	_EUSART1_Read	;wreg free
  2691  001AD0  0105               	movlb	5	; () banked
  2692  001AD2  6F98               	movwf	cmd_consol_task@ch& (0+255),b
  2693                           
  2694                           ; BSR set to: 5
  2695                           ;cmd_consol.c: 586: if (ch == '\n' || ch == '\r') {
  2696  001AD4  0E0A               	movlw	10
  2697  001AD6  0105               	movlb	5	; () banked
  2698  001AD8  1998               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2699  001ADA  B4D8               	btfsc	status,2,c
  2700  001ADC  D005               	goto	l9343
  2701                           
  2702                           ; BSR set to: 5
  2703  001ADE  0E0D               	movlw	13
  2704  001AE0  0105               	movlb	5	; () banked
  2705  001AE2  1998               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2706  001AE4  A4D8               	btfss	status,2,c
  2707  001AE6  D00F               	goto	l9349
  2708  001AE8                     l9343:
  2709                           
  2710                           ; BSR set to: 5
  2711                           ;cmd_consol.c: 587: i = 0;
  2712  001AE8  0E00               	movlw	0
  2713  001AEA  0101               	movlb	1	; () banked
  2714  001AEC  6F13               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2715  001AEE  0E00               	movlw	0
  2716  001AF0  6F12               	movwf	cmd_consol_task@i& (0+255),b
  2717                           
  2718                           ;cmd_consol.c: 588: check = 1;
  2719  001AF2  0E01               	movlw	1
  2720  001AF4  0101               	movlb	1	; () banked
  2721  001AF6  6F18               	movwf	_check& (0+255),b
  2722                           
  2723                           ; BSR set to: 1
  2724                           ;cmd_consol.c: 589: printf("\r\n");
  2725  001AF8  0E96               	movlw	low (STR_145+4)
  2726  001AFA  6E2B               	movwf	printf@f,c
  2727  001AFC  0EFF               	movlw	high (STR_145+4)
  2728  001AFE  6E2C               	movwf	printf@f+1,c
  2729  001B00  EC12  F025         	call	_printf	;wreg free
  2730                           
  2731                           ;cmd_consol.c: 590: break;
  2732  001B04  D042               	goto	l9365
  2733  001B06                     l9349:
  2734  001B06  0E08               	movlw	8
  2735  001B08  0105               	movlb	5	; () banked
  2736  001B0A  1998               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2737  001B0C  A4D8               	btfss	status,2,c
  2738  001B0E  D018               	goto	l9357
  2739                           
  2740                           ; BSR set to: 5
  2741                           ;cmd_consol.c: 592: uart_str[--i] = 0;
  2742  001B10  0101               	movlb	1	; () banked
  2743  001B12  0712               	decf	cmd_consol_task@i& (0+255),f,b
  2744  001B14  A0D8               	btfss	status,0,c
  2745  001B16  0713               	decf	(cmd_consol_task@i+1)& (0+255),f,b
  2746  001B18  0E00               	movlw	low _uart_str
  2747  001B1A  0101               	movlb	1	; () banked
  2748  001B1C  2512               	addwf	cmd_consol_task@i& (0+255),w,b
  2749  001B1E  6ED9               	movwf	fsr2l,c
  2750  001B20  0E03               	movlw	high _uart_str
  2751  001B22  0101               	movlb	1	; () banked
  2752  001B24  2113               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2753  001B26  6EDA               	movwf	fsr2h,c
  2754  001B28  0E00               	movlw	0
  2755  001B2A  6EDF               	movwf	indf2,c
  2756                           
  2757                           ; BSR set to: 1
  2758                           ;cmd_consol.c: 593: printf("%c", ch);
  2759  001B2C  0EFA               	movlw	low STR_134
  2760  001B2E  6E2B               	movwf	printf@f,c
  2761  001B30  0EFF               	movlw	high STR_134
  2762  001B32  6E2C               	movwf	printf@f+1,c
  2763  001B34  C598  F02D         	movff	cmd_consol_task@ch,?_printf+2
  2764  001B38  6A2E               	clrf	?_printf+3,c
  2765  001B3A  EC12  F025         	call	_printf	;wreg free
  2766                           
  2767                           ;cmd_consol.c: 594: continue;
  2768  001B3E  D022               	goto	l9363
  2769  001B40                     l9357:
  2770                           
  2771                           ;cmd_consol.c: 596: uart_str[i] = ch;
  2772  001B40  0E00               	movlw	low _uart_str
  2773  001B42  0101               	movlb	1	; () banked
  2774  001B44  2512               	addwf	cmd_consol_task@i& (0+255),w,b
  2775  001B46  6ED9               	movwf	fsr2l,c
  2776  001B48  0E03               	movlw	high _uart_str
  2777  001B4A  0101               	movlb	1	; () banked
  2778  001B4C  2113               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2779  001B4E  6EDA               	movwf	fsr2h,c
  2780  001B50  C598  FFDF         	movff	cmd_consol_task@ch,indf2
  2781                           
  2782                           ; BSR set to: 1
  2783                           ;cmd_consol.c: 597: printf("%c", uart_str[i]);
  2784  001B54  0EFA               	movlw	low STR_134
  2785  001B56  6E2B               	movwf	printf@f,c
  2786  001B58  0EFF               	movlw	high STR_134
  2787  001B5A  6E2C               	movwf	printf@f+1,c
  2788  001B5C  0E00               	movlw	low _uart_str
  2789  001B5E  0101               	movlb	1	; () banked
  2790  001B60  2512               	addwf	cmd_consol_task@i& (0+255),w,b
  2791  001B62  6ED9               	movwf	fsr2l,c
  2792  001B64  0E03               	movlw	high _uart_str
  2793  001B66  0101               	movlb	1	; () banked
  2794  001B68  2113               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2795  001B6A  6EDA               	movwf	fsr2h,c
  2796  001B6C  50DF               	movf	indf2,w,c
  2797  001B6E  0100               	movlb	0	; () banked
  2798  001B70  6F73               	movwf	??_cmd_consol_task& (0+255),b
  2799  001B72  0100               	movlb	0	; () banked
  2800  001B74  5173               	movf	??_cmd_consol_task& (0+255),w,b
  2801  001B76  6E2D               	movwf	?_printf+2,c
  2802  001B78  6A2E               	clrf	?_printf+3,c
  2803  001B7A  EC12  F025         	call	_printf	;wreg free
  2804                           
  2805                           ;cmd_consol.c: 598: }
  2806                           ;cmd_consol.c: 606: i++;
  2807  001B7E  0101               	movlb	1	; () banked
  2808  001B80  4B12               	infsnz	cmd_consol_task@i& (0+255),f,b
  2809  001B82  2B13               	incf	(cmd_consol_task@i+1)& (0+255),f,b
  2810  001B84                     l9363:
  2811  001B84  5044               	movf	_eusart1RxCount,w,c	;volatile
  2812  001B86  A4D8               	btfss	status,2,c
  2813  001B88  D7A1               	goto	l9337
  2814  001B8A                     l9365:
  2815                           
  2816                           ;cmd_consol.c: 607: }
  2817                           ;cmd_consol.c: 608: if (i > 150) {
  2818  001B8A  0101               	movlb	1	; () banked
  2819  001B8C  BF13               	btfsc	(cmd_consol_task@i+1)& (0+255),7,b
  2820  001B8E  D173               	goto	l9445
  2821  001B90  0101               	movlb	1	; () banked
  2822  001B92  5113               	movf	(cmd_consol_task@i+1)& (0+255),w,b
  2823  001B94  E105               	bnz	u9350
  2824  001B96  0E97               	movlw	151
  2825  001B98  0101               	movlb	1	; () banked
  2826  001B9A  5D12               	subwf	cmd_consol_task@i& (0+255),w,b
  2827  001B9C  A0D8               	btfss	status,0,c
  2828  001B9E  D16B               	goto	l9445
  2829  001BA0                     u9350:
  2830                           
  2831                           ; BSR set to: 1
  2832                           ;cmd_consol.c: 609: puts("ERR_CMD_LEN");
  2833  001BA0  0ED6               	movlw	low STR_136
  2834  001BA2  6E14               	movwf	puts@s,c
  2835  001BA4  0EFE               	movlw	high STR_136
  2836  001BA6  6E15               	movwf	puts@s+1,c
  2837  001BA8  ECC4  F026         	call	_puts	;wreg free
  2838                           
  2839                           ;cmd_consol.c: 610: i = 0;
  2840  001BAC  0E00               	movlw	0
  2841  001BAE  0101               	movlb	1	; () banked
  2842  001BB0  6F13               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2843  001BB2  0E00               	movlw	0
  2844  001BB4  6F12               	movwf	cmd_consol_task@i& (0+255),b
  2845                           
  2846                           ; BSR set to: 1
  2847                           ;cmd_consol.c: 611: }
  2848                           ;cmd_consol.c: 612: }
  2849                           ;cmd_consol.c: 613: switch (cmd_consol_state) {
  2850                           
  2851                           ; BSR set to: 1
  2852  001BB6  D15F               	goto	l9445
  2853  001BB8                     l9371:
  2854                           
  2855                           ; BSR set to: 1
  2856                           ;cmd_consol.c: 615: {
  2857                           ;cmd_consol.c: 616: memset(CMD, 0, sizeof (CMD));
  2858  001BB8  0ECB               	movlw	low _CMD
  2859  001BBA  6E24               	movwf	memset@p1,c
  2860  001BBC  0E01               	movlw	high _CMD
  2861  001BBE  6E25               	movwf	memset@p1+1,c
  2862  001BC0  0E00               	movlw	0
  2863  001BC2  6E27               	movwf	memset@c+1,c
  2864  001BC4  0E00               	movlw	0
  2865  001BC6  6E26               	movwf	memset@c,c
  2866  001BC8  0E00               	movlw	0
  2867  001BCA  6E29               	movwf	memset@n+1,c
  2868  001BCC  0E0F               	movlw	15
  2869  001BCE  6E28               	movwf	memset@n,c
  2870  001BD0  ECD8  F025         	call	_memset	;wreg free
  2871                           
  2872                           ;cmd_consol.c: 617: memset(uart_str, 0, sizeof (uart_str));
  2873  001BD4  0E00               	movlw	low _uart_str
  2874  001BD6  6E24               	movwf	memset@p1,c
  2875  001BD8  0E03               	movlw	high _uart_str
  2876  001BDA  6E25               	movwf	memset@p1+1,c
  2877  001BDC  0E00               	movlw	0
  2878  001BDE  6E27               	movwf	memset@c+1,c
  2879  001BE0  0E00               	movlw	0
  2880  001BE2  6E26               	movwf	memset@c,c
  2881  001BE4  0E00               	movlw	0
  2882  001BE6  6E29               	movwf	memset@n+1,c
  2883  001BE8  0E96               	movlw	150
  2884  001BEA  6E28               	movwf	memset@n,c
  2885  001BEC  ECD8  F025         	call	_memset	;wreg free
  2886                           
  2887                           ;cmd_consol.c: 618: valid_cmd = 0;
  2888  001BF0  0E00               	movlw	0
  2889  001BF2  0100               	movlb	0	; () banked
  2890  001BF4  6F75               	movwf	_valid_cmd& (0+255),b
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;cmd_consol.c: 619: memset(out_str, 0, sizeof (out_str));
  2894  001BF6  0E40               	movlw	low _out_str
  2895  001BF8  6E24               	movwf	memset@p1,c
  2896  001BFA  0E02               	movlw	high _out_str
  2897  001BFC  6E25               	movwf	memset@p1+1,c
  2898  001BFE  0E00               	movlw	0
  2899  001C00  6E27               	movwf	memset@c+1,c
  2900  001C02  0E00               	movlw	0
  2901  001C04  6E26               	movwf	memset@c,c
  2902  001C06  0E00               	movlw	0
  2903  001C08  6E29               	movwf	memset@n+1,c
  2904  001C0A  0E64               	movlw	100
  2905  001C0C  6E28               	movwf	memset@n,c
  2906  001C0E  ECD8  F025         	call	_memset	;wreg free
  2907                           
  2908                           ;cmd_consol.c: 620: sprintf(out_str, "Init_Done\r\n");
  2909  001C12  0E40               	movlw	low _out_str
  2910  001C14  6E2B               	movwf	sprintf@wh,c
  2911  001C16  0E02               	movlw	high _out_str
  2912  001C18  6E2C               	movwf	sprintf@wh+1,c
  2913  001C1A  0E9A               	movlw	low STR_137
  2914  001C1C  6E2D               	movwf	sprintf@f,c
  2915  001C1E  0EFE               	movlw	high STR_137
  2916  001C20  6E2E               	movwf	sprintf@f+1,c
  2917  001C22  EC18  F024         	call	_sprintf	;wreg free
  2918                           
  2919                           ;cmd_consol.c: 621: put_string_usart1(out_str);
  2920  001C26  0E40               	movlw	low _out_str
  2921  001C28  6E11               	movwf	put_string_usart1@str,c
  2922  001C2A  0E02               	movlw	high _out_str
  2923  001C2C  6E12               	movwf	put_string_usart1@str+1,c
  2924  001C2E  EC2A  F026         	call	_put_string_usart1	;wreg free
  2925                           
  2926                           ;cmd_consol.c: 622: printf("%s..\r\n", out_str);
  2927  001C32  0E99               	movlw	low STR_42
  2928  001C34  6E2B               	movwf	printf@f,c
  2929  001C36  0EFF               	movlw	high STR_42
  2930  001C38  6E2C               	movwf	printf@f+1,c
  2931  001C3A  0E40               	movlw	low _out_str
  2932  001C3C  6E2D               	movwf	?_printf+2,c
  2933  001C3E  0E02               	movlw	high _out_str
  2934  001C40  6E2E               	movwf	?_printf+3,c
  2935  001C42  EC12  F025         	call	_printf	;wreg free
  2936                           
  2937                           ;cmd_consol.c: 623: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2938  001C46  0E01               	movlw	1
  2939  001C48  D0A4               	goto	L2
  2940  001C4A                     l9385:
  2941                           
  2942                           ; BSR set to: 1
  2943                           ;cmd_consol.c: 627: {
  2944                           ;cmd_consol.c: 628: static int i = 0;
  2945                           ;cmd_consol.c: 630: if (check == 1) {
  2946  001C4A  0101               	movlb	1	; () banked
  2947  001C4C  0518               	decf	_check& (0+255),w,b
  2948  001C4E  A4D8               	btfss	status,2,c
  2949  001C50  D11D               	goto	l9447
  2950                           
  2951                           ; BSR set to: 1
  2952                           ;cmd_consol.c: 631: check = 0;
  2953  001C52  0E00               	movlw	0
  2954  001C54  0101               	movlb	1	; () banked
  2955  001C56  6F18               	movwf	_check& (0+255),b
  2956                           
  2957                           ; BSR set to: 1
  2958                           ;cmd_consol.c: 632: char temp_uart_str[150] = {0};
  2959  001C58  EE24  F000         	lfsr	2,cmd_consol_task@F7537
  2960  001C5C  EE15  F000         	lfsr	1,cmd_consol_task@temp_uart_str
  2961  001C60  0E95               	movlw	149
  2962  001C62                     u9371:
  2963  001C62  CFDE FFE6          	movff	postinc2,postinc1
  2964  001C66  06E8               	decf	wreg,f,c
  2965  001C68  E2FC               	bc	u9371
  2966  001C6A  0E96               	movlw	150
  2967  001C6C  5ED9               	subwf	fsr2l,f,c
  2968  001C6E  5EE1               	subwf	fsr1l,f,c
  2969                           
  2970                           ; BSR set to: 1
  2971                           ;cmd_consol.c: 633: memset(temp_uart_str, 0, sizeof (temp_uart_str));
  2972  001C70  0E00               	movlw	low cmd_consol_task@temp_uart_str
  2973  001C72  6E24               	movwf	memset@p1,c
  2974  001C74  0E05               	movlw	high cmd_consol_task@temp_uart_str
  2975  001C76  6E25               	movwf	memset@p1+1,c
  2976  001C78  0E00               	movlw	0
  2977  001C7A  6E27               	movwf	memset@c+1,c
  2978  001C7C  0E00               	movlw	0
  2979  001C7E  6E26               	movwf	memset@c,c
  2980  001C80  0E00               	movlw	0
  2981  001C82  6E29               	movwf	memset@n+1,c
  2982  001C84  0E96               	movlw	150
  2983  001C86  6E28               	movwf	memset@n,c
  2984  001C88  ECD8  F025         	call	_memset	;wreg free
  2985                           
  2986                           ;cmd_consol.c: 634: strcpy(temp_uart_str, uart_str);
  2987  001C8C  0E00               	movlw	low cmd_consol_task@temp_uart_str
  2988  001C8E  6E24               	movwf	strcpy@to,c
  2989  001C90  0E05               	movlw	high cmd_consol_task@temp_uart_str
  2990  001C92  6E25               	movwf	strcpy@to+1,c
  2991  001C94  0E00               	movlw	low _uart_str
  2992  001C96  6E26               	movwf	strcpy@from,c
  2993  001C98  0E03               	movlw	high _uart_str
  2994  001C9A  6E27               	movwf	strcpy@from+1,c
  2995  001C9C  ECAB  F025         	call	_strcpy	;wreg free
  2996                           
  2997                           ;cmd_consol.c: 635: if (strstr(temp_uart_str, "KLM+") != (0)) {
  2998  001CA0  0E00               	movlw	low cmd_consol_task@temp_uart_str
  2999  001CA2  6E2D               	movwf	strstr@s1,c
  3000  001CA4  0E05               	movlw	high cmd_consol_task@temp_uart_str
  3001  001CA6  6E2E               	movwf	strstr@s1+1,c
  3002  001CA8  0ECD               	movlw	low STR_139
  3003  001CAA  6E2F               	movwf	strstr@s2,c
  3004  001CAC  0EFF               	movlw	high STR_139
  3005  001CAE  6E30               	movwf	strstr@s2+1,c
  3006  001CB0  EC41  F01F         	call	_strstr	;wreg free
  3007  001CB4  502D               	movf	?_strstr,w,c
  3008  001CB6  102E               	iorwf	?_strstr+1,w,c
  3009  001CB8  B4D8               	btfsc	status,2,c
  3010  001CBA  D02B               	goto	l9403
  3011                           
  3012                           ;cmd_consol.c: 637: printf("%s\r\n", uart_str);
  3013  001CBC  0E41               	movlw	low (STR_93+4)
  3014  001CBE  6E2B               	movwf	printf@f,c
  3015  001CC0  0EFF               	movlw	high (STR_93+4)
  3016  001CC2  6E2C               	movwf	printf@f+1,c
  3017  001CC4  0E00               	movlw	low _uart_str
  3018  001CC6  6E2D               	movwf	?_printf+2,c
  3019  001CC8  0E03               	movlw	high _uart_str
  3020  001CCA  6E2E               	movwf	?_printf+3,c
  3021  001CCC  EC12  F025         	call	_printf	;wreg free
  3022                           
  3023                           ;cmd_consol.c: 639: memset(uart_str, 0, sizeof (uart_str));
  3024  001CD0  0E00               	movlw	low _uart_str
  3025  001CD2  6E24               	movwf	memset@p1,c
  3026  001CD4  0E03               	movlw	high _uart_str
  3027  001CD6  6E25               	movwf	memset@p1+1,c
  3028  001CD8  0E00               	movlw	0
  3029  001CDA  6E27               	movwf	memset@c+1,c
  3030  001CDC  0E00               	movlw	0
  3031  001CDE  6E26               	movwf	memset@c,c
  3032  001CE0  0E00               	movlw	0
  3033  001CE2  6E29               	movwf	memset@n+1,c
  3034  001CE4  0E96               	movlw	150
  3035  001CE6  6E28               	movwf	memset@n,c
  3036  001CE8  ECD8  F025         	call	_memset	;wreg free
  3037                           
  3038                           ;cmd_consol.c: 640: strcpy(uart_str, temp_uart_str + strlen("KLM+"));
  3039  001CEC  0E00               	movlw	low _uart_str
  3040  001CEE  6E24               	movwf	strcpy@to,c
  3041  001CF0  0E03               	movlw	high _uart_str
  3042  001CF2  6E25               	movwf	strcpy@to+1,c
  3043  001CF4  0ECD               	movlw	low STR_139
  3044  001CF6  6E1E               	movwf	strlen@s,c
  3045  001CF8  0EFF               	movlw	high STR_139
  3046  001CFA  6E1F               	movwf	strlen@s+1,c
  3047  001CFC  ECC2  F022         	call	_strlen	;wreg free
  3048  001D00  0E00               	movlw	low cmd_consol_task@temp_uart_str
  3049  001D02  241E               	addwf	?_strlen,w,c
  3050  001D04  6E26               	movwf	strcpy@from,c
  3051  001D06  0E05               	movlw	high cmd_consol_task@temp_uart_str
  3052  001D08  201F               	addwfc	?_strlen+1,w,c
  3053  001D0A  6E27               	movwf	strcpy@from+1,c
  3054  001D0C  ECAB  F025         	call	_strcpy	;wreg free
  3055                           
  3056                           ;cmd_consol.c: 641: } else {
  3057  001D10  D014               	goto	l9407
  3058  001D12                     l9403:
  3059                           
  3060                           ;cmd_consol.c: 643: printf("%s\r\n", uart_str);
  3061  001D12  0E41               	movlw	low (STR_93+4)
  3062  001D14  6E2B               	movwf	printf@f,c
  3063  001D16  0EFF               	movlw	high (STR_93+4)
  3064  001D18  6E2C               	movwf	printf@f+1,c
  3065  001D1A  0E00               	movlw	low _uart_str
  3066  001D1C  6E2D               	movwf	?_printf+2,c
  3067  001D1E  0E03               	movlw	high _uart_str
  3068  001D20  6E2E               	movwf	?_printf+3,c
  3069  001D22  EC12  F025         	call	_printf	;wreg free
  3070                           
  3071                           ;cmd_consol.c: 645: strcpy(uart_str, temp_uart_str);
  3072  001D26  0E00               	movlw	low _uart_str
  3073  001D28  6E24               	movwf	strcpy@to,c
  3074  001D2A  0E03               	movlw	high _uart_str
  3075  001D2C  6E25               	movwf	strcpy@to+1,c
  3076  001D2E  0E00               	movlw	low cmd_consol_task@temp_uart_str
  3077  001D30  6E26               	movwf	strcpy@from,c
  3078  001D32  0E05               	movlw	high cmd_consol_task@temp_uart_str
  3079  001D34  6E27               	movwf	strcpy@from+1,c
  3080  001D36  ECAB  F025         	call	_strcpy	;wreg free
  3081  001D3A                     l9407:
  3082                           
  3083                           ;cmd_consol.c: 646: }
  3084                           ;cmd_consol.c: 647: char val = parse_cmd_str(uart_str);
  3085  001D3A  0E00               	movlw	low _uart_str
  3086  001D3C  0100               	movlb	0	; () banked
  3087  001D3E  6F60               	movwf	parse_cmd_str@str& (0+255),b
  3088  001D40  0E03               	movlw	high _uart_str
  3089  001D42  0100               	movlb	0	; () banked
  3090  001D44  6F61               	movwf	(parse_cmd_str@str+1)& (0+255),b
  3091  001D46  EC55  F000         	call	_parse_cmd_str	;wreg free
  3092  001D4A  0105               	movlb	5	; () banked
  3093  001D4C  6F97               	movwf	cmd_consol_task@val& (0+255),b
  3094                           
  3095                           ; BSR set to: 5
  3096                           ;cmd_consol.c: 648: if (0 == val) {
  3097  001D4E  0105               	movlb	5	; () banked
  3098  001D50  5197               	movf	cmd_consol_task@val& (0+255),w,b
  3099  001D52  0105               	movlb	5	; () banked
  3100  001D54  A4D8               	btfss	status,2,c
  3101  001D56  D020               	goto	l9415
  3102                           
  3103                           ; BSR set to: 5
  3104                           ;cmd_consol.c: 649: memset(temp_uart_str, 0, sizeof (temp_uart_str));
  3105  001D58  0E00               	movlw	low cmd_consol_task@temp_uart_str
  3106  001D5A  6E24               	movwf	memset@p1,c
  3107  001D5C  0E05               	movlw	high cmd_consol_task@temp_uart_str
  3108  001D5E  6E25               	movwf	memset@p1+1,c
  3109  001D60  0E00               	movlw	0
  3110  001D62  6E27               	movwf	memset@c+1,c
  3111  001D64  0E00               	movlw	0
  3112  001D66  6E26               	movwf	memset@c,c
  3113  001D68  0E00               	movlw	0
  3114  001D6A  6E29               	movwf	memset@n+1,c
  3115  001D6C  0E96               	movlw	150
  3116  001D6E  6E28               	movwf	memset@n,c
  3117  001D70  ECD8  F025         	call	_memset	;wreg free
  3118                           
  3119                           ;cmd_consol.c: 650: memset(uart_str, 0, sizeof (uart_str));
  3120  001D74  0E00               	movlw	low _uart_str
  3121  001D76  6E24               	movwf	memset@p1,c
  3122  001D78  0E03               	movlw	high _uart_str
  3123  001D7A  6E25               	movwf	memset@p1+1,c
  3124  001D7C  0E00               	movlw	0
  3125  001D7E  6E27               	movwf	memset@c+1,c
  3126  001D80  0E00               	movlw	0
  3127  001D82  6E26               	movwf	memset@c,c
  3128  001D84  0E00               	movlw	0
  3129  001D86  6E29               	movwf	memset@n+1,c
  3130  001D88  0E96               	movlw	150
  3131  001D8A  6E28               	movwf	memset@n,c
  3132  001D8C  ECD8  F025         	call	_memset	;wreg free
  3133                           
  3134                           ;cmd_consol.c: 651: cmd_consol_state = CMD_CONSOL_REPLY_HOST;
  3135  001D90  0E02               	movlw	2
  3136  001D92                     L2:
  3137  001D92  0101               	movlb	1	; () banked
  3138  001D94  6F1A               	movwf	_cmd_consol_state& (0+255),b
  3139                           
  3140                           ;cmd_consol.c: 652: } else if (9 == val) {
  3141  001D96  D07A               	goto	l9447
  3142  001D98                     l9415:
  3143  001D98  0E09               	movlw	9
  3144  001D9A  0105               	movlb	5	; () banked
  3145  001D9C  1997               	xorwf	cmd_consol_task@val& (0+255),w,b
  3146  001D9E  A4D8               	btfss	status,2,c
  3147  001DA0  D02D               	goto	l9425
  3148                           
  3149                           ; BSR set to: 5
  3150                           ;cmd_consol.c: 653: memset(out_str, 0, sizeof (out_str));
  3151  001DA2  0E40               	movlw	low _out_str
  3152  001DA4  6E24               	movwf	memset@p1,c
  3153  001DA6  0E02               	movlw	high _out_str
  3154  001DA8  6E25               	movwf	memset@p1+1,c
  3155  001DAA  0E00               	movlw	0
  3156  001DAC  6E27               	movwf	memset@c+1,c
  3157  001DAE  0E00               	movlw	0
  3158  001DB0  6E26               	movwf	memset@c,c
  3159  001DB2  0E00               	movlw	0
  3160  001DB4  6E29               	movwf	memset@n+1,c
  3161  001DB6  0E64               	movlw	100
  3162  001DB8  6E28               	movwf	memset@n,c
  3163  001DBA  ECD8  F025         	call	_memset	;wreg free
  3164                           
  3165                           ;cmd_consol.c: 654: sprintf(out_str, "%s\r\n", "ERR_INIT");
  3166  001DBE  0E40               	movlw	low _out_str
  3167  001DC0  6E2B               	movwf	sprintf@wh,c
  3168  001DC2  0E02               	movlw	high _out_str
  3169  001DC4  6E2C               	movwf	sprintf@wh+1,c
  3170  001DC6  0E41               	movlw	low (STR_93+4)
  3171  001DC8  6E2D               	movwf	sprintf@f,c
  3172  001DCA  0EFF               	movlw	high (STR_93+4)
  3173  001DCC  6E2E               	movwf	sprintf@f+1,c
  3174  001DCE  0E58               	movlw	low STR_144
  3175  001DD0  6E2F               	movwf	?_sprintf+4,c
  3176  001DD2  0EFF               	movlw	high STR_144
  3177  001DD4  6E30               	movwf	?_sprintf+5,c
  3178  001DD6  EC18  F024         	call	_sprintf	;wreg free
  3179                           
  3180                           ;cmd_consol.c: 655: put_string_usart1(out_str);
  3181  001DDA  0E40               	movlw	low _out_str
  3182  001DDC  6E11               	movwf	put_string_usart1@str,c
  3183  001DDE  0E02               	movlw	high _out_str
  3184  001DE0  6E12               	movwf	put_string_usart1@str+1,c
  3185  001DE2  EC2A  F026         	call	_put_string_usart1	;wreg free
  3186                           
  3187                           ;cmd_consol.c: 656: printf("%s\r\n\r\n", out_str);
  3188  001DE6  0E92               	movlw	low STR_145
  3189  001DE8  6E2B               	movwf	printf@f,c
  3190  001DEA  0EFF               	movlw	high STR_145
  3191  001DEC  6E2C               	movwf	printf@f+1,c
  3192  001DEE  0E40               	movlw	low _out_str
  3193  001DF0  6E2D               	movwf	?_printf+2,c
  3194  001DF2  0E02               	movlw	high _out_str
  3195  001DF4  6E2E               	movwf	?_printf+3,c
  3196  001DF6  EC12  F025         	call	_printf	;wreg free
  3197                           
  3198                           ;cmd_consol.c: 657: } else {
  3199  001DFA  D048               	goto	l9447
  3200  001DFC                     l9425:
  3201                           
  3202                           ;cmd_consol.c: 658: memset(out_str, 0, sizeof (out_str));
  3203  001DFC  0E40               	movlw	low _out_str
  3204  001DFE  6E24               	movwf	memset@p1,c
  3205  001E00  0E02               	movlw	high _out_str
  3206  001E02  6E25               	movwf	memset@p1+1,c
  3207  001E04  0E00               	movlw	0
  3208  001E06  6E27               	movwf	memset@c+1,c
  3209  001E08  0E00               	movlw	0
  3210  001E0A  6E26               	movwf	memset@c,c
  3211  001E0C  0E00               	movlw	0
  3212  001E0E  6E29               	movwf	memset@n+1,c
  3213  001E10  0E64               	movlw	100
  3214  001E12  6E28               	movwf	memset@n,c
  3215  001E14  ECD8  F025         	call	_memset	;wreg free
  3216                           
  3217                           ;cmd_consol.c: 659: sprintf(out_str, "%s\r\n", "ERROR");
  3218  001E18  0E40               	movlw	low _out_str
  3219  001E1A  6E2B               	movwf	sprintf@wh,c
  3220  001E1C  0E02               	movlw	high _out_str
  3221  001E1E  6E2C               	movwf	sprintf@wh+1,c
  3222  001E20  0E41               	movlw	low (STR_93+4)
  3223  001E22  6E2D               	movwf	sprintf@f,c
  3224  001E24  0EFF               	movlw	high (STR_93+4)
  3225  001E26  6E2E               	movwf	sprintf@f+1,c
  3226  001E28  0EC1               	movlw	low STR_117
  3227  001E2A  6E2F               	movwf	?_sprintf+4,c
  3228  001E2C  0EFF               	movlw	high STR_117
  3229  001E2E  6E30               	movwf	?_sprintf+5,c
  3230  001E30  EC18  F024         	call	_sprintf	;wreg free
  3231                           
  3232                           ;cmd_consol.c: 660: put_string_usart1(out_str);
  3233  001E34  0E40               	movlw	low _out_str
  3234  001E36  6E11               	movwf	put_string_usart1@str,c
  3235  001E38  0E02               	movlw	high _out_str
  3236  001E3A  6E12               	movwf	put_string_usart1@str+1,c
  3237  001E3C  EC2A  F026         	call	_put_string_usart1	;wreg free
  3238                           
  3239                           ;cmd_consol.c: 661: printf("%s\r\n\r\n", out_str);
  3240  001E40  0E92               	movlw	low STR_145
  3241  001E42  6E2B               	movwf	printf@f,c
  3242  001E44  0EFF               	movlw	high STR_145
  3243  001E46  6E2C               	movwf	printf@f+1,c
  3244  001E48  0E40               	movlw	low _out_str
  3245  001E4A  6E2D               	movwf	?_printf+2,c
  3246  001E4C  0E02               	movlw	high _out_str
  3247  001E4E  6E2E               	movwf	?_printf+3,c
  3248  001E50  EC12  F025         	call	_printf	;wreg free
  3249                           
  3250                           ;cmd_consol.c: 662: }
  3251                           ;cmd_consol.c: 663: }
  3252                           ;cmd_consol.c: 664: break;
  3253  001E54  D01B               	goto	l9447
  3254  001E56                     l9433:
  3255                           
  3256                           ;cmd_consol.c: 667: {
  3257                           ;cmd_consol.c: 668: if (valid_cmd == 1) {
  3258  001E56  0100               	movlb	0	; () banked
  3259  001E58  0575               	decf	_valid_cmd& (0+255),w,b
  3260  001E5A  A4D8               	btfss	status,2,c
  3261  001E5C  D005               	goto	l9439
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;cmd_consol.c: 669: reply_to_host();
  3265  001E5E  EC96  F006         	call	_reply_to_host	;wreg free
  3266                           
  3267                           ;cmd_consol.c: 670: valid_cmd = 0;
  3268  001E62  0E00               	movlw	0
  3269  001E64  0100               	movlb	0	; () banked
  3270  001E66  6F75               	movwf	_valid_cmd& (0+255),b
  3271  001E68                     l9439:
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;cmd_consol.c: 672: }
  3275                           ;cmd_consol.c: 673: cmd_consol_state = CMD_CONSOL_READ_CMD;
  3276  001E68  0E01               	movlw	1
  3277  001E6A  0101               	movlb	1	; () banked
  3278  001E6C  6F1A               	movwf	_cmd_consol_state& (0+255),b
  3279                           
  3280                           ; BSR set to: 1
  3281                           ;cmd_consol.c: 674: res = 1;
  3282  001E6E  0E01               	movlw	1
  3283  001E70  0105               	movlb	5	; () banked
  3284  001E72  6F96               	movwf	cmd_consol_task@res& (0+255),b
  3285                           
  3286                           ; BSR set to: 5
  3287                           ;cmd_consol.c: 676: }
  3288                           ;cmd_consol.c: 677: }
  3289                           
  3290                           ;cmd_consol.c: 675: break;
  3291  001E74  D00B               	goto	l9447
  3292  001E76                     l9445:
  3293  001E76  0101               	movlb	1	; () banked
  3294  001E78  511A               	movf	_cmd_consol_state& (0+255),w,b
  3295                           
  3296                           ; Switch size 1, requested type "space"
  3297                           ; Number of cases is 3, Range of values is 0 to 2
  3298                           ; switch strategies available:
  3299                           ; Name         Instructions Cycles
  3300                           ; simple_byte           10     6 (average)
  3301                           ;	Chosen strategy is simple_byte
  3302  001E7A  0A00               	xorlw	0	; case 0
  3303  001E7C  B4D8               	btfsc	status,2,c
  3304  001E7E  D69C               	goto	l9371
  3305  001E80  0A01               	xorlw	1	; case 1
  3306  001E82  B4D8               	btfsc	status,2,c
  3307  001E84  D6E2               	goto	l9385
  3308  001E86  0A03               	xorlw	3	; case 2
  3309  001E88  B4D8               	btfsc	status,2,c
  3310  001E8A  D7E5               	goto	l9433
  3311  001E8C                     l9447:
  3312                           
  3313                           ;cmd_consol.c: 678: return res;
  3314  001E8C  0105               	movlb	5	; () banked
  3315  001E8E  5196               	movf	cmd_consol_task@res& (0+255),w,b
  3316  001E90  0012               	return	
  3317  001E92                     __end_of_cmd_consol_task:
  3318                           	opt stack 0
  3319                           tblptru	equ	0xFF8
  3320                           tblptrh	equ	0xFF7
  3321                           tblptrl	equ	0xFF6
  3322                           tablat	equ	0xFF5
  3323                           intcon	equ	0xFF2
  3324                           postinc0	equ	0xFEE
  3325                           wreg	equ	0xFE8
  3326                           postinc1	equ	0xFE6
  3327                           postdec1	equ	0xFE5
  3328                           fsr1h	equ	0xFE2
  3329                           fsr1l	equ	0xFE1
  3330                           indf2	equ	0xFDF
  3331                           postinc2	equ	0xFDE
  3332                           fsr2h	equ	0xFDA
  3333                           fsr2l	equ	0xFD9
  3334                           status	equ	0xFD8
  3335                           
  3336 ;; *************** function _strstr *****************
  3337 ;; Defined at:
  3338 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strstr.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  s1              2   44[COMRAM] PTR const unsigned char 
  3341 ;;		 -> cmd_consol_task@temp_uart_str(150), STR_84(7), STR_83(7), STR_82(7), 
  3342 ;;		 -> STR_79(7), STR_77(7), STR_75(7), STR_73(7), 
  3343 ;;		 -> STR_71(2), STR_65(7), STR_63(7), STR_61(7), 
  3344 ;;		 -> STR_59(7), STR_57(7), STR_54(7), STR_52(7), 
  3345 ;;		 -> STR_49(7), STR_47(7), STR_43(7), STR_41(7), 
  3346 ;;		 -> NULL(0), STR_35(7), 
  3347 ;;  s2              2   46[COMRAM] PTR const unsigned char 
  3348 ;;		 -> STR_139(5), 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;		None
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  2   44[COMRAM] PTR unsigned char 
  3353 ;; Registers used:
  3354 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3360 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;Total ram usage:        4 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    6
  3367 ;; This function calls:
  3368 ;;		_strchr
  3369 ;;		_strlen
  3370 ;;		_strncmp
  3371 ;; This function is called by:
  3372 ;;		_cmd_consol_task
  3373 ;; This function uses a non-reentrant model
  3374 ;;
  3375                           
  3376                           	psect	text3
  3377  003E82                     __ptext3:
  3378                           	opt stack 0
  3379  003E82                     _strstr:
  3380                           	opt stack 23
  3381                           
  3382                           ; BSR set to: 5
  3383                           ;incstack = 0
  3384  003E82  D032               	goto	l9279
  3385  003E84                     l9271:
  3386  003E84  C02D  F024         	movff	strstr@s1,strncmp@s1
  3387  003E88  C02E  F025         	movff	strstr@s1+1,strncmp@s1+1
  3388  003E8C  C02F  F026         	movff	strstr@s2,strncmp@s2
  3389  003E90  C030  F027         	movff	strstr@s2+1,strncmp@s2+1
  3390  003E94  C02F  F01E         	movff	strstr@s2,strlen@s
  3391  003E98  C030  F01F         	movff	strstr@s2+1,strlen@s+1
  3392  003E9C  ECC2  F022         	call	_strlen	;wreg free
  3393  003EA0  C01E  F028         	movff	?_strlen,strncmp@len
  3394  003EA4  C01F  F029         	movff	?_strlen+1,strncmp@len+1
  3395  003EA8  EC5E  F01C         	call	_strncmp	;wreg free
  3396  003EAC  5024               	movf	?_strncmp,w,c
  3397  003EAE  1025               	iorwf	?_strncmp+1,w,c
  3398  003EB0  A4D8               	btfss	status,2,c
  3399  003EB2  D005               	goto	l9277
  3400  003EB4  C02D  F02D         	movff	strstr@s1,?_strstr
  3401  003EB8  C02E  F02E         	movff	strstr@s1+1,?_strstr+1
  3402  003EBC  0012               	return	
  3403  003EBE                     l9277:
  3404  003EBE  0E01               	movlw	1
  3405  003EC0  242D               	addwf	strstr@s1,w,c
  3406  003EC2  6E10               	movwf	strchr@ptr,c
  3407  003EC4  0E00               	movlw	0
  3408  003EC6  202E               	addwfc	strstr@s1+1,w,c
  3409  003EC8  6E11               	movwf	strchr@ptr+1,c
  3410  003ECA  C02F  FFF6         	movff	strstr@s2,tblptrl
  3411  003ECE  C030  FFF7         	movff	strstr@s2+1,tblptrh
  3412  003ED2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3413  003ED2  6AF8               	clrf	tblptru,c
  3414  003ED4                     	endif
  3415  003ED4                     	if	0	;tblptru may be non-zero
  3416  003ED4                     	endif
  3417  003ED4  0008               	tblrd		*
  3418  003ED6  50F5               	movf	tablat,w,c
  3419  003ED8  6E12               	movwf	strchr@chr,c
  3420  003EDA  6A13               	clrf	strchr@chr+1,c
  3421  003EDC  ECA3  F021         	call	_strchr	;wreg free
  3422  003EE0  C010  F02D         	movff	?_strchr,strstr@s1
  3423  003EE4  C011  F02E         	movff	?_strchr+1,strstr@s1+1
  3424  003EE8                     l9279:
  3425  003EE8  502D               	movf	strstr@s1,w,c
  3426  003EEA  102E               	iorwf	strstr@s1+1,w,c
  3427  003EEC  B4D8               	btfsc	status,2,c
  3428  003EEE  D014               	goto	l9283
  3429  003EF0  C02D  FFF6         	movff	strstr@s1,tblptrl
  3430  003EF4  C02E  FFF7         	movff	strstr@s1+1,tblptrh
  3431  003EF8  0E00               	movlw	low (__mediumconst shr (0+16))
  3432  003EFA  6EF8               	movwf	tblptru,c
  3433  003EFC  0E0F               	movlw	(high __ramtop+-1)
  3434  003EFE  64F7               	cpfsgt	tblptrh,c
  3435  003F00  D003               	bra	u9287
  3436  003F02  0008               	tblrd		*
  3437  003F04  50F5               	movf	tablat,w,c
  3438  003F06  D005               	bra	u9280
  3439  003F08                     u9287:
  3440  003F08  CFF6 FFE1          	movff	tblptrl,fsr1l
  3441  003F0C  CFF7 FFE2          	movff	tblptrh,fsr1h
  3442  003F10  50E7               	movf	indf1,w,c
  3443  003F12                     u9280:
  3444  003F12  0900               	iorlw	0
  3445  003F14  A4D8               	btfss	status,2,c
  3446  003F16  D7B6               	goto	l9271
  3447  003F18                     l9283:
  3448  003F18  0E00               	movlw	0
  3449  003F1A  6E2D               	movwf	?_strstr,c
  3450  003F1C  0E00               	movlw	0
  3451  003F1E  6E2E               	movwf	?_strstr+1,c
  3452  003F20  0012               	return	
  3453  003F22                     __end_of_strstr:
  3454                           	opt stack 0
  3455                           tblptru	equ	0xFF8
  3456                           tblptrh	equ	0xFF7
  3457                           tblptrl	equ	0xFF6
  3458                           tablat	equ	0xFF5
  3459                           intcon	equ	0xFF2
  3460                           postinc0	equ	0xFEE
  3461                           wreg	equ	0xFE8
  3462                           indf1	equ	0xFE7
  3463                           postinc1	equ	0xFE6
  3464                           postdec1	equ	0xFE5
  3465                           fsr1h	equ	0xFE2
  3466                           fsr1l	equ	0xFE1
  3467                           indf2	equ	0xFDF
  3468                           postinc2	equ	0xFDE
  3469                           fsr2h	equ	0xFDA
  3470                           fsr2l	equ	0xFD9
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function _strncmp *****************
  3474 ;; Defined at:
  3475 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncmp.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  s1              2   35[COMRAM] PTR const unsigned char 
  3478 ;;		 -> cmd_consol_task@temp_uart_str(150), STR_84(7), STR_83(7), STR_82(7), 
  3479 ;;		 -> STR_79(7), STR_77(7), STR_75(7), STR_73(7), 
  3480 ;;		 -> STR_71(2), STR_65(7), STR_63(7), STR_61(7), 
  3481 ;;		 -> STR_59(7), STR_57(7), STR_54(7), STR_52(7), 
  3482 ;;		 -> STR_49(7), STR_47(7), STR_43(7), STR_41(7), 
  3483 ;;		 -> NULL(0), STR_35(7), 
  3484 ;;  s2              2   37[COMRAM] PTR const unsigned char 
  3485 ;;		 -> STR_139(5), 
  3486 ;;  len             2   39[COMRAM] unsigned int 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;		None
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  2   35[COMRAM] int 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3498 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;Total ram usage:        9 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; Hardware stack levels required when called:    5
  3505 ;; This function calls:
  3506 ;;		Nothing
  3507 ;; This function is called by:
  3508 ;;		_strstr
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           	psect	text4
  3513  0038BC                     __ptext4:
  3514                           	opt stack 0
  3515  0038BC                     _strncmp:
  3516                           	opt stack 23
  3517                           
  3518                           ;incstack = 0
  3519  0038BC  D05A               	goto	l8631
  3520  0038BE                     l8621:
  3521  0038BE  C024  FFF6         	movff	strncmp@s1,tblptrl
  3522  0038C2  C025  FFF7         	movff	strncmp@s1+1,tblptrh
  3523  0038C6  0E00               	movlw	low (__mediumconst shr (0+16))
  3524  0038C8  6EF8               	movwf	tblptru,c
  3525  0038CA  0E0F               	movlw	(high __ramtop+-1)
  3526  0038CC  64F7               	cpfsgt	tblptrh,c
  3527  0038CE  D003               	bra	u8327
  3528  0038D0  0008               	tblrd		*
  3529  0038D2  50F5               	movf	tablat,w,c
  3530  0038D4  D005               	bra	u8320
  3531  0038D6                     u8327:
  3532  0038D6  CFF6 FFE1          	movff	tblptrl,fsr1l
  3533  0038DA  CFF7 FFE2          	movff	tblptrh,fsr1h
  3534  0038DE  50E7               	movf	indf1,w,c
  3535  0038E0                     u8320:
  3536  0038E0  0900               	iorlw	0
  3537  0038E2  B4D8               	btfsc	status,2,c
  3538  0038E4  D01C               	goto	l8625
  3539  0038E6  C026  FFF6         	movff	strncmp@s2,tblptrl
  3540  0038EA  C027  FFF7         	movff	strncmp@s2+1,tblptrh
  3541  0038EE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3542  0038EE  6AF8               	clrf	tblptru,c
  3543  0038F0                     	endif
  3544  0038F0                     	if	0	;tblptru may be non-zero
  3545  0038F0                     	endif
  3546  0038F0  0008               	tblrd		*
  3547  0038F2  CFF5 F02A          	movff	tablat,??_strncmp
  3548  0038F6  C024  FFF6         	movff	strncmp@s1,tblptrl
  3549  0038FA  C025  FFF7         	movff	strncmp@s1+1,tblptrh
  3550  0038FE  0E00               	movlw	low (__mediumconst shr (0+16))
  3551  003900  6EF8               	movwf	tblptru,c
  3552  003902  0E0F               	movlw	(high __ramtop+-1)
  3553  003904  64F7               	cpfsgt	tblptrh,c
  3554  003906  D003               	bra	u8347
  3555  003908  0008               	tblrd		*
  3556  00390A  50F5               	movf	tablat,w,c
  3557  00390C  D005               	bra	u8345
  3558  00390E                     u8347:
  3559  00390E  CFF6 FFE1          	movff	tblptrl,fsr1l
  3560  003912  CFF7 FFE2          	movff	tblptrh,fsr1h
  3561  003916  50E7               	movf	indf1,w,c
  3562  003918                     u8345:
  3563  003918  182A               	xorwf	??_strncmp,w,c
  3564  00391A  B4D8               	btfsc	status,2,c
  3565  00391C  D026               	goto	l8629
  3566  00391E                     l8625:
  3567  00391E  C026  FFF6         	movff	strncmp@s2,tblptrl
  3568  003922  C027  FFF7         	movff	strncmp@s2+1,tblptrh
  3569  003926                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3570  003926  6AF8               	clrf	tblptru,c
  3571  003928                     	endif
  3572  003928                     	if	0	;tblptru may be non-zero
  3573  003928                     	endif
  3574  003928  0008               	tblrd		*
  3575  00392A  50F5               	movf	tablat,w,c
  3576  00392C  6E2A               	movwf	??_strncmp& (0+255),c
  3577  00392E  6A2B               	clrf	(??_strncmp+1)& (0+255),c
  3578  003930  1E2A               	comf	??_strncmp,f,c
  3579  003932  1E2B               	comf	??_strncmp+1,f,c
  3580  003934  4A2A               	infsnz	??_strncmp,f,c
  3581  003936  2A2B               	incf	??_strncmp+1,f,c
  3582  003938  C024  FFF6         	movff	strncmp@s1,tblptrl
  3583  00393C  C025  FFF7         	movff	strncmp@s1+1,tblptrh
  3584  003940  0E00               	movlw	low (__mediumconst shr (0+16))
  3585  003942  6EF8               	movwf	tblptru,c
  3586  003944  0E0F               	movlw	(high __ramtop+-1)
  3587  003946  64F7               	cpfsgt	tblptrh,c
  3588  003948  D003               	bra	u8357
  3589  00394A  0008               	tblrd		*
  3590  00394C  50F5               	movf	tablat,w,c
  3591  00394E  D005               	bra	u8350
  3592  003950                     u8357:
  3593  003950  CFF6 FFE1          	movff	tblptrl,fsr1l
  3594  003954  CFF7 FFE2          	movff	tblptrh,fsr1h
  3595  003958  50E7               	movf	indf1,w,c
  3596  00395A                     u8350:
  3597  00395A  6E2C               	movwf	(??_strncmp+2)& (0+255),c
  3598  00395C  502C               	movf	??_strncmp+2,w,c
  3599  00395E  242A               	addwf	??_strncmp,w,c
  3600  003960  6E24               	movwf	?_strncmp,c
  3601  003962  0E00               	movlw	0
  3602  003964  202B               	addwfc	??_strncmp+1,w,c
  3603  003966  6E25               	movwf	?_strncmp+1,c
  3604  003968  0012               	return	
  3605  00396A                     l8629:
  3606  00396A  4A24               	infsnz	strncmp@s1,f,c
  3607  00396C  2A25               	incf	strncmp@s1+1,f,c
  3608  00396E  4A26               	infsnz	strncmp@s2,f,c
  3609  003970  2A27               	incf	strncmp@s2+1,f,c
  3610  003972                     l8631:
  3611  003972  0628               	decf	strncmp@len,f,c
  3612  003974  A0D8               	btfss	status,0,c
  3613  003976  0629               	decf	strncmp@len+1,f,c
  3614  003978  2828               	incf	strncmp@len,w,c
  3615  00397A  E1A1               	bnz	l8621
  3616  00397C  2829               	incf	strncmp@len+1,w,c
  3617  00397E  A4D8               	btfss	status,2,c
  3618  003980  D79E               	goto	l8621
  3619  003982  0E00               	movlw	0
  3620  003984  6E25               	movwf	?_strncmp+1,c
  3621  003986  0E00               	movlw	0
  3622  003988  6E24               	movwf	?_strncmp,c
  3623  00398A  0012               	return	
  3624  00398C                     __end_of_strncmp:
  3625                           	opt stack 0
  3626                           tblptru	equ	0xFF8
  3627                           tblptrh	equ	0xFF7
  3628                           tblptrl	equ	0xFF6
  3629                           tablat	equ	0xFF5
  3630                           intcon	equ	0xFF2
  3631                           postinc0	equ	0xFEE
  3632                           wreg	equ	0xFE8
  3633                           indf1	equ	0xFE7
  3634                           postinc1	equ	0xFE6
  3635                           postdec1	equ	0xFE5
  3636                           fsr1h	equ	0xFE2
  3637                           fsr1l	equ	0xFE1
  3638                           indf2	equ	0xFDF
  3639                           postinc2	equ	0xFDE
  3640                           fsr2h	equ	0xFDA
  3641                           fsr2l	equ	0xFD9
  3642                           status	equ	0xFD8
  3643                           
  3644 ;; *************** function _reply_to_host *****************
  3645 ;; Defined at:
  3646 ;;		line 485 in file "cmd_consol.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;		None
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;  ch              1   17[BANK0 ] unsigned char 
  3651 ;;  ch              1   18[BANK0 ] unsigned char 
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  1    wreg      void 
  3654 ;; Registers used:
  3655 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3663 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3664 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3665 ;;Total ram usage:        5 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; Hardware stack levels required when called:   12
  3668 ;; This function calls:
  3669 ;;		_clcd_max_col
  3670 ;;		_clcd_max_row
  3671 ;;		_init_clcd_cusotom_lcd
  3672 ;;		_max_display_str
  3673 ;;		_max_display_support
  3674 ;;		_max_uid_range
  3675 ;;		_memset
  3676 ;;		_min_uid_range
  3677 ;;		_print_conflict_ids
  3678 ;;		_printf
  3679 ;;		_put_string_usart1
  3680 ;;		_puts
  3681 ;;		_set_string_data
  3682 ;;		_sprintf
  3683 ;;		_strcmp
  3684 ;;		_update_string_data
  3685 ;; This function is called by:
  3686 ;;		_cmd_consol_task
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           	psect	text5
  3691  000D2C                     __ptext5:
  3692                           	opt stack 0
  3693  000D2C                     _reply_to_host:
  3694                           	opt stack 17
  3695                           
  3696                           ;cmd_consol.c: 486: if (strcmp(CMD, "KLM") == 0) {
  3697                           
  3698                           ;incstack = 0
  3699  000D2C  0ECB               	movlw	low _CMD
  3700  000D2E  6E10               	movwf	strcmp@s1,c
  3701  000D30  0E01               	movlw	high _CMD
  3702  000D32  6E11               	movwf	strcmp@s1+1,c
  3703  000D34  0EF3               	movlw	low STR_85
  3704  000D36  6E12               	movwf	strcmp@s2,c
  3705  000D38  0EFF               	movlw	high STR_85
  3706  000D3A  6E13               	movwf	strcmp@s2+1,c
  3707  000D3C  EC8A  F023         	call	_strcmp	;wreg free
  3708  000D40  5010               	movf	?_strcmp,w,c
  3709  000D42  1011               	iorwf	?_strcmp+1,w,c
  3710  000D44  A4D8               	btfss	status,2,c
  3711  000D46  D025               	goto	l9139
  3712                           
  3713                           ;cmd_consol.c: 487: memset(out_str, 0, sizeof (out_str));
  3714  000D48  0E40               	movlw	low _out_str
  3715  000D4A  6E24               	movwf	memset@p1,c
  3716  000D4C  0E02               	movlw	high _out_str
  3717  000D4E  6E25               	movwf	memset@p1+1,c
  3718  000D50  0E00               	movlw	0
  3719  000D52  6E27               	movwf	memset@c+1,c
  3720  000D54  0E00               	movlw	0
  3721  000D56  6E26               	movwf	memset@c,c
  3722  000D58  0E00               	movlw	0
  3723  000D5A  6E29               	movwf	memset@n+1,c
  3724  000D5C  0E64               	movlw	100
  3725  000D5E  6E28               	movwf	memset@n,c
  3726  000D60  ECD8  F025         	call	_memset	;wreg free
  3727                           
  3728                           ;cmd_consol.c: 488: sprintf(out_str, "OK\r\n");
  3729  000D64  0E40               	movlw	low _out_str
  3730  000D66  6E2B               	movwf	sprintf@wh,c
  3731  000D68  0E02               	movlw	high _out_str
  3732  000D6A  6E2C               	movwf	sprintf@wh+1,c
  3733  000D6C  0E38               	movlw	low (STR_129+4)
  3734  000D6E  6E2D               	movwf	sprintf@f,c
  3735  000D70  0EFF               	movlw	high (STR_129+4)
  3736  000D72  6E2E               	movwf	sprintf@f+1,c
  3737  000D74  EC18  F024         	call	_sprintf	;wreg free
  3738                           
  3739                           ;cmd_consol.c: 489: put_string_usart1(out_str);
  3740  000D78  0E40               	movlw	low _out_str
  3741  000D7A  6E11               	movwf	put_string_usart1@str,c
  3742  000D7C  0E02               	movlw	high _out_str
  3743  000D7E  6E12               	movwf	put_string_usart1@str+1,c
  3744  000D80  EC2A  F026         	call	_put_string_usart1	;wreg free
  3745                           
  3746                           ;cmd_consol.c: 490: puts("OK\r\n");
  3747  000D84  0E38               	movlw	low (STR_129+4)
  3748  000D86  6E14               	movwf	puts@s,c
  3749  000D88  0EFF               	movlw	high (STR_129+4)
  3750  000D8A  6E15               	movwf	puts@s+1,c
  3751  000D8C  ECC4  F026         	call	_puts	;wreg free
  3752                           
  3753                           ;cmd_consol.c: 491: } else if (strcmp(CMD, "LCDS?") == 0) {
  3754  000D90  0012               	return	
  3755  000D92                     l9139:
  3756  000D92  0ECB               	movlw	low _CMD
  3757  000D94  6E10               	movwf	strcmp@s1,c
  3758  000D96  0E01               	movlw	high _CMD
  3759  000D98  6E11               	movwf	strcmp@s1+1,c
  3760  000D9A  0EB5               	movlw	low STR_38
  3761  000D9C  6E12               	movwf	strcmp@s2,c
  3762  000D9E  0EFF               	movlw	high STR_38
  3763  000DA0  6E13               	movwf	strcmp@s2+1,c
  3764  000DA2  EC8A  F023         	call	_strcmp	;wreg free
  3765  000DA6  5010               	movf	?_strcmp,w,c
  3766  000DA8  1011               	iorwf	?_strcmp+1,w,c
  3767  000DAA  A4D8               	btfss	status,2,c
  3768  000DAC  D011               	goto	l9143
  3769                           
  3770                           ;cmd_consol.c: 492: printf("%s\r\n%s\r\n", max_display_support(), "OK");
  3771  000DAE  0E46               	movlw	low STR_90
  3772  000DB0  6E2B               	movwf	printf@f,c
  3773  000DB2  0EFF               	movlw	high STR_90
  3774  000DB4  6E2C               	movwf	printf@f+1,c
  3775  000DB6  EC3E  F027         	call	_max_display_support	;wreg free
  3776  000DBA  C010  F02D         	movff	?_max_display_support,?_printf+2
  3777  000DBE  C011  F02E         	movff	?_max_display_support+1,?_printf+3
  3778  000DC2  0EF7               	movlw	low STR_91
  3779  000DC4  6E2F               	movwf	?_printf+4,c
  3780  000DC6  0EFF               	movlw	high STR_91
  3781  000DC8  6E30               	movwf	?_printf+5,c
  3782  000DCA  EC12  F025         	call	_printf	;wreg free
  3783                           
  3784                           ;cmd_consol.c: 493: } else if (strcmp(CMD, "MC?") == 0) {
  3785  000DCE  0012               	return	
  3786  000DD0                     l9143:
  3787  000DD0  0ECB               	movlw	low _CMD
  3788  000DD2  6E10               	movwf	strcmp@s1,c
  3789  000DD4  0E01               	movlw	high _CMD
  3790  000DD6  6E11               	movwf	strcmp@s1+1,c
  3791  000DD8  0EEB               	movlw	low STR_36
  3792  000DDA  6E12               	movwf	strcmp@s2,c
  3793  000DDC  0EFF               	movlw	high STR_36
  3794  000DDE  6E13               	movwf	strcmp@s2+1,c
  3795  000DE0  EC8A  F023         	call	_strcmp	;wreg free
  3796  000DE4  5010               	movf	?_strcmp,w,c
  3797  000DE6  1011               	iorwf	?_strcmp+1,w,c
  3798  000DE8  A4D8               	btfss	status,2,c
  3799  000DEA  D013               	goto	l9147
  3800                           
  3801                           ;cmd_consol.c: 494: printf("%d\r\n%s\r\n", clcd_max_col(), "OK");
  3802  000DEC  0E3D               	movlw	low STR_93
  3803  000DEE  6E2B               	movwf	printf@f,c
  3804  000DF0  0EFF               	movlw	high STR_93
  3805  000DF2  6E2C               	movwf	printf@f+1,c
  3806  000DF4  EC12  F027         	call	_clcd_max_col	;wreg free
  3807  000DF8  0100               	movlb	0	; () banked
  3808  000DFA  6F6E               	movwf	??_reply_to_host& (0+255),b
  3809  000DFC  0100               	movlb	0	; () banked
  3810  000DFE  516E               	movf	??_reply_to_host& (0+255),w,b
  3811  000E00  6E2D               	movwf	?_printf+2,c
  3812  000E02  6A2E               	clrf	?_printf+3,c
  3813  000E04  0EF7               	movlw	low STR_91
  3814  000E06  6E2F               	movwf	?_printf+4,c
  3815  000E08  0EFF               	movlw	high STR_91
  3816  000E0A  6E30               	movwf	?_printf+5,c
  3817  000E0C  EC12  F025         	call	_printf	;wreg free
  3818                           
  3819                           ;cmd_consol.c: 495: } else if (strcmp(CMD, "MR?") == 0) {
  3820  000E10  0012               	return	
  3821  000E12                     l9147:
  3822  000E12  0ECB               	movlw	low _CMD
  3823  000E14  6E10               	movwf	strcmp@s1,c
  3824  000E16  0E01               	movlw	high _CMD
  3825  000E18  6E11               	movwf	strcmp@s1+1,c
  3826  000E1A  0EEF               	movlw	low STR_37
  3827  000E1C  6E12               	movwf	strcmp@s2,c
  3828  000E1E  0EFF               	movlw	high STR_37
  3829  000E20  6E13               	movwf	strcmp@s2+1,c
  3830  000E22  EC8A  F023         	call	_strcmp	;wreg free
  3831  000E26  5010               	movf	?_strcmp,w,c
  3832  000E28  1011               	iorwf	?_strcmp+1,w,c
  3833  000E2A  A4D8               	btfss	status,2,c
  3834  000E2C  D013               	goto	l9151
  3835                           
  3836                           ;cmd_consol.c: 496: printf("%d\r\n%s\r\n", clcd_max_row(), "OK");
  3837  000E2E  0E3D               	movlw	low STR_93
  3838  000E30  6E2B               	movwf	printf@f,c
  3839  000E32  0EFF               	movlw	high STR_93
  3840  000E34  6E2C               	movwf	printf@f+1,c
  3841  000E36  EC0B  F027         	call	_clcd_max_row	;wreg free
  3842  000E3A  0100               	movlb	0	; () banked
  3843  000E3C  6F6E               	movwf	??_reply_to_host& (0+255),b
  3844  000E3E  0100               	movlb	0	; () banked
  3845  000E40  516E               	movf	??_reply_to_host& (0+255),w,b
  3846  000E42  6E2D               	movwf	?_printf+2,c
  3847  000E44  6A2E               	clrf	?_printf+3,c
  3848  000E46  0EF7               	movlw	low STR_91
  3849  000E48  6E2F               	movwf	?_printf+4,c
  3850  000E4A  0EFF               	movlw	high STR_91
  3851  000E4C  6E30               	movwf	?_printf+5,c
  3852  000E4E  EC12  F025         	call	_printf	;wreg free
  3853                           
  3854                           ;cmd_consol.c: 497: } else if (strcmp(CMD, "LCDS") == 0) {
  3855  000E52  0012               	return	
  3856  000E54                     l9151:
  3857  000E54  0ECB               	movlw	low _CMD
  3858  000E56  6E10               	movwf	strcmp@s1,c
  3859  000E58  0E01               	movlw	high _CMD
  3860  000E5A  6E11               	movwf	strcmp@s1+1,c
  3861  000E5C  0ED7               	movlw	low STR_40
  3862  000E5E  6E12               	movwf	strcmp@s2,c
  3863  000E60  0EFF               	movlw	high STR_40
  3864  000E62  6E13               	movwf	strcmp@s2+1,c
  3865  000E64  EC8A  F023         	call	_strcmp	;wreg free
  3866  000E68  5010               	movf	?_strcmp,w,c
  3867  000E6A  1011               	iorwf	?_strcmp+1,w,c
  3868  000E6C  A4D8               	btfss	status,2,c
  3869  000E6E  D028               	goto	l9161
  3870                           
  3871                           ;cmd_consol.c: 498: init_clcd_cusotom_lcd(clcd_init_row, clcd_init_col);
  3872  000E70  C119  F039         	movff	_clcd_init_col,init_clcd_cusotom_lcd@clcd_init_col
  3873  000E74  5041               	movf	_clcd_init_row,w,c
  3874  000E76  ECEF  F01B         	call	_init_clcd_cusotom_lcd
  3875                           
  3876                           ;cmd_consol.c: 499: memset(out_str, 0, sizeof (out_str));
  3877  000E7A  0E40               	movlw	low _out_str
  3878  000E7C  6E24               	movwf	memset@p1,c
  3879  000E7E  0E02               	movlw	high _out_str
  3880  000E80  6E25               	movwf	memset@p1+1,c
  3881  000E82  0E00               	movlw	0
  3882  000E84  6E27               	movwf	memset@c+1,c
  3883  000E86  0E00               	movlw	0
  3884  000E88  6E26               	movwf	memset@c,c
  3885  000E8A  0E00               	movlw	0
  3886  000E8C  6E29               	movwf	memset@n+1,c
  3887  000E8E  0E64               	movlw	100
  3888  000E90  6E28               	movwf	memset@n,c
  3889  000E92  ECD8  F025         	call	_memset	;wreg free
  3890                           
  3891                           ;cmd_consol.c: 500: sprintf(out_str, "%s\r\n", "OK");
  3892  000E96  0E40               	movlw	low _out_str
  3893  000E98  6E2B               	movwf	sprintf@wh,c
  3894  000E9A  0E02               	movlw	high _out_str
  3895  000E9C  6E2C               	movwf	sprintf@wh+1,c
  3896  000E9E  0E41               	movlw	low (STR_93+4)
  3897  000EA0  6E2D               	movwf	sprintf@f,c
  3898  000EA2  0EFF               	movlw	high (STR_93+4)
  3899  000EA4  6E2E               	movwf	sprintf@f+1,c
  3900  000EA6  0EF7               	movlw	low STR_91
  3901  000EA8  6E2F               	movwf	?_sprintf+4,c
  3902  000EAA  0EFF               	movlw	high STR_91
  3903  000EAC  6E30               	movwf	?_sprintf+5,c
  3904  000EAE  EC18  F024         	call	_sprintf	;wreg free
  3905                           
  3906                           ;cmd_consol.c: 501: put_string_usart1(out_str);
  3907  000EB2  0E40               	movlw	low _out_str
  3908  000EB4  6E11               	movwf	put_string_usart1@str,c
  3909  000EB6  0E02               	movlw	high _out_str
  3910  000EB8  6E12               	movwf	put_string_usart1@str+1,c
  3911  000EBA  EC2A  F026         	call	_put_string_usart1	;wreg free
  3912                           
  3913                           ;cmd_consol.c: 502: } else if (strcmp(CMD, "GMDS?") == 0) {
  3914  000EBE  0012               	return	
  3915  000EC0                     l9161:
  3916  000EC0  0ECB               	movlw	low _CMD
  3917  000EC2  6E10               	movwf	strcmp@s1,c
  3918  000EC4  0E01               	movlw	high _CMD
  3919  000EC6  6E11               	movwf	strcmp@s1+1,c
  3920  000EC8  0EBB               	movlw	low STR_44
  3921  000ECA  6E12               	movwf	strcmp@s2,c
  3922  000ECC  0EFF               	movlw	high STR_44
  3923  000ECE  6E13               	movwf	strcmp@s2+1,c
  3924  000ED0  EC8A  F023         	call	_strcmp	;wreg free
  3925  000ED4  5010               	movf	?_strcmp,w,c
  3926  000ED6  1011               	iorwf	?_strcmp+1,w,c
  3927  000ED8  A4D8               	btfss	status,2,c
  3928  000EDA  D03D               	goto	l9169
  3929                           
  3930                           ;cmd_consol.c: 503: if (max_display_str() != 0) {
  3931  000EDC  EC04  F027         	call	_max_display_str	;wreg free
  3932  000EE0  0900               	iorlw	0
  3933  000EE2  B4D8               	btfsc	status,2,c
  3934  000EE4  D01F               	goto	l9167
  3935                           
  3936                           ;cmd_consol.c: 504: printf("%d,%c-%c\r\n", max_display_str(), min_uid_range(), max_uid_r
      +                          ange());
  3937  000EE6  0EF9               	movlw	low STR_102
  3938  000EE8  6E2B               	movwf	printf@f,c
  3939  000EEA  0EFE               	movlw	high STR_102
  3940  000EEC  6E2C               	movwf	printf@f+1,c
  3941  000EEE  EC04  F027         	call	_max_display_str	;wreg free
  3942  000EF2  0100               	movlb	0	; () banked
  3943  000EF4  6F6E               	movwf	??_reply_to_host& (0+255),b
  3944  000EF6  0100               	movlb	0	; () banked
  3945  000EF8  516E               	movf	??_reply_to_host& (0+255),w,b
  3946  000EFA  6E2D               	movwf	?_printf+2,c
  3947  000EFC  6A2E               	clrf	?_printf+3,c
  3948  000EFE  ECF6  F026         	call	_min_uid_range	;wreg free
  3949  000F02  0100               	movlb	0	; () banked
  3950  000F04  6F6F               	movwf	(??_reply_to_host+1)& (0+255),b
  3951  000F06  0100               	movlb	0	; () banked
  3952  000F08  516F               	movf	(??_reply_to_host+1)& (0+255),w,b
  3953  000F0A  6E2F               	movwf	?_printf+4,c
  3954  000F0C  6A30               	clrf	?_printf+5,c
  3955  000F0E  ECFD  F026         	call	_max_uid_range	;wreg free
  3956  000F12  0100               	movlb	0	; () banked
  3957  000F14  6F70               	movwf	(??_reply_to_host+2)& (0+255),b
  3958  000F16  0100               	movlb	0	; () banked
  3959  000F18  5170               	movf	(??_reply_to_host+2)& (0+255),w,b
  3960  000F1A  6E31               	movwf	?_printf+6,c
  3961  000F1C  6A32               	clrf	?_printf+7,c
  3962  000F1E  EC12  F025         	call	_printf	;wreg free
  3963                           
  3964                           ;cmd_consol.c: 505: } else {
  3965  000F22  D00E               	goto	l991
  3966  000F24                     l9167:
  3967                           
  3968                           ;cmd_consol.c: 506: printf("%d\r\n", max_display_str());
  3969  000F24  0EBE               	movlw	low (STR_24+14)
  3970  000F26  6E2B               	movwf	printf@f,c
  3971  000F28  0EFD               	movlw	high (STR_24+14)
  3972  000F2A  6E2C               	movwf	printf@f+1,c
  3973  000F2C  EC04  F027         	call	_max_display_str	;wreg free
  3974  000F30  0100               	movlb	0	; () banked
  3975  000F32  6F6E               	movwf	??_reply_to_host& (0+255),b
  3976  000F34  0100               	movlb	0	; () banked
  3977  000F36  516E               	movf	??_reply_to_host& (0+255),w,b
  3978  000F38  6E2D               	movwf	?_printf+2,c
  3979  000F3A  6A2E               	clrf	?_printf+3,c
  3980  000F3C  EC12  F025         	call	_printf	;wreg free
  3981  000F40                     l991:
  3982                           
  3983                           ;cmd_consol.c: 507: }
  3984                           ;cmd_consol.c: 508: printf("%s.., OK\r\n", "GMDS?");
  3985  000F40  0EEE               	movlw	low STR_104
  3986  000F42  6E2B               	movwf	printf@f,c
  3987  000F44  0EFE               	movlw	high STR_104
  3988  000F46  6E2C               	movwf	printf@f+1,c
  3989  000F48  0EBB               	movlw	low STR_44
  3990  000F4A  6E2D               	movwf	?_printf+2,c
  3991  000F4C  0EFF               	movlw	high STR_44
  3992  000F4E  6E2E               	movwf	?_printf+3,c
  3993  000F50  EC12  F025         	call	_printf	;wreg free
  3994                           
  3995                           ;cmd_consol.c: 509: } else if (strcmp(CMD, "SDSTR") == 0) {
  3996  000F54  0012               	return	
  3997  000F56                     l9169:
  3998  000F56  0ECB               	movlw	low _CMD
  3999  000F58  6E10               	movwf	strcmp@s1,c
  4000  000F5A  0E01               	movlw	high _CMD
  4001  000F5C  6E11               	movwf	strcmp@s1+1,c
  4002  000F5E  0EC7               	movlw	low STR_45
  4003  000F60  6E12               	movwf	strcmp@s2,c
  4004  000F62  0EFF               	movlw	high STR_45
  4005  000F64  6E13               	movwf	strcmp@s2+1,c
  4006  000F66  EC8A  F023         	call	_strcmp	;wreg free
  4007  000F6A  5010               	movf	?_strcmp,w,c
  4008  000F6C  1011               	iorwf	?_strcmp+1,w,c
  4009  000F6E  A4D8               	btfss	status,2,c
  4010  000F70  D00B               	goto	l9173
  4011                           
  4012                           ;cmd_consol.c: 510: printf("%s.., OK\r\n", "SDSTR");
  4013  000F72  0EEE               	movlw	low STR_104
  4014  000F74  6E2B               	movwf	printf@f,c
  4015  000F76  0EFE               	movlw	high STR_104
  4016  000F78  6E2C               	movwf	printf@f+1,c
  4017  000F7A  0EC7               	movlw	low STR_45
  4018  000F7C  6E2D               	movwf	?_printf+2,c
  4019  000F7E  0EFF               	movlw	high STR_45
  4020  000F80  6E2E               	movwf	?_printf+3,c
  4021  000F82  EC12  F025         	call	_printf	;wreg free
  4022                           
  4023                           ;cmd_consol.c: 511: } else if (strcmp(CMD, "SDSCROL") == 0) {
  4024  000F86  0012               	return	
  4025  000F88                     l9173:
  4026  000F88  0ECB               	movlw	low _CMD
  4027  000F8A  6E10               	movwf	strcmp@s1,c
  4028  000F8C  0E01               	movlw	high _CMD
  4029  000F8E  6E11               	movwf	strcmp@s1+1,c
  4030  000F90  0E83               	movlw	low STR_50
  4031  000F92  6E12               	movwf	strcmp@s2,c
  4032  000F94  0EFF               	movlw	high STR_50
  4033  000F96  6E13               	movwf	strcmp@s2+1,c
  4034  000F98  EC8A  F023         	call	_strcmp	;wreg free
  4035  000F9C  5010               	movf	?_strcmp,w,c
  4036  000F9E  1011               	iorwf	?_strcmp+1,w,c
  4037  000FA0  A4D8               	btfss	status,2,c
  4038  000FA2  D00B               	goto	l9177
  4039                           
  4040                           ;cmd_consol.c: 512: printf("%s.., OK\r\n", "SDSCROL");
  4041  000FA4  0EEE               	movlw	low STR_104
  4042  000FA6  6E2B               	movwf	printf@f,c
  4043  000FA8  0EFE               	movlw	high STR_104
  4044  000FAA  6E2C               	movwf	printf@f+1,c
  4045  000FAC  0E83               	movlw	low STR_50
  4046  000FAE  6E2D               	movwf	?_printf+2,c
  4047  000FB0  0EFF               	movlw	high STR_50
  4048  000FB2  6E2E               	movwf	?_printf+3,c
  4049  000FB4  EC12  F025         	call	_printf	;wreg free
  4050                           
  4051                           ;cmd_consol.c: 513: } else if (strcmp(CMD, "SDSERC") == 0) {
  4052  000FB8  0012               	return	
  4053  000FBA                     l9177:
  4054  000FBA  0ECB               	movlw	low _CMD
  4055  000FBC  6E10               	movwf	strcmp@s1,c
  4056  000FBE  0E01               	movlw	high _CMD
  4057  000FC0  6E11               	movwf	strcmp@s1+1,c
  4058  000FC2  0EA7               	movlw	low STR_56
  4059  000FC4  6E12               	movwf	strcmp@s2,c
  4060  000FC6  0EFF               	movlw	high STR_56
  4061  000FC8  6E13               	movwf	strcmp@s2+1,c
  4062  000FCA  EC8A  F023         	call	_strcmp	;wreg free
  4063  000FCE  5010               	movf	?_strcmp,w,c
  4064  000FD0  1011               	iorwf	?_strcmp+1,w,c
  4065  000FD2  A4D8               	btfss	status,2,c
  4066  000FD4  D00B               	goto	l9181
  4067                           
  4068                           ;cmd_consol.c: 514: printf("%s.., OK\r\n", "SDSERC");
  4069  000FD6  0EEE               	movlw	low STR_104
  4070  000FD8  6E2B               	movwf	printf@f,c
  4071  000FDA  0EFE               	movlw	high STR_104
  4072  000FDC  6E2C               	movwf	printf@f+1,c
  4073  000FDE  0EA7               	movlw	low STR_56
  4074  000FE0  6E2D               	movwf	?_printf+2,c
  4075  000FE2  0EFF               	movlw	high STR_56
  4076  000FE4  6E2E               	movwf	?_printf+3,c
  4077  000FE6  EC12  F025         	call	_printf	;wreg free
  4078                           
  4079                           ;cmd_consol.c: 515: } else if (strcmp(CMD, "UPDATE") == 0) {
  4080  000FEA  0012               	return	
  4081  000FEC                     l9181:
  4082  000FEC  0ECB               	movlw	low _CMD
  4083  000FEE  6E10               	movwf	strcmp@s1,c
  4084  000FF0  0E01               	movlw	high _CMD
  4085  000FF2  6E11               	movwf	strcmp@s1+1,c
  4086  000FF4  0EAE               	movlw	low STR_68
  4087  000FF6  6E12               	movwf	strcmp@s2,c
  4088  000FF8  0EFF               	movlw	high STR_68
  4089  000FFA  6E13               	movwf	strcmp@s2+1,c
  4090  000FFC  EC8A  F023         	call	_strcmp	;wreg free
  4091  001000  5010               	movf	?_strcmp,w,c
  4092  001002  1011               	iorwf	?_strcmp+1,w,c
  4093  001004  A4D8               	btfss	status,2,c
  4094  001006  D05C               	goto	l9209
  4095                           
  4096                           ;cmd_consol.c: 516: if (cmd_data.data_set == 1 && cmd_data.row_col_set == 1 && cmd_data.
      +                          scroll_set == 1) {
  4097  001008  0101               	movlb	1	; () banked
  4098  00100A  0598               	decf	(_cmd_data+42)& (0+255),w,b
  4099  00100C  A4D8               	btfss	status,2,c
  4100  00100E  D02B               	goto	l9197
  4101                           
  4102                           ; BSR set to: 1
  4103  001010  0101               	movlb	1	; () banked
  4104  001012  059D               	decf	(_cmd_data+47)& (0+255),w,b
  4105  001014  A4D8               	btfss	status,2,c
  4106  001016  D027               	goto	l9197
  4107                           
  4108                           ; BSR set to: 1
  4109  001018  0101               	movlb	1	; () banked
  4110  00101A  059F               	decf	(_cmd_data+49)& (0+255),w,b
  4111  00101C  A4D8               	btfss	status,2,c
  4112  00101E  D023               	goto	l9197
  4113                           
  4114                           ; BSR set to: 1
  4115                           ;cmd_consol.c: 517: char ch = update_string_data(&cmd_data);
  4116  001020  0E6E               	movlw	low _cmd_data
  4117  001022  6E3F               	movwf	update_string_data@data,c
  4118  001024  0E01               	movlw	high _cmd_data
  4119  001026  6E40               	movwf	update_string_data@data+1,c
  4120  001028  ECD6  F016         	call	_update_string_data	;wreg free
  4121  00102C  0100               	movlb	0	; () banked
  4122  00102E  6F71               	movwf	reply_to_host@ch& (0+255),b
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;cmd_consol.c: 518: if (ch == 200)
  4126  001030  0EC8               	movlw	200
  4127  001032  0100               	movlb	0	; () banked
  4128  001034  1971               	xorwf	reply_to_host@ch& (0+255),w,b
  4129  001036  A4D8               	btfss	status,2,c
  4130  001038  D00B               	goto	l9195
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;cmd_consol.c: 519: printf("%s\r\n", "ERROR");
  4134  00103A  0E41               	movlw	low (STR_93+4)
  4135  00103C  6E2B               	movwf	printf@f,c
  4136  00103E  0EFF               	movlw	high (STR_93+4)
  4137  001040  6E2C               	movwf	printf@f+1,c
  4138  001042  0EC1               	movlw	low STR_117
  4139  001044  6E2D               	movwf	?_printf+2,c
  4140  001046  0EFF               	movlw	high STR_117
  4141  001048  6E2E               	movwf	?_printf+3,c
  4142  00104A  EC12  F025         	call	_printf	;wreg free
  4143  00104E  0012               	return	
  4144  001050                     l9195:
  4145                           
  4146                           ;cmd_consol.c: 520: else
  4147                           ;cmd_consol.c: 521: printf("%s.., OK\r\n", "UPDATE");
  4148  001050  0EEE               	movlw	low STR_104
  4149  001052  6E2B               	movwf	printf@f,c
  4150  001054  0EFE               	movlw	high STR_104
  4151  001056  6E2C               	movwf	printf@f+1,c
  4152  001058  0EAE               	movlw	low STR_68
  4153  00105A  6E2D               	movwf	?_printf+2,c
  4154  00105C  0EFF               	movlw	high STR_68
  4155  00105E  6E2E               	movwf	?_printf+3,c
  4156  001060  EC12  F025         	call	_printf	;wreg free
  4157                           
  4158                           ;cmd_consol.c: 522: } else {
  4159  001064  0012               	return	
  4160  001066                     l9197:
  4161                           
  4162                           ;cmd_consol.c: 523: if (cmd_data.data_set == 0) {
  4163  001066  0101               	movlb	1	; () banked
  4164  001068  5198               	movf	(_cmd_data+42)& (0+255),w,b
  4165  00106A  A4D8               	btfss	status,2,c
  4166  00106C  D00B               	goto	l9201
  4167                           
  4168                           ; BSR set to: 1
  4169                           ;cmd_consol.c: 524: printf("%s\r\n", "ERR_STR_SET");
  4170  00106E  0E41               	movlw	low (STR_93+4)
  4171  001070  6E2B               	movwf	printf@f,c
  4172  001072  0EFF               	movlw	high (STR_93+4)
  4173  001074  6E2C               	movwf	printf@f+1,c
  4174  001076  0EE2               	movlw	low STR_121
  4175  001078  6E2D               	movwf	?_printf+2,c
  4176  00107A  0EFE               	movlw	high STR_121
  4177  00107C  6E2E               	movwf	?_printf+3,c
  4178  00107E  EC12  F025         	call	_printf	;wreg free
  4179                           
  4180                           ;cmd_consol.c: 525: } else if (cmd_data.row_col_set == 0) {
  4181  001082  0012               	return	
  4182  001084                     l9201:
  4183  001084  0101               	movlb	1	; () banked
  4184  001086  519D               	movf	(_cmd_data+47)& (0+255),w,b
  4185  001088  A4D8               	btfss	status,2,c
  4186  00108A  D00B               	goto	l9205
  4187                           
  4188                           ; BSR set to: 1
  4189                           ;cmd_consol.c: 526: printf("%s\r\n", "ERR_ROW_COL");
  4190  00108C  0E41               	movlw	low (STR_93+4)
  4191  00108E  6E2B               	movwf	printf@f,c
  4192  001090  0EFF               	movlw	high (STR_93+4)
  4193  001092  6E2C               	movwf	printf@f+1,c
  4194  001094  0ECA               	movlw	low STR_123
  4195  001096  6E2D               	movwf	?_printf+2,c
  4196  001098  0EFE               	movlw	high STR_123
  4197  00109A  6E2E               	movwf	?_printf+3,c
  4198  00109C  EC12  F025         	call	_printf	;wreg free
  4199                           
  4200                           ;cmd_consol.c: 527: } else if (cmd_data.scroll_set == 0) {
  4201  0010A0  0012               	return	
  4202  0010A2                     l9205:
  4203  0010A2  0101               	movlb	1	; () banked
  4204  0010A4  519F               	movf	(_cmd_data+49)& (0+255),w,b
  4205  0010A6  A4D8               	btfss	status,2,c
  4206  0010A8  0012               	return	
  4207                           
  4208                           ; BSR set to: 1
  4209                           ;cmd_consol.c: 528: printf("%s\r\n", "ERR_SCROLL_SET");
  4210  0010AA  0E41               	movlw	low (STR_93+4)
  4211  0010AC  6E2B               	movwf	printf@f,c
  4212  0010AE  0EFF               	movlw	high (STR_93+4)
  4213  0010B0  6E2C               	movwf	printf@f+1,c
  4214  0010B2  0E4B               	movlw	low STR_125
  4215  0010B4  6E2D               	movwf	?_printf+2,c
  4216  0010B6  0EFE               	movlw	high STR_125
  4217  0010B8  6E2E               	movwf	?_printf+3,c
  4218  0010BA  EC12  F025         	call	_printf	;wreg free
  4219                           
  4220                           ;cmd_consol.c: 529: }
  4221                           ;cmd_consol.c: 530: }
  4222                           ;cmd_consol.c: 531: } else if (strcmp(CMD, "SSTR") == 0) {
  4223  0010BE  0012               	return	
  4224  0010C0                     l9209:
  4225  0010C0  0ECB               	movlw	low _CMD
  4226  0010C2  6E10               	movwf	strcmp@s1,c
  4227  0010C4  0E01               	movlw	high _CMD
  4228  0010C6  6E11               	movwf	strcmp@s1+1,c
  4229  0010C8  0ED2               	movlw	low STR_69
  4230  0010CA  6E12               	movwf	strcmp@s2,c
  4231  0010CC  0EFF               	movlw	high STR_69
  4232  0010CE  6E13               	movwf	strcmp@s2+1,c
  4233  0010D0  EC8A  F023         	call	_strcmp	;wreg free
  4234  0010D4  5010               	movf	?_strcmp,w,c
  4235  0010D6  1011               	iorwf	?_strcmp+1,w,c
  4236  0010D8  A4D8               	btfss	status,2,c
  4237  0010DA  0012               	return	
  4238                           
  4239                           ;cmd_consol.c: 532: unsigned char ch = set_string_data(&cmd_data);
  4240  0010DC  0E6E               	movlw	low _cmd_data
  4241  0010DE  0100               	movlb	0	; () banked
  4242  0010E0  6F60               	movwf	set_string_data@data& (0+255),b
  4243  0010E2  0E01               	movlw	high _cmd_data
  4244  0010E4  0100               	movlb	0	; () banked
  4245  0010E6  6F61               	movwf	(set_string_data@data+1)& (0+255),b
  4246  0010E8  ECC3  F012         	call	_set_string_data	;wreg free
  4247  0010EC  0100               	movlb	0	; () banked
  4248  0010EE  6F72               	movwf	reply_to_host@ch_2113& (0+255),b
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;cmd_consol.c: 533: if (ch == 200) {
  4252  0010F0  0EC8               	movlw	200
  4253  0010F2  0100               	movlb	0	; () banked
  4254  0010F4  1972               	xorwf	reply_to_host@ch_2113& (0+255),w,b
  4255  0010F6  A4D8               	btfss	status,2,c
  4256  0010F8  D025               	goto	l9223
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;cmd_consol.c: 534: print_conflict_ids();
  4260  0010FA  EC22  F01A         	call	_print_conflict_ids	;wreg free
  4261                           
  4262                           ;cmd_consol.c: 535: memset(out_str, 0, sizeof (out_str));
  4263  0010FE  0E40               	movlw	low _out_str
  4264  001100  6E24               	movwf	memset@p1,c
  4265  001102  0E02               	movlw	high _out_str
  4266  001104  6E25               	movwf	memset@p1+1,c
  4267  001106  0E00               	movlw	0
  4268  001108  6E27               	movwf	memset@c+1,c
  4269  00110A  0E00               	movlw	0
  4270  00110C  6E26               	movwf	memset@c,c
  4271  00110E  0E00               	movlw	0
  4272  001110  6E29               	movwf	memset@n+1,c
  4273  001112  0E64               	movlw	100
  4274  001114  6E28               	movwf	memset@n,c
  4275  001116  ECD8  F025         	call	_memset	;wreg free
  4276                           
  4277                           ;cmd_consol.c: 536: sprintf(out_str, "%s\r\n", "ERR_CONFLICT");
  4278  00111A  0E40               	movlw	low _out_str
  4279  00111C  6E2B               	movwf	sprintf@wh,c
  4280  00111E  0E02               	movlw	high _out_str
  4281  001120  6E2C               	movwf	sprintf@wh+1,c
  4282  001122  0E41               	movlw	low (STR_93+4)
  4283  001124  6E2D               	movwf	sprintf@f,c
  4284  001126  0EFF               	movlw	high (STR_93+4)
  4285  001128  6E2E               	movwf	sprintf@f+1,c
  4286  00112A  0E69               	movlw	low STR_128
  4287  00112C  6E2F               	movwf	?_sprintf+4,c
  4288  00112E  0EFE               	movlw	high STR_128
  4289  001130  6E30               	movwf	?_sprintf+5,c
  4290  001132  EC18  F024         	call	_sprintf	;wreg free
  4291                           
  4292                           ;cmd_consol.c: 537: put_string_usart1(out_str);
  4293  001136  0E40               	movlw	low _out_str
  4294  001138  6E11               	movwf	put_string_usart1@str,c
  4295  00113A  0E02               	movlw	high _out_str
  4296  00113C  6E12               	movwf	put_string_usart1@str+1,c
  4297  00113E  EC2A  F026         	call	_put_string_usart1	;wreg free
  4298                           
  4299                           ;cmd_consol.c: 538: } else if (ch == 201) {
  4300  001142  0012               	return	
  4301  001144                     l9223:
  4302  001144  0EC9               	movlw	201
  4303  001146  0100               	movlb	0	; () banked
  4304  001148  1972               	xorwf	reply_to_host@ch_2113& (0+255),w,b
  4305  00114A  A4D8               	btfss	status,2,c
  4306  00114C  D03E               	goto	l9239
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;cmd_consol.c: 539: ch = set_string_data(&cmd_data);
  4310  00114E  0E6E               	movlw	low _cmd_data
  4311  001150  0100               	movlb	0	; () banked
  4312  001152  6F60               	movwf	set_string_data@data& (0+255),b
  4313  001154  0E01               	movlw	high _cmd_data
  4314  001156  0100               	movlb	0	; () banked
  4315  001158  6F61               	movwf	(set_string_data@data+1)& (0+255),b
  4316  00115A  ECC3  F012         	call	_set_string_data	;wreg free
  4317  00115E  0100               	movlb	0	; () banked
  4318  001160  6F72               	movwf	reply_to_host@ch_2113& (0+255),b
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;cmd_consol.c: 540: if (ch == 202) {
  4322  001162  0ECA               	movlw	202
  4323  001164  0100               	movlb	0	; () banked
  4324  001166  1972               	xorwf	reply_to_host@ch_2113& (0+255),w,b
  4325  001168  A4D8               	btfss	status,2,c
  4326  00116A  0012               	return	
  4327                           
  4328                           ; BSR set to: 0
  4329                           ;cmd_consol.c: 541: cmd_data.over_write = 0;
  4330  00116C  0E00               	movlw	0
  4331  00116E  0101               	movlb	1	; () banked
  4332  001170  6FA2               	movwf	(_cmd_data+52)& (0+255),b
  4333                           
  4334                           ; BSR set to: 1
  4335                           ;cmd_consol.c: 542: ch = set_string_data(&cmd_data);
  4336  001172  0E6E               	movlw	low _cmd_data
  4337  001174  0100               	movlb	0	; () banked
  4338  001176  6F60               	movwf	set_string_data@data& (0+255),b
  4339  001178  0E01               	movlw	high _cmd_data
  4340  00117A  0100               	movlb	0	; () banked
  4341  00117C  6F61               	movwf	(set_string_data@data+1)& (0+255),b
  4342  00117E  ECC3  F012         	call	_set_string_data	;wreg free
  4343  001182  0100               	movlb	0	; () banked
  4344  001184  6F72               	movwf	reply_to_host@ch_2113& (0+255),b
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;cmd_consol.c: 543: memset(out_str, 0, sizeof (out_str));
  4348  001186  0E40               	movlw	low _out_str
  4349  001188  6E24               	movwf	memset@p1,c
  4350  00118A  0E02               	movlw	high _out_str
  4351  00118C  6E25               	movwf	memset@p1+1,c
  4352  00118E  0E00               	movlw	0
  4353  001190  6E27               	movwf	memset@c+1,c
  4354  001192  0E00               	movlw	0
  4355  001194  6E26               	movwf	memset@c,c
  4356  001196  0E00               	movlw	0
  4357  001198  6E29               	movwf	memset@n+1,c
  4358  00119A  0E64               	movlw	100
  4359  00119C  6E28               	movwf	memset@n,c
  4360  00119E  ECD8  F025         	call	_memset	;wreg free
  4361                           
  4362                           ;cmd_consol.c: 544: sprintf(out_str, "%d\r\nOK\r\n", ch);
  4363  0011A2  0E40               	movlw	low _out_str
  4364  0011A4  6E2B               	movwf	sprintf@wh,c
  4365  0011A6  0E02               	movlw	high _out_str
  4366  0011A8  6E2C               	movwf	sprintf@wh+1,c
  4367  0011AA  0E34               	movlw	low STR_129
  4368  0011AC  6E2D               	movwf	sprintf@f,c
  4369  0011AE  0EFF               	movlw	high STR_129
  4370  0011B0  6E2E               	movwf	sprintf@f+1,c
  4371  0011B2  C072  F02F         	movff	reply_to_host@ch_2113,?_sprintf+4
  4372  0011B6  6A30               	clrf	?_sprintf+5,c
  4373  0011B8  EC18  F024         	call	_sprintf	;wreg free
  4374                           
  4375                           ;cmd_consol.c: 545: put_string_usart1(out_str);
  4376  0011BC  0E40               	movlw	low _out_str
  4377  0011BE  6E11               	movwf	put_string_usart1@str,c
  4378  0011C0  0E02               	movlw	high _out_str
  4379  0011C2  6E12               	movwf	put_string_usart1@str+1,c
  4380  0011C4  EC2A  F026         	call	_put_string_usart1	;wreg free
  4381                           
  4382                           ;cmd_consol.c: 546: }
  4383                           ;cmd_consol.c: 547: } else if (ch == 202) {
  4384  0011C8  0012               	return	
  4385  0011CA                     l9239:
  4386  0011CA  0ECA               	movlw	202
  4387  0011CC  0100               	movlb	0	; () banked
  4388  0011CE  1972               	xorwf	reply_to_host@ch_2113& (0+255),w,b
  4389  0011D0  A4D8               	btfss	status,2,c
  4390  0011D2  D02F               	goto	l9251
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;cmd_consol.c: 548: cmd_data.over_write = 0;
  4394  0011D4  0E00               	movlw	0
  4395  0011D6  0101               	movlb	1	; () banked
  4396  0011D8  6FA2               	movwf	(_cmd_data+52)& (0+255),b
  4397                           
  4398                           ; BSR set to: 1
  4399                           ;cmd_consol.c: 549: ch = set_string_data(&cmd_data);
  4400  0011DA  0E6E               	movlw	low _cmd_data
  4401  0011DC  0100               	movlb	0	; () banked
  4402  0011DE  6F60               	movwf	set_string_data@data& (0+255),b
  4403  0011E0  0E01               	movlw	high _cmd_data
  4404  0011E2  0100               	movlb	0	; () banked
  4405  0011E4  6F61               	movwf	(set_string_data@data+1)& (0+255),b
  4406  0011E6  ECC3  F012         	call	_set_string_data	;wreg free
  4407  0011EA  0100               	movlb	0	; () banked
  4408  0011EC  6F72               	movwf	reply_to_host@ch_2113& (0+255),b
  4409                           
  4410                           ; BSR set to: 0
  4411                           ;cmd_consol.c: 550: memset(out_str, 0, sizeof (out_str));
  4412  0011EE  0E40               	movlw	low _out_str
  4413  0011F0  6E24               	movwf	memset@p1,c
  4414  0011F2  0E02               	movlw	high _out_str
  4415  0011F4  6E25               	movwf	memset@p1+1,c
  4416  0011F6  0E00               	movlw	0
  4417  0011F8  6E27               	movwf	memset@c+1,c
  4418  0011FA  0E00               	movlw	0
  4419  0011FC  6E26               	movwf	memset@c,c
  4420  0011FE  0E00               	movlw	0
  4421  001200  6E29               	movwf	memset@n+1,c
  4422  001202  0E64               	movlw	100
  4423  001204  6E28               	movwf	memset@n,c
  4424  001206  ECD8  F025         	call	_memset	;wreg free
  4425                           
  4426                           ;cmd_consol.c: 551: sprintf(out_str, "%d\r\nOK\r\n", ch);
  4427  00120A  0E40               	movlw	low _out_str
  4428  00120C  6E2B               	movwf	sprintf@wh,c
  4429  00120E  0E02               	movlw	high _out_str
  4430  001210  6E2C               	movwf	sprintf@wh+1,c
  4431  001212  0E34               	movlw	low STR_129
  4432  001214  6E2D               	movwf	sprintf@f,c
  4433  001216  0EFF               	movlw	high STR_129
  4434  001218  6E2E               	movwf	sprintf@f+1,c
  4435  00121A  C072  F02F         	movff	reply_to_host@ch_2113,?_sprintf+4
  4436  00121E  6A30               	clrf	?_sprintf+5,c
  4437  001220  EC18  F024         	call	_sprintf	;wreg free
  4438                           
  4439                           ;cmd_consol.c: 552: put_string_usart1(out_str);
  4440  001224  0E40               	movlw	low _out_str
  4441  001226  6E11               	movwf	put_string_usart1@str,c
  4442  001228  0E02               	movlw	high _out_str
  4443  00122A  6E12               	movwf	put_string_usart1@str+1,c
  4444  00122C  EC2A  F026         	call	_put_string_usart1	;wreg free
  4445                           
  4446                           ;cmd_consol.c: 553: } else if (ch == 203) {
  4447  001230  0012               	return	
  4448  001232                     l9251:
  4449  001232  0ECB               	movlw	203
  4450  001234  0100               	movlb	0	; () banked
  4451  001236  1972               	xorwf	reply_to_host@ch_2113& (0+255),w,b
  4452  001238  A4D8               	btfss	status,2,c
  4453  00123A  D02F               	goto	l9263
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;cmd_consol.c: 554: cmd_data.over_write = 0;
  4457  00123C  0E00               	movlw	0
  4458  00123E  0101               	movlb	1	; () banked
  4459  001240  6FA2               	movwf	(_cmd_data+52)& (0+255),b
  4460                           
  4461                           ; BSR set to: 1
  4462                           ;cmd_consol.c: 555: ch = set_string_data(&cmd_data);
  4463  001242  0E6E               	movlw	low _cmd_data
  4464  001244  0100               	movlb	0	; () banked
  4465  001246  6F60               	movwf	set_string_data@data& (0+255),b
  4466  001248  0E01               	movlw	high _cmd_data
  4467  00124A  0100               	movlb	0	; () banked
  4468  00124C  6F61               	movwf	(set_string_data@data+1)& (0+255),b
  4469  00124E  ECC3  F012         	call	_set_string_data	;wreg free
  4470  001252  0100               	movlb	0	; () banked
  4471  001254  6F72               	movwf	reply_to_host@ch_2113& (0+255),b
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;cmd_consol.c: 556: memset(out_str, 0, sizeof (out_str));
  4475  001256  0E40               	movlw	low _out_str
  4476  001258  6E24               	movwf	memset@p1,c
  4477  00125A  0E02               	movlw	high _out_str
  4478  00125C  6E25               	movwf	memset@p1+1,c
  4479  00125E  0E00               	movlw	0
  4480  001260  6E27               	movwf	memset@c+1,c
  4481  001262  0E00               	movlw	0
  4482  001264  6E26               	movwf	memset@c,c
  4483  001266  0E00               	movlw	0
  4484  001268  6E29               	movwf	memset@n+1,c
  4485  00126A  0E64               	movlw	100
  4486  00126C  6E28               	movwf	memset@n,c
  4487  00126E  ECD8  F025         	call	_memset	;wreg free
  4488                           
  4489                           ;cmd_consol.c: 557: sprintf(out_str, "%d\r\nOK\r\n", ch);
  4490  001272  0E40               	movlw	low _out_str
  4491  001274  6E2B               	movwf	sprintf@wh,c
  4492  001276  0E02               	movlw	high _out_str
  4493  001278  6E2C               	movwf	sprintf@wh+1,c
  4494  00127A  0E34               	movlw	low STR_129
  4495  00127C  6E2D               	movwf	sprintf@f,c
  4496  00127E  0EFF               	movlw	high STR_129
  4497  001280  6E2E               	movwf	sprintf@f+1,c
  4498  001282  C072  F02F         	movff	reply_to_host@ch_2113,?_sprintf+4
  4499  001286  6A30               	clrf	?_sprintf+5,c
  4500  001288  EC18  F024         	call	_sprintf	;wreg free
  4501                           
  4502                           ;cmd_consol.c: 558: put_string_usart1(out_str);
  4503  00128C  0E40               	movlw	low _out_str
  4504  00128E  6E11               	movwf	put_string_usart1@str,c
  4505  001290  0E02               	movlw	high _out_str
  4506  001292  6E12               	movwf	put_string_usart1@str+1,c
  4507  001294  EC2A  F026         	call	_put_string_usart1	;wreg free
  4508                           
  4509                           ;cmd_consol.c: 559: } else {
  4510  001298  0012               	return	
  4511  00129A                     l9263:
  4512                           
  4513                           ;cmd_consol.c: 560: memset(out_str, 0, sizeof (out_str));
  4514  00129A  0E40               	movlw	low _out_str
  4515  00129C  6E24               	movwf	memset@p1,c
  4516  00129E  0E02               	movlw	high _out_str
  4517  0012A0  6E25               	movwf	memset@p1+1,c
  4518  0012A2  0E00               	movlw	0
  4519  0012A4  6E27               	movwf	memset@c+1,c
  4520  0012A6  0E00               	movlw	0
  4521  0012A8  6E26               	movwf	memset@c,c
  4522  0012AA  0E00               	movlw	0
  4523  0012AC  6E29               	movwf	memset@n+1,c
  4524  0012AE  0E64               	movlw	100
  4525  0012B0  6E28               	movwf	memset@n,c
  4526  0012B2  ECD8  F025         	call	_memset	;wreg free
  4527                           
  4528                           ;cmd_consol.c: 561: sprintf(out_str, "%d\r\nOK\r\n", ch);
  4529  0012B6  0E40               	movlw	low _out_str
  4530  0012B8  6E2B               	movwf	sprintf@wh,c
  4531  0012BA  0E02               	movlw	high _out_str
  4532  0012BC  6E2C               	movwf	sprintf@wh+1,c
  4533  0012BE  0E34               	movlw	low STR_129
  4534  0012C0  6E2D               	movwf	sprintf@f,c
  4535  0012C2  0EFF               	movlw	high STR_129
  4536  0012C4  6E2E               	movwf	sprintf@f+1,c
  4537  0012C6  C072  F02F         	movff	reply_to_host@ch_2113,?_sprintf+4
  4538  0012CA  6A30               	clrf	?_sprintf+5,c
  4539  0012CC  EC18  F024         	call	_sprintf	;wreg free
  4540                           
  4541                           ;cmd_consol.c: 562: put_string_usart1(out_str);
  4542  0012D0  0E40               	movlw	low _out_str
  4543  0012D2  6E11               	movwf	put_string_usart1@str,c
  4544  0012D4  0E02               	movlw	high _out_str
  4545  0012D6  6E12               	movwf	put_string_usart1@str+1,c
  4546  0012D8  EC2A  F026         	call	_put_string_usart1	;wreg free
  4547  0012DC  0012               	return	
  4548  0012DE                     __end_of_reply_to_host:
  4549                           	opt stack 0
  4550                           tblptru	equ	0xFF8
  4551                           tblptrh	equ	0xFF7
  4552                           tblptrl	equ	0xFF6
  4553                           tablat	equ	0xFF5
  4554                           intcon	equ	0xFF2
  4555                           postinc0	equ	0xFEE
  4556                           wreg	equ	0xFE8
  4557                           indf1	equ	0xFE7
  4558                           postinc1	equ	0xFE6
  4559                           postdec1	equ	0xFE5
  4560                           fsr1h	equ	0xFE2
  4561                           fsr1l	equ	0xFE1
  4562                           indf2	equ	0xFDF
  4563                           postinc2	equ	0xFDE
  4564                           fsr2h	equ	0xFDA
  4565                           fsr2l	equ	0xFD9
  4566                           status	equ	0xFD8
  4567                           
  4568 ;; *************** function _update_string_data *****************
  4569 ;; Defined at:
  4570 ;;		line 350 in file "clcd.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  data            2   62[COMRAM] PTR struct .
  4573 ;;		 -> cmd_data(53), 
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;  i               2   11[BANK0 ] int 
  4576 ;;  end_point       1   10[BANK0 ] unsigned char 
  4577 ;;  start_point     1    9[BANK0 ] unsigned char 
  4578 ;;  exist_uid_id    1    8[BANK0 ] unsigned char 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      unsigned char 
  4581 ;; Registers used:
  4582 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4588 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;Total ram usage:       11 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:   11
  4595 ;; This function calls:
  4596 ;;		___wmul
  4597 ;;		_conflict_check
  4598 ;;		_copy_data
  4599 ;;		_make_display
  4600 ;;		_memset
  4601 ;;		_printf
  4602 ;; This function is called by:
  4603 ;;		_reply_to_host
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           	psect	text6
  4608  002DAC                     __ptext6:
  4609                           	opt stack 0
  4610  002DAC                     _update_string_data:
  4611                           	opt stack 17
  4612                           
  4613                           ;clcd.c: 351: int i = 0;
  4614                           
  4615                           ;incstack = 0
  4616  002DAC  0E00               	movlw	0
  4617  002DAE  0100               	movlb	0	; () banked
  4618  002DB0  6F6C               	movwf	(update_string_data@i+1)& (0+255),b
  4619  002DB2  0E00               	movlw	0
  4620  002DB4  6F6B               	movwf	update_string_data@i& (0+255),b
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;clcd.c: 352: char exist_uid_idx = -1;
  4624  002DB6  0100               	movlb	0	; () banked
  4625  002DB8  6968               	setf	update_string_data@exist_uid_idx& (0+255),b
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;clcd.c: 353: char start_point, end_point;
  4629                           ;clcd.c: 354: memset(conflict_arr, -1, sizeof (conflict_arr));
  4630  002DBA  0EA3               	movlw	low _conflict_arr
  4631  002DBC  6E24               	movwf	memset@p1,c
  4632  002DBE  0E01               	movlw	high _conflict_arr
  4633  002DC0  6E25               	movwf	memset@p1+1,c
  4634  002DC2  0EFF               	movlw	255
  4635  002DC4  6E27               	movwf	memset@c+1,c
  4636  002DC6  6826               	setf	memset@c,c
  4637  002DC8  0E00               	movlw	0
  4638  002DCA  6E29               	movwf	memset@n+1,c
  4639  002DCC  0E28               	movlw	40
  4640  002DCE  6E28               	movwf	memset@n,c
  4641  002DD0  ECD8  F025         	call	_memset	;wreg free
  4642                           
  4643                           ;clcd.c: 355: conflict_data_count = 0;
  4644  002DD4  0E00               	movlw	0
  4645  002DD6  6E42               	movwf	_conflict_data_count,c
  4646                           
  4647                           ;clcd.c: 356: start_point = (data->start_row * clcd_config_data.clcd_max_col) + data->st
      +                          art_col;
  4648  002DD8  EE20 F02C          	lfsr	2,44
  4649  002DDC  503F               	movf	update_string_data@data,w,c
  4650  002DDE  26D9               	addwf	fsr2l,f,c
  4651  002DE0  5040               	movf	update_string_data@data+1,w,c
  4652  002DE2  22DA               	addwfc	fsr2h,f,c
  4653  002DE4  50DF               	movf	indf2,w,c
  4654  002DE6  0100               	movlb	0	; () banked
  4655  002DE8  6F64               	movwf	??_update_string_data& (0+255),b
  4656  002DEA  EE20 F02B          	lfsr	2,43
  4657  002DEE  503F               	movf	update_string_data@data,w,c
  4658  002DF0  26D9               	addwf	fsr2l,f,c
  4659  002DF2  5040               	movf	update_string_data@data+1,w,c
  4660  002DF4  22DA               	addwfc	fsr2h,f,c
  4661  002DF6  50DF               	movf	indf2,w,c
  4662  002DF8  024B               	mulwf	_clcd_config_data+2,c
  4663  002DFA  50F3               	movf	prodl,w,c
  4664  002DFC  0100               	movlb	0	; () banked
  4665  002DFE  2564               	addwf	??_update_string_data& (0+255),w,b
  4666  002E00  0100               	movlb	0	; () banked
  4667  002E02  6F69               	movwf	update_string_data@start_point& (0+255),b
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;clcd.c: 357: end_point = (data->end_row * clcd_config_data.clcd_max_col) + data->end_co
      +                          l;
  4671  002E04  EE20 F02E          	lfsr	2,46
  4672  002E08  503F               	movf	update_string_data@data,w,c
  4673  002E0A  26D9               	addwf	fsr2l,f,c
  4674  002E0C  5040               	movf	update_string_data@data+1,w,c
  4675  002E0E  22DA               	addwfc	fsr2h,f,c
  4676  002E10  50DF               	movf	indf2,w,c
  4677  002E12  0100               	movlb	0	; () banked
  4678  002E14  6F64               	movwf	??_update_string_data& (0+255),b
  4679  002E16  EE20 F02D          	lfsr	2,45
  4680  002E1A  503F               	movf	update_string_data@data,w,c
  4681  002E1C  26D9               	addwf	fsr2l,f,c
  4682  002E1E  5040               	movf	update_string_data@data+1,w,c
  4683  002E20  22DA               	addwfc	fsr2h,f,c
  4684  002E22  50DF               	movf	indf2,w,c
  4685  002E24  024B               	mulwf	_clcd_config_data+2,c
  4686  002E26  50F3               	movf	prodl,w,c
  4687  002E28  0100               	movlb	0	; () banked
  4688  002E2A  2564               	addwf	??_update_string_data& (0+255),w,b
  4689  002E2C  0100               	movlb	0	; () banked
  4690  002E2E  6F6A               	movwf	update_string_data@end_point& (0+255),b
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;clcd.c: 359: printf("UID = %c, start_pt = %d, end_pt = %d\r\n", data->uid, start_point,
      +                           end_point);
  4694  002E30  0E67               	movlw	low STR_20
  4695  002E32  6E2B               	movwf	printf@f,c
  4696  002E34  0EFC               	movlw	high STR_20
  4697  002E36  6E2C               	movwf	printf@f+1,c
  4698  002E38  C03F  FFD9         	movff	update_string_data@data,fsr2l
  4699  002E3C  C040  FFDA         	movff	update_string_data@data+1,fsr2h
  4700  002E40  CFDE F02D          	movff	postinc2,?_printf+2
  4701  002E44  CFDD F02E          	movff	postdec2,?_printf+3
  4702  002E48  C069  F02F         	movff	update_string_data@start_point,?_printf+4
  4703  002E4C  6A30               	clrf	?_printf+5,c
  4704  002E4E  C06A  F031         	movff	update_string_data@end_point,?_printf+6
  4705  002E52  6A32               	clrf	?_printf+7,c
  4706  002E54  EC12  F025         	call	_printf	;wreg free
  4707                           
  4708                           ;clcd.c: 361: if (data_count < clcd_config_data.clcd_max_display_string) {
  4709  002E58  504D               	movf	_clcd_config_data+4,w,c
  4710  002E5A  5C43               	subwf	_data_count,w,c
  4711  002E5C  B0D8               	btfsc	status,0,c
  4712  002E5E  D0DE               	goto	l8371
  4713                           
  4714                           ;clcd.c: 362: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  4715  002E60  0E00               	movlw	0
  4716  002E62  0100               	movlb	0	; () banked
  4717  002E64  6F6C               	movwf	(update_string_data@i+1)& (0+255),b
  4718  002E66  0E00               	movlw	0
  4719  002E68  6F6B               	movwf	update_string_data@i& (0+255),b
  4720  002E6A  D0A1               	goto	l8361
  4721  002E6C                     l8323:
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;clcd.c: 363: if (clcd_display_string_details[i].uid == data->uid) {
  4725  002E6C  C03F  FFD9         	movff	update_string_data@data,fsr2l
  4726  002E70  C040  FFDA         	movff	update_string_data@data+1,fsr2h
  4727  002E74  C06B  F018         	movff	update_string_data@i,___wmul@multiplier
  4728  002E78  C06C  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  4729  002E7C  0E00               	movlw	0
  4730  002E7E  6E1B               	movwf	___wmul@multiplicand+1,c
  4731  002E80  0E39               	movlw	57
  4732  002E82  6E1A               	movwf	___wmul@multiplicand,c
  4733  002E84  EC04  F026         	call	___wmul	;wreg free
  4734  002E88  0E99               	movlw	low _clcd_display_string_details
  4735  002E8A  2418               	addwf	?___wmul,w,c
  4736  002E8C  6EE1               	movwf	fsr1l,c
  4737  002E8E  0E05               	movlw	high _clcd_display_string_details
  4738  002E90  2019               	addwfc	?___wmul+1,w,c
  4739  002E92  6EE2               	movwf	fsr1h,c
  4740  002E94  50DE               	movf	postinc2,w,c
  4741  002E96  18E6               	xorwf	postinc1,w,c
  4742  002E98  E12D               	bnz	l8339
  4743  002E9A  50DE               	movf	postinc2,w,c
  4744  002E9C  18E6               	xorwf	postinc1,w,c
  4745  002E9E  A4D8               	btfss	status,2,c
  4746  002EA0  D029               	goto	l8339
  4747                           
  4748                           ;clcd.c: 364: exist_uid_idx = i;
  4749  002EA2  C06B  F068         	movff	update_string_data@i,update_string_data@exist_uid_idx
  4750                           
  4751                           ;clcd.c: 365: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  4752  002EA6  C06B  F018         	movff	update_string_data@i,___wmul@multiplier
  4753  002EAA  C06C  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  4754  002EAE  0E00               	movlw	0
  4755  002EB0  6E1B               	movwf	___wmul@multiplicand+1,c
  4756  002EB2  0E39               	movlw	57
  4757  002EB4  6E1A               	movwf	___wmul@multiplicand,c
  4758  002EB6  EC04  F026         	call	___wmul	;wreg free
  4759  002EBA  0E99               	movlw	low _clcd_display_string_details
  4760  002EBC  2418               	addwf	?___wmul,w,c
  4761  002EBE  6ED9               	movwf	fsr2l,c
  4762  002EC0  0E05               	movlw	high _clcd_display_string_details
  4763  002EC2  2019               	addwfc	?___wmul+1,w,c
  4764  002EC4  6EDA               	movwf	fsr2h,c
  4765  002EC6  5042               	movf	_conflict_data_count,w,c
  4766  002EC8  0D02               	mullw	2
  4767  002ECA  0EA3               	movlw	low _conflict_arr
  4768  002ECC  24F3               	addwf	prodl,w,c
  4769  002ECE  6EE1               	movwf	fsr1l,c
  4770  002ED0  0E01               	movlw	high _conflict_arr
  4771  002ED2  20F4               	addwfc	prodh,w,c
  4772  002ED4  6EE2               	movwf	fsr1h,c
  4773  002ED6  CFDE FFE6          	movff	postinc2,postinc1
  4774  002EDA  CFDD FFE5          	movff	postdec2,postdec1
  4775  002EDE  2A42               	incf	_conflict_data_count,f,c
  4776                           
  4777                           ;clcd.c: 366: conflict_check(exist_uid_idx, start_point, end_point);
  4778  002EE0  C069  F039         	movff	update_string_data@start_point,conflict_check@new_start_point
  4779  002EE4  C06A  F03A         	movff	update_string_data@end_point,conflict_check@new_end_point
  4780  002EE8  0100               	movlb	0	; () banked
  4781  002EEA  5168               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  4782  002EEC  EC3E  F014         	call	_conflict_check
  4783  002EF0                     l8333:
  4784                           
  4785                           ;clcd.c: 367: return 200;
  4786  002EF0  0EC8               	movlw	200
  4787  002EF2  0012               	return	
  4788  002EF4                     l8339:
  4789                           
  4790                           ;clcd.c: 369: if (conflict_check(exist_uid_idx, start_point, end_point) == 1) {
  4791  002EF4  C069  F039         	movff	update_string_data@start_point,conflict_check@new_start_point
  4792  002EF8  C06A  F03A         	movff	update_string_data@end_point,conflict_check@new_end_point
  4793  002EFC  0100               	movlb	0	; () banked
  4794  002EFE  5168               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  4795  002F00  EC3E  F014         	call	_conflict_check
  4796  002F04  06E8               	decf	wreg,f,c
  4797  002F06  A4D8               	btfss	status,2,c
  4798  002F08  D04F               	goto	l8359
  4799                           
  4800                           ;clcd.c: 370: printf("conflict: uid\r\n");
  4801  002F0A  0E3B               	movlw	low STR_21
  4802  002F0C  6E2B               	movwf	printf@f,c
  4803  002F0E  0EFE               	movlw	high STR_21
  4804  002F10  6E2C               	movwf	printf@f+1,c
  4805  002F12  EC12  F025         	call	_printf	;wreg free
  4806                           
  4807                           ;clcd.c: 371: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  4808  002F16  0E00               	movlw	0
  4809  002F18  0100               	movlb	0	; () banked
  4810  002F1A  6F6C               	movwf	(update_string_data@i+1)& (0+255),b
  4811  002F1C  0E00               	movlw	0
  4812  002F1E  6F6B               	movwf	update_string_data@i& (0+255),b
  4813  002F20  D028               	goto	l8351
  4814  002F22                     l8345:
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;clcd.c: 372: if (conflict_arr[i] != -1)
  4818  002F22  90D8               	bcf	status,0,c
  4819  002F24  0100               	movlb	0	; () banked
  4820  002F26  356B               	rlcf	update_string_data@i& (0+255),w,b
  4821  002F28  6ED9               	movwf	fsr2l,c
  4822  002F2A  0100               	movlb	0	; () banked
  4823  002F2C  356C               	rlcf	(update_string_data@i+1)& (0+255),w,b
  4824  002F2E  6EDA               	movwf	fsr2h,c
  4825  002F30  0EA3               	movlw	low _conflict_arr
  4826  002F32  26D9               	addwf	fsr2l,f,c
  4827  002F34  0E01               	movlw	high _conflict_arr
  4828  002F36  22DA               	addwfc	fsr2h,f,c
  4829  002F38  28DE               	incf	postinc2,w,c
  4830  002F3A  E103               	bnz	u7990
  4831  002F3C  28DE               	incf	postinc2,w,c
  4832  002F3E  B4D8               	btfsc	status,2,c
  4833  002F40  D015               	goto	l8349
  4834  002F42                     u7990:
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;clcd.c: 373: printf("%c, ", conflict_arr[i]);
  4838  002F42  0EDC               	movlw	low STR_22
  4839  002F44  6E2B               	movwf	printf@f,c
  4840  002F46  0EFF               	movlw	high STR_22
  4841  002F48  6E2C               	movwf	printf@f+1,c
  4842  002F4A  90D8               	bcf	status,0,c
  4843  002F4C  0100               	movlb	0	; () banked
  4844  002F4E  356B               	rlcf	update_string_data@i& (0+255),w,b
  4845  002F50  6ED9               	movwf	fsr2l,c
  4846  002F52  0100               	movlb	0	; () banked
  4847  002F54  356C               	rlcf	(update_string_data@i+1)& (0+255),w,b
  4848  002F56  6EDA               	movwf	fsr2h,c
  4849  002F58  0EA3               	movlw	low _conflict_arr
  4850  002F5A  26D9               	addwf	fsr2l,f,c
  4851  002F5C  0E01               	movlw	high _conflict_arr
  4852  002F5E  22DA               	addwfc	fsr2h,f,c
  4853  002F60  CFDE F02D          	movff	postinc2,?_printf+2
  4854  002F64  CFDD F02E          	movff	postdec2,?_printf+3
  4855  002F68  EC12  F025         	call	_printf	;wreg free
  4856  002F6C                     l8349:
  4857  002F6C  0100               	movlb	0	; () banked
  4858  002F6E  4B6B               	infsnz	update_string_data@i& (0+255),f,b
  4859  002F70  2B6C               	incf	(update_string_data@i+1)& (0+255),f,b
  4860  002F72                     l8351:
  4861                           
  4862                           ; BSR set to: 0
  4863  002F72  504D               	movf	_clcd_config_data+4,w,c
  4864  002F74  0100               	movlb	0	; () banked
  4865  002F76  6F64               	movwf	??_update_string_data& (0+255),b
  4866  002F78  6B65               	clrf	(??_update_string_data+1)& (0+255),b
  4867  002F7A  0100               	movlb	0	; () banked
  4868  002F7C  5164               	movf	??_update_string_data& (0+255),w,b
  4869  002F7E  0100               	movlb	0	; () banked
  4870  002F80  5D6B               	subwf	update_string_data@i& (0+255),w,b
  4871  002F82  0100               	movlb	0	; () banked
  4872  002F84  516C               	movf	(update_string_data@i+1)& (0+255),w,b
  4873  002F86  0A80               	xorlw	128
  4874  002F88  0100               	movlb	0	; () banked
  4875  002F8A  6F66               	movwf	(??_update_string_data+2)& (0+255),b
  4876  002F8C  0100               	movlb	0	; () banked
  4877  002F8E  5165               	movf	(??_update_string_data+1)& (0+255),w,b
  4878  002F90  0A80               	xorlw	128
  4879  002F92  0100               	movlb	0	; () banked
  4880  002F94  5966               	subwfb	(??_update_string_data+2)& (0+255),w,b
  4881  002F96  A0D8               	btfss	status,0,c
  4882  002F98  D7C4               	goto	l8345
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;clcd.c: 374: }
  4886                           ;clcd.c: 375: printf("\r\n");
  4887                           
  4888                           ; BSR set to: 0
  4889  002F9A  0E96               	movlw	low (STR_145+4)
  4890  002F9C  6E2B               	movwf	printf@f,c
  4891  002F9E  0EFF               	movlw	high (STR_145+4)
  4892  002FA0  6E2C               	movwf	printf@f+1,c
  4893  002FA2  EC12  F025         	call	_printf	;wreg free
  4894  002FA6  D7A4               	goto	l8333
  4895  002FA8                     l8359:
  4896  002FA8  0100               	movlb	0	; () banked
  4897  002FAA  4B6B               	infsnz	update_string_data@i& (0+255),f,b
  4898  002FAC  2B6C               	incf	(update_string_data@i+1)& (0+255),f,b
  4899  002FAE                     l8361:
  4900                           
  4901                           ; BSR set to: 0
  4902  002FAE  504D               	movf	_clcd_config_data+4,w,c
  4903  002FB0  0100               	movlb	0	; () banked
  4904  002FB2  6F64               	movwf	??_update_string_data& (0+255),b
  4905  002FB4  6B65               	clrf	(??_update_string_data+1)& (0+255),b
  4906  002FB6  0100               	movlb	0	; () banked
  4907  002FB8  5164               	movf	??_update_string_data& (0+255),w,b
  4908  002FBA  0100               	movlb	0	; () banked
  4909  002FBC  5D6B               	subwf	update_string_data@i& (0+255),w,b
  4910  002FBE  0100               	movlb	0	; () banked
  4911  002FC0  516C               	movf	(update_string_data@i+1)& (0+255),w,b
  4912  002FC2  0A80               	xorlw	128
  4913  002FC4  0100               	movlb	0	; () banked
  4914  002FC6  6F66               	movwf	(??_update_string_data+2)& (0+255),b
  4915  002FC8  0100               	movlb	0	; () banked
  4916  002FCA  5165               	movf	(??_update_string_data+1)& (0+255),w,b
  4917  002FCC  0A80               	xorlw	128
  4918  002FCE  0100               	movlb	0	; () banked
  4919  002FD0  5966               	subwfb	(??_update_string_data+2)& (0+255),w,b
  4920  002FD2  A0D8               	btfss	status,0,c
  4921  002FD4  D74B               	goto	l8323
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;clcd.c: 377: }
  4925                           ;clcd.c: 378: }
  4926                           ;clcd.c: 379: }
  4927                           ;clcd.c: 380: memset(&clcd_display_string_details[data_count], 0, sizeof (CLCD_STRING_DI
      +                          SPLAY_DETAILS));
  4928                           
  4929                           ; BSR set to: 0
  4930  002FD6  5043               	movf	_data_count,w,c
  4931  002FD8  0D39               	mullw	57
  4932  002FDA  0E99               	movlw	low _clcd_display_string_details
  4933  002FDC  24F3               	addwf	prodl,w,c
  4934  002FDE  6E24               	movwf	memset@p1,c
  4935  002FE0  0E05               	movlw	high _clcd_display_string_details
  4936  002FE2  20F4               	addwfc	prodh,w,c
  4937  002FE4  6E25               	movwf	memset@p1+1,c
  4938  002FE6  0E00               	movlw	0
  4939  002FE8  6E27               	movwf	memset@c+1,c
  4940  002FEA  0E00               	movlw	0
  4941  002FEC  6E26               	movwf	memset@c,c
  4942  002FEE  0E00               	movlw	0
  4943  002FF0  6E29               	movwf	memset@n+1,c
  4944  002FF2  0E39               	movlw	57
  4945  002FF4  6E28               	movwf	memset@n,c
  4946  002FF6  ECD8  F025         	call	_memset	;wreg free
  4947                           
  4948                           ;clcd.c: 381: copy_data(&clcd_display_string_details[data_count], data);
  4949  002FFA  5043               	movf	_data_count,w,c
  4950  002FFC  0D39               	mullw	57
  4951  002FFE  0E99               	movlw	low _clcd_display_string_details
  4952  003000  24F3               	addwf	prodl,w,c
  4953  003002  6E39               	movwf	copy_data@clcd_str_data,c
  4954  003004  0E05               	movlw	high _clcd_display_string_details
  4955  003006  20F4               	addwfc	prodh,w,c
  4956  003008  6E3A               	movwf	copy_data@clcd_str_data+1,c
  4957  00300A  C03F  F03B         	movff	update_string_data@data,copy_data@data
  4958  00300E  C040  F03C         	movff	update_string_data@data+1,copy_data@data+1
  4959  003012  EC28  F019         	call	_copy_data	;wreg free
  4960                           
  4961                           ;clcd.c: 382: data_count++;
  4962  003016  2A43               	incf	_data_count,f,c
  4963                           
  4964                           ;clcd.c: 383: make_display();
  4965  003018  EC6F  F009         	call	_make_display	;wreg free
  4966  00301C                     l8371:
  4967                           
  4968                           ;clcd.c: 386: }
  4969                           ;clcd.c: 387: return 0;
  4970  00301C  0E00               	movlw	0
  4971  00301E  0012               	return	
  4972  003020                     __end_of_update_string_data:
  4973                           	opt stack 0
  4974                           tblptru	equ	0xFF8
  4975                           tblptrh	equ	0xFF7
  4976                           tblptrl	equ	0xFF6
  4977                           tablat	equ	0xFF5
  4978                           prodh	equ	0xFF4
  4979                           prodl	equ	0xFF3
  4980                           intcon	equ	0xFF2
  4981                           postinc0	equ	0xFEE
  4982                           wreg	equ	0xFE8
  4983                           indf1	equ	0xFE7
  4984                           postinc1	equ	0xFE6
  4985                           postdec1	equ	0xFE5
  4986                           fsr1h	equ	0xFE2
  4987                           fsr1l	equ	0xFE1
  4988                           indf2	equ	0xFDF
  4989                           postinc2	equ	0xFDE
  4990                           postdec2	equ	0xFDD
  4991                           fsr2h	equ	0xFDA
  4992                           fsr2l	equ	0xFD9
  4993                           status	equ	0xFD8
  4994                           
  4995 ;; *************** function _make_display *****************
  4996 ;; Defined at:
  4997 ;;		line 756 in file "clcd.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;		None
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;  count           2   60[COMRAM] int 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      void 
  5004 ;; Registers used:
  5005 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;Total ram usage:        5 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:   10
  5018 ;; This function calls:
  5019 ;;		___wmul
  5020 ;;		_display_text
  5021 ;;		_memset
  5022 ;;		_scroll_left_to_right
  5023 ;;		_scroll_off
  5024 ;;		_scroll_right_to_left
  5025 ;;		_strlen
  5026 ;; This function is called by:
  5027 ;;		_update_string_data
  5028 ;;		_main
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           	psect	text7
  5033  0012DE                     __ptext7:
  5034                           	opt stack 0
  5035  0012DE                     _make_display:
  5036                           	opt stack 20
  5037                           
  5038                           ;clcd.c: 757: int count = 0;
  5039                           
  5040                           ;incstack = 0
  5041  0012DE  0E00               	movlw	0
  5042  0012E0  6E3E               	movwf	make_display@count+1,c
  5043  0012E2  0E00               	movlw	0
  5044  0012E4  6E3D               	movwf	make_display@count,c
  5045                           
  5046                           ;clcd.c: 758: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  5047  0012E6  0E1E               	movlw	low _lcd_display_array
  5048  0012E8  6E24               	movwf	memset@p1,c
  5049  0012EA  0E01               	movlw	high _lcd_display_array
  5050  0012EC  6E25               	movwf	memset@p1+1,c
  5051  0012EE  0E00               	movlw	0
  5052  0012F0  6E27               	movwf	memset@c+1,c
  5053  0012F2  0E20               	movlw	32
  5054  0012F4  6E26               	movwf	memset@c,c
  5055  0012F6  0E00               	movlw	0
  5056  0012F8  6E29               	movwf	memset@n+1,c
  5057  0012FA  0E50               	movlw	80
  5058  0012FC  6E28               	movwf	memset@n,c
  5059  0012FE  ECD8  F025         	call	_memset	;wreg free
  5060                           
  5061                           ;clcd.c: 759: for (count = 0; count < clcd_config_data.clcd_max_display_string; count++)
      +                           {
  5062  001302  0E00               	movlw	0
  5063  001304  6E3E               	movwf	make_display@count+1,c
  5064  001306  0E00               	movlw	0
  5065  001308  6E3D               	movwf	make_display@count,c
  5066  00130A  D1CD               	goto	l8017
  5067  00130C                     l7979:
  5068                           
  5069                           ;clcd.c: 760: if (strlen(clcd_display_string_details[count].string) != 0 && clcd_display
      +                          _string_details[count].direction == 2) {
  5070  00130C  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5071  001310  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5072  001314  0E00               	movlw	0
  5073  001316  6E1B               	movwf	___wmul@multiplicand+1,c
  5074  001318  0E39               	movlw	57
  5075  00131A  6E1A               	movwf	___wmul@multiplicand,c
  5076  00131C  EC04  F026         	call	___wmul	;wreg free
  5077  001320  0E02               	movlw	2
  5078  001322  2618               	addwf	?___wmul,f,c
  5079  001324  0E00               	movlw	0
  5080  001326  2219               	addwfc	?___wmul+1,f,c
  5081  001328  0E99               	movlw	low _clcd_display_string_details
  5082  00132A  2418               	addwf	?___wmul,w,c
  5083  00132C  6E1E               	movwf	strlen@s,c
  5084  00132E  0E05               	movlw	high _clcd_display_string_details
  5085  001330  2019               	addwfc	?___wmul+1,w,c
  5086  001332  6E1F               	movwf	strlen@s+1,c
  5087  001334  ECC2  F022         	call	_strlen	;wreg free
  5088  001338  501E               	movf	?_strlen,w,c
  5089  00133A  101F               	iorwf	?_strlen+1,w,c
  5090  00133C  B4D8               	btfsc	status,2,c
  5091  00133E  D073               	goto	l7991
  5092  001340  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5093  001344  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5094  001348  0E00               	movlw	0
  5095  00134A  6E1B               	movwf	___wmul@multiplicand+1,c
  5096  00134C  0E39               	movlw	57
  5097  00134E  6E1A               	movwf	___wmul@multiplicand,c
  5098  001350  EC04  F026         	call	___wmul	;wreg free
  5099  001354  0E31               	movlw	49
  5100  001356  2618               	addwf	?___wmul,f,c
  5101  001358  0E00               	movlw	0
  5102  00135A  2219               	addwfc	?___wmul+1,f,c
  5103  00135C  0E99               	movlw	low _clcd_display_string_details
  5104  00135E  2418               	addwf	?___wmul,w,c
  5105  001360  6ED9               	movwf	fsr2l,c
  5106  001362  0E05               	movlw	high _clcd_display_string_details
  5107  001364  2019               	addwfc	?___wmul+1,w,c
  5108  001366  6EDA               	movwf	fsr2h,c
  5109  001368  50DF               	movf	223,w,c
  5110  00136A  0B07               	andlw	7
  5111  00136C  0A02               	xorlw	2
  5112  00136E  A4D8               	btfss	status,2,c
  5113  001370  D05A               	goto	l7991
  5114                           
  5115                           ;clcd.c: 761: if (clcd_display_string_details[count].display_interval_count == clcd_disp
      +                          lay_string_details[count].display_interval) {
  5116  001372  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5117  001376  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5118  00137A  0E00               	movlw	0
  5119  00137C  6E1B               	movwf	___wmul@multiplicand+1,c
  5120  00137E  0E39               	movlw	57
  5121  001380  6E1A               	movwf	___wmul@multiplicand,c
  5122  001382  EC04  F026         	call	___wmul	;wreg free
  5123  001386  0E38               	movlw	56
  5124  001388  2618               	addwf	?___wmul,f,c
  5125  00138A  0E00               	movlw	0
  5126  00138C  2219               	addwfc	?___wmul+1,f,c
  5127  00138E  0E99               	movlw	low _clcd_display_string_details
  5128  001390  2418               	addwf	?___wmul,w,c
  5129  001392  6ED9               	movwf	fsr2l,c
  5130  001394  0E05               	movlw	high _clcd_display_string_details
  5131  001396  2019               	addwfc	?___wmul+1,w,c
  5132  001398  6EDA               	movwf	fsr2h,c
  5133  00139A  50DF               	movf	223,w,c
  5134  00139C  0B7F               	andlw	127
  5135  00139E  6E3A               	movwf	??_make_display& (0+255),c
  5136  0013A0  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5137  0013A4  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5138  0013A8  0E00               	movlw	0
  5139  0013AA  6E1B               	movwf	___wmul@multiplicand+1,c
  5140  0013AC  0E39               	movlw	57
  5141  0013AE  6E1A               	movwf	___wmul@multiplicand,c
  5142  0013B0  EC04  F026         	call	___wmul	;wreg free
  5143  0013B4  0E32               	movlw	50
  5144  0013B6  2618               	addwf	?___wmul,f,c
  5145  0013B8  0E00               	movlw	0
  5146  0013BA  2219               	addwfc	?___wmul+1,f,c
  5147  0013BC  0E99               	movlw	low _clcd_display_string_details
  5148  0013BE  2418               	addwf	?___wmul,w,c
  5149  0013C0  6ED9               	movwf	fsr2l,c
  5150  0013C2  0E05               	movlw	high _clcd_display_string_details
  5151  0013C4  2019               	addwfc	?___wmul+1,w,c
  5152  0013C6  6EDA               	movwf	fsr2h,c
  5153  0013C8  50DF               	movf	223,w,c
  5154  0013CA  0B7F               	andlw	127
  5155  0013CC  183A               	xorwf	??_make_display,w,c
  5156  0013CE  A4D8               	btfss	status,2,c
  5157  0013D0  D01D               	goto	l7989
  5158                           
  5159                           ;clcd.c: 762: scroll_left_to_right(&clcd_display_string_details[count]);
  5160  0013D2  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5161  0013D6  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5162  0013DA  0E00               	movlw	0
  5163  0013DC  6E1B               	movwf	___wmul@multiplicand+1,c
  5164  0013DE  0E39               	movlw	57
  5165  0013E0  6E1A               	movwf	___wmul@multiplicand,c
  5166  0013E2  EC04  F026         	call	___wmul	;wreg free
  5167  0013E6  0E99               	movlw	low _clcd_display_string_details
  5168  0013E8  2418               	addwf	?___wmul,w,c
  5169  0013EA  6E2C               	movwf	scroll_left_to_right@clcd_display_string_details,c
  5170  0013EC  0E05               	movlw	high _clcd_display_string_details
  5171  0013EE  2019               	addwfc	?___wmul+1,w,c
  5172  0013F0  6E2D               	movwf	scroll_left_to_right@clcd_display_string_details+1,c
  5173  0013F2  EC23  F011         	call	_scroll_left_to_right	;wreg free
  5174                           
  5175                           ;clcd.c: 763: clcd_display_string_details[count].display_interval_count = 0;
  5176  0013F6  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5177  0013FA  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5178  0013FE  0E00               	movlw	0
  5179  001400  6E1B               	movwf	___wmul@multiplicand+1,c
  5180  001402  0E39               	movlw	57
  5181  001404  6E1A               	movwf	___wmul@multiplicand,c
  5182  001406  EC04  F026         	call	___wmul	;wreg free
  5183  00140A  D119               	goto	L5
  5184  00140C                     l7989:
  5185                           
  5186                           ;clcd.c: 765: clcd_display_string_details[count].display_interval_count++;
  5187  00140C  0E01               	movlw	1
  5188  00140E  6E3A               	movwf	??_make_display& (0+255),c
  5189  001410  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5190  001414  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5191  001418  0E00               	movlw	0
  5192  00141A  6E1B               	movwf	___wmul@multiplicand+1,c
  5193  00141C  0E39               	movlw	57
  5194  00141E  6E1A               	movwf	___wmul@multiplicand,c
  5195  001420  EC04  F026         	call	___wmul	;wreg free
  5196  001424  D12A               	goto	L6
  5197  001426                     l7991:
  5198  001426  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5199  00142A  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5200  00142E  0E00               	movlw	0
  5201  001430  6E1B               	movwf	___wmul@multiplicand+1,c
  5202  001432  0E39               	movlw	57
  5203  001434  6E1A               	movwf	___wmul@multiplicand,c
  5204  001436  EC04  F026         	call	___wmul	;wreg free
  5205  00143A  0E02               	movlw	2
  5206  00143C  2618               	addwf	?___wmul,f,c
  5207  00143E  0E00               	movlw	0
  5208  001440  2219               	addwfc	?___wmul+1,f,c
  5209  001442  0E99               	movlw	low _clcd_display_string_details
  5210  001444  2418               	addwf	?___wmul,w,c
  5211  001446  6E1E               	movwf	strlen@s,c
  5212  001448  0E05               	movlw	high _clcd_display_string_details
  5213  00144A  2019               	addwfc	?___wmul+1,w,c
  5214  00144C  6E1F               	movwf	strlen@s+1,c
  5215  00144E  ECC2  F022         	call	_strlen	;wreg free
  5216  001452  501E               	movf	?_strlen,w,c
  5217  001454  101F               	iorwf	?_strlen+1,w,c
  5218  001456  B4D8               	btfsc	status,2,c
  5219  001458  D073               	goto	l8003
  5220  00145A  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5221  00145E  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5222  001462  0E00               	movlw	0
  5223  001464  6E1B               	movwf	___wmul@multiplicand+1,c
  5224  001466  0E39               	movlw	57
  5225  001468  6E1A               	movwf	___wmul@multiplicand,c
  5226  00146A  EC04  F026         	call	___wmul	;wreg free
  5227  00146E  0E31               	movlw	49
  5228  001470  2618               	addwf	?___wmul,f,c
  5229  001472  0E00               	movlw	0
  5230  001474  2219               	addwfc	?___wmul+1,f,c
  5231  001476  0E99               	movlw	low _clcd_display_string_details
  5232  001478  2418               	addwf	?___wmul,w,c
  5233  00147A  6ED9               	movwf	fsr2l,c
  5234  00147C  0E05               	movlw	high _clcd_display_string_details
  5235  00147E  2019               	addwfc	?___wmul+1,w,c
  5236  001480  6EDA               	movwf	fsr2h,c
  5237  001482  50DF               	movf	223,w,c
  5238  001484  0B07               	andlw	7
  5239  001486  06E8               	decf	wreg,f,c
  5240  001488  A4D8               	btfss	status,2,c
  5241  00148A  D05A               	goto	l8003
  5242                           
  5243                           ;clcd.c: 768: if (clcd_display_string_details[count].display_interval_count == clcd_disp
      +                          lay_string_details[count].display_interval) {
  5244  00148C  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5245  001490  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5246  001494  0E00               	movlw	0
  5247  001496  6E1B               	movwf	___wmul@multiplicand+1,c
  5248  001498  0E39               	movlw	57
  5249  00149A  6E1A               	movwf	___wmul@multiplicand,c
  5250  00149C  EC04  F026         	call	___wmul	;wreg free
  5251  0014A0  0E38               	movlw	56
  5252  0014A2  2618               	addwf	?___wmul,f,c
  5253  0014A4  0E00               	movlw	0
  5254  0014A6  2219               	addwfc	?___wmul+1,f,c
  5255  0014A8  0E99               	movlw	low _clcd_display_string_details
  5256  0014AA  2418               	addwf	?___wmul,w,c
  5257  0014AC  6ED9               	movwf	fsr2l,c
  5258  0014AE  0E05               	movlw	high _clcd_display_string_details
  5259  0014B0  2019               	addwfc	?___wmul+1,w,c
  5260  0014B2  6EDA               	movwf	fsr2h,c
  5261  0014B4  50DF               	movf	223,w,c
  5262  0014B6  0B7F               	andlw	127
  5263  0014B8  6E3A               	movwf	??_make_display& (0+255),c
  5264  0014BA  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5265  0014BE  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5266  0014C2  0E00               	movlw	0
  5267  0014C4  6E1B               	movwf	___wmul@multiplicand+1,c
  5268  0014C6  0E39               	movlw	57
  5269  0014C8  6E1A               	movwf	___wmul@multiplicand,c
  5270  0014CA  EC04  F026         	call	___wmul	;wreg free
  5271  0014CE  0E32               	movlw	50
  5272  0014D0  2618               	addwf	?___wmul,f,c
  5273  0014D2  0E00               	movlw	0
  5274  0014D4  2219               	addwfc	?___wmul+1,f,c
  5275  0014D6  0E99               	movlw	low _clcd_display_string_details
  5276  0014D8  2418               	addwf	?___wmul,w,c
  5277  0014DA  6ED9               	movwf	fsr2l,c
  5278  0014DC  0E05               	movlw	high _clcd_display_string_details
  5279  0014DE  2019               	addwfc	?___wmul+1,w,c
  5280  0014E0  6EDA               	movwf	fsr2h,c
  5281  0014E2  50DF               	movf	223,w,c
  5282  0014E4  0B7F               	andlw	127
  5283  0014E6  183A               	xorwf	??_make_display,w,c
  5284  0014E8  A4D8               	btfss	status,2,c
  5285  0014EA  D01D               	goto	l8001
  5286                           
  5287                           ;clcd.c: 769: scroll_right_to_left(&clcd_display_string_details[count]);
  5288  0014EC  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5289  0014F0  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5290  0014F4  0E00               	movlw	0
  5291  0014F6  6E1B               	movwf	___wmul@multiplicand+1,c
  5292  0014F8  0E39               	movlw	57
  5293  0014FA  6E1A               	movwf	___wmul@multiplicand,c
  5294  0014FC  EC04  F026         	call	___wmul	;wreg free
  5295  001500  0E99               	movlw	low _clcd_display_string_details
  5296  001502  2418               	addwf	?___wmul,w,c
  5297  001504  6E2C               	movwf	scroll_right_to_left@clcd_display_string_details,c
  5298  001506  0E05               	movlw	high _clcd_display_string_details
  5299  001508  2019               	addwfc	?___wmul+1,w,c
  5300  00150A  6E2D               	movwf	scroll_right_to_left@clcd_display_string_details+1,c
  5301  00150C  EC49  F00F         	call	_scroll_right_to_left	;wreg free
  5302                           
  5303                           ;clcd.c: 770: clcd_display_string_details[count].display_interval_count = 0;
  5304  001510  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5305  001514  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5306  001518  0E00               	movlw	0
  5307  00151A  6E1B               	movwf	___wmul@multiplicand+1,c
  5308  00151C  0E39               	movlw	57
  5309  00151E  6E1A               	movwf	___wmul@multiplicand,c
  5310  001520  EC04  F026         	call	___wmul	;wreg free
  5311  001524  D08C               	goto	L5
  5312  001526                     l8001:
  5313                           
  5314                           ;clcd.c: 772: clcd_display_string_details[count].display_interval_count++;
  5315  001526  0E01               	movlw	1
  5316  001528  6E3A               	movwf	??_make_display& (0+255),c
  5317  00152A  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5318  00152E  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5319  001532  0E00               	movlw	0
  5320  001534  6E1B               	movwf	___wmul@multiplicand+1,c
  5321  001536  0E39               	movlw	57
  5322  001538  6E1A               	movwf	___wmul@multiplicand,c
  5323  00153A  EC04  F026         	call	___wmul	;wreg free
  5324  00153E  D09D               	goto	L6
  5325  001540                     l8003:
  5326  001540  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5327  001544  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5328  001548  0E00               	movlw	0
  5329  00154A  6E1B               	movwf	___wmul@multiplicand+1,c
  5330  00154C  0E39               	movlw	57
  5331  00154E  6E1A               	movwf	___wmul@multiplicand,c
  5332  001550  EC04  F026         	call	___wmul	;wreg free
  5333  001554  0E02               	movlw	2
  5334  001556  2618               	addwf	?___wmul,f,c
  5335  001558  0E00               	movlw	0
  5336  00155A  2219               	addwfc	?___wmul+1,f,c
  5337  00155C  0E99               	movlw	low _clcd_display_string_details
  5338  00155E  2418               	addwf	?___wmul,w,c
  5339  001560  6E1E               	movwf	strlen@s,c
  5340  001562  0E05               	movlw	high _clcd_display_string_details
  5341  001564  2019               	addwfc	?___wmul+1,w,c
  5342  001566  6E1F               	movwf	strlen@s+1,c
  5343  001568  ECC2  F022         	call	_strlen	;wreg free
  5344  00156C  501E               	movf	?_strlen,w,c
  5345  00156E  101F               	iorwf	?_strlen+1,w,c
  5346  001570  B4D8               	btfsc	status,2,c
  5347  001572  D097               	goto	l8015
  5348  001574  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5349  001578  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5350  00157C  0E00               	movlw	0
  5351  00157E  6E1B               	movwf	___wmul@multiplicand+1,c
  5352  001580  0E39               	movlw	57
  5353  001582  6E1A               	movwf	___wmul@multiplicand,c
  5354  001584  EC04  F026         	call	___wmul	;wreg free
  5355  001588  0E31               	movlw	49
  5356  00158A  2618               	addwf	?___wmul,f,c
  5357  00158C  0E00               	movlw	0
  5358  00158E  2219               	addwfc	?___wmul+1,f,c
  5359  001590  0E99               	movlw	low _clcd_display_string_details
  5360  001592  2418               	addwf	?___wmul,w,c
  5361  001594  6ED9               	movwf	fsr2l,c
  5362  001596  0E05               	movlw	high _clcd_display_string_details
  5363  001598  2019               	addwfc	?___wmul+1,w,c
  5364  00159A  6EDA               	movwf	fsr2h,c
  5365  00159C  50DF               	movf	223,w,c
  5366  00159E  0B07               	andlw	7
  5367  0015A0  0900               	iorlw	0
  5368  0015A2  A4D8               	btfss	status,2,c
  5369  0015A4  D07E               	goto	l8015
  5370                           
  5371                           ;clcd.c: 775: if (clcd_display_string_details[count].display_interval_count == clcd_disp
      +                          lay_string_details[count].display_interval) {
  5372  0015A6  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5373  0015AA  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5374  0015AE  0E00               	movlw	0
  5375  0015B0  6E1B               	movwf	___wmul@multiplicand+1,c
  5376  0015B2  0E39               	movlw	57
  5377  0015B4  6E1A               	movwf	___wmul@multiplicand,c
  5378  0015B6  EC04  F026         	call	___wmul	;wreg free
  5379  0015BA  0E38               	movlw	56
  5380  0015BC  2618               	addwf	?___wmul,f,c
  5381  0015BE  0E00               	movlw	0
  5382  0015C0  2219               	addwfc	?___wmul+1,f,c
  5383  0015C2  0E99               	movlw	low _clcd_display_string_details
  5384  0015C4  2418               	addwf	?___wmul,w,c
  5385  0015C6  6ED9               	movwf	fsr2l,c
  5386  0015C8  0E05               	movlw	high _clcd_display_string_details
  5387  0015CA  2019               	addwfc	?___wmul+1,w,c
  5388  0015CC  6EDA               	movwf	fsr2h,c
  5389  0015CE  50DF               	movf	223,w,c
  5390  0015D0  0B7F               	andlw	127
  5391  0015D2  6E3A               	movwf	??_make_display& (0+255),c
  5392  0015D4  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5393  0015D8  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5394  0015DC  0E00               	movlw	0
  5395  0015DE  6E1B               	movwf	___wmul@multiplicand+1,c
  5396  0015E0  0E39               	movlw	57
  5397  0015E2  6E1A               	movwf	___wmul@multiplicand,c
  5398  0015E4  EC04  F026         	call	___wmul	;wreg free
  5399  0015E8  0E32               	movlw	50
  5400  0015EA  2618               	addwf	?___wmul,f,c
  5401  0015EC  0E00               	movlw	0
  5402  0015EE  2219               	addwfc	?___wmul+1,f,c
  5403  0015F0  0E99               	movlw	low _clcd_display_string_details
  5404  0015F2  2418               	addwf	?___wmul,w,c
  5405  0015F4  6ED9               	movwf	fsr2l,c
  5406  0015F6  0E05               	movlw	high _clcd_display_string_details
  5407  0015F8  2019               	addwfc	?___wmul+1,w,c
  5408  0015FA  6EDA               	movwf	fsr2h,c
  5409  0015FC  50DF               	movf	223,w,c
  5410  0015FE  0B7F               	andlw	127
  5411  001600  183A               	xorwf	??_make_display,w,c
  5412  001602  A4D8               	btfss	status,2,c
  5413  001604  D02E               	goto	l8013
  5414                           
  5415                           ;clcd.c: 776: scroll_off(&clcd_display_string_details[count]);
  5416  001606  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5417  00160A  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5418  00160E  0E00               	movlw	0
  5419  001610  6E1B               	movwf	___wmul@multiplicand+1,c
  5420  001612  0E39               	movlw	57
  5421  001614  6E1A               	movwf	___wmul@multiplicand,c
  5422  001616  EC04  F026         	call	___wmul	;wreg free
  5423  00161A  0E99               	movlw	low _clcd_display_string_details
  5424  00161C  2418               	addwf	?___wmul,w,c
  5425  00161E  6E24               	movwf	scroll_off@clcd_display_string_details,c
  5426  001620  0E05               	movlw	high _clcd_display_string_details
  5427  001622  2019               	addwfc	?___wmul+1,w,c
  5428  001624  6E25               	movwf	scroll_off@clcd_display_string_details+1,c
  5429  001626  ECCA  F01A         	call	_scroll_off	;wreg free
  5430                           
  5431                           ;clcd.c: 777: clcd_display_string_details[count].display_interval_count = 0;
  5432  00162A  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5433  00162E  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5434  001632  0E00               	movlw	0
  5435  001634  6E1B               	movwf	___wmul@multiplicand+1,c
  5436  001636  0E39               	movlw	57
  5437  001638  6E1A               	movwf	___wmul@multiplicand,c
  5438  00163A  EC04  F026         	call	___wmul	;wreg free
  5439  00163E                     L5:
  5440  00163E  0E38               	movlw	56
  5441  001640  2618               	addwf	?___wmul,f,c
  5442  001642  0E00               	movlw	0
  5443  001644  2219               	addwfc	?___wmul+1,f,c
  5444  001646  0E99               	movlw	low _clcd_display_string_details
  5445  001648  2418               	addwf	?___wmul,w,c
  5446  00164A  6ED9               	movwf	fsr2l,c
  5447  00164C  0E05               	movlw	high _clcd_display_string_details
  5448  00164E  2019               	addwfc	?___wmul+1,w,c
  5449  001650  6EDA               	movwf	fsr2h,c
  5450  001652  90DF               	bcf	223,0,c
  5451  001654  92DF               	bcf	223,1,c
  5452  001656  94DF               	bcf	223,2,c
  5453  001658  96DF               	bcf	223,3,c
  5454  00165A  98DF               	bcf	223,4,c
  5455  00165C  9ADF               	bcf	223,5,c
  5456  00165E  9CDF               	bcf	223,6,c
  5457                           
  5458                           ;clcd.c: 778: } else {
  5459  001660  D020               	goto	l8015
  5460  001662                     l8013:
  5461                           
  5462                           ;clcd.c: 779: clcd_display_string_details[count].display_interval_count++;
  5463  001662  0E01               	movlw	1
  5464  001664  6E3A               	movwf	??_make_display& (0+255),c
  5465  001666  C03D  F018         	movff	make_display@count,___wmul@multiplier
  5466  00166A  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  5467  00166E  0E00               	movlw	0
  5468  001670  6E1B               	movwf	___wmul@multiplicand+1,c
  5469  001672  0E39               	movlw	57
  5470  001674  6E1A               	movwf	___wmul@multiplicand,c
  5471  001676  EC04  F026         	call	___wmul	;wreg free
  5472  00167A                     L6:
  5473  00167A  0E38               	movlw	56
  5474  00167C  2618               	addwf	?___wmul,f,c
  5475  00167E  0E00               	movlw	0
  5476  001680  2219               	addwfc	?___wmul+1,f,c
  5477  001682  0E99               	movlw	low _clcd_display_string_details
  5478  001684  2418               	addwf	?___wmul,w,c
  5479  001686  6ED9               	movwf	fsr2l,c
  5480  001688  0E05               	movlw	high _clcd_display_string_details
  5481  00168A  2019               	addwfc	?___wmul+1,w,c
  5482  00168C  6EDA               	movwf	fsr2h,c
  5483  00168E  50DF               	movf	223,w,c
  5484  001690  0B7F               	andlw	127
  5485  001692  6E3B               	movwf	(??_make_display+1)& (0+255),c
  5486  001694  503A               	movf	??_make_display,w,c
  5487  001696  263B               	addwf	??_make_display+1,f,c
  5488  001698  50DF               	movf	223,w,c
  5489  00169A  183B               	xorwf	(??_make_display+1)& (0+255),w,c
  5490  00169C  0B80               	andlw	-128
  5491  00169E  183B               	xorwf	(??_make_display+1)& (0+255),w,c
  5492  0016A0  6EDF               	movwf	223,c
  5493  0016A2                     l8015:
  5494  0016A2  4A3D               	infsnz	make_display@count,f,c
  5495  0016A4  2A3E               	incf	make_display@count+1,f,c
  5496  0016A6                     l8017:
  5497  0016A6  504D               	movf	_clcd_config_data+4,w,c
  5498  0016A8  6E3A               	movwf	??_make_display& (0+255),c
  5499  0016AA  6A3B               	clrf	(??_make_display+1)& (0+255),c
  5500  0016AC  503A               	movf	??_make_display,w,c
  5501  0016AE  5C3D               	subwf	make_display@count,w,c
  5502  0016B0  503E               	movf	make_display@count+1,w,c
  5503  0016B2  0A80               	xorlw	128
  5504  0016B4  6E3C               	movwf	(??_make_display+2)& (0+255),c
  5505  0016B6  503B               	movf	??_make_display+1,w,c
  5506  0016B8  0A80               	xorlw	128
  5507  0016BA  583C               	subwfb	(??_make_display+2)& (0+255),w,c
  5508  0016BC  A0D8               	btfss	status,0,c
  5509  0016BE  D626               	goto	l7979
  5510                           
  5511                           ;clcd.c: 780: }
  5512                           ;clcd.c: 781: }
  5513                           ;clcd.c: 782: }
  5514                           ;clcd.c: 783: print_data_ready = 1;
  5515  0016C0  0E00               	movlw	0
  5516  0016C2  0101               	movlb	1	; () banked
  5517  0016C4  6F0F               	movwf	(_print_data_ready+1)& (0+255),b
  5518  0016C6  0E01               	movlw	1
  5519  0016C8  6F0E               	movwf	_print_data_ready& (0+255),b
  5520                           
  5521                           ; BSR set to: 1
  5522                           ;clcd.c: 784: display_text();
  5523  0016CA  ECB1  F020         	call	_display_text	;wreg free
  5524  0016CE  0012               	return		;funcret
  5525  0016D0                     __end_of_make_display:
  5526                           	opt stack 0
  5527                           tblptru	equ	0xFF8
  5528                           tblptrh	equ	0xFF7
  5529                           tblptrl	equ	0xFF6
  5530                           tablat	equ	0xFF5
  5531                           prodh	equ	0xFF4
  5532                           prodl	equ	0xFF3
  5533                           intcon	equ	0xFF2
  5534                           postinc0	equ	0xFEE
  5535                           wreg	equ	0xFE8
  5536                           indf1	equ	0xFE7
  5537                           postinc1	equ	0xFE6
  5538                           postdec1	equ	0xFE5
  5539                           fsr1h	equ	0xFE2
  5540                           fsr1l	equ	0xFE1
  5541                           indf2	equ	0xFDF
  5542                           postinc2	equ	0xFDE
  5543                           postdec2	equ	0xFDD
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function _scroll_right_to_left *****************
  5549 ;; Defined at:
  5550 ;;		line 640 in file "clcd.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;  clcd_display    2   43[COMRAM] PTR struct .
  5553 ;;		 -> clcd_display_string_details(1140), 
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;  line            1   56[COMRAM] unsigned char 
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  1    wreg      void 
  5558 ;; Registers used:
  5559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5565 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Temps:         11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5569 ;;Total ram usage:       14 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:    6
  5572 ;; This function calls:
  5573 ;;		_memset
  5574 ;;		_strncpy
  5575 ;; This function is called by:
  5576 ;;		_make_display
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text8
  5581  001E92                     __ptext8:
  5582                           	opt stack 0
  5583  001E92                     _scroll_right_to_left:
  5584                           	opt stack 23
  5585                           
  5586                           ;clcd.c: 642: char line = -1;
  5587                           
  5588                           ;incstack = 0
  5589  001E92  6839               	setf	scroll_right_to_left@line,c
  5590                           
  5591                           ;clcd.c: 643: if (clcd_display_string_details->start_row == 0)
  5592  001E94  EE20 F02B          	lfsr	2,43
  5593  001E98  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5594  001E9A  26D9               	addwf	fsr2l,f,c
  5595  001E9C  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5596  001E9E  22DA               	addwfc	fsr2h,f,c
  5597  001EA0  50DF               	movf	indf2,w,c
  5598  001EA2  0B7F               	andlw	127
  5599  001EA4  0900               	iorlw	0
  5600  001EA6  A4D8               	btfss	status,2,c
  5601  001EA8  D002               	goto	l7587
  5602                           
  5603                           ;clcd.c: 644: line = 0;
  5604  001EAA  0E00               	movlw	0
  5605  001EAC  D00C               	goto	L7
  5606  001EAE                     l7587:
  5607                           
  5608                           ;clcd.c: 645: else if (clcd_display_string_details->start_row == 1)
  5609  001EAE  EE20 F02B          	lfsr	2,43
  5610  001EB2  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5611  001EB4  26D9               	addwf	fsr2l,f,c
  5612  001EB6  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5613  001EB8  22DA               	addwfc	fsr2h,f,c
  5614  001EBA  50DF               	movf	indf2,w,c
  5615  001EBC  0B7F               	andlw	127
  5616  001EBE  06E8               	decf	wreg,f,c
  5617  001EC0  A4D8               	btfss	status,2,c
  5618  001EC2  D002               	goto	l7591
  5619                           
  5620                           ;clcd.c: 646: line = 1;
  5621  001EC4  0E01               	movlw	1
  5622  001EC6                     L7:
  5623  001EC6  6E39               	movwf	scroll_right_to_left@line,c
  5624  001EC8                     l7591:
  5625                           
  5626                           ;clcd.c: 647: if (clcd_display_string_details->start_row == 2)
  5627  001EC8  EE20 F02B          	lfsr	2,43
  5628  001ECC  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5629  001ECE  26D9               	addwf	fsr2l,f,c
  5630  001ED0  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5631  001ED2  22DA               	addwfc	fsr2h,f,c
  5632  001ED4  50DF               	movf	indf2,w,c
  5633  001ED6  0B7F               	andlw	127
  5634  001ED8  0A02               	xorlw	2
  5635  001EDA  A4D8               	btfss	status,2,c
  5636  001EDC  D002               	goto	l7595
  5637                           
  5638                           ;clcd.c: 648: line = 2;
  5639  001EDE  0E02               	movlw	2
  5640  001EE0  6E39               	movwf	scroll_right_to_left@line,c
  5641  001EE2                     l7595:
  5642                           
  5643                           ;clcd.c: 649: if (clcd_display_string_details->start_row == 3)
  5644  001EE2  EE20 F02B          	lfsr	2,43
  5645  001EE6  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5646  001EE8  26D9               	addwf	fsr2l,f,c
  5647  001EEA  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5648  001EEC  22DA               	addwfc	fsr2h,f,c
  5649  001EEE  50DF               	movf	indf2,w,c
  5650  001EF0  0B7F               	andlw	127
  5651  001EF2  0A03               	xorlw	3
  5652  001EF4  A4D8               	btfss	status,2,c
  5653  001EF6  D002               	goto	l7599
  5654                           
  5655                           ;clcd.c: 650: line = 3;
  5656  001EF8  0E03               	movlw	3
  5657  001EFA  6E39               	movwf	scroll_right_to_left@line,c
  5658  001EFC                     l7599:
  5659                           
  5660                           ;clcd.c: 652: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  5661                           ;clcd.c: 653: ' ', clcd_display_string_details->display_char_count);
  5662  001EFC  5039               	movf	scroll_right_to_left@line,w,c
  5663  001EFE  0D14               	mullw	20
  5664  001F00  0E1E               	movlw	low _lcd_display_array
  5665  001F02  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  5666  001F04  0E01               	movlw	high _lcd_display_array
  5667  001F06  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  5668  001F08  50F3               	movf	prodl,w,c
  5669  001F0A  262E               	addwf	??_scroll_right_to_left,f,c
  5670  001F0C  50F4               	movf	prodh,w,c
  5671  001F0E  222F               	addwfc	??_scroll_right_to_left+1,f,c
  5672  001F10  EE20 F02C          	lfsr	2,44
  5673  001F14  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5674  001F16  26D9               	addwf	fsr2l,f,c
  5675  001F18  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5676  001F1A  22DA               	addwfc	fsr2h,f,c
  5677  001F1C  50DF               	movf	indf2,w,c
  5678  001F1E  0B7F               	andlw	127
  5679  001F20  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  5680  001F22  5030               	movf	??_scroll_right_to_left+2,w,c
  5681  001F24  0D01               	mullw	1
  5682  001F26  50F3               	movf	prodl,w,c
  5683  001F28  242E               	addwf	??_scroll_right_to_left,w,c
  5684  001F2A  6E24               	movwf	memset@p1,c
  5685  001F2C  50F4               	movf	prodh,w,c
  5686  001F2E  202F               	addwfc	??_scroll_right_to_left+1,w,c
  5687  001F30  6E25               	movwf	memset@p1+1,c
  5688  001F32  0E00               	movlw	0
  5689  001F34  6E27               	movwf	memset@c+1,c
  5690  001F36  0E20               	movlw	32
  5691  001F38  6E26               	movwf	memset@c,c
  5692  001F3A  EE20 F033          	lfsr	2,51
  5693  001F3E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5694  001F40  26D9               	addwf	fsr2l,f,c
  5695  001F42  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5696  001F44  22DA               	addwfc	fsr2h,f,c
  5697  001F46  50DF               	movf	indf2,w,c
  5698  001F48  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  5699  001F4A  5031               	movf	??_scroll_right_to_left+3,w,c
  5700  001F4C  6E28               	movwf	memset@n,c
  5701  001F4E  6A29               	clrf	memset@n+1,c
  5702  001F50  ECD8  F025         	call	_memset	;wreg free
  5703                           
  5704                           ;clcd.c: 654: if (clcd_display_string_details->length_count_for_left_scroll > clcd_displ
      +                          ay_string_details->strlen) {
  5705  001F54  EE20 F02A          	lfsr	2,42
  5706  001F58  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5707  001F5A  26D9               	addwf	fsr2l,f,c
  5708  001F5C  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5709  001F5E  22DA               	addwfc	fsr2h,f,c
  5710  001F60  50DF               	movf	indf2,w,c
  5711  001F62  0B7F               	andlw	127
  5712  001F64  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  5713  001F66  EE20 F036          	lfsr	2,54
  5714  001F6A  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5715  001F6C  26D9               	addwf	fsr2l,f,c
  5716  001F6E  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5717  001F70  22DA               	addwfc	fsr2h,f,c
  5718  001F72  50DF               	movf	indf2,w,c
  5719  001F74  0B7F               	andlw	127
  5720  001F76  5C2E               	subwf	??_scroll_right_to_left,w,c
  5721  001F78  B0D8               	btfsc	status,0,c
  5722  001F7A  D066               	goto	l7605
  5723                           
  5724                           ;clcd.c: 656: strncpy(lcd_display_array[line]+(clcd_display_string_details->end_col - cl
      +                          cd_display_string_details->length_decount_for_left_scroll),
  5725                           ;clcd.c: 657: clcd_display_string_details->string, (clcd_display_string_details->display
      +                          _char_count -
  5726                           ;clcd.c: 658: (clcd_display_string_details->display_char_count - (clcd_display_string_de
      +                          tails->length_decount_for_left_scroll + 1))));
  5727  001F7C  5039               	movf	scroll_right_to_left@line,w,c
  5728  001F7E  0D14               	mullw	20
  5729  001F80  EE20 F037          	lfsr	2,55
  5730  001F84  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5731  001F86  26D9               	addwf	fsr2l,f,c
  5732  001F88  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5733  001F8A  22DA               	addwfc	fsr2h,f,c
  5734  001F8C  50DF               	movf	indf2,w,c
  5735  001F8E  0B7F               	andlw	127
  5736  001F90  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  5737  001F92  6A2F               	clrf	(??_scroll_right_to_left+1)& (0+255),c
  5738  001F94  1E2E               	comf	??_scroll_right_to_left,f,c
  5739  001F96  1E2F               	comf	??_scroll_right_to_left+1,f,c
  5740  001F98  4A2E               	infsnz	??_scroll_right_to_left,f,c
  5741  001F9A  2A2F               	incf	??_scroll_right_to_left+1,f,c
  5742  001F9C  EE20 F02F          	lfsr	2,47
  5743  001FA0  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5744  001FA2  26D9               	addwf	fsr2l,f,c
  5745  001FA4  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5746  001FA6  22DA               	addwfc	fsr2h,f,c
  5747  001FA8  50DF               	movf	indf2,w,c
  5748  001FAA  0B7F               	andlw	127
  5749  001FAC  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  5750  001FAE  6A31               	clrf	(??_scroll_right_to_left+3)& (0+255),c
  5751  001FB0  502E               	movf	??_scroll_right_to_left,w,c
  5752  001FB2  2630               	addwf	??_scroll_right_to_left+2,f,c
  5753  001FB4  502F               	movf	??_scroll_right_to_left+1,w,c
  5754  001FB6  2231               	addwfc	??_scroll_right_to_left+3,f,c
  5755  001FB8  0E1E               	movlw	low _lcd_display_array
  5756  001FBA  6E32               	movwf	(??_scroll_right_to_left+4)& (0+255),c
  5757  001FBC  0E01               	movlw	high _lcd_display_array
  5758  001FBE  6E33               	movwf	(??_scroll_right_to_left+5)& (0+255),c
  5759  001FC0  5030               	movf	??_scroll_right_to_left+2,w,c
  5760  001FC2  2632               	addwf	??_scroll_right_to_left+4,f,c
  5761  001FC4  5031               	movf	??_scroll_right_to_left+3,w,c
  5762  001FC6  2233               	addwfc	??_scroll_right_to_left+5,f,c
  5763  001FC8  50F3               	movf	prodl,w,c
  5764  001FCA  2432               	addwf	??_scroll_right_to_left+4,w,c
  5765  001FCC  6E10               	movwf	strncpy@to,c
  5766  001FCE  50F4               	movf	prodh,w,c
  5767  001FD0  2033               	addwfc	??_scroll_right_to_left+5,w,c
  5768  001FD2  6E11               	movwf	strncpy@to+1,c
  5769  001FD4  0E02               	movlw	2
  5770  001FD6  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  5771  001FD8  6E12               	movwf	strncpy@from,c
  5772  001FDA  0E00               	movlw	0
  5773  001FDC  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  5774  001FDE  6E13               	movwf	strncpy@from+1,c
  5775  001FE0  EE20 F037          	lfsr	2,55
  5776  001FE4  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5777  001FE6  26D9               	addwf	fsr2l,f,c
  5778  001FE8  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5779  001FEA  22DA               	addwfc	fsr2h,f,c
  5780  001FEC  50DF               	movf	indf2,w,c
  5781  001FEE  0B7F               	andlw	127
  5782  001FF0  6E34               	movwf	(??_scroll_right_to_left+6)& (0+255),c
  5783  001FF2  6A35               	clrf	(??_scroll_right_to_left+7)& (0+255),c
  5784  001FF4  0E01               	movlw	1
  5785  001FF6  2634               	addwf	??_scroll_right_to_left+6,f,c
  5786  001FF8  0E00               	movlw	0
  5787  001FFA  2235               	addwfc	??_scroll_right_to_left+7,f,c
  5788  001FFC  1E34               	comf	??_scroll_right_to_left+6,f,c
  5789  001FFE  1E35               	comf	??_scroll_right_to_left+7,f,c
  5790  002000  4A34               	infsnz	??_scroll_right_to_left+6,f,c
  5791  002002  2A35               	incf	??_scroll_right_to_left+7,f,c
  5792  002004  EE20 F033          	lfsr	2,51
  5793  002008  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5794  00200A  26D9               	addwf	fsr2l,f,c
  5795  00200C  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5796  00200E  22DA               	addwfc	fsr2h,f,c
  5797  002010  50DF               	movf	indf2,w,c
  5798  002012  6E36               	movwf	(??_scroll_right_to_left+8)& (0+255),c
  5799  002014  6A37               	clrf	(??_scroll_right_to_left+9)& (0+255),c
  5800  002016  5034               	movf	??_scroll_right_to_left+6,w,c
  5801  002018  2636               	addwf	??_scroll_right_to_left+8,f,c
  5802  00201A  5035               	movf	??_scroll_right_to_left+7,w,c
  5803  00201C  2237               	addwfc	??_scroll_right_to_left+9,f,c
  5804  00201E  1E36               	comf	??_scroll_right_to_left+8,f,c
  5805  002020  1E37               	comf	??_scroll_right_to_left+9,f,c
  5806  002022  4A36               	infsnz	??_scroll_right_to_left+8,f,c
  5807  002024  2A37               	incf	??_scroll_right_to_left+9,f,c
  5808  002026  EE20 F033          	lfsr	2,51
  5809  00202A  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5810  00202C  26D9               	addwf	fsr2l,f,c
  5811  00202E  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5812  002030  22DA               	addwfc	fsr2h,f,c
  5813  002032  50DF               	movf	indf2,w,c
  5814  002034  6E38               	movwf	(??_scroll_right_to_left+10)& (0+255),c
  5815  002036  5038               	movf	??_scroll_right_to_left+10,w,c
  5816  002038  2436               	addwf	??_scroll_right_to_left+8,w,c
  5817  00203A  6E14               	movwf	strncpy@size,c
  5818  00203C  0E00               	movlw	0
  5819  00203E  2037               	addwfc	??_scroll_right_to_left+9,w,c
  5820  002040  6E15               	movwf	strncpy@size+1,c
  5821  002042  EC0F  F022         	call	_strncpy	;wreg free
  5822                           
  5823                           ;clcd.c: 659: } else {
  5824  002046  D082               	goto	l7611
  5825  002048                     l7605:
  5826                           
  5827                           ;clcd.c: 660: if (clcd_display_string_details->string[clcd_display_string_details->lengt
      +                          h_count_for_left_scroll] != (0)) {
  5828  002048  EE20 F036          	lfsr	2,54
  5829  00204C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5830  00204E  26D9               	addwf	fsr2l,f,c
  5831  002050  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5832  002052  22DA               	addwfc	fsr2h,f,c
  5833  002054  50DF               	movf	indf2,w,c
  5834  002056  0B7F               	andlw	127
  5835  002058  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  5836  00205A  502E               	movf	??_scroll_right_to_left,w,c
  5837  00205C  0D01               	mullw	1
  5838  00205E  0E02               	movlw	2
  5839  002060  26F3               	addwf	prodl,f,c
  5840  002062  0E00               	movlw	0
  5841  002064  22F4               	addwfc	prodh,f,c
  5842  002066  50F3               	movf	prodl,w,c
  5843  002068  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  5844  00206A  6ED9               	movwf	fsr2l,c
  5845  00206C  50F4               	movf	prodh,w,c
  5846  00206E  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  5847  002070  6EDA               	movwf	fsr2h,c
  5848  002072  50DF               	movf	indf2,w,c
  5849  002074  B4D8               	btfsc	status,2,c
  5850  002076  D03E               	goto	l7609
  5851                           
  5852                           ;clcd.c: 661: strncpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  5853                           ;clcd.c: 662: clcd_display_string_details->string + clcd_display_string_details->length_
      +                          count_for_left_scroll,
  5854                           ;clcd.c: 663: clcd_display_string_details->display_char_count);
  5855  002078  5039               	movf	scroll_right_to_left@line,w,c
  5856  00207A  0D14               	mullw	20
  5857  00207C  0E1E               	movlw	low _lcd_display_array
  5858  00207E  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  5859  002080  0E01               	movlw	high _lcd_display_array
  5860  002082  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  5861  002084  50F3               	movf	prodl,w,c
  5862  002086  262E               	addwf	??_scroll_right_to_left,f,c
  5863  002088  50F4               	movf	prodh,w,c
  5864  00208A  222F               	addwfc	??_scroll_right_to_left+1,f,c
  5865  00208C  EE20 F02C          	lfsr	2,44
  5866  002090  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5867  002092  26D9               	addwf	fsr2l,f,c
  5868  002094  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5869  002096  22DA               	addwfc	fsr2h,f,c
  5870  002098  50DF               	movf	indf2,w,c
  5871  00209A  0B7F               	andlw	127
  5872  00209C  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  5873  00209E  5030               	movf	??_scroll_right_to_left+2,w,c
  5874  0020A0  0D01               	mullw	1
  5875  0020A2  50F3               	movf	prodl,w,c
  5876  0020A4  242E               	addwf	??_scroll_right_to_left,w,c
  5877  0020A6  6E10               	movwf	strncpy@to,c
  5878  0020A8  50F4               	movf	prodh,w,c
  5879  0020AA  202F               	addwfc	??_scroll_right_to_left+1,w,c
  5880  0020AC  6E11               	movwf	strncpy@to+1,c
  5881  0020AE  EE20 F036          	lfsr	2,54
  5882  0020B2  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5883  0020B4  26D9               	addwf	fsr2l,f,c
  5884  0020B6  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5885  0020B8  22DA               	addwfc	fsr2h,f,c
  5886  0020BA  50DF               	movf	indf2,w,c
  5887  0020BC  0B7F               	andlw	127
  5888  0020BE  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  5889  0020C0  5031               	movf	??_scroll_right_to_left+3,w,c
  5890  0020C2  0D01               	mullw	1
  5891  0020C4  0E02               	movlw	2
  5892  0020C6  26F3               	addwf	prodl,f,c
  5893  0020C8  0E00               	movlw	0
  5894  0020CA  22F4               	addwfc	prodh,f,c
  5895  0020CC  50F3               	movf	prodl,w,c
  5896  0020CE  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  5897  0020D0  6E12               	movwf	strncpy@from,c
  5898  0020D2  50F4               	movf	prodh,w,c
  5899  0020D4  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  5900  0020D6  6E13               	movwf	strncpy@from+1,c
  5901  0020D8  EE20 F033          	lfsr	2,51
  5902  0020DC  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5903  0020DE  26D9               	addwf	fsr2l,f,c
  5904  0020E0  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5905  0020E2  22DA               	addwfc	fsr2h,f,c
  5906  0020E4  50DF               	movf	indf2,w,c
  5907  0020E6  6E32               	movwf	(??_scroll_right_to_left+4)& (0+255),c
  5908  0020E8  5032               	movf	??_scroll_right_to_left+4,w,c
  5909  0020EA  6E14               	movwf	strncpy@size,c
  5910  0020EC  6A15               	clrf	strncpy@size+1,c
  5911  0020EE  EC0F  F022         	call	_strncpy	;wreg free
  5912                           
  5913                           ;clcd.c: 664: } else {
  5914  0020F2  D02C               	goto	l7611
  5915  0020F4                     l7609:
  5916                           
  5917                           ;clcd.c: 665: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  5918                           ;clcd.c: 666: ' ', clcd_display_string_details->display_char_count);
  5919  0020F4  5039               	movf	scroll_right_to_left@line,w,c
  5920  0020F6  0D14               	mullw	20
  5921  0020F8  0E1E               	movlw	low _lcd_display_array
  5922  0020FA  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  5923  0020FC  0E01               	movlw	high _lcd_display_array
  5924  0020FE  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  5925  002100  50F3               	movf	prodl,w,c
  5926  002102  262E               	addwf	??_scroll_right_to_left,f,c
  5927  002104  50F4               	movf	prodh,w,c
  5928  002106  222F               	addwfc	??_scroll_right_to_left+1,f,c
  5929  002108  EE20 F02C          	lfsr	2,44
  5930  00210C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5931  00210E  26D9               	addwf	fsr2l,f,c
  5932  002110  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5933  002112  22DA               	addwfc	fsr2h,f,c
  5934  002114  50DF               	movf	indf2,w,c
  5935  002116  0B7F               	andlw	127
  5936  002118  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  5937  00211A  5030               	movf	??_scroll_right_to_left+2,w,c
  5938  00211C  0D01               	mullw	1
  5939  00211E  50F3               	movf	prodl,w,c
  5940  002120  242E               	addwf	??_scroll_right_to_left,w,c
  5941  002122  6E24               	movwf	memset@p1,c
  5942  002124  50F4               	movf	prodh,w,c
  5943  002126  202F               	addwfc	??_scroll_right_to_left+1,w,c
  5944  002128  6E25               	movwf	memset@p1+1,c
  5945  00212A  0E00               	movlw	0
  5946  00212C  6E27               	movwf	memset@c+1,c
  5947  00212E  0E20               	movlw	32
  5948  002130  6E26               	movwf	memset@c,c
  5949  002132  EE20 F033          	lfsr	2,51
  5950  002136  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5951  002138  26D9               	addwf	fsr2l,f,c
  5952  00213A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5953  00213C  22DA               	addwfc	fsr2h,f,c
  5954  00213E  50DF               	movf	indf2,w,c
  5955  002140  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  5956  002142  5031               	movf	??_scroll_right_to_left+3,w,c
  5957  002144  6E28               	movwf	memset@n,c
  5958  002146  6A29               	clrf	memset@n+1,c
  5959  002148  ECD8  F025         	call	_memset	;wreg free
  5960  00214C                     l7611:
  5961                           
  5962                           ;clcd.c: 667: }
  5963                           ;clcd.c: 668: }
  5964                           ;clcd.c: 670: if (clcd_display_string_details->length_count_for_left_scroll <= clcd_disp
      +                          lay_string_details->strlen)
  5965  00214C  EE20 F036          	lfsr	2,54
  5966  002150  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5967  002152  26D9               	addwf	fsr2l,f,c
  5968  002154  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5969  002156  22DA               	addwfc	fsr2h,f,c
  5970  002158  50DF               	movf	indf2,w,c
  5971  00215A  0B7F               	andlw	127
  5972  00215C  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  5973  00215E  EE20 F02A          	lfsr	2,42
  5974  002162  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5975  002164  26D9               	addwf	fsr2l,f,c
  5976  002166  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5977  002168  22DA               	addwfc	fsr2h,f,c
  5978  00216A  50DF               	movf	indf2,w,c
  5979  00216C  0B7F               	andlw	127
  5980  00216E  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  5981  002170  502E               	movf	??_scroll_right_to_left,w,c
  5982  002172  5C2F               	subwf	??_scroll_right_to_left+1,w,c
  5983  002174  A0D8               	btfss	status,0,c
  5984  002176  D013               	goto	l7615
  5985                           
  5986                           ;clcd.c: 671: {
  5987                           ;clcd.c: 672: clcd_display_string_details->length_count_for_left_scroll++;
  5988  002178  0E01               	movlw	1
  5989  00217A  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  5990  00217C  EE20 F036          	lfsr	2,54
  5991  002180  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  5992  002182  26D9               	addwf	fsr2l,f,c
  5993  002184  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  5994  002186  22DA               	addwfc	fsr2h,f,c
  5995  002188  50DF               	movf	indf2,w,c
  5996  00218A  0B7F               	andlw	127
  5997  00218C  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  5998  00218E  502E               	movf	??_scroll_right_to_left,w,c
  5999  002190  262F               	addwf	??_scroll_right_to_left+1,f,c
  6000  002192  50DF               	movf	indf2,w,c
  6001  002194  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  6002  002196  0B80               	andlw	-128
  6003  002198  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  6004  00219A  6EDF               	movwf	indf2,c
  6005                           
  6006                           ;clcd.c: 673: } else if (clcd_display_string_details->length_count_for_left_scroll > clc
      +                          d_display_string_details->strlen)
  6007  00219C  0012               	return	
  6008  00219E                     l7615:
  6009  00219E  EE20 F02A          	lfsr	2,42
  6010  0021A2  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  6011  0021A4  26D9               	addwf	fsr2l,f,c
  6012  0021A6  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  6013  0021A8  22DA               	addwfc	fsr2h,f,c
  6014  0021AA  50DF               	movf	indf2,w,c
  6015  0021AC  0B7F               	andlw	127
  6016  0021AE  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  6017  0021B0  EE20 F036          	lfsr	2,54
  6018  0021B4  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  6019  0021B6  26D9               	addwf	fsr2l,f,c
  6020  0021B8  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  6021  0021BA  22DA               	addwfc	fsr2h,f,c
  6022  0021BC  50DF               	movf	indf2,w,c
  6023  0021BE  0B7F               	andlw	127
  6024  0021C0  5C2E               	subwf	??_scroll_right_to_left,w,c
  6025  0021C2  B0D8               	btfsc	status,0,c
  6026  0021C4  0012               	return	
  6027                           
  6028                           ;clcd.c: 674: {
  6029                           ;clcd.c: 675: clcd_display_string_details->length_decount_for_left_scroll++;
  6030  0021C6  0E01               	movlw	1
  6031  0021C8  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  6032  0021CA  EE20 F037          	lfsr	2,55
  6033  0021CE  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  6034  0021D0  26D9               	addwf	fsr2l,f,c
  6035  0021D2  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  6036  0021D4  22DA               	addwfc	fsr2h,f,c
  6037  0021D6  50DF               	movf	indf2,w,c
  6038  0021D8  0B7F               	andlw	127
  6039  0021DA  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  6040  0021DC  502E               	movf	??_scroll_right_to_left,w,c
  6041  0021DE  262F               	addwf	??_scroll_right_to_left+1,f,c
  6042  0021E0  50DF               	movf	indf2,w,c
  6043  0021E2  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  6044  0021E4  0B80               	andlw	-128
  6045  0021E6  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  6046  0021E8  6EDF               	movwf	indf2,c
  6047                           
  6048                           ;clcd.c: 676: if (clcd_display_string_details->length_decount_for_left_scroll == clcd_di
      +                          splay_string_details->display_char_count) {
  6049  0021EA  EE20 F033          	lfsr	2,51
  6050  0021EE  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  6051  0021F0  26D9               	addwf	fsr2l,f,c
  6052  0021F2  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  6053  0021F4  22DA               	addwfc	fsr2h,f,c
  6054  0021F6  EE10 F037          	lfsr	1,55
  6055  0021FA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  6056  0021FC  26E1               	addwf	fsr1l,f,c
  6057  0021FE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  6058  002200  22E2               	addwfc	fsr1h,f,c
  6059  002202  50E7               	movf	indf1,w,c
  6060  002204  0B7F               	andlw	127
  6061  002206  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  6062  002208  50DE               	movf	postinc2,w,c
  6063  00220A  182F               	xorwf	??_scroll_right_to_left+1,w,c
  6064  00220C  A4D8               	btfss	status,2,c
  6065  00220E  0012               	return	
  6066                           
  6067                           ;clcd.c: 677: clcd_display_string_details->length_decount_for_left_scroll = 0;
  6068  002210  EE20 F037          	lfsr	2,55
  6069  002214  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  6070  002216  26D9               	addwf	fsr2l,f,c
  6071  002218  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  6072  00221A  22DA               	addwfc	fsr2h,f,c
  6073  00221C  90DF               	bcf	indf2,0,c
  6074  00221E  92DF               	bcf	indf2,1,c
  6075  002220  94DF               	bcf	indf2,2,c
  6076  002222  96DF               	bcf	indf2,3,c
  6077  002224  98DF               	bcf	indf2,4,c
  6078  002226  9ADF               	bcf	indf2,5,c
  6079  002228  9CDF               	bcf	indf2,6,c
  6080                           
  6081                           ;clcd.c: 678: clcd_display_string_details->length_count_for_left_scroll = 0;
  6082  00222A  EE20 F036          	lfsr	2,54
  6083  00222E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  6084  002230  26D9               	addwf	fsr2l,f,c
  6085  002232  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  6086  002234  22DA               	addwfc	fsr2h,f,c
  6087  002236  90DF               	bcf	indf2,0,c
  6088  002238  92DF               	bcf	indf2,1,c
  6089  00223A  94DF               	bcf	indf2,2,c
  6090  00223C  96DF               	bcf	indf2,3,c
  6091  00223E  98DF               	bcf	indf2,4,c
  6092  002240  9ADF               	bcf	indf2,5,c
  6093  002242  9CDF               	bcf	indf2,6,c
  6094  002244  0012               	return	
  6095  002246                     __end_of_scroll_right_to_left:
  6096                           	opt stack 0
  6097                           tblptru	equ	0xFF8
  6098                           tblptrh	equ	0xFF7
  6099                           tblptrl	equ	0xFF6
  6100                           tablat	equ	0xFF5
  6101                           prodh	equ	0xFF4
  6102                           prodl	equ	0xFF3
  6103                           intcon	equ	0xFF2
  6104                           postinc0	equ	0xFEE
  6105                           wreg	equ	0xFE8
  6106                           indf1	equ	0xFE7
  6107                           postinc1	equ	0xFE6
  6108                           postdec1	equ	0xFE5
  6109                           fsr1h	equ	0xFE2
  6110                           fsr1l	equ	0xFE1
  6111                           indf2	equ	0xFDF
  6112                           postinc2	equ	0xFDE
  6113                           postdec2	equ	0xFDD
  6114                           fsr2h	equ	0xFDA
  6115                           fsr2l	equ	0xFD9
  6116                           status	equ	0xFD8
  6117                           
  6118 ;; *************** function _scroll_off *****************
  6119 ;; Defined at:
  6120 ;;		line 685 in file "clcd.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;  clcd_display    2   35[COMRAM] PTR struct .
  6123 ;;		 -> clcd_display_string_details(1140), 
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;  i               2   48[COMRAM] int 
  6126 ;;  j               2   46[COMRAM] int 
  6127 ;;  k               2   41[COMRAM] int 
  6128 ;;  str_len         1   45[COMRAM] unsigned char 
  6129 ;;  display_char    1   44[COMRAM] unsigned char 
  6130 ;;  line            1   43[COMRAM] unsigned char 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      void 
  6133 ;; Registers used:
  6134 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6140 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6141 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6142 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;Total ram usage:       15 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    6
  6147 ;; This function calls:
  6148 ;;		_strlen
  6149 ;; This function is called by:
  6150 ;;		_make_display
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text9
  6155  003594                     __ptext9:
  6156                           	opt stack 0
  6157  003594                     _scroll_off:
  6158                           	opt stack 23
  6159                           
  6160                           ;clcd.c: 686: char line = -1;
  6161                           
  6162                           ;incstack = 0
  6163  003594  682C               	setf	scroll_off@line,c
  6164                           
  6165                           ;clcd.c: 688: int i = 0;
  6166  003596  0E00               	movlw	0
  6167  003598  6E32               	movwf	scroll_off@i+1,c
  6168  00359A  0E00               	movlw	0
  6169  00359C  6E31               	movwf	scroll_off@i,c
  6170                           
  6171                           ;clcd.c: 689: int j = 0, k = 0;
  6172  00359E  0E00               	movlw	0
  6173  0035A0  6E30               	movwf	scroll_off@j+1,c
  6174  0035A2  0E00               	movlw	0
  6175  0035A4  6E2F               	movwf	scroll_off@j,c
  6176  0035A6  0E00               	movlw	0
  6177  0035A8  6E2B               	movwf	scroll_off@k+1,c
  6178  0035AA  0E00               	movlw	0
  6179  0035AC  6E2A               	movwf	scroll_off@k,c
  6180                           
  6181                           ;clcd.c: 690: char display_char_count = clcd_display_string_details->display_char_count;
  6182  0035AE  EE20 F033          	lfsr	2,51
  6183  0035B2  5024               	movf	scroll_off@clcd_display_string_details,w,c
  6184  0035B4  26D9               	addwf	fsr2l,f,c
  6185  0035B6  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  6186  0035B8  22DA               	addwfc	fsr2h,f,c
  6187  0035BA  50DF               	movf	indf2,w,c
  6188  0035BC  6E2D               	movwf	scroll_off@display_char_count,c
  6189                           
  6190                           ;clcd.c: 691: char str_len = strlen(clcd_display_string_details->string);
  6191  0035BE  0E02               	movlw	2
  6192  0035C0  2424               	addwf	scroll_off@clcd_display_string_details,w,c
  6193  0035C2  6E1E               	movwf	strlen@s,c
  6194  0035C4  0E00               	movlw	0
  6195  0035C6  2025               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  6196  0035C8  6E1F               	movwf	strlen@s+1,c
  6197  0035CA  ECC2  F022         	call	_strlen	;wreg free
  6198  0035CE  501E               	movf	?_strlen,w,c
  6199  0035D0  6E2E               	movwf	scroll_off@str_len,c
  6200                           
  6201                           ;clcd.c: 692: line = clcd_display_string_details->start_row;
  6202  0035D2  EE20 F02B          	lfsr	2,43
  6203  0035D6  5024               	movf	scroll_off@clcd_display_string_details,w,c
  6204  0035D8  26D9               	addwf	fsr2l,f,c
  6205  0035DA  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  6206  0035DC  22DA               	addwfc	fsr2h,f,c
  6207  0035DE  50DF               	movf	indf2,w,c
  6208  0035E0  0B7F               	andlw	127
  6209  0035E2  6E2C               	movwf	scroll_off@line,c
  6210                           
  6211                           ;clcd.c: 693: j = clcd_display_string_details->start_col;
  6212  0035E4  EE20 F02C          	lfsr	2,44
  6213  0035E8  5024               	movf	scroll_off@clcd_display_string_details,w,c
  6214  0035EA  26D9               	addwf	fsr2l,f,c
  6215  0035EC  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  6216  0035EE  22DA               	addwfc	fsr2h,f,c
  6217  0035F0  50DF               	movf	indf2,w,c
  6218  0035F2  0B7F               	andlw	127
  6219  0035F4  6E26               	movwf	??_scroll_off& (0+255),c
  6220  0035F6  5026               	movf	??_scroll_off,w,c
  6221  0035F8  6E2F               	movwf	scroll_off@j,c
  6222  0035FA  6A30               	clrf	scroll_off@j+1,c
  6223                           
  6224                           ;clcd.c: 694: for (i = 0; i < str_len;) {
  6225  0035FC  0E00               	movlw	0
  6226  0035FE  6E32               	movwf	scroll_off@i+1,c
  6227  003600  0E00               	movlw	0
  6228  003602  6E31               	movwf	scroll_off@i,c
  6229  003604  D05B               	goto	l7661
  6230  003606                     l7637:
  6231                           
  6232                           ;clcd.c: 696: lcd_display_array[line][j] = clcd_display_string_details->string[i++];
  6233  003606  0E02               	movlw	2
  6234  003608  2431               	addwf	scroll_off@i,w,c
  6235  00360A  6E26               	movwf	??_scroll_off& (0+255),c
  6236  00360C  0E00               	movlw	0
  6237  00360E  2032               	addwfc	scroll_off@i+1,w,c
  6238  003610  6E27               	movwf	(??_scroll_off+1)& (0+255),c
  6239  003612  5026               	movf	??_scroll_off,w,c
  6240  003614  2424               	addwf	scroll_off@clcd_display_string_details,w,c
  6241  003616  6ED9               	movwf	fsr2l,c
  6242  003618  5027               	movf	??_scroll_off+1,w,c
  6243  00361A  2025               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  6244  00361C  6EDA               	movwf	fsr2h,c
  6245  00361E  502C               	movf	scroll_off@line,w,c
  6246  003620  0D14               	mullw	20
  6247  003622  0E1E               	movlw	low _lcd_display_array
  6248  003624  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  6249  003626  0E01               	movlw	high _lcd_display_array
  6250  003628  6E29               	movwf	(??_scroll_off+3)& (0+255),c
  6251  00362A  50F3               	movf	prodl,w,c
  6252  00362C  2628               	addwf	??_scroll_off+2,f,c
  6253  00362E  50F4               	movf	prodh,w,c
  6254  003630  2229               	addwfc	??_scroll_off+3,f,c
  6255  003632  502F               	movf	scroll_off@j,w,c
  6256  003634  2428               	addwf	??_scroll_off+2,w,c
  6257  003636  6EE1               	movwf	fsr1l,c
  6258  003638  5030               	movf	scroll_off@j+1,w,c
  6259  00363A  2029               	addwfc	??_scroll_off+3,w,c
  6260  00363C  6EE2               	movwf	fsr1h,c
  6261  00363E  CFDF FFE7          	movff	indf2,indf1
  6262  003642  4A31               	infsnz	scroll_off@i,f,c
  6263  003644  2A32               	incf	scroll_off@i+1,f,c
  6264                           
  6265                           ;clcd.c: 697: if (i >= str_len)break;
  6266  003646  502E               	movf	scroll_off@str_len,w,c
  6267  003648  6E26               	movwf	??_scroll_off& (0+255),c
  6268  00364A  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  6269  00364C  5026               	movf	??_scroll_off,w,c
  6270  00364E  5C31               	subwf	scroll_off@i,w,c
  6271  003650  5032               	movf	scroll_off@i+1,w,c
  6272  003652  0A80               	xorlw	128
  6273  003654  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  6274  003656  5027               	movf	??_scroll_off+1,w,c
  6275  003658  0A80               	xorlw	128
  6276  00365A  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  6277  00365C  B0D8               	btfsc	status,0,c
  6278  00365E  D01C               	goto	l7653
  6279                           
  6280                           ;clcd.c: 698: if (i >= display_char_count)break;
  6281  003660  502D               	movf	scroll_off@display_char_count,w,c
  6282  003662  6E26               	movwf	??_scroll_off& (0+255),c
  6283  003664  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  6284  003666  5026               	movf	??_scroll_off,w,c
  6285  003668  5C31               	subwf	scroll_off@i,w,c
  6286  00366A  5032               	movf	scroll_off@i+1,w,c
  6287  00366C  0A80               	xorlw	128
  6288  00366E  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  6289  003670  5027               	movf	??_scroll_off+1,w,c
  6290  003672  0A80               	xorlw	128
  6291  003674  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  6292  003676  B0D8               	btfsc	status,0,c
  6293  003678  D00F               	goto	l7653
  6294  00367A  4A2F               	infsnz	scroll_off@j,f,c
  6295  00367C  2A30               	incf	scroll_off@j+1,f,c
  6296  00367E                     l7651:
  6297  00367E  504B               	movf	_clcd_config_data+2,w,c
  6298  003680  6E26               	movwf	??_scroll_off& (0+255),c
  6299  003682  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  6300  003684  5026               	movf	??_scroll_off,w,c
  6301  003686  5C2F               	subwf	scroll_off@j,w,c
  6302  003688  5030               	movf	scroll_off@j+1,w,c
  6303  00368A  0A80               	xorlw	128
  6304  00368C  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  6305  00368E  5027               	movf	??_scroll_off+1,w,c
  6306  003690  0A80               	xorlw	128
  6307  003692  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  6308  003694  A0D8               	btfss	status,0,c
  6309  003696  D7B7               	goto	l7637
  6310  003698                     l7653:
  6311                           
  6312                           ;clcd.c: 699: }
  6313                           ;clcd.c: 701: j = 0;
  6314  003698  0E00               	movlw	0
  6315  00369A  6E30               	movwf	scroll_off@j+1,c
  6316  00369C  0E00               	movlw	0
  6317  00369E  6E2F               	movwf	scroll_off@j,c
  6318                           
  6319                           ;clcd.c: 702: line++;
  6320  0036A0  2A2C               	incf	scroll_off@line,f,c
  6321                           
  6322                           ;clcd.c: 703: if (i >= display_char_count)break;
  6323  0036A2  502D               	movf	scroll_off@display_char_count,w,c
  6324  0036A4  6E26               	movwf	??_scroll_off& (0+255),c
  6325  0036A6  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  6326  0036A8  5026               	movf	??_scroll_off,w,c
  6327  0036AA  5C31               	subwf	scroll_off@i,w,c
  6328  0036AC  5032               	movf	scroll_off@i+1,w,c
  6329  0036AE  0A80               	xorlw	128
  6330  0036B0  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  6331  0036B2  5027               	movf	??_scroll_off+1,w,c
  6332  0036B4  0A80               	xorlw	128
  6333  0036B6  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  6334  0036B8  B0D8               	btfsc	status,0,c
  6335  0036BA  0012               	return	
  6336  0036BC                     l7661:
  6337  0036BC  502E               	movf	scroll_off@str_len,w,c
  6338  0036BE  6E26               	movwf	??_scroll_off& (0+255),c
  6339  0036C0  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  6340  0036C2  5026               	movf	??_scroll_off,w,c
  6341  0036C4  5C31               	subwf	scroll_off@i,w,c
  6342  0036C6  5032               	movf	scroll_off@i+1,w,c
  6343  0036C8  0A80               	xorlw	128
  6344  0036CA  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  6345  0036CC  5027               	movf	??_scroll_off+1,w,c
  6346  0036CE  0A80               	xorlw	128
  6347  0036D0  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  6348  0036D2  B0D8               	btfsc	status,0,c
  6349  0036D4  0012               	return	
  6350  0036D6  D7D3               	goto	l7651
  6351  0036D8                     __end_of_scroll_off:
  6352                           	opt stack 0
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           intcon	equ	0xFF2
  6360                           postinc0	equ	0xFEE
  6361                           wreg	equ	0xFE8
  6362                           indf1	equ	0xFE7
  6363                           postinc1	equ	0xFE6
  6364                           postdec1	equ	0xFE5
  6365                           fsr1h	equ	0xFE2
  6366                           fsr1l	equ	0xFE1
  6367                           indf2	equ	0xFDF
  6368                           postinc2	equ	0xFDE
  6369                           postdec2	equ	0xFDD
  6370                           fsr2h	equ	0xFDA
  6371                           fsr2l	equ	0xFD9
  6372                           status	equ	0xFD8
  6373                           
  6374 ;; *************** function _scroll_left_to_right *****************
  6375 ;; Defined at:
  6376 ;;		line 600 in file "clcd.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;  clcd_display    2   43[COMRAM] PTR struct .
  6379 ;;		 -> clcd_display_string_details(1140), 
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;  line            1   53[COMRAM] unsigned char 
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  1    wreg      void 
  6384 ;; Registers used:
  6385 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;Total ram usage:       11 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    6
  6398 ;; This function calls:
  6399 ;;		_memset
  6400 ;;		_strncpy
  6401 ;; This function is called by:
  6402 ;;		_make_display
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text10
  6407  002246                     __ptext10:
  6408                           	opt stack 0
  6409  002246                     _scroll_left_to_right:
  6410                           	opt stack 23
  6411                           
  6412                           ;clcd.c: 601: char line = -1;
  6413                           
  6414                           ;incstack = 0
  6415  002246  6836               	setf	scroll_left_to_right@line,c
  6416                           
  6417                           ;clcd.c: 602: if (clcd_display_string_details->start_row == 0)
  6418  002248  EE20 F02B          	lfsr	2,43
  6419  00224C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6420  00224E  26D9               	addwf	fsr2l,f,c
  6421  002250  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6422  002252  22DA               	addwfc	fsr2h,f,c
  6423  002254  50DF               	movf	indf2,w,c
  6424  002256  0B7F               	andlw	127
  6425  002258  0900               	iorlw	0
  6426  00225A  A4D8               	btfss	status,2,c
  6427  00225C  D002               	goto	l7547
  6428                           
  6429                           ;clcd.c: 603: line = 0;
  6430  00225E  0E00               	movlw	0
  6431  002260  D00C               	goto	L8
  6432  002262                     l7547:
  6433                           
  6434                           ;clcd.c: 604: else if (clcd_display_string_details->start_row == 1)
  6435  002262  EE20 F02B          	lfsr	2,43
  6436  002266  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6437  002268  26D9               	addwf	fsr2l,f,c
  6438  00226A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6439  00226C  22DA               	addwfc	fsr2h,f,c
  6440  00226E  50DF               	movf	indf2,w,c
  6441  002270  0B7F               	andlw	127
  6442  002272  06E8               	decf	wreg,f,c
  6443  002274  A4D8               	btfss	status,2,c
  6444  002276  D002               	goto	l7551
  6445                           
  6446                           ;clcd.c: 605: line = 1;
  6447  002278  0E01               	movlw	1
  6448  00227A                     L8:
  6449  00227A  6E36               	movwf	scroll_left_to_right@line,c
  6450  00227C                     l7551:
  6451                           
  6452                           ;clcd.c: 606: if (clcd_display_string_details->start_row == 2)
  6453  00227C  EE20 F02B          	lfsr	2,43
  6454  002280  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6455  002282  26D9               	addwf	fsr2l,f,c
  6456  002284  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6457  002286  22DA               	addwfc	fsr2h,f,c
  6458  002288  50DF               	movf	indf2,w,c
  6459  00228A  0B7F               	andlw	127
  6460  00228C  0A02               	xorlw	2
  6461  00228E  A4D8               	btfss	status,2,c
  6462  002290  D002               	goto	l7555
  6463                           
  6464                           ;clcd.c: 607: line = 2;
  6465  002292  0E02               	movlw	2
  6466  002294  6E36               	movwf	scroll_left_to_right@line,c
  6467  002296                     l7555:
  6468                           
  6469                           ;clcd.c: 608: if (clcd_display_string_details->start_row == 3)
  6470  002296  EE20 F02B          	lfsr	2,43
  6471  00229A  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6472  00229C  26D9               	addwf	fsr2l,f,c
  6473  00229E  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6474  0022A0  22DA               	addwfc	fsr2h,f,c
  6475  0022A2  50DF               	movf	indf2,w,c
  6476  0022A4  0B7F               	andlw	127
  6477  0022A6  0A03               	xorlw	3
  6478  0022A8  A4D8               	btfss	status,2,c
  6479  0022AA  D002               	goto	l7559
  6480                           
  6481                           ;clcd.c: 609: line = 3;
  6482  0022AC  0E03               	movlw	3
  6483  0022AE  6E36               	movwf	scroll_left_to_right@line,c
  6484  0022B0                     l7559:
  6485                           
  6486                           ;clcd.c: 611: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  6487                           ;clcd.c: 612: ' ', clcd_display_string_details->display_char_count);
  6488  0022B0  5036               	movf	scroll_left_to_right@line,w,c
  6489  0022B2  0D14               	mullw	20
  6490  0022B4  0E1E               	movlw	low _lcd_display_array
  6491  0022B6  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  6492  0022B8  0E01               	movlw	high _lcd_display_array
  6493  0022BA  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  6494  0022BC  50F3               	movf	prodl,w,c
  6495  0022BE  262E               	addwf	??_scroll_left_to_right,f,c
  6496  0022C0  50F4               	movf	prodh,w,c
  6497  0022C2  222F               	addwfc	??_scroll_left_to_right+1,f,c
  6498  0022C4  EE20 F02C          	lfsr	2,44
  6499  0022C8  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6500  0022CA  26D9               	addwf	fsr2l,f,c
  6501  0022CC  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6502  0022CE  22DA               	addwfc	fsr2h,f,c
  6503  0022D0  50DF               	movf	indf2,w,c
  6504  0022D2  0B7F               	andlw	127
  6505  0022D4  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  6506  0022D6  5030               	movf	??_scroll_left_to_right+2,w,c
  6507  0022D8  0D01               	mullw	1
  6508  0022DA  50F3               	movf	prodl,w,c
  6509  0022DC  242E               	addwf	??_scroll_left_to_right,w,c
  6510  0022DE  6E24               	movwf	memset@p1,c
  6511  0022E0  50F4               	movf	prodh,w,c
  6512  0022E2  202F               	addwfc	??_scroll_left_to_right+1,w,c
  6513  0022E4  6E25               	movwf	memset@p1+1,c
  6514  0022E6  0E00               	movlw	0
  6515  0022E8  6E27               	movwf	memset@c+1,c
  6516  0022EA  0E20               	movlw	32
  6517  0022EC  6E26               	movwf	memset@c,c
  6518  0022EE  EE20 F033          	lfsr	2,51
  6519  0022F2  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6520  0022F4  26D9               	addwf	fsr2l,f,c
  6521  0022F6  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6522  0022F8  22DA               	addwfc	fsr2h,f,c
  6523  0022FA  50DF               	movf	indf2,w,c
  6524  0022FC  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  6525  0022FE  5031               	movf	??_scroll_left_to_right+3,w,c
  6526  002300  6E28               	movwf	memset@n,c
  6527  002302  6A29               	clrf	memset@n+1,c
  6528  002304  ECD8  F025         	call	_memset	;wreg free
  6529                           
  6530                           ;clcd.c: 614: if (clcd_display_string_details->length_count_for_right_scroll > clcd_disp
      +                          lay_string_details->display_char_count) {
  6531  002308  EE20 F033          	lfsr	2,51
  6532  00230C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6533  00230E  26D9               	addwf	fsr2l,f,c
  6534  002310  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6535  002312  22DA               	addwfc	fsr2h,f,c
  6536  002314  50DF               	movf	indf2,w,c
  6537  002316  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  6538  002318  EE20 F034          	lfsr	2,52
  6539  00231C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6540  00231E  26D9               	addwf	fsr2l,f,c
  6541  002320  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6542  002322  22DA               	addwfc	fsr2h,f,c
  6543  002324  50DF               	movf	indf2,w,c
  6544  002326  0B7F               	andlw	127
  6545  002328  5C2E               	subwf	??_scroll_left_to_right,w,c
  6546  00232A  B0D8               	btfsc	status,0,c
  6547  00232C  D058               	goto	l7567
  6548                           
  6549                           ;clcd.c: 615: if (clcd_display_string_details->string[0] != (0)) {
  6550  00232E  EE20 F002          	lfsr	2,2
  6551  002332  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6552  002334  26D9               	addwf	fsr2l,f,c
  6553  002336  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6554  002338  22DA               	addwfc	fsr2h,f,c
  6555  00233A  50DF               	movf	indf2,w,c
  6556  00233C  B4D8               	btfsc	status,2,c
  6557  00233E  D0A6               	goto	l7571
  6558                           
  6559                           ;clcd.c: 616: strncpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  6560                           ;clcd.c: 617: clcd_display_string_details->string +
  6561                           ;clcd.c: 618: ((clcd_display_string_details->strlen - 1) - clcd_display_string_details->
      +                          length_decount_for_right_scroll),
  6562                           ;clcd.c: 619: clcd_display_string_details->display_char_count);
  6563  002340  5036               	movf	scroll_left_to_right@line,w,c
  6564  002342  0D14               	mullw	20
  6565  002344  0E1E               	movlw	low _lcd_display_array
  6566  002346  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  6567  002348  0E01               	movlw	high _lcd_display_array
  6568  00234A  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  6569  00234C  50F3               	movf	prodl,w,c
  6570  00234E  262E               	addwf	??_scroll_left_to_right,f,c
  6571  002350  50F4               	movf	prodh,w,c
  6572  002352  222F               	addwfc	??_scroll_left_to_right+1,f,c
  6573  002354  EE20 F02C          	lfsr	2,44
  6574  002358  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6575  00235A  26D9               	addwf	fsr2l,f,c
  6576  00235C  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6577  00235E  22DA               	addwfc	fsr2h,f,c
  6578  002360  50DF               	movf	indf2,w,c
  6579  002362  0B7F               	andlw	127
  6580  002364  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  6581  002366  5030               	movf	??_scroll_left_to_right+2,w,c
  6582  002368  0D01               	mullw	1
  6583  00236A  50F3               	movf	prodl,w,c
  6584  00236C  242E               	addwf	??_scroll_left_to_right,w,c
  6585  00236E  6E10               	movwf	strncpy@to,c
  6586  002370  50F4               	movf	prodh,w,c
  6587  002372  202F               	addwfc	??_scroll_left_to_right+1,w,c
  6588  002374  6E11               	movwf	strncpy@to+1,c
  6589  002376  EE20 F035          	lfsr	2,53
  6590  00237A  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6591  00237C  26D9               	addwf	fsr2l,f,c
  6592  00237E  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6593  002380  22DA               	addwfc	fsr2h,f,c
  6594  002382  50DF               	movf	indf2,w,c
  6595  002384  0B7F               	andlw	127
  6596  002386  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  6597  002388  6A32               	clrf	(??_scroll_left_to_right+4)& (0+255),c
  6598  00238A  1E31               	comf	??_scroll_left_to_right+3,f,c
  6599  00238C  1E32               	comf	??_scroll_left_to_right+4,f,c
  6600  00238E  4A31               	infsnz	??_scroll_left_to_right+3,f,c
  6601  002390  2A32               	incf	??_scroll_left_to_right+4,f,c
  6602  002392  EE20 F02A          	lfsr	2,42
  6603  002396  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6604  002398  26D9               	addwf	fsr2l,f,c
  6605  00239A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6606  00239C  22DA               	addwfc	fsr2h,f,c
  6607  00239E  50DF               	movf	indf2,w,c
  6608  0023A0  0B7F               	andlw	127
  6609  0023A2  6E33               	movwf	(??_scroll_left_to_right+5)& (0+255),c
  6610  0023A4  6A34               	clrf	(??_scroll_left_to_right+6)& (0+255),c
  6611  0023A6  5031               	movf	??_scroll_left_to_right+3,w,c
  6612  0023A8  2633               	addwf	??_scroll_left_to_right+5,f,c
  6613  0023AA  5032               	movf	??_scroll_left_to_right+4,w,c
  6614  0023AC  2234               	addwfc	??_scroll_left_to_right+6,f,c
  6615  0023AE  0E01               	movlw	1
  6616  0023B0  2633               	addwf	??_scroll_left_to_right+5,f,c
  6617  0023B2  0E00               	movlw	0
  6618  0023B4  2234               	addwfc	??_scroll_left_to_right+6,f,c
  6619  0023B6  5033               	movf	??_scroll_left_to_right+5,w,c
  6620  0023B8  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  6621  0023BA  6E12               	movwf	strncpy@from,c
  6622  0023BC  5034               	movf	??_scroll_left_to_right+6,w,c
  6623  0023BE  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  6624  0023C0  6E13               	movwf	strncpy@from+1,c
  6625  0023C2  EE20 F033          	lfsr	2,51
  6626  0023C6  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6627  0023C8  26D9               	addwf	fsr2l,f,c
  6628  0023CA  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6629  0023CC  22DA               	addwfc	fsr2h,f,c
  6630  0023CE  50DF               	movf	indf2,w,c
  6631  0023D0  6E35               	movwf	(??_scroll_left_to_right+7)& (0+255),c
  6632  0023D2  5035               	movf	??_scroll_left_to_right+7,w,c
  6633  0023D4  6E14               	movwf	strncpy@size,c
  6634  0023D6  6A15               	clrf	strncpy@size+1,c
  6635  0023D8  EC0F  F022         	call	_strncpy	;wreg free
  6636                           
  6637                           ;clcd.c: 620: }
  6638                           ;clcd.c: 621: } else {
  6639  0023DC  D057               	goto	l7571
  6640  0023DE                     l7567:
  6641                           
  6642                           ;clcd.c: 622: if (clcd_display_string_details->string[0] != (0)) {
  6643  0023DE  EE20 F002          	lfsr	2,2
  6644  0023E2  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6645  0023E4  26D9               	addwf	fsr2l,f,c
  6646  0023E6  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6647  0023E8  22DA               	addwfc	fsr2h,f,c
  6648  0023EA  50DF               	movf	indf2,w,c
  6649  0023EC  B4D8               	btfsc	status,2,c
  6650  0023EE  D04E               	goto	l7571
  6651                           
  6652                           ;clcd.c: 623: strncpy(lcd_display_array[line] + clcd_display_string_details->start_col +
  6653                           ;clcd.c: 624: clcd_display_string_details->length_count_for_right_scroll,
  6654                           ;clcd.c: 625: clcd_display_string_details->string,
  6655                           ;clcd.c: 626: clcd_display_string_details->display_char_count - clcd_display_string_deta
      +                          ils->length_count_for_right_scroll);
  6656  0023F0  5036               	movf	scroll_left_to_right@line,w,c
  6657  0023F2  0D14               	mullw	20
  6658  0023F4  0E1E               	movlw	low _lcd_display_array
  6659  0023F6  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  6660  0023F8  0E01               	movlw	high _lcd_display_array
  6661  0023FA  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  6662  0023FC  50F3               	movf	prodl,w,c
  6663  0023FE  262E               	addwf	??_scroll_left_to_right,f,c
  6664  002400  50F4               	movf	prodh,w,c
  6665  002402  222F               	addwfc	??_scroll_left_to_right+1,f,c
  6666  002404  EE20 F02C          	lfsr	2,44
  6667  002408  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6668  00240A  26D9               	addwf	fsr2l,f,c
  6669  00240C  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6670  00240E  22DA               	addwfc	fsr2h,f,c
  6671  002410  50DF               	movf	indf2,w,c
  6672  002412  0B7F               	andlw	127
  6673  002414  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  6674  002416  5030               	movf	??_scroll_left_to_right+2,w,c
  6675  002418  0D01               	mullw	1
  6676  00241A  50F3               	movf	prodl,w,c
  6677  00241C  262E               	addwf	??_scroll_left_to_right,f,c
  6678  00241E  50F4               	movf	prodh,w,c
  6679  002420  222F               	addwfc	??_scroll_left_to_right+1,f,c
  6680  002422  EE20 F034          	lfsr	2,52
  6681  002426  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6682  002428  26D9               	addwf	fsr2l,f,c
  6683  00242A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6684  00242C  22DA               	addwfc	fsr2h,f,c
  6685  00242E  50DF               	movf	indf2,w,c
  6686  002430  0B7F               	andlw	127
  6687  002432  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  6688  002434  5031               	movf	??_scroll_left_to_right+3,w,c
  6689  002436  0D01               	mullw	1
  6690  002438  50F3               	movf	prodl,w,c
  6691  00243A  242E               	addwf	??_scroll_left_to_right,w,c
  6692  00243C  6E10               	movwf	strncpy@to,c
  6693  00243E  50F4               	movf	prodh,w,c
  6694  002440  202F               	addwfc	??_scroll_left_to_right+1,w,c
  6695  002442  6E11               	movwf	strncpy@to+1,c
  6696  002444  0E02               	movlw	2
  6697  002446  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  6698  002448  6E12               	movwf	strncpy@from,c
  6699  00244A  0E00               	movlw	0
  6700  00244C  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  6701  00244E  6E13               	movwf	strncpy@from+1,c
  6702  002450  EE20 F034          	lfsr	2,52
  6703  002454  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6704  002456  26D9               	addwf	fsr2l,f,c
  6705  002458  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6706  00245A  22DA               	addwfc	fsr2h,f,c
  6707  00245C  50DF               	movf	indf2,w,c
  6708  00245E  0B7F               	andlw	127
  6709  002460  6E32               	movwf	(??_scroll_left_to_right+4)& (0+255),c
  6710  002462  6A33               	clrf	(??_scroll_left_to_right+5)& (0+255),c
  6711  002464  1E32               	comf	??_scroll_left_to_right+4,f,c
  6712  002466  1E33               	comf	??_scroll_left_to_right+5,f,c
  6713  002468  4A32               	infsnz	??_scroll_left_to_right+4,f,c
  6714  00246A  2A33               	incf	??_scroll_left_to_right+5,f,c
  6715  00246C  EE20 F033          	lfsr	2,51
  6716  002470  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6717  002472  26D9               	addwf	fsr2l,f,c
  6718  002474  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6719  002476  22DA               	addwfc	fsr2h,f,c
  6720  002478  50DF               	movf	indf2,w,c
  6721  00247A  6E34               	movwf	(??_scroll_left_to_right+6)& (0+255),c
  6722  00247C  5034               	movf	??_scroll_left_to_right+6,w,c
  6723  00247E  2432               	addwf	??_scroll_left_to_right+4,w,c
  6724  002480  6E14               	movwf	strncpy@size,c
  6725  002482  0E00               	movlw	0
  6726  002484  2033               	addwfc	??_scroll_left_to_right+5,w,c
  6727  002486  6E15               	movwf	strncpy@size+1,c
  6728  002488  EC0F  F022         	call	_strncpy	;wreg free
  6729  00248C                     l7571:
  6730                           
  6731                           ;clcd.c: 627: }
  6732                           ;clcd.c: 628: }
  6733                           ;clcd.c: 629: if (clcd_display_string_details->length_count_for_right_scroll <= clcd_dis
      +                          play_string_details->display_char_count) {
  6734  00248C  EE20 F034          	lfsr	2,52
  6735  002490  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6736  002492  26D9               	addwf	fsr2l,f,c
  6737  002494  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6738  002496  22DA               	addwfc	fsr2h,f,c
  6739  002498  50DF               	movf	indf2,w,c
  6740  00249A  0B7F               	andlw	127
  6741  00249C  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  6742  00249E  EE20 F033          	lfsr	2,51
  6743  0024A2  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6744  0024A4  26D9               	addwf	fsr2l,f,c
  6745  0024A6  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6746  0024A8  22DA               	addwfc	fsr2h,f,c
  6747  0024AA  502E               	movf	??_scroll_left_to_right,w,c
  6748  0024AC  5CDE               	subwf	postinc2,w,c
  6749  0024AE  A0D8               	btfss	status,0,c
  6750  0024B0  D013               	goto	l7575
  6751                           
  6752                           ;clcd.c: 630: clcd_display_string_details->length_count_for_right_scroll++;
  6753  0024B2  0E01               	movlw	1
  6754  0024B4  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  6755  0024B6  EE20 F034          	lfsr	2,52
  6756  0024BA  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6757  0024BC  26D9               	addwf	fsr2l,f,c
  6758  0024BE  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6759  0024C0  22DA               	addwfc	fsr2h,f,c
  6760  0024C2  50DF               	movf	indf2,w,c
  6761  0024C4  0B7F               	andlw	127
  6762  0024C6  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  6763  0024C8  502E               	movf	??_scroll_left_to_right,w,c
  6764  0024CA  262F               	addwf	??_scroll_left_to_right+1,f,c
  6765  0024CC  50DF               	movf	indf2,w,c
  6766  0024CE  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  6767  0024D0  0B80               	andlw	-128
  6768  0024D2  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  6769  0024D4  6EDF               	movwf	indf2,c
  6770                           
  6771                           ;clcd.c: 631: } else if (clcd_display_string_details->length_decount_for_right_scroll < 
      +                          clcd_display_string_details->strlen) {
  6772  0024D6  0012               	return	
  6773  0024D8                     l7575:
  6774  0024D8  EE20 F035          	lfsr	2,53
  6775  0024DC  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6776  0024DE  26D9               	addwf	fsr2l,f,c
  6777  0024E0  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6778  0024E2  22DA               	addwfc	fsr2h,f,c
  6779  0024E4  50DF               	movf	indf2,w,c
  6780  0024E6  0B7F               	andlw	127
  6781  0024E8  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  6782  0024EA  EE20 F02A          	lfsr	2,42
  6783  0024EE  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6784  0024F0  26D9               	addwf	fsr2l,f,c
  6785  0024F2  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6786  0024F4  22DA               	addwfc	fsr2h,f,c
  6787  0024F6  50DF               	movf	indf2,w,c
  6788  0024F8  0B7F               	andlw	127
  6789  0024FA  5C2E               	subwf	??_scroll_left_to_right,w,c
  6790  0024FC  B0D8               	btfsc	status,0,c
  6791  0024FE  0012               	return	
  6792                           
  6793                           ;clcd.c: 632: clcd_display_string_details->length_decount_for_right_scroll++;
  6794  002500  0E01               	movlw	1
  6795  002502  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  6796  002504  EE20 F035          	lfsr	2,53
  6797  002508  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6798  00250A  26D9               	addwf	fsr2l,f,c
  6799  00250C  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6800  00250E  22DA               	addwfc	fsr2h,f,c
  6801  002510  50DF               	movf	indf2,w,c
  6802  002512  0B7F               	andlw	127
  6803  002514  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  6804  002516  502E               	movf	??_scroll_left_to_right,w,c
  6805  002518  262F               	addwf	??_scroll_left_to_right+1,f,c
  6806  00251A  50DF               	movf	indf2,w,c
  6807  00251C  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  6808  00251E  0B80               	andlw	-128
  6809  002520  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  6810  002522  6EDF               	movwf	indf2,c
  6811                           
  6812                           ;clcd.c: 633: if (clcd_display_string_details->length_decount_for_right_scroll >= clcd_d
      +                          isplay_string_details->strlen) {
  6813  002524  EE20 F02A          	lfsr	2,42
  6814  002528  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6815  00252A  26D9               	addwf	fsr2l,f,c
  6816  00252C  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6817  00252E  22DA               	addwfc	fsr2h,f,c
  6818  002530  50DF               	movf	indf2,w,c
  6819  002532  0B7F               	andlw	127
  6820  002534  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  6821  002536  EE20 F035          	lfsr	2,53
  6822  00253A  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6823  00253C  26D9               	addwf	fsr2l,f,c
  6824  00253E  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6825  002540  22DA               	addwfc	fsr2h,f,c
  6826  002542  50DF               	movf	indf2,w,c
  6827  002544  0B7F               	andlw	127
  6828  002546  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  6829  002548  502E               	movf	??_scroll_left_to_right,w,c
  6830  00254A  5C2F               	subwf	??_scroll_left_to_right+1,w,c
  6831  00254C  A0D8               	btfss	status,0,c
  6832  00254E  0012               	return	
  6833                           
  6834                           ;clcd.c: 634: clcd_display_string_details->length_count_for_right_scroll = 0;
  6835  002550  EE20 F034          	lfsr	2,52
  6836  002554  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6837  002556  26D9               	addwf	fsr2l,f,c
  6838  002558  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6839  00255A  22DA               	addwfc	fsr2h,f,c
  6840  00255C  90DF               	bcf	indf2,0,c
  6841  00255E  92DF               	bcf	indf2,1,c
  6842  002560  94DF               	bcf	indf2,2,c
  6843  002562  96DF               	bcf	indf2,3,c
  6844  002564  98DF               	bcf	indf2,4,c
  6845  002566  9ADF               	bcf	indf2,5,c
  6846  002568  9CDF               	bcf	indf2,6,c
  6847                           
  6848                           ;clcd.c: 635: clcd_display_string_details->length_decount_for_right_scroll = 0;
  6849  00256A  EE20 F035          	lfsr	2,53
  6850  00256E  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  6851  002570  26D9               	addwf	fsr2l,f,c
  6852  002572  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  6853  002574  22DA               	addwfc	fsr2h,f,c
  6854  002576  90DF               	bcf	indf2,0,c
  6855  002578  92DF               	bcf	indf2,1,c
  6856  00257A  94DF               	bcf	indf2,2,c
  6857  00257C  96DF               	bcf	indf2,3,c
  6858  00257E  98DF               	bcf	indf2,4,c
  6859  002580  9ADF               	bcf	indf2,5,c
  6860  002582  9CDF               	bcf	indf2,6,c
  6861  002584  0012               	return	
  6862  002586                     __end_of_scroll_left_to_right:
  6863                           	opt stack 0
  6864                           tblptru	equ	0xFF8
  6865                           tblptrh	equ	0xFF7
  6866                           tblptrl	equ	0xFF6
  6867                           tablat	equ	0xFF5
  6868                           prodh	equ	0xFF4
  6869                           prodl	equ	0xFF3
  6870                           intcon	equ	0xFF2
  6871                           postinc0	equ	0xFEE
  6872                           wreg	equ	0xFE8
  6873                           indf1	equ	0xFE7
  6874                           postinc1	equ	0xFE6
  6875                           postdec1	equ	0xFE5
  6876                           fsr1h	equ	0xFE2
  6877                           fsr1l	equ	0xFE1
  6878                           indf2	equ	0xFDF
  6879                           postinc2	equ	0xFDE
  6880                           postdec2	equ	0xFDD
  6881                           fsr2h	equ	0xFDA
  6882                           fsr2l	equ	0xFD9
  6883                           status	equ	0xFD8
  6884                           
  6885 ;; *************** function _strncpy *****************
  6886 ;; Defined at:
  6887 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncpy.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  to              2   15[COMRAM] PTR unsigned char 
  6890 ;;		 -> lcd_display_array(80), 
  6891 ;;  from            2   17[COMRAM] PTR const unsigned char 
  6892 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1140), 
  6893 ;;  size            2   19[COMRAM] unsigned int 
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;  cp              2   21[COMRAM] PTR unsigned char 
  6896 ;;		 -> lcd_display_array(80), 
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  2   15[COMRAM] PTR unsigned char 
  6899 ;; Registers used:
  6900 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6906 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6909 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6910 ;;Total ram usage:        8 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; Hardware stack levels required when called:    5
  6913 ;; This function calls:
  6914 ;;		Nothing
  6915 ;; This function is called by:
  6916 ;;		_scroll_left_to_right
  6917 ;;		_scroll_right_to_left
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           	psect	text11
  6922  00441E                     __ptext11:
  6923                           	opt stack 0
  6924  00441E                     _strncpy:
  6925                           	opt stack 23
  6926                           
  6927                           ;incstack = 0
  6928  00441E  C010  F016         	movff	strncpy@to,strncpy@cp
  6929  004422  C011  F017         	movff	strncpy@to+1,strncpy@cp+1
  6930  004426  D014               	goto	l7463
  6931  004428                     l7457:
  6932  004428  0614               	decf	strncpy@size,f,c
  6933  00442A  A0D8               	btfss	status,0,c
  6934  00442C  0615               	decf	strncpy@size+1,f,c
  6935  00442E  C012  FFD9         	movff	strncpy@from,fsr2l
  6936  004432  C013  FFDA         	movff	strncpy@from+1,fsr2h
  6937  004436  4A12               	infsnz	strncpy@from,f,c
  6938  004438  2A13               	incf	strncpy@from+1,f,c
  6939  00443A  C016  FFE1         	movff	strncpy@cp,fsr1l
  6940  00443E  C017  FFE2         	movff	strncpy@cp+1,fsr1h
  6941  004442  4A16               	infsnz	strncpy@cp,f,c
  6942  004444  2A17               	incf	strncpy@cp+1,f,c
  6943  004446  CFDF FFE7          	movff	indf2,indf1
  6944  00444A  50E7               	movf	indf1,w,c
  6945  00444C  B4D8               	btfsc	status,2,c
  6946  00444E  D00D               	goto	l7469
  6947  004450                     l7463:
  6948  004450  5014               	movf	strncpy@size,w,c
  6949  004452  1015               	iorwf	strncpy@size+1,w,c
  6950  004454  B4D8               	btfsc	status,2,c
  6951  004456  D009               	goto	l7469
  6952  004458  D7E7               	goto	l7457
  6953  00445A                     l7465:
  6954  00445A  C016  FFD9         	movff	strncpy@cp,fsr2l
  6955  00445E  C017  FFDA         	movff	strncpy@cp+1,fsr2h
  6956  004462  0E00               	movlw	0
  6957  004464  6EDF               	movwf	indf2,c
  6958  004466  4A16               	infsnz	strncpy@cp,f,c
  6959  004468  2A17               	incf	strncpy@cp+1,f,c
  6960  00446A                     l7469:
  6961  00446A  0614               	decf	strncpy@size,f,c
  6962  00446C  A0D8               	btfss	status,0,c
  6963  00446E  0615               	decf	strncpy@size+1,f,c
  6964  004470  2814               	incf	strncpy@size,w,c
  6965  004472  E1F3               	bnz	l7465
  6966  004474  2815               	incf	strncpy@size+1,w,c
  6967  004476  B4D8               	btfsc	status,2,c
  6968  004478  0012               	return	
  6969  00447A  D7EF               	goto	l7465
  6970  00447C                     __end_of_strncpy:
  6971                           	opt stack 0
  6972                           tblptru	equ	0xFF8
  6973                           tblptrh	equ	0xFF7
  6974                           tblptrl	equ	0xFF6
  6975                           tablat	equ	0xFF5
  6976                           prodh	equ	0xFF4
  6977                           prodl	equ	0xFF3
  6978                           intcon	equ	0xFF2
  6979                           postinc0	equ	0xFEE
  6980                           wreg	equ	0xFE8
  6981                           indf1	equ	0xFE7
  6982                           postinc1	equ	0xFE6
  6983                           postdec1	equ	0xFE5
  6984                           fsr1h	equ	0xFE2
  6985                           fsr1l	equ	0xFE1
  6986                           indf2	equ	0xFDF
  6987                           postinc2	equ	0xFDE
  6988                           postdec2	equ	0xFDD
  6989                           fsr2h	equ	0xFDA
  6990                           fsr2l	equ	0xFD9
  6991                           status	equ	0xFD8
  6992                           
  6993 ;; *************** function _display_text *****************
  6994 ;; Defined at:
  6995 ;;		line 787 in file "clcd.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;		None
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;		None
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  1    wreg      void 
  7002 ;; Registers used:
  7003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;Total ram usage:        0 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    9
  7016 ;; This function calls:
  7017 ;;		_char_enter_mode_left_to_right
  7018 ;;		_set_cursor
  7019 ;;		_write_str
  7020 ;; This function is called by:
  7021 ;;		_make_display
  7022 ;;		_main
  7023 ;;		_display_screen
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text12
  7028  004162                     __ptext12:
  7029                           	opt stack 0
  7030  004162                     _display_text:
  7031                           	opt stack 20
  7032                           
  7033                           ;clcd.c: 788: if (print_data_ready == 1) {
  7034                           
  7035                           ;incstack = 0
  7036  004162  0101               	movlb	1	; () banked
  7037  004164  050E               	decf	_print_data_ready& (0+255),w,b
  7038  004166  0101               	movlb	1	; () banked
  7039  004168  110F               	iorwf	(_print_data_ready+1)& (0+255),w,b
  7040  00416A  A4D8               	btfss	status,2,c
  7041  00416C  D034               	goto	l7679
  7042                           
  7043                           ; BSR set to: 1
  7044                           ;clcd.c: 790: char_enter_mode_left_to_right();
  7045  00416E  EC52  F027         	call	_char_enter_mode_left_to_right	;wreg free
  7046                           
  7047                           ;clcd.c: 791: set_cursor(0x80, 0);
  7048  004172  0E00               	movlw	0
  7049  004174  6E18               	movwf	set_cursor@col_number,c
  7050  004176  0E80               	movlw	128
  7051  004178  ECAC  F026         	call	_set_cursor
  7052                           
  7053                           ;clcd.c: 792: write_str(lcd_display_array[0]);
  7054  00417C  0E1E               	movlw	low _lcd_display_array
  7055  00417E  6E18               	movwf	write_str@str,c
  7056  004180  0E01               	movlw	high _lcd_display_array
  7057  004182  6E19               	movwf	write_str@str+1,c
  7058  004184  ECD9  F024         	call	_write_str	;wreg free
  7059                           
  7060                           ;clcd.c: 793: set_cursor(0xC0, 0);
  7061  004188  0E00               	movlw	0
  7062  00418A  6E18               	movwf	set_cursor@col_number,c
  7063  00418C  0EC0               	movlw	192
  7064  00418E  ECAC  F026         	call	_set_cursor
  7065                           
  7066                           ;clcd.c: 794: write_str(lcd_display_array[1]);
  7067  004192  0E32               	movlw	low (_lcd_display_array+20)
  7068  004194  6E18               	movwf	write_str@str,c
  7069  004196  0E01               	movlw	high (_lcd_display_array+20)
  7070  004198  6E19               	movwf	write_str@str+1,c
  7071  00419A  ECD9  F024         	call	_write_str	;wreg free
  7072                           
  7073                           ;clcd.c: 795: set_cursor(0x94, 0);
  7074  00419E  0E00               	movlw	0
  7075  0041A0  6E18               	movwf	set_cursor@col_number,c
  7076  0041A2  0E94               	movlw	148
  7077  0041A4  ECAC  F026         	call	_set_cursor
  7078                           
  7079                           ;clcd.c: 796: write_str(lcd_display_array[2]);
  7080  0041A8  0E46               	movlw	low (_lcd_display_array+40)
  7081  0041AA  6E18               	movwf	write_str@str,c
  7082  0041AC  0E01               	movlw	high (_lcd_display_array+40)
  7083  0041AE  6E19               	movwf	write_str@str+1,c
  7084  0041B0  ECD9  F024         	call	_write_str	;wreg free
  7085                           
  7086                           ;clcd.c: 797: set_cursor(0xD4, 0);
  7087  0041B4  0E00               	movlw	0
  7088  0041B6  6E18               	movwf	set_cursor@col_number,c
  7089  0041B8  0ED4               	movlw	212
  7090  0041BA  ECAC  F026         	call	_set_cursor
  7091                           
  7092                           ;clcd.c: 798: write_str(lcd_display_array[3]);
  7093  0041BE  0E5A               	movlw	low (_lcd_display_array+60)
  7094  0041C0  6E18               	movwf	write_str@str,c
  7095  0041C2  0E01               	movlw	high (_lcd_display_array+60)
  7096  0041C4  6E19               	movwf	write_str@str+1,c
  7097  0041C6  ECD9  F024         	call	_write_str	;wreg free
  7098                           
  7099                           ;clcd.c: 799: print_data_ready = 0;
  7100  0041CA  0E00               	movlw	0
  7101  0041CC  0101               	movlb	1	; () banked
  7102  0041CE  6F0F               	movwf	(_print_data_ready+1)& (0+255),b
  7103  0041D0  0E00               	movlw	0
  7104  0041D2  6F0E               	movwf	_print_data_ready& (0+255),b
  7105                           
  7106                           ;clcd.c: 800: } else {
  7107  0041D4  0012               	return	
  7108  0041D6                     l7679:
  7109                           
  7110                           ; BSR set to: 1
  7111                           ;clcd.c: 801: print_data_ready = 0;
  7112  0041D6  0E00               	movlw	0
  7113  0041D8  0101               	movlb	1	; () banked
  7114  0041DA  6F0F               	movwf	(_print_data_ready+1)& (0+255),b
  7115  0041DC  0E00               	movlw	0
  7116  0041DE  6F0E               	movwf	_print_data_ready& (0+255),b
  7117  0041E0  0012               	return	
  7118  0041E2                     __end_of_display_text:
  7119                           	opt stack 0
  7120                           tblptru	equ	0xFF8
  7121                           tblptrh	equ	0xFF7
  7122                           tblptrl	equ	0xFF6
  7123                           tablat	equ	0xFF5
  7124                           prodh	equ	0xFF4
  7125                           prodl	equ	0xFF3
  7126                           intcon	equ	0xFF2
  7127                           postinc0	equ	0xFEE
  7128                           wreg	equ	0xFE8
  7129                           indf1	equ	0xFE7
  7130                           postinc1	equ	0xFE6
  7131                           postdec1	equ	0xFE5
  7132                           fsr1h	equ	0xFE2
  7133                           fsr1l	equ	0xFE1
  7134                           indf2	equ	0xFDF
  7135                           postinc2	equ	0xFDE
  7136                           postdec2	equ	0xFDD
  7137                           fsr2h	equ	0xFDA
  7138                           fsr2l	equ	0xFD9
  7139                           status	equ	0xFD8
  7140                           
  7141 ;; *************** function _set_cursor *****************
  7142 ;; Defined at:
  7143 ;;		line 401 in file "clcd.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  row_number      1    wreg     unsigned char 
  7146 ;;  col_number      1   23[COMRAM] unsigned char 
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;  row_number      1   24[COMRAM] unsigned char 
  7149 ;; Return value:  Size  Location     Type
  7150 ;;                  1    wreg      void 
  7151 ;; Registers used:
  7152 ;;		wreg, status,2, status,0, cstack
  7153 ;; Tracked objects:
  7154 ;;		On entry : 0/0
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7158 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;Total ram usage:        2 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; Hardware stack levels required when called:    8
  7165 ;; This function calls:
  7166 ;;		_is_busy
  7167 ;;		_write_lcd_cmd
  7168 ;; This function is called by:
  7169 ;;		_display_text
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           	psect	text13
  7174  004D58                     __ptext13:
  7175                           	opt stack 0
  7176  004D58                     _set_cursor:
  7177                           	opt stack 20
  7178                           
  7179                           ; BSR set to: 1
  7180                           ;incstack = 0
  7181                           ;set_cursor@row_number stored from wreg
  7182  004D58  6E19               	movwf	set_cursor@row_number,c
  7183                           
  7184                           ;clcd.c: 402: if (col_number > 20) {
  7185  004D5A  0E14               	movlw	20
  7186  004D5C  6418               	cpfsgt	set_cursor@col_number,c
  7187  004D5E  D002               	goto	l7449
  7188                           
  7189                           ;clcd.c: 403: col_number = 0;
  7190  004D60  0E00               	movlw	0
  7191  004D62  6E18               	movwf	set_cursor@col_number,c
  7192  004D64                     l7449:
  7193                           
  7194                           ;clcd.c: 404: }
  7195                           ;clcd.c: 405: write_lcd_cmd(col_number + row_number);
  7196  004D64  5018               	movf	set_cursor@col_number,w,c
  7197  004D66  2419               	addwf	set_cursor@row_number,w,c
  7198  004D68  EC5A  F024         	call	_write_lcd_cmd
  7199                           
  7200                           ;clcd.c: 407: is_busy();
  7201  004D6C  ECC2  F025         	call	_is_busy	;wreg free
  7202  004D70  0012               	return		;funcret
  7203  004D72                     __end_of_set_cursor:
  7204                           	opt stack 0
  7205                           tblptru	equ	0xFF8
  7206                           tblptrh	equ	0xFF7
  7207                           tblptrl	equ	0xFF6
  7208                           tablat	equ	0xFF5
  7209                           prodh	equ	0xFF4
  7210                           prodl	equ	0xFF3
  7211                           intcon	equ	0xFF2
  7212                           postinc0	equ	0xFEE
  7213                           wreg	equ	0xFE8
  7214                           indf1	equ	0xFE7
  7215                           postinc1	equ	0xFE6
  7216                           postdec1	equ	0xFE5
  7217                           fsr1h	equ	0xFE2
  7218                           fsr1l	equ	0xFE1
  7219                           indf2	equ	0xFDF
  7220                           postinc2	equ	0xFDE
  7221                           postdec2	equ	0xFDD
  7222                           fsr2h	equ	0xFDA
  7223                           fsr2l	equ	0xFD9
  7224                           status	equ	0xFD8
  7225                           
  7226 ;; *************** function _is_busy *****************
  7227 ;; Defined at:
  7228 ;;		line 459 in file "clcd.c"
  7229 ;; Parameters:    Size  Location     Type
  7230 ;;		None
  7231 ;; Auto vars:     Size  Location     Type
  7232 ;;		None
  7233 ;; Return value:  Size  Location     Type
  7234 ;;                  1    wreg      void 
  7235 ;; Registers used:
  7236 ;;		wreg, status,2, status,0, cstack
  7237 ;; Tracked objects:
  7238 ;;		On entry : 0/0
  7239 ;;		On exit  : 0/0
  7240 ;;		Unchanged: 0/0
  7241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;Total ram usage:        0 bytes
  7247 ;; Hardware stack levels used:    1
  7248 ;; Hardware stack levels required when called:    7
  7249 ;; This function calls:
  7250 ;;		__delay_10uS
  7251 ;;		_delay
  7252 ;; This function is called by:
  7253 ;;		_set_cursor
  7254 ;;		_put_string
  7255 ;;		_put_char
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259                           	psect	text14
  7260  004B84                     __ptext14:
  7261                           	opt stack 0
  7262  004B84                     _is_busy:
  7263                           	opt stack 20
  7264                           
  7265                           ;incstack = 0
  7266                           ;clcd.c: 462: do { TRISCbits.TRISC5 = 1; } while(0);
  7267  004B84  8A94               	bsf	3988,5,c	;volatile
  7268                           
  7269                           ;clcd.c: 466: PORTAbits.RA2 = 0;
  7270  004B86  9480               	bcf	3968,2,c	;volatile
  7271                           
  7272                           ;clcd.c: 467: PORTAbits.RA1 = 1;
  7273  004B88  8280               	bsf	3968,1,c	;volatile
  7274                           
  7275                           ;clcd.c: 468: _delay_10uS(1);
  7276  004B8A  0E00               	movlw	0
  7277  004B8C  6E11               	movwf	__delay_10uS@delay+1,c
  7278  004B8E  0E01               	movlw	1
  7279  004B90  6E10               	movwf	__delay_10uS@delay,c
  7280  004B92  ECD4  F023         	call	__delay_10uS	;wreg free
  7281  004B96                     l7275:
  7282                           
  7283                           ;clcd.c: 470: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7284  004B96  8080               	bsf	3968,0,c	;volatile
  7285  004B98  0E00               	movlw	0
  7286  004B9A  6E11               	movwf	delay@delay+1,c
  7287  004B9C  0E01               	movlw	1
  7288  004B9E  6E10               	movwf	delay@delay,c
  7289  004BA0  EC65  F023         	call	_delay	;wreg free
  7290  004BA4  9080               	bcf	3968,0,c	;volatile
  7291                           
  7292                           ;clcd.c: 471: } while (PORTCbits.RC5 == 1);
  7293  004BA6  BA82               	btfsc	3970,5,c	;volatile
  7294  004BA8  D7F6               	goto	l7275
  7295                           
  7296                           ;clcd.c: 474: PORTAbits.RA1 = 0;
  7297  004BAA  9280               	bcf	3968,1,c	;volatile
  7298                           
  7299                           ;clcd.c: 477: do { TRISCbits.TRISC5 = 0; } while(0);
  7300  004BAC  9A94               	bcf	3988,5,c	;volatile
  7301  004BAE  0012               	return	
  7302  004BB0                     __end_of_is_busy:
  7303                           	opt stack 0
  7304                           tblptru	equ	0xFF8
  7305                           tblptrh	equ	0xFF7
  7306                           tblptrl	equ	0xFF6
  7307                           tablat	equ	0xFF5
  7308                           prodh	equ	0xFF4
  7309                           prodl	equ	0xFF3
  7310                           intcon	equ	0xFF2
  7311                           postinc0	equ	0xFEE
  7312                           wreg	equ	0xFE8
  7313                           indf1	equ	0xFE7
  7314                           postinc1	equ	0xFE6
  7315                           postdec1	equ	0xFE5
  7316                           fsr1h	equ	0xFE2
  7317                           fsr1l	equ	0xFE1
  7318                           indf2	equ	0xFDF
  7319                           postinc2	equ	0xFDE
  7320                           postdec2	equ	0xFDD
  7321                           fsr2h	equ	0xFDA
  7322                           fsr2l	equ	0xFD9
  7323                           status	equ	0xFD8
  7324                           
  7325 ;; *************** function __delay_10uS *****************
  7326 ;; Defined at:
  7327 ;;		line 17 in file "delay.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;  delay           2   15[COMRAM] int 
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;  val             2   18[COMRAM] int 
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1    wreg      void 
  7334 ;; Registers used:
  7335 ;;		wreg, status,2, status,0, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7341 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;Total ram usage:        5 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    6
  7348 ;; This function calls:
  7349 ;;		_TMR5_HasOverflowOccured
  7350 ;;		_TMR5_Reload
  7351 ;;		_TMR5_StartTimer
  7352 ;;		_TMR5_StopTimer
  7353 ;; This function is called by:
  7354 ;;		_is_busy
  7355 ;; This function uses a non-reentrant model
  7356 ;;
  7357                           
  7358                           	psect	text15
  7359  0047A8                     __ptext15:
  7360                           	opt stack 0
  7361  0047A8                     __delay_10uS:
  7362                           	opt stack 20
  7363                           
  7364                           ;delay.c: 18: int val = 0;
  7365                           
  7366                           ;incstack = 0
  7367  0047A8  0E00               	movlw	0
  7368  0047AA  6E14               	movwf	__delay_10uS@val+1,c
  7369  0047AC  0E00               	movlw	0
  7370  0047AE  6E13               	movwf	__delay_10uS@val,c
  7371                           
  7372                           ;delay.c: 19: for (val = 0; val < delay; val++) {
  7373  0047B0  0E00               	movlw	0
  7374  0047B2  6E14               	movwf	__delay_10uS@val+1,c
  7375  0047B4  0E00               	movlw	0
  7376  0047B6  6E13               	movwf	__delay_10uS@val,c
  7377  0047B8  D00E               	goto	l7199
  7378  0047BA                     l7187:
  7379                           
  7380                           ;delay.c: 20: TMR5_Reload();
  7381  0047BA  ECEF  F026         	call	_TMR5_Reload	;wreg free
  7382                           
  7383                           ;delay.c: 21: TMR5_StartTimer();
  7384  0047BE  EC59  F027         	call	_TMR5_StartTimer	;wreg free
  7385  0047C2                     l7191:
  7386  0047C2  EC20  F027         	call	_TMR5_HasOverflowOccured	;wreg free
  7387  0047C6  0900               	iorlw	0
  7388  0047C8  B4D8               	btfsc	status,2,c
  7389  0047CA  D7FB               	goto	l7191
  7390                           
  7391                           ;delay.c: 23: TMR5_StopTimer();
  7392  0047CC  EC56  F027         	call	_TMR5_StopTimer	;wreg free
  7393                           
  7394                           ;delay.c: 24: PIR5bits.TMR5IF = 0;
  7395  0047D0  927E               	bcf	3966,1,c	;volatile
  7396  0047D2  4A13               	infsnz	__delay_10uS@val,f,c
  7397  0047D4  2A14               	incf	__delay_10uS@val+1,f,c
  7398  0047D6                     l7199:
  7399  0047D6  5010               	movf	__delay_10uS@delay,w,c
  7400  0047D8  5C13               	subwf	__delay_10uS@val,w,c
  7401  0047DA  5014               	movf	__delay_10uS@val+1,w,c
  7402  0047DC  0A80               	xorlw	128
  7403  0047DE  6E12               	movwf	??__delay_10uS& (0+255),c
  7404  0047E0  5011               	movf	__delay_10uS@delay+1,w,c
  7405  0047E2  0A80               	xorlw	128
  7406  0047E4  5812               	subwfb	??__delay_10uS& (0+255),w,c
  7407  0047E6  B0D8               	btfsc	status,0,c
  7408  0047E8  0012               	return	
  7409  0047EA  D7E7               	goto	l7187
  7410  0047EC                     __end_of__delay_10uS:
  7411                           	opt stack 0
  7412                           tblptru	equ	0xFF8
  7413                           tblptrh	equ	0xFF7
  7414                           tblptrl	equ	0xFF6
  7415                           tablat	equ	0xFF5
  7416                           prodh	equ	0xFF4
  7417                           prodl	equ	0xFF3
  7418                           intcon	equ	0xFF2
  7419                           postinc0	equ	0xFEE
  7420                           wreg	equ	0xFE8
  7421                           indf1	equ	0xFE7
  7422                           postinc1	equ	0xFE6
  7423                           postdec1	equ	0xFE5
  7424                           fsr1h	equ	0xFE2
  7425                           fsr1l	equ	0xFE1
  7426                           indf2	equ	0xFDF
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function _TMR5_StopTimer *****************
  7434 ;; Defined at:
  7435 ;;		line 94 in file "mcc_generated_files/tmr5.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;		None
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;		None
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  1    wreg      void 
  7442 ;; Registers used:
  7443 ;;		None
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;Total ram usage:        0 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    5
  7456 ;; This function calls:
  7457 ;;		Nothing
  7458 ;; This function is called by:
  7459 ;;		__delay_10uS
  7460 ;;		_main
  7461 ;; This function uses a non-reentrant model
  7462 ;;
  7463                           
  7464                           	psect	text16
  7465  004EAC                     __ptext16:
  7466                           	opt stack 0
  7467  004EAC                     _TMR5_StopTimer:
  7468                           	opt stack 20
  7469                           
  7470                           ;tmr5.c: 97: T5CONbits.TMR5ON = 0;
  7471                           
  7472                           ;incstack = 0
  7473  004EAC  010F               	movlb	15	; () banked
  7474  004EAE  914E               	bcf	78,0,b	;volatile
  7475                           
  7476                           ; BSR set to: 15
  7477  004EB0  0012               	return		;funcret
  7478  004EB2                     __end_of_TMR5_StopTimer:
  7479                           	opt stack 0
  7480                           tblptru	equ	0xFF8
  7481                           tblptrh	equ	0xFF7
  7482                           tblptrl	equ	0xFF6
  7483                           tablat	equ	0xFF5
  7484                           prodh	equ	0xFF4
  7485                           prodl	equ	0xFF3
  7486                           intcon	equ	0xFF2
  7487                           postinc0	equ	0xFEE
  7488                           wreg	equ	0xFE8
  7489                           indf1	equ	0xFE7
  7490                           postinc1	equ	0xFE6
  7491                           postdec1	equ	0xFE5
  7492                           fsr1h	equ	0xFE2
  7493                           fsr1l	equ	0xFE1
  7494                           indf2	equ	0xFDF
  7495                           postinc2	equ	0xFDE
  7496                           postdec2	equ	0xFDD
  7497                           fsr2h	equ	0xFDA
  7498                           fsr2l	equ	0xFD9
  7499                           status	equ	0xFD8
  7500                           
  7501 ;; *************** function _TMR5_Reload *****************
  7502 ;; Defined at:
  7503 ;;		line 136 in file "mcc_generated_files/tmr5.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      void 
  7510 ;; Registers used:
  7511 ;;		wreg, status,2
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7521 ;;Total ram usage:        0 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    5
  7524 ;; This function calls:
  7525 ;;		Nothing
  7526 ;; This function is called by:
  7527 ;;		__delay_10uS
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           	psect	text17
  7532  004DDE                     __ptext17:
  7533                           	opt stack 0
  7534  004DDE                     _TMR5_Reload:
  7535                           	opt stack 20
  7536                           
  7537                           ;tmr5.c: 139: TMR5H = (timer5ReloadVal >> 8);
  7538                           
  7539                           ; BSR set to: 15
  7540                           ;incstack = 0
  7541  004DDE  0101               	movlb	1	; () banked
  7542  004DE0  51F1               	movf	(_timer5ReloadVal+1)& (0+255),w,b	;volatile
  7543  004DE2  010F               	movlb	15	; () banked
  7544  004DE4  6F50               	movwf	80,b	;volatile
  7545                           
  7546                           ; BSR set to: 15
  7547                           ;tmr5.c: 140: TMR5L = (uint8_t) timer5ReloadVal;
  7548  004DE6  C1F0  FF4F         	movff	_timer5ReloadVal,3919	;volatile
  7549                           
  7550                           ; BSR set to: 15
  7551  004DEA  0012               	return		;funcret
  7552  004DEC                     __end_of_TMR5_Reload:
  7553                           	opt stack 0
  7554                           tblptru	equ	0xFF8
  7555                           tblptrh	equ	0xFF7
  7556                           tblptrl	equ	0xFF6
  7557                           tablat	equ	0xFF5
  7558                           prodh	equ	0xFF4
  7559                           prodl	equ	0xFF3
  7560                           intcon	equ	0xFF2
  7561                           postinc0	equ	0xFEE
  7562                           wreg	equ	0xFE8
  7563                           indf1	equ	0xFE7
  7564                           postinc1	equ	0xFE6
  7565                           postdec1	equ	0xFE5
  7566                           fsr1h	equ	0xFE2
  7567                           fsr1l	equ	0xFE1
  7568                           indf2	equ	0xFDF
  7569                           postinc2	equ	0xFDE
  7570                           postdec2	equ	0xFDD
  7571                           fsr2h	equ	0xFDA
  7572                           fsr2l	equ	0xFD9
  7573                           status	equ	0xFD8
  7574                           
  7575 ;; *************** function _TMR5_HasOverflowOccured *****************
  7576 ;; Defined at:
  7577 ;;		line 153 in file "mcc_generated_files/tmr5.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;		None
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;		None
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      unsigned char 
  7584 ;; Registers used:
  7585 ;;		wreg
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7595 ;;Total ram usage:        0 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    5
  7598 ;; This function calls:
  7599 ;;		Nothing
  7600 ;; This function is called by:
  7601 ;;		__delay_10uS
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           	psect	text18
  7606  004E40                     __ptext18:
  7607                           	opt stack 0
  7608  004E40                     _TMR5_HasOverflowOccured:
  7609                           	opt stack 20
  7610                           
  7611                           ;tmr5.c: 156: return(PIR5bits.TMR5IF);
  7612                           
  7613                           ; BSR set to: 15
  7614                           ;incstack = 0
  7615  004E40  A27E               	btfss	3966,1,c	;volatile
  7616  004E42  D002               	goto	u6430
  7617  004E44  0E01               	movlw	1
  7618  004E46  0012               	return	
  7619  004E48                     u6430:
  7620  004E48  0E00               	movlw	0
  7621  004E4A  0012               	return	
  7622  004E4C                     __end_of_TMR5_HasOverflowOccured:
  7623                           	opt stack 0
  7624                           tblptru	equ	0xFF8
  7625                           tblptrh	equ	0xFF7
  7626                           tblptrl	equ	0xFF6
  7627                           tablat	equ	0xFF5
  7628                           prodh	equ	0xFF4
  7629                           prodl	equ	0xFF3
  7630                           intcon	equ	0xFF2
  7631                           postinc0	equ	0xFEE
  7632                           wreg	equ	0xFE8
  7633                           indf1	equ	0xFE7
  7634                           postinc1	equ	0xFE6
  7635                           postdec1	equ	0xFE5
  7636                           fsr1h	equ	0xFE2
  7637                           fsr1l	equ	0xFE1
  7638                           indf2	equ	0xFDF
  7639                           postinc2	equ	0xFDE
  7640                           postdec2	equ	0xFDD
  7641                           fsr2h	equ	0xFDA
  7642                           fsr2l	equ	0xFD9
  7643                           status	equ	0xFD8
  7644                           
  7645 ;; *************** function _char_enter_mode_left_to_right *****************
  7646 ;; Defined at:
  7647 ;;		line 444 in file "clcd.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;		None
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;		None
  7652 ;; Return value:  Size  Location     Type
  7653 ;;                  1    wreg      void 
  7654 ;; Registers used:
  7655 ;;		wreg, status,2, status,0, cstack
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;Total ram usage:        0 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    7
  7668 ;; This function calls:
  7669 ;;		_write_lcd_cmd
  7670 ;; This function is called by:
  7671 ;;		_display_text
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           	psect	text19
  7676  004EA4                     __ptext19:
  7677                           	opt stack 0
  7678  004EA4                     _char_enter_mode_left_to_right:
  7679                           	opt stack 21
  7680                           
  7681                           ;clcd.c: 448: write_lcd_cmd(0x06);
  7682                           
  7683                           ;incstack = 0
  7684  004EA4  0E06               	movlw	6
  7685  004EA6  EC5A  F024         	call	_write_lcd_cmd
  7686  004EAA  0012               	return		;funcret
  7687  004EAC                     __end_of_char_enter_mode_left_to_right:
  7688                           	opt stack 0
  7689                           tblptru	equ	0xFF8
  7690                           tblptrh	equ	0xFF7
  7691                           tblptrl	equ	0xFF6
  7692                           tablat	equ	0xFF5
  7693                           prodh	equ	0xFF4
  7694                           prodl	equ	0xFF3
  7695                           intcon	equ	0xFF2
  7696                           postinc0	equ	0xFEE
  7697                           wreg	equ	0xFE8
  7698                           indf1	equ	0xFE7
  7699                           postinc1	equ	0xFE6
  7700                           postdec1	equ	0xFE5
  7701                           fsr1h	equ	0xFE2
  7702                           fsr1l	equ	0xFE1
  7703                           indf2	equ	0xFDF
  7704                           postinc2	equ	0xFDE
  7705                           postdec2	equ	0xFDD
  7706                           fsr2h	equ	0xFDA
  7707                           fsr2l	equ	0xFD9
  7708                           status	equ	0xFD8
  7709                           
  7710 ;; *************** function _copy_data *****************
  7711 ;; Defined at:
  7712 ;;		line 130 in file "clcd.c"
  7713 ;; Parameters:    Size  Location     Type
  7714 ;;  clcd_str_dat    2   56[COMRAM] PTR struct .
  7715 ;;		 -> clcd_display_string_details(1140), 
  7716 ;;  data            2   58[COMRAM] PTR struct .
  7717 ;;		 -> cmd_data(53), 
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;  col2            1    0        unsigned char 
  7720 ;;  row2            1    0        unsigned char 
  7721 ;;  col1            1    0        unsigned char 
  7722 ;;  row1            1    0        unsigned char 
  7723 ;; Return value:  Size  Location     Type
  7724 ;;                  1    wreg      void 
  7725 ;; Registers used:
  7726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7732 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7734 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7735 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7736 ;;Total ram usage:        6 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    9
  7739 ;; This function calls:
  7740 ;;		_printf
  7741 ;;		_strcpy
  7742 ;;		_strlen
  7743 ;; This function is called by:
  7744 ;;		_update_string_data
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text20
  7749  003250                     __ptext20:
  7750                           	opt stack 0
  7751  003250                     _copy_data:
  7752                           	opt stack 18
  7753                           
  7754                           ;clcd.c: 131: char row1, col1, row2, col2;
  7755                           ;clcd.c: 132: clcd_str_data->uid = data->uid;
  7756                           
  7757                           ;incstack = 0
  7758  003250  C03B  FFD9         	movff	copy_data@data,fsr2l
  7759  003254  C03C  FFDA         	movff	copy_data@data+1,fsr2h
  7760  003258  C039  FFE1         	movff	copy_data@clcd_str_data,fsr1l
  7761  00325C  C03A  FFE2         	movff	copy_data@clcd_str_data+1,fsr1h
  7762  003260  CFDE FFE6          	movff	postinc2,postinc1
  7763  003264  CFDD FFE5          	movff	postdec2,postdec1
  7764                           
  7765                           ;clcd.c: 133: strcpy(clcd_str_data->string, data->data);
  7766  003268  0E02               	movlw	2
  7767  00326A  2439               	addwf	copy_data@clcd_str_data,w,c
  7768  00326C  6E24               	movwf	strcpy@to,c
  7769  00326E  0E00               	movlw	0
  7770  003270  203A               	addwfc	copy_data@clcd_str_data+1,w,c
  7771  003272  6E25               	movwf	strcpy@to+1,c
  7772  003274  0E02               	movlw	2
  7773  003276  243B               	addwf	copy_data@data,w,c
  7774  003278  6E26               	movwf	strcpy@from,c
  7775  00327A  0E00               	movlw	0
  7776  00327C  203C               	addwfc	copy_data@data+1,w,c
  7777  00327E  6E27               	movwf	strcpy@from+1,c
  7778  003280  ECAB  F025         	call	_strcpy	;wreg free
  7779                           
  7780                           ;clcd.c: 134: clcd_str_data->strlen = strlen(clcd_str_data->string);
  7781  003284  0E02               	movlw	2
  7782  003286  2439               	addwf	copy_data@clcd_str_data,w,c
  7783  003288  6E1E               	movwf	strlen@s,c
  7784  00328A  0E00               	movlw	0
  7785  00328C  203A               	addwfc	copy_data@clcd_str_data+1,w,c
  7786  00328E  6E1F               	movwf	strlen@s+1,c
  7787  003290  ECC2  F022         	call	_strlen	;wreg free
  7788  003294  EE20 F02A          	lfsr	2,42
  7789  003298  5039               	movf	copy_data@clcd_str_data,w,c
  7790  00329A  26D9               	addwf	fsr2l,f,c
  7791  00329C  503A               	movf	copy_data@clcd_str_data+1,w,c
  7792  00329E  22DA               	addwfc	fsr2h,f,c
  7793  0032A0  50DF               	movf	indf2,w,c
  7794  0032A2  181E               	xorwf	?_strlen,w,c
  7795  0032A4  0B80               	andlw	-128
  7796  0032A6  181E               	xorwf	?_strlen,w,c
  7797  0032A8  6EDF               	movwf	indf2,c
  7798                           
  7799                           ;clcd.c: 135: clcd_str_data->start_row = data->start_row;
  7800  0032AA  EE20 F02B          	lfsr	2,43
  7801  0032AE  503B               	movf	copy_data@data,w,c
  7802  0032B0  26D9               	addwf	fsr2l,f,c
  7803  0032B2  503C               	movf	copy_data@data+1,w,c
  7804  0032B4  22DA               	addwfc	fsr2h,f,c
  7805  0032B6  50DF               	movf	indf2,w,c
  7806  0032B8  6E3D               	movwf	??_copy_data& (0+255),c
  7807  0032BA  EE20 F02B          	lfsr	2,43
  7808  0032BE  5039               	movf	copy_data@clcd_str_data,w,c
  7809  0032C0  26D9               	addwf	fsr2l,f,c
  7810  0032C2  503A               	movf	copy_data@clcd_str_data+1,w,c
  7811  0032C4  22DA               	addwfc	fsr2h,f,c
  7812  0032C6  50DF               	movf	indf2,w,c
  7813  0032C8  183D               	xorwf	??_copy_data,w,c
  7814  0032CA  0B80               	andlw	-128
  7815  0032CC  183D               	xorwf	??_copy_data,w,c
  7816  0032CE  6EDF               	movwf	indf2,c
  7817                           
  7818                           ;clcd.c: 136: clcd_str_data->start_col = data->start_col;
  7819  0032D0  EE20 F02C          	lfsr	2,44
  7820  0032D4  503B               	movf	copy_data@data,w,c
  7821  0032D6  26D9               	addwf	fsr2l,f,c
  7822  0032D8  503C               	movf	copy_data@data+1,w,c
  7823  0032DA  22DA               	addwfc	fsr2h,f,c
  7824  0032DC  50DF               	movf	indf2,w,c
  7825  0032DE  6E3D               	movwf	??_copy_data& (0+255),c
  7826  0032E0  EE20 F02C          	lfsr	2,44
  7827  0032E4  5039               	movf	copy_data@clcd_str_data,w,c
  7828  0032E6  26D9               	addwf	fsr2l,f,c
  7829  0032E8  503A               	movf	copy_data@clcd_str_data+1,w,c
  7830  0032EA  22DA               	addwfc	fsr2h,f,c
  7831  0032EC  50DF               	movf	indf2,w,c
  7832  0032EE  183D               	xorwf	??_copy_data,w,c
  7833  0032F0  0B80               	andlw	-128
  7834  0032F2  183D               	xorwf	??_copy_data,w,c
  7835  0032F4  6EDF               	movwf	indf2,c
  7836                           
  7837                           ;clcd.c: 137: clcd_str_data->end_row = data->end_row;
  7838  0032F6  EE20 F02D          	lfsr	2,45
  7839  0032FA  503B               	movf	copy_data@data,w,c
  7840  0032FC  26D9               	addwf	fsr2l,f,c
  7841  0032FE  503C               	movf	copy_data@data+1,w,c
  7842  003300  22DA               	addwfc	fsr2h,f,c
  7843  003302  50DF               	movf	indf2,w,c
  7844  003304  6E3D               	movwf	??_copy_data& (0+255),c
  7845  003306  EE20 F02E          	lfsr	2,46
  7846  00330A  5039               	movf	copy_data@clcd_str_data,w,c
  7847  00330C  26D9               	addwf	fsr2l,f,c
  7848  00330E  503A               	movf	copy_data@clcd_str_data+1,w,c
  7849  003310  22DA               	addwfc	fsr2h,f,c
  7850  003312  50DF               	movf	indf2,w,c
  7851  003314  183D               	xorwf	??_copy_data,w,c
  7852  003316  0B80               	andlw	-128
  7853  003318  183D               	xorwf	??_copy_data,w,c
  7854  00331A  6EDF               	movwf	indf2,c
  7855                           
  7856                           ;clcd.c: 138: clcd_str_data->end_col = data->end_col;
  7857  00331C  EE20 F02E          	lfsr	2,46
  7858  003320  503B               	movf	copy_data@data,w,c
  7859  003322  26D9               	addwf	fsr2l,f,c
  7860  003324  503C               	movf	copy_data@data+1,w,c
  7861  003326  22DA               	addwfc	fsr2h,f,c
  7862  003328  50DF               	movf	indf2,w,c
  7863  00332A  6E3D               	movwf	??_copy_data& (0+255),c
  7864  00332C  EE20 F02F          	lfsr	2,47
  7865  003330  5039               	movf	copy_data@clcd_str_data,w,c
  7866  003332  26D9               	addwf	fsr2l,f,c
  7867  003334  503A               	movf	copy_data@clcd_str_data+1,w,c
  7868  003336  22DA               	addwfc	fsr2h,f,c
  7869  003338  50DF               	movf	indf2,w,c
  7870  00333A  183D               	xorwf	??_copy_data,w,c
  7871  00333C  0B80               	andlw	-128
  7872  00333E  183D               	xorwf	??_copy_data,w,c
  7873  003340  6EDF               	movwf	indf2,c
  7874                           
  7875                           ;clcd.c: 139: clcd_str_data->start_point = (clcd_str_data->start_row * clcd_config_data.
      +                          clcd_max_col) + clcd_str_data->start_col;
  7876  003342  EE20 F02C          	lfsr	2,44
  7877  003346  5039               	movf	copy_data@clcd_str_data,w,c
  7878  003348  26D9               	addwf	fsr2l,f,c
  7879  00334A  503A               	movf	copy_data@clcd_str_data+1,w,c
  7880  00334C  22DA               	addwfc	fsr2h,f,c
  7881  00334E  50DF               	movf	indf2,w,c
  7882  003350  0B7F               	andlw	127
  7883  003352  6E3D               	movwf	??_copy_data& (0+255),c
  7884  003354  EE20 F02B          	lfsr	2,43
  7885  003358  5039               	movf	copy_data@clcd_str_data,w,c
  7886  00335A  26D9               	addwf	fsr2l,f,c
  7887  00335C  503A               	movf	copy_data@clcd_str_data+1,w,c
  7888  00335E  22DA               	addwfc	fsr2h,f,c
  7889  003360  50DF               	movf	indf2,w,c
  7890  003362  0B7F               	andlw	127
  7891  003364  024B               	mulwf	_clcd_config_data+2,c
  7892  003366  50F3               	movf	prodl,w,c
  7893  003368  243D               	addwf	??_copy_data,w,c
  7894  00336A  6E3E               	movwf	(??_copy_data+1)& (0+255),c
  7895  00336C  EE20 F02D          	lfsr	2,45
  7896  003370  5039               	movf	copy_data@clcd_str_data,w,c
  7897  003372  26D9               	addwf	fsr2l,f,c
  7898  003374  503A               	movf	copy_data@clcd_str_data+1,w,c
  7899  003376  22DA               	addwfc	fsr2h,f,c
  7900  003378  50DF               	movf	indf2,w,c
  7901  00337A  183E               	xorwf	??_copy_data+1,w,c
  7902  00337C  0B80               	andlw	-128
  7903  00337E  183E               	xorwf	??_copy_data+1,w,c
  7904  003380  6EDF               	movwf	indf2,c
  7905                           
  7906                           ;clcd.c: 140: clcd_str_data->end_point = (clcd_str_data->end_row * clcd_config_data.clcd
      +                          _max_col) + clcd_str_data->end_col;
  7907  003382  EE20 F02F          	lfsr	2,47
  7908  003386  5039               	movf	copy_data@clcd_str_data,w,c
  7909  003388  26D9               	addwf	fsr2l,f,c
  7910  00338A  503A               	movf	copy_data@clcd_str_data+1,w,c
  7911  00338C  22DA               	addwfc	fsr2h,f,c
  7912  00338E  50DF               	movf	indf2,w,c
  7913  003390  0B7F               	andlw	127
  7914  003392  6E3D               	movwf	??_copy_data& (0+255),c
  7915  003394  EE20 F02E          	lfsr	2,46
  7916  003398  5039               	movf	copy_data@clcd_str_data,w,c
  7917  00339A  26D9               	addwf	fsr2l,f,c
  7918  00339C  503A               	movf	copy_data@clcd_str_data+1,w,c
  7919  00339E  22DA               	addwfc	fsr2h,f,c
  7920  0033A0  50DF               	movf	indf2,w,c
  7921  0033A2  0B7F               	andlw	127
  7922  0033A4  024B               	mulwf	_clcd_config_data+2,c
  7923  0033A6  50F3               	movf	prodl,w,c
  7924  0033A8  243D               	addwf	??_copy_data,w,c
  7925  0033AA  6E3E               	movwf	(??_copy_data+1)& (0+255),c
  7926  0033AC  EE20 F030          	lfsr	2,48
  7927  0033B0  5039               	movf	copy_data@clcd_str_data,w,c
  7928  0033B2  26D9               	addwf	fsr2l,f,c
  7929  0033B4  503A               	movf	copy_data@clcd_str_data+1,w,c
  7930  0033B6  22DA               	addwfc	fsr2h,f,c
  7931  0033B8  50DF               	movf	indf2,w,c
  7932  0033BA  183E               	xorwf	??_copy_data+1,w,c
  7933  0033BC  0B80               	andlw	-128
  7934  0033BE  183E               	xorwf	??_copy_data+1,w,c
  7935  0033C0  6EDF               	movwf	indf2,c
  7936                           
  7937                           ;clcd.c: 141: clcd_str_data->direction = data->scroll;
  7938  0033C2  EE20 F030          	lfsr	2,48
  7939  0033C6  503B               	movf	copy_data@data,w,c
  7940  0033C8  26D9               	addwf	fsr2l,f,c
  7941  0033CA  503C               	movf	copy_data@data+1,w,c
  7942  0033CC  22DA               	addwfc	fsr2h,f,c
  7943  0033CE  50DF               	movf	indf2,w,c
  7944  0033D0  6E3D               	movwf	??_copy_data& (0+255),c
  7945  0033D2  EE20 F031          	lfsr	2,49
  7946  0033D6  5039               	movf	copy_data@clcd_str_data,w,c
  7947  0033D8  26D9               	addwf	fsr2l,f,c
  7948  0033DA  503A               	movf	copy_data@clcd_str_data+1,w,c
  7949  0033DC  22DA               	addwfc	fsr2h,f,c
  7950  0033DE  50DF               	movf	indf2,w,c
  7951  0033E0  183D               	xorwf	??_copy_data,w,c
  7952  0033E2  0BF8               	andlw	-8
  7953  0033E4  183D               	xorwf	??_copy_data,w,c
  7954  0033E6  6EDF               	movwf	indf2,c
  7955                           
  7956                           ;clcd.c: 142: clcd_str_data->display_char_count = (clcd_str_data->end_point - clcd_str_d
      +                          ata->start_point) + 1;
  7957  0033E8  EE20 F033          	lfsr	2,51
  7958  0033EC  5039               	movf	copy_data@clcd_str_data,w,c
  7959  0033EE  26D9               	addwf	fsr2l,f,c
  7960  0033F0  503A               	movf	copy_data@clcd_str_data+1,w,c
  7961  0033F2  22DA               	addwfc	fsr2h,f,c
  7962  0033F4  EE10 F030          	lfsr	1,48
  7963  0033F8  5039               	movf	copy_data@clcd_str_data,w,c
  7964  0033FA  26E1               	addwf	fsr1l,f,c
  7965  0033FC  503A               	movf	copy_data@clcd_str_data+1,w,c
  7966  0033FE  22E2               	addwfc	fsr1h,f,c
  7967  003400  50E7               	movf	indf1,w,c
  7968  003402  0B7F               	andlw	127
  7969  003404  6E3D               	movwf	??_copy_data& (0+255),c
  7970  003406  EE10 F02D          	lfsr	1,45
  7971  00340A  5039               	movf	copy_data@clcd_str_data,w,c
  7972  00340C  26E1               	addwf	fsr1l,f,c
  7973  00340E  503A               	movf	copy_data@clcd_str_data+1,w,c
  7974  003410  22E2               	addwfc	fsr1h,f,c
  7975  003412  50E7               	movf	indf1,w,c
  7976  003414  0B7F               	andlw	127
  7977  003416  0800               	sublw	0
  7978  003418  243D               	addwf	??_copy_data,w,c
  7979  00341A  6E3E               	movwf	(??_copy_data+1)& (0+255),c
  7980  00341C  283E               	incf	??_copy_data+1,w,c
  7981  00341E  6EDF               	movwf	indf2,c
  7982                           
  7983                           ;clcd.c: 143: printf("display_char_count = %d\r\n", clcd_str_data->display_char_count);
  7984  003420  0E09               	movlw	low STR_6
  7985  003422  6E2B               	movwf	printf@f,c
  7986  003424  0EFD               	movlw	high STR_6
  7987  003426  6E2C               	movwf	printf@f+1,c
  7988  003428  EE20 F033          	lfsr	2,51
  7989  00342C  5039               	movf	copy_data@clcd_str_data,w,c
  7990  00342E  26D9               	addwf	fsr2l,f,c
  7991  003430  503A               	movf	copy_data@clcd_str_data+1,w,c
  7992  003432  22DA               	addwfc	fsr2h,f,c
  7993  003434  50DF               	movf	indf2,w,c
  7994  003436  6E3D               	movwf	??_copy_data& (0+255),c
  7995  003438  503D               	movf	??_copy_data,w,c
  7996  00343A  6E2D               	movwf	?_printf+2,c
  7997  00343C  6A2E               	clrf	?_printf+3,c
  7998  00343E  EC12  F025         	call	_printf	;wreg free
  7999  003442  0012               	return		;funcret
  8000  003444                     __end_of_copy_data:
  8001                           	opt stack 0
  8002                           tblptru	equ	0xFF8
  8003                           tblptrh	equ	0xFF7
  8004                           tblptrl	equ	0xFF6
  8005                           tablat	equ	0xFF5
  8006                           prodh	equ	0xFF4
  8007                           prodl	equ	0xFF3
  8008                           intcon	equ	0xFF2
  8009                           postinc0	equ	0xFEE
  8010                           wreg	equ	0xFE8
  8011                           indf1	equ	0xFE7
  8012                           postinc1	equ	0xFE6
  8013                           postdec1	equ	0xFE5
  8014                           fsr1h	equ	0xFE2
  8015                           fsr1l	equ	0xFE1
  8016                           indf2	equ	0xFDF
  8017                           postinc2	equ	0xFDE
  8018                           postdec2	equ	0xFDD
  8019                           fsr2h	equ	0xFDA
  8020                           fsr2l	equ	0xFD9
  8021                           status	equ	0xFD8
  8022                           
  8023 ;; *************** function _conflict_check *****************
  8024 ;; Defined at:
  8025 ;;		line 146 in file "clcd.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;  exist_uid_id    1    wreg     unsigned char 
  8028 ;;  new_start_po    1   56[COMRAM] unsigned char 
  8029 ;;  new_end_poin    1   57[COMRAM] unsigned char 
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;  exist_uid_id    1    0[BANK0 ] unsigned char 
  8032 ;;  i               2    2[BANK0 ] int 
  8033 ;;  conflict_boo    1    1[BANK0 ] unsigned char 
  8034 ;; Return value:  Size  Location     Type
  8035 ;;                  1    wreg      unsigned char 
  8036 ;; Registers used:
  8037 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8043 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8047 ;;Total ram usage:        9 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    9
  8050 ;; This function calls:
  8051 ;;		___wmul
  8052 ;;		_printf
  8053 ;; This function is called by:
  8054 ;;		_update_string_data
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text21
  8059  00287C                     __ptext21:
  8060                           	opt stack 0
  8061  00287C                     _conflict_check:
  8062                           	opt stack 18
  8063                           
  8064                           ;incstack = 0
  8065                           ;conflict_check@exist_uid_idx stored from wreg
  8066  00287C  0100               	movlb	0	; () banked
  8067  00287E  6F60               	movwf	conflict_check@exist_uid_idx& (0+255),b
  8068                           
  8069                           ;clcd.c: 147: int i = 0;
  8070  002880  0E00               	movlw	0
  8071  002882  0100               	movlb	0	; () banked
  8072  002884  6F63               	movwf	(conflict_check@i+1)& (0+255),b
  8073  002886  0E00               	movlw	0
  8074  002888  6F62               	movwf	conflict_check@i& (0+255),b
  8075                           
  8076                           ;clcd.c: 148: bool conflict_bool = 0;
  8077  00288A  0E00               	movlw	0
  8078  00288C  0100               	movlb	0	; () banked
  8079  00288E  6F61               	movwf	conflict_check@conflict_bool& (0+255),b
  8080                           
  8081                           ;clcd.c: 150: for (i = 0; i < clcd_config_data.clcd_max_display_string;) {
  8082  002890  0E00               	movlw	0
  8083  002892  0100               	movlb	0	; () banked
  8084  002894  6F63               	movwf	(conflict_check@i+1)& (0+255),b
  8085  002896  0E00               	movlw	0
  8086  002898  6F62               	movwf	conflict_check@i& (0+255),b
  8087  00289A  D136               	goto	l7851
  8088  00289C                     l7805:
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;clcd.c: 151: if (exist_uid_idx != i && clcd_display_string_details[i].uid != 0) {
  8092  00289C  0100               	movlb	0	; () banked
  8093  00289E  5160               	movf	conflict_check@exist_uid_idx& (0+255),w,b
  8094  0028A0  6E3B               	movwf	??_conflict_check& (0+255),c
  8095  0028A2  6A3C               	clrf	(??_conflict_check+1)& (0+255),c
  8096  0028A4  0100               	movlb	0	; () banked
  8097  0028A6  5162               	movf	conflict_check@i& (0+255),w,b
  8098  0028A8  183B               	xorwf	??_conflict_check,w,c
  8099  0028AA  E105               	bnz	u7350
  8100  0028AC  0100               	movlb	0	; () banked
  8101  0028AE  5163               	movf	(conflict_check@i+1)& (0+255),w,b
  8102  0028B0  183C               	xorwf	??_conflict_check+1,w,c
  8103  0028B2  B4D8               	btfsc	status,2,c
  8104  0028B4  D126               	goto	l7849
  8105  0028B6                     u7350:
  8106                           
  8107                           ; BSR set to: 0
  8108  0028B6  C062  F018         	movff	conflict_check@i,___wmul@multiplier
  8109  0028BA  C063  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  8110  0028BE  0E00               	movlw	0
  8111  0028C0  6E1B               	movwf	___wmul@multiplicand+1,c
  8112  0028C2  0E39               	movlw	57
  8113  0028C4  6E1A               	movwf	___wmul@multiplicand,c
  8114  0028C6  EC04  F026         	call	___wmul	;wreg free
  8115  0028CA  0E99               	movlw	low _clcd_display_string_details
  8116  0028CC  2418               	addwf	?___wmul,w,c
  8117  0028CE  6ED9               	movwf	fsr2l,c
  8118  0028D0  0E05               	movlw	high _clcd_display_string_details
  8119  0028D2  2019               	addwfc	?___wmul+1,w,c
  8120  0028D4  6EDA               	movwf	fsr2h,c
  8121  0028D6  50DE               	movf	postinc2,w,c
  8122  0028D8  10DE               	iorwf	postinc2,w,c
  8123  0028DA  B4D8               	btfsc	status,2,c
  8124  0028DC  D112               	goto	l7849
  8125                           
  8126                           ;clcd.c: 152: if (new_start_point >= clcd_display_string_details[i].start_point && new_s
      +                          tart_point <= clcd_display_string_details[i].end_point) {
  8127  0028DE  C062  F018         	movff	conflict_check@i,___wmul@multiplier
  8128  0028E2  C063  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  8129  0028E6  0E00               	movlw	0
  8130  0028E8  6E1B               	movwf	___wmul@multiplicand+1,c
  8131  0028EA  0E39               	movlw	57
  8132  0028EC  6E1A               	movwf	___wmul@multiplicand,c
  8133  0028EE  EC04  F026         	call	___wmul	;wreg free
  8134  0028F2  0E2D               	movlw	45
  8135  0028F4  2618               	addwf	?___wmul,f,c
  8136  0028F6  0E00               	movlw	0
  8137  0028F8  2219               	addwfc	?___wmul+1,f,c
  8138  0028FA  0E99               	movlw	low _clcd_display_string_details
  8139  0028FC  2418               	addwf	?___wmul,w,c
  8140  0028FE  6ED9               	movwf	fsr2l,c
  8141  002900  0E05               	movlw	high _clcd_display_string_details
  8142  002902  2019               	addwfc	?___wmul+1,w,c
  8143  002904  6EDA               	movwf	fsr2h,c
  8144  002906  50DF               	movf	223,w,c
  8145  002908  0B7F               	andlw	127
  8146  00290A  6E3B               	movwf	??_conflict_check& (0+255),c
  8147  00290C  503B               	movf	??_conflict_check,w,c
  8148  00290E  5C39               	subwf	conflict_check@new_start_point,w,c
  8149  002910  A0D8               	btfss	status,0,c
  8150  002912  D042               	goto	l7823
  8151  002914  C062  F018         	movff	conflict_check@i,___wmul@multiplier
  8152  002918  C063  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  8153  00291C  0E00               	movlw	0
  8154  00291E  6E1B               	movwf	___wmul@multiplicand+1,c
  8155  002920  0E39               	movlw	57
  8156  002922  6E1A               	movwf	___wmul@multiplicand,c
  8157  002924  EC04  F026         	call	___wmul	;wreg free
  8158  002928  0E30               	movlw	48
  8159  00292A  2618               	addwf	?___wmul,f,c
  8160  00292C  0E00               	movlw	0
  8161  00292E  2219               	addwfc	?___wmul+1,f,c
  8162  002930  0E99               	movlw	low _clcd_display_string_details
  8163  002932  2418               	addwf	?___wmul,w,c
  8164  002934  6ED9               	movwf	fsr2l,c
  8165  002936  0E05               	movlw	high _clcd_display_string_details
  8166  002938  2019               	addwfc	?___wmul+1,w,c
  8167  00293A  6EDA               	movwf	fsr2h,c
  8168  00293C  50DF               	movf	223,w,c
  8169  00293E  0B7F               	andlw	127
  8170  002940  6E3B               	movwf	??_conflict_check& (0+255),c
  8171  002942  5039               	movf	conflict_check@new_start_point,w,c
  8172  002944  5C3B               	subwf	??_conflict_check,w,c
  8173  002946  A0D8               	btfss	status,0,c
  8174  002948  D027               	goto	l7823
  8175                           
  8176                           ;clcd.c: 153: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  8177  00294A  C062  F018         	movff	conflict_check@i,___wmul@multiplier
  8178  00294E  C063  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  8179  002952  0E00               	movlw	0
  8180  002954  6E1B               	movwf	___wmul@multiplicand+1,c
  8181  002956  0E39               	movlw	57
  8182  002958  6E1A               	movwf	___wmul@multiplicand,c
  8183  00295A  EC04  F026         	call	___wmul	;wreg free
  8184  00295E  0E99               	movlw	low _clcd_display_string_details
  8185  002960  2418               	addwf	?___wmul,w,c
  8186  002962  6ED9               	movwf	fsr2l,c
  8187  002964  0E05               	movlw	high _clcd_display_string_details
  8188  002966  2019               	addwfc	?___wmul+1,w,c
  8189  002968  6EDA               	movwf	fsr2h,c
  8190  00296A  5042               	movf	_conflict_data_count,w,c
  8191  00296C  0D02               	mullw	2
  8192  00296E  0EA3               	movlw	low _conflict_arr
  8193  002970  24F3               	addwf	prodl,w,c
  8194  002972  6EE1               	movwf	fsr1l,c
  8195  002974  0E01               	movlw	high _conflict_arr
  8196  002976  20F4               	addwfc	prodh,w,c
  8197  002978  6EE2               	movwf	fsr1h,c
  8198  00297A  CFDE FFE6          	movff	postinc2,postinc1
  8199  00297E  CFDD FFE5          	movff	postdec2,postdec1
  8200  002982  2A42               	incf	_conflict_data_count,f,c
  8201                           
  8202                           ;clcd.c: 154: i++;
  8203  002984  0100               	movlb	0	; () banked
  8204  002986  4B62               	infsnz	conflict_check@i& (0+255),f,b
  8205  002988  2B63               	incf	(conflict_check@i+1)& (0+255),f,b
  8206                           
  8207                           ; BSR set to: 0
  8208                           ;clcd.c: 155: printf("ex_sp <= new_sp <=ex_ep\r\n");
  8209  00298A  0E3D               	movlw	low STR_7
  8210  00298C  6E2B               	movwf	printf@f,c
  8211  00298E  0EFD               	movlw	high STR_7
  8212  002990  6E2C               	movwf	printf@f+1,c
  8213  002992  EC12  F025         	call	_printf	;wreg free
  8214  002996  D05A               	goto	l7835
  8215  002998                     l7823:
  8216                           
  8217                           ;clcd.c: 158: }
  8218                           ;clcd.c: 159: if (new_end_point >= clcd_display_string_details[i].start_point && new_end
      +                          _point <= clcd_display_string_details[i].end_point) {
  8219  002998  C062  F018         	movff	conflict_check@i,___wmul@multiplier
  8220  00299C  C063  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  8221  0029A0  0E00               	movlw	0
  8222  0029A2  6E1B               	movwf	___wmul@multiplicand+1,c
  8223  0029A4  0E39               	movlw	57
  8224  0029A6  6E1A               	movwf	___wmul@multiplicand,c
  8225  0029A8  EC04  F026         	call	___wmul	;wreg free
  8226  0029AC  0E2D               	movlw	45
  8227  0029AE  2618               	addwf	?___wmul,f,c
  8228  0029B0  0E00               	movlw	0
  8229  0029B2  2219               	addwfc	?___wmul+1,f,c
  8230  0029B4  0E99               	movlw	low _clcd_display_string_details
  8231  0029B6  2418               	addwf	?___wmul,w,c
  8232  0029B8  6ED9               	movwf	fsr2l,c
  8233  0029BA  0E05               	movlw	high _clcd_display_string_details
  8234  0029BC  2019               	addwfc	?___wmul+1,w,c
  8235  0029BE  6EDA               	movwf	fsr2h,c
  8236  0029C0  50DF               	movf	223,w,c
  8237  0029C2  0B7F               	andlw	127
  8238  0029C4  6E3B               	movwf	??_conflict_check& (0+255),c
  8239  0029C6  503B               	movf	??_conflict_check,w,c
  8240  0029C8  5C3A               	subwf	conflict_check@new_end_point,w,c
  8241  0029CA  A0D8               	btfss	status,0,c
  8242  0029CC  D043               	goto	l7837
  8243  0029CE  C062  F018         	movff	conflict_check@i,___wmul@multiplier
  8244  0029D2  C063  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  8245  0029D6  0E00               	movlw	0
  8246  0029D8  6E1B               	movwf	___wmul@multiplicand+1,c
  8247  0029DA  0E39               	movlw	57
  8248  0029DC  6E1A               	movwf	___wmul@multiplicand,c
  8249  0029DE  EC04  F026         	call	___wmul	;wreg free
  8250  0029E2  0E30               	movlw	48
  8251  0029E4  2618               	addwf	?___wmul,f,c
  8252  0029E6  0E00               	movlw	0
  8253  0029E8  2219               	addwfc	?___wmul+1,f,c
  8254  0029EA  0E99               	movlw	low _clcd_display_string_details
  8255  0029EC  2418               	addwf	?___wmul,w,c
  8256  0029EE  6ED9               	movwf	fsr2l,c
  8257  0029F0  0E05               	movlw	high _clcd_display_string_details
  8258  0029F2  2019               	addwfc	?___wmul+1,w,c
  8259  0029F4  6EDA               	movwf	fsr2h,c
  8260  0029F6  50DF               	movf	223,w,c
  8261  0029F8  0B7F               	andlw	127
  8262  0029FA  6E3B               	movwf	??_conflict_check& (0+255),c
  8263  0029FC  503A               	movf	conflict_check@new_end_point,w,c
  8264  0029FE  5C3B               	subwf	??_conflict_check,w,c
  8265  002A00  A0D8               	btfss	status,0,c
  8266  002A02  D028               	goto	l7837
  8267                           
  8268                           ;clcd.c: 160: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  8269  002A04  C062  F018         	movff	conflict_check@i,___wmul@multiplier
  8270  002A08  C063  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  8271  002A0C  0E00               	movlw	0
  8272  002A0E  6E1B               	movwf	___wmul@multiplicand+1,c
  8273  002A10  0E39               	movlw	57
  8274  002A12  6E1A               	movwf	___wmul@multiplicand,c
  8275  002A14  EC04  F026         	call	___wmul	;wreg free
  8276  002A18  0E99               	movlw	low _clcd_display_string_details
  8277  002A1A  2418               	addwf	?___wmul,w,c
  8278  002A1C  6ED9               	movwf	fsr2l,c
  8279  002A1E  0E05               	movlw	high _clcd_display_string_details
  8280  002A20  2019               	addwfc	?___wmul+1,w,c
  8281  002A22  6EDA               	movwf	fsr2h,c
  8282  002A24  5042               	movf	_conflict_data_count,w,c
  8283  002A26  0D02               	mullw	2
  8284  002A28  0EA3               	movlw	low _conflict_arr
  8285  002A2A  24F3               	addwf	prodl,w,c
  8286  002A2C  6EE1               	movwf	fsr1l,c
  8287  002A2E  0E01               	movlw	high _conflict_arr
  8288  002A30  20F4               	addwfc	prodh,w,c
  8289  002A32  6EE2               	movwf	fsr1h,c
  8290  002A34  CFDE FFE6          	movff	postinc2,postinc1
  8291  002A38  CFDD FFE5          	movff	postdec2,postdec1
  8292  002A3C  2A42               	incf	_conflict_data_count,f,c
  8293                           
  8294                           ;clcd.c: 161: printf("ex_sp <= new_ep <=ex_ep\r\n");
  8295  002A3E  0E23               	movlw	low STR_8
  8296  002A40  6E2B               	movwf	printf@f,c
  8297  002A42  0EFD               	movlw	high STR_8
  8298  002A44  6E2C               	movwf	printf@f+1,c
  8299  002A46  EC12  F025         	call	_printf	;wreg free
  8300  002A4A  D057               	goto	l7845
  8301  002A4C                     l7835:
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;clcd.c: 163: conflict_bool = 1;
  8305  002A4C  0E01               	movlw	1
  8306  002A4E  0100               	movlb	0	; () banked
  8307  002A50  6F61               	movwf	conflict_check@conflict_bool& (0+255),b
  8308                           
  8309                           ;clcd.c: 164: continue;
  8310  002A52  D05A               	goto	l7851
  8311  002A54                     l7837:
  8312                           
  8313                           ;clcd.c: 165: }
  8314                           ;clcd.c: 166: if (new_start_point <= clcd_display_string_details[i].start_point && new_e
      +                          nd_point >= clcd_display_string_details[i].end_point) {
  8315  002A54  C062  F018         	movff	conflict_check@i,___wmul@multiplier
  8316  002A58  C063  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  8317  002A5C  0E00               	movlw	0
  8318  002A5E  6E1B               	movwf	___wmul@multiplicand+1,c
  8319  002A60  0E39               	movlw	57
  8320  002A62  6E1A               	movwf	___wmul@multiplicand,c
  8321  002A64  EC04  F026         	call	___wmul	;wreg free
  8322  002A68  0E2D               	movlw	45
  8323  002A6A  2618               	addwf	?___wmul,f,c
  8324  002A6C  0E00               	movlw	0
  8325  002A6E  2219               	addwfc	?___wmul+1,f,c
  8326  002A70  0E99               	movlw	low _clcd_display_string_details
  8327  002A72  2418               	addwf	?___wmul,w,c
  8328  002A74  6ED9               	movwf	fsr2l,c
  8329  002A76  0E05               	movlw	high _clcd_display_string_details
  8330  002A78  2019               	addwfc	?___wmul+1,w,c
  8331  002A7A  6EDA               	movwf	fsr2h,c
  8332  002A7C  50DF               	movf	223,w,c
  8333  002A7E  0B7F               	andlw	127
  8334  002A80  6E3B               	movwf	??_conflict_check& (0+255),c
  8335  002A82  5039               	movf	conflict_check@new_start_point,w,c
  8336  002A84  5C3B               	subwf	??_conflict_check,w,c
  8337  002A86  A0D8               	btfss	status,0,c
  8338  002A88  D03C               	goto	l7849
  8339  002A8A  C062  F018         	movff	conflict_check@i,___wmul@multiplier
  8340  002A8E  C063  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  8341  002A92  0E00               	movlw	0
  8342  002A94  6E1B               	movwf	___wmul@multiplicand+1,c
  8343  002A96  0E39               	movlw	57
  8344  002A98  6E1A               	movwf	___wmul@multiplicand,c
  8345  002A9A  EC04  F026         	call	___wmul	;wreg free
  8346  002A9E  0E30               	movlw	48
  8347  002AA0  2618               	addwf	?___wmul,f,c
  8348  002AA2  0E00               	movlw	0
  8349  002AA4  2219               	addwfc	?___wmul+1,f,c
  8350  002AA6  0E99               	movlw	low _clcd_display_string_details
  8351  002AA8  2418               	addwf	?___wmul,w,c
  8352  002AAA  6ED9               	movwf	fsr2l,c
  8353  002AAC  0E05               	movlw	high _clcd_display_string_details
  8354  002AAE  2019               	addwfc	?___wmul+1,w,c
  8355  002AB0  6EDA               	movwf	fsr2h,c
  8356  002AB2  50DF               	movf	223,w,c
  8357  002AB4  0B7F               	andlw	127
  8358  002AB6  6E3B               	movwf	??_conflict_check& (0+255),c
  8359  002AB8  503B               	movf	??_conflict_check,w,c
  8360  002ABA  5C3A               	subwf	conflict_check@new_end_point,w,c
  8361  002ABC  A0D8               	btfss	status,0,c
  8362  002ABE  D021               	goto	l7849
  8363                           
  8364                           ;clcd.c: 167: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  8365  002AC0  C062  F018         	movff	conflict_check@i,___wmul@multiplier
  8366  002AC4  C063  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  8367  002AC8  0E00               	movlw	0
  8368  002ACA  6E1B               	movwf	___wmul@multiplicand+1,c
  8369  002ACC  0E39               	movlw	57
  8370  002ACE  6E1A               	movwf	___wmul@multiplicand,c
  8371  002AD0  EC04  F026         	call	___wmul	;wreg free
  8372  002AD4  0E99               	movlw	low _clcd_display_string_details
  8373  002AD6  2418               	addwf	?___wmul,w,c
  8374  002AD8  6ED9               	movwf	fsr2l,c
  8375  002ADA  0E05               	movlw	high _clcd_display_string_details
  8376  002ADC  2019               	addwfc	?___wmul+1,w,c
  8377  002ADE  6EDA               	movwf	fsr2h,c
  8378  002AE0  5042               	movf	_conflict_data_count,w,c
  8379  002AE2  0D02               	mullw	2
  8380  002AE4  0EA3               	movlw	low _conflict_arr
  8381  002AE6  24F3               	addwf	prodl,w,c
  8382  002AE8  6EE1               	movwf	fsr1l,c
  8383  002AEA  0E01               	movlw	high _conflict_arr
  8384  002AEC  20F4               	addwfc	prodh,w,c
  8385  002AEE  6EE2               	movwf	fsr1h,c
  8386  002AF0  CFDE FFE6          	movff	postinc2,postinc1
  8387  002AF4  CFDD FFE5          	movff	postdec2,postdec1
  8388  002AF8  2A42               	incf	_conflict_data_count,f,c
  8389  002AFA                     l7845:
  8390                           
  8391                           ;clcd.c: 168: i++;
  8392  002AFA  0100               	movlb	0	; () banked
  8393  002AFC  4B62               	infsnz	conflict_check@i& (0+255),f,b
  8394  002AFE  2B63               	incf	(conflict_check@i+1)& (0+255),f,b
  8395  002B00  D7A5               	goto	l7835
  8396  002B02                     l7849:
  8397                           
  8398                           ;clcd.c: 171: }
  8399                           ;clcd.c: 172: }
  8400                           ;clcd.c: 173: i++;
  8401  002B02  0100               	movlb	0	; () banked
  8402  002B04  4B62               	infsnz	conflict_check@i& (0+255),f,b
  8403  002B06  2B63               	incf	(conflict_check@i+1)& (0+255),f,b
  8404  002B08                     l7851:
  8405                           
  8406                           ; BSR set to: 0
  8407  002B08  504D               	movf	_clcd_config_data+4,w,c
  8408  002B0A  6E3B               	movwf	??_conflict_check& (0+255),c
  8409  002B0C  6A3C               	clrf	(??_conflict_check+1)& (0+255),c
  8410  002B0E  503B               	movf	??_conflict_check,w,c
  8411  002B10  0100               	movlb	0	; () banked
  8412  002B12  5D62               	subwf	conflict_check@i& (0+255),w,b
  8413  002B14  0100               	movlb	0	; () banked
  8414  002B16  5163               	movf	(conflict_check@i+1)& (0+255),w,b
  8415  002B18  0A80               	xorlw	128
  8416  002B1A  6E3D               	movwf	(??_conflict_check+2)& (0+255),c
  8417  002B1C  503C               	movf	??_conflict_check+1,w,c
  8418  002B1E  0A80               	xorlw	128
  8419  002B20  583D               	subwfb	(??_conflict_check+2)& (0+255),w,c
  8420  002B22  A0D8               	btfss	status,0,c
  8421  002B24  D6BB               	goto	l7805
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;clcd.c: 174: }
  8425                           ;clcd.c: 182: return conflict_bool;
  8426                           
  8427                           ; BSR set to: 0
  8428  002B26  0100               	movlb	0	; () banked
  8429  002B28  5161               	movf	conflict_check@conflict_bool& (0+255),w,b
  8430  002B2A  0012               	return	
  8431  002B2C                     __end_of_conflict_check:
  8432                           	opt stack 0
  8433                           tblptru	equ	0xFF8
  8434                           tblptrh	equ	0xFF7
  8435                           tblptrl	equ	0xFF6
  8436                           tablat	equ	0xFF5
  8437                           prodh	equ	0xFF4
  8438                           prodl	equ	0xFF3
  8439                           intcon	equ	0xFF2
  8440                           postinc0	equ	0xFEE
  8441                           wreg	equ	0xFE8
  8442                           indf1	equ	0xFE7
  8443                           postinc1	equ	0xFE6
  8444                           postdec1	equ	0xFE5
  8445                           fsr1h	equ	0xFE2
  8446                           fsr1l	equ	0xFE1
  8447                           indf2	equ	0xFDF
  8448                           postinc2	equ	0xFDE
  8449                           postdec2	equ	0xFDD
  8450                           fsr2h	equ	0xFDA
  8451                           fsr2l	equ	0xFD9
  8452                           status	equ	0xFD8
  8453                           
  8454 ;; *************** function _set_string_data *****************
  8455 ;; Defined at:
  8456 ;;		line 286 in file "clcd.c"
  8457 ;; Parameters:    Size  Location     Type
  8458 ;;  data            2    0[BANK0 ] PTR struct .
  8459 ;;		 -> cmd_data(53), 
  8460 ;; Auto vars:     Size  Location     Type
  8461 ;;  j               2   12[BANK0 ] int 
  8462 ;;  conflict_cou    2    9[BANK0 ] int 
  8463 ;;  i               1   11[BANK0 ] unsigned char 
  8464 ;;  uid             1    8[BANK0 ] unsigned char 
  8465 ;;  end_point       1    7[BANK0 ] unsigned char 
  8466 ;;  start_point     1    6[BANK0 ] unsigned char 
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      unsigned char 
  8469 ;; Registers used:
  8470 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8476 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;Total ram usage:       14 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:   10
  8483 ;; This function calls:
  8484 ;;		___wmul
  8485 ;;		_conflict
  8486 ;;		_copy_display_struct
  8487 ;;		_get_new_uid
  8488 ;;		_memset
  8489 ;;		_printf
  8490 ;; This function is called by:
  8491 ;;		_reply_to_host
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text22
  8496  002586                     __ptext22:
  8497                           	opt stack 0
  8498  002586                     _set_string_data:
  8499                           	opt stack 18
  8500                           
  8501                           ;clcd.c: 287: char i = 0;
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;incstack = 0
  8505  002586  0E00               	movlw	0
  8506  002588  0100               	movlb	0	; () banked
  8507  00258A  6F6B               	movwf	set_string_data@i& (0+255),b
  8508                           
  8509                           ;clcd.c: 288: char uid = 0;
  8510  00258C  0E00               	movlw	0
  8511  00258E  0100               	movlb	0	; () banked
  8512  002590  6F68               	movwf	set_string_data@uid& (0+255),b
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;clcd.c: 289: char start_point, end_point;
  8516                           ;clcd.c: 292: start_point = (data->start_row * clcd_config_data.clcd_max_col) + data->st
      +                          art_col;
  8517  002592  0100               	movlb	0	; () banked
  8518  002594  EE20 F02C          	lfsr	2,44
  8519  002598  5160               	movf	set_string_data@data& (0+255),w,b
  8520  00259A  26D9               	addwf	fsr2l,f,c
  8521  00259C  5161               	movf	(set_string_data@data+1)& (0+255),w,b
  8522  00259E  22DA               	addwfc	fsr2h,f,c
  8523  0025A0  50DF               	movf	indf2,w,c
  8524  0025A2  0100               	movlb	0	; () banked
  8525  0025A4  6F62               	movwf	??_set_string_data& (0+255),b
  8526  0025A6  0100               	movlb	0	; () banked
  8527  0025A8  EE20 F02B          	lfsr	2,43
  8528  0025AC  5160               	movf	set_string_data@data& (0+255),w,b
  8529  0025AE  26D9               	addwf	fsr2l,f,c
  8530  0025B0  5161               	movf	(set_string_data@data+1)& (0+255),w,b
  8531  0025B2  22DA               	addwfc	fsr2h,f,c
  8532  0025B4  50DF               	movf	indf2,w,c
  8533  0025B6  024B               	mulwf	_clcd_config_data+2,c
  8534  0025B8  50F3               	movf	prodl,w,c
  8535  0025BA  0100               	movlb	0	; () banked
  8536  0025BC  2562               	addwf	??_set_string_data& (0+255),w,b
  8537  0025BE  0100               	movlb	0	; () banked
  8538  0025C0  6F66               	movwf	set_string_data@start_point& (0+255),b
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;clcd.c: 293: end_point = (data->end_row * clcd_config_data.clcd_max_col) + data->end_co
      +                          l;
  8542  0025C2  0100               	movlb	0	; () banked
  8543  0025C4  EE20 F02E          	lfsr	2,46
  8544  0025C8  5160               	movf	set_string_data@data& (0+255),w,b
  8545  0025CA  26D9               	addwf	fsr2l,f,c
  8546  0025CC  5161               	movf	(set_string_data@data+1)& (0+255),w,b
  8547  0025CE  22DA               	addwfc	fsr2h,f,c
  8548  0025D0  50DF               	movf	indf2,w,c
  8549  0025D2  0100               	movlb	0	; () banked
  8550  0025D4  6F62               	movwf	??_set_string_data& (0+255),b
  8551  0025D6  0100               	movlb	0	; () banked
  8552  0025D8  EE20 F02D          	lfsr	2,45
  8553  0025DC  5160               	movf	set_string_data@data& (0+255),w,b
  8554  0025DE  26D9               	addwf	fsr2l,f,c
  8555  0025E0  5161               	movf	(set_string_data@data+1)& (0+255),w,b
  8556  0025E2  22DA               	addwfc	fsr2h,f,c
  8557  0025E4  50DF               	movf	indf2,w,c
  8558  0025E6  024B               	mulwf	_clcd_config_data+2,c
  8559  0025E8  50F3               	movf	prodl,w,c
  8560  0025EA  0100               	movlb	0	; () banked
  8561  0025EC  2562               	addwf	??_set_string_data& (0+255),w,b
  8562  0025EE  0100               	movlb	0	; () banked
  8563  0025F0  6F67               	movwf	set_string_data@end_point& (0+255),b
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;clcd.c: 294: uid = get_new_uid();
  8567  0025F2  EC6C  F01B         	call	_get_new_uid	;wreg free
  8568  0025F6  5024               	movf	?_get_new_uid,w,c
  8569  0025F8  0100               	movlb	0	; () banked
  8570  0025FA  6F68               	movwf	set_string_data@uid& (0+255),b
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;clcd.c: 296: printf("UID = %d, start_pt = %d, end_pt = %d\r\n", uid, start_point, end_p
      +                          oint);
  8574  0025FC  0E8E               	movlw	low STR_17
  8575  0025FE  6E2B               	movwf	printf@f,c
  8576  002600  0EFC               	movlw	high STR_17
  8577  002602  6E2C               	movwf	printf@f+1,c
  8578  002604  C068  F02D         	movff	set_string_data@uid,?_printf+2
  8579  002608  6A2E               	clrf	?_printf+3,c
  8580  00260A  C066  F02F         	movff	set_string_data@start_point,?_printf+4
  8581  00260E  6A30               	clrf	?_printf+5,c
  8582  002610  C067  F031         	movff	set_string_data@end_point,?_printf+6
  8583  002614  6A32               	clrf	?_printf+7,c
  8584  002616  EC12  F025         	call	_printf	;wreg free
  8585                           
  8586                           ;clcd.c: 298: if (data->over_write != 1) {
  8587  00261A  0100               	movlb	0	; () banked
  8588  00261C  EE20 F034          	lfsr	2,52
  8589  002620  5160               	movf	set_string_data@data& (0+255),w,b
  8590  002622  26D9               	addwf	fsr2l,f,c
  8591  002624  5161               	movf	(set_string_data@data+1)& (0+255),w,b
  8592  002626  22DA               	addwfc	fsr2h,f,c
  8593  002628  04DE               	decf	postinc2,w,c
  8594  00262A  B4D8               	btfsc	status,2,c
  8595  00262C  D05F               	goto	l8253
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;clcd.c: 299: memset(conflict_arr, -1, sizeof (conflict_arr));
  8599  00262E  0EA3               	movlw	low _conflict_arr
  8600  002630  6E24               	movwf	memset@p1,c
  8601  002632  0E01               	movlw	high _conflict_arr
  8602  002634  6E25               	movwf	memset@p1+1,c
  8603  002636  0EFF               	movlw	255
  8604  002638  6E27               	movwf	memset@c+1,c
  8605  00263A  6826               	setf	memset@c,c
  8606  00263C  0E00               	movlw	0
  8607  00263E  6E29               	movwf	memset@n+1,c
  8608  002640  0E28               	movlw	40
  8609  002642  6E28               	movwf	memset@n,c
  8610  002644  ECD8  F025         	call	_memset	;wreg free
  8611                           
  8612                           ;clcd.c: 300: conflict_data_count = 0;
  8613  002648  0E00               	movlw	0
  8614  00264A  6E42               	movwf	_conflict_data_count,c
  8615                           
  8616                           ;clcd.c: 301: if (conflict(start_point, end_point) != 1) {
  8617  00264C  C067  F039         	movff	set_string_data@end_point,conflict@new_end_point
  8618  002650  0100               	movlb	0	; () banked
  8619  002652  5166               	movf	set_string_data@start_point& (0+255),w,b
  8620  002654  EC96  F015         	call	_conflict
  8621  002658  06E8               	decf	wreg,f,c
  8622  00265A  B4D8               	btfsc	status,2,c
  8623  00265C  D045               	goto	l8249
  8624                           
  8625                           ;clcd.c: 302: if (data_count < clcd_config_data.clcd_max_display_string) {
  8626  00265E  504D               	movf	_clcd_config_data+4,w,c
  8627  002660  5C43               	subwf	_data_count,w,c
  8628  002662  B0D8               	btfsc	status,0,c
  8629  002664  D109               	goto	l8301
  8630                           
  8631                           ;clcd.c: 303: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  8632  002666  0E00               	movlw	0
  8633  002668  0100               	movlb	0	; () banked
  8634  00266A  6F6B               	movwf	set_string_data@i& (0+255),b
  8635  00266C  D037               	goto	l8247
  8636  00266E                     l8233:
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;clcd.c: 304: if (clcd_display_string_details[i].uid == 0) {
  8640  00266E  0100               	movlb	0	; () banked
  8641  002670  516B               	movf	set_string_data@i& (0+255),w,b
  8642  002672  0D39               	mullw	57
  8643  002674  0E99               	movlw	low _clcd_display_string_details
  8644  002676  24F3               	addwf	prodl,w,c
  8645  002678  6ED9               	movwf	fsr2l,c
  8646  00267A  0E05               	movlw	high _clcd_display_string_details
  8647  00267C  20F4               	addwfc	prodh,w,c
  8648  00267E  6EDA               	movwf	fsr2h,c
  8649  002680  50DE               	movf	postinc2,w,c
  8650  002682  10DE               	iorwf	postinc2,w,c
  8651  002684  A4D8               	btfss	status,2,c
  8652  002686  D028               	goto	l8245
  8653                           
  8654                           ; BSR set to: 0
  8655                           ;clcd.c: 305: memset(&clcd_display_string_details[i], 0, sizeof (CLCD_STRING_DISPLAY_DET
      +                          AILS));
  8656  002688  0100               	movlb	0	; () banked
  8657  00268A  516B               	movf	set_string_data@i& (0+255),w,b
  8658  00268C  0D39               	mullw	57
  8659  00268E  0E99               	movlw	low _clcd_display_string_details
  8660  002690  24F3               	addwf	prodl,w,c
  8661  002692  6E24               	movwf	memset@p1,c
  8662  002694  0E05               	movlw	high _clcd_display_string_details
  8663  002696  20F4               	addwfc	prodh,w,c
  8664  002698  6E25               	movwf	memset@p1+1,c
  8665  00269A  0E00               	movlw	0
  8666  00269C  6E27               	movwf	memset@c+1,c
  8667  00269E  0E00               	movlw	0
  8668  0026A0  6E26               	movwf	memset@c,c
  8669  0026A2  0E00               	movlw	0
  8670  0026A4  6E29               	movwf	memset@n+1,c
  8671  0026A6  0E39               	movlw	57
  8672  0026A8  6E28               	movwf	memset@n,c
  8673  0026AA  ECD8  F025         	call	_memset	;wreg free
  8674                           
  8675                           ;clcd.c: 306: copy_display_struct(&clcd_display_string_details[i], data, uid);
  8676  0026AE  0100               	movlb	0	; () banked
  8677  0026B0  516B               	movf	set_string_data@i& (0+255),w,b
  8678  0026B2  0D39               	mullw	57
  8679  0026B4  0E99               	movlw	low _clcd_display_string_details
  8680  0026B6  24F3               	addwf	prodl,w,c
  8681  0026B8  6E39               	movwf	copy_display_struct@clcd_str_data,c
  8682  0026BA  0E05               	movlw	high _clcd_display_string_details
  8683  0026BC  20F4               	addwfc	prodh,w,c
  8684  0026BE  6E3A               	movwf	copy_display_struct@clcd_str_data+1,c
  8685  0026C0  C060  F03B         	movff	set_string_data@data,copy_display_struct@data
  8686  0026C4  C061  F03C         	movff	set_string_data@data+1,copy_display_struct@data+1
  8687  0026C8  C068  F03D         	movff	set_string_data@uid,copy_display_struct@uid
  8688  0026CC  EC10  F018         	call	_copy_display_struct	;wreg free
  8689                           
  8690                           ;clcd.c: 307: data_count++;
  8691  0026D0  2A43               	incf	_data_count,f,c
  8692                           
  8693                           ;clcd.c: 308: return uid;
  8694  0026D2  0100               	movlb	0	; () banked
  8695  0026D4  5168               	movf	set_string_data@uid& (0+255),w,b
  8696                           
  8697                           ; BSR set to: 0
  8698  0026D6  0012               	return	
  8699  0026D8                     l8245:
  8700                           
  8701                           ; BSR set to: 0
  8702  0026D8  0100               	movlb	0	; () banked
  8703  0026DA  2B6B               	incf	set_string_data@i& (0+255),f,b
  8704  0026DC                     l8247:
  8705                           
  8706                           ; BSR set to: 0
  8707  0026DC  504D               	movf	_clcd_config_data+4,w,c
  8708  0026DE  0100               	movlb	0	; () banked
  8709  0026E0  5D6B               	subwf	set_string_data@i& (0+255),w,b
  8710  0026E2  B0D8               	btfsc	status,0,c
  8711  0026E4  D0C9               	goto	l8301
  8712  0026E6  D7C3               	goto	l8233
  8713  0026E8                     l8249:
  8714                           
  8715                           ;clcd.c: 315: return 200;
  8716  0026E8  0EC8               	movlw	200
  8717  0026EA  0012               	return	
  8718  0026EC                     l8253:
  8719                           
  8720                           ;clcd.c: 318: if (conflict_data_count != 0) {
  8721  0026EC  5042               	movf	_conflict_data_count,w,c
  8722  0026EE  B4D8               	btfsc	status,2,c
  8723  0026F0  D0B6               	goto	l8289
  8724                           
  8725                           ;clcd.c: 320: printf("conflict...2\r\n");
  8726  0026F2  0E5A               	movlw	low STR_18
  8727  0026F4  6E2B               	movwf	printf@f,c
  8728  0026F6  0EFE               	movlw	high STR_18
  8729  0026F8  6E2C               	movwf	printf@f+1,c
  8730  0026FA  EC12  F025         	call	_printf	;wreg free
  8731                           
  8732                           ;clcd.c: 322: int conflict_count = 0, j;
  8733  0026FE  0E00               	movlw	0
  8734  002700  0100               	movlb	0	; () banked
  8735  002702  6F6A               	movwf	(set_string_data@conflict_count+1)& (0+255),b
  8736  002704  0E00               	movlw	0
  8737  002706  6F69               	movwf	set_string_data@conflict_count& (0+255),b
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;clcd.c: 323: for (conflict_count = 0; conflict_count < conflict_data_count; conflict_co
      +                          unt++) {
  8741  002708  0E00               	movlw	0
  8742  00270A  0100               	movlb	0	; () banked
  8743  00270C  6F6A               	movwf	(set_string_data@conflict_count+1)& (0+255),b
  8744  00270E  0E00               	movlw	0
  8745  002710  6F69               	movwf	set_string_data@conflict_count& (0+255),b
  8746  002712  D080               	goto	l8277
  8747  002714                     l8261:
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;clcd.c: 324: for (j = 0; j < clcd_config_data.clcd_max_display_string; j++) {
  8751  002714  0E00               	movlw	0
  8752  002716  0100               	movlb	0	; () banked
  8753  002718  6F6D               	movwf	(set_string_data@j+1)& (0+255),b
  8754  00271A  0E00               	movlw	0
  8755  00271C  6F6C               	movwf	set_string_data@j& (0+255),b
  8756  00271E  D063               	goto	l8273
  8757  002720                     l8263:
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;clcd.c: 325: if (clcd_display_string_details[j].uid == conflict_arr[conflict_count]) {
  8761  002720  90D8               	bcf	status,0,c
  8762  002722  0100               	movlb	0	; () banked
  8763  002724  3569               	rlcf	set_string_data@conflict_count& (0+255),w,b
  8764  002726  6ED9               	movwf	fsr2l,c
  8765  002728  0100               	movlb	0	; () banked
  8766  00272A  356A               	rlcf	(set_string_data@conflict_count+1)& (0+255),w,b
  8767  00272C  6EDA               	movwf	fsr2h,c
  8768  00272E  0EA3               	movlw	low _conflict_arr
  8769  002730  26D9               	addwf	fsr2l,f,c
  8770  002732  0E01               	movlw	high _conflict_arr
  8771  002734  22DA               	addwfc	fsr2h,f,c
  8772  002736  C06C  F018         	movff	set_string_data@j,___wmul@multiplier
  8773  00273A  C06D  F019         	movff	set_string_data@j+1,___wmul@multiplier+1
  8774  00273E  0E00               	movlw	0
  8775  002740  6E1B               	movwf	___wmul@multiplicand+1,c
  8776  002742  0E39               	movlw	57
  8777  002744  6E1A               	movwf	___wmul@multiplicand,c
  8778  002746  EC04  F026         	call	___wmul	;wreg free
  8779  00274A  0E99               	movlw	low _clcd_display_string_details
  8780  00274C  2418               	addwf	?___wmul,w,c
  8781  00274E  6EE1               	movwf	fsr1l,c
  8782  002750  0E05               	movlw	high _clcd_display_string_details
  8783  002752  2019               	addwfc	?___wmul+1,w,c
  8784  002754  6EE2               	movwf	fsr1h,c
  8785  002756  50DE               	movf	postinc2,w,c
  8786  002758  18E6               	xorwf	postinc1,w,c
  8787  00275A  E142               	bnz	l8271
  8788  00275C  50DE               	movf	postinc2,w,c
  8789  00275E  18E6               	xorwf	postinc1,w,c
  8790  002760  A4D8               	btfss	status,2,c
  8791  002762  D03E               	goto	l8271
  8792                           
  8793                           ;clcd.c: 327: printf("%d..j=%d,conflict_count=%d \r\n", clcd_display_string_details[j].u
      +                          id, j, conflict_count);
  8794  002764  0EB5               	movlw	low STR_19
  8795  002766  6E2B               	movwf	printf@f,c
  8796  002768  0EFC               	movlw	high STR_19
  8797  00276A  6E2C               	movwf	printf@f+1,c
  8798  00276C  C06C  F018         	movff	set_string_data@j,___wmul@multiplier
  8799  002770  C06D  F019         	movff	set_string_data@j+1,___wmul@multiplier+1
  8800  002774  0E00               	movlw	0
  8801  002776  6E1B               	movwf	___wmul@multiplicand+1,c
  8802  002778  0E39               	movlw	57
  8803  00277A  6E1A               	movwf	___wmul@multiplicand,c
  8804  00277C  EC04  F026         	call	___wmul	;wreg free
  8805  002780  0E99               	movlw	low _clcd_display_string_details
  8806  002782  2418               	addwf	?___wmul,w,c
  8807  002784  6ED9               	movwf	fsr2l,c
  8808  002786  0E05               	movlw	high _clcd_display_string_details
  8809  002788  2019               	addwfc	?___wmul+1,w,c
  8810  00278A  6EDA               	movwf	fsr2h,c
  8811  00278C  CFDE F02D          	movff	postinc2,?_printf+2
  8812  002790  CFDD F02E          	movff	postdec2,?_printf+3
  8813  002794  C06C  F02F         	movff	set_string_data@j,?_printf+4
  8814  002798  C06D  F030         	movff	set_string_data@j+1,?_printf+5
  8815  00279C  C069  F031         	movff	set_string_data@conflict_count,?_printf+6
  8816  0027A0  C06A  F032         	movff	set_string_data@conflict_count+1,?_printf+7
  8817  0027A4  EC12  F025         	call	_printf	;wreg free
  8818                           
  8819                           ;clcd.c: 329: memset(&clcd_display_string_details[j], 0, sizeof (CLCD_STRING_DISPLAY_DET
      +                          AILS));
  8820  0027A8  C06C  F018         	movff	set_string_data@j,___wmul@multiplier
  8821  0027AC  C06D  F019         	movff	set_string_data@j+1,___wmul@multiplier+1
  8822  0027B0  0E00               	movlw	0
  8823  0027B2  6E1B               	movwf	___wmul@multiplicand+1,c
  8824  0027B4  0E39               	movlw	57
  8825  0027B6  6E1A               	movwf	___wmul@multiplicand,c
  8826  0027B8  EC04  F026         	call	___wmul	;wreg free
  8827  0027BC  0E99               	movlw	low _clcd_display_string_details
  8828  0027BE  2418               	addwf	?___wmul,w,c
  8829  0027C0  6E24               	movwf	memset@p1,c
  8830  0027C2  0E05               	movlw	high _clcd_display_string_details
  8831  0027C4  2019               	addwfc	?___wmul+1,w,c
  8832  0027C6  6E25               	movwf	memset@p1+1,c
  8833  0027C8  0E00               	movlw	0
  8834  0027CA  6E27               	movwf	memset@c+1,c
  8835  0027CC  0E00               	movlw	0
  8836  0027CE  6E26               	movwf	memset@c,c
  8837  0027D0  0E00               	movlw	0
  8838  0027D2  6E29               	movwf	memset@n+1,c
  8839  0027D4  0E39               	movlw	57
  8840  0027D6  6E28               	movwf	memset@n,c
  8841  0027D8  ECD8  F025         	call	_memset	;wreg free
  8842                           
  8843                           ;clcd.c: 330: data_count--;
  8844  0027DC  0643               	decf	_data_count,f,c
  8845                           
  8846                           ;clcd.c: 331: break;
  8847  0027DE  D017               	goto	l8275
  8848  0027E0                     l8271:
  8849  0027E0  0100               	movlb	0	; () banked
  8850  0027E2  4B6C               	infsnz	set_string_data@j& (0+255),f,b
  8851  0027E4  2B6D               	incf	(set_string_data@j+1)& (0+255),f,b
  8852  0027E6                     l8273:
  8853                           
  8854                           ; BSR set to: 0
  8855  0027E6  504D               	movf	_clcd_config_data+4,w,c
  8856  0027E8  0100               	movlb	0	; () banked
  8857  0027EA  6F62               	movwf	??_set_string_data& (0+255),b
  8858  0027EC  6B63               	clrf	(??_set_string_data+1)& (0+255),b
  8859  0027EE  0100               	movlb	0	; () banked
  8860  0027F0  5162               	movf	??_set_string_data& (0+255),w,b
  8861  0027F2  0100               	movlb	0	; () banked
  8862  0027F4  5D6C               	subwf	set_string_data@j& (0+255),w,b
  8863  0027F6  0100               	movlb	0	; () banked
  8864  0027F8  516D               	movf	(set_string_data@j+1)& (0+255),w,b
  8865  0027FA  0A80               	xorlw	128
  8866  0027FC  0100               	movlb	0	; () banked
  8867  0027FE  6F64               	movwf	(??_set_string_data+2)& (0+255),b
  8868  002800  0100               	movlb	0	; () banked
  8869  002802  5163               	movf	(??_set_string_data+1)& (0+255),w,b
  8870  002804  0A80               	xorlw	128
  8871  002806  0100               	movlb	0	; () banked
  8872  002808  5964               	subwfb	(??_set_string_data+2)& (0+255),w,b
  8873  00280A  A0D8               	btfss	status,0,c
  8874  00280C  D789               	goto	l8263
  8875  00280E                     l8275:
  8876  00280E  0100               	movlb	0	; () banked
  8877  002810  4B69               	infsnz	set_string_data@conflict_count& (0+255),f,b
  8878  002812  2B6A               	incf	(set_string_data@conflict_count+1)& (0+255),f,b
  8879  002814                     l8277:
  8880                           
  8881                           ; BSR set to: 0
  8882  002814  5042               	movf	_conflict_data_count,w,c
  8883  002816  0100               	movlb	0	; () banked
  8884  002818  6F62               	movwf	??_set_string_data& (0+255),b
  8885  00281A  6B63               	clrf	(??_set_string_data+1)& (0+255),b
  8886  00281C  0100               	movlb	0	; () banked
  8887  00281E  5162               	movf	??_set_string_data& (0+255),w,b
  8888  002820  0100               	movlb	0	; () banked
  8889  002822  5D69               	subwf	set_string_data@conflict_count& (0+255),w,b
  8890  002824  0100               	movlb	0	; () banked
  8891  002826  516A               	movf	(set_string_data@conflict_count+1)& (0+255),w,b
  8892  002828  0A80               	xorlw	128
  8893  00282A  0100               	movlb	0	; () banked
  8894  00282C  6F64               	movwf	(??_set_string_data+2)& (0+255),b
  8895  00282E  0100               	movlb	0	; () banked
  8896  002830  5163               	movf	(??_set_string_data+1)& (0+255),w,b
  8897  002832  0A80               	xorlw	128
  8898  002834  0100               	movlb	0	; () banked
  8899  002836  5964               	subwfb	(??_set_string_data+2)& (0+255),w,b
  8900  002838  A0D8               	btfss	status,0,c
  8901  00283A  D76C               	goto	l8261
  8902                           
  8903                           ; BSR set to: 0
  8904                           ;clcd.c: 332: }
  8905                           ;clcd.c: 333: }
  8906                           ;clcd.c: 334: }
  8907                           ;clcd.c: 335: memset(conflict_arr, -1, sizeof (conflict_arr));
  8908                           
  8909                           ; BSR set to: 0
  8910  00283C  0EA3               	movlw	low _conflict_arr
  8911  00283E  6E24               	movwf	memset@p1,c
  8912  002840  0E01               	movlw	high _conflict_arr
  8913  002842  6E25               	movwf	memset@p1+1,c
  8914  002844  0EFF               	movlw	255
  8915  002846  6E27               	movwf	memset@c+1,c
  8916  002848  6826               	setf	memset@c,c
  8917  00284A  0E00               	movlw	0
  8918  00284C  6E29               	movwf	memset@n+1,c
  8919  00284E  0E28               	movlw	40
  8920  002850  6E28               	movwf	memset@n,c
  8921  002852  ECD8  F025         	call	_memset	;wreg free
  8922                           
  8923                           ;clcd.c: 336: conflict_data_count = 0;
  8924  002856  0E00               	movlw	0
  8925  002858  6E42               	movwf	_conflict_data_count,c
  8926                           
  8927                           ;clcd.c: 337: return 202;
  8928  00285A  0ECA               	movlw	202
  8929  00285C  0012               	return	
  8930  00285E                     l8289:
  8931                           
  8932                           ;clcd.c: 339: if (conflict(start_point, end_point) == 1) {
  8933  00285E  C067  F039         	movff	set_string_data@end_point,conflict@new_end_point
  8934  002862  0100               	movlb	0	; () banked
  8935  002864  5166               	movf	set_string_data@start_point& (0+255),w,b
  8936  002866  EC96  F015         	call	_conflict
  8937  00286A  06E8               	decf	wreg,f,c
  8938  00286C  A4D8               	btfss	status,2,c
  8939  00286E  D002               	goto	l8297
  8940                           
  8941                           ;clcd.c: 341: return 201;
  8942  002870  0EC9               	movlw	201
  8943  002872  0012               	return	
  8944  002874                     l8297:
  8945                           
  8946                           ;clcd.c: 343: return 203;
  8947  002874  0ECB               	movlw	203
  8948  002876  0012               	return	
  8949  002878                     l8301:
  8950                           
  8951                           ;clcd.c: 344: }
  8952                           ;clcd.c: 345: }
  8953                           ;clcd.c: 346: }
  8954                           ;clcd.c: 347: return 0;
  8955  002878  0E00               	movlw	0
  8956  00287A  0012               	return	
  8957  00287C                     __end_of_set_string_data:
  8958                           	opt stack 0
  8959                           tblptru	equ	0xFF8
  8960                           tblptrh	equ	0xFF7
  8961                           tblptrl	equ	0xFF6
  8962                           tablat	equ	0xFF5
  8963                           prodh	equ	0xFF4
  8964                           prodl	equ	0xFF3
  8965                           intcon	equ	0xFF2
  8966                           postinc0	equ	0xFEE
  8967                           wreg	equ	0xFE8
  8968                           indf1	equ	0xFE7
  8969                           postinc1	equ	0xFE6
  8970                           postdec1	equ	0xFE5
  8971                           fsr1h	equ	0xFE2
  8972                           fsr1l	equ	0xFE1
  8973                           indf2	equ	0xFDF
  8974                           postinc2	equ	0xFDE
  8975                           postdec2	equ	0xFDD
  8976                           fsr2h	equ	0xFDA
  8977                           fsr2l	equ	0xFD9
  8978                           status	equ	0xFD8
  8979                           
  8980 ;; *************** function _get_new_uid *****************
  8981 ;; Defined at:
  8982 ;;		line 249 in file "clcd.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;		None
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;  i               2   42[COMRAM] int 
  8987 ;;  uid             2   40[COMRAM] int 
  8988 ;; Return value:  Size  Location     Type
  8989 ;;                  2   35[COMRAM] int 
  8990 ;; Registers used:
  8991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8992 ;; Tracked objects:
  8993 ;;		On entry : 0/0
  8994 ;;		On exit  : 0/0
  8995 ;;		Unchanged: 0/0
  8996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8997 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9001 ;;Total ram usage:        9 bytes
  9002 ;; Hardware stack levels used:    1
  9003 ;; Hardware stack levels required when called:    7
  9004 ;; This function calls:
  9005 ;;		___awmod
  9006 ;;		___wmul
  9007 ;;		_rand
  9008 ;;		_srand
  9009 ;; This function is called by:
  9010 ;;		_set_string_data
  9011 ;; This function uses a non-reentrant model
  9012 ;;
  9013                           
  9014                           	psect	text23
  9015  0036D8                     __ptext23:
  9016                           	opt stack 0
  9017  0036D8                     _get_new_uid:
  9018                           	opt stack 20
  9019                           
  9020                           ;clcd.c: 250: int i = 1;
  9021                           
  9022                           ;incstack = 0
  9023  0036D8  0E00               	movlw	0
  9024  0036DA  6E2C               	movwf	get_new_uid@i+1,c
  9025  0036DC  0E01               	movlw	1
  9026  0036DE  6E2B               	movwf	get_new_uid@i,c
  9027                           
  9028                           ;clcd.c: 251: srand(i);
  9029  0036E0  C02B  F010         	movff	get_new_uid@i,srand@x
  9030  0036E4  C02C  F011         	movff	get_new_uid@i+1,srand@x+1
  9031  0036E8  ECD7  F026         	call	_srand	;wreg free
  9032                           
  9033                           ;clcd.c: 252: int uid = (rand() % 100) + 1;
  9034  0036EC  EC6B  F022         	call	_rand	;wreg free
  9035  0036F0  C01C  F01E         	movff	?_rand,___awmod@dividend
  9036  0036F4  C01D  F01F         	movff	?_rand+1,___awmod@dividend+1
  9037  0036F8  0E00               	movlw	0
  9038  0036FA  6E21               	movwf	___awmod@divisor+1,c
  9039  0036FC  0E64               	movlw	100
  9040  0036FE  6E20               	movwf	___awmod@divisor,c
  9041  003700  EC6B  F021         	call	___awmod	;wreg free
  9042  003704  D053               	goto	L9
  9043  003706                     l7943:
  9044                           
  9045                           ;clcd.c: 253: for (i = 0; i < clcd_config_data.clcd_max_display_string;) {
  9046  003706  0E00               	movlw	0
  9047  003708  6E2C               	movwf	get_new_uid@i+1,c
  9048  00370A  0E00               	movlw	0
  9049  00370C  6E2B               	movwf	get_new_uid@i,c
  9050  00370E  D055               	goto	l7963
  9051  003710                     l7945:
  9052                           
  9053                           ;clcd.c: 254: if (clcd_display_string_details[i].uid != 0 && clcd_display_string_details
      +                          [i].uid != uid) {
  9054  003710  C02B  F018         	movff	get_new_uid@i,___wmul@multiplier
  9055  003714  C02C  F019         	movff	get_new_uid@i+1,___wmul@multiplier+1
  9056  003718  0E00               	movlw	0
  9057  00371A  6E1B               	movwf	___wmul@multiplicand+1,c
  9058  00371C  0E39               	movlw	57
  9059  00371E  6E1A               	movwf	___wmul@multiplicand,c
  9060  003720  EC04  F026         	call	___wmul	;wreg free
  9061  003724  0E99               	movlw	low _clcd_display_string_details
  9062  003726  2418               	addwf	?___wmul,w,c
  9063  003728  6ED9               	movwf	fsr2l,c
  9064  00372A  0E05               	movlw	high _clcd_display_string_details
  9065  00372C  2019               	addwfc	?___wmul+1,w,c
  9066  00372E  6EDA               	movwf	fsr2h,c
  9067  003730  50DE               	movf	postinc2,w,c
  9068  003732  10DE               	iorwf	postinc2,w,c
  9069  003734  B4D8               	btfsc	status,2,c
  9070  003736  D017               	goto	l7953
  9071  003738  C02B  F018         	movff	get_new_uid@i,___wmul@multiplier
  9072  00373C  C02C  F019         	movff	get_new_uid@i+1,___wmul@multiplier+1
  9073  003740  0E00               	movlw	0
  9074  003742  6E1B               	movwf	___wmul@multiplicand+1,c
  9075  003744  0E39               	movlw	57
  9076  003746  6E1A               	movwf	___wmul@multiplicand,c
  9077  003748  EC04  F026         	call	___wmul	;wreg free
  9078  00374C  0E99               	movlw	low _clcd_display_string_details
  9079  00374E  2418               	addwf	?___wmul,w,c
  9080  003750  6ED9               	movwf	fsr2l,c
  9081  003752  0E05               	movlw	high _clcd_display_string_details
  9082  003754  2019               	addwfc	?___wmul+1,w,c
  9083  003756  6EDA               	movwf	fsr2h,c
  9084  003758  5029               	movf	get_new_uid@uid,w,c
  9085  00375A  18DE               	xorwf	postinc2,w,c
  9086  00375C  E118               	bnz	l7955
  9087  00375E  502A               	movf	get_new_uid@uid+1,w,c
  9088  003760  18DE               	xorwf	postinc2,w,c
  9089  003762  A4D8               	btfss	status,2,c
  9090  003764  D014               	goto	l7955
  9091  003766                     l7953:
  9092  003766  C02B  F018         	movff	get_new_uid@i,___wmul@multiplier
  9093  00376A  C02C  F019         	movff	get_new_uid@i+1,___wmul@multiplier+1
  9094  00376E  0E00               	movlw	0
  9095  003770  6E1B               	movwf	___wmul@multiplicand+1,c
  9096  003772  0E39               	movlw	57
  9097  003774  6E1A               	movwf	___wmul@multiplicand,c
  9098  003776  EC04  F026         	call	___wmul	;wreg free
  9099  00377A  0E99               	movlw	low _clcd_display_string_details
  9100  00377C  2418               	addwf	?___wmul,w,c
  9101  00377E  6ED9               	movwf	fsr2l,c
  9102  003780  0E05               	movlw	high _clcd_display_string_details
  9103  003782  2019               	addwfc	?___wmul+1,w,c
  9104  003784  6EDA               	movwf	fsr2h,c
  9105  003786  50DE               	movf	postinc2,w,c
  9106  003788  10DE               	iorwf	postinc2,w,c
  9107  00378A  A4D8               	btfss	status,2,c
  9108  00378C  D003               	goto	l7959
  9109  00378E                     l7955:
  9110                           
  9111                           ;clcd.c: 258: i++;
  9112  00378E  4A2B               	infsnz	get_new_uid@i,f,c
  9113  003790  2A2C               	incf	get_new_uid@i+1,f,c
  9114                           
  9115                           ;clcd.c: 260: } else {
  9116                           
  9117                           ;clcd.c: 259: continue;
  9118  003792  D013               	goto	l7963
  9119  003794                     l7959:
  9120                           
  9121                           ;clcd.c: 261: uid = (rand() % 100) + 1;
  9122  003794  EC6B  F022         	call	_rand	;wreg free
  9123  003798  C01C  F01E         	movff	?_rand,___awmod@dividend
  9124  00379C  C01D  F01F         	movff	?_rand+1,___awmod@dividend+1
  9125  0037A0  0E00               	movlw	0
  9126  0037A2  6E21               	movwf	___awmod@divisor+1,c
  9127  0037A4  0E64               	movlw	100
  9128  0037A6  6E20               	movwf	___awmod@divisor,c
  9129  0037A8  EC6B  F021         	call	___awmod	;wreg free
  9130  0037AC                     L9:
  9131  0037AC  0E01               	movlw	1
  9132  0037AE  241E               	addwf	?___awmod,w,c
  9133  0037B0  6E29               	movwf	get_new_uid@uid,c
  9134  0037B2  0E00               	movlw	0
  9135  0037B4  201F               	addwfc	?___awmod+1,w,c
  9136  0037B6  6E2A               	movwf	get_new_uid@uid+1,c
  9137  0037B8  D7A6               	goto	l7943
  9138  0037BA                     l7963:
  9139  0037BA  504D               	movf	_clcd_config_data+4,w,c
  9140  0037BC  6E26               	movwf	??_get_new_uid& (0+255),c
  9141  0037BE  6A27               	clrf	(??_get_new_uid+1)& (0+255),c
  9142  0037C0  5026               	movf	??_get_new_uid,w,c
  9143  0037C2  5C2B               	subwf	get_new_uid@i,w,c
  9144  0037C4  502C               	movf	get_new_uid@i+1,w,c
  9145  0037C6  0A80               	xorlw	128
  9146  0037C8  6E28               	movwf	(??_get_new_uid+2)& (0+255),c
  9147  0037CA  5027               	movf	??_get_new_uid+1,w,c
  9148  0037CC  0A80               	xorlw	128
  9149  0037CE  5828               	subwfb	(??_get_new_uid+2)& (0+255),w,c
  9150  0037D0  A0D8               	btfss	status,0,c
  9151  0037D2  D79E               	goto	l7945
  9152                           
  9153                           ;clcd.c: 264: }
  9154                           ;clcd.c: 265: }
  9155                           ;clcd.c: 266: return uid;
  9156  0037D4  C029  F024         	movff	get_new_uid@uid,?_get_new_uid
  9157  0037D8  C02A  F025         	movff	get_new_uid@uid+1,?_get_new_uid+1
  9158  0037DC  0012               	return		;funcret
  9159  0037DE                     __end_of_get_new_uid:
  9160                           	opt stack 0
  9161                           tblptru	equ	0xFF8
  9162                           tblptrh	equ	0xFF7
  9163                           tblptrl	equ	0xFF6
  9164                           tablat	equ	0xFF5
  9165                           prodh	equ	0xFF4
  9166                           prodl	equ	0xFF3
  9167                           intcon	equ	0xFF2
  9168                           postinc0	equ	0xFEE
  9169                           wreg	equ	0xFE8
  9170                           indf1	equ	0xFE7
  9171                           postinc1	equ	0xFE6
  9172                           postdec1	equ	0xFE5
  9173                           fsr1h	equ	0xFE2
  9174                           fsr1l	equ	0xFE1
  9175                           indf2	equ	0xFDF
  9176                           postinc2	equ	0xFDE
  9177                           postdec2	equ	0xFDD
  9178                           fsr2h	equ	0xFDA
  9179                           fsr2l	equ	0xFD9
  9180                           status	equ	0xFD8
  9181                           
  9182 ;; *************** function _srand *****************
  9183 ;; Defined at:
  9184 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\rand.c"
  9185 ;; Parameters:    Size  Location     Type
  9186 ;;  x               2   15[COMRAM] unsigned int 
  9187 ;; Auto vars:     Size  Location     Type
  9188 ;;		None
  9189 ;; Return value:  Size  Location     Type
  9190 ;;                  1    wreg      void 
  9191 ;; Registers used:
  9192 ;;		status,2
  9193 ;; Tracked objects:
  9194 ;;		On entry : 0/0
  9195 ;;		On exit  : 0/0
  9196 ;;		Unchanged: 0/0
  9197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9198 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9201 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9202 ;;Total ram usage:        2 bytes
  9203 ;; Hardware stack levels used:    1
  9204 ;; Hardware stack levels required when called:    5
  9205 ;; This function calls:
  9206 ;;		Nothing
  9207 ;; This function is called by:
  9208 ;;		_get_new_uid
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           	psect	text24
  9213  004DAE                     __ptext24:
  9214                           	opt stack 0
  9215  004DAE                     _srand:
  9216                           	opt stack 21
  9217                           
  9218                           ;incstack = 0
  9219  004DAE  C010  F1DA         	movff	srand@x,_randx
  9220  004DB2  C011  F1DB         	movff	srand@x+1,_randx+1
  9221  004DB6  0101               	movlb	1	; () banked
  9222  004DB8  6BDC               	clrf	(_randx+2)& (0+255),b
  9223  004DBA  6BDD               	clrf	(_randx+3)& (0+255),b
  9224                           
  9225                           ; BSR set to: 1
  9226  004DBC  0012               	return		;funcret
  9227  004DBE                     __end_of_srand:
  9228                           	opt stack 0
  9229                           tblptru	equ	0xFF8
  9230                           tblptrh	equ	0xFF7
  9231                           tblptrl	equ	0xFF6
  9232                           tablat	equ	0xFF5
  9233                           prodh	equ	0xFF4
  9234                           prodl	equ	0xFF3
  9235                           intcon	equ	0xFF2
  9236                           postinc0	equ	0xFEE
  9237                           wreg	equ	0xFE8
  9238                           indf1	equ	0xFE7
  9239                           postinc1	equ	0xFE6
  9240                           postdec1	equ	0xFE5
  9241                           fsr1h	equ	0xFE2
  9242                           fsr1l	equ	0xFE1
  9243                           indf2	equ	0xFDF
  9244                           postinc2	equ	0xFDE
  9245                           postdec2	equ	0xFDD
  9246                           fsr2h	equ	0xFDA
  9247                           fsr2l	equ	0xFD9
  9248                           status	equ	0xFD8
  9249                           
  9250 ;; *************** function _rand *****************
  9251 ;; Defined at:
  9252 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\rand.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;		None
  9255 ;; Auto vars:     Size  Location     Type
  9256 ;;		None
  9257 ;; Return value:  Size  Location     Type
  9258 ;;                  2   27[COMRAM] int 
  9259 ;; Registers used:
  9260 ;;		wreg, status,2, status,0, cstack
  9261 ;; Tracked objects:
  9262 ;;		On entry : 0/0
  9263 ;;		On exit  : 0/0
  9264 ;;		Unchanged: 0/0
  9265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9266 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;Total ram usage:        2 bytes
  9271 ;; Hardware stack levels used:    1
  9272 ;; Hardware stack levels required when called:    6
  9273 ;; This function calls:
  9274 ;;		___lmul
  9275 ;; This function is called by:
  9276 ;;		_get_new_uid
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280                           	psect	text25
  9281  0044D6                     __ptext25:
  9282                           	opt stack 0
  9283  0044D6                     _rand:
  9284                           	opt stack 20
  9285                           
  9286                           ; BSR set to: 1
  9287                           ;incstack = 0
  9288  0044D6  C1DA  F010         	movff	_randx,___lmul@multiplier
  9289  0044DA  C1DB  F011         	movff	_randx+1,___lmul@multiplier+1
  9290  0044DE  C1DC  F012         	movff	_randx+2,___lmul@multiplier+2
  9291  0044E2  C1DD  F013         	movff	_randx+3,___lmul@multiplier+3
  9292  0044E6  0E6D               	movlw	109
  9293  0044E8  6E14               	movwf	___lmul@multiplicand,c
  9294  0044EA  0E4E               	movlw	78
  9295  0044EC  6E15               	movwf	___lmul@multiplicand+1,c
  9296  0044EE  0EC6               	movlw	198
  9297  0044F0  6E16               	movwf	___lmul@multiplicand+2,c
  9298  0044F2  0E41               	movlw	65
  9299  0044F4  6E17               	movwf	___lmul@multiplicand+3,c
  9300  0044F6  EC97  F022         	call	___lmul	;wreg free
  9301  0044FA  C010  F1DA         	movff	?___lmul,_randx
  9302  0044FE  C011  F1DB         	movff	?___lmul+1,_randx+1
  9303  004502  C012  F1DC         	movff	?___lmul+2,_randx+2
  9304  004506  C013  F1DD         	movff	?___lmul+3,_randx+3
  9305  00450A  0E39               	movlw	57
  9306  00450C  0101               	movlb	1	; () banked
  9307  00450E  27DA               	addwf	_randx& (0+255),f,b
  9308  004510  0E30               	movlw	48
  9309  004512  23DB               	addwfc	(_randx+1)& (0+255),f,b
  9310  004514  0E00               	movlw	0
  9311  004516  23DC               	addwfc	(_randx+2)& (0+255),f,b
  9312  004518  0E00               	movlw	0
  9313  00451A  23DD               	addwfc	(_randx+3)& (0+255),f,b
  9314                           
  9315                           ; BSR set to: 1
  9316  00451C  0EFF               	movlw	255
  9317  00451E  0101               	movlb	1	; () banked
  9318  004520  15DC               	andwf	(_randx+2)& (0+255),w,b
  9319  004522  6E1C               	movwf	?_rand,c
  9320  004524  0E7F               	movlw	127
  9321  004526  0101               	movlb	1	; () banked
  9322  004528  15DD               	andwf	(_randx+3)& (0+255),w,b
  9323  00452A  6E1D               	movwf	?_rand+1,c
  9324  00452C  0012               	return	
  9325  00452E                     __end_of_rand:
  9326                           	opt stack 0
  9327                           tblptru	equ	0xFF8
  9328                           tblptrh	equ	0xFF7
  9329                           tblptrl	equ	0xFF6
  9330                           tablat	equ	0xFF5
  9331                           prodh	equ	0xFF4
  9332                           prodl	equ	0xFF3
  9333                           intcon	equ	0xFF2
  9334                           postinc0	equ	0xFEE
  9335                           wreg	equ	0xFE8
  9336                           indf1	equ	0xFE7
  9337                           postinc1	equ	0xFE6
  9338                           postdec1	equ	0xFE5
  9339                           fsr1h	equ	0xFE2
  9340                           fsr1l	equ	0xFE1
  9341                           indf2	equ	0xFDF
  9342                           postinc2	equ	0xFDE
  9343                           postdec2	equ	0xFDD
  9344                           fsr2h	equ	0xFDA
  9345                           fsr2l	equ	0xFD9
  9346                           status	equ	0xFD8
  9347                           
  9348 ;; *************** function ___lmul *****************
  9349 ;; Defined at:
  9350 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul32.c"
  9351 ;; Parameters:    Size  Location     Type
  9352 ;;  multiplier      4   15[COMRAM] unsigned long 
  9353 ;;  multiplicand    4   19[COMRAM] unsigned long 
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;  product         4   23[COMRAM] unsigned long 
  9356 ;; Return value:  Size  Location     Type
  9357 ;;                  4   15[COMRAM] unsigned long 
  9358 ;; Registers used:
  9359 ;;		wreg, status,2, status,0
  9360 ;; Tracked objects:
  9361 ;;		On entry : 0/0
  9362 ;;		On exit  : 0/0
  9363 ;;		Unchanged: 0/0
  9364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9365 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9368 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9369 ;;Total ram usage:       12 bytes
  9370 ;; Hardware stack levels used:    1
  9371 ;; Hardware stack levels required when called:    5
  9372 ;; This function calls:
  9373 ;;		Nothing
  9374 ;; This function is called by:
  9375 ;;		_rand
  9376 ;; This function uses a non-reentrant model
  9377 ;;
  9378                           
  9379                           	psect	text26
  9380  00452E                     __ptext26:
  9381                           	opt stack 0
  9382  00452E                     ___lmul:
  9383                           	opt stack 20
  9384                           
  9385                           ; BSR set to: 1
  9386                           ;incstack = 0
  9387  00452E  0E00               	movlw	0
  9388  004530  6E18               	movwf	___lmul@product,c
  9389  004532  0E00               	movlw	0
  9390  004534  6E19               	movwf	___lmul@product+1,c
  9391  004536  0E00               	movlw	0
  9392  004538  6E1A               	movwf	___lmul@product+2,c
  9393  00453A  0E00               	movlw	0
  9394  00453C  6E1B               	movwf	___lmul@product+3,c
  9395  00453E                     l7473:
  9396  00453E  A010               	btfss	___lmul@multiplier,0,c
  9397  004540  D008               	goto	l7477
  9398  004542  5014               	movf	___lmul@multiplicand,w,c
  9399  004544  2618               	addwf	___lmul@product,f,c
  9400  004546  5015               	movf	___lmul@multiplicand+1,w,c
  9401  004548  2219               	addwfc	___lmul@product+1,f,c
  9402  00454A  5016               	movf	___lmul@multiplicand+2,w,c
  9403  00454C  221A               	addwfc	___lmul@product+2,f,c
  9404  00454E  5017               	movf	___lmul@multiplicand+3,w,c
  9405  004550  221B               	addwfc	___lmul@product+3,f,c
  9406  004552                     l7477:
  9407  004552  90D8               	bcf	status,0,c
  9408  004554  3614               	rlcf	___lmul@multiplicand,f,c
  9409  004556  3615               	rlcf	___lmul@multiplicand+1,f,c
  9410  004558  3616               	rlcf	___lmul@multiplicand+2,f,c
  9411  00455A  3617               	rlcf	___lmul@multiplicand+3,f,c
  9412  00455C  90D8               	bcf	status,0,c
  9413  00455E  3213               	rrcf	___lmul@multiplier+3,f,c
  9414  004560  3212               	rrcf	___lmul@multiplier+2,f,c
  9415  004562  3211               	rrcf	___lmul@multiplier+1,f,c
  9416  004564  3210               	rrcf	___lmul@multiplier,f,c
  9417  004566  5010               	movf	___lmul@multiplier,w,c
  9418  004568  1011               	iorwf	___lmul@multiplier+1,w,c
  9419  00456A  1012               	iorwf	___lmul@multiplier+2,w,c
  9420  00456C  1013               	iorwf	___lmul@multiplier+3,w,c
  9421  00456E  A4D8               	btfss	status,2,c
  9422  004570  D7E6               	goto	l7473
  9423  004572  C018  F010         	movff	___lmul@product,?___lmul
  9424  004576  C019  F011         	movff	___lmul@product+1,?___lmul+1
  9425  00457A  C01A  F012         	movff	___lmul@product+2,?___lmul+2
  9426  00457E  C01B  F013         	movff	___lmul@product+3,?___lmul+3
  9427  004582  0012               	return		;funcret
  9428  004584                     __end_of___lmul:
  9429                           	opt stack 0
  9430                           tblptru	equ	0xFF8
  9431                           tblptrh	equ	0xFF7
  9432                           tblptrl	equ	0xFF6
  9433                           tablat	equ	0xFF5
  9434                           prodh	equ	0xFF4
  9435                           prodl	equ	0xFF3
  9436                           intcon	equ	0xFF2
  9437                           postinc0	equ	0xFEE
  9438                           wreg	equ	0xFE8
  9439                           indf1	equ	0xFE7
  9440                           postinc1	equ	0xFE6
  9441                           postdec1	equ	0xFE5
  9442                           fsr1h	equ	0xFE2
  9443                           fsr1l	equ	0xFE1
  9444                           indf2	equ	0xFDF
  9445                           postinc2	equ	0xFDE
  9446                           postdec2	equ	0xFDD
  9447                           fsr2h	equ	0xFDA
  9448                           fsr2l	equ	0xFD9
  9449                           status	equ	0xFD8
  9450                           
  9451 ;; *************** function ___awmod *****************
  9452 ;; Defined at:
  9453 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9454 ;; Parameters:    Size  Location     Type
  9455 ;;  dividend        2   29[COMRAM] int 
  9456 ;;  divisor         2   31[COMRAM] int 
  9457 ;; Auto vars:     Size  Location     Type
  9458 ;;  sign            1   34[COMRAM] unsigned char 
  9459 ;;  counter         1   33[COMRAM] unsigned char 
  9460 ;; Return value:  Size  Location     Type
  9461 ;;                  2   29[COMRAM] int 
  9462 ;; Registers used:
  9463 ;;		wreg, status,2, status,0
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9473 ;;Total ram usage:        6 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:    5
  9476 ;; This function calls:
  9477 ;;		Nothing
  9478 ;; This function is called by:
  9479 ;;		_get_new_uid
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           	psect	text27
  9484  0042D6                     __ptext27:
  9485                           	opt stack 0
  9486  0042D6                     ___awmod:
  9487                           	opt stack 21
  9488                           
  9489                           ;incstack = 0
  9490  0042D6  0E00               	movlw	0
  9491  0042D8  6E23               	movwf	___awmod@sign,c
  9492  0042DA  AE1F               	btfss	___awmod@dividend+1,7,c
  9493  0042DC  D006               	goto	l7695
  9494  0042DE  6C1E               	negf	___awmod@dividend,c
  9495  0042E0  1E1F               	comf	___awmod@dividend+1,f,c
  9496  0042E2  B0D8               	btfsc	status,0,c
  9497  0042E4  2A1F               	incf	___awmod@dividend+1,f,c
  9498  0042E6  0E01               	movlw	1
  9499  0042E8  6E23               	movwf	___awmod@sign,c
  9500  0042EA                     l7695:
  9501  0042EA  AE21               	btfss	___awmod@divisor+1,7,c
  9502  0042EC  D004               	goto	l7699
  9503  0042EE  6C20               	negf	___awmod@divisor,c
  9504  0042F0  1E21               	comf	___awmod@divisor+1,f,c
  9505  0042F2  B0D8               	btfsc	status,0,c
  9506  0042F4  2A21               	incf	___awmod@divisor+1,f,c
  9507  0042F6                     l7699:
  9508  0042F6  5020               	movf	___awmod@divisor,w,c
  9509  0042F8  1021               	iorwf	___awmod@divisor+1,w,c
  9510  0042FA  B4D8               	btfsc	status,2,c
  9511  0042FC  D018               	goto	l7715
  9512  0042FE  0E01               	movlw	1
  9513  004300  6E22               	movwf	___awmod@counter,c
  9514  004302  D004               	goto	l7705
  9515  004304                     l7703:
  9516  004304  90D8               	bcf	status,0,c
  9517  004306  3620               	rlcf	___awmod@divisor,f,c
  9518  004308  3621               	rlcf	___awmod@divisor+1,f,c
  9519  00430A  2A22               	incf	___awmod@counter,f,c
  9520  00430C                     l7705:
  9521  00430C  AE21               	btfss	___awmod@divisor+1,7,c
  9522  00430E  D7FA               	goto	l7703
  9523  004310                     l7707:
  9524  004310  5020               	movf	___awmod@divisor,w,c
  9525  004312  5C1E               	subwf	___awmod@dividend,w,c
  9526  004314  5021               	movf	___awmod@divisor+1,w,c
  9527  004316  581F               	subwfb	___awmod@dividend+1,w,c
  9528  004318  A0D8               	btfss	status,0,c
  9529  00431A  D004               	goto	l7711
  9530  00431C  5020               	movf	___awmod@divisor,w,c
  9531  00431E  5E1E               	subwf	___awmod@dividend,f,c
  9532  004320  5021               	movf	___awmod@divisor+1,w,c
  9533  004322  5A1F               	subwfb	___awmod@dividend+1,f,c
  9534  004324                     l7711:
  9535  004324  90D8               	bcf	status,0,c
  9536  004326  3221               	rrcf	___awmod@divisor+1,f,c
  9537  004328  3220               	rrcf	___awmod@divisor,f,c
  9538  00432A  2E22               	decfsz	___awmod@counter,f,c
  9539  00432C  D7F1               	goto	l7707
  9540  00432E                     l7715:
  9541  00432E  5023               	movf	___awmod@sign,w,c
  9542  004330  B4D8               	btfsc	status,2,c
  9543  004332  D004               	goto	l7719
  9544  004334  6C1E               	negf	___awmod@dividend,c
  9545  004336  1E1F               	comf	___awmod@dividend+1,f,c
  9546  004338  B0D8               	btfsc	status,0,c
  9547  00433A  2A1F               	incf	___awmod@dividend+1,f,c
  9548  00433C                     l7719:
  9549  00433C  C01E  F01E         	movff	___awmod@dividend,?___awmod
  9550  004340  C01F  F01F         	movff	___awmod@dividend+1,?___awmod+1
  9551  004344  0012               	return	
  9552  004346                     __end_of___awmod:
  9553                           	opt stack 0
  9554                           tblptru	equ	0xFF8
  9555                           tblptrh	equ	0xFF7
  9556                           tblptrl	equ	0xFF6
  9557                           tablat	equ	0xFF5
  9558                           prodh	equ	0xFF4
  9559                           prodl	equ	0xFF3
  9560                           intcon	equ	0xFF2
  9561                           postinc0	equ	0xFEE
  9562                           wreg	equ	0xFE8
  9563                           indf1	equ	0xFE7
  9564                           postinc1	equ	0xFE6
  9565                           postdec1	equ	0xFE5
  9566                           fsr1h	equ	0xFE2
  9567                           fsr1l	equ	0xFE1
  9568                           indf2	equ	0xFDF
  9569                           postinc2	equ	0xFDE
  9570                           postdec2	equ	0xFDD
  9571                           fsr2h	equ	0xFDA
  9572                           fsr2l	equ	0xFD9
  9573                           status	equ	0xFD8
  9574                           
  9575 ;; *************** function _copy_display_struct *****************
  9576 ;; Defined at:
  9577 ;;		line 228 in file "clcd.c"
  9578 ;; Parameters:    Size  Location     Type
  9579 ;;  clcd_str_dat    2   56[COMRAM] PTR struct .
  9580 ;;		 -> clcd_display_string_details(1140), 
  9581 ;;  data            2   58[COMRAM] PTR struct .
  9582 ;;		 -> cmd_data(53), 
  9583 ;;  uid             1   60[COMRAM] unsigned char 
  9584 ;; Auto vars:     Size  Location     Type
  9585 ;;		None
  9586 ;; Return value:  Size  Location     Type
  9587 ;;                  1    wreg      void 
  9588 ;; Registers used:
  9589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9590 ;; Tracked objects:
  9591 ;;		On entry : 0/0
  9592 ;;		On exit  : 0/0
  9593 ;;		Unchanged: 0/0
  9594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9595 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9598 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9599 ;;Total ram usage:        7 bytes
  9600 ;; Hardware stack levels used:    1
  9601 ;; Hardware stack levels required when called:    9
  9602 ;; This function calls:
  9603 ;;		_printf
  9604 ;;		_strcpy
  9605 ;;		_strlen
  9606 ;; This function is called by:
  9607 ;;		_set_string_data
  9608 ;; This function uses a non-reentrant model
  9609 ;;
  9610                           
  9611                           	psect	text28
  9612  003020                     __ptext28:
  9613                           	opt stack 0
  9614  003020                     _copy_display_struct:
  9615                           	opt stack 18
  9616                           
  9617                           ;clcd.c: 229: clcd_str_data->uid = uid;
  9618                           
  9619                           ;incstack = 0
  9620  003020  503D               	movf	copy_display_struct@uid,w,c
  9621  003022  6E3E               	movwf	??_copy_display_struct& (0+255),c
  9622  003024  6A3F               	clrf	(??_copy_display_struct+1)& (0+255),c
  9623  003026  C039  FFD9         	movff	copy_display_struct@clcd_str_data,fsr2l
  9624  00302A  C03A  FFDA         	movff	copy_display_struct@clcd_str_data+1,fsr2h
  9625  00302E  C03E  FFDE         	movff	??_copy_display_struct,postinc2
  9626  003032  C03F  FFDD         	movff	??_copy_display_struct+1,postdec2
  9627                           
  9628                           ;clcd.c: 230: strcpy(clcd_str_data->string, data->data);
  9629  003036  0E02               	movlw	2
  9630  003038  2439               	addwf	copy_display_struct@clcd_str_data,w,c
  9631  00303A  6E24               	movwf	strcpy@to,c
  9632  00303C  0E00               	movlw	0
  9633  00303E  203A               	addwfc	copy_display_struct@clcd_str_data+1,w,c
  9634  003040  6E25               	movwf	strcpy@to+1,c
  9635  003042  0E02               	movlw	2
  9636  003044  243B               	addwf	copy_display_struct@data,w,c
  9637  003046  6E26               	movwf	strcpy@from,c
  9638  003048  0E00               	movlw	0
  9639  00304A  203C               	addwfc	copy_display_struct@data+1,w,c
  9640  00304C  6E27               	movwf	strcpy@from+1,c
  9641  00304E  ECAB  F025         	call	_strcpy	;wreg free
  9642                           
  9643                           ;clcd.c: 232: printf("display_data = %s\r\n", clcd_str_data->string);
  9644  003052  0E89               	movlw	low STR_11
  9645  003054  6E2B               	movwf	printf@f,c
  9646  003056  0EFD               	movlw	high STR_11
  9647  003058  6E2C               	movwf	printf@f+1,c
  9648  00305A  0E02               	movlw	2
  9649  00305C  2439               	addwf	copy_display_struct@clcd_str_data,w,c
  9650  00305E  6E2D               	movwf	?_printf+2,c
  9651  003060  0E00               	movlw	0
  9652  003062  203A               	addwfc	copy_display_struct@clcd_str_data+1,w,c
  9653  003064  6E2E               	movwf	?_printf+3,c
  9654  003066  EC12  F025         	call	_printf	;wreg free
  9655                           
  9656                           ;clcd.c: 234: clcd_str_data->strlen = strlen(clcd_str_data->string);
  9657  00306A  0E02               	movlw	2
  9658  00306C  2439               	addwf	copy_display_struct@clcd_str_data,w,c
  9659  00306E  6E1E               	movwf	strlen@s,c
  9660  003070  0E00               	movlw	0
  9661  003072  203A               	addwfc	copy_display_struct@clcd_str_data+1,w,c
  9662  003074  6E1F               	movwf	strlen@s+1,c
  9663  003076  ECC2  F022         	call	_strlen	;wreg free
  9664  00307A  EE20 F02A          	lfsr	2,42
  9665  00307E  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9666  003080  26D9               	addwf	fsr2l,f,c
  9667  003082  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9668  003084  22DA               	addwfc	fsr2h,f,c
  9669  003086  50DF               	movf	indf2,w,c
  9670  003088  181E               	xorwf	?_strlen,w,c
  9671  00308A  0B80               	andlw	-128
  9672  00308C  181E               	xorwf	?_strlen,w,c
  9673  00308E  6EDF               	movwf	indf2,c
  9674                           
  9675                           ;clcd.c: 235: clcd_str_data->start_row = data->start_row;
  9676  003090  EE20 F02B          	lfsr	2,43
  9677  003094  503B               	movf	copy_display_struct@data,w,c
  9678  003096  26D9               	addwf	fsr2l,f,c
  9679  003098  503C               	movf	copy_display_struct@data+1,w,c
  9680  00309A  22DA               	addwfc	fsr2h,f,c
  9681  00309C  50DF               	movf	indf2,w,c
  9682  00309E  6E3E               	movwf	??_copy_display_struct& (0+255),c
  9683  0030A0  EE20 F02B          	lfsr	2,43
  9684  0030A4  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9685  0030A6  26D9               	addwf	fsr2l,f,c
  9686  0030A8  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9687  0030AA  22DA               	addwfc	fsr2h,f,c
  9688  0030AC  50DF               	movf	indf2,w,c
  9689  0030AE  183E               	xorwf	??_copy_display_struct,w,c
  9690  0030B0  0B80               	andlw	-128
  9691  0030B2  183E               	xorwf	??_copy_display_struct,w,c
  9692  0030B4  6EDF               	movwf	indf2,c
  9693                           
  9694                           ;clcd.c: 236: clcd_str_data->start_col = data->start_col;
  9695  0030B6  EE20 F02C          	lfsr	2,44
  9696  0030BA  503B               	movf	copy_display_struct@data,w,c
  9697  0030BC  26D9               	addwf	fsr2l,f,c
  9698  0030BE  503C               	movf	copy_display_struct@data+1,w,c
  9699  0030C0  22DA               	addwfc	fsr2h,f,c
  9700  0030C2  50DF               	movf	indf2,w,c
  9701  0030C4  6E3E               	movwf	??_copy_display_struct& (0+255),c
  9702  0030C6  EE20 F02C          	lfsr	2,44
  9703  0030CA  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9704  0030CC  26D9               	addwf	fsr2l,f,c
  9705  0030CE  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9706  0030D0  22DA               	addwfc	fsr2h,f,c
  9707  0030D2  50DF               	movf	indf2,w,c
  9708  0030D4  183E               	xorwf	??_copy_display_struct,w,c
  9709  0030D6  0B80               	andlw	-128
  9710  0030D8  183E               	xorwf	??_copy_display_struct,w,c
  9711  0030DA  6EDF               	movwf	indf2,c
  9712                           
  9713                           ;clcd.c: 237: clcd_str_data->end_row = data->end_row;
  9714  0030DC  EE20 F02D          	lfsr	2,45
  9715  0030E0  503B               	movf	copy_display_struct@data,w,c
  9716  0030E2  26D9               	addwf	fsr2l,f,c
  9717  0030E4  503C               	movf	copy_display_struct@data+1,w,c
  9718  0030E6  22DA               	addwfc	fsr2h,f,c
  9719  0030E8  50DF               	movf	indf2,w,c
  9720  0030EA  6E3E               	movwf	??_copy_display_struct& (0+255),c
  9721  0030EC  EE20 F02E          	lfsr	2,46
  9722  0030F0  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9723  0030F2  26D9               	addwf	fsr2l,f,c
  9724  0030F4  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9725  0030F6  22DA               	addwfc	fsr2h,f,c
  9726  0030F8  50DF               	movf	indf2,w,c
  9727  0030FA  183E               	xorwf	??_copy_display_struct,w,c
  9728  0030FC  0B80               	andlw	-128
  9729  0030FE  183E               	xorwf	??_copy_display_struct,w,c
  9730  003100  6EDF               	movwf	indf2,c
  9731                           
  9732                           ;clcd.c: 238: clcd_str_data->end_col = data->end_col;
  9733  003102  EE20 F02E          	lfsr	2,46
  9734  003106  503B               	movf	copy_display_struct@data,w,c
  9735  003108  26D9               	addwf	fsr2l,f,c
  9736  00310A  503C               	movf	copy_display_struct@data+1,w,c
  9737  00310C  22DA               	addwfc	fsr2h,f,c
  9738  00310E  50DF               	movf	indf2,w,c
  9739  003110  6E3E               	movwf	??_copy_display_struct& (0+255),c
  9740  003112  EE20 F02F          	lfsr	2,47
  9741  003116  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9742  003118  26D9               	addwf	fsr2l,f,c
  9743  00311A  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9744  00311C  22DA               	addwfc	fsr2h,f,c
  9745  00311E  50DF               	movf	indf2,w,c
  9746  003120  183E               	xorwf	??_copy_display_struct,w,c
  9747  003122  0B80               	andlw	-128
  9748  003124  183E               	xorwf	??_copy_display_struct,w,c
  9749  003126  6EDF               	movwf	indf2,c
  9750                           
  9751                           ;clcd.c: 239: clcd_str_data->start_point = (clcd_str_data->start_row * clcd_config_data.
      +                          clcd_max_col) + clcd_str_data->start_col;
  9752  003128  EE20 F02C          	lfsr	2,44
  9753  00312C  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9754  00312E  26D9               	addwf	fsr2l,f,c
  9755  003130  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9756  003132  22DA               	addwfc	fsr2h,f,c
  9757  003134  50DF               	movf	indf2,w,c
  9758  003136  0B7F               	andlw	127
  9759  003138  6E3E               	movwf	??_copy_display_struct& (0+255),c
  9760  00313A  EE20 F02B          	lfsr	2,43
  9761  00313E  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9762  003140  26D9               	addwf	fsr2l,f,c
  9763  003142  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9764  003144  22DA               	addwfc	fsr2h,f,c
  9765  003146  50DF               	movf	indf2,w,c
  9766  003148  0B7F               	andlw	127
  9767  00314A  024B               	mulwf	_clcd_config_data+2,c
  9768  00314C  50F3               	movf	prodl,w,c
  9769  00314E  243E               	addwf	??_copy_display_struct,w,c
  9770  003150  6E3F               	movwf	(??_copy_display_struct+1)& (0+255),c
  9771  003152  EE20 F02D          	lfsr	2,45
  9772  003156  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9773  003158  26D9               	addwf	fsr2l,f,c
  9774  00315A  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9775  00315C  22DA               	addwfc	fsr2h,f,c
  9776  00315E  50DF               	movf	indf2,w,c
  9777  003160  183F               	xorwf	??_copy_display_struct+1,w,c
  9778  003162  0B80               	andlw	-128
  9779  003164  183F               	xorwf	??_copy_display_struct+1,w,c
  9780  003166  6EDF               	movwf	indf2,c
  9781                           
  9782                           ;clcd.c: 240: clcd_str_data->end_point = (clcd_str_data->end_row * clcd_config_data.clcd
      +                          _max_col) + clcd_str_data->end_col;
  9783  003168  EE20 F02F          	lfsr	2,47
  9784  00316C  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9785  00316E  26D9               	addwf	fsr2l,f,c
  9786  003170  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9787  003172  22DA               	addwfc	fsr2h,f,c
  9788  003174  50DF               	movf	indf2,w,c
  9789  003176  0B7F               	andlw	127
  9790  003178  6E3E               	movwf	??_copy_display_struct& (0+255),c
  9791  00317A  EE20 F02E          	lfsr	2,46
  9792  00317E  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9793  003180  26D9               	addwf	fsr2l,f,c
  9794  003182  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9795  003184  22DA               	addwfc	fsr2h,f,c
  9796  003186  50DF               	movf	indf2,w,c
  9797  003188  0B7F               	andlw	127
  9798  00318A  024B               	mulwf	_clcd_config_data+2,c
  9799  00318C  50F3               	movf	prodl,w,c
  9800  00318E  243E               	addwf	??_copy_display_struct,w,c
  9801  003190  6E3F               	movwf	(??_copy_display_struct+1)& (0+255),c
  9802  003192  EE20 F030          	lfsr	2,48
  9803  003196  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9804  003198  26D9               	addwf	fsr2l,f,c
  9805  00319A  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9806  00319C  22DA               	addwfc	fsr2h,f,c
  9807  00319E  50DF               	movf	indf2,w,c
  9808  0031A0  183F               	xorwf	??_copy_display_struct+1,w,c
  9809  0031A2  0B80               	andlw	-128
  9810  0031A4  183F               	xorwf	??_copy_display_struct+1,w,c
  9811  0031A6  6EDF               	movwf	indf2,c
  9812                           
  9813                           ;clcd.c: 241: clcd_str_data->direction = data->scroll;
  9814  0031A8  EE20 F030          	lfsr	2,48
  9815  0031AC  503B               	movf	copy_display_struct@data,w,c
  9816  0031AE  26D9               	addwf	fsr2l,f,c
  9817  0031B0  503C               	movf	copy_display_struct@data+1,w,c
  9818  0031B2  22DA               	addwfc	fsr2h,f,c
  9819  0031B4  50DF               	movf	indf2,w,c
  9820  0031B6  6E3E               	movwf	??_copy_display_struct& (0+255),c
  9821  0031B8  EE20 F031          	lfsr	2,49
  9822  0031BC  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9823  0031BE  26D9               	addwf	fsr2l,f,c
  9824  0031C0  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9825  0031C2  22DA               	addwfc	fsr2h,f,c
  9826  0031C4  50DF               	movf	indf2,w,c
  9827  0031C6  183E               	xorwf	??_copy_display_struct,w,c
  9828  0031C8  0BF8               	andlw	-8
  9829  0031CA  183E               	xorwf	??_copy_display_struct,w,c
  9830  0031CC  6EDF               	movwf	indf2,c
  9831                           
  9832                           ;clcd.c: 242: clcd_str_data->display_char_count = (clcd_str_data->end_point - clcd_str_d
      +                          ata->start_point) + 1;
  9833  0031CE  EE20 F033          	lfsr	2,51
  9834  0031D2  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9835  0031D4  26D9               	addwf	fsr2l,f,c
  9836  0031D6  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9837  0031D8  22DA               	addwfc	fsr2h,f,c
  9838  0031DA  EE10 F030          	lfsr	1,48
  9839  0031DE  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9840  0031E0  26E1               	addwf	fsr1l,f,c
  9841  0031E2  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9842  0031E4  22E2               	addwfc	fsr1h,f,c
  9843  0031E6  50E7               	movf	indf1,w,c
  9844  0031E8  0B7F               	andlw	127
  9845  0031EA  6E3E               	movwf	??_copy_display_struct& (0+255),c
  9846  0031EC  EE10 F02D          	lfsr	1,45
  9847  0031F0  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9848  0031F2  26E1               	addwf	fsr1l,f,c
  9849  0031F4  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9850  0031F6  22E2               	addwfc	fsr1h,f,c
  9851  0031F8  50E7               	movf	indf1,w,c
  9852  0031FA  0B7F               	andlw	127
  9853  0031FC  0800               	sublw	0
  9854  0031FE  243E               	addwf	??_copy_display_struct,w,c
  9855  003200  6E3F               	movwf	(??_copy_display_struct+1)& (0+255),c
  9856  003202  283F               	incf	??_copy_display_struct+1,w,c
  9857  003204  6EDF               	movwf	indf2,c
  9858                           
  9859                           ;clcd.c: 243: clcd_str_data->display_interval = data->dis_frq;
  9860  003206  EE20 F032          	lfsr	2,50
  9861  00320A  503B               	movf	copy_display_struct@data,w,c
  9862  00320C  26D9               	addwf	fsr2l,f,c
  9863  00320E  503C               	movf	copy_display_struct@data+1,w,c
  9864  003210  22DA               	addwfc	fsr2h,f,c
  9865  003212  50DF               	movf	indf2,w,c
  9866  003214  6E3E               	movwf	??_copy_display_struct& (0+255),c
  9867  003216  EE20 F032          	lfsr	2,50
  9868  00321A  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9869  00321C  26D9               	addwf	fsr2l,f,c
  9870  00321E  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9871  003220  22DA               	addwfc	fsr2h,f,c
  9872  003222  50DF               	movf	indf2,w,c
  9873  003224  183E               	xorwf	??_copy_display_struct,w,c
  9874  003226  0B80               	andlw	-128
  9875  003228  183E               	xorwf	??_copy_display_struct,w,c
  9876  00322A  6EDF               	movwf	indf2,c
  9877                           
  9878                           ;clcd.c: 245: printf("display_char_count = %d\r\n", clcd_str_data->display_char_count);
  9879  00322C  0E09               	movlw	low STR_6
  9880  00322E  6E2B               	movwf	printf@f,c
  9881  003230  0EFD               	movlw	high STR_6
  9882  003232  6E2C               	movwf	printf@f+1,c
  9883  003234  EE20 F033          	lfsr	2,51
  9884  003238  5039               	movf	copy_display_struct@clcd_str_data,w,c
  9885  00323A  26D9               	addwf	fsr2l,f,c
  9886  00323C  503A               	movf	copy_display_struct@clcd_str_data+1,w,c
  9887  00323E  22DA               	addwfc	fsr2h,f,c
  9888  003240  50DF               	movf	indf2,w,c
  9889  003242  6E3E               	movwf	??_copy_display_struct& (0+255),c
  9890  003244  503E               	movf	??_copy_display_struct,w,c
  9891  003246  6E2D               	movwf	?_printf+2,c
  9892  003248  6A2E               	clrf	?_printf+3,c
  9893  00324A  EC12  F025         	call	_printf	;wreg free
  9894  00324E  0012               	return		;funcret
  9895  003250                     __end_of_copy_display_struct:
  9896                           	opt stack 0
  9897                           tblptru	equ	0xFF8
  9898                           tblptrh	equ	0xFF7
  9899                           tblptrl	equ	0xFF6
  9900                           tablat	equ	0xFF5
  9901                           prodh	equ	0xFF4
  9902                           prodl	equ	0xFF3
  9903                           intcon	equ	0xFF2
  9904                           postinc0	equ	0xFEE
  9905                           wreg	equ	0xFE8
  9906                           indf1	equ	0xFE7
  9907                           postinc1	equ	0xFE6
  9908                           postdec1	equ	0xFE5
  9909                           fsr1h	equ	0xFE2
  9910                           fsr1l	equ	0xFE1
  9911                           indf2	equ	0xFDF
  9912                           postinc2	equ	0xFDE
  9913                           postdec2	equ	0xFDD
  9914                           fsr2h	equ	0xFDA
  9915                           fsr2l	equ	0xFD9
  9916                           status	equ	0xFD8
  9917                           
  9918 ;; *************** function _conflict *****************
  9919 ;; Defined at:
  9920 ;;		line 185 in file "clcd.c"
  9921 ;; Parameters:    Size  Location     Type
  9922 ;;  new_start_po    1    wreg     unsigned char 
  9923 ;;  new_end_poin    1   56[COMRAM] unsigned char 
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;  new_start_po    1   61[COMRAM] unsigned char 
  9926 ;;  i               2   62[COMRAM] int 
  9927 ;;  conflict_boo    1   60[COMRAM] unsigned char 
  9928 ;; Return value:  Size  Location     Type
  9929 ;;                  1    wreg      unsigned char 
  9930 ;; Registers used:
  9931 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9932 ;; Tracked objects:
  9933 ;;		On entry : 0/0
  9934 ;;		On exit  : 0/0
  9935 ;;		Unchanged: 0/0
  9936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9937 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9941 ;;Total ram usage:        8 bytes
  9942 ;; Hardware stack levels used:    1
  9943 ;; Hardware stack levels required when called:    9
  9944 ;; This function calls:
  9945 ;;		___wmul
  9946 ;;		_printf
  9947 ;; This function is called by:
  9948 ;;		_set_string_data
  9949 ;; This function uses a non-reentrant model
  9950 ;;
  9951                           
  9952                           	psect	text29
  9953  002B2C                     __ptext29:
  9954                           	opt stack 0
  9955  002B2C                     _conflict:
  9956                           	opt stack 18
  9957                           
  9958                           ;incstack = 0
  9959                           ;conflict@new_start_point stored from wreg
  9960  002B2C  6E3E               	movwf	conflict@new_start_point,c
  9961                           
  9962                           ;clcd.c: 186: int i = 0;
  9963  002B2E  0E00               	movlw	0
  9964  002B30  6E40               	movwf	conflict@i+1,c
  9965  002B32  0E00               	movlw	0
  9966  002B34  6E3F               	movwf	conflict@i,c
  9967                           
  9968                           ;clcd.c: 187: bool conflict_bool = 0;
  9969  002B36  0E00               	movlw	0
  9970  002B38  6E3D               	movwf	conflict@conflict_bool,c
  9971                           
  9972                           ;clcd.c: 189: for (i = 0; i < clcd_config_data.clcd_max_display_string;) {
  9973  002B3A  0E00               	movlw	0
  9974  002B3C  6E40               	movwf	conflict@i+1,c
  9975  002B3E  0E00               	movlw	0
  9976  002B40  6E3F               	movwf	conflict@i,c
  9977  002B42  D125               	goto	l7903
  9978  002B44                     l7859:
  9979                           
  9980                           ;clcd.c: 190: if (clcd_display_string_details[i].uid != 0) {
  9981  002B44  C03F  F018         	movff	conflict@i,___wmul@multiplier
  9982  002B48  C040  F019         	movff	conflict@i+1,___wmul@multiplier+1
  9983  002B4C  0E00               	movlw	0
  9984  002B4E  6E1B               	movwf	___wmul@multiplicand+1,c
  9985  002B50  0E39               	movlw	57
  9986  002B52  6E1A               	movwf	___wmul@multiplicand,c
  9987  002B54  EC04  F026         	call	___wmul	;wreg free
  9988  002B58  0E99               	movlw	low _clcd_display_string_details
  9989  002B5A  2418               	addwf	?___wmul,w,c
  9990  002B5C  6ED9               	movwf	fsr2l,c
  9991  002B5E  0E05               	movlw	high _clcd_display_string_details
  9992  002B60  2019               	addwfc	?___wmul+1,w,c
  9993  002B62  6EDA               	movwf	fsr2h,c
  9994  002B64  50DE               	movf	postinc2,w,c
  9995  002B66  10DE               	iorwf	postinc2,w,c
  9996  002B68  B4D8               	btfsc	status,2,c
  9997  002B6A  D10F               	goto	l7901
  9998                           
  9999                           ;clcd.c: 191: if (new_start_point >= clcd_display_string_details[i].start_point && new_s
      +                          tart_point <= clcd_display_string_details[i].end_point) {
 10000  002B6C  C03F  F018         	movff	conflict@i,___wmul@multiplier
 10001  002B70  C040  F019         	movff	conflict@i+1,___wmul@multiplier+1
 10002  002B74  0E00               	movlw	0
 10003  002B76  6E1B               	movwf	___wmul@multiplicand+1,c
 10004  002B78  0E39               	movlw	57
 10005  002B7A  6E1A               	movwf	___wmul@multiplicand,c
 10006  002B7C  EC04  F026         	call	___wmul	;wreg free
 10007  002B80  0E2D               	movlw	45
 10008  002B82  2618               	addwf	?___wmul,f,c
 10009  002B84  0E00               	movlw	0
 10010  002B86  2219               	addwfc	?___wmul+1,f,c
 10011  002B88  0E99               	movlw	low _clcd_display_string_details
 10012  002B8A  2418               	addwf	?___wmul,w,c
 10013  002B8C  6ED9               	movwf	fsr2l,c
 10014  002B8E  0E05               	movlw	high _clcd_display_string_details
 10015  002B90  2019               	addwfc	?___wmul+1,w,c
 10016  002B92  6EDA               	movwf	fsr2h,c
 10017  002B94  50DF               	movf	223,w,c
 10018  002B96  0B7F               	andlw	127
 10019  002B98  6E3A               	movwf	??_conflict& (0+255),c
 10020  002B9A  503A               	movf	??_conflict,w,c
 10021  002B9C  5C3E               	subwf	conflict@new_start_point,w,c
 10022  002B9E  A0D8               	btfss	status,0,c
 10023  002BA0  D041               	goto	l7875
 10024  002BA2  C03F  F018         	movff	conflict@i,___wmul@multiplier
 10025  002BA6  C040  F019         	movff	conflict@i+1,___wmul@multiplier+1
 10026  002BAA  0E00               	movlw	0
 10027  002BAC  6E1B               	movwf	___wmul@multiplicand+1,c
 10028  002BAE  0E39               	movlw	57
 10029  002BB0  6E1A               	movwf	___wmul@multiplicand,c
 10030  002BB2  EC04  F026         	call	___wmul	;wreg free
 10031  002BB6  0E30               	movlw	48
 10032  002BB8  2618               	addwf	?___wmul,f,c
 10033  002BBA  0E00               	movlw	0
 10034  002BBC  2219               	addwfc	?___wmul+1,f,c
 10035  002BBE  0E99               	movlw	low _clcd_display_string_details
 10036  002BC0  2418               	addwf	?___wmul,w,c
 10037  002BC2  6ED9               	movwf	fsr2l,c
 10038  002BC4  0E05               	movlw	high _clcd_display_string_details
 10039  002BC6  2019               	addwfc	?___wmul+1,w,c
 10040  002BC8  6EDA               	movwf	fsr2h,c
 10041  002BCA  50DF               	movf	223,w,c
 10042  002BCC  0B7F               	andlw	127
 10043  002BCE  6E3A               	movwf	??_conflict& (0+255),c
 10044  002BD0  503E               	movf	conflict@new_start_point,w,c
 10045  002BD2  5C3A               	subwf	??_conflict,w,c
 10046  002BD4  A0D8               	btfss	status,0,c
 10047  002BD6  D026               	goto	l7875
 10048                           
 10049                           ;clcd.c: 192: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
 10050  002BD8  C03F  F018         	movff	conflict@i,___wmul@multiplier
 10051  002BDC  C040  F019         	movff	conflict@i+1,___wmul@multiplier+1
 10052  002BE0  0E00               	movlw	0
 10053  002BE2  6E1B               	movwf	___wmul@multiplicand+1,c
 10054  002BE4  0E39               	movlw	57
 10055  002BE6  6E1A               	movwf	___wmul@multiplicand,c
 10056  002BE8  EC04  F026         	call	___wmul	;wreg free
 10057  002BEC  0E99               	movlw	low _clcd_display_string_details
 10058  002BEE  2418               	addwf	?___wmul,w,c
 10059  002BF0  6ED9               	movwf	fsr2l,c
 10060  002BF2  0E05               	movlw	high _clcd_display_string_details
 10061  002BF4  2019               	addwfc	?___wmul+1,w,c
 10062  002BF6  6EDA               	movwf	fsr2h,c
 10063  002BF8  5042               	movf	_conflict_data_count,w,c
 10064  002BFA  0D02               	mullw	2
 10065  002BFC  0EA3               	movlw	low _conflict_arr
 10066  002BFE  24F3               	addwf	prodl,w,c
 10067  002C00  6EE1               	movwf	fsr1l,c
 10068  002C02  0E01               	movlw	high _conflict_arr
 10069  002C04  20F4               	addwfc	prodh,w,c
 10070  002C06  6EE2               	movwf	fsr1h,c
 10071  002C08  CFDE FFE6          	movff	postinc2,postinc1
 10072  002C0C  CFDD FFE5          	movff	postdec2,postdec1
 10073  002C10  2A42               	incf	_conflict_data_count,f,c
 10074                           
 10075                           ;clcd.c: 193: i++;
 10076  002C12  4A3F               	infsnz	conflict@i,f,c
 10077  002C14  2A40               	incf	conflict@i+1,f,c
 10078                           
 10079                           ;clcd.c: 195: printf("ex_sp <= new_sp <=ex_ep\r\n");
 10080  002C16  0E3D               	movlw	low STR_7
 10081  002C18  6E2B               	movwf	printf@f,c
 10082  002C1A  0EFD               	movlw	high STR_7
 10083  002C1C  6E2C               	movwf	printf@f+1,c
 10084  002C1E  EC12  F025         	call	_printf	;wreg free
 10085  002C22  D05A               	goto	l7887
 10086  002C24                     l7875:
 10087                           
 10088                           ;clcd.c: 199: }
 10089                           ;clcd.c: 200: if (new_end_point >= clcd_display_string_details[i].start_point && new_end
      +                          _point <= clcd_display_string_details[i].end_point) {
 10090  002C24  C03F  F018         	movff	conflict@i,___wmul@multiplier
 10091  002C28  C040  F019         	movff	conflict@i+1,___wmul@multiplier+1
 10092  002C2C  0E00               	movlw	0
 10093  002C2E  6E1B               	movwf	___wmul@multiplicand+1,c
 10094  002C30  0E39               	movlw	57
 10095  002C32  6E1A               	movwf	___wmul@multiplicand,c
 10096  002C34  EC04  F026         	call	___wmul	;wreg free
 10097  002C38  0E2D               	movlw	45
 10098  002C3A  2618               	addwf	?___wmul,f,c
 10099  002C3C  0E00               	movlw	0
 10100  002C3E  2219               	addwfc	?___wmul+1,f,c
 10101  002C40  0E99               	movlw	low _clcd_display_string_details
 10102  002C42  2418               	addwf	?___wmul,w,c
 10103  002C44  6ED9               	movwf	fsr2l,c
 10104  002C46  0E05               	movlw	high _clcd_display_string_details
 10105  002C48  2019               	addwfc	?___wmul+1,w,c
 10106  002C4A  6EDA               	movwf	fsr2h,c
 10107  002C4C  50DF               	movf	223,w,c
 10108  002C4E  0B7F               	andlw	127
 10109  002C50  6E3A               	movwf	??_conflict& (0+255),c
 10110  002C52  503A               	movf	??_conflict,w,c
 10111  002C54  5C39               	subwf	conflict@new_end_point,w,c
 10112  002C56  A0D8               	btfss	status,0,c
 10113  002C58  D042               	goto	l7889
 10114  002C5A  C03F  F018         	movff	conflict@i,___wmul@multiplier
 10115  002C5E  C040  F019         	movff	conflict@i+1,___wmul@multiplier+1
 10116  002C62  0E00               	movlw	0
 10117  002C64  6E1B               	movwf	___wmul@multiplicand+1,c
 10118  002C66  0E39               	movlw	57
 10119  002C68  6E1A               	movwf	___wmul@multiplicand,c
 10120  002C6A  EC04  F026         	call	___wmul	;wreg free
 10121  002C6E  0E30               	movlw	48
 10122  002C70  2618               	addwf	?___wmul,f,c
 10123  002C72  0E00               	movlw	0
 10124  002C74  2219               	addwfc	?___wmul+1,f,c
 10125  002C76  0E99               	movlw	low _clcd_display_string_details
 10126  002C78  2418               	addwf	?___wmul,w,c
 10127  002C7A  6ED9               	movwf	fsr2l,c
 10128  002C7C  0E05               	movlw	high _clcd_display_string_details
 10129  002C7E  2019               	addwfc	?___wmul+1,w,c
 10130  002C80  6EDA               	movwf	fsr2h,c
 10131  002C82  50DF               	movf	223,w,c
 10132  002C84  0B7F               	andlw	127
 10133  002C86  6E3A               	movwf	??_conflict& (0+255),c
 10134  002C88  5039               	movf	conflict@new_end_point,w,c
 10135  002C8A  5C3A               	subwf	??_conflict,w,c
 10136  002C8C  A0D8               	btfss	status,0,c
 10137  002C8E  D027               	goto	l7889
 10138                           
 10139                           ;clcd.c: 201: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
 10140  002C90  C03F  F018         	movff	conflict@i,___wmul@multiplier
 10141  002C94  C040  F019         	movff	conflict@i+1,___wmul@multiplier+1
 10142  002C98  0E00               	movlw	0
 10143  002C9A  6E1B               	movwf	___wmul@multiplicand+1,c
 10144  002C9C  0E39               	movlw	57
 10145  002C9E  6E1A               	movwf	___wmul@multiplicand,c
 10146  002CA0  EC04  F026         	call	___wmul	;wreg free
 10147  002CA4  0E99               	movlw	low _clcd_display_string_details
 10148  002CA6  2418               	addwf	?___wmul,w,c
 10149  002CA8  6ED9               	movwf	fsr2l,c
 10150  002CAA  0E05               	movlw	high _clcd_display_string_details
 10151  002CAC  2019               	addwfc	?___wmul+1,w,c
 10152  002CAE  6EDA               	movwf	fsr2h,c
 10153  002CB0  5042               	movf	_conflict_data_count,w,c
 10154  002CB2  0D02               	mullw	2
 10155  002CB4  0EA3               	movlw	low _conflict_arr
 10156  002CB6  24F3               	addwf	prodl,w,c
 10157  002CB8  6EE1               	movwf	fsr1l,c
 10158  002CBA  0E01               	movlw	high _conflict_arr
 10159  002CBC  20F4               	addwfc	prodh,w,c
 10160  002CBE  6EE2               	movwf	fsr1h,c
 10161  002CC0  CFDE FFE6          	movff	postinc2,postinc1
 10162  002CC4  CFDD FFE5          	movff	postdec2,postdec1
 10163  002CC8  2A42               	incf	_conflict_data_count,f,c
 10164                           
 10165                           ;clcd.c: 203: printf("ex_sp <= new_ep <=ex_ep\r\n");
 10166  002CCA  0E23               	movlw	low STR_8
 10167  002CCC  6E2B               	movwf	printf@f,c
 10168  002CCE  0EFD               	movlw	high STR_8
 10169  002CD0  6E2C               	movwf	printf@f+1,c
 10170  002CD2  EC12  F025         	call	_printf	;wreg free
 10171  002CD6  D056               	goto	l7897
 10172  002CD8                     l7887:
 10173                           
 10174                           ;clcd.c: 206: conflict_bool = 1;
 10175  002CD8  0E01               	movlw	1
 10176  002CDA  6E3D               	movwf	conflict@conflict_bool,c
 10177                           
 10178                           ;clcd.c: 207: continue;
 10179  002CDC  D058               	goto	l7903
 10180  002CDE                     l7889:
 10181                           
 10182                           ;clcd.c: 208: }
 10183                           ;clcd.c: 209: if (new_start_point <= clcd_display_string_details[i].start_point && new_e
      +                          nd_point >= clcd_display_string_details[i].end_point) {
 10184  002CDE  C03F  F018         	movff	conflict@i,___wmul@multiplier
 10185  002CE2  C040  F019         	movff	conflict@i+1,___wmul@multiplier+1
 10186  002CE6  0E00               	movlw	0
 10187  002CE8  6E1B               	movwf	___wmul@multiplicand+1,c
 10188  002CEA  0E39               	movlw	57
 10189  002CEC  6E1A               	movwf	___wmul@multiplicand,c
 10190  002CEE  EC04  F026         	call	___wmul	;wreg free
 10191  002CF2  0E2D               	movlw	45
 10192  002CF4  2618               	addwf	?___wmul,f,c
 10193  002CF6  0E00               	movlw	0
 10194  002CF8  2219               	addwfc	?___wmul+1,f,c
 10195  002CFA  0E99               	movlw	low _clcd_display_string_details
 10196  002CFC  2418               	addwf	?___wmul,w,c
 10197  002CFE  6ED9               	movwf	fsr2l,c
 10198  002D00  0E05               	movlw	high _clcd_display_string_details
 10199  002D02  2019               	addwfc	?___wmul+1,w,c
 10200  002D04  6EDA               	movwf	fsr2h,c
 10201  002D06  50DF               	movf	223,w,c
 10202  002D08  0B7F               	andlw	127
 10203  002D0A  6E3A               	movwf	??_conflict& (0+255),c
 10204  002D0C  503E               	movf	conflict@new_start_point,w,c
 10205  002D0E  5C3A               	subwf	??_conflict,w,c
 10206  002D10  A0D8               	btfss	status,0,c
 10207  002D12  D03B               	goto	l7901
 10208  002D14  C03F  F018         	movff	conflict@i,___wmul@multiplier
 10209  002D18  C040  F019         	movff	conflict@i+1,___wmul@multiplier+1
 10210  002D1C  0E00               	movlw	0
 10211  002D1E  6E1B               	movwf	___wmul@multiplicand+1,c
 10212  002D20  0E39               	movlw	57
 10213  002D22  6E1A               	movwf	___wmul@multiplicand,c
 10214  002D24  EC04  F026         	call	___wmul	;wreg free
 10215  002D28  0E30               	movlw	48
 10216  002D2A  2618               	addwf	?___wmul,f,c
 10217  002D2C  0E00               	movlw	0
 10218  002D2E  2219               	addwfc	?___wmul+1,f,c
 10219  002D30  0E99               	movlw	low _clcd_display_string_details
 10220  002D32  2418               	addwf	?___wmul,w,c
 10221  002D34  6ED9               	movwf	fsr2l,c
 10222  002D36  0E05               	movlw	high _clcd_display_string_details
 10223  002D38  2019               	addwfc	?___wmul+1,w,c
 10224  002D3A  6EDA               	movwf	fsr2h,c
 10225  002D3C  50DF               	movf	223,w,c
 10226  002D3E  0B7F               	andlw	127
 10227  002D40  6E3A               	movwf	??_conflict& (0+255),c
 10228  002D42  503A               	movf	??_conflict,w,c
 10229  002D44  5C39               	subwf	conflict@new_end_point,w,c
 10230  002D46  A0D8               	btfss	status,0,c
 10231  002D48  D020               	goto	l7901
 10232                           
 10233                           ;clcd.c: 210: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
 10234  002D4A  C03F  F018         	movff	conflict@i,___wmul@multiplier
 10235  002D4E  C040  F019         	movff	conflict@i+1,___wmul@multiplier+1
 10236  002D52  0E00               	movlw	0
 10237  002D54  6E1B               	movwf	___wmul@multiplicand+1,c
 10238  002D56  0E39               	movlw	57
 10239  002D58  6E1A               	movwf	___wmul@multiplicand,c
 10240  002D5A  EC04  F026         	call	___wmul	;wreg free
 10241  002D5E  0E99               	movlw	low _clcd_display_string_details
 10242  002D60  2418               	addwf	?___wmul,w,c
 10243  002D62  6ED9               	movwf	fsr2l,c
 10244  002D64  0E05               	movlw	high _clcd_display_string_details
 10245  002D66  2019               	addwfc	?___wmul+1,w,c
 10246  002D68  6EDA               	movwf	fsr2h,c
 10247  002D6A  5042               	movf	_conflict_data_count,w,c
 10248  002D6C  0D02               	mullw	2
 10249  002D6E  0EA3               	movlw	low _conflict_arr
 10250  002D70  24F3               	addwf	prodl,w,c
 10251  002D72  6EE1               	movwf	fsr1l,c
 10252  002D74  0E01               	movlw	high _conflict_arr
 10253  002D76  20F4               	addwfc	prodh,w,c
 10254  002D78  6EE2               	movwf	fsr1h,c
 10255  002D7A  CFDE FFE6          	movff	postinc2,postinc1
 10256  002D7E  CFDD FFE5          	movff	postdec2,postdec1
 10257  002D82  2A42               	incf	_conflict_data_count,f,c
 10258  002D84                     l7897:
 10259                           
 10260                           ;clcd.c: 211: i++;
 10261  002D84  4A3F               	infsnz	conflict@i,f,c
 10262  002D86  2A40               	incf	conflict@i+1,f,c
 10263  002D88  D7A7               	goto	l7887
 10264  002D8A                     l7901:
 10265                           
 10266                           ;clcd.c: 214: }
 10267                           ;clcd.c: 215: }
 10268                           ;clcd.c: 216: i++;
 10269  002D8A  4A3F               	infsnz	conflict@i,f,c
 10270  002D8C  2A40               	incf	conflict@i+1,f,c
 10271  002D8E                     l7903:
 10272  002D8E  504D               	movf	_clcd_config_data+4,w,c
 10273  002D90  6E3A               	movwf	??_conflict& (0+255),c
 10274  002D92  6A3B               	clrf	(??_conflict+1)& (0+255),c
 10275  002D94  503A               	movf	??_conflict,w,c
 10276  002D96  5C3F               	subwf	conflict@i,w,c
 10277  002D98  5040               	movf	conflict@i+1,w,c
 10278  002D9A  0A80               	xorlw	128
 10279  002D9C  6E3C               	movwf	(??_conflict+2)& (0+255),c
 10280  002D9E  503B               	movf	??_conflict+1,w,c
 10281  002DA0  0A80               	xorlw	128
 10282  002DA2  583C               	subwfb	(??_conflict+2)& (0+255),w,c
 10283  002DA4  A0D8               	btfss	status,0,c
 10284  002DA6  D6CE               	goto	l7859
 10285                           
 10286                           ;clcd.c: 217: }
 10287                           ;clcd.c: 225: return conflict_bool;
 10288  002DA8  503D               	movf	conflict@conflict_bool,w,c
 10289  002DAA  0012               	return	
 10290  002DAC                     __end_of_conflict:
 10291                           	opt stack 0
 10292                           tblptru	equ	0xFF8
 10293                           tblptrh	equ	0xFF7
 10294                           tblptrl	equ	0xFF6
 10295                           tablat	equ	0xFF5
 10296                           prodh	equ	0xFF4
 10297                           prodl	equ	0xFF3
 10298                           intcon	equ	0xFF2
 10299                           postinc0	equ	0xFEE
 10300                           wreg	equ	0xFE8
 10301                           indf1	equ	0xFE7
 10302                           postinc1	equ	0xFE6
 10303                           postdec1	equ	0xFE5
 10304                           fsr1h	equ	0xFE2
 10305                           fsr1l	equ	0xFE1
 10306                           indf2	equ	0xFDF
 10307                           postinc2	equ	0xFDE
 10308                           postdec2	equ	0xFDD
 10309                           fsr2h	equ	0xFDA
 10310                           fsr2l	equ	0xFD9
 10311                           status	equ	0xFD8
 10312                           
 10313 ;; *************** function _puts *****************
 10314 ;; Defined at:
 10315 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\puts.c"
 10316 ;; Parameters:    Size  Location     Type
 10317 ;;  s               2   19[COMRAM] PTR const unsigned char 
 10318 ;;		 -> STR_136(12), STR_88(5), 
 10319 ;; Auto vars:     Size  Location     Type
 10320 ;;		None
 10321 ;; Return value:  Size  Location     Type
 10322 ;;                  2   19[COMRAM] int 
 10323 ;; Registers used:
 10324 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10325 ;; Tracked objects:
 10326 ;;		On entry : 0/0
 10327 ;;		On exit  : 0/0
 10328 ;;		Unchanged: 0/0
 10329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10330 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10333 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10334 ;;Total ram usage:        2 bytes
 10335 ;; Hardware stack levels used:    1
 10336 ;; Hardware stack levels required when called:    8
 10337 ;; This function calls:
 10338 ;;		_cputs
 10339 ;;		_putch
 10340 ;; This function is called by:
 10341 ;;		_reply_to_host
 10342 ;;		_cmd_consol_task
 10343 ;; This function uses a non-reentrant model
 10344 ;;
 10345                           
 10346                           	psect	text30
 10347  004D88                     __ptext30:
 10348                           	opt stack 0
 10349  004D88                     _puts:
 10350                           	opt stack 20
 10351                           
 10352                           ;incstack = 0
 10353  004D88  C014  F012         	movff	puts@s,cputs@s
 10354  004D8C  C015  F013         	movff	puts@s+1,cputs@s+1
 10355  004D90  EC94  F025         	call	_cputs	;wreg free
 10356  004D94  0E0A               	movlw	10
 10357  004D96  EC48  F027         	call	_putch
 10358  004D9A  0012               	return		;funcret
 10359  004D9C                     __end_of_puts:
 10360                           	opt stack 0
 10361                           tblptru	equ	0xFF8
 10362                           tblptrh	equ	0xFF7
 10363                           tblptrl	equ	0xFF6
 10364                           tablat	equ	0xFF5
 10365                           prodh	equ	0xFF4
 10366                           prodl	equ	0xFF3
 10367                           intcon	equ	0xFF2
 10368                           postinc0	equ	0xFEE
 10369                           wreg	equ	0xFE8
 10370                           indf1	equ	0xFE7
 10371                           postinc1	equ	0xFE6
 10372                           postdec1	equ	0xFE5
 10373                           fsr1h	equ	0xFE2
 10374                           fsr1l	equ	0xFE1
 10375                           indf2	equ	0xFDF
 10376                           postinc2	equ	0xFDE
 10377                           postdec2	equ	0xFDD
 10378                           fsr2h	equ	0xFDA
 10379                           fsr2l	equ	0xFD9
 10380                           status	equ	0xFD8
 10381                           
 10382 ;; *************** function _cputs *****************
 10383 ;; Defined at:
 10384 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\cputs.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;  s               2   17[COMRAM] PTR const unsigned char 
 10387 ;;		 -> STR_136(12), STR_88(5), 
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;		None
 10390 ;; Return value:  Size  Location     Type
 10391 ;;                  1    wreg      void 
 10392 ;; Registers used:
 10393 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10394 ;; Tracked objects:
 10395 ;;		On entry : 0/0
 10396 ;;		On exit  : 0/0
 10397 ;;		Unchanged: 0/0
 10398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10399 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10403 ;;Total ram usage:        2 bytes
 10404 ;; Hardware stack levels used:    1
 10405 ;; Hardware stack levels required when called:    7
 10406 ;; This function calls:
 10407 ;;		_putch
 10408 ;; This function is called by:
 10409 ;;		_puts
 10410 ;; This function uses a non-reentrant model
 10411 ;;
 10412                           
 10413                           	psect	text31
 10414  004B28                     __ptext31:
 10415                           	opt stack 0
 10416  004B28                     _cputs:
 10417                           	opt stack 20
 10418                           
 10419                           ;incstack = 0
 10420  004B28  D00B               	goto	l8085
 10421  004B2A                     l8081:
 10422  004B2A  C012  FFF6         	movff	cputs@s,tblptrl
 10423  004B2E  C013  FFF7         	movff	cputs@s+1,tblptrh
 10424  004B32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10425  004B32  6AF8               	clrf	tblptru,c
 10426  004B34                     	endif
 10427  004B34                     	if	0	;tblptru may be non-zero
 10428  004B34                     	endif
 10429  004B34  0008               	tblrd		*
 10430  004B36  50F5               	movf	tablat,w,c
 10431  004B38  EC48  F027         	call	_putch
 10432  004B3C  4A12               	infsnz	cputs@s,f,c
 10433  004B3E  2A13               	incf	cputs@s+1,f,c
 10434  004B40                     l8085:
 10435  004B40  C012  FFF6         	movff	cputs@s,tblptrl
 10436  004B44  C013  FFF7         	movff	cputs@s+1,tblptrh
 10437  004B48                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10438  004B48  6AF8               	clrf	tblptru,c
 10439  004B4A                     	endif
 10440  004B4A                     	if	0	;tblptru may be non-zero
 10441  004B4A                     	endif
 10442  004B4A  0008               	tblrd		*
 10443  004B4C  50F5               	movf	tablat,w,c
 10444  004B4E  0900               	iorlw	0
 10445  004B50  B4D8               	btfsc	status,2,c
 10446  004B52  0012               	return	
 10447  004B54  D7EA               	goto	l8081
 10448  004B56                     __end_of_cputs:
 10449                           	opt stack 0
 10450                           tblptru	equ	0xFF8
 10451                           tblptrh	equ	0xFF7
 10452                           tblptrl	equ	0xFF6
 10453                           tablat	equ	0xFF5
 10454                           prodh	equ	0xFF4
 10455                           prodl	equ	0xFF3
 10456                           intcon	equ	0xFF2
 10457                           postinc0	equ	0xFEE
 10458                           wreg	equ	0xFE8
 10459                           indf1	equ	0xFE7
 10460                           postinc1	equ	0xFE6
 10461                           postdec1	equ	0xFE5
 10462                           fsr1h	equ	0xFE2
 10463                           fsr1l	equ	0xFE1
 10464                           indf2	equ	0xFDF
 10465                           postinc2	equ	0xFDE
 10466                           postdec2	equ	0xFDD
 10467                           fsr2h	equ	0xFDA
 10468                           fsr2l	equ	0xFD9
 10469                           status	equ	0xFD8
 10470                           
 10471 ;; *************** function _print_conflict_ids *****************
 10472 ;; Defined at:
 10473 ;;		line 269 in file "clcd.c"
 10474 ;; Parameters:    Size  Location     Type
 10475 ;;		None
 10476 ;; Auto vars:     Size  Location     Type
 10477 ;;  conflict_cou    2   60[COMRAM] int 
 10478 ;;  j               2    0        int 
 10479 ;; Return value:  Size  Location     Type
 10480 ;;                  1    wreg      void 
 10481 ;; Registers used:
 10482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10483 ;; Tracked objects:
 10484 ;;		On entry : 0/0
 10485 ;;		On exit  : 0/0
 10486 ;;		Unchanged: 0/0
 10487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10491 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10492 ;;Total ram usage:        6 bytes
 10493 ;; Hardware stack levels used:    1
 10494 ;; Hardware stack levels required when called:    9
 10495 ;; This function calls:
 10496 ;;		_memset
 10497 ;;		_printf
 10498 ;;		_put_string_usart1
 10499 ;;		_sprintf
 10500 ;; This function is called by:
 10501 ;;		_reply_to_host
 10502 ;; This function uses a non-reentrant model
 10503 ;;
 10504                           
 10505                           	psect	text32
 10506  003444                     __ptext32:
 10507                           	opt stack 0
 10508  003444                     _print_conflict_ids:
 10509                           	opt stack 19
 10510                           
 10511                           ;clcd.c: 270: int conflict_count = 0, j;
 10512                           
 10513                           ;incstack = 0
 10514  003444  0E00               	movlw	0
 10515  003446  6E3E               	movwf	print_conflict_ids@conflict_count+1,c
 10516  003448  0E00               	movlw	0
 10517  00344A  6E3D               	movwf	print_conflict_ids@conflict_count,c
 10518                           
 10519                           ;clcd.c: 271: for (conflict_count = 0; conflict_count < conflict_data_count; conflict_co
      +                          unt++) {
 10520  00344C  0E00               	movlw	0
 10521  00344E  6E3E               	movwf	print_conflict_ids@conflict_count+1,c
 10522  003450  0E00               	movlw	0
 10523  003452  6E3D               	movwf	print_conflict_ids@conflict_count,c
 10524  003454  D091               	goto	l8209
 10525  003456                     l8189:
 10526                           
 10527                           ;clcd.c: 272: if (conflict_count == conflict_data_count - 1) {
 10528  003456  0EFF               	movlw	255
 10529  003458  6E39               	movwf	??_print_conflict_ids& (0+255),c
 10530  00345A  0EFF               	movlw	255
 10531  00345C  6E3A               	movwf	(??_print_conflict_ids+1)& (0+255),c
 10532  00345E  5042               	movf	_conflict_data_count,w,c
 10533  003460  6E3B               	movwf	(??_print_conflict_ids+2)& (0+255),c
 10534  003462  6A3C               	clrf	(??_print_conflict_ids+3)& (0+255),c
 10535  003464  5039               	movf	??_print_conflict_ids,w,c
 10536  003466  263B               	addwf	??_print_conflict_ids+2,f,c
 10537  003468  503A               	movf	??_print_conflict_ids+1,w,c
 10538  00346A  223C               	addwfc	??_print_conflict_ids+3,f,c
 10539  00346C  503D               	movf	print_conflict_ids@conflict_count,w,c
 10540  00346E  183B               	xorwf	??_print_conflict_ids+2,w,c
 10541  003470  E143               	bnz	l8199
 10542  003472  503E               	movf	print_conflict_ids@conflict_count+1,w,c
 10543  003474  183C               	xorwf	??_print_conflict_ids+3,w,c
 10544  003476  A4D8               	btfss	status,2,c
 10545  003478  D03F               	goto	l8199
 10546                           
 10547                           ;clcd.c: 273: memset(out_str, 0, sizeof (out_str));
 10548  00347A  0E40               	movlw	low _out_str
 10549  00347C  6E24               	movwf	memset@p1,c
 10550  00347E  0E02               	movlw	high _out_str
 10551  003480  6E25               	movwf	memset@p1+1,c
 10552  003482  0E00               	movlw	0
 10553  003484  6E27               	movwf	memset@c+1,c
 10554  003486  0E00               	movlw	0
 10555  003488  6E26               	movwf	memset@c,c
 10556  00348A  0E00               	movlw	0
 10557  00348C  6E29               	movwf	memset@n+1,c
 10558  00348E  0E64               	movlw	100
 10559  003490  6E28               	movwf	memset@n,c
 10560  003492  ECD8  F025         	call	_memset	;wreg free
 10561                           
 10562                           ;clcd.c: 274: sprintf(out_str, "%d\r\n", conflict_arr[conflict_count]);
 10563  003496  0E40               	movlw	low _out_str
 10564  003498  6E2B               	movwf	sprintf@wh,c
 10565  00349A  0E02               	movlw	high _out_str
 10566  00349C  6E2C               	movwf	sprintf@wh+1,c
 10567  00349E  0EBE               	movlw	low (STR_24+14)
 10568  0034A0  6E2D               	movwf	sprintf@f,c
 10569  0034A2  0EFD               	movlw	high (STR_24+14)
 10570  0034A4  6E2E               	movwf	sprintf@f+1,c
 10571  0034A6  90D8               	bcf	status,0,c
 10572  0034A8  343D               	rlcf	print_conflict_ids@conflict_count,w,c
 10573  0034AA  6ED9               	movwf	fsr2l,c
 10574  0034AC  343E               	rlcf	print_conflict_ids@conflict_count+1,w,c
 10575  0034AE  6EDA               	movwf	fsr2h,c
 10576  0034B0  0EA3               	movlw	low _conflict_arr
 10577  0034B2  26D9               	addwf	fsr2l,f,c
 10578  0034B4  0E01               	movlw	high _conflict_arr
 10579  0034B6  22DA               	addwfc	fsr2h,f,c
 10580  0034B8  CFDE F02F          	movff	postinc2,?_sprintf+4
 10581  0034BC  CFDD F030          	movff	postdec2,?_sprintf+5
 10582  0034C0  EC18  F024         	call	_sprintf	;wreg free
 10583                           
 10584                           ;clcd.c: 275: put_string_usart1(out_str);
 10585  0034C4  0E40               	movlw	low _out_str
 10586  0034C6  6E11               	movwf	put_string_usart1@str,c
 10587  0034C8  0E02               	movlw	high _out_str
 10588  0034CA  6E12               	movwf	put_string_usart1@str+1,c
 10589  0034CC  EC2A  F026         	call	_put_string_usart1	;wreg free
 10590                           
 10591                           ;clcd.c: 276: printf("%d\r\n", conflict_arr[conflict_count]);
 10592  0034D0  0EBE               	movlw	low (STR_24+14)
 10593  0034D2  6E2B               	movwf	printf@f,c
 10594  0034D4  0EFD               	movlw	high (STR_24+14)
 10595  0034D6  6E2C               	movwf	printf@f+1,c
 10596  0034D8  90D8               	bcf	status,0,c
 10597  0034DA  343D               	rlcf	print_conflict_ids@conflict_count,w,c
 10598  0034DC  6ED9               	movwf	fsr2l,c
 10599  0034DE  343E               	rlcf	print_conflict_ids@conflict_count+1,w,c
 10600  0034E0  6EDA               	movwf	fsr2h,c
 10601  0034E2  0EA3               	movlw	low _conflict_arr
 10602  0034E4  26D9               	addwf	fsr2l,f,c
 10603  0034E6  0E01               	movlw	high _conflict_arr
 10604  0034E8  22DA               	addwfc	fsr2h,f,c
 10605  0034EA  CFDE F02D          	movff	postinc2,?_printf+2
 10606  0034EE  CFDD F02E          	movff	postdec2,?_printf+3
 10607  0034F2  EC12  F025         	call	_printf	;wreg free
 10608                           
 10609                           ;clcd.c: 277: } else {
 10610  0034F6  D03E               	goto	l8207
 10611  0034F8                     l8199:
 10612                           
 10613                           ;clcd.c: 278: memset(out_str, 0, sizeof (out_str));
 10614  0034F8  0E40               	movlw	low _out_str
 10615  0034FA  6E24               	movwf	memset@p1,c
 10616  0034FC  0E02               	movlw	high _out_str
 10617  0034FE  6E25               	movwf	memset@p1+1,c
 10618  003500  0E00               	movlw	0
 10619  003502  6E27               	movwf	memset@c+1,c
 10620  003504  0E00               	movlw	0
 10621  003506  6E26               	movwf	memset@c,c
 10622  003508  0E00               	movlw	0
 10623  00350A  6E29               	movwf	memset@n+1,c
 10624  00350C  0E64               	movlw	100
 10625  00350E  6E28               	movwf	memset@n,c
 10626  003510  ECD8  F025         	call	_memset	;wreg free
 10627                           
 10628                           ;clcd.c: 279: sprintf(out_str, "%d, ", conflict_arr[conflict_count]);
 10629  003514  0E40               	movlw	low _out_str
 10630  003516  6E2B               	movwf	sprintf@wh,c
 10631  003518  0E02               	movlw	high _out_str
 10632  00351A  6E2C               	movwf	sprintf@wh+1,c
 10633  00351C  0EE1               	movlw	low STR_15
 10634  00351E  6E2D               	movwf	sprintf@f,c
 10635  003520  0EFF               	movlw	high STR_15
 10636  003522  6E2E               	movwf	sprintf@f+1,c
 10637  003524  90D8               	bcf	status,0,c
 10638  003526  343D               	rlcf	print_conflict_ids@conflict_count,w,c
 10639  003528  6ED9               	movwf	fsr2l,c
 10640  00352A  343E               	rlcf	print_conflict_ids@conflict_count+1,w,c
 10641  00352C  6EDA               	movwf	fsr2h,c
 10642  00352E  0EA3               	movlw	low _conflict_arr
 10643  003530  26D9               	addwf	fsr2l,f,c
 10644  003532  0E01               	movlw	high _conflict_arr
 10645  003534  22DA               	addwfc	fsr2h,f,c
 10646  003536  CFDE F02F          	movff	postinc2,?_sprintf+4
 10647  00353A  CFDD F030          	movff	postdec2,?_sprintf+5
 10648  00353E  EC18  F024         	call	_sprintf	;wreg free
 10649                           
 10650                           ;clcd.c: 280: put_string_usart1(out_str);
 10651  003542  0E40               	movlw	low _out_str
 10652  003544  6E11               	movwf	put_string_usart1@str,c
 10653  003546  0E02               	movlw	high _out_str
 10654  003548  6E12               	movwf	put_string_usart1@str+1,c
 10655  00354A  EC2A  F026         	call	_put_string_usart1	;wreg free
 10656                           
 10657                           ;clcd.c: 281: printf("%d, ", conflict_arr[conflict_count]);
 10658  00354E  0EE1               	movlw	low STR_15
 10659  003550  6E2B               	movwf	printf@f,c
 10660  003552  0EFF               	movlw	high STR_15
 10661  003554  6E2C               	movwf	printf@f+1,c
 10662  003556  90D8               	bcf	status,0,c
 10663  003558  343D               	rlcf	print_conflict_ids@conflict_count,w,c
 10664  00355A  6ED9               	movwf	fsr2l,c
 10665  00355C  343E               	rlcf	print_conflict_ids@conflict_count+1,w,c
 10666  00355E  6EDA               	movwf	fsr2h,c
 10667  003560  0EA3               	movlw	low _conflict_arr
 10668  003562  26D9               	addwf	fsr2l,f,c
 10669  003564  0E01               	movlw	high _conflict_arr
 10670  003566  22DA               	addwfc	fsr2h,f,c
 10671  003568  CFDE F02D          	movff	postinc2,?_printf+2
 10672  00356C  CFDD F02E          	movff	postdec2,?_printf+3
 10673  003570  EC12  F025         	call	_printf	;wreg free
 10674  003574                     l8207:
 10675  003574  4A3D               	infsnz	print_conflict_ids@conflict_count,f,c
 10676  003576  2A3E               	incf	print_conflict_ids@conflict_count+1,f,c
 10677  003578                     l8209:
 10678  003578  5042               	movf	_conflict_data_count,w,c
 10679  00357A  6E39               	movwf	??_print_conflict_ids& (0+255),c
 10680  00357C  6A3A               	clrf	(??_print_conflict_ids+1)& (0+255),c
 10681  00357E  5039               	movf	??_print_conflict_ids,w,c
 10682  003580  5C3D               	subwf	print_conflict_ids@conflict_count,w,c
 10683  003582  503E               	movf	print_conflict_ids@conflict_count+1,w,c
 10684  003584  0A80               	xorlw	128
 10685  003586  6E3B               	movwf	(??_print_conflict_ids+2)& (0+255),c
 10686  003588  503A               	movf	??_print_conflict_ids+1,w,c
 10687  00358A  0A80               	xorlw	128
 10688  00358C  583B               	subwfb	(??_print_conflict_ids+2)& (0+255),w,c
 10689  00358E  B0D8               	btfsc	status,0,c
 10690  003590  0012               	return	
 10691  003592  D761               	goto	l8189
 10692  003594                     __end_of_print_conflict_ids:
 10693                           	opt stack 0
 10694                           tblptru	equ	0xFF8
 10695                           tblptrh	equ	0xFF7
 10696                           tblptrl	equ	0xFF6
 10697                           tablat	equ	0xFF5
 10698                           prodh	equ	0xFF4
 10699                           prodl	equ	0xFF3
 10700                           intcon	equ	0xFF2
 10701                           postinc0	equ	0xFEE
 10702                           wreg	equ	0xFE8
 10703                           indf1	equ	0xFE7
 10704                           postinc1	equ	0xFE6
 10705                           postdec1	equ	0xFE5
 10706                           fsr1h	equ	0xFE2
 10707                           fsr1l	equ	0xFE1
 10708                           indf2	equ	0xFDF
 10709                           postinc2	equ	0xFDE
 10710                           postdec2	equ	0xFDD
 10711                           fsr2h	equ	0xFDA
 10712                           fsr2l	equ	0xFD9
 10713                           status	equ	0xFD8
 10714                           
 10715 ;; *************** function _sprintf *****************
 10716 ;; Defined at:
 10717 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
 10718 ;; Parameters:    Size  Location     Type
 10719 ;;  wh              2   42[COMRAM] PTR unsigned char 
 10720 ;;		 -> out_str(100), 
 10721 ;;  f               2   44[COMRAM] PTR const unsigned char 
 10722 ;;		 -> STR_146(5), STR_143(5), STR_137(12), STR_132(9), 
 10723 ;;		 -> STR_131(9), STR_130(9), STR_129(9), STR_127(5), 
 10724 ;;		 -> STR_99(5), STR_87(5), STR_15(5), STR_13(5), 
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;  pb              4   50[COMRAM] struct __prbuf
 10727 ;;  ap              2   48[COMRAM] PTR void [1]
 10728 ;;		 -> ?_sprintf(2), ?_printf(2), 
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  2   42[COMRAM] int 
 10731 ;; Registers used:
 10732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/0
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10738 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10739 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10741 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10742 ;;Total ram usage:       12 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; Hardware stack levels required when called:    8
 10745 ;; This function calls:
 10746 ;;		__doprnt
 10747 ;; This function is called by:
 10748 ;;		_print_conflict_ids
 10749 ;;		_reply_to_host
 10750 ;;		_cmd_consol_task
 10751 ;; This function uses a non-reentrant model
 10752 ;;
 10753                           
 10754                           	psect	text33
 10755  004830                     __ptext33:
 10756                           	opt stack 0
 10757  004830                     _sprintf:
 10758                           	opt stack 21
 10759                           
 10760                           ;incstack = 0
 10761  004830  C02B  F033         	movff	sprintf@wh,sprintf@pb
 10762  004834  C02C  F034         	movff	sprintf@wh+1,sprintf@pb+1
 10763  004838  0E00               	movlw	0
 10764  00483A  6E35               	movwf	sprintf@pb+2,c
 10765  00483C  0E00               	movlw	0
 10766  00483E  6E36               	movwf	sprintf@pb+3,c
 10767  004840  0E2F               	movlw	low (?_sprintf+4)
 10768  004842  6E31               	movwf	sprintf@ap,c
 10769  004844  0E00               	movlw	high (?_sprintf+4)
 10770  004846  6E32               	movwf	sprintf@ap+1,c
 10771  004848  0E33               	movlw	low sprintf@pb
 10772  00484A  6E1C               	movwf	__doprnt@pb,c
 10773  00484C  0E00               	movlw	high sprintf@pb
 10774  00484E  6E1D               	movwf	__doprnt@pb+1,c
 10775  004850  C02D  F01E         	movff	sprintf@f,__doprnt@f
 10776  004854  C02E  F01F         	movff	sprintf@f+1,__doprnt@f+1
 10777  004858  0E31               	movlw	low sprintf@ap
 10778  00485A  6E20               	movwf	__doprnt@ap,c
 10779  00485C  0E00               	movlw	high sprintf@ap
 10780  00485E  6E21               	movwf	__doprnt@ap+1,c
 10781  004860  EC68  F00B         	call	__doprnt	;wreg free
 10782  004864  C033  FFD9         	movff	sprintf@pb,fsr2l
 10783  004868  C034  FFDA         	movff	sprintf@pb+1,fsr2h
 10784  00486C  0E00               	movlw	0
 10785  00486E  6EDF               	movwf	indf2,c
 10786  004870  0012               	return	
 10787  004872                     __end_of_sprintf:
 10788                           	opt stack 0
 10789                           tblptru	equ	0xFF8
 10790                           tblptrh	equ	0xFF7
 10791                           tblptrl	equ	0xFF6
 10792                           tablat	equ	0xFF5
 10793                           prodh	equ	0xFF4
 10794                           prodl	equ	0xFF3
 10795                           intcon	equ	0xFF2
 10796                           postinc0	equ	0xFEE
 10797                           wreg	equ	0xFE8
 10798                           indf1	equ	0xFE7
 10799                           postinc1	equ	0xFE6
 10800                           postdec1	equ	0xFE5
 10801                           fsr1h	equ	0xFE2
 10802                           fsr1l	equ	0xFE1
 10803                           indf2	equ	0xFDF
 10804                           postinc2	equ	0xFDE
 10805                           postdec2	equ	0xFDD
 10806                           fsr2h	equ	0xFDA
 10807                           fsr2l	equ	0xFD9
 10808                           status	equ	0xFD8
 10809                           
 10810 ;; *************** function _put_string_usart1 *****************
 10811 ;; Defined at:
 10812 ;;		line 195 in file "mcc_generated_files/eusart1.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;  str             2   16[COMRAM] PTR unsigned char 
 10815 ;;		 -> out_str(100), 
 10816 ;; Auto vars:     Size  Location     Type
 10817 ;;		None
 10818 ;; Return value:  Size  Location     Type
 10819 ;;                  1    wreg      void 
 10820 ;; Registers used:
 10821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10822 ;; Tracked objects:
 10823 ;;		On entry : 0/0
 10824 ;;		On exit  : 0/0
 10825 ;;		Unchanged: 0/0
 10826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10830 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10831 ;;Total ram usage:        2 bytes
 10832 ;; Hardware stack levels used:    1
 10833 ;; Hardware stack levels required when called:    6
 10834 ;; This function calls:
 10835 ;;		_EUSART1_Write
 10836 ;; This function is called by:
 10837 ;;		_print_conflict_ids
 10838 ;;		_reply_to_host
 10839 ;;		_cmd_consol_task
 10840 ;; This function uses a non-reentrant model
 10841 ;;
 10842                           
 10843                           	psect	text34
 10844  004C54                     __ptext34:
 10845                           	opt stack 0
 10846  004C54                     _put_string_usart1:
 10847                           	opt stack 22
 10848                           
 10849                           ;eusart1.c: 196: while (*str != 0) {
 10850                           
 10851                           ;incstack = 0
 10852  004C54  D009               	goto	l7741
 10853  004C56                     l7737:
 10854                           
 10855                           ;eusart1.c: 197: EUSART1_Write(*str++);
 10856  004C56  C011  FFD9         	movff	put_string_usart1@str,fsr2l
 10857  004C5A  C012  FFDA         	movff	put_string_usart1@str+1,fsr2h
 10858  004C5E  50DF               	movf	indf2,w,c
 10859  004C60  ECBA  F024         	call	_EUSART1_Write
 10860  004C64  4A11               	infsnz	put_string_usart1@str,f,c
 10861  004C66  2A12               	incf	put_string_usart1@str+1,f,c
 10862  004C68                     l7741:
 10863  004C68  C011  FFD9         	movff	put_string_usart1@str,fsr2l
 10864  004C6C  C012  FFDA         	movff	put_string_usart1@str+1,fsr2h
 10865  004C70  50DF               	movf	indf2,w,c
 10866  004C72  B4D8               	btfsc	status,2,c
 10867  004C74  0012               	return	
 10868  004C76  D7EF               	goto	l7737
 10869  004C78                     __end_of_put_string_usart1:
 10870                           	opt stack 0
 10871                           tblptru	equ	0xFF8
 10872                           tblptrh	equ	0xFF7
 10873                           tblptrl	equ	0xFF6
 10874                           tablat	equ	0xFF5
 10875                           prodh	equ	0xFF4
 10876                           prodl	equ	0xFF3
 10877                           intcon	equ	0xFF2
 10878                           postinc0	equ	0xFEE
 10879                           wreg	equ	0xFE8
 10880                           indf1	equ	0xFE7
 10881                           postinc1	equ	0xFE6
 10882                           postdec1	equ	0xFE5
 10883                           fsr1h	equ	0xFE2
 10884                           fsr1l	equ	0xFE1
 10885                           indf2	equ	0xFDF
 10886                           postinc2	equ	0xFDE
 10887                           postdec2	equ	0xFDD
 10888                           fsr2h	equ	0xFDA
 10889                           fsr2l	equ	0xFD9
 10890                           status	equ	0xFD8
 10891                           
 10892 ;; *************** function _EUSART1_Write *****************
 10893 ;; Defined at:
 10894 ;;		line 132 in file "mcc_generated_files/eusart1.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;  txData          1    wreg     unsigned char 
 10897 ;; Auto vars:     Size  Location     Type
 10898 ;;  txData          1   15[COMRAM] unsigned char 
 10899 ;; Return value:  Size  Location     Type
 10900 ;;                  1    wreg      void 
 10901 ;; Registers used:
 10902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10903 ;; Tracked objects:
 10904 ;;		On entry : 0/0
 10905 ;;		On exit  : 0/0
 10906 ;;		Unchanged: 0/0
 10907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10911 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10912 ;;Total ram usage:        1 bytes
 10913 ;; Hardware stack levels used:    1
 10914 ;; Hardware stack levels required when called:    5
 10915 ;; This function calls:
 10916 ;;		Nothing
 10917 ;; This function is called by:
 10918 ;;		_put_string_usart1
 10919 ;; This function uses a non-reentrant model
 10920 ;;
 10921                           
 10922                           	psect	text35
 10923  004974                     __ptext35:
 10924                           	opt stack 0
 10925  004974                     _EUSART1_Write:
 10926                           	opt stack 22
 10927                           
 10928                           ;incstack = 0
 10929                           ;EUSART1_Write@txData stored from wreg
 10930  004974  6E10               	movwf	EUSART1_Write@txData,c
 10931  004976                     l7483:
 10932  004976  0101               	movlb	1	; () banked
 10933  004978  51F2               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 10934  00497A  B4D8               	btfsc	status,2,c
 10935  00497C  D7FC               	goto	l7483
 10936                           
 10937                           ; BSR set to: 1
 10938                           ;eusart1.c: 136: }
 10939                           ;eusart1.c: 138: if(0 == PIE1bits.TX1IE)
 10940  00497E  B89D               	btfsc	3997,4,c	;volatile
 10941  004980  D003               	goto	l195
 10942                           
 10943                           ; BSR set to: 1
 10944                           ;eusart1.c: 139: {
 10945                           ;eusart1.c: 140: TXREG1 = txData;
 10946  004982  C010  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 10947                           
 10948                           ;eusart1.c: 141: }
 10949  004986  D013               	goto	l7497
 10950  004988                     l195:
 10951                           
 10952                           ; BSR set to: 1
 10953                           ;eusart1.c: 142: else
 10954                           ;eusart1.c: 143: {
 10955                           ;eusart1.c: 144: PIE1bits.TX1IE = 0;
 10956  004988  989D               	bcf	3997,4,c	;volatile
 10957                           
 10958                           ; BSR set to: 1
 10959                           ;eusart1.c: 145: eusart1TxBuffer[eusart1TxHead++] = txData;
 10960  00498A  5047               	movf	_eusart1TxHead,w,c	;volatile
 10961  00498C  0D01               	mullw	1
 10962  00498E  0E00               	movlw	low _eusart1TxBuffer
 10963  004990  24F3               	addwf	prodl,w,c
 10964  004992  6ED9               	movwf	fsr2l,c
 10965  004994  0E01               	movlw	high _eusart1TxBuffer
 10966  004996  20F4               	addwfc	prodh,w,c
 10967  004998  6EDA               	movwf	fsr2h,c
 10968  00499A  C010  FFDF         	movff	EUSART1_Write@txData,indf2
 10969                           
 10970                           ; BSR set to: 1
 10971  00499E  2A47               	incf	_eusart1TxHead,f,c	;volatile
 10972                           
 10973                           ; BSR set to: 1
 10974                           ;eusart1.c: 146: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 10975  0049A0  0E07               	movlw	7
 10976  0049A2  6447               	cpfsgt	_eusart1TxHead,c	;volatile
 10977  0049A4  D002               	goto	l7495
 10978                           
 10979                           ; BSR set to: 1
 10980                           ;eusart1.c: 147: {
 10981                           ;eusart1.c: 148: eusart1TxHead = 0;
 10982  0049A6  0E00               	movlw	0
 10983  0049A8  6E47               	movwf	_eusart1TxHead,c	;volatile
 10984  0049AA                     l7495:
 10985                           
 10986                           ; BSR set to: 1
 10987                           ;eusart1.c: 149: }
 10988                           ;eusart1.c: 150: eusart1TxBufferRemaining--;
 10989  0049AA  0101               	movlb	1	; () banked
 10990  0049AC  07F2               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 10991  0049AE                     l7497:
 10992                           
 10993                           ; BSR set to: 1
 10994                           ;eusart1.c: 151: }
 10995                           ;eusart1.c: 152: PIE1bits.TX1IE = 1;
 10996  0049AE  889D               	bsf	3997,4,c	;volatile
 10997                           
 10998                           ; BSR set to: 1
 10999  0049B0  0012               	return		;funcret
 11000  0049B2                     __end_of_EUSART1_Write:
 11001                           	opt stack 0
 11002                           tblptru	equ	0xFF8
 11003                           tblptrh	equ	0xFF7
 11004                           tblptrl	equ	0xFF6
 11005                           tablat	equ	0xFF5
 11006                           prodh	equ	0xFF4
 11007                           prodl	equ	0xFF3
 11008                           intcon	equ	0xFF2
 11009                           postinc0	equ	0xFEE
 11010                           wreg	equ	0xFE8
 11011                           indf1	equ	0xFE7
 11012                           postinc1	equ	0xFE6
 11013                           postdec1	equ	0xFE5
 11014                           fsr1h	equ	0xFE2
 11015                           fsr1l	equ	0xFE1
 11016                           indf2	equ	0xFDF
 11017                           postinc2	equ	0xFDE
 11018                           postdec2	equ	0xFDD
 11019                           fsr2h	equ	0xFDA
 11020                           fsr2l	equ	0xFD9
 11021                           status	equ	0xFD8
 11022                           
 11023 ;; *************** function _min_uid_range *****************
 11024 ;; Defined at:
 11025 ;;		line 98 in file "clcd.c"
 11026 ;; Parameters:    Size  Location     Type
 11027 ;;		None
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;		None
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  1    wreg      unsigned char 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11043 ;;Total ram usage:        0 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; Hardware stack levels required when called:    5
 11046 ;; This function calls:
 11047 ;;		Nothing
 11048 ;; This function is called by:
 11049 ;;		_reply_to_host
 11050 ;; This function uses a non-reentrant model
 11051 ;;
 11052                           
 11053                           	psect	text36
 11054  004DEC                     __ptext36:
 11055                           	opt stack 0
 11056  004DEC                     _min_uid_range:
 11057                           	opt stack 23
 11058                           
 11059                           ;clcd.c: 99: if (clcd_config_data.init_done == 0)
 11060                           
 11061                           ; BSR set to: 1
 11062                           ;incstack = 0
 11063  004DEC  5049               	movf	_clcd_config_data,w,c
 11064  004DEE  A4D8               	btfss	status,2,c
 11065  004DF0  D002               	goto	l8143
 11066                           
 11067                           ;clcd.c: 100: return 0;
 11068  004DF2  0E00               	movlw	0
 11069  004DF4  0012               	return	
 11070  004DF6                     l8143:
 11071                           
 11072                           ;clcd.c: 101: else
 11073                           ;clcd.c: 102: return 'A';
 11074  004DF6  0E41               	movlw	65
 11075  004DF8  0012               	return	
 11076  004DFA                     __end_of_min_uid_range:
 11077                           	opt stack 0
 11078                           tblptru	equ	0xFF8
 11079                           tblptrh	equ	0xFF7
 11080                           tblptrl	equ	0xFF6
 11081                           tablat	equ	0xFF5
 11082                           prodh	equ	0xFF4
 11083                           prodl	equ	0xFF3
 11084                           intcon	equ	0xFF2
 11085                           postinc0	equ	0xFEE
 11086                           wreg	equ	0xFE8
 11087                           indf1	equ	0xFE7
 11088                           postinc1	equ	0xFE6
 11089                           postdec1	equ	0xFE5
 11090                           fsr1h	equ	0xFE2
 11091                           fsr1l	equ	0xFE1
 11092                           indf2	equ	0xFDF
 11093                           postinc2	equ	0xFDE
 11094                           postdec2	equ	0xFDD
 11095                           fsr2h	equ	0xFDA
 11096                           fsr2l	equ	0xFD9
 11097                           status	equ	0xFD8
 11098                           
 11099 ;; *************** function _max_uid_range *****************
 11100 ;; Defined at:
 11101 ;;		line 105 in file "clcd.c"
 11102 ;; Parameters:    Size  Location     Type
 11103 ;;		None
 11104 ;; Auto vars:     Size  Location     Type
 11105 ;;		None
 11106 ;; Return value:  Size  Location     Type
 11107 ;;                  1    wreg      unsigned char 
 11108 ;; Registers used:
 11109 ;;		wreg, status,2, status,0
 11110 ;; Tracked objects:
 11111 ;;		On entry : 0/0
 11112 ;;		On exit  : 0/0
 11113 ;;		Unchanged: 0/0
 11114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11119 ;;Total ram usage:        0 bytes
 11120 ;; Hardware stack levels used:    1
 11121 ;; Hardware stack levels required when called:    5
 11122 ;; This function calls:
 11123 ;;		Nothing
 11124 ;; This function is called by:
 11125 ;;		_reply_to_host
 11126 ;; This function uses a non-reentrant model
 11127 ;;
 11128                           
 11129                           	psect	text37
 11130  004DFA                     __ptext37:
 11131                           	opt stack 0
 11132  004DFA                     _max_uid_range:
 11133                           	opt stack 23
 11134                           
 11135                           ;clcd.c: 106: if (clcd_config_data.init_done == 0)
 11136                           
 11137                           ;incstack = 0
 11138  004DFA  5049               	movf	_clcd_config_data,w,c
 11139  004DFC  A4D8               	btfss	status,2,c
 11140  004DFE  D002               	goto	l8155
 11141                           
 11142                           ;clcd.c: 107: return 0;
 11143  004E00  0E00               	movlw	0
 11144  004E02  0012               	return	
 11145  004E04                     l8155:
 11146                           
 11147                           ;clcd.c: 108: else
 11148                           ;clcd.c: 109: return clcd_config_data.uid_range - 1;
 11149  004E04  044C               	decf	_clcd_config_data+3,w,c
 11150  004E06  0012               	return	
 11151  004E08                     __end_of_max_uid_range:
 11152                           	opt stack 0
 11153                           tblptru	equ	0xFF8
 11154                           tblptrh	equ	0xFF7
 11155                           tblptrl	equ	0xFF6
 11156                           tablat	equ	0xFF5
 11157                           prodh	equ	0xFF4
 11158                           prodl	equ	0xFF3
 11159                           intcon	equ	0xFF2
 11160                           postinc0	equ	0xFEE
 11161                           wreg	equ	0xFE8
 11162                           indf1	equ	0xFE7
 11163                           postinc1	equ	0xFE6
 11164                           postdec1	equ	0xFE5
 11165                           fsr1h	equ	0xFE2
 11166                           fsr1l	equ	0xFE1
 11167                           indf2	equ	0xFDF
 11168                           postinc2	equ	0xFDE
 11169                           postdec2	equ	0xFDD
 11170                           fsr2h	equ	0xFDA
 11171                           fsr2l	equ	0xFD9
 11172                           status	equ	0xFD8
 11173                           
 11174 ;; *************** function _max_display_support *****************
 11175 ;; Defined at:
 11176 ;;		line 112 in file "clcd.c"
 11177 ;; Parameters:    Size  Location     Type
 11178 ;;		None
 11179 ;; Auto vars:     Size  Location     Type
 11180 ;;		None
 11181 ;; Return value:  Size  Location     Type
 11182 ;;                  2   15[COMRAM] PTR unsigned char 
 11183 ;; Registers used:
 11184 ;;		wreg, status,2, status,0
 11185 ;; Tracked objects:
 11186 ;;		On entry : 0/0
 11187 ;;		On exit  : 0/0
 11188 ;;		Unchanged: 0/0
 11189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11190 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11193 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11194 ;;Total ram usage:        2 bytes
 11195 ;; Hardware stack levels used:    1
 11196 ;; Hardware stack levels required when called:    5
 11197 ;; This function calls:
 11198 ;;		Nothing
 11199 ;; This function is called by:
 11200 ;;		_reply_to_host
 11201 ;; This function uses a non-reentrant model
 11202 ;;
 11203                           
 11204                           	psect	text38
 11205  004E7C                     __ptext38:
 11206                           	opt stack 0
 11207  004E7C                     _max_display_support:
 11208                           	opt stack 23
 11209                           
 11210                           ;clcd.c: 113: return "4,20";
 11211                           
 11212                           ;incstack = 0
 11213  004E7C  0EE6               	movlw	low STR_5
 11214  004E7E  6E10               	movwf	?_max_display_support,c
 11215  004E80  0EFF               	movlw	high STR_5
 11216  004E82  6E11               	movwf	?_max_display_support+1,c
 11217  004E84  0012               	return	
 11218  004E86                     __end_of_max_display_support:
 11219                           	opt stack 0
 11220                           tblptru	equ	0xFF8
 11221                           tblptrh	equ	0xFF7
 11222                           tblptrl	equ	0xFF6
 11223                           tablat	equ	0xFF5
 11224                           prodh	equ	0xFF4
 11225                           prodl	equ	0xFF3
 11226                           intcon	equ	0xFF2
 11227                           postinc0	equ	0xFEE
 11228                           wreg	equ	0xFE8
 11229                           indf1	equ	0xFE7
 11230                           postinc1	equ	0xFE6
 11231                           postdec1	equ	0xFE5
 11232                           fsr1h	equ	0xFE2
 11233                           fsr1l	equ	0xFE1
 11234                           indf2	equ	0xFDF
 11235                           postinc2	equ	0xFDE
 11236                           postdec2	equ	0xFDD
 11237                           fsr2h	equ	0xFDA
 11238                           fsr2l	equ	0xFD9
 11239                           status	equ	0xFD8
 11240                           
 11241 ;; *************** function _max_display_str *****************
 11242 ;; Defined at:
 11243 ;;		line 91 in file "clcd.c"
 11244 ;; Parameters:    Size  Location     Type
 11245 ;;		None
 11246 ;; Auto vars:     Size  Location     Type
 11247 ;;		None
 11248 ;; Return value:  Size  Location     Type
 11249 ;;                  1    wreg      unsigned char 
 11250 ;; Registers used:
 11251 ;;		wreg, status,2
 11252 ;; Tracked objects:
 11253 ;;		On entry : 0/0
 11254 ;;		On exit  : 0/0
 11255 ;;		Unchanged: 0/0
 11256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11261 ;;Total ram usage:        0 bytes
 11262 ;; Hardware stack levels used:    1
 11263 ;; Hardware stack levels required when called:    5
 11264 ;; This function calls:
 11265 ;;		Nothing
 11266 ;; This function is called by:
 11267 ;;		_reply_to_host
 11268 ;; This function uses a non-reentrant model
 11269 ;;
 11270                           
 11271                           	psect	text39
 11272  004E08                     __ptext39:
 11273                           	opt stack 0
 11274  004E08                     _max_display_str:
 11275                           	opt stack 23
 11276                           
 11277                           ;clcd.c: 92: if (clcd_config_data.init_done == 0)
 11278                           
 11279                           ;incstack = 0
 11280  004E08  5049               	movf	_clcd_config_data,w,c
 11281  004E0A  A4D8               	btfss	status,2,c
 11282  004E0C  D002               	goto	l8131
 11283                           
 11284                           ;clcd.c: 93: return 0;
 11285  004E0E  0E00               	movlw	0
 11286  004E10  0012               	return	
 11287  004E12                     l8131:
 11288                           
 11289                           ;clcd.c: 94: else
 11290                           ;clcd.c: 95: return clcd_config_data.clcd_max_display_string;
 11291  004E12  504D               	movf	_clcd_config_data+4,w,c
 11292  004E14  0012               	return	
 11293  004E16                     __end_of_max_display_str:
 11294                           	opt stack 0
 11295                           tblptru	equ	0xFF8
 11296                           tblptrh	equ	0xFF7
 11297                           tblptrl	equ	0xFF6
 11298                           tablat	equ	0xFF5
 11299                           prodh	equ	0xFF4
 11300                           prodl	equ	0xFF3
 11301                           intcon	equ	0xFF2
 11302                           postinc0	equ	0xFEE
 11303                           wreg	equ	0xFE8
 11304                           indf1	equ	0xFE7
 11305                           postinc1	equ	0xFE6
 11306                           postdec1	equ	0xFE5
 11307                           fsr1h	equ	0xFE2
 11308                           fsr1l	equ	0xFE1
 11309                           indf2	equ	0xFDF
 11310                           postinc2	equ	0xFDE
 11311                           postdec2	equ	0xFDD
 11312                           fsr2h	equ	0xFDA
 11313                           fsr2l	equ	0xFD9
 11314                           status	equ	0xFD8
 11315                           
 11316 ;; *************** function _init_clcd_cusotom_lcd *****************
 11317 ;; Defined at:
 11318 ;;		line 51 in file "clcd.c"
 11319 ;; Parameters:    Size  Location     Type
 11320 ;;  clcd_init_ro    1    wreg     unsigned char 
 11321 ;;  clcd_init_co    1   56[COMRAM] unsigned char 
 11322 ;; Auto vars:     Size  Location     Type
 11323 ;;  clcd_init_ro    1   57[COMRAM] unsigned char 
 11324 ;; Return value:  Size  Location     Type
 11325 ;;                  1    wreg      void 
 11326 ;; Registers used:
 11327 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11328 ;; Tracked objects:
 11329 ;;		On entry : 0/0
 11330 ;;		On exit  : 0/0
 11331 ;;		Unchanged: 0/0
 11332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11333 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11336 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11337 ;;Total ram usage:        2 bytes
 11338 ;; Hardware stack levels used:    1
 11339 ;; Hardware stack levels required when called:   11
 11340 ;; This function calls:
 11341 ;;		___awdiv
 11342 ;;		___wmul
 11343 ;;		_init_CLCD_config
 11344 ;;		_memset
 11345 ;;		_printf
 11346 ;; This function is called by:
 11347 ;;		_reply_to_host
 11348 ;; This function uses a non-reentrant model
 11349 ;;
 11350                           
 11351                           	psect	text40
 11352  0037DE                     __ptext40:
 11353                           	opt stack 0
 11354  0037DE                     _init_clcd_cusotom_lcd:
 11355                           	opt stack 17
 11356                           
 11357                           ;incstack = 0
 11358                           ;init_clcd_cusotom_lcd@clcd_init_row stored from wreg
 11359  0037DE  6E3A               	movwf	init_clcd_cusotom_lcd@clcd_init_row,c
 11360                           
 11361                           ;clcd.c: 52: init_CLCD_config();
 11362  0037E0  ECE7  F01D         	call	_init_CLCD_config	;wreg free
 11363                           
 11364                           ;clcd.c: 53: data_count = 0;
 11365  0037E4  0E00               	movlw	0
 11366  0037E6  6E43               	movwf	_data_count,c
 11367                           
 11368                           ;clcd.c: 54: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details)
      +                          );
 11369  0037E8  0E99               	movlw	low _clcd_display_string_details
 11370  0037EA  6E24               	movwf	memset@p1,c
 11371  0037EC  0E05               	movlw	high _clcd_display_string_details
 11372  0037EE  6E25               	movwf	memset@p1+1,c
 11373  0037F0  0E00               	movlw	0
 11374  0037F2  6E27               	movwf	memset@c+1,c
 11375  0037F4  0E00               	movlw	0
 11376  0037F6  6E26               	movwf	memset@c,c
 11377  0037F8  0E04               	movlw	4
 11378  0037FA  6E29               	movwf	memset@n+1,c
 11379  0037FC  0E74               	movlw	116
 11380  0037FE  6E28               	movwf	memset@n,c
 11381  003800  ECD8  F025         	call	_memset	;wreg free
 11382                           
 11383                           ;clcd.c: 55: memset(conflict_arr, 0, sizeof (conflict_arr));
 11384  003804  0EA3               	movlw	low _conflict_arr
 11385  003806  6E24               	movwf	memset@p1,c
 11386  003808  0E01               	movlw	high _conflict_arr
 11387  00380A  6E25               	movwf	memset@p1+1,c
 11388  00380C  0E00               	movlw	0
 11389  00380E  6E27               	movwf	memset@c+1,c
 11390  003810  0E00               	movlw	0
 11391  003812  6E26               	movwf	memset@c,c
 11392  003814  0E00               	movlw	0
 11393  003816  6E29               	movwf	memset@n+1,c
 11394  003818  0E28               	movlw	40
 11395  00381A  6E28               	movwf	memset@n,c
 11396  00381C  ECD8  F025         	call	_memset	;wreg free
 11397                           
 11398                           ;clcd.c: 56: clcd_config_data.init_done = 1;
 11399  003820  0E01               	movlw	1
 11400  003822  6E49               	movwf	_clcd_config_data,c
 11401                           
 11402                           ;clcd.c: 58: printf("row = %d", clcd_init_row);
 11403  003824  0E6A               	movlw	low STR_1
 11404  003826  6E2B               	movwf	printf@f,c
 11405  003828  0EFF               	movlw	high STR_1
 11406  00382A  6E2C               	movwf	printf@f+1,c
 11407  00382C  C03A  F02D         	movff	init_clcd_cusotom_lcd@clcd_init_row,?_printf+2
 11408  003830  6A2E               	clrf	?_printf+3,c
 11409  003832  EC12  F025         	call	_printf	;wreg free
 11410                           
 11411                           ;clcd.c: 60: clcd_config_data.clcd_max_row = clcd_init_row;
 11412  003836  C03A  F04A         	movff	init_clcd_cusotom_lcd@clcd_init_row,_clcd_config_data+1
 11413                           
 11414                           ;clcd.c: 62: printf("col = %d", clcd_init_col);
 11415  00383A  0E61               	movlw	low STR_2
 11416  00383C  6E2B               	movwf	printf@f,c
 11417  00383E  0EFF               	movlw	high STR_2
 11418  003840  6E2C               	movwf	printf@f+1,c
 11419  003842  C039  F02D         	movff	init_clcd_cusotom_lcd@clcd_init_col,?_printf+2
 11420  003846  6A2E               	clrf	?_printf+3,c
 11421  003848  EC12  F025         	call	_printf	;wreg free
 11422                           
 11423                           ;clcd.c: 64: clcd_config_data.clcd_max_col = clcd_init_col;
 11424  00384C  C039  F04B         	movff	init_clcd_cusotom_lcd@clcd_init_col,_clcd_config_data+2
 11425                           
 11426                           ;clcd.c: 66: printf("string_count = %d", (clcd_init_col / 4) * clcd_init_row);
 11427  003850  0EE7               	movlw	low STR_3
 11428  003852  6E2B               	movwf	printf@f,c
 11429  003854  0EFD               	movlw	high STR_3
 11430  003856  6E2C               	movwf	printf@f+1,c
 11431  003858  0E00               	movlw	0
 11432  00385A  6E13               	movwf	___awdiv@divisor+1,c
 11433  00385C  0E04               	movlw	4
 11434  00385E  6E12               	movwf	___awdiv@divisor,c
 11435  003860  C039  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
 11436  003864  6A11               	clrf	___awdiv@dividend+1,c
 11437  003866  EC6F  F020         	call	___awdiv	;wreg free
 11438  00386A  C010  F018         	movff	?___awdiv,___wmul@multiplier
 11439  00386E  C011  F019         	movff	?___awdiv+1,___wmul@multiplier+1
 11440  003872  C03A  F01A         	movff	init_clcd_cusotom_lcd@clcd_init_row,___wmul@multiplicand
 11441  003876  6A1B               	clrf	___wmul@multiplicand+1,c
 11442  003878  EC04  F026         	call	___wmul	;wreg free
 11443  00387C  C018  F02D         	movff	?___wmul,?_printf+2
 11444  003880  C019  F02E         	movff	?___wmul+1,?_printf+3
 11445  003884  EC12  F025         	call	_printf	;wreg free
 11446                           
 11447                           ;clcd.c: 68: clcd_config_data.clcd_max_display_string = (clcd_init_col / 4) * clcd_init_
      +                          row;
 11448  003888  C039  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
 11449  00388C  6A11               	clrf	___awdiv@dividend+1,c
 11450  00388E  0E00               	movlw	0
 11451  003890  6E13               	movwf	___awdiv@divisor+1,c
 11452  003892  0E04               	movlw	4
 11453  003894  6E12               	movwf	___awdiv@divisor,c
 11454  003896  EC6F  F020         	call	___awdiv	;wreg free
 11455  00389A  5010               	movf	?___awdiv,w,c
 11456  00389C  023A               	mulwf	init_clcd_cusotom_lcd@clcd_init_row,c
 11457  00389E  CFF3 F04D          	movff	prodl,_clcd_config_data+4
 11458                           
 11459                           ;clcd.c: 69: clcd_config_data.uid_range = 'A' + clcd_config_data.clcd_max_display_string
      +                          ;
 11460  0038A2  504D               	movf	_clcd_config_data+4,w,c
 11461  0038A4  0F41               	addlw	65
 11462  0038A6  6E4C               	movwf	_clcd_config_data+3,c
 11463                           
 11464                           ;clcd.c: 71: printf("uid_range = %d\r\n", clcd_config_data.uid_range);
 11465  0038A8  0E0A               	movlw	low STR_4
 11466  0038AA  6E2B               	movwf	printf@f,c
 11467  0038AC  0EFE               	movlw	high STR_4
 11468  0038AE  6E2C               	movwf	printf@f+1,c
 11469  0038B0  C04C  F02D         	movff	_clcd_config_data+3,?_printf+2
 11470  0038B4  6A2E               	clrf	?_printf+3,c
 11471  0038B6  EC12  F025         	call	_printf	;wreg free
 11472  0038BA  0012               	return		;funcret
 11473  0038BC                     __end_of_init_clcd_cusotom_lcd:
 11474                           	opt stack 0
 11475                           tblptru	equ	0xFF8
 11476                           tblptrh	equ	0xFF7
 11477                           tblptrl	equ	0xFF6
 11478                           tablat	equ	0xFF5
 11479                           prodh	equ	0xFF4
 11480                           prodl	equ	0xFF3
 11481                           intcon	equ	0xFF2
 11482                           postinc0	equ	0xFEE
 11483                           wreg	equ	0xFE8
 11484                           indf1	equ	0xFE7
 11485                           postinc1	equ	0xFE6
 11486                           postdec1	equ	0xFE5
 11487                           fsr1h	equ	0xFE2
 11488                           fsr1l	equ	0xFE1
 11489                           indf2	equ	0xFDF
 11490                           postinc2	equ	0xFDE
 11491                           postdec2	equ	0xFDD
 11492                           fsr2h	equ	0xFDA
 11493                           fsr2l	equ	0xFD9
 11494                           status	equ	0xFD8
 11495                           
 11496 ;; *************** function _init_CLCD_config *****************
 11497 ;; Defined at:
 11498 ;;		line 17 in file "clcd.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;		None
 11501 ;; Auto vars:     Size  Location     Type
 11502 ;;		None
 11503 ;; Return value:  Size  Location     Type
 11504 ;;                  1    wreg      void 
 11505 ;; Registers used:
 11506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11507 ;; Tracked objects:
 11508 ;;		On entry : 0/0
 11509 ;;		On exit  : 0/0
 11510 ;;		Unchanged: 0/0
 11511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;Total ram usage:        0 bytes
 11517 ;; Hardware stack levels used:    1
 11518 ;; Hardware stack levels required when called:   10
 11519 ;; This function calls:
 11520 ;;		__delay_MS
 11521 ;;		_clcd_display_string_config
 11522 ;;		_memset
 11523 ;;		_reset_clcd
 11524 ;;		_write_lcd_cmd
 11525 ;; This function is called by:
 11526 ;;		_init_clcd_cusotom_lcd
 11527 ;;		_init_clcd_lcd_16x2
 11528 ;;		_init_clcd_lcd_20x4
 11529 ;; This function uses a non-reentrant model
 11530 ;;
 11531                           
 11532                           	psect	text41
 11533  003BCE                     __ptext41:
 11534                           	opt stack 0
 11535  003BCE                     _init_CLCD_config:
 11536                           	opt stack 17
 11537                           
 11538                           ;clcd.c: 18: memset(&clcd_config_data, 0, sizeof (CLCD_CONFIG_DATA));
 11539                           
 11540                           ;incstack = 0
 11541  003BCE  0E49               	movlw	low _clcd_config_data
 11542  003BD0  6E24               	movwf	memset@p1,c
 11543  003BD2  0E00               	movlw	high _clcd_config_data
 11544  003BD4  6E25               	movwf	memset@p1+1,c
 11545  003BD6  0E00               	movlw	0
 11546  003BD8  6E27               	movwf	memset@c+1,c
 11547  003BDA  0E00               	movlw	0
 11548  003BDC  6E26               	movwf	memset@c,c
 11549  003BDE  0E00               	movlw	0
 11550  003BE0  6E29               	movwf	memset@n+1,c
 11551  003BE2  0E05               	movlw	5
 11552  003BE4  6E28               	movwf	memset@n,c
 11553  003BE6  ECD8  F025         	call	_memset	;wreg free
 11554                           
 11555                           ;clcd.c: 20: TRISD = 0x00;
 11556  003BEA  0E00               	movlw	0
 11557  003BEC  6E95               	movwf	3989,c	;volatile
 11558                           
 11559                           ;clcd.c: 23: TRISA = (unsigned char) (TRISA | 0xF0);
 11560  003BEE  5092               	movf	3986,w,c	;volatile
 11561  003BF0  09F0               	iorlw	240
 11562  003BF2  6E92               	movwf	3986,c	;volatile
 11563                           
 11564                           ;clcd.c: 25: PORTAbits.RA0 = 0;
 11565  003BF4  9080               	bcf	3968,0,c	;volatile
 11566                           
 11567                           ;clcd.c: 26: _delay_MS(250);
 11568  003BF6  0E00               	movlw	0
 11569  003BF8  6E11               	movwf	__delay_MS@delay+1,c
 11570  003BFA  0EFA               	movlw	250
 11571  003BFC  6E10               	movwf	__delay_MS@delay,c
 11572  003BFE  ECF6  F023         	call	__delay_MS	;wreg free
 11573                           
 11574                           ;clcd.c: 29: write_lcd_cmd(0X38);
 11575  003C02  0E38               	movlw	56
 11576  003C04  EC5A  F024         	call	_write_lcd_cmd
 11577                           
 11578                           ;clcd.c: 30: _delay_MS(250);
 11579  003C08  0E00               	movlw	0
 11580  003C0A  6E11               	movwf	__delay_MS@delay+1,c
 11581  003C0C  0EFA               	movlw	250
 11582  003C0E  6E10               	movwf	__delay_MS@delay,c
 11583  003C10  ECF6  F023         	call	__delay_MS	;wreg free
 11584                           
 11585                           ;clcd.c: 32: write_lcd_cmd(0x0E);;
 11586  003C14  0E0E               	movlw	14
 11587  003C16  EC5A  F024         	call	_write_lcd_cmd
 11588                           
 11589                           ;clcd.c: 33: _delay_MS(250);
 11590  003C1A  0E00               	movlw	0
 11591  003C1C  6E11               	movwf	__delay_MS@delay+1,c
 11592  003C1E  0EFA               	movlw	250
 11593  003C20  6E10               	movwf	__delay_MS@delay,c
 11594  003C22  ECF6  F023         	call	__delay_MS	;wreg free
 11595                           
 11596                           ;clcd.c: 35: write_lcd_cmd(0x01);;
 11597  003C26  0E01               	movlw	1
 11598  003C28  EC5A  F024         	call	_write_lcd_cmd
 11599                           
 11600                           ;clcd.c: 36: _delay_MS(250);
 11601  003C2C  0E00               	movlw	0
 11602  003C2E  6E11               	movwf	__delay_MS@delay+1,c
 11603  003C30  0EFA               	movlw	250
 11604  003C32  6E10               	movwf	__delay_MS@delay,c
 11605  003C34  ECF6  F023         	call	__delay_MS	;wreg free
 11606                           
 11607                           ;clcd.c: 38: write_lcd_cmd(0x06);;
 11608  003C38  0E06               	movlw	6
 11609  003C3A  EC5A  F024         	call	_write_lcd_cmd
 11610                           
 11611                           ;clcd.c: 39: _delay_MS(250);
 11612  003C3E  0E00               	movlw	0
 11613  003C40  6E11               	movwf	__delay_MS@delay+1,c
 11614  003C42  0EFA               	movlw	250
 11615  003C44  6E10               	movwf	__delay_MS@delay,c
 11616  003C46  ECF6  F023         	call	__delay_MS	;wreg free
 11617                           
 11618                           ;clcd.c: 41: write_lcd_cmd(0x0C);
 11619  003C4A  0E0C               	movlw	12
 11620  003C4C  EC5A  F024         	call	_write_lcd_cmd
 11621                           
 11622                           ;clcd.c: 42: _delay_MS(250);
 11623  003C50  0E00               	movlw	0
 11624  003C52  6E11               	movwf	__delay_MS@delay+1,c
 11625  003C54  0EFA               	movlw	250
 11626  003C56  6E10               	movwf	__delay_MS@delay,c
 11627  003C58  ECF6  F023         	call	__delay_MS	;wreg free
 11628                           
 11629                           ;clcd.c: 44: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
 11630  003C5C  0E1E               	movlw	low _lcd_display_array
 11631  003C5E  6E24               	movwf	memset@p1,c
 11632  003C60  0E01               	movlw	high _lcd_display_array
 11633  003C62  6E25               	movwf	memset@p1+1,c
 11634  003C64  0E00               	movlw	0
 11635  003C66  6E27               	movwf	memset@c+1,c
 11636  003C68  0E20               	movlw	32
 11637  003C6A  6E26               	movwf	memset@c,c
 11638  003C6C  0E00               	movlw	0
 11639  003C6E  6E29               	movwf	memset@n+1,c
 11640  003C70  0E50               	movlw	80
 11641  003C72  6E28               	movwf	memset@n,c
 11642  003C74  ECD8  F025         	call	_memset	;wreg free
 11643                           
 11644                           ;clcd.c: 46: clcd_display_string_config();
 11645  003C78  EC3E  F022         	call	_clcd_display_string_config	;wreg free
 11646                           
 11647                           ;clcd.c: 48: reset_clcd();
 11648  003C7C  EC43  F027         	call	_reset_clcd	;wreg free
 11649  003C80  0012               	return		;funcret
 11650  003C82                     __end_of_init_CLCD_config:
 11651                           	opt stack 0
 11652                           tblptru	equ	0xFF8
 11653                           tblptrh	equ	0xFF7
 11654                           tblptrl	equ	0xFF6
 11655                           tablat	equ	0xFF5
 11656                           prodh	equ	0xFF4
 11657                           prodl	equ	0xFF3
 11658                           intcon	equ	0xFF2
 11659                           postinc0	equ	0xFEE
 11660                           wreg	equ	0xFE8
 11661                           indf1	equ	0xFE7
 11662                           postinc1	equ	0xFE6
 11663                           postdec1	equ	0xFE5
 11664                           fsr1h	equ	0xFE2
 11665                           fsr1l	equ	0xFE1
 11666                           indf2	equ	0xFDF
 11667                           postinc2	equ	0xFDE
 11668                           postdec2	equ	0xFDD
 11669                           fsr2h	equ	0xFDA
 11670                           fsr2l	equ	0xFD9
 11671                           status	equ	0xFD8
 11672                           
 11673 ;; *************** function _write_lcd_cmd *****************
 11674 ;; Defined at:
 11675 ;;		line 482 in file "clcd.c"
 11676 ;; Parameters:    Size  Location     Type
 11677 ;;  cmd             1    wreg     unsigned char 
 11678 ;; Auto vars:     Size  Location     Type
 11679 ;;  cmd             1   22[COMRAM] unsigned char 
 11680 ;; Return value:  Size  Location     Type
 11681 ;;                  1    wreg      void 
 11682 ;; Registers used:
 11683 ;;		wreg, status,2, status,0, cstack
 11684 ;; Tracked objects:
 11685 ;;		On entry : 0/0
 11686 ;;		On exit  : 0/0
 11687 ;;		Unchanged: 0/0
 11688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11690 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11692 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11693 ;;Total ram usage:        1 bytes
 11694 ;; Hardware stack levels used:    1
 11695 ;; Hardware stack levels required when called:    6
 11696 ;; This function calls:
 11697 ;;		_delay
 11698 ;; This function is called by:
 11699 ;;		_init_CLCD_config
 11700 ;;		_set_cursor
 11701 ;;		_char_enter_mode_left_to_right
 11702 ;;		_set_cursor_at_home
 11703 ;;		_display_and_cursor_control
 11704 ;;		_scroll_display_right
 11705 ;;		_scroll_display_left
 11706 ;;		_put_string
 11707 ;;		_put_char
 11708 ;; This function uses a non-reentrant model
 11709 ;;
 11710                           
 11711                           	psect	text42
 11712  0048B4                     __ptext42:
 11713                           	opt stack 0
 11714  0048B4                     _write_lcd_cmd:
 11715                           	opt stack 21
 11716                           
 11717                           ;incstack = 0
 11718                           ;write_lcd_cmd@cmd stored from wreg
 11719  0048B4  6E17               	movwf	write_lcd_cmd@cmd,c
 11720                           
 11721                           ;clcd.c: 483: PORTD = PORTD & 0xC0;
 11722  0048B6  5083               	movf	3971,w,c	;volatile
 11723  0048B8  0BC0               	andlw	192
 11724  0048BA  6E83               	movwf	3971,c	;volatile
 11725                           
 11726                           ;clcd.c: 484: PORTD = (cmd & 0x3F) | (PORTD);
 11727  0048BC  5017               	movf	write_lcd_cmd@cmd,w,c
 11728  0048BE  0B3F               	andlw	63
 11729  0048C0  1083               	iorwf	3971,w,c	;volatile
 11730  0048C2  6E83               	movwf	3971,c	;volatile
 11731                           
 11732                           ;clcd.c: 485: PORTC = PORTC & 0xCF;
 11733  0048C4  5082               	movf	3970,w,c	;volatile
 11734  0048C6  0BCF               	andlw	207
 11735  0048C8  6E82               	movwf	3970,c	;volatile
 11736                           
 11737                           ;clcd.c: 486: cmd = cmd & 0xC0;
 11738  0048CA  5017               	movf	write_lcd_cmd@cmd,w,c
 11739  0048CC  0BC0               	andlw	192
 11740  0048CE  6E17               	movwf	write_lcd_cmd@cmd,c
 11741                           
 11742                           ;clcd.c: 487: cmd = cmd >> 2;
 11743  0048D0  4017               	rrncf	write_lcd_cmd@cmd,w,c
 11744  0048D2  42E8               	rrncf	wreg,f,c
 11745  0048D4  0B3F               	andlw	63
 11746  0048D6  6E17               	movwf	write_lcd_cmd@cmd,c
 11747                           
 11748                           ;clcd.c: 488: PORTC = (cmd | PORTC);
 11749  0048D8  5017               	movf	write_lcd_cmd@cmd,w,c
 11750  0048DA  1082               	iorwf	3970,w,c	;volatile
 11751  0048DC  6E82               	movwf	3970,c	;volatile
 11752                           
 11753                           ;clcd.c: 489: PORTAbits.RA2 = 0;
 11754  0048DE  9480               	bcf	3968,2,c	;volatile
 11755                           
 11756                           ;clcd.c: 490: PORTAbits.RA1 = 0;
 11757  0048E0  9280               	bcf	3968,1,c	;volatile
 11758                           
 11759                           ;clcd.c: 491: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
 11760  0048E2  8080               	bsf	3968,0,c	;volatile
 11761  0048E4  0E00               	movlw	0
 11762  0048E6  6E11               	movwf	delay@delay+1,c
 11763  0048E8  0E01               	movlw	1
 11764  0048EA  6E10               	movwf	delay@delay,c
 11765  0048EC  EC65  F023         	call	_delay	;wreg free
 11766  0048F0  9080               	bcf	3968,0,c	;volatile
 11767  0048F2  0012               	return		;funcret
 11768  0048F4                     __end_of_write_lcd_cmd:
 11769                           	opt stack 0
 11770                           tblptru	equ	0xFF8
 11771                           tblptrh	equ	0xFF7
 11772                           tblptrl	equ	0xFF6
 11773                           tablat	equ	0xFF5
 11774                           prodh	equ	0xFF4
 11775                           prodl	equ	0xFF3
 11776                           intcon	equ	0xFF2
 11777                           postinc0	equ	0xFEE
 11778                           wreg	equ	0xFE8
 11779                           indf1	equ	0xFE7
 11780                           postinc1	equ	0xFE6
 11781                           postdec1	equ	0xFE5
 11782                           fsr1h	equ	0xFE2
 11783                           fsr1l	equ	0xFE1
 11784                           indf2	equ	0xFDF
 11785                           postinc2	equ	0xFDE
 11786                           postdec2	equ	0xFDD
 11787                           fsr2h	equ	0xFDA
 11788                           fsr2l	equ	0xFD9
 11789                           status	equ	0xFD8
 11790                           
 11791 ;; *************** function _reset_clcd *****************
 11792 ;; Defined at:
 11793 ;;		line 12 in file "clcd.c"
 11794 ;; Parameters:    Size  Location     Type
 11795 ;;		None
 11796 ;; Auto vars:     Size  Location     Type
 11797 ;;		None
 11798 ;; Return value:  Size  Location     Type
 11799 ;;                  1    wreg      void 
 11800 ;; Registers used:
 11801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11802 ;; Tracked objects:
 11803 ;;		On entry : 0/0
 11804 ;;		On exit  : 0/0
 11805 ;;		Unchanged: 0/0
 11806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11811 ;;Total ram usage:        0 bytes
 11812 ;; Hardware stack levels used:    1
 11813 ;; Hardware stack levels required when called:    9
 11814 ;; This function calls:
 11815 ;;		_clear_display_array
 11816 ;;		_reset_display_structure_count
 11817 ;; This function is called by:
 11818 ;;		_init_CLCD_config
 11819 ;; This function uses a non-reentrant model
 11820 ;;
 11821                           
 11822                           	psect	text43
 11823  004E86                     __ptext43:
 11824                           	opt stack 0
 11825  004E86                     _reset_clcd:
 11826                           	opt stack 17
 11827                           
 11828                           ;clcd.c: 13: clear_display_array();
 11829                           
 11830                           ;incstack = 0
 11831  004E86  EC4E  F026         	call	_clear_display_array	;wreg free
 11832                           
 11833                           ;clcd.c: 14: reset_display_structure_count();
 11834  004E8A  ECDF  F026         	call	_reset_display_structure_count	;wreg free
 11835  004E8E  0012               	return		;funcret
 11836  004E90                     __end_of_reset_clcd:
 11837                           	opt stack 0
 11838                           tblptru	equ	0xFF8
 11839                           tblptrh	equ	0xFF7
 11840                           tblptrl	equ	0xFF6
 11841                           tablat	equ	0xFF5
 11842                           prodh	equ	0xFF4
 11843                           prodl	equ	0xFF3
 11844                           intcon	equ	0xFF2
 11845                           postinc0	equ	0xFEE
 11846                           wreg	equ	0xFE8
 11847                           indf1	equ	0xFE7
 11848                           postinc1	equ	0xFE6
 11849                           postdec1	equ	0xFE5
 11850                           fsr1h	equ	0xFE2
 11851                           fsr1l	equ	0xFE1
 11852                           indf2	equ	0xFDF
 11853                           postinc2	equ	0xFDE
 11854                           postdec2	equ	0xFDD
 11855                           fsr2h	equ	0xFDA
 11856                           fsr2l	equ	0xFD9
 11857                           status	equ	0xFD8
 11858                           
 11859 ;; *************** function _clear_display_array *****************
 11860 ;; Defined at:
 11861 ;;		line 595 in file "clcd.c"
 11862 ;; Parameters:    Size  Location     Type
 11863 ;;		None
 11864 ;; Auto vars:     Size  Location     Type
 11865 ;;		None
 11866 ;; Return value:  Size  Location     Type
 11867 ;;                  1    wreg      void 
 11868 ;; Registers used:
 11869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11870 ;; Tracked objects:
 11871 ;;		On entry : 0/0
 11872 ;;		On exit  : 0/0
 11873 ;;		Unchanged: 0/0
 11874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11879 ;;Total ram usage:        0 bytes
 11880 ;; Hardware stack levels used:    1
 11881 ;; Hardware stack levels required when called:    8
 11882 ;; This function calls:
 11883 ;;		_memset
 11884 ;;		_reset_display_structure_count
 11885 ;; This function is called by:
 11886 ;;		_reset_clcd
 11887 ;; This function uses a non-reentrant model
 11888 ;;
 11889                           
 11890                           	psect	text44
 11891  004C9C                     __ptext44:
 11892                           	opt stack 0
 11893  004C9C                     _clear_display_array:
 11894                           	opt stack 17
 11895                           
 11896                           ;clcd.c: 596: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
 11897                           
 11898                           ;incstack = 0
 11899  004C9C  0E1E               	movlw	low _lcd_display_array
 11900  004C9E  6E24               	movwf	memset@p1,c
 11901  004CA0  0E01               	movlw	high _lcd_display_array
 11902  004CA2  6E25               	movwf	memset@p1+1,c
 11903  004CA4  0E00               	movlw	0
 11904  004CA6  6E27               	movwf	memset@c+1,c
 11905  004CA8  0E20               	movlw	32
 11906  004CAA  6E26               	movwf	memset@c,c
 11907  004CAC  0E00               	movlw	0
 11908  004CAE  6E29               	movwf	memset@n+1,c
 11909  004CB0  0E50               	movlw	80
 11910  004CB2  6E28               	movwf	memset@n,c
 11911  004CB4  ECD8  F025         	call	_memset	;wreg free
 11912                           
 11913                           ;clcd.c: 597: reset_display_structure_count();
 11914  004CB8  ECDF  F026         	call	_reset_display_structure_count	;wreg free
 11915  004CBC  0012               	return		;funcret
 11916  004CBE                     __end_of_clear_display_array:
 11917                           	opt stack 0
 11918                           tblptru	equ	0xFF8
 11919                           tblptrh	equ	0xFF7
 11920                           tblptrl	equ	0xFF6
 11921                           tablat	equ	0xFF5
 11922                           prodh	equ	0xFF4
 11923                           prodl	equ	0xFF3
 11924                           intcon	equ	0xFF2
 11925                           postinc0	equ	0xFEE
 11926                           wreg	equ	0xFE8
 11927                           indf1	equ	0xFE7
 11928                           postinc1	equ	0xFE6
 11929                           postdec1	equ	0xFE5
 11930                           fsr1h	equ	0xFE2
 11931                           fsr1l	equ	0xFE1
 11932                           indf2	equ	0xFDF
 11933                           postinc2	equ	0xFDE
 11934                           postdec2	equ	0xFDD
 11935                           fsr2h	equ	0xFDA
 11936                           fsr2l	equ	0xFD9
 11937                           status	equ	0xFD8
 11938                           
 11939 ;; *************** function _reset_display_structure_count *****************
 11940 ;; Defined at:
 11941 ;;		line 590 in file "clcd.c"
 11942 ;; Parameters:    Size  Location     Type
 11943 ;;		None
 11944 ;; Auto vars:     Size  Location     Type
 11945 ;;		None
 11946 ;; Return value:  Size  Location     Type
 11947 ;;                  1    wreg      void 
 11948 ;; Registers used:
 11949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11959 ;;Total ram usage:        0 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; Hardware stack levels required when called:    7
 11962 ;; This function calls:
 11963 ;;		_clear_display_structure
 11964 ;; This function is called by:
 11965 ;;		_reset_clcd
 11966 ;;		_clear_display_array
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           	psect	text45
 11971  004DBE                     __ptext45:
 11972                           	opt stack 0
 11973  004DBE                     _reset_display_structure_count:
 11974                           	opt stack 18
 11975                           
 11976                           ;clcd.c: 591: display_struct_count = 0;
 11977                           
 11978                           ;incstack = 0
 11979  004DBE  0E00               	movlw	0
 11980  004DC0  0101               	movlb	1	; () banked
 11981  004DC2  6F0D               	movwf	(_display_struct_count+1)& (0+255),b
 11982  004DC4  0E00               	movlw	0
 11983  004DC6  6F0C               	movwf	_display_struct_count& (0+255),b
 11984                           
 11985                           ; BSR set to: 1
 11986                           ;clcd.c: 592: clear_display_structure();
 11987  004DC8  EC70  F026         	call	_clear_display_structure	;wreg free
 11988  004DCC  0012               	return		;funcret
 11989  004DCE                     __end_of_reset_display_structure_count:
 11990                           	opt stack 0
 11991                           tblptru	equ	0xFF8
 11992                           tblptrh	equ	0xFF7
 11993                           tblptrl	equ	0xFF6
 11994                           tablat	equ	0xFF5
 11995                           prodh	equ	0xFF4
 11996                           prodl	equ	0xFF3
 11997                           intcon	equ	0xFF2
 11998                           postinc0	equ	0xFEE
 11999                           wreg	equ	0xFE8
 12000                           indf1	equ	0xFE7
 12001                           postinc1	equ	0xFE6
 12002                           postdec1	equ	0xFE5
 12003                           fsr1h	equ	0xFE2
 12004                           fsr1l	equ	0xFE1
 12005                           indf2	equ	0xFDF
 12006                           postinc2	equ	0xFDE
 12007                           postdec2	equ	0xFDD
 12008                           fsr2h	equ	0xFDA
 12009                           fsr2l	equ	0xFD9
 12010                           status	equ	0xFD8
 12011                           
 12012 ;; *************** function _clear_display_structure *****************
 12013 ;; Defined at:
 12014 ;;		line 586 in file "clcd.c"
 12015 ;; Parameters:    Size  Location     Type
 12016 ;;		None
 12017 ;; Auto vars:     Size  Location     Type
 12018 ;;		None
 12019 ;; Return value:  Size  Location     Type
 12020 ;;                  1    wreg      void 
 12021 ;; Registers used:
 12022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12023 ;; Tracked objects:
 12024 ;;		On entry : 0/0
 12025 ;;		On exit  : 0/0
 12026 ;;		Unchanged: 0/0
 12027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12032 ;;Total ram usage:        0 bytes
 12033 ;; Hardware stack levels used:    1
 12034 ;; Hardware stack levels required when called:    6
 12035 ;; This function calls:
 12036 ;;		_memset
 12037 ;; This function is called by:
 12038 ;;		_reset_display_structure_count
 12039 ;; This function uses a non-reentrant model
 12040 ;;
 12041                           
 12042                           	psect	text46
 12043  004CE0                     __ptext46:
 12044                           	opt stack 0
 12045  004CE0                     _clear_display_structure:
 12046                           	opt stack 18
 12047                           
 12048                           ;clcd.c: 587: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details
      +                          ));
 12049                           
 12050                           ;incstack = 0
 12051  004CE0  0E99               	movlw	low _clcd_display_string_details
 12052  004CE2  6E24               	movwf	memset@p1,c
 12053  004CE4  0E05               	movlw	high _clcd_display_string_details
 12054  004CE6  6E25               	movwf	memset@p1+1,c
 12055  004CE8  0E00               	movlw	0
 12056  004CEA  6E27               	movwf	memset@c+1,c
 12057  004CEC  0E00               	movlw	0
 12058  004CEE  6E26               	movwf	memset@c,c
 12059  004CF0  0E04               	movlw	4
 12060  004CF2  6E29               	movwf	memset@n+1,c
 12061  004CF4  0E74               	movlw	116
 12062  004CF6  6E28               	movwf	memset@n,c
 12063  004CF8  ECD8  F025         	call	_memset	;wreg free
 12064  004CFC  0012               	return		;funcret
 12065  004CFE                     __end_of_clear_display_structure:
 12066                           	opt stack 0
 12067                           tblptru	equ	0xFF8
 12068                           tblptrh	equ	0xFF7
 12069                           tblptrl	equ	0xFF6
 12070                           tablat	equ	0xFF5
 12071                           prodh	equ	0xFF4
 12072                           prodl	equ	0xFF3
 12073                           intcon	equ	0xFF2
 12074                           postinc0	equ	0xFEE
 12075                           wreg	equ	0xFE8
 12076                           indf1	equ	0xFE7
 12077                           postinc1	equ	0xFE6
 12078                           postdec1	equ	0xFE5
 12079                           fsr1h	equ	0xFE2
 12080                           fsr1l	equ	0xFE1
 12081                           indf2	equ	0xFDF
 12082                           postinc2	equ	0xFDE
 12083                           postdec2	equ	0xFDD
 12084                           fsr2h	equ	0xFDA
 12085                           fsr2l	equ	0xFD9
 12086                           status	equ	0xFD8
 12087                           
 12088 ;; *************** function _clcd_display_string_config *****************
 12089 ;; Defined at:
 12090 ;;		line 392 in file "clcd.c"
 12091 ;; Parameters:    Size  Location     Type
 12092 ;;		None
 12093 ;; Auto vars:     Size  Location     Type
 12094 ;;		None
 12095 ;; Return value:  Size  Location     Type
 12096 ;;                  1    wreg      void 
 12097 ;; Registers used:
 12098 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12099 ;; Tracked objects:
 12100 ;;		On entry : 0/0
 12101 ;;		On exit  : 0/0
 12102 ;;		Unchanged: 0/0
 12103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12108 ;;Total ram usage:        0 bytes
 12109 ;; Hardware stack levels used:    1
 12110 ;; Hardware stack levels required when called:    9
 12111 ;; This function calls:
 12112 ;;		_memcpy
 12113 ;;		_memset
 12114 ;;		_printf
 12115 ;;		_write_str
 12116 ;; This function is called by:
 12117 ;;		_init_CLCD_config
 12118 ;; This function uses a non-reentrant model
 12119 ;;
 12120                           
 12121                           	psect	text47
 12122  00447C                     __ptext47:
 12123                           	opt stack 0
 12124  00447C                     _clcd_display_string_config:
 12125                           	opt stack 17
 12126                           
 12127                           ;clcd.c: 393: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
 12128                           
 12129                           ;incstack = 0
 12130  00447C  0E1E               	movlw	low _lcd_display_array
 12131  00447E  6E24               	movwf	memset@p1,c
 12132  004480  0E01               	movlw	high _lcd_display_array
 12133  004482  6E25               	movwf	memset@p1+1,c
 12134  004484  0E00               	movlw	0
 12135  004486  6E27               	movwf	memset@c+1,c
 12136  004488  0E20               	movlw	32
 12137  00448A  6E26               	movwf	memset@c,c
 12138  00448C  0E00               	movlw	0
 12139  00448E  6E29               	movwf	memset@n+1,c
 12140  004490  0E50               	movlw	80
 12141  004492  6E28               	movwf	memset@n,c
 12142  004494  ECD8  F025         	call	_memset	;wreg free
 12143                           
 12144                           ;clcd.c: 395: printf("sizeof(str) = %d\r\n", sizeof (str));
 12145  004498  0EB0               	movlw	low STR_24
 12146  00449A  6E2B               	movwf	printf@f,c
 12147  00449C  0EFD               	movlw	high STR_24
 12148  00449E  6E2C               	movwf	printf@f+1,c
 12149  0044A0  0E00               	movlw	0
 12150  0044A2  6E2E               	movwf	?_printf+3,c
 12151  0044A4  0E0D               	movlw	13
 12152  0044A6  6E2D               	movwf	?_printf+2,c
 12153  0044A8  EC12  F025         	call	_printf	;wreg free
 12154                           
 12155                           ;clcd.c: 397: memcpy(lcd_display_array[0], str, sizeof (str));
 12156  0044AC  0E1E               	movlw	low _lcd_display_array
 12157  0044AE  6E10               	movwf	memcpy@d1,c
 12158  0044B0  0E01               	movlw	high _lcd_display_array
 12159  0044B2  6E11               	movwf	memcpy@d1+1,c
 12160  0044B4  0EDF               	movlw	low _str
 12161  0044B6  6E12               	movwf	memcpy@s1,c
 12162  0044B8  0E01               	movlw	high _str
 12163  0044BA  6E13               	movwf	memcpy@s1+1,c
 12164  0044BC  0E00               	movlw	0
 12165  0044BE  6E15               	movwf	memcpy@n+1,c
 12166  0044C0  0E0D               	movlw	13
 12167  0044C2  6E14               	movwf	memcpy@n,c
 12168  0044C4  EC9A  F024         	call	_memcpy	;wreg free
 12169                           
 12170                           ;clcd.c: 398: write_str(lcd_display_array[0]);
 12171  0044C8  0E1E               	movlw	low _lcd_display_array
 12172  0044CA  6E18               	movwf	write_str@str,c
 12173  0044CC  0E01               	movlw	high _lcd_display_array
 12174  0044CE  6E19               	movwf	write_str@str+1,c
 12175  0044D0  ECD9  F024         	call	_write_str	;wreg free
 12176  0044D4  0012               	return		;funcret
 12177  0044D6                     __end_of_clcd_display_string_config:
 12178                           	opt stack 0
 12179                           tblptru	equ	0xFF8
 12180                           tblptrh	equ	0xFF7
 12181                           tblptrl	equ	0xFF6
 12182                           tablat	equ	0xFF5
 12183                           prodh	equ	0xFF4
 12184                           prodl	equ	0xFF3
 12185                           intcon	equ	0xFF2
 12186                           postinc0	equ	0xFEE
 12187                           wreg	equ	0xFE8
 12188                           indf1	equ	0xFE7
 12189                           postinc1	equ	0xFE6
 12190                           postdec1	equ	0xFE5
 12191                           fsr1h	equ	0xFE2
 12192                           fsr1l	equ	0xFE1
 12193                           indf2	equ	0xFDF
 12194                           postinc2	equ	0xFDE
 12195                           postdec2	equ	0xFDD
 12196                           fsr2h	equ	0xFDA
 12197                           fsr2l	equ	0xFD9
 12198                           status	equ	0xFD8
 12199                           
 12200 ;; *************** function _write_str *****************
 12201 ;; Defined at:
 12202 ;;		line 506 in file "clcd.c"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;  str             2   23[COMRAM] PTR const unsigned char 
 12205 ;;		 -> lcd_display_array(80), 
 12206 ;; Auto vars:     Size  Location     Type
 12207 ;;  i               1   25[COMRAM] unsigned char 
 12208 ;; Return value:  Size  Location     Type
 12209 ;;                  1    wreg      void 
 12210 ;; Registers used:
 12211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12217 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12218 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12220 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12221 ;;Total ram usage:        3 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    7
 12224 ;; This function calls:
 12225 ;;		_write_lcd_data
 12226 ;; This function is called by:
 12227 ;;		_clcd_display_string_config
 12228 ;;		_display_text
 12229 ;;		_put_string
 12230 ;; This function uses a non-reentrant model
 12231 ;;
 12232                           
 12233                           	psect	text48
 12234  0049B2                     __ptext48:
 12235                           	opt stack 0
 12236  0049B2                     _write_str:
 12237                           	opt stack 21
 12238                           
 12239                           ;clcd.c: 508: unsigned char i = 0;
 12240                           
 12241                           ;incstack = 0
 12242  0049B2  0E00               	movlw	0
 12243  0049B4  6E1A               	movwf	write_str@i,c
 12244                           
 12245                           ;clcd.c: 509: while (i < clcd_config_data.clcd_max_col) {
 12246  0049B6  D015               	goto	l7443
 12247  0049B8                     l7431:
 12248                           
 12249                           ;clcd.c: 510: if (*str != (0)) {
 12250  0049B8  C018  FFD9         	movff	write_str@str,fsr2l
 12251  0049BC  C019  FFDA         	movff	write_str@str+1,fsr2h
 12252  0049C0  50DF               	movf	indf2,w,c
 12253  0049C2  B4D8               	btfsc	status,2,c
 12254  0049C4  D008               	goto	l7437
 12255                           
 12256                           ;clcd.c: 511: write_lcd_data(*str++);
 12257  0049C6  C018  FFD9         	movff	write_str@str,fsr2l
 12258  0049CA  C019  FFDA         	movff	write_str@str+1,fsr2h
 12259  0049CE  50DF               	movf	indf2,w,c
 12260  0049D0  EC7A  F024         	call	_write_lcd_data
 12261  0049D4  D003               	goto	l7439
 12262  0049D6                     l7437:
 12263                           
 12264                           ;clcd.c: 513: write_lcd_data(' ');
 12265  0049D6  0E20               	movlw	32
 12266  0049D8  EC7A  F024         	call	_write_lcd_data
 12267  0049DC                     l7439:
 12268                           
 12269                           ;clcd.c: 514: str++;
 12270  0049DC  4A18               	infsnz	write_str@str,f,c
 12271  0049DE  2A19               	incf	write_str@str+1,f,c
 12272                           
 12273                           ;clcd.c: 515: }
 12274                           ;clcd.c: 517: i++;
 12275  0049E0  2A1A               	incf	write_str@i,f,c
 12276  0049E2                     l7443:
 12277  0049E2  504B               	movf	_clcd_config_data+2,w,c
 12278  0049E4  5C1A               	subwf	write_str@i,w,c
 12279  0049E6  B0D8               	btfsc	status,0,c
 12280  0049E8  0012               	return	
 12281  0049EA  D7E6               	goto	l7431
 12282  0049EC                     __end_of_write_str:
 12283                           	opt stack 0
 12284                           tblptru	equ	0xFF8
 12285                           tblptrh	equ	0xFF7
 12286                           tblptrl	equ	0xFF6
 12287                           tablat	equ	0xFF5
 12288                           prodh	equ	0xFF4
 12289                           prodl	equ	0xFF3
 12290                           intcon	equ	0xFF2
 12291                           postinc0	equ	0xFEE
 12292                           wreg	equ	0xFE8
 12293                           indf1	equ	0xFE7
 12294                           postinc1	equ	0xFE6
 12295                           postdec1	equ	0xFE5
 12296                           fsr1h	equ	0xFE2
 12297                           fsr1l	equ	0xFE1
 12298                           indf2	equ	0xFDF
 12299                           postinc2	equ	0xFDE
 12300                           postdec2	equ	0xFDD
 12301                           fsr2h	equ	0xFDA
 12302                           fsr2l	equ	0xFD9
 12303                           status	equ	0xFD8
 12304                           
 12305 ;; *************** function _write_lcd_data *****************
 12306 ;; Defined at:
 12307 ;;		line 494 in file "clcd.c"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;  data            1    wreg     unsigned char 
 12310 ;; Auto vars:     Size  Location     Type
 12311 ;;  data            1   22[COMRAM] unsigned char 
 12312 ;; Return value:  Size  Location     Type
 12313 ;;                  1    wreg      void 
 12314 ;; Registers used:
 12315 ;;		wreg, status,2, status,0, cstack
 12316 ;; Tracked objects:
 12317 ;;		On entry : 0/0
 12318 ;;		On exit  : 0/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12322 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12324 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12325 ;;Total ram usage:        1 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; Hardware stack levels required when called:    6
 12328 ;; This function calls:
 12329 ;;		_delay
 12330 ;; This function is called by:
 12331 ;;		_write_str
 12332 ;;		_put_char
 12333 ;; This function uses a non-reentrant model
 12334 ;;
 12335                           
 12336                           	psect	text49
 12337  0048F4                     __ptext49:
 12338                           	opt stack 0
 12339  0048F4                     _write_lcd_data:
 12340                           	opt stack 21
 12341                           
 12342                           ;incstack = 0
 12343                           ;write_lcd_data@data stored from wreg
 12344  0048F4  6E17               	movwf	write_lcd_data@data,c
 12345                           
 12346                           ;clcd.c: 495: PORTAbits.RA2 = 1;
 12347  0048F6  8480               	bsf	3968,2,c	;volatile
 12348                           
 12349                           ;clcd.c: 496: PORTAbits.RA1 = 0;
 12350  0048F8  9280               	bcf	3968,1,c	;volatile
 12351                           
 12352                           ;clcd.c: 497: PORTD = PORTD & 0xC0;
 12353  0048FA  5083               	movf	3971,w,c	;volatile
 12354  0048FC  0BC0               	andlw	192
 12355  0048FE  6E83               	movwf	3971,c	;volatile
 12356                           
 12357                           ;clcd.c: 498: PORTD = (data & 0x3F) | (PORTD);
 12358  004900  5017               	movf	write_lcd_data@data,w,c
 12359  004902  0B3F               	andlw	63
 12360  004904  1083               	iorwf	3971,w,c	;volatile
 12361  004906  6E83               	movwf	3971,c	;volatile
 12362                           
 12363                           ;clcd.c: 499: PORTC = PORTC & 0xCF;
 12364  004908  5082               	movf	3970,w,c	;volatile
 12365  00490A  0BCF               	andlw	207
 12366  00490C  6E82               	movwf	3970,c	;volatile
 12367                           
 12368                           ;clcd.c: 500: data = data & 0xC0;
 12369  00490E  5017               	movf	write_lcd_data@data,w,c
 12370  004910  0BC0               	andlw	192
 12371  004912  6E17               	movwf	write_lcd_data@data,c
 12372                           
 12373                           ;clcd.c: 501: data = data >> 2;
 12374  004914  4017               	rrncf	write_lcd_data@data,w,c
 12375  004916  42E8               	rrncf	wreg,f,c
 12376  004918  0B3F               	andlw	63
 12377  00491A  6E17               	movwf	write_lcd_data@data,c
 12378                           
 12379                           ;clcd.c: 502: PORTC = (data | PORTC);
 12380  00491C  5017               	movf	write_lcd_data@data,w,c
 12381  00491E  1082               	iorwf	3970,w,c	;volatile
 12382  004920  6E82               	movwf	3970,c	;volatile
 12383                           
 12384                           ;clcd.c: 503: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
 12385  004922  8080               	bsf	3968,0,c	;volatile
 12386  004924  0E00               	movlw	0
 12387  004926  6E11               	movwf	delay@delay+1,c
 12388  004928  0E01               	movlw	1
 12389  00492A  6E10               	movwf	delay@delay,c
 12390  00492C  EC65  F023         	call	_delay	;wreg free
 12391  004930  9080               	bcf	3968,0,c	;volatile
 12392  004932  0012               	return		;funcret
 12393  004934                     __end_of_write_lcd_data:
 12394                           	opt stack 0
 12395                           tblptru	equ	0xFF8
 12396                           tblptrh	equ	0xFF7
 12397                           tblptrl	equ	0xFF6
 12398                           tablat	equ	0xFF5
 12399                           prodh	equ	0xFF4
 12400                           prodl	equ	0xFF3
 12401                           intcon	equ	0xFF2
 12402                           postinc0	equ	0xFEE
 12403                           wreg	equ	0xFE8
 12404                           indf1	equ	0xFE7
 12405                           postinc1	equ	0xFE6
 12406                           postdec1	equ	0xFE5
 12407                           fsr1h	equ	0xFE2
 12408                           fsr1l	equ	0xFE1
 12409                           indf2	equ	0xFDF
 12410                           postinc2	equ	0xFDE
 12411                           postdec2	equ	0xFDD
 12412                           fsr2h	equ	0xFDA
 12413                           fsr2l	equ	0xFD9
 12414                           status	equ	0xFD8
 12415                           
 12416 ;; *************** function _delay *****************
 12417 ;; Defined at:
 12418 ;;		line 5 in file "delay.c"
 12419 ;; Parameters:    Size  Location     Type
 12420 ;;  delay           2   15[COMRAM] int 
 12421 ;; Auto vars:     Size  Location     Type
 12422 ;;  i               2   20[COMRAM] int 
 12423 ;;  val             2   18[COMRAM] int 
 12424 ;; Return value:  Size  Location     Type
 12425 ;;                  1    wreg      void 
 12426 ;; Registers used:
 12427 ;;		wreg, status,2, status,0
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12433 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12436 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12437 ;;Total ram usage:        7 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    5
 12440 ;; This function calls:
 12441 ;;		Nothing
 12442 ;; This function is called by:
 12443 ;;		_is_busy
 12444 ;;		_write_lcd_cmd
 12445 ;;		_write_lcd_data
 12446 ;; This function uses a non-reentrant model
 12447 ;;
 12448                           
 12449                           	psect	text50
 12450  0046CA                     __ptext50:
 12451                           	opt stack 0
 12452  0046CA                     _delay:
 12453                           	opt stack 21
 12454                           
 12455                           ;delay.c: 7: int val = 0, i;
 12456                           
 12457                           ;incstack = 0
 12458  0046CA  0E00               	movlw	0
 12459  0046CC  6E14               	movwf	delay@val+1,c
 12460  0046CE  0E00               	movlw	0
 12461  0046D0  6E13               	movwf	delay@val,c
 12462                           
 12463                           ;delay.c: 8: for (val = 0; val < delay; val++) {
 12464  0046D2  0E00               	movlw	0
 12465  0046D4  6E14               	movwf	delay@val+1,c
 12466  0046D6  0E00               	movlw	0
 12467  0046D8  6E13               	movwf	delay@val,c
 12468  0046DA  D011               	goto	l7215
 12469  0046DC                     l7203:
 12470                           
 12471                           ;delay.c: 9: for(i=0; i<350; i++)
 12472  0046DC  0E00               	movlw	0
 12473  0046DE  6E16               	movwf	delay@i+1,c
 12474  0046E0  0E00               	movlw	0
 12475  0046E2  6E15               	movwf	delay@i,c
 12476  0046E4                     l7205:
 12477  0046E4  BE16               	btfsc	delay@i+1,7,c
 12478  0046E6  D006               	goto	l7209
 12479  0046E8  0E5E               	movlw	94
 12480  0046EA  5C15               	subwf	delay@i,w,c
 12481  0046EC  0E01               	movlw	1
 12482  0046EE  5816               	subwfb	delay@i+1,w,c
 12483  0046F0  B0D8               	btfsc	status,0,c
 12484  0046F2  D003               	goto	l7213
 12485  0046F4                     l7209:
 12486                           
 12487                           ;delay.c: 10: {
 12488  0046F4  4A15               	infsnz	delay@i,f,c
 12489  0046F6  2A16               	incf	delay@i+1,f,c
 12490  0046F8  D7F5               	goto	l7205
 12491  0046FA                     l7213:
 12492  0046FA  4A13               	infsnz	delay@val,f,c
 12493  0046FC  2A14               	incf	delay@val+1,f,c
 12494  0046FE                     l7215:
 12495  0046FE  5010               	movf	delay@delay,w,c
 12496  004700  5C13               	subwf	delay@val,w,c
 12497  004702  5014               	movf	delay@val+1,w,c
 12498  004704  0A80               	xorlw	128
 12499  004706  6E12               	movwf	??_delay& (0+255),c
 12500  004708  5011               	movf	delay@delay+1,w,c
 12501  00470A  0A80               	xorlw	128
 12502  00470C  5812               	subwfb	??_delay& (0+255),w,c
 12503  00470E  B0D8               	btfsc	status,0,c
 12504  004710  0012               	return	
 12505  004712  D7E4               	goto	l7203
 12506  004714                     __end_of_delay:
 12507                           	opt stack 0
 12508                           tblptru	equ	0xFF8
 12509                           tblptrh	equ	0xFF7
 12510                           tblptrl	equ	0xFF6
 12511                           tablat	equ	0xFF5
 12512                           prodh	equ	0xFF4
 12513                           prodl	equ	0xFF3
 12514                           intcon	equ	0xFF2
 12515                           postinc0	equ	0xFEE
 12516                           wreg	equ	0xFE8
 12517                           indf1	equ	0xFE7
 12518                           postinc1	equ	0xFE6
 12519                           postdec1	equ	0xFE5
 12520                           fsr1h	equ	0xFE2
 12521                           fsr1l	equ	0xFE1
 12522                           indf2	equ	0xFDF
 12523                           postinc2	equ	0xFDE
 12524                           postdec2	equ	0xFDD
 12525                           fsr2h	equ	0xFDA
 12526                           fsr2l	equ	0xFD9
 12527                           status	equ	0xFD8
 12528                           
 12529 ;; *************** function _memcpy *****************
 12530 ;; Defined at:
 12531 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memcpy.c"
 12532 ;; Parameters:    Size  Location     Type
 12533 ;;  d1              2   15[COMRAM] PTR void 
 12534 ;;		 -> lcd_display_array(80), 
 12535 ;;  s1              2   17[COMRAM] PTR const void 
 12536 ;;		 -> str(13), 
 12537 ;;  n               2   19[COMRAM] unsigned int 
 12538 ;; Auto vars:     Size  Location     Type
 12539 ;;  s               2   23[COMRAM] PTR const unsigned char 
 12540 ;;		 -> str(13), 
 12541 ;;  d               2   21[COMRAM] PTR unsigned char 
 12542 ;;		 -> lcd_display_array(80), 
 12543 ;; Return value:  Size  Location     Type
 12544 ;;                  2   15[COMRAM] PTR void 
 12545 ;; Registers used:
 12546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12547 ;; Tracked objects:
 12548 ;;		On entry : 0/0
 12549 ;;		On exit  : 0/0
 12550 ;;		Unchanged: 0/0
 12551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12552 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12553 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12555 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12556 ;;Total ram usage:       10 bytes
 12557 ;; Hardware stack levels used:    1
 12558 ;; Hardware stack levels required when called:    5
 12559 ;; This function calls:
 12560 ;;		Nothing
 12561 ;; This function is called by:
 12562 ;;		_clcd_display_string_config
 12563 ;; This function uses a non-reentrant model
 12564 ;;
 12565                           
 12566                           	psect	text51
 12567  004934                     __ptext51:
 12568                           	opt stack 0
 12569  004934                     _memcpy:
 12570                           	opt stack 20
 12571                           
 12572                           ;incstack = 0
 12573  004934  C012  F018         	movff	memcpy@s1,memcpy@s
 12574  004938  C013  F019         	movff	memcpy@s1+1,memcpy@s+1
 12575  00493C  C010  F016         	movff	memcpy@d1,memcpy@d
 12576  004940  C011  F017         	movff	memcpy@d1+1,memcpy@d+1
 12577  004944  D00E               	goto	l7427
 12578  004946                     l7421:
 12579  004946  C018  FFD9         	movff	memcpy@s,fsr2l
 12580  00494A  C019  FFDA         	movff	memcpy@s+1,fsr2h
 12581  00494E  C016  FFE1         	movff	memcpy@d,fsr1l
 12582  004952  C017  FFE2         	movff	memcpy@d+1,fsr1h
 12583  004956  CFDF FFE7          	movff	indf2,indf1
 12584  00495A  4A18               	infsnz	memcpy@s,f,c
 12585  00495C  2A19               	incf	memcpy@s+1,f,c
 12586  00495E  4A16               	infsnz	memcpy@d,f,c
 12587  004960  2A17               	incf	memcpy@d+1,f,c
 12588  004962                     l7427:
 12589  004962  0614               	decf	memcpy@n,f,c
 12590  004964  A0D8               	btfss	status,0,c
 12591  004966  0615               	decf	memcpy@n+1,f,c
 12592  004968  2814               	incf	memcpy@n,w,c
 12593  00496A  E1ED               	bnz	l7421
 12594  00496C  2815               	incf	memcpy@n+1,w,c
 12595  00496E  B4D8               	btfsc	status,2,c
 12596  004970  0012               	return	
 12597  004972  D7E9               	goto	l7421
 12598  004974                     __end_of_memcpy:
 12599                           	opt stack 0
 12600                           tblptru	equ	0xFF8
 12601                           tblptrh	equ	0xFF7
 12602                           tblptrl	equ	0xFF6
 12603                           tablat	equ	0xFF5
 12604                           prodh	equ	0xFF4
 12605                           prodl	equ	0xFF3
 12606                           intcon	equ	0xFF2
 12607                           postinc0	equ	0xFEE
 12608                           wreg	equ	0xFE8
 12609                           indf1	equ	0xFE7
 12610                           postinc1	equ	0xFE6
 12611                           postdec1	equ	0xFE5
 12612                           fsr1h	equ	0xFE2
 12613                           fsr1l	equ	0xFE1
 12614                           indf2	equ	0xFDF
 12615                           postinc2	equ	0xFDE
 12616                           postdec2	equ	0xFDD
 12617                           fsr2h	equ	0xFDA
 12618                           fsr2l	equ	0xFD9
 12619                           status	equ	0xFD8
 12620                           
 12621 ;; *************** function __delay_MS *****************
 12622 ;; Defined at:
 12623 ;;		line 29 in file "delay.c"
 12624 ;; Parameters:    Size  Location     Type
 12625 ;;  delay           2   15[COMRAM] int 
 12626 ;; Auto vars:     Size  Location     Type
 12627 ;;  val             2   18[COMRAM] int 
 12628 ;; Return value:  Size  Location     Type
 12629 ;;                  1    wreg      void 
 12630 ;; Registers used:
 12631 ;;		wreg, status,2, status,0, cstack
 12632 ;; Tracked objects:
 12633 ;;		On entry : 0/0
 12634 ;;		On exit  : 0/0
 12635 ;;		Unchanged: 0/0
 12636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12637 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12638 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12639 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12640 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12641 ;;Total ram usage:        5 bytes
 12642 ;; Hardware stack levels used:    1
 12643 ;; Hardware stack levels required when called:    6
 12644 ;; This function calls:
 12645 ;;		_TMR1_HasOverflowOccured
 12646 ;;		_TMR1_Reload
 12647 ;;		_TMR1_StartTimer
 12648 ;;		_TMR1_StopTimer
 12649 ;; This function is called by:
 12650 ;;		_init_CLCD_config
 12651 ;;		_main
 12652 ;;		_put_char
 12653 ;; This function uses a non-reentrant model
 12654 ;;
 12655                           
 12656                           	psect	text52
 12657  0047EC                     __ptext52:
 12658                           	opt stack 0
 12659  0047EC                     __delay_MS:
 12660                           	opt stack 20
 12661                           
 12662                           ;delay.c: 30: int val = 0;
 12663                           
 12664                           ;incstack = 0
 12665  0047EC  0E00               	movlw	0
 12666  0047EE  6E14               	movwf	__delay_MS@val+1,c
 12667  0047F0  0E00               	movlw	0
 12668  0047F2  6E13               	movwf	__delay_MS@val,c
 12669                           
 12670                           ;delay.c: 31: for (val = 0; val < delay; val++) {
 12671  0047F4  0E00               	movlw	0
 12672  0047F6  6E14               	movwf	__delay_MS@val+1,c
 12673  0047F8  0E00               	movlw	0
 12674  0047FA  6E13               	movwf	__delay_MS@val,c
 12675  0047FC  D00E               	goto	l7515
 12676  0047FE                     l7503:
 12677                           
 12678                           ;delay.c: 32: TMR1_Reload();
 12679  0047FE  EC26  F027         	call	_TMR1_Reload	;wreg free
 12680                           
 12681                           ;delay.c: 33: TMR1_StartTimer();
 12682  004802  EC60  F027         	call	_TMR1_StartTimer	;wreg free
 12683  004806                     l7507:
 12684  004806  EC2C  F027         	call	_TMR1_HasOverflowOccured	;wreg free
 12685  00480A  0900               	iorlw	0
 12686  00480C  B4D8               	btfsc	status,2,c
 12687  00480E  D7FB               	goto	l7507
 12688                           
 12689                           ;delay.c: 35: TMR1_StopTimer();
 12690  004810  EC5C  F027         	call	_TMR1_StopTimer	;wreg free
 12691                           
 12692                           ;delay.c: 36: PIR1bits.TMR1IF = 0;
 12693  004814  909E               	bcf	3998,0,c	;volatile
 12694  004816  4A13               	infsnz	__delay_MS@val,f,c
 12695  004818  2A14               	incf	__delay_MS@val+1,f,c
 12696  00481A                     l7515:
 12697  00481A  5010               	movf	__delay_MS@delay,w,c
 12698  00481C  5C13               	subwf	__delay_MS@val,w,c
 12699  00481E  5014               	movf	__delay_MS@val+1,w,c
 12700  004820  0A80               	xorlw	128
 12701  004822  6E12               	movwf	??__delay_MS& (0+255),c
 12702  004824  5011               	movf	__delay_MS@delay+1,w,c
 12703  004826  0A80               	xorlw	128
 12704  004828  5812               	subwfb	??__delay_MS& (0+255),w,c
 12705  00482A  B0D8               	btfsc	status,0,c
 12706  00482C  0012               	return	
 12707  00482E  D7E7               	goto	l7503
 12708  004830                     __end_of__delay_MS:
 12709                           	opt stack 0
 12710                           tblptru	equ	0xFF8
 12711                           tblptrh	equ	0xFF7
 12712                           tblptrl	equ	0xFF6
 12713                           tablat	equ	0xFF5
 12714                           prodh	equ	0xFF4
 12715                           prodl	equ	0xFF3
 12716                           intcon	equ	0xFF2
 12717                           postinc0	equ	0xFEE
 12718                           wreg	equ	0xFE8
 12719                           indf1	equ	0xFE7
 12720                           postinc1	equ	0xFE6
 12721                           postdec1	equ	0xFE5
 12722                           fsr1h	equ	0xFE2
 12723                           fsr1l	equ	0xFE1
 12724                           indf2	equ	0xFDF
 12725                           postinc2	equ	0xFDE
 12726                           postdec2	equ	0xFDD
 12727                           fsr2h	equ	0xFDA
 12728                           fsr2l	equ	0xFD9
 12729                           status	equ	0xFD8
 12730                           
 12731 ;; *************** function _TMR1_StopTimer *****************
 12732 ;; Defined at:
 12733 ;;		line 94 in file "mcc_generated_files/tmr1.c"
 12734 ;; Parameters:    Size  Location     Type
 12735 ;;		None
 12736 ;; Auto vars:     Size  Location     Type
 12737 ;;		None
 12738 ;; Return value:  Size  Location     Type
 12739 ;;                  1    wreg      void 
 12740 ;; Registers used:
 12741 ;;		None
 12742 ;; Tracked objects:
 12743 ;;		On entry : 0/0
 12744 ;;		On exit  : 0/0
 12745 ;;		Unchanged: 0/0
 12746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12751 ;;Total ram usage:        0 bytes
 12752 ;; Hardware stack levels used:    1
 12753 ;; Hardware stack levels required when called:    5
 12754 ;; This function calls:
 12755 ;;		Nothing
 12756 ;; This function is called by:
 12757 ;;		__delay_MS
 12758 ;;		_main
 12759 ;; This function uses a non-reentrant model
 12760 ;;
 12761                           
 12762                           	psect	text53
 12763  004EB8                     __ptext53:
 12764                           	opt stack 0
 12765  004EB8                     _TMR1_StopTimer:
 12766                           	opt stack 20
 12767                           
 12768                           ;tmr1.c: 97: T1CONbits.TMR1ON = 0;
 12769                           
 12770                           ;incstack = 0
 12771  004EB8  90CD               	bcf	4045,0,c	;volatile
 12772  004EBA  0012               	return		;funcret
 12773  004EBC                     __end_of_TMR1_StopTimer:
 12774                           	opt stack 0
 12775                           tblptru	equ	0xFF8
 12776                           tblptrh	equ	0xFF7
 12777                           tblptrl	equ	0xFF6
 12778                           tablat	equ	0xFF5
 12779                           prodh	equ	0xFF4
 12780                           prodl	equ	0xFF3
 12781                           intcon	equ	0xFF2
 12782                           postinc0	equ	0xFEE
 12783                           wreg	equ	0xFE8
 12784                           indf1	equ	0xFE7
 12785                           postinc1	equ	0xFE6
 12786                           postdec1	equ	0xFE5
 12787                           fsr1h	equ	0xFE2
 12788                           fsr1l	equ	0xFE1
 12789                           indf2	equ	0xFDF
 12790                           postinc2	equ	0xFDE
 12791                           postdec2	equ	0xFDD
 12792                           fsr2h	equ	0xFDA
 12793                           fsr2l	equ	0xFD9
 12794                           status	equ	0xFD8
 12795                           
 12796 ;; *************** function _TMR1_Reload *****************
 12797 ;; Defined at:
 12798 ;;		line 136 in file "mcc_generated_files/tmr1.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;		None
 12801 ;; Auto vars:     Size  Location     Type
 12802 ;;		None
 12803 ;; Return value:  Size  Location     Type
 12804 ;;                  1    wreg      void 
 12805 ;; Registers used:
 12806 ;;		wreg, status,2
 12807 ;; Tracked objects:
 12808 ;;		On entry : 0/0
 12809 ;;		On exit  : 0/0
 12810 ;;		Unchanged: 0/0
 12811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;Total ram usage:        0 bytes
 12817 ;; Hardware stack levels used:    1
 12818 ;; Hardware stack levels required when called:    5
 12819 ;; This function calls:
 12820 ;;		Nothing
 12821 ;; This function is called by:
 12822 ;;		__delay_MS
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           	psect	text54
 12827  004E4C                     __ptext54:
 12828                           	opt stack 0
 12829  004E4C                     _TMR1_Reload:
 12830                           	opt stack 20
 12831                           
 12832                           ;tmr1.c: 139: TMR1H = (timer1ReloadVal >> 8);
 12833                           
 12834                           ;incstack = 0
 12835  004E4C  0101               	movlb	1	; () banked
 12836  004E4E  51EF               	movf	(_timer1ReloadVal+1)& (0+255),w,b	;volatile
 12837  004E50  6ECF               	movwf	4047,c	;volatile
 12838                           
 12839                           ; BSR set to: 1
 12840                           ;tmr1.c: 140: TMR1L = (uint8_t) timer1ReloadVal;
 12841  004E52  C1EE  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 12842                           
 12843                           ; BSR set to: 1
 12844  004E56  0012               	return		;funcret
 12845  004E58                     __end_of_TMR1_Reload:
 12846                           	opt stack 0
 12847                           tblptru	equ	0xFF8
 12848                           tblptrh	equ	0xFF7
 12849                           tblptrl	equ	0xFF6
 12850                           tablat	equ	0xFF5
 12851                           prodh	equ	0xFF4
 12852                           prodl	equ	0xFF3
 12853                           intcon	equ	0xFF2
 12854                           postinc0	equ	0xFEE
 12855                           wreg	equ	0xFE8
 12856                           indf1	equ	0xFE7
 12857                           postinc1	equ	0xFE6
 12858                           postdec1	equ	0xFE5
 12859                           fsr1h	equ	0xFE2
 12860                           fsr1l	equ	0xFE1
 12861                           indf2	equ	0xFDF
 12862                           postinc2	equ	0xFDE
 12863                           postdec2	equ	0xFDD
 12864                           fsr2h	equ	0xFDA
 12865                           fsr2l	equ	0xFD9
 12866                           status	equ	0xFD8
 12867                           
 12868 ;; *************** function _TMR1_HasOverflowOccured *****************
 12869 ;; Defined at:
 12870 ;;		line 153 in file "mcc_generated_files/tmr1.c"
 12871 ;; Parameters:    Size  Location     Type
 12872 ;;		None
 12873 ;; Auto vars:     Size  Location     Type
 12874 ;;		None
 12875 ;; Return value:  Size  Location     Type
 12876 ;;                  1    wreg      unsigned char 
 12877 ;; Registers used:
 12878 ;;		wreg
 12879 ;; Tracked objects:
 12880 ;;		On entry : 0/0
 12881 ;;		On exit  : 0/0
 12882 ;;		Unchanged: 0/0
 12883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12888 ;;Total ram usage:        0 bytes
 12889 ;; Hardware stack levels used:    1
 12890 ;; Hardware stack levels required when called:    5
 12891 ;; This function calls:
 12892 ;;		Nothing
 12893 ;; This function is called by:
 12894 ;;		__delay_MS
 12895 ;; This function uses a non-reentrant model
 12896 ;;
 12897                           
 12898                           	psect	text55
 12899  004E58                     __ptext55:
 12900                           	opt stack 0
 12901  004E58                     _TMR1_HasOverflowOccured:
 12902                           	opt stack 20
 12903                           
 12904                           ;tmr1.c: 156: return(PIR1bits.TMR1IF);
 12905                           
 12906                           ; BSR set to: 1
 12907                           ;incstack = 0
 12908  004E58  A09E               	btfss	3998,0,c	;volatile
 12909  004E5A  D002               	goto	u6810
 12910  004E5C  0E01               	movlw	1
 12911  004E5E  0012               	return	
 12912  004E60                     u6810:
 12913  004E60  0E00               	movlw	0
 12914  004E62  0012               	return	
 12915  004E64                     __end_of_TMR1_HasOverflowOccured:
 12916                           	opt stack 0
 12917                           tblptru	equ	0xFF8
 12918                           tblptrh	equ	0xFF7
 12919                           tblptrl	equ	0xFF6
 12920                           tablat	equ	0xFF5
 12921                           prodh	equ	0xFF4
 12922                           prodl	equ	0xFF3
 12923                           intcon	equ	0xFF2
 12924                           postinc0	equ	0xFEE
 12925                           wreg	equ	0xFE8
 12926                           indf1	equ	0xFE7
 12927                           postinc1	equ	0xFE6
 12928                           postdec1	equ	0xFE5
 12929                           fsr1h	equ	0xFE2
 12930                           fsr1l	equ	0xFE1
 12931                           indf2	equ	0xFDF
 12932                           postinc2	equ	0xFDE
 12933                           postdec2	equ	0xFDD
 12934                           fsr2h	equ	0xFDA
 12935                           fsr2l	equ	0xFD9
 12936                           status	equ	0xFD8
 12937                           
 12938 ;; *************** function ___awdiv *****************
 12939 ;; Defined at:
 12940 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12941 ;; Parameters:    Size  Location     Type
 12942 ;;  dividend        2   15[COMRAM] int 
 12943 ;;  divisor         2   17[COMRAM] int 
 12944 ;; Auto vars:     Size  Location     Type
 12945 ;;  quotient        2   21[COMRAM] int 
 12946 ;;  sign            1   20[COMRAM] unsigned char 
 12947 ;;  counter         1   19[COMRAM] unsigned char 
 12948 ;; Return value:  Size  Location     Type
 12949 ;;                  2   15[COMRAM] int 
 12950 ;; Registers used:
 12951 ;;		wreg, status,2, status,0
 12952 ;; Tracked objects:
 12953 ;;		On entry : 0/0
 12954 ;;		On exit  : 0/0
 12955 ;;		Unchanged: 0/0
 12956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12957 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12958 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12960 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12961 ;;Total ram usage:        8 bytes
 12962 ;; Hardware stack levels used:    1
 12963 ;; Hardware stack levels required when called:    5
 12964 ;; This function calls:
 12965 ;;		Nothing
 12966 ;; This function is called by:
 12967 ;;		_init_clcd_cusotom_lcd
 12968 ;;		_display_string
 12969 ;; This function uses a non-reentrant model
 12970 ;;
 12971                           
 12972                           	psect	text56
 12973  0040DE                     __ptext56:
 12974                           	opt stack 0
 12975  0040DE                     ___awdiv:
 12976                           	opt stack 22
 12977                           
 12978                           ;incstack = 0
 12979  0040DE  0E00               	movlw	0
 12980  0040E0  6E15               	movwf	___awdiv@sign,c
 12981  0040E2  AE13               	btfss	___awdiv@divisor+1,7,c
 12982  0040E4  D006               	goto	l8043
 12983  0040E6  6C12               	negf	___awdiv@divisor,c
 12984  0040E8  1E13               	comf	___awdiv@divisor+1,f,c
 12985  0040EA  B0D8               	btfsc	status,0,c
 12986  0040EC  2A13               	incf	___awdiv@divisor+1,f,c
 12987  0040EE  0E01               	movlw	1
 12988  0040F0  6E15               	movwf	___awdiv@sign,c
 12989  0040F2                     l8043:
 12990  0040F2  AE11               	btfss	___awdiv@dividend+1,7,c
 12991  0040F4  D006               	goto	l8049
 12992  0040F6  6C10               	negf	___awdiv@dividend,c
 12993  0040F8  1E11               	comf	___awdiv@dividend+1,f,c
 12994  0040FA  B0D8               	btfsc	status,0,c
 12995  0040FC  2A11               	incf	___awdiv@dividend+1,f,c
 12996  0040FE  0E01               	movlw	1
 12997  004100  1A15               	xorwf	___awdiv@sign,f,c
 12998  004102                     l8049:
 12999  004102  0E00               	movlw	0
 13000  004104  6E17               	movwf	___awdiv@quotient+1,c
 13001  004106  0E00               	movlw	0
 13002  004108  6E16               	movwf	___awdiv@quotient,c
 13003  00410A  5012               	movf	___awdiv@divisor,w,c
 13004  00410C  1013               	iorwf	___awdiv@divisor+1,w,c
 13005  00410E  B4D8               	btfsc	status,2,c
 13006  004110  D01C               	goto	l8071
 13007  004112  0E01               	movlw	1
 13008  004114  6E14               	movwf	___awdiv@counter,c
 13009  004116  D004               	goto	l8057
 13010  004118                     l8055:
 13011  004118  90D8               	bcf	status,0,c
 13012  00411A  3612               	rlcf	___awdiv@divisor,f,c
 13013  00411C  3613               	rlcf	___awdiv@divisor+1,f,c
 13014  00411E  2A14               	incf	___awdiv@counter,f,c
 13015  004120                     l8057:
 13016  004120  AE13               	btfss	___awdiv@divisor+1,7,c
 13017  004122  D7FA               	goto	l8055
 13018  004124                     l8059:
 13019  004124  90D8               	bcf	status,0,c
 13020  004126  3616               	rlcf	___awdiv@quotient,f,c
 13021  004128  3617               	rlcf	___awdiv@quotient+1,f,c
 13022  00412A  5012               	movf	___awdiv@divisor,w,c
 13023  00412C  5C10               	subwf	___awdiv@dividend,w,c
 13024  00412E  5013               	movf	___awdiv@divisor+1,w,c
 13025  004130  5811               	subwfb	___awdiv@dividend+1,w,c
 13026  004132  A0D8               	btfss	status,0,c
 13027  004134  D005               	goto	l8067
 13028  004136  5012               	movf	___awdiv@divisor,w,c
 13029  004138  5E10               	subwf	___awdiv@dividend,f,c
 13030  00413A  5013               	movf	___awdiv@divisor+1,w,c
 13031  00413C  5A11               	subwfb	___awdiv@dividend+1,f,c
 13032  00413E  8016               	bsf	___awdiv@quotient,0,c
 13033  004140                     l8067:
 13034  004140  90D8               	bcf	status,0,c
 13035  004142  3213               	rrcf	___awdiv@divisor+1,f,c
 13036  004144  3212               	rrcf	___awdiv@divisor,f,c
 13037  004146  2E14               	decfsz	___awdiv@counter,f,c
 13038  004148  D7ED               	goto	l8059
 13039  00414A                     l8071:
 13040  00414A  5015               	movf	___awdiv@sign,w,c
 13041  00414C  B4D8               	btfsc	status,2,c
 13042  00414E  D004               	goto	l8075
 13043  004150  6C16               	negf	___awdiv@quotient,c
 13044  004152  1E17               	comf	___awdiv@quotient+1,f,c
 13045  004154  B0D8               	btfsc	status,0,c
 13046  004156  2A17               	incf	___awdiv@quotient+1,f,c
 13047  004158                     l8075:
 13048  004158  C016  F010         	movff	___awdiv@quotient,?___awdiv
 13049  00415C  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
 13050  004160  0012               	return	
 13051  004162                     __end_of___awdiv:
 13052                           	opt stack 0
 13053                           tblptru	equ	0xFF8
 13054                           tblptrh	equ	0xFF7
 13055                           tblptrl	equ	0xFF6
 13056                           tablat	equ	0xFF5
 13057                           prodh	equ	0xFF4
 13058                           prodl	equ	0xFF3
 13059                           intcon	equ	0xFF2
 13060                           postinc0	equ	0xFEE
 13061                           wreg	equ	0xFE8
 13062                           indf1	equ	0xFE7
 13063                           postinc1	equ	0xFE6
 13064                           postdec1	equ	0xFE5
 13065                           fsr1h	equ	0xFE2
 13066                           fsr1l	equ	0xFE1
 13067                           indf2	equ	0xFDF
 13068                           postinc2	equ	0xFDE
 13069                           postdec2	equ	0xFDD
 13070                           fsr2h	equ	0xFDA
 13071                           fsr2l	equ	0xFD9
 13072                           status	equ	0xFD8
 13073                           
 13074 ;; *************** function _clcd_max_row *****************
 13075 ;; Defined at:
 13076 ;;		line 116 in file "clcd.c"
 13077 ;; Parameters:    Size  Location     Type
 13078 ;;		None
 13079 ;; Auto vars:     Size  Location     Type
 13080 ;;		None
 13081 ;; Return value:  Size  Location     Type
 13082 ;;                  1    wreg      unsigned char 
 13083 ;; Registers used:
 13084 ;;		wreg, status,2
 13085 ;; Tracked objects:
 13086 ;;		On entry : 0/0
 13087 ;;		On exit  : 0/0
 13088 ;;		Unchanged: 0/0
 13089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13094 ;;Total ram usage:        0 bytes
 13095 ;; Hardware stack levels used:    1
 13096 ;; Hardware stack levels required when called:    5
 13097 ;; This function calls:
 13098 ;;		Nothing
 13099 ;; This function is called by:
 13100 ;;		_reply_to_host
 13101 ;; This function uses a non-reentrant model
 13102 ;;
 13103                           
 13104                           	psect	text57
 13105  004E16                     __ptext57:
 13106                           	opt stack 0
 13107  004E16                     _clcd_max_row:
 13108                           	opt stack 23
 13109                           
 13110                           ;clcd.c: 117: if (clcd_config_data.init_done == 0)
 13111                           
 13112                           ;incstack = 0
 13113  004E16  5049               	movf	_clcd_config_data,w,c
 13114  004E18  A4D8               	btfss	status,2,c
 13115  004E1A  D002               	goto	l8171
 13116                           
 13117                           ;clcd.c: 118: return 0;
 13118  004E1C  0E00               	movlw	0
 13119  004E1E  0012               	return	
 13120  004E20                     l8171:
 13121                           
 13122                           ;clcd.c: 119: else
 13123                           ;clcd.c: 120: return clcd_config_data.clcd_max_row;
 13124  004E20  504A               	movf	_clcd_config_data+1,w,c
 13125  004E22  0012               	return	
 13126  004E24                     __end_of_clcd_max_row:
 13127                           	opt stack 0
 13128                           tblptru	equ	0xFF8
 13129                           tblptrh	equ	0xFF7
 13130                           tblptrl	equ	0xFF6
 13131                           tablat	equ	0xFF5
 13132                           prodh	equ	0xFF4
 13133                           prodl	equ	0xFF3
 13134                           intcon	equ	0xFF2
 13135                           postinc0	equ	0xFEE
 13136                           wreg	equ	0xFE8
 13137                           indf1	equ	0xFE7
 13138                           postinc1	equ	0xFE6
 13139                           postdec1	equ	0xFE5
 13140                           fsr1h	equ	0xFE2
 13141                           fsr1l	equ	0xFE1
 13142                           indf2	equ	0xFDF
 13143                           postinc2	equ	0xFDE
 13144                           postdec2	equ	0xFDD
 13145                           fsr2h	equ	0xFDA
 13146                           fsr2l	equ	0xFD9
 13147                           status	equ	0xFD8
 13148                           
 13149 ;; *************** function _clcd_max_col *****************
 13150 ;; Defined at:
 13151 ;;		line 123 in file "clcd.c"
 13152 ;; Parameters:    Size  Location     Type
 13153 ;;		None
 13154 ;; Auto vars:     Size  Location     Type
 13155 ;;		None
 13156 ;; Return value:  Size  Location     Type
 13157 ;;                  1    wreg      unsigned char 
 13158 ;; Registers used:
 13159 ;;		wreg, status,2
 13160 ;; Tracked objects:
 13161 ;;		On entry : 0/0
 13162 ;;		On exit  : 0/0
 13163 ;;		Unchanged: 0/0
 13164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13169 ;;Total ram usage:        0 bytes
 13170 ;; Hardware stack levels used:    1
 13171 ;; Hardware stack levels required when called:    5
 13172 ;; This function calls:
 13173 ;;		Nothing
 13174 ;; This function is called by:
 13175 ;;		_reply_to_host
 13176 ;; This function uses a non-reentrant model
 13177 ;;
 13178                           
 13179                           	psect	text58
 13180  004E24                     __ptext58:
 13181                           	opt stack 0
 13182  004E24                     _clcd_max_col:
 13183                           	opt stack 23
 13184                           
 13185                           ;clcd.c: 124: if (clcd_config_data.init_done == 0)
 13186                           
 13187                           ;incstack = 0
 13188  004E24  5049               	movf	_clcd_config_data,w,c
 13189  004E26  A4D8               	btfss	status,2,c
 13190  004E28  D002               	goto	l8183
 13191                           
 13192                           ;clcd.c: 125: return 0;
 13193  004E2A  0E00               	movlw	0
 13194  004E2C  0012               	return	
 13195  004E2E                     l8183:
 13196                           
 13197                           ;clcd.c: 126: else
 13198                           ;clcd.c: 127: return clcd_config_data.clcd_max_col;
 13199  004E2E  504B               	movf	_clcd_config_data+2,w,c
 13200  004E30  0012               	return	
 13201  004E32                     __end_of_clcd_max_col:
 13202                           	opt stack 0
 13203                           tblptru	equ	0xFF8
 13204                           tblptrh	equ	0xFF7
 13205                           tblptrl	equ	0xFF6
 13206                           tablat	equ	0xFF5
 13207                           prodh	equ	0xFF4
 13208                           prodl	equ	0xFF3
 13209                           intcon	equ	0xFF2
 13210                           postinc0	equ	0xFEE
 13211                           wreg	equ	0xFE8
 13212                           indf1	equ	0xFE7
 13213                           postinc1	equ	0xFE6
 13214                           postdec1	equ	0xFE5
 13215                           fsr1h	equ	0xFE2
 13216                           fsr1l	equ	0xFE1
 13217                           indf2	equ	0xFDF
 13218                           postinc2	equ	0xFDE
 13219                           postdec2	equ	0xFDD
 13220                           fsr2h	equ	0xFDA
 13221                           fsr2l	equ	0xFD9
 13222                           status	equ	0xFD8
 13223                           
 13224 ;; *************** function _parse_cmd_str *****************
 13225 ;; Defined at:
 13226 ;;		line 153 in file "cmd_consol.c"
 13227 ;; Parameters:    Size  Location     Type
 13228 ;;  str             2    0[BANK0 ] PTR unsigned char 
 13229 ;;		 -> uart_str(150), 
 13230 ;; Auto vars:     Size  Location     Type
 13231 ;;  column          1    5[BANK0 ] unsigned char 
 13232 ;;  row             1    4[BANK0 ] unsigned char 
 13233 ;;  temp            2    6[BANK0 ] PTR unsigned char 
 13234 ;;		 -> uart_str(150), NULL(0), 
 13235 ;;  ptr             2    2[BANK0 ] PTR unsigned char 
 13236 ;;		 -> uart_str(150), 
 13237 ;; Return value:  Size  Location     Type
 13238 ;;                  1    wreg      unsigned char 
 13239 ;; Registers used:
 13240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13241 ;; Tracked objects:
 13242 ;;		On entry : 0/0
 13243 ;;		On exit  : 0/0
 13244 ;;		Unchanged: 0/0
 13245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13246 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13247 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13249 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13250 ;;Total ram usage:        8 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; Hardware stack levels required when called:   10
 13253 ;; This function calls:
 13254 ;;		_atoi
 13255 ;;		_clear_cmd_data
 13256 ;;		_collect_column
 13257 ;;		_collect_row
 13258 ;;		_get_direction
 13259 ;;		_get_dis_frq
 13260 ;;		_get_over_write_data
 13261 ;;		_get_str
 13262 ;;		_get_uid
 13263 ;;		_memset
 13264 ;;		_printf
 13265 ;;		_strcmp
 13266 ;;		_strcpy
 13267 ;;		_strlen
 13268 ;;		_strtok
 13269 ;; This function is called by:
 13270 ;;		_cmd_consol_task
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           	psect	text59
 13275  0000AA                     __ptext59:
 13276                           	opt stack 0
 13277  0000AA                     _parse_cmd_str:
 13278                           	opt stack 19
 13279                           
 13280                           ;cmd_consol.c: 155: printf("%s..2\r\n", str);
 13281                           
 13282                           ;incstack = 0
 13283  0000AA  0E7B               	movlw	low STR_34
 13284  0000AC  6E2B               	movwf	printf@f,c
 13285  0000AE  0EFF               	movlw	high STR_34
 13286  0000B0  6E2C               	movwf	printf@f+1,c
 13287  0000B2  C060  F02D         	movff	parse_cmd_str@str,?_printf+2
 13288  0000B6  C061  F02E         	movff	parse_cmd_str@str+1,?_printf+3
 13289  0000BA  EC12  F025         	call	_printf	;wreg free
 13290                           
 13291                           ;cmd_consol.c: 157: char *temp;
 13292                           ;cmd_consol.c: 158: char *ptr = str;
 13293  0000BE  C060  F062         	movff	parse_cmd_str@str,parse_cmd_str@ptr
 13294  0000C2  C061  F063         	movff	parse_cmd_str@str+1,parse_cmd_str@ptr+1
 13295                           
 13296                           ;cmd_consol.c: 159: temp = strtok(ptr, "-', /=");
 13297  0000C6  C062  F01D         	movff	parse_cmd_str@ptr,strtok@s1
 13298  0000CA  C063  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
 13299  0000CE  0EA0               	movlw	low STR_35
 13300  0000D0  6E1F               	movwf	strtok@s2,c
 13301  0000D2  0EFF               	movlw	high STR_35
 13302  0000D4  6E20               	movwf	strtok@s2+1,c
 13303  0000D6  EC2D  F01D         	call	_strtok	;wreg free
 13304  0000DA  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 13305  0000DE  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 13306                           
 13307                           ;cmd_consol.c: 160: if (temp != (0)) {
 13308  0000E2  0100               	movlb	0	; () banked
 13309  0000E4  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13310  0000E6  0100               	movlb	0	; () banked
 13311  0000E8  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13312  0000EA  B4D8               	btfsc	status,2,c
 13313  0000EC  EF80  F006         	goto	l9123
 13314                           
 13315                           ; BSR set to: 0
 13316                           ;cmd_consol.c: 161: if (strcmp(temp, "MC?") == 0) {
 13317  0000F0  C066  F010         	movff	parse_cmd_str@temp,strcmp@s1
 13318  0000F4  C067  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 13319  0000F8  0EEB               	movlw	low STR_36
 13320  0000FA  6E12               	movwf	strcmp@s2,c
 13321  0000FC  0EFF               	movlw	high STR_36
 13322  0000FE  6E13               	movwf	strcmp@s2+1,c
 13323  000100  EC8A  F023         	call	_strcmp	;wreg free
 13324  000104  5010               	movf	?_strcmp,w,c
 13325  000106  1011               	iorwf	?_strcmp+1,w,c
 13326  000108  A4D8               	btfss	status,2,c
 13327  00010A  D02A               	goto	l8701
 13328                           
 13329                           ;cmd_consol.c: 163: if (temp != (0)) {
 13330  00010C  0100               	movlb	0	; () banked
 13331  00010E  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13332  000110  0100               	movlb	0	; () banked
 13333  000112  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13334  000114  B4D8               	btfsc	status,2,c
 13335  000116  EF6A  F006         	goto	l9117
 13336                           
 13337                           ; BSR set to: 0
 13338                           ;cmd_consol.c: 164: strcpy(CMD, temp);
 13339  00011A  0ECB               	movlw	low _CMD
 13340  00011C  6E24               	movwf	strcpy@to,c
 13341  00011E  0E01               	movlw	high _CMD
 13342  000120  6E25               	movwf	strcpy@to+1,c
 13343  000122  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 13344  000126  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 13345  00012A  ECAB  F025         	call	_strcpy	;wreg free
 13346                           
 13347                           ;cmd_consol.c: 165: valid_cmd = 1;
 13348  00012E  0E01               	movlw	1
 13349  000130  0100               	movlb	0	; () banked
 13350  000132  6F75               	movwf	_valid_cmd& (0+255),b
 13351                           
 13352                           ; BSR set to: 0
 13353                           ;cmd_consol.c: 166: memset(str, 0, strlen(str));
 13354  000134  C060  F024         	movff	parse_cmd_str@str,memset@p1
 13355  000138  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 13356  00013C  0E00               	movlw	0
 13357  00013E  6E27               	movwf	memset@c+1,c
 13358  000140  0E00               	movlw	0
 13359  000142  6E26               	movwf	memset@c,c
 13360  000144  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 13361  000148  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 13362  00014C  ECC2  F022         	call	_strlen	;wreg free
 13363  000150  C01E  F028         	movff	?_strlen,memset@n
 13364  000154  C01F  F029         	movff	?_strlen+1,memset@n+1
 13365  000158  ECD8  F025         	call	_memset	;wreg free
 13366  00015C                     l8697:
 13367                           
 13368                           ;cmd_consol.c: 167: return 0;
 13369  00015C  0E00               	movlw	0
 13370  00015E  0012               	return	
 13371  000160                     l8701:
 13372  000160  C066  F010         	movff	parse_cmd_str@temp,strcmp@s1
 13373  000164  C067  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 13374  000168  0EEF               	movlw	low STR_37
 13375  00016A  6E12               	movwf	strcmp@s2,c
 13376  00016C  0EFF               	movlw	high STR_37
 13377  00016E  6E13               	movwf	strcmp@s2+1,c
 13378  000170  EC8A  F023         	call	_strcmp	;wreg free
 13379  000174  5010               	movf	?_strcmp,w,c
 13380  000176  1011               	iorwf	?_strcmp+1,w,c
 13381  000178  A4D8               	btfss	status,2,c
 13382  00017A  D029               	goto	l8715
 13383                           
 13384                           ;cmd_consol.c: 171: if (temp != (0)) {
 13385  00017C  0100               	movlb	0	; () banked
 13386  00017E  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13387  000180  0100               	movlb	0	; () banked
 13388  000182  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13389  000184  B4D8               	btfsc	status,2,c
 13390  000186  EF6A  F006         	goto	l9117
 13391                           
 13392                           ; BSR set to: 0
 13393                           ;cmd_consol.c: 172: strcpy(CMD, temp);
 13394  00018A  0ECB               	movlw	low _CMD
 13395  00018C  6E24               	movwf	strcpy@to,c
 13396  00018E  0E01               	movlw	high _CMD
 13397  000190  6E25               	movwf	strcpy@to+1,c
 13398  000192  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 13399  000196  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 13400  00019A  ECAB  F025         	call	_strcpy	;wreg free
 13401                           
 13402                           ;cmd_consol.c: 173: valid_cmd = 1;
 13403  00019E  0E01               	movlw	1
 13404  0001A0  0100               	movlb	0	; () banked
 13405  0001A2  6F75               	movwf	_valid_cmd& (0+255),b
 13406                           
 13407                           ; BSR set to: 0
 13408                           ;cmd_consol.c: 174: memset(str, 0, strlen(str));
 13409  0001A4  C060  F024         	movff	parse_cmd_str@str,memset@p1
 13410  0001A8  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 13411  0001AC  0E00               	movlw	0
 13412  0001AE  6E27               	movwf	memset@c+1,c
 13413  0001B0  0E00               	movlw	0
 13414  0001B2  6E26               	movwf	memset@c,c
 13415  0001B4  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 13416  0001B8  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 13417  0001BC  ECC2  F022         	call	_strlen	;wreg free
 13418  0001C0  C01E  F028         	movff	?_strlen,memset@n
 13419  0001C4  C01F  F029         	movff	?_strlen+1,memset@n+1
 13420  0001C8  ECD8  F025         	call	_memset	;wreg free
 13421  0001CC  D7C7               	goto	l8697
 13422  0001CE                     l8715:
 13423  0001CE  C066  F010         	movff	parse_cmd_str@temp,strcmp@s1
 13424  0001D2  C067  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 13425  0001D6  0EB5               	movlw	low STR_38
 13426  0001D8  6E12               	movwf	strcmp@s2,c
 13427  0001DA  0EFF               	movlw	high STR_38
 13428  0001DC  6E13               	movwf	strcmp@s2+1,c
 13429  0001DE  EC8A  F023         	call	_strcmp	;wreg free
 13430  0001E2  5010               	movf	?_strcmp,w,c
 13431  0001E4  1011               	iorwf	?_strcmp+1,w,c
 13432  0001E6  A4D8               	btfss	status,2,c
 13433  0001E8  D02F               	goto	l8731
 13434                           
 13435                           ;cmd_consol.c: 179: if (temp != (0)) {
 13436  0001EA  0100               	movlb	0	; () banked
 13437  0001EC  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13438  0001EE  0100               	movlb	0	; () banked
 13439  0001F0  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13440  0001F2  B4D8               	btfsc	status,2,c
 13441  0001F4  EF6A  F006         	goto	l9117
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;cmd_consol.c: 180: strcpy(CMD, temp);
 13445  0001F8  0ECB               	movlw	low _CMD
 13446  0001FA  6E24               	movwf	strcpy@to,c
 13447  0001FC  0E01               	movlw	high _CMD
 13448  0001FE  6E25               	movwf	strcpy@to+1,c
 13449  000200  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 13450  000204  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 13451  000208  ECAB  F025         	call	_strcpy	;wreg free
 13452                           
 13453                           ;cmd_consol.c: 181: valid_cmd = 1;
 13454  00020C  0E01               	movlw	1
 13455  00020E  0100               	movlb	0	; () banked
 13456  000210  6F75               	movwf	_valid_cmd& (0+255),b
 13457                           
 13458                           ; BSR set to: 0
 13459                           ;cmd_consol.c: 182: memset(str, 0, strlen(str));
 13460  000212  C060  F024         	movff	parse_cmd_str@str,memset@p1
 13461  000216  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 13462  00021A  0E00               	movlw	0
 13463  00021C  6E27               	movwf	memset@c+1,c
 13464  00021E  0E00               	movlw	0
 13465  000220  6E26               	movwf	memset@c,c
 13466  000222  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 13467  000226  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 13468  00022A  ECC2  F022         	call	_strlen	;wreg free
 13469  00022E  C01E  F028         	movff	?_strlen,memset@n
 13470  000232  C01F  F029         	movff	?_strlen+1,memset@n+1
 13471  000236  ECD8  F025         	call	_memset	;wreg free
 13472                           
 13473                           ;cmd_consol.c: 184: printf(".....\r\n");
 13474  00023A  0E73               	movlw	low STR_39
 13475  00023C  6E2B               	movwf	printf@f,c
 13476  00023E  0EFF               	movlw	high STR_39
 13477  000240  6E2C               	movwf	printf@f+1,c
 13478  000242  EC12  F025         	call	_printf	;wreg free
 13479  000246  D78A               	goto	l8697
 13480  000248                     l8731:
 13481  000248  C066  F010         	movff	parse_cmd_str@temp,strcmp@s1
 13482  00024C  C067  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 13483  000250  0ED7               	movlw	low STR_40
 13484  000252  6E12               	movwf	strcmp@s2,c
 13485  000254  0EFF               	movlw	high STR_40
 13486  000256  6E13               	movwf	strcmp@s2+1,c
 13487  000258  EC8A  F023         	call	_strcmp	;wreg free
 13488  00025C  5010               	movf	?_strcmp,w,c
 13489  00025E  1011               	iorwf	?_strcmp+1,w,c
 13490  000260  A4D8               	btfss	status,2,c
 13491  000262  D085               	goto	l8769
 13492                           
 13493                           ;cmd_consol.c: 190: if (temp != (0)) {
 13494  000264  0100               	movlb	0	; () banked
 13495  000266  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13496  000268  0100               	movlb	0	; () banked
 13497  00026A  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13498  00026C  B4D8               	btfsc	status,2,c
 13499  00026E  EF6A  F006         	goto	l9117
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;cmd_consol.c: 191: strcpy(CMD, temp);
 13503  000272  0ECB               	movlw	low _CMD
 13504  000274  6E24               	movwf	strcpy@to,c
 13505  000276  0E01               	movlw	high _CMD
 13506  000278  6E25               	movwf	strcpy@to+1,c
 13507  00027A  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 13508  00027E  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 13509  000282  ECAB  F025         	call	_strcpy	;wreg free
 13510                           
 13511                           ;cmd_consol.c: 192: temp = strtok((0), "-', /=");
 13512  000286  0E00               	movlw	0
 13513  000288  6E1D               	movwf	strtok@s1,c
 13514  00028A  0E00               	movlw	0
 13515  00028C  6E1E               	movwf	strtok@s1+1,c
 13516  00028E  0EA0               	movlw	low STR_35
 13517  000290  6E1F               	movwf	strtok@s2,c
 13518  000292  0EFF               	movlw	high STR_35
 13519  000294  6E20               	movwf	strtok@s2+1,c
 13520  000296  EC2D  F01D         	call	_strtok	;wreg free
 13521  00029A  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 13522  00029E  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 13523                           
 13524                           ;cmd_consol.c: 194: printf("%s..\r\n", temp);
 13525  0002A2  0E99               	movlw	low STR_42
 13526  0002A4  6E2B               	movwf	printf@f,c
 13527  0002A6  0EFF               	movlw	high STR_42
 13528  0002A8  6E2C               	movwf	printf@f+1,c
 13529  0002AA  C066  F02D         	movff	parse_cmd_str@temp,?_printf+2
 13530  0002AE  C067  F02E         	movff	parse_cmd_str@temp+1,?_printf+3
 13531  0002B2  EC12  F025         	call	_printf	;wreg free
 13532                           
 13533                           ;cmd_consol.c: 196: char row = 0, column = 0;
 13534  0002B6  0E00               	movlw	0
 13535  0002B8  0100               	movlb	0	; () banked
 13536  0002BA  6F64               	movwf	parse_cmd_str@row& (0+255),b
 13537                           
 13538                           ; BSR set to: 0
 13539  0002BC  0E00               	movlw	0
 13540  0002BE  0100               	movlb	0	; () banked
 13541  0002C0  6F65               	movwf	parse_cmd_str@column& (0+255),b
 13542                           
 13543                           ; BSR set to: 0
 13544                           ;cmd_consol.c: 197: if (temp != (0)) {
 13545  0002C2  0100               	movlb	0	; () banked
 13546  0002C4  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13547  0002C6  0100               	movlb	0	; () banked
 13548  0002C8  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13549  0002CA  B4D8               	btfsc	status,2,c
 13550  0002CC  EF6A  F006         	goto	l9117
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;cmd_consol.c: 198: row = atoi(temp);
 13554  0002D0  C066  F01E         	movff	parse_cmd_str@temp,atoi@s
 13555  0002D4  C067  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
 13556  0002D8  ECC6  F01C         	call	_atoi	;wreg free
 13557  0002DC  501E               	movf	?_atoi,w,c
 13558  0002DE  0100               	movlb	0	; () banked
 13559  0002E0  6F64               	movwf	parse_cmd_str@row& (0+255),b
 13560                           
 13561                           ; BSR set to: 0
 13562                           ;cmd_consol.c: 199: if (row > 0) {
 13563  0002E2  0100               	movlb	0	; () banked
 13564  0002E4  5164               	movf	parse_cmd_str@row& (0+255),w,b
 13565  0002E6  0100               	movlb	0	; () banked
 13566  0002E8  B4D8               	btfsc	status,2,c
 13567  0002EA  EF6A  F006         	goto	l9117
 13568                           
 13569                           ; BSR set to: 0
 13570                           ;cmd_consol.c: 200: temp = strtok((0), "-', /=");
 13571  0002EE  0E00               	movlw	0
 13572  0002F0  6E1D               	movwf	strtok@s1,c
 13573  0002F2  0E00               	movlw	0
 13574  0002F4  6E1E               	movwf	strtok@s1+1,c
 13575  0002F6  0EA0               	movlw	low STR_35
 13576  0002F8  6E1F               	movwf	strtok@s2,c
 13577  0002FA  0EFF               	movlw	high STR_35
 13578  0002FC  6E20               	movwf	strtok@s2+1,c
 13579  0002FE  EC2D  F01D         	call	_strtok	;wreg free
 13580  000302  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 13581  000306  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 13582                           
 13583                           ;cmd_consol.c: 201: if (temp != (0)) {
 13584  00030A  0100               	movlb	0	; () banked
 13585  00030C  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13586  00030E  0100               	movlb	0	; () banked
 13587  000310  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13588  000312  B4D8               	btfsc	status,2,c
 13589  000314  EF6A  F006         	goto	l9117
 13590                           
 13591                           ; BSR set to: 0
 13592                           ;cmd_consol.c: 202: column = atoi(temp);
 13593  000318  C066  F01E         	movff	parse_cmd_str@temp,atoi@s
 13594  00031C  C067  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
 13595  000320  ECC6  F01C         	call	_atoi	;wreg free
 13596  000324  501E               	movf	?_atoi,w,c
 13597  000326  0100               	movlb	0	; () banked
 13598  000328  6F65               	movwf	parse_cmd_str@column& (0+255),b
 13599                           
 13600                           ; BSR set to: 0
 13601                           ;cmd_consol.c: 203: if (column > 0) {
 13602  00032A  0100               	movlb	0	; () banked
 13603  00032C  5165               	movf	parse_cmd_str@column& (0+255),w,b
 13604  00032E  0100               	movlb	0	; () banked
 13605  000330  B4D8               	btfsc	status,2,c
 13606  000332  EF6A  F006         	goto	l9117
 13607                           
 13608                           ; BSR set to: 0
 13609                           ;cmd_consol.c: 204: clcd_init_col = column;
 13610  000336  C065  F119         	movff	parse_cmd_str@column,_clcd_init_col
 13611                           
 13612                           ;cmd_consol.c: 205: clcd_init_row = row;
 13613  00033A  C064  F041         	movff	parse_cmd_str@row,_clcd_init_row
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;cmd_consol.c: 206: valid_cmd = 1;
 13617  00033E  0E01               	movlw	1
 13618  000340  0100               	movlb	0	; () banked
 13619  000342  6F75               	movwf	_valid_cmd& (0+255),b
 13620                           
 13621                           ; BSR set to: 0
 13622                           ;cmd_consol.c: 207: memset(str, 0, strlen(str));
 13623  000344  C060  F024         	movff	parse_cmd_str@str,memset@p1
 13624  000348  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 13625  00034C  0E00               	movlw	0
 13626  00034E  6E27               	movwf	memset@c+1,c
 13627  000350  0E00               	movlw	0
 13628  000352  6E26               	movwf	memset@c,c
 13629  000354  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 13630  000358  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 13631  00035C  ECC2  F022         	call	_strlen	;wreg free
 13632  000360  C01E  F028         	movff	?_strlen,memset@n
 13633  000364  C01F  F029         	movff	?_strlen+1,memset@n+1
 13634  000368  ECD8  F025         	call	_memset	;wreg free
 13635  00036C  D6F7               	goto	l8697
 13636  00036E                     l8769:
 13637  00036E  C066  F010         	movff	parse_cmd_str@temp,strcmp@s1
 13638  000372  C067  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 13639  000376  0EBB               	movlw	low STR_44
 13640  000378  6E12               	movwf	strcmp@s2,c
 13641  00037A  0EFF               	movlw	high STR_44
 13642  00037C  6E13               	movwf	strcmp@s2+1,c
 13643  00037E  EC8A  F023         	call	_strcmp	;wreg free
 13644  000382  5010               	movf	?_strcmp,w,c
 13645  000384  1011               	iorwf	?_strcmp+1,w,c
 13646  000386  A4D8               	btfss	status,2,c
 13647  000388  D029               	goto	l8783
 13648                           
 13649                           ;cmd_consol.c: 218: if (temp != (0)) {
 13650  00038A  0100               	movlb	0	; () banked
 13651  00038C  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13652  00038E  0100               	movlb	0	; () banked
 13653  000390  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13654  000392  B4D8               	btfsc	status,2,c
 13655  000394  EF6A  F006         	goto	l9117
 13656                           
 13657                           ; BSR set to: 0
 13658                           ;cmd_consol.c: 219: strcpy(CMD, temp);
 13659  000398  0ECB               	movlw	low _CMD
 13660  00039A  6E24               	movwf	strcpy@to,c
 13661  00039C  0E01               	movlw	high _CMD
 13662  00039E  6E25               	movwf	strcpy@to+1,c
 13663  0003A0  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 13664  0003A4  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 13665  0003A8  ECAB  F025         	call	_strcpy	;wreg free
 13666                           
 13667                           ;cmd_consol.c: 220: valid_cmd = 1;
 13668  0003AC  0E01               	movlw	1
 13669  0003AE  0100               	movlb	0	; () banked
 13670  0003B0  6F75               	movwf	_valid_cmd& (0+255),b
 13671                           
 13672                           ; BSR set to: 0
 13673                           ;cmd_consol.c: 221: memset(str, 0, strlen(str));
 13674  0003B2  C060  F024         	movff	parse_cmd_str@str,memset@p1
 13675  0003B6  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 13676  0003BA  0E00               	movlw	0
 13677  0003BC  6E27               	movwf	memset@c+1,c
 13678  0003BE  0E00               	movlw	0
 13679  0003C0  6E26               	movwf	memset@c,c
 13680  0003C2  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 13681  0003C6  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 13682  0003CA  ECC2  F022         	call	_strlen	;wreg free
 13683  0003CE  C01E  F028         	movff	?_strlen,memset@n
 13684  0003D2  C01F  F029         	movff	?_strlen+1,memset@n+1
 13685  0003D6  ECD8  F025         	call	_memset	;wreg free
 13686  0003DA  D6C0               	goto	l8697
 13687  0003DC                     l8783:
 13688  0003DC  C066  F010         	movff	parse_cmd_str@temp,strcmp@s1
 13689  0003E0  C067  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 13690  0003E4  0EC7               	movlw	low STR_45
 13691  0003E6  6E12               	movwf	strcmp@s2,c
 13692  0003E8  0EFF               	movlw	high STR_45
 13693  0003EA  6E13               	movwf	strcmp@s2+1,c
 13694  0003EC  EC8A  F023         	call	_strcmp	;wreg free
 13695  0003F0  5010               	movf	?_strcmp,w,c
 13696  0003F2  1011               	iorwf	?_strcmp+1,w,c
 13697  0003F4  A4D8               	btfss	status,2,c
 13698  0003F6  D09B               	goto	l8837
 13699                           
 13700                           ;cmd_consol.c: 226: if (clcd_config_data.init_done == 1) {
 13701  0003F8  0449               	decf	_clcd_config_data,w,c
 13702  0003FA  A4D8               	btfss	status,2,c
 13703  0003FC  D096               	goto	l8833
 13704                           
 13705                           ;cmd_consol.c: 227: clear_cmd_data();
 13706  0003FE  EC62  F025         	call	_clear_cmd_data	;wreg free
 13707                           
 13708                           ;cmd_consol.c: 229: if (temp != (0)) {
 13709  000402  0100               	movlb	0	; () banked
 13710  000404  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13711  000406  0100               	movlb	0	; () banked
 13712  000408  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13713  00040A  B4D8               	btfsc	status,2,c
 13714  00040C  EF6A  F006         	goto	l9117
 13715                           
 13716                           ; BSR set to: 0
 13717                           ;cmd_consol.c: 231: printf("temp = %s, ", temp);
 13718  000410  0EBE               	movlw	low STR_46
 13719  000412  6E2B               	movwf	printf@f,c
 13720  000414  0EFE               	movlw	high STR_46
 13721  000416  6E2C               	movwf	printf@f+1,c
 13722  000418  C066  F02D         	movff	parse_cmd_str@temp,?_printf+2
 13723  00041C  C067  F02E         	movff	parse_cmd_str@temp+1,?_printf+3
 13724  000420  EC12  F025         	call	_printf	;wreg free
 13725                           
 13726                           ;cmd_consol.c: 233: strcpy(CMD, temp);
 13727  000424  0ECB               	movlw	low _CMD
 13728  000426  6E24               	movwf	strcpy@to,c
 13729  000428  0E01               	movlw	high _CMD
 13730  00042A  6E25               	movwf	strcpy@to+1,c
 13731  00042C  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 13732  000430  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 13733  000434  ECAB  F025         	call	_strcpy	;wreg free
 13734                           
 13735                           ;cmd_consol.c: 234: temp = strtok((0), "-', /=");
 13736  000438  0E00               	movlw	0
 13737  00043A  6E1D               	movwf	strtok@s1,c
 13738  00043C  0E00               	movlw	0
 13739  00043E  6E1E               	movwf	strtok@s1+1,c
 13740  000440  0EA0               	movlw	low STR_35
 13741  000442  6E1F               	movwf	strtok@s2,c
 13742  000444  0EFF               	movlw	high STR_35
 13743  000446  6E20               	movwf	strtok@s2+1,c
 13744  000448  EC2D  F01D         	call	_strtok	;wreg free
 13745  00044C  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 13746  000450  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 13747                           
 13748                           ;cmd_consol.c: 235: if (temp != (0)) {
 13749  000454  0100               	movlb	0	; () banked
 13750  000456  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13751  000458  0100               	movlb	0	; () banked
 13752  00045A  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13753  00045C  B4D8               	btfsc	status,2,c
 13754  00045E  EF6A  F006         	goto	l9117
 13755                           
 13756                           ; BSR set to: 0
 13757                           ;cmd_consol.c: 237: printf("temp = %s, ", temp);
 13758  000462  0EBE               	movlw	low STR_46
 13759  000464  6E2B               	movwf	printf@f,c
 13760  000466  0EFE               	movlw	high STR_46
 13761  000468  6E2C               	movwf	printf@f+1,c
 13762  00046A  C066  F02D         	movff	parse_cmd_str@temp,?_printf+2
 13763  00046E  C067  F02E         	movff	parse_cmd_str@temp+1,?_printf+3
 13764  000472  EC12  F025         	call	_printf	;wreg free
 13765                           
 13766                           ;cmd_consol.c: 239: get_uid(temp, &cmd_data.uid);
 13767  000476  C066  F024         	movff	parse_cmd_str@temp,get_uid@str
 13768  00047A  C067  F025         	movff	parse_cmd_str@temp+1,get_uid@str+1
 13769  00047E  0E6E               	movlw	low _cmd_data
 13770  000480  6E26               	movwf	get_uid@data_uid,c
 13771  000482  0E01               	movlw	high _cmd_data
 13772  000484  6E27               	movwf	get_uid@data_uid+1,c
 13773  000486  EC8C  F01D         	call	_get_uid	;wreg free
 13774                           
 13775                           ;cmd_consol.c: 240: if (cmd_data.uid != 0) {
 13776  00048A  0101               	movlb	1	; () banked
 13777  00048C  516E               	movf	_cmd_data& (0+255),w,b
 13778  00048E  0101               	movlb	1	; () banked
 13779  000490  116F               	iorwf	(_cmd_data+1)& (0+255),w,b
 13780  000492  B4D8               	btfsc	status,2,c
 13781  000494  D048               	goto	l8829
 13782                           
 13783                           ; BSR set to: 1
 13784                           ;cmd_consol.c: 241: temp = strtok((0), "-', /=");
 13785  000496  0E00               	movlw	0
 13786  000498  6E1D               	movwf	strtok@s1,c
 13787  00049A  0E00               	movlw	0
 13788  00049C  6E1E               	movwf	strtok@s1+1,c
 13789  00049E  0EA0               	movlw	low STR_35
 13790  0004A0  6E1F               	movwf	strtok@s2,c
 13791  0004A2  0EFF               	movlw	high STR_35
 13792  0004A4  6E20               	movwf	strtok@s2+1,c
 13793  0004A6  EC2D  F01D         	call	_strtok	;wreg free
 13794  0004AA  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 13795  0004AE  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 13796                           
 13797                           ;cmd_consol.c: 242: if (temp != (0)) {
 13798  0004B2  0100               	movlb	0	; () banked
 13799  0004B4  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13800  0004B6  0100               	movlb	0	; () banked
 13801  0004B8  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13802  0004BA  B4D8               	btfsc	status,2,c
 13803  0004BC  EF6A  F006         	goto	l9117
 13804                           
 13805                           ; BSR set to: 0
 13806                           ;cmd_consol.c: 243: if (strlen(temp) < 40) {
 13807  0004C0  C066  F01E         	movff	parse_cmd_str@temp,strlen@s
 13808  0004C4  C067  F01F         	movff	parse_cmd_str@temp+1,strlen@s+1
 13809  0004C8  ECC2  F022         	call	_strlen	;wreg free
 13810  0004CC  501F               	movf	?_strlen+1,w,c
 13811  0004CE  E129               	bnz	l8825
 13812  0004D0  0E28               	movlw	40
 13813  0004D2  5C1E               	subwf	?_strlen,w,c
 13814  0004D4  B0D8               	btfsc	status,0,c
 13815  0004D6  D025               	goto	l8825
 13816                           
 13817                           ;cmd_consol.c: 244: strcpy(cmd_data.data, temp);
 13818  0004D8  0E70               	movlw	low (_cmd_data+2)
 13819  0004DA  6E24               	movwf	strcpy@to,c
 13820  0004DC  0E01               	movlw	high (_cmd_data+2)
 13821  0004DE  6E25               	movwf	strcpy@to+1,c
 13822  0004E0  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 13823  0004E4  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 13824  0004E8  ECAB  F025         	call	_strcpy	;wreg free
 13825                           
 13826                           ;cmd_consol.c: 245: valid_cmd = 1;
 13827  0004EC  0E01               	movlw	1
 13828  0004EE  0100               	movlb	0	; () banked
 13829  0004F0  6F75               	movwf	_valid_cmd& (0+255),b
 13830                           
 13831                           ; BSR set to: 0
 13832                           ;cmd_consol.c: 246: cmd_data.data_set = 1;
 13833  0004F2  0E01               	movlw	1
 13834  0004F4  0101               	movlb	1	; () banked
 13835  0004F6  6F98               	movwf	(_cmd_data+42)& (0+255),b
 13836                           
 13837                           ; BSR set to: 1
 13838                           ;cmd_consol.c: 247: memset(str, 0, strlen(str));
 13839  0004F8  C060  F024         	movff	parse_cmd_str@str,memset@p1
 13840  0004FC  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 13841  000500  0E00               	movlw	0
 13842  000502  6E27               	movwf	memset@c+1,c
 13843  000504  0E00               	movlw	0
 13844  000506  6E26               	movwf	memset@c,c
 13845  000508  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 13846  00050C  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 13847  000510  ECC2  F022         	call	_strlen	;wreg free
 13848  000514  C01E  F028         	movff	?_strlen,memset@n
 13849  000518  C01F  F029         	movff	?_strlen+1,memset@n+1
 13850  00051C  ECD8  F025         	call	_memset	;wreg free
 13851  000520  D61D               	goto	l8697
 13852  000522                     l8825:
 13853                           
 13854                           ;cmd_consol.c: 250: return 2;
 13855  000522  0E02               	movlw	2
 13856  000524  0012               	return	
 13857  000526                     l8829:
 13858                           
 13859                           ;cmd_consol.c: 254: return 8;
 13860  000526  0E08               	movlw	8
 13861  000528  0012               	return	
 13862  00052A                     l8833:
 13863                           
 13864                           ;cmd_consol.c: 259: return 9;
 13865  00052A  0E09               	movlw	9
 13866  00052C  0012               	return	
 13867  00052E                     l8837:
 13868  00052E  C066  F010         	movff	parse_cmd_str@temp,strcmp@s1
 13869  000532  C067  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 13870  000536  0E83               	movlw	low STR_50
 13871  000538  6E12               	movwf	strcmp@s2,c
 13872  00053A  0EFF               	movlw	high STR_50
 13873  00053C  6E13               	movwf	strcmp@s2+1,c
 13874  00053E  EC8A  F023         	call	_strcmp	;wreg free
 13875  000542  5010               	movf	?_strcmp,w,c
 13876  000544  1011               	iorwf	?_strcmp+1,w,c
 13877  000546  A4D8               	btfss	status,2,c
 13878  000548  D09A               	goto	l8889
 13879                           
 13880                           ;cmd_consol.c: 263: printf("%s...4\r\n", temp);
 13881  00054A  0E19               	movlw	low STR_51
 13882  00054C  6E2B               	movwf	printf@f,c
 13883  00054E  0EFF               	movlw	high STR_51
 13884  000550  6E2C               	movwf	printf@f+1,c
 13885  000552  C066  F02D         	movff	parse_cmd_str@temp,?_printf+2
 13886  000556  C067  F02E         	movff	parse_cmd_str@temp+1,?_printf+3
 13887  00055A  EC12  F025         	call	_printf	;wreg free
 13888                           
 13889                           ;cmd_consol.c: 265: if (clcd_config_data.init_done == 1) {
 13890  00055E  0449               	decf	_clcd_config_data,w,c
 13891  000560  A4D8               	btfss	status,2,c
 13892  000562  D08B               	goto	l8885
 13893                           
 13894                           ;cmd_consol.c: 266: clear_cmd_data();
 13895  000564  EC62  F025         	call	_clear_cmd_data	;wreg free
 13896                           
 13897                           ;cmd_consol.c: 268: if (temp != (0)) {
 13898  000568  0100               	movlb	0	; () banked
 13899  00056A  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13900  00056C  0100               	movlb	0	; () banked
 13901  00056E  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13902  000570  B4D8               	btfsc	status,2,c
 13903  000572  D3B0               	goto	l9117
 13904                           
 13905                           ; BSR set to: 0
 13906                           ;cmd_consol.c: 269: strcpy(CMD, temp);
 13907  000574  0ECB               	movlw	low _CMD
 13908  000576  6E24               	movwf	strcpy@to,c
 13909  000578  0E01               	movlw	high _CMD
 13910  00057A  6E25               	movwf	strcpy@to+1,c
 13911  00057C  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 13912  000580  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 13913  000584  ECAB  F025         	call	_strcpy	;wreg free
 13914                           
 13915                           ;cmd_consol.c: 270: temp = strtok((0), "-', /=");
 13916  000588  0E00               	movlw	0
 13917  00058A  6E1D               	movwf	strtok@s1,c
 13918  00058C  0E00               	movlw	0
 13919  00058E  6E1E               	movwf	strtok@s1+1,c
 13920  000590  0EA0               	movlw	low STR_35
 13921  000592  6E1F               	movwf	strtok@s2,c
 13922  000594  0EFF               	movlw	high STR_35
 13923  000596  6E20               	movwf	strtok@s2+1,c
 13924  000598  EC2D  F01D         	call	_strtok	;wreg free
 13925  00059C  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 13926  0005A0  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 13927                           
 13928                           ;cmd_consol.c: 271: if (temp != (0)) {
 13929  0005A4  0100               	movlb	0	; () banked
 13930  0005A6  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13931  0005A8  0100               	movlb	0	; () banked
 13932  0005AA  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13933  0005AC  B4D8               	btfsc	status,2,c
 13934  0005AE  D392               	goto	l9117
 13935                           
 13936                           ; BSR set to: 0
 13937                           ;cmd_consol.c: 273: printf("%s...5\r\n", temp);
 13938  0005B0  0E22               	movlw	low STR_53
 13939  0005B2  6E2B               	movwf	printf@f,c
 13940  0005B4  0EFF               	movlw	high STR_53
 13941  0005B6  6E2C               	movwf	printf@f+1,c
 13942  0005B8  C066  F02D         	movff	parse_cmd_str@temp,?_printf+2
 13943  0005BC  C067  F02E         	movff	parse_cmd_str@temp+1,?_printf+3
 13944  0005C0  EC12  F025         	call	_printf	;wreg free
 13945                           
 13946                           ;cmd_consol.c: 275: get_uid(temp, &cmd_data.uid);
 13947  0005C4  C066  F024         	movff	parse_cmd_str@temp,get_uid@str
 13948  0005C8  C067  F025         	movff	parse_cmd_str@temp+1,get_uid@str+1
 13949  0005CC  0E6E               	movlw	low _cmd_data
 13950  0005CE  6E26               	movwf	get_uid@data_uid,c
 13951  0005D0  0E01               	movlw	high _cmd_data
 13952  0005D2  6E27               	movwf	get_uid@data_uid+1,c
 13953  0005D4  EC8C  F01D         	call	_get_uid	;wreg free
 13954                           
 13955                           ;cmd_consol.c: 276: if (cmd_data.uid != 0) {
 13956  0005D8  0101               	movlb	1	; () banked
 13957  0005DA  516E               	movf	_cmd_data& (0+255),w,b
 13958  0005DC  0101               	movlb	1	; () banked
 13959  0005DE  116F               	iorwf	(_cmd_data+1)& (0+255),w,b
 13960  0005E0  B4D8               	btfsc	status,2,c
 13961  0005E2  D049               	goto	l8881
 13962                           
 13963                           ; BSR set to: 1
 13964                           ;cmd_consol.c: 277: temp = strtok((0), "-', /=");
 13965  0005E4  0E00               	movlw	0
 13966  0005E6  6E1D               	movwf	strtok@s1,c
 13967  0005E8  0E00               	movlw	0
 13968  0005EA  6E1E               	movwf	strtok@s1+1,c
 13969  0005EC  0EA0               	movlw	low STR_35
 13970  0005EE  6E1F               	movwf	strtok@s2,c
 13971  0005F0  0EFF               	movlw	high STR_35
 13972  0005F2  6E20               	movwf	strtok@s2+1,c
 13973  0005F4  EC2D  F01D         	call	_strtok	;wreg free
 13974  0005F8  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 13975  0005FC  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 13976                           
 13977                           ;cmd_consol.c: 278: if (temp != (0)) {
 13978  000600  0100               	movlb	0	; () banked
 13979  000602  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 13980  000604  0100               	movlb	0	; () banked
 13981  000606  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 13982  000608  B4D8               	btfsc	status,2,c
 13983  00060A  D364               	goto	l9117
 13984                           
 13985                           ; BSR set to: 0
 13986                           ;cmd_consol.c: 280: printf("%s...6\r\n", temp);
 13987  00060C  0E2B               	movlw	low STR_55
 13988  00060E  6E2B               	movwf	printf@f,c
 13989  000610  0EFF               	movlw	high STR_55
 13990  000612  6E2C               	movwf	printf@f+1,c
 13991  000614  C066  F02D         	movff	parse_cmd_str@temp,?_printf+2
 13992  000618  C067  F02E         	movff	parse_cmd_str@temp+1,?_printf+3
 13993  00061C  EC12  F025         	call	_printf	;wreg free
 13994                           
 13995                           ;cmd_consol.c: 282: get_direction(temp, &cmd_data.scroll);
 13996  000620  C066  F039         	movff	parse_cmd_str@temp,get_direction@str
 13997  000624  C067  F03A         	movff	parse_cmd_str@temp+1,get_direction@str+1
 13998  000628  0E9E               	movlw	low (_cmd_data+48)
 13999  00062A  6E3B               	movwf	get_direction@data_direction,c
 14000  00062C  0E01               	movlw	high (_cmd_data+48)
 14001  00062E  6E3C               	movwf	get_direction@data_direction+1,c
 14002  000630  ECEF  F01E         	call	_get_direction	;wreg free
 14003                           
 14004                           ;cmd_consol.c: 283: if (cmd_data.scroll < 3 && cmd_data.scroll != -1) {
 14005  000634  0E03               	movlw	3
 14006  000636  0101               	movlb	1	; () banked
 14007  000638  619E               	cpfslt	(_cmd_data+48)& (0+255),b
 14008  00063A  D01B               	goto	l8877
 14009                           
 14010                           ; BSR set to: 1
 14011                           ;cmd_consol.c: 284: cmd_data.scroll_set = 1;
 14012  00063C  0E01               	movlw	1
 14013  00063E  0101               	movlb	1	; () banked
 14014  000640  6F9F               	movwf	(_cmd_data+49)& (0+255),b
 14015                           
 14016                           ;cmd_consol.c: 285: valid_cmd = 1;
 14017  000642  0E01               	movlw	1
 14018  000644  0100               	movlb	0	; () banked
 14019  000646  6F75               	movwf	_valid_cmd& (0+255),b
 14020                           
 14021                           ; BSR set to: 0
 14022                           ;cmd_consol.c: 286: memset(str, 0, strlen(str));
 14023  000648  C060  F024         	movff	parse_cmd_str@str,memset@p1
 14024  00064C  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 14025  000650  0E00               	movlw	0
 14026  000652  6E27               	movwf	memset@c+1,c
 14027  000654  0E00               	movlw	0
 14028  000656  6E26               	movwf	memset@c,c
 14029  000658  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 14030  00065C  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 14031  000660  ECC2  F022         	call	_strlen	;wreg free
 14032  000664  C01E  F028         	movff	?_strlen,memset@n
 14033  000668  C01F  F029         	movff	?_strlen+1,memset@n+1
 14034  00066C  ECD8  F025         	call	_memset	;wreg free
 14035  000670  D575               	goto	l8697
 14036  000672                     l8877:
 14037                           
 14038                           ;cmd_consol.c: 289: return 4;
 14039  000672  0E04               	movlw	4
 14040  000674  0012               	return	
 14041  000676                     l8881:
 14042                           
 14043                           ;cmd_consol.c: 293: return 8;
 14044  000676  0E08               	movlw	8
 14045  000678  0012               	return	
 14046  00067A                     l8885:
 14047                           
 14048                           ;cmd_consol.c: 298: return 9;
 14049  00067A  0E09               	movlw	9
 14050  00067C  0012               	return	
 14051  00067E                     l8889:
 14052  00067E  C066  F010         	movff	parse_cmd_str@temp,strcmp@s1
 14053  000682  C067  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 14054  000686  0EA7               	movlw	low STR_56
 14055  000688  6E12               	movwf	strcmp@s2,c
 14056  00068A  0EFF               	movlw	high STR_56
 14057  00068C  6E13               	movwf	strcmp@s2+1,c
 14058  00068E  EC8A  F023         	call	_strcmp	;wreg free
 14059  000692  5010               	movf	?_strcmp,w,c
 14060  000694  1011               	iorwf	?_strcmp+1,w,c
 14061  000696  A4D8               	btfss	status,2,c
 14062  000698  D120               	goto	l8975
 14063                           
 14064                           ;cmd_consol.c: 301: if (clcd_config_data.init_done == 1) {
 14065  00069A  0449               	decf	_clcd_config_data,w,c
 14066  00069C  A4D8               	btfss	status,2,c
 14067  00069E  D11B               	goto	l8971
 14068                           
 14069                           ;cmd_consol.c: 302: clear_cmd_data();
 14070  0006A0  EC62  F025         	call	_clear_cmd_data	;wreg free
 14071                           
 14072                           ;cmd_consol.c: 304: if (temp != (0)) {
 14073  0006A4  0100               	movlb	0	; () banked
 14074  0006A6  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14075  0006A8  0100               	movlb	0	; () banked
 14076  0006AA  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14077  0006AC  B4D8               	btfsc	status,2,c
 14078  0006AE  D312               	goto	l9117
 14079                           
 14080                           ; BSR set to: 0
 14081                           ;cmd_consol.c: 305: strcpy(CMD, temp);
 14082  0006B0  0ECB               	movlw	low _CMD
 14083  0006B2  6E24               	movwf	strcpy@to,c
 14084  0006B4  0E01               	movlw	high _CMD
 14085  0006B6  6E25               	movwf	strcpy@to+1,c
 14086  0006B8  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 14087  0006BC  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 14088  0006C0  ECAB  F025         	call	_strcpy	;wreg free
 14089                           
 14090                           ;cmd_consol.c: 306: temp = strtok((0), "-', /=");
 14091  0006C4  0E00               	movlw	0
 14092  0006C6  6E1D               	movwf	strtok@s1,c
 14093  0006C8  0E00               	movlw	0
 14094  0006CA  6E1E               	movwf	strtok@s1+1,c
 14095  0006CC  0EA0               	movlw	low STR_35
 14096  0006CE  6E1F               	movwf	strtok@s2,c
 14097  0006D0  0EFF               	movlw	high STR_35
 14098  0006D2  6E20               	movwf	strtok@s2+1,c
 14099  0006D4  EC2D  F01D         	call	_strtok	;wreg free
 14100  0006D8  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14101  0006DC  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14102                           
 14103                           ;cmd_consol.c: 307: if (temp != (0)) {
 14104  0006E0  0100               	movlb	0	; () banked
 14105  0006E2  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14106  0006E4  0100               	movlb	0	; () banked
 14107  0006E6  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14108  0006E8  B4D8               	btfsc	status,2,c
 14109  0006EA  D2F4               	goto	l9117
 14110                           
 14111                           ; BSR set to: 0
 14112                           ;cmd_consol.c: 308: get_uid(temp, &cmd_data.uid);
 14113  0006EC  C066  F024         	movff	parse_cmd_str@temp,get_uid@str
 14114  0006F0  C067  F025         	movff	parse_cmd_str@temp+1,get_uid@str+1
 14115  0006F4  0E6E               	movlw	low _cmd_data
 14116  0006F6  6E26               	movwf	get_uid@data_uid,c
 14117  0006F8  0E01               	movlw	high _cmd_data
 14118  0006FA  6E27               	movwf	get_uid@data_uid+1,c
 14119  0006FC  EC8C  F01D         	call	_get_uid	;wreg free
 14120                           
 14121                           ;cmd_consol.c: 309: if (cmd_data.uid != 0) {
 14122  000700  0101               	movlb	1	; () banked
 14123  000702  516E               	movf	_cmd_data& (0+255),w,b
 14124  000704  0101               	movlb	1	; () banked
 14125  000706  116F               	iorwf	(_cmd_data+1)& (0+255),w,b
 14126  000708  B4D8               	btfsc	status,2,c
 14127  00070A  D0E3               	goto	l8967
 14128                           
 14129                           ; BSR set to: 1
 14130                           ;cmd_consol.c: 311: printf("uid = %d,\r\n", cmd_data.uid);
 14131  00070C  0E76               	movlw	low STR_58
 14132  00070E  6E2B               	movwf	printf@f,c
 14133  000710  0EFE               	movlw	high STR_58
 14134  000712  6E2C               	movwf	printf@f+1,c
 14135  000714  C16E  F02D         	movff	_cmd_data,?_printf+2
 14136  000718  C16F  F02E         	movff	_cmd_data+1,?_printf+3
 14137  00071C  EC12  F025         	call	_printf	;wreg free
 14138                           
 14139                           ;cmd_consol.c: 313: temp = strtok((0), "-', /=");
 14140  000720  0E00               	movlw	0
 14141  000722  6E1D               	movwf	strtok@s1,c
 14142  000724  0E00               	movlw	0
 14143  000726  6E1E               	movwf	strtok@s1+1,c
 14144  000728  0EA0               	movlw	low STR_35
 14145  00072A  6E1F               	movwf	strtok@s2,c
 14146  00072C  0EFF               	movlw	high STR_35
 14147  00072E  6E20               	movwf	strtok@s2+1,c
 14148  000730  EC2D  F01D         	call	_strtok	;wreg free
 14149  000734  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14150  000738  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14151                           
 14152                           ;cmd_consol.c: 314: if (temp != (0)) {
 14153  00073C  0100               	movlb	0	; () banked
 14154  00073E  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14155  000740  0100               	movlb	0	; () banked
 14156  000742  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14157  000744  B4D8               	btfsc	status,2,c
 14158  000746  D2C6               	goto	l9117
 14159                           
 14160                           ; BSR set to: 0
 14161                           ;cmd_consol.c: 315: collect_row(temp, &cmd_data.start_row);
 14162  000748  C066  F039         	movff	parse_cmd_str@temp,collect_row@str
 14163  00074C  C067  F03A         	movff	parse_cmd_str@temp+1,collect_row@str+1
 14164  000750  0E99               	movlw	low (_cmd_data+43)
 14165  000752  6E3B               	movwf	collect_row@data_row,c
 14166  000754  0E01               	movlw	high (_cmd_data+43)
 14167  000756  6E3C               	movwf	collect_row@data_row+1,c
 14168  000758  EC41  F01E         	call	_collect_row	;wreg free
 14169                           
 14170                           ;cmd_consol.c: 317: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 14171  00075C  0EEE               	movlw	low STR_60
 14172  00075E  6E2B               	movwf	printf@f,c
 14173  000760  0EFC               	movlw	high STR_60
 14174  000762  6E2C               	movwf	printf@f+1,c
 14175  000764  C199  F02D         	movff	_cmd_data+43,?_printf+2
 14176  000768  6A2E               	clrf	?_printf+3,c
 14177  00076A  EC12  F025         	call	_printf	;wreg free
 14178                           
 14179                           ;cmd_consol.c: 319: if (cmd_data.start_row != 255) {
 14180  00076E  0101               	movlb	1	; () banked
 14181  000770  2999               	incf	(_cmd_data+43)& (0+255),w,b
 14182  000772  B4D8               	btfsc	status,2,c
 14183  000774  D0AC               	goto	l8963
 14184                           
 14185                           ; BSR set to: 1
 14186                           ;cmd_consol.c: 320: temp = strtok((0), "-', /=");
 14187  000776  0E00               	movlw	0
 14188  000778  6E1D               	movwf	strtok@s1,c
 14189  00077A  0E00               	movlw	0
 14190  00077C  6E1E               	movwf	strtok@s1+1,c
 14191  00077E  0EA0               	movlw	low STR_35
 14192  000780  6E1F               	movwf	strtok@s2,c
 14193  000782  0EFF               	movlw	high STR_35
 14194  000784  6E20               	movwf	strtok@s2+1,c
 14195  000786  EC2D  F01D         	call	_strtok	;wreg free
 14196  00078A  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14197  00078E  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14198                           
 14199                           ;cmd_consol.c: 321: if (temp != (0)) {
 14200  000792  0100               	movlb	0	; () banked
 14201  000794  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14202  000796  0100               	movlb	0	; () banked
 14203  000798  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14204  00079A  B4D8               	btfsc	status,2,c
 14205  00079C  D29B               	goto	l9117
 14206                           
 14207                           ; BSR set to: 0
 14208                           ;cmd_consol.c: 322: collect_column(temp, &cmd_data.start_col);
 14209  00079E  C066  F039         	movff	parse_cmd_str@temp,collect_column@str
 14210  0007A2  C067  F03A         	movff	parse_cmd_str@temp+1,collect_column@str+1
 14211  0007A6  0E9A               	movlw	low (_cmd_data+44)
 14212  0007A8  6E3B               	movwf	collect_column@data_column,c
 14213  0007AA  0E01               	movlw	high (_cmd_data+44)
 14214  0007AC  6E3C               	movwf	collect_column@data_column+1,c
 14215  0007AE  EC98  F01E         	call	_collect_column	;wreg free
 14216                           
 14217                           ;cmd_consol.c: 324: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 14218  0007B2  0ED3               	movlw	low STR_62
 14219  0007B4  6E2B               	movwf	printf@f,c
 14220  0007B6  0EFC               	movlw	high STR_62
 14221  0007B8  6E2C               	movwf	printf@f+1,c
 14222  0007BA  C19A  F02D         	movff	_cmd_data+44,?_printf+2
 14223  0007BE  6A2E               	clrf	?_printf+3,c
 14224  0007C0  EC12  F025         	call	_printf	;wreg free
 14225                           
 14226                           ;cmd_consol.c: 326: if (cmd_data.start_row != 255) {
 14227  0007C4  0101               	movlb	1	; () banked
 14228  0007C6  2999               	incf	(_cmd_data+43)& (0+255),w,b
 14229  0007C8  B4D8               	btfsc	status,2,c
 14230  0007CA  D07F               	goto	l8959
 14231                           
 14232                           ; BSR set to: 1
 14233                           ;cmd_consol.c: 327: temp = strtok((0), "-', /=");
 14234  0007CC  0E00               	movlw	0
 14235  0007CE  6E1D               	movwf	strtok@s1,c
 14236  0007D0  0E00               	movlw	0
 14237  0007D2  6E1E               	movwf	strtok@s1+1,c
 14238  0007D4  0EA0               	movlw	low STR_35
 14239  0007D6  6E1F               	movwf	strtok@s2,c
 14240  0007D8  0EFF               	movlw	high STR_35
 14241  0007DA  6E20               	movwf	strtok@s2+1,c
 14242  0007DC  EC2D  F01D         	call	_strtok	;wreg free
 14243  0007E0  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14244  0007E4  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14245                           
 14246                           ;cmd_consol.c: 328: if (temp != (0)) {
 14247  0007E8  0100               	movlb	0	; () banked
 14248  0007EA  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14249  0007EC  0100               	movlb	0	; () banked
 14250  0007EE  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14251  0007F0  B4D8               	btfsc	status,2,c
 14252  0007F2  D270               	goto	l9117
 14253                           
 14254                           ; BSR set to: 0
 14255                           ;cmd_consol.c: 329: collect_row(temp, &cmd_data.end_row);
 14256  0007F4  C066  F039         	movff	parse_cmd_str@temp,collect_row@str
 14257  0007F8  C067  F03A         	movff	parse_cmd_str@temp+1,collect_row@str+1
 14258  0007FC  0E9B               	movlw	low (_cmd_data+45)
 14259  0007FE  6E3B               	movwf	collect_row@data_row,c
 14260  000800  0E01               	movlw	high (_cmd_data+45)
 14261  000802  6E3C               	movwf	collect_row@data_row+1,c
 14262  000804  EC41  F01E         	call	_collect_row	;wreg free
 14263                           
 14264                           ;cmd_consol.c: 331: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 14265  000808  0E70               	movlw	low STR_64
 14266  00080A  6E2B               	movwf	printf@f,c
 14267  00080C  0EFD               	movlw	high STR_64
 14268  00080E  6E2C               	movwf	printf@f+1,c
 14269  000810  C19B  F02D         	movff	_cmd_data+45,?_printf+2
 14270  000814  6A2E               	clrf	?_printf+3,c
 14271  000816  EC12  F025         	call	_printf	;wreg free
 14272                           
 14273                           ;cmd_consol.c: 333: if (cmd_data.end_row != 255) {
 14274  00081A  0101               	movlb	1	; () banked
 14275  00081C  299B               	incf	(_cmd_data+45)& (0+255),w,b
 14276  00081E  B4D8               	btfsc	status,2,c
 14277  000820  D052               	goto	l8955
 14278                           
 14279                           ; BSR set to: 1
 14280                           ;cmd_consol.c: 334: temp = strtok((0), "-', /=");
 14281  000822  0E00               	movlw	0
 14282  000824  6E1D               	movwf	strtok@s1,c
 14283  000826  0E00               	movlw	0
 14284  000828  6E1E               	movwf	strtok@s1+1,c
 14285  00082A  0EA0               	movlw	low STR_35
 14286  00082C  6E1F               	movwf	strtok@s2,c
 14287  00082E  0EFF               	movlw	high STR_35
 14288  000830  6E20               	movwf	strtok@s2+1,c
 14289  000832  EC2D  F01D         	call	_strtok	;wreg free
 14290  000836  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14291  00083A  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14292                           
 14293                           ;cmd_consol.c: 335: if (temp != (0)) {
 14294  00083E  0100               	movlb	0	; () banked
 14295  000840  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14296  000842  0100               	movlb	0	; () banked
 14297  000844  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14298  000846  B4D8               	btfsc	status,2,c
 14299  000848  D245               	goto	l9117
 14300                           
 14301                           ; BSR set to: 0
 14302                           ;cmd_consol.c: 337: printf("col = %s\r\n", temp);
 14303  00084A  0E04               	movlw	low STR_66
 14304  00084C  6E2B               	movwf	printf@f,c
 14305  00084E  0EFF               	movlw	high STR_66
 14306  000850  6E2C               	movwf	printf@f+1,c
 14307  000852  C066  F02D         	movff	parse_cmd_str@temp,?_printf+2
 14308  000856  C067  F02E         	movff	parse_cmd_str@temp+1,?_printf+3
 14309  00085A  EC12  F025         	call	_printf	;wreg free
 14310                           
 14311                           ;cmd_consol.c: 339: collect_column(temp, &cmd_data.end_col);
 14312  00085E  C066  F039         	movff	parse_cmd_str@temp,collect_column@str
 14313  000862  C067  F03A         	movff	parse_cmd_str@temp+1,collect_column@str+1
 14314  000866  0E9C               	movlw	low (_cmd_data+46)
 14315  000868  6E3B               	movwf	collect_column@data_column,c
 14316  00086A  0E01               	movlw	high (_cmd_data+46)
 14317  00086C  6E3C               	movwf	collect_column@data_column+1,c
 14318  00086E  EC98  F01E         	call	_collect_column	;wreg free
 14319                           
 14320                           ;cmd_consol.c: 341: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 14321  000872  0E57               	movlw	low STR_67
 14322  000874  6E2B               	movwf	printf@f,c
 14323  000876  0EFD               	movlw	high STR_67
 14324  000878  6E2C               	movwf	printf@f+1,c
 14325  00087A  C19C  F02D         	movff	_cmd_data+46,?_printf+2
 14326  00087E  6A2E               	clrf	?_printf+3,c
 14327  000880  EC12  F025         	call	_printf	;wreg free
 14328                           
 14329                           ;cmd_consol.c: 343: if (cmd_data.end_row != 255) {
 14330  000884  0101               	movlb	1	; () banked
 14331  000886  299B               	incf	(_cmd_data+45)& (0+255),w,b
 14332  000888  B4D8               	btfsc	status,2,c
 14333  00088A  D01B               	goto	l8951
 14334                           
 14335                           ; BSR set to: 1
 14336                           ;cmd_consol.c: 344: cmd_data.row_col_set = 1;
 14337  00088C  0E01               	movlw	1
 14338  00088E  0101               	movlb	1	; () banked
 14339  000890  6F9D               	movwf	(_cmd_data+47)& (0+255),b
 14340                           
 14341                           ;cmd_consol.c: 345: valid_cmd = 1;
 14342  000892  0E01               	movlw	1
 14343  000894  0100               	movlb	0	; () banked
 14344  000896  6F75               	movwf	_valid_cmd& (0+255),b
 14345                           
 14346                           ; BSR set to: 0
 14347                           ;cmd_consol.c: 346: memset(str, 0, strlen(str));
 14348  000898  C060  F024         	movff	parse_cmd_str@str,memset@p1
 14349  00089C  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 14350  0008A0  0E00               	movlw	0
 14351  0008A2  6E27               	movwf	memset@c+1,c
 14352  0008A4  0E00               	movlw	0
 14353  0008A6  6E26               	movwf	memset@c,c
 14354  0008A8  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 14355  0008AC  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 14356  0008B0  ECC2  F022         	call	_strlen	;wreg free
 14357  0008B4  C01E  F028         	movff	?_strlen,memset@n
 14358  0008B8  C01F  F029         	movff	?_strlen+1,memset@n+1
 14359  0008BC  ECD8  F025         	call	_memset	;wreg free
 14360  0008C0  D44D               	goto	l8697
 14361  0008C2                     l8951:
 14362                           
 14363                           ;cmd_consol.c: 349: return 3;
 14364  0008C2  0E03               	movlw	3
 14365  0008C4  0012               	return	
 14366  0008C6                     l8955:
 14367                           
 14368                           ;cmd_consol.c: 353: return 3;
 14369  0008C6  0E03               	movlw	3
 14370  0008C8  0012               	return	
 14371  0008CA                     l8959:
 14372                           
 14373                           ;cmd_consol.c: 357: return 3;
 14374  0008CA  0E03               	movlw	3
 14375  0008CC  0012               	return	
 14376  0008CE                     l8963:
 14377                           
 14378                           ;cmd_consol.c: 361: return 3;
 14379  0008CE  0E03               	movlw	3
 14380  0008D0  0012               	return	
 14381  0008D2                     l8967:
 14382                           
 14383                           ;cmd_consol.c: 365: return 8;
 14384  0008D2  0E08               	movlw	8
 14385  0008D4  0012               	return	
 14386  0008D6                     l8971:
 14387                           
 14388                           ;cmd_consol.c: 370: return 9;
 14389  0008D6  0E09               	movlw	9
 14390  0008D8  0012               	return	
 14391  0008DA                     l8975:
 14392  0008DA  C066  F010         	movff	parse_cmd_str@temp,strcmp@s1
 14393  0008DE  C067  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 14394  0008E2  0EAE               	movlw	low STR_68
 14395  0008E4  6E12               	movwf	strcmp@s2,c
 14396  0008E6  0EFF               	movlw	high STR_68
 14397  0008E8  6E13               	movwf	strcmp@s2+1,c
 14398  0008EA  EC8A  F023         	call	_strcmp	;wreg free
 14399  0008EE  5010               	movf	?_strcmp,w,c
 14400  0008F0  1011               	iorwf	?_strcmp+1,w,c
 14401  0008F2  A4D8               	btfss	status,2,c
 14402  0008F4  D01F               	goto	l8989
 14403                           
 14404                           ;cmd_consol.c: 373: strcpy(CMD, temp);
 14405  0008F6  0ECB               	movlw	low _CMD
 14406  0008F8  6E24               	movwf	strcpy@to,c
 14407  0008FA  0E01               	movlw	high _CMD
 14408  0008FC  6E25               	movwf	strcpy@to+1,c
 14409  0008FE  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 14410  000902  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 14411  000906  ECAB  F025         	call	_strcpy	;wreg free
 14412                           
 14413                           ;cmd_consol.c: 374: memset(str, 0, strlen(str));
 14414  00090A  C060  F024         	movff	parse_cmd_str@str,memset@p1
 14415  00090E  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 14416  000912  0E00               	movlw	0
 14417  000914  6E27               	movwf	memset@c+1,c
 14418  000916  0E00               	movlw	0
 14419  000918  6E26               	movwf	memset@c,c
 14420  00091A  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 14421  00091E  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 14422  000922  ECC2  F022         	call	_strlen	;wreg free
 14423  000926  C01E  F028         	movff	?_strlen,memset@n
 14424  00092A  C01F  F029         	movff	?_strlen+1,memset@n+1
 14425  00092E  ECD8  F025         	call	_memset	;wreg free
 14426  000932  D1CB               	goto	l9111
 14427  000934                     l8989:
 14428  000934  C066  F010         	movff	parse_cmd_str@temp,strcmp@s1
 14429  000938  C067  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 14430  00093C  0ED2               	movlw	low STR_69
 14431  00093E  6E12               	movwf	strcmp@s2,c
 14432  000940  0EFF               	movlw	high STR_69
 14433  000942  6E13               	movwf	strcmp@s2+1,c
 14434  000944  EC8A  F023         	call	_strcmp	;wreg free
 14435  000948  5010               	movf	?_strcmp,w,c
 14436  00094A  1011               	iorwf	?_strcmp+1,w,c
 14437  00094C  A4D8               	btfss	status,2,c
 14438  00094E  D191               	goto	l9105
 14439                           
 14440                           ;cmd_consol.c: 378: if (clcd_config_data.init_done == 1) {
 14441  000950  0449               	decf	_clcd_config_data,w,c
 14442  000952  A4D8               	btfss	status,2,c
 14443  000954  D18C               	goto	l9101
 14444                           
 14445                           ;cmd_consol.c: 379: clear_cmd_data();
 14446  000956  EC62  F025         	call	_clear_cmd_data	;wreg free
 14447                           
 14448                           ;cmd_consol.c: 381: if (temp != (0)) {
 14449  00095A  0100               	movlb	0	; () banked
 14450  00095C  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14451  00095E  0100               	movlb	0	; () banked
 14452  000960  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14453  000962  B4D8               	btfsc	status,2,c
 14454  000964  D1B7               	goto	l9117
 14455                           
 14456                           ; BSR set to: 0
 14457                           ;cmd_consol.c: 382: strcpy(CMD, temp);
 14458  000966  0ECB               	movlw	low _CMD
 14459  000968  6E24               	movwf	strcpy@to,c
 14460  00096A  0E01               	movlw	high _CMD
 14461  00096C  6E25               	movwf	strcpy@to+1,c
 14462  00096E  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 14463  000972  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 14464  000976  ECAB  F025         	call	_strcpy	;wreg free
 14465                           
 14466                           ;cmd_consol.c: 384: printf("CMD=%s\r\n", CMD);
 14467  00097A  0E4F               	movlw	low STR_70
 14468  00097C  6E2B               	movwf	printf@f,c
 14469  00097E  0EFF               	movlw	high STR_70
 14470  000980  6E2C               	movwf	printf@f+1,c
 14471  000982  0ECB               	movlw	low _CMD
 14472  000984  6E2D               	movwf	?_printf+2,c
 14473  000986  0E01               	movlw	high _CMD
 14474  000988  6E2E               	movwf	?_printf+3,c
 14475  00098A  EC12  F025         	call	_printf	;wreg free
 14476                           
 14477                           ;cmd_consol.c: 386: temp = strtok((0), ",");
 14478  00098E  0E00               	movlw	0
 14479  000990  6E1D               	movwf	strtok@s1,c
 14480  000992  0E00               	movlw	0
 14481  000994  6E1E               	movwf	strtok@s1+1,c
 14482  000996  0EFD               	movlw	low STR_71
 14483  000998  6E1F               	movwf	strtok@s2,c
 14484  00099A  0EFF               	movlw	high STR_71
 14485  00099C  6E20               	movwf	strtok@s2+1,c
 14486  00099E  EC2D  F01D         	call	_strtok	;wreg free
 14487  0009A2  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14488  0009A6  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14489                           
 14490                           ;cmd_consol.c: 387: if (temp != (0)) {
 14491  0009AA  0100               	movlb	0	; () banked
 14492  0009AC  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14493  0009AE  0100               	movlb	0	; () banked
 14494  0009B0  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14495  0009B2  B4D8               	btfsc	status,2,c
 14496  0009B4  D18F               	goto	l9117
 14497                           
 14498                           ; BSR set to: 0
 14499                           ;cmd_consol.c: 388: if (get_str(temp, cmd_data.data) == 1) {
 14500  0009B6  C066  F02C         	movff	parse_cmd_str@temp,get_str@str
 14501  0009BA  C067  F02D         	movff	parse_cmd_str@temp+1,get_str@str+1
 14502  0009BE  0E70               	movlw	low (_cmd_data+2)
 14503  0009C0  6E2E               	movwf	get_str@data_str,c
 14504  0009C2  0E01               	movlw	high (_cmd_data+2)
 14505  0009C4  6E2F               	movwf	get_str@data_str+1,c
 14506  0009C6  ECDB  F021         	call	_get_str	;wreg free
 14507  0009CA  06E8               	decf	wreg,f,c
 14508  0009CC  A4D8               	btfss	status,2,c
 14509  0009CE  D14D               	goto	l9097
 14510                           
 14511                           ;cmd_consol.c: 390: printf("data=%s\r\n", cmd_data.data);
 14512  0009D0  0E0F               	movlw	low STR_72
 14513  0009D2  6E2B               	movwf	printf@f,c
 14514  0009D4  0EFF               	movlw	high STR_72
 14515  0009D6  6E2C               	movwf	printf@f+1,c
 14516  0009D8  0E70               	movlw	low (_cmd_data+2)
 14517  0009DA  6E2D               	movwf	?_printf+2,c
 14518  0009DC  0E01               	movlw	high (_cmd_data+2)
 14519  0009DE  6E2E               	movwf	?_printf+3,c
 14520  0009E0  EC12  F025         	call	_printf	;wreg free
 14521                           
 14522                           ;cmd_consol.c: 392: temp = strtok((0), "-', /=");
 14523  0009E4  0E00               	movlw	0
 14524  0009E6  6E1D               	movwf	strtok@s1,c
 14525  0009E8  0E00               	movlw	0
 14526  0009EA  6E1E               	movwf	strtok@s1+1,c
 14527  0009EC  0EA0               	movlw	low STR_35
 14528  0009EE  6E1F               	movwf	strtok@s2,c
 14529  0009F0  0EFF               	movlw	high STR_35
 14530  0009F2  6E20               	movwf	strtok@s2+1,c
 14531  0009F4  EC2D  F01D         	call	_strtok	;wreg free
 14532  0009F8  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14533  0009FC  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14534                           
 14535                           ;cmd_consol.c: 393: if (temp != (0)) {
 14536  000A00  0100               	movlb	0	; () banked
 14537  000A02  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14538  000A04  0100               	movlb	0	; () banked
 14539  000A06  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14540  000A08  B4D8               	btfsc	status,2,c
 14541  000A0A  D164               	goto	l9117
 14542                           
 14543                           ; BSR set to: 0
 14544                           ;cmd_consol.c: 394: collect_row(temp, &cmd_data.start_row);
 14545  000A0C  C066  F039         	movff	parse_cmd_str@temp,collect_row@str
 14546  000A10  C067  F03A         	movff	parse_cmd_str@temp+1,collect_row@str+1
 14547  000A14  0E99               	movlw	low (_cmd_data+43)
 14548  000A16  6E3B               	movwf	collect_row@data_row,c
 14549  000A18  0E01               	movlw	high (_cmd_data+43)
 14550  000A1A  6E3C               	movwf	collect_row@data_row+1,c
 14551  000A1C  EC41  F01E         	call	_collect_row	;wreg free
 14552                           
 14553                           ;cmd_consol.c: 396: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 14554  000A20  0EEE               	movlw	low STR_60
 14555  000A22  6E2B               	movwf	printf@f,c
 14556  000A24  0EFC               	movlw	high STR_60
 14557  000A26  6E2C               	movwf	printf@f+1,c
 14558  000A28  C199  F02D         	movff	_cmd_data+43,?_printf+2
 14559  000A2C  6A2E               	clrf	?_printf+3,c
 14560  000A2E  EC12  F025         	call	_printf	;wreg free
 14561                           
 14562                           ;cmd_consol.c: 398: if (cmd_data.start_row != 255) {
 14563  000A32  0101               	movlb	1	; () banked
 14564  000A34  2999               	incf	(_cmd_data+43)& (0+255),w,b
 14565  000A36  B4D8               	btfsc	status,2,c
 14566  000A38  D116               	goto	l9093
 14567                           
 14568                           ; BSR set to: 1
 14569                           ;cmd_consol.c: 399: temp = strtok((0), "-', /=");
 14570  000A3A  0E00               	movlw	0
 14571  000A3C  6E1D               	movwf	strtok@s1,c
 14572  000A3E  0E00               	movlw	0
 14573  000A40  6E1E               	movwf	strtok@s1+1,c
 14574  000A42  0EA0               	movlw	low STR_35
 14575  000A44  6E1F               	movwf	strtok@s2,c
 14576  000A46  0EFF               	movlw	high STR_35
 14577  000A48  6E20               	movwf	strtok@s2+1,c
 14578  000A4A  EC2D  F01D         	call	_strtok	;wreg free
 14579  000A4E  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14580  000A52  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14581                           
 14582                           ;cmd_consol.c: 400: if (temp != (0)) {
 14583  000A56  0100               	movlb	0	; () banked
 14584  000A58  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14585  000A5A  0100               	movlb	0	; () banked
 14586  000A5C  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14587  000A5E  B4D8               	btfsc	status,2,c
 14588  000A60  D139               	goto	l9117
 14589                           
 14590                           ; BSR set to: 0
 14591                           ;cmd_consol.c: 401: collect_column(temp, &cmd_data.start_col);
 14592  000A62  C066  F039         	movff	parse_cmd_str@temp,collect_column@str
 14593  000A66  C067  F03A         	movff	parse_cmd_str@temp+1,collect_column@str+1
 14594  000A6A  0E9A               	movlw	low (_cmd_data+44)
 14595  000A6C  6E3B               	movwf	collect_column@data_column,c
 14596  000A6E  0E01               	movlw	high (_cmd_data+44)
 14597  000A70  6E3C               	movwf	collect_column@data_column+1,c
 14598  000A72  EC98  F01E         	call	_collect_column	;wreg free
 14599                           
 14600                           ;cmd_consol.c: 403: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 14601  000A76  0ED3               	movlw	low STR_62
 14602  000A78  6E2B               	movwf	printf@f,c
 14603  000A7A  0EFC               	movlw	high STR_62
 14604  000A7C  6E2C               	movwf	printf@f+1,c
 14605  000A7E  C19A  F02D         	movff	_cmd_data+44,?_printf+2
 14606  000A82  6A2E               	clrf	?_printf+3,c
 14607  000A84  EC12  F025         	call	_printf	;wreg free
 14608                           
 14609                           ;cmd_consol.c: 405: if (cmd_data.start_row != 255) {
 14610  000A88  0101               	movlb	1	; () banked
 14611  000A8A  2999               	incf	(_cmd_data+43)& (0+255),w,b
 14612  000A8C  B4D8               	btfsc	status,2,c
 14613  000A8E  D0E9               	goto	l9089
 14614                           
 14615                           ; BSR set to: 1
 14616                           ;cmd_consol.c: 406: temp = strtok((0), "-', /=");
 14617  000A90  0E00               	movlw	0
 14618  000A92  6E1D               	movwf	strtok@s1,c
 14619  000A94  0E00               	movlw	0
 14620  000A96  6E1E               	movwf	strtok@s1+1,c
 14621  000A98  0EA0               	movlw	low STR_35
 14622  000A9A  6E1F               	movwf	strtok@s2,c
 14623  000A9C  0EFF               	movlw	high STR_35
 14624  000A9E  6E20               	movwf	strtok@s2+1,c
 14625  000AA0  EC2D  F01D         	call	_strtok	;wreg free
 14626  000AA4  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14627  000AA8  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14628                           
 14629                           ;cmd_consol.c: 407: if (temp != (0)) {
 14630  000AAC  0100               	movlb	0	; () banked
 14631  000AAE  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14632  000AB0  0100               	movlb	0	; () banked
 14633  000AB2  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14634  000AB4  B4D8               	btfsc	status,2,c
 14635  000AB6  D10E               	goto	l9117
 14636                           
 14637                           ; BSR set to: 0
 14638                           ;cmd_consol.c: 408: collect_row(temp, &cmd_data.end_row);
 14639  000AB8  C066  F039         	movff	parse_cmd_str@temp,collect_row@str
 14640  000ABC  C067  F03A         	movff	parse_cmd_str@temp+1,collect_row@str+1
 14641  000AC0  0E9B               	movlw	low (_cmd_data+45)
 14642  000AC2  6E3B               	movwf	collect_row@data_row,c
 14643  000AC4  0E01               	movlw	high (_cmd_data+45)
 14644  000AC6  6E3C               	movwf	collect_row@data_row+1,c
 14645  000AC8  EC41  F01E         	call	_collect_row	;wreg free
 14646                           
 14647                           ;cmd_consol.c: 410: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 14648  000ACC  0E70               	movlw	low STR_64
 14649  000ACE  6E2B               	movwf	printf@f,c
 14650  000AD0  0EFD               	movlw	high STR_64
 14651  000AD2  6E2C               	movwf	printf@f+1,c
 14652  000AD4  C19B  F02D         	movff	_cmd_data+45,?_printf+2
 14653  000AD8  6A2E               	clrf	?_printf+3,c
 14654  000ADA  EC12  F025         	call	_printf	;wreg free
 14655                           
 14656                           ;cmd_consol.c: 412: if (cmd_data.end_row != 255) {
 14657  000ADE  0101               	movlb	1	; () banked
 14658  000AE0  299B               	incf	(_cmd_data+45)& (0+255),w,b
 14659  000AE2  B4D8               	btfsc	status,2,c
 14660  000AE4  D0BC               	goto	l9085
 14661                           
 14662                           ; BSR set to: 1
 14663                           ;cmd_consol.c: 413: temp = strtok((0), "-', /=");
 14664  000AE6  0E00               	movlw	0
 14665  000AE8  6E1D               	movwf	strtok@s1,c
 14666  000AEA  0E00               	movlw	0
 14667  000AEC  6E1E               	movwf	strtok@s1+1,c
 14668  000AEE  0EA0               	movlw	low STR_35
 14669  000AF0  6E1F               	movwf	strtok@s2,c
 14670  000AF2  0EFF               	movlw	high STR_35
 14671  000AF4  6E20               	movwf	strtok@s2+1,c
 14672  000AF6  EC2D  F01D         	call	_strtok	;wreg free
 14673  000AFA  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14674  000AFE  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14675                           
 14676                           ;cmd_consol.c: 414: if (temp != (0)) {
 14677  000B02  0100               	movlb	0	; () banked
 14678  000B04  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14679  000B06  0100               	movlb	0	; () banked
 14680  000B08  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14681  000B0A  B4D8               	btfsc	status,2,c
 14682  000B0C  D0E3               	goto	l9117
 14683                           
 14684                           ; BSR set to: 0
 14685                           ;cmd_consol.c: 416: printf("col = %s\r\n", temp);
 14686  000B0E  0E04               	movlw	low STR_66
 14687  000B10  6E2B               	movwf	printf@f,c
 14688  000B12  0EFF               	movlw	high STR_66
 14689  000B14  6E2C               	movwf	printf@f+1,c
 14690  000B16  C066  F02D         	movff	parse_cmd_str@temp,?_printf+2
 14691  000B1A  C067  F02E         	movff	parse_cmd_str@temp+1,?_printf+3
 14692  000B1E  EC12  F025         	call	_printf	;wreg free
 14693                           
 14694                           ;cmd_consol.c: 418: collect_column(temp, &cmd_data.end_col);
 14695  000B22  C066  F039         	movff	parse_cmd_str@temp,collect_column@str
 14696  000B26  C067  F03A         	movff	parse_cmd_str@temp+1,collect_column@str+1
 14697  000B2A  0E9C               	movlw	low (_cmd_data+46)
 14698  000B2C  6E3B               	movwf	collect_column@data_column,c
 14699  000B2E  0E01               	movlw	high (_cmd_data+46)
 14700  000B30  6E3C               	movwf	collect_column@data_column+1,c
 14701  000B32  EC98  F01E         	call	_collect_column	;wreg free
 14702                           
 14703                           ;cmd_consol.c: 420: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 14704  000B36  0E57               	movlw	low STR_67
 14705  000B38  6E2B               	movwf	printf@f,c
 14706  000B3A  0EFD               	movlw	high STR_67
 14707  000B3C  6E2C               	movwf	printf@f+1,c
 14708  000B3E  C19C  F02D         	movff	_cmd_data+46,?_printf+2
 14709  000B42  6A2E               	clrf	?_printf+3,c
 14710  000B44  EC12  F025         	call	_printf	;wreg free
 14711                           
 14712                           ;cmd_consol.c: 422: if (cmd_data.end_col != 255) {
 14713  000B48  0101               	movlb	1	; () banked
 14714  000B4A  299C               	incf	(_cmd_data+46)& (0+255),w,b
 14715  000B4C  B4D8               	btfsc	status,2,c
 14716  000B4E  D085               	goto	l9081
 14717                           
 14718                           ; BSR set to: 1
 14719                           ;cmd_consol.c: 423: temp = strtok((0), "-', /=");
 14720  000B50  0E00               	movlw	0
 14721  000B52  6E1D               	movwf	strtok@s1,c
 14722  000B54  0E00               	movlw	0
 14723  000B56  6E1E               	movwf	strtok@s1+1,c
 14724  000B58  0EA0               	movlw	low STR_35
 14725  000B5A  6E1F               	movwf	strtok@s2,c
 14726  000B5C  0EFF               	movlw	high STR_35
 14727  000B5E  6E20               	movwf	strtok@s2+1,c
 14728  000B60  EC2D  F01D         	call	_strtok	;wreg free
 14729  000B64  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14730  000B68  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14731                           
 14732                           ;cmd_consol.c: 424: if (temp != (0)) {
 14733  000B6C  0100               	movlb	0	; () banked
 14734  000B6E  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14735  000B70  0100               	movlb	0	; () banked
 14736  000B72  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14737  000B74  B4D8               	btfsc	status,2,c
 14738  000B76  D0AE               	goto	l9117
 14739                           
 14740                           ; BSR set to: 0
 14741                           ;cmd_consol.c: 425: if (get_direction(temp, &cmd_data.scroll) == 1) {
 14742  000B78  C066  F039         	movff	parse_cmd_str@temp,get_direction@str
 14743  000B7C  C067  F03A         	movff	parse_cmd_str@temp+1,get_direction@str+1
 14744  000B80  0E9E               	movlw	low (_cmd_data+48)
 14745  000B82  6E3B               	movwf	get_direction@data_direction,c
 14746  000B84  0E01               	movlw	high (_cmd_data+48)
 14747  000B86  6E3C               	movwf	get_direction@data_direction+1,c
 14748  000B88  ECEF  F01E         	call	_get_direction	;wreg free
 14749  000B8C  06E8               	decf	wreg,f,c
 14750  000B8E  A4D8               	btfss	status,2,c
 14751  000B90  D062               	goto	l9077
 14752                           
 14753                           ;cmd_consol.c: 426: temp = strtok((0), "-', /=");
 14754  000B92  0E00               	movlw	0
 14755  000B94  6E1D               	movwf	strtok@s1,c
 14756  000B96  0E00               	movlw	0
 14757  000B98  6E1E               	movwf	strtok@s1+1,c
 14758  000B9A  0EA0               	movlw	low STR_35
 14759  000B9C  6E1F               	movwf	strtok@s2,c
 14760  000B9E  0EFF               	movlw	high STR_35
 14761  000BA0  6E20               	movwf	strtok@s2+1,c
 14762  000BA2  EC2D  F01D         	call	_strtok	;wreg free
 14763  000BA6  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14764  000BAA  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14765                           
 14766                           ;cmd_consol.c: 427: if (temp != (0)) {
 14767  000BAE  0100               	movlb	0	; () banked
 14768  000BB0  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14769  000BB2  0100               	movlb	0	; () banked
 14770  000BB4  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14771  000BB6  B4D8               	btfsc	status,2,c
 14772  000BB8  D08D               	goto	l9117
 14773                           
 14774                           ; BSR set to: 0
 14775                           ;cmd_consol.c: 428: if (get_dis_frq(temp, &cmd_data.dis_frq) == 1) {
 14776  000BBA  C066  F039         	movff	parse_cmd_str@temp,get_dis_frq@str
 14777  000BBE  C067  F03A         	movff	parse_cmd_str@temp+1,get_dis_frq@str+1
 14778  000BC2  0EA0               	movlw	low (_cmd_data+50)
 14779  000BC4  6E3B               	movwf	get_dis_frq@data_frq,c
 14780  000BC6  0E01               	movlw	high (_cmd_data+50)
 14781  000BC8  6E3C               	movwf	get_dis_frq@data_frq+1,c
 14782  000BCA  ECDD  F01F         	call	_get_dis_frq	;wreg free
 14783  000BCE  06E8               	decf	wreg,f,c
 14784  000BD0  A4D8               	btfss	status,2,c
 14785  000BD2  D03F               	goto	l9073
 14786                           
 14787                           ;cmd_consol.c: 429: temp = strtok((0), "-', /=");
 14788  000BD4  0E00               	movlw	0
 14789  000BD6  6E1D               	movwf	strtok@s1,c
 14790  000BD8  0E00               	movlw	0
 14791  000BDA  6E1E               	movwf	strtok@s1+1,c
 14792  000BDC  0EA0               	movlw	low STR_35
 14793  000BDE  6E1F               	movwf	strtok@s2,c
 14794  000BE0  0EFF               	movlw	high STR_35
 14795  000BE2  6E20               	movwf	strtok@s2+1,c
 14796  000BE4  EC2D  F01D         	call	_strtok	;wreg free
 14797  000BE8  C01D  F066         	movff	?_strtok,parse_cmd_str@temp
 14798  000BEC  C01E  F067         	movff	?_strtok+1,parse_cmd_str@temp+1
 14799                           
 14800                           ;cmd_consol.c: 430: if (temp != (0)) {
 14801  000BF0  0100               	movlb	0	; () banked
 14802  000BF2  5166               	movf	parse_cmd_str@temp& (0+255),w,b
 14803  000BF4  0100               	movlb	0	; () banked
 14804  000BF6  1167               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 14805  000BF8  B4D8               	btfsc	status,2,c
 14806  000BFA  D06C               	goto	l9117
 14807                           
 14808                           ; BSR set to: 0
 14809                           ;cmd_consol.c: 431: if (get_over_write_data(temp, &cmd_data.over_write) == 1) {
 14810  000BFC  C066  F039         	movff	parse_cmd_str@temp,get_over_write_data@str
 14811  000C00  C067  F03A         	movff	parse_cmd_str@temp+1,get_over_write_data@str+1
 14812  000C04  0EA2               	movlw	low (_cmd_data+52)
 14813  000C06  6E3B               	movwf	get_over_write_data@over_write_data,c
 14814  000C08  0E01               	movlw	high (_cmd_data+52)
 14815  000C0A  6E3C               	movwf	get_over_write_data@over_write_data+1,c
 14816  000C0C  EC91  F01F         	call	_get_over_write_data	;wreg free
 14817  000C10  06E8               	decf	wreg,f,c
 14818  000C12  A4D8               	btfss	status,2,c
 14819  000C14  D01C               	goto	l9069
 14820                           
 14821                           ;cmd_consol.c: 432: cmd_data.row_col_set = 1;
 14822  000C16  0E01               	movlw	1
 14823  000C18  0101               	movlb	1	; () banked
 14824  000C1A  6F9D               	movwf	(_cmd_data+47)& (0+255),b
 14825                           
 14826                           ;cmd_consol.c: 433: valid_cmd = 1;
 14827  000C1C  0E01               	movlw	1
 14828  000C1E  0100               	movlb	0	; () banked
 14829  000C20  6F75               	movwf	_valid_cmd& (0+255),b
 14830                           
 14831                           ; BSR set to: 0
 14832                           ;cmd_consol.c: 434: memset(str, 0, strlen(str));
 14833  000C22  C060  F024         	movff	parse_cmd_str@str,memset@p1
 14834  000C26  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 14835  000C2A  0E00               	movlw	0
 14836  000C2C  6E27               	movwf	memset@c+1,c
 14837  000C2E  0E00               	movlw	0
 14838  000C30  6E26               	movwf	memset@c,c
 14839  000C32  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 14840  000C36  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 14841  000C3A  ECC2  F022         	call	_strlen	;wreg free
 14842  000C3E  C01E  F028         	movff	?_strlen,memset@n
 14843  000C42  C01F  F029         	movff	?_strlen+1,memset@n+1
 14844  000C46  ECD8  F025         	call	_memset	;wreg free
 14845  000C4A  EFAE  F000         	goto	l8697
 14846  000C4E                     l9069:
 14847                           
 14848                           ;cmd_consol.c: 437: return 6;
 14849  000C4E  0E06               	movlw	6
 14850  000C50  0012               	return	
 14851  000C52                     l9073:
 14852                           
 14853                           ;cmd_consol.c: 441: return 5;
 14854  000C52  0E05               	movlw	5
 14855  000C54  0012               	return	
 14856  000C56                     l9077:
 14857                           
 14858                           ;cmd_consol.c: 445: return 4;
 14859  000C56  0E04               	movlw	4
 14860  000C58  0012               	return	
 14861  000C5A                     l9081:
 14862                           
 14863                           ;cmd_consol.c: 449: return 3;
 14864  000C5A  0E03               	movlw	3
 14865  000C5C  0012               	return	
 14866  000C5E                     l9085:
 14867                           
 14868                           ;cmd_consol.c: 453: return 3;
 14869  000C5E  0E03               	movlw	3
 14870  000C60  0012               	return	
 14871  000C62                     l9089:
 14872                           
 14873                           ;cmd_consol.c: 457: return 3;
 14874  000C62  0E03               	movlw	3
 14875  000C64  0012               	return	
 14876  000C66                     l9093:
 14877                           
 14878                           ;cmd_consol.c: 461: return 3;
 14879  000C66  0E03               	movlw	3
 14880  000C68  0012               	return	
 14881  000C6A                     l9097:
 14882                           
 14883                           ;cmd_consol.c: 465: return 2;
 14884  000C6A  0E02               	movlw	2
 14885  000C6C  0012               	return	
 14886  000C6E                     l9101:
 14887                           
 14888                           ;cmd_consol.c: 470: return 9;
 14889  000C6E  0E09               	movlw	9
 14890  000C70  0012               	return	
 14891  000C72                     l9105:
 14892  000C72  C066  F010         	movff	parse_cmd_str@temp,strcmp@s1
 14893  000C76  C067  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 14894  000C7A  0EF3               	movlw	low STR_85
 14895  000C7C  6E12               	movwf	strcmp@s2,c
 14896  000C7E  0EFF               	movlw	high STR_85
 14897  000C80  6E13               	movwf	strcmp@s2+1,c
 14898  000C82  EC8A  F023         	call	_strcmp	;wreg free
 14899  000C86  5010               	movf	?_strcmp,w,c
 14900  000C88  1011               	iorwf	?_strcmp+1,w,c
 14901  000C8A  A4D8               	btfss	status,2,c
 14902  000C8C  D023               	goto	l9117
 14903                           
 14904                           ;cmd_consol.c: 473: strcpy(CMD, temp);
 14905  000C8E  0ECB               	movlw	low _CMD
 14906  000C90  6E24               	movwf	strcpy@to,c
 14907  000C92  0E01               	movlw	high _CMD
 14908  000C94  6E25               	movwf	strcpy@to+1,c
 14909  000C96  C066  F026         	movff	parse_cmd_str@temp,strcpy@from
 14910  000C9A  C067  F027         	movff	parse_cmd_str@temp+1,strcpy@from+1
 14911  000C9E  ECAB  F025         	call	_strcpy	;wreg free
 14912                           
 14913                           ;cmd_consol.c: 474: memset(str, 0, strlen(str));
 14914  000CA2  C060  F024         	movff	parse_cmd_str@str,memset@p1
 14915  000CA6  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 14916  000CAA  0E00               	movlw	0
 14917  000CAC  6E27               	movwf	memset@c+1,c
 14918  000CAE  0E00               	movlw	0
 14919  000CB0  6E26               	movwf	memset@c,c
 14920  000CB2  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 14921  000CB6  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 14922  000CBA  ECC2  F022         	call	_strlen	;wreg free
 14923  000CBE  C01E  F028         	movff	?_strlen,memset@n
 14924  000CC2  C01F  F029         	movff	?_strlen+1,memset@n+1
 14925  000CC6  ECD8  F025         	call	_memset	;wreg free
 14926  000CCA                     l9111:
 14927                           
 14928                           ;cmd_consol.c: 475: valid_cmd = 1;
 14929  000CCA  0E01               	movlw	1
 14930  000CCC  0100               	movlb	0	; () banked
 14931  000CCE  6F75               	movwf	_valid_cmd& (0+255),b
 14932  000CD0  EFAE  F000         	goto	l8697
 14933  000CD4                     l9117:
 14934                           
 14935                           ;cmd_consol.c: 477: }
 14936                           ;cmd_consol.c: 478: memset(str, 0, strlen(str));
 14937  000CD4  C060  F024         	movff	parse_cmd_str@str,memset@p1
 14938  000CD8  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 14939  000CDC  0E00               	movlw	0
 14940  000CDE  6E27               	movwf	memset@c+1,c
 14941  000CE0  0E00               	movlw	0
 14942  000CE2  6E26               	movwf	memset@c,c
 14943  000CE4  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 14944  000CE8  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 14945  000CEC  ECC2  F022         	call	_strlen	;wreg free
 14946  000CF0  C01E  F028         	movff	?_strlen,memset@n
 14947  000CF4  C01F  F029         	movff	?_strlen+1,memset@n+1
 14948  000CF8  ECD8  F025         	call	_memset	;wreg free
 14949                           
 14950                           ;cmd_consol.c: 479: return 1;
 14951  000CFC  0E01               	movlw	1
 14952  000CFE  0012               	return	
 14953  000D00                     l9123:
 14954                           
 14955                           ;cmd_consol.c: 480: }
 14956                           ;cmd_consol.c: 481: memset(str, 0, strlen(str));
 14957  000D00  C060  F024         	movff	parse_cmd_str@str,memset@p1
 14958  000D04  C061  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 14959  000D08  0E00               	movlw	0
 14960  000D0A  6E27               	movwf	memset@c+1,c
 14961  000D0C  0E00               	movlw	0
 14962  000D0E  6E26               	movwf	memset@c,c
 14963  000D10  C060  F01E         	movff	parse_cmd_str@str,strlen@s
 14964  000D14  C061  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 14965  000D18  ECC2  F022         	call	_strlen	;wreg free
 14966  000D1C  C01E  F028         	movff	?_strlen,memset@n
 14967  000D20  C01F  F029         	movff	?_strlen+1,memset@n+1
 14968  000D24  ECD8  F025         	call	_memset	;wreg free
 14969                           
 14970                           ;cmd_consol.c: 482: return 1;
 14971  000D28  0E01               	movlw	1
 14972  000D2A  0012               	return	
 14973  000D2C                     __end_of_parse_cmd_str:
 14974                           	opt stack 0
 14975                           tblptru	equ	0xFF8
 14976                           tblptrh	equ	0xFF7
 14977                           tblptrl	equ	0xFF6
 14978                           tablat	equ	0xFF5
 14979                           prodh	equ	0xFF4
 14980                           prodl	equ	0xFF3
 14981                           intcon	equ	0xFF2
 14982                           postinc0	equ	0xFEE
 14983                           wreg	equ	0xFE8
 14984                           indf1	equ	0xFE7
 14985                           postinc1	equ	0xFE6
 14986                           postdec1	equ	0xFE5
 14987                           fsr1h	equ	0xFE2
 14988                           fsr1l	equ	0xFE1
 14989                           indf2	equ	0xFDF
 14990                           postinc2	equ	0xFDE
 14991                           postdec2	equ	0xFDD
 14992                           fsr2h	equ	0xFDA
 14993                           fsr2l	equ	0xFD9
 14994                           status	equ	0xFD8
 14995                           
 14996 ;; *************** function _strtok *****************
 14997 ;; Defined at:
 14998 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strtok.c"
 14999 ;; Parameters:    Size  Location     Type
 15000 ;;  s1              2   28[COMRAM] PTR unsigned char 
 15001 ;;		 -> uart_str(150), NULL(0), 
 15002 ;;  s2              2   30[COMRAM] PTR const unsigned char 
 15003 ;;		 -> STR_84(7), STR_83(7), STR_82(7), STR_79(7), 
 15004 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 15005 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_59(7), 
 15006 ;;		 -> STR_57(7), STR_54(7), STR_52(7), STR_49(7), 
 15007 ;;		 -> STR_47(7), STR_43(7), STR_41(7), STR_35(7), 
 15008 ;; Auto vars:     Size  Location     Type
 15009 ;;		None
 15010 ;; Return value:  Size  Location     Type
 15011 ;;                  2   28[COMRAM] PTR unsigned char 
 15012 ;; Registers used:
 15013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15014 ;; Tracked objects:
 15015 ;;		On entry : 0/0
 15016 ;;		On exit  : 0/0
 15017 ;;		Unchanged: 0/0
 15018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15019 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15022 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15023 ;;Total ram usage:        4 bytes
 15024 ;; Hardware stack levels used:    1
 15025 ;; Hardware stack levels required when called:    7
 15026 ;; This function calls:
 15027 ;;		_strcspn
 15028 ;;		_strspn
 15029 ;; This function is called by:
 15030 ;;		_parse_cmd_str
 15031 ;; This function uses a non-reentrant model
 15032 ;;
 15033                           
 15034                           	psect	text60
 15035  003A5A                     __ptext60:
 15036                           	opt stack 0
 15037  003A5A                     _strtok:
 15038                           	opt stack 21
 15039                           
 15040                           ;incstack = 0
 15041  003A5A  501D               	movf	strtok@s1,w,c
 15042  003A5C  101E               	iorwf	strtok@s1+1,w,c
 15043  003A5E  A4D8               	btfss	status,2,c
 15044  003A60  D004               	goto	l1896
 15045  003A62  C114  F01D         	movff	strtok@sp,strtok@s1
 15046  003A66  C115  F01E         	movff	strtok@sp+1,strtok@s1+1
 15047  003A6A                     l1896:
 15048  003A6A  501D               	movf	strtok@s1,w,c
 15049  003A6C  101E               	iorwf	strtok@s1+1,w,c
 15050  003A6E  A4D8               	btfss	status,2,c
 15051  003A70  D005               	goto	l8555
 15052  003A72  0E00               	movlw	0
 15053  003A74  6E1D               	movwf	?_strtok,c
 15054  003A76  0E00               	movlw	0
 15055  003A78  6E1E               	movwf	?_strtok+1,c
 15056  003A7A  0012               	return	
 15057  003A7C                     l8555:
 15058  003A7C  C01D  F016         	movff	strtok@s1,strspn@s1
 15059  003A80  C01E  F017         	movff	strtok@s1+1,strspn@s1+1
 15060  003A84  C01F  F018         	movff	strtok@s2,strspn@s2
 15061  003A88  C020  F019         	movff	strtok@s2+1,strspn@s2+1
 15062  003A8C  EC15  F023         	call	_strspn	;wreg free
 15063  003A90  5016               	movf	?_strspn,w,c
 15064  003A92  261D               	addwf	strtok@s1,f,c
 15065  003A94  5017               	movf	?_strspn+1,w,c
 15066  003A96  221E               	addwfc	strtok@s1+1,f,c
 15067  003A98  C01D  FFD9         	movff	strtok@s1,fsr2l
 15068  003A9C  C01E  FFDA         	movff	strtok@s1+1,fsr2h
 15069  003AA0  50DF               	movf	indf2,w,c
 15070  003AA2  A4D8               	btfss	status,2,c
 15071  003AA4  D00B               	goto	l8563
 15072  003AA6  0E00               	movlw	0
 15073  003AA8  0101               	movlb	1	; () banked
 15074  003AAA  6F14               	movwf	strtok@sp& (0+255),b
 15075  003AAC  0E00               	movlw	0
 15076  003AAE  0101               	movlb	1	; () banked
 15077  003AB0  6F15               	movwf	(strtok@sp+1)& (0+255),b
 15078  003AB2  C114  F01D         	movff	strtok@sp,?_strtok
 15079  003AB6  C115  F01E         	movff	strtok@sp+1,?_strtok+1
 15080                           
 15081                           ; BSR set to: 1
 15082  003ABA  0012               	return	
 15083  003ABC                     l8563:
 15084  003ABC  C01D  F016         	movff	strtok@s1,strcspn@s1
 15085  003AC0  C01E  F017         	movff	strtok@s1+1,strcspn@s1+1
 15086  003AC4  C01F  F018         	movff	strtok@s2,strcspn@s2
 15087  003AC8  C020  F019         	movff	strtok@s2+1,strcspn@s2+1
 15088  003ACC  EC3D  F023         	call	_strcspn	;wreg free
 15089  003AD0  5016               	movf	?_strcspn,w,c
 15090  003AD2  241D               	addwf	strtok@s1,w,c
 15091  003AD4  0101               	movlb	1	; () banked
 15092  003AD6  6F14               	movwf	strtok@sp& (0+255),b
 15093  003AD8  5017               	movf	?_strcspn+1,w,c
 15094  003ADA  201E               	addwfc	strtok@s1+1,w,c
 15095  003ADC  0101               	movlb	1	; () banked
 15096  003ADE  6F15               	movwf	(strtok@sp+1)& (0+255),b
 15097                           
 15098                           ; BSR set to: 1
 15099  003AE0  C114  FFD9         	movff	strtok@sp,fsr2l
 15100  003AE4  C115  FFDA         	movff	strtok@sp+1,fsr2h
 15101  003AE8  50DF               	movf	indf2,w,c
 15102  003AEA  B4D8               	btfsc	status,2,c
 15103  003AEC  D00A               	goto	l8571
 15104                           
 15105                           ; BSR set to: 1
 15106  003AEE  C114  FFD9         	movff	strtok@sp,fsr2l
 15107  003AF2  C115  FFDA         	movff	strtok@sp+1,fsr2h
 15108  003AF6  0E00               	movlw	0
 15109  003AF8  6EDF               	movwf	indf2,c
 15110                           
 15111                           ; BSR set to: 1
 15112  003AFA  0101               	movlb	1	; () banked
 15113  003AFC  4B14               	infsnz	strtok@sp& (0+255),f,b
 15114  003AFE  2B15               	incf	(strtok@sp+1)& (0+255),f,b
 15115  003B00  D006               	goto	l1901
 15116  003B02                     l8571:
 15117                           
 15118                           ; BSR set to: 1
 15119  003B02  0E00               	movlw	0
 15120  003B04  0101               	movlb	1	; () banked
 15121  003B06  6F14               	movwf	strtok@sp& (0+255),b
 15122  003B08  0E00               	movlw	0
 15123  003B0A  0101               	movlb	1	; () banked
 15124  003B0C  6F15               	movwf	(strtok@sp+1)& (0+255),b
 15125  003B0E                     l1901:
 15126                           
 15127                           ; BSR set to: 1
 15128  003B0E  C01D  F01D         	movff	strtok@s1,?_strtok
 15129  003B12  C01E  F01E         	movff	strtok@s1+1,?_strtok+1
 15130  003B16  0012               	return	
 15131  003B18                     __end_of_strtok:
 15132                           	opt stack 0
 15133                           tblptru	equ	0xFF8
 15134                           tblptrh	equ	0xFF7
 15135                           tblptrl	equ	0xFF6
 15136                           tablat	equ	0xFF5
 15137                           prodh	equ	0xFF4
 15138                           prodl	equ	0xFF3
 15139                           intcon	equ	0xFF2
 15140                           postinc0	equ	0xFEE
 15141                           wreg	equ	0xFE8
 15142                           indf1	equ	0xFE7
 15143                           postinc1	equ	0xFE6
 15144                           postdec1	equ	0xFE5
 15145                           fsr1h	equ	0xFE2
 15146                           fsr1l	equ	0xFE1
 15147                           indf2	equ	0xFDF
 15148                           postinc2	equ	0xFDE
 15149                           postdec2	equ	0xFDD
 15150                           fsr2h	equ	0xFDA
 15151                           fsr2l	equ	0xFD9
 15152                           status	equ	0xFD8
 15153                           
 15154 ;; *************** function _strspn *****************
 15155 ;; Defined at:
 15156 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strspn.c"
 15157 ;; Parameters:    Size  Location     Type
 15158 ;;  s1              2   21[COMRAM] PTR const unsigned char 
 15159 ;;		 -> uart_str(150), NULL(0), 
 15160 ;;  s2              2   23[COMRAM] PTR const unsigned char 
 15161 ;;		 -> STR_84(7), STR_83(7), STR_82(7), STR_79(7), 
 15162 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 15163 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_59(7), 
 15164 ;;		 -> STR_57(7), STR_54(7), STR_52(7), STR_49(7), 
 15165 ;;		 -> STR_47(7), STR_43(7), STR_41(7), STR_35(7), 
 15166 ;; Auto vars:     Size  Location     Type
 15167 ;;  i               2   26[COMRAM] unsigned int 
 15168 ;; Return value:  Size  Location     Type
 15169 ;;                  2   21[COMRAM] unsigned int 
 15170 ;; Registers used:
 15171 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15172 ;; Tracked objects:
 15173 ;;		On entry : 0/0
 15174 ;;		On exit  : 0/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15177 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15178 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15180 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;Total ram usage:        7 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:    6
 15184 ;; This function calls:
 15185 ;;		_strchr
 15186 ;; This function is called by:
 15187 ;;		_strtok
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           	psect	text61
 15192  00462A                     __ptext61:
 15193                           	opt stack 0
 15194  00462A                     _strspn:
 15195                           	opt stack 21
 15196                           
 15197                           ;incstack = 0
 15198  00462A  0E00               	movlw	0
 15199  00462C  6E1C               	movwf	strspn@i+1,c
 15200  00462E  0E00               	movlw	0
 15201  004630  6E1B               	movwf	strspn@i,c
 15202  004632  D004               	goto	l8091
 15203  004634                     l8089:
 15204  004634  4A16               	infsnz	strspn@s1,f,c
 15205  004636  2A17               	incf	strspn@s1+1,f,c
 15206  004638  4A1B               	infsnz	strspn@i,f,c
 15207  00463A  2A1C               	incf	strspn@i+1,f,c
 15208  00463C                     l8091:
 15209  00463C  C016  FFD9         	movff	strspn@s1,fsr2l
 15210  004640  C017  FFDA         	movff	strspn@s1+1,fsr2h
 15211  004644  50DF               	movf	indf2,w,c
 15212  004646  B4D8               	btfsc	status,2,c
 15213  004648  D013               	goto	l1962
 15214  00464A  C018  F010         	movff	strspn@s2,strchr@ptr
 15215  00464E  C019  F011         	movff	strspn@s2+1,strchr@ptr+1
 15216  004652  C016  FFD9         	movff	strspn@s1,fsr2l
 15217  004656  C017  FFDA         	movff	strspn@s1+1,fsr2h
 15218  00465A  50DF               	movf	indf2,w,c
 15219  00465C  6E1A               	movwf	??_strspn& (0+255),c
 15220  00465E  501A               	movf	??_strspn,w,c
 15221  004660  6E12               	movwf	strchr@chr,c
 15222  004662  6A13               	clrf	strchr@chr+1,c
 15223  004664  ECA3  F021         	call	_strchr	;wreg free
 15224  004668  5010               	movf	?_strchr,w,c
 15225  00466A  1011               	iorwf	?_strchr+1,w,c
 15226  00466C  A4D8               	btfss	status,2,c
 15227  00466E  D7E2               	goto	l8089
 15228  004670                     l1962:
 15229  004670  C01B  F016         	movff	strspn@i,?_strspn
 15230  004674  C01C  F017         	movff	strspn@i+1,?_strspn+1
 15231  004678  0012               	return		;funcret
 15232  00467A                     __end_of_strspn:
 15233                           	opt stack 0
 15234                           tblptru	equ	0xFF8
 15235                           tblptrh	equ	0xFF7
 15236                           tblptrl	equ	0xFF6
 15237                           tablat	equ	0xFF5
 15238                           prodh	equ	0xFF4
 15239                           prodl	equ	0xFF3
 15240                           intcon	equ	0xFF2
 15241                           postinc0	equ	0xFEE
 15242                           wreg	equ	0xFE8
 15243                           indf1	equ	0xFE7
 15244                           postinc1	equ	0xFE6
 15245                           postdec1	equ	0xFE5
 15246                           fsr1h	equ	0xFE2
 15247                           fsr1l	equ	0xFE1
 15248                           indf2	equ	0xFDF
 15249                           postinc2	equ	0xFDE
 15250                           postdec2	equ	0xFDD
 15251                           fsr2h	equ	0xFDA
 15252                           fsr2l	equ	0xFD9
 15253                           status	equ	0xFD8
 15254                           
 15255 ;; *************** function _strcspn *****************
 15256 ;; Defined at:
 15257 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcspn.c"
 15258 ;; Parameters:    Size  Location     Type
 15259 ;;  s1              2   21[COMRAM] PTR const unsigned char 
 15260 ;;		 -> uart_str(150), NULL(0), 
 15261 ;;  s2              2   23[COMRAM] PTR const unsigned char 
 15262 ;;		 -> STR_84(7), STR_83(7), STR_82(7), STR_79(7), 
 15263 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 15264 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_59(7), 
 15265 ;;		 -> STR_57(7), STR_54(7), STR_52(7), STR_49(7), 
 15266 ;;		 -> STR_47(7), STR_43(7), STR_41(7), STR_35(7), 
 15267 ;; Auto vars:     Size  Location     Type
 15268 ;;  i               2   26[COMRAM] unsigned int 
 15269 ;; Return value:  Size  Location     Type
 15270 ;;                  2   21[COMRAM] unsigned int 
 15271 ;; Registers used:
 15272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15273 ;; Tracked objects:
 15274 ;;		On entry : 0/0
 15275 ;;		On exit  : 0/0
 15276 ;;		Unchanged: 0/0
 15277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15278 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15280 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15281 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15282 ;;Total ram usage:        7 bytes
 15283 ;; Hardware stack levels used:    1
 15284 ;; Hardware stack levels required when called:    6
 15285 ;; This function calls:
 15286 ;;		_strchr
 15287 ;; This function is called by:
 15288 ;;		_strtok
 15289 ;; This function uses a non-reentrant model
 15290 ;;
 15291                           
 15292                           	psect	text62
 15293  00467A                     __ptext62:
 15294                           	opt stack 0
 15295  00467A                     _strcspn:
 15296                           	opt stack 21
 15297                           
 15298                           ;incstack = 0
 15299  00467A  0E00               	movlw	0
 15300  00467C  6E1C               	movwf	strcspn@i+1,c
 15301  00467E  0E00               	movlw	0
 15302  004680  6E1B               	movwf	strcspn@i,c
 15303  004682  D004               	goto	l8099
 15304  004684                     l8097:
 15305  004684  4A16               	infsnz	strcspn@s1,f,c
 15306  004686  2A17               	incf	strcspn@s1+1,f,c
 15307  004688  4A1B               	infsnz	strcspn@i,f,c
 15308  00468A  2A1C               	incf	strcspn@i+1,f,c
 15309  00468C                     l8099:
 15310  00468C  C016  FFD9         	movff	strcspn@s1,fsr2l
 15311  004690  C017  FFDA         	movff	strcspn@s1+1,fsr2h
 15312  004694  50DF               	movf	indf2,w,c
 15313  004696  B4D8               	btfsc	status,2,c
 15314  004698  D013               	goto	l1943
 15315  00469A  C018  F010         	movff	strcspn@s2,strchr@ptr
 15316  00469E  C019  F011         	movff	strcspn@s2+1,strchr@ptr+1
 15317  0046A2  C016  FFD9         	movff	strcspn@s1,fsr2l
 15318  0046A6  C017  FFDA         	movff	strcspn@s1+1,fsr2h
 15319  0046AA  50DF               	movf	indf2,w,c
 15320  0046AC  6E1A               	movwf	??_strcspn& (0+255),c
 15321  0046AE  501A               	movf	??_strcspn,w,c
 15322  0046B0  6E12               	movwf	strchr@chr,c
 15323  0046B2  6A13               	clrf	strchr@chr+1,c
 15324  0046B4  ECA3  F021         	call	_strchr	;wreg free
 15325  0046B8  5010               	movf	?_strchr,w,c
 15326  0046BA  1011               	iorwf	?_strchr+1,w,c
 15327  0046BC  B4D8               	btfsc	status,2,c
 15328  0046BE  D7E2               	goto	l8097
 15329  0046C0                     l1943:
 15330  0046C0  C01B  F016         	movff	strcspn@i,?_strcspn
 15331  0046C4  C01C  F017         	movff	strcspn@i+1,?_strcspn+1
 15332  0046C8  0012               	return		;funcret
 15333  0046CA                     __end_of_strcspn:
 15334                           	opt stack 0
 15335                           tblptru	equ	0xFF8
 15336                           tblptrh	equ	0xFF7
 15337                           tblptrl	equ	0xFF6
 15338                           tablat	equ	0xFF5
 15339                           prodh	equ	0xFF4
 15340                           prodl	equ	0xFF3
 15341                           intcon	equ	0xFF2
 15342                           postinc0	equ	0xFEE
 15343                           wreg	equ	0xFE8
 15344                           indf1	equ	0xFE7
 15345                           postinc1	equ	0xFE6
 15346                           postdec1	equ	0xFE5
 15347                           fsr1h	equ	0xFE2
 15348                           fsr1l	equ	0xFE1
 15349                           indf2	equ	0xFDF
 15350                           postinc2	equ	0xFDE
 15351                           postdec2	equ	0xFDD
 15352                           fsr2h	equ	0xFDA
 15353                           fsr2l	equ	0xFD9
 15354                           status	equ	0xFD8
 15355                           
 15356 ;; *************** function _strchr *****************
 15357 ;; Defined at:
 15358 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strchr.c"
 15359 ;; Parameters:    Size  Location     Type
 15360 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
 15361 ;;		 -> cmd_consol_task@temp_uart_str(150), STR_84(7), STR_83(7), STR_82(7), 
 15362 ;;		 -> STR_79(7), STR_77(7), STR_75(7), STR_73(7), 
 15363 ;;		 -> STR_71(2), STR_65(7), STR_63(7), STR_61(7), 
 15364 ;;		 -> STR_59(7), STR_57(7), STR_54(7), STR_52(7), 
 15365 ;;		 -> STR_49(7), STR_47(7), STR_43(7), STR_41(7), 
 15366 ;;		 -> NULL(0), STR_35(7), 
 15367 ;;  chr             2   17[COMRAM] int 
 15368 ;; Auto vars:     Size  Location     Type
 15369 ;;		None
 15370 ;; Return value:  Size  Location     Type
 15371 ;;                  2   15[COMRAM] PTR unsigned char 
 15372 ;; Registers used:
 15373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 15374 ;; Tracked objects:
 15375 ;;		On entry : 0/0
 15376 ;;		On exit  : 0/0
 15377 ;;		Unchanged: 0/0
 15378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15379 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15381 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15382 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15383 ;;Total ram usage:        6 bytes
 15384 ;; Hardware stack levels used:    1
 15385 ;; Hardware stack levels required when called:    5
 15386 ;; This function calls:
 15387 ;;		Nothing
 15388 ;; This function is called by:
 15389 ;;		_strstr
 15390 ;;		_strcspn
 15391 ;;		_strspn
 15392 ;; This function uses a non-reentrant model
 15393 ;;
 15394                           
 15395                           	psect	text63
 15396  004346                     __ptext63:
 15397                           	opt stack 0
 15398  004346                     _strchr:
 15399                           	opt stack 23
 15400  004346  C010  FFF6         	movff	strchr@ptr,tblptrl
 15401  00434A  C011  FFF7         	movff	strchr@ptr+1,tblptrh
 15402  00434E  0E00               	movlw	low (__mediumconst shr (0+16))
 15403  004350  6EF8               	movwf	tblptru,c
 15404  004352  0E0F               	movlw	(high __ramtop+-1)
 15405  004354  64F7               	cpfsgt	tblptrh,c
 15406  004356  D003               	bra	u7307
 15407  004358  0008               	tblrd		*
 15408  00435A  50F5               	movf	tablat,w,c
 15409  00435C  D005               	bra	u7300
 15410  00435E                     u7307:
 15411  00435E  CFF6 FFE1          	movff	tblptrl,fsr1l
 15412  004362  CFF7 FFE2          	movff	tblptrh,fsr1h
 15413  004366  50E7               	movf	indf1,w,c
 15414  004368                     u7300:
 15415  004368  1812               	xorwf	strchr@chr,w,c
 15416  00436A  A4D8               	btfss	status,2,c
 15417  00436C  D005               	goto	l7729
 15418  00436E  C010  F010         	movff	strchr@ptr,?_strchr
 15419  004372  C011  F011         	movff	strchr@ptr+1,?_strchr+1
 15420  004376  0012               	return	
 15421  004378                     l7729:
 15422  004378  5010               	movf	strchr@ptr,w,c
 15423  00437A  6E14               	movwf	??_strchr& (0+255),c
 15424  00437C  5011               	movf	strchr@ptr+1,w,c
 15425  00437E  6E15               	movwf	(??_strchr+1)& (0+255),c
 15426  004380  4A10               	infsnz	strchr@ptr,f,c
 15427  004382  2A11               	incf	strchr@ptr+1,f,c
 15428  004384  C014  FFF6         	movff	??_strchr,tblptrl
 15429  004388  C015  FFF7         	movff	??_strchr+1,tblptrh
 15430  00438C  0E00               	movlw	low (__mediumconst shr (0+16))
 15431  00438E  6EF8               	movwf	tblptru,c
 15432  004390  0E0F               	movlw	(high __ramtop+-1)
 15433  004392  64F7               	cpfsgt	tblptrh,c
 15434  004394  D003               	bra	u7327
 15435  004396  0008               	tblrd		*
 15436  004398  50F5               	movf	tablat,w,c
 15437  00439A  D005               	bra	u7320
 15438  00439C                     u7327:
 15439  00439C  CFF6 FFE1          	movff	tblptrl,fsr1l
 15440  0043A0  CFF7 FFE2          	movff	tblptrh,fsr1h
 15441  0043A4  50E7               	movf	indf1,w,c
 15442  0043A6                     u7320:
 15443  0043A6  0900               	iorlw	0
 15444  0043A8  A4D8               	btfss	status,2,c
 15445  0043AA  D7CD               	goto	l7723
 15446  0043AC  0E00               	movlw	0
 15447  0043AE  6E10               	movwf	?_strchr,c
 15448  0043B0  0E00               	movlw	0
 15449  0043B2  6E11               	movwf	?_strchr+1,c
 15450  0043B4  0012               	return	
 15451  0043B6                     __end_of_strchr:
 15452                           	opt stack 0
 15453                           tblptru	equ	0xFF8
 15454                           tblptrh	equ	0xFF7
 15455                           tblptrl	equ	0xFF6
 15456                           tablat	equ	0xFF5
 15457                           prodh	equ	0xFF4
 15458                           prodl	equ	0xFF3
 15459                           intcon	equ	0xFF2
 15460                           postinc0	equ	0xFEE
 15461                           wreg	equ	0xFE8
 15462                           indf1	equ	0xFE7
 15463                           postinc1	equ	0xFE6
 15464                           postdec1	equ	0xFE5
 15465                           fsr1h	equ	0xFE2
 15466                           fsr1l	equ	0xFE1
 15467                           indf2	equ	0xFDF
 15468                           postinc2	equ	0xFDE
 15469                           postdec2	equ	0xFDD
 15470                           fsr2h	equ	0xFDA
 15471                           fsr2l	equ	0xFD9
 15472                           status	equ	0xFD8
 15473                           
 15474 ;; *************** function _strcmp *****************
 15475 ;; Defined at:
 15476 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
 15477 ;; Parameters:    Size  Location     Type
 15478 ;;  s1              2   15[COMRAM] PTR const unsigned char 
 15479 ;;		 -> uart_str(150), CMD(15), NULL(0), 
 15480 ;;  s2              2   17[COMRAM] PTR const unsigned char 
 15481 ;;		 -> STR_126(5), STR_115(7), STR_112(7), STR_109(8), 
 15482 ;;		 -> STR_106(6), STR_101(6), STR_98(5), STR_95(4), 
 15483 ;;		 -> STR_92(4), STR_89(6), STR_86(4), STR_85(4), 
 15484 ;;		 -> STR_69(5), STR_68(7), STR_56(7), STR_50(8), 
 15485 ;;		 -> STR_45(6), STR_44(6), STR_40(5), STR_38(6), 
 15486 ;;		 -> STR_37(4), STR_36(4), 
 15487 ;; Auto vars:     Size  Location     Type
 15488 ;;  r               1   20[COMRAM] char 
 15489 ;; Return value:  Size  Location     Type
 15490 ;;                  2   15[COMRAM] int 
 15491 ;; Registers used:
 15492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15493 ;; Tracked objects:
 15494 ;;		On entry : 0/0
 15495 ;;		On exit  : 0/0
 15496 ;;		Unchanged: 0/0
 15497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15498 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15499 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15500 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15501 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15502 ;;Total ram usage:        6 bytes
 15503 ;; Hardware stack levels used:    1
 15504 ;; Hardware stack levels required when called:    5
 15505 ;; This function calls:
 15506 ;;		Nothing
 15507 ;; This function is called by:
 15508 ;;		_parse_cmd_str
 15509 ;;		_reply_to_host
 15510 ;; This function uses a non-reentrant model
 15511 ;;
 15512                           
 15513                           	psect	text64
 15514  004714                     __ptext64:
 15515                           	opt stack 0
 15516  004714                     _strcmp:
 15517                           	opt stack 23
 15518                           
 15519                           ;incstack = 0
 15520  004714  D004               	goto	l8579
 15521  004716                     l8577:
 15522  004716  4A10               	infsnz	strcmp@s1,f,c
 15523  004718  2A11               	incf	strcmp@s1+1,f,c
 15524  00471A  4A12               	infsnz	strcmp@s2,f,c
 15525  00471C  2A13               	incf	strcmp@s2+1,f,c
 15526  00471E                     l8579:
 15527  00471E  C010  FFD9         	movff	strcmp@s1,fsr2l
 15528  004722  C011  FFDA         	movff	strcmp@s1+1,fsr2h
 15529  004726  50DF               	movf	indf2,w,c
 15530  004728  6E14               	movwf	??_strcmp& (0+255),c
 15531  00472A  C012  FFF6         	movff	strcmp@s2,tblptrl
 15532  00472E  C013  FFF7         	movff	strcmp@s2+1,tblptrh
 15533  004732                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15534  004732  6AF8               	clrf	tblptru,c
 15535  004734                     	endif
 15536  004734                     	if	0	;tblptru may be non-zero
 15537  004734                     	endif
 15538  004734  0008               	tblrd		*
 15539  004736  50F5               	movf	tablat,w,c
 15540  004738  0800               	sublw	0
 15541  00473A  2414               	addwf	??_strcmp,w,c
 15542  00473C  6E15               	movwf	strcmp@r,c
 15543  00473E  5015               	movf	strcmp@r,w,c
 15544  004740  A4D8               	btfss	status,2,c
 15545  004742  D007               	goto	l8583
 15546  004744  C010  FFD9         	movff	strcmp@s1,fsr2l
 15547  004748  C011  FFDA         	movff	strcmp@s1+1,fsr2h
 15548  00474C  50DF               	movf	indf2,w,c
 15549  00474E  A4D8               	btfss	status,2,c
 15550  004750  D7E2               	goto	l8577
 15551  004752                     l8583:
 15552  004752  5015               	movf	strcmp@r,w,c
 15553  004754  6E10               	movwf	?_strcmp,c
 15554  004756  6A11               	clrf	?_strcmp+1,c
 15555  004758  BE10               	btfsc	?_strcmp,7,c
 15556  00475A  0611               	decf	?_strcmp+1,f,c
 15557  00475C  0012               	return	
 15558  00475E                     __end_of_strcmp:
 15559                           	opt stack 0
 15560                           tblptru	equ	0xFF8
 15561                           tblptrh	equ	0xFF7
 15562                           tblptrl	equ	0xFF6
 15563                           tablat	equ	0xFF5
 15564                           prodh	equ	0xFF4
 15565                           prodl	equ	0xFF3
 15566                           intcon	equ	0xFF2
 15567                           postinc0	equ	0xFEE
 15568                           wreg	equ	0xFE8
 15569                           indf1	equ	0xFE7
 15570                           postinc1	equ	0xFE6
 15571                           postdec1	equ	0xFE5
 15572                           fsr1h	equ	0xFE2
 15573                           fsr1l	equ	0xFE1
 15574                           indf2	equ	0xFDF
 15575                           postinc2	equ	0xFDE
 15576                           postdec2	equ	0xFDD
 15577                           fsr2h	equ	0xFDA
 15578                           fsr2l	equ	0xFD9
 15579                           status	equ	0xFD8
 15580                           
 15581 ;; *************** function _get_uid *****************
 15582 ;; Defined at:
 15583 ;;		line 39 in file "cmd_consol.c"
 15584 ;; Parameters:    Size  Location     Type
 15585 ;;  str             2   35[COMRAM] PTR unsigned char 
 15586 ;;		 -> uart_str(150), NULL(0), 
 15587 ;;  data_uid        2   37[COMRAM] PTR unsigned int 
 15588 ;;		 -> cmd_data(53), 
 15589 ;; Auto vars:     Size  Location     Type
 15590 ;;  uid             2   43[COMRAM] unsigned int 
 15591 ;;  i               2   41[COMRAM] unsigned int 
 15592 ;; Return value:  Size  Location     Type
 15593 ;;                  1    wreg      void 
 15594 ;; Registers used:
 15595 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15596 ;; Tracked objects:
 15597 ;;		On entry : 0/0
 15598 ;;		On exit  : 0/0
 15599 ;;		Unchanged: 0/0
 15600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15601 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15602 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15603 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15604 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15605 ;;Total ram usage:       10 bytes
 15606 ;; Hardware stack levels used:    1
 15607 ;; Hardware stack levels required when called:    6
 15608 ;; This function calls:
 15609 ;;		___wmul
 15610 ;;		_isdigit
 15611 ;;		_strlen
 15612 ;; This function is called by:
 15613 ;;		_parse_cmd_str
 15614 ;; This function uses a non-reentrant model
 15615 ;;
 15616                           
 15617                           	psect	text65
 15618  003B18                     __ptext65:
 15619                           	opt stack 0
 15620  003B18                     _get_uid:
 15621                           	opt stack 22
 15622                           
 15623                           ;cmd_consol.c: 40: unsigned int uid;
 15624                           ;cmd_consol.c: 41: unsigned int i = 0;
 15625                           
 15626                           ;incstack = 0
 15627  003B18  0E00               	movlw	0
 15628  003B1A  6E2B               	movwf	get_uid@i+1,c
 15629  003B1C  0E00               	movlw	0
 15630  003B1E  6E2A               	movwf	get_uid@i,c
 15631                           
 15632                           ;cmd_consol.c: 42: for (i = 0; i < strlen(str); i++) {
 15633  003B20  0E00               	movlw	0
 15634  003B22  6E2B               	movwf	get_uid@i+1,c
 15635  003B24  0E00               	movlw	0
 15636  003B26  6E2A               	movwf	get_uid@i,c
 15637  003B28  D02A               	goto	l8415
 15638  003B2A                     l8409:
 15639                           
 15640                           ;cmd_consol.c: 43: if (isdigit(str[i]) == 1)
 15641  003B2A  502A               	movf	get_uid@i,w,c
 15642  003B2C  2424               	addwf	get_uid@str,w,c
 15643  003B2E  6ED9               	movwf	fsr2l,c
 15644  003B30  502B               	movf	get_uid@i+1,w,c
 15645  003B32  2025               	addwfc	get_uid@str+1,w,c
 15646  003B34  6EDA               	movwf	fsr2h,c
 15647  003B36  50DF               	movf	indf2,w,c
 15648  003B38  EC7F  F026         	call	_isdigit
 15649  003B3C  A0D8               	btfss	status,0,c
 15650  003B3E  0012               	return	
 15651                           
 15652                           ;cmd_consol.c: 44: uid = uid * 10 + (str[i] - '0');
 15653  003B40  C02C  F018         	movff	get_uid@uid,___wmul@multiplier
 15654  003B44  C02D  F019         	movff	get_uid@uid+1,___wmul@multiplier+1
 15655  003B48  0E00               	movlw	0
 15656  003B4A  6E1B               	movwf	___wmul@multiplicand+1,c
 15657  003B4C  0E0A               	movlw	10
 15658  003B4E  6E1A               	movwf	___wmul@multiplicand,c
 15659  003B50  EC04  F026         	call	___wmul	;wreg free
 15660  003B54  502A               	movf	get_uid@i,w,c
 15661  003B56  2424               	addwf	get_uid@str,w,c
 15662  003B58  6ED9               	movwf	fsr2l,c
 15663  003B5A  502B               	movf	get_uid@i+1,w,c
 15664  003B5C  2025               	addwfc	get_uid@str+1,w,c
 15665  003B5E  6EDA               	movwf	fsr2h,c
 15666  003B60  50DF               	movf	indf2,w,c
 15667  003B62  6E28               	movwf	??_get_uid& (0+255),c
 15668  003B64  6A29               	clrf	(??_get_uid+1)& (0+255),c
 15669  003B66  5018               	movf	?___wmul,w,c
 15670  003B68  2628               	addwf	??_get_uid,f,c
 15671  003B6A  5019               	movf	?___wmul+1,w,c
 15672  003B6C  2229               	addwfc	??_get_uid+1,f,c
 15673  003B6E  0ED0               	movlw	208
 15674  003B70  2428               	addwf	??_get_uid,w,c
 15675  003B72  6E2C               	movwf	get_uid@uid,c
 15676  003B74  0EFF               	movlw	255
 15677  003B76  2029               	addwfc	??_get_uid+1,w,c
 15678  003B78  6E2D               	movwf	get_uid@uid+1,c
 15679                           
 15680                           ;cmd_consol.c: 45: else
 15681                           ;cmd_consol.c: 46: return;
 15682  003B7A  4A2A               	infsnz	get_uid@i,f,c
 15683  003B7C  2A2B               	incf	get_uid@i+1,f,c
 15684  003B7E                     l8415:
 15685  003B7E  C024  F01E         	movff	get_uid@str,strlen@s
 15686  003B82  C025  F01F         	movff	get_uid@str+1,strlen@s+1
 15687  003B86  ECC2  F022         	call	_strlen	;wreg free
 15688  003B8A  501E               	movf	?_strlen,w,c
 15689  003B8C  5C2A               	subwf	get_uid@i,w,c
 15690  003B8E  501F               	movf	?_strlen+1,w,c
 15691  003B90  582B               	subwfb	get_uid@i+1,w,c
 15692  003B92  A0D8               	btfss	status,0,c
 15693  003B94  D7CA               	goto	l8409
 15694                           
 15695                           ;cmd_consol.c: 47: }
 15696                           ;cmd_consol.c: 48: if (uid >= 1 && uid <= 100) {
 15697  003B96  502C               	movf	get_uid@uid,w,c
 15698  003B98  102D               	iorwf	get_uid@uid+1,w,c
 15699  003B9A  B4D8               	btfsc	status,2,c
 15700  003B9C  D00F               	goto	l8423
 15701  003B9E  502D               	movf	get_uid@uid+1,w,c
 15702  003BA0  E10D               	bnz	l8423
 15703  003BA2  0E65               	movlw	101
 15704  003BA4  5C2C               	subwf	get_uid@uid,w,c
 15705  003BA6  B0D8               	btfsc	status,0,c
 15706  003BA8  D009               	goto	l8423
 15707                           
 15708                           ;cmd_consol.c: 49: *data_uid = 0;
 15709  003BAA  C026  FFD9         	movff	get_uid@data_uid,fsr2l
 15710  003BAE  C027  FFDA         	movff	get_uid@data_uid+1,fsr2h
 15711  003BB2  0E00               	movlw	0
 15712  003BB4  6EDE               	movwf	postinc2,c
 15713  003BB6  0E00               	movlw	0
 15714  003BB8  6EDD               	movwf	postdec2,c
 15715                           
 15716                           ;cmd_consol.c: 50: } else {
 15717  003BBA  0012               	return	
 15718  003BBC                     l8423:
 15719                           
 15720                           ;cmd_consol.c: 51: *data_uid = uid;
 15721  003BBC  C026  FFD9         	movff	get_uid@data_uid,fsr2l
 15722  003BC0  C027  FFDA         	movff	get_uid@data_uid+1,fsr2h
 15723  003BC4  C02C  FFDE         	movff	get_uid@uid,postinc2
 15724  003BC8  C02D  FFDD         	movff	get_uid@uid+1,postdec2
 15725  003BCC  0012               	return	
 15726  003BCE                     __end_of_get_uid:
 15727                           	opt stack 0
 15728                           tblptru	equ	0xFF8
 15729                           tblptrh	equ	0xFF7
 15730                           tblptrl	equ	0xFF6
 15731                           tablat	equ	0xFF5
 15732                           prodh	equ	0xFF4
 15733                           prodl	equ	0xFF3
 15734                           intcon	equ	0xFF2
 15735                           postinc0	equ	0xFEE
 15736                           wreg	equ	0xFE8
 15737                           indf1	equ	0xFE7
 15738                           postinc1	equ	0xFE6
 15739                           postdec1	equ	0xFE5
 15740                           fsr1h	equ	0xFE2
 15741                           fsr1l	equ	0xFE1
 15742                           indf2	equ	0xFDF
 15743                           postinc2	equ	0xFDE
 15744                           postdec2	equ	0xFDD
 15745                           fsr2h	equ	0xFDA
 15746                           fsr2l	equ	0xFD9
 15747                           status	equ	0xFD8
 15748                           
 15749 ;; *************** function _get_str *****************
 15750 ;; Defined at:
 15751 ;;		line 55 in file "cmd_consol.c"
 15752 ;; Parameters:    Size  Location     Type
 15753 ;;  str             2   43[COMRAM] PTR unsigned char 
 15754 ;;		 -> uart_str(150), NULL(0), 
 15755 ;;  data_str        2   45[COMRAM] PTR unsigned char 
 15756 ;;		 -> cmd_data(53), 
 15757 ;; Auto vars:     Size  Location     Type
 15758 ;;		None
 15759 ;; Return value:  Size  Location     Type
 15760 ;;                  1    wreg      unsigned char 
 15761 ;; Registers used:
 15762 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15763 ;; Tracked objects:
 15764 ;;		On entry : 0/0
 15765 ;;		On exit  : 0/0
 15766 ;;		Unchanged: 0/0
 15767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15768 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15771 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15772 ;;Total ram usage:        4 bytes
 15773 ;; Hardware stack levels used:    1
 15774 ;; Hardware stack levels required when called:    6
 15775 ;; This function calls:
 15776 ;;		_memset
 15777 ;;		_strcpy
 15778 ;;		_strlen
 15779 ;; This function is called by:
 15780 ;;		_parse_cmd_str
 15781 ;; This function uses a non-reentrant model
 15782 ;;
 15783                           
 15784                           	psect	text66
 15785  0043B6                     __ptext66:
 15786                           	opt stack 0
 15787  0043B6                     _get_str:
 15788                           	opt stack 22
 15789                           
 15790                           ;cmd_consol.c: 56: if (strlen(str) < 40) {
 15791                           
 15792                           ;incstack = 0
 15793  0043B6  C02C  F01E         	movff	get_str@str,strlen@s
 15794  0043BA  C02D  F01F         	movff	get_str@str+1,strlen@s+1
 15795  0043BE  ECC2  F022         	call	_strlen	;wreg free
 15796  0043C2  501F               	movf	?_strlen+1,w,c
 15797  0043C4  E12A               	bnz	l8439
 15798  0043C6  0E28               	movlw	40
 15799  0043C8  5C1E               	subwf	?_strlen,w,c
 15800  0043CA  B0D8               	btfsc	status,0,c
 15801  0043CC  D026               	goto	l8439
 15802                           
 15803                           ;cmd_consol.c: 57: strcpy(data_str, str);
 15804  0043CE  C02E  F024         	movff	get_str@data_str,strcpy@to
 15805  0043D2  C02F  F025         	movff	get_str@data_str+1,strcpy@to+1
 15806  0043D6  C02C  F026         	movff	get_str@str,strcpy@from
 15807  0043DA  C02D  F027         	movff	get_str@str+1,strcpy@from+1
 15808  0043DE  ECAB  F025         	call	_strcpy	;wreg free
 15809                           
 15810                           ;cmd_consol.c: 58: valid_cmd = 1;
 15811  0043E2  0E01               	movlw	1
 15812  0043E4  0100               	movlb	0	; () banked
 15813  0043E6  6F75               	movwf	_valid_cmd& (0+255),b
 15814                           
 15815                           ; BSR set to: 0
 15816                           ;cmd_consol.c: 59: cmd_data.data_set = 1;
 15817  0043E8  0E01               	movlw	1
 15818  0043EA  0101               	movlb	1	; () banked
 15819  0043EC  6F98               	movwf	(_cmd_data+42)& (0+255),b
 15820                           
 15821                           ; BSR set to: 1
 15822                           ;cmd_consol.c: 60: memset(str, 0, strlen(str));
 15823  0043EE  C02C  F024         	movff	get_str@str,memset@p1
 15824  0043F2  C02D  F025         	movff	get_str@str+1,memset@p1+1
 15825  0043F6  0E00               	movlw	0
 15826  0043F8  6E27               	movwf	memset@c+1,c
 15827  0043FA  0E00               	movlw	0
 15828  0043FC  6E26               	movwf	memset@c,c
 15829  0043FE  C02C  F01E         	movff	get_str@str,strlen@s
 15830  004402  C02D  F01F         	movff	get_str@str+1,strlen@s+1
 15831  004406  ECC2  F022         	call	_strlen	;wreg free
 15832  00440A  C01E  F028         	movff	?_strlen,memset@n
 15833  00440E  C01F  F029         	movff	?_strlen+1,memset@n+1
 15834  004412  ECD8  F025         	call	_memset	;wreg free
 15835                           
 15836                           ;cmd_consol.c: 61: return 1;
 15837  004416  0E01               	movlw	1
 15838  004418  0012               	return	
 15839  00441A                     l8439:
 15840                           
 15841                           ;cmd_consol.c: 62: }
 15842                           ;cmd_consol.c: 63: return 0;
 15843  00441A  0E00               	movlw	0
 15844  00441C  0012               	return	
 15845  00441E                     __end_of_get_str:
 15846                           	opt stack 0
 15847                           tblptru	equ	0xFF8
 15848                           tblptrh	equ	0xFF7
 15849                           tblptrl	equ	0xFF6
 15850                           tablat	equ	0xFF5
 15851                           prodh	equ	0xFF4
 15852                           prodl	equ	0xFF3
 15853                           intcon	equ	0xFF2
 15854                           postinc0	equ	0xFEE
 15855                           wreg	equ	0xFE8
 15856                           indf1	equ	0xFE7
 15857                           postinc1	equ	0xFE6
 15858                           postdec1	equ	0xFE5
 15859                           fsr1h	equ	0xFE2
 15860                           fsr1l	equ	0xFE1
 15861                           indf2	equ	0xFDF
 15862                           postinc2	equ	0xFDE
 15863                           postdec2	equ	0xFDD
 15864                           fsr2h	equ	0xFDA
 15865                           fsr2l	equ	0xFD9
 15866                           status	equ	0xFD8
 15867                           
 15868 ;; *************** function _strcpy *****************
 15869 ;; Defined at:
 15870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 15871 ;; Parameters:    Size  Location     Type
 15872 ;;  to              2   35[COMRAM] PTR unsigned char 
 15873 ;;		 -> cmd_consol_task@temp_uart_str(150), uart_str(150), CMD(15), cmd_data(53), 
 15874 ;;		 -> clcd_display_string_details(1140), 
 15875 ;;  from            2   37[COMRAM] PTR const unsigned char 
 15876 ;;		 -> cmd_consol_task@temp_uart_str(150), uart_str(150), cmd_data.data(40), NULL(0), 
 15877 ;;		 -> cmd_data(53), 
 15878 ;; Auto vars:     Size  Location     Type
 15879 ;;  cp              2   39[COMRAM] PTR unsigned char 
 15880 ;;		 -> cmd_consol_task@temp_uart_str(150), uart_str(150), CMD(15), cmd_data(53), 
 15881 ;;		 -> clcd_display_string_details(1140), 
 15882 ;; Return value:  Size  Location     Type
 15883 ;;                  2   35[COMRAM] PTR unsigned char 
 15884 ;; Registers used:
 15885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15886 ;; Tracked objects:
 15887 ;;		On entry : 0/0
 15888 ;;		On exit  : 0/0
 15889 ;;		Unchanged: 0/0
 15890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15891 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15892 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15894 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15895 ;;Total ram usage:        6 bytes
 15896 ;; Hardware stack levels used:    1
 15897 ;; Hardware stack levels required when called:    5
 15898 ;; This function calls:
 15899 ;;		Nothing
 15900 ;; This function is called by:
 15901 ;;		_copy_data
 15902 ;;		_copy_display_struct
 15903 ;;		_get_str
 15904 ;;		_parse_cmd_str
 15905 ;;		_cmd_consol_task
 15906 ;; This function uses a non-reentrant model
 15907 ;;
 15908                           
 15909                           	psect	text67
 15910  004B56                     __ptext67:
 15911                           	opt stack 0
 15912  004B56                     _strcpy:
 15913                           	opt stack 24
 15914                           
 15915                           ;incstack = 0
 15916  004B56  C024  F028         	movff	strcpy@to,strcpy@cp
 15917  004B5A  C025  F029         	movff	strcpy@to+1,strcpy@cp+1
 15918  004B5E  D004               	goto	l7529
 15919  004B60                     l7527:
 15920  004B60  4A28               	infsnz	strcpy@cp,f,c
 15921  004B62  2A29               	incf	strcpy@cp+1,f,c
 15922  004B64  4A26               	infsnz	strcpy@from,f,c
 15923  004B66  2A27               	incf	strcpy@from+1,f,c
 15924  004B68                     l7529:
 15925  004B68  C026  FFD9         	movff	strcpy@from,fsr2l
 15926  004B6C  C027  FFDA         	movff	strcpy@from+1,fsr2h
 15927  004B70  C028  FFE1         	movff	strcpy@cp,fsr1l
 15928  004B74  C029  FFE2         	movff	strcpy@cp+1,fsr1h
 15929  004B78  CFDF FFE7          	movff	indf2,indf1
 15930  004B7C  50E7               	movf	indf1,w,c
 15931  004B7E  B4D8               	btfsc	status,2,c
 15932  004B80  0012               	return	
 15933  004B82  D7EE               	goto	l7527
 15934  004B84                     __end_of_strcpy:
 15935                           	opt stack 0
 15936                           tblptru	equ	0xFF8
 15937                           tblptrh	equ	0xFF7
 15938                           tblptrl	equ	0xFF6
 15939                           tablat	equ	0xFF5
 15940                           prodh	equ	0xFF4
 15941                           prodl	equ	0xFF3
 15942                           intcon	equ	0xFF2
 15943                           postinc0	equ	0xFEE
 15944                           wreg	equ	0xFE8
 15945                           indf1	equ	0xFE7
 15946                           postinc1	equ	0xFE6
 15947                           postdec1	equ	0xFE5
 15948                           fsr1h	equ	0xFE2
 15949                           fsr1l	equ	0xFE1
 15950                           indf2	equ	0xFDF
 15951                           postinc2	equ	0xFDE
 15952                           postdec2	equ	0xFDD
 15953                           fsr2h	equ	0xFDA
 15954                           fsr2l	equ	0xFD9
 15955                           status	equ	0xFD8
 15956                           
 15957 ;; *************** function _get_over_write_data *****************
 15958 ;; Defined at:
 15959 ;;		line 107 in file "cmd_consol.c"
 15960 ;; Parameters:    Size  Location     Type
 15961 ;;  str             2   56[COMRAM] PTR unsigned char 
 15962 ;;		 -> uart_str(150), NULL(0), 
 15963 ;;  over_write_d    2   58[COMRAM] PTR unsigned char 
 15964 ;;		 -> cmd_data(53), 
 15965 ;; Auto vars:     Size  Location     Type
 15966 ;;  i               2   62[COMRAM] int 
 15967 ;;  over_write      1   61[COMRAM] unsigned char 
 15968 ;; Return value:  Size  Location     Type
 15969 ;;                  1    wreg      unsigned char 
 15970 ;; Registers used:
 15971 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15972 ;; Tracked objects:
 15973 ;;		On entry : 0/0
 15974 ;;		On exit  : 0/0
 15975 ;;		Unchanged: 0/0
 15976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15977 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15978 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15979 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15980 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15981 ;;Total ram usage:        8 bytes
 15982 ;; Hardware stack levels used:    1
 15983 ;; Hardware stack levels required when called:    9
 15984 ;; This function calls:
 15985 ;;		_isdigit
 15986 ;;		_printf
 15987 ;;		_strlen
 15988 ;; This function is called by:
 15989 ;;		_parse_cmd_str
 15990 ;; This function uses a non-reentrant model
 15991 ;;
 15992                           
 15993                           	psect	text68
 15994  003F22                     __ptext68:
 15995                           	opt stack 0
 15996  003F22                     _get_over_write_data:
 15997                           	opt stack 19
 15998                           
 15999                           ;cmd_consol.c: 108: char over_write = 0;
 16000                           
 16001                           ;incstack = 0
 16002  003F22  0E00               	movlw	0
 16003  003F24  6E3E               	movwf	get_over_write_data@over_write,c
 16004                           
 16005                           ;cmd_consol.c: 109: int i = 0;
 16006  003F26  0E00               	movlw	0
 16007  003F28  6E40               	movwf	get_over_write_data@i+1,c
 16008  003F2A  0E00               	movlw	0
 16009  003F2C  6E3F               	movwf	get_over_write_data@i,c
 16010                           
 16011                           ;cmd_consol.c: 110: for (i = 0; i < strlen(str); i++) {
 16012  003F2E  0E00               	movlw	0
 16013  003F30  6E40               	movwf	get_over_write_data@i+1,c
 16014  003F32  0E00               	movlw	0
 16015  003F34  6E3F               	movwf	get_over_write_data@i,c
 16016  003F36  D024               	goto	l8513
 16017  003F38                     l8501:
 16018                           
 16019                           ;cmd_consol.c: 111: if (isdigit(str[i]) == 1) {
 16020  003F38  503F               	movf	get_over_write_data@i,w,c
 16021  003F3A  2439               	addwf	get_over_write_data@str,w,c
 16022  003F3C  6ED9               	movwf	fsr2l,c
 16023  003F3E  5040               	movf	get_over_write_data@i+1,w,c
 16024  003F40  203A               	addwfc	get_over_write_data@str+1,w,c
 16025  003F42  6EDA               	movwf	fsr2h,c
 16026  003F44  50DF               	movf	indf2,w,c
 16027  003F46  EC7F  F026         	call	_isdigit
 16028  003F4A  A0D8               	btfss	status,0,c
 16029  003F4C  D00F               	goto	l8505
 16030                           
 16031                           ;cmd_consol.c: 112: over_write = over_write * 10 + (str[i] - '0');
 16032  003F4E  503F               	movf	get_over_write_data@i,w,c
 16033  003F50  2439               	addwf	get_over_write_data@str,w,c
 16034  003F52  6ED9               	movwf	fsr2l,c
 16035  003F54  5040               	movf	get_over_write_data@i+1,w,c
 16036  003F56  203A               	addwfc	get_over_write_data@str+1,w,c
 16037  003F58  6EDA               	movwf	fsr2h,c
 16038  003F5A  50DF               	movf	indf2,w,c
 16039  003F5C  6E3D               	movwf	??_get_over_write_data& (0+255),c
 16040  003F5E  503E               	movf	get_over_write_data@over_write,w,c
 16041  003F60  0D0A               	mullw	10
 16042  003F62  50F3               	movf	prodl,w,c
 16043  003F64  243D               	addwf	??_get_over_write_data,w,c
 16044  003F66  0FD0               	addlw	208
 16045  003F68  6E3E               	movwf	get_over_write_data@over_write,c
 16046                           
 16047                           ;cmd_consol.c: 113: } else {
 16048  003F6A  D008               	goto	l8511
 16049  003F6C                     l8505:
 16050                           
 16051                           ;cmd_consol.c: 114: *over_write_data = 0;
 16052  003F6C  C03B  FFD9         	movff	get_over_write_data@over_write_data,fsr2l
 16053  003F70  C03C  FFDA         	movff	get_over_write_data@over_write_data+1,fsr2h
 16054  003F74  0E00               	movlw	0
 16055  003F76  6EDF               	movwf	indf2,c
 16056                           
 16057                           ;cmd_consol.c: 115: return 0;
 16058  003F78  0E00               	movlw	0
 16059  003F7A  0012               	return	
 16060  003F7C                     l8511:
 16061  003F7C  4A3F               	infsnz	get_over_write_data@i,f,c
 16062  003F7E  2A40               	incf	get_over_write_data@i+1,f,c
 16063  003F80                     l8513:
 16064  003F80  C039  F01E         	movff	get_over_write_data@str,strlen@s
 16065  003F84  C03A  F01F         	movff	get_over_write_data@str+1,strlen@s+1
 16066  003F88  ECC2  F022         	call	_strlen	;wreg free
 16067  003F8C  501E               	movf	?_strlen,w,c
 16068  003F8E  5C3F               	subwf	get_over_write_data@i,w,c
 16069  003F90  501F               	movf	?_strlen+1,w,c
 16070  003F92  5840               	subwfb	get_over_write_data@i+1,w,c
 16071  003F94  A0D8               	btfss	status,0,c
 16072  003F96  D7D0               	goto	l8501
 16073                           
 16074                           ;cmd_consol.c: 116: }
 16075                           ;cmd_consol.c: 117: }
 16076                           ;cmd_consol.c: 119: printf("over_write = %d\r\n", over_write);
 16077  003F98  0ED5               	movlw	low STR_31
 16078  003F9A  6E2B               	movwf	printf@f,c
 16079  003F9C  0EFD               	movlw	high STR_31
 16080  003F9E  6E2C               	movwf	printf@f+1,c
 16081  003FA0  C03E  F02D         	movff	get_over_write_data@over_write,?_printf+2
 16082  003FA4  6A2E               	clrf	?_printf+3,c
 16083  003FA6  EC12  F025         	call	_printf	;wreg free
 16084                           
 16085                           ;cmd_consol.c: 121: *over_write_data = over_write;
 16086  003FAA  C03B  FFD9         	movff	get_over_write_data@over_write_data,fsr2l
 16087  003FAE  C03C  FFDA         	movff	get_over_write_data@over_write_data+1,fsr2h
 16088  003FB2  C03E  FFDF         	movff	get_over_write_data@over_write,indf2
 16089                           
 16090                           ;cmd_consol.c: 122: return 1;
 16091  003FB6  0E01               	movlw	1
 16092  003FB8  0012               	return	
 16093  003FBA                     __end_of_get_over_write_data:
 16094                           	opt stack 0
 16095                           tblptru	equ	0xFF8
 16096                           tblptrh	equ	0xFF7
 16097                           tblptrl	equ	0xFF6
 16098                           tablat	equ	0xFF5
 16099                           prodh	equ	0xFF4
 16100                           prodl	equ	0xFF3
 16101                           intcon	equ	0xFF2
 16102                           postinc0	equ	0xFEE
 16103                           wreg	equ	0xFE8
 16104                           indf1	equ	0xFE7
 16105                           postinc1	equ	0xFE6
 16106                           postdec1	equ	0xFE5
 16107                           fsr1h	equ	0xFE2
 16108                           fsr1l	equ	0xFE1
 16109                           indf2	equ	0xFDF
 16110                           postinc2	equ	0xFDE
 16111                           postdec2	equ	0xFDD
 16112                           fsr2h	equ	0xFDA
 16113                           fsr2l	equ	0xFD9
 16114                           status	equ	0xFD8
 16115                           
 16116 ;; *************** function _get_dis_frq *****************
 16117 ;; Defined at:
 16118 ;;		line 87 in file "cmd_consol.c"
 16119 ;; Parameters:    Size  Location     Type
 16120 ;;  str             2   56[COMRAM] PTR unsigned char 
 16121 ;;		 -> uart_str(150), NULL(0), 
 16122 ;;  data_frq        2   58[COMRAM] PTR unsigned char 
 16123 ;;		 -> cmd_data(53), 
 16124 ;; Auto vars:     Size  Location     Type
 16125 ;;  i               2   62[COMRAM] int 
 16126 ;;  frq             1   61[COMRAM] unsigned char 
 16127 ;; Return value:  Size  Location     Type
 16128 ;;                  1    wreg      unsigned char 
 16129 ;; Registers used:
 16130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16131 ;; Tracked objects:
 16132 ;;		On entry : 0/0
 16133 ;;		On exit  : 0/0
 16134 ;;		Unchanged: 0/0
 16135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16137 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16138 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16139 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16140 ;;Total ram usage:        8 bytes
 16141 ;; Hardware stack levels used:    1
 16142 ;; Hardware stack levels required when called:    9
 16143 ;; This function calls:
 16144 ;;		_isdigit
 16145 ;;		_printf
 16146 ;;		_strlen
 16147 ;; This function is called by:
 16148 ;;		_parse_cmd_str
 16149 ;; This function uses a non-reentrant model
 16150 ;;
 16151                           
 16152                           	psect	text69
 16153  003FBA                     __ptext69:
 16154                           	opt stack 0
 16155  003FBA                     _get_dis_frq:
 16156                           	opt stack 19
 16157                           
 16158                           ;cmd_consol.c: 88: char frq = 0;
 16159                           
 16160                           ;incstack = 0
 16161  003FBA  0E00               	movlw	0
 16162  003FBC  6E3E               	movwf	get_dis_frq@frq,c
 16163                           
 16164                           ;cmd_consol.c: 89: int i = 0;
 16165  003FBE  0E00               	movlw	0
 16166  003FC0  6E40               	movwf	get_dis_frq@i+1,c
 16167  003FC2  0E00               	movlw	0
 16168  003FC4  6E3F               	movwf	get_dis_frq@i,c
 16169                           
 16170                           ;cmd_consol.c: 90: for (i = 0; i < strlen(str); i++) {
 16171  003FC6  0E00               	movlw	0
 16172  003FC8  6E40               	movwf	get_dis_frq@i+1,c
 16173  003FCA  0E00               	movlw	0
 16174  003FCC  6E3F               	movwf	get_dis_frq@i,c
 16175  003FCE  D024               	goto	l8489
 16176  003FD0                     l8477:
 16177                           
 16178                           ;cmd_consol.c: 91: if (isdigit(str[i]) == 1) {
 16179  003FD0  503F               	movf	get_dis_frq@i,w,c
 16180  003FD2  2439               	addwf	get_dis_frq@str,w,c
 16181  003FD4  6ED9               	movwf	fsr2l,c
 16182  003FD6  5040               	movf	get_dis_frq@i+1,w,c
 16183  003FD8  203A               	addwfc	get_dis_frq@str+1,w,c
 16184  003FDA  6EDA               	movwf	fsr2h,c
 16185  003FDC  50DF               	movf	indf2,w,c
 16186  003FDE  EC7F  F026         	call	_isdigit
 16187  003FE2  A0D8               	btfss	status,0,c
 16188  003FE4  D00F               	goto	l8481
 16189                           
 16190                           ;cmd_consol.c: 92: frq = frq * 10 + (str[i] - '0');
 16191  003FE6  503F               	movf	get_dis_frq@i,w,c
 16192  003FE8  2439               	addwf	get_dis_frq@str,w,c
 16193  003FEA  6ED9               	movwf	fsr2l,c
 16194  003FEC  5040               	movf	get_dis_frq@i+1,w,c
 16195  003FEE  203A               	addwfc	get_dis_frq@str+1,w,c
 16196  003FF0  6EDA               	movwf	fsr2h,c
 16197  003FF2  50DF               	movf	indf2,w,c
 16198  003FF4  6E3D               	movwf	??_get_dis_frq& (0+255),c
 16199  003FF6  503E               	movf	get_dis_frq@frq,w,c
 16200  003FF8  0D0A               	mullw	10
 16201  003FFA  50F3               	movf	prodl,w,c
 16202  003FFC  243D               	addwf	??_get_dis_frq,w,c
 16203  003FFE  0FD0               	addlw	208
 16204  004000  6E3E               	movwf	get_dis_frq@frq,c
 16205                           
 16206                           ;cmd_consol.c: 93: } else {
 16207  004002  D008               	goto	l8487
 16208  004004                     l8481:
 16209                           
 16210                           ;cmd_consol.c: 94: *data_frq = 1;
 16211  004004  C03B  FFD9         	movff	get_dis_frq@data_frq,fsr2l
 16212  004008  C03C  FFDA         	movff	get_dis_frq@data_frq+1,fsr2h
 16213  00400C  0E01               	movlw	1
 16214  00400E  6EDF               	movwf	indf2,c
 16215                           
 16216                           ;cmd_consol.c: 96: return 0;
 16217  004010  0E00               	movlw	0
 16218  004012  0012               	return	
 16219  004014                     l8487:
 16220  004014  4A3F               	infsnz	get_dis_frq@i,f,c
 16221  004016  2A40               	incf	get_dis_frq@i+1,f,c
 16222  004018                     l8489:
 16223  004018  C039  F01E         	movff	get_dis_frq@str,strlen@s
 16224  00401C  C03A  F01F         	movff	get_dis_frq@str+1,strlen@s+1
 16225  004020  ECC2  F022         	call	_strlen	;wreg free
 16226  004024  501E               	movf	?_strlen,w,c
 16227  004026  5C3F               	subwf	get_dis_frq@i,w,c
 16228  004028  501F               	movf	?_strlen+1,w,c
 16229  00402A  5840               	subwfb	get_dis_frq@i+1,w,c
 16230  00402C  A0D8               	btfss	status,0,c
 16231  00402E  D7D0               	goto	l8477
 16232                           
 16233                           ;cmd_consol.c: 97: }
 16234                           ;cmd_consol.c: 98: }
 16235                           ;cmd_consol.c: 100: printf("display_frq = %d\r\n", frq);
 16236  004030  0E9D               	movlw	low STR_30
 16237  004032  6E2B               	movwf	printf@f,c
 16238  004034  0EFD               	movlw	high STR_30
 16239  004036  6E2C               	movwf	printf@f+1,c
 16240  004038  C03E  F02D         	movff	get_dis_frq@frq,?_printf+2
 16241  00403C  6A2E               	clrf	?_printf+3,c
 16242  00403E  EC12  F025         	call	_printf	;wreg free
 16243                           
 16244                           ;cmd_consol.c: 103: *data_frq = frq;
 16245  004042  C03B  FFD9         	movff	get_dis_frq@data_frq,fsr2l
 16246  004046  C03C  FFDA         	movff	get_dis_frq@data_frq+1,fsr2h
 16247  00404A  C03E  FFDF         	movff	get_dis_frq@frq,indf2
 16248                           
 16249                           ;cmd_consol.c: 104: return 1;
 16250  00404E  0E01               	movlw	1
 16251  004050  0012               	return	
 16252  004052                     __end_of_get_dis_frq:
 16253                           	opt stack 0
 16254                           tblptru	equ	0xFF8
 16255                           tblptrh	equ	0xFF7
 16256                           tblptrl	equ	0xFF6
 16257                           tablat	equ	0xFF5
 16258                           prodh	equ	0xFF4
 16259                           prodl	equ	0xFF3
 16260                           intcon	equ	0xFF2
 16261                           postinc0	equ	0xFEE
 16262                           wreg	equ	0xFE8
 16263                           indf1	equ	0xFE7
 16264                           postinc1	equ	0xFE6
 16265                           postdec1	equ	0xFE5
 16266                           fsr1h	equ	0xFE2
 16267                           fsr1l	equ	0xFE1
 16268                           indf2	equ	0xFDF
 16269                           postinc2	equ	0xFDE
 16270                           postdec2	equ	0xFDD
 16271                           fsr2h	equ	0xFDA
 16272                           fsr2l	equ	0xFD9
 16273                           status	equ	0xFD8
 16274                           
 16275 ;; *************** function _get_direction *****************
 16276 ;; Defined at:
 16277 ;;		line 66 in file "cmd_consol.c"
 16278 ;; Parameters:    Size  Location     Type
 16279 ;;  str             2   56[COMRAM] PTR unsigned char 
 16280 ;;		 -> uart_str(150), NULL(0), 
 16281 ;;  data_directi    2   58[COMRAM] PTR unsigned char 
 16282 ;;		 -> cmd_data(53), 
 16283 ;; Auto vars:     Size  Location     Type
 16284 ;;  i               2   61[COMRAM] int 
 16285 ;;  direction       1   63[COMRAM] unsigned char 
 16286 ;; Return value:  Size  Location     Type
 16287 ;;                  1    wreg      unsigned char 
 16288 ;; Registers used:
 16289 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16290 ;; Tracked objects:
 16291 ;;		On entry : 0/0
 16292 ;;		On exit  : 0/0
 16293 ;;		Unchanged: 0/0
 16294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16296 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16297 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16298 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16299 ;;Total ram usage:        8 bytes
 16300 ;; Hardware stack levels used:    1
 16301 ;; Hardware stack levels required when called:    9
 16302 ;; This function calls:
 16303 ;;		_isdigit
 16304 ;;		_printf
 16305 ;;		_strlen
 16306 ;; This function is called by:
 16307 ;;		_parse_cmd_str
 16308 ;; This function uses a non-reentrant model
 16309 ;;
 16310                           
 16311                           	psect	text70
 16312  003DDE                     __ptext70:
 16313                           	opt stack 0
 16314  003DDE                     _get_direction:
 16315                           	opt stack 19
 16316                           
 16317                           ;cmd_consol.c: 67: char direction = 0;
 16318                           
 16319                           ;incstack = 0
 16320  003DDE  0E00               	movlw	0
 16321  003DE0  6E40               	movwf	get_direction@direction,c
 16322                           
 16323                           ;cmd_consol.c: 68: int i = 0;
 16324  003DE2  0E00               	movlw	0
 16325  003DE4  6E3F               	movwf	get_direction@i+1,c
 16326  003DE6  0E00               	movlw	0
 16327  003DE8  6E3E               	movwf	get_direction@i,c
 16328                           
 16329                           ;cmd_consol.c: 69: for (i = 0; i < strlen(str); i++) {
 16330  003DEA  0E00               	movlw	0
 16331  003DEC  6E3F               	movwf	get_direction@i+1,c
 16332  003DEE  0E00               	movlw	0
 16333  003DF0  6E3E               	movwf	get_direction@i,c
 16334  003DF2  D01E               	goto	l8455
 16335  003DF4                     l8445:
 16336                           
 16337                           ;cmd_consol.c: 70: if (isdigit(str[i]) == 1)
 16338  003DF4  503E               	movf	get_direction@i,w,c
 16339  003DF6  2439               	addwf	get_direction@str,w,c
 16340  003DF8  6ED9               	movwf	fsr2l,c
 16341  003DFA  503F               	movf	get_direction@i+1,w,c
 16342  003DFC  203A               	addwfc	get_direction@str+1,w,c
 16343  003DFE  6EDA               	movwf	fsr2h,c
 16344  003E00  50DF               	movf	indf2,w,c
 16345  003E02  EC7F  F026         	call	_isdigit
 16346  003E06  A0D8               	btfss	status,0,c
 16347  003E08  D00F               	goto	l8449
 16348                           
 16349                           ;cmd_consol.c: 71: direction = direction * 10 + (str[i] - '0');
 16350  003E0A  503E               	movf	get_direction@i,w,c
 16351  003E0C  2439               	addwf	get_direction@str,w,c
 16352  003E0E  6ED9               	movwf	fsr2l,c
 16353  003E10  503F               	movf	get_direction@i+1,w,c
 16354  003E12  203A               	addwfc	get_direction@str+1,w,c
 16355  003E14  6EDA               	movwf	fsr2h,c
 16356  003E16  50DF               	movf	indf2,w,c
 16357  003E18  6E3D               	movwf	??_get_direction& (0+255),c
 16358  003E1A  5040               	movf	get_direction@direction,w,c
 16359  003E1C  0D0A               	mullw	10
 16360  003E1E  50F3               	movf	prodl,w,c
 16361  003E20  243D               	addwf	??_get_direction,w,c
 16362  003E22  0FD0               	addlw	208
 16363  003E24  6E40               	movwf	get_direction@direction,c
 16364  003E26  D002               	goto	l8453
 16365  003E28                     l8449:
 16366                           
 16367                           ;cmd_consol.c: 72: else
 16368                           ;cmd_consol.c: 73: return 0;
 16369  003E28  0E00               	movlw	0
 16370  003E2A  0012               	return	
 16371  003E2C                     l8453:
 16372  003E2C  4A3E               	infsnz	get_direction@i,f,c
 16373  003E2E  2A3F               	incf	get_direction@i+1,f,c
 16374  003E30                     l8455:
 16375  003E30  C039  F01E         	movff	get_direction@str,strlen@s
 16376  003E34  C03A  F01F         	movff	get_direction@str+1,strlen@s+1
 16377  003E38  ECC2  F022         	call	_strlen	;wreg free
 16378  003E3C  501E               	movf	?_strlen,w,c
 16379  003E3E  5C3E               	subwf	get_direction@i,w,c
 16380  003E40  501F               	movf	?_strlen+1,w,c
 16381  003E42  583F               	subwfb	get_direction@i+1,w,c
 16382  003E44  A0D8               	btfss	status,0,c
 16383  003E46  D7D6               	goto	l8445
 16384                           
 16385                           ;cmd_consol.c: 74: }
 16386                           ;cmd_consol.c: 76: printf("direction = %d\r\n", direction);
 16387  003E48  0EF9               	movlw	low STR_29
 16388  003E4A  6E2B               	movwf	printf@f,c
 16389  003E4C  0EFD               	movlw	high STR_29
 16390  003E4E  6E2C               	movwf	printf@f+1,c
 16391  003E50  C040  F02D         	movff	get_direction@direction,?_printf+2
 16392  003E54  6A2E               	clrf	?_printf+3,c
 16393  003E56  EC12  F025         	call	_printf	;wreg free
 16394                           
 16395                           ;cmd_consol.c: 78: if (direction >= clcd_config_data.clcd_max_row) {
 16396  003E5A  504A               	movf	_clcd_config_data+1,w,c
 16397  003E5C  5C40               	subwf	get_direction@direction,w,c
 16398  003E5E  A0D8               	btfss	status,0,c
 16399  003E60  D008               	goto	l8469
 16400                           
 16401                           ;cmd_consol.c: 79: *data_direction = -1;
 16402  003E62  C03B  FFD9         	movff	get_direction@data_direction,fsr2l
 16403  003E66  C03C  FFDA         	movff	get_direction@data_direction+1,fsr2h
 16404  003E6A  0EFF               	movlw	255
 16405  003E6C  6EDF               	movwf	indf2,c
 16406                           
 16407                           ;cmd_consol.c: 80: return 0;
 16408  003E6E  0E00               	movlw	0
 16409                           
 16410                           ;cmd_consol.c: 81: } else {
 16411  003E70  0012               	return	
 16412  003E72                     l8469:
 16413                           
 16414                           ;cmd_consol.c: 82: *data_direction = direction;
 16415  003E72  C03B  FFD9         	movff	get_direction@data_direction,fsr2l
 16416  003E76  C03C  FFDA         	movff	get_direction@data_direction+1,fsr2h
 16417  003E7A  C040  FFDF         	movff	get_direction@direction,indf2
 16418                           
 16419                           ;cmd_consol.c: 83: return 1;
 16420  003E7E  0E01               	movlw	1
 16421  003E80  0012               	return	
 16422  003E82                     __end_of_get_direction:
 16423                           	opt stack 0
 16424                           tblptru	equ	0xFF8
 16425                           tblptrh	equ	0xFF7
 16426                           tblptrl	equ	0xFF6
 16427                           tablat	equ	0xFF5
 16428                           prodh	equ	0xFF4
 16429                           prodl	equ	0xFF3
 16430                           intcon	equ	0xFF2
 16431                           postinc0	equ	0xFEE
 16432                           wreg	equ	0xFE8
 16433                           indf1	equ	0xFE7
 16434                           postinc1	equ	0xFE6
 16435                           postdec1	equ	0xFE5
 16436                           fsr1h	equ	0xFE2
 16437                           fsr1l	equ	0xFE1
 16438                           indf2	equ	0xFDF
 16439                           postinc2	equ	0xFDE
 16440                           postdec2	equ	0xFDD
 16441                           fsr2h	equ	0xFDA
 16442                           fsr2l	equ	0xFD9
 16443                           status	equ	0xFD8
 16444                           
 16445 ;; *************** function _collect_row *****************
 16446 ;; Defined at:
 16447 ;;		line 17 in file "cmd_consol.c"
 16448 ;; Parameters:    Size  Location     Type
 16449 ;;  str             2   56[COMRAM] PTR unsigned char 
 16450 ;;		 -> uart_str(150), NULL(0), 
 16451 ;;  data_row        2   58[COMRAM] PTR unsigned char 
 16452 ;;		 -> cmd_data(53), 
 16453 ;; Auto vars:     Size  Location     Type
 16454 ;;  i               2   61[COMRAM] int 
 16455 ;;  row             1   63[COMRAM] unsigned char 
 16456 ;; Return value:  Size  Location     Type
 16457 ;;                  1    wreg      void 
 16458 ;; Registers used:
 16459 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16460 ;; Tracked objects:
 16461 ;;		On entry : 0/0
 16462 ;;		On exit  : 0/0
 16463 ;;		Unchanged: 0/0
 16464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16465 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16466 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16467 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16468 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16469 ;;Total ram usage:        8 bytes
 16470 ;; Hardware stack levels used:    1
 16471 ;; Hardware stack levels required when called:    9
 16472 ;; This function calls:
 16473 ;;		_isdigit
 16474 ;;		_printf
 16475 ;;		_strlen
 16476 ;; This function is called by:
 16477 ;;		_parse_cmd_str
 16478 ;; This function uses a non-reentrant model
 16479 ;;
 16480                           
 16481                           	psect	text71
 16482  003C82                     __ptext71:
 16483                           	opt stack 0
 16484  003C82                     _collect_row:
 16485                           	opt stack 19
 16486                           
 16487                           ;cmd_consol.c: 19: printf("row1 = %s\r\n", str);
 16488                           
 16489                           ;incstack = 0
 16490  003C82  0EB2               	movlw	low STR_27
 16491  003C84  6E2B               	movwf	printf@f,c
 16492  003C86  0EFE               	movlw	high STR_27
 16493  003C88  6E2C               	movwf	printf@f+1,c
 16494  003C8A  C039  F02D         	movff	collect_row@str,?_printf+2
 16495  003C8E  C03A  F02E         	movff	collect_row@str+1,?_printf+3
 16496  003C92  EC12  F025         	call	_printf	;wreg free
 16497                           
 16498                           ;cmd_consol.c: 21: char row = 0;
 16499  003C96  0E00               	movlw	0
 16500  003C98  6E40               	movwf	collect_row@row,c
 16501                           
 16502                           ;cmd_consol.c: 22: int i = 0;
 16503  003C9A  0E00               	movlw	0
 16504  003C9C  6E3F               	movwf	collect_row@i+1,c
 16505  003C9E  0E00               	movlw	0
 16506  003CA0  6E3E               	movwf	collect_row@i,c
 16507                           
 16508                           ;cmd_consol.c: 23: for (i = 0; i < strlen(str); i++) {
 16509  003CA2  0E00               	movlw	0
 16510  003CA4  6E3F               	movwf	collect_row@i+1,c
 16511  003CA6  0E00               	movlw	0
 16512  003CA8  6E3E               	movwf	collect_row@i,c
 16513  003CAA  D01B               	goto	l8397
 16514  003CAC                     l8391:
 16515                           
 16516                           ;cmd_consol.c: 24: if (isdigit(str[i]) == 1)
 16517  003CAC  503E               	movf	collect_row@i,w,c
 16518  003CAE  2439               	addwf	collect_row@str,w,c
 16519  003CB0  6ED9               	movwf	fsr2l,c
 16520  003CB2  503F               	movf	collect_row@i+1,w,c
 16521  003CB4  203A               	addwfc	collect_row@str+1,w,c
 16522  003CB6  6EDA               	movwf	fsr2h,c
 16523  003CB8  50DF               	movf	indf2,w,c
 16524  003CBA  EC7F  F026         	call	_isdigit
 16525  003CBE  A0D8               	btfss	status,0,c
 16526  003CC0  0012               	return	
 16527                           
 16528                           ;cmd_consol.c: 25: row = row * 10 + (str[i] - '0');
 16529  003CC2  503E               	movf	collect_row@i,w,c
 16530  003CC4  2439               	addwf	collect_row@str,w,c
 16531  003CC6  6ED9               	movwf	fsr2l,c
 16532  003CC8  503F               	movf	collect_row@i+1,w,c
 16533  003CCA  203A               	addwfc	collect_row@str+1,w,c
 16534  003CCC  6EDA               	movwf	fsr2h,c
 16535  003CCE  50DF               	movf	indf2,w,c
 16536  003CD0  6E3D               	movwf	??_collect_row& (0+255),c
 16537  003CD2  5040               	movf	collect_row@row,w,c
 16538  003CD4  0D0A               	mullw	10
 16539  003CD6  50F3               	movf	prodl,w,c
 16540  003CD8  243D               	addwf	??_collect_row,w,c
 16541  003CDA  0FD0               	addlw	208
 16542  003CDC  6E40               	movwf	collect_row@row,c
 16543                           
 16544                           ;cmd_consol.c: 26: else
 16545                           ;cmd_consol.c: 27: return;
 16546  003CDE  4A3E               	infsnz	collect_row@i,f,c
 16547  003CE0  2A3F               	incf	collect_row@i+1,f,c
 16548  003CE2                     l8397:
 16549  003CE2  C039  F01E         	movff	collect_row@str,strlen@s
 16550  003CE6  C03A  F01F         	movff	collect_row@str+1,strlen@s+1
 16551  003CEA  ECC2  F022         	call	_strlen	;wreg free
 16552  003CEE  501E               	movf	?_strlen,w,c
 16553  003CF0  5C3E               	subwf	collect_row@i,w,c
 16554  003CF2  501F               	movf	?_strlen+1,w,c
 16555  003CF4  583F               	subwfb	collect_row@i+1,w,c
 16556  003CF6  A0D8               	btfss	status,0,c
 16557  003CF8  D7D9               	goto	l8391
 16558                           
 16559                           ;cmd_consol.c: 28: }
 16560                           ;cmd_consol.c: 30: printf("row2 = %d\r\n", row);
 16561  003CFA  0E8E               	movlw	low STR_28
 16562  003CFC  6E2B               	movwf	printf@f,c
 16563  003CFE  0EFE               	movlw	high STR_28
 16564  003D00  6E2C               	movwf	printf@f+1,c
 16565  003D02  C040  F02D         	movff	collect_row@row,?_printf+2
 16566  003D06  6A2E               	clrf	?_printf+3,c
 16567  003D08  EC12  F025         	call	_printf	;wreg free
 16568                           
 16569                           ;cmd_consol.c: 32: if (row >= clcd_config_data.clcd_max_row) {
 16570  003D0C  504A               	movf	_clcd_config_data+1,w,c
 16571  003D0E  5C40               	subwf	collect_row@row,w,c
 16572  003D10  A0D8               	btfss	status,0,c
 16573  003D12  D007               	goto	l8405
 16574                           
 16575                           ;cmd_consol.c: 33: *data_row = -1;
 16576  003D14  C03B  FFD9         	movff	collect_row@data_row,fsr2l
 16577  003D18  C03C  FFDA         	movff	collect_row@data_row+1,fsr2h
 16578  003D1C  0EFF               	movlw	255
 16579  003D1E  6EDF               	movwf	indf2,c
 16580                           
 16581                           ;cmd_consol.c: 34: } else {
 16582  003D20  0012               	return	
 16583  003D22                     l8405:
 16584                           
 16585                           ;cmd_consol.c: 35: *data_row = row;
 16586  003D22  C03B  FFD9         	movff	collect_row@data_row,fsr2l
 16587  003D26  C03C  FFDA         	movff	collect_row@data_row+1,fsr2h
 16588  003D2A  C040  FFDF         	movff	collect_row@row,indf2
 16589  003D2E  0012               	return	
 16590  003D30                     __end_of_collect_row:
 16591                           	opt stack 0
 16592                           tblptru	equ	0xFF8
 16593                           tblptrh	equ	0xFF7
 16594                           tblptrl	equ	0xFF6
 16595                           tablat	equ	0xFF5
 16596                           prodh	equ	0xFF4
 16597                           prodl	equ	0xFF3
 16598                           intcon	equ	0xFF2
 16599                           postinc0	equ	0xFEE
 16600                           wreg	equ	0xFE8
 16601                           indf1	equ	0xFE7
 16602                           postinc1	equ	0xFE6
 16603                           postdec1	equ	0xFE5
 16604                           fsr1h	equ	0xFE2
 16605                           fsr1l	equ	0xFE1
 16606                           indf2	equ	0xFDF
 16607                           postinc2	equ	0xFDE
 16608                           postdec2	equ	0xFDD
 16609                           fsr2h	equ	0xFDA
 16610                           fsr2l	equ	0xFD9
 16611                           status	equ	0xFD8
 16612                           
 16613 ;; *************** function _collect_column *****************
 16614 ;; Defined at:
 16615 ;;		line 125 in file "cmd_consol.c"
 16616 ;; Parameters:    Size  Location     Type
 16617 ;;  str             2   56[COMRAM] PTR unsigned char 
 16618 ;;		 -> uart_str(150), NULL(0), 
 16619 ;;  data_column     2   58[COMRAM] PTR unsigned char 
 16620 ;;		 -> cmd_data(53), 
 16621 ;; Auto vars:     Size  Location     Type
 16622 ;;  i               2   61[COMRAM] int 
 16623 ;;  column          1   63[COMRAM] unsigned char 
 16624 ;; Return value:  Size  Location     Type
 16625 ;;                  1    wreg      void 
 16626 ;; Registers used:
 16627 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16628 ;; Tracked objects:
 16629 ;;		On entry : 0/0
 16630 ;;		On exit  : 0/0
 16631 ;;		Unchanged: 0/0
 16632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16634 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16635 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16636 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16637 ;;Total ram usage:        8 bytes
 16638 ;; Hardware stack levels used:    1
 16639 ;; Hardware stack levels required when called:    9
 16640 ;; This function calls:
 16641 ;;		_isdigit
 16642 ;;		_printf
 16643 ;;		_strlen
 16644 ;; This function is called by:
 16645 ;;		_parse_cmd_str
 16646 ;; This function uses a non-reentrant model
 16647 ;;
 16648                           
 16649                           	psect	text72
 16650  003D30                     __ptext72:
 16651                           	opt stack 0
 16652  003D30                     _collect_column:
 16653                           	opt stack 19
 16654                           
 16655                           ;cmd_consol.c: 127: printf("col1 = %s\r\n", str);
 16656                           
 16657                           ;incstack = 0
 16658  003D30  0EA6               	movlw	low STR_32
 16659  003D32  6E2B               	movwf	printf@f,c
 16660  003D34  0EFE               	movlw	high STR_32
 16661  003D36  6E2C               	movwf	printf@f+1,c
 16662  003D38  C039  F02D         	movff	collect_column@str,?_printf+2
 16663  003D3C  C03A  F02E         	movff	collect_column@str+1,?_printf+3
 16664  003D40  EC12  F025         	call	_printf	;wreg free
 16665                           
 16666                           ;cmd_consol.c: 129: int i = 0;
 16667  003D44  0E00               	movlw	0
 16668  003D46  6E3F               	movwf	collect_column@i+1,c
 16669  003D48  0E00               	movlw	0
 16670  003D4A  6E3E               	movwf	collect_column@i,c
 16671                           
 16672                           ;cmd_consol.c: 130: char column = 0;
 16673  003D4C  0E00               	movlw	0
 16674  003D4E  6E40               	movwf	collect_column@column,c
 16675                           
 16676                           ;cmd_consol.c: 131: for (i = 0; i < strlen(str); i++) {
 16677  003D50  0E00               	movlw	0
 16678  003D52  6E3F               	movwf	collect_column@i+1,c
 16679  003D54  0E00               	movlw	0
 16680  003D56  6E3E               	movwf	collect_column@i,c
 16681  003D58  D01B               	goto	l8537
 16682  003D5A                     l8531:
 16683                           
 16684                           ;cmd_consol.c: 132: if (isdigit(str[i]) == 1) {
 16685  003D5A  503E               	movf	collect_column@i,w,c
 16686  003D5C  2439               	addwf	collect_column@str,w,c
 16687  003D5E  6ED9               	movwf	fsr2l,c
 16688  003D60  503F               	movf	collect_column@i+1,w,c
 16689  003D62  203A               	addwfc	collect_column@str+1,w,c
 16690  003D64  6EDA               	movwf	fsr2h,c
 16691  003D66  50DF               	movf	indf2,w,c
 16692  003D68  EC7F  F026         	call	_isdigit
 16693  003D6C  A0D8               	btfss	status,0,c
 16694  003D6E  0012               	return	
 16695                           
 16696                           ;cmd_consol.c: 133: column = column * 10 + (str[i] - '0');
 16697  003D70  503E               	movf	collect_column@i,w,c
 16698  003D72  2439               	addwf	collect_column@str,w,c
 16699  003D74  6ED9               	movwf	fsr2l,c
 16700  003D76  503F               	movf	collect_column@i+1,w,c
 16701  003D78  203A               	addwfc	collect_column@str+1,w,c
 16702  003D7A  6EDA               	movwf	fsr2h,c
 16703  003D7C  50DF               	movf	indf2,w,c
 16704  003D7E  6E3D               	movwf	??_collect_column& (0+255),c
 16705  003D80  5040               	movf	collect_column@column,w,c
 16706  003D82  0D0A               	mullw	10
 16707  003D84  50F3               	movf	prodl,w,c
 16708  003D86  243D               	addwf	??_collect_column,w,c
 16709  003D88  0FD0               	addlw	208
 16710  003D8A  6E40               	movwf	collect_column@column,c
 16711                           
 16712                           ;cmd_consol.c: 139: return;
 16713                           
 16714                           ;cmd_consol.c: 136: } else {
 16715  003D8C  4A3E               	infsnz	collect_column@i,f,c
 16716  003D8E  2A3F               	incf	collect_column@i+1,f,c
 16717  003D90                     l8537:
 16718  003D90  C039  F01E         	movff	collect_column@str,strlen@s
 16719  003D94  C03A  F01F         	movff	collect_column@str+1,strlen@s+1
 16720  003D98  ECC2  F022         	call	_strlen	;wreg free
 16721  003D9C  501E               	movf	?_strlen,w,c
 16722  003D9E  5C3E               	subwf	collect_column@i,w,c
 16723  003DA0  501F               	movf	?_strlen+1,w,c
 16724  003DA2  583F               	subwfb	collect_column@i+1,w,c
 16725  003DA4  A0D8               	btfss	status,0,c
 16726  003DA6  D7D9               	goto	l8531
 16727                           
 16728                           ;cmd_consol.c: 140: }
 16729                           ;cmd_consol.c: 142: }
 16730                           ;cmd_consol.c: 144: printf("Col2 = %d\r\n", column);
 16731  003DA8  0E82               	movlw	low STR_33
 16732  003DAA  6E2B               	movwf	printf@f,c
 16733  003DAC  0EFE               	movlw	high STR_33
 16734  003DAE  6E2C               	movwf	printf@f+1,c
 16735  003DB0  C040  F02D         	movff	collect_column@column,?_printf+2
 16736  003DB4  6A2E               	clrf	?_printf+3,c
 16737  003DB6  EC12  F025         	call	_printf	;wreg free
 16738                           
 16739                           ;cmd_consol.c: 146: if (column >= clcd_config_data.clcd_max_col) {
 16740  003DBA  504B               	movf	_clcd_config_data+2,w,c
 16741  003DBC  5C40               	subwf	collect_column@column,w,c
 16742  003DBE  A0D8               	btfss	status,0,c
 16743  003DC0  D007               	goto	l8545
 16744                           
 16745                           ;cmd_consol.c: 147: *data_column = -1;
 16746  003DC2  C03B  FFD9         	movff	collect_column@data_column,fsr2l
 16747  003DC6  C03C  FFDA         	movff	collect_column@data_column+1,fsr2h
 16748  003DCA  0EFF               	movlw	255
 16749  003DCC  6EDF               	movwf	indf2,c
 16750                           
 16751                           ;cmd_consol.c: 148: } else {
 16752  003DCE  0012               	return	
 16753  003DD0                     l8545:
 16754                           
 16755                           ;cmd_consol.c: 149: *data_column = column;
 16756  003DD0  C03B  FFD9         	movff	collect_column@data_column,fsr2l
 16757  003DD4  C03C  FFDA         	movff	collect_column@data_column+1,fsr2h
 16758  003DD8  C040  FFDF         	movff	collect_column@column,indf2
 16759  003DDC  0012               	return	
 16760  003DDE                     __end_of_collect_column:
 16761                           	opt stack 0
 16762                           tblptru	equ	0xFF8
 16763                           tblptrh	equ	0xFF7
 16764                           tblptrl	equ	0xFF6
 16765                           tablat	equ	0xFF5
 16766                           prodh	equ	0xFF4
 16767                           prodl	equ	0xFF3
 16768                           intcon	equ	0xFF2
 16769                           postinc0	equ	0xFEE
 16770                           wreg	equ	0xFE8
 16771                           indf1	equ	0xFE7
 16772                           postinc1	equ	0xFE6
 16773                           postdec1	equ	0xFE5
 16774                           fsr1h	equ	0xFE2
 16775                           fsr1l	equ	0xFE1
 16776                           indf2	equ	0xFDF
 16777                           postinc2	equ	0xFDE
 16778                           postdec2	equ	0xFDD
 16779                           fsr2h	equ	0xFDA
 16780                           fsr2l	equ	0xFD9
 16781                           status	equ	0xFD8
 16782                           
 16783 ;; *************** function _strlen *****************
 16784 ;; Defined at:
 16785 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strlen.c"
 16786 ;; Parameters:    Size  Location     Type
 16787 ;;  s               2   29[COMRAM] PTR const unsigned char 
 16788 ;;		 -> STR_141(5), STR_139(5), uart_str(150), NULL(0), 
 16789 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1140), 
 16790 ;; Auto vars:     Size  Location     Type
 16791 ;;  cp              2   33[COMRAM] PTR const unsigned char 
 16792 ;;		 -> STR_141(5), STR_139(5), uart_str(150), NULL(0), 
 16793 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1140), 
 16794 ;; Return value:  Size  Location     Type
 16795 ;;                  2   29[COMRAM] unsigned int 
 16796 ;; Registers used:
 16797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 16798 ;; Tracked objects:
 16799 ;;		On entry : 0/0
 16800 ;;		On exit  : 0/0
 16801 ;;		Unchanged: 0/0
 16802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16803 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16804 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16805 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16806 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16807 ;;Total ram usage:        6 bytes
 16808 ;; Hardware stack levels used:    1
 16809 ;; Hardware stack levels required when called:    5
 16810 ;; This function calls:
 16811 ;;		Nothing
 16812 ;; This function is called by:
 16813 ;;		_copy_data
 16814 ;;		_copy_display_struct
 16815 ;;		_scroll_off
 16816 ;;		_make_display
 16817 ;;		_collect_row
 16818 ;;		_get_uid
 16819 ;;		_get_str
 16820 ;;		_get_direction
 16821 ;;		_get_dis_frq
 16822 ;;		_get_over_write_data
 16823 ;;		_collect_column
 16824 ;;		_parse_cmd_str
 16825 ;;		_cmd_consol_task
 16826 ;;		_strstr
 16827 ;;		_put_string
 16828 ;;		_display_string
 16829 ;; This function uses a non-reentrant model
 16830 ;;
 16831                           
 16832                           	psect	text73
 16833  004584                     __ptext73:
 16834                           	opt stack 0
 16835  004584                     _strlen:
 16836                           	opt stack 24
 16837                           
 16838                           ;incstack = 0
 16839  004584  C01E  F022         	movff	strlen@s,strlen@cp
 16840  004588  C01F  F023         	movff	strlen@s+1,strlen@cp+1
 16841  00458C  D002               	goto	l7413
 16842  00458E                     l7411:
 16843  00458E  4A22               	infsnz	strlen@cp,f,c
 16844  004590  2A23               	incf	strlen@cp+1,f,c
 16845  004592                     l7413:
 16846  004592  C022  FFF6         	movff	strlen@cp,tblptrl
 16847  004596  C023  FFF7         	movff	strlen@cp+1,tblptrh
 16848  00459A  0E00               	movlw	low (__mediumconst shr (0+16))
 16849  00459C  6EF8               	movwf	tblptru,c
 16850  00459E  0E0F               	movlw	(high __ramtop+-1)
 16851  0045A0  64F7               	cpfsgt	tblptrh,c
 16852  0045A2  D003               	bra	u6827
 16853  0045A4  0008               	tblrd		*
 16854  0045A6  50F5               	movf	tablat,w,c
 16855  0045A8  D005               	bra	u6820
 16856  0045AA                     u6827:
 16857  0045AA  CFF6 FFE1          	movff	tblptrl,fsr1l
 16858  0045AE  CFF7 FFE2          	movff	tblptrh,fsr1h
 16859  0045B2  50E7               	movf	indf1,w,c
 16860  0045B4                     u6820:
 16861  0045B4  0900               	iorlw	0
 16862  0045B6  A4D8               	btfss	status,2,c
 16863  0045B8  D7EA               	goto	l7411
 16864  0045BA  C01E  F020         	movff	strlen@s,??_strlen
 16865  0045BE  C01F  F021         	movff	strlen@s+1,??_strlen+1
 16866  0045C2  1E20               	comf	??_strlen,f,c
 16867  0045C4  1E21               	comf	??_strlen+1,f,c
 16868  0045C6  4A20               	infsnz	??_strlen,f,c
 16869  0045C8  2A21               	incf	??_strlen+1,f,c
 16870  0045CA  5022               	movf	strlen@cp,w,c
 16871  0045CC  2420               	addwf	??_strlen,w,c
 16872  0045CE  6E1E               	movwf	?_strlen,c
 16873  0045D0  5023               	movf	strlen@cp+1,w,c
 16874  0045D2  2021               	addwfc	??_strlen+1,w,c
 16875  0045D4  6E1F               	movwf	?_strlen+1,c
 16876  0045D6  0012               	return	
 16877  0045D8                     __end_of_strlen:
 16878                           	opt stack 0
 16879                           tblptru	equ	0xFF8
 16880                           tblptrh	equ	0xFF7
 16881                           tblptrl	equ	0xFF6
 16882                           tablat	equ	0xFF5
 16883                           prodh	equ	0xFF4
 16884                           prodl	equ	0xFF3
 16885                           intcon	equ	0xFF2
 16886                           postinc0	equ	0xFEE
 16887                           wreg	equ	0xFE8
 16888                           indf1	equ	0xFE7
 16889                           postinc1	equ	0xFE6
 16890                           postdec1	equ	0xFE5
 16891                           fsr1h	equ	0xFE2
 16892                           fsr1l	equ	0xFE1
 16893                           indf2	equ	0xFDF
 16894                           postinc2	equ	0xFDE
 16895                           postdec2	equ	0xFDD
 16896                           fsr2h	equ	0xFDA
 16897                           fsr2l	equ	0xFD9
 16898                           status	equ	0xFD8
 16899                           
 16900 ;; *************** function _printf *****************
 16901 ;; Defined at:
 16902 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
 16903 ;; Parameters:    Size  Location     Type
 16904 ;;  f               2   42[COMRAM] PTR const unsigned char 
 16905 ;;		 -> STR_149(18), STR_148(7), STR_145(7), STR_142(5), 
 16906 ;;		 -> STR_140(5), STR_138(7), STR_135(3), STR_134(3), 
 16907 ;;		 -> STR_133(3), STR_124(5), STR_122(5), STR_120(5), 
 16908 ;;		 -> STR_118(11), STR_116(5), STR_113(11), STR_110(11), 
 16909 ;;		 -> STR_107(11), STR_104(11), STR_103(5), STR_102(11), 
 16910 ;;		 -> STR_96(9), STR_93(9), STR_90(9), STR_81(25), 
 16911 ;;		 -> STR_80(11), STR_78(25), STR_76(27), STR_74(27), 
 16912 ;;		 -> STR_72(10), STR_70(9), STR_67(25), STR_66(11), 
 16913 ;;		 -> STR_64(25), STR_62(27), STR_60(27), STR_58(12), 
 16914 ;;		 -> STR_55(9), STR_53(9), STR_51(9), STR_48(12), 
 16915 ;;		 -> STR_46(12), STR_42(7), STR_39(8), STR_34(8), 
 16916 ;;		 -> STR_33(12), STR_32(12), STR_31(18), STR_30(19), 
 16917 ;;		 -> STR_29(17), STR_28(12), STR_27(12), STR_26(16), 
 16918 ;;		 -> STR_25(16), STR_24(19), STR_23(3), STR_22(5), 
 16919 ;;		 -> STR_21(16), STR_20(39), STR_19(30), STR_18(15), 
 16920 ;;		 -> STR_17(39), STR_16(5), STR_14(5), STR_12(26), 
 16921 ;;		 -> STR_11(20), STR_10(26), STR_9(26), STR_8(26), 
 16922 ;;		 -> STR_7(26), STR_6(26), STR_4(17), STR_3(18), 
 16923 ;;		 -> STR_2(9), STR_1(9), 
 16924 ;; Auto vars:     Size  Location     Type
 16925 ;;  pb              4   52[COMRAM] struct __prbuf
 16926 ;;  ap              2   50[COMRAM] PTR void [1]
 16927 ;;		 -> ?_sprintf(2), ?_printf(2), 
 16928 ;; Return value:  Size  Location     Type
 16929 ;;                  2   42[COMRAM] int 
 16930 ;; Registers used:
 16931 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16932 ;; Tracked objects:
 16933 ;;		On entry : 0/0
 16934 ;;		On exit  : 0/0
 16935 ;;		Unchanged: 0/0
 16936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16937 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16938 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16940 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16941 ;;Total ram usage:       14 bytes
 16942 ;; Hardware stack levels used:    1
 16943 ;; Hardware stack levels required when called:    8
 16944 ;; This function calls:
 16945 ;;		__doprnt
 16946 ;; This function is called by:
 16947 ;;		_init_clcd_cusotom_lcd
 16948 ;;		_copy_data
 16949 ;;		_conflict_check
 16950 ;;		_conflict
 16951 ;;		_copy_display_struct
 16952 ;;		_print_conflict_ids
 16953 ;;		_set_string_data
 16954 ;;		_update_string_data
 16955 ;;		_clcd_display_string_config
 16956 ;;		_collect_row
 16957 ;;		_get_direction
 16958 ;;		_get_dis_frq
 16959 ;;		_get_over_write_data
 16960 ;;		_collect_column
 16961 ;;		_parse_cmd_str
 16962 ;;		_reply_to_host
 16963 ;;		_cmd_consol_task
 16964 ;;		_main
 16965 ;;		_display_string
 16966 ;; This function uses a non-reentrant model
 16967 ;;
 16968                           
 16969                           	psect	text74
 16970  004A24                     __ptext74:
 16971                           	opt stack 0
 16972  004A24                     _printf:
 16973                           	opt stack 22
 16974                           
 16975                           ;incstack = 0
 16976  004A24  0E00               	movlw	0
 16977  004A26  6E35               	movwf	printf@pb,c
 16978  004A28  0E00               	movlw	0
 16979  004A2A  6E36               	movwf	printf@pb+1,c
 16980  004A2C  0E90               	movlw	low _putch
 16981  004A2E  6E37               	movwf	printf@pb+2,c
 16982  004A30  0E4E               	movlw	high _putch
 16983  004A32  6E38               	movwf	printf@pb+3,c
 16984  004A34  0E2D               	movlw	low (?_printf+2)
 16985  004A36  6E33               	movwf	printf@ap,c
 16986  004A38  0E00               	movlw	high (?_printf+2)
 16987  004A3A  6E34               	movwf	printf@ap+1,c
 16988                           
 16989                           ;	Return value of _printf is never used
 16990  004A3C  0E35               	movlw	low printf@pb
 16991  004A3E  6E1C               	movwf	__doprnt@pb,c
 16992  004A40  0E00               	movlw	high printf@pb
 16993  004A42  6E1D               	movwf	__doprnt@pb+1,c
 16994  004A44  C02B  F01E         	movff	printf@f,__doprnt@f
 16995  004A48  C02C  F01F         	movff	printf@f+1,__doprnt@f+1
 16996  004A4C  0E33               	movlw	low printf@ap
 16997  004A4E  6E20               	movwf	__doprnt@ap,c
 16998  004A50  0E00               	movlw	high printf@ap
 16999  004A52  6E21               	movwf	__doprnt@ap+1,c
 17000  004A54  EC68  F00B         	call	__doprnt	;wreg free
 17001  004A58  0012               	return	
 17002  004A5A                     __end_of_printf:
 17003                           	opt stack 0
 17004                           tblptru	equ	0xFF8
 17005                           tblptrh	equ	0xFF7
 17006                           tblptrl	equ	0xFF6
 17007                           tablat	equ	0xFF5
 17008                           prodh	equ	0xFF4
 17009                           prodl	equ	0xFF3
 17010                           intcon	equ	0xFF2
 17011                           postinc0	equ	0xFEE
 17012                           wreg	equ	0xFE8
 17013                           indf1	equ	0xFE7
 17014                           postinc1	equ	0xFE6
 17015                           postdec1	equ	0xFE5
 17016                           fsr1h	equ	0xFE2
 17017                           fsr1l	equ	0xFE1
 17018                           indf2	equ	0xFDF
 17019                           postinc2	equ	0xFDE
 17020                           postdec2	equ	0xFDD
 17021                           fsr2h	equ	0xFDA
 17022                           fsr2l	equ	0xFD9
 17023                           status	equ	0xFD8
 17024                           
 17025 ;; *************** function __doprnt *****************
 17026 ;; Defined at:
 17027 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17028 ;; Parameters:    Size  Location     Type
 17029 ;;  pb              2   27[COMRAM] PTR struct __prbuf
 17030 ;;		 -> sprintf@pb(4), printf@pb(4), 
 17031 ;;  f               2   29[COMRAM] PTR const unsigned char 
 17032 ;;		 -> STR_149(18), STR_148(7), STR_146(5), STR_145(7), 
 17033 ;;		 -> STR_143(5), STR_142(5), STR_140(5), STR_138(7), 
 17034 ;;		 -> STR_137(12), STR_135(3), STR_134(3), STR_133(3), 
 17035 ;;		 -> STR_132(9), STR_131(9), STR_130(9), STR_129(9), 
 17036 ;;		 -> STR_127(5), STR_124(5), STR_122(5), STR_120(5), 
 17037 ;;		 -> STR_118(11), STR_116(5), STR_113(11), STR_110(11), 
 17038 ;;		 -> STR_107(11), STR_104(11), STR_103(5), STR_102(11), 
 17039 ;;		 -> STR_99(5), STR_96(9), STR_93(9), STR_90(9), 
 17040 ;;		 -> STR_87(5), STR_81(25), STR_80(11), STR_78(25), 
 17041 ;;		 -> STR_76(27), STR_74(27), STR_72(10), STR_70(9), 
 17042 ;;		 -> STR_67(25), STR_66(11), STR_64(25), STR_62(27), 
 17043 ;;		 -> STR_60(27), STR_58(12), STR_55(9), STR_53(9), 
 17044 ;;		 -> STR_51(9), STR_48(12), STR_46(12), STR_42(7), 
 17045 ;;		 -> STR_39(8), STR_34(8), STR_33(12), STR_32(12), 
 17046 ;;		 -> STR_31(18), STR_30(19), STR_29(17), STR_28(12), 
 17047 ;;		 -> STR_27(12), STR_26(16), STR_25(16), STR_24(19), 
 17048 ;;		 -> STR_23(3), STR_22(5), STR_21(16), STR_20(39), 
 17049 ;;		 -> STR_19(30), STR_18(15), STR_17(39), STR_16(5), 
 17050 ;;		 -> STR_15(5), STR_14(5), STR_13(5), STR_12(26), 
 17051 ;;		 -> STR_11(20), STR_10(26), STR_9(26), STR_8(26), 
 17052 ;;		 -> STR_7(26), STR_6(26), STR_4(17), STR_3(18), 
 17053 ;;		 -> STR_2(9), STR_1(9), 
 17054 ;;  ap              2   31[COMRAM] PTR PTR void 
 17055 ;;		 -> sprintf@ap(2), printf@ap(2), 
 17056 ;; Auto vars:     Size  Location     Type
 17057 ;;  tmpval          4    0        struct .
 17058 ;;  cp              2   39[COMRAM] PTR const unsigned char 
 17059 ;;		 -> ?_sprintf(2), ?_printf(2), STR_150(7), STR_147(6), 
 17060 ;;		 -> STR_144(9), uart_str(150), STR_128(13), STR_125(15), 
 17061 ;;		 -> STR_123(12), STR_121(12), STR_119(7), STR_117(6), 
 17062 ;;		 -> STR_114(7), STR_111(8), STR_108(6), STR_105(6), 
 17063 ;;		 -> STR_100(3), STR_97(3), STR_94(3), STR_91(3), 
 17064 ;;		 -> cmd_data.data(40), CMD(15), NULL(0), cmd_data(53), 
 17065 ;;		 -> clcd_display_string_details.string(40), out_str(100), STR_5(5), clcd_display_string_details(1140), 
 17066 ;;  val             2   37[COMRAM] unsigned int 
 17067 ;;  len             2    0        unsigned int 
 17068 ;;  c               1   41[COMRAM] char 
 17069 ;;  prec            1   36[COMRAM] char 
 17070 ;;  flag            1   35[COMRAM] unsigned char 
 17071 ;; Return value:  Size  Location     Type
 17072 ;;                  2   27[COMRAM] int 
 17073 ;; Registers used:
 17074 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17075 ;; Tracked objects:
 17076 ;;		On entry : 0/0
 17077 ;;		On exit  : 0/0
 17078 ;;		Unchanged: 0/0
 17079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17080 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17081 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17082 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17083 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17084 ;;Total ram usage:       15 bytes
 17085 ;; Hardware stack levels used:    1
 17086 ;; Hardware stack levels required when called:    7
 17087 ;; This function calls:
 17088 ;;		Absolute function
 17089 ;;		___lwdiv
 17090 ;;		___lwmod
 17091 ;;		_putch
 17092 ;; This function is called by:
 17093 ;;		_printf
 17094 ;;		_sprintf
 17095 ;; This function uses a non-reentrant model
 17096 ;;
 17097                           
 17098                           	psect	text75
 17099  0016D0                     __ptext75:
 17100                           	opt stack 0
 17101  0016D0                     __doprnt:
 17102                           	opt stack 22
 17103                           
 17104                           ;doprnt.c: 499: signed char c;
 17105                           ;doprnt.c: 506: signed char prec;
 17106                           ;doprnt.c: 508: unsigned char flag;
 17107                           ;doprnt.c: 523: union {
 17108                           ;doprnt.c: 524: unsigned long vd;
 17109                           ;doprnt.c: 525: double integ;
 17110                           ;doprnt.c: 526: } tmpval;
 17111                           ;doprnt.c: 528: unsigned int val;
 17112                           ;doprnt.c: 529: unsigned len;
 17113                           ;doprnt.c: 530: const char * cp;
 17114                           ;doprnt.c: 536: while(c = *f++) {
 17115                           
 17116                           ;incstack = 0
 17117  0016D0  D1E1               	goto	l7383
 17118  0016D2                     l7293:
 17119                           
 17120                           ;doprnt.c: 538: if(c != '%')
 17121  0016D2  0E25               	movlw	37
 17122  0016D4  182A               	xorwf	__doprnt@c,w,c
 17123  0016D6  B4D8               	btfsc	status,2,c
 17124  0016D8  D019               	goto	l7303
 17125                           
 17126                           ;doprnt.c: 540: {
 17127                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 17128  0016DA  EE20 F002          	lfsr	2,2
 17129  0016DE  501C               	movf	__doprnt@pb,w,c
 17130  0016E0  26D9               	addwf	fsr2l,f,c
 17131  0016E2  501D               	movf	__doprnt@pb+1,w,c
 17132  0016E4  22DA               	addwfc	fsr2h,f,c
 17133  0016E6  50DE               	movf	postinc2,w,c
 17134  0016E8  10DE               	iorwf	postinc2,w,c
 17135  0016EA  B4D8               	btfsc	status,2,c
 17136  0016EC  D0D0               	goto	l7329
 17137  0016EE  EE20 F002          	lfsr	2,2
 17138  0016F2  501C               	movf	__doprnt@pb,w,c
 17139  0016F4  26D9               	addwf	fsr2l,f,c
 17140  0016F6  501D               	movf	__doprnt@pb+1,w,c
 17141  0016F8  22DA               	addwfc	fsr2h,f,c
 17142  0016FA  CFDE F022          	movff	postinc2,??__doprnt
 17143  0016FE  CFDD F023          	movff	postdec2,??__doprnt+1
 17144  001702  D801               	call	u6608
 17145  001704  D1C7               	goto	l7383
 17146  001706                     u6608:
 17147  001706  0005               	push	
 17148  001708  6EFA               	movwf	pclath,c
 17149  00170A  D0B9               	goto	L10
 17150  00170C                     l7303:
 17151                           
 17152                           ;doprnt.c: 543: }
 17153                           ;doprnt.c: 548: flag = 0;
 17154  00170C  0E00               	movlw	0
 17155  00170E  6E24               	movwf	__doprnt@flag,c
 17156                           
 17157                           ;doprnt.c: 635: switch(c = *f++) {
 17158  001710  D0D4               	goto	l7335
 17159  001712                     l7305:
 17160                           
 17161                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17162  001712  C020  FFD9         	movff	__doprnt@ap,fsr2l
 17163  001716  C021  FFDA         	movff	__doprnt@ap+1,fsr2h
 17164  00171A  CFDF F022          	movff	indf2,??__doprnt
 17165  00171E  0E02               	movlw	2
 17166  001720  26DE               	addwf	postinc2,f,c
 17167  001722  CFDF F023          	movff	indf2,??__doprnt+1
 17168  001726  0E00               	movlw	0
 17169  001728  22DD               	addwfc	postdec2,f,c
 17170  00172A  C022  FFD9         	movff	??__doprnt,fsr2l
 17171  00172E  C023  FFDA         	movff	??__doprnt+1,fsr2h
 17172  001732  CFDE F028          	movff	postinc2,__doprnt@cp
 17173  001736  CFDD F029          	movff	postdec2,__doprnt@cp+1
 17174                           
 17175                           ;doprnt.c: 740: if(!cp)
 17176  00173A  5028               	movf	__doprnt@cp,w,c
 17177  00173C  1029               	iorwf	__doprnt@cp+1,w,c
 17178  00173E  A4D8               	btfss	status,2,c
 17179  001740  D05F               	goto	l7323
 17180                           
 17181                           ;doprnt.c: 741: cp = "(null)";
 17182  001742  0E8B               	movlw	low STR_150
 17183  001744  6E28               	movwf	__doprnt@cp,c
 17184  001746  0EFF               	movlw	high STR_150
 17185  001748  6E29               	movwf	__doprnt@cp+1,c
 17186                           
 17187                           ;doprnt.c: 777: while(*cp)
 17188  00174A  D05A               	goto	l7323
 17189  00174C                     l7311:
 17190                           
 17191                           ;doprnt.c: 778: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 17192  00174C  EE20 F002          	lfsr	2,2
 17193  001750  501C               	movf	__doprnt@pb,w,c
 17194  001752  26D9               	addwf	fsr2l,f,c
 17195  001754  501D               	movf	__doprnt@pb+1,w,c
 17196  001756  22DA               	addwfc	fsr2h,f,c
 17197  001758  50DE               	movf	postinc2,w,c
 17198  00175A  10DE               	iorwf	postinc2,w,c
 17199  00175C  B4D8               	btfsc	status,2,c
 17200  00175E  D029               	goto	l7317
 17201  001760  EE20 F002          	lfsr	2,2
 17202  001764  501C               	movf	__doprnt@pb,w,c
 17203  001766  26D9               	addwf	fsr2l,f,c
 17204  001768  501D               	movf	__doprnt@pb+1,w,c
 17205  00176A  22DA               	addwfc	fsr2h,f,c
 17206  00176C  CFDE F022          	movff	postinc2,??__doprnt
 17207  001770  CFDD F023          	movff	postdec2,??__doprnt+1
 17208  001774  D801               	call	u6638
 17209  001776  D01A               	goto	l7315
 17210  001778                     u6638:
 17211  001778  0005               	push	
 17212  00177A  6EFA               	movwf	pclath,c
 17213  00177C  5022               	movf	??__doprnt,w,c
 17214  00177E  6EFD               	movwf	tosl,c
 17215  001780  5023               	movf	??__doprnt+1,w,c
 17216  001782  6EFE               	movwf	tosh,c
 17217  001784  6AFF               	clrf	tosu,c
 17218  001786  50FA               	movf	pclath,w,c
 17219  001788  C028  FFF6         	movff	__doprnt@cp,tblptrl
 17220  00178C  C029  FFF7         	movff	__doprnt@cp+1,tblptrh
 17221  001790  0E00               	movlw	low (__mediumconst shr (0+16))
 17222  001792  6EF8               	movwf	tblptru,c
 17223  001794  0E0F               	movlw	(high __ramtop+-1)
 17224  001796  64F7               	cpfsgt	tblptrh,c
 17225  001798  D003               	bra	u6647
 17226  00179A  0008               	tblrd		*
 17227  00179C  50F5               	movf	tablat,w,c
 17228  00179E  D005               	bra	u6640
 17229  0017A0                     u6647:
 17230  0017A0  CFF6 FFE1          	movff	tblptrl,fsr1l
 17231  0017A4  CFF7 FFE2          	movff	tblptrh,fsr1h
 17232  0017A8  50E7               	movf	indf1,w,c
 17233  0017AA                     u6640:
 17234  0017AA  0012               	return		;indir
 17235  0017AC                     l7315:
 17236  0017AC  4A28               	infsnz	__doprnt@cp,f,c
 17237  0017AE  2A29               	incf	__doprnt@cp+1,f,c
 17238  0017B0  D027               	goto	l7323
 17239  0017B2                     l7317:
 17240  0017B2  C028  FFF6         	movff	__doprnt@cp,tblptrl
 17241  0017B6  C029  FFF7         	movff	__doprnt@cp+1,tblptrh
 17242  0017BA  0E00               	movlw	low (__mediumconst shr (0+16))
 17243  0017BC  6EF8               	movwf	tblptru,c
 17244  0017BE  C01C  FFD9         	movff	__doprnt@pb,fsr2l
 17245  0017C2  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17246  0017C6  CFDE F022          	movff	postinc2,??__doprnt
 17247  0017CA  CFDD F023          	movff	postdec2,??__doprnt+1
 17248  0017CE  C022  FFD9         	movff	??__doprnt,fsr2l
 17249  0017D2  C023  FFDA         	movff	??__doprnt+1,fsr2h
 17250  0017D6  0E0F               	movlw	(high __ramtop+-1)
 17251  0017D8  64F7               	cpfsgt	tblptrh,c
 17252  0017DA  D003               	bra	u6657
 17253  0017DC  0008               	tblrd		*
 17254  0017DE  50F5               	movf	tablat,w,c
 17255  0017E0  D005               	bra	u6650
 17256  0017E2                     u6657:
 17257  0017E2  CFF6 FFE1          	movff	tblptrl,fsr1l
 17258  0017E6  CFF7 FFE2          	movff	tblptrh,fsr1h
 17259  0017EA  50E7               	movf	indf1,w,c
 17260  0017EC                     u6650:
 17261  0017EC  6EDF               	movwf	indf2,c
 17262  0017EE  4A28               	infsnz	__doprnt@cp,f,c
 17263  0017F0  2A29               	incf	__doprnt@cp+1,f,c
 17264  0017F2  C01C  FFD9         	movff	__doprnt@pb,fsr2l
 17265  0017F6  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17266  0017FA  2ADE               	incf	postinc2,f,c
 17267  0017FC  0E00               	movlw	0
 17268  0017FE  22DD               	addwfc	postdec2,f,c
 17269  001800                     l7323:
 17270  001800  C028  FFF6         	movff	__doprnt@cp,tblptrl
 17271  001804  C029  FFF7         	movff	__doprnt@cp+1,tblptrh
 17272  001808  0E00               	movlw	low (__mediumconst shr (0+16))
 17273  00180A  6EF8               	movwf	tblptru,c
 17274  00180C  0E0F               	movlw	(high __ramtop+-1)
 17275  00180E  64F7               	cpfsgt	tblptrh,c
 17276  001810  D003               	bra	u6667
 17277  001812  0008               	tblrd		*
 17278  001814  50F5               	movf	tablat,w,c
 17279  001816  D005               	bra	u6660
 17280  001818                     u6667:
 17281  001818  CFF6 FFE1          	movff	tblptrl,fsr1l
 17282  00181C  CFF7 FFE2          	movff	tblptrh,fsr1h
 17283  001820  50E7               	movf	indf1,w,c
 17284  001822                     u6660:
 17285  001822  0900               	iorlw	0
 17286  001824  B4D8               	btfsc	status,2,c
 17287  001826  D136               	goto	l7383
 17288  001828  D791               	goto	l7311
 17289  00182A                     l7325:
 17290                           
 17291                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 17292  00182A  C020  FFD9         	movff	__doprnt@ap,fsr2l
 17293  00182E  C021  FFDA         	movff	__doprnt@ap+1,fsr2h
 17294  001832  CFDF F022          	movff	indf2,??__doprnt
 17295  001836  0E02               	movlw	2
 17296  001838  26DE               	addwf	postinc2,f,c
 17297  00183A  CFDF F023          	movff	indf2,??__doprnt+1
 17298  00183E  0E00               	movlw	0
 17299  001840  22DD               	addwfc	postdec2,f,c
 17300  001842  C022  FFD9         	movff	??__doprnt,fsr2l
 17301  001846  C023  FFDA         	movff	??__doprnt+1,fsr2h
 17302  00184A  50DF               	movf	indf2,w,c
 17303  00184C  6E2A               	movwf	__doprnt@c,c
 17304  00184E                     l1218:
 17305                           
 17306                           ;doprnt.c: 809: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 17307  00184E  EE20 F002          	lfsr	2,2
 17308  001852  501C               	movf	__doprnt@pb,w,c
 17309  001854  26D9               	addwf	fsr2l,f,c
 17310  001856  501D               	movf	__doprnt@pb+1,w,c
 17311  001858  22DA               	addwfc	fsr2h,f,c
 17312  00185A  50DE               	movf	postinc2,w,c
 17313  00185C  10DE               	iorwf	postinc2,w,c
 17314  00185E  B4D8               	btfsc	status,2,c
 17315  001860  D016               	goto	l7329
 17316  001862  EE20 F002          	lfsr	2,2
 17317  001866  501C               	movf	__doprnt@pb,w,c
 17318  001868  26D9               	addwf	fsr2l,f,c
 17319  00186A  501D               	movf	__doprnt@pb+1,w,c
 17320  00186C  22DA               	addwfc	fsr2h,f,c
 17321  00186E  CFDE F022          	movff	postinc2,??__doprnt
 17322  001872  CFDD F023          	movff	postdec2,??__doprnt+1
 17323  001876  D801               	call	u6698
 17324  001878  D10D               	goto	l7383
 17325  00187A                     u6698:
 17326  00187A  0005               	push	
 17327  00187C  6EFA               	movwf	pclath,c
 17328  00187E                     L10:
 17329  00187E  5022               	movf	??__doprnt,w,c
 17330  001880  6EFD               	movwf	tosl,c
 17331  001882  5023               	movf	??__doprnt+1,w,c
 17332  001884  6EFE               	movwf	tosh,c
 17333  001886  6AFF               	clrf	tosu,c
 17334  001888  50FA               	movf	pclath,w,c
 17335  00188A  502A               	movf	__doprnt@c,w,c
 17336  00188C  0012               	return		;indir
 17337  00188E                     l7329:
 17338  00188E  C01C  FFD9         	movff	__doprnt@pb,fsr2l
 17339  001892  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17340  001896  CFDE F022          	movff	postinc2,??__doprnt
 17341  00189A  CFDD F023          	movff	postdec2,??__doprnt+1
 17342  00189E  C022  FFD9         	movff	??__doprnt,fsr2l
 17343  0018A2  C023  FFDA         	movff	??__doprnt+1,fsr2h
 17344  0018A6  C02A  FFDF         	movff	__doprnt@c,indf2
 17345  0018AA  C01C  FFD9         	movff	__doprnt@pb,fsr2l
 17346  0018AE  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17347  0018B2  2ADE               	incf	postinc2,f,c
 17348  0018B4  0E00               	movlw	0
 17349  0018B6  22DD               	addwfc	postdec2,f,c
 17350                           
 17351                           ;doprnt.c: 810: continue;
 17352  0018B8  D0ED               	goto	l7383
 17353  0018BA                     l7335:
 17354  0018BA  C01E  FFF6         	movff	__doprnt@f,tblptrl
 17355  0018BE  C01F  FFF7         	movff	__doprnt@f+1,tblptrh
 17356  0018C2  4A1E               	infsnz	__doprnt@f,f,c
 17357  0018C4  2A1F               	incf	__doprnt@f+1,f,c
 17358  0018C6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17359  0018C6  6AF8               	clrf	tblptru,c
 17360  0018C8                     	endif
 17361  0018C8                     	if	0	;tblptru may be non-zero
 17362  0018C8                     	endif
 17363  0018C8  0008               	tblrd		*
 17364  0018CA  CFF5 F02A          	movff	tablat,__doprnt@c
 17365  0018CE  502A               	movf	__doprnt@c,w,c
 17366                           
 17367                           ; Switch size 1, requested type "space"
 17368                           ; Number of cases is 5, Range of values is 0 to 115
 17369                           ; switch strategies available:
 17370                           ; Name         Instructions Cycles
 17371                           ; simple_byte           16     9 (average)
 17372                           ;	Chosen strategy is simple_byte
 17373  0018D0  0A00               	xorlw	0	; case 0
 17374  0018D2  B4D8               	btfsc	status,2,c
 17375  0018D4  D0EC               	goto	l7385
 17376  0018D6  0A63               	xorlw	99	; case 99
 17377  0018D8  B4D8               	btfsc	status,2,c
 17378  0018DA  D7A7               	goto	l7325
 17379  0018DC  0A07               	xorlw	7	; case 100
 17380  0018DE  B4D8               	btfsc	status,2,c
 17381  0018E0  D007               	goto	l7337
 17382  0018E2  0A0D               	xorlw	13	; case 105
 17383  0018E4  B4D8               	btfsc	status,2,c
 17384  0018E6  D004               	goto	l7337
 17385  0018E8  0A1A               	xorlw	26	; case 115
 17386  0018EA  B4D8               	btfsc	status,2,c
 17387  0018EC  D712               	goto	l7305
 17388  0018EE  D7AF               	goto	l1218
 17389  0018F0                     l7337:
 17390                           
 17391                           ;doprnt.c: 1253: {
 17392                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17393  0018F0  C020  FFD9         	movff	__doprnt@ap,fsr2l
 17394  0018F4  C021  FFDA         	movff	__doprnt@ap+1,fsr2h
 17395  0018F8  CFDF F022          	movff	indf2,??__doprnt
 17396  0018FC  0E02               	movlw	2
 17397  0018FE  26DE               	addwf	postinc2,f,c
 17398  001900  CFDF F023          	movff	indf2,??__doprnt+1
 17399  001904  0E00               	movlw	0
 17400  001906  22DD               	addwfc	postdec2,f,c
 17401  001908  C022  FFD9         	movff	??__doprnt,fsr2l
 17402  00190C  C023  FFDA         	movff	??__doprnt+1,fsr2h
 17403  001910  CFDE F026          	movff	postinc2,__doprnt@val
 17404  001914  CFDD F027          	movff	postdec2,__doprnt@val+1
 17405                           
 17406                           ;doprnt.c: 1261: if((int)val < 0) {
 17407  001918  AE27               	btfss	__doprnt@val+1,7,c
 17408  00191A  D006               	goto	l7345
 17409                           
 17410                           ;doprnt.c: 1262: flag |= 0x03;
 17411  00191C  0E03               	movlw	3
 17412  00191E  1224               	iorwf	__doprnt@flag,f,c
 17413                           
 17414                           ;doprnt.c: 1263: val = -val;
 17415  001920  6C26               	negf	__doprnt@val,c
 17416  001922  1E27               	comf	__doprnt@val+1,f,c
 17417  001924  B0D8               	btfsc	status,0,c
 17418  001926  2A27               	incf	__doprnt@val+1,f,c
 17419  001928                     l7345:
 17420                           
 17421                           ;doprnt.c: 1264: }
 17422                           ;doprnt.c: 1266: }
 17423                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17424  001928  0E01               	movlw	1
 17425  00192A  6E2A               	movwf	__doprnt@c,c
 17426  00192C                     l7347:
 17427  00192C  0E05               	movlw	5
 17428  00192E  182A               	xorwf	__doprnt@c,w,c
 17429  001930  B4D8               	btfsc	status,2,c
 17430  001932  D015               	goto	l7359
 17431                           
 17432                           ;doprnt.c: 1306: if(val < dpowers[c])
 17433  001934  502A               	movf	__doprnt@c,w,c
 17434  001936  0D02               	mullw	2
 17435  001938  0E5D               	movlw	low _dpowers
 17436  00193A  24F3               	addwf	prodl,w,c
 17437  00193C  6EF6               	movwf	tblptrl,c
 17438  00193E  0EFC               	movlw	high _dpowers
 17439  001940  20F4               	addwfc	prodh,w,c
 17440  001942  6EF7               	movwf	tblptrh,c
 17441  001944                     	if	1	;There are 3 active tblptr bytes
 17442  001944  6AF8               	clrf	tblptru,c
 17443  001946  0E00               	movlw	low (__mediumconst shr (0+16))
 17444  001948  22F8               	addwfc	tblptru,f,c
 17445  00194A                     	endif
 17446  00194A  0009               	tblrd		*+
 17447  00194C  50F5               	movf	tablat,w,c
 17448  00194E  5C26               	subwf	__doprnt@val,w,c
 17449  001950  0009               	tblrd		*+
 17450  001952  50F5               	movf	tablat,w,c
 17451  001954  5827               	subwfb	__doprnt@val+1,w,c
 17452  001956  A0D8               	btfss	status,0,c
 17453  001958  D002               	goto	l7359
 17454                           
 17455                           ;doprnt.c: 1307: break;
 17456  00195A  2A2A               	incf	__doprnt@c,f,c
 17457  00195C  D7E7               	goto	l7347
 17458  00195E                     l7359:
 17459                           
 17460                           ;doprnt.c: 1422: {
 17461                           ;doprnt.c: 1438: if(flag & 0x03)
 17462  00195E  C024  F022         	movff	__doprnt@flag,??__doprnt
 17463  001962  0E03               	movlw	3
 17464  001964  1622               	andwf	??__doprnt,f,c
 17465  001966  B4D8               	btfsc	status,2,c
 17466  001968  D035               	goto	l7369
 17467                           
 17468                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 17469  00196A  EE20 F002          	lfsr	2,2
 17470  00196E  501C               	movf	__doprnt@pb,w,c
 17471  001970  26D9               	addwf	fsr2l,f,c
 17472  001972  501D               	movf	__doprnt@pb+1,w,c
 17473  001974  22DA               	addwfc	fsr2h,f,c
 17474  001976  50DE               	movf	postinc2,w,c
 17475  001978  10DE               	iorwf	postinc2,w,c
 17476  00197A  B4D8               	btfsc	status,2,c
 17477  00197C  D016               	goto	l7365
 17478  00197E  EE20 F002          	lfsr	2,2
 17479  001982  501C               	movf	__doprnt@pb,w,c
 17480  001984  26D9               	addwf	fsr2l,f,c
 17481  001986  501D               	movf	__doprnt@pb+1,w,c
 17482  001988  22DA               	addwfc	fsr2h,f,c
 17483  00198A  CFDE F022          	movff	postinc2,??__doprnt
 17484  00198E  CFDD F023          	movff	postdec2,??__doprnt+1
 17485  001992  D801               	call	u6768
 17486  001994  D01F               	goto	l7369
 17487  001996                     u6768:
 17488  001996  0005               	push	
 17489  001998  6EFA               	movwf	pclath,c
 17490  00199A  5022               	movf	??__doprnt,w,c
 17491  00199C  6EFD               	movwf	tosl,c
 17492  00199E  5023               	movf	??__doprnt+1,w,c
 17493  0019A0  6EFE               	movwf	tosh,c
 17494  0019A2  6AFF               	clrf	tosu,c
 17495  0019A4  50FA               	movf	pclath,w,c
 17496  0019A6  0E2D               	movlw	45
 17497  0019A8  0012               	return		;indir
 17498  0019AA                     l7365:
 17499  0019AA  C01C  FFD9         	movff	__doprnt@pb,fsr2l
 17500  0019AE  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17501  0019B2  CFDE F022          	movff	postinc2,??__doprnt
 17502  0019B6  CFDD F023          	movff	postdec2,??__doprnt+1
 17503  0019BA  C022  FFD9         	movff	??__doprnt,fsr2l
 17504  0019BE  C023  FFDA         	movff	??__doprnt+1,fsr2h
 17505  0019C2  0E2D               	movlw	45
 17506  0019C4  6EDF               	movwf	indf2,c
 17507  0019C6  C01C  FFD9         	movff	__doprnt@pb,fsr2l
 17508  0019CA  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17509  0019CE  2ADE               	incf	postinc2,f,c
 17510  0019D0  0E00               	movlw	0
 17511  0019D2  22DD               	addwfc	postdec2,f,c
 17512  0019D4                     l7369:
 17513                           
 17514                           ;doprnt.c: 1469: }
 17515                           ;doprnt.c: 1472: prec = c;
 17516  0019D4  C02A  F025         	movff	__doprnt@c,__doprnt@prec
 17517                           
 17518                           ;doprnt.c: 1474: while(prec--) {
 17519  0019D8  D059               	goto	l7381
 17520  0019DA                     l7371:
 17521                           
 17522                           ;doprnt.c: 1478: {
 17523                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17524  0019DA  5025               	movf	__doprnt@prec,w,c
 17525  0019DC  0D02               	mullw	2
 17526  0019DE  0E5D               	movlw	low _dpowers
 17527  0019E0  24F3               	addwf	prodl,w,c
 17528  0019E2  6EF6               	movwf	tblptrl,c
 17529  0019E4  0EFC               	movlw	high _dpowers
 17530  0019E6  20F4               	addwfc	prodh,w,c
 17531  0019E8  6EF7               	movwf	tblptrh,c
 17532  0019EA                     	if	1	;There are 3 active tblptr bytes
 17533  0019EA  6AF8               	clrf	tblptru,c
 17534  0019EC  0E00               	movlw	low (__mediumconst shr (0+16))
 17535  0019EE  22F8               	addwfc	tblptru,f,c
 17536  0019F0                     	endif
 17537  0019F0  0009               	tblrd		*+
 17538  0019F2  CFF5 F012          	movff	tablat,___lwdiv@divisor
 17539  0019F6  000A               	tblrd		*-
 17540  0019F8  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
 17541  0019FC  C026  F010         	movff	__doprnt@val,___lwdiv@dividend
 17542  001A00  C027  F011         	movff	__doprnt@val+1,___lwdiv@dividend+1
 17543  001A04  ECEC  F022         	call	___lwdiv
 17544  001A08  C010  F017         	movff	?___lwdiv,___lwmod@dividend
 17545  001A0C  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
 17546  001A10  0E00               	movlw	0
 17547  001A12  6E1A               	movwf	___lwmod@divisor+1,c
 17548  001A14  0E0A               	movlw	10
 17549  001A16  6E19               	movwf	___lwmod@divisor,c
 17550  001A18  EC39  F024         	call	___lwmod	;wreg free
 17551  001A1C  5017               	movf	?___lwmod,w,c
 17552  001A1E  0F30               	addlw	48
 17553  001A20  6E2A               	movwf	__doprnt@c,c
 17554                           
 17555                           ;doprnt.c: 1523: }
 17556                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 17557  001A22  EE20 F002          	lfsr	2,2
 17558  001A26  501C               	movf	__doprnt@pb,w,c
 17559  001A28  26D9               	addwf	fsr2l,f,c
 17560  001A2A  501D               	movf	__doprnt@pb+1,w,c
 17561  001A2C  22DA               	addwfc	fsr2h,f,c
 17562  001A2E  50DE               	movf	postinc2,w,c
 17563  001A30  10DE               	iorwf	postinc2,w,c
 17564  001A32  B4D8               	btfsc	status,2,c
 17565  001A34  D016               	goto	l7377
 17566  001A36  EE20 F002          	lfsr	2,2
 17567  001A3A  501C               	movf	__doprnt@pb,w,c
 17568  001A3C  26D9               	addwf	fsr2l,f,c
 17569  001A3E  501D               	movf	__doprnt@pb+1,w,c
 17570  001A40  22DA               	addwfc	fsr2h,f,c
 17571  001A42  CFDE F022          	movff	postinc2,??__doprnt
 17572  001A46  CFDD F023          	movff	postdec2,??__doprnt+1
 17573  001A4A  D801               	call	u6788
 17574  001A4C  D01F               	goto	l7381
 17575  001A4E                     u6788:
 17576  001A4E  0005               	push	
 17577  001A50  6EFA               	movwf	pclath,c
 17578  001A52  5022               	movf	??__doprnt,w,c
 17579  001A54  6EFD               	movwf	tosl,c
 17580  001A56  5023               	movf	??__doprnt+1,w,c
 17581  001A58  6EFE               	movwf	tosh,c
 17582  001A5A  6AFF               	clrf	tosu,c
 17583  001A5C  50FA               	movf	pclath,w,c
 17584  001A5E  502A               	movf	__doprnt@c,w,c
 17585  001A60  0012               	return		;indir
 17586  001A62                     l7377:
 17587  001A62  C01C  FFD9         	movff	__doprnt@pb,fsr2l
 17588  001A66  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17589  001A6A  CFDE F022          	movff	postinc2,??__doprnt
 17590  001A6E  CFDD F023          	movff	postdec2,??__doprnt+1
 17591  001A72  C022  FFD9         	movff	??__doprnt,fsr2l
 17592  001A76  C023  FFDA         	movff	??__doprnt+1,fsr2h
 17593  001A7A  C02A  FFDF         	movff	__doprnt@c,indf2
 17594  001A7E  C01C  FFD9         	movff	__doprnt@pb,fsr2l
 17595  001A82  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17596  001A86  2ADE               	incf	postinc2,f,c
 17597  001A88  0E00               	movlw	0
 17598  001A8A  22DD               	addwfc	postdec2,f,c
 17599  001A8C                     l7381:
 17600  001A8C  0625               	decf	__doprnt@prec,f,c
 17601  001A8E  2825               	incf	__doprnt@prec,w,c
 17602  001A90  A4D8               	btfss	status,2,c
 17603  001A92  D7A3               	goto	l7371
 17604  001A94                     l7383:
 17605  001A94  C01E  FFF6         	movff	__doprnt@f,tblptrl
 17606  001A98  C01F  FFF7         	movff	__doprnt@f+1,tblptrh
 17607  001A9C  4A1E               	infsnz	__doprnt@f,f,c
 17608  001A9E  2A1F               	incf	__doprnt@f+1,f,c
 17609  001AA0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17610  001AA0  6AF8               	clrf	tblptru,c
 17611  001AA2                     	endif
 17612  001AA2                     	if	0	;tblptru may be non-zero
 17613  001AA2                     	endif
 17614  001AA2  0008               	tblrd		*
 17615  001AA4  CFF5 F02A          	movff	tablat,__doprnt@c
 17616  001AA8  502A               	movf	__doprnt@c,w,c
 17617  001AAA  A4D8               	btfss	status,2,c
 17618  001AAC  D612               	goto	l7293
 17619  001AAE                     l7385:
 17620                           
 17621                           ;doprnt.c: 1540: return 0;
 17622  001AAE  0E00               	movlw	0
 17623  001AB0  6E1D               	movwf	?__doprnt+1,c
 17624  001AB2  0E00               	movlw	0
 17625  001AB4  6E1C               	movwf	?__doprnt,c
 17626  001AB6  0012               	return	
 17627  001AB8                     __end_of__doprnt:
 17628                           	opt stack 0
 17629                           tosu	equ	0xFFF
 17630                           tosh	equ	0xFFE
 17631                           tosl	equ	0xFFD
 17632                           pclath	equ	0xFFA
 17633                           tblptru	equ	0xFF8
 17634                           tblptrh	equ	0xFF7
 17635                           tblptrl	equ	0xFF6
 17636                           tablat	equ	0xFF5
 17637                           prodh	equ	0xFF4
 17638                           prodl	equ	0xFF3
 17639                           intcon	equ	0xFF2
 17640                           postinc0	equ	0xFEE
 17641                           wreg	equ	0xFE8
 17642                           indf1	equ	0xFE7
 17643                           postinc1	equ	0xFE6
 17644                           postdec1	equ	0xFE5
 17645                           fsr1h	equ	0xFE2
 17646                           fsr1l	equ	0xFE1
 17647                           indf2	equ	0xFDF
 17648                           postinc2	equ	0xFDE
 17649                           postdec2	equ	0xFDD
 17650                           fsr2h	equ	0xFDA
 17651                           fsr2l	equ	0xFD9
 17652                           status	equ	0xFD8
 17653                           
 17654 ;; *************** function _putch *****************
 17655 ;; Defined at:
 17656 ;;		line 111 in file "mcc_generated_files/eusart2.c"
 17657 ;; Parameters:    Size  Location     Type
 17658 ;;  txData          1    wreg     unsigned char 
 17659 ;; Auto vars:     Size  Location     Type
 17660 ;;  txData          1   16[COMRAM] unsigned char 
 17661 ;; Return value:  Size  Location     Type
 17662 ;;                  1    wreg      void 
 17663 ;; Registers used:
 17664 ;;		wreg, status,2, cstack
 17665 ;; Tracked objects:
 17666 ;;		On entry : 0/0
 17667 ;;		On exit  : 0/0
 17668 ;;		Unchanged: 0/0
 17669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17671 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17673 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17674 ;;Total ram usage:        1 bytes
 17675 ;; Hardware stack levels used:    1
 17676 ;; Hardware stack levels required when called:    6
 17677 ;; This function calls:
 17678 ;;		_EUSART2_Write
 17679 ;; This function is called by:
 17680 ;;		_printf
 17681 ;;		_puts
 17682 ;;		_cputs
 17683 ;;		__doprnt
 17684 ;; This function uses a non-reentrant model
 17685 ;;
 17686                           
 17687                           	psect	text76
 17688  004E90                     __ptext76:
 17689                           	opt stack 0
 17690  004E90                     _putch:
 17691                           	opt stack 22
 17692                           
 17693                           ;incstack = 0
 17694                           ;putch@txData stored from wreg
 17695  004E90  6E11               	movwf	putch@txData,c
 17696                           
 17697                           ;eusart2.c: 113: EUSART2_Write(txData);
 17698  004E92  5011               	movf	putch@txData,w,c
 17699  004E94  EC32  F027         	call	_EUSART2_Write
 17700  004E98  0012               	return		;funcret
 17701  004E9A                     __end_of_putch:
 17702                           	opt stack 0
 17703                           tosu	equ	0xFFF
 17704                           tosh	equ	0xFFE
 17705                           tosl	equ	0xFFD
 17706                           pclath	equ	0xFFA
 17707                           tblptru	equ	0xFF8
 17708                           tblptrh	equ	0xFF7
 17709                           tblptrl	equ	0xFF6
 17710                           tablat	equ	0xFF5
 17711                           prodh	equ	0xFF4
 17712                           prodl	equ	0xFF3
 17713                           intcon	equ	0xFF2
 17714                           postinc0	equ	0xFEE
 17715                           wreg	equ	0xFE8
 17716                           indf1	equ	0xFE7
 17717                           postinc1	equ	0xFE6
 17718                           postdec1	equ	0xFE5
 17719                           fsr1h	equ	0xFE2
 17720                           fsr1l	equ	0xFE1
 17721                           indf2	equ	0xFDF
 17722                           postinc2	equ	0xFDE
 17723                           postdec2	equ	0xFDD
 17724                           fsr2h	equ	0xFDA
 17725                           fsr2l	equ	0xFD9
 17726                           status	equ	0xFD8
 17727                           
 17728 ;; *************** function _EUSART2_Write *****************
 17729 ;; Defined at:
 17730 ;;		line 97 in file "mcc_generated_files/eusart2.c"
 17731 ;; Parameters:    Size  Location     Type
 17732 ;;  txData          1    wreg     unsigned char 
 17733 ;; Auto vars:     Size  Location     Type
 17734 ;;  txData          1   15[COMRAM] unsigned char 
 17735 ;; Return value:  Size  Location     Type
 17736 ;;                  1    wreg      void 
 17737 ;; Registers used:
 17738 ;;		wreg
 17739 ;; Tracked objects:
 17740 ;;		On entry : 0/0
 17741 ;;		On exit  : 0/0
 17742 ;;		Unchanged: 0/0
 17743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17748 ;;Total ram usage:        1 bytes
 17749 ;; Hardware stack levels used:    1
 17750 ;; Hardware stack levels required when called:    5
 17751 ;; This function calls:
 17752 ;;		Nothing
 17753 ;; This function is called by:
 17754 ;;		_putch
 17755 ;; This function uses a non-reentrant model
 17756 ;;
 17757                           
 17758                           	psect	text77
 17759  004E64                     __ptext77:
 17760                           	opt stack 0
 17761  004E64                     _EUSART2_Write:
 17762                           	opt stack 22
 17763                           
 17764                           ;incstack = 0
 17765                           ;EUSART2_Write@txData stored from wreg
 17766  004E64  6E10               	movwf	EUSART2_Write@txData,c
 17767  004E66                     l350:
 17768  004E66  A8A4               	btfss	4004,4,c	;volatile
 17769  004E68  D7FE               	goto	l350
 17770                           
 17771                           ;eusart2.c: 101: }
 17772                           ;eusart2.c: 103: TXREG2 = txData;
 17773  004E6A  C010  FF73         	movff	EUSART2_Write@txData,3955	;volatile
 17774  004E6E  0012               	return		;funcret
 17775  004E70                     __end_of_EUSART2_Write:
 17776                           	opt stack 0
 17777                           tosu	equ	0xFFF
 17778                           tosh	equ	0xFFE
 17779                           tosl	equ	0xFFD
 17780                           pclath	equ	0xFFA
 17781                           tblptru	equ	0xFF8
 17782                           tblptrh	equ	0xFF7
 17783                           tblptrl	equ	0xFF6
 17784                           tablat	equ	0xFF5
 17785                           prodh	equ	0xFF4
 17786                           prodl	equ	0xFF3
 17787                           intcon	equ	0xFF2
 17788                           postinc0	equ	0xFEE
 17789                           wreg	equ	0xFE8
 17790                           indf1	equ	0xFE7
 17791                           postinc1	equ	0xFE6
 17792                           postdec1	equ	0xFE5
 17793                           fsr1h	equ	0xFE2
 17794                           fsr1l	equ	0xFE1
 17795                           indf2	equ	0xFDF
 17796                           postinc2	equ	0xFDE
 17797                           postdec2	equ	0xFDD
 17798                           fsr2h	equ	0xFDA
 17799                           fsr2l	equ	0xFD9
 17800                           status	equ	0xFD8
 17801                           
 17802 ;; *************** function ___lwmod *****************
 17803 ;; Defined at:
 17804 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 17805 ;; Parameters:    Size  Location     Type
 17806 ;;  dividend        2   22[COMRAM] unsigned int 
 17807 ;;  divisor         2   24[COMRAM] unsigned int 
 17808 ;; Auto vars:     Size  Location     Type
 17809 ;;  counter         1   26[COMRAM] unsigned char 
 17810 ;; Return value:  Size  Location     Type
 17811 ;;                  2   22[COMRAM] unsigned int 
 17812 ;; Registers used:
 17813 ;;		wreg, status,2, status,0
 17814 ;; Tracked objects:
 17815 ;;		On entry : 0/0
 17816 ;;		On exit  : 0/0
 17817 ;;		Unchanged: 0/0
 17818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17820 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17822 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17823 ;;Total ram usage:        5 bytes
 17824 ;; Hardware stack levels used:    1
 17825 ;; Hardware stack levels required when called:    5
 17826 ;; This function calls:
 17827 ;;		Nothing
 17828 ;; This function is called by:
 17829 ;;		__doprnt
 17830 ;; This function uses a non-reentrant model
 17831 ;;
 17832                           
 17833                           	psect	text78
 17834  004872                     __ptext78:
 17835                           	opt stack 0
 17836  004872                     ___lwmod:
 17837                           	opt stack 23
 17838                           
 17839                           ;incstack = 0
 17840  004872  5019               	movf	___lwmod@divisor,w,c
 17841  004874  101A               	iorwf	___lwmod@divisor+1,w,c
 17842  004876  B4D8               	btfsc	status,2,c
 17843  004878  D018               	goto	l1667
 17844  00487A  0E01               	movlw	1
 17845  00487C  6E1B               	movwf	___lwmod@counter,c
 17846  00487E  D004               	goto	l7247
 17847  004880                     l7245:
 17848  004880  90D8               	bcf	status,0,c
 17849  004882  3619               	rlcf	___lwmod@divisor,f,c
 17850  004884  361A               	rlcf	___lwmod@divisor+1,f,c
 17851  004886  2A1B               	incf	___lwmod@counter,f,c
 17852  004888                     l7247:
 17853  004888  AE1A               	btfss	___lwmod@divisor+1,7,c
 17854  00488A  D7FA               	goto	l7245
 17855  00488C                     l7249:
 17856  00488C  5019               	movf	___lwmod@divisor,w,c
 17857  00488E  5C17               	subwf	___lwmod@dividend,w,c
 17858  004890  501A               	movf	___lwmod@divisor+1,w,c
 17859  004892  5818               	subwfb	___lwmod@dividend+1,w,c
 17860  004894  A0D8               	btfss	status,0,c
 17861  004896  D004               	goto	l7253
 17862  004898  5019               	movf	___lwmod@divisor,w,c
 17863  00489A  5E17               	subwf	___lwmod@dividend,f,c
 17864  00489C  501A               	movf	___lwmod@divisor+1,w,c
 17865  00489E  5A18               	subwfb	___lwmod@dividend+1,f,c
 17866  0048A0                     l7253:
 17867  0048A0  90D8               	bcf	status,0,c
 17868  0048A2  321A               	rrcf	___lwmod@divisor+1,f,c
 17869  0048A4  3219               	rrcf	___lwmod@divisor,f,c
 17870  0048A6  2E1B               	decfsz	___lwmod@counter,f,c
 17871  0048A8  D7F1               	goto	l7249
 17872  0048AA                     l1667:
 17873  0048AA  C017  F017         	movff	___lwmod@dividend,?___lwmod
 17874  0048AE  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
 17875  0048B2  0012               	return		;funcret
 17876  0048B4                     __end_of___lwmod:
 17877                           	opt stack 0
 17878                           tosu	equ	0xFFF
 17879                           tosh	equ	0xFFE
 17880                           tosl	equ	0xFFD
 17881                           pclath	equ	0xFFA
 17882                           tblptru	equ	0xFF8
 17883                           tblptrh	equ	0xFF7
 17884                           tblptrl	equ	0xFF6
 17885                           tablat	equ	0xFF5
 17886                           prodh	equ	0xFF4
 17887                           prodl	equ	0xFF3
 17888                           intcon	equ	0xFF2
 17889                           postinc0	equ	0xFEE
 17890                           wreg	equ	0xFE8
 17891                           indf1	equ	0xFE7
 17892                           postinc1	equ	0xFE6
 17893                           postdec1	equ	0xFE5
 17894                           fsr1h	equ	0xFE2
 17895                           fsr1l	equ	0xFE1
 17896                           indf2	equ	0xFDF
 17897                           postinc2	equ	0xFDE
 17898                           postdec2	equ	0xFDD
 17899                           fsr2h	equ	0xFDA
 17900                           fsr2l	equ	0xFD9
 17901                           status	equ	0xFD8
 17902                           
 17903 ;; *************** function ___lwdiv *****************
 17904 ;; Defined at:
 17905 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 17906 ;; Parameters:    Size  Location     Type
 17907 ;;  dividend        2   15[COMRAM] unsigned int 
 17908 ;;  divisor         2   17[COMRAM] unsigned int 
 17909 ;; Auto vars:     Size  Location     Type
 17910 ;;  quotient        2   20[COMRAM] unsigned int 
 17911 ;;  counter         1   19[COMRAM] unsigned char 
 17912 ;; Return value:  Size  Location     Type
 17913 ;;                  2   15[COMRAM] unsigned int 
 17914 ;; Registers used:
 17915 ;;		wreg, status,2, status,0
 17916 ;; Tracked objects:
 17917 ;;		On entry : 0/0
 17918 ;;		On exit  : 0/0
 17919 ;;		Unchanged: 0/0
 17920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17922 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17924 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17925 ;;Total ram usage:        7 bytes
 17926 ;; Hardware stack levels used:    1
 17927 ;; Hardware stack levels required when called:    5
 17928 ;; This function calls:
 17929 ;;		Nothing
 17930 ;; This function is called by:
 17931 ;;		__doprnt
 17932 ;; This function uses a non-reentrant model
 17933 ;;
 17934                           
 17935                           	psect	text79
 17936  0045D8                     __ptext79:
 17937                           	opt stack 0
 17938  0045D8                     ___lwdiv:
 17939                           	opt stack 23
 17940                           
 17941                           ;incstack = 0
 17942  0045D8  0E00               	movlw	0
 17943  0045DA  6E16               	movwf	___lwdiv@quotient+1,c
 17944  0045DC  0E00               	movlw	0
 17945  0045DE  6E15               	movwf	___lwdiv@quotient,c
 17946  0045E0  5012               	movf	___lwdiv@divisor,w,c
 17947  0045E2  1013               	iorwf	___lwdiv@divisor+1,w,c
 17948  0045E4  B4D8               	btfsc	status,2,c
 17949  0045E6  D01C               	goto	l1657
 17950  0045E8  0E01               	movlw	1
 17951  0045EA  6E14               	movwf	___lwdiv@counter,c
 17952  0045EC  D004               	goto	l7227
 17953  0045EE                     l7225:
 17954  0045EE  90D8               	bcf	status,0,c
 17955  0045F0  3612               	rlcf	___lwdiv@divisor,f,c
 17956  0045F2  3613               	rlcf	___lwdiv@divisor+1,f,c
 17957  0045F4  2A14               	incf	___lwdiv@counter,f,c
 17958  0045F6                     l7227:
 17959  0045F6  AE13               	btfss	___lwdiv@divisor+1,7,c
 17960  0045F8  D7FA               	goto	l7225
 17961  0045FA                     l7229:
 17962  0045FA  90D8               	bcf	status,0,c
 17963  0045FC  3615               	rlcf	___lwdiv@quotient,f,c
 17964  0045FE  3616               	rlcf	___lwdiv@quotient+1,f,c
 17965  004600  5012               	movf	___lwdiv@divisor,w,c
 17966  004602  5C10               	subwf	___lwdiv@dividend,w,c
 17967  004604  5013               	movf	___lwdiv@divisor+1,w,c
 17968  004606  5811               	subwfb	___lwdiv@dividend+1,w,c
 17969  004608  A0D8               	btfss	status,0,c
 17970  00460A  D005               	goto	l7237
 17971  00460C  5012               	movf	___lwdiv@divisor,w,c
 17972  00460E  5E10               	subwf	___lwdiv@dividend,f,c
 17973  004610  5013               	movf	___lwdiv@divisor+1,w,c
 17974  004612  5A11               	subwfb	___lwdiv@dividend+1,f,c
 17975  004614  8015               	bsf	___lwdiv@quotient,0,c
 17976  004616                     l7237:
 17977  004616  90D8               	bcf	status,0,c
 17978  004618  3213               	rrcf	___lwdiv@divisor+1,f,c
 17979  00461A  3212               	rrcf	___lwdiv@divisor,f,c
 17980  00461C  2E14               	decfsz	___lwdiv@counter,f,c
 17981  00461E  D7ED               	goto	l7229
 17982  004620                     l1657:
 17983  004620  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
 17984  004624  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17985  004628  0012               	return		;funcret
 17986  00462A                     __end_of___lwdiv:
 17987                           	opt stack 0
 17988                           tosu	equ	0xFFF
 17989                           tosh	equ	0xFFE
 17990                           tosl	equ	0xFFD
 17991                           pclath	equ	0xFFA
 17992                           tblptru	equ	0xFF8
 17993                           tblptrh	equ	0xFF7
 17994                           tblptrl	equ	0xFF6
 17995                           tablat	equ	0xFF5
 17996                           prodh	equ	0xFF4
 17997                           prodl	equ	0xFF3
 17998                           intcon	equ	0xFF2
 17999                           postinc0	equ	0xFEE
 18000                           wreg	equ	0xFE8
 18001                           indf1	equ	0xFE7
 18002                           postinc1	equ	0xFE6
 18003                           postdec1	equ	0xFE5
 18004                           fsr1h	equ	0xFE2
 18005                           fsr1l	equ	0xFE1
 18006                           indf2	equ	0xFDF
 18007                           postinc2	equ	0xFDE
 18008                           postdec2	equ	0xFDD
 18009                           fsr2h	equ	0xFDA
 18010                           fsr2l	equ	0xFD9
 18011                           status	equ	0xFD8
 18012                           
 18013 ;; *************** function _clear_cmd_data *****************
 18014 ;; Defined at:
 18015 ;;		line 9 in file "cmd_consol.c"
 18016 ;; Parameters:    Size  Location     Type
 18017 ;;		None
 18018 ;; Auto vars:     Size  Location     Type
 18019 ;;		None
 18020 ;; Return value:  Size  Location     Type
 18021 ;;                  1    wreg      void 
 18022 ;; Registers used:
 18023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18024 ;; Tracked objects:
 18025 ;;		On entry : 0/0
 18026 ;;		On exit  : 0/0
 18027 ;;		Unchanged: 0/0
 18028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18033 ;;Total ram usage:        0 bytes
 18034 ;; Hardware stack levels used:    1
 18035 ;; Hardware stack levels required when called:    6
 18036 ;; This function calls:
 18037 ;;		_memset
 18038 ;; This function is called by:
 18039 ;;		_parse_cmd_str
 18040 ;;		_console_init
 18041 ;; This function uses a non-reentrant model
 18042 ;;
 18043                           
 18044                           	psect	text80
 18045  004AC4                     __ptext80:
 18046                           	opt stack 0
 18047  004AC4                     _clear_cmd_data:
 18048                           	opt stack 23
 18049                           
 18050                           ;cmd_consol.c: 10: memset(&cmd_data, 0, sizeof (CMD_CONSOL_DATA));
 18051                           
 18052                           ;incstack = 0
 18053  004AC4  0E6E               	movlw	low _cmd_data
 18054  004AC6  6E24               	movwf	memset@p1,c
 18055  004AC8  0E01               	movlw	high _cmd_data
 18056  004ACA  6E25               	movwf	memset@p1+1,c
 18057  004ACC  0E00               	movlw	0
 18058  004ACE  6E27               	movwf	memset@c+1,c
 18059  004AD0  0E00               	movlw	0
 18060  004AD2  6E26               	movwf	memset@c,c
 18061  004AD4  0E00               	movlw	0
 18062  004AD6  6E29               	movwf	memset@n+1,c
 18063  004AD8  0E35               	movlw	53
 18064  004ADA  6E28               	movwf	memset@n,c
 18065  004ADC  ECD8  F025         	call	_memset	;wreg free
 18066                           
 18067                           ;cmd_consol.c: 12: cmd_data.scroll = -1;
 18068  004AE0  0101               	movlb	1	; () banked
 18069  004AE2  699E               	setf	(_cmd_data+48)& (0+255),b
 18070                           
 18071                           ; BSR set to: 1
 18072                           ;cmd_consol.c: 13: cmd_data.end_col = cmd_data.start_col = -1;
 18073  004AE4  0101               	movlb	1	; () banked
 18074  004AE6  699A               	setf	(_cmd_data+44)& (0+255),b
 18075  004AE8  0101               	movlb	1	; () banked
 18076  004AEA  699C               	setf	(_cmd_data+46)& (0+255),b
 18077                           
 18078                           ; BSR set to: 1
 18079                           ;cmd_consol.c: 14: cmd_data.end_row = cmd_data.end_row = -1;
 18080  004AEC  0101               	movlb	1	; () banked
 18081  004AEE  699B               	setf	(_cmd_data+45)& (0+255),b
 18082  004AF0  0101               	movlb	1	; () banked
 18083  004AF2  699B               	setf	(_cmd_data+45)& (0+255),b
 18084                           
 18085                           ; BSR set to: 1
 18086  004AF4  0012               	return		;funcret
 18087  004AF6                     __end_of_clear_cmd_data:
 18088                           	opt stack 0
 18089                           tosu	equ	0xFFF
 18090                           tosh	equ	0xFFE
 18091                           tosl	equ	0xFFD
 18092                           pclath	equ	0xFFA
 18093                           tblptru	equ	0xFF8
 18094                           tblptrh	equ	0xFF7
 18095                           tblptrl	equ	0xFF6
 18096                           tablat	equ	0xFF5
 18097                           prodh	equ	0xFF4
 18098                           prodl	equ	0xFF3
 18099                           intcon	equ	0xFF2
 18100                           postinc0	equ	0xFEE
 18101                           wreg	equ	0xFE8
 18102                           indf1	equ	0xFE7
 18103                           postinc1	equ	0xFE6
 18104                           postdec1	equ	0xFE5
 18105                           fsr1h	equ	0xFE2
 18106                           fsr1l	equ	0xFE1
 18107                           indf2	equ	0xFDF
 18108                           postinc2	equ	0xFDE
 18109                           postdec2	equ	0xFDD
 18110                           fsr2h	equ	0xFDA
 18111                           fsr2l	equ	0xFD9
 18112                           status	equ	0xFD8
 18113                           
 18114 ;; *************** function _memset *****************
 18115 ;; Defined at:
 18116 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memset.c"
 18117 ;; Parameters:    Size  Location     Type
 18118 ;;  p1              2   35[COMRAM] PTR void 
 18119 ;;		 -> cmd_consol_task@temp_uart_str(150), uart_str(150), str_data(40), CMD(15), 
 18120 ;;		 -> NULL(0), cmd_data(53), out_str(100), conflict_arr(40), 
 18121 ;;		 -> clcd_display_string_details(1140), lcd_display_array(80), clcd_config_data(5), 
 18122 ;;  c               2   37[COMRAM] int 
 18123 ;;  n               2   39[COMRAM] unsigned int 
 18124 ;; Auto vars:     Size  Location     Type
 18125 ;;  p               2   41[COMRAM] PTR unsigned char 
 18126 ;;		 -> cmd_consol_task@temp_uart_str(150), uart_str(150), str_data(40), CMD(15), 
 18127 ;;		 -> NULL(0), cmd_data(53), out_str(100), conflict_arr(40), 
 18128 ;;		 -> clcd_display_string_details(1140), lcd_display_array(80), clcd_config_data(5), 
 18129 ;; Return value:  Size  Location     Type
 18130 ;;                  2   35[COMRAM] PTR void 
 18131 ;; Registers used:
 18132 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18133 ;; Tracked objects:
 18134 ;;		On entry : 0/0
 18135 ;;		On exit  : 0/0
 18136 ;;		Unchanged: 0/0
 18137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18138 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18139 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18141 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18142 ;;Total ram usage:        8 bytes
 18143 ;; Hardware stack levels used:    1
 18144 ;; Hardware stack levels required when called:    5
 18145 ;; This function calls:
 18146 ;;		Nothing
 18147 ;; This function is called by:
 18148 ;;		_init_CLCD_config
 18149 ;;		_init_clcd_cusotom_lcd
 18150 ;;		_print_conflict_ids
 18151 ;;		_set_string_data
 18152 ;;		_update_string_data
 18153 ;;		_clcd_display_string_config
 18154 ;;		_clear_display_structure
 18155 ;;		_clear_display_array
 18156 ;;		_scroll_left_to_right
 18157 ;;		_scroll_right_to_left
 18158 ;;		_make_display
 18159 ;;		_clear_cmd_data
 18160 ;;		_get_str
 18161 ;;		_parse_cmd_str
 18162 ;;		_reply_to_host
 18163 ;;		_console_init
 18164 ;;		_cmd_consol_task
 18165 ;; This function uses a non-reentrant model
 18166 ;;
 18167                           
 18168                           	psect	text81
 18169  004BB0                     __ptext81:
 18170                           	opt stack 0
 18171  004BB0                     _memset:
 18172                           	opt stack 23
 18173                           
 18174                           ; BSR set to: 1
 18175                           ;incstack = 0
 18176  004BB0  C024  F02A         	movff	memset@p1,memset@p
 18177  004BB4  C025  F02B         	movff	memset@p1+1,memset@p+1
 18178  004BB8  D008               	goto	l7181
 18179  004BBA                     l7177:
 18180  004BBA  C02A  FFD9         	movff	memset@p,fsr2l
 18181  004BBE  C02B  FFDA         	movff	memset@p+1,fsr2h
 18182  004BC2  C026  FFDF         	movff	memset@c,indf2
 18183  004BC6  4A2A               	infsnz	memset@p,f,c
 18184  004BC8  2A2B               	incf	memset@p+1,f,c
 18185  004BCA                     l7181:
 18186  004BCA  0628               	decf	memset@n,f,c
 18187  004BCC  A0D8               	btfss	status,0,c
 18188  004BCE  0629               	decf	memset@n+1,f,c
 18189  004BD0  2828               	incf	memset@n,w,c
 18190  004BD2  E1F3               	bnz	l7177
 18191  004BD4  2829               	incf	memset@n+1,w,c
 18192  004BD6  B4D8               	btfsc	status,2,c
 18193  004BD8  0012               	return	
 18194  004BDA  D7EF               	goto	l7177
 18195  004BDC                     __end_of_memset:
 18196                           	opt stack 0
 18197                           tosu	equ	0xFFF
 18198                           tosh	equ	0xFFE
 18199                           tosl	equ	0xFFD
 18200                           pclath	equ	0xFFA
 18201                           tblptru	equ	0xFF8
 18202                           tblptrh	equ	0xFF7
 18203                           tblptrl	equ	0xFF6
 18204                           tablat	equ	0xFF5
 18205                           prodh	equ	0xFF4
 18206                           prodl	equ	0xFF3
 18207                           intcon	equ	0xFF2
 18208                           postinc0	equ	0xFEE
 18209                           wreg	equ	0xFE8
 18210                           indf1	equ	0xFE7
 18211                           postinc1	equ	0xFE6
 18212                           postdec1	equ	0xFE5
 18213                           fsr1h	equ	0xFE2
 18214                           fsr1l	equ	0xFE1
 18215                           indf2	equ	0xFDF
 18216                           postinc2	equ	0xFDE
 18217                           postdec2	equ	0xFDD
 18218                           fsr2h	equ	0xFDA
 18219                           fsr2l	equ	0xFD9
 18220                           status	equ	0xFD8
 18221                           
 18222 ;; *************** function _atoi *****************
 18223 ;; Defined at:
 18224 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
 18225 ;; Parameters:    Size  Location     Type
 18226 ;;  s               2   29[COMRAM] PTR const unsigned char 
 18227 ;;		 -> uart_str(150), NULL(0), 
 18228 ;; Auto vars:     Size  Location     Type
 18229 ;;  a               2   34[COMRAM] int 
 18230 ;;  sign            1   33[COMRAM] unsigned char 
 18231 ;; Return value:  Size  Location     Type
 18232 ;;                  2   29[COMRAM] int 
 18233 ;; Registers used:
 18234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18235 ;; Tracked objects:
 18236 ;;		On entry : 0/0
 18237 ;;		On exit  : 0/0
 18238 ;;		Unchanged: 0/0
 18239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18240 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18241 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18242 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18243 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18244 ;;Total ram usage:        7 bytes
 18245 ;; Hardware stack levels used:    1
 18246 ;; Hardware stack levels required when called:    6
 18247 ;; This function calls:
 18248 ;;		___wmul
 18249 ;;		_isdigit
 18250 ;; This function is called by:
 18251 ;;		_parse_cmd_str
 18252 ;; This function uses a non-reentrant model
 18253 ;;
 18254                           
 18255                           	psect	text82
 18256  00398C                     __ptext82:
 18257                           	opt stack 0
 18258  00398C                     _atoi:
 18259                           	opt stack 22
 18260                           
 18261                           ;incstack = 0
 18262  00398C  D002               	goto	l8591
 18263  00398E                     l8589:
 18264  00398E  4A1E               	infsnz	atoi@s,f,c
 18265  003990  2A1F               	incf	atoi@s+1,f,c
 18266  003992                     l8591:
 18267  003992  C01E  FFD9         	movff	atoi@s,fsr2l
 18268  003996  C01F  FFDA         	movff	atoi@s+1,fsr2h
 18269  00399A  0E20               	movlw	32
 18270  00399C  18DE               	xorwf	postinc2,w,c
 18271  00399E  B4D8               	btfsc	status,2,c
 18272  0039A0  D7F6               	goto	l8589
 18273  0039A2  C01E  FFD9         	movff	atoi@s,fsr2l
 18274  0039A6  C01F  FFDA         	movff	atoi@s+1,fsr2h
 18275  0039AA  0E09               	movlw	9
 18276  0039AC  18DE               	xorwf	postinc2,w,c
 18277  0039AE  B4D8               	btfsc	status,2,c
 18278  0039B0  D7EE               	goto	l8589
 18279  0039B2  0E00               	movlw	0
 18280  0039B4  6E24               	movwf	atoi@a+1,c
 18281  0039B6  0E00               	movlw	0
 18282  0039B8  6E23               	movwf	atoi@a,c
 18283  0039BA  0E00               	movlw	0
 18284  0039BC  6E22               	movwf	atoi@sign,c
 18285  0039BE  C01E  FFD9         	movff	atoi@s,fsr2l
 18286  0039C2  C01F  FFDA         	movff	atoi@s+1,fsr2h
 18287  0039C6  0E2D               	movlw	45
 18288  0039C8  18DE               	xorwf	postinc2,w,c
 18289  0039CA  A4D8               	btfss	status,2,c
 18290  0039CC  D002               	goto	l8601
 18291  0039CE  2A22               	incf	atoi@sign,f,c
 18292  0039D0  D024               	goto	l8607
 18293  0039D2                     l8601:
 18294  0039D2  C01E  FFD9         	movff	atoi@s,fsr2l
 18295  0039D6  C01F  FFDA         	movff	atoi@s+1,fsr2h
 18296  0039DA  0E2B               	movlw	43
 18297  0039DC  18DE               	xorwf	postinc2,w,c
 18298  0039DE  A4D8               	btfss	status,2,c
 18299  0039E0  D01E               	goto	l8609
 18300  0039E2  D01B               	goto	l8607
 18301  0039E4                     l8605:
 18302  0039E4  C023  F018         	movff	atoi@a,___wmul@multiplier
 18303  0039E8  C024  F019         	movff	atoi@a+1,___wmul@multiplier+1
 18304  0039EC  0E00               	movlw	0
 18305  0039EE  6E1B               	movwf	___wmul@multiplicand+1,c
 18306  0039F0  0E0A               	movlw	10
 18307  0039F2  6E1A               	movwf	___wmul@multiplicand,c
 18308  0039F4  EC04  F026         	call	___wmul	;wreg free
 18309  0039F8  C01E  FFD9         	movff	atoi@s,fsr2l
 18310  0039FC  C01F  FFDA         	movff	atoi@s+1,fsr2h
 18311  003A00  50DF               	movf	indf2,w,c
 18312  003A02  6E20               	movwf	??_atoi& (0+255),c
 18313  003A04  6A21               	clrf	(??_atoi+1)& (0+255),c
 18314  003A06  5018               	movf	?___wmul,w,c
 18315  003A08  2620               	addwf	??_atoi,f,c
 18316  003A0A  5019               	movf	?___wmul+1,w,c
 18317  003A0C  2221               	addwfc	??_atoi+1,f,c
 18318  003A0E  0ED0               	movlw	208
 18319  003A10  2420               	addwf	??_atoi,w,c
 18320  003A12  6E23               	movwf	atoi@a,c
 18321  003A14  0EFF               	movlw	255
 18322  003A16  2021               	addwfc	??_atoi+1,w,c
 18323  003A18  6E24               	movwf	atoi@a+1,c
 18324  003A1A                     l8607:
 18325  003A1A  4A1E               	infsnz	atoi@s,f,c
 18326  003A1C  2A1F               	incf	atoi@s+1,f,c
 18327  003A1E                     l8609:
 18328  003A1E  C01E  FFD9         	movff	atoi@s,fsr2l
 18329  003A22  C01F  FFDA         	movff	atoi@s+1,fsr2h
 18330  003A26  50DF               	movf	indf2,w,c
 18331  003A28  EC7F  F026         	call	_isdigit
 18332  003A2C  B0D8               	btfsc	status,0,c
 18333  003A2E  D7DA               	goto	l8605
 18334  003A30  5022               	movf	atoi@sign,w,c
 18335  003A32  B4D8               	btfsc	status,2,c
 18336  003A34  D00D               	goto	l1407
 18337  003A36  C023  F020         	movff	atoi@a,??_atoi
 18338  003A3A  C024  F021         	movff	atoi@a+1,??_atoi+1
 18339  003A3E  1E20               	comf	??_atoi,f,c
 18340  003A40  1E21               	comf	??_atoi+1,f,c
 18341  003A42  4A20               	infsnz	??_atoi,f,c
 18342  003A44  2A21               	incf	??_atoi+1,f,c
 18343  003A46  C020  F01E         	movff	??_atoi,?_atoi
 18344  003A4A  C021  F01F         	movff	??_atoi+1,?_atoi+1
 18345  003A4E  0012               	return	
 18346  003A50                     l1407:
 18347  003A50  C023  F01E         	movff	atoi@a,?_atoi
 18348  003A54  C024  F01F         	movff	atoi@a+1,?_atoi+1
 18349  003A58  0012               	return		;funcret
 18350  003A5A                     __end_of_atoi:
 18351                           	opt stack 0
 18352                           tosu	equ	0xFFF
 18353                           tosh	equ	0xFFE
 18354                           tosl	equ	0xFFD
 18355                           pclath	equ	0xFFA
 18356                           tblptru	equ	0xFF8
 18357                           tblptrh	equ	0xFF7
 18358                           tblptrl	equ	0xFF6
 18359                           tablat	equ	0xFF5
 18360                           prodh	equ	0xFF4
 18361                           prodl	equ	0xFF3
 18362                           intcon	equ	0xFF2
 18363                           postinc0	equ	0xFEE
 18364                           wreg	equ	0xFE8
 18365                           indf1	equ	0xFE7
 18366                           postinc1	equ	0xFE6
 18367                           postdec1	equ	0xFE5
 18368                           fsr1h	equ	0xFE2
 18369                           fsr1l	equ	0xFE1
 18370                           indf2	equ	0xFDF
 18371                           postinc2	equ	0xFDE
 18372                           postdec2	equ	0xFDD
 18373                           fsr2h	equ	0xFDA
 18374                           fsr2l	equ	0xFD9
 18375                           status	equ	0xFD8
 18376                           
 18377 ;; *************** function _isdigit *****************
 18378 ;; Defined at:
 18379 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18380 ;; Parameters:    Size  Location     Type
 18381 ;;  c               1    wreg     unsigned char 
 18382 ;; Auto vars:     Size  Location     Type
 18383 ;;  c               1   17[COMRAM] unsigned char 
 18384 ;; Return value:  Size  Location     Type
 18385 ;;		None               void
 18386 ;; Registers used:
 18387 ;;		wreg, status,2, status,0
 18388 ;; Tracked objects:
 18389 ;;		On entry : 0/0
 18390 ;;		On exit  : 0/0
 18391 ;;		Unchanged: 0/0
 18392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18395 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18396 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18397 ;;Total ram usage:        3 bytes
 18398 ;; Hardware stack levels used:    1
 18399 ;; Hardware stack levels required when called:    5
 18400 ;; This function calls:
 18401 ;;		Nothing
 18402 ;; This function is called by:
 18403 ;;		_collect_row
 18404 ;;		_get_uid
 18405 ;;		_get_direction
 18406 ;;		_get_dis_frq
 18407 ;;		_get_over_write_data
 18408 ;;		_collect_column
 18409 ;;		_atoi
 18410 ;; This function uses a non-reentrant model
 18411 ;;
 18412                           
 18413                           	psect	text83
 18414  004CFE                     __ptext83:
 18415                           	opt stack 0
 18416  004CFE                     _isdigit:
 18417                           	opt stack 22
 18418                           
 18419                           ;incstack = 0
 18420                           ;isdigit@c stored from wreg
 18421  004CFE  6E12               	movwf	isdigit@c,c
 18422  004D00  0E00               	movlw	0
 18423  004D02  6E11               	movwf	_isdigit$2569,c
 18424  004D04  0E3A               	movlw	58
 18425  004D06  6012               	cpfslt	isdigit@c,c
 18426  004D08  D005               	goto	l8031
 18427  004D0A  0E2F               	movlw	47
 18428  004D0C  6412               	cpfsgt	isdigit@c,c
 18429  004D0E  D002               	goto	l8031
 18430  004D10  0E01               	movlw	1
 18431  004D12  6E11               	movwf	_isdigit$2569,c
 18432  004D14                     l8031:
 18433  004D14  C011  F010         	movff	_isdigit$2569,??_isdigit
 18434  004D18  3010               	rrcf	??_isdigit,w,c
 18435  004D1A  0012               	return	
 18436  004D1C                     __end_of_isdigit:
 18437                           	opt stack 0
 18438                           tosu	equ	0xFFF
 18439                           tosh	equ	0xFFE
 18440                           tosl	equ	0xFFD
 18441                           pclath	equ	0xFFA
 18442                           tblptru	equ	0xFF8
 18443                           tblptrh	equ	0xFF7
 18444                           tblptrl	equ	0xFF6
 18445                           tablat	equ	0xFF5
 18446                           prodh	equ	0xFF4
 18447                           prodl	equ	0xFF3
 18448                           intcon	equ	0xFF2
 18449                           postinc0	equ	0xFEE
 18450                           wreg	equ	0xFE8
 18451                           indf1	equ	0xFE7
 18452                           postinc1	equ	0xFE6
 18453                           postdec1	equ	0xFE5
 18454                           fsr1h	equ	0xFE2
 18455                           fsr1l	equ	0xFE1
 18456                           indf2	equ	0xFDF
 18457                           postinc2	equ	0xFDE
 18458                           postdec2	equ	0xFDD
 18459                           fsr2h	equ	0xFDA
 18460                           fsr2l	equ	0xFD9
 18461                           status	equ	0xFD8
 18462                           
 18463 ;; *************** function ___wmul *****************
 18464 ;; Defined at:
 18465 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18466 ;; Parameters:    Size  Location     Type
 18467 ;;  multiplier      2   23[COMRAM] unsigned int 
 18468 ;;  multiplicand    2   25[COMRAM] unsigned int 
 18469 ;; Auto vars:     Size  Location     Type
 18470 ;;  product         2   27[COMRAM] unsigned int 
 18471 ;; Return value:  Size  Location     Type
 18472 ;;                  2   23[COMRAM] unsigned int 
 18473 ;; Registers used:
 18474 ;;		wreg, status,2, status,0, prodl, prodh
 18475 ;; Tracked objects:
 18476 ;;		On entry : 0/0
 18477 ;;		On exit  : 0/0
 18478 ;;		Unchanged: 0/0
 18479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18480 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18481 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18483 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18484 ;;Total ram usage:        6 bytes
 18485 ;; Hardware stack levels used:    1
 18486 ;; Hardware stack levels required when called:    5
 18487 ;; This function calls:
 18488 ;;		Nothing
 18489 ;; This function is called by:
 18490 ;;		_init_clcd_cusotom_lcd
 18491 ;;		_conflict_check
 18492 ;;		_conflict
 18493 ;;		_get_new_uid
 18494 ;;		_set_string_data
 18495 ;;		_update_string_data
 18496 ;;		_make_display
 18497 ;;		_get_uid
 18498 ;;		_atoi
 18499 ;; This function uses a non-reentrant model
 18500 ;;
 18501                           
 18502                           	psect	text84
 18503  004C08                     __ptext84:
 18504                           	opt stack 0
 18505  004C08                     ___wmul:
 18506                           	opt stack 24
 18507                           
 18508                           ;incstack = 0
 18509  004C08  5018               	movf	___wmul@multiplier,w,c
 18510  004C0A  021A               	mulwf	___wmul@multiplicand,c
 18511  004C0C  CFF3 F01C          	movff	prodl,___wmul@product
 18512  004C10  CFF4 F01D          	movff	prodh,___wmul@product+1
 18513  004C14  5018               	movf	___wmul@multiplier,w,c
 18514  004C16  021B               	mulwf	___wmul@multiplicand+1,c
 18515  004C18  50F3               	movf	prodl,w,c
 18516  004C1A  261D               	addwf	___wmul@product+1,f,c
 18517  004C1C  5019               	movf	___wmul@multiplier+1,w,c
 18518  004C1E  021A               	mulwf	___wmul@multiplicand,c
 18519  004C20  50F3               	movf	prodl,w,c
 18520  004C22  261D               	addwf	___wmul@product+1,f,c
 18521  004C24  C01C  F018         	movff	___wmul@product,?___wmul
 18522  004C28  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 18523  004C2C  0012               	return	
 18524  004C2E                     __end_of___wmul:
 18525                           	opt stack 0
 18526                           tosu	equ	0xFFF
 18527                           tosh	equ	0xFFE
 18528                           tosl	equ	0xFFD
 18529                           pclath	equ	0xFFA
 18530                           tblptru	equ	0xFF8
 18531                           tblptrh	equ	0xFF7
 18532                           tblptrl	equ	0xFF6
 18533                           tablat	equ	0xFF5
 18534                           prodh	equ	0xFF4
 18535                           prodl	equ	0xFF3
 18536                           intcon	equ	0xFF2
 18537                           postinc0	equ	0xFEE
 18538                           wreg	equ	0xFE8
 18539                           indf1	equ	0xFE7
 18540                           postinc1	equ	0xFE6
 18541                           postdec1	equ	0xFE5
 18542                           fsr1h	equ	0xFE2
 18543                           fsr1l	equ	0xFE1
 18544                           indf2	equ	0xFDF
 18545                           postinc2	equ	0xFDE
 18546                           postdec2	equ	0xFDD
 18547                           fsr2h	equ	0xFDA
 18548                           fsr2l	equ	0xFD9
 18549                           status	equ	0xFD8
 18550                           
 18551 ;; *************** function _EUSART1_Read *****************
 18552 ;; Defined at:
 18553 ;;		line 112 in file "mcc_generated_files/eusart1.c"
 18554 ;; Parameters:    Size  Location     Type
 18555 ;;		None
 18556 ;; Auto vars:     Size  Location     Type
 18557 ;;  readValue       1   15[COMRAM] unsigned char 
 18558 ;; Return value:  Size  Location     Type
 18559 ;;                  1    wreg      unsigned char 
 18560 ;; Registers used:
 18561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18562 ;; Tracked objects:
 18563 ;;		On entry : 0/0
 18564 ;;		On exit  : 0/0
 18565 ;;		Unchanged: 0/0
 18566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18568 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18570 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18571 ;;Total ram usage:        1 bytes
 18572 ;; Hardware stack levels used:    1
 18573 ;; Hardware stack levels required when called:    5
 18574 ;; This function calls:
 18575 ;;		Nothing
 18576 ;; This function is called by:
 18577 ;;		_cmd_consol_task
 18578 ;; This function uses a non-reentrant model
 18579 ;;
 18580                           
 18581                           	psect	text85
 18582  004A90                     __ptext85:
 18583                           	opt stack 0
 18584  004A90                     _EUSART1_Read:
 18585                           	opt stack 24
 18586                           
 18587                           ;eusart1.c: 114: uint8_t readValue = 0;
 18588                           
 18589                           ;incstack = 0
 18590  004A90  0E00               	movlw	0
 18591  004A92  6E10               	movwf	EUSART1_Read@readValue,c
 18592  004A94                     l8659:
 18593  004A94  5044               	movf	_eusart1RxCount,w,c	;volatile
 18594  004A96  B4D8               	btfsc	status,2,c
 18595  004A98  D7FD               	goto	l8659
 18596                           
 18597                           ;eusart1.c: 118: }
 18598                           ;eusart1.c: 120: readValue = eusart1RxBuffer[eusart1RxTail++];
 18599  004A9A  5046               	movf	_eusart1RxTail,w,c	;volatile
 18600  004A9C  0D01               	mullw	1
 18601  004A9E  0E00               	movlw	low _eusart1RxBuffer
 18602  004AA0  24F3               	addwf	prodl,w,c
 18603  004AA2  6ED9               	movwf	fsr2l,c
 18604  004AA4  0E02               	movlw	high _eusart1RxBuffer
 18605  004AA6  20F4               	addwfc	prodh,w,c
 18606  004AA8  6EDA               	movwf	fsr2h,c
 18607  004AAA  50DF               	movf	indf2,w,c
 18608  004AAC  6E10               	movwf	EUSART1_Read@readValue,c
 18609  004AAE  2A46               	incf	_eusart1RxTail,f,c	;volatile
 18610                           
 18611                           ;eusart1.c: 121: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 18612  004AB0  0E3F               	movlw	63
 18613  004AB2  6446               	cpfsgt	_eusart1RxTail,c	;volatile
 18614  004AB4  D002               	goto	l8669
 18615                           
 18616                           ;eusart1.c: 122: {
 18617                           ;eusart1.c: 123: eusart1RxTail = 0;
 18618  004AB6  0E00               	movlw	0
 18619  004AB8  6E46               	movwf	_eusart1RxTail,c	;volatile
 18620  004ABA                     l8669:
 18621                           
 18622                           ;eusart1.c: 124: }
 18623                           ;eusart1.c: 125: PIE1bits.RC1IE = 0;
 18624  004ABA  9A9D               	bcf	3997,5,c	;volatile
 18625                           
 18626                           ;eusart1.c: 126: eusart1RxCount--;
 18627  004ABC  0644               	decf	_eusart1RxCount,f,c	;volatile
 18628                           
 18629                           ;eusart1.c: 127: PIE1bits.RC1IE = 1;
 18630  004ABE  8A9D               	bsf	3997,5,c	;volatile
 18631                           
 18632                           ;eusart1.c: 129: return readValue;
 18633  004AC0  5010               	movf	EUSART1_Read@readValue,w,c
 18634  004AC2  0012               	return	
 18635  004AC4                     __end_of_EUSART1_Read:
 18636                           	opt stack 0
 18637                           tosu	equ	0xFFF
 18638                           tosh	equ	0xFFE
 18639                           tosl	equ	0xFFD
 18640                           pclath	equ	0xFFA
 18641                           tblptru	equ	0xFF8
 18642                           tblptrh	equ	0xFF7
 18643                           tblptrl	equ	0xFF6
 18644                           tablat	equ	0xFF5
 18645                           prodh	equ	0xFF4
 18646                           prodl	equ	0xFF3
 18647                           intcon	equ	0xFF2
 18648                           postinc0	equ	0xFEE
 18649                           wreg	equ	0xFE8
 18650                           indf1	equ	0xFE7
 18651                           postinc1	equ	0xFE6
 18652                           postdec1	equ	0xFE5
 18653                           fsr1h	equ	0xFE2
 18654                           fsr1l	equ	0xFE1
 18655                           indf2	equ	0xFDF
 18656                           postinc2	equ	0xFDE
 18657                           postdec2	equ	0xFDD
 18658                           fsr2h	equ	0xFDA
 18659                           fsr2l	equ	0xFD9
 18660                           status	equ	0xFD8
 18661                           
 18662 ;; *************** function _TMR0_StopTimer *****************
 18663 ;; Defined at:
 18664 ;;		line 101 in file "mcc_generated_files/tmr0.c"
 18665 ;; Parameters:    Size  Location     Type
 18666 ;;		None
 18667 ;; Auto vars:     Size  Location     Type
 18668 ;;		None
 18669 ;; Return value:  Size  Location     Type
 18670 ;;                  1    wreg      void 
 18671 ;; Registers used:
 18672 ;;		None
 18673 ;; Tracked objects:
 18674 ;;		On entry : 0/0
 18675 ;;		On exit  : 0/0
 18676 ;;		Unchanged: 0/0
 18677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18682 ;;Total ram usage:        0 bytes
 18683 ;; Hardware stack levels used:    1
 18684 ;; Hardware stack levels required when called:    5
 18685 ;; This function calls:
 18686 ;;		Nothing
 18687 ;; This function is called by:
 18688 ;;		_main
 18689 ;; This function uses a non-reentrant model
 18690 ;;
 18691                           
 18692                           	psect	text86
 18693  004EBC                     __ptext86:
 18694                           	opt stack 0
 18695  004EBC                     _TMR0_StopTimer:
 18696                           	opt stack 25
 18697                           
 18698                           ;tmr0.c: 104: T0CONbits.TMR0ON = 0;
 18699                           
 18700                           ;incstack = 0
 18701  004EBC  9ED5               	bcf	4053,7,c	;volatile
 18702  004EBE  0012               	return		;funcret
 18703  004EC0                     __end_of_TMR0_StopTimer:
 18704                           	opt stack 0
 18705                           tosu	equ	0xFFF
 18706                           tosh	equ	0xFFE
 18707                           tosl	equ	0xFFD
 18708                           pclath	equ	0xFFA
 18709                           tblptru	equ	0xFF8
 18710                           tblptrh	equ	0xFF7
 18711                           tblptrl	equ	0xFF6
 18712                           tablat	equ	0xFF5
 18713                           prodh	equ	0xFF4
 18714                           prodl	equ	0xFF3
 18715                           intcon	equ	0xFF2
 18716                           postinc0	equ	0xFEE
 18717                           wreg	equ	0xFE8
 18718                           indf1	equ	0xFE7
 18719                           postinc1	equ	0xFE6
 18720                           postdec1	equ	0xFE5
 18721                           fsr1h	equ	0xFE2
 18722                           fsr1l	equ	0xFE1
 18723                           indf2	equ	0xFDF
 18724                           postinc2	equ	0xFDE
 18725                           postdec2	equ	0xFDD
 18726                           fsr2h	equ	0xFDA
 18727                           fsr2l	equ	0xFD9
 18728                           status	equ	0xFD8
 18729                           
 18730 ;; *************** function _SYSTEM_Initialize *****************
 18731 ;; Defined at:
 18732 ;;		line 111 in file "mcc_generated_files/mcc.c"
 18733 ;; Parameters:    Size  Location     Type
 18734 ;;		None
 18735 ;; Auto vars:     Size  Location     Type
 18736 ;;		None
 18737 ;; Return value:  Size  Location     Type
 18738 ;;                  1    wreg      void 
 18739 ;; Registers used:
 18740 ;;		wreg, status,2, status,0, cstack
 18741 ;; Tracked objects:
 18742 ;;		On entry : 0/0
 18743 ;;		On exit  : 0/0
 18744 ;;		Unchanged: 0/0
 18745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18750 ;;Total ram usage:        0 bytes
 18751 ;; Hardware stack levels used:    1
 18752 ;; Hardware stack levels required when called:    7
 18753 ;; This function calls:
 18754 ;;		_EUSART1_Initialize
 18755 ;;		_EUSART2_Initialize
 18756 ;;		_INTERRUPT_Initialize
 18757 ;;		_OSCILLATOR_Initialize
 18758 ;;		_PIN_MANAGER_Initialize
 18759 ;;		_TMR0_Initialize
 18760 ;;		_TMR1_Initialize
 18761 ;;		_TMR5_Initialize
 18762 ;; This function is called by:
 18763 ;;		_main
 18764 ;; This function uses a non-reentrant model
 18765 ;;
 18766                           
 18767                           	psect	text87
 18768  004CBE                     __ptext87:
 18769                           	opt stack 0
 18770  004CBE                     _SYSTEM_Initialize:
 18771                           	opt stack 23
 18772                           
 18773                           ;mcc.c: 114: INTERRUPT_Initialize();
 18774                           
 18775                           ;incstack = 0
 18776  004CBE  EC64  F027         	call	_INTERRUPT_Initialize	;wreg free
 18777                           
 18778                           ;mcc.c: 115: PIN_MANAGER_Initialize();
 18779  004CC2  ECAF  F023         	call	_PIN_MANAGER_Initialize	;wreg free
 18780                           
 18781                           ;mcc.c: 116: OSCILLATOR_Initialize();
 18782  004CC6  EC19  F027         	call	_OSCILLATOR_Initialize	;wreg free
 18783                           
 18784                           ;mcc.c: 117: TMR5_Initialize();
 18785  004CCA  EC17  F026         	call	_TMR5_Initialize	;wreg free
 18786                           
 18787                           ;mcc.c: 118: TMR1_Initialize();
 18788  004CCE  EC8E  F026         	call	_TMR1_Initialize	;wreg free
 18789                           
 18790                           ;mcc.c: 119: TMR0_Initialize();
 18791  004CD2  ECF6  F024         	call	_TMR0_Initialize	;wreg free
 18792                           
 18793                           ;mcc.c: 120: EUSART1_Initialize();
 18794  004CD6  EC2D  F025         	call	_EUSART1_Initialize	;wreg free
 18795                           
 18796                           ;mcc.c: 121: EUSART2_Initialize();
 18797  004CDA  ECB9  F026         	call	_EUSART2_Initialize	;wreg free
 18798  004CDE  0012               	return		;funcret
 18799  004CE0                     __end_of_SYSTEM_Initialize:
 18800                           	opt stack 0
 18801                           tosu	equ	0xFFF
 18802                           tosh	equ	0xFFE
 18803                           tosl	equ	0xFFD
 18804                           pclath	equ	0xFFA
 18805                           tblptru	equ	0xFF8
 18806                           tblptrh	equ	0xFF7
 18807                           tblptrl	equ	0xFF6
 18808                           tablat	equ	0xFF5
 18809                           prodh	equ	0xFF4
 18810                           prodl	equ	0xFF3
 18811                           intcon	equ	0xFF2
 18812                           postinc0	equ	0xFEE
 18813                           wreg	equ	0xFE8
 18814                           indf1	equ	0xFE7
 18815                           postinc1	equ	0xFE6
 18816                           postdec1	equ	0xFE5
 18817                           fsr1h	equ	0xFE2
 18818                           fsr1l	equ	0xFE1
 18819                           indf2	equ	0xFDF
 18820                           postinc2	equ	0xFDE
 18821                           postdec2	equ	0xFDD
 18822                           fsr2h	equ	0xFDA
 18823                           fsr2l	equ	0xFD9
 18824                           status	equ	0xFD8
 18825                           
 18826 ;; *************** function _TMR5_Initialize *****************
 18827 ;; Defined at:
 18828 ;;		line 62 in file "mcc_generated_files/tmr5.c"
 18829 ;; Parameters:    Size  Location     Type
 18830 ;;		None
 18831 ;; Auto vars:     Size  Location     Type
 18832 ;;		None
 18833 ;; Return value:  Size  Location     Type
 18834 ;;                  1    wreg      void 
 18835 ;; Registers used:
 18836 ;;		wreg, status,2, cstack
 18837 ;; Tracked objects:
 18838 ;;		On entry : 0/0
 18839 ;;		On exit  : 0/0
 18840 ;;		Unchanged: 0/0
 18841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18846 ;;Total ram usage:        0 bytes
 18847 ;; Hardware stack levels used:    1
 18848 ;; Hardware stack levels required when called:    6
 18849 ;; This function calls:
 18850 ;;		_TMR5_StartTimer
 18851 ;; This function is called by:
 18852 ;;		_SYSTEM_Initialize
 18853 ;; This function uses a non-reentrant model
 18854 ;;
 18855                           
 18856                           	psect	text88
 18857  004C2E                     __ptext88:
 18858                           	opt stack 0
 18859  004C2E                     _TMR5_Initialize:
 18860                           	opt stack 23
 18861                           
 18862                           ;tmr5.c: 67: T5CON = 0x12;
 18863                           
 18864                           ;incstack = 0
 18865  004C2E  0E12               	movlw	18
 18866  004C30  010F               	movlb	15	; () banked
 18867  004C32  6F4E               	movwf	78,b	;volatile
 18868                           
 18869                           ;tmr5.c: 70: T5GCON = 0x00;
 18870  004C34  0E00               	movlw	0
 18871  004C36  010F               	movlb	15	; () banked
 18872  004C38  6F4D               	movwf	77,b	;volatile
 18873                           
 18874                           ; BSR set to: 15
 18875                           ;tmr5.c: 73: TMR5H = 0xFF;
 18876  004C3A  010F               	movlb	15	; () banked
 18877  004C3C  6950               	setf	80,b	;volatile
 18878                           
 18879                           ;tmr5.c: 76: TMR5L = 0xFB;
 18880  004C3E  0EFB               	movlw	251
 18881  004C40  010F               	movlb	15	; () banked
 18882  004C42  6F4F               	movwf	79,b	;volatile
 18883                           
 18884                           ; BSR set to: 15
 18885                           ;tmr5.c: 79: timer5ReloadVal=TMR5;
 18886  004C44  CF4F F1F0          	movff	3919,_timer5ReloadVal	;volatile
 18887  004C48  CF50 F1F1          	movff	3920,_timer5ReloadVal+1	;volatile
 18888                           
 18889                           ; BSR set to: 15
 18890                           ;tmr5.c: 82: PIR5bits.TMR5IF = 0;
 18891  004C4C  927E               	bcf	3966,1,c	;volatile
 18892                           
 18893                           ; BSR set to: 15
 18894                           ;tmr5.c: 85: TMR5_StartTimer();
 18895  004C4E  EC59  F027         	call	_TMR5_StartTimer	;wreg free
 18896  004C52  0012               	return		;funcret
 18897  004C54                     __end_of_TMR5_Initialize:
 18898                           	opt stack 0
 18899                           tosu	equ	0xFFF
 18900                           tosh	equ	0xFFE
 18901                           tosl	equ	0xFFD
 18902                           pclath	equ	0xFFA
 18903                           tblptru	equ	0xFF8
 18904                           tblptrh	equ	0xFF7
 18905                           tblptrl	equ	0xFF6
 18906                           tablat	equ	0xFF5
 18907                           prodh	equ	0xFF4
 18908                           prodl	equ	0xFF3
 18909                           intcon	equ	0xFF2
 18910                           postinc0	equ	0xFEE
 18911                           wreg	equ	0xFE8
 18912                           indf1	equ	0xFE7
 18913                           postinc1	equ	0xFE6
 18914                           postdec1	equ	0xFE5
 18915                           fsr1h	equ	0xFE2
 18916                           fsr1l	equ	0xFE1
 18917                           indf2	equ	0xFDF
 18918                           postinc2	equ	0xFDE
 18919                           postdec2	equ	0xFDD
 18920                           fsr2h	equ	0xFDA
 18921                           fsr2l	equ	0xFD9
 18922                           status	equ	0xFD8
 18923                           
 18924 ;; *************** function _TMR5_StartTimer *****************
 18925 ;; Defined at:
 18926 ;;		line 88 in file "mcc_generated_files/tmr5.c"
 18927 ;; Parameters:    Size  Location     Type
 18928 ;;		None
 18929 ;; Auto vars:     Size  Location     Type
 18930 ;;		None
 18931 ;; Return value:  Size  Location     Type
 18932 ;;                  1    wreg      void 
 18933 ;; Registers used:
 18934 ;;		None
 18935 ;; Tracked objects:
 18936 ;;		On entry : 0/0
 18937 ;;		On exit  : 0/0
 18938 ;;		Unchanged: 0/0
 18939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18944 ;;Total ram usage:        0 bytes
 18945 ;; Hardware stack levels used:    1
 18946 ;; Hardware stack levels required when called:    5
 18947 ;; This function calls:
 18948 ;;		Nothing
 18949 ;; This function is called by:
 18950 ;;		_TMR5_Initialize
 18951 ;;		__delay_10uS
 18952 ;; This function uses a non-reentrant model
 18953 ;;
 18954                           
 18955                           	psect	text89
 18956  004EB2                     __ptext89:
 18957                           	opt stack 0
 18958  004EB2                     _TMR5_StartTimer:
 18959                           	opt stack 20
 18960                           
 18961                           ;tmr5.c: 91: T5CONbits.TMR5ON = 1;
 18962                           
 18963                           ;incstack = 0
 18964  004EB2  010F               	movlb	15	; () banked
 18965  004EB4  814E               	bsf	78,0,b	;volatile
 18966                           
 18967                           ; BSR set to: 15
 18968  004EB6  0012               	return		;funcret
 18969  004EB8                     __end_of_TMR5_StartTimer:
 18970                           	opt stack 0
 18971                           tosu	equ	0xFFF
 18972                           tosh	equ	0xFFE
 18973                           tosl	equ	0xFFD
 18974                           pclath	equ	0xFFA
 18975                           tblptru	equ	0xFF8
 18976                           tblptrh	equ	0xFF7
 18977                           tblptrl	equ	0xFF6
 18978                           tablat	equ	0xFF5
 18979                           prodh	equ	0xFF4
 18980                           prodl	equ	0xFF3
 18981                           intcon	equ	0xFF2
 18982                           postinc0	equ	0xFEE
 18983                           wreg	equ	0xFE8
 18984                           indf1	equ	0xFE7
 18985                           postinc1	equ	0xFE6
 18986                           postdec1	equ	0xFE5
 18987                           fsr1h	equ	0xFE2
 18988                           fsr1l	equ	0xFE1
 18989                           indf2	equ	0xFDF
 18990                           postinc2	equ	0xFDE
 18991                           postdec2	equ	0xFDD
 18992                           fsr2h	equ	0xFDA
 18993                           fsr2l	equ	0xFD9
 18994                           status	equ	0xFD8
 18995                           
 18996 ;; *************** function _TMR1_Initialize *****************
 18997 ;; Defined at:
 18998 ;;		line 62 in file "mcc_generated_files/tmr1.c"
 18999 ;; Parameters:    Size  Location     Type
 19000 ;;		None
 19001 ;; Auto vars:     Size  Location     Type
 19002 ;;		None
 19003 ;; Return value:  Size  Location     Type
 19004 ;;                  1    wreg      void 
 19005 ;; Registers used:
 19006 ;;		wreg, status,2, cstack
 19007 ;; Tracked objects:
 19008 ;;		On entry : 0/0
 19009 ;;		On exit  : 0/0
 19010 ;;		Unchanged: 0/0
 19011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19016 ;;Total ram usage:        0 bytes
 19017 ;; Hardware stack levels used:    1
 19018 ;; Hardware stack levels required when called:    6
 19019 ;; This function calls:
 19020 ;;		_TMR1_StartTimer
 19021 ;; This function is called by:
 19022 ;;		_SYSTEM_Initialize
 19023 ;; This function uses a non-reentrant model
 19024 ;;
 19025                           
 19026                           	psect	text90
 19027  004D1C                     __ptext90:
 19028                           	opt stack 0
 19029  004D1C                     _TMR1_Initialize:
 19030                           	opt stack 23
 19031                           
 19032                           ;tmr1.c: 67: T1CON = 0x32;
 19033                           
 19034                           ; BSR set to: 15
 19035                           ;incstack = 0
 19036  004D1C  0E32               	movlw	50
 19037  004D1E  6ECD               	movwf	4045,c	;volatile
 19038                           
 19039                           ;tmr1.c: 70: T1GCON = 0x00;
 19040  004D20  0E00               	movlw	0
 19041  004D22  6ECC               	movwf	4044,c	;volatile
 19042                           
 19043                           ;tmr1.c: 73: TMR1H = 0xFF;
 19044  004D24  68CF               	setf	4047,c	;volatile
 19045                           
 19046                           ;tmr1.c: 76: TMR1L = 0x83;
 19047  004D26  0E83               	movlw	131
 19048  004D28  6ECE               	movwf	4046,c	;volatile
 19049                           
 19050                           ;tmr1.c: 79: timer1ReloadVal=TMR1;
 19051  004D2A  CFCE F1EE          	movff	4046,_timer1ReloadVal	;volatile
 19052  004D2E  CFCF F1EF          	movff	4047,_timer1ReloadVal+1	;volatile
 19053                           
 19054                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
 19055  004D32  909E               	bcf	3998,0,c	;volatile
 19056                           
 19057                           ;tmr1.c: 85: TMR1_StartTimer();
 19058  004D34  EC60  F027         	call	_TMR1_StartTimer	;wreg free
 19059  004D38  0012               	return		;funcret
 19060  004D3A                     __end_of_TMR1_Initialize:
 19061                           	opt stack 0
 19062                           tosu	equ	0xFFF
 19063                           tosh	equ	0xFFE
 19064                           tosl	equ	0xFFD
 19065                           pclath	equ	0xFFA
 19066                           tblptru	equ	0xFF8
 19067                           tblptrh	equ	0xFF7
 19068                           tblptrl	equ	0xFF6
 19069                           tablat	equ	0xFF5
 19070                           prodh	equ	0xFF4
 19071                           prodl	equ	0xFF3
 19072                           intcon	equ	0xFF2
 19073                           postinc0	equ	0xFEE
 19074                           wreg	equ	0xFE8
 19075                           indf1	equ	0xFE7
 19076                           postinc1	equ	0xFE6
 19077                           postdec1	equ	0xFE5
 19078                           fsr1h	equ	0xFE2
 19079                           fsr1l	equ	0xFE1
 19080                           indf2	equ	0xFDF
 19081                           postinc2	equ	0xFDE
 19082                           postdec2	equ	0xFDD
 19083                           fsr2h	equ	0xFDA
 19084                           fsr2l	equ	0xFD9
 19085                           status	equ	0xFD8
 19086                           
 19087 ;; *************** function _TMR1_StartTimer *****************
 19088 ;; Defined at:
 19089 ;;		line 88 in file "mcc_generated_files/tmr1.c"
 19090 ;; Parameters:    Size  Location     Type
 19091 ;;		None
 19092 ;; Auto vars:     Size  Location     Type
 19093 ;;		None
 19094 ;; Return value:  Size  Location     Type
 19095 ;;                  1    wreg      void 
 19096 ;; Registers used:
 19097 ;;		None
 19098 ;; Tracked objects:
 19099 ;;		On entry : 0/0
 19100 ;;		On exit  : 0/0
 19101 ;;		Unchanged: 0/0
 19102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19107 ;;Total ram usage:        0 bytes
 19108 ;; Hardware stack levels used:    1
 19109 ;; Hardware stack levels required when called:    5
 19110 ;; This function calls:
 19111 ;;		Nothing
 19112 ;; This function is called by:
 19113 ;;		_TMR1_Initialize
 19114 ;;		__delay_MS
 19115 ;; This function uses a non-reentrant model
 19116 ;;
 19117                           
 19118                           	psect	text91
 19119  004EC0                     __ptext91:
 19120                           	opt stack 0
 19121  004EC0                     _TMR1_StartTimer:
 19122                           	opt stack 20
 19123                           
 19124                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
 19125                           
 19126                           ;incstack = 0
 19127  004EC0  80CD               	bsf	4045,0,c	;volatile
 19128  004EC2  0012               	return		;funcret
 19129  004EC4                     __end_of_TMR1_StartTimer:
 19130                           	opt stack 0
 19131                           tosu	equ	0xFFF
 19132                           tosh	equ	0xFFE
 19133                           tosl	equ	0xFFD
 19134                           pclath	equ	0xFFA
 19135                           tblptru	equ	0xFF8
 19136                           tblptrh	equ	0xFF7
 19137                           tblptrl	equ	0xFF6
 19138                           tablat	equ	0xFF5
 19139                           prodh	equ	0xFF4
 19140                           prodl	equ	0xFF3
 19141                           intcon	equ	0xFF2
 19142                           postinc0	equ	0xFEE
 19143                           wreg	equ	0xFE8
 19144                           indf1	equ	0xFE7
 19145                           postinc1	equ	0xFE6
 19146                           postdec1	equ	0xFE5
 19147                           fsr1h	equ	0xFE2
 19148                           fsr1l	equ	0xFE1
 19149                           indf2	equ	0xFDF
 19150                           postinc2	equ	0xFDE
 19151                           postdec2	equ	0xFDD
 19152                           fsr2h	equ	0xFDA
 19153                           fsr2l	equ	0xFD9
 19154                           status	equ	0xFD8
 19155                           
 19156 ;; *************** function _TMR0_Initialize *****************
 19157 ;; Defined at:
 19158 ;;		line 66 in file "mcc_generated_files/tmr0.c"
 19159 ;; Parameters:    Size  Location     Type
 19160 ;;		None
 19161 ;; Auto vars:     Size  Location     Type
 19162 ;;		None
 19163 ;; Return value:  Size  Location     Type
 19164 ;;                  1    wreg      void 
 19165 ;; Registers used:
 19166 ;;		wreg, status,2, status,0, cstack
 19167 ;; Tracked objects:
 19168 ;;		On entry : 0/0
 19169 ;;		On exit  : 0/0
 19170 ;;		Unchanged: 0/0
 19171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19174 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19175 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19176 ;;Total ram usage:        2 bytes
 19177 ;; Hardware stack levels used:    1
 19178 ;; Hardware stack levels required when called:    6
 19179 ;; This function calls:
 19180 ;;		_TMR0_SetInterruptHandler
 19181 ;;		_TMR0_StartTimer
 19182 ;; This function is called by:
 19183 ;;		_SYSTEM_Initialize
 19184 ;; This function uses a non-reentrant model
 19185 ;;
 19186                           
 19187                           	psect	text92
 19188  0049EC                     __ptext92:
 19189                           	opt stack 0
 19190  0049EC                     _TMR0_Initialize:
 19191                           	opt stack 23
 19192                           
 19193                           ;tmr0.c: 71: T0CON = 0x17;
 19194                           
 19195                           ;incstack = 0
 19196  0049EC  0E17               	movlw	23
 19197  0049EE  6ED5               	movwf	4053,c	;volatile
 19198                           
 19199                           ;tmr0.c: 74: TMR0H = 0xFC;
 19200  0049F0  0EFC               	movlw	252
 19201  0049F2  6ED7               	movwf	4055,c	;volatile
 19202                           
 19203                           ;tmr0.c: 77: TMR0L = 0xEE;
 19204  0049F4  0EEE               	movlw	238
 19205  0049F6  6ED6               	movwf	4054,c	;volatile
 19206                           
 19207                           ;tmr0.c: 80: timer0ReloadVal = (TMR0H << 8) | TMR0L;
 19208  0049F8  50D6               	movf	4054,w,c	;volatile
 19209  0049FA  CFD7 F012          	movff	4055,??_TMR0_Initialize	;volatile
 19210  0049FE  6A13               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 19211  004A00  C012  F013         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 19212  004A04  6A12               	clrf	??_TMR0_Initialize,c
 19213  004A06  1012               	iorwf	??_TMR0_Initialize,w,c
 19214  004A08  6E4E               	movwf	_timer0ReloadVal,c	;volatile
 19215  004A0A  5013               	movf	??_TMR0_Initialize+1,w,c
 19216  004A0C  6E4F               	movwf	_timer0ReloadVal+1,c	;volatile
 19217                           
 19218                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
 19219  004A0E  94F2               	bcf	intcon,2,c	;volatile
 19220                           
 19221                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
 19222  004A10  8AF2               	bsf	intcon,5,c	;volatile
 19223                           
 19224                           ;tmr0.c: 89: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 19225  004A12  0ECC               	movlw	low _TMR0_DefaultInterruptHandler
 19226  004A14  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
 19227  004A16  0E4E               	movlw	high _TMR0_DefaultInterruptHandler
 19228  004A18  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
 19229  004A1A  EC4D  F027         	call	_TMR0_SetInterruptHandler	;wreg free
 19230                           
 19231                           ;tmr0.c: 92: TMR0_StartTimer();
 19232  004A1E  EC62  F027         	call	_TMR0_StartTimer	;wreg free
 19233  004A22  0012               	return		;funcret
 19234  004A24                     __end_of_TMR0_Initialize:
 19235                           	opt stack 0
 19236                           tosu	equ	0xFFF
 19237                           tosh	equ	0xFFE
 19238                           tosl	equ	0xFFD
 19239                           pclath	equ	0xFFA
 19240                           tblptru	equ	0xFF8
 19241                           tblptrh	equ	0xFF7
 19242                           tblptrl	equ	0xFF6
 19243                           tablat	equ	0xFF5
 19244                           prodh	equ	0xFF4
 19245                           prodl	equ	0xFF3
 19246                           intcon	equ	0xFF2
 19247                           postinc0	equ	0xFEE
 19248                           wreg	equ	0xFE8
 19249                           indf1	equ	0xFE7
 19250                           postinc1	equ	0xFE6
 19251                           postdec1	equ	0xFE5
 19252                           fsr1h	equ	0xFE2
 19253                           fsr1l	equ	0xFE1
 19254                           indf2	equ	0xFDF
 19255                           postinc2	equ	0xFDE
 19256                           postdec2	equ	0xFDD
 19257                           fsr2h	equ	0xFDA
 19258                           fsr2l	equ	0xFD9
 19259                           status	equ	0xFD8
 19260                           
 19261 ;; *************** function _TMR0_StartTimer *****************
 19262 ;; Defined at:
 19263 ;;		line 95 in file "mcc_generated_files/tmr0.c"
 19264 ;; Parameters:    Size  Location     Type
 19265 ;;		None
 19266 ;; Auto vars:     Size  Location     Type
 19267 ;;		None
 19268 ;; Return value:  Size  Location     Type
 19269 ;;                  1    wreg      void 
 19270 ;; Registers used:
 19271 ;;		None
 19272 ;; Tracked objects:
 19273 ;;		On entry : 0/0
 19274 ;;		On exit  : 0/0
 19275 ;;		Unchanged: 0/0
 19276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19281 ;;Total ram usage:        0 bytes
 19282 ;; Hardware stack levels used:    1
 19283 ;; Hardware stack levels required when called:    5
 19284 ;; This function calls:
 19285 ;;		Nothing
 19286 ;; This function is called by:
 19287 ;;		_TMR0_Initialize
 19288 ;;		_main
 19289 ;; This function uses a non-reentrant model
 19290 ;;
 19291                           
 19292                           	psect	text93
 19293  004EC4                     __ptext93:
 19294                           	opt stack 0
 19295  004EC4                     _TMR0_StartTimer:
 19296                           	opt stack 25
 19297                           
 19298                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
 19299                           
 19300                           ;incstack = 0
 19301  004EC4  8ED5               	bsf	4053,7,c	;volatile
 19302  004EC6  0012               	return		;funcret
 19303  004EC8                     __end_of_TMR0_StartTimer:
 19304                           	opt stack 0
 19305                           tosu	equ	0xFFF
 19306                           tosh	equ	0xFFE
 19307                           tosl	equ	0xFFD
 19308                           pclath	equ	0xFFA
 19309                           tblptru	equ	0xFF8
 19310                           tblptrh	equ	0xFF7
 19311                           tblptrl	equ	0xFF6
 19312                           tablat	equ	0xFF5
 19313                           prodh	equ	0xFF4
 19314                           prodl	equ	0xFF3
 19315                           intcon	equ	0xFF2
 19316                           postinc0	equ	0xFEE
 19317                           wreg	equ	0xFE8
 19318                           indf1	equ	0xFE7
 19319                           postinc1	equ	0xFE6
 19320                           postdec1	equ	0xFE5
 19321                           fsr1h	equ	0xFE2
 19322                           fsr1l	equ	0xFE1
 19323                           indf2	equ	0xFDF
 19324                           postinc2	equ	0xFDE
 19325                           postdec2	equ	0xFDD
 19326                           fsr2h	equ	0xFDA
 19327                           fsr2l	equ	0xFD9
 19328                           status	equ	0xFD8
 19329                           
 19330 ;; *************** function _TMR0_SetInterruptHandler *****************
 19331 ;; Defined at:
 19332 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 19333 ;; Parameters:    Size  Location     Type
 19334 ;;  InterruptHan    2   15[COMRAM] PTR void 
 19335 ;;		 -> make_array(1), TMR0_DefaultInterruptHandler(1), 
 19336 ;; Auto vars:     Size  Location     Type
 19337 ;;		None
 19338 ;; Return value:  Size  Location     Type
 19339 ;;                  1    wreg      void 
 19340 ;; Registers used:
 19341 ;;		wreg, status,2, status,0
 19342 ;; Tracked objects:
 19343 ;;		On entry : 0/0
 19344 ;;		On exit  : 0/0
 19345 ;;		Unchanged: 0/0
 19346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19347 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19350 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19351 ;;Total ram usage:        2 bytes
 19352 ;; Hardware stack levels used:    1
 19353 ;; Hardware stack levels required when called:    5
 19354 ;; This function calls:
 19355 ;;		Nothing
 19356 ;; This function is called by:
 19357 ;;		_TMR0_Initialize
 19358 ;;		_main
 19359 ;; This function uses a non-reentrant model
 19360 ;;
 19361                           
 19362                           	psect	text94
 19363  004E9A                     __ptext94:
 19364                           	opt stack 0
 19365  004E9A                     _TMR0_SetInterruptHandler:
 19366                           	opt stack 25
 19367                           
 19368                           ;tmr0.c: 163: TMR0_InterruptHandler = InterruptHandler;
 19369                           
 19370                           ;incstack = 0
 19371  004E9A  C010  F1EC         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
 19372  004E9E  C011  F1ED         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
 19373  004EA2  0012               	return		;funcret
 19374  004EA4                     __end_of_TMR0_SetInterruptHandler:
 19375                           	opt stack 0
 19376                           tosu	equ	0xFFF
 19377                           tosh	equ	0xFFE
 19378                           tosl	equ	0xFFD
 19379                           pclath	equ	0xFFA
 19380                           tblptru	equ	0xFF8
 19381                           tblptrh	equ	0xFF7
 19382                           tblptrl	equ	0xFF6
 19383                           tablat	equ	0xFF5
 19384                           prodh	equ	0xFF4
 19385                           prodl	equ	0xFF3
 19386                           intcon	equ	0xFF2
 19387                           postinc0	equ	0xFEE
 19388                           wreg	equ	0xFE8
 19389                           indf1	equ	0xFE7
 19390                           postinc1	equ	0xFE6
 19391                           postdec1	equ	0xFE5
 19392                           fsr1h	equ	0xFE2
 19393                           fsr1l	equ	0xFE1
 19394                           indf2	equ	0xFDF
 19395                           postinc2	equ	0xFDE
 19396                           postdec2	equ	0xFDD
 19397                           fsr2h	equ	0xFDA
 19398                           fsr2l	equ	0xFD9
 19399                           status	equ	0xFD8
 19400                           
 19401 ;; *************** function _PIN_MANAGER_Initialize *****************
 19402 ;; Defined at:
 19403 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 19404 ;; Parameters:    Size  Location     Type
 19405 ;;		None
 19406 ;; Auto vars:     Size  Location     Type
 19407 ;;		None
 19408 ;; Return value:  Size  Location     Type
 19409 ;;                  1    wreg      void 
 19410 ;; Registers used:
 19411 ;;		wreg, status,2
 19412 ;; Tracked objects:
 19413 ;;		On entry : 0/0
 19414 ;;		On exit  : 0/0
 19415 ;;		Unchanged: 0/0
 19416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19421 ;;Total ram usage:        0 bytes
 19422 ;; Hardware stack levels used:    1
 19423 ;; Hardware stack levels required when called:    5
 19424 ;; This function calls:
 19425 ;;		Nothing
 19426 ;; This function is called by:
 19427 ;;		_SYSTEM_Initialize
 19428 ;; This function uses a non-reentrant model
 19429 ;;
 19430                           
 19431                           	psect	text95
 19432  00475E                     __ptext95:
 19433                           	opt stack 0
 19434  00475E                     _PIN_MANAGER_Initialize:
 19435                           	opt stack 24
 19436                           
 19437                           ;pin_manager.c: 56: LATE = 0x00;
 19438                           
 19439                           ;incstack = 0
 19440  00475E  0E00               	movlw	0
 19441  004760  6E8D               	movwf	3981,c	;volatile
 19442                           
 19443                           ;pin_manager.c: 57: LATD = 0x00;
 19444  004762  0E00               	movlw	0
 19445  004764  6E8C               	movwf	3980,c	;volatile
 19446                           
 19447                           ;pin_manager.c: 58: LATA = 0x00;
 19448  004766  0E00               	movlw	0
 19449  004768  6E89               	movwf	3977,c	;volatile
 19450                           
 19451                           ;pin_manager.c: 59: LATB = 0x00;
 19452  00476A  0E00               	movlw	0
 19453  00476C  6E8A               	movwf	3978,c	;volatile
 19454                           
 19455                           ;pin_manager.c: 60: LATC = 0x00;
 19456  00476E  0E00               	movlw	0
 19457  004770  6E8B               	movwf	3979,c	;volatile
 19458                           
 19459                           ;pin_manager.c: 65: TRISE = 0x03;
 19460  004772  0E03               	movlw	3
 19461  004774  6E96               	movwf	3990,c	;volatile
 19462                           
 19463                           ;pin_manager.c: 66: TRISA = 0xF8;
 19464  004776  0EF8               	movlw	248
 19465  004778  6E92               	movwf	3986,c	;volatile
 19466                           
 19467                           ;pin_manager.c: 67: TRISB = 0xFF;
 19468  00477A  6893               	setf	3987,c	;volatile
 19469                           
 19470                           ;pin_manager.c: 68: TRISC = 0x8F;
 19471  00477C  0E8F               	movlw	143
 19472  00477E  6E94               	movwf	3988,c	;volatile
 19473                           
 19474                           ;pin_manager.c: 69: TRISD = 0x80;
 19475  004780  0E80               	movlw	128
 19476  004782  6E95               	movwf	3989,c	;volatile
 19477                           
 19478                           ;pin_manager.c: 74: ANSELC = 0x0C;
 19479  004784  0E0C               	movlw	12
 19480  004786  010F               	movlb	15	; () banked
 19481  004788  6F3A               	movwf	58,b	;volatile
 19482                           
 19483                           ;pin_manager.c: 75: ANSELB = 0x3F;
 19484  00478A  0E3F               	movlw	63
 19485  00478C  010F               	movlb	15	; () banked
 19486  00478E  6F39               	movwf	57,b	;volatile
 19487                           
 19488                           ;pin_manager.c: 76: ANSELD = 0x00;
 19489  004790  0E00               	movlw	0
 19490  004792  010F               	movlb	15	; () banked
 19491  004794  6F3B               	movwf	59,b	;volatile
 19492                           
 19493                           ;pin_manager.c: 77: ANSELE = 0x03;
 19494  004796  0E03               	movlw	3
 19495  004798  010F               	movlb	15	; () banked
 19496  00479A  6F3C               	movwf	60,b	;volatile
 19497                           
 19498                           ;pin_manager.c: 78: ANSELA = 0x28;
 19499  00479C  0E28               	movlw	40
 19500  00479E  010F               	movlb	15	; () banked
 19501  0047A0  6F38               	movwf	56,b	;volatile
 19502                           
 19503                           ; BSR set to: 15
 19504                           ;pin_manager.c: 83: WPUB = 0xFF;
 19505  0047A2  6861               	setf	3937,c	;volatile
 19506                           
 19507                           ; BSR set to: 15
 19508                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
 19509  0047A4  9EF1               	bcf	intcon2,7,c	;volatile
 19510                           
 19511                           ; BSR set to: 15
 19512  0047A6  0012               	return		;funcret
 19513  0047A8                     __end_of_PIN_MANAGER_Initialize:
 19514                           	opt stack 0
 19515                           tosu	equ	0xFFF
 19516                           tosh	equ	0xFFE
 19517                           tosl	equ	0xFFD
 19518                           pclath	equ	0xFFA
 19519                           tblptru	equ	0xFF8
 19520                           tblptrh	equ	0xFF7
 19521                           tblptrl	equ	0xFF6
 19522                           tablat	equ	0xFF5
 19523                           prodh	equ	0xFF4
 19524                           prodl	equ	0xFF3
 19525                           intcon	equ	0xFF2
 19526                           intcon2	equ	0xFF1
 19527                           postinc0	equ	0xFEE
 19528                           wreg	equ	0xFE8
 19529                           indf1	equ	0xFE7
 19530                           postinc1	equ	0xFE6
 19531                           postdec1	equ	0xFE5
 19532                           fsr1h	equ	0xFE2
 19533                           fsr1l	equ	0xFE1
 19534                           indf2	equ	0xFDF
 19535                           postinc2	equ	0xFDE
 19536                           postdec2	equ	0xFDD
 19537                           fsr2h	equ	0xFDA
 19538                           fsr2l	equ	0xFD9
 19539                           status	equ	0xFD8
 19540                           
 19541 ;; *************** function _OSCILLATOR_Initialize *****************
 19542 ;; Defined at:
 19543 ;;		line 124 in file "mcc_generated_files/mcc.c"
 19544 ;; Parameters:    Size  Location     Type
 19545 ;;		None
 19546 ;; Auto vars:     Size  Location     Type
 19547 ;;		None
 19548 ;; Return value:  Size  Location     Type
 19549 ;;                  1    wreg      void 
 19550 ;; Registers used:
 19551 ;;		wreg, status,2
 19552 ;; Tracked objects:
 19553 ;;		On entry : 0/0
 19554 ;;		On exit  : 0/0
 19555 ;;		Unchanged: 0/0
 19556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19561 ;;Total ram usage:        0 bytes
 19562 ;; Hardware stack levels used:    1
 19563 ;; Hardware stack levels required when called:    5
 19564 ;; This function calls:
 19565 ;;		Nothing
 19566 ;; This function is called by:
 19567 ;;		_SYSTEM_Initialize
 19568 ;; This function uses a non-reentrant model
 19569 ;;
 19570                           
 19571                           	psect	text96
 19572  004E32                     __ptext96:
 19573                           	opt stack 0
 19574  004E32                     _OSCILLATOR_Initialize:
 19575                           	opt stack 24
 19576                           
 19577                           ;mcc.c: 127: OSCCON = 0x50;
 19578                           
 19579                           ; BSR set to: 15
 19580                           ;incstack = 0
 19581  004E32  0E50               	movlw	80
 19582  004E34  6ED3               	movwf	4051,c	;volatile
 19583                           
 19584                           ;mcc.c: 129: OSCCON2 = 0x04;
 19585  004E36  0E04               	movlw	4
 19586  004E38  6ED2               	movwf	4050,c	;volatile
 19587                           
 19588                           ;mcc.c: 131: OSCTUNE = 0x80;
 19589  004E3A  0E80               	movlw	128
 19590  004E3C  6E9B               	movwf	3995,c	;volatile
 19591  004E3E  0012               	return		;funcret
 19592  004E40                     __end_of_OSCILLATOR_Initialize:
 19593                           	opt stack 0
 19594                           tosu	equ	0xFFF
 19595                           tosh	equ	0xFFE
 19596                           tosl	equ	0xFFD
 19597                           pclath	equ	0xFFA
 19598                           tblptru	equ	0xFF8
 19599                           tblptrh	equ	0xFF7
 19600                           tblptrl	equ	0xFF6
 19601                           tablat	equ	0xFF5
 19602                           prodh	equ	0xFF4
 19603                           prodl	equ	0xFF3
 19604                           intcon	equ	0xFF2
 19605                           intcon2	equ	0xFF1
 19606                           postinc0	equ	0xFEE
 19607                           wreg	equ	0xFE8
 19608                           indf1	equ	0xFE7
 19609                           postinc1	equ	0xFE6
 19610                           postdec1	equ	0xFE5
 19611                           fsr1h	equ	0xFE2
 19612                           fsr1l	equ	0xFE1
 19613                           indf2	equ	0xFDF
 19614                           postinc2	equ	0xFDE
 19615                           postdec2	equ	0xFDD
 19616                           fsr2h	equ	0xFDA
 19617                           fsr2l	equ	0xFD9
 19618                           status	equ	0xFD8
 19619                           
 19620 ;; *************** function _INTERRUPT_Initialize *****************
 19621 ;; Defined at:
 19622 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 19623 ;; Parameters:    Size  Location     Type
 19624 ;;		None
 19625 ;; Auto vars:     Size  Location     Type
 19626 ;;		None
 19627 ;; Return value:  Size  Location     Type
 19628 ;;                  1    wreg      void 
 19629 ;; Registers used:
 19630 ;;		None
 19631 ;; Tracked objects:
 19632 ;;		On entry : 0/0
 19633 ;;		On exit  : 0/0
 19634 ;;		Unchanged: 0/0
 19635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19640 ;;Total ram usage:        0 bytes
 19641 ;; Hardware stack levels used:    1
 19642 ;; Hardware stack levels required when called:    5
 19643 ;; This function calls:
 19644 ;;		Nothing
 19645 ;; This function is called by:
 19646 ;;		_SYSTEM_Initialize
 19647 ;; This function uses a non-reentrant model
 19648 ;;
 19649                           
 19650                           	psect	text97
 19651  004EC8                     __ptext97:
 19652                           	opt stack 0
 19653  004EC8                     _INTERRUPT_Initialize:
 19654                           	opt stack 24
 19655                           
 19656                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
 19657                           
 19658                           ;incstack = 0
 19659  004EC8  9ED0               	bcf	4048,7,c	;volatile
 19660  004ECA  0012               	return		;funcret
 19661  004ECC                     __end_of_INTERRUPT_Initialize:
 19662                           	opt stack 0
 19663                           tosu	equ	0xFFF
 19664                           tosh	equ	0xFFE
 19665                           tosl	equ	0xFFD
 19666                           pclath	equ	0xFFA
 19667                           tblptru	equ	0xFF8
 19668                           tblptrh	equ	0xFF7
 19669                           tblptrl	equ	0xFF6
 19670                           tablat	equ	0xFF5
 19671                           prodh	equ	0xFF4
 19672                           prodl	equ	0xFF3
 19673                           intcon	equ	0xFF2
 19674                           intcon2	equ	0xFF1
 19675                           postinc0	equ	0xFEE
 19676                           wreg	equ	0xFE8
 19677                           indf1	equ	0xFE7
 19678                           postinc1	equ	0xFE6
 19679                           postdec1	equ	0xFE5
 19680                           fsr1h	equ	0xFE2
 19681                           fsr1l	equ	0xFE1
 19682                           indf2	equ	0xFDF
 19683                           postinc2	equ	0xFDE
 19684                           postdec2	equ	0xFDD
 19685                           fsr2h	equ	0xFDA
 19686                           fsr2l	equ	0xFD9
 19687                           status	equ	0xFD8
 19688                           
 19689 ;; *************** function _EUSART2_Initialize *****************
 19690 ;; Defined at:
 19691 ;;		line 55 in file "mcc_generated_files/eusart2.c"
 19692 ;; Parameters:    Size  Location     Type
 19693 ;;		None
 19694 ;; Auto vars:     Size  Location     Type
 19695 ;;		None
 19696 ;; Return value:  Size  Location     Type
 19697 ;;                  1    wreg      void 
 19698 ;; Registers used:
 19699 ;;		wreg, status,2
 19700 ;; Tracked objects:
 19701 ;;		On entry : 0/0
 19702 ;;		On exit  : 0/0
 19703 ;;		Unchanged: 0/0
 19704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19709 ;;Total ram usage:        0 bytes
 19710 ;; Hardware stack levels used:    1
 19711 ;; Hardware stack levels required when called:    5
 19712 ;; This function calls:
 19713 ;;		Nothing
 19714 ;; This function is called by:
 19715 ;;		_SYSTEM_Initialize
 19716 ;; This function uses a non-reentrant model
 19717 ;;
 19718                           
 19719                           	psect	text98
 19720  004D72                     __ptext98:
 19721                           	opt stack 0
 19722  004D72                     _EUSART2_Initialize:
 19723                           	opt stack 24
 19724                           
 19725                           ;eusart2.c: 60: BAUDCON2 = 0x08;
 19726                           
 19727                           ;incstack = 0
 19728  004D72  0E08               	movlw	8
 19729  004D74  6E70               	movwf	3952,c	;volatile
 19730                           
 19731                           ;eusart2.c: 63: RCSTA2 = 0x80;
 19732  004D76  0E80               	movlw	128
 19733  004D78  6E71               	movwf	3953,c	;volatile
 19734                           
 19735                           ;eusart2.c: 66: TXSTA2 = 0x24;
 19736  004D7A  0E24               	movlw	36
 19737  004D7C  6E72               	movwf	3954,c	;volatile
 19738                           
 19739                           ;eusart2.c: 69: SPBRG2 = 0x67;
 19740  004D7E  0E67               	movlw	103
 19741  004D80  6E75               	movwf	3957,c	;volatile
 19742                           
 19743                           ;eusart2.c: 72: SPBRGH2 = 0x00;
 19744  004D82  0E00               	movlw	0
 19745  004D84  6E76               	movwf	3958,c	;volatile
 19746  004D86  0012               	return		;funcret
 19747  004D88                     __end_of_EUSART2_Initialize:
 19748                           	opt stack 0
 19749                           tosu	equ	0xFFF
 19750                           tosh	equ	0xFFE
 19751                           tosl	equ	0xFFD
 19752                           pclath	equ	0xFFA
 19753                           tblptru	equ	0xFF8
 19754                           tblptrh	equ	0xFF7
 19755                           tblptrl	equ	0xFF6
 19756                           tablat	equ	0xFF5
 19757                           prodh	equ	0xFF4
 19758                           prodl	equ	0xFF3
 19759                           intcon	equ	0xFF2
 19760                           intcon2	equ	0xFF1
 19761                           postinc0	equ	0xFEE
 19762                           wreg	equ	0xFE8
 19763                           indf1	equ	0xFE7
 19764                           postinc1	equ	0xFE6
 19765                           postdec1	equ	0xFE5
 19766                           fsr1h	equ	0xFE2
 19767                           fsr1l	equ	0xFE1
 19768                           indf2	equ	0xFDF
 19769                           postinc2	equ	0xFDE
 19770                           postdec2	equ	0xFDD
 19771                           fsr2h	equ	0xFDA
 19772                           fsr2l	equ	0xFD9
 19773                           status	equ	0xFD8
 19774                           
 19775 ;; *************** function _EUSART1_Initialize *****************
 19776 ;; Defined at:
 19777 ;;		line 75 in file "mcc_generated_files/eusart1.c"
 19778 ;; Parameters:    Size  Location     Type
 19779 ;;		None
 19780 ;; Auto vars:     Size  Location     Type
 19781 ;;		None
 19782 ;; Return value:  Size  Location     Type
 19783 ;;                  1    wreg      void 
 19784 ;; Registers used:
 19785 ;;		wreg, status,2
 19786 ;; Tracked objects:
 19787 ;;		On entry : 0/0
 19788 ;;		On exit  : 0/0
 19789 ;;		Unchanged: 0/0
 19790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19795 ;;Total ram usage:        0 bytes
 19796 ;; Hardware stack levels used:    1
 19797 ;; Hardware stack levels required when called:    5
 19798 ;; This function calls:
 19799 ;;		Nothing
 19800 ;; This function is called by:
 19801 ;;		_SYSTEM_Initialize
 19802 ;; This function uses a non-reentrant model
 19803 ;;
 19804                           
 19805                           	psect	text99
 19806  004A5A                     __ptext99:
 19807                           	opt stack 0
 19808  004A5A                     _EUSART1_Initialize:
 19809                           	opt stack 24
 19810                           
 19811                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
 19812                           
 19813                           ;incstack = 0
 19814  004A5A  9A9D               	bcf	3997,5,c	;volatile
 19815                           
 19816                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
 19817  004A5C  989D               	bcf	3997,4,c	;volatile
 19818                           
 19819                           ;eusart1.c: 84: BAUDCON1 = 0x08;
 19820  004A5E  0E08               	movlw	8
 19821  004A60  6EB8               	movwf	4024,c	;volatile
 19822                           
 19823                           ;eusart1.c: 87: RCSTA1 = 0x90;
 19824  004A62  0E90               	movlw	144
 19825  004A64  6EAB               	movwf	4011,c	;volatile
 19826                           
 19827                           ;eusart1.c: 90: TXSTA1 = 0x24;
 19828  004A66  0E24               	movlw	36
 19829  004A68  6EAC               	movwf	4012,c	;volatile
 19830                           
 19831                           ;eusart1.c: 93: SPBRG1 = 0x67;
 19832  004A6A  0E67               	movlw	103
 19833  004A6C  6EAF               	movwf	4015,c	;volatile
 19834                           
 19835                           ;eusart1.c: 96: SPBRGH1 = 0x00;
 19836  004A6E  0E00               	movlw	0
 19837  004A70  6EB0               	movwf	4016,c	;volatile
 19838                           
 19839                           ;eusart1.c: 100: eusart1TxHead = 0;
 19840  004A72  0E00               	movlw	0
 19841  004A74  6E47               	movwf	_eusart1TxHead,c	;volatile
 19842                           
 19843                           ;eusart1.c: 101: eusart1TxTail = 0;
 19844  004A76  0E00               	movlw	0
 19845  004A78  6E48               	movwf	_eusart1TxTail,c	;volatile
 19846                           
 19847                           ;eusart1.c: 102: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 19848  004A7A  0E08               	movlw	8
 19849  004A7C  0101               	movlb	1	; () banked
 19850  004A7E  6FF2               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
 19851                           
 19852                           ;eusart1.c: 104: eusart1RxHead = 0;
 19853  004A80  0E00               	movlw	0
 19854  004A82  6E45               	movwf	_eusart1RxHead,c	;volatile
 19855                           
 19856                           ;eusart1.c: 105: eusart1RxTail = 0;
 19857  004A84  0E00               	movlw	0
 19858  004A86  6E46               	movwf	_eusart1RxTail,c	;volatile
 19859                           
 19860                           ;eusart1.c: 106: eusart1RxCount = 0;
 19861  004A88  0E00               	movlw	0
 19862  004A8A  6E44               	movwf	_eusart1RxCount,c	;volatile
 19863                           
 19864                           ; BSR set to: 1
 19865                           ;eusart1.c: 109: PIE1bits.RC1IE = 1;
 19866  004A8C  8A9D               	bsf	3997,5,c	;volatile
 19867                           
 19868                           ; BSR set to: 1
 19869  004A8E  0012               	return		;funcret
 19870  004A90                     __end_of_EUSART1_Initialize:
 19871                           	opt stack 0
 19872                           tosu	equ	0xFFF
 19873                           tosh	equ	0xFFE
 19874                           tosl	equ	0xFFD
 19875                           pclath	equ	0xFFA
 19876                           tblptru	equ	0xFF8
 19877                           tblptrh	equ	0xFF7
 19878                           tblptrl	equ	0xFF6
 19879                           tablat	equ	0xFF5
 19880                           prodh	equ	0xFF4
 19881                           prodl	equ	0xFF3
 19882                           intcon	equ	0xFF2
 19883                           intcon2	equ	0xFF1
 19884                           postinc0	equ	0xFEE
 19885                           wreg	equ	0xFE8
 19886                           indf1	equ	0xFE7
 19887                           postinc1	equ	0xFE6
 19888                           postdec1	equ	0xFE5
 19889                           fsr1h	equ	0xFE2
 19890                           fsr1l	equ	0xFE1
 19891                           indf2	equ	0xFDF
 19892                           postinc2	equ	0xFDE
 19893                           postdec2	equ	0xFDD
 19894                           fsr2h	equ	0xFDA
 19895                           fsr2l	equ	0xFD9
 19896                           status	equ	0xFD8
 19897                           
 19898 ;; *************** function _INTERRUPT_InterruptManager *****************
 19899 ;; Defined at:
 19900 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 19901 ;; Parameters:    Size  Location     Type
 19902 ;;		None
 19903 ;; Auto vars:     Size  Location     Type
 19904 ;;		None
 19905 ;; Return value:  Size  Location     Type
 19906 ;;                  1    wreg      void 
 19907 ;; Registers used:
 19908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19909 ;; Tracked objects:
 19910 ;;		On entry : 0/0
 19911 ;;		On exit  : 0/0
 19912 ;;		Unchanged: 0/0
 19913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19916 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19917 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19918 ;;Total ram usage:       14 bytes
 19919 ;; Hardware stack levels used:    1
 19920 ;; Hardware stack levels required when called:    4
 19921 ;; This function calls:
 19922 ;;		_EUSART1_Receive_ISR
 19923 ;;		_EUSART1_Transmit_ISR
 19924 ;;		_TMR0_ISR
 19925 ;; This function is called by:
 19926 ;;		Interrupt level 2
 19927 ;; This function uses a non-reentrant model
 19928 ;;
 19929                           
 19930                           	psect	intcode
 19931  000008                     __pintcode:
 19932                           	opt stack 0
 19933  000008                     _INTERRUPT_InterruptManager:
 19934                           	opt stack 17
 19935                           
 19936                           ; BSR set to: 1
 19937                           ;incstack = 0
 19938  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19939  00000A  CFFA F002          	movff	pclath,??_INTERRUPT_InterruptManager
 19940  00000E  CFFB F003          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 19941  000012  CFE9 F004          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 19942  000016  CFEA F005          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 19943  00001A  CFE1 F006          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 19944  00001E  CFE2 F007          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 19945  000022  CFD9 F008          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 19946  000026  CFDA F009          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 19947  00002A  CFF3 F00A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 19948  00002E  CFF4 F00B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 19949  000032  CFF6 F00C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 19950  000036  CFF7 F00D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 19951  00003A  CFF8 F00E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 19952  00003E  CFF5 F00F          	movff	tablat,??_INTERRUPT_InterruptManager+13
 19953                           
 19954                           ;interrupt_manager.c: 60: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 19955  000042  BAF2               	btfsc	intcon,5,c	;volatile
 19956  000044  A4F2               	btfss	intcon,2,c	;volatile
 19957  000046  D003               	goto	i2l60
 19958                           
 19959                           ;interrupt_manager.c: 61: {
 19960                           ;interrupt_manager.c: 62: TMR0_ISR();
 19961  000048  ECE7  F026         	call	_TMR0_ISR	;wreg free
 19962                           
 19963                           ;interrupt_manager.c: 63: }
 19964  00004C  D00E               	goto	i2l66
 19965  00004E                     i2l60:
 19966                           
 19967                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 19968  00004E  BCF2               	btfsc	intcon,6,c	;volatile
 19969  000050  A89D               	btfss	3997,4,c	;volatile
 19970  000052  D005               	goto	i2l62
 19971  000054  A89E               	btfss	3998,4,c	;volatile
 19972  000056  D003               	goto	i2l62
 19973                           
 19974                           ;interrupt_manager.c: 65: {
 19975                           ;interrupt_manager.c: 66: EUSART1_Transmit_ISR();
 19976  000058  EC7B  F025         	call	_EUSART1_Transmit_ISR	;wreg free
 19977                           
 19978                           ;interrupt_manager.c: 67: }
 19979  00005C  D006               	goto	i2l66
 19980  00005E                     i2l62:
 19981                           
 19982                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 19983  00005E  BCF2               	btfsc	intcon,6,c	;volatile
 19984  000060  AA9D               	btfss	3997,5,c	;volatile
 19985  000062  D003               	goto	i2l66
 19986  000064  BA9E               	btfsc	3998,5,c	;volatile
 19987                           
 19988                           ;interrupt_manager.c: 69: {
 19989                           ;interrupt_manager.c: 70: EUSART1_Receive_ISR();
 19990  000066  ECEE  F025         	call	_EUSART1_Receive_ISR	;wreg free
 19991  00006A                     i2l66:
 19992  00006A  C00F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19993  00006E  C00E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19994  000072  C00D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19995  000076  C00C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19996  00007A  C00B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19997  00007E  C00A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19998  000082  C009  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19999  000086  C008  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 20000  00008A  C007  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 20001  00008E  C006  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 20002  000092  C005  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 20003  000096  C004  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 20004  00009A  C003  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 20005  00009E  C002  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 20006  0000A2  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20007  0000A4  0011               	retfie		f
 20008  0000A6                     __end_of_INTERRUPT_InterruptManager:
 20009                           	opt stack 0
 20010                           tosu	equ	0xFFF
 20011                           tosh	equ	0xFFE
 20012                           tosl	equ	0xFFD
 20013                           pclatu	equ	0xFFB
 20014                           pclath	equ	0xFFA
 20015                           tblptru	equ	0xFF8
 20016                           tblptrh	equ	0xFF7
 20017                           tblptrl	equ	0xFF6
 20018                           tablat	equ	0xFF5
 20019                           prodh	equ	0xFF4
 20020                           prodl	equ	0xFF3
 20021                           intcon	equ	0xFF2
 20022                           intcon2	equ	0xFF1
 20023                           postinc0	equ	0xFEE
 20024                           fsr0h	equ	0xFEA
 20025                           fsr0l	equ	0xFE9
 20026                           wreg	equ	0xFE8
 20027                           indf1	equ	0xFE7
 20028                           postinc1	equ	0xFE6
 20029                           postdec1	equ	0xFE5
 20030                           fsr1h	equ	0xFE2
 20031                           fsr1l	equ	0xFE1
 20032                           indf2	equ	0xFDF
 20033                           postinc2	equ	0xFDE
 20034                           postdec2	equ	0xFDD
 20035                           fsr2h	equ	0xFDA
 20036                           fsr2l	equ	0xFD9
 20037                           status	equ	0xFD8
 20038                           
 20039 ;; *************** function _TMR0_ISR *****************
 20040 ;; Defined at:
 20041 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 20042 ;; Parameters:    Size  Location     Type
 20043 ;;		None
 20044 ;; Auto vars:     Size  Location     Type
 20045 ;;		None
 20046 ;; Return value:  Size  Location     Type
 20047 ;;                  1    wreg      void 
 20048 ;; Registers used:
 20049 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 20050 ;; Tracked objects:
 20051 ;;		On entry : 0/0
 20052 ;;		On exit  : 0/0
 20053 ;;		Unchanged: 0/0
 20054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20059 ;;Total ram usage:        0 bytes
 20060 ;; Hardware stack levels used:    1
 20061 ;; Hardware stack levels required when called:    3
 20062 ;; This function calls:
 20063 ;;		_TMR0_CallBack
 20064 ;; This function is called by:
 20065 ;;		_INTERRUPT_InterruptManager
 20066 ;; This function uses a non-reentrant model
 20067 ;;
 20068                           
 20069                           	psect	text101
 20070  004DCE                     __ptext101:
 20071                           	opt stack 0
 20072  004DCE                     _TMR0_ISR:
 20073                           	opt stack 17
 20074                           
 20075                           ;tmr0.c: 138: INTCONbits.TMR0IF = 0;
 20076                           
 20077                           ;incstack = 0
 20078  004DCE  94F2               	bcf	intcon,2,c	;volatile
 20079                           
 20080                           ;tmr0.c: 142: TMR0H = timer0ReloadVal >> 8;
 20081  004DD0  504F               	movf	_timer0ReloadVal+1,w,c	;volatile
 20082  004DD2  6ED7               	movwf	4055,c	;volatile
 20083                           
 20084                           ;tmr0.c: 143: TMR0L = (uint8_t) timer0ReloadVal;
 20085  004DD4  C04E  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 20086                           
 20087                           ;tmr0.c: 147: TMR0_CallBack();
 20088  004DD8  EC3C  F026         	call	_TMR0_CallBack	;wreg free
 20089  004DDC  0012               	return		;funcret
 20090  004DDE                     __end_of_TMR0_ISR:
 20091                           	opt stack 0
 20092                           tosu	equ	0xFFF
 20093                           tosh	equ	0xFFE
 20094                           tosl	equ	0xFFD
 20095                           pclatu	equ	0xFFB
 20096                           pclath	equ	0xFFA
 20097                           tblptru	equ	0xFF8
 20098                           tblptrh	equ	0xFF7
 20099                           tblptrl	equ	0xFF6
 20100                           tablat	equ	0xFF5
 20101                           prodh	equ	0xFF4
 20102                           prodl	equ	0xFF3
 20103                           intcon	equ	0xFF2
 20104                           intcon2	equ	0xFF1
 20105                           postinc0	equ	0xFEE
 20106                           fsr0h	equ	0xFEA
 20107                           fsr0l	equ	0xFE9
 20108                           wreg	equ	0xFE8
 20109                           indf1	equ	0xFE7
 20110                           postinc1	equ	0xFE6
 20111                           postdec1	equ	0xFE5
 20112                           fsr1h	equ	0xFE2
 20113                           fsr1l	equ	0xFE1
 20114                           indf2	equ	0xFDF
 20115                           postinc2	equ	0xFDE
 20116                           postdec2	equ	0xFDD
 20117                           fsr2h	equ	0xFDA
 20118                           fsr2l	equ	0xFD9
 20119                           status	equ	0xFD8
 20120                           
 20121 ;; *************** function _TMR0_CallBack *****************
 20122 ;; Defined at:
 20123 ;;		line 152 in file "mcc_generated_files/tmr0.c"
 20124 ;; Parameters:    Size  Location     Type
 20125 ;;		None
 20126 ;; Auto vars:     Size  Location     Type
 20127 ;;		None
 20128 ;; Return value:  Size  Location     Type
 20129 ;;                  1    wreg      void 
 20130 ;; Registers used:
 20131 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 20132 ;; Tracked objects:
 20133 ;;		On entry : 0/0
 20134 ;;		On exit  : 0/0
 20135 ;;		Unchanged: 0/0
 20136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20141 ;;Total ram usage:        0 bytes
 20142 ;; Hardware stack levels used:    1
 20143 ;; Hardware stack levels required when called:    2
 20144 ;; This function calls:
 20145 ;;		Absolute function
 20146 ;;		_TMR0_DefaultInterruptHandler
 20147 ;;		_make_array
 20148 ;; This function is called by:
 20149 ;;		_TMR0_ISR
 20150 ;; This function uses a non-reentrant model
 20151 ;;
 20152                           
 20153                           	psect	text102
 20154  004C78                     __ptext102:
 20155                           	opt stack 0
 20156  004C78                     _TMR0_CallBack:
 20157                           	opt stack 17
 20158                           
 20159                           ;tmr0.c: 156: if(TMR0_InterruptHandler)
 20160                           
 20161                           ;incstack = 0
 20162  004C78  0101               	movlb	1	; () banked
 20163  004C7A  51EC               	movf	_TMR0_InterruptHandler& (0+255),w,b
 20164  004C7C  0101               	movlb	1	; () banked
 20165  004C7E  11ED               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 20166  004C80  B4D8               	btfsc	status,2,c
 20167  004C82  0012               	return	
 20168                           
 20169                           ; BSR set to: 1
 20170                           ;tmr0.c: 157: {
 20171                           ;tmr0.c: 158: TMR0_InterruptHandler();
 20172  004C84  D801               	call	i2u522_48
 20173  004C86  0012               	return	
 20174  004C88                     i2u522_48:
 20175  004C88  0005               	push	
 20176  004C8A  6EFA               	movwf	pclath,c
 20177  004C8C  0101               	movlb	1	; () banked
 20178  004C8E  51EC               	movf	_TMR0_InterruptHandler& (0+255),w,b
 20179  004C90  6EFD               	movwf	tosl,c
 20180  004C92  51ED               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 20181  004C94  6EFE               	movwf	tosh,c
 20182  004C96  6AFF               	clrf	tosu,c
 20183  004C98  50FA               	movf	pclath,w,c
 20184  004C9A  0012               	return		;indir
 20185  004C9C                     __end_of_TMR0_CallBack:
 20186                           	opt stack 0
 20187                           tosu	equ	0xFFF
 20188                           tosh	equ	0xFFE
 20189                           tosl	equ	0xFFD
 20190                           pclatu	equ	0xFFB
 20191                           pclath	equ	0xFFA
 20192                           tblptru	equ	0xFF8
 20193                           tblptrh	equ	0xFF7
 20194                           tblptrl	equ	0xFF6
 20195                           tablat	equ	0xFF5
 20196                           prodh	equ	0xFF4
 20197                           prodl	equ	0xFF3
 20198                           intcon	equ	0xFF2
 20199                           intcon2	equ	0xFF1
 20200                           postinc0	equ	0xFEE
 20201                           fsr0h	equ	0xFEA
 20202                           fsr0l	equ	0xFE9
 20203                           wreg	equ	0xFE8
 20204                           indf1	equ	0xFE7
 20205                           postinc1	equ	0xFE6
 20206                           postdec1	equ	0xFE5
 20207                           fsr1h	equ	0xFE2
 20208                           fsr1l	equ	0xFE1
 20209                           indf2	equ	0xFDF
 20210                           postinc2	equ	0xFDE
 20211                           postdec2	equ	0xFDD
 20212                           fsr2h	equ	0xFDA
 20213                           fsr2l	equ	0xFD9
 20214                           status	equ	0xFD8
 20215                           
 20216 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 20217 ;; Defined at:
 20218 ;;		line 166 in file "mcc_generated_files/tmr0.c"
 20219 ;; Parameters:    Size  Location     Type
 20220 ;;		None
 20221 ;; Auto vars:     Size  Location     Type
 20222 ;;		None
 20223 ;; Return value:  Size  Location     Type
 20224 ;;                  1    wreg      void 
 20225 ;; Registers used:
 20226 ;;		None
 20227 ;; Tracked objects:
 20228 ;;		On entry : 0/0
 20229 ;;		On exit  : 0/0
 20230 ;;		Unchanged: 0/0
 20231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20236 ;;Total ram usage:        0 bytes
 20237 ;; Hardware stack levels used:    1
 20238 ;; This function calls:
 20239 ;;		Nothing
 20240 ;; This function is called by:
 20241 ;;		_TMR0_Initialize
 20242 ;;		_TMR0_CallBack
 20243 ;; This function uses a non-reentrant model
 20244 ;;
 20245                           
 20246                           	psect	text103
 20247  004ECC                     __ptext103:
 20248                           	opt stack 0
 20249  004ECC                     _TMR0_DefaultInterruptHandler:
 20250                           	opt stack 18
 20251                           
 20252                           ;incstack = 0
 20253  004ECC  0012               	return		;funcret
 20254  004ECE                     __end_of_TMR0_DefaultInterruptHandler:
 20255                           	opt stack 0
 20256                           tosu	equ	0xFFF
 20257                           tosh	equ	0xFFE
 20258                           tosl	equ	0xFFD
 20259                           pclatu	equ	0xFFB
 20260                           pclath	equ	0xFFA
 20261                           tblptru	equ	0xFF8
 20262                           tblptrh	equ	0xFF7
 20263                           tblptrl	equ	0xFF6
 20264                           tablat	equ	0xFF5
 20265                           prodh	equ	0xFF4
 20266                           prodl	equ	0xFF3
 20267                           intcon	equ	0xFF2
 20268                           intcon2	equ	0xFF1
 20269                           postinc0	equ	0xFEE
 20270                           fsr0h	equ	0xFEA
 20271                           fsr0l	equ	0xFE9
 20272                           wreg	equ	0xFE8
 20273                           indf1	equ	0xFE7
 20274                           postinc1	equ	0xFE6
 20275                           postdec1	equ	0xFE5
 20276                           fsr1h	equ	0xFE2
 20277                           fsr1l	equ	0xFE1
 20278                           indf2	equ	0xFDF
 20279                           postinc2	equ	0xFDE
 20280                           postdec2	equ	0xFDD
 20281                           fsr2h	equ	0xFDA
 20282                           fsr2l	equ	0xFD9
 20283                           status	equ	0xFD8
 20284                           
 20285 ;; *************** function _make_array *****************
 20286 ;; Defined at:
 20287 ;;		line 52 in file "main.c"
 20288 ;; Parameters:    Size  Location     Type
 20289 ;;		None
 20290 ;; Auto vars:     Size  Location     Type
 20291 ;;		None
 20292 ;; Return value:  Size  Location     Type
 20293 ;;                  1    wreg      void 
 20294 ;; Registers used:
 20295 ;;		wreg, status,2, status,0, cstack
 20296 ;; Tracked objects:
 20297 ;;		On entry : 0/0
 20298 ;;		On exit  : 0/0
 20299 ;;		Unchanged: 0/0
 20300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20305 ;;Total ram usage:        0 bytes
 20306 ;; Hardware stack levels used:    1
 20307 ;; Hardware stack levels required when called:    1
 20308 ;; This function calls:
 20309 ;;		_heart_beat
 20310 ;; This function is called by:
 20311 ;;		_main
 20312 ;;		_TMR0_CallBack
 20313 ;; This function uses a non-reentrant model
 20314 ;;
 20315                           
 20316                           	psect	text104
 20317  004E70                     __ptext104:
 20318                           	opt stack 0
 20319  004E70                     _make_array:
 20320                           	opt stack 17
 20321                           
 20322                           ;main.c: 53: static char i = 0;
 20323                           ;main.c: 54: heart_beat();
 20324                           
 20325                           ;incstack = 0
 20326  004E70  EC9D  F026         	call	_heart_beat	;wreg free
 20327                           
 20328                           ;main.c: 57: display = 1;
 20329  004E74  0E01               	movlw	1
 20330  004E76  0101               	movlb	1	; () banked
 20331  004E78  6F1B               	movwf	_display& (0+255),b
 20332                           
 20333                           ; BSR set to: 1
 20334  004E7A  0012               	return		;funcret
 20335  004E7C                     __end_of_make_array:
 20336                           	opt stack 0
 20337                           tosu	equ	0xFFF
 20338                           tosh	equ	0xFFE
 20339                           tosl	equ	0xFFD
 20340                           pclatu	equ	0xFFB
 20341                           pclath	equ	0xFFA
 20342                           tblptru	equ	0xFF8
 20343                           tblptrh	equ	0xFF7
 20344                           tblptrl	equ	0xFF6
 20345                           tablat	equ	0xFF5
 20346                           prodh	equ	0xFF4
 20347                           prodl	equ	0xFF3
 20348                           intcon	equ	0xFF2
 20349                           intcon2	equ	0xFF1
 20350                           postinc0	equ	0xFEE
 20351                           fsr0h	equ	0xFEA
 20352                           fsr0l	equ	0xFE9
 20353                           wreg	equ	0xFE8
 20354                           indf1	equ	0xFE7
 20355                           postinc1	equ	0xFE6
 20356                           postdec1	equ	0xFE5
 20357                           fsr1h	equ	0xFE2
 20358                           fsr1l	equ	0xFE1
 20359                           indf2	equ	0xFDF
 20360                           postinc2	equ	0xFDE
 20361                           postdec2	equ	0xFDD
 20362                           fsr2h	equ	0xFDA
 20363                           fsr2l	equ	0xFD9
 20364                           status	equ	0xFD8
 20365                           
 20366 ;; *************** function _heart_beat *****************
 20367 ;; Defined at:
 20368 ;;		line 47 in file "main.c"
 20369 ;; Parameters:    Size  Location     Type
 20370 ;;		None
 20371 ;; Auto vars:     Size  Location     Type
 20372 ;;		None
 20373 ;; Return value:  Size  Location     Type
 20374 ;;                  1    wreg      void 
 20375 ;; Registers used:
 20376 ;;		wreg, status,2, status,0
 20377 ;; Tracked objects:
 20378 ;;		On entry : 0/0
 20379 ;;		On exit  : 0/0
 20380 ;;		Unchanged: 0/0
 20381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20384 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20385 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20386 ;;Total ram usage:        1 bytes
 20387 ;; Hardware stack levels used:    1
 20388 ;; This function calls:
 20389 ;;		Nothing
 20390 ;; This function is called by:
 20391 ;;		_make_array
 20392 ;; This function uses a non-reentrant model
 20393 ;;
 20394                           
 20395                           	psect	text105
 20396  004D3A                     __ptext105:
 20397                           	opt stack 0
 20398  004D3A                     _heart_beat:
 20399                           	opt stack 17
 20400                           
 20401                           ; BSR set to: 1
 20402                           ;incstack = 0
 20403                           ;main.c: 48: do { LATEbits.LATE2 = ~LATEbits.LATE2; } while(0);
 20404  004D3A  A48D               	btfss	3981,2,c	;volatile
 20405  004D3C  D002               	goto	i2u449_40
 20406  004D3E  0E01               	movlw	1
 20407  004D40  D001               	goto	i2u449_46
 20408  004D42                     i2u449_40:
 20409  004D42  0E00               	movlw	0
 20410  004D44                     i2u449_46:
 20411  004D44  0AFF               	xorlw	255
 20412  004D46  6E01               	movwf	??_heart_beat& (0+255),c
 20413  004D48  4601               	rlncf	??_heart_beat,f,c
 20414  004D4A  4601               	rlncf	??_heart_beat,f,c
 20415  004D4C  508D               	movf	3981,w,c	;volatile
 20416  004D4E  1801               	xorwf	??_heart_beat,w,c
 20417  004D50  0BFB               	andlw	-5
 20418  004D52  1801               	xorwf	??_heart_beat,w,c
 20419  004D54  6E8D               	movwf	3981,c	;volatile
 20420  004D56  0012               	return	
 20421  004D58                     __end_of_heart_beat:
 20422                           	opt stack 0
 20423                           tosu	equ	0xFFF
 20424                           tosh	equ	0xFFE
 20425                           tosl	equ	0xFFD
 20426                           pclatu	equ	0xFFB
 20427                           pclath	equ	0xFFA
 20428                           tblptru	equ	0xFF8
 20429                           tblptrh	equ	0xFF7
 20430                           tblptrl	equ	0xFF6
 20431                           tablat	equ	0xFF5
 20432                           prodh	equ	0xFF4
 20433                           prodl	equ	0xFF3
 20434                           intcon	equ	0xFF2
 20435                           intcon2	equ	0xFF1
 20436                           postinc0	equ	0xFEE
 20437                           fsr0h	equ	0xFEA
 20438                           fsr0l	equ	0xFE9
 20439                           wreg	equ	0xFE8
 20440                           indf1	equ	0xFE7
 20441                           postinc1	equ	0xFE6
 20442                           postdec1	equ	0xFE5
 20443                           fsr1h	equ	0xFE2
 20444                           fsr1l	equ	0xFE1
 20445                           indf2	equ	0xFDF
 20446                           postinc2	equ	0xFDE
 20447                           postdec2	equ	0xFDD
 20448                           fsr2h	equ	0xFDA
 20449                           fsr2l	equ	0xFD9
 20450                           status	equ	0xFD8
 20451                           
 20452 ;; *************** function _EUSART1_Transmit_ISR *****************
 20453 ;; Defined at:
 20454 ;;		line 155 in file "mcc_generated_files/eusart1.c"
 20455 ;; Parameters:    Size  Location     Type
 20456 ;;		None
 20457 ;; Auto vars:     Size  Location     Type
 20458 ;;		None
 20459 ;; Return value:  Size  Location     Type
 20460 ;;                  1    wreg      void 
 20461 ;; Registers used:
 20462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20463 ;; Tracked objects:
 20464 ;;		On entry : 0/0
 20465 ;;		On exit  : 0/0
 20466 ;;		Unchanged: 0/0
 20467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20472 ;;Total ram usage:        0 bytes
 20473 ;; Hardware stack levels used:    1
 20474 ;; This function calls:
 20475 ;;		Nothing
 20476 ;; This function is called by:
 20477 ;;		_INTERRUPT_InterruptManager
 20478 ;; This function uses a non-reentrant model
 20479 ;;
 20480                           
 20481                           	psect	text106
 20482  004AF6                     __ptext106:
 20483                           	opt stack 0
 20484  004AF6                     _EUSART1_Transmit_ISR:
 20485                           	opt stack 20
 20486                           
 20487                           ;eusart1.c: 159: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 20488                           
 20489                           ;incstack = 0
 20490  004AF6  0E08               	movlw	8
 20491  004AF8  0101               	movlb	1	; () banked
 20492  004AFA  61F2               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 20493  004AFC  D013               	goto	i2l201
 20494                           
 20495                           ; BSR set to: 1
 20496                           ;eusart1.c: 160: {
 20497                           ;eusart1.c: 161: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 20498  004AFE  5048               	movf	_eusart1TxTail,w,c	;volatile
 20499  004B00  0D01               	mullw	1
 20500  004B02  0E00               	movlw	low _eusart1TxBuffer
 20501  004B04  24F3               	addwf	prodl,w,c
 20502  004B06  6ED9               	movwf	fsr2l,c
 20503  004B08  0E01               	movlw	high _eusart1TxBuffer
 20504  004B0A  20F4               	addwfc	prodh,w,c
 20505  004B0C  6EDA               	movwf	fsr2h,c
 20506  004B0E  50DF               	movf	indf2,w,c
 20507  004B10  6EAD               	movwf	4013,c	;volatile
 20508                           
 20509                           ; BSR set to: 1
 20510  004B12  2A48               	incf	_eusart1TxTail,f,c	;volatile
 20511                           
 20512                           ; BSR set to: 1
 20513                           ;eusart1.c: 162: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 20514  004B14  0E07               	movlw	7
 20515  004B16  6448               	cpfsgt	_eusart1TxTail,c	;volatile
 20516  004B18  D002               	goto	i2l6817
 20517                           
 20518                           ; BSR set to: 1
 20519                           ;eusart1.c: 163: {
 20520                           ;eusart1.c: 164: eusart1TxTail = 0;
 20521  004B1A  0E00               	movlw	0
 20522  004B1C  6E48               	movwf	_eusart1TxTail,c	;volatile
 20523  004B1E                     i2l6817:
 20524                           
 20525                           ; BSR set to: 1
 20526                           ;eusart1.c: 165: }
 20527                           ;eusart1.c: 166: eusart1TxBufferRemaining++;
 20528  004B1E  0101               	movlb	1	; () banked
 20529  004B20  2BF2               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 20530                           
 20531                           ;eusart1.c: 167: }
 20532  004B22  0012               	return	
 20533  004B24                     i2l201:
 20534                           
 20535                           ; BSR set to: 1
 20536                           ;eusart1.c: 168: else
 20537                           ;eusart1.c: 169: {
 20538                           ;eusart1.c: 170: PIE1bits.TX1IE = 0;
 20539  004B24  989D               	bcf	3997,4,c	;volatile
 20540  004B26  0012               	return	
 20541  004B28                     __end_of_EUSART1_Transmit_ISR:
 20542                           	opt stack 0
 20543                           tosu	equ	0xFFF
 20544                           tosh	equ	0xFFE
 20545                           tosl	equ	0xFFD
 20546                           pclatu	equ	0xFFB
 20547                           pclath	equ	0xFFA
 20548                           tblptru	equ	0xFF8
 20549                           tblptrh	equ	0xFF7
 20550                           tblptrl	equ	0xFF6
 20551                           tablat	equ	0xFF5
 20552                           prodh	equ	0xFF4
 20553                           prodl	equ	0xFF3
 20554                           intcon	equ	0xFF2
 20555                           intcon2	equ	0xFF1
 20556                           postinc0	equ	0xFEE
 20557                           fsr0h	equ	0xFEA
 20558                           fsr0l	equ	0xFE9
 20559                           wreg	equ	0xFE8
 20560                           indf1	equ	0xFE7
 20561                           postinc1	equ	0xFE6
 20562                           postdec1	equ	0xFE5
 20563                           fsr1h	equ	0xFE2
 20564                           fsr1l	equ	0xFE1
 20565                           indf2	equ	0xFDF
 20566                           postinc2	equ	0xFDE
 20567                           postdec2	equ	0xFDD
 20568                           fsr2h	equ	0xFDA
 20569                           fsr2l	equ	0xFD9
 20570                           status	equ	0xFD8
 20571                           
 20572 ;; *************** function _EUSART1_Receive_ISR *****************
 20573 ;; Defined at:
 20574 ;;		line 174 in file "mcc_generated_files/eusart1.c"
 20575 ;; Parameters:    Size  Location     Type
 20576 ;;		None
 20577 ;; Auto vars:     Size  Location     Type
 20578 ;;		None
 20579 ;; Return value:  Size  Location     Type
 20580 ;;                  1    wreg      void 
 20581 ;; Registers used:
 20582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20583 ;; Tracked objects:
 20584 ;;		On entry : 0/0
 20585 ;;		On exit  : 0/0
 20586 ;;		Unchanged: 0/0
 20587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20592 ;;Total ram usage:        0 bytes
 20593 ;; Hardware stack levels used:    1
 20594 ;; This function calls:
 20595 ;;		Nothing
 20596 ;; This function is called by:
 20597 ;;		_INTERRUPT_InterruptManager
 20598 ;; This function uses a non-reentrant model
 20599 ;;
 20600                           
 20601                           	psect	text107
 20602  004BDC                     __ptext107:
 20603                           	opt stack 0
 20604  004BDC                     _EUSART1_Receive_ISR:
 20605                           	opt stack 20
 20606                           
 20607                           ;eusart1.c: 177: if(1 == RCSTA1bits.OERR)
 20608                           
 20609                           ; BSR set to: 1
 20610                           ;incstack = 0
 20611  004BDC  A2AB               	btfss	4011,1,c	;volatile
 20612  004BDE  D002               	goto	i2l6823
 20613                           
 20614                           ;eusart1.c: 178: {
 20615                           ;eusart1.c: 181: RCSTA1bits.CREN = 0;
 20616  004BE0  98AB               	bcf	4011,4,c	;volatile
 20617                           
 20618                           ;eusart1.c: 182: RCSTA1bits.CREN = 1;
 20619  004BE2  88AB               	bsf	4011,4,c	;volatile
 20620  004BE4                     i2l6823:
 20621                           
 20622                           ;eusart1.c: 183: }
 20623                           ;eusart1.c: 186: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 20624  004BE4  5045               	movf	_eusart1RxHead,w,c	;volatile
 20625  004BE6  0D01               	mullw	1
 20626  004BE8  0E00               	movlw	low _eusart1RxBuffer
 20627  004BEA  24F3               	addwf	prodl,w,c
 20628  004BEC  6ED9               	movwf	fsr2l,c
 20629  004BEE  0E02               	movlw	high _eusart1RxBuffer
 20630  004BF0  20F4               	addwfc	prodh,w,c
 20631  004BF2  6EDA               	movwf	fsr2h,c
 20632  004BF4  CFAE FFDF          	movff	4014,indf2	;volatile
 20633  004BF8  2A45               	incf	_eusart1RxHead,f,c	;volatile
 20634                           
 20635                           ;eusart1.c: 187: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 20636  004BFA  0E3F               	movlw	63
 20637  004BFC  6445               	cpfsgt	_eusart1RxHead,c	;volatile
 20638  004BFE  D002               	goto	i2l6831
 20639                           
 20640                           ;eusart1.c: 188: {
 20641                           ;eusart1.c: 189: eusart1RxHead = 0;
 20642  004C00  0E00               	movlw	0
 20643  004C02  6E45               	movwf	_eusart1RxHead,c	;volatile
 20644  004C04                     i2l6831:
 20645                           
 20646                           ;eusart1.c: 190: }
 20647                           ;eusart1.c: 191: eusart1RxCount++;
 20648  004C04  2A44               	incf	_eusart1RxCount,f,c	;volatile
 20649  004C06  0012               	return		;funcret
 20650  004C08                     __end_of_EUSART1_Receive_ISR:
 20651                           	opt stack 0
 20652                           tosu	equ	0xFFF
 20653                           tosh	equ	0xFFE
 20654                           tosl	equ	0xFFD
 20655                           pclatu	equ	0xFFB
 20656                           pclath	equ	0xFFA
 20657                           tblptru	equ	0xFF8
 20658                           tblptrh	equ	0xFF7
 20659                           tblptrl	equ	0xFF6
 20660                           tablat	equ	0xFF5
 20661                           prodh	equ	0xFF4
 20662                           prodl	equ	0xFF3
 20663                           intcon	equ	0xFF2
 20664                           intcon2	equ	0xFF1
 20665                           postinc0	equ	0xFEE
 20666                           fsr0h	equ	0xFEA
 20667                           fsr0l	equ	0xFE9
 20668                           wreg	equ	0xFE8
 20669                           indf1	equ	0xFE7
 20670                           postinc1	equ	0xFE6
 20671                           postdec1	equ	0xFE5
 20672                           fsr1h	equ	0xFE2
 20673                           fsr1l	equ	0xFE1
 20674                           indf2	equ	0xFDF
 20675                           postinc2	equ	0xFDE
 20676                           postdec2	equ	0xFDD
 20677                           fsr2h	equ	0xFDA
 20678                           fsr2l	equ	0xFD9
 20679                           status	equ	0xFD8
 20680                           tosu	equ	0xFFF
 20681                           tosh	equ	0xFFE
 20682                           tosl	equ	0xFFD
 20683                           pclatu	equ	0xFFB
 20684                           pclath	equ	0xFFA
 20685                           tblptru	equ	0xFF8
 20686                           tblptrh	equ	0xFF7
 20687                           tblptrl	equ	0xFF6
 20688                           tablat	equ	0xFF5
 20689                           prodh	equ	0xFF4
 20690                           prodl	equ	0xFF3
 20691                           intcon	equ	0xFF2
 20692                           intcon2	equ	0xFF1
 20693                           postinc0	equ	0xFEE
 20694                           fsr0h	equ	0xFEA
 20695                           fsr0l	equ	0xFE9
 20696                           wreg	equ	0xFE8
 20697                           indf1	equ	0xFE7
 20698                           postinc1	equ	0xFE6
 20699                           postdec1	equ	0xFE5
 20700                           fsr1h	equ	0xFE2
 20701                           fsr1l	equ	0xFE1
 20702                           indf2	equ	0xFDF
 20703                           postinc2	equ	0xFDE
 20704                           postdec2	equ	0xFDD
 20705                           fsr2h	equ	0xFDA
 20706                           fsr2l	equ	0xFD9
 20707                           status	equ	0xFD8
 20708                           
 20709                           	psect	text108
 20710  000000                     __ptext108:
 20711                           	opt stack 0
 20712                           tosu	equ	0xFFF
 20713                           tosh	equ	0xFFE
 20714                           tosl	equ	0xFFD
 20715                           pclatu	equ	0xFFB
 20716                           pclath	equ	0xFFA
 20717                           tblptru	equ	0xFF8
 20718                           tblptrh	equ	0xFF7
 20719                           tblptrl	equ	0xFF6
 20720                           tablat	equ	0xFF5
 20721                           prodh	equ	0xFF4
 20722                           prodl	equ	0xFF3
 20723                           intcon	equ	0xFF2
 20724                           intcon2	equ	0xFF1
 20725                           postinc0	equ	0xFEE
 20726                           fsr0h	equ	0xFEA
 20727                           fsr0l	equ	0xFE9
 20728                           wreg	equ	0xFE8
 20729                           indf1	equ	0xFE7
 20730                           postinc1	equ	0xFE6
 20731                           postdec1	equ	0xFE5
 20732                           fsr1h	equ	0xFE2
 20733                           fsr1l	equ	0xFE1
 20734                           indf2	equ	0xFDF
 20735                           postinc2	equ	0xFDE
 20736                           postdec2	equ	0xFDD
 20737                           fsr2h	equ	0xFDA
 20738                           fsr2l	equ	0xFD9
 20739                           status	equ	0xFD8
 20740                           
 20741                           	psect	rparam
 20742  0000                     tosu	equ	0xFFF
 20743                           tosh	equ	0xFFE
 20744                           tosl	equ	0xFFD
 20745                           pclatu	equ	0xFFB
 20746                           pclath	equ	0xFFA
 20747                           tblptru	equ	0xFF8
 20748                           tblptrh	equ	0xFF7
 20749                           tblptrl	equ	0xFF6
 20750                           tablat	equ	0xFF5
 20751                           prodh	equ	0xFF4
 20752                           prodl	equ	0xFF3
 20753                           intcon	equ	0xFF2
 20754                           intcon2	equ	0xFF1
 20755                           postinc0	equ	0xFEE
 20756                           fsr0h	equ	0xFEA
 20757                           fsr0l	equ	0xFE9
 20758                           wreg	equ	0xFE8
 20759                           indf1	equ	0xFE7
 20760                           postinc1	equ	0xFE6
 20761                           postdec1	equ	0xFE5
 20762                           fsr1h	equ	0xFE2
 20763                           fsr1l	equ	0xFE1
 20764                           indf2	equ	0xFDF
 20765                           postinc2	equ	0xFDE
 20766                           postdec2	equ	0xFDD
 20767                           fsr2h	equ	0xFDA
 20768                           fsr2l	equ	0xFD9
 20769                           status	equ	0xFD8
 20770                           
 20771                           	psect	temp
 20772  000050                     btemp:
 20773                           	opt stack 0
 20774  000050                     	ds	1
 20775  0000                     int$flags	set	btemp
 20776                           tosu	equ	0xFFF
 20777                           tosh	equ	0xFFE
 20778                           tosl	equ	0xFFD
 20779                           pclatu	equ	0xFFB
 20780                           pclath	equ	0xFFA
 20781                           tblptru	equ	0xFF8
 20782                           tblptrh	equ	0xFF7
 20783                           tblptrl	equ	0xFF6
 20784                           tablat	equ	0xFF5
 20785                           prodh	equ	0xFF4
 20786                           prodl	equ	0xFF3
 20787                           intcon	equ	0xFF2
 20788                           intcon2	equ	0xFF1
 20789                           postinc0	equ	0xFEE
 20790                           fsr0h	equ	0xFEA
 20791                           fsr0l	equ	0xFE9
 20792                           wreg	equ	0xFE8
 20793                           indf1	equ	0xFE7
 20794                           postinc1	equ	0xFE6
 20795                           postdec1	equ	0xFE5
 20796                           fsr1h	equ	0xFE2
 20797                           fsr1l	equ	0xFE1
 20798                           indf2	equ	0xFDF
 20799                           postinc2	equ	0xFDE
 20800                           postdec2	equ	0xFDD
 20801                           fsr2h	equ	0xFDA
 20802                           fsr2l	equ	0xFD9
 20803                           status	equ	0xFD8


Data Sizes:
    Strings     920
    Constant    10
    Data        18
    BSS         1876
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      79
    BANK0           160     21      22
    BANK1           256      0     243
    BANK2           256      0     204
    BANK3           256      0     150
    BANK4           256      0     150
    BANK5           256    153     153
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_84(CODE[7]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), 
		 -> STR_57(CODE[7]), STR_54(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), 
		 -> STR_47(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_35(CODE[7]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_139(CODE[5]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), STR_84(CODE[7]), STR_83(CODE[7]), STR_82(CODE[7]), 
		 -> STR_79(CODE[7]), STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), 
		 -> STR_71(CODE[2]), STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), 
		 -> STR_59(CODE[7]), STR_57(CODE[7]), STR_54(CODE[7]), STR_52(CODE[7]), 
		 -> STR_49(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), 
		 -> NULL(NULL[0]), STR_35(CODE[7]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_84(CODE[7]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), 
		 -> STR_57(CODE[7]), STR_54(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), 
		 -> STR_47(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_35(CODE[7]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 150
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), STR_84(CODE[7]), STR_83(CODE[7]), STR_82(CODE[7]), 
		 -> STR_79(CODE[7]), STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), 
		 -> STR_71(CODE[2]), STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), 
		 -> STR_59(CODE[7]), STR_57(CODE[7]), STR_54(CODE[7]), STR_52(CODE[7]), 
		 -> STR_49(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), 
		 -> NULL(NULL[0]), STR_35(CODE[7]), 

    cputs@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_136(CODE[12]), STR_88(CODE[5]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_84(CODE[7]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), 
		 -> STR_57(CODE[7]), STR_54(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), 
		 -> STR_47(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_35(CODE[7]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 150
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), STR_84(CODE[7]), STR_83(CODE[7]), STR_82(CODE[7]), 
		 -> STR_79(CODE[7]), STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), 
		 -> STR_71(CODE[2]), STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), 
		 -> STR_59(CODE[7]), STR_57(CODE[7]), STR_54(CODE[7]), STR_52(CODE[7]), 
		 -> STR_49(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), 
		 -> NULL(NULL[0]), STR_35(CODE[7]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_139(CODE[5]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), STR_84(CODE[7]), STR_83(CODE[7]), STR_82(CODE[7]), 
		 -> STR_79(CODE[7]), STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), 
		 -> STR_71(CODE[2]), STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), 
		 -> STR_59(CODE[7]), STR_57(CODE[7]), STR_54(CODE[7]), STR_52(CODE[7]), 
		 -> STR_49(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), 
		 -> NULL(NULL[0]), STR_35(CODE[7]), 

    strncpy@from	PTR const unsigned char  size(2) Largest target is 1140
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1140]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 1140
		 -> STR_141(CODE[5]), STR_139(CODE[5]), uart_str(BANK3[150]), NULL(NULL[0]), 
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1140]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 1140
		 -> STR_141(CODE[5]), STR_139(CODE[5]), uart_str(BANK3[150]), NULL(NULL[0]), 
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1140]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 150
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), uart_str(BANK3[150]), cmd_data.data(BANK1[40]), NULL(NULL[0]), 
		 -> cmd_data(BANK1[53]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 1140
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), uart_str(BANK3[150]), CMD(BANK1[15]), cmd_data(BANK1[53]), 
		 -> clcd_display_string_details(BIGRAM[1140]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 1140
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), uart_str(BANK3[150]), CMD(BANK1[15]), cmd_data(BANK1[53]), 
		 -> clcd_display_string_details(BIGRAM[1140]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_126(CODE[5]), STR_115(CODE[7]), STR_112(CODE[7]), STR_109(CODE[8]), 
		 -> STR_106(CODE[6]), STR_101(CODE[6]), STR_98(CODE[5]), STR_95(CODE[4]), 
		 -> STR_92(CODE[4]), STR_89(CODE[6]), STR_86(CODE[4]), STR_85(CODE[4]), 
		 -> STR_69(CODE[5]), STR_68(CODE[7]), STR_56(CODE[7]), STR_50(CODE[8]), 
		 -> STR_45(CODE[6]), STR_44(CODE[6]), STR_40(CODE[5]), STR_38(CODE[6]), 
		 -> STR_37(CODE[4]), STR_36(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), CMD(BANK1[15]), NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_146(CODE[5]), STR_143(CODE[5]), STR_137(CODE[12]), STR_132(CODE[9]), 
		 -> STR_131(CODE[9]), STR_130(CODE[9]), STR_129(CODE[9]), STR_127(CODE[5]), 
		 -> STR_99(CODE[5]), STR_87(CODE[5]), STR_15(CODE[5]), STR_13(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 100
		 -> out_str(BANK2[100]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), out_str(BANK2[100]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_136(CODE[12]), STR_88(CODE[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_149(CODE[18]), STR_148(CODE[7]), STR_145(CODE[7]), STR_142(CODE[5]), 
		 -> STR_140(CODE[5]), STR_138(CODE[7]), STR_135(CODE[3]), STR_134(CODE[3]), 
		 -> STR_133(CODE[3]), STR_124(CODE[5]), STR_122(CODE[5]), STR_120(CODE[5]), 
		 -> STR_118(CODE[11]), STR_116(CODE[5]), STR_113(CODE[11]), STR_110(CODE[11]), 
		 -> STR_107(CODE[11]), STR_104(CODE[11]), STR_103(CODE[5]), STR_102(CODE[11]), 
		 -> STR_96(CODE[9]), STR_93(CODE[9]), STR_90(CODE[9]), STR_81(CODE[25]), 
		 -> STR_80(CODE[11]), STR_78(CODE[25]), STR_76(CODE[27]), STR_74(CODE[27]), 
		 -> STR_72(CODE[10]), STR_70(CODE[9]), STR_67(CODE[25]), STR_66(CODE[11]), 
		 -> STR_64(CODE[25]), STR_62(CODE[27]), STR_60(CODE[27]), STR_58(CODE[12]), 
		 -> STR_55(CODE[9]), STR_53(CODE[9]), STR_51(CODE[9]), STR_48(CODE[12]), 
		 -> STR_46(CODE[12]), STR_42(CODE[7]), STR_39(CODE[8]), STR_34(CODE[8]), 
		 -> STR_33(CODE[12]), STR_32(CODE[12]), STR_31(CODE[18]), STR_30(CODE[19]), 
		 -> STR_29(CODE[17]), STR_28(CODE[12]), STR_27(CODE[12]), STR_26(CODE[16]), 
		 -> STR_25(CODE[16]), STR_24(CODE[19]), STR_23(CODE[3]), STR_22(CODE[5]), 
		 -> STR_21(CODE[16]), STR_20(CODE[39]), STR_19(CODE[30]), STR_18(CODE[15]), 
		 -> STR_17(CODE[39]), STR_16(CODE[5]), STR_14(CODE[5]), STR_12(CODE[26]), 
		 -> STR_11(CODE[20]), STR_10(CODE[26]), STR_9(CODE[26]), STR_8(CODE[26]), 
		 -> STR_7(CODE[26]), STR_6(CODE[26]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[9]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), out_str(BANK2[100]), 

    memset@p1	PTR void  size(2) Largest target is 1140
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), uart_str(BANK3[150]), str_data(BANK2[40]), CMD(BANK1[15]), 
		 -> NULL(NULL[0]), cmd_data(BANK1[53]), out_str(BANK2[100]), conflict_arr(BANK1[40]), 
		 -> clcd_display_string_details(BIGRAM[1140]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    memset@p	PTR unsigned char  size(2) Largest target is 1140
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), uart_str(BANK3[150]), str_data(BANK2[40]), CMD(BANK1[15]), 
		 -> NULL(NULL[0]), cmd_data(BANK1[53]), out_str(BANK2[100]), conflict_arr(BANK1[40]), 
		 -> clcd_display_string_details(BIGRAM[1140]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 13
		 -> str(BANK1[13]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 13
		 -> str(BANK1[13]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_149(CODE[18]), STR_148(CODE[7]), STR_146(CODE[5]), STR_145(CODE[7]), 
		 -> STR_143(CODE[5]), STR_142(CODE[5]), STR_140(CODE[5]), STR_138(CODE[7]), 
		 -> STR_137(CODE[12]), STR_135(CODE[3]), STR_134(CODE[3]), STR_133(CODE[3]), 
		 -> STR_132(CODE[9]), STR_131(CODE[9]), STR_130(CODE[9]), STR_129(CODE[9]), 
		 -> STR_127(CODE[5]), STR_124(CODE[5]), STR_122(CODE[5]), STR_120(CODE[5]), 
		 -> STR_118(CODE[11]), STR_116(CODE[5]), STR_113(CODE[11]), STR_110(CODE[11]), 
		 -> STR_107(CODE[11]), STR_104(CODE[11]), STR_103(CODE[5]), STR_102(CODE[11]), 
		 -> STR_99(CODE[5]), STR_96(CODE[9]), STR_93(CODE[9]), STR_90(CODE[9]), 
		 -> STR_87(CODE[5]), STR_81(CODE[25]), STR_80(CODE[11]), STR_78(CODE[25]), 
		 -> STR_76(CODE[27]), STR_74(CODE[27]), STR_72(CODE[10]), STR_70(CODE[9]), 
		 -> STR_67(CODE[25]), STR_66(CODE[11]), STR_64(CODE[25]), STR_62(CODE[27]), 
		 -> STR_60(CODE[27]), STR_58(CODE[12]), STR_55(CODE[9]), STR_53(CODE[9]), 
		 -> STR_51(CODE[9]), STR_48(CODE[12]), STR_46(CODE[12]), STR_42(CODE[7]), 
		 -> STR_39(CODE[8]), STR_34(CODE[8]), STR_33(CODE[12]), STR_32(CODE[12]), 
		 -> STR_31(CODE[18]), STR_30(CODE[19]), STR_29(CODE[17]), STR_28(CODE[12]), 
		 -> STR_27(CODE[12]), STR_26(CODE[16]), STR_25(CODE[16]), STR_24(CODE[19]), 
		 -> STR_23(CODE[3]), STR_22(CODE[5]), STR_21(CODE[16]), STR_20(CODE[39]), 
		 -> STR_19(CODE[30]), STR_18(CODE[15]), STR_17(CODE[39]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[26]), 
		 -> STR_11(CODE[20]), STR_10(CODE[26]), STR_9(CODE[26]), STR_8(CODE[26]), 
		 -> STR_7(CODE[26]), STR_6(CODE[26]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[9]), STR_1(CODE[9]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), STR_150(CODE[7]), STR_147(CODE[6]), 
		 -> STR_144(CODE[9]), uart_str(BANK3[150]), STR_128(CODE[13]), STR_125(CODE[15]), 
		 -> STR_123(CODE[12]), STR_121(CODE[12]), STR_119(CODE[7]), STR_117(CODE[6]), 
		 -> STR_114(CODE[7]), STR_111(CODE[8]), STR_108(CODE[6]), STR_105(CODE[6]), 
		 -> STR_100(CODE[3]), STR_97(CODE[3]), STR_94(CODE[3]), STR_91(CODE[3]), 
		 -> cmd_data.data(BANK1[40]), CMD(BANK1[15]), NULL(NULL[0]), cmd_data(BANK1[53]), 
		 -> clcd_display_string_details.string(BIGRAM[40]), out_str(BANK2[100]), STR_5(CODE[5]), clcd_display_string_details(BIGRAM[1140]), 

    S2318__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    S2318__prbuf$ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), out_str(BANK2[100]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), out_str(BANK2[100]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 150
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), STR_84(CODE[7]), STR_83(CODE[7]), STR_82(CODE[7]), 
		 -> STR_79(CODE[7]), STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), 
		 -> STR_71(CODE[2]), STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), 
		 -> STR_59(CODE[7]), STR_57(CODE[7]), STR_54(CODE[7]), STR_52(CODE[7]), 
		 -> STR_49(CODE[7]), STR_47(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), 
		 -> NULL(NULL[0]), STR_35(CODE[7]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    parse_cmd_str@temp	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    parse_cmd_str@ptr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), 

    parse_cmd_str@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), 

    collect_column@data_column	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK1[53]), 

    collect_column@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    get_over_write_data@over_write_data	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK1[53]), 

    get_over_write_data@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    get_dis_frq@data_frq	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK1[53]), 

    get_dis_frq@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    get_direction@data_direction	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK1[53]), 

    get_direction@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    get_str@data_str	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK1[53]), 

    get_str@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    get_uid@data_uid	PTR unsigned int  size(2) Largest target is 53
		 -> cmd_data(BANK1[53]), 

    get_uid@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    collect_row@data_row	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK1[53]), 

    collect_row@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK3[150]), NULL(NULL[0]), 

    scroll_off@clcd_display_string_details	PTR struct . size(2) Largest target is 1140
		 -> clcd_display_string_details(BIGRAM[1140]), 

    scroll_right_to_left@clcd_display_string_details	PTR struct . size(2) Largest target is 1140
		 -> clcd_display_string_details(BIGRAM[1140]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    scroll_left_to_right@clcd_display_string_details	PTR struct . size(2) Largest target is 1140
		 -> clcd_display_string_details(BIGRAM[1140]), 

    write_str@str	PTR const unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    update_string_data@data	PTR struct . size(2) Largest target is 53
		 -> cmd_data(BANK1[53]), 

    set_string_data@data	PTR struct . size(2) Largest target is 53
		 -> cmd_data(BANK1[53]), 

    copy_display_struct@data	PTR struct . size(2) Largest target is 53
		 -> cmd_data(BANK1[53]), 

    copy_display_struct@clcd_str_data	PTR struct . size(2) Largest target is 1140
		 -> clcd_display_string_details(BIGRAM[1140]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 1140
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), uart_str(BANK3[150]), CMD(BANK1[15]), cmd_data(BANK1[53]), 
		 -> clcd_display_string_details(BIGRAM[1140]), 

    copy_data@data	PTR struct . size(2) Largest target is 53
		 -> cmd_data(BANK1[53]), 

    copy_data@clcd_str_data	PTR struct . size(2) Largest target is 1140
		 -> clcd_display_string_details(BIGRAM[1140]), 

    sp__max_display_support	PTR unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), 

    sp__memset	PTR void  size(2) Largest target is 1140
		 -> cmd_consol_task@temp_uart_str(BANK5[150]), uart_str(BANK3[150]), str_data(BANK2[40]), CMD(BANK1[15]), 
		 -> NULL(NULL[0]), cmd_data(BANK1[53]), out_str(BANK2[100]), conflict_arr(BANK1[40]), 
		 -> clcd_display_string_details(BIGRAM[1140]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> make_array(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> make_array(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    put_string_usart1@str	PTR unsigned char  size(2) Largest target is 100
		 -> out_str(BANK2[100]), 


Critical Paths under _main in COMRAM

    _console_init->_memset
    _strstr->_strncmp
    _strncmp->_strlen
    _reply_to_host->_update_string_data
    _update_string_data->_copy_data
    _update_string_data->_make_display
    _make_display->_scroll_right_to_left
    _scroll_right_to_left->_memset
    _scroll_off->_strlen
    _scroll_left_to_right->_memset
    _display_text->_write_str
    _set_cursor->_write_lcd_cmd
    _is_busy->_delay
    _char_enter_mode_left_to_right->_write_lcd_cmd
    _copy_data->_printf
    _conflict_check->_printf
    _set_string_data->_conflict
    _get_new_uid->___awmod
    _rand->___lmul
    ___awmod->_rand
    _copy_display_struct->_printf
    _conflict->_printf
    _puts->_cputs
    _cputs->_putch
    _print_conflict_ids->_printf
    _sprintf->__doprnt
    _put_string_usart1->_EUSART1_Write
    _init_clcd_cusotom_lcd->_printf
    _write_lcd_cmd->_delay
    _clear_display_array->_memset
    _clear_display_structure->_memset
    _clcd_display_string_config->_printf
    _write_str->_write_lcd_data
    _write_lcd_data->_delay
    _parse_cmd_str->_collect_column
    _parse_cmd_str->_collect_row
    _parse_cmd_str->_get_direction
    _parse_cmd_str->_get_dis_frq
    _parse_cmd_str->_get_over_write_data
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _get_uid->_strlen
    _get_str->_memset
    _strcpy->_strlen
    _get_over_write_data->_printf
    _get_dis_frq->_printf
    _get_direction->_printf
    _collect_row->_printf
    _collect_column->_printf
    _strlen->___wmul
    _printf->__doprnt
    __doprnt->___lwmod
    _putch->_EUSART2_Write
    ___lwmod->___lwdiv
    _clear_cmd_data->_memset
    _memset->_strlen
    _atoi->___wmul
    ___wmul->___awdiv
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _make_array->_heart_beat

Critical Paths under _main in BANK0

    _main->_cmd_consol_task
    _cmd_consol_task->_reply_to_host
    _reply_to_host->_set_string_data
    _update_string_data->_conflict_check

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_cmd_consol_task

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  644193
                                             20 BANK0      1     1      0
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                     _TMR1_StopTimer
                     _TMR5_StopTimer
                          __delay_MS
                    _cmd_consol_task
                       _console_init
                       _display_text
                       _make_display
                             _printf
 ---------------------------------------------------------------------------------
 (1) _console_init                                         0     0      0   24760
                     _clear_cmd_data
                             _memset
 ---------------------------------------------------------------------------------
 (1) _cmd_consol_task                                    154   154      0  547223
                                             19 BANK0      1     1      0
                                              0 BANK5    153   153      0
                       _EUSART1_Read
                             _memset
                      _parse_cmd_str
                             _printf
                  _put_string_usart1
                               _puts
                      _reply_to_host
                            _sprintf
                             _strcpy
                             _strlen
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _strstr                                               4     0      4    4008
                                             44 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (3) _strncmp                                              9     3      6     423
                                             35 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _reply_to_host                                        5     5      0  358729
                                             14 BANK0      5     5      0
                       _clcd_max_col
                       _clcd_max_row
              _init_clcd_cusotom_lcd
                    _max_display_str
                _max_display_support
                      _max_uid_range
                             _memset
                      _min_uid_range
                 _print_conflict_ids
                             _printf
                  _put_string_usart1
                               _puts
                    _set_string_data
                            _sprintf
                             _strcmp
                 _update_string_data
 ---------------------------------------------------------------------------------
 (3) _update_string_data                                  11     9      2  122707
                                             62 COMRAM     2     0      2
                                              4 BANK0      9     9      0
                             ___wmul
                     _conflict_check
                          _copy_data
                       _make_display
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (1) _make_display                                         5     5      0   59466
                                             57 COMRAM     5     5      0
                             ___wmul
                       _display_text
                             _memset
               _scroll_left_to_right
                         _scroll_off
               _scroll_right_to_left
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_right_to_left                                14    12      2   14714
                                             43 COMRAM    14    12      2
                             ___wmul (ARG)
                             _memset
                            _strncpy
 ---------------------------------------------------------------------------------
 (2) _scroll_off                                          15    13      2    3237
                                             35 COMRAM    15    13      2
                             ___wmul (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_left_to_right                                11     9      2   14621
                                             43 COMRAM    11     9      2
                             ___wmul (ARG)
                             _memset
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              8     2      6    1126
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _display_text                                         0     0      0    2989
      _char_enter_mode_left_to_right
                         _set_cursor
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _set_cursor                                           2     1      1    1422
                                             23 COMRAM     2     1      1
                            _is_busy
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (4) _is_busy                                              0     0      0     518
                        __delay_10uS
                              _delay
 ---------------------------------------------------------------------------------
 (5) __delay_10uS                                          5     3      2     148
                                             15 COMRAM     5     3      2
            _TMR5_HasOverflowOccured
                        _TMR5_Reload
                    _TMR5_StartTimer
                     _TMR5_StopTimer
 ---------------------------------------------------------------------------------
 (6) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR5_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR5_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _char_enter_mode_left_to_right                        0     0      0     500
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (4) _copy_data                                           10     6      4   15169
                                             56 COMRAM     6     2      4
                             _printf
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _conflict_check                                       9     7      2   17932
                                             56 COMRAM     5     3      2
                                              0 BANK0      4     4      0
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) _set_string_data                                     14    12      2   73398
                                              0 BANK0     14    12      2
                             ___wmul
                           _conflict
                _copy_display_struct
                        _get_new_uid
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (4) _get_new_uid                                          9     7      2    9731
                                             35 COMRAM     9     7      2
                            ___awmod
                             ___wmul
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (5) _srand                                                2     0      2     108
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _rand                                                 2     0      2     404
                                             27 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     404
                                             15 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     741
                                             29 COMRAM     6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _copy_display_struct                                  7     2      5   15339
                                             56 COMRAM     7     2      5
                             _printf
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _conflict                                             8     7      1   17716
                                             56 COMRAM     8     7      1
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) _puts                                                 2     0      2     451
                                             19 COMRAM     2     0      2
                              _cputs
                              _putch
 ---------------------------------------------------------------------------------
 (4) _cputs                                                2     0      2     204
                                             17 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _print_conflict_ids                                   8     8      0   27320
                                             56 COMRAM     6     6      0
                             _memset
                             _printf
                  _put_string_usart1
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             12     6      6    4960
                                             42 COMRAM    12     6      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) _put_string_usart1                                    2     0      2    1051
                                             16 COMRAM     2     0      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Write                                        1     1      0      62
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _min_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_display_support                                  2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _max_display_str                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_clcd_cusotom_lcd                                2     1      1  103879
                                             56 COMRAM     2     1      1
                            ___awdiv
                             ___wmul
                   _init_CLCD_config
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (4) _init_CLCD_config                                     0     0      0   73293
                          __delay_MS
         _clcd_display_string_config
                             _memset
                         _reset_clcd
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (4) _write_lcd_cmd                                        1     1      0     500
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _reset_clcd                                           0     0      0   37140
                _clear_display_array
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _clear_display_array                                  0     0      0   24760
                             _memset
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _reset_display_structure_count                        0     0      0   12380
            _clear_display_structure
 ---------------------------------------------------------------------------------
 (7) _clear_display_structure                              0     0      0   12380
                             _memset
 ---------------------------------------------------------------------------------
 (5) _clcd_display_string_config                           0     0      0   22586
                             _memcpy
                             _memset
                             _printf
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _write_str                                            3     1      2    1067
                                             23 COMRAM     3     1      2
                     _write_lcd_data
 ---------------------------------------------------------------------------------
 (4) _write_lcd_data                                       1     1      0     500
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                7     5      2     370
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (6) _memcpy                                              10     4      6     405
                                             15 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) __delay_MS                                            5     3      2     687
                                             15 COMRAM     5     3      2
            _TMR1_HasOverflowOccured
                        _TMR1_Reload
                    _TMR1_StartTimer
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     907
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _clcd_max_row                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clcd_max_col                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parse_cmd_str                                        8     6      2  150913
                                              0 BANK0      8     6      2
                               _atoi
                     _clear_cmd_data
                     _collect_column
                        _collect_row
                      _get_direction
                        _get_dis_frq
                _get_over_write_data
                            _get_str
                            _get_uid
                             _memset
                             _printf
                             _strcmp
                             _strcpy
                             _strlen
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _strtok                                               4     0      4    5111
                                             28 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (4) _strspn                                               7     3      4     873
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strcspn                                              7     3      4     873
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strchr                                               6     2      4     586
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               6     2      4    3521
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _get_uid                                             10     6      4   11779
                                             35 COMRAM    10     6      4
                             ___wmul
                            _isdigit
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _get_str                                              4     0      4   18164
                                             43 COMRAM     4     0      4
                             _memset
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    2881
                                             35 COMRAM     6     2      4
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _get_over_write_data                                  8     4      4   11937
                                             56 COMRAM     8     4      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _get_dis_frq                                          8     4      4   11937
                                             56 COMRAM     8     4      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _get_direction                                        8     4      4   12122
                                             56 COMRAM     8     4      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_row                                          8     4      4   12461
                                             56 COMRAM     8     4      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_column                                       8     4      4   12461
                                             56 COMRAM     8     4      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2    2594
                                             29 COMRAM     6     4      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _printf                                              14     6      8    8734
                                             42 COMRAM    14     6      8
                            ___awdiv (ARG)
                             ___wmul (ARG)
                            __doprnt
                       _clcd_max_col (ARG)
                       _clcd_max_row (ARG)
                    _max_display_str (ARG)
                _max_display_support (ARG)
                      _max_uid_range (ARG)
                      _min_uid_range (ARG)
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             21    15      6    2807
                                             27 COMRAM    15     9      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      62
                                             16 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART2_Write                                        1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear_cmd_data                                       0     0      0   12380
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6   12380
                                             35 COMRAM     8     2      6
                             ___wmul (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    8827
                                             29 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    8240
                                             23 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      37
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
                 _EUSART1_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (6) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     150
                                             17 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     150
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         14    14      0       0
                                              1 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                         _make_array *
 ---------------------------------------------------------------------------------
 (13) _make_array                                          0     0      0       0
                         _heart_beat
 ---------------------------------------------------------------------------------
 (14) _heart_beat                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_SetInterruptHandler
   _TMR0_StartTimer
   _TMR0_StopTimer
   _TMR1_StopTimer
   _TMR5_StopTimer
   __delay_MS
     _TMR1_HasOverflowOccured
     _TMR1_Reload
     _TMR1_StartTimer
     _TMR1_StopTimer
   _cmd_consol_task
     _EUSART1_Read
     _memset
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _parse_cmd_str
       _atoi
         ___wmul
           ___awdiv (ARG)
         _isdigit
       _clear_cmd_data
         _memset
           ___wmul (ARG)
             ___awdiv (ARG)
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
       _collect_column
         _isdigit
         _printf
           ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           __doprnt (ARG)
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             _putch *
               _EUSART2_Write
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _collect_row
         _isdigit
         _printf
           ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           __doprnt (ARG)
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             _putch *
               _EUSART2_Write
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_direction
         _isdigit
         _printf
           ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           __doprnt (ARG)
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             _putch *
               _EUSART2_Write
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_dis_frq
         _isdigit
         _printf
           ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           __doprnt (ARG)
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             _putch *
               _EUSART2_Write
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_over_write_data
         _isdigit
         _printf
           ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           __doprnt (ARG)
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             _putch *
               _EUSART2_Write
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_str
         _memset
           ___wmul (ARG)
             ___awdiv (ARG)
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strcpy
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_uid
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _memset
         ___wmul (ARG)
           ___awdiv (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _printf
         ___awdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           _putch *
             _EUSART2_Write
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
       _strcmp
       _strcpy
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strlen
         ___wmul (ARG)
           ___awdiv (ARG)
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _printf
       ___awdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
           _EUSART2_Write
       _clcd_max_col (ARG)
       _clcd_max_row (ARG)
       _max_display_str (ARG)
       _max_display_support (ARG)
       _max_uid_range (ARG)
       _min_uid_range (ARG)
     _put_string_usart1
       _EUSART1_Write
     _puts
       _cputs
         _putch
           _EUSART2_Write
       _putch
         _EUSART2_Write
     _reply_to_host
       _clcd_max_col
       _clcd_max_row
       _init_clcd_cusotom_lcd
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _init_CLCD_config
           __delay_MS
             _TMR1_HasOverflowOccured
             _TMR1_Reload
             _TMR1_StartTimer
             _TMR1_StopTimer
           _clcd_display_string_config
             _memcpy
             _memset
               ___wmul (ARG)
                 ___awdiv (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _printf
               ___awdiv (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               __doprnt (ARG)
                 Absolute function(Fake) *
                 ___lwdiv *
                 ___lwmod *
                   ___lwdiv (ARG)
                 _putch *
                   _EUSART2_Write
               _clcd_max_col (ARG)
               _clcd_max_row (ARG)
               _max_display_str (ARG)
               _max_display_support (ARG)
               _max_uid_range (ARG)
               _min_uid_range (ARG)
             _write_str
               _write_lcd_data
                 _delay
           _memset
             ___wmul (ARG)
               ___awdiv (ARG)
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _reset_clcd
             _clear_display_array
               _memset
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _strlen (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
               _reset_display_structure_count
                 _clear_display_structure
                   _memset
                     ___wmul (ARG)
                       ___awdiv (ARG)
                     _strlen (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
             _reset_display_structure_count
               _clear_display_structure
                 _memset
                   ___wmul (ARG)
                     ___awdiv (ARG)
                   _strlen (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
           _write_lcd_cmd
             _delay
         _memset
           ___wmul (ARG)
             ___awdiv (ARG)
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           __doprnt (ARG)
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             _putch *
               _EUSART2_Write
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
       _max_display_str
       _max_display_support
       _max_uid_range
       _memset
         ___wmul (ARG)
           ___awdiv (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _min_uid_range
       _print_conflict_ids
         _memset
           ___wmul (ARG)
             ___awdiv (ARG)
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           __doprnt (ARG)
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             _putch *
               _EUSART2_Write
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
         _put_string_usart1
           _EUSART1_Write
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             _putch *
               _EUSART2_Write
       _printf
         ___awdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           _putch *
             _EUSART2_Write
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
       _put_string_usart1
         _EUSART1_Write
       _puts
         _cputs
           _putch
             _EUSART2_Write
         _putch
           _EUSART2_Write
       _set_string_data
         ___wmul
           ___awdiv (ARG)
         _conflict
           ___wmul
             ___awdiv (ARG)
           _printf
             ___awdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             __doprnt (ARG)
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               _putch *
                 _EUSART2_Write
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
         _copy_display_struct
           _printf
             ___awdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             __doprnt (ARG)
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               _putch *
                 _EUSART2_Write
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
           _strcpy
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _get_new_uid
           ___awmod
             _rand (ARG)
               ___lmul
           ___wmul
             ___awdiv (ARG)
           _rand
             ___lmul
           _srand
         _memset
           ___wmul (ARG)
             ___awdiv (ARG)
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           __doprnt (ARG)
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             _putch *
               _EUSART2_Write
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           _putch *
             _EUSART2_Write
       _strcmp
       _update_string_data
         ___wmul
           ___awdiv (ARG)
         _conflict_check
           ___wmul
             ___awdiv (ARG)
           _printf
             ___awdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             __doprnt (ARG)
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               _putch *
                 _EUSART2_Write
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
         _copy_data
           _printf
             ___awdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             __doprnt (ARG)
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               _putch *
                 _EUSART2_Write
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
           _strcpy
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _make_display
           ___wmul
             ___awdiv (ARG)
           _display_text
             _char_enter_mode_left_to_right
               _write_lcd_cmd
                 _delay
             _set_cursor
               _is_busy
                 __delay_10uS
                   _TMR5_HasOverflowOccured
                   _TMR5_Reload
                   _TMR5_StartTimer
                   _TMR5_StopTimer
                 _delay
               _write_lcd_cmd
                 _delay
             _write_str
               _write_lcd_data
                 _delay
           _memset
             ___wmul (ARG)
               ___awdiv (ARG)
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _scroll_left_to_right
             ___wmul (ARG)
               ___awdiv (ARG)
             _memset (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _strncpy (ARG)
           _scroll_off
             ___wmul (ARG)
               ___awdiv (ARG)
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _scroll_right_to_left
             ___wmul (ARG)
               ___awdiv (ARG)
             _memset (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _strncpy (ARG)
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _memset
           ___wmul (ARG)
             ___awdiv (ARG)
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           __doprnt (ARG)
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             _putch *
               _EUSART2_Write
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
           _EUSART2_Write
     _strcpy
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _strlen
       ___wmul (ARG)
         ___awdiv (ARG)
     _strstr
       _strchr
       _strlen
         ___wmul (ARG)
           ___awdiv (ARG)
       _strncmp
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
   _console_init
     _clear_cmd_data
       _memset
         ___wmul (ARG)
           ___awdiv (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _memset
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _display_text
     _char_enter_mode_left_to_right
       _write_lcd_cmd
         _delay
     _set_cursor
       _is_busy
         __delay_10uS
           _TMR5_HasOverflowOccured
           _TMR5_Reload
           _TMR5_StartTimer
           _TMR5_StopTimer
         _delay
       _write_lcd_cmd
         _delay
     _write_str
       _write_lcd_data
         _delay
   _make_display
     ___wmul
       ___awdiv (ARG)
     _display_text
       _char_enter_mode_left_to_right
         _write_lcd_cmd
           _delay
       _set_cursor
         _is_busy
           __delay_10uS
             _TMR5_HasOverflowOccured
             _TMR5_Reload
             _TMR5_StartTimer
             _TMR5_StopTimer
           _delay
         _write_lcd_cmd
           _delay
       _write_str
         _write_lcd_data
           _delay
     _memset
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _scroll_left_to_right
       ___wmul (ARG)
         ___awdiv (ARG)
       _memset (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strncpy (ARG)
     _scroll_off
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _scroll_right_to_left
       ___wmul (ARG)
         ___awdiv (ARG)
       _memset (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strncpy (ARG)
     _strlen
       ___wmul (ARG)
         ___awdiv (ARG)
   _printf
     ___awdiv (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
     __doprnt (ARG)
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *
         _EUSART2_Write
     _clcd_max_col (ARG)
     _clcd_max_row (ARG)
     _max_display_str (ARG)
     _max_display_support (ARG)
     _max_uid_range (ARG)
     _min_uid_range (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _make_array *
         _heart_beat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     474      37       29.3%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100     99      99      16       59.8%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      96      14       58.6%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      96      11       58.6%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      CC       9       79.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F3       7       94.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     15      16       5       13.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4F       1       84.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3E9      12        0.0%
DATA                 0      0     85D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Nov 11 18:45:37 2017

                       _eusart1TxBufferRemaining 01F2                               set_string_data@uid 0068  
                          __end_of_parse_cmd_str 0D2C                             __size_of__delay_10uS 0044  
                            set_string_data@data 0060                                     ___awdiv@sign 0015  
                          _init_clcd_cusotom_lcd 37DE                              ___wmul@multiplicand 001A  
                                _timer0ReloadVal 004E                                     __CFG_CP0$OFF 000000  
                                   __CFG_CP1$OFF 000000                                     __CFG_CP2$OFF 000000  
                                   __CFG_CP3$OFF 000000                                      __CFG_LVP$ON 000000  
                                            l350 4E66                                              l195 4988  
                                            _CMD 01CB                                              l991 0F40  
                                   __CFG_CPB$OFF 000000                                     __CFG_CPD$OFF 000000  
                                ?_conflict_check 0039                                    ?_display_text 0001  
                                _timer1ReloadVal 01EE                                              fsr1 000FE1  
                                            fsr2 000FD9                                              _str 01DF  
                      collect_column@data_column 003B                                     ___awmod@sign 0023  
                                            prod 000FF3                                 _LCD_16x2_DISPLAY 0116  
                                            tosl 000FFD                                              wreg 000FE8  
                                   get_dis_frq@i 003F                                             l1218 184E  
                                           l1407 3A50                                             l1901 3B0E  
                                           l1657 4620                                             l1667 48AA  
                                           l1943 46C0                                             l1962 4670  
                                           l1896 3A6A                                             l8001 1526  
                                           l7203 46DC                                             l8003 1540  
                                           l7213 46FA                                             l7205 46E4  
                                           l8013 1662                                             l8031 4D14  
                                           l7311 174C                                             l7303 170C  
                                           l7215 46FE                                             l8015 16A2  
                                           l7225 45EE                                             l7305 1712  
                                           l7209 46F4                                             l8017 16A6  
                                           l7227 45F6                                             l7315 17AC  
                                           l7323 1800                                             l7411 458E  
                                           l8043 40F2                                             l8131 4E12  
                                           l7181 4BCA                                             l7237 4616  
                                           l7229 45FA                                             l7253 48A0  
                                           l7245 4880                                             l7325 182A  
                                           l7317 17B2                                             l7413 4592  
                                           l9101 0C6E                                             l7421 4946  
                                           l8301 2878                                             l7247 4888  
                                           l7335 18BA                                             l9111 0CCA  
                                           l8055 4118                                             l8071 414A  
                                           l7503 47FE                                             l7431 49B8  
                                           l8143 4DF6                                             l8207 3574  
                                           l7191 47C2                                             l7177 4BBA  
                                           l7249 488C                                             l7345 1928  
                                           l7329 188E                                             l7337 18F0  
                                           l9105 0C72                                             l8057 4120  
                                           l8049 4102                                             l8209 3578  
                                           l8081 4B2A                                             l8233 266E  
                                           l9201 1084                                             l7371 19DA  
                                           l7347 192C                                             l8091 463C  
                                           l9123 0D00                                             l8171 4E20  
                                           l8075 4158                                             l8067 4140  
                                           l8059 4124                                             l7507 4806  
                                           l7515 481A                                             l7427 4962  
                                           l7443 49E2                                             l8155 4E04  
                                           l7187 47BA                                             l7275 4B96  
                                           l7611 214C                                             l8323 2E6C  
                                           l7381 1A8C                                             l7365 19AA  
                                           l7293 16D2                                             l8405 3D22  
                                           l8501 3F38                                             l9117 0CD4  
                                           l7437 49D6                                             l8085 4B40  
                                           l8261 2714                                             l8245 26D8  
                                           l8253 26EC                                             l7605 2048  
                                           l8333 2EF0                                             l9205 10A2  
                                           l7359 195E                                             l7383 1A94  
                                           l8511 3F7C                                             l7527 4B60  
                                           l8423 3BBC                                             l8415 3B7E  
                                           l8183 4E2E                                             l7439 49DC  
                                           l7711 4324                                             l7703 4304  
                                           l8271 27E0                                             l8263 2720  
                                           l8247 26DC                                             l7199 47D6  
                                           l7463 4450                                             l7551 227C  
                                           l7615 219E                                             l8351 2F72  
                                           l9223 1144                                             l9151 0E54  
                                           l9143 0DD0                                             l8601 39D2  
                                           l7377 1A62                                             l7369 19D4  
                                           l7385 1AAE                                             l8505 3F6C  
                                           l8513 3F80                                             l7529 4B68  
                                           l8409 3B2A                                             l8097 4684  
                                           l8089 4634                                             l9073 0C52  
                                           l9081 0C5A                                             l7705 430C  
                                           l7473 453E                                             l8273 27E6  
                                           l8249 26E8                                             l7449 4D64  
                                           l7465 445A                                             l7457 4428  
                                           l7609 20F4                                             l8345 2F22  
                                           l8361 2FAE                                             l9209 10C0  
                                           l9161 0EC0                                             l8531 3D5A  
                                           l7723 4346                                             l8099 468C  
                                           l7483 4976                                             l7707 4310  
                                           l7715 432E                                             l8275 280E  
                                           l7571 248C                                             l7555 2296  
                                           l7547 2262                                             l7651 367E  
                                           l8339 2EF4                                             l8371 301C  
                                           l9251 1232                                             l9147 0E12  
                                           l9139 0D92                                             l9403 1D12  
                                           l8605 39E4                                             l8453 3E2C  
                                           l8445 3DF4                                             l9069 0C4E  
                                           l9077 0C56                                             l9085 0C5E  
                                           l9093 0C66                                             l8701 0160  
                                           l7741 4C68                                             l8189 3456  
                                           l7901 2D8A                                             l7477 4552  
                                           l8277 2814                                             l7805 289C  
                                           l7469 446A                                             l7653 3698  
                                           l7637 3606                                             l7661 36BC  
                                           l8349 2F6C                                             l9181 0FEC  
                                           l9173 0F88                                             l8621 38BE  
                                           l8607 3A1A                                             l8391 3CAC  
                                           l8455 3E30                                             l8439 441A  
                                           l7495 49AA                                             l8199 34F8  
                                           l7903 2D8E                                             l7719 433C  
                                           l7823 2998                                             l7575 24D8  
                                           l7567 23DE                                             l7559 22B0  
                                           l7591 1EC8                                             l8359 2FA8  
                                           l9263 129A                                             l9239 11CA  
                                           l9167 0F24                                             l8631 3972  
                                           l9271 3E84                                             l9415 1D98  
                                           l9407 1D3A                                             l9343 1AE8  
                                           l8609 3A1E                                             l8545 3DD0  
                                           l8537 3D90                                             l8449 3E28  
                                           l8481 4004                                             l7729 4378  
                                           l9089 0C62                                             l9097 0C6A  
                                           l7497 49AE                                             l7737 4C56  
                                           l8297 2874                                             l8289 285E  
                                           l9177 0FBA                                             l9169 0F56  
                                           l8625 391E                                             l9433 1E56  
                                           l9425 1DFC                                             l9337 1ACC  
                                           l8571 3B02                                             l8563 3ABC  
                                           l8555 3A7C                                             l8731 0248  
                                           l8715 01CE                                             l7835 2A4C  
                                           l7851 2B08                                             l7595 1EE2  
                                           l7587 1EAE                                             l9195 1050  
                                           l9283 3F18                                             l9371 1BB8  
                                           l9363 1B84                                             l8397 3CE2  
                                           l8469 3E72                                             l8477 3FD0  
                                           l7845 2AFA                                             l7837 2A54  
                                           l9197 1066                                             l8629 396A  
                                           l9277 3EBE                                             l9357 1B40  
                                           l9365 1B8A                                             l9349 1B06  
                                           l9445 1E76                                             l8591 3992  
                                           l8487 4014                                             l8583 4752  
                                           l7695 42EA                                             l7943 3706  
                                           l7679 41D6                                             l7599 1EFC  
                                           l9279 3EE8                                             l9439 1E68  
                                           l9447 1E8C                                             l8489 4018  
                                           l8577 4716                                             l8825 0522  
                                           l8833 052A                                             l7953 3766  
                                           l7945 3710                                             l7849 2B02  
                                           l9385 1C4A                                             l8659 4A94  
                                           l8579 471E                                             l7875 2C24  
                                           l7859 2B44                                             l7699 42F6  
                                           l7955 378E                                             l7963 37BA  
                                           l9571 4092                                             l8669 4ABA  
                                           l8589 398E                                             l8829 0526  
                                           l8837 052E                                             l9581 40B2  
                                           l8951 08C2                                             l8783 03DC  
                                           l7887 2CD8                                             l7959 3794  
                                           l7991 1426                                             l9591 40CC  
                                           l8881 0676                                             l8769 036E  
                                           l8697 015C                                             l7897 2D84  
                                           l7889 2CDE                                             l9577 40AA  
                                           l8955 08C6                                             l8963 08CE  
                                           l8971 08D6                                             l7979 130C  
                                           l8877 0672                                             l8885 067A  
                                           l7989 140C                 __size_of_clear_display_structure 001E  
                                           l8959 08CA                                             l8967 08D2  
                                           l8975 08DA                                             STR_1 FF6A  
                                           STR_2 FF61                                             l8889 067E  
                                           STR_3 FDE7                                             STR_4 FE0A  
                                           STR_5 FFE6                                             STR_6 FD09  
                                           l8989 0934                                             STR_7 FD3D  
                                           STR_8 FD23                                             STR_9 FD3D  
                                           _LATA 000F89                                             _LATB 000F8A  
                                           _LATC 000F8B                                             _LATD 000F8C  
                                           _LATE 000F8D                                             u7300 4368  
                                           u6430 4E48                                             u7320 43A6  
                                           u7307 435E                                             i2l60 004E  
                                           i2l62 005E                                             u7350 28B6  
                                           u7327 439C                                             u6640 17AA  
                                           u6608 1706                                             u8320 38E0  
                                           i2l66 006A                                             u6650 17EC  
                                           u6810 4E60                          _TMR1_HasOverflowOccured 4E58  
                                           u6660 1822                                             u6820 45B4  
                                           u6638 1778                                             u8350 395A  
                                           u6647 17A0                                             u8327 38D6  
                                           u6657 17E2                                             u8345 3918  
                                           u6667 1818                                             u6827 45AA  
                                           u8347 390E                                             u8357 3950  
                                           u9350 1BA0                                             u6768 1996  
                                           u9280 3F12                                             u6698 187A  
                                           u9371 1C62                                             u6788 1A4E  
                                           u9287 3F08                                             u7990 2F42  
                                           _TMR1 000FCE                                             _TMR5 000F4F  
                                           _WPUB 000F61                                    _EUSART1_Write 4974  
                                  _EUSART2_Write 4E64                                    ?_make_display 0001  
                                           _atoi 398C                                             _main 4052  
                                           _rand 44D6                                    ?_EUSART1_Read 0001  
                                _TMR0_StartTimer 4EC4                                             fsr0h 000FEA  
                                           fsr1h 000FE2                                             fsr2h 000FDA  
                                           fsr0l 000FE9                                             indf1 000FE7  
                                           indf2 000FDF                                             fsr1l 000FE1  
                                           fsr2l 000FD9                                             btemp 0050  
                                           _puts 4D88                                    __CFG_BORV$190 000000  
                          ??_get_over_write_data 003D                                             prodh 000FF4  
                                           prodl 000FF3                                             start 00A6  
                                _timer5ReloadVal 01F0                                    __CFG_IESO$OFF 000000  
                           __end_of_clcd_max_col 4E32                             __end_of_clcd_max_row 4E24  
                                  ?_console_init 0001                                     ___param_bank 000000  
                                   collect_row@i 003E                                     get_new_uid@i 002B  
                  set_string_data@conflict_count 0069                          __end_of_TMR0_Initialize 4A24  
                 ??_TMR0_DefaultInterruptHandler 0001                   __size_of_OSCILLATOR_Initialize 000E  
                  __end_of_OSCILLATOR_Initialize 4E40                                      make_array@i 011D  
                                          ?_atoi 001E                                            ?_main 0001  
                          conflict@conflict_bool 003D                                            ?_rand 001C  
                                __end_of___awdiv 4162                                   ??_display_text 001B  
                                          STR_10 FD23                                            STR_11 FD89  
                                          STR_12 FD09                                            STR_20 FC67  
                                          STR_13 FDBE                                            STR_21 FE3B  
                                          STR_14 FDBE                                            STR_22 FFDC  
                                          STR_30 FD9D                                            STR_23 FF96  
                                          STR_15 FFE1                                            STR_31 FDD5  
                                          STR_16 FFE1                                            STR_40 FFD7  
                                          STR_32 FEA6                                            STR_24 FDB0  
                                          STR_41 FFA0                                            STR_33 FE82  
                                          STR_25 FE2B                                            STR_17 FC8E  
                                          STR_42 FF99                                            STR_50 FF83  
                                          STR_34 FF7B                                            STR_18 FE5A  
                                          STR_26 FE1B                                            STR_43 FFA0  
                                          STR_35 FFA0                                            STR_51 FF19  
                                          STR_27 FEB2                                            STR_19 FCB5  
                                          STR_52 FFA0                                            STR_36 FFEB  
                                          STR_44 FFBB                                            STR_28 FE8E  
                                          STR_60 FCEE                                  __end_of___awmod 4346  
                                          STR_61 FFA0                                            STR_37 FFEF  
                                          STR_45 FFC7                                            STR_53 FF22  
                                          STR_29 FDF9                                            STR_54 FFA0  
                                          STR_38 FFB5                                            STR_70 FF4F  
                                          STR_46 FEBE                                            STR_62 FCD3  
                                          STR_63 FFA0                                            STR_47 FFA0  
                                          STR_71 FFFD                                            STR_39 FF73  
                                          STR_55 FF2B                                            STR_80 FF04  
                                          STR_48 FEBE                                            STR_56 FFA7  
                                          STR_72 FF0F                                            STR_64 FD70  
                                          STR_81 FD57                                            STR_73 FFA0  
                                          STR_65 FFA0                                            STR_57 FFA0  
                                          STR_49 FFA0                                            STR_74 FCEE  
                                          STR_82 FFA0                                            STR_90 FF46  
                                          STR_66 FF04                                            STR_58 FE76  
                                          STR_83 FFA0                                            STR_75 FFA0  
                                          STR_59 FFA0                                            STR_91 FFF7  
                                          STR_67 FD57                                            STR_76 FCD3  
                                          STR_84 FFA0                                            STR_92 FFEB  
                                          STR_68 FFAE                                            STR_77 FFA0  
                                          STR_85 FFF3                                            STR_69 FFD2  
                                          STR_93 FF3D                                            STR_78 FD70  
                                          STR_94 FFF7                                            STR_86 FFF3  
                                          STR_87 FF38                                            STR_79 FFA0  
                                          STR_95 FFEF                                            STR_88 FF38  
                                          STR_96 FF3D                                            STR_89 FFB5  
                                          STR_97 FFF7                                            STR_98 FFD7  
                                          STR_99 FF41                                  _TMR1_StartTimer 4EC0  
                                          ?_puts 0014                                            _T0CON 000FD5  
                                ___awdiv@divisor 0012                                            _T1CON 000FCD  
                                          _T5CON 000F4E                                   __CFG_DEBUG$OFF 000000  
                                __end_of___lwdiv 462A                                  ??_get_direction 003D  
                                          i2l201 4B24                                  __end_of___lwmod 48B4  
                                ___awdiv@counter 0014                      __size_of_print_conflict_ids 0150  
                                          _TMR0H 000FD7                                            _TMR1H 000FCF  
                                          _TMR0L 000FD6                                            _TMR1L 000FCE  
                                          _TMR5H 000F50                                            _TMR5L 000F4F  
                                          _PORTC 000F82                                            _PORTD 000F83  
                                __end_of__doprnt 1AB8                                            _TRISA 000F92  
                                          _TRISB 000F93                                            _TRISC 000F94  
                                          _TRISD 000F95                                            _TRISE 000F96  
                      __size_of_init_CLCD_config 00B4                __size_of_TMR0_SetInterruptHandler 000A  
                                  __CFG_WRT0$OFF 000000                                    __CFG_WRT1$OFF 000000  
                                  __CFG_WRT2$OFF 000000                              ___lmul@multiplicand 0014  
                      ?_TMR0_SetInterruptHandler 0010                                    __CFG_WRT3$OFF 000000  
                           _EUSART1_Transmit_ISR 4AF6                                   __CFG_EBTR0$OFF 000000  
                                 __CFG_FCMEN$OFF 000000                                   __CFG_EBTR1$OFF 000000  
                                 __CFG_EBTR2$OFF 000000                                   __CFG_EBTR3$OFF 000000  
                               __end_of_TMR0_ISR 4DDE                                  __end_of_get_uid 3BCE  
                                  __CFG_WRTB$OFF 000000                                    __CFG_WRTC$OFF 000000  
                                __end_of_get_str 441E                                    __CFG_WRTD$OFF 000000  
                                          _check 0118                                   __CFG_EBTRB$OFF 000000  
                                          _delay 46CA                                  __end_of_dpowers FC67  
                        __end_of_max_display_str 4E16                                  __end_of_is_busy 4BB0  
                                          _cputs 4B28                                  __end_of_isdigit 4D1C  
                                          _randx 01DA                               __CFG_MCLRE$EXTMCLR 000000  
                                          atoi@a 0023                                            _srand 4DAE  
                                          atoi@s 001E                                            _putch 4E90  
                        __size_of_clear_cmd_data 0032                                   ?_EUSART1_Write 0001  
                        __end_of_TMR1_Initialize 4D3A                                   ?_EUSART2_Write 0001  
                                          pclath 000FFA                                   ??_make_display 003A  
                                          tablat 000FF5                     cmd_consol_task@temp_uart_str 0500  
                                 ??_EUSART1_Read 0010                                            puts@s 0014  
                                          status 000FD8                                  __end_of_sprintf 4872  
                                 __CFG_HFOFST$ON 000000                                  __end_of_strcspn 46CA  
                                __end_of_strncmp 398C                                  __end_of_strncpy 447C  
                           _scroll_right_to_left 1E92                                   __CFG_PBADEN$ON 000000  
                       scroll_right_to_left@line 0039                                  _TMR5_Initialize 4C2E  
                                 ??_console_init 002C                                  __initialization 41E2  
                                 get_dis_frq@frq 003E                                   get_dis_frq@str 0039  
                                   __end_of_atoi 3A5A                       __end_of_EUSART1_Initialize 4A90  
                                   __end_of_main 40DE                                     __end_of_rand 452E  
                                   __end_of_puts 4D9C                           ?_init_clcd_cusotom_lcd 0039  
                                 get_direction@i 003E                      __end_of_copy_display_struct 3250  
                    ?_INTERRUPT_InterruptManager 0001                    __size_of_scroll_left_to_right 0340  
                               _cmd_consol_state 011A                                           ??_atoi 0020  
                                         ??_main 0041                                           ??_rand 001E  
                                         ??_puts 0016                                 ??_write_lcd_data 0017  
                                  __activetblptr 000003                                   __CFG_PLLCFG$ON 000000  
                            collect_row@data_row 003B                                    __delay_MS@val 0013  
                          ?_EUSART1_Transmit_ISR 0001                        ??_TMR1_HasOverflowOccured 0010  
                                reply_to_host@ch 0071                                           ?_delay 0010  
                        __end_of_TMR0_StartTimer 4EC8                       __end_of_EUSART2_Initialize 4D88  
                                         ?_cputs 0012                                           STR_100 FFF7  
                                         STR_101 FFBB                                           STR_110 FEEE  
                                         STR_102 FEF9                                           STR_103 FDBE  
                                         STR_111 FF83                                           STR_120 FF41  
                                         STR_112 FFA7                                           STR_104 FEEE  
                                         STR_113 FEEE                                           STR_105 FFBB  
                                         STR_121 FEE2                                           STR_130 FF34  
                                         STR_122 FF41                                           STR_114 FFA7  
                                         STR_106 FFC7                                           STR_131 FF34  
                                         STR_107 FEEE                                           STR_115 FFAE  
                                         STR_123 FECA                                           STR_132 FF34  
                                         STR_140 FF41                                           STR_124 FF41  
                                         STR_116 FF41                                           STR_108 FFC7  
                                         STR_133 FF96                                           STR_141 FFCD  
                                         STR_109 FF83                                           STR_117 FFC1  
                                         STR_125 FE4B                                           STR_118 FEEE  
                                         STR_142 FF41                                           STR_126 FFD2  
                                         STR_134 FFFA                                           STR_150 FF8B  
                                         STR_143 FF41                                           STR_127 FF41  
                                         STR_119 FFAE                                           STR_135 FFFA  
                                         STR_144 FF58                                           STR_136 FED6  
                                         STR_128 FE69                                           STR_145 FF92  
                                         STR_129 FF34                                           STR_137 FE9A  
                                         STR_138 FF99                                           STR_146 FF41  
                                         STR_147 FFC1                                           STR_139 FFCD  
                                         STR_148 FF92                                           STR_149 FDC3  
                               ___awdiv@dividend 0010                                           ?_srand 0010  
                                         _ANSELA 000F38                                           ?_putch 0001  
                                         _ANSELB 000F39                                           _ANSELC 000F3A  
                                         _ANSELD 000F3B                                           _ANSELE 000F3C  
                                         _T1GCON 000FCC                                           _T5GCON 000F4D  
                       __size_of_cmd_consol_task 03DA                                   __CFG_WDTEN$OFF 000000  
                                         i2l6831 4C04                                           i2l6823 4BE4  
                                         i2l6817 4B1E                                           _RCREG1 000FAE  
                                         _RCREG2 000F74                                           _RCSTA1 000FAB  
                                         _RCSTA2 000F71                                           _OSCCON 000FD3  
                                         _SPBRG1 000FAF                                           _SPBRG2 000F75  
                                         _TXREG1 000FAD                                           _TXREG2 000F73  
                          ?_scroll_right_to_left 002C                                           _TXSTA1 000FAC  
                                         _TXSTA2 000F72                           __size_of_max_uid_range 000E  
                            _clear_display_array 4C9C                                   __CFG_XINST$OFF 000000  
                              collect_column@str 0039                             __size_of_get_dis_frq 0098  
                               __end_of_conflict 2DAC                                           ___lmul 452E  
                        __end_of_TMR1_StartTimer 4EC4                                     ?_TMR1_Reload 0001  
                                         ___wmul 4C08                                        ??___awdiv 0014  
                                 __CFG_STVREN$ON 000000                                        ??___awmod 0022  
                                      ??___lwdiv 0014                             __size_of_collect_row 00AE  
                                      ??___lwmod 001B                             __size_of_get_new_uid 0106  
                                _set_string_data 2586                                        ??__doprnt 0022  
                                         _memcpy 4934                                 ?_TMR0_Initialize 0001  
                                   ?_TMR5_Reload 0001                                           _memset 4BB0  
                                         delay@i 0015                                           clear_0 420A  
                                         clear_1 421C                                           clear_2 4228  
                                         clear_3 4234                                           clear_4 4240  
                                         clear_5 4250                                 ___awdiv@quotient 0016  
                                ___awmod@divisor 0020                                     __doprnt@flag 0024  
                                ___awmod@counter 0022                                           _printf 4A24  
                                   __doprnt@prec 0025                                           _strchr 4346  
                                         _strcmp 4714                     scroll_off@display_char_count 002D  
                                      ??_get_uid 0028                                           _strcpy 4B56  
                                         _strlen 4584                                __delay_10uS@delay 0010  
                                      ??_get_str 0030                                           _strtok 3A5A  
                                         _strspn 462A                                           _strstr 3E82  
                                _TMR5_StartTimer 4EB2                                           cputs@s 0012  
                       ?_TMR5_HasOverflowOccured 0001                                        ??_is_busy 0017  
                                      ??_isdigit 0010                             ?_clear_display_array 0001  
                                   __mediumconst FC5C                                           tblptrh 000FF7  
                                         tblptrl 000FF6                                           tblptru 000FF8  
                                         srand@x 0010                            __end_of_TMR0_CallBack 4C9C  
                                ??_EUSART1_Write 0010                          _clear_display_structure 4CE0  
                                ??_EUSART2_Write 0010         TMR0_SetInterruptHandler@InterruptHandler 0010  
                                      ??_sprintf 0031                                 ?_max_display_str 0001  
                                      ??_strcspn 001A                                  _eusart1RxBuffer 0200  
                    __end_of_max_display_support 4E86                                        ??_strncmp 002A  
                                      ??_strncpy 0016                    __size_of_INTERRUPT_Initialize 0004  
                               ??_collect_column 003D                                  _eusart1TxBuffer 0100  
                               ?_TMR1_Initialize 0001                          __end_of_TMR5_Initialize 4C54  
                ??_reset_display_structure_count 002C                                _SYSTEM_Initialize 4CBE  
                          __size_of_clcd_max_col 000E                                       __accesstop 0060  
                          __size_of_clcd_max_row 000E                          __end_of__initialization 4256  
                             __size_of__delay_MS 0044  scroll_left_to_right@clcd_display_string_details 002C  
                             ?_SYSTEM_Initialize 0001                             __end_of_display_text 41E2  
                                  ___rparam_used 000001              __size_of_clcd_display_string_config 005A  
                                 __pcstackCOMRAM 0001                                _put_string_usart1 4C54  
                                   __pidataBANK1 4D9C                             cmd_consol_task@F7537 0400  
                            ??_SYSTEM_Initialize 0014                                        ?_TMR0_ISR 0001  
                                  __end_of_delay 4714                                 ??_conflict_check 003B  
                                  __end_of_cputs 4B56                             cmd_consol_task@_2134 0110  
                           _display_struct_count 010C                               ?_put_string_usart1 0011  
                                  __end_of_srand 4DBE                                    __end_of_putch 4E9A  
                            get_dis_frq@data_frq 003B                             __end_of_make_display 16D0  
                           __end_of_EUSART1_Read 4AC4                                   collect_row@row 0040  
                                 collect_row@str 0039                       __end_of_update_string_data 3020  
                         __size_of_write_lcd_cmd 0040                           ??_EUSART1_Transmit_ISR 0001  
                          __end_of_reply_to_host 12DE                            ??_clear_display_array 002C  
                update_string_data@exist_uid_idx 0068                                 _init_CLCD_config 3BCE  
                            ??_put_string_usart1 0013                                   get_new_uid@uid 0029  
                                  _max_uid_range 4DFA                           __size_of_min_uid_range 000E  
                    __end_of_EUSART1_Receive_ISR 4C08                                     _clcd_max_col 4E24  
                                   _clcd_max_row 4E16                             __end_of_console_init 42D6  
                                        ??_delay 0012                                       __doprnt@ap 0020  
                                     __doprnt@cp 0028                                       __doprnt@pb 001C  
                               ?_TMR0_StartTimer 0001                                          ??_cputs 0014  
                      __end_of_SYSTEM_Initialize 4CE0                                   _clear_cmd_data 4AC4  
                                        ??_srand 0012                                          ??_putch 0011  
                                  _eusart1RxHead 0045                                    _eusart1TxHead 0047  
                             __size_of_copy_data 01F4                                    _eusart1RxTail 0046  
                                     __pbssBANK0 0075                                       __pbssBANK1 0100  
                                     __pbssBANK2 0200                                       __pbssBANK3 0300  
                                     __pbssBANK4 0400                                    _eusart1TxTail 0048  
                         ??_scroll_right_to_left 002E                                       _data_count 0043  
                                     __pnvCOMRAM 004E                          __end_of_set_string_data 287C  
          scroll_off@clcd_display_string_details 0024                        __end_of_put_string_usart1 4C78  
                              ??_cmd_consol_task 0073                                    ??__delay_10uS 0012  
                             __CFG_CCP2MX$PORTC1 000000                 __end_of_TMR0_SetInterruptHandler 4EA4  
                        __size_of_TMR0_StopTimer 0004                                          ?___lmul 0010  
                                        ?___wmul 0018                                 ?_TMR1_StartTimer 0001  
                                     ??_TMR0_ISR 0002                          __end_of_TMR5_StartTimer 4EB8  
                             __CFG_CCP3MX$PORTB5 000000                  ??_char_enter_mode_left_to_right 0018  
                __end_of_TMR5_HasOverflowOccured 4E4C                                          ?_memcpy 0010  
                                        ?_memset 0024                                   ___lmul@product 0018  
                    get_direction@data_direction 003B                                          ?_printf 002B  
                                        ?_strchr 0010                                          ?_strcmp 0010  
                                        ?_strcpy 0024                                          ?_strlen 001E  
                                     _heart_beat 4D3A                          __size_of_TMR1_StopTimer 0004  
                                        ?_strtok 001D                                          ?_strspn 0016  
                                        ?_strstr 002D                                __end_of__delay_MS 4830  
                                 ?_max_uid_range 0001                        ??_clear_display_structure 002C  
                                        _OSCCON2 000FD2                           __end_of_clear_cmd_data 4AF6  
                                        _OSCTUNE 000F9B                                          _SPBRGH1 000FB0  
                                        _SPBRGH2 000F76                           copy_data@clcd_str_data 0039  
                                      ?_conflict 0039                                 write_lcd_cmd@cmd 0017  
                    __end_of_get_over_write_data 3FBA                                 _print_data_ready 010E  
                                     _make_array 4E70                           __size_of_parse_cmd_str 0C82  
                               ?_TMR5_Initialize 0001                                    _write_lcd_cmd 48B4  
                                     _main_state 011C                                  __CFG_PWRTEN$OFF 000000  
                             __size_of_write_str 003A            __end_of_reset_display_structure_count 4DCE  
         __size_of_reset_display_structure_count 0010                    _reset_display_structure_count 4DBE  
                                        __Hparam 0000                          ??_init_clcd_cusotom_lcd 003A  
                                  _min_uid_range 4DEC                             reply_to_host@ch_2113 0072  
                                        __Lparam 0000  scroll_right_to_left@clcd_display_string_details 002C  
                       set_string_data@end_point 0067                                          ___awdiv 40DE  
                                __size_of___lmul 0056                                          ___awmod 42D6  
                                __size_of___wmul 0026                                          ___lwdiv 45D8  
                                        ___lwmod 4872               __end_of_clcd_display_string_config 44D6  
                     _clcd_display_string_config 447C                                    copy_data@data 003B  
                              __end_of_copy_data 3444                                          __doprnt 16D0  
                           __size_of_TMR1_Reload 000C                                          __pcinit 41E2  
                                __size_of_memcpy 0040                       __end_of_print_conflict_ids 3594  
                                __size_of_memset 002C                                          __ramtop 1000  
                            __end_of__delay_10uS 47EC                                          __ptext0 4052  
                                        __ptext1 4260                                          __ptext2 1AB8  
                                        __ptext3 3E82                                          __ptext4 38BC  
                                        __ptext5 0D2C                                          __ptext6 2DAC  
                                        __ptext7 12DE                                          __ptext8 1E92  
                                        __ptext9 3594                                  __size_of_printf 0036  
                           get_over_write_data@i 003F                                          _get_uid 3B18  
                                        _display 011B                                          _get_str 43B6  
                                      _T0CONbits 000FD5                          __size_of_TMR5_StopTimer 0006  
                                __size_of_strchr 0070                             __size_of_TMR5_Reload 000E  
                                __size_of_strcmp 004A                                  __size_of_strcpy 002E  
                                __size_of_strlen 0054                                        _T1CONbits 000FCD  
                                __size_of_strtok 00BE                                  __size_of_strspn 0050  
                                __size_of_strstr 00A0                                          _dpowers FC5D  
                          _OSCILLATOR_Initialize 4E32                                       delay@delay 0010  
                                        _is_busy 4B84                                          _isdigit 4CFE  
                               ___awmod@dividend 001E                            __end_of_get_direction 3E82  
                             _EUSART1_Initialize 4A5A                         ??_PIN_MANAGER_Initialize 0010  
                                      _T5CONbits 000F4E                                  ?_clear_cmd_data 0001  
                                        _out_str 0240                       __size_of_SYSTEM_Initialize 0022  
                                        _sprintf 4830                                          main@res 0074  
                                     ??_conflict 003A                                          _strcspn 467A  
                                        _strncmp 38BC                                          _strncpy 441E  
                          __size_of_display_text 0080                             end_of_initialization 4256  
                   __end_of_scroll_left_to_right 2586                              ?_EUSART1_Initialize 0001  
                                        memcpy@d 0016                                          memcpy@n 0014  
                                        memcpy@s 0018                                   ?_write_lcd_cmd 0001  
                                    scroll_off@i 0031                                      scroll_off@j 002F  
                                    scroll_off@k 002A                                          memset@c 0026  
                                        memset@n 0028                                          memset@p 002A  
                               cmd_consol_task@i 0112                                   ?_min_uid_range 0001  
                __end_of_clear_display_structure 4CFE                                 ?_set_string_data 0060  
                     __size_of_put_string_usart1 0024                                       _reset_clcd 4E86  
                             _EUSART2_Initialize 4D72                                       _set_cursor 4D58  
                                        printf@f 002B                            __size_of_make_display 03F2  
                                     _scroll_off 3594                                          postdec1 000FE5  
                                        postdec2 000FDD                                          postinc0 000FEE  
                                        postinc1 000FE6                                          postinc2 000FDE  
                          __size_of_EUSART1_Read 0034                                     _conflict_arr 01A3  
                               ?_TMR5_StartTimer 0001                      conflict_check@conflict_bool 0061  
                           ??_EUSART1_Initialize 0010                                          strcmp@r 0015  
                                  _parse_cmd_str 00AA                              ?_EUSART2_Initialize 0001  
                                        strlen@s 001E                                  ??_max_uid_range 0010  
                                        strspn@i 001B                         _TMR0_SetInterruptHandler 4E9A  
                                      _PORTAbits 000F80                                        _PORTCbits 000F82  
                          __size_of_console_init 0076                                      ?_heart_beat 0001  
                          _TMR5_InterruptHandler 010A            __end_of_char_enter_mode_left_to_right 4EAC  
         __size_of_char_enter_mode_left_to_right 0008                    _char_enter_mode_left_to_right 4EA4  
                                   _display_text 4162                                __end_of_write_str 49EC  
                   __size_of_copy_display_struct 0230                                        _TRISCbits 000F94  
             init_clcd_cusotom_lcd@clcd_init_col 0039                               write_lcd_data@data 0017  
             init_clcd_cusotom_lcd@clcd_init_row 003A                              EUSART1_Write@txData 0010  
                           ??_EUSART2_Initialize 0010                                      ?_make_array 0001  
               __size_of_TMR5_HasOverflowOccured 000C                                       get_uid@uid 002C  
                                   _make_display 12DE                                       get_uid@str 0024  
                                  ??_get_dis_frq 003D                                     _EUSART1_Read 4A90  
                                     get_str@str 002C                         __end_of_init_CLCD_config 3C82  
                                  ??_collect_row 003D                                    ??_get_new_uid 0026  
                              _lcd_display_array 011E                                      __delay_10uS 47A8  
                                 _TMR0_StopTimer 4EBC                                     _console_init 4260  
                              make_display@count 003D                     __end_of_INTERRUPT_Initialize 4ECC  
                                   write_str@str 0018                                   ?_parse_cmd_str 0060  
                 ?_reset_display_structure_count 0001                                   __end_of___lmul 4584  
                                 __end_of___wmul 4C2E                                  collect_column@i 003E  
                              __size_of_TMR0_ISR 0010                                   _TMR1_StopTimer 4EB8  
                                 __end_of_memcpy 4974                           ?_OSCILLATOR_Initialize 0001  
                                 __end_of_memset 4BDC                                  __delay_10uS@val 0013  
                       ?_TMR1_HasOverflowOccured 0001                                   __end_of_printf 4A5A  
                                 __end_of_strchr 43B6                                   __end_of_strcmp 475E  
                                 __end_of_strcpy 4B84                                   __end_of_strlen 45D8  
                                 __end_of_strtok 3B18                                   __end_of_strspn 467A  
                                 __end_of_strstr 3F22                            conflict@new_end_point 0039  
                            start_initialization 41E2                             set_cursor@col_number 0018  
                        conflict@new_start_point 003E                         __size_of_TMR0_Initialize 0038  
                __size_of_PIN_MANAGER_Initialize 004A                                  get_uid@data_uid 0026  
                                _cmd_consol_task 1AB8                                 get_direction@str 0039  
                                    putch@txData 0011                                  ??_write_lcd_cmd 0017  
                          __end_of_EUSART1_Write 49B2                            __end_of_EUSART2_Write 4E70  
                        __size_of_write_lcd_data 0040                             collect_column@column 0040  
                             _update_string_data 2DAC                                  ??_min_uid_range 0010  
                            __size_of_heart_beat 001E                           __end_of_TMR0_StopTimer 4EC0  
                   __size_of_max_display_support 000A                         __size_of_max_display_str 000E  
                                    ?_reset_clcd 0001                              ?_update_string_data 003F  
                                  _clcd_init_col 0119                         __size_of_TMR1_Initialize 001E  
                                    ?_set_cursor 0018                                    _clcd_init_row 0041  
                                    ?_scroll_off 0024                                         ??___lmul 0018  
                                       ??___wmul 001C                              __end_of_get_dis_frq 4052  
                         __size_of_TMR0_CallBack 0024                                      __doprnt@val 0026  
                         __end_of_TMR1_StopTimer 4EBC                                      __pdataBANK1 01DA  
                    __end_of_clear_display_array 4CBE                                         ??_memcpy 0016  
                                       ??_memset 002A                              update_string_data@i 006B  
                           _scroll_left_to_right 2246                                   scroll_off@line 002C  
                            __end_of_collect_row 3D30                              __end_of_get_new_uid 37DE  
                            __size_of_make_array 000C                                         ??_printf 0033  
                                 _TMR5_StopTimer 4EAC                                         ??_strchr 0014  
                                       ??_strcmp 0014                                         ??_strcpy 0028  
                                       ??_strlen 0020                                         ??_strtok 0021  
                                       ??_strspn 001A                                   _eusart1RxCount 0044  
                                       ??_strstr 0031                     ??_clcd_display_string_config 0039  
                                    __pbssBIGRAM 0599                                      __pbssCOMRAM 0041  
                           ??_update_string_data 0064                    __size_of_EUSART1_Transmit_ISR 0032  
                                  __pcstackBANK0 0060                                    __pcstackBANK5 0500  
                                __delay_MS@delay 0010                                        __delay_MS 47EC  
                 ?_char_enter_mode_left_to_right 0001                                     _isdigit$2569 0011  
                            EUSART2_Write@txData 0010                     __size_of_EUSART1_Receive_ISR 002C  
                              __size_of_conflict 0280                                        __doprnt@c 002A  
                                      __doprnt@f 001E                            _TMR0_InterruptHandler 01EC  
                                      __pnvBANK1 01EC                    __size_of_scroll_right_to_left 03B4  
                       __size_of_TMR0_StartTimer 0004                                  ?_TMR0_StopTimer 0001  
                         __size_of_reply_to_host 05B2                                 ___lwdiv@dividend 0010  
                         _PIN_MANAGER_Initialize 475E                                  conflict_check@i 0062  
                                ??_parse_cmd_str 0041                   __size_of_init_clcd_cusotom_lcd 00DE  
                                      __pintcode 0008                          __size_of_collect_column 00AE  
                  __end_of_init_clcd_cusotom_lcd 38BC                                    __pmediumconst FC5C  
                                       ?___awdiv 0010                                        __ptext101 4DCE  
                                      __ptext102 4C78                                        __ptext103 4ECC  
                                      __ptext104 4E70                                        __ptext105 4D3A  
                                      __ptext106 4AF6                                        __ptext107 4BDC  
                                      __ptext108 0000                                         ?___awmod 001E  
                                       ?___lwdiv 0010                                         ?___lwmod 0017  
                __end_of_TMR1_HasOverflowOccured 4E64                                  ?_TMR1_StopTimer 0001  
                         __end_of_TMR5_StopTimer 4EB2                      update_string_data@end_point 006A  
                          ?_scroll_left_to_right 002C                      ?_clcd_display_string_config 0001  
                                       ?__doprnt 001C               get_over_write_data@over_write_data 003B  
                   ??_INTERRUPT_InterruptManager 0002                                 __CFG_PRICLKEN$ON 000000  
                         get_over_write_data@str 0039                                 ??_clear_cmd_data 002C  
                              parse_cmd_str@temp 0066                                         ?_get_uid 0024  
                                       ?_get_str 002C                          __end_of_cmd_consol_task 1E92  
                                      _copy_data 3250                                         _BAUDCON1 000FB8  
                                       _BAUDCON2 000F70                                         ?_is_busy 0001  
                       __size_of_TMR1_StartTimer 0004                                         ?_isdigit 0001  
                        __size_of_conflict_check 02B0                              __size_of_reset_clcd 000A  
                                     ?__delay_MS 0010                       set_string_data@start_point 0066  
                               ___lwdiv@quotient 0015                                 _clcd_config_data 0049  
                                 __size_of_delay 004A                              __size_of_set_cursor 001A  
                                       ?_sprintf 002B                                   __size_of_cputs 002E  
                                  _TMR0_CallBack 4C78                                         ?_strcspn 0016  
                             _print_conflict_ids 3444                                         ?_strncmp 0024  
                            __size_of_scroll_off 0144                                         ?_strncpy 0010  
                                 __size_of_srand 0010                                   __size_of_putch 000A  
                           _INTERRUPT_Initialize 4EC8                    conflict_check@new_start_point 0039  
                           set_cursor@row_number 0019                          _TMR5_HasOverflowOccured 4E40  
                              ??_TMR0_Initialize 0012                              _conflict_data_count 0042  
               copy_display_struct@clcd_str_data 0039                                   ___wmul@product 001C  
                                       _LATEbits 000F8D                                      strncpy@from 0012  
                            ?_print_conflict_ids 0001                                      _get_dis_frq 3FBA  
                                       _PIE1bits 000F9D                                      strncpy@size 0014  
                   __size_of_get_over_write_data 0098                              _copy_display_struct 3020  
            __size_of_INTERRUPT_InterruptManager 009E                                        _valid_cmd 0075  
                     ??_TMR0_SetInterruptHandler 0012                                         _PIR1bits 000F9E  
                                       i2u522_48 4C88                                         _PIR3bits 000FA4  
                                       i2u449_40 4D42                                        _uid_count 01DE  
                                       _PIR5bits 000F7E                                         i2u449_46 4D44  
                                    _collect_row 3C82                                      _get_new_uid 36D8  
                       __size_of_TMR5_Initialize 0026                                         _RCONbits 000FD0  
                                  ??_TMR1_Reload 0010                                 __CFG_WDTPS$32768 000000  
                            parse_cmd_str@column 0065                                         _TMR0_ISR 4DCE  
                                  ??_TMR5_Reload 0010                                ??_max_display_str 0010  
                                ?_TMR5_StopTimer 0001                         ?_clear_display_structure 0001  
                              ??_TMR1_Initialize 0010                                     ??_heart_beat 0001  
                              ___wmul@multiplier 0018                             ??_print_conflict_ids 0039  
                                     ?_copy_data 0039                                        conflict@i 003F  
                                  _reply_to_host 0D2C                             ?_copy_display_struct 0039  
                                 ?_TMR0_CallBack 0001                                ___lmul@multiplier 0010  
                                    _INTCON2bits 000FF1                                        copy_data0 41F6  
                                      _write_str 49B2                            ?_INTERRUPT_Initialize 0001  
                                 _write_lcd_data 48F4                                     ??_make_array 0002  
                          EUSART1_Read@readValue 0010                           get_direction@direction 0040  
                             __end_of_heart_beat 4D58                                         __Hrparam 0000  
                       scroll_left_to_right@line 0036                                ?_init_CLCD_config 0001  
                  update_string_data@start_point 0069                                         __Lrparam 0000  
                                   ?__delay_10uS 0010                               __CFG_BOREN$SBORDIS 000000  
                         __size_of_get_direction 00A4                               ??_init_CLCD_config 0039  
                              __CFG_P2BMX$PORTD2 000000                           ??_scroll_left_to_right 002E  
                        ??_OSCILLATOR_Initialize 0010                                ??_TMR0_StartTimer 0010  
                                get_str@data_str 002E                                 __size_of___awdiv 0084  
                               __size_of___awmod 0070                      __size_of_EUSART1_Initialize 0036  
                               __size_of___lwdiv 0052                                 __size_of___lwmod 0042  
                       __size_of_set_string_data 02F6                                 __size_of__doprnt 03E8  
                    _clcd_display_string_details 0599                               __end_of_make_array 4E7C  
                            __end_of_TMR1_Reload 4E58                            _TMR1_InterruptHandler 0108  
                             cmd_consol_task@res 0596                               cmd_consol_task@val 0597  
                          __end_of_max_uid_range 4E08                                   ?_reply_to_host 0001  
                               __size_of_get_uid 00B6                                 ?_cmd_consol_task 0001  
                               __size_of_get_str 0068                            ??_copy_display_struct 003E  
                            _max_display_support 4E7C                         __size_of_TMR5_StartTimer 0006  
                            __end_of_TMR5_Reload 4DEC                                    ?_clcd_max_col 0001  
                               __size_of_is_busy 002C                                         _cmd_data 016E  
                                  ?_clcd_max_row 0001                                 __size_of_isdigit 001E  
                                ___lwdiv@divisor 0012                                      ??__delay_MS 0012  
                         __end_of_write_lcd_data 4934                                  ___lwdiv@counter 0014  
                      ??_TMR5_HasOverflowOccured 0010                                         __ptext10 2246  
                                       __ptext11 441E                                         __ptext20 3250  
                                       __ptext12 4162                                         __ptext21 287C  
                                       __ptext13 4D58                                       _T1GCONbits 000FCC  
                                       __ptext30 4D88                                         __ptext22 2586  
                                       __ptext14 4B84                                         __ptext31 4B28  
                                       __ptext23 36D8                                         __ptext15 47A8  
                                       __ptext40 37DE                                         __ptext32 3444  
                                       __ptext24 4DAE                                         __ptext16 4EAC  
                                       __ptext41 3BCE                                         __ptext33 4830  
                                       __ptext25 44D6                                         __ptext17 4DDE  
                                       __ptext50 46CA                                         __ptext42 48B4  
                                       __ptext34 4C54                                         __ptext26 452E  
                                       __ptext18 4E40                                         __ptext51 4934  
                                       __ptext43 4E86                                         __ptext35 4974  
                                       __ptext27 42D6                                         __ptext19 4EA4  
                                       __ptext60 3A5A                                         __ptext52 47EC  
                                       __ptext44 4C9C                                         __ptext36 4DEC  
                                       __ptext28 3020                                         __ptext61 462A  
                                       __ptext53 4EB8                                         __ptext45 4DBE  
                                       __ptext37 4DFA                                         __ptext29 2B2C  
                                       __ptext70 3DDE                                         __ptext62 467A  
                                       __ptext54 4E4C                                         __ptext46 4CE0  
                                       __ptext38 4E7C                                         __ptext71 3C82  
                                       __ptext63 4346                                         __ptext55 4E58  
                                       __ptext47 447C                                         __ptext39 4E08  
                                       __ptext80 4AC4                                         __ptext72 3D30  
                                       __ptext64 4714                                         __ptext56 40DE  
                                       __ptext48 49B2                                         __ptext81 4BB0  
                                       __ptext73 4584                                         __ptext65 3B18  
                                       __ptext57 4E16                                         __ptext49 48F4  
                                       __ptext90 4D1C                                         __ptext82 398C  
                                       __ptext74 4A24                                         __ptext66 43B6  
                                       __ptext58 4E24                                         __ptext91 4EC0  
                                       __ptext83 4CFE                                         __ptext75 16D0  
                                       __ptext67 4B56                                         __ptext59 00AA  
                                       __ptext92 49EC                                         __ptext84 4C08  
                                       __ptext76 4E90                                         __ptext68 3F22  
                                       __ptext93 4EC4                                         __ptext85 4A90  
                                       __ptext77 4E64                                         __ptext69 3FBA  
                                       __ptext94 4E9A                                         __ptext86 4EBC  
                                       __ptext78 4872                                         __ptext95 475E  
                                       __ptext87 4CBE                                         __ptext79 45D8  
                                       __ptext96 4E32                                         __ptext88 4C2E  
                                       __ptext97 4EC8                                         __ptext89 4EB2  
                                       __ptext98 4D72                                         __ptext99 4A5A  
                                     ?_write_str 0018                                         _conflict 2B2C  
                               parse_cmd_str@ptr 0062                                 parse_cmd_str@row 0064  
                               parse_cmd_str@str 0060                                ??_TMR1_StartTimer 0010  
                               __size_of_sprintf 0042                                 __size_of_strcspn 0050  
                               __size_of_strncmp 00D0                                 __size_of_strncpy 005E  
                    __size_of_EUSART2_Initialize 0016                                       strcpy@from 0026  
               __size_of_TMR1_HasOverflowOccured 000C                                    __size_of_atoi 00CE  
                                  __size_of_main 008C                                    __size_of_rand 0058  
                                     _T5GCONbits 000F4D                                    __size_of_puts 0014  
                                       delay@val 0013                                       strncmp@len 0028  
           __end_of_TMR0_DefaultInterruptHandler 4ECE            __size_of_TMR0_DefaultInterruptHandler 0002  
                   _TMR0_DefaultInterruptHandler 4ECC                             ?_max_display_support 0010  
                                   ??_reset_clcd 002C                                     ??_set_cursor 0019  
                                 _collect_column 3D30                                     ??_scroll_off 0026  
                                       _uart_str 0300                                         int$flags 0050  
                                       atoi@sign 0022               __end_of_INTERRUPT_InterruptManager 00A6  
                     _INTERRUPT_InterruptManager 0008                                         get_uid@i 002A  
                                       _str_data 02A4                              _EUSART1_Receive_ISR 4BDC  
                                     write_str@i 001A                                ??_TMR5_Initialize 0010  
                                    ??_copy_data 003D                                   ??_clcd_max_col 0010  
                                     _INTCONbits 000FF2                                   ??_clcd_max_row 0010  
                                ??_TMR0_CallBack 0002                                   _conflict_check 287C  
                                       memcpy@d1 0010                                         memcpy@s1 0012  
                                  _get_direction 3DDE                             put_string_usart1@str 0011  
                                       isdigit@c 0012                                  ?_write_lcd_data 0001  
                         ??_INTERRUPT_Initialize 0010                                         memset@p1 0024  
                             __end_of_reset_clcd 4E90                               __end_of_set_cursor 4D72  
                         update_string_data@data 003F                                cmd_consol_task@ch 0598  
                                       intlevel2 0000                               __end_of_scroll_off 36D8  
                                      sprintf@ap 0031                                        sprintf@pb 0033  
                               ??_TMR0_StopTimer 0010                                        sprintf@wh 002B  
                           ?_EUSART1_Receive_ISR 0001                                        strchr@chr 0012  
                          __end_of_write_lcd_cmd 48F4                                 ___lwmod@dividend 0017  
                                      strchr@ptr 0010                          ?_PIN_MANAGER_Initialize 0001  
                          ??_max_display_support 0012                                       _RCSTA1bits 000FAB  
                                     _RCSTA2bits 000F71                                        strcspn@s1 0016  
                                      strcspn@s2 0018                            __end_of_min_uid_range 4DFA  
                         __end_of_collect_column 3DDE                     __end_of_EUSART1_Transmit_ISR 4B28  
                                      strncmp@s1 0024                                        strncmp@s2 0026  
                               ??_TMR1_StopTimer 0010                                        strncpy@cp 0016  
                        copy_display_struct@data 003B                                        strncpy@to 0010  
                  ?_TMR0_DefaultInterruptHandler 0001                 print_conflict_ids@conflict_count 003D  
                                    _TMR1_Reload 4E4C                                         printf@ap 0033  
                                       printf@pb 0035                    get_over_write_data@over_write 003E  
                              scroll_off@str_len 002E                                      _TMR5_Reload 4DDE  
                         __size_of_EUSART1_Write 003E                                  ??_reply_to_host 006E  
                         __size_of_EUSART2_Write 000C                      conflict_check@new_end_point 003A  
                   __end_of_scroll_right_to_left 2246                           __end_of_conflict_check 2B2C  
                                       sprintf@f 002D                                         strcmp@s1 0010  
                                       strcmp@s2 0012                                  ___lwmod@divisor 0019  
                                _TMR0_Initialize 49EC                                         strcpy@cp 0028  
                                       strlen@cp 0022                                         strcpy@to 0024  
                                ___lwmod@counter 001B                              _get_over_write_data 3F22  
                                       strcspn@i 001B                     __size_of_clear_display_array 0022  
                                 ?_get_direction 0039                      __size_of_update_string_data 0274  
                              ??_set_string_data 0062                                __CFG_T3CMX$PORTC0 000000  
                         copy_display_struct@uid 003D                      conflict_check@exist_uid_idx 0060  
                                       strtok@s1 001D                                         strtok@s2 001F  
                                       strspn@s1 0016                                         strspn@s2 0018  
                                       strtok@sp 0114                                         strstr@s1 002D  
                                       strstr@s2 002F                                 _LCD_20x4_DISPLAY 0117  
                                    ??_write_str 001A                                ??_TMR5_StartTimer 0010  
                          ??_EUSART1_Receive_ISR 0001                   __end_of_PIN_MANAGER_Initialize 47A8  
                              __CFG_FOSC$INTIO67 000000                                  _max_display_str 4E08  
                                   ?_get_dis_frq 0039                                  ?_collect_column 0039  
                           ?_get_over_write_data 0039                                  _TMR1_Initialize 4D1C  
                               ??_TMR5_StopTimer 0010                                     ?_collect_row 0039  
                                   ?_get_new_uid 0024                                 set_string_data@i 006B  
                               set_string_data@j 006C  

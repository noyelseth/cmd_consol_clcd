

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Oct 28 22:17:36 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F46K22 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK0
   148  003BAA                     __pidataBANK0:
   149                           	opt stack 0
   150                           
   151                           ;initializer for _str
   152  003BAA  49                 	db	73
   153  003BAB  4E                 	db	78
   154  003BAC  49                 	db	73
   155  003BAD  54                 	db	84
   156  003BAE  5F                 	db	95
   157  003BAF  53                 	db	83
   158  003BB0  55                 	db	85
   159  003BB1  43                 	db	67
   160  003BB2  43                 	db	67
   161  003BB3  45                 	db	69
   162  003BB4  53                 	db	83
   163  003BB5  53                 	db	83
   164  003BB6  00                 	db	0
   165                           
   166                           	psect	mediumconst
   167  00FCE8                     __pmediumconst:
   168                           	opt stack 0
   169  00FCE8  00                 	db	0
   170  00FCE9                     _dpowers:
   171                           	opt stack 0
   172  00FCE9  0001               	dw	1
   173  00FCEB  000A               	dw	10
   174  00FCED  0064               	dw	100
   175  00FCEF  03E8               	dw	1000
   176  00FCF1  2710               	dw	10000
   177  00FCF3                     __end_of_dpowers:
   178                           	opt stack 0
   179  00FCF3                     STR_9:
   180  00FCF3  55                 	db	85	;'U'
   181  00FCF4  49                 	db	73	;'I'
   182  00FCF5  44                 	db	68	;'D'
   183  00FCF6  20                 	db	32
   184  00FCF7  3D                 	db	61	;'='
   185  00FCF8  20                 	db	32
   186  00FCF9  25                 	db	37
   187  00FCFA  63                 	db	99	;'c'
   188  00FCFB  2C                 	db	44
   189  00FCFC  20                 	db	32
   190  00FCFD  73                 	db	115	;'s'
   191  00FCFE  74                 	db	116	;'t'
   192  00FCFF  61                 	db	97	;'a'
   193  00FD00  72                 	db	114	;'r'
   194  00FD01  74                 	db	116	;'t'
   195  00FD02  5F                 	db	95	;'_'
   196  00FD03  70                 	db	112	;'p'
   197  00FD04  74                 	db	116	;'t'
   198  00FD05  20                 	db	32
   199  00FD06  3D                 	db	61	;'='
   200  00FD07  20                 	db	32
   201  00FD08  25                 	db	37
   202  00FD09  64                 	db	100	;'d'
   203  00FD0A  2C                 	db	44
   204  00FD0B  20                 	db	32
   205  00FD0C  65                 	db	101	;'e'
   206  00FD0D  6E                 	db	110	;'n'
   207  00FD0E  64                 	db	100	;'d'
   208  00FD0F  5F                 	db	95	;'_'
   209  00FD10  70                 	db	112	;'p'
   210  00FD11  74                 	db	116	;'t'
   211  00FD12  20                 	db	32
   212  00FD13  3D                 	db	61	;'='
   213  00FD14  20                 	db	32
   214  00FD15  25                 	db	37
   215  00FD16  64                 	db	100	;'d'
   216  00FD17  0D                 	db	13
   217  00FD18  0A                 	db	10
   218  00FD19  00                 	db	0
   219  00FD1A                     STR_61:
   220  00FD1A  63                 	db	99	;'c'
   221  00FD1B  6D                 	db	109	;'m'
   222  00FD1C  64                 	db	100	;'d'
   223  00FD1D  5F                 	db	95	;'_'
   224  00FD1E  64                 	db	100	;'d'
   225  00FD1F  61                 	db	97	;'a'
   226  00FD20  74                 	db	116	;'t'
   227  00FD21  61                 	db	97	;'a'
   228  00FD22  2E                 	db	46
   229  00FD23  73                 	db	115	;'s'
   230  00FD24  74                 	db	116	;'t'
   231  00FD25  61                 	db	97	;'a'
   232  00FD26  72                 	db	114	;'r'
   233  00FD27  74                 	db	116	;'t'
   234  00FD28  5F                 	db	95	;'_'
   235  00FD29  63                 	db	99	;'c'
   236  00FD2A  6F                 	db	111	;'o'
   237  00FD2B  6C                 	db	108	;'l'
   238  00FD2C  20                 	db	32
   239  00FD2D  3D                 	db	61	;'='
   240  00FD2E  20                 	db	32
   241  00FD2F  25                 	db	37
   242  00FD30  64                 	db	100	;'d'
   243  00FD31  2C                 	db	44
   244  00FD32  0D                 	db	13
   245  00FD33  0A                 	db	10
   246  00FD34  00                 	db	0
   247  00FD35                     STR_59:
   248  00FD35  63                 	db	99	;'c'
   249  00FD36  6D                 	db	109	;'m'
   250  00FD37  64                 	db	100	;'d'
   251  00FD38  5F                 	db	95	;'_'
   252  00FD39  64                 	db	100	;'d'
   253  00FD3A  61                 	db	97	;'a'
   254  00FD3B  74                 	db	116	;'t'
   255  00FD3C  61                 	db	97	;'a'
   256  00FD3D  2E                 	db	46
   257  00FD3E  73                 	db	115	;'s'
   258  00FD3F  74                 	db	116	;'t'
   259  00FD40  61                 	db	97	;'a'
   260  00FD41  72                 	db	114	;'r'
   261  00FD42  74                 	db	116	;'t'
   262  00FD43  5F                 	db	95	;'_'
   263  00FD44  72                 	db	114	;'r'
   264  00FD45  6F                 	db	111	;'o'
   265  00FD46  77                 	db	119	;'w'
   266  00FD47  20                 	db	32
   267  00FD48  3D                 	db	61	;'='
   268  00FD49  20                 	db	32
   269  00FD4A  25                 	db	37
   270  00FD4B  64                 	db	100	;'d'
   271  00FD4C  2C                 	db	44
   272  00FD4D  0D                 	db	13
   273  00FD4E  0A                 	db	10
   274  00FD4F  00                 	db	0
   275  00FD50                     STR_6:
   276  00FD50  64                 	db	100	;'d'
   277  00FD51  69                 	db	105	;'i'
   278  00FD52  73                 	db	115	;'s'
   279  00FD53  70                 	db	112	;'p'
   280  00FD54  6C                 	db	108	;'l'
   281  00FD55  61                 	db	97	;'a'
   282  00FD56  79                 	db	121	;'y'
   283  00FD57  5F                 	db	95	;'_'
   284  00FD58  63                 	db	99	;'c'
   285  00FD59  68                 	db	104	;'h'
   286  00FD5A  61                 	db	97	;'a'
   287  00FD5B  72                 	db	114	;'r'
   288  00FD5C  5F                 	db	95	;'_'
   289  00FD5D  63                 	db	99	;'c'
   290  00FD5E  6F                 	db	111	;'o'
   291  00FD5F  75                 	db	117	;'u'
   292  00FD60  6E                 	db	110	;'n'
   293  00FD61  74                 	db	116	;'t'
   294  00FD62  20                 	db	32
   295  00FD63  3D                 	db	61	;'='
   296  00FD64  20                 	db	32
   297  00FD65  25                 	db	37
   298  00FD66  64                 	db	100	;'d'
   299  00FD67  0D                 	db	13
   300  00FD68  0A                 	db	10
   301  00FD69  00                 	db	0
   302  00FD6A                     STR_8:
   303  00FD6A  65                 	db	101	;'e'
   304  00FD6B  78                 	db	120	;'x'
   305  00FD6C  5F                 	db	95	;'_'
   306  00FD6D  73                 	db	115	;'s'
   307  00FD6E  70                 	db	112	;'p'
   308  00FD6F  20                 	db	32
   309  00FD70  3C                 	db	60	;'<'
   310  00FD71  3D                 	db	61	;'='
   311  00FD72  20                 	db	32
   312  00FD73  6E                 	db	110	;'n'
   313  00FD74  65                 	db	101	;'e'
   314  00FD75  77                 	db	119	;'w'
   315  00FD76  5F                 	db	95	;'_'
   316  00FD77  65                 	db	101	;'e'
   317  00FD78  70                 	db	112	;'p'
   318  00FD79  20                 	db	32
   319  00FD7A  3C                 	db	60	;'<'
   320  00FD7B  3D                 	db	61	;'='
   321  00FD7C  65                 	db	101	;'e'
   322  00FD7D  78                 	db	120	;'x'
   323  00FD7E  5F                 	db	95	;'_'
   324  00FD7F  65                 	db	101	;'e'
   325  00FD80  70                 	db	112	;'p'
   326  00FD81  0D                 	db	13
   327  00FD82  0A                 	db	10
   328  00FD83  00                 	db	0
   329  00FD84                     STR_7:
   330  00FD84  65                 	db	101	;'e'
   331  00FD85  78                 	db	120	;'x'
   332  00FD86  5F                 	db	95	;'_'
   333  00FD87  73                 	db	115	;'s'
   334  00FD88  70                 	db	112	;'p'
   335  00FD89  20                 	db	32
   336  00FD8A  3C                 	db	60	;'<'
   337  00FD8B  3D                 	db	61	;'='
   338  00FD8C  20                 	db	32
   339  00FD8D  6E                 	db	110	;'n'
   340  00FD8E  65                 	db	101	;'e'
   341  00FD8F  77                 	db	119	;'w'
   342  00FD90  5F                 	db	95	;'_'
   343  00FD91  73                 	db	115	;'s'
   344  00FD92  70                 	db	112	;'p'
   345  00FD93  20                 	db	32
   346  00FD94  3C                 	db	60	;'<'
   347  00FD95  3D                 	db	61	;'='
   348  00FD96  65                 	db	101	;'e'
   349  00FD97  78                 	db	120	;'x'
   350  00FD98  5F                 	db	95	;'_'
   351  00FD99  65                 	db	101	;'e'
   352  00FD9A  70                 	db	112	;'p'
   353  00FD9B  0D                 	db	13
   354  00FD9C  0A                 	db	10
   355  00FD9D  00                 	db	0
   356  00FD9E                     STR_66:
   357  00FD9E  63                 	db	99	;'c'
   358  00FD9F  6D                 	db	109	;'m'
   359  00FDA0  64                 	db	100	;'d'
   360  00FDA1  5F                 	db	95	;'_'
   361  00FDA2  64                 	db	100	;'d'
   362  00FDA3  61                 	db	97	;'a'
   363  00FDA4  74                 	db	116	;'t'
   364  00FDA5  61                 	db	97	;'a'
   365  00FDA6  2E                 	db	46
   366  00FDA7  65                 	db	101	;'e'
   367  00FDA8  6E                 	db	110	;'n'
   368  00FDA9  64                 	db	100	;'d'
   369  00FDAA  5F                 	db	95	;'_'
   370  00FDAB  63                 	db	99	;'c'
   371  00FDAC  6F                 	db	111	;'o'
   372  00FDAD  6C                 	db	108	;'l'
   373  00FDAE  20                 	db	32
   374  00FDAF  3D                 	db	61	;'='
   375  00FDB0  20                 	db	32
   376  00FDB1  25                 	db	37
   377  00FDB2  64                 	db	100	;'d'
   378  00FDB3  2C                 	db	44
   379  00FDB4  0D                 	db	13
   380  00FDB5  0A                 	db	10
   381  00FDB6  00                 	db	0
   382  00FDB7                     STR_63:
   383  00FDB7  63                 	db	99	;'c'
   384  00FDB8  6D                 	db	109	;'m'
   385  00FDB9  64                 	db	100	;'d'
   386  00FDBA  5F                 	db	95	;'_'
   387  00FDBB  64                 	db	100	;'d'
   388  00FDBC  61                 	db	97	;'a'
   389  00FDBD  74                 	db	116	;'t'
   390  00FDBE  61                 	db	97	;'a'
   391  00FDBF  2E                 	db	46
   392  00FDC0  65                 	db	101	;'e'
   393  00FDC1  6E                 	db	110	;'n'
   394  00FDC2  64                 	db	100	;'d'
   395  00FDC3  5F                 	db	95	;'_'
   396  00FDC4  72                 	db	114	;'r'
   397  00FDC5  6F                 	db	111	;'o'
   398  00FDC6  77                 	db	119	;'w'
   399  00FDC7  20                 	db	32
   400  00FDC8  3D                 	db	61	;'='
   401  00FDC9  20                 	db	32
   402  00FDCA  25                 	db	37
   403  00FDCB  64                 	db	100	;'d'
   404  00FDCC  2C                 	db	44
   405  00FDCD  0D                 	db	13
   406  00FDCE  0A                 	db	10
   407  00FDCF  00                 	db	0
   408  00FDD0                     STR_19:
   409  00FDD0  64                 	db	100	;'d'
   410  00FDD1  69                 	db	105	;'i'
   411  00FDD2  73                 	db	115	;'s'
   412  00FDD3  70                 	db	112	;'p'
   413  00FDD4  6C                 	db	108	;'l'
   414  00FDD5  61                 	db	97	;'a'
   415  00FDD6  79                 	db	121	;'y'
   416  00FDD7  5F                 	db	95	;'_'
   417  00FDD8  66                 	db	102	;'f'
   418  00FDD9  72                 	db	114	;'r'
   419  00FDDA  71                 	db	113	;'q'
   420  00FDDB  20                 	db	32
   421  00FDDC  3D                 	db	61	;'='
   422  00FDDD  20                 	db	32
   423  00FDDE  25                 	db	37
   424  00FDDF  64                 	db	100	;'d'
   425  00FDE0  0D                 	db	13
   426  00FDE1  0A                 	db	10
   427  00FDE2  00                 	db	0
   428  00FDE3                     STR_13:
   429  00FDE3  73                 	db	115	;'s'
   430  00FDE4  69                 	db	105	;'i'
   431  00FDE5  7A                 	db	122	;'z'
   432  00FDE6  65                 	db	101	;'e'
   433  00FDE7  6F                 	db	111	;'o'
   434  00FDE8  66                 	db	102	;'f'
   435  00FDE9  28                 	db	40
   436  00FDEA  73                 	db	115	;'s'
   437  00FDEB  74                 	db	116	;'t'
   438  00FDEC  72                 	db	114	;'r'
   439  00FDED  29                 	db	41
   440  00FDEE  20                 	db	32
   441  00FDEF  3D                 	db	61	;'='
   442  00FDF0  20                 	db	32
   443  00FDF1  25                 	db	37
   444  00FDF2  64                 	db	100	;'d'
   445  00FDF3  0D                 	db	13
   446  00FDF4  0A                 	db	10
   447  00FDF5  00                 	db	0
   448  00FDF6                     STR_135:
   449  00FDF6  49                 	db	73	;'I'
   450  00FDF7  6E                 	db	110	;'n'
   451  00FDF8  69                 	db	105	;'i'
   452  00FDF9  74                 	db	116	;'t'
   453  00FDFA  5F                 	db	95	;'_'
   454  00FDFB  63                 	db	99	;'c'
   455  00FDFC  6F                 	db	111	;'o'
   456  00FDFD  6D                 	db	109	;'m'
   457  00FDFE  70                 	db	112	;'p'
   458  00FDFF  6C                 	db	108	;'l'
   459  00FE00  65                 	db	101	;'e'
   460  00FE01  74                 	db	116	;'t'
   461  00FE02  65                 	db	101	;'e'
   462  00FE03  2E                 	db	46
   463  00FE04  2E                 	db	46
   464  00FE05  0D                 	db	13
   465  00FE06  0A                 	db	10
   466  00FE07  00                 	db	0
   467  00FE08                     STR_3:
   468  00FE08  73                 	db	115	;'s'
   469  00FE09  74                 	db	116	;'t'
   470  00FE0A  72                 	db	114	;'r'
   471  00FE0B  69                 	db	105	;'i'
   472  00FE0C  6E                 	db	110	;'n'
   473  00FE0D  67                 	db	103	;'g'
   474  00FE0E  5F                 	db	95	;'_'
   475  00FE0F  63                 	db	99	;'c'
   476  00FE10  6F                 	db	111	;'o'
   477  00FE11  75                 	db	117	;'u'
   478  00FE12  6E                 	db	110	;'n'
   479  00FE13  74                 	db	116	;'t'
   480  00FE14  20                 	db	32
   481  00FE15  3D                 	db	61	;'='
   482  00FE16  20                 	db	32
   483  00FE17  25                 	db	37
   484  00FE18  64                 	db	100	;'d'
   485  00FE19  00                 	db	0
   486  00FE1A                     STR_18:
   487  00FE1A  64                 	db	100	;'d'
   488  00FE1B  69                 	db	105	;'i'
   489  00FE1C  72                 	db	114	;'r'
   490  00FE1D  65                 	db	101	;'e'
   491  00FE1E  63                 	db	99	;'c'
   492  00FE1F  74                 	db	116	;'t'
   493  00FE20  69                 	db	105	;'i'
   494  00FE21  6F                 	db	111	;'o'
   495  00FE22  6E                 	db	110	;'n'
   496  00FE23  20                 	db	32
   497  00FE24  3D                 	db	61	;'='
   498  00FE25  20                 	db	32
   499  00FE26  25                 	db	37
   500  00FE27  64                 	db	100	;'d'
   501  00FE28  0D                 	db	13
   502  00FE29  0A                 	db	10
   503  00FE2A  00                 	db	0
   504  00FE2B                     STR_4:
   505  00FE2B  75                 	db	117	;'u'
   506  00FE2C  69                 	db	105	;'i'
   507  00FE2D  64                 	db	100	;'d'
   508  00FE2E  5F                 	db	95	;'_'
   509  00FE2F  72                 	db	114	;'r'
   510  00FE30  61                 	db	97	;'a'
   511  00FE31  6E                 	db	110	;'n'
   512  00FE32  67                 	db	103	;'g'
   513  00FE33  65                 	db	101	;'e'
   514  00FE34  20                 	db	32
   515  00FE35  3D                 	db	61	;'='
   516  00FE36  20                 	db	32
   517  00FE37  25                 	db	37
   518  00FE38  64                 	db	100	;'d'
   519  00FE39  0D                 	db	13
   520  00FE3A  0A                 	db	10
   521  00FE3B  00                 	db	0
   522  00FE3C  6D                 	db	109	;'m'
   523  00FE3D  69                 	db	105	;'i'
   524  00FE3E  64                 	db	100	;'d'
   525  00FE3F  5F                 	db	95	;'_'
   526  00FE40  63                 	db	99	;'c'
   527  00FE41  68                 	db	104	;'h'
   528  00FE42  61                 	db	97	;'a'
   529  00FE43  72                 	db	114	;'r'
   530  00FE44  20                 	db	32
   531  00FE45  3D                 	db	61	;'='
   532  00FE46  20                 	db	32
   533  00FE47  25                 	db	37
   534  00FE48  64                 	db	100	;'d'
   535  00FE49  0D                 	db	13
   536  00FE4A  0A                 	db	10
   537  00FE4B  00                 	db	0
   538  00FE4C  25                 	db	37
   539  00FE4D  73                 	db	115	;'s'
   540  00FE4E  2C                 	db	44
   541  00FE4F  20                 	db	32
   542  00FE50  73                 	db	115	;'s'
   543  00FE51  74                 	db	116	;'t'
   544  00FE52  72                 	db	114	;'r'
   545  00FE53  6C                 	db	108	;'l'
   546  00FE54  65                 	db	101	;'e'
   547  00FE55  6E                 	db	110	;'n'
   548  00FE56  20                 	db	32
   549  00FE57  25                 	db	37
   550  00FE58  64                 	db	100	;'d'
   551  00FE59  0D                 	db	13
   552  00FE5A  0A                 	db	10
   553  00FE5B  00                 	db	0
   554  00FE5C                     STR_10:
   555  00FE5C  63                 	db	99	;'c'
   556  00FE5D  6F                 	db	111	;'o'
   557  00FE5E  6E                 	db	110	;'n'
   558  00FE5F  66                 	db	102	;'f'
   559  00FE60  6C                 	db	108	;'l'
   560  00FE61  69                 	db	105	;'i'
   561  00FE62  63                 	db	99	;'c'
   562  00FE63  74                 	db	116	;'t'
   563  00FE64  3A                 	db	58	;':'
   564  00FE65  20                 	db	32
   565  00FE66  75                 	db	117	;'u'
   566  00FE67  69                 	db	105	;'i'
   567  00FE68  64                 	db	100	;'d'
   568  00FE69  0D                 	db	13
   569  00FE6A  0A                 	db	10
   570  00FE6B  00                 	db	0
   571  00FE6C                     STR_126:
   572  00FE6C  45                 	db	69	;'E'
   573  00FE6D  52                 	db	82	;'R'
   574  00FE6E  52                 	db	82	;'R'
   575  00FE6F  5F                 	db	95	;'_'
   576  00FE70  53                 	db	83	;'S'
   577  00FE71  43                 	db	67	;'C'
   578  00FE72  52                 	db	82	;'R'
   579  00FE73  4F                 	db	79	;'O'
   580  00FE74  4C                 	db	76	;'L'
   581  00FE75  4C                 	db	76	;'L'
   582  00FE76  5F                 	db	95	;'_'
   583  00FE77  53                 	db	83	;'S'
   584  00FE78  45                 	db	69	;'E'
   585  00FE79  54                 	db	84	;'T'
   586  00FE7A  00                 	db	0
   587  00FE7B                     STR_53:
   588  00FE7B  73                 	db	115	;'s'
   589  00FE7C  63                 	db	99	;'c'
   590  00FE7D  72                 	db	114	;'r'
   591  00FE7E  6F                 	db	111	;'o'
   592  00FE7F  6C                 	db	108	;'l'
   593  00FE80  6C                 	db	108	;'l'
   594  00FE81  20                 	db	32
   595  00FE82  3D                 	db	61	;'='
   596  00FE83  20                 	db	32
   597  00FE84  25                 	db	37
   598  00FE85  64                 	db	100	;'d'
   599  00FE86  2C                 	db	44
   600  00FE87  20                 	db	32
   601  00FE88  00                 	db	0
   602  00FE89                     STR_89:
   603  00FE89  0D                 	db	13
   604  00FE8A  0A                 	db	10
   605  00FE8B  25                 	db	37
   606  00FE8C  73                 	db	115	;'s'
   607  00FE8D  2E                 	db	46
   608  00FE8E  2E                 	db	46
   609  00FE8F  2C                 	db	44
   610  00FE90  20                 	db	32
   611  00FE91  4F                 	db	79	;'O'
   612  00FE92  4B                 	db	75	;'K'
   613  00FE93  0D                 	db	13
   614  00FE94  0A                 	db	10
   615  00FE95  00                 	db	0
   616  00FE96                     STR_57:
   617  00FE96  75                 	db	117	;'u'
   618  00FE97  69                 	db	105	;'i'
   619  00FE98  64                 	db	100	;'d'
   620  00FE99  20                 	db	32
   621  00FE9A  3D                 	db	61	;'='
   622  00FE9B  20                 	db	32
   623  00FE9C  25                 	db	37
   624  00FE9D  64                 	db	100	;'d'
   625  00FE9E  2C                 	db	44
   626  00FE9F  0D                 	db	13
   627  00FEA0  0A                 	db	10
   628  00FEA1  00                 	db	0
   629  00FEA2                     STR_21:
   630  00FEA2  43                 	db	67	;'C'
   631  00FEA3  6F                 	db	111	;'o'
   632  00FEA4  6C                 	db	108	;'l'
   633  00FEA5  32                 	db	50	;'2'
   634  00FEA6  20                 	db	32
   635  00FEA7  3D                 	db	61	;'='
   636  00FEA8  20                 	db	32
   637  00FEA9  25                 	db	37
   638  00FEAA  64                 	db	100	;'d'
   639  00FEAB  0D                 	db	13
   640  00FEAC  0A                 	db	10
   641  00FEAD  00                 	db	0
   642  00FEAE                     STR_17:
   643  00FEAE  72                 	db	114	;'r'
   644  00FEAF  6F                 	db	111	;'o'
   645  00FEB0  77                 	db	119	;'w'
   646  00FEB1  32                 	db	50	;'2'
   647  00FEB2  20                 	db	32
   648  00FEB3  3D                 	db	61	;'='
   649  00FEB4  20                 	db	32
   650  00FEB5  25                 	db	37
   651  00FEB6  64                 	db	100	;'d'
   652  00FEB7  0D                 	db	13
   653  00FEB8  0A                 	db	10
   654  00FEB9  00                 	db	0
   655  00FEBA                     STR_132:
   656  00FEBA  49                 	db	73	;'I'
   657  00FEBB  6E                 	db	110	;'n'
   658  00FEBC  69                 	db	105	;'i'
   659  00FEBD  74                 	db	116	;'t'
   660  00FEBE  5F                 	db	95	;'_'
   661  00FEBF  44                 	db	68	;'D'
   662  00FEC0  6F                 	db	111	;'o'
   663  00FEC1  6E                 	db	110	;'n'
   664  00FEC2  65                 	db	101	;'e'
   665  00FEC3  0D                 	db	13
   666  00FEC4  0A                 	db	10
   667  00FEC5  00                 	db	0
   668  00FEC6                     STR_20:
   669  00FEC6  63                 	db	99	;'c'
   670  00FEC7  6F                 	db	111	;'o'
   671  00FEC8  6C                 	db	108	;'l'
   672  00FEC9  31                 	db	49	;'1'
   673  00FECA  20                 	db	32
   674  00FECB  3D                 	db	61	;'='
   675  00FECC  20                 	db	32
   676  00FECD  25                 	db	37
   677  00FECE  73                 	db	115	;'s'
   678  00FECF  0D                 	db	13
   679  00FED0  0A                 	db	10
   680  00FED1  00                 	db	0
   681  00FED2                     STR_16:
   682  00FED2  72                 	db	114	;'r'
   683  00FED3  6F                 	db	111	;'o'
   684  00FED4  77                 	db	119	;'w'
   685  00FED5  31                 	db	49	;'1'
   686  00FED6  20                 	db	32
   687  00FED7  3D                 	db	61	;'='
   688  00FED8  20                 	db	32
   689  00FED9  25                 	db	37
   690  00FEDA  73                 	db	115	;'s'
   691  00FEDB  0D                 	db	13
   692  00FEDC  0A                 	db	10
   693  00FEDD  00                 	db	0
   694  00FEDE                     STR_39:
   695  00FEDE  74                 	db	116	;'t'
   696  00FEDF  65                 	db	101	;'e'
   697  00FEE0  6D                 	db	109	;'m'
   698  00FEE1  70                 	db	112	;'p'
   699  00FEE2  20                 	db	32
   700  00FEE3  3D                 	db	61	;'='
   701  00FEE4  20                 	db	32
   702  00FEE5  25                 	db	37
   703  00FEE6  73                 	db	115	;'s'
   704  00FEE7  2C                 	db	44
   705  00FEE8  20                 	db	32
   706  00FEE9  00                 	db	0
   707  00FEEA                     STR_124:
   708  00FEEA  45                 	db	69	;'E'
   709  00FEEB  52                 	db	82	;'R'
   710  00FEEC  52                 	db	82	;'R'
   711  00FEED  5F                 	db	95	;'_'
   712  00FEEE  52                 	db	82	;'R'
   713  00FEEF  4F                 	db	79	;'O'
   714  00FEF0  57                 	db	87	;'W'
   715  00FEF1  5F                 	db	95	;'_'
   716  00FEF2  43                 	db	67	;'C'
   717  00FEF3  4F                 	db	79	;'O'
   718  00FEF4  4C                 	db	76	;'L'
   719  00FEF5  00                 	db	0
   720  00FEF6                     STR_131:
   721  00FEF6  45                 	db	69	;'E'
   722  00FEF7  52                 	db	82	;'R'
   723  00FEF8  52                 	db	82	;'R'
   724  00FEF9  5F                 	db	95	;'_'
   725  00FEFA  43                 	db	67	;'C'
   726  00FEFB  4D                 	db	77	;'M'
   727  00FEFC  44                 	db	68	;'D'
   728  00FEFD  5F                 	db	95	;'_'
   729  00FEFE  4C                 	db	76	;'L'
   730  00FEFF  45                 	db	69	;'E'
   731  00FF00  4E                 	db	78	;'N'
   732  00FF01  00                 	db	0
   733  00FF02                     STR_122:
   734  00FF02  45                 	db	69	;'E'
   735  00FF03  52                 	db	82	;'R'
   736  00FF04  52                 	db	82	;'R'
   737  00FF05  5F                 	db	95	;'_'
   738  00FF06  53                 	db	83	;'S'
   739  00FF07  54                 	db	84	;'T'
   740  00FF08  52                 	db	82	;'R'
   741  00FF09  5F                 	db	95	;'_'
   742  00FF0A  53                 	db	83	;'S'
   743  00FF0B  45                 	db	69	;'E'
   744  00FF0C  54                 	db	84	;'T'
   745  00FF0D  00                 	db	0
   746  00FF0E                     STR_103:
   747  00FF0E  25                 	db	37
   748  00FF0F  64                 	db	100	;'d'
   749  00FF10  2C                 	db	44
   750  00FF11  25                 	db	37
   751  00FF12  63                 	db	99	;'c'
   752  00FF13  2D                 	db	45
   753  00FF14  25                 	db	37
   754  00FF15  63                 	db	99	;'c'
   755  00FF16  0D                 	db	13
   756  00FF17  0A                 	db	10
   757  00FF18  00                 	db	0
   758  00FF19                     STR_65:
   759  00FF19  63                 	db	99	;'c'
   760  00FF1A  6F                 	db	111	;'o'
   761  00FF1B  6C                 	db	108	;'l'
   762  00FF1C  20                 	db	32
   763  00FF1D  3D                 	db	61	;'='
   764  00FF1E  20                 	db	32
   765  00FF1F  25                 	db	37
   766  00FF20  73                 	db	115	;'s'
   767  00FF21  0D                 	db	13
   768  00FF22  0A                 	db	10
   769  00FF23  00                 	db	0
   770  00FF24                     STR_44:
   771  00FF24  73                 	db	115	;'s'
   772  00FF25  74                 	db	116	;'t'
   773  00FF26  72                 	db	114	;'r'
   774  00FF27  20                 	db	32
   775  00FF28  3D                 	db	61	;'='
   776  00FF29  20                 	db	32
   777  00FF2A  25                 	db	37
   778  00FF2B  73                 	db	115	;'s'
   779  00FF2C  0D                 	db	13
   780  00FF2D  0A                 	db	10
   781  00FF2E  00                 	db	0
   782  00FF2F                     STR_42:
   783  00FF2F  75                 	db	117	;'u'
   784  00FF30  69                 	db	105	;'i'
   785  00FF31  64                 	db	100	;'d'
   786  00FF32  20                 	db	32
   787  00FF33  3D                 	db	61	;'='
   788  00FF34  20                 	db	32
   789  00FF35  25                 	db	37
   790  00FF36  64                 	db	100	;'d'
   791  00FF37  2C                 	db	44
   792  00FF38  20                 	db	32
   793  00FF39  00                 	db	0
   794  00FF3A                     STR_72:
   795  00FF3A  64                 	db	100	;'d'
   796  00FF3B  61                 	db	97	;'a'
   797  00FF3C  74                 	db	116	;'t'
   798  00FF3D  61                 	db	97	;'a'
   799  00FF3E  3D                 	db	61	;'='
   800  00FF3F  25                 	db	37
   801  00FF40  73                 	db	115	;'s'
   802  00FF41  0D                 	db	13
   803  00FF42  0A                 	db	10
   804  00FF43  00                 	db	0
   805  00FF44                     STR_46:
   806  00FF44  25                 	db	37
   807  00FF45  73                 	db	115	;'s'
   808  00FF46  2E                 	db	46
   809  00FF47  2E                 	db	46
   810  00FF48  2E                 	db	46
   811  00FF49  34                 	db	52	;'4'
   812  00FF4A  0D                 	db	13
   813  00FF4B  0A                 	db	10
   814  00FF4C  00                 	db	0
   815  00FF4D                     STR_49:
   816  00FF4D  25                 	db	37
   817  00FF4E  73                 	db	115	;'s'
   818  00FF4F  2E                 	db	46
   819  00FF50  2E                 	db	46
   820  00FF51  2E                 	db	46
   821  00FF52  35                 	db	53	;'5'
   822  00FF53  0D                 	db	13
   823  00FF54  0A                 	db	10
   824  00FF55  00                 	db	0
   825  00FF56                     STR_52:
   826  00FF56  25                 	db	37
   827  00FF57  73                 	db	115	;'s'
   828  00FF58  2E                 	db	46
   829  00FF59  2E                 	db	46
   830  00FF5A  2E                 	db	46
   831  00FF5B  36                 	db	54	;'6'
   832  00FF5C  0D                 	db	13
   833  00FF5D  0A                 	db	10
   834  00FF5E  00                 	db	0
   835  00FF5F                     STR_70:
   836  00FF5F  43                 	db	67	;'C'
   837  00FF60  4D                 	db	77	;'M'
   838  00FF61  44                 	db	68	;'D'
   839  00FF62  3D                 	db	61	;'='
   840  00FF63  25                 	db	37
   841  00FF64  73                 	db	115	;'s'
   842  00FF65  0D                 	db	13
   843  00FF66  0A                 	db	10
   844  00FF67  00                 	db	0
   845  00FF68                     STR_2:
   846  00FF68  63                 	db	99	;'c'
   847  00FF69  6F                 	db	111	;'o'
   848  00FF6A  6C                 	db	108	;'l'
   849  00FF6B  20                 	db	32
   850  00FF6C  3D                 	db	61	;'='
   851  00FF6D  20                 	db	32
   852  00FF6E  25                 	db	37
   853  00FF6F  64                 	db	100	;'d'
   854  00FF70  00                 	db	0
   855  00FF71                     STR_1:
   856  00FF71  72                 	db	114	;'r'
   857  00FF72  6F                 	db	111	;'o'
   858  00FF73  77                 	db	119	;'w'
   859  00FF74  20                 	db	32
   860  00FF75  3D                 	db	61	;'='
   861  00FF76  20                 	db	32
   862  00FF77  25                 	db	37
   863  00FF78  64                 	db	100	;'d'
   864  00FF79  00                 	db	0
   865  00FF7A                     STR_29:
   866  00FF7A  2E                 	db	46
   867  00FF7B  2E                 	db	46
   868  00FF7C  2E                 	db	46
   869  00FF7D  2E                 	db	46
   870  00FF7E  2E                 	db	46
   871  00FF7F  0D                 	db	13
   872  00FF80  0A                 	db	10
   873  00FF81  00                 	db	0
   874  00FF82                     STR_22:
   875  00FF82  25                 	db	37
   876  00FF83  73                 	db	115	;'s'
   877  00FF84  2E                 	db	46
   878  00FF85  2E                 	db	46
   879  00FF86  32                 	db	50	;'2'
   880  00FF87  0D                 	db	13
   881  00FF88  0A                 	db	10
   882  00FF89  00                 	db	0
   883  00FF8A                     STR_45:
   884  00FF8A  53                 	db	83	;'S'
   885  00FF8B  44                 	db	68	;'D'
   886  00FF8C  53                 	db	83	;'S'
   887  00FF8D  43                 	db	67	;'C'
   888  00FF8E  52                 	db	82	;'R'
   889  00FF8F  4F                 	db	79	;'O'
   890  00FF90  4C                 	db	76	;'L'
   891  00FF91  00                 	db	0
   892  00FF92                     STR_136:
   893  00FF92  28                 	db	40
   894  00FF93  6E                 	db	110	;'n'
   895  00FF94  75                 	db	117	;'u'
   896  00FF95  6C                 	db	108	;'l'
   897  00FF96  6C                 	db	108	;'l'
   898  00FF97  29                 	db	41
   899  00FF98  00                 	db	0
   900  00FF99                     STR_33:
   901  00FF99  25                 	db	37
   902  00FF9A  73                 	db	115	;'s'
   903  00FF9B  2E                 	db	46
   904  00FF9C  2E                 	db	46
   905  00FF9D  0D                 	db	13
   906  00FF9E  0A                 	db	10
   907  00FF9F  00                 	db	0
   908  00FFA0                     STR_121:
   909  00FFA0  0D                 	db	13
   910  00FFA1  0A                 	db	10
   911  00FFA2  25                 	db	37
   912  00FFA3  73                 	db	115	;'s'
   913  00FFA4  0D                 	db	13
   914  00FFA5  0A                 	db	10
   915  00FFA6  00                 	db	0
   916  00FFA7                     STR_24:
   917  00FFA7  2D                 	db	45
   918  00FFA8  27                 	db	39
   919  00FFA9  2C                 	db	44
   920  00FFAA  20                 	db	32
   921  00FFAB  2F                 	db	47
   922  00FFAC  3D                 	db	61	;'='
   923  00FFAD  00                 	db	0
   924  00FFAE                     STR_54:
   925  00FFAE  53                 	db	83	;'S'
   926  00FFAF  44                 	db	68	;'D'
   927  00FFB0  53                 	db	83	;'S'
   928  00FFB1  45                 	db	69	;'E'
   929  00FFB2  52                 	db	82	;'R'
   930  00FFB3  43                 	db	67	;'C'
   931  00FFB4  00                 	db	0
   932  00FFB5                     STR_67:
   933  00FFB5  55                 	db	85	;'U'
   934  00FFB6  50                 	db	80	;'P'
   935  00FFB7  44                 	db	68	;'D'
   936  00FFB8  41                 	db	65	;'A'
   937  00FFB9  54                 	db	84	;'T'
   938  00FFBA  45                 	db	69	;'E'
   939  00FFBB  00                 	db	0
   940  00FFBC                     STR_27:
   941  00FFBC  4C                 	db	76	;'L'
   942  00FFBD  43                 	db	67	;'C'
   943  00FFBE  44                 	db	68	;'D'
   944  00FFBF  53                 	db	83	;'S'
   945  00FFC0  3F                 	db	63	;'?'
   946  00FFC1  00                 	db	0
   947  00FFC2                     STR_35:
   948  00FFC2  47                 	db	71	;'G'
   949  00FFC3  4D                 	db	77	;'M'
   950  00FFC4  44                 	db	68	;'D'
   951  00FFC5  53                 	db	83	;'S'
   952  00FFC6  3F                 	db	63	;'?'
   953  00FFC7  00                 	db	0
   954  00FFC8                     STR_118:
   955  00FFC8  45                 	db	69	;'E'
   956  00FFC9  52                 	db	82	;'R'
   957  00FFCA  52                 	db	82	;'R'
   958  00FFCB  4F                 	db	79	;'O'
   959  00FFCC  52                 	db	82	;'R'
   960  00FFCD  00                 	db	0
   961  00FFCE                     STR_37:
   962  00FFCE  53                 	db	83	;'S'
   963  00FFCF  44                 	db	68	;'D'
   964  00FFD0  53                 	db	83	;'S'
   965  00FFD1  54                 	db	84	;'T'
   966  00FFD2  52                 	db	82	;'R'
   967  00FFD3  00                 	db	0
   968  00FFD4                     STR_130:
   969  00FFD4  4B                 	db	75	;'K'
   970  00FFD5  4C                 	db	76	;'L'
   971  00FFD6  4D                 	db	77	;'M'
   972  00FFD7  2B                 	db	43
   973  00FFD8  00                 	db	0
   974  00FFD9                     STR_68:
   975  00FFD9  53                 	db	83	;'S'
   976  00FFDA  53                 	db	83	;'S'
   977  00FFDB  54                 	db	84	;'T'
   978  00FFDC  52                 	db	82	;'R'
   979  00FFDD  00                 	db	0
   980  00FFDE                     STR_30:
   981  00FFDE  4C                 	db	76	;'L'
   982  00FFDF  43                 	db	67	;'C'
   983  00FFE0  44                 	db	68	;'D'
   984  00FFE1  53                 	db	83	;'S'
   985  00FFE2  00                 	db	0
   986  00FFE3                     STR_11:
   987  00FFE3  25                 	db	37
   988  00FFE4  63                 	db	99	;'c'
   989  00FFE5  2C                 	db	44
   990  00FFE6  20                 	db	32
   991  00FFE7  00                 	db	0
   992  00FFE8                     STR_5:
   993  00FFE8  34                 	db	52	;'4'
   994  00FFE9  2C                 	db	44
   995  00FFEA  32                 	db	50	;'2'
   996  00FFEB  30                 	db	48	;'0'
   997  00FFEC  00                 	db	0
   998  00FFED                     STR_23:
   999  00FFED  4D                 	db	77	;'M'
  1000  00FFEE  43                 	db	67	;'C'
  1001  00FFEF  3F                 	db	63	;'?'
  1002  00FFF0  00                 	db	0
  1003  00FFF1                     STR_25:
  1004  00FFF1  4D                 	db	77	;'M'
  1005  00FFF2  52                 	db	82	;'R'
  1006  00FFF3  3F                 	db	63	;'?'
  1007  00FFF4  00                 	db	0
  1008  00FFF5                     STR_84:
  1009  00FFF5  4B                 	db	75	;'K'
  1010  00FFF6  4C                 	db	76	;'L'
  1011  00FFF7  4D                 	db	77	;'M'
  1012  00FFF8  00                 	db	0
  1013  00FFF9                     STR_128:
  1014  00FFF9  25                 	db	37
  1015  00FFFA  63                 	db	99	;'c'
  1016  00FFFB  00                 	db	0
  1017  00FFFC                     STR_43:
  1018  00FFFC  2C                 	db	44
  1019  00FFFD  00                 	db	0
  1020  0000                     
  1021                           ; #config settings
  1022  00FFFE  00                 	db	0	; dummy byte at the end
  1023  0000                     
  1024                           	psect	nvCOMRAM
  1025  00004E                     __pnvCOMRAM:
  1026                           	opt stack 0
  1027  00004E                     _timer0ReloadVal:
  1028                           	opt stack 0
  1029  00004E                     	ds	2
  1030                           
  1031                           	psect	nvBANK0
  1032  0000F8                     __pnvBANK0:
  1033                           	opt stack 0
  1034  0000F8                     _TMR0_InterruptHandler:
  1035                           	opt stack 0
  1036  0000F8                     	ds	2
  1037  0000FA                     _timer1ReloadVal:
  1038                           	opt stack 0
  1039  0000FA                     	ds	2
  1040  0000FC                     _timer5ReloadVal:
  1041                           	opt stack 0
  1042  0000FC                     	ds	2
  1043  0000FE                     _eusart1TxBufferRemaining:
  1044                           	opt stack 0
  1045  0000FE                     	ds	1
  1046  0000                     _TMR5	set	3919
  1047  0000                     _ANSELA	set	3896
  1048  0000                     _ANSELB	set	3897
  1049  0000                     _ANSELC	set	3898
  1050  0000                     _ANSELD	set	3899
  1051  0000                     _ANSELE	set	3900
  1052  0000                     _T5CON	set	3918
  1053  0000                     _T5CONbits	set	3918
  1054  0000                     _T5GCON	set	3917
  1055  0000                     _T5GCONbits	set	3917
  1056  0000                     _TMR5H	set	3920
  1057  0000                     _TMR5L	set	3919
  1058  0000                     _TMR1	set	4046
  1059  0000                     _BAUDCON1	set	4024
  1060  0000                     _INTCON2bits	set	4081
  1061  0000                     _INTCONbits	set	4082
  1062  0000                     _LATA	set	3977
  1063  0000                     _LATB	set	3978
  1064  0000                     _LATC	set	3979
  1065  0000                     _LATD	set	3980
  1066  0000                     _LATE	set	3981
  1067  0000                     _LATEbits	set	3981
  1068  0000                     _OSCCON	set	4051
  1069  0000                     _OSCCON2	set	4050
  1070  0000                     _OSCTUNE	set	3995
  1071  0000                     _PIE1bits	set	3997
  1072  0000                     _PIR1bits	set	3998
  1073  0000                     _PIR5bits	set	3966
  1074  0000                     _PORTAbits	set	3968
  1075  0000                     _PORTD	set	3971
  1076  0000                     _PORTDbits	set	3971
  1077  0000                     _RCONbits	set	4048
  1078  0000                     _RCREG1	set	4014
  1079  0000                     _RCSTA1	set	4011
  1080  0000                     _RCSTA1bits	set	4011
  1081  0000                     _SPBRG1	set	4015
  1082  0000                     _SPBRGH1	set	4016
  1083  0000                     _T0CON	set	4053
  1084  0000                     _T0CONbits	set	4053
  1085  0000                     _T1CON	set	4045
  1086  0000                     _T1CONbits	set	4045
  1087  0000                     _T1GCON	set	4044
  1088  0000                     _T1GCONbits	set	4044
  1089  0000                     _TMR0H	set	4055
  1090  0000                     _TMR0L	set	4054
  1091  0000                     _TMR1H	set	4047
  1092  0000                     _TMR1L	set	4046
  1093  0000                     _TRISA	set	3986
  1094  0000                     _TRISB	set	3987
  1095  0000                     _TRISC	set	3988
  1096  0000                     _TRISD	set	3989
  1097  0000                     _TRISE	set	3990
  1098  0000                     _TXREG1	set	4013
  1099  0000                     _TXSTA1	set	4012
  1100  0000                     _WPUB	set	3937
  1101                           
  1102                           	psect	cinit
  1103  003276                     __pcinit:
  1104                           	opt stack 0
  1105  003276                     start_initialization:
  1106                           	opt stack 0
  1107  003276                     __initialization:
  1108                           	opt stack 0
  1109                           
  1110                           ; Initialize objects allocated to BANK0 (13 bytes)
  1111                           ; load TBLPTR registers with __pidataBANK0
  1112  003276  0EAA               	movlw	low __pidataBANK0
  1113  003278  6EF6               	movwf	tblptrl,c
  1114  00327A  0E3B               	movlw	high __pidataBANK0
  1115  00327C  6EF7               	movwf	tblptrh,c
  1116  00327E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1117  003280  6EF8               	movwf	tblptru,c
  1118  003282  EE00  F0EB         	lfsr	0,__pdataBANK0
  1119  003286  EE10 F00D          	lfsr	1,13
  1120  00328A                     copy_data0:
  1121  00328A  0009               	tblrd		*+
  1122  00328C  CFF5 FFEE          	movff	tablat,postinc0
  1123  003290  50E5               	movf	postdec1,w,c
  1124  003292  50E1               	movf	fsr1l,w,c
  1125  003294  E1FA               	bnz	copy_data0
  1126                           
  1127                           ; Clear objects allocated to BIGRAM (1080 bytes)
  1128  003296  EE02  F096         	lfsr	0,__pbssBIGRAM
  1129  00329A  EE14 F038          	lfsr	1,1080
  1130  00329E                     clear_0:
  1131  00329E  6AEE               	clrf	postinc0,c
  1132  0032A0  50E5               	movf	postdec1,w,c
  1133  0032A2  50E1               	movf	fsr1l,w,c
  1134  0032A4  E1FC               	bnz	clear_0
  1135  0032A6  50E2               	movf	fsr1h,w,c
  1136  0032A8  E1FA               	bnz	clear_0
  1137                           
  1138                           ; Clear objects allocated to BANK2 (150 bytes)
  1139  0032AA  EE02  F000         	lfsr	0,__pbssBANK2
  1140  0032AE  0E96               	movlw	150
  1141  0032B0                     clear_1:
  1142  0032B0  6AEE               	clrf	postinc0,c
  1143  0032B2  06E8               	decf	wreg,f,c
  1144  0032B4  E1FD               	bnz	clear_1
  1145                           
  1146                           ; Clear objects allocated to BANK1 (120 bytes)
  1147  0032B6  EE01  F000         	lfsr	0,__pbssBANK1
  1148  0032BA  0E78               	movlw	120
  1149  0032BC                     clear_2:
  1150  0032BC  6AEE               	clrf	postinc0,c
  1151  0032BE  06E8               	decf	wreg,f,c
  1152  0032C0  E1FD               	bnz	clear_2
  1153                           
  1154                           ; Clear objects allocated to BANK0 (123 bytes)
  1155  0032C2  EE00  F060         	lfsr	0,__pbssBANK0
  1156  0032C6  0E7B               	movlw	123
  1157  0032C8                     clear_3:
  1158  0032C8  6AEE               	clrf	postinc0,c
  1159  0032CA  06E8               	decf	wreg,f,c
  1160  0032CC  E1FD               	bnz	clear_3
  1161                           
  1162                           ; Clear objects allocated to COMRAM (13 bytes)
  1163  0032CE  EE00  F041         	lfsr	0,__pbssCOMRAM
  1164  0032D2  0E0D               	movlw	13
  1165  0032D4                     clear_4:
  1166  0032D4  6AEE               	clrf	postinc0,c
  1167  0032D6  06E8               	decf	wreg,f,c
  1168  0032D8  E1FD               	bnz	clear_4
  1169  0032DA                     end_of_initialization:
  1170                           	opt stack 0
  1171  0032DA                     __end_of__initialization:
  1172                           	opt stack 0
  1173  0032DA  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1174  0032DC  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1175  0032DE  0100               	movlb	0
  1176  0032E0  EF02  F01A         	goto	_main	;jump to C main() function
  1177                           tblptru	equ	0xFF8
  1178                           tblptrh	equ	0xFF7
  1179                           tblptrl	equ	0xFF6
  1180                           tablat	equ	0xFF5
  1181                           postinc0	equ	0xFEE
  1182                           wreg	equ	0xFE8
  1183                           postdec1	equ	0xFE5
  1184                           fsr1h	equ	0xFE2
  1185                           fsr1l	equ	0xFE1
  1186                           
  1187                           	psect	bssCOMRAM
  1188  000041                     __pbssCOMRAM:
  1189                           	opt stack 0
  1190  000041                     _clcd_init_row:
  1191                           	opt stack 0
  1192  000041                     	ds	1
  1193  000042                     _conflict_data_count:
  1194                           	opt stack 0
  1195  000042                     	ds	1
  1196  000043                     _data_count:
  1197                           	opt stack 0
  1198  000043                     	ds	1
  1199  000044                     _eusart1RxCount:
  1200                           	opt stack 0
  1201  000044                     	ds	1
  1202  000045                     _eusart1RxHead:
  1203                           	opt stack 0
  1204  000045                     	ds	1
  1205  000046                     _eusart1RxTail:
  1206                           	opt stack 0
  1207  000046                     	ds	1
  1208  000047                     _eusart1TxHead:
  1209                           	opt stack 0
  1210  000047                     	ds	1
  1211  000048                     _eusart1TxTail:
  1212                           	opt stack 0
  1213  000048                     	ds	1
  1214  000049                     _clcd_config_data:
  1215                           	opt stack 0
  1216  000049                     	ds	5
  1217                           tblptru	equ	0xFF8
  1218                           tblptrh	equ	0xFF7
  1219                           tblptrl	equ	0xFF6
  1220                           tablat	equ	0xFF5
  1221                           postinc0	equ	0xFEE
  1222                           wreg	equ	0xFE8
  1223                           postdec1	equ	0xFE5
  1224                           fsr1h	equ	0xFE2
  1225                           fsr1l	equ	0xFE1
  1226                           
  1227                           	psect	bssBANK0
  1228  000060                     __pbssBANK0:
  1229                           	opt stack 0
  1230  000060                     _eusart1RxBuffer:
  1231                           	opt stack 0
  1232  000060                     	ds	8
  1233  000068                     _eusart1TxBuffer:
  1234                           	opt stack 0
  1235  000068                     	ds	8
  1236  000070                     _TMR1_InterruptHandler:
  1237                           	opt stack 0
  1238  000070                     	ds	2
  1239  000072                     _TMR5_InterruptHandler:
  1240                           	opt stack 0
  1241  000072                     	ds	2
  1242  000074                     _display_struct_count:
  1243                           	opt stack 0
  1244  000074                     	ds	2
  1245  000076                     _print_data_ready:
  1246                           	opt stack 0
  1247  000076                     	ds	2
  1248  000078                     	ds	2
  1249  00007A                     cmd_consol_task@i:
  1250                           	opt stack 0
  1251  00007A                     	ds	2
  1252  00007C                     strtok@sp:
  1253                           	opt stack 0
  1254  00007C                     	ds	2
  1255  00007E                     _LCD_16x2_DISPLAY:
  1256                           	opt stack 0
  1257  00007E                     	ds	1
  1258  00007F                     _LCD_20x4_DISPLAY:
  1259                           	opt stack 0
  1260  00007F                     	ds	1
  1261  000080                     _check:
  1262                           	opt stack 0
  1263  000080                     	ds	1
  1264  000081                     _clcd_init_col:
  1265                           	opt stack 0
  1266  000081                     	ds	1
  1267  000082                     _cmd_consol_state:
  1268                           	opt stack 0
  1269  000082                     	ds	1
  1270  000083                     _display:
  1271                           	opt stack 0
  1272  000083                     	ds	1
  1273  000084                     _valid_cmd:
  1274                           	opt stack 0
  1275  000084                     	ds	1
  1276  000085                     	ds	1
  1277  000086                     _cmd_data:
  1278                           	opt stack 0
  1279  000086                     	ds	50
  1280  0000B8                     _conflict_arr:
  1281                           	opt stack 0
  1282  0000B8                     	ds	20
  1283  0000CC                     _CMD:
  1284                           	opt stack 0
  1285  0000CC                     	ds	15
  1286                           tblptru	equ	0xFF8
  1287                           tblptrh	equ	0xFF7
  1288                           tblptrl	equ	0xFF6
  1289                           tablat	equ	0xFF5
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           postdec1	equ	0xFE5
  1293                           fsr1h	equ	0xFE2
  1294                           fsr1l	equ	0xFE1
  1295                           
  1296                           	psect	dataBANK0
  1297  0000EB                     __pdataBANK0:
  1298                           	opt stack 0
  1299  0000EB                     _str:
  1300                           	opt stack 0
  1301  0000EB                     	ds	13
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           postdec1	equ	0xFE5
  1309                           fsr1h	equ	0xFE2
  1310                           fsr1l	equ	0xFE1
  1311                           
  1312                           	psect	bssBANK1
  1313  000100                     __pbssBANK1:
  1314                           	opt stack 0
  1315  000100                     _lcd_display_array:
  1316                           	opt stack 0
  1317  000100                     	ds	80
  1318  000150                     _str_data:
  1319                           	opt stack 0
  1320  000150                     	ds	40
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           postdec1	equ	0xFE5
  1328                           fsr1h	equ	0xFE2
  1329                           fsr1l	equ	0xFE1
  1330                           
  1331                           	psect	bssBANK2
  1332  000200                     __pbssBANK2:
  1333                           	opt stack 0
  1334  000200                     _uart_str:
  1335                           	opt stack 0
  1336  000200                     	ds	150
  1337                           tblptru	equ	0xFF8
  1338                           tblptrh	equ	0xFF7
  1339                           tblptrl	equ	0xFF6
  1340                           tablat	equ	0xFF5
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           postdec1	equ	0xFE5
  1344                           fsr1h	equ	0xFE2
  1345                           fsr1l	equ	0xFE1
  1346                           
  1347                           	psect	bssBIGRAM
  1348  000296                     __pbssBIGRAM:
  1349                           	opt stack 0
  1350  000296                     _clcd_display_string_details:
  1351                           	opt stack 0
  1352  000296                     	ds	1080
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postdec1	equ	0xFE5
  1360                           fsr1h	equ	0xFE2
  1361                           fsr1l	equ	0xFE1
  1362                           
  1363                           	psect	cstackBANK0
  1364  0000DB                     __pcstackBANK0:
  1365                           	opt stack 0
  1366  0000DB                     parse_cmd_str@i:
  1367                           	opt stack 0
  1368  0000DB                     update_string_data@data:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x0
  1372  0000DB                     	ds	1
  1373  0000DC                     parse_cmd_str@i_1709:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x1
  1377  0000DC                     	ds	1
  1378  0000DD                     ??_update_string_data:
  1379  0000DD                     parse_cmd_str@row:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x2
  1383  0000DD                     	ds	1
  1384  0000DE                     parse_cmd_str@column:
  1385                           	opt stack 0
  1386                           
  1387                           ; 1 bytes @ 0x3
  1388  0000DE                     	ds	1
  1389  0000DF                     parse_cmd_str@i_1700:
  1390                           	opt stack 0
  1391                           
  1392                           ; 1 bytes @ 0x4
  1393  0000DF                     	ds	1
  1394  0000E0                     update_string_data@exist_uid_idx:
  1395                           	opt stack 0
  1396  0000E0                     parse_cmd_str@uid:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x5
  1400  0000E0                     	ds	1
  1401  0000E1                     update_string_data@start_point:
  1402                           	opt stack 0
  1403  0000E1                     parse_cmd_str@scroll:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x6
  1407  0000E1                     	ds	1
  1408  0000E2                     update_string_data@end_point:
  1409                           	opt stack 0
  1410  0000E2                     parse_cmd_str@uid_1697:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x7
  1414  0000E2                     	ds	1
  1415  0000E3                     parse_cmd_str@uid_1708:
  1416                           	opt stack 0
  1417  0000E3                     update_string_data@i:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x8
  1421  0000E3                     	ds	1
  1422  0000E4                     parse_cmd_str@ptr:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0x9
  1426  0000E4                     	ds	1
  1427  0000E5                     ??_reply_to_host:
  1428                           
  1429                           ; 1 bytes @ 0xA
  1430  0000E5                     	ds	1
  1431  0000E6                     parse_cmd_str@temp:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0xB
  1435  0000E6                     	ds	2
  1436  0000E8                     reply_to_host@ch:
  1437                           	opt stack 0
  1438                           
  1439                           ; 1 bytes @ 0xD
  1440  0000E8                     	ds	1
  1441  0000E9                     ??_cmd_consol_task:
  1442                           
  1443                           ; 1 bytes @ 0xE
  1444  0000E9                     	ds	1
  1445  0000EA                     cmd_consol_task@ch:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0xF
  1449  0000EA                     	ds	1
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           postinc0	equ	0xFEE
  1455                           wreg	equ	0xFE8
  1456                           postdec1	equ	0xFE5
  1457                           fsr1h	equ	0xFE2
  1458                           fsr1l	equ	0xFE1
  1459                           
  1460                           	psect	cstackCOMRAM
  1461  000001                     __pcstackCOMRAM:
  1462                           	opt stack 0
  1463  000001                     ??_heart_beat:
  1464  000001                     
  1465                           ; 1 bytes @ 0x0
  1466  000001                     	ds	1
  1467  000002                     ??_INTERRUPT_InterruptManager:
  1468  000002                     
  1469                           ; 1 bytes @ 0x1
  1470  000002                     	ds	14
  1471  000010                     ??_isdigit:
  1472  000010                     ?_strcmp:
  1473                           	opt stack 0
  1474  000010                     ?_strchr:
  1475                           	opt stack 0
  1476  000010                     ?_max_display_support:
  1477                           	opt stack 0
  1478  000010                     ?___awdiv:
  1479                           	opt stack 0
  1480  000010                     ?___lwdiv:
  1481                           	opt stack 0
  1482  000010                     EUSART1_Read@readValue:
  1483                           	opt stack 0
  1484  000010                     EUSART1_Write@txData:
  1485                           	opt stack 0
  1486  000010                     TMR0_SetInterruptHandler@InterruptHandler:
  1487                           	opt stack 0
  1488  000010                     delay@delay:
  1489                           	opt stack 0
  1490  000010                     __delay_MS@delay:
  1491                           	opt stack 0
  1492  000010                     ___awdiv@dividend:
  1493                           	opt stack 0
  1494  000010                     ___lwdiv@dividend:
  1495                           	opt stack 0
  1496  000010                     memcpy@d1:
  1497                           	opt stack 0
  1498  000010                     strcmp@s1:
  1499                           	opt stack 0
  1500  000010                     strcpy@to:
  1501                           	opt stack 0
  1502  000010                     strncpy@to:
  1503                           	opt stack 0
  1504  000010                     strchr@ptr:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0xF
  1508  000010                     	ds	1
  1509  000011                     putch@txData:
  1510                           	opt stack 0
  1511  000011                     _isdigit$2216:
  1512                           	opt stack 0
  1513                           
  1514                           ; 1 bytes @ 0x10
  1515  000011                     	ds	1
  1516  000012                     ??_TMR0_Initialize:
  1517  000012                     ??__delay_MS:
  1518  000012                     ??_delay:
  1519  000012                     isdigit@c:
  1520                           	opt stack 0
  1521  000012                     ___awdiv@divisor:
  1522                           	opt stack 0
  1523  000012                     ___lwdiv@divisor:
  1524                           	opt stack 0
  1525  000012                     memcpy@s1:
  1526                           	opt stack 0
  1527  000012                     strcmp@s2:
  1528                           	opt stack 0
  1529  000012                     strcpy@from:
  1530                           	opt stack 0
  1531  000012                     strncpy@from:
  1532                           	opt stack 0
  1533  000012                     cputs@s:
  1534                           	opt stack 0
  1535  000012                     strchr@chr:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x11
  1539  000012                     	ds	1
  1540  000013                     delay@val:
  1541                           	opt stack 0
  1542  000013                     __delay_MS@val:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x12
  1546  000013                     	ds	1
  1547  000014                     ??_strcmp:
  1548  000014                     ??_strchr:
  1549  000014                     ___awdiv@counter:
  1550                           	opt stack 0
  1551  000014                     ___lwdiv@counter:
  1552                           	opt stack 0
  1553  000014                     memcpy@n:
  1554                           	opt stack 0
  1555  000014                     puts@s:
  1556                           	opt stack 0
  1557  000014                     strcpy@cp:
  1558                           	opt stack 0
  1559  000014                     strncpy@size:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x13
  1563  000014                     	ds	1
  1564  000015                     ___awdiv@sign:
  1565                           	opt stack 0
  1566  000015                     strcmp@r:
  1567                           	opt stack 0
  1568  000015                     delay@i:
  1569                           	opt stack 0
  1570  000015                     ___lwdiv@quotient:
  1571                           	opt stack 0
  1572                           
  1573                           ; 2 bytes @ 0x14
  1574  000015                     	ds	1
  1575  000016                     ?_strspn:
  1576                           	opt stack 0
  1577  000016                     ?_strcspn:
  1578                           	opt stack 0
  1579  000016                     ___awdiv@quotient:
  1580                           	opt stack 0
  1581  000016                     memcpy@d:
  1582                           	opt stack 0
  1583  000016                     strncpy@cp:
  1584                           	opt stack 0
  1585  000016                     strcspn@s1:
  1586                           	opt stack 0
  1587  000016                     strspn@s1:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x15
  1591  000016                     	ds	1
  1592  000017                     ?___lwmod:
  1593                           	opt stack 0
  1594  000017                     write_lcd_cmd@cmd:
  1595                           	opt stack 0
  1596  000017                     write_lcd_data@data:
  1597                           	opt stack 0
  1598  000017                     ___lwmod@dividend:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0x16
  1602  000017                     	ds	1
  1603  000018                     ?___wmul:
  1604                           	opt stack 0
  1605  000018                     set_cursor@col_number:
  1606                           	opt stack 0
  1607  000018                     write_str@str:
  1608                           	opt stack 0
  1609  000018                     ___wmul@multiplier:
  1610                           	opt stack 0
  1611  000018                     memcpy@s:
  1612                           	opt stack 0
  1613  000018                     strcspn@s2:
  1614                           	opt stack 0
  1615  000018                     strspn@s2:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x17
  1619  000018                     	ds	1
  1620  000019                     set_cursor@row_number:
  1621                           	opt stack 0
  1622  000019                     ___lwmod@divisor:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x18
  1626  000019                     	ds	1
  1627  00001A                     ??_strspn:
  1628  00001A                     ??_strcspn:
  1629  00001A                     write_str@i:
  1630                           	opt stack 0
  1631  00001A                     ___wmul@multiplicand:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x19
  1635  00001A                     	ds	1
  1636  00001B                     ___lwmod@counter:
  1637                           	opt stack 0
  1638  00001B                     strcspn@i:
  1639                           	opt stack 0
  1640  00001B                     strspn@i:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x1A
  1644  00001B                     	ds	1
  1645  00001C                     ___wmul@product:
  1646                           	opt stack 0
  1647                           
  1648                           ; 2 bytes @ 0x1B
  1649  00001C                     	ds	1
  1650  00001D                     ?_strtok:
  1651                           	opt stack 0
  1652  00001D                     strtok@s1:
  1653                           	opt stack 0
  1654                           
  1655                           ; 2 bytes @ 0x1C
  1656  00001D                     	ds	1
  1657  00001E                     ?_printf:
  1658                           	opt stack 0
  1659  00001E                     ?_strlen:
  1660                           	opt stack 0
  1661  00001E                     ?_atoi:
  1662                           	opt stack 0
  1663  00001E                     printf@f:
  1664                           	opt stack 0
  1665  00001E                     atoi@s:
  1666                           	opt stack 0
  1667  00001E                     strlen@s:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x1D
  1671  00001E                     	ds	1
  1672  00001F                     strtok@s2:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x1E
  1676  00001F                     	ds	1
  1677  000020                     ??_strlen:
  1678  000020                     ??_atoi:
  1679                           
  1680                           ; 1 bytes @ 0x1F
  1681  000020                     	ds	1
  1682  000021                     
  1683                           ; 1 bytes @ 0x20
  1684  000021                     	ds	1
  1685  000022                     atoi@sign:
  1686                           	opt stack 0
  1687  000022                     strlen@cp:
  1688                           	opt stack 0
  1689                           
  1690                           ; 2 bytes @ 0x21
  1691  000022                     	ds	1
  1692  000023                     atoi@a:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x22
  1696  000023                     	ds	1
  1697  000024                     ?_strncmp:
  1698                           	opt stack 0
  1699  000024                     scroll_off@clcd_display_string_details:
  1700                           	opt stack 0
  1701  000024                     memset@p1:
  1702                           	opt stack 0
  1703  000024                     strncmp@s1:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0x23
  1707  000024                     	ds	2
  1708  000026                     ??_printf:
  1709  000026                     ??_scroll_off:
  1710  000026                     memset@c:
  1711                           	opt stack 0
  1712  000026                     strncmp@s2:
  1713                           	opt stack 0
  1714                           
  1715                           ; 2 bytes @ 0x25
  1716  000026                     	ds	1
  1717  000027                     printf@flag:
  1718                           	opt stack 0
  1719                           
  1720                           ; 1 bytes @ 0x26
  1721  000027                     	ds	1
  1722  000028                     printf@prec:
  1723                           	opt stack 0
  1724  000028                     memset@n:
  1725                           	opt stack 0
  1726  000028                     strncmp@len:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x27
  1730  000028                     	ds	1
  1731  000029                     printf@cp:
  1732                           	opt stack 0
  1733                           
  1734                           ; 2 bytes @ 0x28
  1735  000029                     	ds	1
  1736  00002A                     ??_strncmp:
  1737  00002A                     scroll_off@k:
  1738                           	opt stack 0
  1739  00002A                     memset@p:
  1740                           	opt stack 0
  1741                           
  1742                           ; 2 bytes @ 0x29
  1743  00002A                     	ds	1
  1744  00002B                     printf@ap:
  1745                           	opt stack 0
  1746                           
  1747                           ; 2 bytes @ 0x2A
  1748  00002B                     	ds	1
  1749  00002C                     scroll_off@line:
  1750                           	opt stack 0
  1751  00002C                     scroll_left_to_right@clcd_display_string_details:
  1752                           	opt stack 0
  1753  00002C                     scroll_right_to_left@clcd_display_string_details:
  1754                           	opt stack 0
  1755  00002C                     get_str@str:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x2B
  1759  00002C                     	ds	1
  1760  00002D                     ?_strstr:
  1761                           	opt stack 0
  1762  00002D                     scroll_off@display_char_count:
  1763                           	opt stack 0
  1764  00002D                     printf@val:
  1765                           	opt stack 0
  1766  00002D                     strstr@s1:
  1767                           	opt stack 0
  1768                           
  1769                           ; 2 bytes @ 0x2C
  1770  00002D                     	ds	1
  1771  00002E                     ??_scroll_left_to_right:
  1772  00002E                     ??_scroll_right_to_left:
  1773  00002E                     scroll_off@str_len:
  1774                           	opt stack 0
  1775  00002E                     get_str@data_str:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0x2D
  1779  00002E                     	ds	1
  1780  00002F                     printf@c:
  1781                           	opt stack 0
  1782  00002F                     scroll_off@j:
  1783                           	opt stack 0
  1784  00002F                     strstr@s2:
  1785                           	opt stack 0
  1786                           
  1787                           ; 2 bytes @ 0x2E
  1788  00002F                     	ds	1
  1789  000030                     init_clcd_cusotom_lcd@clcd_init_col:
  1790                           	opt stack 0
  1791  000030                     conflict_check@new_start_point:
  1792                           	opt stack 0
  1793  000030                     copy_data@clcd_str_data:
  1794                           	opt stack 0
  1795  000030                     collect_row@str:
  1796                           	opt stack 0
  1797  000030                     get_direction@str:
  1798                           	opt stack 0
  1799  000030                     get_dis_frq@str:
  1800                           	opt stack 0
  1801  000030                     collect_column@str:
  1802                           	opt stack 0
  1803                           
  1804                           ; 2 bytes @ 0x2F
  1805  000030                     	ds	1
  1806  000031                     init_clcd_cusotom_lcd@clcd_init_row:
  1807                           	opt stack 0
  1808  000031                     conflict_check@new_end_point:
  1809                           	opt stack 0
  1810  000031                     scroll_off@i:
  1811                           	opt stack 0
  1812                           
  1813                           ; 2 bytes @ 0x30
  1814  000031                     	ds	1
  1815  000032                     ??_conflict_check:
  1816  000032                     copy_data@data:
  1817                           	opt stack 0
  1818  000032                     collect_row@data_row:
  1819                           	opt stack 0
  1820  000032                     get_direction@data_direction:
  1821                           	opt stack 0
  1822  000032                     get_dis_frq@data_frq:
  1823                           	opt stack 0
  1824  000032                     collect_column@data_column:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x31
  1828  000032                     	ds	2
  1829  000034                     ??_copy_data:
  1830  000034                     ??_collect_row:
  1831  000034                     ??_get_direction:
  1832  000034                     ??_get_dis_frq:
  1833  000034                     ??_collect_column:
  1834                           
  1835                           ; 1 bytes @ 0x33
  1836  000034                     	ds	1
  1837  000035                     conflict_check@exist_uid_idx:
  1838                           	opt stack 0
  1839                           
  1840                           ; 1 bytes @ 0x34
  1841  000035                     	ds	1
  1842  000036                     conflict_check@conflict:
  1843                           	opt stack 0
  1844  000036                     scroll_left_to_right@line:
  1845                           	opt stack 0
  1846                           
  1847                           ; 1 bytes @ 0x35
  1848  000036                     	ds	1
  1849  000037                     conflict_check@i:
  1850                           	opt stack 0
  1851  000037                     collect_row@i:
  1852                           	opt stack 0
  1853  000037                     get_direction@i:
  1854                           	opt stack 0
  1855  000037                     get_dis_frq@i:
  1856                           	opt stack 0
  1857  000037                     collect_column@i:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x36
  1861  000037                     	ds	2
  1862  000039                     collect_row@row:
  1863                           	opt stack 0
  1864  000039                     get_direction@direction:
  1865                           	opt stack 0
  1866  000039                     get_dis_frq@frq:
  1867                           	opt stack 0
  1868  000039                     collect_column@column:
  1869                           	opt stack 0
  1870                           
  1871                           ; 1 bytes @ 0x38
  1872  000039                     	ds	1
  1873  00003A                     parse_cmd_str@str:
  1874                           	opt stack 0
  1875                           
  1876                           ; 2 bytes @ 0x39
  1877  00003A                     	ds	1
  1878  00003B                     scroll_right_to_left@line:
  1879                           	opt stack 0
  1880                           
  1881                           ; 1 bytes @ 0x3A
  1882  00003B                     	ds	1
  1883  00003C                     ??_make_display:
  1884  00003C                     ??_parse_cmd_str:
  1885                           
  1886                           ; 1 bytes @ 0x3B
  1887  00003C                     	ds	3
  1888  00003F                     make_display@count:
  1889                           	opt stack 0
  1890                           
  1891                           ; 2 bytes @ 0x3E
  1892  00003F                     	ds	2
  1893  000041                     tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1h	equ	0xFE2
  1901                           fsr1l	equ	0xFE1
  1902                           
  1903                           ; 1 bytes @ 0x40
  1904 ;;
  1905 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1906 ;;
  1907 ;; *************** function _main *****************
  1908 ;; Defined at:
  1909 ;;		line 77 in file "main.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;		None
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;Total ram usage:        0 bytes
  1928 ;; Hardware stack levels required when called:   14
  1929 ;; This function calls:
  1930 ;;		_SYSTEM_Initialize
  1931 ;;		_TMR0_SetInterruptHandler
  1932 ;;		_TMR0_StartTimer
  1933 ;;		_TMR0_StopTimer
  1934 ;;		_TMR1_StopTimer
  1935 ;;		_TMR5_StopTimer
  1936 ;;		__delay_MS
  1937 ;;		_cmd_consol_task
  1938 ;;		_console_init
  1939 ;;		_make_display
  1940 ;;		_printf
  1941 ;; This function is called by:
  1942 ;;		Startup code after reset
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text0
  1947  003404                     __ptext0:
  1948                           	opt stack 0
  1949  003404                     _main:
  1950                           	opt stack 17
  1951                           
  1952                           ;main.c: 80: SYSTEM_Initialize();
  1953                           
  1954                           ;incstack = 0
  1955  003404  EC4C  F01D         	call	_SYSTEM_Initialize	;wreg free
  1956                           
  1957                           ;main.c: 81: TMR5_StopTimer();
  1958  003408  EC09  F01E         	call	_TMR5_StopTimer	;wreg free
  1959                           
  1960                           ;main.c: 82: TMR1_StopTimer();
  1961  00340C  EC0F  F01E         	call	_TMR1_StopTimer	;wreg free
  1962                           
  1963                           ;main.c: 83: TMR0_StopTimer();
  1964  003410  EC11  F01E         	call	_TMR0_StopTimer	;wreg free
  1965                           
  1966                           ;main.c: 85: TMR0_SetInterruptHandler(make_array);
  1967  003414  0ED0               	movlw	low _make_array
  1968  003416  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  1969  003418  0E3B               	movlw	high _make_array
  1970  00341A  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  1971  00341C  ECFD  F01D         	call	_TMR0_SetInterruptHandler	;wreg free
  1972                           
  1973                           ;main.c: 105: (INTCONbits.GIE = 1);
  1974  003420  8EF2               	bsf	intcon,7,c	;volatile
  1975                           
  1976                           ;main.c: 111: (INTCONbits.PEIE = 1);
  1977  003422  8CF2               	bsf	intcon,6,c	;volatile
  1978                           
  1979                           ;main.c: 115: console_init();
  1980  003424  ECC8  F018         	call	_console_init	;wreg free
  1981                           
  1982                           ;main.c: 116: _delay_MS(1000);
  1983  003428  0E03               	movlw	3
  1984  00342A  6E11               	movwf	__delay_MS@delay+1,c
  1985  00342C  0EE8               	movlw	232
  1986  00342E  6E10               	movwf	__delay_MS@delay,c
  1987  003430  EC86  F01B         	call	__delay_MS	;wreg free
  1988                           
  1989                           ;main.c: 118: printf("Init_complete..\r\n");
  1990  003434  0EF6               	movlw	low STR_135
  1991  003436  6E1E               	movwf	printf@f,c
  1992  003438  0EFD               	movlw	high STR_135
  1993  00343A  6E1F               	movwf	printf@f+1,c
  1994  00343C  EC48  F012         	call	_printf	;wreg free
  1995                           
  1996                           ;main.c: 133: TMR0_StartTimer();
  1997  003440  EC15  F01E         	call	_TMR0_StartTimer	;wreg free
  1998  003444                     l7810:
  1999                           
  2000                           ;main.c: 137: {
  2001                           ;main.c: 139: cmd_consol_task();
  2002  003444  EC4C  F00F         	call	_cmd_consol_task	;wreg free
  2003                           
  2004                           ;main.c: 140: if(display == 1){make_display();display = 0;}
  2005  003448  0100               	movlb	0	; () banked
  2006  00344A  0583               	decf	_display& (0+255),w,b
  2007  00344C  A4D8               	btfss	status,2,c
  2008  00344E  D7FA               	goto	l7810
  2009                           
  2010                           ; BSR set to: 0
  2011  003450  EC57  F011         	call	_make_display	;wreg free
  2012  003454  0E00               	movlw	0
  2013  003456  0100               	movlb	0	; () banked
  2014  003458  6F83               	movwf	_display& (0+255),b
  2015                           
  2016                           ; BSR set to: 0
  2017                           
  2018                           ; BSR set to: 0
  2019  00345A  D7F4               	goto	l7810
  2020  00345C                     __end_of_main:
  2021                           	opt stack 0
  2022                           tblptru	equ	0xFF8
  2023                           tblptrh	equ	0xFF7
  2024                           tblptrl	equ	0xFF6
  2025                           tablat	equ	0xFF5
  2026                           intcon	equ	0xFF2
  2027                           postinc0	equ	0xFEE
  2028                           wreg	equ	0xFE8
  2029                           postdec1	equ	0xFE5
  2030                           fsr1h	equ	0xFE2
  2031                           fsr1l	equ	0xFE1
  2032                           status	equ	0xFD8
  2033                           
  2034 ;; *************** function _console_init *****************
  2035 ;; Defined at:
  2036 ;;		line 454 in file "cmd_consol.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;		None
  2039 ;; Auto vars:     Size  Location     Type
  2040 ;;		None
  2041 ;; Return value:  Size  Location     Type
  2042 ;;                  1    wreg      void 
  2043 ;; Registers used:
  2044 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2045 ;; Tracked objects:
  2046 ;;		On entry : 0/0
  2047 ;;		On exit  : 0/0
  2048 ;;		Unchanged: 0/0
  2049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2054 ;;Total ram usage:        0 bytes
  2055 ;; Hardware stack levels used:    1
  2056 ;; Hardware stack levels required when called:    7
  2057 ;; This function calls:
  2058 ;;		_clear_cmd_data
  2059 ;;		_memset
  2060 ;; This function is called by:
  2061 ;;		_main
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           	psect	text1
  2066  003190                     __ptext1:
  2067                           	opt stack 0
  2068  003190                     _console_init:
  2069                           	opt stack 23
  2070                           
  2071                           ;cmd_consol.c: 455: cmd_consol_state = CMD_CONSOL_INIT;
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;incstack = 0
  2075  003190  0E00               	movlw	0
  2076  003192  0100               	movlb	0	; () banked
  2077  003194  6F82               	movwf	_cmd_consol_state& (0+255),b
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;cmd_consol.c: 456: clear_cmd_data();
  2081  003196  EC76  F01C         	call	_clear_cmd_data	;wreg free
  2082                           
  2083                           ;cmd_consol.c: 457: valid_cmd = 0;
  2084  00319A  0E00               	movlw	0
  2085  00319C  0100               	movlb	0	; () banked
  2086  00319E  6F84               	movwf	_valid_cmd& (0+255),b
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;cmd_consol.c: 458: clcd_init_row = 0;
  2090  0031A0  0E00               	movlw	0
  2091  0031A2  6E41               	movwf	_clcd_init_row,c
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;cmd_consol.c: 459: clcd_init_col = 0;
  2095  0031A4  0E00               	movlw	0
  2096  0031A6  0100               	movlb	0	; () banked
  2097  0031A8  6F81               	movwf	_clcd_init_col& (0+255),b
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;cmd_consol.c: 460: check = 0;
  2101  0031AA  0E00               	movlw	0
  2102  0031AC  0100               	movlb	0	; () banked
  2103  0031AE  6F80               	movwf	_check& (0+255),b
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;cmd_consol.c: 461: memset(CMD, 0, sizeof (CMD));
  2107  0031B0  0ECC               	movlw	low _CMD
  2108  0031B2  6E24               	movwf	memset@p1,c
  2109  0031B4  0E00               	movlw	high _CMD
  2110  0031B6  6E25               	movwf	memset@p1+1,c
  2111  0031B8  0E00               	movlw	0
  2112  0031BA  6E27               	movwf	memset@c+1,c
  2113  0031BC  0E00               	movlw	0
  2114  0031BE  6E26               	movwf	memset@c,c
  2115  0031C0  0E00               	movlw	0
  2116  0031C2  6E29               	movwf	memset@n+1,c
  2117  0031C4  0E0F               	movlw	15
  2118  0031C6  6E28               	movwf	memset@n,c
  2119  0031C8  EC63  F01B         	call	_memset	;wreg free
  2120                           
  2121                           ;cmd_consol.c: 462: memset(str_data, 0, sizeof (str_data));
  2122  0031CC  0E50               	movlw	low _str_data
  2123  0031CE  6E24               	movwf	memset@p1,c
  2124  0031D0  0E01               	movlw	high _str_data
  2125  0031D2  6E25               	movwf	memset@p1+1,c
  2126  0031D4  0E00               	movlw	0
  2127  0031D6  6E27               	movwf	memset@c+1,c
  2128  0031D8  0E00               	movlw	0
  2129  0031DA  6E26               	movwf	memset@c,c
  2130  0031DC  0E00               	movlw	0
  2131  0031DE  6E29               	movwf	memset@n+1,c
  2132  0031E0  0E28               	movlw	40
  2133  0031E2  6E28               	movwf	memset@n,c
  2134  0031E4  EC63  F01B         	call	_memset	;wreg free
  2135                           
  2136                           ;cmd_consol.c: 463: memset(uart_str, 0, sizeof (uart_str));
  2137  0031E8  0E00               	movlw	low _uart_str
  2138  0031EA  6E24               	movwf	memset@p1,c
  2139  0031EC  0E02               	movlw	high _uart_str
  2140  0031EE  6E25               	movwf	memset@p1+1,c
  2141  0031F0  0E00               	movlw	0
  2142  0031F2  6E27               	movwf	memset@c+1,c
  2143  0031F4  0E00               	movlw	0
  2144  0031F6  6E26               	movwf	memset@c,c
  2145  0031F8  0E00               	movlw	0
  2146  0031FA  6E29               	movwf	memset@n+1,c
  2147  0031FC  0E96               	movlw	150
  2148  0031FE  6E28               	movwf	memset@n,c
  2149  003200  EC63  F01B         	call	_memset	;wreg free
  2150  003204  0012               	return		;funcret
  2151  003206                     __end_of_console_init:
  2152                           	opt stack 0
  2153                           tblptru	equ	0xFF8
  2154                           tblptrh	equ	0xFF7
  2155                           tblptrl	equ	0xFF6
  2156                           tablat	equ	0xFF5
  2157                           intcon	equ	0xFF2
  2158                           postinc0	equ	0xFEE
  2159                           wreg	equ	0xFE8
  2160                           postdec1	equ	0xFE5
  2161                           fsr1h	equ	0xFE2
  2162                           fsr1l	equ	0xFE1
  2163                           status	equ	0xFD8
  2164                           
  2165 ;; *************** function _clear_cmd_data *****************
  2166 ;; Defined at:
  2167 ;;		line 8 in file "cmd_consol.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;		None
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;		None
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2185 ;;Total ram usage:        0 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:    6
  2188 ;; This function calls:
  2189 ;;		_memset
  2190 ;; This function is called by:
  2191 ;;		_console_init
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text2
  2196  0038EC                     __ptext2:
  2197                           	opt stack 0
  2198  0038EC                     _clear_cmd_data:
  2199                           	opt stack 23
  2200                           
  2201                           ;cmd_consol.c: 9: memset(&cmd_data, 0, sizeof (CMD_CONSOL_DATA));
  2202                           
  2203                           ;incstack = 0
  2204  0038EC  0E86               	movlw	low _cmd_data
  2205  0038EE  6E24               	movwf	memset@p1,c
  2206  0038F0  0E00               	movlw	high _cmd_data
  2207  0038F2  6E25               	movwf	memset@p1+1,c
  2208  0038F4  0E00               	movlw	0
  2209  0038F6  6E27               	movwf	memset@c+1,c
  2210  0038F8  0E00               	movlw	0
  2211  0038FA  6E26               	movwf	memset@c,c
  2212  0038FC  0E00               	movlw	0
  2213  0038FE  6E29               	movwf	memset@n+1,c
  2214  003900  0E32               	movlw	50
  2215  003902  6E28               	movwf	memset@n,c
  2216  003904  EC63  F01B         	call	_memset	;wreg free
  2217                           
  2218                           ;cmd_consol.c: 11: cmd_data.scroll = -1;
  2219  003908  0100               	movlb	0	; () banked
  2220  00390A  69B5               	setf	(_cmd_data+47)& (0+255),b
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;cmd_consol.c: 12: cmd_data.end_col = cmd_data.start_col = -1;
  2224  00390C  0100               	movlb	0	; () banked
  2225  00390E  69B1               	setf	(_cmd_data+43)& (0+255),b
  2226  003910  0100               	movlb	0	; () banked
  2227  003912  69B3               	setf	(_cmd_data+45)& (0+255),b
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;cmd_consol.c: 13: cmd_data.end_row = cmd_data.end_row = -1;
  2231  003914  0100               	movlb	0	; () banked
  2232  003916  69B2               	setf	(_cmd_data+44)& (0+255),b
  2233  003918  0100               	movlb	0	; () banked
  2234  00391A  69B2               	setf	(_cmd_data+44)& (0+255),b
  2235                           
  2236                           ; BSR set to: 0
  2237  00391C  0012               	return		;funcret
  2238  00391E                     __end_of_clear_cmd_data:
  2239                           	opt stack 0
  2240                           tblptru	equ	0xFF8
  2241                           tblptrh	equ	0xFF7
  2242                           tblptrl	equ	0xFF6
  2243                           tablat	equ	0xFF5
  2244                           intcon	equ	0xFF2
  2245                           postinc0	equ	0xFEE
  2246                           wreg	equ	0xFE8
  2247                           postdec1	equ	0xFE5
  2248                           fsr1h	equ	0xFE2
  2249                           fsr1l	equ	0xFE1
  2250                           status	equ	0xFD8
  2251                           
  2252 ;; *************** function _cmd_consol_task *****************
  2253 ;; Defined at:
  2254 ;;		line 466 in file "cmd_consol.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;		None
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;  ch              1   15[BANK0 ] unsigned char 
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      void 
  2261 ;; Registers used:
  2262 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;Total ram usage:        2 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:   13
  2275 ;; This function calls:
  2276 ;;		_getch
  2277 ;;		_memset
  2278 ;;		_parse_cmd_str
  2279 ;;		_printf
  2280 ;;		_puts
  2281 ;;		_reply_to_host
  2282 ;;		_strcmp
  2283 ;; This function is called by:
  2284 ;;		_main
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text3
  2289  001E98                     __ptext3:
  2290                           	opt stack 0
  2291  001E98                     _cmd_consol_task:
  2292                           	opt stack 17
  2293                           
  2294                           ;cmd_consol.c: 467: if ((eusart1RxCount) > 0) {
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;incstack = 0
  2298  001E98  5044               	movf	_eusart1RxCount,w,c	;volatile
  2299  001E9A  B4D8               	btfsc	status,2,c
  2300  001E9C  D0FF               	goto	l7688
  2301                           
  2302                           ;cmd_consol.c: 468: static int i = 0;
  2303                           ;cmd_consol.c: 469: unsigned char ch = 0;
  2304  001E9E  0E00               	movlw	0
  2305  001EA0  0100               	movlb	0	; () banked
  2306  001EA2  6FEA               	movwf	cmd_consol_task@ch& (0+255),b
  2307                           
  2308                           ;cmd_consol.c: 470: while ((eusart1RxCount)) {
  2309  001EA4  D07E               	goto	l7650
  2310  001EA6                     l7618:
  2311                           
  2312                           ;cmd_consol.c: 471: ch = getch();
  2313  001EA6  EC06  F01E         	call	_getch	;wreg free
  2314  001EAA  0100               	movlb	0	; () banked
  2315  001EAC  6FEA               	movwf	cmd_consol_task@ch& (0+255),b
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;cmd_consol.c: 472: if (ch == '\n' || ch == '\r') {
  2319  001EAE  0E0A               	movlw	10
  2320  001EB0  0100               	movlb	0	; () banked
  2321  001EB2  19EA               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2322  001EB4  B4D8               	btfsc	status,2,c
  2323  001EB6  D005               	goto	l7624
  2324                           
  2325                           ; BSR set to: 0
  2326  001EB8  0E0D               	movlw	13
  2327  001EBA  0100               	movlb	0	; () banked
  2328  001EBC  19EA               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2329  001EBE  A4D8               	btfss	status,2,c
  2330  001EC0  D00F               	goto	l7630
  2331  001EC2                     l7624:
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;cmd_consol.c: 473: i = 0;
  2335  001EC2  0E00               	movlw	0
  2336  001EC4  0100               	movlb	0	; () banked
  2337  001EC6  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2338  001EC8  0E00               	movlw	0
  2339  001ECA  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2340                           
  2341                           ;cmd_consol.c: 474: check = 1;
  2342  001ECC  0E01               	movlw	1
  2343  001ECE  0100               	movlb	0	; () banked
  2344  001ED0  6F80               	movwf	_check& (0+255),b
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;cmd_consol.c: 475: printf("\r\n");
  2348  001ED2  0E9F               	movlw	low (STR_57+9)
  2349  001ED4  6E1E               	movwf	printf@f,c
  2350  001ED6  0EFE               	movlw	high (STR_57+9)
  2351  001ED8  6E1F               	movwf	printf@f+1,c
  2352  001EDA  EC48  F012         	call	_printf	;wreg free
  2353                           
  2354                           ;cmd_consol.c: 476: break;
  2355  001EDE  D064               	goto	l7652
  2356  001EE0                     l7630:
  2357  001EE0  0E08               	movlw	8
  2358  001EE2  0100               	movlb	0	; () banked
  2359  001EE4  19EA               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2360  001EE6  A4D8               	btfss	status,2,c
  2361  001EE8  D018               	goto	l7638
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;cmd_consol.c: 478: uart_str[--i] = 0;
  2365  001EEA  0100               	movlb	0	; () banked
  2366  001EEC  077A               	decf	cmd_consol_task@i& (0+255),f,b
  2367  001EEE  A0D8               	btfss	status,0,c
  2368  001EF0  077B               	decf	(cmd_consol_task@i+1)& (0+255),f,b
  2369  001EF2  0E00               	movlw	low _uart_str
  2370  001EF4  0100               	movlb	0	; () banked
  2371  001EF6  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2372  001EF8  6ED9               	movwf	fsr2l,c
  2373  001EFA  0E02               	movlw	high _uart_str
  2374  001EFC  0100               	movlb	0	; () banked
  2375  001EFE  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2376  001F00  6EDA               	movwf	fsr2h,c
  2377  001F02  0E00               	movlw	0
  2378  001F04  6EDF               	movwf	indf2,c
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;cmd_consol.c: 479: printf("%c", ch);
  2382  001F06  0EF9               	movlw	low STR_128
  2383  001F08  6E1E               	movwf	printf@f,c
  2384  001F0A  0EFF               	movlw	high STR_128
  2385  001F0C  6E1F               	movwf	printf@f+1,c
  2386  001F0E  C0EA  F020         	movff	cmd_consol_task@ch,?_printf+2
  2387  001F12  6A21               	clrf	?_printf+3,c
  2388  001F14  EC48  F012         	call	_printf	;wreg free
  2389                           
  2390                           ;cmd_consol.c: 480: continue;
  2391  001F18  D044               	goto	l7650
  2392  001F1A                     l7638:
  2393                           
  2394                           ;cmd_consol.c: 482: uart_str[i] = ch;
  2395  001F1A  0E00               	movlw	low _uart_str
  2396  001F1C  0100               	movlb	0	; () banked
  2397  001F1E  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2398  001F20  6ED9               	movwf	fsr2l,c
  2399  001F22  0E02               	movlw	high _uart_str
  2400  001F24  0100               	movlb	0	; () banked
  2401  001F26  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2402  001F28  6EDA               	movwf	fsr2h,c
  2403  001F2A  C0EA  FFDF         	movff	cmd_consol_task@ch,indf2
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;cmd_consol.c: 483: printf("%c", uart_str[i]);
  2407  001F2E  0EF9               	movlw	low STR_128
  2408  001F30  6E1E               	movwf	printf@f,c
  2409  001F32  0EFF               	movlw	high STR_128
  2410  001F34  6E1F               	movwf	printf@f+1,c
  2411  001F36  0E00               	movlw	low _uart_str
  2412  001F38  0100               	movlb	0	; () banked
  2413  001F3A  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2414  001F3C  6ED9               	movwf	fsr2l,c
  2415  001F3E  0E02               	movlw	high _uart_str
  2416  001F40  0100               	movlb	0	; () banked
  2417  001F42  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2418  001F44  6EDA               	movwf	fsr2h,c
  2419  001F46  50DF               	movf	indf2,w,c
  2420  001F48  0100               	movlb	0	; () banked
  2421  001F4A  6FE9               	movwf	??_cmd_consol_task& (0+255),b
  2422  001F4C  0100               	movlb	0	; () banked
  2423  001F4E  51E9               	movf	??_cmd_consol_task& (0+255),w,b
  2424  001F50  6E20               	movwf	?_printf+2,c
  2425  001F52  6A21               	clrf	?_printf+3,c
  2426  001F54  EC48  F012         	call	_printf	;wreg free
  2427                           
  2428                           ;cmd_consol.c: 484: }
  2429                           ;cmd_consol.c: 485: if (strcmp(uart_str, "KLM+") == 0) {
  2430  001F58  0E00               	movlw	low _uart_str
  2431  001F5A  6E10               	movwf	strcmp@s1,c
  2432  001F5C  0E02               	movlw	high _uart_str
  2433  001F5E  6E11               	movwf	strcmp@s1+1,c
  2434  001F60  0ED4               	movlw	low STR_130
  2435  001F62  6E12               	movwf	strcmp@s2,c
  2436  001F64  0EFF               	movlw	high STR_130
  2437  001F66  6E13               	movwf	strcmp@s2+1,c
  2438  001F68  ECD1  F01A         	call	_strcmp	;wreg free
  2439  001F6C  5010               	movf	?_strcmp,w,c
  2440  001F6E  1011               	iorwf	?_strcmp+1,w,c
  2441  001F70  A4D8               	btfss	status,2,c
  2442  001F72  D014               	goto	l7648
  2443                           
  2444                           ;cmd_consol.c: 486: memset(uart_str, 0, sizeof (uart_str));
  2445  001F74  0E00               	movlw	low _uart_str
  2446  001F76  6E24               	movwf	memset@p1,c
  2447  001F78  0E02               	movlw	high _uart_str
  2448  001F7A  6E25               	movwf	memset@p1+1,c
  2449  001F7C  0E00               	movlw	0
  2450  001F7E  6E27               	movwf	memset@c+1,c
  2451  001F80  0E00               	movlw	0
  2452  001F82  6E26               	movwf	memset@c,c
  2453  001F84  0E00               	movlw	0
  2454  001F86  6E29               	movwf	memset@n+1,c
  2455  001F88  0E96               	movlw	150
  2456  001F8A  6E28               	movwf	memset@n,c
  2457  001F8C  EC63  F01B         	call	_memset	;wreg free
  2458                           
  2459                           ;cmd_consol.c: 487: i = 0;
  2460  001F90  0E00               	movlw	0
  2461  001F92  0100               	movlb	0	; () banked
  2462  001F94  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2463  001F96  0E00               	movlw	0
  2464  001F98  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2465                           
  2466                           ;cmd_consol.c: 488: continue;
  2467  001F9A  D003               	goto	l7650
  2468  001F9C                     l7648:
  2469                           
  2470                           ;cmd_consol.c: 489: }
  2471                           ;cmd_consol.c: 490: i++;
  2472  001F9C  0100               	movlb	0	; () banked
  2473  001F9E  4B7A               	infsnz	cmd_consol_task@i& (0+255),f,b
  2474  001FA0  2B7B               	incf	(cmd_consol_task@i+1)& (0+255),f,b
  2475  001FA2                     l7650:
  2476  001FA2  5044               	movf	_eusart1RxCount,w,c	;volatile
  2477  001FA4  A4D8               	btfss	status,2,c
  2478  001FA6  D77F               	goto	l7618
  2479  001FA8                     l7652:
  2480                           
  2481                           ;cmd_consol.c: 491: }
  2482                           ;cmd_consol.c: 492: if (i > 150) {
  2483  001FA8  0100               	movlb	0	; () banked
  2484  001FAA  BF7B               	btfsc	(cmd_consol_task@i+1)& (0+255),7,b
  2485  001FAC  D077               	goto	l7688
  2486  001FAE  0100               	movlb	0	; () banked
  2487  001FB0  517B               	movf	(cmd_consol_task@i+1)& (0+255),w,b
  2488  001FB2  E105               	bnz	u8230
  2489  001FB4  0E97               	movlw	151
  2490  001FB6  0100               	movlb	0	; () banked
  2491  001FB8  5D7A               	subwf	cmd_consol_task@i& (0+255),w,b
  2492  001FBA  A0D8               	btfss	status,0,c
  2493  001FBC  D06F               	goto	l7688
  2494  001FBE                     u8230:
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;cmd_consol.c: 493: puts("ERR_CMD_LEN");
  2498  001FBE  0EF6               	movlw	low STR_131
  2499  001FC0  6E14               	movwf	puts@s,c
  2500  001FC2  0EFE               	movlw	high STR_131
  2501  001FC4  6E15               	movwf	puts@s+1,c
  2502  001FC6  EC91  F01D         	call	_puts	;wreg free
  2503                           
  2504                           ;cmd_consol.c: 494: i = 0;
  2505  001FCA  0E00               	movlw	0
  2506  001FCC  0100               	movlb	0	; () banked
  2507  001FCE  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2508  001FD0  0E00               	movlw	0
  2509  001FD2  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2510                           
  2511                           ; BSR set to: 0
  2512                           ;cmd_consol.c: 495: }
  2513                           ;cmd_consol.c: 496: }
  2514                           ;cmd_consol.c: 497: switch (cmd_consol_state) {
  2515                           
  2516                           ; BSR set to: 0
  2517  001FD4  D063               	goto	l7688
  2518  001FD6                     l7658:
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;cmd_consol.c: 499: {
  2522                           ;cmd_consol.c: 500: memset(CMD, 0, sizeof (CMD));
  2523  001FD6  0ECC               	movlw	low _CMD
  2524  001FD8  6E24               	movwf	memset@p1,c
  2525  001FDA  0E00               	movlw	high _CMD
  2526  001FDC  6E25               	movwf	memset@p1+1,c
  2527  001FDE  0E00               	movlw	0
  2528  001FE0  6E27               	movwf	memset@c+1,c
  2529  001FE2  0E00               	movlw	0
  2530  001FE4  6E26               	movwf	memset@c,c
  2531  001FE6  0E00               	movlw	0
  2532  001FE8  6E29               	movwf	memset@n+1,c
  2533  001FEA  0E0F               	movlw	15
  2534  001FEC  6E28               	movwf	memset@n,c
  2535  001FEE  EC63  F01B         	call	_memset	;wreg free
  2536                           
  2537                           ;cmd_consol.c: 501: memset(uart_str, 0, sizeof (uart_str));
  2538  001FF2  0E00               	movlw	low _uart_str
  2539  001FF4  6E24               	movwf	memset@p1,c
  2540  001FF6  0E02               	movlw	high _uart_str
  2541  001FF8  6E25               	movwf	memset@p1+1,c
  2542  001FFA  0E00               	movlw	0
  2543  001FFC  6E27               	movwf	memset@c+1,c
  2544  001FFE  0E00               	movlw	0
  2545  002000  6E26               	movwf	memset@c,c
  2546  002002  0E00               	movlw	0
  2547  002004  6E29               	movwf	memset@n+1,c
  2548  002006  0E96               	movlw	150
  2549  002008  6E28               	movwf	memset@n,c
  2550  00200A  EC63  F01B         	call	_memset	;wreg free
  2551                           
  2552                           ;cmd_consol.c: 502: valid_cmd = 0;
  2553  00200E  0E00               	movlw	0
  2554  002010  0100               	movlb	0	; () banked
  2555  002012  6F84               	movwf	_valid_cmd& (0+255),b
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;cmd_consol.c: 503: puts("Init_Done\r\n");
  2559  002014  0EBA               	movlw	low STR_132
  2560  002016  6E14               	movwf	puts@s,c
  2561  002018  0EFE               	movlw	high STR_132
  2562  00201A  6E15               	movwf	puts@s+1,c
  2563  00201C  EC91  F01D         	call	_puts	;wreg free
  2564                           
  2565                           ;cmd_consol.c: 504: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2566  002020  0E01               	movlw	1
  2567  002022  0100               	movlb	0	; () banked
  2568  002024  6F82               	movwf	_cmd_consol_state& (0+255),b
  2569                           
  2570                           ;cmd_consol.c: 505: break;
  2571  002026  0012               	return	
  2572  002028                     l7666:
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;cmd_consol.c: 508: {
  2576                           ;cmd_consol.c: 509: static int i = 0;
  2577                           ;cmd_consol.c: 511: if (check == 1) {
  2578  002028  0100               	movlb	0	; () banked
  2579  00202A  0580               	decf	_check& (0+255),w,b
  2580  00202C  A4D8               	btfss	status,2,c
  2581  00202E  0012               	return	
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;cmd_consol.c: 512: check = 0;
  2585  002030  0E00               	movlw	0
  2586  002032  0100               	movlb	0	; () banked
  2587  002034  6F80               	movwf	_check& (0+255),b
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;cmd_consol.c: 513: if (parse_cmd_str(uart_str) == 0) {
  2591  002036  0E00               	movlw	low _uart_str
  2592  002038  6E3A               	movwf	parse_cmd_str@str,c
  2593  00203A  0E02               	movlw	high _uart_str
  2594  00203C  6E3B               	movwf	parse_cmd_str@str+1,c
  2595  00203E  EC55  F000         	call	_parse_cmd_str	;wreg free
  2596  002042  0900               	iorlw	0
  2597  002044  A4D8               	btfss	status,2,c
  2598  002046  D012               	goto	l7676
  2599                           
  2600                           ;cmd_consol.c: 514: memset(uart_str, 0, sizeof (uart_str));
  2601  002048  0E00               	movlw	low _uart_str
  2602  00204A  6E24               	movwf	memset@p1,c
  2603  00204C  0E02               	movlw	high _uart_str
  2604  00204E  6E25               	movwf	memset@p1+1,c
  2605  002050  0E00               	movlw	0
  2606  002052  6E27               	movwf	memset@c+1,c
  2607  002054  0E00               	movlw	0
  2608  002056  6E26               	movwf	memset@c,c
  2609  002058  0E00               	movlw	0
  2610  00205A  6E29               	movwf	memset@n+1,c
  2611  00205C  0E96               	movlw	150
  2612  00205E  6E28               	movwf	memset@n,c
  2613  002060  EC63  F01B         	call	_memset	;wreg free
  2614                           
  2615                           ;cmd_consol.c: 515: cmd_consol_state = CMD_CONSOL_REPLY_HOST;
  2616  002064  0E02               	movlw	2
  2617  002066  0100               	movlb	0	; () banked
  2618  002068  6F82               	movwf	_cmd_consol_state& (0+255),b
  2619                           
  2620                           ;cmd_consol.c: 516: } else {
  2621  00206A  0012               	return	
  2622  00206C                     l7676:
  2623                           
  2624                           ;cmd_consol.c: 517: printf("%s\r\n", "ERROR");
  2625  00206C  0EA2               	movlw	low (STR_121+2)
  2626  00206E  6E1E               	movwf	printf@f,c
  2627  002070  0EFF               	movlw	high (STR_121+2)
  2628  002072  6E1F               	movwf	printf@f+1,c
  2629  002074  0EC8               	movlw	low STR_118
  2630  002076  6E20               	movwf	?_printf+2,c
  2631  002078  0EFF               	movlw	high STR_118
  2632  00207A  6E21               	movwf	?_printf+3,c
  2633  00207C  EC48  F012         	call	_printf	;wreg free
  2634                           
  2635                           ;cmd_consol.c: 518: }
  2636                           ;cmd_consol.c: 519: }
  2637                           ;cmd_consol.c: 520: break;
  2638  002080  0012               	return	
  2639  002082                     l7678:
  2640                           
  2641                           ;cmd_consol.c: 523: {
  2642                           ;cmd_consol.c: 524: if (valid_cmd == 1) {
  2643  002082  0100               	movlb	0	; () banked
  2644  002084  0584               	decf	_valid_cmd& (0+255),w,b
  2645  002086  A4D8               	btfss	status,2,c
  2646  002088  D005               	goto	l7684
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;cmd_consol.c: 525: reply_to_host();
  2650  00208A  EC8F  F009         	call	_reply_to_host	;wreg free
  2651                           
  2652                           ;cmd_consol.c: 526: valid_cmd = 0;
  2653  00208E  0E00               	movlw	0
  2654  002090  0100               	movlb	0	; () banked
  2655  002092  6F84               	movwf	_valid_cmd& (0+255),b
  2656  002094                     l7684:
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;cmd_consol.c: 528: }
  2660                           ;cmd_consol.c: 529: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2661  002094  0E01               	movlw	1
  2662  002096  0100               	movlb	0	; () banked
  2663  002098  6F82               	movwf	_cmd_consol_state& (0+255),b
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;cmd_consol.c: 531: }
  2667                           ;cmd_consol.c: 532: }
  2668                           
  2669                           ;cmd_consol.c: 530: break;
  2670  00209A  0012               	return	
  2671  00209C                     l7688:
  2672  00209C  0100               	movlb	0	; () banked
  2673  00209E  5182               	movf	_cmd_consol_state& (0+255),w,b
  2674                           
  2675                           ; Switch size 1, requested type "space"
  2676                           ; Number of cases is 3, Range of values is 0 to 2
  2677                           ; switch strategies available:
  2678                           ; Name         Instructions Cycles
  2679                           ; simple_byte           10     6 (average)
  2680                           ;	Chosen strategy is simple_byte
  2681  0020A0  0A00               	xorlw	0	; case 0
  2682  0020A2  B4D8               	btfsc	status,2,c
  2683  0020A4  D798               	goto	l7658
  2684  0020A6  0A01               	xorlw	1	; case 1
  2685  0020A8  B4D8               	btfsc	status,2,c
  2686  0020AA  D7BE               	goto	l7666
  2687  0020AC  0A03               	xorlw	3	; case 2
  2688  0020AE  A4D8               	btfss	status,2,c
  2689  0020B0  0012               	return	
  2690  0020B2  D7E7               	goto	l7678
  2691  0020B4                     __end_of_cmd_consol_task:
  2692                           	opt stack 0
  2693                           tblptru	equ	0xFF8
  2694                           tblptrh	equ	0xFF7
  2695                           tblptrl	equ	0xFF6
  2696                           tablat	equ	0xFF5
  2697                           intcon	equ	0xFF2
  2698                           postinc0	equ	0xFEE
  2699                           wreg	equ	0xFE8
  2700                           postdec1	equ	0xFE5
  2701                           fsr1h	equ	0xFE2
  2702                           fsr1l	equ	0xFE1
  2703                           indf2	equ	0xFDF
  2704                           fsr2h	equ	0xFDA
  2705                           fsr2l	equ	0xFD9
  2706                           status	equ	0xFD8
  2707                           
  2708 ;; *************** function _reply_to_host *****************
  2709 ;; Defined at:
  2710 ;;		line 407 in file "cmd_consol.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;		None
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  ch              1   13[BANK0 ] unsigned char 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      void 
  2717 ;; Registers used:
  2718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;Total ram usage:        4 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:   12
  2731 ;; This function calls:
  2732 ;;		_clcd_max_col
  2733 ;;		_clcd_max_row
  2734 ;;		_init_clcd_cusotom_lcd
  2735 ;;		_max_display_str
  2736 ;;		_max_display_support
  2737 ;;		_max_uid_range
  2738 ;;		_min_uid_range
  2739 ;;		_printf
  2740 ;;		_puts
  2741 ;;		_strcmp
  2742 ;;		_update_string_data
  2743 ;; This function is called by:
  2744 ;;		_cmd_consol_task
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text4
  2749  00131E                     __ptext4:
  2750                           	opt stack 0
  2751  00131E                     _reply_to_host:
  2752                           	opt stack 17
  2753                           
  2754                           ;cmd_consol.c: 408: if (strcmp(CMD, "KLM") == 0) {
  2755                           
  2756                           ;incstack = 0
  2757  00131E  0ECC               	movlw	low _CMD
  2758  001320  6E10               	movwf	strcmp@s1,c
  2759  001322  0E00               	movlw	high _CMD
  2760  001324  6E11               	movwf	strcmp@s1+1,c
  2761  001326  0EF5               	movlw	low STR_84
  2762  001328  6E12               	movwf	strcmp@s2,c
  2763  00132A  0EFF               	movlw	high STR_84
  2764  00132C  6E13               	movwf	strcmp@s2+1,c
  2765  00132E  ECD1  F01A         	call	_strcmp	;wreg free
  2766  001332  5010               	movf	?_strcmp,w,c
  2767  001334  1011               	iorwf	?_strcmp+1,w,c
  2768  001336  A4D8               	btfss	status,2,c
  2769  001338  D007               	goto	l7504
  2770                           
  2771                           ;cmd_consol.c: 409: puts("OK\r\n");
  2772  00133A  0E91               	movlw	low (STR_89+8)
  2773  00133C  6E14               	movwf	puts@s,c
  2774  00133E  0EFE               	movlw	high (STR_89+8)
  2775  001340  6E15               	movwf	puts@s+1,c
  2776  001342  EC91  F01D         	call	_puts	;wreg free
  2777                           
  2778                           ;cmd_consol.c: 410: } else if (strcmp(CMD, "LCDS?") == 0) {
  2779  001346  0012               	return	
  2780  001348                     l7504:
  2781  001348  0ECC               	movlw	low _CMD
  2782  00134A  6E10               	movwf	strcmp@s1,c
  2783  00134C  0E00               	movlw	high _CMD
  2784  00134E  6E11               	movwf	strcmp@s1+1,c
  2785  001350  0EBC               	movlw	low STR_27
  2786  001352  6E12               	movwf	strcmp@s2,c
  2787  001354  0EFF               	movlw	high STR_27
  2788  001356  6E13               	movwf	strcmp@s2+1,c
  2789  001358  ECD1  F01A         	call	_strcmp	;wreg free
  2790  00135C  5010               	movf	?_strcmp,w,c
  2791  00135E  1011               	iorwf	?_strcmp+1,w,c
  2792  001360  A4D8               	btfss	status,2,c
  2793  001362  D017               	goto	l7508
  2794                           
  2795                           ;cmd_consol.c: 411: printf("%s\r\n", max_display_support());
  2796  001364  0EA2               	movlw	low (STR_121+2)
  2797  001366  6E1E               	movwf	printf@f,c
  2798  001368  0EFF               	movlw	high (STR_121+2)
  2799  00136A  6E1F               	movwf	printf@f+1,c
  2800  00136C  ECEE  F01D         	call	_max_display_support	;wreg free
  2801  001370  C010  F020         	movff	?_max_display_support,?_printf+2
  2802  001374  C011  F021         	movff	?_max_display_support+1,?_printf+3
  2803  001378  EC48  F012         	call	_printf	;wreg free
  2804                           
  2805                           ;cmd_consol.c: 412: printf("\r\n%s.., OK\r\n", "LCDS?");
  2806  00137C  0E89               	movlw	low STR_89
  2807  00137E  6E1E               	movwf	printf@f,c
  2808  001380  0EFE               	movlw	high STR_89
  2809  001382  6E1F               	movwf	printf@f+1,c
  2810  001384  0EBC               	movlw	low STR_27
  2811  001386  6E20               	movwf	?_printf+2,c
  2812  001388  0EFF               	movlw	high STR_27
  2813  00138A  6E21               	movwf	?_printf+3,c
  2814  00138C  EC48  F012         	call	_printf	;wreg free
  2815                           
  2816                           ;cmd_consol.c: 413: } else if (strcmp(CMD, "MC?") == 0) {
  2817  001390  0012               	return	
  2818  001392                     l7508:
  2819  001392  0ECC               	movlw	low _CMD
  2820  001394  6E10               	movwf	strcmp@s1,c
  2821  001396  0E00               	movlw	high _CMD
  2822  001398  6E11               	movwf	strcmp@s1+1,c
  2823  00139A  0EED               	movlw	low STR_23
  2824  00139C  6E12               	movwf	strcmp@s2,c
  2825  00139E  0EFF               	movlw	high STR_23
  2826  0013A0  6E13               	movwf	strcmp@s2+1,c
  2827  0013A2  ECD1  F01A         	call	_strcmp	;wreg free
  2828  0013A6  5010               	movf	?_strcmp,w,c
  2829  0013A8  1011               	iorwf	?_strcmp+1,w,c
  2830  0013AA  A4D8               	btfss	status,2,c
  2831  0013AC  D019               	goto	l7512
  2832                           
  2833                           ;cmd_consol.c: 414: printf("%d\r\n", clcd_max_col());
  2834  0013AE  0EF1               	movlw	low (STR_13+14)
  2835  0013B0  6E1E               	movwf	printf@f,c
  2836  0013B2  0EFD               	movlw	high (STR_13+14)
  2837  0013B4  6E1F               	movwf	printf@f+1,c
  2838  0013B6  ECC7  F01D         	call	_clcd_max_col	;wreg free
  2839  0013BA  0100               	movlb	0	; () banked
  2840  0013BC  6FE5               	movwf	??_reply_to_host& (0+255),b
  2841  0013BE  0100               	movlb	0	; () banked
  2842  0013C0  51E5               	movf	??_reply_to_host& (0+255),w,b
  2843  0013C2  6E20               	movwf	?_printf+2,c
  2844  0013C4  6A21               	clrf	?_printf+3,c
  2845  0013C6  EC48  F012         	call	_printf	;wreg free
  2846                           
  2847                           ;cmd_consol.c: 415: printf("\r\n%s.., OK\r\n", "MC?");
  2848  0013CA  0E89               	movlw	low STR_89
  2849  0013CC  6E1E               	movwf	printf@f,c
  2850  0013CE  0EFE               	movlw	high STR_89
  2851  0013D0  6E1F               	movwf	printf@f+1,c
  2852  0013D2  0EED               	movlw	low STR_23
  2853  0013D4  6E20               	movwf	?_printf+2,c
  2854  0013D6  0EFF               	movlw	high STR_23
  2855  0013D8  6E21               	movwf	?_printf+3,c
  2856  0013DA  EC48  F012         	call	_printf	;wreg free
  2857                           
  2858                           ;cmd_consol.c: 416: } else if (strcmp(CMD, "MR?") == 0) {
  2859  0013DE  0012               	return	
  2860  0013E0                     l7512:
  2861  0013E0  0ECC               	movlw	low _CMD
  2862  0013E2  6E10               	movwf	strcmp@s1,c
  2863  0013E4  0E00               	movlw	high _CMD
  2864  0013E6  6E11               	movwf	strcmp@s1+1,c
  2865  0013E8  0EF1               	movlw	low STR_25
  2866  0013EA  6E12               	movwf	strcmp@s2,c
  2867  0013EC  0EFF               	movlw	high STR_25
  2868  0013EE  6E13               	movwf	strcmp@s2+1,c
  2869  0013F0  ECD1  F01A         	call	_strcmp	;wreg free
  2870  0013F4  5010               	movf	?_strcmp,w,c
  2871  0013F6  1011               	iorwf	?_strcmp+1,w,c
  2872  0013F8  A4D8               	btfss	status,2,c
  2873  0013FA  D019               	goto	l7516
  2874                           
  2875                           ;cmd_consol.c: 417: printf("%d\r\n", clcd_max_row());
  2876  0013FC  0EF1               	movlw	low (STR_13+14)
  2877  0013FE  6E1E               	movwf	printf@f,c
  2878  001400  0EFD               	movlw	high (STR_13+14)
  2879  001402  6E1F               	movwf	printf@f+1,c
  2880  001404  ECC0  F01D         	call	_clcd_max_row	;wreg free
  2881  001408  0100               	movlb	0	; () banked
  2882  00140A  6FE5               	movwf	??_reply_to_host& (0+255),b
  2883  00140C  0100               	movlb	0	; () banked
  2884  00140E  51E5               	movf	??_reply_to_host& (0+255),w,b
  2885  001410  6E20               	movwf	?_printf+2,c
  2886  001412  6A21               	clrf	?_printf+3,c
  2887  001414  EC48  F012         	call	_printf	;wreg free
  2888                           
  2889                           ;cmd_consol.c: 418: printf("\r\n%s.., OK\r\n", "MR?");
  2890  001418  0E89               	movlw	low STR_89
  2891  00141A  6E1E               	movwf	printf@f,c
  2892  00141C  0EFE               	movlw	high STR_89
  2893  00141E  6E1F               	movwf	printf@f+1,c
  2894  001420  0EF1               	movlw	low STR_25
  2895  001422  6E20               	movwf	?_printf+2,c
  2896  001424  0EFF               	movlw	high STR_25
  2897  001426  6E21               	movwf	?_printf+3,c
  2898  001428  EC48  F012         	call	_printf	;wreg free
  2899                           
  2900                           ;cmd_consol.c: 419: } else if (strcmp(CMD, "LCDS") == 0) {
  2901  00142C  0012               	return	
  2902  00142E                     l7516:
  2903  00142E  0ECC               	movlw	low _CMD
  2904  001430  6E10               	movwf	strcmp@s1,c
  2905  001432  0E00               	movlw	high _CMD
  2906  001434  6E11               	movwf	strcmp@s1+1,c
  2907  001436  0EDE               	movlw	low STR_30
  2908  001438  6E12               	movwf	strcmp@s2,c
  2909  00143A  0EFF               	movlw	high STR_30
  2910  00143C  6E13               	movwf	strcmp@s2+1,c
  2911  00143E  ECD1  F01A         	call	_strcmp	;wreg free
  2912  001442  5010               	movf	?_strcmp,w,c
  2913  001444  1011               	iorwf	?_strcmp+1,w,c
  2914  001446  A4D8               	btfss	status,2,c
  2915  001448  D010               	goto	l7522
  2916                           
  2917                           ;cmd_consol.c: 420: init_clcd_cusotom_lcd(clcd_init_row, clcd_init_col);
  2918  00144A  C081  F030         	movff	_clcd_init_col,init_clcd_cusotom_lcd@clcd_init_col
  2919  00144E  5041               	movf	_clcd_init_row,w,c
  2920  001450  EC63  F016         	call	_init_clcd_cusotom_lcd
  2921                           
  2922                           ;cmd_consol.c: 421: printf("\r\n%s.., OK\r\n", "LCDS");
  2923  001454  0E89               	movlw	low STR_89
  2924  001456  6E1E               	movwf	printf@f,c
  2925  001458  0EFE               	movlw	high STR_89
  2926  00145A  6E1F               	movwf	printf@f+1,c
  2927  00145C  0EDE               	movlw	low STR_30
  2928  00145E  6E20               	movwf	?_printf+2,c
  2929  001460  0EFF               	movlw	high STR_30
  2930  001462  6E21               	movwf	?_printf+3,c
  2931  001464  EC48  F012         	call	_printf	;wreg free
  2932                           
  2933                           ;cmd_consol.c: 422: } else if (strcmp(CMD, "GMDS?") == 0) {
  2934  001468  0012               	return	
  2935  00146A                     l7522:
  2936  00146A  0ECC               	movlw	low _CMD
  2937  00146C  6E10               	movwf	strcmp@s1,c
  2938  00146E  0E00               	movlw	high _CMD
  2939  001470  6E11               	movwf	strcmp@s1+1,c
  2940  001472  0EC2               	movlw	low STR_35
  2941  001474  6E12               	movwf	strcmp@s2,c
  2942  001476  0EFF               	movlw	high STR_35
  2943  001478  6E13               	movwf	strcmp@s2+1,c
  2944  00147A  ECD1  F01A         	call	_strcmp	;wreg free
  2945  00147E  5010               	movf	?_strcmp,w,c
  2946  001480  1011               	iorwf	?_strcmp+1,w,c
  2947  001482  A4D8               	btfss	status,2,c
  2948  001484  D03D               	goto	l7530
  2949                           
  2950                           ;cmd_consol.c: 423: if (max_display_str() != 0) {
  2951  001486  ECB9  F01D         	call	_max_display_str	;wreg free
  2952  00148A  0900               	iorlw	0
  2953  00148C  B4D8               	btfsc	status,2,c
  2954  00148E  D01F               	goto	l7528
  2955                           
  2956                           ;cmd_consol.c: 424: printf("%d,%c-%c\r\n", max_display_str(), min_uid_range(), max_uid_r
      +                          ange());
  2957  001490  0E0E               	movlw	low STR_103
  2958  001492  6E1E               	movwf	printf@f,c
  2959  001494  0EFF               	movlw	high STR_103
  2960  001496  6E1F               	movwf	printf@f+1,c
  2961  001498  ECB9  F01D         	call	_max_display_str	;wreg free
  2962  00149C  0100               	movlb	0	; () banked
  2963  00149E  6FE5               	movwf	??_reply_to_host& (0+255),b
  2964  0014A0  0100               	movlb	0	; () banked
  2965  0014A2  51E5               	movf	??_reply_to_host& (0+255),w,b
  2966  0014A4  6E20               	movwf	?_printf+2,c
  2967  0014A6  6A21               	clrf	?_printf+3,c
  2968  0014A8  ECAB  F01D         	call	_min_uid_range	;wreg free
  2969  0014AC  0100               	movlb	0	; () banked
  2970  0014AE  6FE6               	movwf	(??_reply_to_host+1)& (0+255),b
  2971  0014B0  0100               	movlb	0	; () banked
  2972  0014B2  51E6               	movf	(??_reply_to_host+1)& (0+255),w,b
  2973  0014B4  6E22               	movwf	?_printf+4,c
  2974  0014B6  6A23               	clrf	?_printf+5,c
  2975  0014B8  ECB2  F01D         	call	_max_uid_range	;wreg free
  2976  0014BC  0100               	movlb	0	; () banked
  2977  0014BE  6FE7               	movwf	(??_reply_to_host+2)& (0+255),b
  2978  0014C0  0100               	movlb	0	; () banked
  2979  0014C2  51E7               	movf	(??_reply_to_host+2)& (0+255),w,b
  2980  0014C4  6E24               	movwf	?_printf+6,c
  2981  0014C6  6A25               	clrf	?_printf+7,c
  2982  0014C8  EC48  F012         	call	_printf	;wreg free
  2983                           
  2984                           ;cmd_consol.c: 425: } else {
  2985  0014CC  D00E               	goto	l840
  2986  0014CE                     l7528:
  2987                           
  2988                           ;cmd_consol.c: 426: printf("%d\r\n", max_display_str());
  2989  0014CE  0EF1               	movlw	low (STR_13+14)
  2990  0014D0  6E1E               	movwf	printf@f,c
  2991  0014D2  0EFD               	movlw	high (STR_13+14)
  2992  0014D4  6E1F               	movwf	printf@f+1,c
  2993  0014D6  ECB9  F01D         	call	_max_display_str	;wreg free
  2994  0014DA  0100               	movlb	0	; () banked
  2995  0014DC  6FE5               	movwf	??_reply_to_host& (0+255),b
  2996  0014DE  0100               	movlb	0	; () banked
  2997  0014E0  51E5               	movf	??_reply_to_host& (0+255),w,b
  2998  0014E2  6E20               	movwf	?_printf+2,c
  2999  0014E4  6A21               	clrf	?_printf+3,c
  3000  0014E6  EC48  F012         	call	_printf	;wreg free
  3001  0014EA                     l840:
  3002                           
  3003                           ;cmd_consol.c: 427: }
  3004                           ;cmd_consol.c: 428: printf("\r\n%s.., OK\r\n", "GMDS?");
  3005  0014EA  0E89               	movlw	low STR_89
  3006  0014EC  6E1E               	movwf	printf@f,c
  3007  0014EE  0EFE               	movlw	high STR_89
  3008  0014F0  6E1F               	movwf	printf@f+1,c
  3009  0014F2  0EC2               	movlw	low STR_35
  3010  0014F4  6E20               	movwf	?_printf+2,c
  3011  0014F6  0EFF               	movlw	high STR_35
  3012  0014F8  6E21               	movwf	?_printf+3,c
  3013  0014FA  EC48  F012         	call	_printf	;wreg free
  3014                           
  3015                           ;cmd_consol.c: 429: } else if (strcmp(CMD, "SDSTR") == 0) {
  3016  0014FE  0012               	return	
  3017  001500                     l7530:
  3018  001500  0ECC               	movlw	low _CMD
  3019  001502  6E10               	movwf	strcmp@s1,c
  3020  001504  0E00               	movlw	high _CMD
  3021  001506  6E11               	movwf	strcmp@s1+1,c
  3022  001508  0ECE               	movlw	low STR_37
  3023  00150A  6E12               	movwf	strcmp@s2,c
  3024  00150C  0EFF               	movlw	high STR_37
  3025  00150E  6E13               	movwf	strcmp@s2+1,c
  3026  001510  ECD1  F01A         	call	_strcmp	;wreg free
  3027  001514  5010               	movf	?_strcmp,w,c
  3028  001516  1011               	iorwf	?_strcmp+1,w,c
  3029  001518  A4D8               	btfss	status,2,c
  3030  00151A  D00B               	goto	l7534
  3031                           
  3032                           ;cmd_consol.c: 430: printf("\r\n%s.., OK\r\n", "SDSTR");
  3033  00151C  0E89               	movlw	low STR_89
  3034  00151E  6E1E               	movwf	printf@f,c
  3035  001520  0EFE               	movlw	high STR_89
  3036  001522  6E1F               	movwf	printf@f+1,c
  3037  001524  0ECE               	movlw	low STR_37
  3038  001526  6E20               	movwf	?_printf+2,c
  3039  001528  0EFF               	movlw	high STR_37
  3040  00152A  6E21               	movwf	?_printf+3,c
  3041  00152C  EC48  F012         	call	_printf	;wreg free
  3042                           
  3043                           ;cmd_consol.c: 431: } else if (strcmp(CMD, "SDSCROL") == 0) {
  3044  001530  0012               	return	
  3045  001532                     l7534:
  3046  001532  0ECC               	movlw	low _CMD
  3047  001534  6E10               	movwf	strcmp@s1,c
  3048  001536  0E00               	movlw	high _CMD
  3049  001538  6E11               	movwf	strcmp@s1+1,c
  3050  00153A  0E8A               	movlw	low STR_45
  3051  00153C  6E12               	movwf	strcmp@s2,c
  3052  00153E  0EFF               	movlw	high STR_45
  3053  001540  6E13               	movwf	strcmp@s2+1,c
  3054  001542  ECD1  F01A         	call	_strcmp	;wreg free
  3055  001546  5010               	movf	?_strcmp,w,c
  3056  001548  1011               	iorwf	?_strcmp+1,w,c
  3057  00154A  A4D8               	btfss	status,2,c
  3058  00154C  D00B               	goto	l7538
  3059                           
  3060                           ;cmd_consol.c: 432: printf("\r\n%s.., OK\r\n", "SDSCROL");
  3061  00154E  0E89               	movlw	low STR_89
  3062  001550  6E1E               	movwf	printf@f,c
  3063  001552  0EFE               	movlw	high STR_89
  3064  001554  6E1F               	movwf	printf@f+1,c
  3065  001556  0E8A               	movlw	low STR_45
  3066  001558  6E20               	movwf	?_printf+2,c
  3067  00155A  0EFF               	movlw	high STR_45
  3068  00155C  6E21               	movwf	?_printf+3,c
  3069  00155E  EC48  F012         	call	_printf	;wreg free
  3070                           
  3071                           ;cmd_consol.c: 433: } else if (strcmp(CMD, "SDSERC") == 0) {
  3072  001562  0012               	return	
  3073  001564                     l7538:
  3074  001564  0ECC               	movlw	low _CMD
  3075  001566  6E10               	movwf	strcmp@s1,c
  3076  001568  0E00               	movlw	high _CMD
  3077  00156A  6E11               	movwf	strcmp@s1+1,c
  3078  00156C  0EAE               	movlw	low STR_54
  3079  00156E  6E12               	movwf	strcmp@s2,c
  3080  001570  0EFF               	movlw	high STR_54
  3081  001572  6E13               	movwf	strcmp@s2+1,c
  3082  001574  ECD1  F01A         	call	_strcmp	;wreg free
  3083  001578  5010               	movf	?_strcmp,w,c
  3084  00157A  1011               	iorwf	?_strcmp+1,w,c
  3085  00157C  A4D8               	btfss	status,2,c
  3086  00157E  D00B               	goto	l7542
  3087                           
  3088                           ;cmd_consol.c: 434: printf("\r\n%s.., OK\r\n", "SDSERC");
  3089  001580  0E89               	movlw	low STR_89
  3090  001582  6E1E               	movwf	printf@f,c
  3091  001584  0EFE               	movlw	high STR_89
  3092  001586  6E1F               	movwf	printf@f+1,c
  3093  001588  0EAE               	movlw	low STR_54
  3094  00158A  6E20               	movwf	?_printf+2,c
  3095  00158C  0EFF               	movlw	high STR_54
  3096  00158E  6E21               	movwf	?_printf+3,c
  3097  001590  EC48  F012         	call	_printf	;wreg free
  3098                           
  3099                           ;cmd_consol.c: 435: } else if (strcmp(CMD, "UPDATE") == 0) {
  3100  001594  0012               	return	
  3101  001596                     l7542:
  3102  001596  0ECC               	movlw	low _CMD
  3103  001598  6E10               	movwf	strcmp@s1,c
  3104  00159A  0E00               	movlw	high _CMD
  3105  00159C  6E11               	movwf	strcmp@s1+1,c
  3106  00159E  0EB5               	movlw	low STR_67
  3107  0015A0  6E12               	movwf	strcmp@s2,c
  3108  0015A2  0EFF               	movlw	high STR_67
  3109  0015A4  6E13               	movwf	strcmp@s2+1,c
  3110  0015A6  ECD1  F01A         	call	_strcmp	;wreg free
  3111  0015AA  5010               	movf	?_strcmp,w,c
  3112  0015AC  1011               	iorwf	?_strcmp+1,w,c
  3113  0015AE  A4D8               	btfss	status,2,c
  3114  0015B0  0012               	return	
  3115                           
  3116                           ;cmd_consol.c: 436: if (cmd_data.data_set == 1 && cmd_data.row_col_set == 1 && cmd_data.
      +                          scroll_set == 1) {
  3117  0015B2  0100               	movlb	0	; () banked
  3118  0015B4  05AF               	decf	(_cmd_data+41)& (0+255),w,b
  3119  0015B6  A4D8               	btfss	status,2,c
  3120  0015B8  D02C               	goto	l7558
  3121                           
  3122                           ; BSR set to: 0
  3123  0015BA  0100               	movlb	0	; () banked
  3124  0015BC  05B4               	decf	(_cmd_data+46)& (0+255),w,b
  3125  0015BE  A4D8               	btfss	status,2,c
  3126  0015C0  D028               	goto	l7558
  3127                           
  3128                           ; BSR set to: 0
  3129  0015C2  0100               	movlb	0	; () banked
  3130  0015C4  05B6               	decf	(_cmd_data+48)& (0+255),w,b
  3131  0015C6  A4D8               	btfss	status,2,c
  3132  0015C8  D024               	goto	l7558
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;cmd_consol.c: 437: char ch = update_string_data(&cmd_data);
  3136  0015CA  0E86               	movlw	low _cmd_data
  3137  0015CC  0100               	movlb	0	; () banked
  3138  0015CE  6FDB               	movwf	update_string_data@data& (0+255),b
  3139  0015D0  0E00               	movlw	high _cmd_data
  3140  0015D2  0100               	movlb	0	; () banked
  3141  0015D4  6FDC               	movwf	(update_string_data@data+1)& (0+255),b
  3142  0015D6  EC1A  F00E         	call	_update_string_data	;wreg free
  3143  0015DA  0100               	movlb	0	; () banked
  3144  0015DC  6FE8               	movwf	reply_to_host@ch& (0+255),b
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;cmd_consol.c: 438: if (ch == 1)
  3148  0015DE  0100               	movlb	0	; () banked
  3149  0015E0  05E8               	decf	reply_to_host@ch& (0+255),w,b
  3150  0015E2  A4D8               	btfss	status,2,c
  3151  0015E4  D00B               	goto	l7556
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;cmd_consol.c: 439: printf("%s\r\n", "ERROR");
  3155  0015E6  0EA2               	movlw	low (STR_121+2)
  3156  0015E8  6E1E               	movwf	printf@f,c
  3157  0015EA  0EFF               	movlw	high (STR_121+2)
  3158  0015EC  6E1F               	movwf	printf@f+1,c
  3159  0015EE  0EC8               	movlw	low STR_118
  3160  0015F0  6E20               	movwf	?_printf+2,c
  3161  0015F2  0EFF               	movlw	high STR_118
  3162  0015F4  6E21               	movwf	?_printf+3,c
  3163  0015F6  EC48  F012         	call	_printf	;wreg free
  3164  0015FA  0012               	return	
  3165  0015FC                     l7556:
  3166                           
  3167                           ;cmd_consol.c: 440: else
  3168                           ;cmd_consol.c: 441: printf("\r\n%s.., OK\r\n", "UPDATE");
  3169  0015FC  0E89               	movlw	low STR_89
  3170  0015FE  6E1E               	movwf	printf@f,c
  3171  001600  0EFE               	movlw	high STR_89
  3172  001602  6E1F               	movwf	printf@f+1,c
  3173  001604  0EB5               	movlw	low STR_67
  3174  001606  6E20               	movwf	?_printf+2,c
  3175  001608  0EFF               	movlw	high STR_67
  3176  00160A  6E21               	movwf	?_printf+3,c
  3177  00160C  EC48  F012         	call	_printf	;wreg free
  3178                           
  3179                           ;cmd_consol.c: 442: } else {
  3180  001610  0012               	return	
  3181  001612                     l7558:
  3182                           
  3183                           ;cmd_consol.c: 443: if (cmd_data.data_set == 0) {
  3184  001612  0100               	movlb	0	; () banked
  3185  001614  51AF               	movf	(_cmd_data+41)& (0+255),w,b
  3186  001616  A4D8               	btfss	status,2,c
  3187  001618  D00B               	goto	l7562
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;cmd_consol.c: 444: printf("\r\n%s\r\n", "ERR_STR_SET");
  3191  00161A  0EA0               	movlw	low STR_121
  3192  00161C  6E1E               	movwf	printf@f,c
  3193  00161E  0EFF               	movlw	high STR_121
  3194  001620  6E1F               	movwf	printf@f+1,c
  3195  001622  0E02               	movlw	low STR_122
  3196  001624  6E20               	movwf	?_printf+2,c
  3197  001626  0EFF               	movlw	high STR_122
  3198  001628  6E21               	movwf	?_printf+3,c
  3199  00162A  EC48  F012         	call	_printf	;wreg free
  3200                           
  3201                           ;cmd_consol.c: 445: } else if (cmd_data.row_col_set == 0) {
  3202  00162E  0012               	return	
  3203  001630                     l7562:
  3204  001630  0100               	movlb	0	; () banked
  3205  001632  51B4               	movf	(_cmd_data+46)& (0+255),w,b
  3206  001634  A4D8               	btfss	status,2,c
  3207  001636  D00B               	goto	l7566
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;cmd_consol.c: 446: printf("\r\n%s\r\n", "ERR_ROW_COL");
  3211  001638  0EA0               	movlw	low STR_121
  3212  00163A  6E1E               	movwf	printf@f,c
  3213  00163C  0EFF               	movlw	high STR_121
  3214  00163E  6E1F               	movwf	printf@f+1,c
  3215  001640  0EEA               	movlw	low STR_124
  3216  001642  6E20               	movwf	?_printf+2,c
  3217  001644  0EFE               	movlw	high STR_124
  3218  001646  6E21               	movwf	?_printf+3,c
  3219  001648  EC48  F012         	call	_printf	;wreg free
  3220                           
  3221                           ;cmd_consol.c: 447: } else if (cmd_data.scroll_set == 0) {
  3222  00164C  0012               	return	
  3223  00164E                     l7566:
  3224  00164E  0100               	movlb	0	; () banked
  3225  001650  51B6               	movf	(_cmd_data+48)& (0+255),w,b
  3226  001652  A4D8               	btfss	status,2,c
  3227  001654  0012               	return	
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;cmd_consol.c: 448: printf("\r\n%s\r\n", "ERR_SCROLL_SET");
  3231  001656  0EA0               	movlw	low STR_121
  3232  001658  6E1E               	movwf	printf@f,c
  3233  00165A  0EFF               	movlw	high STR_121
  3234  00165C  6E1F               	movwf	printf@f+1,c
  3235  00165E  0E6C               	movlw	low STR_126
  3236  001660  6E20               	movwf	?_printf+2,c
  3237  001662  0EFE               	movlw	high STR_126
  3238  001664  6E21               	movwf	?_printf+3,c
  3239  001666  EC48  F012         	call	_printf	;wreg free
  3240  00166A  0012               	return	
  3241  00166C                     __end_of_reply_to_host:
  3242                           	opt stack 0
  3243                           tblptru	equ	0xFF8
  3244                           tblptrh	equ	0xFF7
  3245                           tblptrl	equ	0xFF6
  3246                           tablat	equ	0xFF5
  3247                           intcon	equ	0xFF2
  3248                           postinc0	equ	0xFEE
  3249                           wreg	equ	0xFE8
  3250                           postdec1	equ	0xFE5
  3251                           fsr1h	equ	0xFE2
  3252                           fsr1l	equ	0xFE1
  3253                           indf2	equ	0xFDF
  3254                           fsr2h	equ	0xFDA
  3255                           fsr2l	equ	0xFD9
  3256                           status	equ	0xFD8
  3257                           
  3258 ;; *************** function _update_string_data *****************
  3259 ;; Defined at:
  3260 ;;		line 175 in file "clcd.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;  data            2    0[BANK0 ] PTR struct .
  3263 ;;		 -> cmd_data(50), 
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  i               2    8[BANK0 ] int 
  3266 ;;  end_point       1    7[BANK0 ] unsigned char 
  3267 ;;  start_point     1    6[BANK0 ] unsigned char 
  3268 ;;  exist_uid_id    1    5[BANK0 ] unsigned char 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      unsigned char 
  3271 ;; Registers used:
  3272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3278 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3282 ;;Total ram usage:       10 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:   10
  3285 ;; This function calls:
  3286 ;;		___wmul
  3287 ;;		_conflict_check
  3288 ;;		_copy_data
  3289 ;;		_make_display
  3290 ;;		_memset
  3291 ;;		_printf
  3292 ;; This function is called by:
  3293 ;;		_reply_to_host
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text5
  3298  001C34                     __ptext5:
  3299                           	opt stack 0
  3300  001C34                     _update_string_data:
  3301                           	opt stack 18
  3302                           
  3303                           ;clcd.c: 176: int i = 0;
  3304                           
  3305                           ;incstack = 0
  3306  001C34  0E00               	movlw	0
  3307  001C36  0100               	movlb	0	; () banked
  3308  001C38  6FE4               	movwf	(update_string_data@i+1)& (0+255),b
  3309  001C3A  0E00               	movlw	0
  3310  001C3C  6FE3               	movwf	update_string_data@i& (0+255),b
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;clcd.c: 177: char exist_uid_idx = -1;
  3314  001C3E  0100               	movlb	0	; () banked
  3315  001C40  69E0               	setf	update_string_data@exist_uid_idx& (0+255),b
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;clcd.c: 178: char start_point, end_point;
  3319                           ;clcd.c: 179: memset(conflict_arr, -1, sizeof (conflict_arr));
  3320  001C42  0EB8               	movlw	low _conflict_arr
  3321  001C44  6E24               	movwf	memset@p1,c
  3322  001C46  0E00               	movlw	high _conflict_arr
  3323  001C48  6E25               	movwf	memset@p1+1,c
  3324  001C4A  0EFF               	movlw	255
  3325  001C4C  6E27               	movwf	memset@c+1,c
  3326  001C4E  6826               	setf	memset@c,c
  3327  001C50  0E00               	movlw	0
  3328  001C52  6E29               	movwf	memset@n+1,c
  3329  001C54  0E14               	movlw	20
  3330  001C56  6E28               	movwf	memset@n,c
  3331  001C58  EC63  F01B         	call	_memset	;wreg free
  3332                           
  3333                           ;clcd.c: 180: conflict_data_count = 0;
  3334  001C5C  0E00               	movlw	0
  3335  001C5E  6E42               	movwf	_conflict_data_count,c
  3336                           
  3337                           ;clcd.c: 181: start_point = (data->start_row * clcd_config_data.clcd_max_col) + data->st
      +                          art_col;
  3338  001C60  0100               	movlb	0	; () banked
  3339  001C62  EE20 F02B          	lfsr	2,43
  3340  001C66  51DB               	movf	update_string_data@data& (0+255),w,b
  3341  001C68  26D9               	addwf	fsr2l,f,c
  3342  001C6A  51DC               	movf	(update_string_data@data+1)& (0+255),w,b
  3343  001C6C  22DA               	addwfc	fsr2h,f,c
  3344  001C6E  50DF               	movf	indf2,w,c
  3345  001C70  0100               	movlb	0	; () banked
  3346  001C72  6FDD               	movwf	??_update_string_data& (0+255),b
  3347  001C74  0100               	movlb	0	; () banked
  3348  001C76  EE20 F02A          	lfsr	2,42
  3349  001C7A  51DB               	movf	update_string_data@data& (0+255),w,b
  3350  001C7C  26D9               	addwf	fsr2l,f,c
  3351  001C7E  51DC               	movf	(update_string_data@data+1)& (0+255),w,b
  3352  001C80  22DA               	addwfc	fsr2h,f,c
  3353  001C82  50DF               	movf	indf2,w,c
  3354  001C84  024B               	mulwf	_clcd_config_data+2,c
  3355  001C86  50F3               	movf	prodl,w,c
  3356  001C88  0100               	movlb	0	; () banked
  3357  001C8A  25DD               	addwf	??_update_string_data& (0+255),w,b
  3358  001C8C  0100               	movlb	0	; () banked
  3359  001C8E  6FE1               	movwf	update_string_data@start_point& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;clcd.c: 182: end_point = (data->end_row * clcd_config_data.clcd_max_col) + data->end_co
      +                          l;
  3363  001C90  0100               	movlb	0	; () banked
  3364  001C92  EE20 F02D          	lfsr	2,45
  3365  001C96  51DB               	movf	update_string_data@data& (0+255),w,b
  3366  001C98  26D9               	addwf	fsr2l,f,c
  3367  001C9A  51DC               	movf	(update_string_data@data+1)& (0+255),w,b
  3368  001C9C  22DA               	addwfc	fsr2h,f,c
  3369  001C9E  50DF               	movf	indf2,w,c
  3370  001CA0  0100               	movlb	0	; () banked
  3371  001CA2  6FDD               	movwf	??_update_string_data& (0+255),b
  3372  001CA4  0100               	movlb	0	; () banked
  3373  001CA6  EE20 F02C          	lfsr	2,44
  3374  001CAA  51DB               	movf	update_string_data@data& (0+255),w,b
  3375  001CAC  26D9               	addwf	fsr2l,f,c
  3376  001CAE  51DC               	movf	(update_string_data@data+1)& (0+255),w,b
  3377  001CB0  22DA               	addwfc	fsr2h,f,c
  3378  001CB2  50DF               	movf	indf2,w,c
  3379  001CB4  024B               	mulwf	_clcd_config_data+2,c
  3380  001CB6  50F3               	movf	prodl,w,c
  3381  001CB8  0100               	movlb	0	; () banked
  3382  001CBA  25DD               	addwf	??_update_string_data& (0+255),w,b
  3383  001CBC  0100               	movlb	0	; () banked
  3384  001CBE  6FE2               	movwf	update_string_data@end_point& (0+255),b
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;clcd.c: 184: printf("UID = %c, start_pt = %d, end_pt = %d\r\n", data->uid, start_point,
      +                           end_point);
  3388  001CC0  0EF3               	movlw	low STR_9
  3389  001CC2  6E1E               	movwf	printf@f,c
  3390  001CC4  0EFC               	movlw	high STR_9
  3391  001CC6  6E1F               	movwf	printf@f+1,c
  3392  001CC8  C0DB  FFD9         	movff	update_string_data@data,fsr2l
  3393  001CCC  C0DC  FFDA         	movff	update_string_data@data+1,fsr2h
  3394  001CD0  50DF               	movf	indf2,w,c
  3395  001CD2  0100               	movlb	0	; () banked
  3396  001CD4  6FDD               	movwf	??_update_string_data& (0+255),b
  3397  001CD6  0100               	movlb	0	; () banked
  3398  001CD8  51DD               	movf	??_update_string_data& (0+255),w,b
  3399  001CDA  6E20               	movwf	?_printf+2,c
  3400  001CDC  6A21               	clrf	?_printf+3,c
  3401  001CDE  C0E1  F022         	movff	update_string_data@start_point,?_printf+4
  3402  001CE2  6A23               	clrf	?_printf+5,c
  3403  001CE4  C0E2  F024         	movff	update_string_data@end_point,?_printf+6
  3404  001CE8  6A25               	clrf	?_printf+7,c
  3405  001CEA  EC48  F012         	call	_printf	;wreg free
  3406                           
  3407                           ;clcd.c: 186: if (data_count < clcd_config_data.clcd_max_display_string) {
  3408  001CEE  504D               	movf	_clcd_config_data+4,w,c
  3409  001CF0  5C43               	subwf	_data_count,w,c
  3410  001CF2  B0D8               	btfsc	status,0,c
  3411  001CF4  D0CF               	goto	l6768
  3412                           
  3413                           ;clcd.c: 187: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3414  001CF6  0E00               	movlw	0
  3415  001CF8  0100               	movlb	0	; () banked
  3416  001CFA  6FE4               	movwf	(update_string_data@i+1)& (0+255),b
  3417  001CFC  0E00               	movlw	0
  3418  001CFE  6FE3               	movwf	update_string_data@i& (0+255),b
  3419  001D00  D092               	goto	l6758
  3420  001D02                     l6722:
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;clcd.c: 188: if (clcd_display_string_details[i].uid == data->uid) {
  3424  001D02  C0DB  FFD9         	movff	update_string_data@data,fsr2l
  3425  001D06  C0DC  FFDA         	movff	update_string_data@data+1,fsr2h
  3426  001D0A  C0E3  F018         	movff	update_string_data@i,___wmul@multiplier
  3427  001D0E  C0E4  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  3428  001D12  0E00               	movlw	0
  3429  001D14  6E1B               	movwf	___wmul@multiplicand+1,c
  3430  001D16  0E36               	movlw	54
  3431  001D18  6E1A               	movwf	___wmul@multiplicand,c
  3432  001D1A  ECD5  F01C         	call	___wmul	;wreg free
  3433  001D1E  0E96               	movlw	low _clcd_display_string_details
  3434  001D20  2418               	addwf	?___wmul,w,c
  3435  001D22  6EE1               	movwf	fsr1l,c
  3436  001D24  0E02               	movlw	high _clcd_display_string_details
  3437  001D26  2019               	addwfc	?___wmul+1,w,c
  3438  001D28  6EE2               	movwf	fsr1h,c
  3439  001D2A  50E7               	movf	231,w,c
  3440  001D2C  0B7F               	andlw	127
  3441  001D2E  0100               	movlb	0	; () banked
  3442  001D30  6FDE               	movwf	(??_update_string_data+1)& (0+255),b
  3443  001D32  50DE               	movf	postinc2,w,c
  3444  001D34  0100               	movlb	0	; () banked
  3445  001D36  19DE               	xorwf	(??_update_string_data+1)& (0+255),w,b
  3446  001D38  A4D8               	btfss	status,2,c
  3447  001D3A  D028               	goto	l6738
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;clcd.c: 189: exist_uid_idx = i;
  3451  001D3C  C0E3  F0E0         	movff	update_string_data@i,update_string_data@exist_uid_idx
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;clcd.c: 190: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  3455  001D40  5042               	movf	_conflict_data_count,w,c
  3456  001D42  0D01               	mullw	1
  3457  001D44  0EB8               	movlw	low _conflict_arr
  3458  001D46  24F3               	addwf	prodl,w,c
  3459  001D48  6ED9               	movwf	fsr2l,c
  3460  001D4A  0E00               	movlw	high _conflict_arr
  3461  001D4C  20F4               	addwfc	prodh,w,c
  3462  001D4E  6EDA               	movwf	fsr2h,c
  3463  001D50  C0E3  F018         	movff	update_string_data@i,___wmul@multiplier
  3464  001D54  C0E4  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  3465  001D58  0E00               	movlw	0
  3466  001D5A  6E1B               	movwf	___wmul@multiplicand+1,c
  3467  001D5C  0E36               	movlw	54
  3468  001D5E  6E1A               	movwf	___wmul@multiplicand,c
  3469  001D60  ECD5  F01C         	call	___wmul	;wreg free
  3470  001D64  0E96               	movlw	low _clcd_display_string_details
  3471  001D66  2418               	addwf	?___wmul,w,c
  3472  001D68  6EE1               	movwf	fsr1l,c
  3473  001D6A  0E02               	movlw	high _clcd_display_string_details
  3474  001D6C  2019               	addwfc	?___wmul+1,w,c
  3475  001D6E  6EE2               	movwf	fsr1h,c
  3476  001D70  50E7               	movf	231,w,c
  3477  001D72  0B7F               	andlw	127
  3478  001D74  6EDF               	movwf	indf2,c
  3479  001D76  2A42               	incf	_conflict_data_count,f,c
  3480                           
  3481                           ;clcd.c: 191: conflict_check(exist_uid_idx, start_point, end_point);
  3482  001D78  C0E1  F030         	movff	update_string_data@start_point,conflict_check@new_start_point
  3483  001D7C  C0E2  F031         	movff	update_string_data@end_point,conflict_check@new_end_point
  3484  001D80  0100               	movlb	0	; () banked
  3485  001D82  51E0               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3486  001D84  ECD2  F00C         	call	_conflict_check
  3487  001D88                     l6732:
  3488                           
  3489                           ;clcd.c: 192: return 1;
  3490  001D88  0E01               	movlw	1
  3491  001D8A  0012               	return	
  3492  001D8C                     l6738:
  3493                           
  3494                           ;clcd.c: 194: if (conflict_check(exist_uid_idx, start_point, end_point) == 1) {
  3495  001D8C  C0E1  F030         	movff	update_string_data@start_point,conflict_check@new_start_point
  3496  001D90  C0E2  F031         	movff	update_string_data@end_point,conflict_check@new_end_point
  3497  001D94  0100               	movlb	0	; () banked
  3498  001D96  51E0               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3499  001D98  ECD2  F00C         	call	_conflict_check
  3500  001D9C  06E8               	decf	wreg,f,c
  3501  001D9E  A4D8               	btfss	status,2,c
  3502  001DA0  D03F               	goto	l6756
  3503                           
  3504                           ;clcd.c: 195: printf("conflict: uid\r\n");
  3505  001DA2  0E5C               	movlw	low STR_10
  3506  001DA4  6E1E               	movwf	printf@f,c
  3507  001DA6  0EFE               	movlw	high STR_10
  3508  001DA8  6E1F               	movwf	printf@f+1,c
  3509  001DAA  EC48  F012         	call	_printf	;wreg free
  3510                           
  3511                           ;clcd.c: 196: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3512  001DAE  0E00               	movlw	0
  3513  001DB0  0100               	movlb	0	; () banked
  3514  001DB2  6FE4               	movwf	(update_string_data@i+1)& (0+255),b
  3515  001DB4  0E00               	movlw	0
  3516  001DB6  6FE3               	movwf	update_string_data@i& (0+255),b
  3517  001DB8  D018               	goto	l6748
  3518  001DBA                     l6744:
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;clcd.c: 198: printf("%c, ", conflict_arr[i]);
  3522  001DBA  0EE3               	movlw	low STR_11
  3523  001DBC  6E1E               	movwf	printf@f,c
  3524  001DBE  0EFF               	movlw	high STR_11
  3525  001DC0  6E1F               	movwf	printf@f+1,c
  3526  001DC2  0EB8               	movlw	low _conflict_arr
  3527  001DC4  0100               	movlb	0	; () banked
  3528  001DC6  25E3               	addwf	update_string_data@i& (0+255),w,b
  3529  001DC8  6ED9               	movwf	fsr2l,c
  3530  001DCA  0E00               	movlw	high _conflict_arr
  3531  001DCC  0100               	movlb	0	; () banked
  3532  001DCE  21E4               	addwfc	(update_string_data@i+1)& (0+255),w,b
  3533  001DD0  6EDA               	movwf	fsr2h,c
  3534  001DD2  50DF               	movf	indf2,w,c
  3535  001DD4  0100               	movlb	0	; () banked
  3536  001DD6  6FDD               	movwf	??_update_string_data& (0+255),b
  3537  001DD8  0100               	movlb	0	; () banked
  3538  001DDA  51DD               	movf	??_update_string_data& (0+255),w,b
  3539  001DDC  6E20               	movwf	?_printf+2,c
  3540  001DDE  6A21               	clrf	?_printf+3,c
  3541  001DE0  EC48  F012         	call	_printf	;wreg free
  3542  001DE4  0100               	movlb	0	; () banked
  3543  001DE6  4BE3               	infsnz	update_string_data@i& (0+255),f,b
  3544  001DE8  2BE4               	incf	(update_string_data@i+1)& (0+255),f,b
  3545  001DEA                     l6748:
  3546                           
  3547                           ; BSR set to: 0
  3548  001DEA  504D               	movf	_clcd_config_data+4,w,c
  3549  001DEC  0100               	movlb	0	; () banked
  3550  001DEE  6FDD               	movwf	??_update_string_data& (0+255),b
  3551  001DF0  6BDE               	clrf	(??_update_string_data+1)& (0+255),b
  3552  001DF2  0100               	movlb	0	; () banked
  3553  001DF4  51DD               	movf	??_update_string_data& (0+255),w,b
  3554  001DF6  0100               	movlb	0	; () banked
  3555  001DF8  5DE3               	subwf	update_string_data@i& (0+255),w,b
  3556  001DFA  0100               	movlb	0	; () banked
  3557  001DFC  51E4               	movf	(update_string_data@i+1)& (0+255),w,b
  3558  001DFE  0A80               	xorlw	128
  3559  001E00  0100               	movlb	0	; () banked
  3560  001E02  6FDF               	movwf	(??_update_string_data+2)& (0+255),b
  3561  001E04  0100               	movlb	0	; () banked
  3562  001E06  51DE               	movf	(??_update_string_data+1)& (0+255),w,b
  3563  001E08  0A80               	xorlw	128
  3564  001E0A  0100               	movlb	0	; () banked
  3565  001E0C  59DF               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3566  001E0E  A0D8               	btfss	status,0,c
  3567  001E10  D7D4               	goto	l6744
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;clcd.c: 199: }printf("\r\n");
  3571                           
  3572                           ; BSR set to: 0
  3573  001E12  0E9F               	movlw	low (STR_57+9)
  3574  001E14  6E1E               	movwf	printf@f,c
  3575  001E16  0EFE               	movlw	high (STR_57+9)
  3576  001E18  6E1F               	movwf	printf@f+1,c
  3577  001E1A  EC48  F012         	call	_printf	;wreg free
  3578  001E1E  D7B4               	goto	l6732
  3579  001E20                     l6756:
  3580  001E20  0100               	movlb	0	; () banked
  3581  001E22  4BE3               	infsnz	update_string_data@i& (0+255),f,b
  3582  001E24  2BE4               	incf	(update_string_data@i+1)& (0+255),f,b
  3583  001E26                     l6758:
  3584                           
  3585                           ; BSR set to: 0
  3586  001E26  504D               	movf	_clcd_config_data+4,w,c
  3587  001E28  0100               	movlb	0	; () banked
  3588  001E2A  6FDD               	movwf	??_update_string_data& (0+255),b
  3589  001E2C  6BDE               	clrf	(??_update_string_data+1)& (0+255),b
  3590  001E2E  0100               	movlb	0	; () banked
  3591  001E30  51DD               	movf	??_update_string_data& (0+255),w,b
  3592  001E32  0100               	movlb	0	; () banked
  3593  001E34  5DE3               	subwf	update_string_data@i& (0+255),w,b
  3594  001E36  0100               	movlb	0	; () banked
  3595  001E38  51E4               	movf	(update_string_data@i+1)& (0+255),w,b
  3596  001E3A  0A80               	xorlw	128
  3597  001E3C  0100               	movlb	0	; () banked
  3598  001E3E  6FDF               	movwf	(??_update_string_data+2)& (0+255),b
  3599  001E40  0100               	movlb	0	; () banked
  3600  001E42  51DE               	movf	(??_update_string_data+1)& (0+255),w,b
  3601  001E44  0A80               	xorlw	128
  3602  001E46  0100               	movlb	0	; () banked
  3603  001E48  59DF               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3604  001E4A  A0D8               	btfss	status,0,c
  3605  001E4C  D75A               	goto	l6722
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;clcd.c: 201: }
  3609                           ;clcd.c: 202: }
  3610                           ;clcd.c: 203: }
  3611                           ;clcd.c: 204: memset(&clcd_display_string_details[data_count], 0, sizeof (CLCD_STRING_DI
      +                          SPLAY_DETAILS));
  3612                           
  3613                           ; BSR set to: 0
  3614  001E4E  5043               	movf	_data_count,w,c
  3615  001E50  0D36               	mullw	54
  3616  001E52  0E96               	movlw	low _clcd_display_string_details
  3617  001E54  24F3               	addwf	prodl,w,c
  3618  001E56  6E24               	movwf	memset@p1,c
  3619  001E58  0E02               	movlw	high _clcd_display_string_details
  3620  001E5A  20F4               	addwfc	prodh,w,c
  3621  001E5C  6E25               	movwf	memset@p1+1,c
  3622  001E5E  0E00               	movlw	0
  3623  001E60  6E27               	movwf	memset@c+1,c
  3624  001E62  0E00               	movlw	0
  3625  001E64  6E26               	movwf	memset@c,c
  3626  001E66  0E00               	movlw	0
  3627  001E68  6E29               	movwf	memset@n+1,c
  3628  001E6A  0E36               	movlw	54
  3629  001E6C  6E28               	movwf	memset@n,c
  3630  001E6E  EC63  F01B         	call	_memset	;wreg free
  3631                           
  3632                           ;clcd.c: 205: copy_data(&clcd_display_string_details[data_count], data);
  3633  001E72  5043               	movf	_data_count,w,c
  3634  001E74  0D36               	mullw	54
  3635  001E76  0E96               	movlw	low _clcd_display_string_details
  3636  001E78  24F3               	addwf	prodl,w,c
  3637  001E7A  6E30               	movwf	copy_data@clcd_str_data,c
  3638  001E7C  0E02               	movlw	high _clcd_display_string_details
  3639  001E7E  20F4               	addwfc	prodh,w,c
  3640  001E80  6E31               	movwf	copy_data@clcd_str_data+1,c
  3641  001E82  C0DB  F032         	movff	update_string_data@data,copy_data@data
  3642  001E86  C0DC  F033         	movff	update_string_data@data+1,copy_data@data+1
  3643  001E8A  EC5A  F010         	call	_copy_data	;wreg free
  3644                           
  3645                           ;clcd.c: 206: data_count++;
  3646  001E8E  2A43               	incf	_data_count,f,c
  3647                           
  3648                           ;clcd.c: 207: make_display();
  3649  001E90  EC57  F011         	call	_make_display	;wreg free
  3650  001E94                     l6768:
  3651                           
  3652                           ;clcd.c: 210: }
  3653                           ;clcd.c: 211: return 0;
  3654  001E94  0E00               	movlw	0
  3655  001E96  0012               	return	
  3656  001E98                     __end_of_update_string_data:
  3657                           	opt stack 0
  3658                           tblptru	equ	0xFF8
  3659                           tblptrh	equ	0xFF7
  3660                           tblptrl	equ	0xFF6
  3661                           tablat	equ	0xFF5
  3662                           prodh	equ	0xFF4
  3663                           prodl	equ	0xFF3
  3664                           intcon	equ	0xFF2
  3665                           postinc0	equ	0xFEE
  3666                           wreg	equ	0xFE8
  3667                           postdec1	equ	0xFE5
  3668                           fsr1h	equ	0xFE2
  3669                           fsr1l	equ	0xFE1
  3670                           indf2	equ	0xFDF
  3671                           postinc2	equ	0xFDE
  3672                           fsr2h	equ	0xFDA
  3673                           fsr2l	equ	0xFD9
  3674                           status	equ	0xFD8
  3675                           
  3676 ;; *************** function _make_display *****************
  3677 ;; Defined at:
  3678 ;;		line 559 in file "clcd.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;		None
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  count           2   62[COMRAM] int 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      void 
  3685 ;; Registers used:
  3686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;Total ram usage:        5 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    9
  3699 ;; This function calls:
  3700 ;;		___wmul
  3701 ;;		_display_text
  3702 ;;		_scroll_left_to_right
  3703 ;;		_scroll_off
  3704 ;;		_scroll_right_to_left
  3705 ;;		_strlen
  3706 ;; This function is called by:
  3707 ;;		_update_string_data
  3708 ;;		_main
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text6
  3713  0022AE                     __ptext6:
  3714                           	opt stack 0
  3715  0022AE                     _make_display:
  3716                           	opt stack 21
  3717                           
  3718                           ;clcd.c: 560: int count = 0;
  3719                           
  3720                           ;incstack = 0
  3721  0022AE  0E00               	movlw	0
  3722  0022B0  6E40               	movwf	make_display@count+1,c
  3723  0022B2  0E00               	movlw	0
  3724  0022B4  6E3F               	movwf	make_display@count,c
  3725                           
  3726                           ;clcd.c: 561: for (count = 0; count < clcd_config_data.clcd_max_display_string; count++)
      +                           {
  3727  0022B6  0E00               	movlw	0
  3728  0022B8  6E40               	movwf	make_display@count+1,c
  3729  0022BA  0E00               	movlw	0
  3730  0022BC  6E3F               	movwf	make_display@count,c
  3731  0022BE  D0D3               	goto	l6510
  3732  0022C0                     l6490:
  3733                           
  3734                           ;clcd.c: 562: if (strlen(clcd_display_string_details[count].string) != 0 && clcd_display
      +                          _string_details[count].direction == 2) {
  3735  0022C0  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3736  0022C4  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3737  0022C8  0E00               	movlw	0
  3738  0022CA  6E1B               	movwf	___wmul@multiplicand+1,c
  3739  0022CC  0E36               	movlw	54
  3740  0022CE  6E1A               	movwf	___wmul@multiplicand,c
  3741  0022D0  ECD5  F01C         	call	___wmul	;wreg free
  3742  0022D4  0E01               	movlw	1
  3743  0022D6  2618               	addwf	?___wmul,f,c
  3744  0022D8  0E00               	movlw	0
  3745  0022DA  2219               	addwfc	?___wmul+1,f,c
  3746  0022DC  0E96               	movlw	low _clcd_display_string_details
  3747  0022DE  2418               	addwf	?___wmul,w,c
  3748  0022E0  6E1E               	movwf	strlen@s,c
  3749  0022E2  0E02               	movlw	high _clcd_display_string_details
  3750  0022E4  2019               	addwfc	?___wmul+1,w,c
  3751  0022E6  6E1F               	movwf	strlen@s+1,c
  3752  0022E8  EC2E  F01A         	call	_strlen	;wreg free
  3753  0022EC  501E               	movf	?_strlen,w,c
  3754  0022EE  101F               	iorwf	?_strlen+1,w,c
  3755  0022F0  B4D8               	btfsc	status,2,c
  3756  0022F2  D02C               	goto	l6496
  3757  0022F4  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3758  0022F8  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3759  0022FC  0E00               	movlw	0
  3760  0022FE  6E1B               	movwf	___wmul@multiplicand+1,c
  3761  002300  0E36               	movlw	54
  3762  002302  6E1A               	movwf	___wmul@multiplicand,c
  3763  002304  ECD5  F01C         	call	___wmul	;wreg free
  3764  002308  0E30               	movlw	48
  3765  00230A  2618               	addwf	?___wmul,f,c
  3766  00230C  0E00               	movlw	0
  3767  00230E  2219               	addwfc	?___wmul+1,f,c
  3768  002310  0E96               	movlw	low _clcd_display_string_details
  3769  002312  2418               	addwf	?___wmul,w,c
  3770  002314  6ED9               	movwf	fsr2l,c
  3771  002316  0E02               	movlw	high _clcd_display_string_details
  3772  002318  2019               	addwfc	?___wmul+1,w,c
  3773  00231A  6EDA               	movwf	fsr2h,c
  3774  00231C  50DF               	movf	223,w,c
  3775  00231E  0B07               	andlw	7
  3776  002320  0A02               	xorlw	2
  3777  002322  A4D8               	btfss	status,2,c
  3778  002324  D013               	goto	l6496
  3779                           
  3780                           ;clcd.c: 563: scroll_left_to_right(&clcd_display_string_details[count]);
  3781  002326  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3782  00232A  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3783  00232E  0E00               	movlw	0
  3784  002330  6E1B               	movwf	___wmul@multiplicand+1,c
  3785  002332  0E36               	movlw	54
  3786  002334  6E1A               	movwf	___wmul@multiplicand,c
  3787  002336  ECD5  F01C         	call	___wmul	;wreg free
  3788  00233A  0E96               	movlw	low _clcd_display_string_details
  3789  00233C  2418               	addwf	?___wmul,w,c
  3790  00233E  6E2C               	movwf	scroll_left_to_right@clcd_display_string_details,c
  3791  002340  0E02               	movlw	high _clcd_display_string_details
  3792  002342  2019               	addwfc	?___wmul+1,w,c
  3793  002344  6E2D               	movwf	scroll_left_to_right@clcd_display_string_details+1,c
  3794  002346  EC36  F00B         	call	_scroll_left_to_right	;wreg free
  3795                           
  3796                           ;clcd.c: 564: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 1) {
  3797  00234A  D08B               	goto	l6508
  3798  00234C                     l6496:
  3799  00234C  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3800  002350  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3801  002354  0E00               	movlw	0
  3802  002356  6E1B               	movwf	___wmul@multiplicand+1,c
  3803  002358  0E36               	movlw	54
  3804  00235A  6E1A               	movwf	___wmul@multiplicand,c
  3805  00235C  ECD5  F01C         	call	___wmul	;wreg free
  3806  002360  0E01               	movlw	1
  3807  002362  2618               	addwf	?___wmul,f,c
  3808  002364  0E00               	movlw	0
  3809  002366  2219               	addwfc	?___wmul+1,f,c
  3810  002368  0E96               	movlw	low _clcd_display_string_details
  3811  00236A  2418               	addwf	?___wmul,w,c
  3812  00236C  6E1E               	movwf	strlen@s,c
  3813  00236E  0E02               	movlw	high _clcd_display_string_details
  3814  002370  2019               	addwfc	?___wmul+1,w,c
  3815  002372  6E1F               	movwf	strlen@s+1,c
  3816  002374  EC2E  F01A         	call	_strlen	;wreg free
  3817  002378  501E               	movf	?_strlen,w,c
  3818  00237A  101F               	iorwf	?_strlen+1,w,c
  3819  00237C  B4D8               	btfsc	status,2,c
  3820  00237E  D02C               	goto	l6502
  3821  002380  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3822  002384  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3823  002388  0E00               	movlw	0
  3824  00238A  6E1B               	movwf	___wmul@multiplicand+1,c
  3825  00238C  0E36               	movlw	54
  3826  00238E  6E1A               	movwf	___wmul@multiplicand,c
  3827  002390  ECD5  F01C         	call	___wmul	;wreg free
  3828  002394  0E30               	movlw	48
  3829  002396  2618               	addwf	?___wmul,f,c
  3830  002398  0E00               	movlw	0
  3831  00239A  2219               	addwfc	?___wmul+1,f,c
  3832  00239C  0E96               	movlw	low _clcd_display_string_details
  3833  00239E  2418               	addwf	?___wmul,w,c
  3834  0023A0  6ED9               	movwf	fsr2l,c
  3835  0023A2  0E02               	movlw	high _clcd_display_string_details
  3836  0023A4  2019               	addwfc	?___wmul+1,w,c
  3837  0023A6  6EDA               	movwf	fsr2h,c
  3838  0023A8  50DF               	movf	223,w,c
  3839  0023AA  0B07               	andlw	7
  3840  0023AC  06E8               	decf	wreg,f,c
  3841  0023AE  A4D8               	btfss	status,2,c
  3842  0023B0  D013               	goto	l6502
  3843                           
  3844                           ;clcd.c: 565: scroll_right_to_left(&clcd_display_string_details[count]);
  3845  0023B2  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3846  0023B6  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3847  0023BA  0E00               	movlw	0
  3848  0023BC  6E1B               	movwf	___wmul@multiplicand+1,c
  3849  0023BE  0E36               	movlw	54
  3850  0023C0  6E1A               	movwf	___wmul@multiplicand,c
  3851  0023C2  ECD5  F01C         	call	___wmul	;wreg free
  3852  0023C6  0E96               	movlw	low _clcd_display_string_details
  3853  0023C8  2418               	addwf	?___wmul,w,c
  3854  0023CA  6E2C               	movwf	scroll_right_to_left@clcd_display_string_details,c
  3855  0023CC  0E02               	movlw	high _clcd_display_string_details
  3856  0023CE  2019               	addwfc	?___wmul+1,w,c
  3857  0023D0  6E2D               	movwf	scroll_right_to_left@clcd_display_string_details+1,c
  3858  0023D2  ECDA  F007         	call	_scroll_right_to_left	;wreg free
  3859                           
  3860                           ;clcd.c: 566: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 0) {
  3861  0023D6  D045               	goto	l6508
  3862  0023D8                     l6502:
  3863  0023D8  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3864  0023DC  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3865  0023E0  0E00               	movlw	0
  3866  0023E2  6E1B               	movwf	___wmul@multiplicand+1,c
  3867  0023E4  0E36               	movlw	54
  3868  0023E6  6E1A               	movwf	___wmul@multiplicand,c
  3869  0023E8  ECD5  F01C         	call	___wmul	;wreg free
  3870  0023EC  0E01               	movlw	1
  3871  0023EE  2618               	addwf	?___wmul,f,c
  3872  0023F0  0E00               	movlw	0
  3873  0023F2  2219               	addwfc	?___wmul+1,f,c
  3874  0023F4  0E96               	movlw	low _clcd_display_string_details
  3875  0023F6  2418               	addwf	?___wmul,w,c
  3876  0023F8  6E1E               	movwf	strlen@s,c
  3877  0023FA  0E02               	movlw	high _clcd_display_string_details
  3878  0023FC  2019               	addwfc	?___wmul+1,w,c
  3879  0023FE  6E1F               	movwf	strlen@s+1,c
  3880  002400  EC2E  F01A         	call	_strlen	;wreg free
  3881  002404  501E               	movf	?_strlen,w,c
  3882  002406  101F               	iorwf	?_strlen+1,w,c
  3883  002408  B4D8               	btfsc	status,2,c
  3884  00240A  D02B               	goto	l6508
  3885  00240C  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3886  002410  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3887  002414  0E00               	movlw	0
  3888  002416  6E1B               	movwf	___wmul@multiplicand+1,c
  3889  002418  0E36               	movlw	54
  3890  00241A  6E1A               	movwf	___wmul@multiplicand,c
  3891  00241C  ECD5  F01C         	call	___wmul	;wreg free
  3892  002420  0E30               	movlw	48
  3893  002422  2618               	addwf	?___wmul,f,c
  3894  002424  0E00               	movlw	0
  3895  002426  2219               	addwfc	?___wmul+1,f,c
  3896  002428  0E96               	movlw	low _clcd_display_string_details
  3897  00242A  2418               	addwf	?___wmul,w,c
  3898  00242C  6ED9               	movwf	fsr2l,c
  3899  00242E  0E02               	movlw	high _clcd_display_string_details
  3900  002430  2019               	addwfc	?___wmul+1,w,c
  3901  002432  6EDA               	movwf	fsr2h,c
  3902  002434  50DF               	movf	223,w,c
  3903  002436  0B07               	andlw	7
  3904  002438  0900               	iorlw	0
  3905  00243A  A4D8               	btfss	status,2,c
  3906  00243C  D012               	goto	l6508
  3907                           
  3908                           ;clcd.c: 567: scroll_off(&clcd_display_string_details[count]);
  3909  00243E  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3910  002442  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3911  002446  0E00               	movlw	0
  3912  002448  6E1B               	movwf	___wmul@multiplicand+1,c
  3913  00244A  0E36               	movlw	54
  3914  00244C  6E1A               	movwf	___wmul@multiplicand,c
  3915  00244E  ECD5  F01C         	call	___wmul	;wreg free
  3916  002452  0E96               	movlw	low _clcd_display_string_details
  3917  002454  2418               	addwf	?___wmul,w,c
  3918  002456  6E24               	movwf	scroll_off@clcd_display_string_details,c
  3919  002458  0E02               	movlw	high _clcd_display_string_details
  3920  00245A  2019               	addwfc	?___wmul+1,w,c
  3921  00245C  6E25               	movwf	scroll_off@clcd_display_string_details+1,c
  3922  00245E  ECE3  F013         	call	_scroll_off	;wreg free
  3923  002462                     l6508:
  3924  002462  4A3F               	infsnz	make_display@count,f,c
  3925  002464  2A40               	incf	make_display@count+1,f,c
  3926  002466                     l6510:
  3927  002466  504D               	movf	_clcd_config_data+4,w,c
  3928  002468  6E3C               	movwf	??_make_display& (0+255),c
  3929  00246A  6A3D               	clrf	(??_make_display+1)& (0+255),c
  3930  00246C  503C               	movf	??_make_display,w,c
  3931  00246E  5C3F               	subwf	make_display@count,w,c
  3932  002470  5040               	movf	make_display@count+1,w,c
  3933  002472  0A80               	xorlw	128
  3934  002474  6E3E               	movwf	(??_make_display+2)& (0+255),c
  3935  002476  503D               	movf	??_make_display+1,w,c
  3936  002478  0A80               	xorlw	128
  3937  00247A  583E               	subwfb	(??_make_display+2)& (0+255),w,c
  3938  00247C  A0D8               	btfss	status,0,c
  3939  00247E  D720               	goto	l6490
  3940                           
  3941                           ;clcd.c: 568: }
  3942                           ;clcd.c: 569: }
  3943                           ;clcd.c: 570: print_data_ready = 1;
  3944  002480  0E00               	movlw	0
  3945  002482  0100               	movlb	0	; () banked
  3946  002484  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  3947  002486  0E01               	movlw	1
  3948  002488  6F76               	movwf	_print_data_ready& (0+255),b
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;clcd.c: 571: display_text();
  3952  00248A  EC43  F018         	call	_display_text	;wreg free
  3953  00248E  0012               	return		;funcret
  3954  002490                     __end_of_make_display:
  3955                           	opt stack 0
  3956                           tblptru	equ	0xFF8
  3957                           tblptrh	equ	0xFF7
  3958                           tblptrl	equ	0xFF6
  3959                           tablat	equ	0xFF5
  3960                           prodh	equ	0xFF4
  3961                           prodl	equ	0xFF3
  3962                           intcon	equ	0xFF2
  3963                           postinc0	equ	0xFEE
  3964                           wreg	equ	0xFE8
  3965                           postdec1	equ	0xFE5
  3966                           fsr1h	equ	0xFE2
  3967                           fsr1l	equ	0xFE1
  3968                           indf2	equ	0xFDF
  3969                           postinc2	equ	0xFDE
  3970                           fsr2h	equ	0xFDA
  3971                           fsr2l	equ	0xFD9
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function _scroll_right_to_left *****************
  3975 ;; Defined at:
  3976 ;;		line 444 in file "clcd.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  clcd_display    2   43[COMRAM] PTR struct .
  3979 ;;		 -> clcd_display_string_details(1080), 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  line            1   58[COMRAM] unsigned char 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  1    wreg      void 
  3984 ;; Registers used:
  3985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3991 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Temps:         13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;Total ram usage:       16 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    6
  3998 ;; This function calls:
  3999 ;;		_memcpy
  4000 ;;		_memset
  4001 ;;		_strncpy
  4002 ;; This function is called by:
  4003 ;;		_make_display
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text7
  4008  000FB4                     __ptext7:
  4009                           	opt stack 0
  4010  000FB4                     _scroll_right_to_left:
  4011                           	opt stack 23
  4012                           
  4013                           ;clcd.c: 446: char line = -1;
  4014                           
  4015                           ;incstack = 0
  4016  000FB4  683B               	setf	scroll_right_to_left@line,c
  4017                           
  4018                           ;clcd.c: 447: if (clcd_display_string_details->start_row == 0)
  4019  000FB6  EE20 F02A          	lfsr	2,42
  4020  000FBA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4021  000FBC  26D9               	addwf	fsr2l,f,c
  4022  000FBE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4023  000FC0  22DA               	addwfc	fsr2h,f,c
  4024  000FC2  50DF               	movf	indf2,w,c
  4025  000FC4  0B7F               	andlw	127
  4026  000FC6  0900               	iorlw	0
  4027  000FC8  A4D8               	btfss	status,2,c
  4028  000FCA  D002               	goto	l6274
  4029                           
  4030                           ;clcd.c: 448: line = 0;
  4031  000FCC  0E00               	movlw	0
  4032  000FCE  D00C               	goto	L1
  4033  000FD0                     l6274:
  4034                           
  4035                           ;clcd.c: 449: else if (clcd_display_string_details->start_row == 1)
  4036  000FD0  EE20 F02A          	lfsr	2,42
  4037  000FD4  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4038  000FD6  26D9               	addwf	fsr2l,f,c
  4039  000FD8  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4040  000FDA  22DA               	addwfc	fsr2h,f,c
  4041  000FDC  50DF               	movf	indf2,w,c
  4042  000FDE  0B7F               	andlw	127
  4043  000FE0  06E8               	decf	wreg,f,c
  4044  000FE2  A4D8               	btfss	status,2,c
  4045  000FE4  D002               	goto	l6278
  4046                           
  4047                           ;clcd.c: 450: line = 1;
  4048  000FE6  0E01               	movlw	1
  4049  000FE8                     L1:
  4050  000FE8  6E3B               	movwf	scroll_right_to_left@line,c
  4051  000FEA                     l6278:
  4052                           
  4053                           ;clcd.c: 451: if (clcd_display_string_details->start_row == 2)
  4054  000FEA  EE20 F02A          	lfsr	2,42
  4055  000FEE  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4056  000FF0  26D9               	addwf	fsr2l,f,c
  4057  000FF2  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4058  000FF4  22DA               	addwfc	fsr2h,f,c
  4059  000FF6  50DF               	movf	indf2,w,c
  4060  000FF8  0B7F               	andlw	127
  4061  000FFA  0A02               	xorlw	2
  4062  000FFC  A4D8               	btfss	status,2,c
  4063  000FFE  D002               	goto	l6282
  4064                           
  4065                           ;clcd.c: 452: line = 2;
  4066  001000  0E02               	movlw	2
  4067  001002  6E3B               	movwf	scroll_right_to_left@line,c
  4068  001004                     l6282:
  4069                           
  4070                           ;clcd.c: 453: if (clcd_display_string_details->start_row == 3)
  4071  001004  EE20 F02A          	lfsr	2,42
  4072  001008  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4073  00100A  26D9               	addwf	fsr2l,f,c
  4074  00100C  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4075  00100E  22DA               	addwfc	fsr2h,f,c
  4076  001010  50DF               	movf	indf2,w,c
  4077  001012  0B7F               	andlw	127
  4078  001014  0A03               	xorlw	3
  4079  001016  A4D8               	btfss	status,2,c
  4080  001018  D002               	goto	l6286
  4081                           
  4082                           ;clcd.c: 454: line = 3;
  4083  00101A  0E03               	movlw	3
  4084  00101C  6E3B               	movwf	scroll_right_to_left@line,c
  4085  00101E                     l6286:
  4086                           
  4087                           ;clcd.c: 456: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  4088                           ;clcd.c: 457: ' ', clcd_display_string_details->display_char_count);
  4089  00101E  503B               	movf	scroll_right_to_left@line,w,c
  4090  001020  0D14               	mullw	20
  4091  001022  0E00               	movlw	low _lcd_display_array
  4092  001024  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4093  001026  0E01               	movlw	high _lcd_display_array
  4094  001028  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4095  00102A  50F3               	movf	prodl,w,c
  4096  00102C  262E               	addwf	??_scroll_right_to_left,f,c
  4097  00102E  50F4               	movf	prodh,w,c
  4098  001030  222F               	addwfc	??_scroll_right_to_left+1,f,c
  4099  001032  EE20 F02B          	lfsr	2,43
  4100  001036  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4101  001038  26D9               	addwf	fsr2l,f,c
  4102  00103A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4103  00103C  22DA               	addwfc	fsr2h,f,c
  4104  00103E  50DF               	movf	indf2,w,c
  4105  001040  0B7F               	andlw	127
  4106  001042  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4107  001044  5030               	movf	??_scroll_right_to_left+2,w,c
  4108  001046  0D01               	mullw	1
  4109  001048  50F3               	movf	prodl,w,c
  4110  00104A  242E               	addwf	??_scroll_right_to_left,w,c
  4111  00104C  6E24               	movwf	memset@p1,c
  4112  00104E  50F4               	movf	prodh,w,c
  4113  001050  202F               	addwfc	??_scroll_right_to_left+1,w,c
  4114  001052  6E25               	movwf	memset@p1+1,c
  4115  001054  0E00               	movlw	0
  4116  001056  6E27               	movwf	memset@c+1,c
  4117  001058  0E20               	movlw	32
  4118  00105A  6E26               	movwf	memset@c,c
  4119  00105C  EE20 F031          	lfsr	2,49
  4120  001060  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4121  001062  26D9               	addwf	fsr2l,f,c
  4122  001064  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4123  001066  22DA               	addwfc	fsr2h,f,c
  4124  001068  50DF               	movf	indf2,w,c
  4125  00106A  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  4126  00106C  5031               	movf	??_scroll_right_to_left+3,w,c
  4127  00106E  6E28               	movwf	memset@n,c
  4128  001070  6A29               	clrf	memset@n+1,c
  4129  001072  EC63  F01B         	call	_memset	;wreg free
  4130                           
  4131                           ;clcd.c: 458: if (clcd_display_string_details->length_count_for_left_scroll > clcd_displ
      +                          ay_string_details->strlen) {
  4132  001076  EE20 F029          	lfsr	2,41
  4133  00107A  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4134  00107C  26D9               	addwf	fsr2l,f,c
  4135  00107E  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4136  001080  22DA               	addwfc	fsr2h,f,c
  4137  001082  50DF               	movf	indf2,w,c
  4138  001084  0B7F               	andlw	127
  4139  001086  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4140  001088  EE20 F034          	lfsr	2,52
  4141  00108C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4142  00108E  26D9               	addwf	fsr2l,f,c
  4143  001090  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4144  001092  22DA               	addwfc	fsr2h,f,c
  4145  001094  50DF               	movf	indf2,w,c
  4146  001096  0B7F               	andlw	127
  4147  001098  5C2E               	subwf	??_scroll_right_to_left,w,c
  4148  00109A  B0D8               	btfsc	status,0,c
  4149  00109C  D06E               	goto	l6292
  4150                           
  4151                           ;clcd.c: 460: strncpy(lcd_display_array[line]+(clcd_display_string_details->end_col - cl
      +                          cd_display_string_details->length_decount_for_left_scroll - 1),
  4152                           ;clcd.c: 461: clcd_display_string_details->string, (clcd_display_string_details->display
      +                          _char_count -
  4153                           ;clcd.c: 462: (clcd_display_string_details->display_char_count - (clcd_display_string_de
      +                          tails->length_decount_for_left_scroll + 1))));
  4154  00109E  503B               	movf	scroll_right_to_left@line,w,c
  4155  0010A0  0D14               	mullw	20
  4156  0010A2  0EFF               	movlw	255
  4157  0010A4  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4158  0010A6  0EFF               	movlw	255
  4159  0010A8  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4160  0010AA  EE20 F035          	lfsr	2,53
  4161  0010AE  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4162  0010B0  26D9               	addwf	fsr2l,f,c
  4163  0010B2  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4164  0010B4  22DA               	addwfc	fsr2h,f,c
  4165  0010B6  50DF               	movf	indf2,w,c
  4166  0010B8  0B7F               	andlw	127
  4167  0010BA  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4168  0010BC  6A31               	clrf	(??_scroll_right_to_left+3)& (0+255),c
  4169  0010BE  1E30               	comf	??_scroll_right_to_left+2,f,c
  4170  0010C0  1E31               	comf	??_scroll_right_to_left+3,f,c
  4171  0010C2  4A30               	infsnz	??_scroll_right_to_left+2,f,c
  4172  0010C4  2A31               	incf	??_scroll_right_to_left+3,f,c
  4173  0010C6  EE20 F02E          	lfsr	2,46
  4174  0010CA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4175  0010CC  26D9               	addwf	fsr2l,f,c
  4176  0010CE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4177  0010D0  22DA               	addwfc	fsr2h,f,c
  4178  0010D2  50DF               	movf	indf2,w,c
  4179  0010D4  0B7F               	andlw	127
  4180  0010D6  6E32               	movwf	(??_scroll_right_to_left+4)& (0+255),c
  4181  0010D8  6A33               	clrf	(??_scroll_right_to_left+5)& (0+255),c
  4182  0010DA  5030               	movf	??_scroll_right_to_left+2,w,c
  4183  0010DC  2632               	addwf	??_scroll_right_to_left+4,f,c
  4184  0010DE  5031               	movf	??_scroll_right_to_left+3,w,c
  4185  0010E0  2233               	addwfc	??_scroll_right_to_left+5,f,c
  4186  0010E2  502E               	movf	??_scroll_right_to_left,w,c
  4187  0010E4  2632               	addwf	??_scroll_right_to_left+4,f,c
  4188  0010E6  502F               	movf	??_scroll_right_to_left+1,w,c
  4189  0010E8  2233               	addwfc	??_scroll_right_to_left+5,f,c
  4190  0010EA  0E00               	movlw	low _lcd_display_array
  4191  0010EC  6E34               	movwf	(??_scroll_right_to_left+6)& (0+255),c
  4192  0010EE  0E01               	movlw	high _lcd_display_array
  4193  0010F0  6E35               	movwf	(??_scroll_right_to_left+7)& (0+255),c
  4194  0010F2  5032               	movf	??_scroll_right_to_left+4,w,c
  4195  0010F4  2634               	addwf	??_scroll_right_to_left+6,f,c
  4196  0010F6  5033               	movf	??_scroll_right_to_left+5,w,c
  4197  0010F8  2235               	addwfc	??_scroll_right_to_left+7,f,c
  4198  0010FA  50F3               	movf	prodl,w,c
  4199  0010FC  2434               	addwf	??_scroll_right_to_left+6,w,c
  4200  0010FE  6E10               	movwf	strncpy@to,c
  4201  001100  50F4               	movf	prodh,w,c
  4202  001102  2035               	addwfc	??_scroll_right_to_left+7,w,c
  4203  001104  6E11               	movwf	strncpy@to+1,c
  4204  001106  0E01               	movlw	1
  4205  001108  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4206  00110A  6E12               	movwf	strncpy@from,c
  4207  00110C  0E00               	movlw	0
  4208  00110E  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4209  001110  6E13               	movwf	strncpy@from+1,c
  4210  001112  EE20 F035          	lfsr	2,53
  4211  001116  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4212  001118  26D9               	addwf	fsr2l,f,c
  4213  00111A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4214  00111C  22DA               	addwfc	fsr2h,f,c
  4215  00111E  50DF               	movf	indf2,w,c
  4216  001120  0B7F               	andlw	127
  4217  001122  6E36               	movwf	(??_scroll_right_to_left+8)& (0+255),c
  4218  001124  6A37               	clrf	(??_scroll_right_to_left+9)& (0+255),c
  4219  001126  0E01               	movlw	1
  4220  001128  2636               	addwf	??_scroll_right_to_left+8,f,c
  4221  00112A  0E00               	movlw	0
  4222  00112C  2237               	addwfc	??_scroll_right_to_left+9,f,c
  4223  00112E  1E36               	comf	??_scroll_right_to_left+8,f,c
  4224  001130  1E37               	comf	??_scroll_right_to_left+9,f,c
  4225  001132  4A36               	infsnz	??_scroll_right_to_left+8,f,c
  4226  001134  2A37               	incf	??_scroll_right_to_left+9,f,c
  4227  001136  EE20 F031          	lfsr	2,49
  4228  00113A  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4229  00113C  26D9               	addwf	fsr2l,f,c
  4230  00113E  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4231  001140  22DA               	addwfc	fsr2h,f,c
  4232  001142  50DF               	movf	indf2,w,c
  4233  001144  6E38               	movwf	(??_scroll_right_to_left+10)& (0+255),c
  4234  001146  6A39               	clrf	(??_scroll_right_to_left+11)& (0+255),c
  4235  001148  5036               	movf	??_scroll_right_to_left+8,w,c
  4236  00114A  2638               	addwf	??_scroll_right_to_left+10,f,c
  4237  00114C  5037               	movf	??_scroll_right_to_left+9,w,c
  4238  00114E  2239               	addwfc	??_scroll_right_to_left+11,f,c
  4239  001150  1E38               	comf	??_scroll_right_to_left+10,f,c
  4240  001152  1E39               	comf	??_scroll_right_to_left+11,f,c
  4241  001154  4A38               	infsnz	??_scroll_right_to_left+10,f,c
  4242  001156  2A39               	incf	??_scroll_right_to_left+11,f,c
  4243  001158  EE20 F031          	lfsr	2,49
  4244  00115C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4245  00115E  26D9               	addwf	fsr2l,f,c
  4246  001160  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4247  001162  22DA               	addwfc	fsr2h,f,c
  4248  001164  50DF               	movf	indf2,w,c
  4249  001166  6E3A               	movwf	(??_scroll_right_to_left+12)& (0+255),c
  4250  001168  503A               	movf	??_scroll_right_to_left+12,w,c
  4251  00116A  2438               	addwf	??_scroll_right_to_left+10,w,c
  4252  00116C  6E14               	movwf	strncpy@size,c
  4253  00116E  0E00               	movlw	0
  4254  001170  2039               	addwfc	??_scroll_right_to_left+11,w,c
  4255  001172  6E15               	movwf	strncpy@size+1,c
  4256  001174  ECA6  F019         	call	_strncpy	;wreg free
  4257                           
  4258                           ;clcd.c: 463: } else {
  4259  001178  D055               	goto	l6296
  4260  00117A                     l6292:
  4261                           
  4262                           ;clcd.c: 464: if (clcd_display_string_details->string[clcd_display_string_details->lengt
      +                          h_count_for_left_scroll] != (0)) {
  4263  00117A  EE20 F034          	lfsr	2,52
  4264  00117E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4265  001180  26D9               	addwf	fsr2l,f,c
  4266  001182  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4267  001184  22DA               	addwfc	fsr2h,f,c
  4268  001186  50DF               	movf	indf2,w,c
  4269  001188  0B7F               	andlw	127
  4270  00118A  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4271  00118C  502E               	movf	??_scroll_right_to_left,w,c
  4272  00118E  0D01               	mullw	1
  4273  001190  0E01               	movlw	1
  4274  001192  26F3               	addwf	prodl,f,c
  4275  001194  0E00               	movlw	0
  4276  001196  22F4               	addwfc	prodh,f,c
  4277  001198  50F3               	movf	prodl,w,c
  4278  00119A  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4279  00119C  6ED9               	movwf	fsr2l,c
  4280  00119E  50F4               	movf	prodh,w,c
  4281  0011A0  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4282  0011A2  6EDA               	movwf	fsr2h,c
  4283  0011A4  50DF               	movf	indf2,w,c
  4284  0011A6  B4D8               	btfsc	status,2,c
  4285  0011A8  D03D               	goto	l6296
  4286                           
  4287                           ;clcd.c: 465: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  4288                           ;clcd.c: 466: clcd_display_string_details->string + clcd_display_string_details->length_
      +                          count_for_left_scroll,
  4289                           ;clcd.c: 467: clcd_display_string_details->display_char_count);
  4290  0011AA  503B               	movf	scroll_right_to_left@line,w,c
  4291  0011AC  0D14               	mullw	20
  4292  0011AE  0E00               	movlw	low _lcd_display_array
  4293  0011B0  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4294  0011B2  0E01               	movlw	high _lcd_display_array
  4295  0011B4  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4296  0011B6  50F3               	movf	prodl,w,c
  4297  0011B8  262E               	addwf	??_scroll_right_to_left,f,c
  4298  0011BA  50F4               	movf	prodh,w,c
  4299  0011BC  222F               	addwfc	??_scroll_right_to_left+1,f,c
  4300  0011BE  EE20 F02B          	lfsr	2,43
  4301  0011C2  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4302  0011C4  26D9               	addwf	fsr2l,f,c
  4303  0011C6  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4304  0011C8  22DA               	addwfc	fsr2h,f,c
  4305  0011CA  50DF               	movf	indf2,w,c
  4306  0011CC  0B7F               	andlw	127
  4307  0011CE  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4308  0011D0  5030               	movf	??_scroll_right_to_left+2,w,c
  4309  0011D2  0D01               	mullw	1
  4310  0011D4  50F3               	movf	prodl,w,c
  4311  0011D6  242E               	addwf	??_scroll_right_to_left,w,c
  4312  0011D8  6E10               	movwf	memcpy@d1,c
  4313  0011DA  50F4               	movf	prodh,w,c
  4314  0011DC  202F               	addwfc	??_scroll_right_to_left+1,w,c
  4315  0011DE  6E11               	movwf	memcpy@d1+1,c
  4316  0011E0  EE20 F034          	lfsr	2,52
  4317  0011E4  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4318  0011E6  26D9               	addwf	fsr2l,f,c
  4319  0011E8  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4320  0011EA  22DA               	addwfc	fsr2h,f,c
  4321  0011EC  50DF               	movf	indf2,w,c
  4322  0011EE  0B7F               	andlw	127
  4323  0011F0  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  4324  0011F2  5031               	movf	??_scroll_right_to_left+3,w,c
  4325  0011F4  0D01               	mullw	1
  4326  0011F6  0E01               	movlw	1
  4327  0011F8  26F3               	addwf	prodl,f,c
  4328  0011FA  0E00               	movlw	0
  4329  0011FC  22F4               	addwfc	prodh,f,c
  4330  0011FE  50F3               	movf	prodl,w,c
  4331  001200  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4332  001202  6E12               	movwf	memcpy@s1,c
  4333  001204  50F4               	movf	prodh,w,c
  4334  001206  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4335  001208  6E13               	movwf	memcpy@s1+1,c
  4336  00120A  EE20 F031          	lfsr	2,49
  4337  00120E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4338  001210  26D9               	addwf	fsr2l,f,c
  4339  001212  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4340  001214  22DA               	addwfc	fsr2h,f,c
  4341  001216  50DF               	movf	indf2,w,c
  4342  001218  6E32               	movwf	(??_scroll_right_to_left+4)& (0+255),c
  4343  00121A  5032               	movf	??_scroll_right_to_left+4,w,c
  4344  00121C  6E14               	movwf	memcpy@n,c
  4345  00121E  6A15               	clrf	memcpy@n+1,c
  4346  001220  ECC9  F01B         	call	_memcpy	;wreg free
  4347  001224                     l6296:
  4348                           
  4349                           ;clcd.c: 470: }
  4350                           ;clcd.c: 471: }
  4351                           ;clcd.c: 473: if (clcd_display_string_details->length_count_for_left_scroll <= clcd_disp
      +                          lay_string_details->strlen)
  4352  001224  EE20 F034          	lfsr	2,52
  4353  001228  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4354  00122A  26D9               	addwf	fsr2l,f,c
  4355  00122C  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4356  00122E  22DA               	addwfc	fsr2h,f,c
  4357  001230  50DF               	movf	indf2,w,c
  4358  001232  0B7F               	andlw	127
  4359  001234  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4360  001236  EE20 F029          	lfsr	2,41
  4361  00123A  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4362  00123C  26D9               	addwf	fsr2l,f,c
  4363  00123E  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4364  001240  22DA               	addwfc	fsr2h,f,c
  4365  001242  50DF               	movf	indf2,w,c
  4366  001244  0B7F               	andlw	127
  4367  001246  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4368  001248  502E               	movf	??_scroll_right_to_left,w,c
  4369  00124A  5C2F               	subwf	??_scroll_right_to_left+1,w,c
  4370  00124C  A0D8               	btfss	status,0,c
  4371  00124E  D013               	goto	l6300
  4372                           
  4373                           ;clcd.c: 474: {
  4374                           ;clcd.c: 475: clcd_display_string_details->length_count_for_left_scroll++;
  4375  001250  0E01               	movlw	1
  4376  001252  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4377  001254  EE20 F034          	lfsr	2,52
  4378  001258  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4379  00125A  26D9               	addwf	fsr2l,f,c
  4380  00125C  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4381  00125E  22DA               	addwfc	fsr2h,f,c
  4382  001260  50DF               	movf	indf2,w,c
  4383  001262  0B7F               	andlw	127
  4384  001264  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4385  001266  502E               	movf	??_scroll_right_to_left,w,c
  4386  001268  262F               	addwf	??_scroll_right_to_left+1,f,c
  4387  00126A  50DF               	movf	indf2,w,c
  4388  00126C  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4389  00126E  0B80               	andlw	-128
  4390  001270  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4391  001272  6EDF               	movwf	indf2,c
  4392                           
  4393                           ;clcd.c: 476: } else if (clcd_display_string_details->length_count_for_left_scroll > clc
      +                          d_display_string_details->strlen)
  4394  001274  0012               	return	
  4395  001276                     l6300:
  4396  001276  EE20 F029          	lfsr	2,41
  4397  00127A  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4398  00127C  26D9               	addwf	fsr2l,f,c
  4399  00127E  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4400  001280  22DA               	addwfc	fsr2h,f,c
  4401  001282  50DF               	movf	indf2,w,c
  4402  001284  0B7F               	andlw	127
  4403  001286  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4404  001288  EE20 F034          	lfsr	2,52
  4405  00128C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4406  00128E  26D9               	addwf	fsr2l,f,c
  4407  001290  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4408  001292  22DA               	addwfc	fsr2h,f,c
  4409  001294  50DF               	movf	indf2,w,c
  4410  001296  0B7F               	andlw	127
  4411  001298  5C2E               	subwf	??_scroll_right_to_left,w,c
  4412  00129A  B0D8               	btfsc	status,0,c
  4413  00129C  0012               	return	
  4414                           
  4415                           ;clcd.c: 477: {
  4416                           ;clcd.c: 478: clcd_display_string_details->length_decount_for_left_scroll++;
  4417  00129E  0E01               	movlw	1
  4418  0012A0  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4419  0012A2  EE20 F035          	lfsr	2,53
  4420  0012A6  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4421  0012A8  26D9               	addwf	fsr2l,f,c
  4422  0012AA  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4423  0012AC  22DA               	addwfc	fsr2h,f,c
  4424  0012AE  50DF               	movf	indf2,w,c
  4425  0012B0  0B7F               	andlw	127
  4426  0012B2  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4427  0012B4  502E               	movf	??_scroll_right_to_left,w,c
  4428  0012B6  262F               	addwf	??_scroll_right_to_left+1,f,c
  4429  0012B8  50DF               	movf	indf2,w,c
  4430  0012BA  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4431  0012BC  0B80               	andlw	-128
  4432  0012BE  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4433  0012C0  6EDF               	movwf	indf2,c
  4434                           
  4435                           ;clcd.c: 479: if (clcd_display_string_details->length_decount_for_left_scroll == clcd_di
      +                          splay_string_details->display_char_count) {
  4436  0012C2  EE20 F031          	lfsr	2,49
  4437  0012C6  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4438  0012C8  26D9               	addwf	fsr2l,f,c
  4439  0012CA  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4440  0012CC  22DA               	addwfc	fsr2h,f,c
  4441  0012CE  EE10 F035          	lfsr	1,53
  4442  0012D2  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4443  0012D4  26E1               	addwf	fsr1l,f,c
  4444  0012D6  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4445  0012D8  22E2               	addwfc	fsr1h,f,c
  4446  0012DA  50E7               	movf	indf1,w,c
  4447  0012DC  0B7F               	andlw	127
  4448  0012DE  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4449  0012E0  50DE               	movf	postinc2,w,c
  4450  0012E2  182F               	xorwf	??_scroll_right_to_left+1,w,c
  4451  0012E4  A4D8               	btfss	status,2,c
  4452  0012E6  0012               	return	
  4453                           
  4454                           ;clcd.c: 480: clcd_display_string_details->length_decount_for_left_scroll = 0;
  4455  0012E8  EE20 F035          	lfsr	2,53
  4456  0012EC  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4457  0012EE  26D9               	addwf	fsr2l,f,c
  4458  0012F0  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4459  0012F2  22DA               	addwfc	fsr2h,f,c
  4460  0012F4  90DF               	bcf	indf2,0,c
  4461  0012F6  92DF               	bcf	indf2,1,c
  4462  0012F8  94DF               	bcf	indf2,2,c
  4463  0012FA  96DF               	bcf	indf2,3,c
  4464  0012FC  98DF               	bcf	indf2,4,c
  4465  0012FE  9ADF               	bcf	indf2,5,c
  4466  001300  9CDF               	bcf	indf2,6,c
  4467                           
  4468                           ;clcd.c: 481: clcd_display_string_details->length_count_for_left_scroll = 0;
  4469  001302  EE20 F034          	lfsr	2,52
  4470  001306  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4471  001308  26D9               	addwf	fsr2l,f,c
  4472  00130A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4473  00130C  22DA               	addwfc	fsr2h,f,c
  4474  00130E  90DF               	bcf	indf2,0,c
  4475  001310  92DF               	bcf	indf2,1,c
  4476  001312  94DF               	bcf	indf2,2,c
  4477  001314  96DF               	bcf	indf2,3,c
  4478  001316  98DF               	bcf	indf2,4,c
  4479  001318  9ADF               	bcf	indf2,5,c
  4480  00131A  9CDF               	bcf	indf2,6,c
  4481  00131C  0012               	return	
  4482  00131E                     __end_of_scroll_right_to_left:
  4483                           	opt stack 0
  4484                           tblptru	equ	0xFF8
  4485                           tblptrh	equ	0xFF7
  4486                           tblptrl	equ	0xFF6
  4487                           tablat	equ	0xFF5
  4488                           prodh	equ	0xFF4
  4489                           prodl	equ	0xFF3
  4490                           intcon	equ	0xFF2
  4491                           postinc0	equ	0xFEE
  4492                           wreg	equ	0xFE8
  4493                           indf1	equ	0xFE7
  4494                           postdec1	equ	0xFE5
  4495                           fsr1h	equ	0xFE2
  4496                           fsr1l	equ	0xFE1
  4497                           indf2	equ	0xFDF
  4498                           postinc2	equ	0xFDE
  4499                           fsr2h	equ	0xFDA
  4500                           fsr2l	equ	0xFD9
  4501                           status	equ	0xFD8
  4502                           
  4503 ;; *************** function _strncpy *****************
  4504 ;; Defined at:
  4505 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncpy.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  to              2   15[COMRAM] PTR unsigned char 
  4508 ;;		 -> lcd_display_array(80), 
  4509 ;;  from            2   17[COMRAM] PTR const unsigned char 
  4510 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1080), 
  4511 ;;  size            2   19[COMRAM] unsigned int 
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  cp              2   21[COMRAM] PTR unsigned char 
  4514 ;;		 -> lcd_display_array(80), 
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  2   15[COMRAM] PTR unsigned char 
  4517 ;; Registers used:
  4518 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4524 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;Total ram usage:        8 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    5
  4531 ;; This function calls:
  4532 ;;		Nothing
  4533 ;; This function is called by:
  4534 ;;		_scroll_right_to_left
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text8
  4539  00334C                     __ptext8:
  4540                           	opt stack 0
  4541  00334C                     _strncpy:
  4542                           	opt stack 23
  4543                           
  4544                           ;incstack = 0
  4545  00334C  C010  F016         	movff	strncpy@to,strncpy@cp
  4546  003350  C011  F017         	movff	strncpy@to+1,strncpy@cp+1
  4547  003354  D014               	goto	l6188
  4548  003356                     l6182:
  4549  003356  0614               	decf	strncpy@size,f,c
  4550  003358  A0D8               	btfss	status,0,c
  4551  00335A  0615               	decf	strncpy@size+1,f,c
  4552  00335C  C012  FFD9         	movff	strncpy@from,fsr2l
  4553  003360  C013  FFDA         	movff	strncpy@from+1,fsr2h
  4554  003364  4A12               	infsnz	strncpy@from,f,c
  4555  003366  2A13               	incf	strncpy@from+1,f,c
  4556  003368  C016  FFE1         	movff	strncpy@cp,fsr1l
  4557  00336C  C017  FFE2         	movff	strncpy@cp+1,fsr1h
  4558  003370  4A16               	infsnz	strncpy@cp,f,c
  4559  003372  2A17               	incf	strncpy@cp+1,f,c
  4560  003374  CFDF FFE7          	movff	indf2,indf1
  4561  003378  50E7               	movf	indf1,w,c
  4562  00337A  B4D8               	btfsc	status,2,c
  4563  00337C  D00D               	goto	l6194
  4564  00337E                     l6188:
  4565  00337E  5014               	movf	strncpy@size,w,c
  4566  003380  1015               	iorwf	strncpy@size+1,w,c
  4567  003382  B4D8               	btfsc	status,2,c
  4568  003384  D009               	goto	l6194
  4569  003386  D7E7               	goto	l6182
  4570  003388                     l6190:
  4571  003388  C016  FFD9         	movff	strncpy@cp,fsr2l
  4572  00338C  C017  FFDA         	movff	strncpy@cp+1,fsr2h
  4573  003390  0E00               	movlw	0
  4574  003392  6EDF               	movwf	indf2,c
  4575  003394  4A16               	infsnz	strncpy@cp,f,c
  4576  003396  2A17               	incf	strncpy@cp+1,f,c
  4577  003398                     l6194:
  4578  003398  0614               	decf	strncpy@size,f,c
  4579  00339A  A0D8               	btfss	status,0,c
  4580  00339C  0615               	decf	strncpy@size+1,f,c
  4581  00339E  2814               	incf	strncpy@size,w,c
  4582  0033A0  E1F3               	bnz	l6190
  4583  0033A2  2815               	incf	strncpy@size+1,w,c
  4584  0033A4  B4D8               	btfsc	status,2,c
  4585  0033A6  0012               	return	
  4586  0033A8  D7EF               	goto	l6190
  4587  0033AA                     __end_of_strncpy:
  4588                           	opt stack 0
  4589                           tblptru	equ	0xFF8
  4590                           tblptrh	equ	0xFF7
  4591                           tblptrl	equ	0xFF6
  4592                           tablat	equ	0xFF5
  4593                           prodh	equ	0xFF4
  4594                           prodl	equ	0xFF3
  4595                           intcon	equ	0xFF2
  4596                           postinc0	equ	0xFEE
  4597                           wreg	equ	0xFE8
  4598                           indf1	equ	0xFE7
  4599                           postdec1	equ	0xFE5
  4600                           fsr1h	equ	0xFE2
  4601                           fsr1l	equ	0xFE1
  4602                           indf2	equ	0xFDF
  4603                           postinc2	equ	0xFDE
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function _scroll_off *****************
  4609 ;; Defined at:
  4610 ;;		line 488 in file "clcd.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  clcd_display    2   35[COMRAM] PTR struct .
  4613 ;;		 -> clcd_display_string_details(1080), 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  i               2   48[COMRAM] int 
  4616 ;;  j               2   46[COMRAM] int 
  4617 ;;  k               2   41[COMRAM] int 
  4618 ;;  str_len         1   45[COMRAM] unsigned char 
  4619 ;;  display_char    1   44[COMRAM] unsigned char 
  4620 ;;  line            1   43[COMRAM] unsigned char 
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      void 
  4623 ;; Registers used:
  4624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4630 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;Total ram usage:       15 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    6
  4637 ;; This function calls:
  4638 ;;		_strlen
  4639 ;; This function is called by:
  4640 ;;		_make_display
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           	psect	text9
  4645  0027C6                     __ptext9:
  4646                           	opt stack 0
  4647  0027C6                     _scroll_off:
  4648                           	opt stack 23
  4649                           
  4650                           ;clcd.c: 489: char line = -1;
  4651                           
  4652                           ;incstack = 0
  4653  0027C6  682C               	setf	scroll_off@line,c
  4654                           
  4655                           ;clcd.c: 491: int i = 0;
  4656  0027C8  0E00               	movlw	0
  4657  0027CA  6E32               	movwf	scroll_off@i+1,c
  4658  0027CC  0E00               	movlw	0
  4659  0027CE  6E31               	movwf	scroll_off@i,c
  4660                           
  4661                           ;clcd.c: 492: int j = 0, k = 0;
  4662  0027D0  0E00               	movlw	0
  4663  0027D2  6E30               	movwf	scroll_off@j+1,c
  4664  0027D4  0E00               	movlw	0
  4665  0027D6  6E2F               	movwf	scroll_off@j,c
  4666  0027D8  0E00               	movlw	0
  4667  0027DA  6E2B               	movwf	scroll_off@k+1,c
  4668  0027DC  0E00               	movlw	0
  4669  0027DE  6E2A               	movwf	scroll_off@k,c
  4670                           
  4671                           ;clcd.c: 493: char display_char_count = clcd_display_string_details->end_point - clcd_di
      +                          splay_string_details->start_point;
  4672  0027E0  EE20 F02F          	lfsr	2,47
  4673  0027E4  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4674  0027E6  26D9               	addwf	fsr2l,f,c
  4675  0027E8  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4676  0027EA  22DA               	addwfc	fsr2h,f,c
  4677  0027EC  50DF               	movf	indf2,w,c
  4678  0027EE  0B7F               	andlw	127
  4679  0027F0  6E26               	movwf	??_scroll_off& (0+255),c
  4680  0027F2  EE20 F02C          	lfsr	2,44
  4681  0027F6  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4682  0027F8  26D9               	addwf	fsr2l,f,c
  4683  0027FA  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4684  0027FC  22DA               	addwfc	fsr2h,f,c
  4685  0027FE  50DF               	movf	indf2,w,c
  4686  002800  0B7F               	andlw	127
  4687  002802  0800               	sublw	0
  4688  002804  2426               	addwf	??_scroll_off,w,c
  4689  002806  6E2D               	movwf	scroll_off@display_char_count,c
  4690                           
  4691                           ;clcd.c: 494: char str_len = strlen(clcd_display_string_details->string);
  4692  002808  0E01               	movlw	1
  4693  00280A  2424               	addwf	scroll_off@clcd_display_string_details,w,c
  4694  00280C  6E1E               	movwf	strlen@s,c
  4695  00280E  0E00               	movlw	0
  4696  002810  2025               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4697  002812  6E1F               	movwf	strlen@s+1,c
  4698  002814  EC2E  F01A         	call	_strlen	;wreg free
  4699  002818  501E               	movf	?_strlen,w,c
  4700  00281A  6E2E               	movwf	scroll_off@str_len,c
  4701                           
  4702                           ;clcd.c: 495: line = clcd_display_string_details->start_row;
  4703  00281C  EE20 F02A          	lfsr	2,42
  4704  002820  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4705  002822  26D9               	addwf	fsr2l,f,c
  4706  002824  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4707  002826  22DA               	addwfc	fsr2h,f,c
  4708  002828  50DF               	movf	indf2,w,c
  4709  00282A  0B7F               	andlw	127
  4710  00282C  6E2C               	movwf	scroll_off@line,c
  4711                           
  4712                           ;clcd.c: 496: j = clcd_display_string_details->start_col;
  4713  00282E  EE20 F02B          	lfsr	2,43
  4714  002832  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4715  002834  26D9               	addwf	fsr2l,f,c
  4716  002836  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4717  002838  22DA               	addwfc	fsr2h,f,c
  4718  00283A  50DF               	movf	indf2,w,c
  4719  00283C  0B7F               	andlw	127
  4720  00283E  6E26               	movwf	??_scroll_off& (0+255),c
  4721  002840  5026               	movf	??_scroll_off,w,c
  4722  002842  6E2F               	movwf	scroll_off@j,c
  4723  002844  6A30               	clrf	scroll_off@j+1,c
  4724                           
  4725                           ;clcd.c: 497: for (i = 0; i < str_len;) {
  4726  002846  0E00               	movlw	0
  4727  002848  6E32               	movwf	scroll_off@i+1,c
  4728  00284A  0E00               	movlw	0
  4729  00284C  6E31               	movwf	scroll_off@i,c
  4730  00284E  D05B               	goto	l6346
  4731  002850                     l6322:
  4732                           
  4733                           ;clcd.c: 499: lcd_display_array[line][j] = clcd_display_string_details->string[i++];
  4734  002850  0E01               	movlw	1
  4735  002852  2431               	addwf	scroll_off@i,w,c
  4736  002854  6E26               	movwf	??_scroll_off& (0+255),c
  4737  002856  0E00               	movlw	0
  4738  002858  2032               	addwfc	scroll_off@i+1,w,c
  4739  00285A  6E27               	movwf	(??_scroll_off+1)& (0+255),c
  4740  00285C  5026               	movf	??_scroll_off,w,c
  4741  00285E  2424               	addwf	scroll_off@clcd_display_string_details,w,c
  4742  002860  6ED9               	movwf	fsr2l,c
  4743  002862  5027               	movf	??_scroll_off+1,w,c
  4744  002864  2025               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4745  002866  6EDA               	movwf	fsr2h,c
  4746  002868  502C               	movf	scroll_off@line,w,c
  4747  00286A  0D14               	mullw	20
  4748  00286C  0E00               	movlw	low _lcd_display_array
  4749  00286E  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4750  002870  0E01               	movlw	high _lcd_display_array
  4751  002872  6E29               	movwf	(??_scroll_off+3)& (0+255),c
  4752  002874  50F3               	movf	prodl,w,c
  4753  002876  2628               	addwf	??_scroll_off+2,f,c
  4754  002878  50F4               	movf	prodh,w,c
  4755  00287A  2229               	addwfc	??_scroll_off+3,f,c
  4756  00287C  502F               	movf	scroll_off@j,w,c
  4757  00287E  2428               	addwf	??_scroll_off+2,w,c
  4758  002880  6EE1               	movwf	fsr1l,c
  4759  002882  5030               	movf	scroll_off@j+1,w,c
  4760  002884  2029               	addwfc	??_scroll_off+3,w,c
  4761  002886  6EE2               	movwf	fsr1h,c
  4762  002888  CFDF FFE7          	movff	indf2,indf1
  4763  00288C  4A31               	infsnz	scroll_off@i,f,c
  4764  00288E  2A32               	incf	scroll_off@i+1,f,c
  4765                           
  4766                           ;clcd.c: 500: if (i >= str_len)break;
  4767  002890  502E               	movf	scroll_off@str_len,w,c
  4768  002892  6E26               	movwf	??_scroll_off& (0+255),c
  4769  002894  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4770  002896  5026               	movf	??_scroll_off,w,c
  4771  002898  5C31               	subwf	scroll_off@i,w,c
  4772  00289A  5032               	movf	scroll_off@i+1,w,c
  4773  00289C  0A80               	xorlw	128
  4774  00289E  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4775  0028A0  5027               	movf	??_scroll_off+1,w,c
  4776  0028A2  0A80               	xorlw	128
  4777  0028A4  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4778  0028A6  B0D8               	btfsc	status,0,c
  4779  0028A8  D01C               	goto	l6338
  4780                           
  4781                           ;clcd.c: 501: if (i >= display_char_count)break;
  4782  0028AA  502D               	movf	scroll_off@display_char_count,w,c
  4783  0028AC  6E26               	movwf	??_scroll_off& (0+255),c
  4784  0028AE  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4785  0028B0  5026               	movf	??_scroll_off,w,c
  4786  0028B2  5C31               	subwf	scroll_off@i,w,c
  4787  0028B4  5032               	movf	scroll_off@i+1,w,c
  4788  0028B6  0A80               	xorlw	128
  4789  0028B8  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4790  0028BA  5027               	movf	??_scroll_off+1,w,c
  4791  0028BC  0A80               	xorlw	128
  4792  0028BE  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4793  0028C0  B0D8               	btfsc	status,0,c
  4794  0028C2  D00F               	goto	l6338
  4795  0028C4  4A2F               	infsnz	scroll_off@j,f,c
  4796  0028C6  2A30               	incf	scroll_off@j+1,f,c
  4797  0028C8                     l6336:
  4798  0028C8  504B               	movf	_clcd_config_data+2,w,c
  4799  0028CA  6E26               	movwf	??_scroll_off& (0+255),c
  4800  0028CC  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4801  0028CE  5026               	movf	??_scroll_off,w,c
  4802  0028D0  5C2F               	subwf	scroll_off@j,w,c
  4803  0028D2  5030               	movf	scroll_off@j+1,w,c
  4804  0028D4  0A80               	xorlw	128
  4805  0028D6  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4806  0028D8  5027               	movf	??_scroll_off+1,w,c
  4807  0028DA  0A80               	xorlw	128
  4808  0028DC  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4809  0028DE  A0D8               	btfss	status,0,c
  4810  0028E0  D7B7               	goto	l6322
  4811  0028E2                     l6338:
  4812                           
  4813                           ;clcd.c: 502: }
  4814                           ;clcd.c: 504: j = 0;
  4815  0028E2  0E00               	movlw	0
  4816  0028E4  6E30               	movwf	scroll_off@j+1,c
  4817  0028E6  0E00               	movlw	0
  4818  0028E8  6E2F               	movwf	scroll_off@j,c
  4819                           
  4820                           ;clcd.c: 505: line++;
  4821  0028EA  2A2C               	incf	scroll_off@line,f,c
  4822                           
  4823                           ;clcd.c: 506: if (i >= display_char_count)break;
  4824  0028EC  502D               	movf	scroll_off@display_char_count,w,c
  4825  0028EE  6E26               	movwf	??_scroll_off& (0+255),c
  4826  0028F0  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4827  0028F2  5026               	movf	??_scroll_off,w,c
  4828  0028F4  5C31               	subwf	scroll_off@i,w,c
  4829  0028F6  5032               	movf	scroll_off@i+1,w,c
  4830  0028F8  0A80               	xorlw	128
  4831  0028FA  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4832  0028FC  5027               	movf	??_scroll_off+1,w,c
  4833  0028FE  0A80               	xorlw	128
  4834  002900  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4835  002902  B0D8               	btfsc	status,0,c
  4836  002904  0012               	return	
  4837  002906                     l6346:
  4838  002906  502E               	movf	scroll_off@str_len,w,c
  4839  002908  6E26               	movwf	??_scroll_off& (0+255),c
  4840  00290A  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4841  00290C  5026               	movf	??_scroll_off,w,c
  4842  00290E  5C31               	subwf	scroll_off@i,w,c
  4843  002910  5032               	movf	scroll_off@i+1,w,c
  4844  002912  0A80               	xorlw	128
  4845  002914  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4846  002916  5027               	movf	??_scroll_off+1,w,c
  4847  002918  0A80               	xorlw	128
  4848  00291A  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4849  00291C  B0D8               	btfsc	status,0,c
  4850  00291E  0012               	return	
  4851  002920  D7D3               	goto	l6336
  4852  002922                     __end_of_scroll_off:
  4853                           	opt stack 0
  4854                           tblptru	equ	0xFF8
  4855                           tblptrh	equ	0xFF7
  4856                           tblptrl	equ	0xFF6
  4857                           tablat	equ	0xFF5
  4858                           prodh	equ	0xFF4
  4859                           prodl	equ	0xFF3
  4860                           intcon	equ	0xFF2
  4861                           postinc0	equ	0xFEE
  4862                           wreg	equ	0xFE8
  4863                           indf1	equ	0xFE7
  4864                           postdec1	equ	0xFE5
  4865                           fsr1h	equ	0xFE2
  4866                           fsr1l	equ	0xFE1
  4867                           indf2	equ	0xFDF
  4868                           postinc2	equ	0xFDE
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873 ;; *************** function _scroll_left_to_right *****************
  4874 ;; Defined at:
  4875 ;;		line 404 in file "clcd.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;  clcd_display    2   43[COMRAM] PTR struct .
  4878 ;;		 -> clcd_display_string_details(1080), 
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;  line            1   53[COMRAM] unsigned char 
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  1    wreg      void 
  4883 ;; Registers used:
  4884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4890 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;Total ram usage:       11 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    6
  4897 ;; This function calls:
  4898 ;;		_memcpy
  4899 ;;		_memset
  4900 ;; This function is called by:
  4901 ;;		_make_display
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text10
  4906  00166C                     __ptext10:
  4907                           	opt stack 0
  4908  00166C                     _scroll_left_to_right:
  4909                           	opt stack 23
  4910                           
  4911                           ;clcd.c: 405: char line = -1;
  4912                           
  4913                           ;incstack = 0
  4914  00166C  6836               	setf	scroll_left_to_right@line,c
  4915                           
  4916                           ;clcd.c: 406: if (clcd_display_string_details->start_row == 0)
  4917  00166E  EE20 F02A          	lfsr	2,42
  4918  001672  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4919  001674  26D9               	addwf	fsr2l,f,c
  4920  001676  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4921  001678  22DA               	addwfc	fsr2h,f,c
  4922  00167A  50DF               	movf	indf2,w,c
  4923  00167C  0B7F               	andlw	127
  4924  00167E  0900               	iorlw	0
  4925  001680  A4D8               	btfss	status,2,c
  4926  001682  D002               	goto	l6234
  4927                           
  4928                           ;clcd.c: 407: line = 0;
  4929  001684  0E00               	movlw	0
  4930  001686  D00C               	goto	L2
  4931  001688                     l6234:
  4932                           
  4933                           ;clcd.c: 408: else if (clcd_display_string_details->start_row == 1)
  4934  001688  EE20 F02A          	lfsr	2,42
  4935  00168C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4936  00168E  26D9               	addwf	fsr2l,f,c
  4937  001690  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4938  001692  22DA               	addwfc	fsr2h,f,c
  4939  001694  50DF               	movf	indf2,w,c
  4940  001696  0B7F               	andlw	127
  4941  001698  06E8               	decf	wreg,f,c
  4942  00169A  A4D8               	btfss	status,2,c
  4943  00169C  D002               	goto	l6238
  4944                           
  4945                           ;clcd.c: 409: line = 1;
  4946  00169E  0E01               	movlw	1
  4947  0016A0                     L2:
  4948  0016A0  6E36               	movwf	scroll_left_to_right@line,c
  4949  0016A2                     l6238:
  4950                           
  4951                           ;clcd.c: 410: if (clcd_display_string_details->start_row == 2)
  4952  0016A2  EE20 F02A          	lfsr	2,42
  4953  0016A6  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4954  0016A8  26D9               	addwf	fsr2l,f,c
  4955  0016AA  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4956  0016AC  22DA               	addwfc	fsr2h,f,c
  4957  0016AE  50DF               	movf	indf2,w,c
  4958  0016B0  0B7F               	andlw	127
  4959  0016B2  0A02               	xorlw	2
  4960  0016B4  A4D8               	btfss	status,2,c
  4961  0016B6  D002               	goto	l6242
  4962                           
  4963                           ;clcd.c: 411: line = 2;
  4964  0016B8  0E02               	movlw	2
  4965  0016BA  6E36               	movwf	scroll_left_to_right@line,c
  4966  0016BC                     l6242:
  4967                           
  4968                           ;clcd.c: 412: if (clcd_display_string_details->start_row == 3)
  4969  0016BC  EE20 F02A          	lfsr	2,42
  4970  0016C0  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4971  0016C2  26D9               	addwf	fsr2l,f,c
  4972  0016C4  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4973  0016C6  22DA               	addwfc	fsr2h,f,c
  4974  0016C8  50DF               	movf	indf2,w,c
  4975  0016CA  0B7F               	andlw	127
  4976  0016CC  0A03               	xorlw	3
  4977  0016CE  A4D8               	btfss	status,2,c
  4978  0016D0  D002               	goto	l6246
  4979                           
  4980                           ;clcd.c: 413: line = 3;
  4981  0016D2  0E03               	movlw	3
  4982  0016D4  6E36               	movwf	scroll_left_to_right@line,c
  4983  0016D6                     l6246:
  4984                           
  4985                           ;clcd.c: 415: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  4986                           ;clcd.c: 416: ' ', clcd_display_string_details->display_char_count);
  4987  0016D6  5036               	movf	scroll_left_to_right@line,w,c
  4988  0016D8  0D14               	mullw	20
  4989  0016DA  0E00               	movlw	low _lcd_display_array
  4990  0016DC  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  4991  0016DE  0E01               	movlw	high _lcd_display_array
  4992  0016E0  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  4993  0016E2  50F3               	movf	prodl,w,c
  4994  0016E4  262E               	addwf	??_scroll_left_to_right,f,c
  4995  0016E6  50F4               	movf	prodh,w,c
  4996  0016E8  222F               	addwfc	??_scroll_left_to_right+1,f,c
  4997  0016EA  EE20 F02B          	lfsr	2,43
  4998  0016EE  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4999  0016F0  26D9               	addwf	fsr2l,f,c
  5000  0016F2  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5001  0016F4  22DA               	addwfc	fsr2h,f,c
  5002  0016F6  50DF               	movf	indf2,w,c
  5003  0016F8  0B7F               	andlw	127
  5004  0016FA  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5005  0016FC  5030               	movf	??_scroll_left_to_right+2,w,c
  5006  0016FE  0D01               	mullw	1
  5007  001700  50F3               	movf	prodl,w,c
  5008  001702  242E               	addwf	??_scroll_left_to_right,w,c
  5009  001704  6E24               	movwf	memset@p1,c
  5010  001706  50F4               	movf	prodh,w,c
  5011  001708  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5012  00170A  6E25               	movwf	memset@p1+1,c
  5013  00170C  0E00               	movlw	0
  5014  00170E  6E27               	movwf	memset@c+1,c
  5015  001710  0E20               	movlw	32
  5016  001712  6E26               	movwf	memset@c,c
  5017  001714  EE20 F031          	lfsr	2,49
  5018  001718  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5019  00171A  26D9               	addwf	fsr2l,f,c
  5020  00171C  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5021  00171E  22DA               	addwfc	fsr2h,f,c
  5022  001720  50DF               	movf	indf2,w,c
  5023  001722  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5024  001724  5031               	movf	??_scroll_left_to_right+3,w,c
  5025  001726  6E28               	movwf	memset@n,c
  5026  001728  6A29               	clrf	memset@n+1,c
  5027  00172A  EC63  F01B         	call	_memset	;wreg free
  5028                           
  5029                           ;clcd.c: 418: if (clcd_display_string_details->length_count_for_right_scroll > clcd_disp
      +                          lay_string_details->display_char_count) {
  5030  00172E  EE20 F031          	lfsr	2,49
  5031  001732  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5032  001734  26D9               	addwf	fsr2l,f,c
  5033  001736  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5034  001738  22DA               	addwfc	fsr2h,f,c
  5035  00173A  50DF               	movf	indf2,w,c
  5036  00173C  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5037  00173E  EE20 F032          	lfsr	2,50
  5038  001742  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5039  001744  26D9               	addwf	fsr2l,f,c
  5040  001746  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5041  001748  22DA               	addwfc	fsr2h,f,c
  5042  00174A  50DF               	movf	indf2,w,c
  5043  00174C  0B7F               	andlw	127
  5044  00174E  5C2E               	subwf	??_scroll_left_to_right,w,c
  5045  001750  B0D8               	btfsc	status,0,c
  5046  001752  D054               	goto	l6254
  5047                           
  5048                           ;clcd.c: 419: if (clcd_display_string_details->string[0] != (0)) {
  5049  001754  EE20 F001          	lfsr	2,1
  5050  001758  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5051  00175A  26D9               	addwf	fsr2l,f,c
  5052  00175C  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5053  00175E  22DA               	addwfc	fsr2h,f,c
  5054  001760  50DF               	movf	indf2,w,c
  5055  001762  B4D8               	btfsc	status,2,c
  5056  001764  D0A2               	goto	l6258
  5057                           
  5058                           ;clcd.c: 420: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  5059                           ;clcd.c: 421: clcd_display_string_details->string +
  5060                           ;clcd.c: 422: ((clcd_display_string_details->strlen - 1) - clcd_display_string_details->
      +                          length_decount_for_right_scroll),
  5061                           ;clcd.c: 423: clcd_display_string_details->display_char_count);
  5062  001766  5036               	movf	scroll_left_to_right@line,w,c
  5063  001768  0D14               	mullw	20
  5064  00176A  0E00               	movlw	low _lcd_display_array
  5065  00176C  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5066  00176E  0E01               	movlw	high _lcd_display_array
  5067  001770  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5068  001772  50F3               	movf	prodl,w,c
  5069  001774  262E               	addwf	??_scroll_left_to_right,f,c
  5070  001776  50F4               	movf	prodh,w,c
  5071  001778  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5072  00177A  EE20 F02B          	lfsr	2,43
  5073  00177E  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5074  001780  26D9               	addwf	fsr2l,f,c
  5075  001782  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5076  001784  22DA               	addwfc	fsr2h,f,c
  5077  001786  50DF               	movf	indf2,w,c
  5078  001788  0B7F               	andlw	127
  5079  00178A  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5080  00178C  5030               	movf	??_scroll_left_to_right+2,w,c
  5081  00178E  0D01               	mullw	1
  5082  001790  50F3               	movf	prodl,w,c
  5083  001792  242E               	addwf	??_scroll_left_to_right,w,c
  5084  001794  6E10               	movwf	memcpy@d1,c
  5085  001796  50F4               	movf	prodh,w,c
  5086  001798  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5087  00179A  6E11               	movwf	memcpy@d1+1,c
  5088  00179C  EE20 F033          	lfsr	2,51
  5089  0017A0  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5090  0017A2  26D9               	addwf	fsr2l,f,c
  5091  0017A4  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5092  0017A6  22DA               	addwfc	fsr2h,f,c
  5093  0017A8  50DF               	movf	indf2,w,c
  5094  0017AA  0B7F               	andlw	127
  5095  0017AC  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5096  0017AE  6A32               	clrf	(??_scroll_left_to_right+4)& (0+255),c
  5097  0017B0  1E31               	comf	??_scroll_left_to_right+3,f,c
  5098  0017B2  1E32               	comf	??_scroll_left_to_right+4,f,c
  5099  0017B4  4A31               	infsnz	??_scroll_left_to_right+3,f,c
  5100  0017B6  2A32               	incf	??_scroll_left_to_right+4,f,c
  5101  0017B8  EE20 F029          	lfsr	2,41
  5102  0017BC  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5103  0017BE  26D9               	addwf	fsr2l,f,c
  5104  0017C0  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5105  0017C2  22DA               	addwfc	fsr2h,f,c
  5106  0017C4  50DF               	movf	indf2,w,c
  5107  0017C6  0B7F               	andlw	127
  5108  0017C8  6E33               	movwf	(??_scroll_left_to_right+5)& (0+255),c
  5109  0017CA  6A34               	clrf	(??_scroll_left_to_right+6)& (0+255),c
  5110  0017CC  5031               	movf	??_scroll_left_to_right+3,w,c
  5111  0017CE  2633               	addwf	??_scroll_left_to_right+5,f,c
  5112  0017D0  5032               	movf	??_scroll_left_to_right+4,w,c
  5113  0017D2  2234               	addwfc	??_scroll_left_to_right+6,f,c
  5114  0017D4  5033               	movf	??_scroll_left_to_right+5,w,c
  5115  0017D6  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5116  0017D8  6E12               	movwf	memcpy@s1,c
  5117  0017DA  5034               	movf	??_scroll_left_to_right+6,w,c
  5118  0017DC  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5119  0017DE  6E13               	movwf	memcpy@s1+1,c
  5120  0017E0  EE20 F031          	lfsr	2,49
  5121  0017E4  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5122  0017E6  26D9               	addwf	fsr2l,f,c
  5123  0017E8  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5124  0017EA  22DA               	addwfc	fsr2h,f,c
  5125  0017EC  50DF               	movf	indf2,w,c
  5126  0017EE  6E35               	movwf	(??_scroll_left_to_right+7)& (0+255),c
  5127  0017F0  5035               	movf	??_scroll_left_to_right+7,w,c
  5128  0017F2  6E14               	movwf	memcpy@n,c
  5129  0017F4  6A15               	clrf	memcpy@n+1,c
  5130  0017F6  ECC9  F01B         	call	_memcpy	;wreg free
  5131                           
  5132                           ;clcd.c: 424: }
  5133                           ;clcd.c: 425: } else {
  5134  0017FA  D057               	goto	l6258
  5135  0017FC                     l6254:
  5136                           
  5137                           ;clcd.c: 426: if (clcd_display_string_details->string[0] != (0)) {
  5138  0017FC  EE20 F001          	lfsr	2,1
  5139  001800  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5140  001802  26D9               	addwf	fsr2l,f,c
  5141  001804  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5142  001806  22DA               	addwfc	fsr2h,f,c
  5143  001808  50DF               	movf	indf2,w,c
  5144  00180A  B4D8               	btfsc	status,2,c
  5145  00180C  D04E               	goto	l6258
  5146                           
  5147                           ;clcd.c: 427: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col +
  5148                           ;clcd.c: 428: clcd_display_string_details->length_count_for_right_scroll,
  5149                           ;clcd.c: 429: clcd_display_string_details->string,
  5150                           ;clcd.c: 430: clcd_display_string_details->display_char_count - clcd_display_string_deta
      +                          ils->length_count_for_right_scroll);
  5151  00180E  5036               	movf	scroll_left_to_right@line,w,c
  5152  001810  0D14               	mullw	20
  5153  001812  0E00               	movlw	low _lcd_display_array
  5154  001814  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5155  001816  0E01               	movlw	high _lcd_display_array
  5156  001818  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5157  00181A  50F3               	movf	prodl,w,c
  5158  00181C  262E               	addwf	??_scroll_left_to_right,f,c
  5159  00181E  50F4               	movf	prodh,w,c
  5160  001820  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5161  001822  EE20 F02B          	lfsr	2,43
  5162  001826  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5163  001828  26D9               	addwf	fsr2l,f,c
  5164  00182A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5165  00182C  22DA               	addwfc	fsr2h,f,c
  5166  00182E  50DF               	movf	indf2,w,c
  5167  001830  0B7F               	andlw	127
  5168  001832  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5169  001834  5030               	movf	??_scroll_left_to_right+2,w,c
  5170  001836  0D01               	mullw	1
  5171  001838  50F3               	movf	prodl,w,c
  5172  00183A  262E               	addwf	??_scroll_left_to_right,f,c
  5173  00183C  50F4               	movf	prodh,w,c
  5174  00183E  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5175  001840  EE20 F032          	lfsr	2,50
  5176  001844  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5177  001846  26D9               	addwf	fsr2l,f,c
  5178  001848  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5179  00184A  22DA               	addwfc	fsr2h,f,c
  5180  00184C  50DF               	movf	indf2,w,c
  5181  00184E  0B7F               	andlw	127
  5182  001850  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5183  001852  5031               	movf	??_scroll_left_to_right+3,w,c
  5184  001854  0D01               	mullw	1
  5185  001856  50F3               	movf	prodl,w,c
  5186  001858  242E               	addwf	??_scroll_left_to_right,w,c
  5187  00185A  6E10               	movwf	memcpy@d1,c
  5188  00185C  50F4               	movf	prodh,w,c
  5189  00185E  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5190  001860  6E11               	movwf	memcpy@d1+1,c
  5191  001862  0E01               	movlw	1
  5192  001864  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5193  001866  6E12               	movwf	memcpy@s1,c
  5194  001868  0E00               	movlw	0
  5195  00186A  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5196  00186C  6E13               	movwf	memcpy@s1+1,c
  5197  00186E  EE20 F032          	lfsr	2,50
  5198  001872  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5199  001874  26D9               	addwf	fsr2l,f,c
  5200  001876  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5201  001878  22DA               	addwfc	fsr2h,f,c
  5202  00187A  50DF               	movf	indf2,w,c
  5203  00187C  0B7F               	andlw	127
  5204  00187E  6E32               	movwf	(??_scroll_left_to_right+4)& (0+255),c
  5205  001880  6A33               	clrf	(??_scroll_left_to_right+5)& (0+255),c
  5206  001882  1E32               	comf	??_scroll_left_to_right+4,f,c
  5207  001884  1E33               	comf	??_scroll_left_to_right+5,f,c
  5208  001886  4A32               	infsnz	??_scroll_left_to_right+4,f,c
  5209  001888  2A33               	incf	??_scroll_left_to_right+5,f,c
  5210  00188A  EE20 F031          	lfsr	2,49
  5211  00188E  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5212  001890  26D9               	addwf	fsr2l,f,c
  5213  001892  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5214  001894  22DA               	addwfc	fsr2h,f,c
  5215  001896  50DF               	movf	indf2,w,c
  5216  001898  6E34               	movwf	(??_scroll_left_to_right+6)& (0+255),c
  5217  00189A  5034               	movf	??_scroll_left_to_right+6,w,c
  5218  00189C  2432               	addwf	??_scroll_left_to_right+4,w,c
  5219  00189E  6E14               	movwf	memcpy@n,c
  5220  0018A0  0E00               	movlw	0
  5221  0018A2  2033               	addwfc	??_scroll_left_to_right+5,w,c
  5222  0018A4  6E15               	movwf	memcpy@n+1,c
  5223  0018A6  ECC9  F01B         	call	_memcpy	;wreg free
  5224  0018AA                     l6258:
  5225                           
  5226                           ;clcd.c: 431: }
  5227                           ;clcd.c: 432: }
  5228                           ;clcd.c: 433: if (clcd_display_string_details->length_count_for_right_scroll <= clcd_dis
      +                          play_string_details->display_char_count) {
  5229  0018AA  EE20 F032          	lfsr	2,50
  5230  0018AE  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5231  0018B0  26D9               	addwf	fsr2l,f,c
  5232  0018B2  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5233  0018B4  22DA               	addwfc	fsr2h,f,c
  5234  0018B6  50DF               	movf	indf2,w,c
  5235  0018B8  0B7F               	andlw	127
  5236  0018BA  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5237  0018BC  EE20 F031          	lfsr	2,49
  5238  0018C0  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5239  0018C2  26D9               	addwf	fsr2l,f,c
  5240  0018C4  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5241  0018C6  22DA               	addwfc	fsr2h,f,c
  5242  0018C8  502E               	movf	??_scroll_left_to_right,w,c
  5243  0018CA  5CDE               	subwf	postinc2,w,c
  5244  0018CC  A0D8               	btfss	status,0,c
  5245  0018CE  D013               	goto	l6262
  5246                           
  5247                           ;clcd.c: 434: clcd_display_string_details->length_count_for_right_scroll++;
  5248  0018D0  0E01               	movlw	1
  5249  0018D2  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5250  0018D4  EE20 F032          	lfsr	2,50
  5251  0018D8  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5252  0018DA  26D9               	addwf	fsr2l,f,c
  5253  0018DC  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5254  0018DE  22DA               	addwfc	fsr2h,f,c
  5255  0018E0  50DF               	movf	indf2,w,c
  5256  0018E2  0B7F               	andlw	127
  5257  0018E4  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5258  0018E6  502E               	movf	??_scroll_left_to_right,w,c
  5259  0018E8  262F               	addwf	??_scroll_left_to_right+1,f,c
  5260  0018EA  50DF               	movf	indf2,w,c
  5261  0018EC  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5262  0018EE  0B80               	andlw	-128
  5263  0018F0  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5264  0018F2  6EDF               	movwf	indf2,c
  5265                           
  5266                           ;clcd.c: 435: } else if (clcd_display_string_details->length_decount_for_right_scroll < 
      +                          clcd_display_string_details->strlen) {
  5267  0018F4  0012               	return	
  5268  0018F6                     l6262:
  5269  0018F6  EE20 F033          	lfsr	2,51
  5270  0018FA  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5271  0018FC  26D9               	addwf	fsr2l,f,c
  5272  0018FE  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5273  001900  22DA               	addwfc	fsr2h,f,c
  5274  001902  50DF               	movf	indf2,w,c
  5275  001904  0B7F               	andlw	127
  5276  001906  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5277  001908  EE20 F029          	lfsr	2,41
  5278  00190C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5279  00190E  26D9               	addwf	fsr2l,f,c
  5280  001910  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5281  001912  22DA               	addwfc	fsr2h,f,c
  5282  001914  50DF               	movf	indf2,w,c
  5283  001916  0B7F               	andlw	127
  5284  001918  5C2E               	subwf	??_scroll_left_to_right,w,c
  5285  00191A  B0D8               	btfsc	status,0,c
  5286  00191C  0012               	return	
  5287                           
  5288                           ;clcd.c: 436: clcd_display_string_details->length_decount_for_right_scroll++;
  5289  00191E  0E01               	movlw	1
  5290  001920  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5291  001922  EE20 F033          	lfsr	2,51
  5292  001926  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5293  001928  26D9               	addwf	fsr2l,f,c
  5294  00192A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5295  00192C  22DA               	addwfc	fsr2h,f,c
  5296  00192E  50DF               	movf	indf2,w,c
  5297  001930  0B7F               	andlw	127
  5298  001932  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5299  001934  502E               	movf	??_scroll_left_to_right,w,c
  5300  001936  262F               	addwf	??_scroll_left_to_right+1,f,c
  5301  001938  50DF               	movf	indf2,w,c
  5302  00193A  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5303  00193C  0B80               	andlw	-128
  5304  00193E  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5305  001940  6EDF               	movwf	indf2,c
  5306                           
  5307                           ;clcd.c: 437: if (clcd_display_string_details->length_decount_for_right_scroll >= clcd_d
      +                          isplay_string_details->strlen) {
  5308  001942  EE20 F029          	lfsr	2,41
  5309  001946  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5310  001948  26D9               	addwf	fsr2l,f,c
  5311  00194A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5312  00194C  22DA               	addwfc	fsr2h,f,c
  5313  00194E  50DF               	movf	indf2,w,c
  5314  001950  0B7F               	andlw	127
  5315  001952  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5316  001954  EE20 F033          	lfsr	2,51
  5317  001958  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5318  00195A  26D9               	addwf	fsr2l,f,c
  5319  00195C  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5320  00195E  22DA               	addwfc	fsr2h,f,c
  5321  001960  50DF               	movf	indf2,w,c
  5322  001962  0B7F               	andlw	127
  5323  001964  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5324  001966  502E               	movf	??_scroll_left_to_right,w,c
  5325  001968  5C2F               	subwf	??_scroll_left_to_right+1,w,c
  5326  00196A  A0D8               	btfss	status,0,c
  5327  00196C  0012               	return	
  5328                           
  5329                           ;clcd.c: 438: clcd_display_string_details->length_count_for_right_scroll = 0;
  5330  00196E  EE20 F032          	lfsr	2,50
  5331  001972  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5332  001974  26D9               	addwf	fsr2l,f,c
  5333  001976  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5334  001978  22DA               	addwfc	fsr2h,f,c
  5335  00197A  90DF               	bcf	indf2,0,c
  5336  00197C  92DF               	bcf	indf2,1,c
  5337  00197E  94DF               	bcf	indf2,2,c
  5338  001980  96DF               	bcf	indf2,3,c
  5339  001982  98DF               	bcf	indf2,4,c
  5340  001984  9ADF               	bcf	indf2,5,c
  5341  001986  9CDF               	bcf	indf2,6,c
  5342                           
  5343                           ;clcd.c: 439: clcd_display_string_details->length_decount_for_right_scroll = 0;
  5344  001988  EE20 F033          	lfsr	2,51
  5345  00198C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5346  00198E  26D9               	addwf	fsr2l,f,c
  5347  001990  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5348  001992  22DA               	addwfc	fsr2h,f,c
  5349  001994  90DF               	bcf	indf2,0,c
  5350  001996  92DF               	bcf	indf2,1,c
  5351  001998  94DF               	bcf	indf2,2,c
  5352  00199A  96DF               	bcf	indf2,3,c
  5353  00199C  98DF               	bcf	indf2,4,c
  5354  00199E  9ADF               	bcf	indf2,5,c
  5355  0019A0  9CDF               	bcf	indf2,6,c
  5356  0019A2  0012               	return	
  5357  0019A4                     __end_of_scroll_left_to_right:
  5358                           	opt stack 0
  5359                           tblptru	equ	0xFF8
  5360                           tblptrh	equ	0xFF7
  5361                           tblptrl	equ	0xFF6
  5362                           tablat	equ	0xFF5
  5363                           prodh	equ	0xFF4
  5364                           prodl	equ	0xFF3
  5365                           intcon	equ	0xFF2
  5366                           postinc0	equ	0xFEE
  5367                           wreg	equ	0xFE8
  5368                           indf1	equ	0xFE7
  5369                           postdec1	equ	0xFE5
  5370                           fsr1h	equ	0xFE2
  5371                           fsr1l	equ	0xFE1
  5372                           indf2	equ	0xFDF
  5373                           postinc2	equ	0xFDE
  5374                           fsr2h	equ	0xFDA
  5375                           fsr2l	equ	0xFD9
  5376                           status	equ	0xFD8
  5377                           
  5378 ;; *************** function _display_text *****************
  5379 ;; Defined at:
  5380 ;;		line 574 in file "clcd.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;		None
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;		None
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      void 
  5387 ;; Registers used:
  5388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;Total ram usage:        0 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    8
  5401 ;; This function calls:
  5402 ;;		_char_enter_mode_left_to_right
  5403 ;;		_set_cursor
  5404 ;;		_write_lcd_cmd
  5405 ;;		_write_str
  5406 ;; This function is called by:
  5407 ;;		_make_display
  5408 ;;		_display_screen
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           	psect	text11
  5413  003086                     __ptext11:
  5414                           	opt stack 0
  5415  003086                     _display_text:
  5416                           	opt stack 21
  5417                           
  5418                           ;clcd.c: 575: if (print_data_ready == 1) {
  5419                           
  5420                           ;incstack = 0
  5421  003086  0100               	movlb	0	; () banked
  5422  003088  0576               	decf	_print_data_ready& (0+255),w,b
  5423  00308A  0100               	movlb	0	; () banked
  5424  00308C  1177               	iorwf	(_print_data_ready+1)& (0+255),w,b
  5425  00308E  A4D8               	btfss	status,2,c
  5426  003090  D037               	goto	l6364
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;clcd.c: 576: write_lcd_cmd(0x01);;
  5430  003092  0E01               	movlw	1
  5431  003094  EC6A  F01D         	call	_write_lcd_cmd
  5432                           
  5433                           ;clcd.c: 577: char_enter_mode_left_to_right();
  5434  003098  EC02  F01E         	call	_char_enter_mode_left_to_right	;wreg free
  5435                           
  5436                           ;clcd.c: 578: set_cursor(0x80, 0);
  5437  00309C  0E00               	movlw	0
  5438  00309E  6E18               	movwf	set_cursor@col_number,c
  5439  0030A0  0E80               	movlw	128
  5440  0030A2  EC86  F01D         	call	_set_cursor
  5441                           
  5442                           ;clcd.c: 579: write_str(lcd_display_array[0]);
  5443  0030A6  0E00               	movlw	low _lcd_display_array
  5444  0030A8  6E18               	movwf	write_str@str,c
  5445  0030AA  0E01               	movlw	high _lcd_display_array
  5446  0030AC  6E19               	movwf	write_str@str+1,c
  5447  0030AE  EC08  F01C         	call	_write_str	;wreg free
  5448                           
  5449                           ;clcd.c: 580: set_cursor(0xC0, 0);
  5450  0030B2  0E00               	movlw	0
  5451  0030B4  6E18               	movwf	set_cursor@col_number,c
  5452  0030B6  0EC0               	movlw	192
  5453  0030B8  EC86  F01D         	call	_set_cursor
  5454                           
  5455                           ;clcd.c: 581: write_str(lcd_display_array[1]);
  5456  0030BC  0E14               	movlw	low (_lcd_display_array+20)
  5457  0030BE  6E18               	movwf	write_str@str,c
  5458  0030C0  0E01               	movlw	high (_lcd_display_array+20)
  5459  0030C2  6E19               	movwf	write_str@str+1,c
  5460  0030C4  EC08  F01C         	call	_write_str	;wreg free
  5461                           
  5462                           ;clcd.c: 582: set_cursor(0x94, 0);
  5463  0030C8  0E00               	movlw	0
  5464  0030CA  6E18               	movwf	set_cursor@col_number,c
  5465  0030CC  0E94               	movlw	148
  5466  0030CE  EC86  F01D         	call	_set_cursor
  5467                           
  5468                           ;clcd.c: 583: write_str(lcd_display_array[2]);
  5469  0030D2  0E28               	movlw	low (_lcd_display_array+40)
  5470  0030D4  6E18               	movwf	write_str@str,c
  5471  0030D6  0E01               	movlw	high (_lcd_display_array+40)
  5472  0030D8  6E19               	movwf	write_str@str+1,c
  5473  0030DA  EC08  F01C         	call	_write_str	;wreg free
  5474                           
  5475                           ;clcd.c: 584: set_cursor(0xD4, 0);
  5476  0030DE  0E00               	movlw	0
  5477  0030E0  6E18               	movwf	set_cursor@col_number,c
  5478  0030E2  0ED4               	movlw	212
  5479  0030E4  EC86  F01D         	call	_set_cursor
  5480                           
  5481                           ;clcd.c: 585: write_str(lcd_display_array[3]);
  5482  0030E8  0E3C               	movlw	low (_lcd_display_array+60)
  5483  0030EA  6E18               	movwf	write_str@str,c
  5484  0030EC  0E01               	movlw	high (_lcd_display_array+60)
  5485  0030EE  6E19               	movwf	write_str@str+1,c
  5486  0030F0  EC08  F01C         	call	_write_str	;wreg free
  5487                           
  5488                           ;clcd.c: 586: print_data_ready = 0;
  5489  0030F4  0E00               	movlw	0
  5490  0030F6  0100               	movlb	0	; () banked
  5491  0030F8  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5492  0030FA  0E00               	movlw	0
  5493  0030FC  6F76               	movwf	_print_data_ready& (0+255),b
  5494                           
  5495                           ;clcd.c: 587: } else {
  5496  0030FE  0012               	return	
  5497  003100                     l6364:
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;clcd.c: 588: print_data_ready = 0;
  5501  003100  0E00               	movlw	0
  5502  003102  0100               	movlb	0	; () banked
  5503  003104  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5504  003106  0E00               	movlw	0
  5505  003108  6F76               	movwf	_print_data_ready& (0+255),b
  5506  00310A  0012               	return	
  5507  00310C                     __end_of_display_text:
  5508                           	opt stack 0
  5509                           tblptru	equ	0xFF8
  5510                           tblptrh	equ	0xFF7
  5511                           tblptrl	equ	0xFF6
  5512                           tablat	equ	0xFF5
  5513                           prodh	equ	0xFF4
  5514                           prodl	equ	0xFF3
  5515                           intcon	equ	0xFF2
  5516                           postinc0	equ	0xFEE
  5517                           wreg	equ	0xFE8
  5518                           indf1	equ	0xFE7
  5519                           postdec1	equ	0xFE5
  5520                           fsr1h	equ	0xFE2
  5521                           fsr1l	equ	0xFE1
  5522                           indf2	equ	0xFDF
  5523                           postinc2	equ	0xFDE
  5524                           fsr2h	equ	0xFDA
  5525                           fsr2l	equ	0xFD9
  5526                           status	equ	0xFD8
  5527                           
  5528 ;; *************** function _set_cursor *****************
  5529 ;; Defined at:
  5530 ;;		line 223 in file "clcd.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;  row_number      1    wreg     unsigned char 
  5533 ;;  col_number      1   23[COMRAM] unsigned char 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  row_number      1   24[COMRAM] unsigned char 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  1    wreg      void 
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5545 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;Total ram usage:        2 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    7
  5552 ;; This function calls:
  5553 ;;		_write_lcd_cmd
  5554 ;; This function is called by:
  5555 ;;		_display_text
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           	psect	text12
  5560  003B0C                     __ptext12:
  5561                           	opt stack 0
  5562  003B0C                     _set_cursor:
  5563                           	opt stack 21
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;incstack = 0
  5567                           ;set_cursor@row_number stored from wreg
  5568  003B0C  6E19               	movwf	set_cursor@row_number,c
  5569                           
  5570                           ;clcd.c: 224: if (col_number > 20) {
  5571  003B0E  0E14               	movlw	20
  5572  003B10  6418               	cpfsgt	set_cursor@col_number,c
  5573  003B12  D002               	goto	l6176
  5574                           
  5575                           ;clcd.c: 225: col_number = 0;
  5576  003B14  0E00               	movlw	0
  5577  003B16  6E18               	movwf	set_cursor@col_number,c
  5578  003B18                     l6176:
  5579                           
  5580                           ;clcd.c: 226: }
  5581                           ;clcd.c: 227: write_lcd_cmd(col_number + row_number);
  5582  003B18  5018               	movf	set_cursor@col_number,w,c
  5583  003B1A  2419               	addwf	set_cursor@row_number,w,c
  5584  003B1C  EC6A  F01D         	call	_write_lcd_cmd
  5585  003B20  0012               	return		;funcret
  5586  003B22                     __end_of_set_cursor:
  5587                           	opt stack 0
  5588                           tblptru	equ	0xFF8
  5589                           tblptrh	equ	0xFF7
  5590                           tblptrl	equ	0xFF6
  5591                           tablat	equ	0xFF5
  5592                           prodh	equ	0xFF4
  5593                           prodl	equ	0xFF3
  5594                           intcon	equ	0xFF2
  5595                           postinc0	equ	0xFEE
  5596                           wreg	equ	0xFE8
  5597                           indf1	equ	0xFE7
  5598                           postdec1	equ	0xFE5
  5599                           fsr1h	equ	0xFE2
  5600                           fsr1l	equ	0xFE1
  5601                           indf2	equ	0xFDF
  5602                           postinc2	equ	0xFDE
  5603                           fsr2h	equ	0xFDA
  5604                           fsr2l	equ	0xFD9
  5605                           status	equ	0xFD8
  5606                           
  5607 ;; *************** function _char_enter_mode_left_to_right *****************
  5608 ;; Defined at:
  5609 ;;		line 264 in file "clcd.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;		None
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;		None
  5614 ;; Return value:  Size  Location     Type
  5615 ;;                  1    wreg      void 
  5616 ;; Registers used:
  5617 ;;		wreg, status,2, status,0, cstack
  5618 ;; Tracked objects:
  5619 ;;		On entry : 0/0
  5620 ;;		On exit  : 0/0
  5621 ;;		Unchanged: 0/0
  5622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;Total ram usage:        0 bytes
  5628 ;; Hardware stack levels used:    1
  5629 ;; Hardware stack levels required when called:    7
  5630 ;; This function calls:
  5631 ;;		_write_lcd_cmd
  5632 ;; This function is called by:
  5633 ;;		_display_text
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text13
  5638  003C04                     __ptext13:
  5639                           	opt stack 0
  5640  003C04                     _char_enter_mode_left_to_right:
  5641                           	opt stack 21
  5642                           
  5643                           ;clcd.c: 268: write_lcd_cmd(0x06);
  5644                           
  5645                           ;incstack = 0
  5646  003C04  0E06               	movlw	6
  5647  003C06  EC6A  F01D         	call	_write_lcd_cmd
  5648  003C0A  0012               	return		;funcret
  5649  003C0C                     __end_of_char_enter_mode_left_to_right:
  5650                           	opt stack 0
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           intcon	equ	0xFF2
  5658                           postinc0	equ	0xFEE
  5659                           wreg	equ	0xFE8
  5660                           indf1	equ	0xFE7
  5661                           postdec1	equ	0xFE5
  5662                           fsr1h	equ	0xFE2
  5663                           fsr1l	equ	0xFE1
  5664                           indf2	equ	0xFDF
  5665                           postinc2	equ	0xFDE
  5666                           fsr2h	equ	0xFDA
  5667                           fsr2l	equ	0xFD9
  5668                           status	equ	0xFD8
  5669                           
  5670 ;; *************** function _copy_data *****************
  5671 ;; Defined at:
  5672 ;;		line 120 in file "clcd.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;  clcd_str_dat    2   47[COMRAM] PTR struct .
  5675 ;;		 -> clcd_display_string_details(1080), 
  5676 ;;  data            2   49[COMRAM] PTR struct .
  5677 ;;		 -> cmd_data(50), 
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;  col2            1    0        unsigned char 
  5680 ;;  row2            1    0        unsigned char 
  5681 ;;  col1            1    0        unsigned char 
  5682 ;;  row1            1    0        unsigned char 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5692 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5694 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;Total ram usage:        6 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    8
  5699 ;; This function calls:
  5700 ;;		_printf
  5701 ;;		_strcpy
  5702 ;;		_strlen
  5703 ;; This function is called by:
  5704 ;;		_update_string_data
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	text14
  5709  0020B4                     __ptext14:
  5710                           	opt stack 0
  5711  0020B4                     _copy_data:
  5712                           	opt stack 19
  5713                           
  5714                           ;clcd.c: 121: char row1, col1, row2, col2;
  5715                           ;clcd.c: 122: clcd_str_data->uid = data->uid;
  5716                           
  5717                           ;incstack = 0
  5718  0020B4  C032  FFD9         	movff	copy_data@data,fsr2l
  5719  0020B8  C033  FFDA         	movff	copy_data@data+1,fsr2h
  5720  0020BC  50DF               	movf	indf2,w,c
  5721  0020BE  6E34               	movwf	??_copy_data& (0+255),c
  5722  0020C0  C030  FFD9         	movff	copy_data@clcd_str_data,fsr2l
  5723  0020C4  C031  FFDA         	movff	copy_data@clcd_str_data+1,fsr2h
  5724  0020C8  50DF               	movf	indf2,w,c
  5725  0020CA  1834               	xorwf	??_copy_data,w,c
  5726  0020CC  0B80               	andlw	-128
  5727  0020CE  1834               	xorwf	??_copy_data,w,c
  5728  0020D0  6EDF               	movwf	indf2,c
  5729                           
  5730                           ;clcd.c: 123: strcpy(clcd_str_data->string, data->data);
  5731  0020D2  0E01               	movlw	1
  5732  0020D4  2430               	addwf	copy_data@clcd_str_data,w,c
  5733  0020D6  6E10               	movwf	strcpy@to,c
  5734  0020D8  0E00               	movlw	0
  5735  0020DA  2031               	addwfc	copy_data@clcd_str_data+1,w,c
  5736  0020DC  6E11               	movwf	strcpy@to+1,c
  5737  0020DE  0E01               	movlw	1
  5738  0020E0  2432               	addwf	copy_data@data,w,c
  5739  0020E2  6E12               	movwf	strcpy@from,c
  5740  0020E4  0E00               	movlw	0
  5741  0020E6  2033               	addwfc	copy_data@data+1,w,c
  5742  0020E8  6E13               	movwf	strcpy@from+1,c
  5743  0020EA  EC40  F01B         	call	_strcpy	;wreg free
  5744                           
  5745                           ;clcd.c: 124: clcd_str_data->strlen = strlen(clcd_str_data->string);
  5746  0020EE  0E01               	movlw	1
  5747  0020F0  2430               	addwf	copy_data@clcd_str_data,w,c
  5748  0020F2  6E1E               	movwf	strlen@s,c
  5749  0020F4  0E00               	movlw	0
  5750  0020F6  2031               	addwfc	copy_data@clcd_str_data+1,w,c
  5751  0020F8  6E1F               	movwf	strlen@s+1,c
  5752  0020FA  EC2E  F01A         	call	_strlen	;wreg free
  5753  0020FE  EE20 F029          	lfsr	2,41
  5754  002102  5030               	movf	copy_data@clcd_str_data,w,c
  5755  002104  26D9               	addwf	fsr2l,f,c
  5756  002106  5031               	movf	copy_data@clcd_str_data+1,w,c
  5757  002108  22DA               	addwfc	fsr2h,f,c
  5758  00210A  50DF               	movf	indf2,w,c
  5759  00210C  181E               	xorwf	?_strlen,w,c
  5760  00210E  0B80               	andlw	-128
  5761  002110  181E               	xorwf	?_strlen,w,c
  5762  002112  6EDF               	movwf	indf2,c
  5763                           
  5764                           ;clcd.c: 125: clcd_str_data->start_row = data->start_row;
  5765  002114  EE20 F02A          	lfsr	2,42
  5766  002118  5032               	movf	copy_data@data,w,c
  5767  00211A  26D9               	addwf	fsr2l,f,c
  5768  00211C  5033               	movf	copy_data@data+1,w,c
  5769  00211E  22DA               	addwfc	fsr2h,f,c
  5770  002120  50DF               	movf	indf2,w,c
  5771  002122  6E34               	movwf	??_copy_data& (0+255),c
  5772  002124  EE20 F02A          	lfsr	2,42
  5773  002128  5030               	movf	copy_data@clcd_str_data,w,c
  5774  00212A  26D9               	addwf	fsr2l,f,c
  5775  00212C  5031               	movf	copy_data@clcd_str_data+1,w,c
  5776  00212E  22DA               	addwfc	fsr2h,f,c
  5777  002130  50DF               	movf	indf2,w,c
  5778  002132  1834               	xorwf	??_copy_data,w,c
  5779  002134  0B80               	andlw	-128
  5780  002136  1834               	xorwf	??_copy_data,w,c
  5781  002138  6EDF               	movwf	indf2,c
  5782                           
  5783                           ;clcd.c: 126: clcd_str_data->start_col = data->start_col;
  5784  00213A  EE20 F02B          	lfsr	2,43
  5785  00213E  5032               	movf	copy_data@data,w,c
  5786  002140  26D9               	addwf	fsr2l,f,c
  5787  002142  5033               	movf	copy_data@data+1,w,c
  5788  002144  22DA               	addwfc	fsr2h,f,c
  5789  002146  50DF               	movf	indf2,w,c
  5790  002148  6E34               	movwf	??_copy_data& (0+255),c
  5791  00214A  EE20 F02B          	lfsr	2,43
  5792  00214E  5030               	movf	copy_data@clcd_str_data,w,c
  5793  002150  26D9               	addwf	fsr2l,f,c
  5794  002152  5031               	movf	copy_data@clcd_str_data+1,w,c
  5795  002154  22DA               	addwfc	fsr2h,f,c
  5796  002156  50DF               	movf	indf2,w,c
  5797  002158  1834               	xorwf	??_copy_data,w,c
  5798  00215A  0B80               	andlw	-128
  5799  00215C  1834               	xorwf	??_copy_data,w,c
  5800  00215E  6EDF               	movwf	indf2,c
  5801                           
  5802                           ;clcd.c: 127: clcd_str_data->end_row = data->end_row;
  5803  002160  EE20 F02C          	lfsr	2,44
  5804  002164  5032               	movf	copy_data@data,w,c
  5805  002166  26D9               	addwf	fsr2l,f,c
  5806  002168  5033               	movf	copy_data@data+1,w,c
  5807  00216A  22DA               	addwfc	fsr2h,f,c
  5808  00216C  50DF               	movf	indf2,w,c
  5809  00216E  6E34               	movwf	??_copy_data& (0+255),c
  5810  002170  EE20 F02D          	lfsr	2,45
  5811  002174  5030               	movf	copy_data@clcd_str_data,w,c
  5812  002176  26D9               	addwf	fsr2l,f,c
  5813  002178  5031               	movf	copy_data@clcd_str_data+1,w,c
  5814  00217A  22DA               	addwfc	fsr2h,f,c
  5815  00217C  50DF               	movf	indf2,w,c
  5816  00217E  1834               	xorwf	??_copy_data,w,c
  5817  002180  0B80               	andlw	-128
  5818  002182  1834               	xorwf	??_copy_data,w,c
  5819  002184  6EDF               	movwf	indf2,c
  5820                           
  5821                           ;clcd.c: 128: clcd_str_data->end_col = data->end_col;
  5822  002186  EE20 F02D          	lfsr	2,45
  5823  00218A  5032               	movf	copy_data@data,w,c
  5824  00218C  26D9               	addwf	fsr2l,f,c
  5825  00218E  5033               	movf	copy_data@data+1,w,c
  5826  002190  22DA               	addwfc	fsr2h,f,c
  5827  002192  50DF               	movf	indf2,w,c
  5828  002194  6E34               	movwf	??_copy_data& (0+255),c
  5829  002196  EE20 F02E          	lfsr	2,46
  5830  00219A  5030               	movf	copy_data@clcd_str_data,w,c
  5831  00219C  26D9               	addwf	fsr2l,f,c
  5832  00219E  5031               	movf	copy_data@clcd_str_data+1,w,c
  5833  0021A0  22DA               	addwfc	fsr2h,f,c
  5834  0021A2  50DF               	movf	indf2,w,c
  5835  0021A4  1834               	xorwf	??_copy_data,w,c
  5836  0021A6  0B80               	andlw	-128
  5837  0021A8  1834               	xorwf	??_copy_data,w,c
  5838  0021AA  6EDF               	movwf	indf2,c
  5839                           
  5840                           ;clcd.c: 129: clcd_str_data->start_point = (clcd_str_data->start_row * clcd_config_data.
      +                          clcd_max_col) + clcd_str_data->start_col;
  5841  0021AC  EE20 F02B          	lfsr	2,43
  5842  0021B0  5030               	movf	copy_data@clcd_str_data,w,c
  5843  0021B2  26D9               	addwf	fsr2l,f,c
  5844  0021B4  5031               	movf	copy_data@clcd_str_data+1,w,c
  5845  0021B6  22DA               	addwfc	fsr2h,f,c
  5846  0021B8  50DF               	movf	indf2,w,c
  5847  0021BA  0B7F               	andlw	127
  5848  0021BC  6E34               	movwf	??_copy_data& (0+255),c
  5849  0021BE  EE20 F02A          	lfsr	2,42
  5850  0021C2  5030               	movf	copy_data@clcd_str_data,w,c
  5851  0021C4  26D9               	addwf	fsr2l,f,c
  5852  0021C6  5031               	movf	copy_data@clcd_str_data+1,w,c
  5853  0021C8  22DA               	addwfc	fsr2h,f,c
  5854  0021CA  50DF               	movf	indf2,w,c
  5855  0021CC  0B7F               	andlw	127
  5856  0021CE  024B               	mulwf	_clcd_config_data+2,c
  5857  0021D0  50F3               	movf	prodl,w,c
  5858  0021D2  2434               	addwf	??_copy_data,w,c
  5859  0021D4  6E35               	movwf	(??_copy_data+1)& (0+255),c
  5860  0021D6  EE20 F02C          	lfsr	2,44
  5861  0021DA  5030               	movf	copy_data@clcd_str_data,w,c
  5862  0021DC  26D9               	addwf	fsr2l,f,c
  5863  0021DE  5031               	movf	copy_data@clcd_str_data+1,w,c
  5864  0021E0  22DA               	addwfc	fsr2h,f,c
  5865  0021E2  50DF               	movf	indf2,w,c
  5866  0021E4  1835               	xorwf	??_copy_data+1,w,c
  5867  0021E6  0B80               	andlw	-128
  5868  0021E8  1835               	xorwf	??_copy_data+1,w,c
  5869  0021EA  6EDF               	movwf	indf2,c
  5870                           
  5871                           ;clcd.c: 130: clcd_str_data->end_point = (clcd_str_data->end_row * clcd_config_data.clcd
      +                          _max_col) + clcd_str_data->end_col;
  5872  0021EC  EE20 F02E          	lfsr	2,46
  5873  0021F0  5030               	movf	copy_data@clcd_str_data,w,c
  5874  0021F2  26D9               	addwf	fsr2l,f,c
  5875  0021F4  5031               	movf	copy_data@clcd_str_data+1,w,c
  5876  0021F6  22DA               	addwfc	fsr2h,f,c
  5877  0021F8  50DF               	movf	indf2,w,c
  5878  0021FA  0B7F               	andlw	127
  5879  0021FC  6E34               	movwf	??_copy_data& (0+255),c
  5880  0021FE  EE20 F02D          	lfsr	2,45
  5881  002202  5030               	movf	copy_data@clcd_str_data,w,c
  5882  002204  26D9               	addwf	fsr2l,f,c
  5883  002206  5031               	movf	copy_data@clcd_str_data+1,w,c
  5884  002208  22DA               	addwfc	fsr2h,f,c
  5885  00220A  50DF               	movf	indf2,w,c
  5886  00220C  0B7F               	andlw	127
  5887  00220E  024B               	mulwf	_clcd_config_data+2,c
  5888  002210  50F3               	movf	prodl,w,c
  5889  002212  2434               	addwf	??_copy_data,w,c
  5890  002214  6E35               	movwf	(??_copy_data+1)& (0+255),c
  5891  002216  EE20 F02F          	lfsr	2,47
  5892  00221A  5030               	movf	copy_data@clcd_str_data,w,c
  5893  00221C  26D9               	addwf	fsr2l,f,c
  5894  00221E  5031               	movf	copy_data@clcd_str_data+1,w,c
  5895  002220  22DA               	addwfc	fsr2h,f,c
  5896  002222  50DF               	movf	indf2,w,c
  5897  002224  1835               	xorwf	??_copy_data+1,w,c
  5898  002226  0B80               	andlw	-128
  5899  002228  1835               	xorwf	??_copy_data+1,w,c
  5900  00222A  6EDF               	movwf	indf2,c
  5901                           
  5902                           ;clcd.c: 131: clcd_str_data->direction = data->scroll;
  5903  00222C  EE20 F02F          	lfsr	2,47
  5904  002230  5032               	movf	copy_data@data,w,c
  5905  002232  26D9               	addwf	fsr2l,f,c
  5906  002234  5033               	movf	copy_data@data+1,w,c
  5907  002236  22DA               	addwfc	fsr2h,f,c
  5908  002238  50DF               	movf	indf2,w,c
  5909  00223A  6E34               	movwf	??_copy_data& (0+255),c
  5910  00223C  EE20 F030          	lfsr	2,48
  5911  002240  5030               	movf	copy_data@clcd_str_data,w,c
  5912  002242  26D9               	addwf	fsr2l,f,c
  5913  002244  5031               	movf	copy_data@clcd_str_data+1,w,c
  5914  002246  22DA               	addwfc	fsr2h,f,c
  5915  002248  50DF               	movf	indf2,w,c
  5916  00224A  1834               	xorwf	??_copy_data,w,c
  5917  00224C  0BF8               	andlw	-8
  5918  00224E  1834               	xorwf	??_copy_data,w,c
  5919  002250  6EDF               	movwf	indf2,c
  5920                           
  5921                           ;clcd.c: 132: clcd_str_data->display_char_count = (clcd_str_data->end_point - clcd_str_d
      +                          ata->start_point)+1;
  5922  002252  EE20 F031          	lfsr	2,49
  5923  002256  5030               	movf	copy_data@clcd_str_data,w,c
  5924  002258  26D9               	addwf	fsr2l,f,c
  5925  00225A  5031               	movf	copy_data@clcd_str_data+1,w,c
  5926  00225C  22DA               	addwfc	fsr2h,f,c
  5927  00225E  EE10 F02F          	lfsr	1,47
  5928  002262  5030               	movf	copy_data@clcd_str_data,w,c
  5929  002264  26E1               	addwf	fsr1l,f,c
  5930  002266  5031               	movf	copy_data@clcd_str_data+1,w,c
  5931  002268  22E2               	addwfc	fsr1h,f,c
  5932  00226A  50E7               	movf	indf1,w,c
  5933  00226C  0B7F               	andlw	127
  5934  00226E  6E34               	movwf	??_copy_data& (0+255),c
  5935  002270  EE10 F02C          	lfsr	1,44
  5936  002274  5030               	movf	copy_data@clcd_str_data,w,c
  5937  002276  26E1               	addwf	fsr1l,f,c
  5938  002278  5031               	movf	copy_data@clcd_str_data+1,w,c
  5939  00227A  22E2               	addwfc	fsr1h,f,c
  5940  00227C  50E7               	movf	indf1,w,c
  5941  00227E  0B7F               	andlw	127
  5942  002280  0800               	sublw	0
  5943  002282  2434               	addwf	??_copy_data,w,c
  5944  002284  6E35               	movwf	(??_copy_data+1)& (0+255),c
  5945  002286  2835               	incf	??_copy_data+1,w,c
  5946  002288  6EDF               	movwf	indf2,c
  5947                           
  5948                           ;clcd.c: 133: printf("display_char_count = %d\r\n", clcd_str_data->display_char_count);
  5949  00228A  0E50               	movlw	low STR_6
  5950  00228C  6E1E               	movwf	printf@f,c
  5951  00228E  0EFD               	movlw	high STR_6
  5952  002290  6E1F               	movwf	printf@f+1,c
  5953  002292  EE20 F031          	lfsr	2,49
  5954  002296  5030               	movf	copy_data@clcd_str_data,w,c
  5955  002298  26D9               	addwf	fsr2l,f,c
  5956  00229A  5031               	movf	copy_data@clcd_str_data+1,w,c
  5957  00229C  22DA               	addwfc	fsr2h,f,c
  5958  00229E  50DF               	movf	indf2,w,c
  5959  0022A0  6E34               	movwf	??_copy_data& (0+255),c
  5960  0022A2  5034               	movf	??_copy_data,w,c
  5961  0022A4  6E20               	movwf	?_printf+2,c
  5962  0022A6  6A21               	clrf	?_printf+3,c
  5963  0022A8  EC48  F012         	call	_printf	;wreg free
  5964  0022AC  0012               	return		;funcret
  5965  0022AE                     __end_of_copy_data:
  5966                           	opt stack 0
  5967                           tblptru	equ	0xFF8
  5968                           tblptrh	equ	0xFF7
  5969                           tblptrl	equ	0xFF6
  5970                           tablat	equ	0xFF5
  5971                           prodh	equ	0xFF4
  5972                           prodl	equ	0xFF3
  5973                           intcon	equ	0xFF2
  5974                           postinc0	equ	0xFEE
  5975                           wreg	equ	0xFE8
  5976                           indf1	equ	0xFE7
  5977                           postdec1	equ	0xFE5
  5978                           fsr1h	equ	0xFE2
  5979                           fsr1l	equ	0xFE1
  5980                           indf2	equ	0xFDF
  5981                           postinc2	equ	0xFDE
  5982                           fsr2h	equ	0xFDA
  5983                           fsr2l	equ	0xFD9
  5984                           status	equ	0xFD8
  5985                           
  5986 ;; *************** function _conflict_check *****************
  5987 ;; Defined at:
  5988 ;;		line 136 in file "clcd.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;  exist_uid_id    1    wreg     unsigned char 
  5991 ;;  new_start_po    1   47[COMRAM] unsigned char 
  5992 ;;  new_end_poin    1   48[COMRAM] unsigned char 
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  exist_uid_id    1   52[COMRAM] unsigned char 
  5995 ;;  i               2   54[COMRAM] int 
  5996 ;;  conflict        1   53[COMRAM] unsigned char 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      unsigned char 
  5999 ;; Registers used:
  6000 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6006 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;Total ram usage:        9 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    8
  6013 ;; This function calls:
  6014 ;;		___wmul
  6015 ;;		_printf
  6016 ;; This function is called by:
  6017 ;;		_update_string_data
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text15
  6022  0019A4                     __ptext15:
  6023                           	opt stack 0
  6024  0019A4                     _conflict_check:
  6025                           	opt stack 19
  6026                           
  6027                           ;incstack = 0
  6028                           ;conflict_check@exist_uid_idx stored from wreg
  6029  0019A4  6E35               	movwf	conflict_check@exist_uid_idx,c
  6030                           
  6031                           ;clcd.c: 137: int i = 0;
  6032  0019A6  0E00               	movlw	0
  6033  0019A8  6E38               	movwf	conflict_check@i+1,c
  6034  0019AA  0E00               	movlw	0
  6035  0019AC  6E37               	movwf	conflict_check@i,c
  6036                           
  6037                           ;clcd.c: 138: bool conflict = 0;
  6038  0019AE  0E00               	movlw	0
  6039  0019B0  6E36               	movwf	conflict_check@conflict,c
  6040                           
  6041                           ;clcd.c: 140: for (i = 0; i < clcd_config_data.clcd_max_display_string;) {
  6042  0019B2  0E00               	movlw	0
  6043  0019B4  6E38               	movwf	conflict_check@i+1,c
  6044  0019B6  0E00               	movlw	0
  6045  0019B8  6E37               	movwf	conflict_check@i,c
  6046  0019BA  D12D               	goto	l6482
  6047  0019BC                     l6436:
  6048                           
  6049                           ;clcd.c: 141: if (exist_uid_idx != i && clcd_display_string_details[i].uid != 0) {
  6050  0019BC  5035               	movf	conflict_check@exist_uid_idx,w,c
  6051  0019BE  6E32               	movwf	??_conflict_check& (0+255),c
  6052  0019C0  6A33               	clrf	(??_conflict_check+1)& (0+255),c
  6053  0019C2  5037               	movf	conflict_check@i,w,c
  6054  0019C4  1832               	xorwf	??_conflict_check,w,c
  6055  0019C6  E104               	bnz	u6370
  6056  0019C8  5038               	movf	conflict_check@i+1,w,c
  6057  0019CA  1833               	xorwf	??_conflict_check+1,w,c
  6058  0019CC  B4D8               	btfsc	status,2,c
  6059  0019CE  D121               	goto	l6480
  6060  0019D0                     u6370:
  6061  0019D0  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6062  0019D4  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6063  0019D8  0E00               	movlw	0
  6064  0019DA  6E1B               	movwf	___wmul@multiplicand+1,c
  6065  0019DC  0E36               	movlw	54
  6066  0019DE  6E1A               	movwf	___wmul@multiplicand,c
  6067  0019E0  ECD5  F01C         	call	___wmul	;wreg free
  6068  0019E4  0E96               	movlw	low _clcd_display_string_details
  6069  0019E6  2418               	addwf	?___wmul,w,c
  6070  0019E8  6ED9               	movwf	fsr2l,c
  6071  0019EA  0E02               	movlw	high _clcd_display_string_details
  6072  0019EC  2019               	addwfc	?___wmul+1,w,c
  6073  0019EE  6EDA               	movwf	fsr2h,c
  6074  0019F0  50DF               	movf	223,w,c
  6075  0019F2  0B7F               	andlw	127
  6076  0019F4  0900               	iorlw	0
  6077  0019F6  B4D8               	btfsc	status,2,c
  6078  0019F8  D10C               	goto	l6480
  6079                           
  6080                           ;clcd.c: 142: if (new_start_point >= clcd_display_string_details[i].start_point && new_s
      +                          tart_point <= clcd_display_string_details[i].end_point) {
  6081  0019FA  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6082  0019FE  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6083  001A02  0E00               	movlw	0
  6084  001A04  6E1B               	movwf	___wmul@multiplicand+1,c
  6085  001A06  0E36               	movlw	54
  6086  001A08  6E1A               	movwf	___wmul@multiplicand,c
  6087  001A0A  ECD5  F01C         	call	___wmul	;wreg free
  6088  001A0E  0E2C               	movlw	44
  6089  001A10  2618               	addwf	?___wmul,f,c
  6090  001A12  0E00               	movlw	0
  6091  001A14  2219               	addwfc	?___wmul+1,f,c
  6092  001A16  0E96               	movlw	low _clcd_display_string_details
  6093  001A18  2418               	addwf	?___wmul,w,c
  6094  001A1A  6ED9               	movwf	fsr2l,c
  6095  001A1C  0E02               	movlw	high _clcd_display_string_details
  6096  001A1E  2019               	addwfc	?___wmul+1,w,c
  6097  001A20  6EDA               	movwf	fsr2h,c
  6098  001A22  50DF               	movf	223,w,c
  6099  001A24  0B7F               	andlw	127
  6100  001A26  6E32               	movwf	??_conflict_check& (0+255),c
  6101  001A28  5032               	movf	??_conflict_check,w,c
  6102  001A2A  5C30               	subwf	conflict_check@new_start_point,w,c
  6103  001A2C  A0D8               	btfss	status,0,c
  6104  001A2E  D040               	goto	l6454
  6105  001A30  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6106  001A34  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6107  001A38  0E00               	movlw	0
  6108  001A3A  6E1B               	movwf	___wmul@multiplicand+1,c
  6109  001A3C  0E36               	movlw	54
  6110  001A3E  6E1A               	movwf	___wmul@multiplicand,c
  6111  001A40  ECD5  F01C         	call	___wmul	;wreg free
  6112  001A44  0E2F               	movlw	47
  6113  001A46  2618               	addwf	?___wmul,f,c
  6114  001A48  0E00               	movlw	0
  6115  001A4A  2219               	addwfc	?___wmul+1,f,c
  6116  001A4C  0E96               	movlw	low _clcd_display_string_details
  6117  001A4E  2418               	addwf	?___wmul,w,c
  6118  001A50  6ED9               	movwf	fsr2l,c
  6119  001A52  0E02               	movlw	high _clcd_display_string_details
  6120  001A54  2019               	addwfc	?___wmul+1,w,c
  6121  001A56  6EDA               	movwf	fsr2h,c
  6122  001A58  50DF               	movf	223,w,c
  6123  001A5A  0B7F               	andlw	127
  6124  001A5C  6E32               	movwf	??_conflict_check& (0+255),c
  6125  001A5E  5030               	movf	conflict_check@new_start_point,w,c
  6126  001A60  5C32               	subwf	??_conflict_check,w,c
  6127  001A62  A0D8               	btfss	status,0,c
  6128  001A64  D025               	goto	l6454
  6129                           
  6130                           ;clcd.c: 143: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6131  001A66  5042               	movf	_conflict_data_count,w,c
  6132  001A68  0D01               	mullw	1
  6133  001A6A  0EB8               	movlw	low _conflict_arr
  6134  001A6C  24F3               	addwf	prodl,w,c
  6135  001A6E  6ED9               	movwf	fsr2l,c
  6136  001A70  0E00               	movlw	high _conflict_arr
  6137  001A72  20F4               	addwfc	prodh,w,c
  6138  001A74  6EDA               	movwf	fsr2h,c
  6139  001A76  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6140  001A7A  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6141  001A7E  0E00               	movlw	0
  6142  001A80  6E1B               	movwf	___wmul@multiplicand+1,c
  6143  001A82  0E36               	movlw	54
  6144  001A84  6E1A               	movwf	___wmul@multiplicand,c
  6145  001A86  ECD5  F01C         	call	___wmul	;wreg free
  6146  001A8A  0E96               	movlw	low _clcd_display_string_details
  6147  001A8C  2418               	addwf	?___wmul,w,c
  6148  001A8E  6EE1               	movwf	fsr1l,c
  6149  001A90  0E02               	movlw	high _clcd_display_string_details
  6150  001A92  2019               	addwfc	?___wmul+1,w,c
  6151  001A94  6EE2               	movwf	fsr1h,c
  6152  001A96  50E7               	movf	231,w,c
  6153  001A98  0B7F               	andlw	127
  6154  001A9A  6EDF               	movwf	indf2,c
  6155  001A9C  2A42               	incf	_conflict_data_count,f,c
  6156                           
  6157                           ;clcd.c: 144: i++;
  6158  001A9E  4A37               	infsnz	conflict_check@i,f,c
  6159  001AA0  2A38               	incf	conflict_check@i+1,f,c
  6160                           
  6161                           ;clcd.c: 145: printf("ex_sp <= new_sp <=ex_ep\r\n");
  6162  001AA2  0E84               	movlw	low STR_7
  6163  001AA4  6E1E               	movwf	printf@f,c
  6164  001AA6  0EFD               	movlw	high STR_7
  6165  001AA8  6E1F               	movwf	printf@f+1,c
  6166  001AAA  EC48  F012         	call	_printf	;wreg free
  6167  001AAE  D059               	goto	l6466
  6168  001AB0                     l6454:
  6169                           
  6170                           ;clcd.c: 148: }
  6171                           ;clcd.c: 149: if (new_end_point >= clcd_display_string_details[i].start_point && new_end
      +                          _point <= clcd_display_string_details[i].end_point) {
  6172  001AB0  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6173  001AB4  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6174  001AB8  0E00               	movlw	0
  6175  001ABA  6E1B               	movwf	___wmul@multiplicand+1,c
  6176  001ABC  0E36               	movlw	54
  6177  001ABE  6E1A               	movwf	___wmul@multiplicand,c
  6178  001AC0  ECD5  F01C         	call	___wmul	;wreg free
  6179  001AC4  0E2C               	movlw	44
  6180  001AC6  2618               	addwf	?___wmul,f,c
  6181  001AC8  0E00               	movlw	0
  6182  001ACA  2219               	addwfc	?___wmul+1,f,c
  6183  001ACC  0E96               	movlw	low _clcd_display_string_details
  6184  001ACE  2418               	addwf	?___wmul,w,c
  6185  001AD0  6ED9               	movwf	fsr2l,c
  6186  001AD2  0E02               	movlw	high _clcd_display_string_details
  6187  001AD4  2019               	addwfc	?___wmul+1,w,c
  6188  001AD6  6EDA               	movwf	fsr2h,c
  6189  001AD8  50DF               	movf	223,w,c
  6190  001ADA  0B7F               	andlw	127
  6191  001ADC  6E32               	movwf	??_conflict_check& (0+255),c
  6192  001ADE  5032               	movf	??_conflict_check,w,c
  6193  001AE0  5C31               	subwf	conflict_check@new_end_point,w,c
  6194  001AE2  A0D8               	btfss	status,0,c
  6195  001AE4  D041               	goto	l6468
  6196  001AE6  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6197  001AEA  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6198  001AEE  0E00               	movlw	0
  6199  001AF0  6E1B               	movwf	___wmul@multiplicand+1,c
  6200  001AF2  0E36               	movlw	54
  6201  001AF4  6E1A               	movwf	___wmul@multiplicand,c
  6202  001AF6  ECD5  F01C         	call	___wmul	;wreg free
  6203  001AFA  0E2F               	movlw	47
  6204  001AFC  2618               	addwf	?___wmul,f,c
  6205  001AFE  0E00               	movlw	0
  6206  001B00  2219               	addwfc	?___wmul+1,f,c
  6207  001B02  0E96               	movlw	low _clcd_display_string_details
  6208  001B04  2418               	addwf	?___wmul,w,c
  6209  001B06  6ED9               	movwf	fsr2l,c
  6210  001B08  0E02               	movlw	high _clcd_display_string_details
  6211  001B0A  2019               	addwfc	?___wmul+1,w,c
  6212  001B0C  6EDA               	movwf	fsr2h,c
  6213  001B0E  50DF               	movf	223,w,c
  6214  001B10  0B7F               	andlw	127
  6215  001B12  6E32               	movwf	??_conflict_check& (0+255),c
  6216  001B14  5031               	movf	conflict_check@new_end_point,w,c
  6217  001B16  5C32               	subwf	??_conflict_check,w,c
  6218  001B18  A0D8               	btfss	status,0,c
  6219  001B1A  D026               	goto	l6468
  6220                           
  6221                           ;clcd.c: 150: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6222  001B1C  5042               	movf	_conflict_data_count,w,c
  6223  001B1E  0D01               	mullw	1
  6224  001B20  0EB8               	movlw	low _conflict_arr
  6225  001B22  24F3               	addwf	prodl,w,c
  6226  001B24  6ED9               	movwf	fsr2l,c
  6227  001B26  0E00               	movlw	high _conflict_arr
  6228  001B28  20F4               	addwfc	prodh,w,c
  6229  001B2A  6EDA               	movwf	fsr2h,c
  6230  001B2C  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6231  001B30  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6232  001B34  0E00               	movlw	0
  6233  001B36  6E1B               	movwf	___wmul@multiplicand+1,c
  6234  001B38  0E36               	movlw	54
  6235  001B3A  6E1A               	movwf	___wmul@multiplicand,c
  6236  001B3C  ECD5  F01C         	call	___wmul	;wreg free
  6237  001B40  0E96               	movlw	low _clcd_display_string_details
  6238  001B42  2418               	addwf	?___wmul,w,c
  6239  001B44  6EE1               	movwf	fsr1l,c
  6240  001B46  0E02               	movlw	high _clcd_display_string_details
  6241  001B48  2019               	addwfc	?___wmul+1,w,c
  6242  001B4A  6EE2               	movwf	fsr1h,c
  6243  001B4C  50E7               	movf	231,w,c
  6244  001B4E  0B7F               	andlw	127
  6245  001B50  6EDF               	movwf	indf2,c
  6246  001B52  2A42               	incf	_conflict_data_count,f,c
  6247                           
  6248                           ;clcd.c: 151: printf("ex_sp <= new_ep <=ex_ep\r\n");
  6249  001B54  0E6A               	movlw	low STR_8
  6250  001B56  6E1E               	movwf	printf@f,c
  6251  001B58  0EFD               	movlw	high STR_8
  6252  001B5A  6E1F               	movwf	printf@f+1,c
  6253  001B5C  EC48  F012         	call	_printf	;wreg free
  6254  001B60  D055               	goto	l6476
  6255  001B62                     l6466:
  6256                           
  6257                           ;clcd.c: 153: conflict = 1;
  6258  001B62  0E01               	movlw	1
  6259  001B64  6E36               	movwf	conflict_check@conflict,c
  6260                           
  6261                           ;clcd.c: 154: continue;
  6262  001B66  D057               	goto	l6482
  6263  001B68                     l6468:
  6264                           
  6265                           ;clcd.c: 155: }
  6266                           ;clcd.c: 156: if (new_start_point <= clcd_display_string_details[i].start_point && new_e
      +                          nd_point >= clcd_display_string_details[i].end_point) {
  6267  001B68  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6268  001B6C  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6269  001B70  0E00               	movlw	0
  6270  001B72  6E1B               	movwf	___wmul@multiplicand+1,c
  6271  001B74  0E36               	movlw	54
  6272  001B76  6E1A               	movwf	___wmul@multiplicand,c
  6273  001B78  ECD5  F01C         	call	___wmul	;wreg free
  6274  001B7C  0E2C               	movlw	44
  6275  001B7E  2618               	addwf	?___wmul,f,c
  6276  001B80  0E00               	movlw	0
  6277  001B82  2219               	addwfc	?___wmul+1,f,c
  6278  001B84  0E96               	movlw	low _clcd_display_string_details
  6279  001B86  2418               	addwf	?___wmul,w,c
  6280  001B88  6ED9               	movwf	fsr2l,c
  6281  001B8A  0E02               	movlw	high _clcd_display_string_details
  6282  001B8C  2019               	addwfc	?___wmul+1,w,c
  6283  001B8E  6EDA               	movwf	fsr2h,c
  6284  001B90  50DF               	movf	223,w,c
  6285  001B92  0B7F               	andlw	127
  6286  001B94  6E32               	movwf	??_conflict_check& (0+255),c
  6287  001B96  5030               	movf	conflict_check@new_start_point,w,c
  6288  001B98  5C32               	subwf	??_conflict_check,w,c
  6289  001B9A  A0D8               	btfss	status,0,c
  6290  001B9C  D03A               	goto	l6480
  6291  001B9E  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6292  001BA2  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6293  001BA6  0E00               	movlw	0
  6294  001BA8  6E1B               	movwf	___wmul@multiplicand+1,c
  6295  001BAA  0E36               	movlw	54
  6296  001BAC  6E1A               	movwf	___wmul@multiplicand,c
  6297  001BAE  ECD5  F01C         	call	___wmul	;wreg free
  6298  001BB2  0E2F               	movlw	47
  6299  001BB4  2618               	addwf	?___wmul,f,c
  6300  001BB6  0E00               	movlw	0
  6301  001BB8  2219               	addwfc	?___wmul+1,f,c
  6302  001BBA  0E96               	movlw	low _clcd_display_string_details
  6303  001BBC  2418               	addwf	?___wmul,w,c
  6304  001BBE  6ED9               	movwf	fsr2l,c
  6305  001BC0  0E02               	movlw	high _clcd_display_string_details
  6306  001BC2  2019               	addwfc	?___wmul+1,w,c
  6307  001BC4  6EDA               	movwf	fsr2h,c
  6308  001BC6  50DF               	movf	223,w,c
  6309  001BC8  0B7F               	andlw	127
  6310  001BCA  6E32               	movwf	??_conflict_check& (0+255),c
  6311  001BCC  5032               	movf	??_conflict_check,w,c
  6312  001BCE  5C31               	subwf	conflict_check@new_end_point,w,c
  6313  001BD0  A0D8               	btfss	status,0,c
  6314  001BD2  D01F               	goto	l6480
  6315                           
  6316                           ;clcd.c: 157: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6317  001BD4  5042               	movf	_conflict_data_count,w,c
  6318  001BD6  0D01               	mullw	1
  6319  001BD8  0EB8               	movlw	low _conflict_arr
  6320  001BDA  24F3               	addwf	prodl,w,c
  6321  001BDC  6ED9               	movwf	fsr2l,c
  6322  001BDE  0E00               	movlw	high _conflict_arr
  6323  001BE0  20F4               	addwfc	prodh,w,c
  6324  001BE2  6EDA               	movwf	fsr2h,c
  6325  001BE4  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6326  001BE8  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6327  001BEC  0E00               	movlw	0
  6328  001BEE  6E1B               	movwf	___wmul@multiplicand+1,c
  6329  001BF0  0E36               	movlw	54
  6330  001BF2  6E1A               	movwf	___wmul@multiplicand,c
  6331  001BF4  ECD5  F01C         	call	___wmul	;wreg free
  6332  001BF8  0E96               	movlw	low _clcd_display_string_details
  6333  001BFA  2418               	addwf	?___wmul,w,c
  6334  001BFC  6EE1               	movwf	fsr1l,c
  6335  001BFE  0E02               	movlw	high _clcd_display_string_details
  6336  001C00  2019               	addwfc	?___wmul+1,w,c
  6337  001C02  6EE2               	movwf	fsr1h,c
  6338  001C04  50E7               	movf	231,w,c
  6339  001C06  0B7F               	andlw	127
  6340  001C08  6EDF               	movwf	indf2,c
  6341  001C0A  2A42               	incf	_conflict_data_count,f,c
  6342  001C0C                     l6476:
  6343                           
  6344                           ;clcd.c: 158: i++;
  6345  001C0C  4A37               	infsnz	conflict_check@i,f,c
  6346  001C0E  2A38               	incf	conflict_check@i+1,f,c
  6347  001C10  D7A8               	goto	l6466
  6348  001C12                     l6480:
  6349                           
  6350                           ;clcd.c: 161: }
  6351                           ;clcd.c: 162: }
  6352                           ;clcd.c: 163: i++;
  6353  001C12  4A37               	infsnz	conflict_check@i,f,c
  6354  001C14  2A38               	incf	conflict_check@i+1,f,c
  6355  001C16                     l6482:
  6356  001C16  504D               	movf	_clcd_config_data+4,w,c
  6357  001C18  6E32               	movwf	??_conflict_check& (0+255),c
  6358  001C1A  6A33               	clrf	(??_conflict_check+1)& (0+255),c
  6359  001C1C  5032               	movf	??_conflict_check,w,c
  6360  001C1E  5C37               	subwf	conflict_check@i,w,c
  6361  001C20  5038               	movf	conflict_check@i+1,w,c
  6362  001C22  0A80               	xorlw	128
  6363  001C24  6E34               	movwf	(??_conflict_check+2)& (0+255),c
  6364  001C26  5033               	movf	??_conflict_check+1,w,c
  6365  001C28  0A80               	xorlw	128
  6366  001C2A  5834               	subwfb	(??_conflict_check+2)& (0+255),w,c
  6367  001C2C  A0D8               	btfss	status,0,c
  6368  001C2E  D6C6               	goto	l6436
  6369                           
  6370                           ;clcd.c: 164: }
  6371                           ;clcd.c: 172: return conflict;
  6372  001C30  5036               	movf	conflict_check@conflict,w,c
  6373  001C32  0012               	return	
  6374  001C34                     __end_of_conflict_check:
  6375                           	opt stack 0
  6376                           tblptru	equ	0xFF8
  6377                           tblptrh	equ	0xFF7
  6378                           tblptrl	equ	0xFF6
  6379                           tablat	equ	0xFF5
  6380                           prodh	equ	0xFF4
  6381                           prodl	equ	0xFF3
  6382                           intcon	equ	0xFF2
  6383                           postinc0	equ	0xFEE
  6384                           wreg	equ	0xFE8
  6385                           indf1	equ	0xFE7
  6386                           postdec1	equ	0xFE5
  6387                           fsr1h	equ	0xFE2
  6388                           fsr1l	equ	0xFE1
  6389                           indf2	equ	0xFDF
  6390                           postinc2	equ	0xFDE
  6391                           fsr2h	equ	0xFDA
  6392                           fsr2l	equ	0xFD9
  6393                           status	equ	0xFD8
  6394                           
  6395 ;; *************** function _strcmp *****************
  6396 ;; Defined at:
  6397 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;  s1              2   15[COMRAM] PTR const unsigned char 
  6400 ;;		 -> uart_str(150), CMD(15), 
  6401 ;;  s2              2   17[COMRAM] PTR const unsigned char 
  6402 ;;		 -> STR_130(5), STR_116(7), STR_113(7), STR_110(8), 
  6403 ;;		 -> STR_107(6), STR_102(6), STR_99(5), STR_95(4), 
  6404 ;;		 -> STR_91(4), STR_87(6), STR_85(4), 
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;  r               1   20[COMRAM] char 
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  2   15[COMRAM] int 
  6409 ;; Registers used:
  6410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6411 ;; Tracked objects:
  6412 ;;		On entry : 0/0
  6413 ;;		On exit  : 0/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6416 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;Total ram usage:        6 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; Hardware stack levels required when called:    5
  6423 ;; This function calls:
  6424 ;;		Nothing
  6425 ;; This function is called by:
  6426 ;;		_reply_to_host
  6427 ;;		_cmd_consol_task
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           	psect	text16
  6432  0035A2                     __ptext16:
  6433                           	opt stack 0
  6434  0035A2                     _strcmp:
  6435                           	opt stack 24
  6436                           
  6437                           ;incstack = 0
  6438  0035A2  D004               	goto	l6980
  6439  0035A4                     l6978:
  6440  0035A4  4A10               	infsnz	strcmp@s1,f,c
  6441  0035A6  2A11               	incf	strcmp@s1+1,f,c
  6442  0035A8  4A12               	infsnz	strcmp@s2,f,c
  6443  0035AA  2A13               	incf	strcmp@s2+1,f,c
  6444  0035AC                     l6980:
  6445  0035AC  C010  FFD9         	movff	strcmp@s1,fsr2l
  6446  0035B0  C011  FFDA         	movff	strcmp@s1+1,fsr2h
  6447  0035B4  50DF               	movf	indf2,w,c
  6448  0035B6  6E14               	movwf	??_strcmp& (0+255),c
  6449  0035B8  C012  FFF6         	movff	strcmp@s2,tblptrl
  6450  0035BC  C013  FFF7         	movff	strcmp@s2+1,tblptrh
  6451  0035C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6452  0035C0  6AF8               	clrf	tblptru,c
  6453  0035C2                     	endif
  6454  0035C2                     	if	0	;tblptru may be non-zero
  6455  0035C2                     	endif
  6456  0035C2  0008               	tblrd		*
  6457  0035C4  50F5               	movf	tablat,w,c
  6458  0035C6  0800               	sublw	0
  6459  0035C8  2414               	addwf	??_strcmp,w,c
  6460  0035CA  6E15               	movwf	strcmp@r,c
  6461  0035CC  5015               	movf	strcmp@r,w,c
  6462  0035CE  A4D8               	btfss	status,2,c
  6463  0035D0  D007               	goto	l6984
  6464  0035D2  C010  FFD9         	movff	strcmp@s1,fsr2l
  6465  0035D6  C011  FFDA         	movff	strcmp@s1+1,fsr2h
  6466  0035DA  50DF               	movf	indf2,w,c
  6467  0035DC  A4D8               	btfss	status,2,c
  6468  0035DE  D7E2               	goto	l6978
  6469  0035E0                     l6984:
  6470  0035E0  5015               	movf	strcmp@r,w,c
  6471  0035E2  6E10               	movwf	?_strcmp,c
  6472  0035E4  6A11               	clrf	?_strcmp+1,c
  6473  0035E6  BE10               	btfsc	?_strcmp,7,c
  6474  0035E8  0611               	decf	?_strcmp+1,f,c
  6475  0035EA  0012               	return	
  6476  0035EC                     __end_of_strcmp:
  6477                           	opt stack 0
  6478                           tblptru	equ	0xFF8
  6479                           tblptrh	equ	0xFF7
  6480                           tblptrl	equ	0xFF6
  6481                           tablat	equ	0xFF5
  6482                           prodh	equ	0xFF4
  6483                           prodl	equ	0xFF3
  6484                           intcon	equ	0xFF2
  6485                           postinc0	equ	0xFEE
  6486                           wreg	equ	0xFE8
  6487                           indf1	equ	0xFE7
  6488                           postdec1	equ	0xFE5
  6489                           fsr1h	equ	0xFE2
  6490                           fsr1l	equ	0xFE1
  6491                           indf2	equ	0xFDF
  6492                           postinc2	equ	0xFDE
  6493                           fsr2h	equ	0xFDA
  6494                           fsr2l	equ	0xFD9
  6495                           status	equ	0xFD8
  6496                           
  6497 ;; *************** function _puts *****************
  6498 ;; Defined at:
  6499 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\puts.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;  s               2   19[COMRAM] PTR const unsigned char 
  6502 ;;		 -> STR_132(12), STR_131(12), STR_86(5), 
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;		None
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  2   19[COMRAM] int 
  6507 ;; Registers used:
  6508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6514 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;Total ram usage:        2 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; Hardware stack levels required when called:    8
  6521 ;; This function calls:
  6522 ;;		_cputs
  6523 ;;		_putch
  6524 ;; This function is called by:
  6525 ;;		_reply_to_host
  6526 ;;		_cmd_consol_task
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           	psect	text17
  6531  003B22                     __ptext17:
  6532                           	opt stack 0
  6533  003B22                     _puts:
  6534                           	opt stack 20
  6535                           
  6536                           ;incstack = 0
  6537  003B22  C014  F012         	movff	puts@s,cputs@s
  6538  003B26  C015  F013         	movff	puts@s+1,cputs@s+1
  6539  003B2A  ECA8  F01C         	call	_cputs	;wreg free
  6540  003B2E  0E0A               	movlw	10
  6541  003B30  ECF8  F01D         	call	_putch
  6542  003B34  0012               	return		;funcret
  6543  003B36                     __end_of_puts:
  6544                           	opt stack 0
  6545                           tblptru	equ	0xFF8
  6546                           tblptrh	equ	0xFF7
  6547                           tblptrl	equ	0xFF6
  6548                           tablat	equ	0xFF5
  6549                           prodh	equ	0xFF4
  6550                           prodl	equ	0xFF3
  6551                           intcon	equ	0xFF2
  6552                           postinc0	equ	0xFEE
  6553                           wreg	equ	0xFE8
  6554                           indf1	equ	0xFE7
  6555                           postdec1	equ	0xFE5
  6556                           fsr1h	equ	0xFE2
  6557                           fsr1l	equ	0xFE1
  6558                           indf2	equ	0xFDF
  6559                           postinc2	equ	0xFDE
  6560                           fsr2h	equ	0xFDA
  6561                           fsr2l	equ	0xFD9
  6562                           status	equ	0xFD8
  6563                           
  6564 ;; *************** function _cputs *****************
  6565 ;; Defined at:
  6566 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\cputs.c"
  6567 ;; Parameters:    Size  Location     Type
  6568 ;;  s               2   17[COMRAM] PTR const unsigned char 
  6569 ;;		 -> STR_132(12), STR_131(12), STR_86(5), 
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;		None
  6572 ;; Return value:  Size  Location     Type
  6573 ;;                  1    wreg      void 
  6574 ;; Registers used:
  6575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6576 ;; Tracked objects:
  6577 ;;		On entry : 0/0
  6578 ;;		On exit  : 0/0
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6581 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6584 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6585 ;;Total ram usage:        2 bytes
  6586 ;; Hardware stack levels used:    1
  6587 ;; Hardware stack levels required when called:    7
  6588 ;; This function calls:
  6589 ;;		_putch
  6590 ;; This function is called by:
  6591 ;;		_puts
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           	psect	text18
  6596  003950                     __ptext18:
  6597                           	opt stack 0
  6598  003950                     _cputs:
  6599                           	opt stack 20
  6600                           
  6601                           ;incstack = 0
  6602  003950  D00B               	goto	l6578
  6603  003952                     l6574:
  6604  003952  C012  FFF6         	movff	cputs@s,tblptrl
  6605  003956  C013  FFF7         	movff	cputs@s+1,tblptrh
  6606  00395A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6607  00395A  6AF8               	clrf	tblptru,c
  6608  00395C                     	endif
  6609  00395C                     	if	0	;tblptru may be non-zero
  6610  00395C                     	endif
  6611  00395C  0008               	tblrd		*
  6612  00395E  50F5               	movf	tablat,w,c
  6613  003960  ECF8  F01D         	call	_putch
  6614  003964  4A12               	infsnz	cputs@s,f,c
  6615  003966  2A13               	incf	cputs@s+1,f,c
  6616  003968                     l6578:
  6617  003968  C012  FFF6         	movff	cputs@s,tblptrl
  6618  00396C  C013  FFF7         	movff	cputs@s+1,tblptrh
  6619  003970                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6620  003970  6AF8               	clrf	tblptru,c
  6621  003972                     	endif
  6622  003972                     	if	0	;tblptru may be non-zero
  6623  003972                     	endif
  6624  003972  0008               	tblrd		*
  6625  003974  50F5               	movf	tablat,w,c
  6626  003976  0900               	iorlw	0
  6627  003978  B4D8               	btfsc	status,2,c
  6628  00397A  0012               	return	
  6629  00397C  D7EA               	goto	l6574
  6630  00397E                     __end_of_cputs:
  6631                           	opt stack 0
  6632                           tblptru	equ	0xFF8
  6633                           tblptrh	equ	0xFF7
  6634                           tblptrl	equ	0xFF6
  6635                           tablat	equ	0xFF5
  6636                           prodh	equ	0xFF4
  6637                           prodl	equ	0xFF3
  6638                           intcon	equ	0xFF2
  6639                           postinc0	equ	0xFEE
  6640                           wreg	equ	0xFE8
  6641                           indf1	equ	0xFE7
  6642                           postdec1	equ	0xFE5
  6643                           fsr1h	equ	0xFE2
  6644                           fsr1l	equ	0xFE1
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           fsr2h	equ	0xFDA
  6648                           fsr2l	equ	0xFD9
  6649                           status	equ	0xFD8
  6650                           
  6651 ;; *************** function _min_uid_range *****************
  6652 ;; Defined at:
  6653 ;;		line 88 in file "clcd.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;		None
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;		None
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  1    wreg      unsigned char 
  6660 ;; Registers used:
  6661 ;;		wreg, status,2
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6671 ;;Total ram usage:        0 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    5
  6674 ;; This function calls:
  6675 ;;		Nothing
  6676 ;; This function is called by:
  6677 ;;		_reply_to_host
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           	psect	text19
  6682  003B56                     __ptext19:
  6683                           	opt stack 0
  6684  003B56                     _min_uid_range:
  6685                           	opt stack 23
  6686                           
  6687                           ;clcd.c: 89: if (clcd_config_data.init_done == 0)
  6688                           
  6689                           ;incstack = 0
  6690  003B56  5049               	movf	_clcd_config_data,w,c
  6691  003B58  A4D8               	btfss	status,2,c
  6692  003B5A  D002               	goto	l6660
  6693                           
  6694                           ;clcd.c: 90: return 0;
  6695  003B5C  0E00               	movlw	0
  6696  003B5E  0012               	return	
  6697  003B60                     l6660:
  6698                           
  6699                           ;clcd.c: 91: else
  6700                           ;clcd.c: 92: return 'A';
  6701  003B60  0E41               	movlw	65
  6702  003B62  0012               	return	
  6703  003B64                     __end_of_min_uid_range:
  6704                           	opt stack 0
  6705                           tblptru	equ	0xFF8
  6706                           tblptrh	equ	0xFF7
  6707                           tblptrl	equ	0xFF6
  6708                           tablat	equ	0xFF5
  6709                           prodh	equ	0xFF4
  6710                           prodl	equ	0xFF3
  6711                           intcon	equ	0xFF2
  6712                           postinc0	equ	0xFEE
  6713                           wreg	equ	0xFE8
  6714                           indf1	equ	0xFE7
  6715                           postdec1	equ	0xFE5
  6716                           fsr1h	equ	0xFE2
  6717                           fsr1l	equ	0xFE1
  6718                           indf2	equ	0xFDF
  6719                           postinc2	equ	0xFDE
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function _max_uid_range *****************
  6725 ;; Defined at:
  6726 ;;		line 95 in file "clcd.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;		None
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      unsigned char 
  6733 ;; Registers used:
  6734 ;;		wreg, status,2, status,0
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;Total ram usage:        0 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    5
  6747 ;; This function calls:
  6748 ;;		Nothing
  6749 ;; This function is called by:
  6750 ;;		_reply_to_host
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           	psect	text20
  6755  003B64                     __ptext20:
  6756                           	opt stack 0
  6757  003B64                     _max_uid_range:
  6758                           	opt stack 23
  6759                           
  6760                           ;clcd.c: 96: if (clcd_config_data.init_done == 0)
  6761                           
  6762                           ;incstack = 0
  6763  003B64  5049               	movf	_clcd_config_data,w,c
  6764  003B66  A4D8               	btfss	status,2,c
  6765  003B68  D002               	goto	l6672
  6766                           
  6767                           ;clcd.c: 97: return 0;
  6768  003B6A  0E00               	movlw	0
  6769  003B6C  0012               	return	
  6770  003B6E                     l6672:
  6771                           
  6772                           ;clcd.c: 98: else
  6773                           ;clcd.c: 99: return clcd_config_data.uid_range - 1;
  6774  003B6E  044C               	decf	_clcd_config_data+3,w,c
  6775  003B70  0012               	return	
  6776  003B72                     __end_of_max_uid_range:
  6777                           	opt stack 0
  6778                           tblptru	equ	0xFF8
  6779                           tblptrh	equ	0xFF7
  6780                           tblptrl	equ	0xFF6
  6781                           tablat	equ	0xFF5
  6782                           prodh	equ	0xFF4
  6783                           prodl	equ	0xFF3
  6784                           intcon	equ	0xFF2
  6785                           postinc0	equ	0xFEE
  6786                           wreg	equ	0xFE8
  6787                           indf1	equ	0xFE7
  6788                           postdec1	equ	0xFE5
  6789                           fsr1h	equ	0xFE2
  6790                           fsr1l	equ	0xFE1
  6791                           indf2	equ	0xFDF
  6792                           postinc2	equ	0xFDE
  6793                           fsr2h	equ	0xFDA
  6794                           fsr2l	equ	0xFD9
  6795                           status	equ	0xFD8
  6796                           
  6797 ;; *************** function _max_display_support *****************
  6798 ;; Defined at:
  6799 ;;		line 102 in file "clcd.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  2   15[COMRAM] PTR unsigned char 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2, status,0
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;Total ram usage:        2 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    5
  6820 ;; This function calls:
  6821 ;;		Nothing
  6822 ;; This function is called by:
  6823 ;;		_reply_to_host
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           	psect	text21
  6828  003BDC                     __ptext21:
  6829                           	opt stack 0
  6830  003BDC                     _max_display_support:
  6831                           	opt stack 23
  6832                           
  6833                           ;clcd.c: 103: return "4,20";
  6834                           
  6835                           ;incstack = 0
  6836  003BDC  0EE8               	movlw	low STR_5
  6837  003BDE  6E10               	movwf	?_max_display_support,c
  6838  003BE0  0EFF               	movlw	high STR_5
  6839  003BE2  6E11               	movwf	?_max_display_support+1,c
  6840  003BE4  0012               	return	
  6841  003BE6                     __end_of_max_display_support:
  6842                           	opt stack 0
  6843                           tblptru	equ	0xFF8
  6844                           tblptrh	equ	0xFF7
  6845                           tblptrl	equ	0xFF6
  6846                           tablat	equ	0xFF5
  6847                           prodh	equ	0xFF4
  6848                           prodl	equ	0xFF3
  6849                           intcon	equ	0xFF2
  6850                           postinc0	equ	0xFEE
  6851                           wreg	equ	0xFE8
  6852                           indf1	equ	0xFE7
  6853                           postdec1	equ	0xFE5
  6854                           fsr1h	equ	0xFE2
  6855                           fsr1l	equ	0xFE1
  6856                           indf2	equ	0xFDF
  6857                           postinc2	equ	0xFDE
  6858                           fsr2h	equ	0xFDA
  6859                           fsr2l	equ	0xFD9
  6860                           status	equ	0xFD8
  6861                           
  6862 ;; *************** function _max_display_str *****************
  6863 ;; Defined at:
  6864 ;;		line 81 in file "clcd.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;		None
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;		None
  6869 ;; Return value:  Size  Location     Type
  6870 ;;                  1    wreg      unsigned char 
  6871 ;; Registers used:
  6872 ;;		wreg, status,2
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6882 ;;Total ram usage:        0 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:    5
  6885 ;; This function calls:
  6886 ;;		Nothing
  6887 ;; This function is called by:
  6888 ;;		_reply_to_host
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           	psect	text22
  6893  003B72                     __ptext22:
  6894                           	opt stack 0
  6895  003B72                     _max_display_str:
  6896                           	opt stack 23
  6897                           
  6898                           ;clcd.c: 82: if (clcd_config_data.init_done == 0)
  6899                           
  6900                           ;incstack = 0
  6901  003B72  5049               	movf	_clcd_config_data,w,c
  6902  003B74  A4D8               	btfss	status,2,c
  6903  003B76  D002               	goto	l6648
  6904                           
  6905                           ;clcd.c: 83: return 0;
  6906  003B78  0E00               	movlw	0
  6907  003B7A  0012               	return	
  6908  003B7C                     l6648:
  6909                           
  6910                           ;clcd.c: 84: else
  6911                           ;clcd.c: 85: return clcd_config_data.clcd_max_display_string;
  6912  003B7C  504D               	movf	_clcd_config_data+4,w,c
  6913  003B7E  0012               	return	
  6914  003B80                     __end_of_max_display_str:
  6915                           	opt stack 0
  6916                           tblptru	equ	0xFF8
  6917                           tblptrh	equ	0xFF7
  6918                           tblptrl	equ	0xFF6
  6919                           tablat	equ	0xFF5
  6920                           prodh	equ	0xFF4
  6921                           prodl	equ	0xFF3
  6922                           intcon	equ	0xFF2
  6923                           postinc0	equ	0xFEE
  6924                           wreg	equ	0xFE8
  6925                           indf1	equ	0xFE7
  6926                           postdec1	equ	0xFE5
  6927                           fsr1h	equ	0xFE2
  6928                           fsr1l	equ	0xFE1
  6929                           indf2	equ	0xFDF
  6930                           postinc2	equ	0xFDE
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935 ;; *************** function _init_clcd_cusotom_lcd *****************
  6936 ;; Defined at:
  6937 ;;		line 49 in file "clcd.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  clcd_init_ro    1    wreg     unsigned char 
  6940 ;;  clcd_init_co    1   47[COMRAM] unsigned char 
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;  clcd_init_ro    1   48[COMRAM] unsigned char 
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6952 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;Total ram usage:        2 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:   11
  6959 ;; This function calls:
  6960 ;;		___awdiv
  6961 ;;		___wmul
  6962 ;;		_init_CLCD_config
  6963 ;;		_memset
  6964 ;;		_printf
  6965 ;; This function is called by:
  6966 ;;		_reply_to_host
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           	psect	text23
  6971  002CC6                     __ptext23:
  6972                           	opt stack 0
  6973  002CC6                     _init_clcd_cusotom_lcd:
  6974                           	opt stack 17
  6975                           
  6976                           ;incstack = 0
  6977                           ;init_clcd_cusotom_lcd@clcd_init_row stored from wreg
  6978  002CC6  6E31               	movwf	init_clcd_cusotom_lcd@clcd_init_row,c
  6979                           
  6980                           ;clcd.c: 50: init_CLCD_config();
  6981  002CC8  EC99  F017         	call	_init_CLCD_config	;wreg free
  6982                           
  6983                           ;clcd.c: 51: data_count = 0;
  6984  002CCC  0E00               	movlw	0
  6985  002CCE  6E43               	movwf	_data_count,c
  6986                           
  6987                           ;clcd.c: 52: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details)
      +                          );
  6988  002CD0  0E96               	movlw	low _clcd_display_string_details
  6989  002CD2  6E24               	movwf	memset@p1,c
  6990  002CD4  0E02               	movlw	high _clcd_display_string_details
  6991  002CD6  6E25               	movwf	memset@p1+1,c
  6992  002CD8  0E00               	movlw	0
  6993  002CDA  6E27               	movwf	memset@c+1,c
  6994  002CDC  0E00               	movlw	0
  6995  002CDE  6E26               	movwf	memset@c,c
  6996  002CE0  0E04               	movlw	4
  6997  002CE2  6E29               	movwf	memset@n+1,c
  6998  002CE4  0E38               	movlw	56
  6999  002CE6  6E28               	movwf	memset@n,c
  7000  002CE8  EC63  F01B         	call	_memset	;wreg free
  7001                           
  7002                           ;clcd.c: 53: memset(conflict_arr, 0, sizeof (conflict_arr));
  7003  002CEC  0EB8               	movlw	low _conflict_arr
  7004  002CEE  6E24               	movwf	memset@p1,c
  7005  002CF0  0E00               	movlw	high _conflict_arr
  7006  002CF2  6E25               	movwf	memset@p1+1,c
  7007  002CF4  0E00               	movlw	0
  7008  002CF6  6E27               	movwf	memset@c+1,c
  7009  002CF8  0E00               	movlw	0
  7010  002CFA  6E26               	movwf	memset@c,c
  7011  002CFC  0E00               	movlw	0
  7012  002CFE  6E29               	movwf	memset@n+1,c
  7013  002D00  0E14               	movlw	20
  7014  002D02  6E28               	movwf	memset@n,c
  7015  002D04  EC63  F01B         	call	_memset	;wreg free
  7016                           
  7017                           ;clcd.c: 54: clcd_config_data.init_done = 1;
  7018  002D08  0E01               	movlw	1
  7019  002D0A  6E49               	movwf	_clcd_config_data,c
  7020                           
  7021                           ;clcd.c: 55: printf("row = %d", clcd_init_row);
  7022  002D0C  0E71               	movlw	low STR_1
  7023  002D0E  6E1E               	movwf	printf@f,c
  7024  002D10  0EFF               	movlw	high STR_1
  7025  002D12  6E1F               	movwf	printf@f+1,c
  7026  002D14  C031  F020         	movff	init_clcd_cusotom_lcd@clcd_init_row,?_printf+2
  7027  002D18  6A21               	clrf	?_printf+3,c
  7028  002D1A  EC48  F012         	call	_printf	;wreg free
  7029                           
  7030                           ;clcd.c: 56: clcd_config_data.clcd_max_row = clcd_init_row;
  7031  002D1E  C031  F04A         	movff	init_clcd_cusotom_lcd@clcd_init_row,_clcd_config_data+1
  7032                           
  7033                           ;clcd.c: 57: printf("col = %d", clcd_init_col);
  7034  002D22  0E68               	movlw	low STR_2
  7035  002D24  6E1E               	movwf	printf@f,c
  7036  002D26  0EFF               	movlw	high STR_2
  7037  002D28  6E1F               	movwf	printf@f+1,c
  7038  002D2A  C030  F020         	movff	init_clcd_cusotom_lcd@clcd_init_col,?_printf+2
  7039  002D2E  6A21               	clrf	?_printf+3,c
  7040  002D30  EC48  F012         	call	_printf	;wreg free
  7041                           
  7042                           ;clcd.c: 58: clcd_config_data.clcd_max_col = clcd_init_col;
  7043  002D34  C030  F04B         	movff	init_clcd_cusotom_lcd@clcd_init_col,_clcd_config_data+2
  7044                           
  7045                           ;clcd.c: 59: printf("string_count = %d", (clcd_init_col / 4) * clcd_init_row);
  7046  002D38  0E08               	movlw	low STR_3
  7047  002D3A  6E1E               	movwf	printf@f,c
  7048  002D3C  0EFE               	movlw	high STR_3
  7049  002D3E  6E1F               	movwf	printf@f+1,c
  7050  002D40  0E00               	movlw	0
  7051  002D42  6E13               	movwf	___awdiv@divisor+1,c
  7052  002D44  0E04               	movlw	4
  7053  002D46  6E12               	movwf	___awdiv@divisor,c
  7054  002D48  C030  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7055  002D4C  6A11               	clrf	___awdiv@dividend+1,c
  7056  002D4E  EC86  F018         	call	___awdiv	;wreg free
  7057  002D52  C010  F018         	movff	?___awdiv,___wmul@multiplier
  7058  002D56  C011  F019         	movff	?___awdiv+1,___wmul@multiplier+1
  7059  002D5A  C031  F01A         	movff	init_clcd_cusotom_lcd@clcd_init_row,___wmul@multiplicand
  7060  002D5E  6A1B               	clrf	___wmul@multiplicand+1,c
  7061  002D60  ECD5  F01C         	call	___wmul	;wreg free
  7062  002D64  C018  F020         	movff	?___wmul,?_printf+2
  7063  002D68  C019  F021         	movff	?___wmul+1,?_printf+3
  7064  002D6C  EC48  F012         	call	_printf	;wreg free
  7065                           
  7066                           ;clcd.c: 60: clcd_config_data.clcd_max_display_string = (clcd_init_col / 4) * clcd_init_
      +                          row;
  7067  002D70  C030  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7068  002D74  6A11               	clrf	___awdiv@dividend+1,c
  7069  002D76  0E00               	movlw	0
  7070  002D78  6E13               	movwf	___awdiv@divisor+1,c
  7071  002D7A  0E04               	movlw	4
  7072  002D7C  6E12               	movwf	___awdiv@divisor,c
  7073  002D7E  EC86  F018         	call	___awdiv	;wreg free
  7074  002D82  5010               	movf	?___awdiv,w,c
  7075  002D84  0231               	mulwf	init_clcd_cusotom_lcd@clcd_init_row,c
  7076  002D86  CFF3 F04D          	movff	prodl,_clcd_config_data+4
  7077                           
  7078                           ;clcd.c: 61: clcd_config_data.uid_range = 'A' + clcd_config_data.clcd_max_display_string
      +                          ;
  7079  002D8A  504D               	movf	_clcd_config_data+4,w,c
  7080  002D8C  0F41               	addlw	65
  7081  002D8E  6E4C               	movwf	_clcd_config_data+3,c
  7082                           
  7083                           ;clcd.c: 62: printf("uid_range = %d\r\n", clcd_config_data.uid_range);
  7084  002D90  0E2B               	movlw	low STR_4
  7085  002D92  6E1E               	movwf	printf@f,c
  7086  002D94  0EFE               	movlw	high STR_4
  7087  002D96  6E1F               	movwf	printf@f+1,c
  7088  002D98  C04C  F020         	movff	_clcd_config_data+3,?_printf+2
  7089  002D9C  6A21               	clrf	?_printf+3,c
  7090  002D9E  EC48  F012         	call	_printf	;wreg free
  7091  002DA2  0012               	return		;funcret
  7092  002DA4                     __end_of_init_clcd_cusotom_lcd:
  7093                           	opt stack 0
  7094                           tblptru	equ	0xFF8
  7095                           tblptrh	equ	0xFF7
  7096                           tblptrl	equ	0xFF6
  7097                           tablat	equ	0xFF5
  7098                           prodh	equ	0xFF4
  7099                           prodl	equ	0xFF3
  7100                           intcon	equ	0xFF2
  7101                           postinc0	equ	0xFEE
  7102                           wreg	equ	0xFE8
  7103                           indf1	equ	0xFE7
  7104                           postdec1	equ	0xFE5
  7105                           fsr1h	equ	0xFE2
  7106                           fsr1l	equ	0xFE1
  7107                           indf2	equ	0xFDF
  7108                           postinc2	equ	0xFDE
  7109                           fsr2h	equ	0xFDA
  7110                           fsr2l	equ	0xFD9
  7111                           status	equ	0xFD8
  7112                           
  7113 ;; *************** function _init_CLCD_config *****************
  7114 ;; Defined at:
  7115 ;;		line 15 in file "clcd.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;		None
  7118 ;; Auto vars:     Size  Location     Type
  7119 ;;		None
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  1    wreg      void 
  7122 ;; Registers used:
  7123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;Total ram usage:        0 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:   10
  7136 ;; This function calls:
  7137 ;;		__delay_MS
  7138 ;;		_clcd_display_string_config
  7139 ;;		_memset
  7140 ;;		_reset_clcd
  7141 ;;		_write_lcd_cmd
  7142 ;; This function is called by:
  7143 ;;		_init_clcd_cusotom_lcd
  7144 ;;		_init_clcd_lcd_16x2
  7145 ;;		_init_clcd_lcd_20x4
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           	psect	text24
  7150  002F32                     __ptext24:
  7151                           	opt stack 0
  7152  002F32                     _init_CLCD_config:
  7153                           	opt stack 17
  7154                           
  7155                           ;clcd.c: 16: memset(&clcd_config_data, 0, sizeof (CLCD_CONFIG_DATA));
  7156                           
  7157                           ;incstack = 0
  7158  002F32  0E49               	movlw	low _clcd_config_data
  7159  002F34  6E24               	movwf	memset@p1,c
  7160  002F36  0E00               	movlw	high _clcd_config_data
  7161  002F38  6E25               	movwf	memset@p1+1,c
  7162  002F3A  0E00               	movlw	0
  7163  002F3C  6E27               	movwf	memset@c+1,c
  7164  002F3E  0E00               	movlw	0
  7165  002F40  6E26               	movwf	memset@c,c
  7166  002F42  0E00               	movlw	0
  7167  002F44  6E29               	movwf	memset@n+1,c
  7168  002F46  0E05               	movlw	5
  7169  002F48  6E28               	movwf	memset@n,c
  7170  002F4A  EC63  F01B         	call	_memset	;wreg free
  7171                           
  7172                           ;clcd.c: 18: TRISD = 0x00;
  7173  002F4E  0E00               	movlw	0
  7174  002F50  6E95               	movwf	3989,c	;volatile
  7175                           
  7176                           ;clcd.c: 21: TRISA = (unsigned char) (TRISA | 0xF0);
  7177  002F52  5092               	movf	3986,w,c	;volatile
  7178  002F54  09F0               	iorlw	240
  7179  002F56  6E92               	movwf	3986,c	;volatile
  7180                           
  7181                           ;clcd.c: 23: PORTAbits.RA0 = 0;
  7182  002F58  9080               	bcf	3968,0,c	;volatile
  7183                           
  7184                           ;clcd.c: 24: _delay_MS(250);
  7185  002F5A  0E00               	movlw	0
  7186  002F5C  6E11               	movwf	__delay_MS@delay+1,c
  7187  002F5E  0EFA               	movlw	250
  7188  002F60  6E10               	movwf	__delay_MS@delay,c
  7189  002F62  EC86  F01B         	call	__delay_MS	;wreg free
  7190                           
  7191                           ;clcd.c: 27: write_lcd_cmd(0X38);
  7192  002F66  0E38               	movlw	56
  7193  002F68  EC6A  F01D         	call	_write_lcd_cmd
  7194                           
  7195                           ;clcd.c: 28: _delay_MS(250);
  7196  002F6C  0E00               	movlw	0
  7197  002F6E  6E11               	movwf	__delay_MS@delay+1,c
  7198  002F70  0EFA               	movlw	250
  7199  002F72  6E10               	movwf	__delay_MS@delay,c
  7200  002F74  EC86  F01B         	call	__delay_MS	;wreg free
  7201                           
  7202                           ;clcd.c: 30: write_lcd_cmd(0x0E);;
  7203  002F78  0E0E               	movlw	14
  7204  002F7A  EC6A  F01D         	call	_write_lcd_cmd
  7205                           
  7206                           ;clcd.c: 31: _delay_MS(250);
  7207  002F7E  0E00               	movlw	0
  7208  002F80  6E11               	movwf	__delay_MS@delay+1,c
  7209  002F82  0EFA               	movlw	250
  7210  002F84  6E10               	movwf	__delay_MS@delay,c
  7211  002F86  EC86  F01B         	call	__delay_MS	;wreg free
  7212                           
  7213                           ;clcd.c: 33: write_lcd_cmd(0x01);;
  7214  002F8A  0E01               	movlw	1
  7215  002F8C  EC6A  F01D         	call	_write_lcd_cmd
  7216                           
  7217                           ;clcd.c: 34: _delay_MS(250);
  7218  002F90  0E00               	movlw	0
  7219  002F92  6E11               	movwf	__delay_MS@delay+1,c
  7220  002F94  0EFA               	movlw	250
  7221  002F96  6E10               	movwf	__delay_MS@delay,c
  7222  002F98  EC86  F01B         	call	__delay_MS	;wreg free
  7223                           
  7224                           ;clcd.c: 36: write_lcd_cmd(0x06);;
  7225  002F9C  0E06               	movlw	6
  7226  002F9E  EC6A  F01D         	call	_write_lcd_cmd
  7227                           
  7228                           ;clcd.c: 37: _delay_MS(250);
  7229  002FA2  0E00               	movlw	0
  7230  002FA4  6E11               	movwf	__delay_MS@delay+1,c
  7231  002FA6  0EFA               	movlw	250
  7232  002FA8  6E10               	movwf	__delay_MS@delay,c
  7233  002FAA  EC86  F01B         	call	__delay_MS	;wreg free
  7234                           
  7235                           ;clcd.c: 39: write_lcd_cmd(0x0F);
  7236  002FAE  0E0F               	movlw	15
  7237  002FB0  EC6A  F01D         	call	_write_lcd_cmd
  7238                           
  7239                           ;clcd.c: 40: _delay_MS(250);
  7240  002FB4  0E00               	movlw	0
  7241  002FB6  6E11               	movwf	__delay_MS@delay+1,c
  7242  002FB8  0EFA               	movlw	250
  7243  002FBA  6E10               	movwf	__delay_MS@delay,c
  7244  002FBC  EC86  F01B         	call	__delay_MS	;wreg free
  7245                           
  7246                           ;clcd.c: 42: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7247  002FC0  0E00               	movlw	low _lcd_display_array
  7248  002FC2  6E24               	movwf	memset@p1,c
  7249  002FC4  0E01               	movlw	high _lcd_display_array
  7250  002FC6  6E25               	movwf	memset@p1+1,c
  7251  002FC8  0E00               	movlw	0
  7252  002FCA  6E27               	movwf	memset@c+1,c
  7253  002FCC  0E20               	movlw	32
  7254  002FCE  6E26               	movwf	memset@c,c
  7255  002FD0  0E00               	movlw	0
  7256  002FD2  6E29               	movwf	memset@n+1,c
  7257  002FD4  0E50               	movlw	80
  7258  002FD6  6E28               	movwf	memset@n,c
  7259  002FD8  EC63  F01B         	call	_memset	;wreg free
  7260                           
  7261                           ;clcd.c: 44: clcd_display_string_config();
  7262  002FDC  ECD5  F019         	call	_clcd_display_string_config	;wreg free
  7263                           
  7264                           ;clcd.c: 46: reset_clcd();
  7265  002FE0  ECF3  F01D         	call	_reset_clcd	;wreg free
  7266  002FE4  0012               	return		;funcret
  7267  002FE6                     __end_of_init_CLCD_config:
  7268                           	opt stack 0
  7269                           tblptru	equ	0xFF8
  7270                           tblptrh	equ	0xFF7
  7271                           tblptrl	equ	0xFF6
  7272                           tablat	equ	0xFF5
  7273                           prodh	equ	0xFF4
  7274                           prodl	equ	0xFF3
  7275                           intcon	equ	0xFF2
  7276                           postinc0	equ	0xFEE
  7277                           wreg	equ	0xFE8
  7278                           indf1	equ	0xFE7
  7279                           postdec1	equ	0xFE5
  7280                           fsr1h	equ	0xFE2
  7281                           fsr1l	equ	0xFE1
  7282                           indf2	equ	0xFDF
  7283                           postinc2	equ	0xFDE
  7284                           fsr2h	equ	0xFDA
  7285                           fsr2l	equ	0xFD9
  7286                           status	equ	0xFD8
  7287                           
  7288 ;; *************** function _write_lcd_cmd *****************
  7289 ;; Defined at:
  7290 ;;		line 298 in file "clcd.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;  cmd             1    wreg     unsigned char 
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;  cmd             1   22[COMRAM] unsigned char 
  7295 ;; Return value:  Size  Location     Type
  7296 ;;                  1    wreg      void 
  7297 ;; Registers used:
  7298 ;;		wreg, status,2, status,0, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7305 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7308 ;;Total ram usage:        1 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    6
  7311 ;; This function calls:
  7312 ;;		_delay
  7313 ;; This function is called by:
  7314 ;;		_init_CLCD_config
  7315 ;;		_set_cursor
  7316 ;;		_char_enter_mode_left_to_right
  7317 ;;		_display_text
  7318 ;;		_set_cursor_at_home
  7319 ;;		_display_and_cursor_control
  7320 ;;		_scroll_display_right
  7321 ;;		_scroll_display_left
  7322 ;;		_put_string
  7323 ;;		_put_char
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           	psect	text25
  7328  003AD4                     __ptext25:
  7329                           	opt stack 0
  7330  003AD4                     _write_lcd_cmd:
  7331                           	opt stack 22
  7332                           
  7333                           ;incstack = 0
  7334                           ;write_lcd_cmd@cmd stored from wreg
  7335  003AD4  6E17               	movwf	write_lcd_cmd@cmd,c
  7336                           
  7337                           ;clcd.c: 299: PORTD = cmd;
  7338  003AD6  C017  FF83         	movff	write_lcd_cmd@cmd,3971	;volatile
  7339                           
  7340                           ;clcd.c: 300: PORTAbits.RA2 = 0;
  7341  003ADA  9480               	bcf	3968,2,c	;volatile
  7342                           
  7343                           ;clcd.c: 301: PORTAbits.RA1 = 0;
  7344  003ADC  9280               	bcf	3968,1,c	;volatile
  7345                           
  7346                           ;clcd.c: 302: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7347  003ADE  8080               	bsf	3968,0,c	;volatile
  7348  003AE0  0E00               	movlw	0
  7349  003AE2  6E11               	movwf	delay@delay+1,c
  7350  003AE4  0E01               	movlw	1
  7351  003AE6  6E10               	movwf	delay@delay,c
  7352  003AE8  ECF6  F01A         	call	_delay	;wreg free
  7353  003AEC  9080               	bcf	3968,0,c	;volatile
  7354  003AEE  0012               	return		;funcret
  7355  003AF0                     __end_of_write_lcd_cmd:
  7356                           	opt stack 0
  7357                           tblptru	equ	0xFF8
  7358                           tblptrh	equ	0xFF7
  7359                           tblptrl	equ	0xFF6
  7360                           tablat	equ	0xFF5
  7361                           prodh	equ	0xFF4
  7362                           prodl	equ	0xFF3
  7363                           intcon	equ	0xFF2
  7364                           postinc0	equ	0xFEE
  7365                           wreg	equ	0xFE8
  7366                           indf1	equ	0xFE7
  7367                           postdec1	equ	0xFE5
  7368                           fsr1h	equ	0xFE2
  7369                           fsr1l	equ	0xFE1
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           fsr2h	equ	0xFDA
  7373                           fsr2l	equ	0xFD9
  7374                           status	equ	0xFD8
  7375                           
  7376 ;; *************** function _reset_clcd *****************
  7377 ;; Defined at:
  7378 ;;		line 10 in file "clcd.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;		None
  7381 ;; Auto vars:     Size  Location     Type
  7382 ;;		None
  7383 ;; Return value:  Size  Location     Type
  7384 ;;                  1    wreg      void 
  7385 ;; Registers used:
  7386 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7387 ;; Tracked objects:
  7388 ;;		On entry : 0/0
  7389 ;;		On exit  : 0/0
  7390 ;;		Unchanged: 0/0
  7391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;Total ram usage:        0 bytes
  7397 ;; Hardware stack levels used:    1
  7398 ;; Hardware stack levels required when called:    9
  7399 ;; This function calls:
  7400 ;;		_clear_display_array
  7401 ;;		_reset_display_structure_count
  7402 ;; This function is called by:
  7403 ;;		_init_CLCD_config
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           	psect	text26
  7408  003BE6                     __ptext26:
  7409                           	opt stack 0
  7410  003BE6                     _reset_clcd:
  7411                           	opt stack 17
  7412                           
  7413                           ;clcd.c: 11: clear_display_array();
  7414                           
  7415                           ;incstack = 0
  7416  003BE6  EC0D  F01D         	call	_clear_display_array	;wreg free
  7417                           
  7418                           ;clcd.c: 12: reset_display_structure_count();
  7419  003BEA  EC9B  F01D         	call	_reset_display_structure_count	;wreg free
  7420  003BEE  0012               	return		;funcret
  7421  003BF0                     __end_of_reset_clcd:
  7422                           	opt stack 0
  7423                           tblptru	equ	0xFF8
  7424                           tblptrh	equ	0xFF7
  7425                           tblptrl	equ	0xFF6
  7426                           tablat	equ	0xFF5
  7427                           prodh	equ	0xFF4
  7428                           prodl	equ	0xFF3
  7429                           intcon	equ	0xFF2
  7430                           postinc0	equ	0xFEE
  7431                           wreg	equ	0xFE8
  7432                           indf1	equ	0xFE7
  7433                           postdec1	equ	0xFE5
  7434                           fsr1h	equ	0xFE2
  7435                           fsr1l	equ	0xFE1
  7436                           indf2	equ	0xFDF
  7437                           postinc2	equ	0xFDE
  7438                           fsr2h	equ	0xFDA
  7439                           fsr2l	equ	0xFD9
  7440                           status	equ	0xFD8
  7441                           
  7442 ;; *************** function _clear_display_array *****************
  7443 ;; Defined at:
  7444 ;;		line 399 in file "clcd.c"
  7445 ;; Parameters:    Size  Location     Type
  7446 ;;		None
  7447 ;; Auto vars:     Size  Location     Type
  7448 ;;		None
  7449 ;; Return value:  Size  Location     Type
  7450 ;;                  1    wreg      void 
  7451 ;; Registers used:
  7452 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7453 ;; Tracked objects:
  7454 ;;		On entry : 0/0
  7455 ;;		On exit  : 0/0
  7456 ;;		Unchanged: 0/0
  7457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;Total ram usage:        0 bytes
  7463 ;; Hardware stack levels used:    1
  7464 ;; Hardware stack levels required when called:    8
  7465 ;; This function calls:
  7466 ;;		_memset
  7467 ;;		_reset_display_structure_count
  7468 ;; This function is called by:
  7469 ;;		_reset_clcd
  7470 ;; This function uses a non-reentrant model
  7471 ;;
  7472                           
  7473                           	psect	text27
  7474  003A1A                     __ptext27:
  7475                           	opt stack 0
  7476  003A1A                     _clear_display_array:
  7477                           	opt stack 17
  7478                           
  7479                           ;clcd.c: 400: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7480                           
  7481                           ;incstack = 0
  7482  003A1A  0E00               	movlw	low _lcd_display_array
  7483  003A1C  6E24               	movwf	memset@p1,c
  7484  003A1E  0E01               	movlw	high _lcd_display_array
  7485  003A20  6E25               	movwf	memset@p1+1,c
  7486  003A22  0E00               	movlw	0
  7487  003A24  6E27               	movwf	memset@c+1,c
  7488  003A26  0E20               	movlw	32
  7489  003A28  6E26               	movwf	memset@c,c
  7490  003A2A  0E00               	movlw	0
  7491  003A2C  6E29               	movwf	memset@n+1,c
  7492  003A2E  0E50               	movlw	80
  7493  003A30  6E28               	movwf	memset@n,c
  7494  003A32  EC63  F01B         	call	_memset	;wreg free
  7495                           
  7496                           ;clcd.c: 401: reset_display_structure_count();
  7497  003A36  EC9B  F01D         	call	_reset_display_structure_count	;wreg free
  7498  003A3A  0012               	return		;funcret
  7499  003A3C                     __end_of_clear_display_array:
  7500                           	opt stack 0
  7501                           tblptru	equ	0xFF8
  7502                           tblptrh	equ	0xFF7
  7503                           tblptrl	equ	0xFF6
  7504                           tablat	equ	0xFF5
  7505                           prodh	equ	0xFF4
  7506                           prodl	equ	0xFF3
  7507                           intcon	equ	0xFF2
  7508                           postinc0	equ	0xFEE
  7509                           wreg	equ	0xFE8
  7510                           indf1	equ	0xFE7
  7511                           postdec1	equ	0xFE5
  7512                           fsr1h	equ	0xFE2
  7513                           fsr1l	equ	0xFE1
  7514                           indf2	equ	0xFDF
  7515                           postinc2	equ	0xFDE
  7516                           fsr2h	equ	0xFDA
  7517                           fsr2l	equ	0xFD9
  7518                           status	equ	0xFD8
  7519                           
  7520 ;; *************** function _reset_display_structure_count *****************
  7521 ;; Defined at:
  7522 ;;		line 394 in file "clcd.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;		None
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;		None
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  1    wreg      void 
  7529 ;; Registers used:
  7530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;Total ram usage:        0 bytes
  7541 ;; Hardware stack levels used:    1
  7542 ;; Hardware stack levels required when called:    7
  7543 ;; This function calls:
  7544 ;;		_clear_display_structure
  7545 ;; This function is called by:
  7546 ;;		_reset_clcd
  7547 ;;		_clear_display_array
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           	psect	text28
  7552  003B36                     __ptext28:
  7553                           	opt stack 0
  7554  003B36                     _reset_display_structure_count:
  7555                           	opt stack 18
  7556                           
  7557                           ;clcd.c: 395: display_struct_count = 0;
  7558                           
  7559                           ;incstack = 0
  7560  003B36  0E00               	movlw	0
  7561  003B38  0100               	movlb	0	; () banked
  7562  003B3A  6F75               	movwf	(_display_struct_count+1)& (0+255),b
  7563  003B3C  0E00               	movlw	0
  7564  003B3E  6F74               	movwf	_display_struct_count& (0+255),b
  7565                           
  7566                           ; BSR set to: 0
  7567                           ;clcd.c: 396: clear_display_structure();
  7568  003B40  EC2E  F01D         	call	_clear_display_structure	;wreg free
  7569  003B44  0012               	return		;funcret
  7570  003B46                     __end_of_reset_display_structure_count:
  7571                           	opt stack 0
  7572                           tblptru	equ	0xFF8
  7573                           tblptrh	equ	0xFF7
  7574                           tblptrl	equ	0xFF6
  7575                           tablat	equ	0xFF5
  7576                           prodh	equ	0xFF4
  7577                           prodl	equ	0xFF3
  7578                           intcon	equ	0xFF2
  7579                           postinc0	equ	0xFEE
  7580                           wreg	equ	0xFE8
  7581                           indf1	equ	0xFE7
  7582                           postdec1	equ	0xFE5
  7583                           fsr1h	equ	0xFE2
  7584                           fsr1l	equ	0xFE1
  7585                           indf2	equ	0xFDF
  7586                           postinc2	equ	0xFDE
  7587                           fsr2h	equ	0xFDA
  7588                           fsr2l	equ	0xFD9
  7589                           status	equ	0xFD8
  7590                           
  7591 ;; *************** function _clear_display_structure *****************
  7592 ;; Defined at:
  7593 ;;		line 390 in file "clcd.c"
  7594 ;; Parameters:    Size  Location     Type
  7595 ;;		None
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;		None
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  1    wreg      void 
  7600 ;; Registers used:
  7601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;Total ram usage:        0 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    6
  7614 ;; This function calls:
  7615 ;;		_memset
  7616 ;; This function is called by:
  7617 ;;		_reset_display_structure_count
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           	psect	text29
  7622  003A5C                     __ptext29:
  7623                           	opt stack 0
  7624  003A5C                     _clear_display_structure:
  7625                           	opt stack 18
  7626                           
  7627                           ;clcd.c: 391: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details
      +                          ));
  7628                           
  7629                           ;incstack = 0
  7630  003A5C  0E96               	movlw	low _clcd_display_string_details
  7631  003A5E  6E24               	movwf	memset@p1,c
  7632  003A60  0E02               	movlw	high _clcd_display_string_details
  7633  003A62  6E25               	movwf	memset@p1+1,c
  7634  003A64  0E00               	movlw	0
  7635  003A66  6E27               	movwf	memset@c+1,c
  7636  003A68  0E00               	movlw	0
  7637  003A6A  6E26               	movwf	memset@c,c
  7638  003A6C  0E04               	movlw	4
  7639  003A6E  6E29               	movwf	memset@n+1,c
  7640  003A70  0E38               	movlw	56
  7641  003A72  6E28               	movwf	memset@n,c
  7642  003A74  EC63  F01B         	call	_memset	;wreg free
  7643  003A78  0012               	return		;funcret
  7644  003A7A                     __end_of_clear_display_structure:
  7645                           	opt stack 0
  7646                           tblptru	equ	0xFF8
  7647                           tblptrh	equ	0xFF7
  7648                           tblptrl	equ	0xFF6
  7649                           tablat	equ	0xFF5
  7650                           prodh	equ	0xFF4
  7651                           prodl	equ	0xFF3
  7652                           intcon	equ	0xFF2
  7653                           postinc0	equ	0xFEE
  7654                           wreg	equ	0xFE8
  7655                           indf1	equ	0xFE7
  7656                           postdec1	equ	0xFE5
  7657                           fsr1h	equ	0xFE2
  7658                           fsr1l	equ	0xFE1
  7659                           indf2	equ	0xFDF
  7660                           postinc2	equ	0xFDE
  7661                           fsr2h	equ	0xFDA
  7662                           fsr2l	equ	0xFD9
  7663                           status	equ	0xFD8
  7664                           
  7665 ;; *************** function _clcd_display_string_config *****************
  7666 ;; Defined at:
  7667 ;;		line 216 in file "clcd.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;		None
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;		None
  7672 ;; Return value:  Size  Location     Type
  7673 ;;                  1    wreg      void 
  7674 ;; Registers used:
  7675 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;Total ram usage:        0 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; Hardware stack levels required when called:    8
  7688 ;; This function calls:
  7689 ;;		_memcpy
  7690 ;;		_memset
  7691 ;;		_printf
  7692 ;;		_write_str
  7693 ;; This function is called by:
  7694 ;;		_init_CLCD_config
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           	psect	text30
  7699  0033AA                     __ptext30:
  7700                           	opt stack 0
  7701  0033AA                     _clcd_display_string_config:
  7702                           	opt stack 18
  7703                           
  7704                           ;clcd.c: 217: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7705                           
  7706                           ;incstack = 0
  7707  0033AA  0E00               	movlw	low _lcd_display_array
  7708  0033AC  6E24               	movwf	memset@p1,c
  7709  0033AE  0E01               	movlw	high _lcd_display_array
  7710  0033B0  6E25               	movwf	memset@p1+1,c
  7711  0033B2  0E00               	movlw	0
  7712  0033B4  6E27               	movwf	memset@c+1,c
  7713  0033B6  0E20               	movlw	32
  7714  0033B8  6E26               	movwf	memset@c,c
  7715  0033BA  0E00               	movlw	0
  7716  0033BC  6E29               	movwf	memset@n+1,c
  7717  0033BE  0E50               	movlw	80
  7718  0033C0  6E28               	movwf	memset@n,c
  7719  0033C2  EC63  F01B         	call	_memset	;wreg free
  7720                           
  7721                           ;clcd.c: 218: printf("sizeof(str) = %d\r\n", sizeof (str));
  7722  0033C6  0EE3               	movlw	low STR_13
  7723  0033C8  6E1E               	movwf	printf@f,c
  7724  0033CA  0EFD               	movlw	high STR_13
  7725  0033CC  6E1F               	movwf	printf@f+1,c
  7726  0033CE  0E00               	movlw	0
  7727  0033D0  6E21               	movwf	?_printf+3,c
  7728  0033D2  0E0D               	movlw	13
  7729  0033D4  6E20               	movwf	?_printf+2,c
  7730  0033D6  EC48  F012         	call	_printf	;wreg free
  7731                           
  7732                           ;clcd.c: 219: memcpy(lcd_display_array[0], str, sizeof (str));
  7733  0033DA  0E00               	movlw	low _lcd_display_array
  7734  0033DC  6E10               	movwf	memcpy@d1,c
  7735  0033DE  0E01               	movlw	high _lcd_display_array
  7736  0033E0  6E11               	movwf	memcpy@d1+1,c
  7737  0033E2  0EEB               	movlw	low _str
  7738  0033E4  6E12               	movwf	memcpy@s1,c
  7739  0033E6  0E00               	movlw	high _str
  7740  0033E8  6E13               	movwf	memcpy@s1+1,c
  7741  0033EA  0E00               	movlw	0
  7742  0033EC  6E15               	movwf	memcpy@n+1,c
  7743  0033EE  0E0D               	movlw	13
  7744  0033F0  6E14               	movwf	memcpy@n,c
  7745  0033F2  ECC9  F01B         	call	_memcpy	;wreg free
  7746                           
  7747                           ;clcd.c: 220: write_str(lcd_display_array[0]);
  7748  0033F6  0E00               	movlw	low _lcd_display_array
  7749  0033F8  6E18               	movwf	write_str@str,c
  7750  0033FA  0E01               	movlw	high _lcd_display_array
  7751  0033FC  6E19               	movwf	write_str@str+1,c
  7752  0033FE  EC08  F01C         	call	_write_str	;wreg free
  7753  003402  0012               	return		;funcret
  7754  003404                     __end_of_clcd_display_string_config:
  7755                           	opt stack 0
  7756                           tblptru	equ	0xFF8
  7757                           tblptrh	equ	0xFF7
  7758                           tblptrl	equ	0xFF6
  7759                           tablat	equ	0xFF5
  7760                           prodh	equ	0xFF4
  7761                           prodl	equ	0xFF3
  7762                           intcon	equ	0xFF2
  7763                           postinc0	equ	0xFEE
  7764                           wreg	equ	0xFE8
  7765                           indf1	equ	0xFE7
  7766                           postdec1	equ	0xFE5
  7767                           fsr1h	equ	0xFE2
  7768                           fsr1l	equ	0xFE1
  7769                           indf2	equ	0xFDF
  7770                           postinc2	equ	0xFDE
  7771                           fsr2h	equ	0xFDA
  7772                           fsr2l	equ	0xFD9
  7773                           status	equ	0xFD8
  7774                           
  7775 ;; *************** function _write_str *****************
  7776 ;; Defined at:
  7777 ;;		line 312 in file "clcd.c"
  7778 ;; Parameters:    Size  Location     Type
  7779 ;;  str             2   23[COMRAM] PTR const unsigned char 
  7780 ;;		 -> lcd_display_array(80), 
  7781 ;; Auto vars:     Size  Location     Type
  7782 ;;  i               1   25[COMRAM] unsigned char 
  7783 ;; Return value:  Size  Location     Type
  7784 ;;                  1    wreg      void 
  7785 ;; Registers used:
  7786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7787 ;; Tracked objects:
  7788 ;;		On entry : 0/0
  7789 ;;		On exit  : 0/0
  7790 ;;		Unchanged: 0/0
  7791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7793 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7795 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7796 ;;Total ram usage:        3 bytes
  7797 ;; Hardware stack levels used:    1
  7798 ;; Hardware stack levels required when called:    7
  7799 ;; This function calls:
  7800 ;;		_write_lcd_data
  7801 ;; This function is called by:
  7802 ;;		_clcd_display_string_config
  7803 ;;		_display_text
  7804 ;;		_put_string
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           	psect	text31
  7809  003810                     __ptext31:
  7810                           	opt stack 0
  7811  003810                     _write_str:
  7812                           	opt stack 21
  7813                           
  7814                           ;clcd.c: 314: unsigned char i = 0;
  7815                           
  7816                           ;incstack = 0
  7817  003810  0E00               	movlw	0
  7818  003812  6E1A               	movwf	write_str@i,c
  7819                           
  7820                           ;clcd.c: 315: while (i < clcd_config_data.clcd_max_col) {
  7821  003814  D015               	goto	l6170
  7822  003816                     l6160:
  7823                           
  7824                           ;clcd.c: 316: if(*str != (0))
  7825  003816  C018  FFD9         	movff	write_str@str,fsr2l
  7826  00381A  C019  FFDA         	movff	write_str@str+1,fsr2h
  7827  00381E  50DF               	movf	indf2,w,c
  7828  003820  B4D8               	btfsc	status,2,c
  7829  003822  D00A               	goto	l6166
  7830                           
  7831                           ;clcd.c: 317: write_lcd_data(*str++);
  7832  003824  C018  FFD9         	movff	write_str@str,fsr2l
  7833  003828  C019  FFDA         	movff	write_str@str+1,fsr2h
  7834  00382C  50DF               	movf	indf2,w,c
  7835  00382E  EC78  F01D         	call	_write_lcd_data
  7836  003832  4A18               	infsnz	write_str@str,f,c
  7837  003834  2A19               	incf	write_str@str+1,f,c
  7838  003836  D003               	goto	l6168
  7839  003838                     l6166:
  7840                           
  7841                           ;clcd.c: 318: else
  7842                           ;clcd.c: 319: write_lcd_data(' ');
  7843  003838  0E20               	movlw	32
  7844  00383A  EC78  F01D         	call	_write_lcd_data
  7845  00383E                     l6168:
  7846                           
  7847                           ;clcd.c: 321: i++;
  7848  00383E  2A1A               	incf	write_str@i,f,c
  7849  003840                     l6170:
  7850  003840  504B               	movf	_clcd_config_data+2,w,c
  7851  003842  5C1A               	subwf	write_str@i,w,c
  7852  003844  B0D8               	btfsc	status,0,c
  7853  003846  0012               	return	
  7854  003848  D7E6               	goto	l6160
  7855  00384A                     __end_of_write_str:
  7856                           	opt stack 0
  7857                           tblptru	equ	0xFF8
  7858                           tblptrh	equ	0xFF7
  7859                           tblptrl	equ	0xFF6
  7860                           tablat	equ	0xFF5
  7861                           prodh	equ	0xFF4
  7862                           prodl	equ	0xFF3
  7863                           intcon	equ	0xFF2
  7864                           postinc0	equ	0xFEE
  7865                           wreg	equ	0xFE8
  7866                           indf1	equ	0xFE7
  7867                           postdec1	equ	0xFE5
  7868                           fsr1h	equ	0xFE2
  7869                           fsr1l	equ	0xFE1
  7870                           indf2	equ	0xFDF
  7871                           postinc2	equ	0xFDE
  7872                           fsr2h	equ	0xFDA
  7873                           fsr2l	equ	0xFD9
  7874                           status	equ	0xFD8
  7875                           
  7876 ;; *************** function _write_lcd_data *****************
  7877 ;; Defined at:
  7878 ;;		line 305 in file "clcd.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  data            1    wreg     unsigned char 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  data            1   22[COMRAM] unsigned char 
  7883 ;; Return value:  Size  Location     Type
  7884 ;;                  1    wreg      void 
  7885 ;; Registers used:
  7886 ;;		wreg, status,2, status,0, cstack
  7887 ;; Tracked objects:
  7888 ;;		On entry : 0/0
  7889 ;;		On exit  : 0/0
  7890 ;;		Unchanged: 0/0
  7891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7893 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7896 ;;Total ram usage:        1 bytes
  7897 ;; Hardware stack levels used:    1
  7898 ;; Hardware stack levels required when called:    6
  7899 ;; This function calls:
  7900 ;;		_delay
  7901 ;; This function is called by:
  7902 ;;		_write_str
  7903 ;;		_put_char
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           	psect	text32
  7908  003AF0                     __ptext32:
  7909                           	opt stack 0
  7910  003AF0                     _write_lcd_data:
  7911                           	opt stack 21
  7912                           
  7913                           ;incstack = 0
  7914                           ;write_lcd_data@data stored from wreg
  7915  003AF0  6E17               	movwf	write_lcd_data@data,c
  7916                           
  7917                           ;clcd.c: 306: PORTAbits.RA2 = 1;
  7918  003AF2  8480               	bsf	3968,2,c	;volatile
  7919                           
  7920                           ;clcd.c: 307: PORTAbits.RA1 = 0;
  7921  003AF4  9280               	bcf	3968,1,c	;volatile
  7922                           
  7923                           ;clcd.c: 308: PORTD = data;
  7924  003AF6  C017  FF83         	movff	write_lcd_data@data,3971	;volatile
  7925                           
  7926                           ;clcd.c: 309: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7927  003AFA  8080               	bsf	3968,0,c	;volatile
  7928  003AFC  0E00               	movlw	0
  7929  003AFE  6E11               	movwf	delay@delay+1,c
  7930  003B00  0E01               	movlw	1
  7931  003B02  6E10               	movwf	delay@delay,c
  7932  003B04  ECF6  F01A         	call	_delay	;wreg free
  7933  003B08  9080               	bcf	3968,0,c	;volatile
  7934  003B0A  0012               	return		;funcret
  7935  003B0C                     __end_of_write_lcd_data:
  7936                           	opt stack 0
  7937                           tblptru	equ	0xFF8
  7938                           tblptrh	equ	0xFF7
  7939                           tblptrl	equ	0xFF6
  7940                           tablat	equ	0xFF5
  7941                           prodh	equ	0xFF4
  7942                           prodl	equ	0xFF3
  7943                           intcon	equ	0xFF2
  7944                           postinc0	equ	0xFEE
  7945                           wreg	equ	0xFE8
  7946                           indf1	equ	0xFE7
  7947                           postdec1	equ	0xFE5
  7948                           fsr1h	equ	0xFE2
  7949                           fsr1l	equ	0xFE1
  7950                           indf2	equ	0xFDF
  7951                           postinc2	equ	0xFDE
  7952                           fsr2h	equ	0xFDA
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function _delay *****************
  7957 ;; Defined at:
  7958 ;;		line 5 in file "delay.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;  delay           2   15[COMRAM] int 
  7961 ;; Auto vars:     Size  Location     Type
  7962 ;;  i               2   20[COMRAM] int 
  7963 ;;  val             2   18[COMRAM] int 
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  1    wreg      void 
  7966 ;; Registers used:
  7967 ;;		wreg, status,2, status,0
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7973 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;Total ram usage:        7 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; Hardware stack levels required when called:    5
  7980 ;; This function calls:
  7981 ;;		Nothing
  7982 ;; This function is called by:
  7983 ;;		_write_lcd_cmd
  7984 ;;		_write_lcd_data
  7985 ;;		_is_busy
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           	psect	text33
  7990  0035EC                     __ptext33:
  7991                           	opt stack 0
  7992  0035EC                     _delay:
  7993                           	opt stack 21
  7994                           
  7995                           ;delay.c: 7: int val = 0, i;
  7996                           
  7997                           ;incstack = 0
  7998  0035EC  0E00               	movlw	0
  7999  0035EE  6E14               	movwf	delay@val+1,c
  8000  0035F0  0E00               	movlw	0
  8001  0035F2  6E13               	movwf	delay@val,c
  8002                           
  8003                           ;delay.c: 8: for (val = 0; val < delay; val++) {
  8004  0035F4  0E00               	movlw	0
  8005  0035F6  6E14               	movwf	delay@val+1,c
  8006  0035F8  0E00               	movlw	0
  8007  0035FA  6E13               	movwf	delay@val,c
  8008  0035FC  D011               	goto	l5984
  8009  0035FE                     l5972:
  8010                           
  8011                           ;delay.c: 9: for(i=0; i<350; i++)
  8012  0035FE  0E00               	movlw	0
  8013  003600  6E16               	movwf	delay@i+1,c
  8014  003602  0E00               	movlw	0
  8015  003604  6E15               	movwf	delay@i,c
  8016  003606                     l5974:
  8017  003606  BE16               	btfsc	delay@i+1,7,c
  8018  003608  D006               	goto	l5978
  8019  00360A  0E5E               	movlw	94
  8020  00360C  5C15               	subwf	delay@i,w,c
  8021  00360E  0E01               	movlw	1
  8022  003610  5816               	subwfb	delay@i+1,w,c
  8023  003612  B0D8               	btfsc	status,0,c
  8024  003614  D003               	goto	l5982
  8025  003616                     l5978:
  8026                           
  8027                           ;delay.c: 10: {
  8028  003616  4A15               	infsnz	delay@i,f,c
  8029  003618  2A16               	incf	delay@i+1,f,c
  8030  00361A  D7F5               	goto	l5974
  8031  00361C                     l5982:
  8032  00361C  4A13               	infsnz	delay@val,f,c
  8033  00361E  2A14               	incf	delay@val+1,f,c
  8034  003620                     l5984:
  8035  003620  5010               	movf	delay@delay,w,c
  8036  003622  5C13               	subwf	delay@val,w,c
  8037  003624  5014               	movf	delay@val+1,w,c
  8038  003626  0A80               	xorlw	128
  8039  003628  6E12               	movwf	??_delay& (0+255),c
  8040  00362A  5011               	movf	delay@delay+1,w,c
  8041  00362C  0A80               	xorlw	128
  8042  00362E  5812               	subwfb	??_delay& (0+255),w,c
  8043  003630  B0D8               	btfsc	status,0,c
  8044  003632  0012               	return	
  8045  003634  D7E4               	goto	l5972
  8046  003636                     __end_of_delay:
  8047                           	opt stack 0
  8048                           tblptru	equ	0xFF8
  8049                           tblptrh	equ	0xFF7
  8050                           tblptrl	equ	0xFF6
  8051                           tablat	equ	0xFF5
  8052                           prodh	equ	0xFF4
  8053                           prodl	equ	0xFF3
  8054                           intcon	equ	0xFF2
  8055                           postinc0	equ	0xFEE
  8056                           wreg	equ	0xFE8
  8057                           indf1	equ	0xFE7
  8058                           postdec1	equ	0xFE5
  8059                           fsr1h	equ	0xFE2
  8060                           fsr1l	equ	0xFE1
  8061                           indf2	equ	0xFDF
  8062                           postinc2	equ	0xFDE
  8063                           fsr2h	equ	0xFDA
  8064                           fsr2l	equ	0xFD9
  8065                           status	equ	0xFD8
  8066                           
  8067 ;; *************** function _memcpy *****************
  8068 ;; Defined at:
  8069 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memcpy.c"
  8070 ;; Parameters:    Size  Location     Type
  8071 ;;  d1              2   15[COMRAM] PTR void 
  8072 ;;		 -> lcd_display_array(80), 
  8073 ;;  s1              2   17[COMRAM] PTR const void 
  8074 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1080), 
  8075 ;;  n               2   19[COMRAM] unsigned int 
  8076 ;; Auto vars:     Size  Location     Type
  8077 ;;  s               2   23[COMRAM] PTR const unsigned char 
  8078 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1080), 
  8079 ;;  d               2   21[COMRAM] PTR unsigned char 
  8080 ;;		 -> lcd_display_array(80), 
  8081 ;; Return value:  Size  Location     Type
  8082 ;;                  2   15[COMRAM] PTR void 
  8083 ;; Registers used:
  8084 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8090 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8091 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8093 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8094 ;;Total ram usage:       10 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    5
  8097 ;; This function calls:
  8098 ;;		Nothing
  8099 ;; This function is called by:
  8100 ;;		_clcd_display_string_config
  8101 ;;		_scroll_left_to_right
  8102 ;;		_scroll_right_to_left
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           	psect	text34
  8107  003792                     __ptext34:
  8108                           	opt stack 0
  8109  003792                     _memcpy:
  8110                           	opt stack 23
  8111                           
  8112                           ;incstack = 0
  8113  003792  C012  F018         	movff	memcpy@s1,memcpy@s
  8114  003796  C013  F019         	movff	memcpy@s1+1,memcpy@s+1
  8115  00379A  C010  F016         	movff	memcpy@d1,memcpy@d
  8116  00379E  C011  F017         	movff	memcpy@d1+1,memcpy@d+1
  8117  0037A2  D00E               	goto	l6156
  8118  0037A4                     l6150:
  8119  0037A4  C018  FFD9         	movff	memcpy@s,fsr2l
  8120  0037A8  C019  FFDA         	movff	memcpy@s+1,fsr2h
  8121  0037AC  C016  FFE1         	movff	memcpy@d,fsr1l
  8122  0037B0  C017  FFE2         	movff	memcpy@d+1,fsr1h
  8123  0037B4  CFDF FFE7          	movff	indf2,indf1
  8124  0037B8  4A18               	infsnz	memcpy@s,f,c
  8125  0037BA  2A19               	incf	memcpy@s+1,f,c
  8126  0037BC  4A16               	infsnz	memcpy@d,f,c
  8127  0037BE  2A17               	incf	memcpy@d+1,f,c
  8128  0037C0                     l6156:
  8129  0037C0  0614               	decf	memcpy@n,f,c
  8130  0037C2  A0D8               	btfss	status,0,c
  8131  0037C4  0615               	decf	memcpy@n+1,f,c
  8132  0037C6  2814               	incf	memcpy@n,w,c
  8133  0037C8  E1ED               	bnz	l6150
  8134  0037CA  2815               	incf	memcpy@n+1,w,c
  8135  0037CC  B4D8               	btfsc	status,2,c
  8136  0037CE  0012               	return	
  8137  0037D0  D7E9               	goto	l6150
  8138  0037D2                     __end_of_memcpy:
  8139                           	opt stack 0
  8140                           tblptru	equ	0xFF8
  8141                           tblptrh	equ	0xFF7
  8142                           tblptrl	equ	0xFF6
  8143                           tablat	equ	0xFF5
  8144                           prodh	equ	0xFF4
  8145                           prodl	equ	0xFF3
  8146                           intcon	equ	0xFF2
  8147                           postinc0	equ	0xFEE
  8148                           wreg	equ	0xFE8
  8149                           indf1	equ	0xFE7
  8150                           postdec1	equ	0xFE5
  8151                           fsr1h	equ	0xFE2
  8152                           fsr1l	equ	0xFE1
  8153                           indf2	equ	0xFDF
  8154                           postinc2	equ	0xFDE
  8155                           fsr2h	equ	0xFDA
  8156                           fsr2l	equ	0xFD9
  8157                           status	equ	0xFD8
  8158                           
  8159 ;; *************** function __delay_MS *****************
  8160 ;; Defined at:
  8161 ;;		line 29 in file "delay.c"
  8162 ;; Parameters:    Size  Location     Type
  8163 ;;  delay           2   15[COMRAM] int 
  8164 ;; Auto vars:     Size  Location     Type
  8165 ;;  val             2   18[COMRAM] int 
  8166 ;; Return value:  Size  Location     Type
  8167 ;;                  1    wreg      void 
  8168 ;; Registers used:
  8169 ;;		wreg, status,2, status,0, cstack
  8170 ;; Tracked objects:
  8171 ;;		On entry : 0/0
  8172 ;;		On exit  : 0/0
  8173 ;;		Unchanged: 0/0
  8174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8175 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8177 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8179 ;;Total ram usage:        5 bytes
  8180 ;; Hardware stack levels used:    1
  8181 ;; Hardware stack levels required when called:    6
  8182 ;; This function calls:
  8183 ;;		_TMR1_HasOverflowOccured
  8184 ;;		_TMR1_Reload
  8185 ;;		_TMR1_StartTimer
  8186 ;;		_TMR1_StopTimer
  8187 ;; This function is called by:
  8188 ;;		_init_CLCD_config
  8189 ;;		_main
  8190 ;;		_put_char
  8191 ;; This function uses a non-reentrant model
  8192 ;;
  8193                           
  8194                           	psect	text35
  8195  00370C                     __ptext35:
  8196                           	opt stack 0
  8197  00370C                     __delay_MS:
  8198                           	opt stack 20
  8199                           
  8200                           ;delay.c: 30: int val = 0;
  8201                           
  8202                           ;incstack = 0
  8203  00370C  0E00               	movlw	0
  8204  00370E  6E14               	movwf	__delay_MS@val+1,c
  8205  003710  0E00               	movlw	0
  8206  003712  6E13               	movwf	__delay_MS@val,c
  8207                           
  8208                           ;delay.c: 31: for (val = 0; val < delay; val++) {
  8209  003714  0E00               	movlw	0
  8210  003716  6E14               	movwf	__delay_MS@val+1,c
  8211  003718  0E00               	movlw	0
  8212  00371A  6E13               	movwf	__delay_MS@val,c
  8213  00371C  D00E               	goto	l6212
  8214  00371E                     l6200:
  8215                           
  8216                           ;delay.c: 32: TMR1_Reload();
  8217  00371E  ECDC  F01D         	call	_TMR1_Reload	;wreg free
  8218                           
  8219                           ;delay.c: 33: TMR1_StartTimer();
  8220  003722  EC13  F01E         	call	_TMR1_StartTimer	;wreg free
  8221  003726                     l6204:
  8222  003726  ECE2  F01D         	call	_TMR1_HasOverflowOccured	;wreg free
  8223  00372A  0900               	iorlw	0
  8224  00372C  B4D8               	btfsc	status,2,c
  8225  00372E  D7FB               	goto	l6204
  8226                           
  8227                           ;delay.c: 35: TMR1_StopTimer();
  8228  003730  EC0F  F01E         	call	_TMR1_StopTimer	;wreg free
  8229                           
  8230                           ;delay.c: 36: PIR1bits.TMR1IF = 0;
  8231  003734  909E               	bcf	3998,0,c	;volatile
  8232  003736  4A13               	infsnz	__delay_MS@val,f,c
  8233  003738  2A14               	incf	__delay_MS@val+1,f,c
  8234  00373A                     l6212:
  8235  00373A  5010               	movf	__delay_MS@delay,w,c
  8236  00373C  5C13               	subwf	__delay_MS@val,w,c
  8237  00373E  5014               	movf	__delay_MS@val+1,w,c
  8238  003740  0A80               	xorlw	128
  8239  003742  6E12               	movwf	??__delay_MS& (0+255),c
  8240  003744  5011               	movf	__delay_MS@delay+1,w,c
  8241  003746  0A80               	xorlw	128
  8242  003748  5812               	subwfb	??__delay_MS& (0+255),w,c
  8243  00374A  B0D8               	btfsc	status,0,c
  8244  00374C  0012               	return	
  8245  00374E  D7E7               	goto	l6200
  8246  003750                     __end_of__delay_MS:
  8247                           	opt stack 0
  8248                           tblptru	equ	0xFF8
  8249                           tblptrh	equ	0xFF7
  8250                           tblptrl	equ	0xFF6
  8251                           tablat	equ	0xFF5
  8252                           prodh	equ	0xFF4
  8253                           prodl	equ	0xFF3
  8254                           intcon	equ	0xFF2
  8255                           postinc0	equ	0xFEE
  8256                           wreg	equ	0xFE8
  8257                           indf1	equ	0xFE7
  8258                           postdec1	equ	0xFE5
  8259                           fsr1h	equ	0xFE2
  8260                           fsr1l	equ	0xFE1
  8261                           indf2	equ	0xFDF
  8262                           postinc2	equ	0xFDE
  8263                           fsr2h	equ	0xFDA
  8264                           fsr2l	equ	0xFD9
  8265                           status	equ	0xFD8
  8266                           
  8267 ;; *************** function _TMR1_StopTimer *****************
  8268 ;; Defined at:
  8269 ;;		line 94 in file "mcc_generated_files/tmr1.c"
  8270 ;; Parameters:    Size  Location     Type
  8271 ;;		None
  8272 ;; Auto vars:     Size  Location     Type
  8273 ;;		None
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  1    wreg      void 
  8276 ;; Registers used:
  8277 ;;		None
  8278 ;; Tracked objects:
  8279 ;;		On entry : 0/0
  8280 ;;		On exit  : 0/0
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8287 ;;Total ram usage:        0 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:    5
  8290 ;; This function calls:
  8291 ;;		Nothing
  8292 ;; This function is called by:
  8293 ;;		__delay_MS
  8294 ;;		_main
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text36
  8299  003C1E                     __ptext36:
  8300                           	opt stack 0
  8301  003C1E                     _TMR1_StopTimer:
  8302                           	opt stack 20
  8303                           
  8304                           ;tmr1.c: 97: T1CONbits.TMR1ON = 0;
  8305                           
  8306                           ;incstack = 0
  8307  003C1E  90CD               	bcf	4045,0,c	;volatile
  8308  003C20  0012               	return		;funcret
  8309  003C22                     __end_of_TMR1_StopTimer:
  8310                           	opt stack 0
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           prodh	equ	0xFF4
  8316                           prodl	equ	0xFF3
  8317                           intcon	equ	0xFF2
  8318                           postinc0	equ	0xFEE
  8319                           wreg	equ	0xFE8
  8320                           indf1	equ	0xFE7
  8321                           postdec1	equ	0xFE5
  8322                           fsr1h	equ	0xFE2
  8323                           fsr1l	equ	0xFE1
  8324                           indf2	equ	0xFDF
  8325                           postinc2	equ	0xFDE
  8326                           fsr2h	equ	0xFDA
  8327                           fsr2l	equ	0xFD9
  8328                           status	equ	0xFD8
  8329                           
  8330 ;; *************** function _TMR1_Reload *****************
  8331 ;; Defined at:
  8332 ;;		line 136 in file "mcc_generated_files/tmr1.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;		None
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;		None
  8337 ;; Return value:  Size  Location     Type
  8338 ;;                  1    wreg      void 
  8339 ;; Registers used:
  8340 ;;		wreg, status,2
  8341 ;; Tracked objects:
  8342 ;;		On entry : 0/0
  8343 ;;		On exit  : 0/0
  8344 ;;		Unchanged: 0/0
  8345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;Total ram usage:        0 bytes
  8351 ;; Hardware stack levels used:    1
  8352 ;; Hardware stack levels required when called:    5
  8353 ;; This function calls:
  8354 ;;		Nothing
  8355 ;; This function is called by:
  8356 ;;		__delay_MS
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           	psect	text37
  8361  003BB8                     __ptext37:
  8362                           	opt stack 0
  8363  003BB8                     _TMR1_Reload:
  8364                           	opt stack 20
  8365                           
  8366                           ;tmr1.c: 139: TMR1H = (timer1ReloadVal >> 8);
  8367                           
  8368                           ;incstack = 0
  8369  003BB8  0100               	movlb	0	; () banked
  8370  003BBA  51FB               	movf	(_timer1ReloadVal+1)& (0+255),w,b	;volatile
  8371  003BBC  6ECF               	movwf	4047,c	;volatile
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;tmr1.c: 140: TMR1L = (uint8_t) timer1ReloadVal;
  8375  003BBE  C0FA  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8376                           
  8377                           ; BSR set to: 0
  8378  003BC2  0012               	return		;funcret
  8379  003BC4                     __end_of_TMR1_Reload:
  8380                           	opt stack 0
  8381                           tblptru	equ	0xFF8
  8382                           tblptrh	equ	0xFF7
  8383                           tblptrl	equ	0xFF6
  8384                           tablat	equ	0xFF5
  8385                           prodh	equ	0xFF4
  8386                           prodl	equ	0xFF3
  8387                           intcon	equ	0xFF2
  8388                           postinc0	equ	0xFEE
  8389                           wreg	equ	0xFE8
  8390                           indf1	equ	0xFE7
  8391                           postdec1	equ	0xFE5
  8392                           fsr1h	equ	0xFE2
  8393                           fsr1l	equ	0xFE1
  8394                           indf2	equ	0xFDF
  8395                           postinc2	equ	0xFDE
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function _TMR1_HasOverflowOccured *****************
  8401 ;; Defined at:
  8402 ;;		line 153 in file "mcc_generated_files/tmr1.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;		None
  8407 ;; Return value:  Size  Location     Type
  8408 ;;                  1    wreg      unsigned char 
  8409 ;; Registers used:
  8410 ;;		wreg
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;Total ram usage:        0 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    5
  8423 ;; This function calls:
  8424 ;;		Nothing
  8425 ;; This function is called by:
  8426 ;;		__delay_MS
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text38
  8431  003BC4                     __ptext38:
  8432                           	opt stack 0
  8433  003BC4                     _TMR1_HasOverflowOccured:
  8434                           	opt stack 20
  8435                           
  8436                           ;tmr1.c: 156: return(PIR1bits.TMR1IF);
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;incstack = 0
  8440  003BC4  A09E               	btfss	3998,0,c	;volatile
  8441  003BC6  D002               	goto	u5820
  8442  003BC8  0E01               	movlw	1
  8443  003BCA  0012               	return	
  8444  003BCC                     u5820:
  8445  003BCC  0E00               	movlw	0
  8446  003BCE  0012               	return	
  8447  003BD0                     __end_of_TMR1_HasOverflowOccured:
  8448                           	opt stack 0
  8449                           tblptru	equ	0xFF8
  8450                           tblptrh	equ	0xFF7
  8451                           tblptrl	equ	0xFF6
  8452                           tablat	equ	0xFF5
  8453                           prodh	equ	0xFF4
  8454                           prodl	equ	0xFF3
  8455                           intcon	equ	0xFF2
  8456                           postinc0	equ	0xFEE
  8457                           wreg	equ	0xFE8
  8458                           indf1	equ	0xFE7
  8459                           postdec1	equ	0xFE5
  8460                           fsr1h	equ	0xFE2
  8461                           fsr1l	equ	0xFE1
  8462                           indf2	equ	0xFDF
  8463                           postinc2	equ	0xFDE
  8464                           fsr2h	equ	0xFDA
  8465                           fsr2l	equ	0xFD9
  8466                           status	equ	0xFD8
  8467                           
  8468 ;; *************** function ___awdiv *****************
  8469 ;; Defined at:
  8470 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;  dividend        2   15[COMRAM] int 
  8473 ;;  divisor         2   17[COMRAM] int 
  8474 ;; Auto vars:     Size  Location     Type
  8475 ;;  quotient        2   21[COMRAM] int 
  8476 ;;  sign            1   20[COMRAM] unsigned char 
  8477 ;;  counter         1   19[COMRAM] unsigned char 
  8478 ;; Return value:  Size  Location     Type
  8479 ;;                  2   15[COMRAM] int 
  8480 ;; Registers used:
  8481 ;;		wreg, status,2, status,0
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8491 ;;Total ram usage:        8 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; Hardware stack levels required when called:    5
  8494 ;; This function calls:
  8495 ;;		Nothing
  8496 ;; This function is called by:
  8497 ;;		_init_clcd_cusotom_lcd
  8498 ;;		_display_string
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           	psect	text39
  8503  00310C                     __ptext39:
  8504                           	opt stack 0
  8505  00310C                     ___awdiv:
  8506                           	opt stack 22
  8507                           
  8508                           ;incstack = 0
  8509  00310C  0E00               	movlw	0
  8510  00310E  6E15               	movwf	___awdiv@sign,c
  8511  003110  AE13               	btfss	___awdiv@divisor+1,7,c
  8512  003112  D006               	goto	l6536
  8513  003114  6C12               	negf	___awdiv@divisor,c
  8514  003116  1E13               	comf	___awdiv@divisor+1,f,c
  8515  003118  B0D8               	btfsc	status,0,c
  8516  00311A  2A13               	incf	___awdiv@divisor+1,f,c
  8517  00311C  0E01               	movlw	1
  8518  00311E  6E15               	movwf	___awdiv@sign,c
  8519  003120                     l6536:
  8520  003120  AE11               	btfss	___awdiv@dividend+1,7,c
  8521  003122  D006               	goto	l6542
  8522  003124  6C10               	negf	___awdiv@dividend,c
  8523  003126  1E11               	comf	___awdiv@dividend+1,f,c
  8524  003128  B0D8               	btfsc	status,0,c
  8525  00312A  2A11               	incf	___awdiv@dividend+1,f,c
  8526  00312C  0E01               	movlw	1
  8527  00312E  1A15               	xorwf	___awdiv@sign,f,c
  8528  003130                     l6542:
  8529  003130  0E00               	movlw	0
  8530  003132  6E17               	movwf	___awdiv@quotient+1,c
  8531  003134  0E00               	movlw	0
  8532  003136  6E16               	movwf	___awdiv@quotient,c
  8533  003138  5012               	movf	___awdiv@divisor,w,c
  8534  00313A  1013               	iorwf	___awdiv@divisor+1,w,c
  8535  00313C  B4D8               	btfsc	status,2,c
  8536  00313E  D01C               	goto	l6564
  8537  003140  0E01               	movlw	1
  8538  003142  6E14               	movwf	___awdiv@counter,c
  8539  003144  D004               	goto	l6550
  8540  003146                     l6548:
  8541  003146  90D8               	bcf	status,0,c
  8542  003148  3612               	rlcf	___awdiv@divisor,f,c
  8543  00314A  3613               	rlcf	___awdiv@divisor+1,f,c
  8544  00314C  2A14               	incf	___awdiv@counter,f,c
  8545  00314E                     l6550:
  8546  00314E  AE13               	btfss	___awdiv@divisor+1,7,c
  8547  003150  D7FA               	goto	l6548
  8548  003152                     l6552:
  8549  003152  90D8               	bcf	status,0,c
  8550  003154  3616               	rlcf	___awdiv@quotient,f,c
  8551  003156  3617               	rlcf	___awdiv@quotient+1,f,c
  8552  003158  5012               	movf	___awdiv@divisor,w,c
  8553  00315A  5C10               	subwf	___awdiv@dividend,w,c
  8554  00315C  5013               	movf	___awdiv@divisor+1,w,c
  8555  00315E  5811               	subwfb	___awdiv@dividend+1,w,c
  8556  003160  A0D8               	btfss	status,0,c
  8557  003162  D005               	goto	l6560
  8558  003164  5012               	movf	___awdiv@divisor,w,c
  8559  003166  5E10               	subwf	___awdiv@dividend,f,c
  8560  003168  5013               	movf	___awdiv@divisor+1,w,c
  8561  00316A  5A11               	subwfb	___awdiv@dividend+1,f,c
  8562  00316C  8016               	bsf	___awdiv@quotient,0,c
  8563  00316E                     l6560:
  8564  00316E  90D8               	bcf	status,0,c
  8565  003170  3213               	rrcf	___awdiv@divisor+1,f,c
  8566  003172  3212               	rrcf	___awdiv@divisor,f,c
  8567  003174  2E14               	decfsz	___awdiv@counter,f,c
  8568  003176  D7ED               	goto	l6552
  8569  003178                     l6564:
  8570  003178  5015               	movf	___awdiv@sign,w,c
  8571  00317A  B4D8               	btfsc	status,2,c
  8572  00317C  D004               	goto	l6568
  8573  00317E  6C16               	negf	___awdiv@quotient,c
  8574  003180  1E17               	comf	___awdiv@quotient+1,f,c
  8575  003182  B0D8               	btfsc	status,0,c
  8576  003184  2A17               	incf	___awdiv@quotient+1,f,c
  8577  003186                     l6568:
  8578  003186  C016  F010         	movff	___awdiv@quotient,?___awdiv
  8579  00318A  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
  8580  00318E  0012               	return	
  8581  003190                     __end_of___awdiv:
  8582                           	opt stack 0
  8583                           tblptru	equ	0xFF8
  8584                           tblptrh	equ	0xFF7
  8585                           tblptrl	equ	0xFF6
  8586                           tablat	equ	0xFF5
  8587                           prodh	equ	0xFF4
  8588                           prodl	equ	0xFF3
  8589                           intcon	equ	0xFF2
  8590                           postinc0	equ	0xFEE
  8591                           wreg	equ	0xFE8
  8592                           indf1	equ	0xFE7
  8593                           postdec1	equ	0xFE5
  8594                           fsr1h	equ	0xFE2
  8595                           fsr1l	equ	0xFE1
  8596                           indf2	equ	0xFDF
  8597                           postinc2	equ	0xFDE
  8598                           fsr2h	equ	0xFDA
  8599                           fsr2l	equ	0xFD9
  8600                           status	equ	0xFD8
  8601                           
  8602 ;; *************** function _clcd_max_row *****************
  8603 ;; Defined at:
  8604 ;;		line 106 in file "clcd.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;		None
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;		None
  8609 ;; Return value:  Size  Location     Type
  8610 ;;                  1    wreg      unsigned char 
  8611 ;; Registers used:
  8612 ;;		wreg, status,2
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8622 ;;Total ram usage:        0 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    5
  8625 ;; This function calls:
  8626 ;;		Nothing
  8627 ;; This function is called by:
  8628 ;;		_reply_to_host
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           	psect	text40
  8633  003B80                     __ptext40:
  8634                           	opt stack 0
  8635  003B80                     _clcd_max_row:
  8636                           	opt stack 23
  8637                           
  8638                           ;clcd.c: 107: if (clcd_config_data.init_done == 0)
  8639                           
  8640                           ;incstack = 0
  8641  003B80  5049               	movf	_clcd_config_data,w,c
  8642  003B82  A4D8               	btfss	status,2,c
  8643  003B84  D002               	goto	l6688
  8644                           
  8645                           ;clcd.c: 108: return 0;
  8646  003B86  0E00               	movlw	0
  8647  003B88  0012               	return	
  8648  003B8A                     l6688:
  8649                           
  8650                           ;clcd.c: 109: else
  8651                           ;clcd.c: 110: return clcd_config_data.clcd_max_row;
  8652  003B8A  504A               	movf	_clcd_config_data+1,w,c
  8653  003B8C  0012               	return	
  8654  003B8E                     __end_of_clcd_max_row:
  8655                           	opt stack 0
  8656                           tblptru	equ	0xFF8
  8657                           tblptrh	equ	0xFF7
  8658                           tblptrl	equ	0xFF6
  8659                           tablat	equ	0xFF5
  8660                           prodh	equ	0xFF4
  8661                           prodl	equ	0xFF3
  8662                           intcon	equ	0xFF2
  8663                           postinc0	equ	0xFEE
  8664                           wreg	equ	0xFE8
  8665                           indf1	equ	0xFE7
  8666                           postdec1	equ	0xFE5
  8667                           fsr1h	equ	0xFE2
  8668                           fsr1l	equ	0xFE1
  8669                           indf2	equ	0xFDF
  8670                           postinc2	equ	0xFDE
  8671                           fsr2h	equ	0xFDA
  8672                           fsr2l	equ	0xFD9
  8673                           status	equ	0xFD8
  8674                           
  8675 ;; *************** function _clcd_max_col *****************
  8676 ;; Defined at:
  8677 ;;		line 113 in file "clcd.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;		None
  8680 ;; Auto vars:     Size  Location     Type
  8681 ;;		None
  8682 ;; Return value:  Size  Location     Type
  8683 ;;                  1    wreg      unsigned char 
  8684 ;; Registers used:
  8685 ;;		wreg, status,2
  8686 ;; Tracked objects:
  8687 ;;		On entry : 0/0
  8688 ;;		On exit  : 0/0
  8689 ;;		Unchanged: 0/0
  8690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;Total ram usage:        0 bytes
  8696 ;; Hardware stack levels used:    1
  8697 ;; Hardware stack levels required when called:    5
  8698 ;; This function calls:
  8699 ;;		Nothing
  8700 ;; This function is called by:
  8701 ;;		_reply_to_host
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           	psect	text41
  8706  003B8E                     __ptext41:
  8707                           	opt stack 0
  8708  003B8E                     _clcd_max_col:
  8709                           	opt stack 23
  8710                           
  8711                           ;clcd.c: 114: if (clcd_config_data.init_done == 0)
  8712                           
  8713                           ;incstack = 0
  8714  003B8E  5049               	movf	_clcd_config_data,w,c
  8715  003B90  A4D8               	btfss	status,2,c
  8716  003B92  D002               	goto	l6700
  8717                           
  8718                           ;clcd.c: 115: return 0;
  8719  003B94  0E00               	movlw	0
  8720  003B96  0012               	return	
  8721  003B98                     l6700:
  8722                           
  8723                           ;clcd.c: 116: else
  8724                           ;clcd.c: 117: return clcd_config_data.clcd_max_col;
  8725  003B98  504B               	movf	_clcd_config_data+2,w,c
  8726  003B9A  0012               	return	
  8727  003B9C                     __end_of_clcd_max_col:
  8728                           	opt stack 0
  8729                           tblptru	equ	0xFF8
  8730                           tblptrh	equ	0xFF7
  8731                           tblptrl	equ	0xFF6
  8732                           tablat	equ	0xFF5
  8733                           prodh	equ	0xFF4
  8734                           prodl	equ	0xFF3
  8735                           intcon	equ	0xFF2
  8736                           postinc0	equ	0xFEE
  8737                           wreg	equ	0xFE8
  8738                           indf1	equ	0xFE7
  8739                           postdec1	equ	0xFE5
  8740                           fsr1h	equ	0xFE2
  8741                           fsr1l	equ	0xFE1
  8742                           indf2	equ	0xFDF
  8743                           postinc2	equ	0xFDE
  8744                           fsr2h	equ	0xFDA
  8745                           fsr2l	equ	0xFD9
  8746                           status	equ	0xFD8
  8747                           
  8748 ;; *************** function _parse_cmd_str *****************
  8749 ;; Defined at:
  8750 ;;		line 111 in file "cmd_consol.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;  str             2   57[COMRAM] PTR unsigned char 
  8753 ;;		 -> uart_str(150), 
  8754 ;; Auto vars:     Size  Location     Type
  8755 ;;  i               1    1[BANK0 ] unsigned char 
  8756 ;;  i               1    4[BANK0 ] unsigned char 
  8757 ;;  i               1    0[BANK0 ] unsigned char 
  8758 ;;  uid             1    8[BANK0 ] unsigned char 
  8759 ;;  uid             1    7[BANK0 ] unsigned char 
  8760 ;;  scroll          1    6[BANK0 ] unsigned char 
  8761 ;;  uid             1    5[BANK0 ] unsigned char 
  8762 ;;  column          1    3[BANK0 ] unsigned char 
  8763 ;;  row             1    2[BANK0 ] unsigned char 
  8764 ;;  temp            2   11[BANK0 ] PTR unsigned char 
  8765 ;;		 -> uart_str(150), STR_83(7), STR_82(7), STR_79(7), 
  8766 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
  8767 ;;		 -> STR_69(7), STR_64(7), STR_62(7), STR_60(7), 
  8768 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
  8769 ;;		 -> STR_48(7), STR_47(7), STR_43(2), STR_40(7), 
  8770 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
  8771 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
  8772 ;;		 -> STR_24(7), NULL(0), 
  8773 ;;  ptr             2    9[BANK0 ] PTR unsigned char 
  8774 ;;		 -> uart_str(150), 
  8775 ;; Return value:  Size  Location     Type
  8776 ;;                  1    wreg      unsigned char 
  8777 ;; Registers used:
  8778 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8779 ;; Tracked objects:
  8780 ;;		On entry : 0/0
  8781 ;;		On exit  : 0/0
  8782 ;;		Unchanged: 0/0
  8783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8784 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Totals:         5      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;Total ram usage:       18 bytes
  8789 ;; Hardware stack levels used:    1
  8790 ;; Hardware stack levels required when called:    9
  8791 ;; This function calls:
  8792 ;;		_atoi
  8793 ;;		_collect_column
  8794 ;;		_collect_row
  8795 ;;		_get_direction
  8796 ;;		_get_dis_frq
  8797 ;;		_get_str
  8798 ;;		_isdigit
  8799 ;;		_memset
  8800 ;;		_printf
  8801 ;;		_strcpy
  8802 ;;		_strlen
  8803 ;;		_strstr
  8804 ;;		_strtok
  8805 ;; This function is called by:
  8806 ;;		_cmd_consol_task
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           	psect	text42
  8811  0000AA                     __ptext42:
  8812                           	opt stack 0
  8813  0000AA                     _parse_cmd_str:
  8814                           	opt stack 20
  8815                           
  8816                           ;cmd_consol.c: 112: printf("%s..2\r\n", str);
  8817                           
  8818                           ;incstack = 0
  8819  0000AA  0E82               	movlw	low STR_22
  8820  0000AC  6E1E               	movwf	printf@f,c
  8821  0000AE  0EFF               	movlw	high STR_22
  8822  0000B0  6E1F               	movwf	printf@f+1,c
  8823  0000B2  C03A  F020         	movff	parse_cmd_str@str,?_printf+2
  8824  0000B6  C03B  F021         	movff	parse_cmd_str@str+1,?_printf+3
  8825  0000BA  EC48  F012         	call	_printf	;wreg free
  8826                           
  8827                           ;cmd_consol.c: 113: char *temp;
  8828                           ;cmd_consol.c: 114: char *ptr = str;
  8829  0000BE  C03A  F0E4         	movff	parse_cmd_str@str,parse_cmd_str@ptr
  8830  0000C2  C03B  F0E5         	movff	parse_cmd_str@str+1,parse_cmd_str@ptr+1
  8831                           
  8832                           ;cmd_consol.c: 115: if ((temp = strstr(ptr, "MC?")) != (0)) {
  8833  0000C6  C0E4  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8834  0000CA  C0E5  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8835  0000CE  0EED               	movlw	low STR_23
  8836  0000D0  6E2F               	movwf	strstr@s2,c
  8837  0000D2  0EFF               	movlw	high STR_23
  8838  0000D4  6E30               	movwf	strstr@s2+1,c
  8839  0000D6  ECF3  F017         	call	_strstr	;wreg free
  8840  0000DA  C02D  F0E6         	movff	?_strstr,parse_cmd_str@temp
  8841  0000DE  C02E  F0E7         	movff	?_strstr+1,parse_cmd_str@temp+1
  8842  0000E2  0100               	movlb	0	; () banked
  8843  0000E4  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  8844  0000E6  0100               	movlb	0	; () banked
  8845  0000E8  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8846  0000EA  B4D8               	btfsc	status,2,c
  8847  0000EC  D038               	goto	l7040
  8848                           
  8849                           ; BSR set to: 0
  8850                           ;cmd_consol.c: 116: temp = strtok(ptr, "-', /=");
  8851  0000EE  C0E4  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  8852  0000F2  C0E5  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  8853  0000F6  0EA7               	movlw	low STR_24
  8854  0000F8  6E1F               	movwf	strtok@s2,c
  8855  0000FA  0EFF               	movlw	high STR_24
  8856  0000FC  6E20               	movwf	strtok@s2+1,c
  8857  0000FE  EC3A  F017         	call	_strtok	;wreg free
  8858  000102  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  8859  000106  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  8860                           
  8861                           ;cmd_consol.c: 117: if (temp != (0)) {
  8862  00010A  0100               	movlb	0	; () banked
  8863  00010C  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  8864  00010E  0100               	movlb	0	; () banked
  8865  000110  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8866  000112  B4D8               	btfsc	status,2,c
  8867  000114  EFC4  F007         	goto	l7494
  8868                           
  8869                           ; BSR set to: 0
  8870                           ;cmd_consol.c: 118: strcpy(CMD, temp);
  8871  000118  0ECC               	movlw	low _CMD
  8872  00011A  6E10               	movwf	strcpy@to,c
  8873  00011C  0E00               	movlw	high _CMD
  8874  00011E  6E11               	movwf	strcpy@to+1,c
  8875  000120  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
  8876  000124  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  8877  000128  EC40  F01B         	call	_strcpy	;wreg free
  8878                           
  8879                           ;cmd_consol.c: 119: valid_cmd = 1;
  8880  00012C  0E01               	movlw	1
  8881  00012E  0100               	movlb	0	; () banked
  8882  000130  6F84               	movwf	_valid_cmd& (0+255),b
  8883                           
  8884                           ; BSR set to: 0
  8885                           ;cmd_consol.c: 120: memset(str, 0, strlen(str));
  8886  000132  C03A  F024         	movff	parse_cmd_str@str,memset@p1
  8887  000136  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  8888  00013A  0E00               	movlw	0
  8889  00013C  6E27               	movwf	memset@c+1,c
  8890  00013E  0E00               	movlw	0
  8891  000140  6E26               	movwf	memset@c,c
  8892  000142  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
  8893  000146  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  8894  00014A  EC2E  F01A         	call	_strlen	;wreg free
  8895  00014E  C01E  F028         	movff	?_strlen,memset@n
  8896  000152  C01F  F029         	movff	?_strlen+1,memset@n+1
  8897  000156  EC63  F01B         	call	_memset	;wreg free
  8898  00015A                     l7036:
  8899                           
  8900                           ;cmd_consol.c: 121: return 0;
  8901  00015A  0E00               	movlw	0
  8902  00015C  0012               	return	
  8903  00015E                     l7040:
  8904  00015E  C0E4  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8905  000162  C0E5  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8906  000166  0EF1               	movlw	low STR_25
  8907  000168  6E2F               	movwf	strstr@s2,c
  8908  00016A  0EFF               	movlw	high STR_25
  8909  00016C  6E30               	movwf	strstr@s2+1,c
  8910  00016E  ECF3  F017         	call	_strstr	;wreg free
  8911  000172  C02D  F0E6         	movff	?_strstr,parse_cmd_str@temp
  8912  000176  C02E  F0E7         	movff	?_strstr+1,parse_cmd_str@temp+1
  8913  00017A  0100               	movlb	0	; () banked
  8914  00017C  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  8915  00017E  0100               	movlb	0	; () banked
  8916  000180  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8917  000182  B4D8               	btfsc	status,2,c
  8918  000184  D037               	goto	l7056
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;cmd_consol.c: 124: temp = strtok(ptr, "-', /=");
  8922  000186  C0E4  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  8923  00018A  C0E5  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  8924  00018E  0EA7               	movlw	low STR_24
  8925  000190  6E1F               	movwf	strtok@s2,c
  8926  000192  0EFF               	movlw	high STR_24
  8927  000194  6E20               	movwf	strtok@s2+1,c
  8928  000196  EC3A  F017         	call	_strtok	;wreg free
  8929  00019A  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  8930  00019E  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  8931                           
  8932                           ;cmd_consol.c: 125: if (temp != (0)) {
  8933  0001A2  0100               	movlb	0	; () banked
  8934  0001A4  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  8935  0001A6  0100               	movlb	0	; () banked
  8936  0001A8  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8937  0001AA  B4D8               	btfsc	status,2,c
  8938  0001AC  EFC4  F007         	goto	l7494
  8939                           
  8940                           ; BSR set to: 0
  8941                           ;cmd_consol.c: 126: strcpy(CMD, temp);
  8942  0001B0  0ECC               	movlw	low _CMD
  8943  0001B2  6E10               	movwf	strcpy@to,c
  8944  0001B4  0E00               	movlw	high _CMD
  8945  0001B6  6E11               	movwf	strcpy@to+1,c
  8946  0001B8  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
  8947  0001BC  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  8948  0001C0  EC40  F01B         	call	_strcpy	;wreg free
  8949                           
  8950                           ;cmd_consol.c: 127: valid_cmd = 1;
  8951  0001C4  0E01               	movlw	1
  8952  0001C6  0100               	movlb	0	; () banked
  8953  0001C8  6F84               	movwf	_valid_cmd& (0+255),b
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;cmd_consol.c: 128: memset(str, 0, strlen(str));
  8957  0001CA  C03A  F024         	movff	parse_cmd_str@str,memset@p1
  8958  0001CE  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  8959  0001D2  0E00               	movlw	0
  8960  0001D4  6E27               	movwf	memset@c+1,c
  8961  0001D6  0E00               	movlw	0
  8962  0001D8  6E26               	movwf	memset@c,c
  8963  0001DA  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
  8964  0001DE  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  8965  0001E2  EC2E  F01A         	call	_strlen	;wreg free
  8966  0001E6  C01E  F028         	movff	?_strlen,memset@n
  8967  0001EA  C01F  F029         	movff	?_strlen+1,memset@n+1
  8968  0001EE  EC63  F01B         	call	_memset	;wreg free
  8969  0001F2  D7B3               	goto	l7036
  8970  0001F4                     l7056:
  8971  0001F4  C0E4  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8972  0001F8  C0E5  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8973  0001FC  0EBC               	movlw	low STR_27
  8974  0001FE  6E2F               	movwf	strstr@s2,c
  8975  000200  0EFF               	movlw	high STR_27
  8976  000202  6E30               	movwf	strstr@s2+1,c
  8977  000204  ECF3  F017         	call	_strstr	;wreg free
  8978  000208  502D               	movf	?_strstr,w,c
  8979  00020A  102E               	iorwf	?_strstr+1,w,c
  8980  00020C  B4D8               	btfsc	status,2,c
  8981  00020E  D002               	goto	u7290
  8982  000210  0E01               	movlw	1
  8983  000212  D001               	goto	u7300
  8984  000214                     u7290:
  8985  000214  0E00               	movlw	0
  8986  000216                     u7300:
  8987  000216  0100               	movlb	0	; () banked
  8988  000218  6FE6               	movwf	parse_cmd_str@temp& (0+255),b
  8989  00021A  6BE7               	clrf	(parse_cmd_str@temp+1)& (0+255),b
  8990  00021C  0100               	movlb	0	; () banked
  8991  00021E  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  8992  000220  0100               	movlb	0	; () banked
  8993  000222  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8994  000224  B4D8               	btfsc	status,2,c
  8995  000226  D03D               	goto	l7074
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;cmd_consol.c: 132: temp = strtok(ptr, "-', /=");
  8999  000228  C0E4  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9000  00022C  C0E5  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9001  000230  0EA7               	movlw	low STR_24
  9002  000232  6E1F               	movwf	strtok@s2,c
  9003  000234  0EFF               	movlw	high STR_24
  9004  000236  6E20               	movwf	strtok@s2+1,c
  9005  000238  EC3A  F017         	call	_strtok	;wreg free
  9006  00023C  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9007  000240  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9008                           
  9009                           ;cmd_consol.c: 133: if (temp != (0)) {
  9010  000244  0100               	movlb	0	; () banked
  9011  000246  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9012  000248  0100               	movlb	0	; () banked
  9013  00024A  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9014  00024C  B4D8               	btfsc	status,2,c
  9015  00024E  EFC4  F007         	goto	l7494
  9016                           
  9017                           ; BSR set to: 0
  9018                           ;cmd_consol.c: 134: strcpy(CMD, temp);
  9019  000252  0ECC               	movlw	low _CMD
  9020  000254  6E10               	movwf	strcpy@to,c
  9021  000256  0E00               	movlw	high _CMD
  9022  000258  6E11               	movwf	strcpy@to+1,c
  9023  00025A  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
  9024  00025E  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9025  000262  EC40  F01B         	call	_strcpy	;wreg free
  9026                           
  9027                           ;cmd_consol.c: 135: valid_cmd = 1;
  9028  000266  0E01               	movlw	1
  9029  000268  0100               	movlb	0	; () banked
  9030  00026A  6F84               	movwf	_valid_cmd& (0+255),b
  9031                           
  9032                           ; BSR set to: 0
  9033                           ;cmd_consol.c: 136: memset(str, 0, strlen(str));
  9034  00026C  C03A  F024         	movff	parse_cmd_str@str,memset@p1
  9035  000270  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9036  000274  0E00               	movlw	0
  9037  000276  6E27               	movwf	memset@c+1,c
  9038  000278  0E00               	movlw	0
  9039  00027A  6E26               	movwf	memset@c,c
  9040  00027C  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
  9041  000280  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9042  000284  EC2E  F01A         	call	_strlen	;wreg free
  9043  000288  C01E  F028         	movff	?_strlen,memset@n
  9044  00028C  C01F  F029         	movff	?_strlen+1,memset@n+1
  9045  000290  EC63  F01B         	call	_memset	;wreg free
  9046                           
  9047                           ;cmd_consol.c: 137: printf(".....\r\n");
  9048  000294  0E7A               	movlw	low STR_29
  9049  000296  6E1E               	movwf	printf@f,c
  9050  000298  0EFF               	movlw	high STR_29
  9051  00029A  6E1F               	movwf	printf@f+1,c
  9052  00029C  EC48  F012         	call	_printf	;wreg free
  9053  0002A0  D75C               	goto	l7036
  9054  0002A2                     l7074:
  9055  0002A2  C0E4  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9056  0002A6  C0E5  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9057  0002AA  0EDE               	movlw	low STR_30
  9058  0002AC  6E2F               	movwf	strstr@s2,c
  9059  0002AE  0EFF               	movlw	high STR_30
  9060  0002B0  6E30               	movwf	strstr@s2+1,c
  9061  0002B2  ECF3  F017         	call	_strstr	;wreg free
  9062  0002B6  C02D  F0E6         	movff	?_strstr,parse_cmd_str@temp
  9063  0002BA  C02E  F0E7         	movff	?_strstr+1,parse_cmd_str@temp+1
  9064  0002BE  0100               	movlb	0	; () banked
  9065  0002C0  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9066  0002C2  0100               	movlb	0	; () banked
  9067  0002C4  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9068  0002C6  B4D8               	btfsc	status,2,c
  9069  0002C8  D093               	goto	l7112
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;cmd_consol.c: 141: temp = strtok(ptr, "-', /=");
  9073  0002CA  C0E4  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9074  0002CE  C0E5  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9075  0002D2  0EA7               	movlw	low STR_24
  9076  0002D4  6E1F               	movwf	strtok@s2,c
  9077  0002D6  0EFF               	movlw	high STR_24
  9078  0002D8  6E20               	movwf	strtok@s2+1,c
  9079  0002DA  EC3A  F017         	call	_strtok	;wreg free
  9080  0002DE  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9081  0002E2  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9082                           
  9083                           ;cmd_consol.c: 142: if (temp != (0)) {
  9084  0002E6  0100               	movlb	0	; () banked
  9085  0002E8  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9086  0002EA  0100               	movlb	0	; () banked
  9087  0002EC  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9088  0002EE  B4D8               	btfsc	status,2,c
  9089  0002F0  EFC4  F007         	goto	l7494
  9090                           
  9091                           ; BSR set to: 0
  9092                           ;cmd_consol.c: 143: strcpy(CMD, temp);
  9093  0002F4  0ECC               	movlw	low _CMD
  9094  0002F6  6E10               	movwf	strcpy@to,c
  9095  0002F8  0E00               	movlw	high _CMD
  9096  0002FA  6E11               	movwf	strcpy@to+1,c
  9097  0002FC  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
  9098  000300  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9099  000304  EC40  F01B         	call	_strcpy	;wreg free
  9100                           
  9101                           ;cmd_consol.c: 144: temp = strtok((0), "-', /=");
  9102  000308  0E00               	movlw	0
  9103  00030A  6E1D               	movwf	strtok@s1,c
  9104  00030C  0E00               	movlw	0
  9105  00030E  6E1E               	movwf	strtok@s1+1,c
  9106  000310  0EA7               	movlw	low STR_24
  9107  000312  6E1F               	movwf	strtok@s2,c
  9108  000314  0EFF               	movlw	high STR_24
  9109  000316  6E20               	movwf	strtok@s2+1,c
  9110  000318  EC3A  F017         	call	_strtok	;wreg free
  9111  00031C  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9112  000320  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9113                           
  9114                           ;cmd_consol.c: 145: printf("%s..\r\n", temp);
  9115  000324  0E99               	movlw	low STR_33
  9116  000326  6E1E               	movwf	printf@f,c
  9117  000328  0EFF               	movlw	high STR_33
  9118  00032A  6E1F               	movwf	printf@f+1,c
  9119  00032C  C0E6  F020         	movff	parse_cmd_str@temp,?_printf+2
  9120  000330  C0E7  F021         	movff	parse_cmd_str@temp+1,?_printf+3
  9121  000334  EC48  F012         	call	_printf	;wreg free
  9122                           
  9123                           ;cmd_consol.c: 146: char row = 0, column = 0;
  9124  000338  0E00               	movlw	0
  9125  00033A  0100               	movlb	0	; () banked
  9126  00033C  6FDD               	movwf	parse_cmd_str@row& (0+255),b
  9127                           
  9128                           ; BSR set to: 0
  9129  00033E  0E00               	movlw	0
  9130  000340  0100               	movlb	0	; () banked
  9131  000342  6FDE               	movwf	parse_cmd_str@column& (0+255),b
  9132                           
  9133                           ; BSR set to: 0
  9134                           ;cmd_consol.c: 147: if (temp != (0)) {
  9135  000344  0100               	movlb	0	; () banked
  9136  000346  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9137  000348  0100               	movlb	0	; () banked
  9138  00034A  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9139  00034C  B4D8               	btfsc	status,2,c
  9140  00034E  EFC4  F007         	goto	l7494
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;cmd_consol.c: 148: row = atoi(temp);
  9144  000352  C0E6  F01E         	movff	parse_cmd_str@temp,atoi@s
  9145  000356  C0E7  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
  9146  00035A  EC34  F013         	call	_atoi	;wreg free
  9147  00035E  501E               	movf	?_atoi,w,c
  9148  000360  0100               	movlb	0	; () banked
  9149  000362  6FDD               	movwf	parse_cmd_str@row& (0+255),b
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;cmd_consol.c: 149: if (row > 0) {
  9153  000364  0100               	movlb	0	; () banked
  9154  000366  51DD               	movf	parse_cmd_str@row& (0+255),w,b
  9155  000368  0100               	movlb	0	; () banked
  9156  00036A  B4D8               	btfsc	status,2,c
  9157  00036C  EFC4  F007         	goto	l7494
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;cmd_consol.c: 150: temp = strtok((0), "-', /=");
  9161  000370  0E00               	movlw	0
  9162  000372  6E1D               	movwf	strtok@s1,c
  9163  000374  0E00               	movlw	0
  9164  000376  6E1E               	movwf	strtok@s1+1,c
  9165  000378  0EA7               	movlw	low STR_24
  9166  00037A  6E1F               	movwf	strtok@s2,c
  9167  00037C  0EFF               	movlw	high STR_24
  9168  00037E  6E20               	movwf	strtok@s2+1,c
  9169  000380  EC3A  F017         	call	_strtok	;wreg free
  9170  000384  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9171  000388  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9172                           
  9173                           ;cmd_consol.c: 151: if (temp != (0)) {
  9174  00038C  0100               	movlb	0	; () banked
  9175  00038E  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9176  000390  0100               	movlb	0	; () banked
  9177  000392  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9178  000394  B4D8               	btfsc	status,2,c
  9179  000396  EFC4  F007         	goto	l7494
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;cmd_consol.c: 152: column = atoi(temp);
  9183  00039A  C0E6  F01E         	movff	parse_cmd_str@temp,atoi@s
  9184  00039E  C0E7  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
  9185  0003A2  EC34  F013         	call	_atoi	;wreg free
  9186  0003A6  501E               	movf	?_atoi,w,c
  9187  0003A8  0100               	movlb	0	; () banked
  9188  0003AA  6FDE               	movwf	parse_cmd_str@column& (0+255),b
  9189                           
  9190                           ; BSR set to: 0
  9191                           ;cmd_consol.c: 153: if (column > 0) {
  9192  0003AC  0100               	movlb	0	; () banked
  9193  0003AE  51DE               	movf	parse_cmd_str@column& (0+255),w,b
  9194  0003B0  0100               	movlb	0	; () banked
  9195  0003B2  B4D8               	btfsc	status,2,c
  9196  0003B4  EFC4  F007         	goto	l7494
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;cmd_consol.c: 154: clcd_init_col = column;
  9200  0003B8  C0DE  F081         	movff	parse_cmd_str@column,_clcd_init_col
  9201                           
  9202                           ;cmd_consol.c: 155: clcd_init_row = row;
  9203  0003BC  C0DD  F041         	movff	parse_cmd_str@row,_clcd_init_row
  9204                           
  9205                           ; BSR set to: 0
  9206                           ;cmd_consol.c: 156: valid_cmd = 1;
  9207  0003C0  0E01               	movlw	1
  9208  0003C2  0100               	movlb	0	; () banked
  9209  0003C4  6F84               	movwf	_valid_cmd& (0+255),b
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;cmd_consol.c: 157: memset(str, 0, strlen(str));
  9213  0003C6  C03A  F024         	movff	parse_cmd_str@str,memset@p1
  9214  0003CA  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9215  0003CE  0E00               	movlw	0
  9216  0003D0  6E27               	movwf	memset@c+1,c
  9217  0003D2  0E00               	movlw	0
  9218  0003D4  6E26               	movwf	memset@c,c
  9219  0003D6  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
  9220  0003DA  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9221  0003DE  EC2E  F01A         	call	_strlen	;wreg free
  9222  0003E2  C01E  F028         	movff	?_strlen,memset@n
  9223  0003E6  C01F  F029         	movff	?_strlen+1,memset@n+1
  9224  0003EA  EC63  F01B         	call	_memset	;wreg free
  9225  0003EE  D6B5               	goto	l7036
  9226  0003F0                     l7112:
  9227  0003F0  C0E4  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9228  0003F4  C0E5  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9229  0003F8  0EC2               	movlw	low STR_35
  9230  0003FA  6E2F               	movwf	strstr@s2,c
  9231  0003FC  0EFF               	movlw	high STR_35
  9232  0003FE  6E30               	movwf	strstr@s2+1,c
  9233  000400  ECF3  F017         	call	_strstr	;wreg free
  9234  000404  C02D  F0E6         	movff	?_strstr,parse_cmd_str@temp
  9235  000408  C02E  F0E7         	movff	?_strstr+1,parse_cmd_str@temp+1
  9236  00040C  0100               	movlb	0	; () banked
  9237  00040E  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9238  000410  0100               	movlb	0	; () banked
  9239  000412  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9240  000414  B4D8               	btfsc	status,2,c
  9241  000416  D037               	goto	l7128
  9242                           
  9243                           ; BSR set to: 0
  9244                           ;cmd_consol.c: 167: temp = strtok(ptr, "-', /=");
  9245  000418  C0E4  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9246  00041C  C0E5  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9247  000420  0EA7               	movlw	low STR_24
  9248  000422  6E1F               	movwf	strtok@s2,c
  9249  000424  0EFF               	movlw	high STR_24
  9250  000426  6E20               	movwf	strtok@s2+1,c
  9251  000428  EC3A  F017         	call	_strtok	;wreg free
  9252  00042C  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9253  000430  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9254                           
  9255                           ;cmd_consol.c: 168: if (temp != (0)) {
  9256  000434  0100               	movlb	0	; () banked
  9257  000436  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9258  000438  0100               	movlb	0	; () banked
  9259  00043A  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9260  00043C  B4D8               	btfsc	status,2,c
  9261  00043E  EFC4  F007         	goto	l7494
  9262                           
  9263                           ; BSR set to: 0
  9264                           ;cmd_consol.c: 169: strcpy(CMD, temp);
  9265  000442  0ECC               	movlw	low _CMD
  9266  000444  6E10               	movwf	strcpy@to,c
  9267  000446  0E00               	movlw	high _CMD
  9268  000448  6E11               	movwf	strcpy@to+1,c
  9269  00044A  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
  9270  00044E  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9271  000452  EC40  F01B         	call	_strcpy	;wreg free
  9272                           
  9273                           ;cmd_consol.c: 170: valid_cmd = 1;
  9274  000456  0E01               	movlw	1
  9275  000458  0100               	movlb	0	; () banked
  9276  00045A  6F84               	movwf	_valid_cmd& (0+255),b
  9277                           
  9278                           ; BSR set to: 0
  9279                           ;cmd_consol.c: 171: memset(str, 0, strlen(str));
  9280  00045C  C03A  F024         	movff	parse_cmd_str@str,memset@p1
  9281  000460  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9282  000464  0E00               	movlw	0
  9283  000466  6E27               	movwf	memset@c+1,c
  9284  000468  0E00               	movlw	0
  9285  00046A  6E26               	movwf	memset@c,c
  9286  00046C  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
  9287  000470  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9288  000474  EC2E  F01A         	call	_strlen	;wreg free
  9289  000478  C01E  F028         	movff	?_strlen,memset@n
  9290  00047C  C01F  F029         	movff	?_strlen+1,memset@n+1
  9291  000480  EC63  F01B         	call	_memset	;wreg free
  9292  000484  D66A               	goto	l7036
  9293  000486                     l7128:
  9294  000486  C0E4  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9295  00048A  C0E5  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9296  00048E  0ECE               	movlw	low STR_37
  9297  000490  6E2F               	movwf	strstr@s2,c
  9298  000492  0EFF               	movlw	high STR_37
  9299  000494  6E30               	movwf	strstr@s2+1,c
  9300  000496  ECF3  F017         	call	_strstr	;wreg free
  9301  00049A  C02D  F0E6         	movff	?_strstr,parse_cmd_str@temp
  9302  00049E  C02E  F0E7         	movff	?_strstr+1,parse_cmd_str@temp+1
  9303  0004A2  0100               	movlb	0	; () banked
  9304  0004A4  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9305  0004A6  0100               	movlb	0	; () banked
  9306  0004A8  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9307  0004AA  B4D8               	btfsc	status,2,c
  9308  0004AC  D0D2               	goto	l7194
  9309                           
  9310                           ; BSR set to: 0
  9311                           ;cmd_consol.c: 176: if (clcd_config_data.init_done == 1) {
  9312  0004AE  0449               	decf	_clcd_config_data,w,c
  9313  0004B0  A4D8               	btfss	status,2,c
  9314  0004B2  EFC4  F007         	goto	l7494
  9315                           
  9316                           ; BSR set to: 0
  9317                           ;cmd_consol.c: 177: cmd_data.data_set = 0;
  9318  0004B6  0E00               	movlw	0
  9319  0004B8  0100               	movlb	0	; () banked
  9320  0004BA  6FAF               	movwf	(_cmd_data+41)& (0+255),b
  9321                           
  9322                           ; BSR set to: 0
  9323                           ;cmd_consol.c: 178: temp = strtok(ptr, "-', /=");
  9324  0004BC  C0E4  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9325  0004C0  C0E5  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9326  0004C4  0EA7               	movlw	low STR_24
  9327  0004C6  6E1F               	movwf	strtok@s2,c
  9328  0004C8  0EFF               	movlw	high STR_24
  9329  0004CA  6E20               	movwf	strtok@s2+1,c
  9330  0004CC  EC3A  F017         	call	_strtok	;wreg free
  9331  0004D0  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9332  0004D4  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9333                           
  9334                           ;cmd_consol.c: 179: if (temp != (0)) {
  9335  0004D8  0100               	movlb	0	; () banked
  9336  0004DA  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9337  0004DC  0100               	movlb	0	; () banked
  9338  0004DE  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9339  0004E0  B4D8               	btfsc	status,2,c
  9340  0004E2  EFC4  F007         	goto	l7494
  9341                           
  9342                           ; BSR set to: 0
  9343                           ;cmd_consol.c: 180: printf("temp = %s, ", temp);
  9344  0004E6  0EDE               	movlw	low STR_39
  9345  0004E8  6E1E               	movwf	printf@f,c
  9346  0004EA  0EFE               	movlw	high STR_39
  9347  0004EC  6E1F               	movwf	printf@f+1,c
  9348  0004EE  C0E6  F020         	movff	parse_cmd_str@temp,?_printf+2
  9349  0004F2  C0E7  F021         	movff	parse_cmd_str@temp+1,?_printf+3
  9350  0004F6  EC48  F012         	call	_printf	;wreg free
  9351                           
  9352                           ;cmd_consol.c: 181: strcpy(CMD, temp);
  9353  0004FA  0ECC               	movlw	low _CMD
  9354  0004FC  6E10               	movwf	strcpy@to,c
  9355  0004FE  0E00               	movlw	high _CMD
  9356  000500  6E11               	movwf	strcpy@to+1,c
  9357  000502  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
  9358  000506  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9359  00050A  EC40  F01B         	call	_strcpy	;wreg free
  9360                           
  9361                           ;cmd_consol.c: 182: char uid = 0;
  9362  00050E  0E00               	movlw	0
  9363  000510  0100               	movlb	0	; () banked
  9364  000512  6FE0               	movwf	parse_cmd_str@uid& (0+255),b
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;cmd_consol.c: 183: cmd_data.uid = -1;
  9368  000514  0100               	movlb	0	; () banked
  9369  000516  6986               	setf	_cmd_data& (0+255),b
  9370                           
  9371                           ; BSR set to: 0
  9372                           ;cmd_consol.c: 184: temp = strtok((0), "-', /=");
  9373  000518  0E00               	movlw	0
  9374  00051A  6E1D               	movwf	strtok@s1,c
  9375  00051C  0E00               	movlw	0
  9376  00051E  6E1E               	movwf	strtok@s1+1,c
  9377  000520  0EA7               	movlw	low STR_24
  9378  000522  6E1F               	movwf	strtok@s2,c
  9379  000524  0EFF               	movlw	high STR_24
  9380  000526  6E20               	movwf	strtok@s2+1,c
  9381  000528  EC3A  F017         	call	_strtok	;wreg free
  9382  00052C  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9383  000530  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9384                           
  9385                           ;cmd_consol.c: 185: if (temp != (0)) {
  9386  000534  0100               	movlb	0	; () banked
  9387  000536  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9388  000538  0100               	movlb	0	; () banked
  9389  00053A  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9390  00053C  B4D8               	btfsc	status,2,c
  9391  00053E  EFC4  F007         	goto	l7494
  9392                           
  9393                           ; BSR set to: 0
  9394                           ;cmd_consol.c: 186: printf("temp = %s, ", temp);
  9395  000542  0EDE               	movlw	low STR_39
  9396  000544  6E1E               	movwf	printf@f,c
  9397  000546  0EFE               	movlw	high STR_39
  9398  000548  6E1F               	movwf	printf@f+1,c
  9399  00054A  C0E6  F020         	movff	parse_cmd_str@temp,?_printf+2
  9400  00054E  C0E7  F021         	movff	parse_cmd_str@temp+1,?_printf+3
  9401  000552  EC48  F012         	call	_printf	;wreg free
  9402                           
  9403                           ;cmd_consol.c: 187: char i = 0;
  9404  000556  0E00               	movlw	0
  9405  000558  0100               	movlb	0	; () banked
  9406  00055A  6FDB               	movwf	parse_cmd_str@i& (0+255),b
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;cmd_consol.c: 188: uid = temp[0];
  9410  00055C  C0E6  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9411  000560  C0E7  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9412  000564  0E00               	movlw	low (__mediumconst shr (0+16))
  9413  000566  6EF8               	movwf	tblptru,c
  9414  000568  0E0F               	movlw	(high __ramtop+-1)
  9415  00056A  64F7               	cpfsgt	tblptrh,c
  9416  00056C  D003               	bra	u7457
  9417  00056E  0008               	tblrd		*
  9418  000570  50F5               	movf	tablat,w,c
  9419  000572  D005               	bra	u7450
  9420  000574                     u7457:
  9421  000574  CFF6 FFE9          	movff	tblptrl,fsr0l
  9422  000578  CFF7 FFEA          	movff	tblptrh,fsr0h
  9423  00057C  50EF               	movf	indf0,w,c
  9424  00057E                     u7450:
  9425  00057E  0100               	movlb	0	; () banked
  9426  000580  6FE0               	movwf	parse_cmd_str@uid& (0+255),b
  9427                           
  9428                           ; BSR set to: 0
  9429                           ;cmd_consol.c: 189: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9430  000582  0E40               	movlw	64
  9431  000584  0100               	movlb	0	; () banked
  9432  000586  65E0               	cpfsgt	parse_cmd_str@uid& (0+255),b
  9433  000588  D062               	goto	l7190
  9434                           
  9435                           ; BSR set to: 0
  9436  00058A  504C               	movf	_clcd_config_data+3,w,c
  9437  00058C  0100               	movlb	0	; () banked
  9438  00058E  5DE0               	subwf	parse_cmd_str@uid& (0+255),w,b
  9439  000590  B0D8               	btfsc	status,0,c
  9440  000592  D05D               	goto	l7190
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;cmd_consol.c: 190: printf("uid = %d, ", uid);
  9444  000594  0E2F               	movlw	low STR_42
  9445  000596  6E1E               	movwf	printf@f,c
  9446  000598  0EFF               	movlw	high STR_42
  9447  00059A  6E1F               	movwf	printf@f+1,c
  9448  00059C  C0E0  F020         	movff	parse_cmd_str@uid,?_printf+2
  9449  0005A0  6A21               	clrf	?_printf+3,c
  9450  0005A2  EC48  F012         	call	_printf	;wreg free
  9451                           
  9452                           ;cmd_consol.c: 191: cmd_data.uid = uid;
  9453  0005A6  C0E0  F086         	movff	parse_cmd_str@uid,_cmd_data
  9454                           
  9455                           ;cmd_consol.c: 192: temp = strtok((0), ",");
  9456  0005AA  0E00               	movlw	0
  9457  0005AC  6E1D               	movwf	strtok@s1,c
  9458  0005AE  0E00               	movlw	0
  9459  0005B0  6E1E               	movwf	strtok@s1+1,c
  9460  0005B2  0EFC               	movlw	low STR_43
  9461  0005B4  6E1F               	movwf	strtok@s2,c
  9462  0005B6  0EFF               	movlw	high STR_43
  9463  0005B8  6E20               	movwf	strtok@s2+1,c
  9464  0005BA  EC3A  F017         	call	_strtok	;wreg free
  9465  0005BE  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9466  0005C2  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9467                           
  9468                           ;cmd_consol.c: 193: if (temp != (0)) {
  9469  0005C6  0100               	movlb	0	; () banked
  9470  0005C8  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9471  0005CA  0100               	movlb	0	; () banked
  9472  0005CC  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9473  0005CE  B4D8               	btfsc	status,2,c
  9474  0005D0  EFC4  F007         	goto	l7494
  9475                           
  9476                           ; BSR set to: 0
  9477                           ;cmd_consol.c: 194: printf("str = %s\r\n", temp);
  9478  0005D4  0E24               	movlw	low STR_44
  9479  0005D6  6E1E               	movwf	printf@f,c
  9480  0005D8  0EFF               	movlw	high STR_44
  9481  0005DA  6E1F               	movwf	printf@f+1,c
  9482  0005DC  C0E6  F020         	movff	parse_cmd_str@temp,?_printf+2
  9483  0005E0  C0E7  F021         	movff	parse_cmd_str@temp+1,?_printf+3
  9484  0005E4  EC48  F012         	call	_printf	;wreg free
  9485                           
  9486                           ;cmd_consol.c: 195: if (strlen(temp) < 40) {
  9487  0005E8  C0E6  F01E         	movff	parse_cmd_str@temp,strlen@s
  9488  0005EC  C0E7  F01F         	movff	parse_cmd_str@temp+1,strlen@s+1
  9489  0005F0  EC2E  F01A         	call	_strlen	;wreg free
  9490  0005F4  501F               	movf	?_strlen+1,w,c
  9491  0005F6  E129               	bnz	l7186
  9492  0005F8  0E28               	movlw	40
  9493  0005FA  5C1E               	subwf	?_strlen,w,c
  9494  0005FC  B0D8               	btfsc	status,0,c
  9495  0005FE  D025               	goto	l7186
  9496                           
  9497                           ;cmd_consol.c: 196: strcpy(cmd_data.data, temp);
  9498  000600  0E87               	movlw	low (_cmd_data+1)
  9499  000602  6E10               	movwf	strcpy@to,c
  9500  000604  0E00               	movlw	high (_cmd_data+1)
  9501  000606  6E11               	movwf	strcpy@to+1,c
  9502  000608  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
  9503  00060C  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9504  000610  EC40  F01B         	call	_strcpy	;wreg free
  9505                           
  9506                           ;cmd_consol.c: 197: valid_cmd = 1;
  9507  000614  0E01               	movlw	1
  9508  000616  0100               	movlb	0	; () banked
  9509  000618  6F84               	movwf	_valid_cmd& (0+255),b
  9510                           
  9511                           ; BSR set to: 0
  9512                           ;cmd_consol.c: 198: cmd_data.data_set = 1;
  9513  00061A  0E01               	movlw	1
  9514  00061C  0100               	movlb	0	; () banked
  9515  00061E  6FAF               	movwf	(_cmd_data+41)& (0+255),b
  9516                           
  9517                           ; BSR set to: 0
  9518                           ;cmd_consol.c: 199: memset(str, 0, strlen(str));
  9519  000620  C03A  F024         	movff	parse_cmd_str@str,memset@p1
  9520  000624  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9521  000628  0E00               	movlw	0
  9522  00062A  6E27               	movwf	memset@c+1,c
  9523  00062C  0E00               	movlw	0
  9524  00062E  6E26               	movwf	memset@c,c
  9525  000630  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
  9526  000634  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9527  000638  EC2E  F01A         	call	_strlen	;wreg free
  9528  00063C  C01E  F028         	movff	?_strlen,memset@n
  9529  000640  C01F  F029         	movff	?_strlen+1,memset@n+1
  9530  000644  EC63  F01B         	call	_memset	;wreg free
  9531  000648  D588               	goto	l7036
  9532  00064A                     l7186:
  9533                           
  9534                           ;cmd_consol.c: 202: return 2;
  9535  00064A  0E02               	movlw	2
  9536  00064C  0012               	return	
  9537  00064E                     l7190:
  9538                           
  9539                           ;cmd_consol.c: 206: return 7;
  9540  00064E  0E07               	movlw	7
  9541  000650  0012               	return	
  9542  000652                     l7194:
  9543  000652  C0E4  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9544  000656  C0E5  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9545  00065A  0E8A               	movlw	low STR_45
  9546  00065C  6E2F               	movwf	strstr@s2,c
  9547  00065E  0EFF               	movlw	high STR_45
  9548  000660  6E30               	movwf	strstr@s2+1,c
  9549  000662  ECF3  F017         	call	_strstr	;wreg free
  9550  000666  C02D  F0E6         	movff	?_strstr,parse_cmd_str@temp
  9551  00066A  C02E  F0E7         	movff	?_strstr+1,parse_cmd_str@temp+1
  9552  00066E  0100               	movlb	0	; () banked
  9553  000670  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9554  000672  0100               	movlb	0	; () banked
  9555  000674  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9556  000676  B4D8               	btfsc	status,2,c
  9557  000678  D130               	goto	l7276
  9558                           
  9559                           ; BSR set to: 0
  9560                           ;cmd_consol.c: 212: printf("%s...4\r\n", temp);
  9561  00067A  0E44               	movlw	low STR_46
  9562  00067C  6E1E               	movwf	printf@f,c
  9563  00067E  0EFF               	movlw	high STR_46
  9564  000680  6E1F               	movwf	printf@f+1,c
  9565  000682  C0E6  F020         	movff	parse_cmd_str@temp,?_printf+2
  9566  000686  C0E7  F021         	movff	parse_cmd_str@temp+1,?_printf+3
  9567  00068A  EC48  F012         	call	_printf	;wreg free
  9568                           
  9569                           ;cmd_consol.c: 213: if (clcd_config_data.init_done == 1) {
  9570  00068E  0449               	decf	_clcd_config_data,w,c
  9571  000690  A4D8               	btfss	status,2,c
  9572  000692  EFC4  F007         	goto	l7494
  9573                           
  9574                           ;cmd_consol.c: 214: cmd_data.scroll_set = 0;
  9575  000696  0E00               	movlw	0
  9576  000698  0100               	movlb	0	; () banked
  9577  00069A  6FB6               	movwf	(_cmd_data+48)& (0+255),b
  9578                           
  9579                           ; BSR set to: 0
  9580                           ;cmd_consol.c: 215: temp = strtok(ptr, "-', /=");
  9581  00069C  C0E4  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9582  0006A0  C0E5  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9583  0006A4  0EA7               	movlw	low STR_24
  9584  0006A6  6E1F               	movwf	strtok@s2,c
  9585  0006A8  0EFF               	movlw	high STR_24
  9586  0006AA  6E20               	movwf	strtok@s2+1,c
  9587  0006AC  EC3A  F017         	call	_strtok	;wreg free
  9588  0006B0  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9589  0006B4  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9590                           
  9591                           ;cmd_consol.c: 216: if (temp != (0)) {
  9592  0006B8  0100               	movlb	0	; () banked
  9593  0006BA  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9594  0006BC  0100               	movlb	0	; () banked
  9595  0006BE  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9596  0006C0  B4D8               	btfsc	status,2,c
  9597  0006C2  EFC4  F007         	goto	l7494
  9598                           
  9599                           ; BSR set to: 0
  9600                           ;cmd_consol.c: 217: strcpy(CMD, temp);
  9601  0006C6  0ECC               	movlw	low _CMD
  9602  0006C8  6E10               	movwf	strcpy@to,c
  9603  0006CA  0E00               	movlw	high _CMD
  9604  0006CC  6E11               	movwf	strcpy@to+1,c
  9605  0006CE  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
  9606  0006D2  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9607  0006D6  EC40  F01B         	call	_strcpy	;wreg free
  9608                           
  9609                           ;cmd_consol.c: 218: char scroll = 0;
  9610  0006DA  0E00               	movlw	0
  9611  0006DC  0100               	movlb	0	; () banked
  9612  0006DE  6FE1               	movwf	parse_cmd_str@scroll& (0+255),b
  9613                           
  9614                           ; BSR set to: 0
  9615                           ;cmd_consol.c: 219: char uid = 0;
  9616  0006E0  0E00               	movlw	0
  9617  0006E2  0100               	movlb	0	; () banked
  9618  0006E4  6FE2               	movwf	parse_cmd_str@uid_1697& (0+255),b
  9619                           
  9620                           ;cmd_consol.c: 220: temp = strtok((0), "-', /=");
  9621  0006E6  0E00               	movlw	0
  9622  0006E8  6E1D               	movwf	strtok@s1,c
  9623  0006EA  0E00               	movlw	0
  9624  0006EC  6E1E               	movwf	strtok@s1+1,c
  9625  0006EE  0EA7               	movlw	low STR_24
  9626  0006F0  6E1F               	movwf	strtok@s2,c
  9627  0006F2  0EFF               	movlw	high STR_24
  9628  0006F4  6E20               	movwf	strtok@s2+1,c
  9629  0006F6  EC3A  F017         	call	_strtok	;wreg free
  9630  0006FA  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9631  0006FE  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9632                           
  9633                           ;cmd_consol.c: 221: if (temp != (0)) {
  9634  000702  0100               	movlb	0	; () banked
  9635  000704  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9636  000706  0100               	movlb	0	; () banked
  9637  000708  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9638  00070A  B4D8               	btfsc	status,2,c
  9639  00070C  EFC4  F007         	goto	l7494
  9640                           
  9641                           ; BSR set to: 0
  9642                           ;cmd_consol.c: 222: printf("%s...5\r\n", temp);
  9643  000710  0E4D               	movlw	low STR_49
  9644  000712  6E1E               	movwf	printf@f,c
  9645  000714  0EFF               	movlw	high STR_49
  9646  000716  6E1F               	movwf	printf@f+1,c
  9647  000718  C0E6  F020         	movff	parse_cmd_str@temp,?_printf+2
  9648  00071C  C0E7  F021         	movff	parse_cmd_str@temp+1,?_printf+3
  9649  000720  EC48  F012         	call	_printf	;wreg free
  9650                           
  9651                           ;cmd_consol.c: 223: char i = 0;
  9652  000724  0E00               	movlw	0
  9653  000726  0100               	movlb	0	; () banked
  9654  000728  6FDF               	movwf	parse_cmd_str@i_1700& (0+255),b
  9655                           
  9656                           ; BSR set to: 0
  9657                           ;cmd_consol.c: 224: uid = temp[0];
  9658  00072A  C0E6  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9659  00072E  C0E7  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9660  000732  0E00               	movlw	low (__mediumconst shr (0+16))
  9661  000734  6EF8               	movwf	tblptru,c
  9662  000736  0E0F               	movlw	(high __ramtop+-1)
  9663  000738  64F7               	cpfsgt	tblptrh,c
  9664  00073A  D003               	bra	u7547
  9665  00073C  0008               	tblrd		*
  9666  00073E  50F5               	movf	tablat,w,c
  9667  000740  D005               	bra	u7540
  9668  000742                     u7547:
  9669  000742  CFF6 FFE9          	movff	tblptrl,fsr0l
  9670  000746  CFF7 FFEA          	movff	tblptrh,fsr0h
  9671  00074A  50EF               	movf	indf0,w,c
  9672  00074C                     u7540:
  9673  00074C  0100               	movlb	0	; () banked
  9674  00074E  6FE2               	movwf	parse_cmd_str@uid_1697& (0+255),b
  9675                           
  9676                           ; BSR set to: 0
  9677                           ;cmd_consol.c: 225: cmd_data.scroll = -1;
  9678  000750  0100               	movlb	0	; () banked
  9679  000752  69B5               	setf	(_cmd_data+47)& (0+255),b
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;cmd_consol.c: 226: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9683  000754  0E40               	movlw	64
  9684  000756  0100               	movlb	0	; () banked
  9685  000758  65E2               	cpfsgt	parse_cmd_str@uid_1697& (0+255),b
  9686  00075A  D0BD               	goto	l7272
  9687                           
  9688                           ; BSR set to: 0
  9689  00075C  504C               	movf	_clcd_config_data+3,w,c
  9690  00075E  0100               	movlb	0	; () banked
  9691  000760  5DE2               	subwf	parse_cmd_str@uid_1697& (0+255),w,b
  9692  000762  B0D8               	btfsc	status,0,c
  9693  000764  D0B8               	goto	l7272
  9694                           
  9695                           ; BSR set to: 0
  9696                           ;cmd_consol.c: 227: printf("uid = %d, ", uid);
  9697  000766  0E2F               	movlw	low STR_42
  9698  000768  6E1E               	movwf	printf@f,c
  9699  00076A  0EFF               	movlw	high STR_42
  9700  00076C  6E1F               	movwf	printf@f+1,c
  9701  00076E  C0E2  F020         	movff	parse_cmd_str@uid_1697,?_printf+2
  9702  000772  6A21               	clrf	?_printf+3,c
  9703  000774  EC48  F012         	call	_printf	;wreg free
  9704                           
  9705                           ;cmd_consol.c: 228: if (uid == cmd_data.uid) {
  9706  000778  0100               	movlb	0	; () banked
  9707  00077A  51E2               	movf	parse_cmd_str@uid_1697& (0+255),w,b
  9708  00077C  0100               	movlb	0	; () banked
  9709  00077E  1986               	xorwf	_cmd_data& (0+255),w,b
  9710  000780  A4D8               	btfss	status,2,c
  9711  000782  EFC4  F007         	goto	l7494
  9712                           
  9713                           ; BSR set to: 0
  9714                           ;cmd_consol.c: 229: temp = strtok((0), "-', /=");
  9715  000786  0E00               	movlw	0
  9716  000788  6E1D               	movwf	strtok@s1,c
  9717  00078A  0E00               	movlw	0
  9718  00078C  6E1E               	movwf	strtok@s1+1,c
  9719  00078E  0EA7               	movlw	low STR_24
  9720  000790  6E1F               	movwf	strtok@s2,c
  9721  000792  0EFF               	movlw	high STR_24
  9722  000794  6E20               	movwf	strtok@s2+1,c
  9723  000796  EC3A  F017         	call	_strtok	;wreg free
  9724  00079A  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9725  00079E  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9726                           
  9727                           ;cmd_consol.c: 230: if (temp != (0)) {
  9728  0007A2  0100               	movlb	0	; () banked
  9729  0007A4  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9730  0007A6  0100               	movlb	0	; () banked
  9731  0007A8  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9732  0007AA  B4D8               	btfsc	status,2,c
  9733  0007AC  D3ED               	goto	l7494
  9734                           
  9735                           ; BSR set to: 0
  9736                           ;cmd_consol.c: 231: printf("%s...6\r\n", temp);
  9737  0007AE  0E56               	movlw	low STR_52
  9738  0007B0  6E1E               	movwf	printf@f,c
  9739  0007B2  0EFF               	movlw	high STR_52
  9740  0007B4  6E1F               	movwf	printf@f+1,c
  9741  0007B6  C0E6  F020         	movff	parse_cmd_str@temp,?_printf+2
  9742  0007BA  C0E7  F021         	movff	parse_cmd_str@temp+1,?_printf+3
  9743  0007BE  EC48  F012         	call	_printf	;wreg free
  9744                           
  9745                           ;cmd_consol.c: 232: for (i = 0; i < strlen(temp); i++) {
  9746  0007C2  0E00               	movlw	0
  9747  0007C4  0100               	movlb	0	; () banked
  9748  0007C6  6FDF               	movwf	parse_cmd_str@i_1700& (0+255),b
  9749  0007C8  D04A               	goto	l7248
  9750  0007CA                     l7238:
  9751                           
  9752                           ; BSR set to: 0
  9753                           ;cmd_consol.c: 233: if (isdigit(temp[i]) == 1) {
  9754  0007CA  0100               	movlb	0	; () banked
  9755  0007CC  51DF               	movf	parse_cmd_str@i_1700& (0+255),w,b
  9756  0007CE  0D01               	mullw	1
  9757  0007D0  C0E6  F03C         	movff	parse_cmd_str@temp,??_parse_cmd_str
  9758  0007D4  C0E7  F03D         	movff	parse_cmd_str@temp+1,??_parse_cmd_str+1
  9759  0007D8  50F3               	movf	prodl,w,c
  9760  0007DA  263C               	addwf	??_parse_cmd_str,f,c
  9761  0007DC  50F4               	movf	prodh,w,c
  9762  0007DE  223D               	addwfc	??_parse_cmd_str+1,f,c
  9763  0007E0  C03C  FFF6         	movff	??_parse_cmd_str,tblptrl
  9764  0007E4  C03D  FFF7         	movff	??_parse_cmd_str+1,tblptrh
  9765  0007E8  0E00               	movlw	low (__mediumconst shr (0+16))
  9766  0007EA  6EF8               	movwf	tblptru,c
  9767  0007EC  0E0F               	movlw	(high __ramtop+-1)
  9768  0007EE  64F7               	cpfsgt	tblptrh,c
  9769  0007F0  D003               	bra	u7597
  9770  0007F2  0008               	tblrd		*
  9771  0007F4  50F5               	movf	tablat,w,c
  9772  0007F6  D005               	bra	u7590
  9773  0007F8                     u7597:
  9774  0007F8  CFF6 FFE9          	movff	tblptrl,fsr0l
  9775  0007FC  CFF7 FFEA          	movff	tblptrh,fsr0h
  9776  000800  50EF               	movf	indf0,w,c
  9777  000802                     u7590:
  9778  000802  EC3D  F01D         	call	_isdigit
  9779  000806  A0D8               	btfss	status,0,c
  9780  000808  D026               	goto	l7242
  9781                           
  9782                           ;cmd_consol.c: 234: scroll = scroll * 10 + (temp[i] - '0');
  9783  00080A  0100               	movlb	0	; () banked
  9784  00080C  51DF               	movf	parse_cmd_str@i_1700& (0+255),w,b
  9785  00080E  0D01               	mullw	1
  9786  000810  C0E6  F03C         	movff	parse_cmd_str@temp,??_parse_cmd_str
  9787  000814  C0E7  F03D         	movff	parse_cmd_str@temp+1,??_parse_cmd_str+1
  9788  000818  50F3               	movf	prodl,w,c
  9789  00081A  263C               	addwf	??_parse_cmd_str,f,c
  9790  00081C  50F4               	movf	prodh,w,c
  9791  00081E  223D               	addwfc	??_parse_cmd_str+1,f,c
  9792  000820  C03C  FFF6         	movff	??_parse_cmd_str,tblptrl
  9793  000824  C03D  FFF7         	movff	??_parse_cmd_str+1,tblptrh
  9794  000828  0E00               	movlw	low (__mediumconst shr (0+16))
  9795  00082A  6EF8               	movwf	tblptru,c
  9796  00082C  0E0F               	movlw	(high __ramtop+-1)
  9797  00082E  64F7               	cpfsgt	tblptrh,c
  9798  000830  D003               	bra	u7617
  9799  000832  0008               	tblrd		*
  9800  000834  50F5               	movf	tablat,w,c
  9801  000836  D005               	bra	u7610
  9802  000838                     u7617:
  9803  000838  CFF6 FFE9          	movff	tblptrl,fsr0l
  9804  00083C  CFF7 FFEA          	movff	tblptrh,fsr0h
  9805  000840  50EF               	movf	indf0,w,c
  9806  000842                     u7610:
  9807  000842  6E3E               	movwf	(??_parse_cmd_str+2)& (0+255),c
  9808  000844  0100               	movlb	0	; () banked
  9809  000846  51E1               	movf	parse_cmd_str@scroll& (0+255),w,b
  9810  000848  0D0A               	mullw	10
  9811  00084A  50F3               	movf	prodl,w,c
  9812  00084C  243E               	addwf	??_parse_cmd_str+2,w,c
  9813  00084E  0FD0               	addlw	208
  9814  000850  0100               	movlb	0	; () banked
  9815  000852  6FE1               	movwf	parse_cmd_str@scroll& (0+255),b
  9816                           
  9817                           ;cmd_consol.c: 235: } else {
  9818  000854  D002               	goto	l7246
  9819  000856                     l7242:
  9820                           
  9821                           ;cmd_consol.c: 237: return 0;
  9822  000856  0E00               	movlw	0
  9823  000858  0012               	return	
  9824  00085A                     l7246:
  9825  00085A  0100               	movlb	0	; () banked
  9826  00085C  2BDF               	incf	parse_cmd_str@i_1700& (0+255),f,b
  9827  00085E                     l7248:
  9828                           
  9829                           ; BSR set to: 0
  9830  00085E  C0E6  F01E         	movff	parse_cmd_str@temp,strlen@s
  9831  000862  C0E7  F01F         	movff	parse_cmd_str@temp+1,strlen@s+1
  9832  000866  EC2E  F01A         	call	_strlen	;wreg free
  9833  00086A  0100               	movlb	0	; () banked
  9834  00086C  51DF               	movf	parse_cmd_str@i_1700& (0+255),w,b
  9835  00086E  6E3C               	movwf	??_parse_cmd_str& (0+255),c
  9836  000870  6A3D               	clrf	(??_parse_cmd_str+1)& (0+255),c
  9837  000872  501E               	movf	?_strlen,w,c
  9838  000874  5C3C               	subwf	??_parse_cmd_str,w,c
  9839  000876  501F               	movf	?_strlen+1,w,c
  9840  000878  583D               	subwfb	??_parse_cmd_str+1,w,c
  9841  00087A  A0D8               	btfss	status,0,c
  9842  00087C  D7A6               	goto	l7238
  9843                           
  9844                           ; BSR set to: 0
  9845                           ;cmd_consol.c: 238: }
  9846                           ;cmd_consol.c: 239: }
  9847                           ;cmd_consol.c: 241: if (scroll < 3) {
  9848                           
  9849                           ; BSR set to: 0
  9850  00087E  0E03               	movlw	3
  9851  000880  0100               	movlb	0	; () banked
  9852  000882  61E1               	cpfslt	parse_cmd_str@scroll& (0+255),b
  9853  000884  D026               	goto	l7268
  9854                           
  9855                           ; BSR set to: 0
  9856                           ;cmd_consol.c: 242: printf("scroll = %d, ", scroll);
  9857  000886  0E7B               	movlw	low STR_53
  9858  000888  6E1E               	movwf	printf@f,c
  9859  00088A  0EFE               	movlw	high STR_53
  9860  00088C  6E1F               	movwf	printf@f+1,c
  9861  00088E  C0E1  F020         	movff	parse_cmd_str@scroll,?_printf+2
  9862  000892  6A21               	clrf	?_printf+3,c
  9863  000894  EC48  F012         	call	_printf	;wreg free
  9864                           
  9865                           ;cmd_consol.c: 243: cmd_data.scroll = scroll;
  9866  000898  C0E1  F0B5         	movff	parse_cmd_str@scroll,_cmd_data+47
  9867                           
  9868                           ;cmd_consol.c: 244: cmd_data.scroll_set = 1;
  9869  00089C  0E01               	movlw	1
  9870  00089E  0100               	movlb	0	; () banked
  9871  0008A0  6FB6               	movwf	(_cmd_data+48)& (0+255),b
  9872                           
  9873                           ; BSR set to: 0
  9874                           ;cmd_consol.c: 245: valid_cmd = 1;
  9875  0008A2  0E01               	movlw	1
  9876  0008A4  0100               	movlb	0	; () banked
  9877  0008A6  6F84               	movwf	_valid_cmd& (0+255),b
  9878                           
  9879                           ; BSR set to: 0
  9880                           ;cmd_consol.c: 246: memset(str, 0, strlen(str));
  9881  0008A8  C03A  F024         	movff	parse_cmd_str@str,memset@p1
  9882  0008AC  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9883  0008B0  0E00               	movlw	0
  9884  0008B2  6E27               	movwf	memset@c+1,c
  9885  0008B4  0E00               	movlw	0
  9886  0008B6  6E26               	movwf	memset@c,c
  9887  0008B8  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
  9888  0008BC  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9889  0008C0  EC2E  F01A         	call	_strlen	;wreg free
  9890  0008C4  C01E  F028         	movff	?_strlen,memset@n
  9891  0008C8  C01F  F029         	movff	?_strlen+1,memset@n+1
  9892  0008CC  EC63  F01B         	call	_memset	;wreg free
  9893  0008D0  D444               	goto	l7036
  9894  0008D2                     l7268:
  9895                           
  9896                           ;cmd_consol.c: 249: return 4;
  9897  0008D2  0E04               	movlw	4
  9898  0008D4  0012               	return	
  9899  0008D6                     l7272:
  9900                           
  9901                           ;cmd_consol.c: 254: return 7;
  9902  0008D6  0E07               	movlw	7
  9903  0008D8  0012               	return	
  9904  0008DA                     l7276:
  9905  0008DA  C0E4  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9906  0008DE  C0E5  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9907  0008E2  0EAE               	movlw	low STR_54
  9908  0008E4  6E2F               	movwf	strstr@s2,c
  9909  0008E6  0EFF               	movlw	high STR_54
  9910  0008E8  6E30               	movwf	strstr@s2+1,c
  9911  0008EA  ECF3  F017         	call	_strstr	;wreg free
  9912  0008EE  C02D  F0E6         	movff	?_strstr,parse_cmd_str@temp
  9913  0008F2  C02E  F0E7         	movff	?_strstr+1,parse_cmd_str@temp+1
  9914  0008F6  0100               	movlb	0	; () banked
  9915  0008F8  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9916  0008FA  0100               	movlb	0	; () banked
  9917  0008FC  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9918  0008FE  B4D8               	btfsc	status,2,c
  9919  000900  D145               	goto	l7366
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;cmd_consol.c: 260: if (clcd_config_data.init_done == 1) {
  9923  000902  0449               	decf	_clcd_config_data,w,c
  9924  000904  A4D8               	btfss	status,2,c
  9925  000906  D340               	goto	l7494
  9926                           
  9927                           ; BSR set to: 0
  9928                           ;cmd_consol.c: 261: cmd_data.row_col_set = 0;
  9929  000908  0E00               	movlw	0
  9930  00090A  0100               	movlb	0	; () banked
  9931  00090C  6FB4               	movwf	(_cmd_data+46)& (0+255),b
  9932                           
  9933                           ; BSR set to: 0
  9934                           ;cmd_consol.c: 262: temp = strtok(ptr, "-', /=");
  9935  00090E  C0E4  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9936  000912  C0E5  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9937  000916  0EA7               	movlw	low STR_24
  9938  000918  6E1F               	movwf	strtok@s2,c
  9939  00091A  0EFF               	movlw	high STR_24
  9940  00091C  6E20               	movwf	strtok@s2+1,c
  9941  00091E  EC3A  F017         	call	_strtok	;wreg free
  9942  000922  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9943  000926  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9944                           
  9945                           ;cmd_consol.c: 263: if (temp != (0)) {
  9946  00092A  0100               	movlb	0	; () banked
  9947  00092C  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9948  00092E  0100               	movlb	0	; () banked
  9949  000930  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9950  000932  B4D8               	btfsc	status,2,c
  9951  000934  D329               	goto	l7494
  9952                           
  9953                           ; BSR set to: 0
  9954                           ;cmd_consol.c: 264: strcpy(CMD, temp);
  9955  000936  0ECC               	movlw	low _CMD
  9956  000938  6E10               	movwf	strcpy@to,c
  9957  00093A  0E00               	movlw	high _CMD
  9958  00093C  6E11               	movwf	strcpy@to+1,c
  9959  00093E  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
  9960  000942  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9961  000946  EC40  F01B         	call	_strcpy	;wreg free
  9962                           
  9963                           ;cmd_consol.c: 265: temp = strtok((0), "-', /=");
  9964  00094A  0E00               	movlw	0
  9965  00094C  6E1D               	movwf	strtok@s1,c
  9966  00094E  0E00               	movlw	0
  9967  000950  6E1E               	movwf	strtok@s1+1,c
  9968  000952  0EA7               	movlw	low STR_24
  9969  000954  6E1F               	movwf	strtok@s2,c
  9970  000956  0EFF               	movlw	high STR_24
  9971  000958  6E20               	movwf	strtok@s2+1,c
  9972  00095A  EC3A  F017         	call	_strtok	;wreg free
  9973  00095E  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
  9974  000962  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
  9975                           
  9976                           ;cmd_consol.c: 266: char uid = 0;
  9977  000966  0E00               	movlw	0
  9978  000968  0100               	movlb	0	; () banked
  9979  00096A  6FE3               	movwf	parse_cmd_str@uid_1708& (0+255),b
  9980                           
  9981                           ; BSR set to: 0
  9982                           ;cmd_consol.c: 267: if (temp != (0)) {
  9983  00096C  0100               	movlb	0	; () banked
  9984  00096E  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
  9985  000970  0100               	movlb	0	; () banked
  9986  000972  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9987  000974  B4D8               	btfsc	status,2,c
  9988  000976  D308               	goto	l7494
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;cmd_consol.c: 268: char i = 0;
  9992  000978  0E00               	movlw	0
  9993  00097A  0100               	movlb	0	; () banked
  9994  00097C  6FDC               	movwf	parse_cmd_str@i_1709& (0+255),b
  9995                           
  9996                           ; BSR set to: 0
  9997                           ;cmd_consol.c: 269: uid = temp[0];
  9998  00097E  C0E6  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9999  000982  C0E7  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
 10000  000986  0E00               	movlw	low (__mediumconst shr (0+16))
 10001  000988  6EF8               	movwf	tblptru,c
 10002  00098A  0E0F               	movlw	(high __ramtop+-1)
 10003  00098C  64F7               	cpfsgt	tblptrh,c
 10004  00098E  D003               	bra	u7687
 10005  000990  0008               	tblrd		*
 10006  000992  50F5               	movf	tablat,w,c
 10007  000994  D005               	bra	u7680
 10008  000996                     u7687:
 10009  000996  CFF6 FFE9          	movff	tblptrl,fsr0l
 10010  00099A  CFF7 FFEA          	movff	tblptrh,fsr0h
 10011  00099E  50EF               	movf	indf0,w,c
 10012  0009A0                     u7680:
 10013  0009A0  0100               	movlb	0	; () banked
 10014  0009A2  6FE3               	movwf	parse_cmd_str@uid_1708& (0+255),b
 10015                           
 10016                           ; BSR set to: 0
 10017                           ;cmd_consol.c: 270: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
 10018  0009A4  0E40               	movlw	64
 10019  0009A6  0100               	movlb	0	; () banked
 10020  0009A8  65E3               	cpfsgt	parse_cmd_str@uid_1708& (0+255),b
 10021  0009AA  D0EE               	goto	l7362
 10022                           
 10023                           ; BSR set to: 0
 10024  0009AC  504C               	movf	_clcd_config_data+3,w,c
 10025  0009AE  0100               	movlb	0	; () banked
 10026  0009B0  5DE3               	subwf	parse_cmd_str@uid_1708& (0+255),w,b
 10027  0009B2  B0D8               	btfsc	status,0,c
 10028  0009B4  D0E9               	goto	l7362
 10029                           
 10030                           ; BSR set to: 0
 10031                           ;cmd_consol.c: 271: printf("uid = %d,\r\n", uid);
 10032  0009B6  0E96               	movlw	low STR_57
 10033  0009B8  6E1E               	movwf	printf@f,c
 10034  0009BA  0EFE               	movlw	high STR_57
 10035  0009BC  6E1F               	movwf	printf@f+1,c
 10036  0009BE  C0E3  F020         	movff	parse_cmd_str@uid_1708,?_printf+2
 10037  0009C2  6A21               	clrf	?_printf+3,c
 10038  0009C4  EC48  F012         	call	_printf	;wreg free
 10039                           
 10040                           ;cmd_consol.c: 272: if (uid == cmd_data.uid) {
 10041  0009C8  0100               	movlb	0	; () banked
 10042  0009CA  51E3               	movf	parse_cmd_str@uid_1708& (0+255),w,b
 10043  0009CC  0100               	movlb	0	; () banked
 10044  0009CE  1986               	xorwf	_cmd_data& (0+255),w,b
 10045  0009D0  A4D8               	btfss	status,2,c
 10046  0009D2  D2DA               	goto	l7494
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;cmd_consol.c: 273: temp = strtok((0), "-', /=");
 10050  0009D4  0E00               	movlw	0
 10051  0009D6  6E1D               	movwf	strtok@s1,c
 10052  0009D8  0E00               	movlw	0
 10053  0009DA  6E1E               	movwf	strtok@s1+1,c
 10054  0009DC  0EA7               	movlw	low STR_24
 10055  0009DE  6E1F               	movwf	strtok@s2,c
 10056  0009E0  0EFF               	movlw	high STR_24
 10057  0009E2  6E20               	movwf	strtok@s2+1,c
 10058  0009E4  EC3A  F017         	call	_strtok	;wreg free
 10059  0009E8  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10060  0009EC  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10061                           
 10062                           ;cmd_consol.c: 274: if (temp != (0)) {
 10063  0009F0  0100               	movlb	0	; () banked
 10064  0009F2  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10065  0009F4  0100               	movlb	0	; () banked
 10066  0009F6  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10067  0009F8  B4D8               	btfsc	status,2,c
 10068  0009FA  D2C6               	goto	l7494
 10069                           
 10070                           ; BSR set to: 0
 10071                           ;cmd_consol.c: 275: collect_row(temp, &cmd_data.start_row);
 10072  0009FC  C0E6  F030         	movff	parse_cmd_str@temp,collect_row@str
 10073  000A00  C0E7  F031         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10074  000A04  0EB0               	movlw	low (_cmd_data+42)
 10075  000A06  6E32               	movwf	collect_row@data_row,c
 10076  000A08  0E00               	movlw	high (_cmd_data+42)
 10077  000A0A  6E33               	movwf	collect_row@data_row+1,c
 10078  000A0C  EC91  F014         	call	_collect_row	;wreg free
 10079                           
 10080                           ;cmd_consol.c: 276: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 10081  000A10  0E35               	movlw	low STR_59
 10082  000A12  6E1E               	movwf	printf@f,c
 10083  000A14  0EFD               	movlw	high STR_59
 10084  000A16  6E1F               	movwf	printf@f+1,c
 10085  000A18  C0B0  F020         	movff	_cmd_data+42,?_printf+2
 10086  000A1C  6A21               	clrf	?_printf+3,c
 10087  000A1E  EC48  F012         	call	_printf	;wreg free
 10088                           
 10089                           ;cmd_consol.c: 277: if (cmd_data.start_row != 255) {
 10090  000A22  0100               	movlb	0	; () banked
 10091  000A24  29B0               	incf	(_cmd_data+42)& (0+255),w,b
 10092  000A26  B4D8               	btfsc	status,2,c
 10093  000A28  D0AD               	goto	l7358
 10094                           
 10095                           ; BSR set to: 0
 10096                           ;cmd_consol.c: 278: temp = strtok((0), "-', /=");
 10097  000A2A  0E00               	movlw	0
 10098  000A2C  6E1D               	movwf	strtok@s1,c
 10099  000A2E  0E00               	movlw	0
 10100  000A30  6E1E               	movwf	strtok@s1+1,c
 10101  000A32  0EA7               	movlw	low STR_24
 10102  000A34  6E1F               	movwf	strtok@s2,c
 10103  000A36  0EFF               	movlw	high STR_24
 10104  000A38  6E20               	movwf	strtok@s2+1,c
 10105  000A3A  EC3A  F017         	call	_strtok	;wreg free
 10106  000A3E  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10107  000A42  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10108                           
 10109                           ;cmd_consol.c: 279: if (temp != (0)) {
 10110  000A46  0100               	movlb	0	; () banked
 10111  000A48  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10112  000A4A  0100               	movlb	0	; () banked
 10113  000A4C  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10114  000A4E  B4D8               	btfsc	status,2,c
 10115  000A50  D29B               	goto	l7494
 10116                           
 10117                           ; BSR set to: 0
 10118                           ;cmd_consol.c: 280: collect_column(temp, &cmd_data.start_col);
 10119  000A52  C0E6  F030         	movff	parse_cmd_str@temp,collect_column@str
 10120  000A56  C0E7  F031         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10121  000A5A  0EB1               	movlw	low (_cmd_data+43)
 10122  000A5C  6E32               	movwf	collect_column@data_column,c
 10123  000A5E  0E00               	movlw	high (_cmd_data+43)
 10124  000A60  6E33               	movwf	collect_column@data_column+1,c
 10125  000A62  EC08  F015         	call	_collect_column	;wreg free
 10126                           
 10127                           ;cmd_consol.c: 281: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 10128  000A66  0E1A               	movlw	low STR_61
 10129  000A68  6E1E               	movwf	printf@f,c
 10130  000A6A  0EFD               	movlw	high STR_61
 10131  000A6C  6E1F               	movwf	printf@f+1,c
 10132  000A6E  C0B1  F020         	movff	_cmd_data+43,?_printf+2
 10133  000A72  6A21               	clrf	?_printf+3,c
 10134  000A74  EC48  F012         	call	_printf	;wreg free
 10135                           
 10136                           ;cmd_consol.c: 282: if (cmd_data.start_row != 255) {
 10137  000A78  0100               	movlb	0	; () banked
 10138  000A7A  29B0               	incf	(_cmd_data+42)& (0+255),w,b
 10139  000A7C  B4D8               	btfsc	status,2,c
 10140  000A7E  D080               	goto	l7354
 10141                           
 10142                           ; BSR set to: 0
 10143                           ;cmd_consol.c: 283: temp = strtok((0), "-', /=");
 10144  000A80  0E00               	movlw	0
 10145  000A82  6E1D               	movwf	strtok@s1,c
 10146  000A84  0E00               	movlw	0
 10147  000A86  6E1E               	movwf	strtok@s1+1,c
 10148  000A88  0EA7               	movlw	low STR_24
 10149  000A8A  6E1F               	movwf	strtok@s2,c
 10150  000A8C  0EFF               	movlw	high STR_24
 10151  000A8E  6E20               	movwf	strtok@s2+1,c
 10152  000A90  EC3A  F017         	call	_strtok	;wreg free
 10153  000A94  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10154  000A98  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10155                           
 10156                           ;cmd_consol.c: 284: if (temp != (0)) {
 10157  000A9C  0100               	movlb	0	; () banked
 10158  000A9E  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10159  000AA0  0100               	movlb	0	; () banked
 10160  000AA2  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10161  000AA4  B4D8               	btfsc	status,2,c
 10162  000AA6  D270               	goto	l7494
 10163                           
 10164                           ; BSR set to: 0
 10165                           ;cmd_consol.c: 285: collect_row(temp, &cmd_data.end_row);
 10166  000AA8  C0E6  F030         	movff	parse_cmd_str@temp,collect_row@str
 10167  000AAC  C0E7  F031         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10168  000AB0  0EB2               	movlw	low (_cmd_data+44)
 10169  000AB2  6E32               	movwf	collect_row@data_row,c
 10170  000AB4  0E00               	movlw	high (_cmd_data+44)
 10171  000AB6  6E33               	movwf	collect_row@data_row+1,c
 10172  000AB8  EC91  F014         	call	_collect_row	;wreg free
 10173                           
 10174                           ;cmd_consol.c: 286: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 10175  000ABC  0EB7               	movlw	low STR_63
 10176  000ABE  6E1E               	movwf	printf@f,c
 10177  000AC0  0EFD               	movlw	high STR_63
 10178  000AC2  6E1F               	movwf	printf@f+1,c
 10179  000AC4  C0B2  F020         	movff	_cmd_data+44,?_printf+2
 10180  000AC8  6A21               	clrf	?_printf+3,c
 10181  000ACA  EC48  F012         	call	_printf	;wreg free
 10182                           
 10183                           ;cmd_consol.c: 287: if (cmd_data.end_row != 255) {
 10184  000ACE  0100               	movlb	0	; () banked
 10185  000AD0  29B2               	incf	(_cmd_data+44)& (0+255),w,b
 10186  000AD2  B4D8               	btfsc	status,2,c
 10187  000AD4  D053               	goto	l7350
 10188                           
 10189                           ; BSR set to: 0
 10190                           ;cmd_consol.c: 288: temp = strtok((0), "-', /=");
 10191  000AD6  0E00               	movlw	0
 10192  000AD8  6E1D               	movwf	strtok@s1,c
 10193  000ADA  0E00               	movlw	0
 10194  000ADC  6E1E               	movwf	strtok@s1+1,c
 10195  000ADE  0EA7               	movlw	low STR_24
 10196  000AE0  6E1F               	movwf	strtok@s2,c
 10197  000AE2  0EFF               	movlw	high STR_24
 10198  000AE4  6E20               	movwf	strtok@s2+1,c
 10199  000AE6  EC3A  F017         	call	_strtok	;wreg free
 10200  000AEA  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10201  000AEE  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10202                           
 10203                           ;cmd_consol.c: 289: if (temp != (0)) {
 10204  000AF2  0100               	movlb	0	; () banked
 10205  000AF4  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10206  000AF6  0100               	movlb	0	; () banked
 10207  000AF8  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10208  000AFA  B4D8               	btfsc	status,2,c
 10209  000AFC  D245               	goto	l7494
 10210                           
 10211                           ; BSR set to: 0
 10212                           ;cmd_consol.c: 290: printf("col = %s\r\n", temp);
 10213  000AFE  0E19               	movlw	low STR_65
 10214  000B00  6E1E               	movwf	printf@f,c
 10215  000B02  0EFF               	movlw	high STR_65
 10216  000B04  6E1F               	movwf	printf@f+1,c
 10217  000B06  C0E6  F020         	movff	parse_cmd_str@temp,?_printf+2
 10218  000B0A  C0E7  F021         	movff	parse_cmd_str@temp+1,?_printf+3
 10219  000B0E  EC48  F012         	call	_printf	;wreg free
 10220                           
 10221                           ;cmd_consol.c: 291: collect_column(temp, &cmd_data.end_col);
 10222  000B12  C0E6  F030         	movff	parse_cmd_str@temp,collect_column@str
 10223  000B16  C0E7  F031         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10224  000B1A  0EB3               	movlw	low (_cmd_data+45)
 10225  000B1C  6E32               	movwf	collect_column@data_column,c
 10226  000B1E  0E00               	movlw	high (_cmd_data+45)
 10227  000B20  6E33               	movwf	collect_column@data_column+1,c
 10228  000B22  EC08  F015         	call	_collect_column	;wreg free
 10229                           
 10230                           ;cmd_consol.c: 292: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 10231  000B26  0E9E               	movlw	low STR_66
 10232  000B28  6E1E               	movwf	printf@f,c
 10233  000B2A  0EFD               	movlw	high STR_66
 10234  000B2C  6E1F               	movwf	printf@f+1,c
 10235  000B2E  C0B3  F020         	movff	_cmd_data+45,?_printf+2
 10236  000B32  6A21               	clrf	?_printf+3,c
 10237  000B34  EC48  F012         	call	_printf	;wreg free
 10238                           
 10239                           ;cmd_consol.c: 293: if (cmd_data.end_row != 255) {
 10240  000B38  0100               	movlb	0	; () banked
 10241  000B3A  29B2               	incf	(_cmd_data+44)& (0+255),w,b
 10242  000B3C  B4D8               	btfsc	status,2,c
 10243  000B3E  D01C               	goto	l7346
 10244                           
 10245                           ; BSR set to: 0
 10246                           ;cmd_consol.c: 294: cmd_data.row_col_set = 1;
 10247  000B40  0E01               	movlw	1
 10248  000B42  0100               	movlb	0	; () banked
 10249  000B44  6FB4               	movwf	(_cmd_data+46)& (0+255),b
 10250                           
 10251                           ;cmd_consol.c: 295: valid_cmd = 1;
 10252  000B46  0E01               	movlw	1
 10253  000B48  0100               	movlb	0	; () banked
 10254  000B4A  6F84               	movwf	_valid_cmd& (0+255),b
 10255                           
 10256                           ; BSR set to: 0
 10257                           ;cmd_consol.c: 296: memset(str, 0, strlen(str));
 10258  000B4C  C03A  F024         	movff	parse_cmd_str@str,memset@p1
 10259  000B50  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10260  000B54  0E00               	movlw	0
 10261  000B56  6E27               	movwf	memset@c+1,c
 10262  000B58  0E00               	movlw	0
 10263  000B5A  6E26               	movwf	memset@c,c
 10264  000B5C  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
 10265  000B60  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10266  000B64  EC2E  F01A         	call	_strlen	;wreg free
 10267  000B68  C01E  F028         	movff	?_strlen,memset@n
 10268  000B6C  C01F  F029         	movff	?_strlen+1,memset@n+1
 10269  000B70  EC63  F01B         	call	_memset	;wreg free
 10270  000B74  EFAD  F000         	goto	l7036
 10271  000B78                     l7346:
 10272                           
 10273                           ;cmd_consol.c: 299: return 3;
 10274  000B78  0E03               	movlw	3
 10275  000B7A  0012               	return	
 10276  000B7C                     l7350:
 10277                           
 10278                           ;cmd_consol.c: 303: return 3;
 10279  000B7C  0E03               	movlw	3
 10280  000B7E  0012               	return	
 10281  000B80                     l7354:
 10282                           
 10283                           ;cmd_consol.c: 307: return 3;
 10284  000B80  0E03               	movlw	3
 10285  000B82  0012               	return	
 10286  000B84                     l7358:
 10287                           
 10288                           ;cmd_consol.c: 311: return 3;
 10289  000B84  0E03               	movlw	3
 10290  000B86  0012               	return	
 10291  000B88                     l7362:
 10292                           
 10293                           ;cmd_consol.c: 316: return 7;
 10294  000B88  0E07               	movlw	7
 10295  000B8A  0012               	return	
 10296  000B8C                     l7366:
 10297  000B8C  C0E4  F02D         	movff	parse_cmd_str@ptr,strstr@s1
 10298  000B90  C0E5  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10299  000B94  0EB5               	movlw	low STR_67
 10300  000B96  6E2F               	movwf	strstr@s2,c
 10301  000B98  0EFF               	movlw	high STR_67
 10302  000B9A  6E30               	movwf	strstr@s2+1,c
 10303  000B9C  ECF3  F017         	call	_strstr	;wreg free
 10304  000BA0  C02D  F0E6         	movff	?_strstr,parse_cmd_str@temp
 10305  000BA4  C02E  F0E7         	movff	?_strstr+1,parse_cmd_str@temp+1
 10306  000BA8  0100               	movlb	0	; () banked
 10307  000BAA  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10308  000BAC  0100               	movlb	0	; () banked
 10309  000BAE  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10310  000BB0  B4D8               	btfsc	status,2,c
 10311  000BB2  D01F               	goto	l7380
 10312                           
 10313                           ; BSR set to: 0
 10314                           ;cmd_consol.c: 322: strcpy(CMD, temp);
 10315  000BB4  0ECC               	movlw	low _CMD
 10316  000BB6  6E10               	movwf	strcpy@to,c
 10317  000BB8  0E00               	movlw	high _CMD
 10318  000BBA  6E11               	movwf	strcpy@to+1,c
 10319  000BBC  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
 10320  000BC0  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10321  000BC4  EC40  F01B         	call	_strcpy	;wreg free
 10322                           
 10323                           ;cmd_consol.c: 323: memset(str, 0, strlen(str));
 10324  000BC8  C03A  F024         	movff	parse_cmd_str@str,memset@p1
 10325  000BCC  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10326  000BD0  0E00               	movlw	0
 10327  000BD2  6E27               	movwf	memset@c+1,c
 10328  000BD4  0E00               	movlw	0
 10329  000BD6  6E26               	movwf	memset@c,c
 10330  000BD8  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
 10331  000BDC  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10332  000BE0  EC2E  F01A         	call	_strlen	;wreg free
 10333  000BE4  C01E  F028         	movff	?_strlen,memset@n
 10334  000BE8  C01F  F029         	movff	?_strlen+1,memset@n+1
 10335  000BEC  EC63  F01B         	call	_memset	;wreg free
 10336  000BF0  D1C6               	goto	l7488
 10337  000BF2                     l7380:
 10338                           
 10339                           ; BSR set to: 0
 10340  000BF2  C0E4  F02D         	movff	parse_cmd_str@ptr,strstr@s1
 10341  000BF6  C0E5  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10342  000BFA  0ED9               	movlw	low STR_68
 10343  000BFC  6E2F               	movwf	strstr@s2,c
 10344  000BFE  0EFF               	movlw	high STR_68
 10345  000C00  6E30               	movwf	strstr@s2+1,c
 10346  000C02  ECF3  F017         	call	_strstr	;wreg free
 10347  000C06  C02D  F0E6         	movff	?_strstr,parse_cmd_str@temp
 10348  000C0A  C02E  F0E7         	movff	?_strstr+1,parse_cmd_str@temp+1
 10349  000C0E  0100               	movlb	0	; () banked
 10350  000C10  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10351  000C12  0100               	movlb	0	; () banked
 10352  000C14  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10353  000C16  B4D8               	btfsc	status,2,c
 10354  000C18  D180               	goto	l7482
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;cmd_consol.c: 327: if (clcd_config_data.init_done == 1) {
 10358  000C1A  0449               	decf	_clcd_config_data,w,c
 10359  000C1C  A4D8               	btfss	status,2,c
 10360  000C1E  D1B4               	goto	l7494
 10361                           
 10362                           ; BSR set to: 0
 10363                           ;cmd_consol.c: 328: temp = strtok(ptr, "-', /=");
 10364  000C20  C0E4  F01D         	movff	parse_cmd_str@ptr,strtok@s1
 10365  000C24  C0E5  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
 10366  000C28  0EA7               	movlw	low STR_24
 10367  000C2A  6E1F               	movwf	strtok@s2,c
 10368  000C2C  0EFF               	movlw	high STR_24
 10369  000C2E  6E20               	movwf	strtok@s2+1,c
 10370  000C30  EC3A  F017         	call	_strtok	;wreg free
 10371  000C34  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10372  000C38  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10373                           
 10374                           ;cmd_consol.c: 329: if (temp != (0)) {
 10375  000C3C  0100               	movlb	0	; () banked
 10376  000C3E  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10377  000C40  0100               	movlb	0	; () banked
 10378  000C42  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10379  000C44  B4D8               	btfsc	status,2,c
 10380  000C46  D1A0               	goto	l7494
 10381                           
 10382                           ; BSR set to: 0
 10383                           ;cmd_consol.c: 330: strcpy(CMD, temp);
 10384  000C48  0ECC               	movlw	low _CMD
 10385  000C4A  6E10               	movwf	strcpy@to,c
 10386  000C4C  0E00               	movlw	high _CMD
 10387  000C4E  6E11               	movwf	strcpy@to+1,c
 10388  000C50  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
 10389  000C54  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10390  000C58  EC40  F01B         	call	_strcpy	;wreg free
 10391                           
 10392                           ;cmd_consol.c: 331: printf("CMD=%s\r\n", CMD);
 10393  000C5C  0E5F               	movlw	low STR_70
 10394  000C5E  6E1E               	movwf	printf@f,c
 10395  000C60  0EFF               	movlw	high STR_70
 10396  000C62  6E1F               	movwf	printf@f+1,c
 10397  000C64  0ECC               	movlw	low _CMD
 10398  000C66  6E20               	movwf	?_printf+2,c
 10399  000C68  0E00               	movlw	high _CMD
 10400  000C6A  6E21               	movwf	?_printf+3,c
 10401  000C6C  EC48  F012         	call	_printf	;wreg free
 10402                           
 10403                           ;cmd_consol.c: 332: temp = strtok((0), ",");
 10404  000C70  0E00               	movlw	0
 10405  000C72  6E1D               	movwf	strtok@s1,c
 10406  000C74  0E00               	movlw	0
 10407  000C76  6E1E               	movwf	strtok@s1+1,c
 10408  000C78  0EFC               	movlw	low STR_43
 10409  000C7A  6E1F               	movwf	strtok@s2,c
 10410  000C7C  0EFF               	movlw	high STR_43
 10411  000C7E  6E20               	movwf	strtok@s2+1,c
 10412  000C80  EC3A  F017         	call	_strtok	;wreg free
 10413  000C84  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10414  000C88  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10415                           
 10416                           ;cmd_consol.c: 333: if (temp != (0)) {
 10417  000C8C  0100               	movlb	0	; () banked
 10418  000C8E  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10419  000C90  0100               	movlb	0	; () banked
 10420  000C92  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10421  000C94  B4D8               	btfsc	status,2,c
 10422  000C96  D178               	goto	l7494
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;cmd_consol.c: 334: if (get_str(temp, cmd_data.data) == 1) {
 10426  000C98  C0E6  F02C         	movff	parse_cmd_str@temp,get_str@str
 10427  000C9C  C0E7  F02D         	movff	parse_cmd_str@temp+1,get_str@str+1
 10428  000CA0  0E87               	movlw	low (_cmd_data+1)
 10429  000CA2  6E2E               	movwf	get_str@data_str,c
 10430  000CA4  0E00               	movlw	high (_cmd_data+1)
 10431  000CA6  6E2F               	movwf	get_str@data_str+1,c
 10432  000CA8  EC72  F019         	call	_get_str	;wreg free
 10433  000CAC  06E8               	decf	wreg,f,c
 10434  000CAE  A4D8               	btfss	status,2,c
 10435  000CB0  D132               	goto	l7478
 10436                           
 10437                           ;cmd_consol.c: 335: printf("data=%s\r\n", cmd_data.data);
 10438  000CB2  0E3A               	movlw	low STR_72
 10439  000CB4  6E1E               	movwf	printf@f,c
 10440  000CB6  0EFF               	movlw	high STR_72
 10441  000CB8  6E1F               	movwf	printf@f+1,c
 10442  000CBA  0E87               	movlw	low (_cmd_data+1)
 10443  000CBC  6E20               	movwf	?_printf+2,c
 10444  000CBE  0E00               	movlw	high (_cmd_data+1)
 10445  000CC0  6E21               	movwf	?_printf+3,c
 10446  000CC2  EC48  F012         	call	_printf	;wreg free
 10447                           
 10448                           ;cmd_consol.c: 336: temp = strtok((0), "-', /=");
 10449  000CC6  0E00               	movlw	0
 10450  000CC8  6E1D               	movwf	strtok@s1,c
 10451  000CCA  0E00               	movlw	0
 10452  000CCC  6E1E               	movwf	strtok@s1+1,c
 10453  000CCE  0EA7               	movlw	low STR_24
 10454  000CD0  6E1F               	movwf	strtok@s2,c
 10455  000CD2  0EFF               	movlw	high STR_24
 10456  000CD4  6E20               	movwf	strtok@s2+1,c
 10457  000CD6  EC3A  F017         	call	_strtok	;wreg free
 10458  000CDA  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10459  000CDE  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10460                           
 10461                           ;cmd_consol.c: 337: if (temp != (0)) {
 10462  000CE2  0100               	movlb	0	; () banked
 10463  000CE4  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10464  000CE6  0100               	movlb	0	; () banked
 10465  000CE8  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10466  000CEA  B4D8               	btfsc	status,2,c
 10467  000CEC  D14D               	goto	l7494
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;cmd_consol.c: 338: collect_row(temp, &cmd_data.start_row);
 10471  000CEE  C0E6  F030         	movff	parse_cmd_str@temp,collect_row@str
 10472  000CF2  C0E7  F031         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10473  000CF6  0EB0               	movlw	low (_cmd_data+42)
 10474  000CF8  6E32               	movwf	collect_row@data_row,c
 10475  000CFA  0E00               	movlw	high (_cmd_data+42)
 10476  000CFC  6E33               	movwf	collect_row@data_row+1,c
 10477  000CFE  EC91  F014         	call	_collect_row	;wreg free
 10478                           
 10479                           ;cmd_consol.c: 339: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 10480  000D02  0E35               	movlw	low STR_59
 10481  000D04  6E1E               	movwf	printf@f,c
 10482  000D06  0EFD               	movlw	high STR_59
 10483  000D08  6E1F               	movwf	printf@f+1,c
 10484  000D0A  C0B0  F020         	movff	_cmd_data+42,?_printf+2
 10485  000D0E  6A21               	clrf	?_printf+3,c
 10486  000D10  EC48  F012         	call	_printf	;wreg free
 10487                           
 10488                           ;cmd_consol.c: 340: if (cmd_data.start_row != 255) {
 10489  000D14  0100               	movlb	0	; () banked
 10490  000D16  29B0               	incf	(_cmd_data+42)& (0+255),w,b
 10491  000D18  B4D8               	btfsc	status,2,c
 10492  000D1A  D0FB               	goto	l7474
 10493                           
 10494                           ; BSR set to: 0
 10495                           ;cmd_consol.c: 341: temp = strtok((0), "-', /=");
 10496  000D1C  0E00               	movlw	0
 10497  000D1E  6E1D               	movwf	strtok@s1,c
 10498  000D20  0E00               	movlw	0
 10499  000D22  6E1E               	movwf	strtok@s1+1,c
 10500  000D24  0EA7               	movlw	low STR_24
 10501  000D26  6E1F               	movwf	strtok@s2,c
 10502  000D28  0EFF               	movlw	high STR_24
 10503  000D2A  6E20               	movwf	strtok@s2+1,c
 10504  000D2C  EC3A  F017         	call	_strtok	;wreg free
 10505  000D30  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10506  000D34  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10507                           
 10508                           ;cmd_consol.c: 342: if (temp != (0)) {
 10509  000D38  0100               	movlb	0	; () banked
 10510  000D3A  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10511  000D3C  0100               	movlb	0	; () banked
 10512  000D3E  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10513  000D40  B4D8               	btfsc	status,2,c
 10514  000D42  D122               	goto	l7494
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;cmd_consol.c: 343: collect_column(temp, &cmd_data.start_col);
 10518  000D44  C0E6  F030         	movff	parse_cmd_str@temp,collect_column@str
 10519  000D48  C0E7  F031         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10520  000D4C  0EB1               	movlw	low (_cmd_data+43)
 10521  000D4E  6E32               	movwf	collect_column@data_column,c
 10522  000D50  0E00               	movlw	high (_cmd_data+43)
 10523  000D52  6E33               	movwf	collect_column@data_column+1,c
 10524  000D54  EC08  F015         	call	_collect_column	;wreg free
 10525                           
 10526                           ;cmd_consol.c: 344: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 10527  000D58  0E1A               	movlw	low STR_61
 10528  000D5A  6E1E               	movwf	printf@f,c
 10529  000D5C  0EFD               	movlw	high STR_61
 10530  000D5E  6E1F               	movwf	printf@f+1,c
 10531  000D60  C0B1  F020         	movff	_cmd_data+43,?_printf+2
 10532  000D64  6A21               	clrf	?_printf+3,c
 10533  000D66  EC48  F012         	call	_printf	;wreg free
 10534                           
 10535                           ;cmd_consol.c: 345: if (cmd_data.start_row != 255) {
 10536  000D6A  0100               	movlb	0	; () banked
 10537  000D6C  29B0               	incf	(_cmd_data+42)& (0+255),w,b
 10538  000D6E  B4D8               	btfsc	status,2,c
 10539  000D70  D0CE               	goto	l7470
 10540                           
 10541                           ; BSR set to: 0
 10542                           ;cmd_consol.c: 346: temp = strtok((0), "-', /=");
 10543  000D72  0E00               	movlw	0
 10544  000D74  6E1D               	movwf	strtok@s1,c
 10545  000D76  0E00               	movlw	0
 10546  000D78  6E1E               	movwf	strtok@s1+1,c
 10547  000D7A  0EA7               	movlw	low STR_24
 10548  000D7C  6E1F               	movwf	strtok@s2,c
 10549  000D7E  0EFF               	movlw	high STR_24
 10550  000D80  6E20               	movwf	strtok@s2+1,c
 10551  000D82  EC3A  F017         	call	_strtok	;wreg free
 10552  000D86  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10553  000D8A  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10554                           
 10555                           ;cmd_consol.c: 347: if (temp != (0)) {
 10556  000D8E  0100               	movlb	0	; () banked
 10557  000D90  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10558  000D92  0100               	movlb	0	; () banked
 10559  000D94  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10560  000D96  B4D8               	btfsc	status,2,c
 10561  000D98  D0F7               	goto	l7494
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;cmd_consol.c: 348: collect_row(temp, &cmd_data.end_row);
 10565  000D9A  C0E6  F030         	movff	parse_cmd_str@temp,collect_row@str
 10566  000D9E  C0E7  F031         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10567  000DA2  0EB2               	movlw	low (_cmd_data+44)
 10568  000DA4  6E32               	movwf	collect_row@data_row,c
 10569  000DA6  0E00               	movlw	high (_cmd_data+44)
 10570  000DA8  6E33               	movwf	collect_row@data_row+1,c
 10571  000DAA  EC91  F014         	call	_collect_row	;wreg free
 10572                           
 10573                           ;cmd_consol.c: 349: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 10574  000DAE  0EB7               	movlw	low STR_63
 10575  000DB0  6E1E               	movwf	printf@f,c
 10576  000DB2  0EFD               	movlw	high STR_63
 10577  000DB4  6E1F               	movwf	printf@f+1,c
 10578  000DB6  C0B2  F020         	movff	_cmd_data+44,?_printf+2
 10579  000DBA  6A21               	clrf	?_printf+3,c
 10580  000DBC  EC48  F012         	call	_printf	;wreg free
 10581                           
 10582                           ;cmd_consol.c: 350: if (cmd_data.end_row != 255) {
 10583  000DC0  0100               	movlb	0	; () banked
 10584  000DC2  29B2               	incf	(_cmd_data+44)& (0+255),w,b
 10585  000DC4  B4D8               	btfsc	status,2,c
 10586  000DC6  D0A1               	goto	l7466
 10587                           
 10588                           ; BSR set to: 0
 10589                           ;cmd_consol.c: 351: temp = strtok((0), "-', /=");
 10590  000DC8  0E00               	movlw	0
 10591  000DCA  6E1D               	movwf	strtok@s1,c
 10592  000DCC  0E00               	movlw	0
 10593  000DCE  6E1E               	movwf	strtok@s1+1,c
 10594  000DD0  0EA7               	movlw	low STR_24
 10595  000DD2  6E1F               	movwf	strtok@s2,c
 10596  000DD4  0EFF               	movlw	high STR_24
 10597  000DD6  6E20               	movwf	strtok@s2+1,c
 10598  000DD8  EC3A  F017         	call	_strtok	;wreg free
 10599  000DDC  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10600  000DE0  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10601                           
 10602                           ;cmd_consol.c: 352: if (temp != (0)) {
 10603  000DE4  0100               	movlb	0	; () banked
 10604  000DE6  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10605  000DE8  0100               	movlb	0	; () banked
 10606  000DEA  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10607  000DEC  B4D8               	btfsc	status,2,c
 10608  000DEE  D0CC               	goto	l7494
 10609                           
 10610                           ; BSR set to: 0
 10611                           ;cmd_consol.c: 353: printf("col = %s\r\n", temp);
 10612  000DF0  0E19               	movlw	low STR_65
 10613  000DF2  6E1E               	movwf	printf@f,c
 10614  000DF4  0EFF               	movlw	high STR_65
 10615  000DF6  6E1F               	movwf	printf@f+1,c
 10616  000DF8  C0E6  F020         	movff	parse_cmd_str@temp,?_printf+2
 10617  000DFC  C0E7  F021         	movff	parse_cmd_str@temp+1,?_printf+3
 10618  000E00  EC48  F012         	call	_printf	;wreg free
 10619                           
 10620                           ;cmd_consol.c: 354: collect_column(temp, &cmd_data.end_col);
 10621  000E04  C0E6  F030         	movff	parse_cmd_str@temp,collect_column@str
 10622  000E08  C0E7  F031         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10623  000E0C  0EB3               	movlw	low (_cmd_data+45)
 10624  000E0E  6E32               	movwf	collect_column@data_column,c
 10625  000E10  0E00               	movlw	high (_cmd_data+45)
 10626  000E12  6E33               	movwf	collect_column@data_column+1,c
 10627  000E14  EC08  F015         	call	_collect_column	;wreg free
 10628                           
 10629                           ;cmd_consol.c: 355: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 10630  000E18  0E9E               	movlw	low STR_66
 10631  000E1A  6E1E               	movwf	printf@f,c
 10632  000E1C  0EFD               	movlw	high STR_66
 10633  000E1E  6E1F               	movwf	printf@f+1,c
 10634  000E20  C0B3  F020         	movff	_cmd_data+45,?_printf+2
 10635  000E24  6A21               	clrf	?_printf+3,c
 10636  000E26  EC48  F012         	call	_printf	;wreg free
 10637                           
 10638                           ;cmd_consol.c: 356: if (cmd_data.end_row != 255) {
 10639  000E2A  0100               	movlb	0	; () banked
 10640  000E2C  29B2               	incf	(_cmd_data+44)& (0+255),w,b
 10641  000E2E  B4D8               	btfsc	status,2,c
 10642  000E30  D06A               	goto	l7462
 10643                           
 10644                           ; BSR set to: 0
 10645                           ;cmd_consol.c: 357: temp = strtok((0), "-', /=");
 10646  000E32  0E00               	movlw	0
 10647  000E34  6E1D               	movwf	strtok@s1,c
 10648  000E36  0E00               	movlw	0
 10649  000E38  6E1E               	movwf	strtok@s1+1,c
 10650  000E3A  0EA7               	movlw	low STR_24
 10651  000E3C  6E1F               	movwf	strtok@s2,c
 10652  000E3E  0EFF               	movlw	high STR_24
 10653  000E40  6E20               	movwf	strtok@s2+1,c
 10654  000E42  EC3A  F017         	call	_strtok	;wreg free
 10655  000E46  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10656  000E4A  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10657                           
 10658                           ;cmd_consol.c: 358: if (temp != (0)) {
 10659  000E4E  0100               	movlb	0	; () banked
 10660  000E50  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10661  000E52  0100               	movlb	0	; () banked
 10662  000E54  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10663  000E56  B4D8               	btfsc	status,2,c
 10664  000E58  D097               	goto	l7494
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;cmd_consol.c: 359: if (get_direction(temp, cmd_data.scroll) == 1) {
 10668  000E5A  C0E6  F030         	movff	parse_cmd_str@temp,get_direction@str
 10669  000E5E  C0E7  F031         	movff	parse_cmd_str@temp+1,get_direction@str+1
 10670  000E62  0100               	movlb	0	; () banked
 10671  000E64  51B5               	movf	(_cmd_data+47)& (0+255),w,b
 10672  000E66  6E3C               	movwf	??_parse_cmd_str& (0+255),c
 10673  000E68  6A3D               	clrf	(??_parse_cmd_str+1)& (0+255),c
 10674  000E6A  C03C  F032         	movff	??_parse_cmd_str,get_direction@data_direction
 10675  000E6E  C03D  F033         	movff	??_parse_cmd_str+1,get_direction@data_direction+1
 10676  000E72  ECF1  F015         	call	_get_direction	;wreg free
 10677  000E76  06E8               	decf	wreg,f,c
 10678  000E78  A4D8               	btfss	status,2,c
 10679  000E7A  D043               	goto	l7458
 10680                           
 10681                           ;cmd_consol.c: 360: temp = strtok((0), "-', /=");
 10682  000E7C  0E00               	movlw	0
 10683  000E7E  6E1D               	movwf	strtok@s1,c
 10684  000E80  0E00               	movlw	0
 10685  000E82  6E1E               	movwf	strtok@s1+1,c
 10686  000E84  0EA7               	movlw	low STR_24
 10687  000E86  6E1F               	movwf	strtok@s2,c
 10688  000E88  0EFF               	movlw	high STR_24
 10689  000E8A  6E20               	movwf	strtok@s2+1,c
 10690  000E8C  EC3A  F017         	call	_strtok	;wreg free
 10691  000E90  C01D  F0E6         	movff	?_strtok,parse_cmd_str@temp
 10692  000E94  C01E  F0E7         	movff	?_strtok+1,parse_cmd_str@temp+1
 10693                           
 10694                           ;cmd_consol.c: 361: if (temp != (0)) {
 10695  000E98  0100               	movlb	0	; () banked
 10696  000E9A  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10697  000E9C  0100               	movlb	0	; () banked
 10698  000E9E  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10699  000EA0  B4D8               	btfsc	status,2,c
 10700  000EA2  D072               	goto	l7494
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;cmd_consol.c: 362: if (get_dis_frq(temp, cmd_data.dis_frq_set) == 1) {
 10704  000EA4  C0E6  F030         	movff	parse_cmd_str@temp,get_dis_frq@str
 10705  000EA8  C0E7  F031         	movff	parse_cmd_str@temp+1,get_dis_frq@str+1
 10706  000EAC  0100               	movlb	0	; () banked
 10707  000EAE  51B7               	movf	(_cmd_data+49)& (0+255),w,b
 10708  000EB0  6E3C               	movwf	??_parse_cmd_str& (0+255),c
 10709  000EB2  6A3D               	clrf	(??_parse_cmd_str+1)& (0+255),c
 10710  000EB4  C03C  F032         	movff	??_parse_cmd_str,get_dis_frq@data_frq
 10711  000EB8  C03D  F033         	movff	??_parse_cmd_str+1,get_dis_frq@data_frq+1
 10712  000EBC  EC7F  F015         	call	_get_dis_frq	;wreg free
 10713  000EC0  06E8               	decf	wreg,f,c
 10714  000EC2  A4D8               	btfss	status,2,c
 10715  000EC4  D01C               	goto	l7454
 10716                           
 10717                           ;cmd_consol.c: 363: cmd_data.row_col_set = 1;
 10718  000EC6  0E01               	movlw	1
 10719  000EC8  0100               	movlb	0	; () banked
 10720  000ECA  6FB4               	movwf	(_cmd_data+46)& (0+255),b
 10721                           
 10722                           ;cmd_consol.c: 364: valid_cmd = 1;
 10723  000ECC  0E01               	movlw	1
 10724  000ECE  0100               	movlb	0	; () banked
 10725  000ED0  6F84               	movwf	_valid_cmd& (0+255),b
 10726                           
 10727                           ; BSR set to: 0
 10728                           ;cmd_consol.c: 365: memset(str, 0, strlen(str));
 10729  000ED2  C03A  F024         	movff	parse_cmd_str@str,memset@p1
 10730  000ED6  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10731  000EDA  0E00               	movlw	0
 10732  000EDC  6E27               	movwf	memset@c+1,c
 10733  000EDE  0E00               	movlw	0
 10734  000EE0  6E26               	movwf	memset@c,c
 10735  000EE2  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
 10736  000EE6  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10737  000EEA  EC2E  F01A         	call	_strlen	;wreg free
 10738  000EEE  C01E  F028         	movff	?_strlen,memset@n
 10739  000EF2  C01F  F029         	movff	?_strlen+1,memset@n+1
 10740  000EF6  EC63  F01B         	call	_memset	;wreg free
 10741  000EFA  EFAD  F000         	goto	l7036
 10742  000EFE                     l7454:
 10743                           
 10744                           ;cmd_consol.c: 368: return 5;
 10745  000EFE  0E05               	movlw	5
 10746  000F00  0012               	return	
 10747  000F02                     l7458:
 10748                           
 10749                           ;cmd_consol.c: 372: return 4;
 10750  000F02  0E04               	movlw	4
 10751  000F04  0012               	return	
 10752  000F06                     l7462:
 10753                           
 10754                           ;cmd_consol.c: 376: return 3;
 10755  000F06  0E03               	movlw	3
 10756  000F08  0012               	return	
 10757  000F0A                     l7466:
 10758                           
 10759                           ;cmd_consol.c: 380: return 3;
 10760  000F0A  0E03               	movlw	3
 10761  000F0C  0012               	return	
 10762  000F0E                     l7470:
 10763                           
 10764                           ;cmd_consol.c: 384: return 3;
 10765  000F0E  0E03               	movlw	3
 10766  000F10  0012               	return	
 10767  000F12                     l7474:
 10768                           
 10769                           ;cmd_consol.c: 388: return 3;
 10770  000F12  0E03               	movlw	3
 10771  000F14  0012               	return	
 10772  000F16                     l7478:
 10773                           
 10774                           ;cmd_consol.c: 392: return 2;
 10775  000F16  0E02               	movlw	2
 10776  000F18  0012               	return	
 10777  000F1A                     l7482:
 10778  000F1A  C0E4  F02D         	movff	parse_cmd_str@ptr,strstr@s1
 10779  000F1E  C0E5  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10780  000F22  0EF5               	movlw	low STR_84
 10781  000F24  6E2F               	movwf	strstr@s2,c
 10782  000F26  0EFF               	movlw	high STR_84
 10783  000F28  6E30               	movwf	strstr@s2+1,c
 10784  000F2A  ECF3  F017         	call	_strstr	;wreg free
 10785  000F2E  C02D  F0E6         	movff	?_strstr,parse_cmd_str@temp
 10786  000F32  C02E  F0E7         	movff	?_strstr+1,parse_cmd_str@temp+1
 10787  000F36  0100               	movlb	0	; () banked
 10788  000F38  51E6               	movf	parse_cmd_str@temp& (0+255),w,b
 10789  000F3A  0100               	movlb	0	; () banked
 10790  000F3C  11E7               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10791  000F3E  B4D8               	btfsc	status,2,c
 10792  000F40  D023               	goto	l7494
 10793                           
 10794                           ; BSR set to: 0
 10795                           ;cmd_consol.c: 398: strcpy(CMD, temp);
 10796  000F42  0ECC               	movlw	low _CMD
 10797  000F44  6E10               	movwf	strcpy@to,c
 10798  000F46  0E00               	movlw	high _CMD
 10799  000F48  6E11               	movwf	strcpy@to+1,c
 10800  000F4A  C0E6  F012         	movff	parse_cmd_str@temp,strcpy@from
 10801  000F4E  C0E7  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10802  000F52  EC40  F01B         	call	_strcpy	;wreg free
 10803                           
 10804                           ;cmd_consol.c: 399: memset(str, 0, strlen(str));
 10805  000F56  C03A  F024         	movff	parse_cmd_str@str,memset@p1
 10806  000F5A  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10807  000F5E  0E00               	movlw	0
 10808  000F60  6E27               	movwf	memset@c+1,c
 10809  000F62  0E00               	movlw	0
 10810  000F64  6E26               	movwf	memset@c,c
 10811  000F66  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
 10812  000F6A  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10813  000F6E  EC2E  F01A         	call	_strlen	;wreg free
 10814  000F72  C01E  F028         	movff	?_strlen,memset@n
 10815  000F76  C01F  F029         	movff	?_strlen+1,memset@n+1
 10816  000F7A  EC63  F01B         	call	_memset	;wreg free
 10817  000F7E                     l7488:
 10818                           
 10819                           ;cmd_consol.c: 400: valid_cmd = 1;
 10820  000F7E  0E01               	movlw	1
 10821  000F80  0100               	movlb	0	; () banked
 10822  000F82  6F84               	movwf	_valid_cmd& (0+255),b
 10823  000F84  EFAD  F000         	goto	l7036
 10824  000F88                     l7494:
 10825                           
 10826                           ;cmd_consol.c: 402: }
 10827                           ;cmd_consol.c: 403: memset(str, 0, strlen(str));
 10828  000F88  C03A  F024         	movff	parse_cmd_str@str,memset@p1
 10829  000F8C  C03B  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10830  000F90  0E00               	movlw	0
 10831  000F92  6E27               	movwf	memset@c+1,c
 10832  000F94  0E00               	movlw	0
 10833  000F96  6E26               	movwf	memset@c,c
 10834  000F98  C03A  F01E         	movff	parse_cmd_str@str,strlen@s
 10835  000F9C  C03B  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10836  000FA0  EC2E  F01A         	call	_strlen	;wreg free
 10837  000FA4  C01E  F028         	movff	?_strlen,memset@n
 10838  000FA8  C01F  F029         	movff	?_strlen+1,memset@n+1
 10839  000FAC  EC63  F01B         	call	_memset	;wreg free
 10840                           
 10841                           ;cmd_consol.c: 404: return 1;
 10842  000FB0  0E01               	movlw	1
 10843  000FB2  0012               	return	
 10844  000FB4                     __end_of_parse_cmd_str:
 10845                           	opt stack 0
 10846                           tblptru	equ	0xFF8
 10847                           tblptrh	equ	0xFF7
 10848                           tblptrl	equ	0xFF6
 10849                           tablat	equ	0xFF5
 10850                           prodh	equ	0xFF4
 10851                           prodl	equ	0xFF3
 10852                           intcon	equ	0xFF2
 10853                           indf0	equ	0xFEF
 10854                           postinc0	equ	0xFEE
 10855                           fsr0h	equ	0xFEA
 10856                           fsr0l	equ	0xFE9
 10857                           wreg	equ	0xFE8
 10858                           indf1	equ	0xFE7
 10859                           postdec1	equ	0xFE5
 10860                           fsr1h	equ	0xFE2
 10861                           fsr1l	equ	0xFE1
 10862                           indf2	equ	0xFDF
 10863                           postinc2	equ	0xFDE
 10864                           fsr2h	equ	0xFDA
 10865                           fsr2l	equ	0xFD9
 10866                           status	equ	0xFD8
 10867                           
 10868 ;; *************** function _strtok *****************
 10869 ;; Defined at:
 10870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strtok.c"
 10871 ;; Parameters:    Size  Location     Type
 10872 ;;  s1              2   28[COMRAM] PTR unsigned char 
 10873 ;;		 -> uart_str(150), NULL(0), 
 10874 ;;  s2              2   30[COMRAM] PTR const unsigned char 
 10875 ;;		 -> STR_83(7), STR_82(7), STR_79(7), STR_77(7), 
 10876 ;;		 -> STR_75(7), STR_73(7), STR_71(2), STR_69(7), 
 10877 ;;		 -> STR_64(7), STR_62(7), STR_60(7), STR_58(7), 
 10878 ;;		 -> STR_56(7), STR_55(7), STR_51(7), STR_48(7), 
 10879 ;;		 -> STR_47(7), STR_43(2), STR_40(7), STR_38(7), 
 10880 ;;		 -> STR_36(7), STR_34(7), STR_32(7), STR_31(7), 
 10881 ;;		 -> STR_28(7), STR_26(7), STR_24(7), 
 10882 ;; Auto vars:     Size  Location     Type
 10883 ;;		None
 10884 ;; Return value:  Size  Location     Type
 10885 ;;                  2   28[COMRAM] PTR unsigned char 
 10886 ;; Registers used:
 10887 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10888 ;; Tracked objects:
 10889 ;;		On entry : 0/0
 10890 ;;		On exit  : 0/0
 10891 ;;		Unchanged: 0/0
 10892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10893 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10896 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;Total ram usage:        4 bytes
 10898 ;; Hardware stack levels used:    1
 10899 ;; Hardware stack levels required when called:    7
 10900 ;; This function calls:
 10901 ;;		_strcspn
 10902 ;;		_strspn
 10903 ;; This function is called by:
 10904 ;;		_parse_cmd_str
 10905 ;; This function uses a non-reentrant model
 10906 ;;
 10907                           
 10908                           	psect	text43
 10909  002E74                     __ptext43:
 10910                           	opt stack 0
 10911  002E74                     _strtok:
 10912                           	opt stack 21
 10913                           
 10914                           ;incstack = 0
 10915  002E74  501D               	movf	strtok@s1,w,c
 10916  002E76  101E               	iorwf	strtok@s1+1,w,c
 10917  002E78  A4D8               	btfss	status,2,c
 10918  002E7A  D004               	goto	l1689
 10919  002E7C  C07C  F01D         	movff	strtok@sp,strtok@s1
 10920  002E80  C07D  F01E         	movff	strtok@sp+1,strtok@s1+1
 10921  002E84                     l1689:
 10922  002E84  501D               	movf	strtok@s1,w,c
 10923  002E86  101E               	iorwf	strtok@s1+1,w,c
 10924  002E88  A4D8               	btfss	status,2,c
 10925  002E8A  D005               	goto	l6928
 10926  002E8C  0E00               	movlw	0
 10927  002E8E  6E1D               	movwf	?_strtok,c
 10928  002E90  0E00               	movlw	0
 10929  002E92  6E1E               	movwf	?_strtok+1,c
 10930  002E94  0012               	return	
 10931  002E96                     l6928:
 10932  002E96  C01D  F016         	movff	strtok@s1,strspn@s1
 10933  002E9A  C01E  F017         	movff	strtok@s1+1,strspn@s1+1
 10934  002E9E  C01F  F018         	movff	strtok@s2,strspn@s2
 10935  002EA2  C020  F019         	movff	strtok@s2+1,strspn@s2+1
 10936  002EA6  EC81  F01A         	call	_strspn	;wreg free
 10937  002EAA  5016               	movf	?_strspn,w,c
 10938  002EAC  261D               	addwf	strtok@s1,f,c
 10939  002EAE  5017               	movf	?_strspn+1,w,c
 10940  002EB0  221E               	addwfc	strtok@s1+1,f,c
 10941  002EB2  C01D  FFD9         	movff	strtok@s1,fsr2l
 10942  002EB6  C01E  FFDA         	movff	strtok@s1+1,fsr2h
 10943  002EBA  50DF               	movf	indf2,w,c
 10944  002EBC  A4D8               	btfss	status,2,c
 10945  002EBE  D00B               	goto	l6936
 10946  002EC0  0E00               	movlw	0
 10947  002EC2  0100               	movlb	0	; () banked
 10948  002EC4  6F7C               	movwf	strtok@sp& (0+255),b
 10949  002EC6  0E00               	movlw	0
 10950  002EC8  0100               	movlb	0	; () banked
 10951  002ECA  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10952  002ECC  C07C  F01D         	movff	strtok@sp,?_strtok
 10953  002ED0  C07D  F01E         	movff	strtok@sp+1,?_strtok+1
 10954                           
 10955                           ; BSR set to: 0
 10956  002ED4  0012               	return	
 10957  002ED6                     l6936:
 10958  002ED6  C01D  F016         	movff	strtok@s1,strcspn@s1
 10959  002EDA  C01E  F017         	movff	strtok@s1+1,strcspn@s1+1
 10960  002EDE  C01F  F018         	movff	strtok@s2,strcspn@s2
 10961  002EE2  C020  F019         	movff	strtok@s2+1,strcspn@s2+1
 10962  002EE6  ECA9  F01A         	call	_strcspn	;wreg free
 10963  002EEA  5016               	movf	?_strcspn,w,c
 10964  002EEC  241D               	addwf	strtok@s1,w,c
 10965  002EEE  0100               	movlb	0	; () banked
 10966  002EF0  6F7C               	movwf	strtok@sp& (0+255),b
 10967  002EF2  5017               	movf	?_strcspn+1,w,c
 10968  002EF4  201E               	addwfc	strtok@s1+1,w,c
 10969  002EF6  0100               	movlb	0	; () banked
 10970  002EF8  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10971                           
 10972                           ; BSR set to: 0
 10973  002EFA  C07C  FFD9         	movff	strtok@sp,fsr2l
 10974  002EFE  C07D  FFDA         	movff	strtok@sp+1,fsr2h
 10975  002F02  50DF               	movf	indf2,w,c
 10976  002F04  B4D8               	btfsc	status,2,c
 10977  002F06  D00A               	goto	l6944
 10978                           
 10979                           ; BSR set to: 0
 10980  002F08  C07C  FFD9         	movff	strtok@sp,fsr2l
 10981  002F0C  C07D  FFDA         	movff	strtok@sp+1,fsr2h
 10982  002F10  0E00               	movlw	0
 10983  002F12  6EDF               	movwf	indf2,c
 10984                           
 10985                           ; BSR set to: 0
 10986  002F14  0100               	movlb	0	; () banked
 10987  002F16  4B7C               	infsnz	strtok@sp& (0+255),f,b
 10988  002F18  2B7D               	incf	(strtok@sp+1)& (0+255),f,b
 10989  002F1A  D006               	goto	l1694
 10990  002F1C                     l6944:
 10991                           
 10992                           ; BSR set to: 0
 10993  002F1C  0E00               	movlw	0
 10994  002F1E  0100               	movlb	0	; () banked
 10995  002F20  6F7C               	movwf	strtok@sp& (0+255),b
 10996  002F22  0E00               	movlw	0
 10997  002F24  0100               	movlb	0	; () banked
 10998  002F26  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10999  002F28                     l1694:
 11000                           
 11001                           ; BSR set to: 0
 11002  002F28  C01D  F01D         	movff	strtok@s1,?_strtok
 11003  002F2C  C01E  F01E         	movff	strtok@s1+1,?_strtok+1
 11004  002F30  0012               	return	
 11005  002F32                     __end_of_strtok:
 11006                           	opt stack 0
 11007                           tblptru	equ	0xFF8
 11008                           tblptrh	equ	0xFF7
 11009                           tblptrl	equ	0xFF6
 11010                           tablat	equ	0xFF5
 11011                           prodh	equ	0xFF4
 11012                           prodl	equ	0xFF3
 11013                           intcon	equ	0xFF2
 11014                           indf0	equ	0xFEF
 11015                           postinc0	equ	0xFEE
 11016                           fsr0h	equ	0xFEA
 11017                           fsr0l	equ	0xFE9
 11018                           wreg	equ	0xFE8
 11019                           indf1	equ	0xFE7
 11020                           postdec1	equ	0xFE5
 11021                           fsr1h	equ	0xFE2
 11022                           fsr1l	equ	0xFE1
 11023                           indf2	equ	0xFDF
 11024                           postinc2	equ	0xFDE
 11025                           fsr2h	equ	0xFDA
 11026                           fsr2l	equ	0xFD9
 11027                           status	equ	0xFD8
 11028                           
 11029 ;; *************** function _strspn *****************
 11030 ;; Defined at:
 11031 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strspn.c"
 11032 ;; Parameters:    Size  Location     Type
 11033 ;;  s1              2   21[COMRAM] PTR const unsigned char 
 11034 ;;		 -> uart_str(150), NULL(0), 
 11035 ;;  s2              2   23[COMRAM] PTR const unsigned char 
 11036 ;;		 -> STR_83(7), STR_82(7), STR_79(7), STR_77(7), 
 11037 ;;		 -> STR_75(7), STR_73(7), STR_71(2), STR_69(7), 
 11038 ;;		 -> STR_64(7), STR_62(7), STR_60(7), STR_58(7), 
 11039 ;;		 -> STR_56(7), STR_55(7), STR_51(7), STR_48(7), 
 11040 ;;		 -> STR_47(7), STR_43(2), STR_40(7), STR_38(7), 
 11041 ;;		 -> STR_36(7), STR_34(7), STR_32(7), STR_31(7), 
 11042 ;;		 -> STR_28(7), STR_26(7), STR_24(7), 
 11043 ;; Auto vars:     Size  Location     Type
 11044 ;;  i               2   26[COMRAM] unsigned int 
 11045 ;; Return value:  Size  Location     Type
 11046 ;;                  2   21[COMRAM] unsigned int 
 11047 ;; Registers used:
 11048 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11049 ;; Tracked objects:
 11050 ;;		On entry : 0/0
 11051 ;;		On exit  : 0/0
 11052 ;;		Unchanged: 0/0
 11053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11054 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11056 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11057 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11058 ;;Total ram usage:        7 bytes
 11059 ;; Hardware stack levels used:    1
 11060 ;; Hardware stack levels required when called:    6
 11061 ;; This function calls:
 11062 ;;		_strchr
 11063 ;; This function is called by:
 11064 ;;		_strtok
 11065 ;; This function uses a non-reentrant model
 11066 ;;
 11067                           
 11068                           	psect	text44
 11069  003502                     __ptext44:
 11070                           	opt stack 0
 11071  003502                     _strspn:
 11072                           	opt stack 21
 11073                           
 11074                           ;incstack = 0
 11075  003502  0E00               	movlw	0
 11076  003504  6E1C               	movwf	strspn@i+1,c
 11077  003506  0E00               	movlw	0
 11078  003508  6E1B               	movwf	strspn@i,c
 11079  00350A  D004               	goto	l6602
 11080  00350C                     l6600:
 11081  00350C  4A16               	infsnz	strspn@s1,f,c
 11082  00350E  2A17               	incf	strspn@s1+1,f,c
 11083  003510  4A1B               	infsnz	strspn@i,f,c
 11084  003512  2A1C               	incf	strspn@i+1,f,c
 11085  003514                     l6602:
 11086  003514  C016  FFD9         	movff	strspn@s1,fsr2l
 11087  003518  C017  FFDA         	movff	strspn@s1+1,fsr2h
 11088  00351C  50DF               	movf	indf2,w,c
 11089  00351E  B4D8               	btfsc	status,2,c
 11090  003520  D013               	goto	l1755
 11091  003522  C018  F010         	movff	strspn@s2,strchr@ptr
 11092  003526  C019  F011         	movff	strspn@s2+1,strchr@ptr+1
 11093  00352A  C016  FFD9         	movff	strspn@s1,fsr2l
 11094  00352E  C017  FFDA         	movff	strspn@s1+1,fsr2h
 11095  003532  50DF               	movf	indf2,w,c
 11096  003534  6E1A               	movwf	??_strspn& (0+255),c
 11097  003536  501A               	movf	??_strspn,w,c
 11098  003538  6E12               	movwf	strchr@chr,c
 11099  00353A  6A13               	clrf	strchr@chr+1,c
 11100  00353C  EC03  F019         	call	_strchr	;wreg free
 11101  003540  5010               	movf	?_strchr,w,c
 11102  003542  1011               	iorwf	?_strchr+1,w,c
 11103  003544  A4D8               	btfss	status,2,c
 11104  003546  D7E2               	goto	l6600
 11105  003548                     l1755:
 11106  003548  C01B  F016         	movff	strspn@i,?_strspn
 11107  00354C  C01C  F017         	movff	strspn@i+1,?_strspn+1
 11108  003550  0012               	return		;funcret
 11109  003552                     __end_of_strspn:
 11110                           	opt stack 0
 11111                           tblptru	equ	0xFF8
 11112                           tblptrh	equ	0xFF7
 11113                           tblptrl	equ	0xFF6
 11114                           tablat	equ	0xFF5
 11115                           prodh	equ	0xFF4
 11116                           prodl	equ	0xFF3
 11117                           intcon	equ	0xFF2
 11118                           indf0	equ	0xFEF
 11119                           postinc0	equ	0xFEE
 11120                           fsr0h	equ	0xFEA
 11121                           fsr0l	equ	0xFE9
 11122                           wreg	equ	0xFE8
 11123                           indf1	equ	0xFE7
 11124                           postdec1	equ	0xFE5
 11125                           fsr1h	equ	0xFE2
 11126                           fsr1l	equ	0xFE1
 11127                           indf2	equ	0xFDF
 11128                           postinc2	equ	0xFDE
 11129                           fsr2h	equ	0xFDA
 11130                           fsr2l	equ	0xFD9
 11131                           status	equ	0xFD8
 11132                           
 11133 ;; *************** function _strcspn *****************
 11134 ;; Defined at:
 11135 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcspn.c"
 11136 ;; Parameters:    Size  Location     Type
 11137 ;;  s1              2   21[COMRAM] PTR const unsigned char 
 11138 ;;		 -> uart_str(150), NULL(0), 
 11139 ;;  s2              2   23[COMRAM] PTR const unsigned char 
 11140 ;;		 -> STR_83(7), STR_82(7), STR_79(7), STR_77(7), 
 11141 ;;		 -> STR_75(7), STR_73(7), STR_71(2), STR_69(7), 
 11142 ;;		 -> STR_64(7), STR_62(7), STR_60(7), STR_58(7), 
 11143 ;;		 -> STR_56(7), STR_55(7), STR_51(7), STR_48(7), 
 11144 ;;		 -> STR_47(7), STR_43(2), STR_40(7), STR_38(7), 
 11145 ;;		 -> STR_36(7), STR_34(7), STR_32(7), STR_31(7), 
 11146 ;;		 -> STR_28(7), STR_26(7), STR_24(7), 
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;  i               2   26[COMRAM] unsigned int 
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  2   21[COMRAM] unsigned int 
 11151 ;; Registers used:
 11152 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11158 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11159 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11160 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11161 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11162 ;;Total ram usage:        7 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    6
 11165 ;; This function calls:
 11166 ;;		_strchr
 11167 ;; This function is called by:
 11168 ;;		_strtok
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           	psect	text45
 11173  003552                     __ptext45:
 11174                           	opt stack 0
 11175  003552                     _strcspn:
 11176                           	opt stack 21
 11177                           
 11178                           ;incstack = 0
 11179  003552  0E00               	movlw	0
 11180  003554  6E1C               	movwf	strcspn@i+1,c
 11181  003556  0E00               	movlw	0
 11182  003558  6E1B               	movwf	strcspn@i,c
 11183  00355A  D004               	goto	l6610
 11184  00355C                     l6608:
 11185  00355C  4A16               	infsnz	strcspn@s1,f,c
 11186  00355E  2A17               	incf	strcspn@s1+1,f,c
 11187  003560  4A1B               	infsnz	strcspn@i,f,c
 11188  003562  2A1C               	incf	strcspn@i+1,f,c
 11189  003564                     l6610:
 11190  003564  C016  FFD9         	movff	strcspn@s1,fsr2l
 11191  003568  C017  FFDA         	movff	strcspn@s1+1,fsr2h
 11192  00356C  50DF               	movf	indf2,w,c
 11193  00356E  B4D8               	btfsc	status,2,c
 11194  003570  D013               	goto	l1736
 11195  003572  C018  F010         	movff	strcspn@s2,strchr@ptr
 11196  003576  C019  F011         	movff	strcspn@s2+1,strchr@ptr+1
 11197  00357A  C016  FFD9         	movff	strcspn@s1,fsr2l
 11198  00357E  C017  FFDA         	movff	strcspn@s1+1,fsr2h
 11199  003582  50DF               	movf	indf2,w,c
 11200  003584  6E1A               	movwf	??_strcspn& (0+255),c
 11201  003586  501A               	movf	??_strcspn,w,c
 11202  003588  6E12               	movwf	strchr@chr,c
 11203  00358A  6A13               	clrf	strchr@chr+1,c
 11204  00358C  EC03  F019         	call	_strchr	;wreg free
 11205  003590  5010               	movf	?_strchr,w,c
 11206  003592  1011               	iorwf	?_strchr+1,w,c
 11207  003594  B4D8               	btfsc	status,2,c
 11208  003596  D7E2               	goto	l6608
 11209  003598                     l1736:
 11210  003598  C01B  F016         	movff	strcspn@i,?_strcspn
 11211  00359C  C01C  F017         	movff	strcspn@i+1,?_strcspn+1
 11212  0035A0  0012               	return		;funcret
 11213  0035A2                     __end_of_strcspn:
 11214                           	opt stack 0
 11215                           tblptru	equ	0xFF8
 11216                           tblptrh	equ	0xFF7
 11217                           tblptrl	equ	0xFF6
 11218                           tablat	equ	0xFF5
 11219                           prodh	equ	0xFF4
 11220                           prodl	equ	0xFF3
 11221                           intcon	equ	0xFF2
 11222                           indf0	equ	0xFEF
 11223                           postinc0	equ	0xFEE
 11224                           fsr0h	equ	0xFEA
 11225                           fsr0l	equ	0xFE9
 11226                           wreg	equ	0xFE8
 11227                           indf1	equ	0xFE7
 11228                           postdec1	equ	0xFE5
 11229                           fsr1h	equ	0xFE2
 11230                           fsr1l	equ	0xFE1
 11231                           indf2	equ	0xFDF
 11232                           postinc2	equ	0xFDE
 11233                           fsr2h	equ	0xFDA
 11234                           fsr2l	equ	0xFD9
 11235                           status	equ	0xFD8
 11236                           
 11237 ;; *************** function _strstr *****************
 11238 ;; Defined at:
 11239 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strstr.c"
 11240 ;; Parameters:    Size  Location     Type
 11241 ;;  s1              2   44[COMRAM] PTR const unsigned char 
 11242 ;;		 -> uart_str(150), STR_83(7), STR_82(7), STR_79(7), 
 11243 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 11244 ;;		 -> STR_69(7), STR_64(7), STR_62(7), STR_60(7), 
 11245 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 11246 ;;		 -> STR_48(7), STR_47(7), STR_43(2), STR_40(7), 
 11247 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 11248 ;;		 -> STR_31(7), STR_28(7), STR_26(7), STR_24(7), 
 11249 ;;		 -> NULL(0), 
 11250 ;;  s2              2   46[COMRAM] PTR const unsigned char 
 11251 ;;		 -> STR_84(4), STR_68(5), STR_67(7), STR_54(7), 
 11252 ;;		 -> STR_45(8), STR_37(6), STR_35(6), STR_30(5), 
 11253 ;;		 -> STR_27(6), STR_25(4), STR_23(4), 
 11254 ;; Auto vars:     Size  Location     Type
 11255 ;;		None
 11256 ;; Return value:  Size  Location     Type
 11257 ;;                  2   44[COMRAM] PTR unsigned char 
 11258 ;; Registers used:
 11259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11260 ;; Tracked objects:
 11261 ;;		On entry : 0/0
 11262 ;;		On exit  : 0/0
 11263 ;;		Unchanged: 0/0
 11264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11265 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11268 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;Total ram usage:        4 bytes
 11270 ;; Hardware stack levels used:    1
 11271 ;; Hardware stack levels required when called:    6
 11272 ;; This function calls:
 11273 ;;		_strchr
 11274 ;;		_strlen
 11275 ;;		_strncmp
 11276 ;; This function is called by:
 11277 ;;		_parse_cmd_str
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           	psect	text46
 11282  002FE6                     __ptext46:
 11283                           	opt stack 0
 11284  002FE6                     _strstr:
 11285                           	opt stack 22
 11286                           
 11287                           ;incstack = 0
 11288  002FE6  D032               	goto	l6912
 11289  002FE8                     l6904:
 11290  002FE8  C02D  F024         	movff	strstr@s1,strncmp@s1
 11291  002FEC  C02E  F025         	movff	strstr@s1+1,strncmp@s1+1
 11292  002FF0  C02F  F026         	movff	strstr@s2,strncmp@s2
 11293  002FF4  C030  F027         	movff	strstr@s2+1,strncmp@s2+1
 11294  002FF8  C02F  F01E         	movff	strstr@s2,strlen@s
 11295  002FFC  C030  F01F         	movff	strstr@s2+1,strlen@s+1
 11296  003000  EC2E  F01A         	call	_strlen	;wreg free
 11297  003004  C01E  F028         	movff	?_strlen,strncmp@len
 11298  003008  C01F  F029         	movff	?_strlen+1,strncmp@len+1
 11299  00300C  ECD2  F016         	call	_strncmp	;wreg free
 11300  003010  5024               	movf	?_strncmp,w,c
 11301  003012  1025               	iorwf	?_strncmp+1,w,c
 11302  003014  A4D8               	btfss	status,2,c
 11303  003016  D005               	goto	l6910
 11304  003018  C02D  F02D         	movff	strstr@s1,?_strstr
 11305  00301C  C02E  F02E         	movff	strstr@s1+1,?_strstr+1
 11306  003020  0012               	return	
 11307  003022                     l6910:
 11308  003022  0E01               	movlw	1
 11309  003024  242D               	addwf	strstr@s1,w,c
 11310  003026  6E10               	movwf	strchr@ptr,c
 11311  003028  0E00               	movlw	0
 11312  00302A  202E               	addwfc	strstr@s1+1,w,c
 11313  00302C  6E11               	movwf	strchr@ptr+1,c
 11314  00302E  C02F  FFF6         	movff	strstr@s2,tblptrl
 11315  003032  C030  FFF7         	movff	strstr@s2+1,tblptrh
 11316  003036                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11317  003036  6AF8               	clrf	tblptru,c
 11318  003038                     	endif
 11319  003038                     	if	0	;tblptru may be non-zero
 11320  003038                     	endif
 11321  003038  0008               	tblrd		*
 11322  00303A  50F5               	movf	tablat,w,c
 11323  00303C  6E12               	movwf	strchr@chr,c
 11324  00303E  6A13               	clrf	strchr@chr+1,c
 11325  003040  EC03  F019         	call	_strchr	;wreg free
 11326  003044  C010  F02D         	movff	?_strchr,strstr@s1
 11327  003048  C011  F02E         	movff	?_strchr+1,strstr@s1+1
 11328  00304C                     l6912:
 11329  00304C  502D               	movf	strstr@s1,w,c
 11330  00304E  102E               	iorwf	strstr@s1+1,w,c
 11331  003050  B4D8               	btfsc	status,2,c
 11332  003052  D014               	goto	l6916
 11333  003054  C02D  FFF6         	movff	strstr@s1,tblptrl
 11334  003058  C02E  FFF7         	movff	strstr@s1+1,tblptrh
 11335  00305C  0E00               	movlw	low (__mediumconst shr (0+16))
 11336  00305E  6EF8               	movwf	tblptru,c
 11337  003060  0E0F               	movlw	(high __ramtop+-1)
 11338  003062  64F7               	cpfsgt	tblptrh,c
 11339  003064  D003               	bra	u7047
 11340  003066  0008               	tblrd		*
 11341  003068  50F5               	movf	tablat,w,c
 11342  00306A  D005               	bra	u7040
 11343  00306C                     u7047:
 11344  00306C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11345  003070  CFF7 FFEA          	movff	tblptrh,fsr0h
 11346  003074  50EF               	movf	indf0,w,c
 11347  003076                     u7040:
 11348  003076  0900               	iorlw	0
 11349  003078  A4D8               	btfss	status,2,c
 11350  00307A  D7B6               	goto	l6904
 11351  00307C                     l6916:
 11352  00307C  0E00               	movlw	0
 11353  00307E  6E2D               	movwf	?_strstr,c
 11354  003080  0E00               	movlw	0
 11355  003082  6E2E               	movwf	?_strstr+1,c
 11356  003084  0012               	return	
 11357  003086                     __end_of_strstr:
 11358                           	opt stack 0
 11359                           tblptru	equ	0xFF8
 11360                           tblptrh	equ	0xFF7
 11361                           tblptrl	equ	0xFF6
 11362                           tablat	equ	0xFF5
 11363                           prodh	equ	0xFF4
 11364                           prodl	equ	0xFF3
 11365                           intcon	equ	0xFF2
 11366                           indf0	equ	0xFEF
 11367                           postinc0	equ	0xFEE
 11368                           fsr0h	equ	0xFEA
 11369                           fsr0l	equ	0xFE9
 11370                           wreg	equ	0xFE8
 11371                           indf1	equ	0xFE7
 11372                           postdec1	equ	0xFE5
 11373                           fsr1h	equ	0xFE2
 11374                           fsr1l	equ	0xFE1
 11375                           indf2	equ	0xFDF
 11376                           postinc2	equ	0xFDE
 11377                           fsr2h	equ	0xFDA
 11378                           fsr2l	equ	0xFD9
 11379                           status	equ	0xFD8
 11380                           
 11381 ;; *************** function _strncmp *****************
 11382 ;; Defined at:
 11383 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncmp.c"
 11384 ;; Parameters:    Size  Location     Type
 11385 ;;  s1              2   35[COMRAM] PTR const unsigned char 
 11386 ;;		 -> uart_str(150), STR_83(7), STR_82(7), STR_79(7), 
 11387 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 11388 ;;		 -> STR_69(7), STR_64(7), STR_62(7), STR_60(7), 
 11389 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 11390 ;;		 -> STR_48(7), STR_47(7), STR_43(2), STR_40(7), 
 11391 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 11392 ;;		 -> STR_31(7), STR_28(7), STR_26(7), STR_24(7), 
 11393 ;;		 -> NULL(0), 
 11394 ;;  s2              2   37[COMRAM] PTR const unsigned char 
 11395 ;;		 -> STR_84(4), STR_68(5), STR_67(7), STR_54(7), 
 11396 ;;		 -> STR_45(8), STR_37(6), STR_35(6), STR_30(5), 
 11397 ;;		 -> STR_27(6), STR_25(4), STR_23(4), 
 11398 ;;  len             2   39[COMRAM] unsigned int 
 11399 ;; Auto vars:     Size  Location     Type
 11400 ;;		None
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  2   35[COMRAM] int 
 11403 ;; Registers used:
 11404 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11410 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11412 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11413 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11414 ;;Total ram usage:        9 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    5
 11417 ;; This function calls:
 11418 ;;		Nothing
 11419 ;; This function is called by:
 11420 ;;		_strstr
 11421 ;; This function uses a non-reentrant model
 11422 ;;
 11423                           
 11424                           	psect	text47
 11425  002DA4                     __ptext47:
 11426                           	opt stack 0
 11427  002DA4                     _strncmp:
 11428                           	opt stack 22
 11429                           
 11430                           ;incstack = 0
 11431  002DA4  D05A               	goto	l6592
 11432  002DA6                     l6582:
 11433  002DA6  C024  FFF6         	movff	strncmp@s1,tblptrl
 11434  002DAA  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 11435  002DAE  0E00               	movlw	low (__mediumconst shr (0+16))
 11436  002DB0  6EF8               	movwf	tblptru,c
 11437  002DB2  0E0F               	movlw	(high __ramtop+-1)
 11438  002DB4  64F7               	cpfsgt	tblptrh,c
 11439  002DB6  D003               	bra	u6627
 11440  002DB8  0008               	tblrd		*
 11441  002DBA  50F5               	movf	tablat,w,c
 11442  002DBC  D005               	bra	u6620
 11443  002DBE                     u6627:
 11444  002DBE  CFF6 FFE9          	movff	tblptrl,fsr0l
 11445  002DC2  CFF7 FFEA          	movff	tblptrh,fsr0h
 11446  002DC6  50EF               	movf	indf0,w,c
 11447  002DC8                     u6620:
 11448  002DC8  0900               	iorlw	0
 11449  002DCA  B4D8               	btfsc	status,2,c
 11450  002DCC  D01C               	goto	l6586
 11451  002DCE  C026  FFF6         	movff	strncmp@s2,tblptrl
 11452  002DD2  C027  FFF7         	movff	strncmp@s2+1,tblptrh
 11453  002DD6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11454  002DD6  6AF8               	clrf	tblptru,c
 11455  002DD8                     	endif
 11456  002DD8                     	if	0	;tblptru may be non-zero
 11457  002DD8                     	endif
 11458  002DD8  0008               	tblrd		*
 11459  002DDA  CFF5 F02A          	movff	tablat,??_strncmp
 11460  002DDE  C024  FFF6         	movff	strncmp@s1,tblptrl
 11461  002DE2  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 11462  002DE6  0E00               	movlw	low (__mediumconst shr (0+16))
 11463  002DE8  6EF8               	movwf	tblptru,c
 11464  002DEA  0E0F               	movlw	(high __ramtop+-1)
 11465  002DEC  64F7               	cpfsgt	tblptrh,c
 11466  002DEE  D003               	bra	u6647
 11467  002DF0  0008               	tblrd		*
 11468  002DF2  50F5               	movf	tablat,w,c
 11469  002DF4  D005               	bra	u6645
 11470  002DF6                     u6647:
 11471  002DF6  CFF6 FFE9          	movff	tblptrl,fsr0l
 11472  002DFA  CFF7 FFEA          	movff	tblptrh,fsr0h
 11473  002DFE  50EF               	movf	indf0,w,c
 11474  002E00                     u6645:
 11475  002E00  182A               	xorwf	??_strncmp,w,c
 11476  002E02  B4D8               	btfsc	status,2,c
 11477  002E04  D026               	goto	l6590
 11478  002E06                     l6586:
 11479  002E06  C026  FFF6         	movff	strncmp@s2,tblptrl
 11480  002E0A  C027  FFF7         	movff	strncmp@s2+1,tblptrh
 11481  002E0E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11482  002E0E  6AF8               	clrf	tblptru,c
 11483  002E10                     	endif
 11484  002E10                     	if	0	;tblptru may be non-zero
 11485  002E10                     	endif
 11486  002E10  0008               	tblrd		*
 11487  002E12  50F5               	movf	tablat,w,c
 11488  002E14  6E2A               	movwf	??_strncmp& (0+255),c
 11489  002E16  6A2B               	clrf	(??_strncmp+1)& (0+255),c
 11490  002E18  1E2A               	comf	??_strncmp,f,c
 11491  002E1A  1E2B               	comf	??_strncmp+1,f,c
 11492  002E1C  4A2A               	infsnz	??_strncmp,f,c
 11493  002E1E  2A2B               	incf	??_strncmp+1,f,c
 11494  002E20  C024  FFF6         	movff	strncmp@s1,tblptrl
 11495  002E24  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 11496  002E28  0E00               	movlw	low (__mediumconst shr (0+16))
 11497  002E2A  6EF8               	movwf	tblptru,c
 11498  002E2C  0E0F               	movlw	(high __ramtop+-1)
 11499  002E2E  64F7               	cpfsgt	tblptrh,c
 11500  002E30  D003               	bra	u6657
 11501  002E32  0008               	tblrd		*
 11502  002E34  50F5               	movf	tablat,w,c
 11503  002E36  D005               	bra	u6650
 11504  002E38                     u6657:
 11505  002E38  CFF6 FFE9          	movff	tblptrl,fsr0l
 11506  002E3C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11507  002E40  50EF               	movf	indf0,w,c
 11508  002E42                     u6650:
 11509  002E42  6E2C               	movwf	(??_strncmp+2)& (0+255),c
 11510  002E44  502C               	movf	??_strncmp+2,w,c
 11511  002E46  242A               	addwf	??_strncmp,w,c
 11512  002E48  6E24               	movwf	?_strncmp,c
 11513  002E4A  0E00               	movlw	0
 11514  002E4C  202B               	addwfc	??_strncmp+1,w,c
 11515  002E4E  6E25               	movwf	?_strncmp+1,c
 11516  002E50  0012               	return	
 11517  002E52                     l6590:
 11518  002E52  4A24               	infsnz	strncmp@s1,f,c
 11519  002E54  2A25               	incf	strncmp@s1+1,f,c
 11520  002E56  4A26               	infsnz	strncmp@s2,f,c
 11521  002E58  2A27               	incf	strncmp@s2+1,f,c
 11522  002E5A                     l6592:
 11523  002E5A  0628               	decf	strncmp@len,f,c
 11524  002E5C  A0D8               	btfss	status,0,c
 11525  002E5E  0629               	decf	strncmp@len+1,f,c
 11526  002E60  2828               	incf	strncmp@len,w,c
 11527  002E62  E1A1               	bnz	l6582
 11528  002E64  2829               	incf	strncmp@len+1,w,c
 11529  002E66  A4D8               	btfss	status,2,c
 11530  002E68  D79E               	goto	l6582
 11531  002E6A  0E00               	movlw	0
 11532  002E6C  6E25               	movwf	?_strncmp+1,c
 11533  002E6E  0E00               	movlw	0
 11534  002E70  6E24               	movwf	?_strncmp,c
 11535  002E72  0012               	return	
 11536  002E74                     __end_of_strncmp:
 11537                           	opt stack 0
 11538                           tblptru	equ	0xFF8
 11539                           tblptrh	equ	0xFF7
 11540                           tblptrl	equ	0xFF6
 11541                           tablat	equ	0xFF5
 11542                           prodh	equ	0xFF4
 11543                           prodl	equ	0xFF3
 11544                           intcon	equ	0xFF2
 11545                           indf0	equ	0xFEF
 11546                           postinc0	equ	0xFEE
 11547                           fsr0h	equ	0xFEA
 11548                           fsr0l	equ	0xFE9
 11549                           wreg	equ	0xFE8
 11550                           indf1	equ	0xFE7
 11551                           postdec1	equ	0xFE5
 11552                           fsr1h	equ	0xFE2
 11553                           fsr1l	equ	0xFE1
 11554                           indf2	equ	0xFDF
 11555                           postinc2	equ	0xFDE
 11556                           fsr2h	equ	0xFDA
 11557                           fsr2l	equ	0xFD9
 11558                           status	equ	0xFD8
 11559                           
 11560 ;; *************** function _strchr *****************
 11561 ;; Defined at:
 11562 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strchr.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
 11565 ;;		 -> uart_str(150), STR_83(7), STR_82(7), STR_79(7), 
 11566 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 11567 ;;		 -> STR_69(7), STR_64(7), STR_62(7), STR_60(7), 
 11568 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 11569 ;;		 -> STR_48(7), STR_47(7), STR_43(2), STR_40(7), 
 11570 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 11571 ;;		 -> STR_31(7), STR_28(7), STR_26(7), STR_24(7), 
 11572 ;;		 -> NULL(0), 
 11573 ;;  chr             2   17[COMRAM] int 
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;		None
 11576 ;; Return value:  Size  Location     Type
 11577 ;;                  2   15[COMRAM] PTR unsigned char 
 11578 ;; Registers used:
 11579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11585 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11588 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11589 ;;Total ram usage:        6 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; Hardware stack levels required when called:    5
 11592 ;; This function calls:
 11593 ;;		Nothing
 11594 ;; This function is called by:
 11595 ;;		_strstr
 11596 ;;		_strcspn
 11597 ;;		_strspn
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601                           	psect	text48
 11602  003206                     __ptext48:
 11603                           	opt stack 0
 11604  003206                     _strchr:
 11605                           	opt stack 21
 11606  003206  C010  FFF6         	movff	strchr@ptr,tblptrl
 11607  00320A  C011  FFF7         	movff	strchr@ptr+1,tblptrh
 11608  00320E  0E00               	movlw	low (__mediumconst shr (0+16))
 11609  003210  6EF8               	movwf	tblptru,c
 11610  003212  0E0F               	movlw	(high __ramtop+-1)
 11611  003214  64F7               	cpfsgt	tblptrh,c
 11612  003216  D003               	bra	u6337
 11613  003218  0008               	tblrd		*
 11614  00321A  50F5               	movf	tablat,w,c
 11615  00321C  D005               	bra	u6330
 11616  00321E                     u6337:
 11617  00321E  CFF6 FFE9          	movff	tblptrl,fsr0l
 11618  003222  CFF7 FFEA          	movff	tblptrh,fsr0h
 11619  003226  50EF               	movf	indf0,w,c
 11620  003228                     u6330:
 11621  003228  1812               	xorwf	strchr@chr,w,c
 11622  00322A  A4D8               	btfss	status,2,c
 11623  00322C  D005               	goto	l6378
 11624  00322E  C010  F010         	movff	strchr@ptr,?_strchr
 11625  003232  C011  F011         	movff	strchr@ptr+1,?_strchr+1
 11626  003236  0012               	return	
 11627  003238                     l6378:
 11628  003238  5010               	movf	strchr@ptr,w,c
 11629  00323A  6E14               	movwf	??_strchr& (0+255),c
 11630  00323C  5011               	movf	strchr@ptr+1,w,c
 11631  00323E  6E15               	movwf	(??_strchr+1)& (0+255),c
 11632  003240  4A10               	infsnz	strchr@ptr,f,c
 11633  003242  2A11               	incf	strchr@ptr+1,f,c
 11634  003244  C014  FFF6         	movff	??_strchr,tblptrl
 11635  003248  C015  FFF7         	movff	??_strchr+1,tblptrh
 11636  00324C  0E00               	movlw	low (__mediumconst shr (0+16))
 11637  00324E  6EF8               	movwf	tblptru,c
 11638  003250  0E0F               	movlw	(high __ramtop+-1)
 11639  003252  64F7               	cpfsgt	tblptrh,c
 11640  003254  D003               	bra	u6357
 11641  003256  0008               	tblrd		*
 11642  003258  50F5               	movf	tablat,w,c
 11643  00325A  D005               	bra	u6350
 11644  00325C                     u6357:
 11645  00325C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11646  003260  CFF7 FFEA          	movff	tblptrh,fsr0h
 11647  003264  50EF               	movf	indf0,w,c
 11648  003266                     u6350:
 11649  003266  0900               	iorlw	0
 11650  003268  A4D8               	btfss	status,2,c
 11651  00326A  D7CD               	goto	l6372
 11652  00326C  0E00               	movlw	0
 11653  00326E  6E10               	movwf	?_strchr,c
 11654  003270  0E00               	movlw	0
 11655  003272  6E11               	movwf	?_strchr+1,c
 11656  003274  0012               	return	
 11657  003276                     __end_of_strchr:
 11658                           	opt stack 0
 11659                           tblptru	equ	0xFF8
 11660                           tblptrh	equ	0xFF7
 11661                           tblptrl	equ	0xFF6
 11662                           tablat	equ	0xFF5
 11663                           prodh	equ	0xFF4
 11664                           prodl	equ	0xFF3
 11665                           intcon	equ	0xFF2
 11666                           indf0	equ	0xFEF
 11667                           postinc0	equ	0xFEE
 11668                           fsr0h	equ	0xFEA
 11669                           fsr0l	equ	0xFE9
 11670                           wreg	equ	0xFE8
 11671                           indf1	equ	0xFE7
 11672                           postdec1	equ	0xFE5
 11673                           fsr1h	equ	0xFE2
 11674                           fsr1l	equ	0xFE1
 11675                           indf2	equ	0xFDF
 11676                           postinc2	equ	0xFDE
 11677                           fsr2h	equ	0xFDA
 11678                           fsr2l	equ	0xFD9
 11679                           status	equ	0xFD8
 11680                           
 11681 ;; *************** function _get_str *****************
 11682 ;; Defined at:
 11683 ;;		line 38 in file "cmd_consol.c"
 11684 ;; Parameters:    Size  Location     Type
 11685 ;;  str             2   43[COMRAM] PTR unsigned char 
 11686 ;;		 -> uart_str(150), STR_83(7), STR_82(7), STR_79(7), 
 11687 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 11688 ;;		 -> STR_69(7), STR_64(7), STR_62(7), STR_60(7), 
 11689 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 11690 ;;		 -> STR_48(7), STR_47(7), STR_43(2), STR_40(7), 
 11691 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 11692 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
 11693 ;;		 -> STR_24(7), NULL(0), 
 11694 ;;  data_str        2   45[COMRAM] PTR unsigned char 
 11695 ;;		 -> cmd_data(50), 
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;		None
 11698 ;; Return value:  Size  Location     Type
 11699 ;;                  1    wreg      unsigned char 
 11700 ;; Registers used:
 11701 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11702 ;; Tracked objects:
 11703 ;;		On entry : 0/0
 11704 ;;		On exit  : 0/0
 11705 ;;		Unchanged: 0/0
 11706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11707 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11710 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11711 ;;Total ram usage:        4 bytes
 11712 ;; Hardware stack levels used:    1
 11713 ;; Hardware stack levels required when called:    6
 11714 ;; This function calls:
 11715 ;;		_memset
 11716 ;;		_strcpy
 11717 ;;		_strlen
 11718 ;; This function is called by:
 11719 ;;		_parse_cmd_str
 11720 ;; This function uses a non-reentrant model
 11721 ;;
 11722                           
 11723                           	psect	text49
 11724  0032E4                     __ptext49:
 11725                           	opt stack 0
 11726  0032E4                     _get_str:
 11727                           	opt stack 22
 11728                           
 11729                           ;cmd_consol.c: 39: if (strlen(str) < 40) {
 11730                           
 11731                           ;incstack = 0
 11732  0032E4  C02C  F01E         	movff	get_str@str,strlen@s
 11733  0032E8  C02D  F01F         	movff	get_str@str+1,strlen@s+1
 11734  0032EC  EC2E  F01A         	call	_strlen	;wreg free
 11735  0032F0  501F               	movf	?_strlen+1,w,c
 11736  0032F2  E12A               	bnz	l6810
 11737  0032F4  0E28               	movlw	40
 11738  0032F6  5C1E               	subwf	?_strlen,w,c
 11739  0032F8  B0D8               	btfsc	status,0,c
 11740  0032FA  D026               	goto	l6810
 11741                           
 11742                           ;cmd_consol.c: 40: strcpy(data_str, str);
 11743  0032FC  C02E  F010         	movff	get_str@data_str,strcpy@to
 11744  003300  C02F  F011         	movff	get_str@data_str+1,strcpy@to+1
 11745  003304  C02C  F012         	movff	get_str@str,strcpy@from
 11746  003308  C02D  F013         	movff	get_str@str+1,strcpy@from+1
 11747  00330C  EC40  F01B         	call	_strcpy	;wreg free
 11748                           
 11749                           ;cmd_consol.c: 41: valid_cmd = 1;
 11750  003310  0E01               	movlw	1
 11751  003312  0100               	movlb	0	; () banked
 11752  003314  6F84               	movwf	_valid_cmd& (0+255),b
 11753                           
 11754                           ; BSR set to: 0
 11755                           ;cmd_consol.c: 42: cmd_data.data_set = 1;
 11756  003316  0E01               	movlw	1
 11757  003318  0100               	movlb	0	; () banked
 11758  00331A  6FAF               	movwf	(_cmd_data+41)& (0+255),b
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;cmd_consol.c: 43: memset(str, 0, strlen(str));
 11762  00331C  C02C  F024         	movff	get_str@str,memset@p1
 11763  003320  C02D  F025         	movff	get_str@str+1,memset@p1+1
 11764  003324  0E00               	movlw	0
 11765  003326  6E27               	movwf	memset@c+1,c
 11766  003328  0E00               	movlw	0
 11767  00332A  6E26               	movwf	memset@c,c
 11768  00332C  C02C  F01E         	movff	get_str@str,strlen@s
 11769  003330  C02D  F01F         	movff	get_str@str+1,strlen@s+1
 11770  003334  EC2E  F01A         	call	_strlen	;wreg free
 11771  003338  C01E  F028         	movff	?_strlen,memset@n
 11772  00333C  C01F  F029         	movff	?_strlen+1,memset@n+1
 11773  003340  EC63  F01B         	call	_memset	;wreg free
 11774                           
 11775                           ;cmd_consol.c: 44: return 1;
 11776  003344  0E01               	movlw	1
 11777  003346  0012               	return	
 11778  003348                     l6810:
 11779                           
 11780                           ;cmd_consol.c: 45: }
 11781                           ;cmd_consol.c: 46: return 0;
 11782  003348  0E00               	movlw	0
 11783  00334A  0012               	return	
 11784  00334C                     __end_of_get_str:
 11785                           	opt stack 0
 11786                           tblptru	equ	0xFF8
 11787                           tblptrh	equ	0xFF7
 11788                           tblptrl	equ	0xFF6
 11789                           tablat	equ	0xFF5
 11790                           prodh	equ	0xFF4
 11791                           prodl	equ	0xFF3
 11792                           intcon	equ	0xFF2
 11793                           indf0	equ	0xFEF
 11794                           postinc0	equ	0xFEE
 11795                           fsr0h	equ	0xFEA
 11796                           fsr0l	equ	0xFE9
 11797                           wreg	equ	0xFE8
 11798                           indf1	equ	0xFE7
 11799                           postdec1	equ	0xFE5
 11800                           fsr1h	equ	0xFE2
 11801                           fsr1l	equ	0xFE1
 11802                           indf2	equ	0xFDF
 11803                           postinc2	equ	0xFDE
 11804                           fsr2h	equ	0xFDA
 11805                           fsr2l	equ	0xFD9
 11806                           status	equ	0xFD8
 11807                           
 11808 ;; *************** function _strcpy *****************
 11809 ;; Defined at:
 11810 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 11811 ;; Parameters:    Size  Location     Type
 11812 ;;  to              2   15[COMRAM] PTR unsigned char 
 11813 ;;		 -> CMD(15), cmd_data(50), clcd_display_string_details(1080), 
 11814 ;;  from            2   17[COMRAM] PTR const unsigned char 
 11815 ;;		 -> uart_str(150), STR_83(7), STR_82(7), STR_79(7), 
 11816 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 11817 ;;		 -> STR_69(7), STR_64(7), STR_62(7), STR_60(7), 
 11818 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 11819 ;;		 -> STR_48(7), STR_47(7), cmd_data.data(40), STR_43(2), 
 11820 ;;		 -> STR_40(7), STR_38(7), STR_36(7), STR_34(7), 
 11821 ;;		 -> STR_32(7), STR_31(7), STR_28(7), RAM(3895), 
 11822 ;;		 -> STR_26(7), STR_24(7), NULL(0), cmd_data(50), 
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;  cp              2   19[COMRAM] PTR unsigned char 
 11825 ;;		 -> CMD(15), cmd_data(50), clcd_display_string_details(1080), 
 11826 ;; Return value:  Size  Location     Type
 11827 ;;                  2   15[COMRAM] PTR unsigned char 
 11828 ;; Registers used:
 11829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11830 ;; Tracked objects:
 11831 ;;		On entry : 0/0
 11832 ;;		On exit  : 0/0
 11833 ;;		Unchanged: 0/0
 11834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11835 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11836 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11838 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11839 ;;Total ram usage:        6 bytes
 11840 ;; Hardware stack levels used:    1
 11841 ;; Hardware stack levels required when called:    5
 11842 ;; This function calls:
 11843 ;;		Nothing
 11844 ;; This function is called by:
 11845 ;;		_copy_data
 11846 ;;		_get_str
 11847 ;;		_parse_cmd_str
 11848 ;; This function uses a non-reentrant model
 11849 ;;
 11850                           
 11851                           	psect	text50
 11852  003680                     __ptext50:
 11853                           	opt stack 0
 11854  003680                     _strcpy:
 11855                           	opt stack 21
 11856                           
 11857                           ;incstack = 0
 11858  003680  C010  F014         	movff	strcpy@to,strcpy@cp
 11859  003684  C011  F015         	movff	strcpy@to+1,strcpy@cp+1
 11860  003688  D004               	goto	l6226
 11861  00368A                     l6224:
 11862  00368A  4A14               	infsnz	strcpy@cp,f,c
 11863  00368C  2A15               	incf	strcpy@cp+1,f,c
 11864  00368E  4A12               	infsnz	strcpy@from,f,c
 11865  003690  2A13               	incf	strcpy@from+1,f,c
 11866  003692                     l6226:
 11867  003692  C012  FFF6         	movff	strcpy@from,tblptrl
 11868  003696  C013  FFF7         	movff	strcpy@from+1,tblptrh
 11869  00369A  0E00               	movlw	low (__mediumconst shr (0+16))
 11870  00369C  6EF8               	movwf	tblptru,c
 11871  00369E  C014  FFD9         	movff	strcpy@cp,fsr2l
 11872  0036A2  C015  FFDA         	movff	strcpy@cp+1,fsr2h
 11873  0036A6  0E0F               	movlw	(high __ramtop+-1)
 11874  0036A8  64F7               	cpfsgt	tblptrh,c
 11875  0036AA  D003               	bra	u6067
 11876  0036AC  0008               	tblrd		*
 11877  0036AE  50F5               	movf	tablat,w,c
 11878  0036B0  D005               	bra	u6060
 11879  0036B2                     u6067:
 11880  0036B2  CFF6 FFE9          	movff	tblptrl,fsr0l
 11881  0036B6  CFF7 FFEA          	movff	tblptrh,fsr0h
 11882  0036BA  50EF               	movf	indf0,w,c
 11883  0036BC                     u6060:
 11884  0036BC  6EDF               	movwf	indf2,c
 11885  0036BE  50DF               	movf	indf2,w,c
 11886  0036C0  B4D8               	btfsc	status,2,c
 11887  0036C2  0012               	return	
 11888  0036C4  D7E2               	goto	l6224
 11889  0036C6                     __end_of_strcpy:
 11890                           	opt stack 0
 11891                           tblptru	equ	0xFF8
 11892                           tblptrh	equ	0xFF7
 11893                           tblptrl	equ	0xFF6
 11894                           tablat	equ	0xFF5
 11895                           prodh	equ	0xFF4
 11896                           prodl	equ	0xFF3
 11897                           intcon	equ	0xFF2
 11898                           indf0	equ	0xFEF
 11899                           postinc0	equ	0xFEE
 11900                           fsr0h	equ	0xFEA
 11901                           fsr0l	equ	0xFE9
 11902                           wreg	equ	0xFE8
 11903                           indf1	equ	0xFE7
 11904                           postdec1	equ	0xFE5
 11905                           fsr1h	equ	0xFE2
 11906                           fsr1l	equ	0xFE1
 11907                           indf2	equ	0xFDF
 11908                           postinc2	equ	0xFDE
 11909                           fsr2h	equ	0xFDA
 11910                           fsr2l	equ	0xFD9
 11911                           status	equ	0xFD8
 11912                           
 11913 ;; *************** function _memset *****************
 11914 ;; Defined at:
 11915 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memset.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;  p1              2   35[COMRAM] PTR void 
 11918 ;;		 -> uart_str(150), str_data(40), STR_83(7), STR_82(7), 
 11919 ;;		 -> STR_79(7), STR_77(7), STR_75(7), STR_73(7), 
 11920 ;;		 -> STR_71(2), STR_69(7), STR_64(7), STR_62(7), 
 11921 ;;		 -> STR_60(7), STR_58(7), STR_56(7), STR_55(7), 
 11922 ;;		 -> STR_51(7), STR_48(7), STR_47(7), STR_43(2), 
 11923 ;;		 -> STR_40(7), STR_38(7), STR_36(7), STR_34(7), 
 11924 ;;		 -> STR_32(7), STR_31(7), STR_28(7), RAM(3895), 
 11925 ;;		 -> STR_26(7), CMD(15), STR_24(7), NULL(0), 
 11926 ;;		 -> cmd_data(50), conflict_arr(20), clcd_display_string_details(1080), lcd_display_array(80), 
 11927 ;;		 -> clcd_config_data(5), 
 11928 ;;  c               2   37[COMRAM] int 
 11929 ;;  n               2   39[COMRAM] unsigned int 
 11930 ;; Auto vars:     Size  Location     Type
 11931 ;;  p               2   41[COMRAM] PTR unsigned char 
 11932 ;;		 -> uart_str(150), str_data(40), STR_83(7), STR_82(7), 
 11933 ;;		 -> STR_79(7), STR_77(7), STR_75(7), STR_73(7), 
 11934 ;;		 -> STR_71(2), STR_69(7), STR_64(7), STR_62(7), 
 11935 ;;		 -> STR_60(7), STR_58(7), STR_56(7), STR_55(7), 
 11936 ;;		 -> STR_51(7), STR_48(7), STR_47(7), STR_43(2), 
 11937 ;;		 -> STR_40(7), STR_38(7), STR_36(7), STR_34(7), 
 11938 ;;		 -> STR_32(7), STR_31(7), STR_28(7), RAM(3895), 
 11939 ;;		 -> STR_26(7), CMD(15), STR_24(7), NULL(0), 
 11940 ;;		 -> cmd_data(50), conflict_arr(20), clcd_display_string_details(1080), lcd_display_array(80), 
 11941 ;;		 -> clcd_config_data(5), 
 11942 ;; Return value:  Size  Location     Type
 11943 ;;                  2   35[COMRAM] PTR void 
 11944 ;; Registers used:
 11945 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 11946 ;; Tracked objects:
 11947 ;;		On entry : 0/0
 11948 ;;		On exit  : 0/0
 11949 ;;		Unchanged: 0/0
 11950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11951 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11954 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11955 ;;Total ram usage:        8 bytes
 11956 ;; Hardware stack levels used:    1
 11957 ;; Hardware stack levels required when called:    5
 11958 ;; This function calls:
 11959 ;;		Nothing
 11960 ;; This function is called by:
 11961 ;;		_init_CLCD_config
 11962 ;;		_init_clcd_cusotom_lcd
 11963 ;;		_update_string_data
 11964 ;;		_clcd_display_string_config
 11965 ;;		_clear_display_structure
 11966 ;;		_clear_display_array
 11967 ;;		_scroll_left_to_right
 11968 ;;		_scroll_right_to_left
 11969 ;;		_clear_cmd_data
 11970 ;;		_get_str
 11971 ;;		_parse_cmd_str
 11972 ;;		_console_init
 11973 ;;		_cmd_consol_task
 11974 ;; This function uses a non-reentrant model
 11975 ;;
 11976                           
 11977                           	psect	text51
 11978  0036C6                     __ptext51:
 11979                           	opt stack 0
 11980  0036C6                     _memset:
 11981                           	opt stack 23
 11982                           
 11983                           ;incstack = 0
 11984  0036C6  C024  F02A         	movff	memset@p1,memset@p
 11985  0036CA  C025  F02B         	movff	memset@p1+1,memset@p+1
 11986  0036CE  D015               	goto	l5950
 11987  0036D0                     l5946:
 11988  0036D0  C02A  FFF6         	movff	memset@p,tblptrl
 11989  0036D4  C02B  FFF7         	movff	memset@p+1,tblptrh
 11990  0036D8  0E00               	movlw	low (__mediumconst shr (0+16))
 11991  0036DA  6EF8               	movwf	tblptru,c
 11992  0036DC  0E0F               	movlw	(high __ramtop+-1)
 11993  0036DE  64F7               	cpfsgt	tblptrh,c
 11994  0036E0  D004               	bra	u5687
 11995  0036E2  C026  FFF5         	movff	memset@c,tablat
 11996  0036E6  000C               	tblwt		*
 11997  0036E8  D006               	bra	u5680
 11998  0036EA                     u5687:
 11999  0036EA  CFF6 FFE9          	movff	tblptrl,fsr0l
 12000  0036EE  CFF7 FFEA          	movff	tblptrh,fsr0h
 12001  0036F2  C026  FFEF         	movff	memset@c,indf0
 12002  0036F6                     u5680:
 12003  0036F6  4A2A               	infsnz	memset@p,f,c
 12004  0036F8  2A2B               	incf	memset@p+1,f,c
 12005  0036FA                     l5950:
 12006  0036FA  0628               	decf	memset@n,f,c
 12007  0036FC  A0D8               	btfss	status,0,c
 12008  0036FE  0629               	decf	memset@n+1,f,c
 12009  003700  2828               	incf	memset@n,w,c
 12010  003702  E1E6               	bnz	l5946
 12011  003704  2829               	incf	memset@n+1,w,c
 12012  003706  B4D8               	btfsc	status,2,c
 12013  003708  0012               	return	
 12014  00370A  D7E2               	goto	l5946
 12015  00370C                     __end_of_memset:
 12016                           	opt stack 0
 12017                           tblptru	equ	0xFF8
 12018                           tblptrh	equ	0xFF7
 12019                           tblptrl	equ	0xFF6
 12020                           tablat	equ	0xFF5
 12021                           prodh	equ	0xFF4
 12022                           prodl	equ	0xFF3
 12023                           intcon	equ	0xFF2
 12024                           indf0	equ	0xFEF
 12025                           postinc0	equ	0xFEE
 12026                           fsr0h	equ	0xFEA
 12027                           fsr0l	equ	0xFE9
 12028                           wreg	equ	0xFE8
 12029                           indf1	equ	0xFE7
 12030                           postdec1	equ	0xFE5
 12031                           fsr1h	equ	0xFE2
 12032                           fsr1l	equ	0xFE1
 12033                           indf2	equ	0xFDF
 12034                           postinc2	equ	0xFDE
 12035                           fsr2h	equ	0xFDA
 12036                           fsr2l	equ	0xFD9
 12037                           status	equ	0xFD8
 12038                           
 12039 ;; *************** function _get_dis_frq *****************
 12040 ;; Defined at:
 12041 ;;		line 68 in file "cmd_consol.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;  str             2   47[COMRAM] PTR unsigned char 
 12044 ;;		 -> uart_str(150), STR_83(7), STR_82(7), STR_79(7), 
 12045 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 12046 ;;		 -> STR_69(7), STR_64(7), STR_62(7), STR_60(7), 
 12047 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 12048 ;;		 -> STR_48(7), STR_47(7), STR_43(2), STR_40(7), 
 12049 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 12050 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
 12051 ;;		 -> STR_24(7), NULL(0), 
 12052 ;;  data_frq        2   49[COMRAM] PTR unsigned char 
 12053 ;;		 -> RAM(3895), 
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;  i               2   54[COMRAM] int 
 12056 ;;  frq             1   56[COMRAM] unsigned char 
 12057 ;; Return value:  Size  Location     Type
 12058 ;;                  1    wreg      unsigned char 
 12059 ;; Registers used:
 12060 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12061 ;; Tracked objects:
 12062 ;;		On entry : 0/0
 12063 ;;		On exit  : 0/0
 12064 ;;		Unchanged: 0/0
 12065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12066 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12067 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12068 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12069 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12070 ;;Total ram usage:       10 bytes
 12071 ;; Hardware stack levels used:    1
 12072 ;; Hardware stack levels required when called:    8
 12073 ;; This function calls:
 12074 ;;		_isdigit
 12075 ;;		_printf
 12076 ;;		_strlen
 12077 ;; This function is called by:
 12078 ;;		_parse_cmd_str
 12079 ;; This function uses a non-reentrant model
 12080 ;;
 12081                           
 12082                           	psect	text52
 12083  002AFE                     __ptext52:
 12084                           	opt stack 0
 12085  002AFE                     _get_dis_frq:
 12086                           	opt stack 20
 12087                           
 12088                           ;cmd_consol.c: 69: char frq = 0;
 12089                           
 12090                           ;incstack = 0
 12091  002AFE  0E00               	movlw	0
 12092  002B00  6E39               	movwf	get_dis_frq@frq,c
 12093                           
 12094                           ;cmd_consol.c: 70: int i = 0;
 12095  002B02  0E00               	movlw	0
 12096  002B04  6E38               	movwf	get_dis_frq@i+1,c
 12097  002B06  0E00               	movlw	0
 12098  002B08  6E37               	movwf	get_dis_frq@i,c
 12099                           
 12100                           ;cmd_consol.c: 71: for (i = 0; i < strlen(str); i++) {
 12101  002B0A  0E00               	movlw	0
 12102  002B0C  6E38               	movwf	get_dis_frq@i+1,c
 12103  002B0E  0E00               	movlw	0
 12104  002B10  6E37               	movwf	get_dis_frq@i,c
 12105  002B12  D03E               	goto	l6858
 12106  002B14                     l6848:
 12107                           
 12108                           ;cmd_consol.c: 72: if (isdigit(str[i]) == 1)
 12109  002B14  5037               	movf	get_dis_frq@i,w,c
 12110  002B16  2430               	addwf	get_dis_frq@str,w,c
 12111  002B18  6E34               	movwf	??_get_dis_frq& (0+255),c
 12112  002B1A  5038               	movf	get_dis_frq@i+1,w,c
 12113  002B1C  2031               	addwfc	get_dis_frq@str+1,w,c
 12114  002B1E  6E35               	movwf	(??_get_dis_frq+1)& (0+255),c
 12115  002B20  C034  FFF6         	movff	??_get_dis_frq,tblptrl
 12116  002B24  C035  FFF7         	movff	??_get_dis_frq+1,tblptrh
 12117  002B28  0E00               	movlw	low (__mediumconst shr (0+16))
 12118  002B2A  6EF8               	movwf	tblptru,c
 12119  002B2C  0E0F               	movlw	(high __ramtop+-1)
 12120  002B2E  64F7               	cpfsgt	tblptrh,c
 12121  002B30  D003               	bra	u6927
 12122  002B32  0008               	tblrd		*
 12123  002B34  50F5               	movf	tablat,w,c
 12124  002B36  D005               	bra	u6920
 12125  002B38                     u6927:
 12126  002B38  CFF6 FFE9          	movff	tblptrl,fsr0l
 12127  002B3C  CFF7 FFEA          	movff	tblptrh,fsr0h
 12128  002B40  50EF               	movf	indf0,w,c
 12129  002B42                     u6920:
 12130  002B42  EC3D  F01D         	call	_isdigit
 12131  002B46  A0D8               	btfss	status,0,c
 12132  002B48  D01F               	goto	l6852
 12133                           
 12134                           ;cmd_consol.c: 73: frq = frq * 10 + (str[i] - '0');
 12135  002B4A  5037               	movf	get_dis_frq@i,w,c
 12136  002B4C  2430               	addwf	get_dis_frq@str,w,c
 12137  002B4E  6E34               	movwf	??_get_dis_frq& (0+255),c
 12138  002B50  5038               	movf	get_dis_frq@i+1,w,c
 12139  002B52  2031               	addwfc	get_dis_frq@str+1,w,c
 12140  002B54  6E35               	movwf	(??_get_dis_frq+1)& (0+255),c
 12141  002B56  C034  FFF6         	movff	??_get_dis_frq,tblptrl
 12142  002B5A  C035  FFF7         	movff	??_get_dis_frq+1,tblptrh
 12143  002B5E  0E00               	movlw	low (__mediumconst shr (0+16))
 12144  002B60  6EF8               	movwf	tblptru,c
 12145  002B62  0E0F               	movlw	(high __ramtop+-1)
 12146  002B64  64F7               	cpfsgt	tblptrh,c
 12147  002B66  D003               	bra	u6947
 12148  002B68  0008               	tblrd		*
 12149  002B6A  50F5               	movf	tablat,w,c
 12150  002B6C  D005               	bra	u6940
 12151  002B6E                     u6947:
 12152  002B6E  CFF6 FFE9          	movff	tblptrl,fsr0l
 12153  002B72  CFF7 FFEA          	movff	tblptrh,fsr0h
 12154  002B76  50EF               	movf	indf0,w,c
 12155  002B78                     u6940:
 12156  002B78  6E36               	movwf	(??_get_dis_frq+2)& (0+255),c
 12157  002B7A  5039               	movf	get_dis_frq@frq,w,c
 12158  002B7C  0D0A               	mullw	10
 12159  002B7E  50F3               	movf	prodl,w,c
 12160  002B80  2436               	addwf	??_get_dis_frq+2,w,c
 12161  002B82  0FD0               	addlw	208
 12162  002B84  6E39               	movwf	get_dis_frq@frq,c
 12163  002B86  D002               	goto	l6856
 12164  002B88                     l6852:
 12165                           
 12166                           ;cmd_consol.c: 74: else
 12167                           ;cmd_consol.c: 75: return 0;
 12168  002B88  0E00               	movlw	0
 12169  002B8A  0012               	return	
 12170  002B8C                     l6856:
 12171  002B8C  4A37               	infsnz	get_dis_frq@i,f,c
 12172  002B8E  2A38               	incf	get_dis_frq@i+1,f,c
 12173  002B90                     l6858:
 12174  002B90  C030  F01E         	movff	get_dis_frq@str,strlen@s
 12175  002B94  C031  F01F         	movff	get_dis_frq@str+1,strlen@s+1
 12176  002B98  EC2E  F01A         	call	_strlen	;wreg free
 12177  002B9C  501E               	movf	?_strlen,w,c
 12178  002B9E  5C37               	subwf	get_dis_frq@i,w,c
 12179  002BA0  501F               	movf	?_strlen+1,w,c
 12180  002BA2  5838               	subwfb	get_dis_frq@i+1,w,c
 12181  002BA4  A0D8               	btfss	status,0,c
 12182  002BA6  D7B6               	goto	l6848
 12183                           
 12184                           ;cmd_consol.c: 76: }
 12185                           ;cmd_consol.c: 77: printf("display_frq = %d\r\n", frq);
 12186  002BA8  0ED0               	movlw	low STR_19
 12187  002BAA  6E1E               	movwf	printf@f,c
 12188  002BAC  0EFD               	movlw	high STR_19
 12189  002BAE  6E1F               	movwf	printf@f+1,c
 12190  002BB0  C039  F020         	movff	get_dis_frq@frq,?_printf+2
 12191  002BB4  6A21               	clrf	?_printf+3,c
 12192  002BB6  EC48  F012         	call	_printf	;wreg free
 12193                           
 12194                           ;cmd_consol.c: 78: if (frq >= clcd_config_data.clcd_max_row) {
 12195  002BBA  504A               	movf	_clcd_config_data+1,w,c
 12196  002BBC  5C39               	subwf	get_dis_frq@frq,w,c
 12197  002BBE  A0D8               	btfss	status,0,c
 12198  002BC0  D008               	goto	l6872
 12199                           
 12200                           ;cmd_consol.c: 79: *data_frq = -1;
 12201  002BC2  C032  FFD9         	movff	get_dis_frq@data_frq,fsr2l
 12202  002BC6  C033  FFDA         	movff	get_dis_frq@data_frq+1,fsr2h
 12203  002BCA  0EFF               	movlw	255
 12204  002BCC  6EDF               	movwf	indf2,c
 12205                           
 12206                           ;cmd_consol.c: 80: return 0;
 12207  002BCE  0E00               	movlw	0
 12208                           
 12209                           ;cmd_consol.c: 81: } else {
 12210  002BD0  0012               	return	
 12211  002BD2                     l6872:
 12212                           
 12213                           ;cmd_consol.c: 82: *data_frq = frq;
 12214  002BD2  C032  FFD9         	movff	get_dis_frq@data_frq,fsr2l
 12215  002BD6  C033  FFDA         	movff	get_dis_frq@data_frq+1,fsr2h
 12216  002BDA  C039  FFDF         	movff	get_dis_frq@frq,indf2
 12217                           
 12218                           ;cmd_consol.c: 83: return 1;
 12219  002BDE  0E01               	movlw	1
 12220  002BE0  0012               	return	
 12221  002BE2                     __end_of_get_dis_frq:
 12222                           	opt stack 0
 12223                           tblptru	equ	0xFF8
 12224                           tblptrh	equ	0xFF7
 12225                           tblptrl	equ	0xFF6
 12226                           tablat	equ	0xFF5
 12227                           prodh	equ	0xFF4
 12228                           prodl	equ	0xFF3
 12229                           intcon	equ	0xFF2
 12230                           indf0	equ	0xFEF
 12231                           postinc0	equ	0xFEE
 12232                           fsr0h	equ	0xFEA
 12233                           fsr0l	equ	0xFE9
 12234                           wreg	equ	0xFE8
 12235                           indf1	equ	0xFE7
 12236                           postdec1	equ	0xFE5
 12237                           fsr1h	equ	0xFE2
 12238                           fsr1l	equ	0xFE1
 12239                           indf2	equ	0xFDF
 12240                           postinc2	equ	0xFDE
 12241                           fsr2h	equ	0xFDA
 12242                           fsr2l	equ	0xFD9
 12243                           status	equ	0xFD8
 12244                           
 12245 ;; *************** function _get_direction *****************
 12246 ;; Defined at:
 12247 ;;		line 49 in file "cmd_consol.c"
 12248 ;; Parameters:    Size  Location     Type
 12249 ;;  str             2   47[COMRAM] PTR unsigned char 
 12250 ;;		 -> uart_str(150), STR_83(7), STR_82(7), STR_79(7), 
 12251 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 12252 ;;		 -> STR_69(7), STR_64(7), STR_62(7), STR_60(7), 
 12253 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 12254 ;;		 -> STR_48(7), STR_47(7), STR_43(2), STR_40(7), 
 12255 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 12256 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
 12257 ;;		 -> STR_24(7), NULL(0), 
 12258 ;;  data_directi    2   49[COMRAM] PTR unsigned char 
 12259 ;;		 -> RAM(3895), 
 12260 ;; Auto vars:     Size  Location     Type
 12261 ;;  i               2   54[COMRAM] int 
 12262 ;;  direction       1   56[COMRAM] unsigned char 
 12263 ;; Return value:  Size  Location     Type
 12264 ;;                  1    wreg      unsigned char 
 12265 ;; Registers used:
 12266 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12267 ;; Tracked objects:
 12268 ;;		On entry : 0/0
 12269 ;;		On exit  : 0/0
 12270 ;;		Unchanged: 0/0
 12271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12272 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12273 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12274 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12275 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12276 ;;Total ram usage:       10 bytes
 12277 ;; Hardware stack levels used:    1
 12278 ;; Hardware stack levels required when called:    8
 12279 ;; This function calls:
 12280 ;;		_isdigit
 12281 ;;		_printf
 12282 ;;		_strlen
 12283 ;; This function is called by:
 12284 ;;		_parse_cmd_str
 12285 ;; This function uses a non-reentrant model
 12286 ;;
 12287                           
 12288                           	psect	text53
 12289  002BE2                     __ptext53:
 12290                           	opt stack 0
 12291  002BE2                     _get_direction:
 12292                           	opt stack 20
 12293                           
 12294                           ;cmd_consol.c: 50: char direction = 0;
 12295                           
 12296                           ;incstack = 0
 12297  002BE2  0E00               	movlw	0
 12298  002BE4  6E39               	movwf	get_direction@direction,c
 12299                           
 12300                           ;cmd_consol.c: 51: int i = 0;
 12301  002BE6  0E00               	movlw	0
 12302  002BE8  6E38               	movwf	get_direction@i+1,c
 12303  002BEA  0E00               	movlw	0
 12304  002BEC  6E37               	movwf	get_direction@i,c
 12305                           
 12306                           ;cmd_consol.c: 52: for (i = 0; i < strlen(str); i++) {
 12307  002BEE  0E00               	movlw	0
 12308  002BF0  6E38               	movwf	get_direction@i+1,c
 12309  002BF2  0E00               	movlw	0
 12310  002BF4  6E37               	movwf	get_direction@i,c
 12311  002BF6  D03E               	goto	l6826
 12312  002BF8                     l6816:
 12313                           
 12314                           ;cmd_consol.c: 53: if (isdigit(str[i]) == 1)
 12315  002BF8  5037               	movf	get_direction@i,w,c
 12316  002BFA  2430               	addwf	get_direction@str,w,c
 12317  002BFC  6E34               	movwf	??_get_direction& (0+255),c
 12318  002BFE  5038               	movf	get_direction@i+1,w,c
 12319  002C00  2031               	addwfc	get_direction@str+1,w,c
 12320  002C02  6E35               	movwf	(??_get_direction+1)& (0+255),c
 12321  002C04  C034  FFF6         	movff	??_get_direction,tblptrl
 12322  002C08  C035  FFF7         	movff	??_get_direction+1,tblptrh
 12323  002C0C  0E00               	movlw	low (__mediumconst shr (0+16))
 12324  002C0E  6EF8               	movwf	tblptru,c
 12325  002C10  0E0F               	movlw	(high __ramtop+-1)
 12326  002C12  64F7               	cpfsgt	tblptrh,c
 12327  002C14  D003               	bra	u6877
 12328  002C16  0008               	tblrd		*
 12329  002C18  50F5               	movf	tablat,w,c
 12330  002C1A  D005               	bra	u6870
 12331  002C1C                     u6877:
 12332  002C1C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12333  002C20  CFF7 FFEA          	movff	tblptrh,fsr0h
 12334  002C24  50EF               	movf	indf0,w,c
 12335  002C26                     u6870:
 12336  002C26  EC3D  F01D         	call	_isdigit
 12337  002C2A  A0D8               	btfss	status,0,c
 12338  002C2C  D01F               	goto	l6820
 12339                           
 12340                           ;cmd_consol.c: 54: direction = direction * 10 + (str[i] - '0');
 12341  002C2E  5037               	movf	get_direction@i,w,c
 12342  002C30  2430               	addwf	get_direction@str,w,c
 12343  002C32  6E34               	movwf	??_get_direction& (0+255),c
 12344  002C34  5038               	movf	get_direction@i+1,w,c
 12345  002C36  2031               	addwfc	get_direction@str+1,w,c
 12346  002C38  6E35               	movwf	(??_get_direction+1)& (0+255),c
 12347  002C3A  C034  FFF6         	movff	??_get_direction,tblptrl
 12348  002C3E  C035  FFF7         	movff	??_get_direction+1,tblptrh
 12349  002C42  0E00               	movlw	low (__mediumconst shr (0+16))
 12350  002C44  6EF8               	movwf	tblptru,c
 12351  002C46  0E0F               	movlw	(high __ramtop+-1)
 12352  002C48  64F7               	cpfsgt	tblptrh,c
 12353  002C4A  D003               	bra	u6897
 12354  002C4C  0008               	tblrd		*
 12355  002C4E  50F5               	movf	tablat,w,c
 12356  002C50  D005               	bra	u6890
 12357  002C52                     u6897:
 12358  002C52  CFF6 FFE9          	movff	tblptrl,fsr0l
 12359  002C56  CFF7 FFEA          	movff	tblptrh,fsr0h
 12360  002C5A  50EF               	movf	indf0,w,c
 12361  002C5C                     u6890:
 12362  002C5C  6E36               	movwf	(??_get_direction+2)& (0+255),c
 12363  002C5E  5039               	movf	get_direction@direction,w,c
 12364  002C60  0D0A               	mullw	10
 12365  002C62  50F3               	movf	prodl,w,c
 12366  002C64  2436               	addwf	??_get_direction+2,w,c
 12367  002C66  0FD0               	addlw	208
 12368  002C68  6E39               	movwf	get_direction@direction,c
 12369  002C6A  D002               	goto	l6824
 12370  002C6C                     l6820:
 12371                           
 12372                           ;cmd_consol.c: 55: else
 12373                           ;cmd_consol.c: 56: return 0;
 12374  002C6C  0E00               	movlw	0
 12375  002C6E  0012               	return	
 12376  002C70                     l6824:
 12377  002C70  4A37               	infsnz	get_direction@i,f,c
 12378  002C72  2A38               	incf	get_direction@i+1,f,c
 12379  002C74                     l6826:
 12380  002C74  C030  F01E         	movff	get_direction@str,strlen@s
 12381  002C78  C031  F01F         	movff	get_direction@str+1,strlen@s+1
 12382  002C7C  EC2E  F01A         	call	_strlen	;wreg free
 12383  002C80  501E               	movf	?_strlen,w,c
 12384  002C82  5C37               	subwf	get_direction@i,w,c
 12385  002C84  501F               	movf	?_strlen+1,w,c
 12386  002C86  5838               	subwfb	get_direction@i+1,w,c
 12387  002C88  A0D8               	btfss	status,0,c
 12388  002C8A  D7B6               	goto	l6816
 12389                           
 12390                           ;cmd_consol.c: 57: }
 12391                           ;cmd_consol.c: 58: printf("direction = %d\r\n", direction);
 12392  002C8C  0E1A               	movlw	low STR_18
 12393  002C8E  6E1E               	movwf	printf@f,c
 12394  002C90  0EFE               	movlw	high STR_18
 12395  002C92  6E1F               	movwf	printf@f+1,c
 12396  002C94  C039  F020         	movff	get_direction@direction,?_printf+2
 12397  002C98  6A21               	clrf	?_printf+3,c
 12398  002C9A  EC48  F012         	call	_printf	;wreg free
 12399                           
 12400                           ;cmd_consol.c: 59: if (direction >= clcd_config_data.clcd_max_row) {
 12401  002C9E  504A               	movf	_clcd_config_data+1,w,c
 12402  002CA0  5C39               	subwf	get_direction@direction,w,c
 12403  002CA2  A0D8               	btfss	status,0,c
 12404  002CA4  D008               	goto	l6840
 12405                           
 12406                           ;cmd_consol.c: 60: *data_direction = -1;
 12407  002CA6  C032  FFD9         	movff	get_direction@data_direction,fsr2l
 12408  002CAA  C033  FFDA         	movff	get_direction@data_direction+1,fsr2h
 12409  002CAE  0EFF               	movlw	255
 12410  002CB0  6EDF               	movwf	indf2,c
 12411                           
 12412                           ;cmd_consol.c: 61: return 0;
 12413  002CB2  0E00               	movlw	0
 12414                           
 12415                           ;cmd_consol.c: 62: } else {
 12416  002CB4  0012               	return	
 12417  002CB6                     l6840:
 12418                           
 12419                           ;cmd_consol.c: 63: *data_direction = direction;
 12420  002CB6  C032  FFD9         	movff	get_direction@data_direction,fsr2l
 12421  002CBA  C033  FFDA         	movff	get_direction@data_direction+1,fsr2h
 12422  002CBE  C039  FFDF         	movff	get_direction@direction,indf2
 12423                           
 12424                           ;cmd_consol.c: 64: return 1;
 12425  002CC2  0E01               	movlw	1
 12426  002CC4  0012               	return	
 12427  002CC6                     __end_of_get_direction:
 12428                           	opt stack 0
 12429                           tblptru	equ	0xFF8
 12430                           tblptrh	equ	0xFF7
 12431                           tblptrl	equ	0xFF6
 12432                           tablat	equ	0xFF5
 12433                           prodh	equ	0xFF4
 12434                           prodl	equ	0xFF3
 12435                           intcon	equ	0xFF2
 12436                           indf0	equ	0xFEF
 12437                           postinc0	equ	0xFEE
 12438                           fsr0h	equ	0xFEA
 12439                           fsr0l	equ	0xFE9
 12440                           wreg	equ	0xFE8
 12441                           indf1	equ	0xFE7
 12442                           postdec1	equ	0xFE5
 12443                           fsr1h	equ	0xFE2
 12444                           fsr1l	equ	0xFE1
 12445                           indf2	equ	0xFDF
 12446                           postinc2	equ	0xFDE
 12447                           fsr2h	equ	0xFDA
 12448                           fsr2l	equ	0xFD9
 12449                           status	equ	0xFD8
 12450                           
 12451 ;; *************** function _collect_row *****************
 12452 ;; Defined at:
 12453 ;;		line 16 in file "cmd_consol.c"
 12454 ;; Parameters:    Size  Location     Type
 12455 ;;  str             2   47[COMRAM] PTR unsigned char 
 12456 ;;		 -> uart_str(150), STR_83(7), STR_82(7), STR_79(7), 
 12457 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 12458 ;;		 -> STR_69(7), STR_64(7), STR_62(7), STR_60(7), 
 12459 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 12460 ;;		 -> STR_48(7), STR_47(7), STR_43(2), STR_40(7), 
 12461 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 12462 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
 12463 ;;		 -> STR_24(7), NULL(0), 
 12464 ;;  data_row        2   49[COMRAM] PTR unsigned char 
 12465 ;;		 -> cmd_data(50), 
 12466 ;; Auto vars:     Size  Location     Type
 12467 ;;  i               2   54[COMRAM] int 
 12468 ;;  row             1   56[COMRAM] unsigned char 
 12469 ;; Return value:  Size  Location     Type
 12470 ;;                  1    wreg      void 
 12471 ;; Registers used:
 12472 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12473 ;; Tracked objects:
 12474 ;;		On entry : 0/0
 12475 ;;		On exit  : 0/0
 12476 ;;		Unchanged: 0/0
 12477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12478 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12479 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12480 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12481 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12482 ;;Total ram usage:       10 bytes
 12483 ;; Hardware stack levels used:    1
 12484 ;; Hardware stack levels required when called:    8
 12485 ;; This function calls:
 12486 ;;		_isdigit
 12487 ;;		_printf
 12488 ;;		_strlen
 12489 ;; This function is called by:
 12490 ;;		_parse_cmd_str
 12491 ;; This function uses a non-reentrant model
 12492 ;;
 12493                           
 12494                           	psect	text54
 12495  002922                     __ptext54:
 12496                           	opt stack 0
 12497  002922                     _collect_row:
 12498                           	opt stack 20
 12499                           
 12500                           ;cmd_consol.c: 17: printf("row1 = %s\r\n", str);
 12501                           
 12502                           ;incstack = 0
 12503  002922  0ED2               	movlw	low STR_16
 12504  002924  6E1E               	movwf	printf@f,c
 12505  002926  0EFE               	movlw	high STR_16
 12506  002928  6E1F               	movwf	printf@f+1,c
 12507  00292A  C030  F020         	movff	collect_row@str,?_printf+2
 12508  00292E  C031  F021         	movff	collect_row@str+1,?_printf+3
 12509  002932  EC48  F012         	call	_printf	;wreg free
 12510                           
 12511                           ;cmd_consol.c: 18: char row = 0;
 12512  002936  0E00               	movlw	0
 12513  002938  6E39               	movwf	collect_row@row,c
 12514                           
 12515                           ;cmd_consol.c: 19: int i = 0;
 12516  00293A  0E00               	movlw	0
 12517  00293C  6E38               	movwf	collect_row@i+1,c
 12518  00293E  0E00               	movlw	0
 12519  002940  6E37               	movwf	collect_row@i,c
 12520                           
 12521                           ;cmd_consol.c: 20: for (i = 0; i < strlen(str); i++) {
 12522  002942  0E00               	movlw	0
 12523  002944  6E38               	movwf	collect_row@i+1,c
 12524  002946  0E00               	movlw	0
 12525  002948  6E37               	movwf	collect_row@i,c
 12526  00294A  D03B               	goto	l6786
 12527  00294C                     l6780:
 12528                           
 12529                           ;cmd_consol.c: 21: if (isdigit(str[i]) == 1)
 12530  00294C  5037               	movf	collect_row@i,w,c
 12531  00294E  2430               	addwf	collect_row@str,w,c
 12532  002950  6E34               	movwf	??_collect_row& (0+255),c
 12533  002952  5038               	movf	collect_row@i+1,w,c
 12534  002954  2031               	addwfc	collect_row@str+1,w,c
 12535  002956  6E35               	movwf	(??_collect_row+1)& (0+255),c
 12536  002958  C034  FFF6         	movff	??_collect_row,tblptrl
 12537  00295C  C035  FFF7         	movff	??_collect_row+1,tblptrh
 12538  002960  0E00               	movlw	low (__mediumconst shr (0+16))
 12539  002962  6EF8               	movwf	tblptru,c
 12540  002964  0E0F               	movlw	(high __ramtop+-1)
 12541  002966  64F7               	cpfsgt	tblptrh,c
 12542  002968  D003               	bra	u6817
 12543  00296A  0008               	tblrd		*
 12544  00296C  50F5               	movf	tablat,w,c
 12545  00296E  D005               	bra	u6810
 12546  002970                     u6817:
 12547  002970  CFF6 FFE9          	movff	tblptrl,fsr0l
 12548  002974  CFF7 FFEA          	movff	tblptrh,fsr0h
 12549  002978  50EF               	movf	indf0,w,c
 12550  00297A                     u6810:
 12551  00297A  EC3D  F01D         	call	_isdigit
 12552  00297E  A0D8               	btfss	status,0,c
 12553  002980  0012               	return	
 12554                           
 12555                           ;cmd_consol.c: 22: row = row * 10 + (str[i] - '0');
 12556  002982  5037               	movf	collect_row@i,w,c
 12557  002984  2430               	addwf	collect_row@str,w,c
 12558  002986  6E34               	movwf	??_collect_row& (0+255),c
 12559  002988  5038               	movf	collect_row@i+1,w,c
 12560  00298A  2031               	addwfc	collect_row@str+1,w,c
 12561  00298C  6E35               	movwf	(??_collect_row+1)& (0+255),c
 12562  00298E  C034  FFF6         	movff	??_collect_row,tblptrl
 12563  002992  C035  FFF7         	movff	??_collect_row+1,tblptrh
 12564  002996  0E00               	movlw	low (__mediumconst shr (0+16))
 12565  002998  6EF8               	movwf	tblptru,c
 12566  00299A  0E0F               	movlw	(high __ramtop+-1)
 12567  00299C  64F7               	cpfsgt	tblptrh,c
 12568  00299E  D003               	bra	u6837
 12569  0029A0  0008               	tblrd		*
 12570  0029A2  50F5               	movf	tablat,w,c
 12571  0029A4  D005               	bra	u6830
 12572  0029A6                     u6837:
 12573  0029A6  CFF6 FFE9          	movff	tblptrl,fsr0l
 12574  0029AA  CFF7 FFEA          	movff	tblptrh,fsr0h
 12575  0029AE  50EF               	movf	indf0,w,c
 12576  0029B0                     u6830:
 12577  0029B0  6E36               	movwf	(??_collect_row+2)& (0+255),c
 12578  0029B2  5039               	movf	collect_row@row,w,c
 12579  0029B4  0D0A               	mullw	10
 12580  0029B6  50F3               	movf	prodl,w,c
 12581  0029B8  2436               	addwf	??_collect_row+2,w,c
 12582  0029BA  0FD0               	addlw	208
 12583  0029BC  6E39               	movwf	collect_row@row,c
 12584                           
 12585                           ;cmd_consol.c: 23: else
 12586                           ;cmd_consol.c: 24: return;
 12587  0029BE  4A37               	infsnz	collect_row@i,f,c
 12588  0029C0  2A38               	incf	collect_row@i+1,f,c
 12589  0029C2                     l6786:
 12590  0029C2  C030  F01E         	movff	collect_row@str,strlen@s
 12591  0029C6  C031  F01F         	movff	collect_row@str+1,strlen@s+1
 12592  0029CA  EC2E  F01A         	call	_strlen	;wreg free
 12593  0029CE  501E               	movf	?_strlen,w,c
 12594  0029D0  5C37               	subwf	collect_row@i,w,c
 12595  0029D2  501F               	movf	?_strlen+1,w,c
 12596  0029D4  5838               	subwfb	collect_row@i+1,w,c
 12597  0029D6  A0D8               	btfss	status,0,c
 12598  0029D8  D7B9               	goto	l6780
 12599                           
 12600                           ;cmd_consol.c: 25: }
 12601                           ;cmd_consol.c: 26: printf("row2 = %d\r\n", row);
 12602  0029DA  0EAE               	movlw	low STR_17
 12603  0029DC  6E1E               	movwf	printf@f,c
 12604  0029DE  0EFE               	movlw	high STR_17
 12605  0029E0  6E1F               	movwf	printf@f+1,c
 12606  0029E2  C039  F020         	movff	collect_row@row,?_printf+2
 12607  0029E6  6A21               	clrf	?_printf+3,c
 12608  0029E8  EC48  F012         	call	_printf	;wreg free
 12609                           
 12610                           ;cmd_consol.c: 27: if (row >= clcd_config_data.clcd_max_row) {
 12611  0029EC  504A               	movf	_clcd_config_data+1,w,c
 12612  0029EE  5C39               	subwf	collect_row@row,w,c
 12613  0029F0  A0D8               	btfss	status,0,c
 12614  0029F2  D007               	goto	l6794
 12615                           
 12616                           ;cmd_consol.c: 28: *data_row = -1;
 12617  0029F4  C032  FFD9         	movff	collect_row@data_row,fsr2l
 12618  0029F8  C033  FFDA         	movff	collect_row@data_row+1,fsr2h
 12619  0029FC  0EFF               	movlw	255
 12620  0029FE  6EDF               	movwf	indf2,c
 12621                           
 12622                           ;cmd_consol.c: 29: } else {
 12623  002A00  0012               	return	
 12624  002A02                     l6794:
 12625                           
 12626                           ;cmd_consol.c: 30: *data_row = row;
 12627  002A02  C032  FFD9         	movff	collect_row@data_row,fsr2l
 12628  002A06  C033  FFDA         	movff	collect_row@data_row+1,fsr2h
 12629  002A0A  C039  FFDF         	movff	collect_row@row,indf2
 12630  002A0E  0012               	return	
 12631  002A10                     __end_of_collect_row:
 12632                           	opt stack 0
 12633                           tblptru	equ	0xFF8
 12634                           tblptrh	equ	0xFF7
 12635                           tblptrl	equ	0xFF6
 12636                           tablat	equ	0xFF5
 12637                           prodh	equ	0xFF4
 12638                           prodl	equ	0xFF3
 12639                           intcon	equ	0xFF2
 12640                           indf0	equ	0xFEF
 12641                           postinc0	equ	0xFEE
 12642                           fsr0h	equ	0xFEA
 12643                           fsr0l	equ	0xFE9
 12644                           wreg	equ	0xFE8
 12645                           indf1	equ	0xFE7
 12646                           postdec1	equ	0xFE5
 12647                           fsr1h	equ	0xFE2
 12648                           fsr1l	equ	0xFE1
 12649                           indf2	equ	0xFDF
 12650                           postinc2	equ	0xFDE
 12651                           fsr2h	equ	0xFDA
 12652                           fsr2l	equ	0xFD9
 12653                           status	equ	0xFD8
 12654                           
 12655 ;; *************** function _collect_column *****************
 12656 ;; Defined at:
 12657 ;;		line 87 in file "cmd_consol.c"
 12658 ;; Parameters:    Size  Location     Type
 12659 ;;  str             2   47[COMRAM] PTR unsigned char 
 12660 ;;		 -> uart_str(150), STR_83(7), STR_82(7), STR_79(7), 
 12661 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 12662 ;;		 -> STR_69(7), STR_64(7), STR_62(7), STR_60(7), 
 12663 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 12664 ;;		 -> STR_48(7), STR_47(7), STR_43(2), STR_40(7), 
 12665 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 12666 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
 12667 ;;		 -> STR_24(7), NULL(0), 
 12668 ;;  data_column     2   49[COMRAM] PTR unsigned char 
 12669 ;;		 -> cmd_data(50), 
 12670 ;; Auto vars:     Size  Location     Type
 12671 ;;  i               2   54[COMRAM] int 
 12672 ;;  column          1   56[COMRAM] unsigned char 
 12673 ;; Return value:  Size  Location     Type
 12674 ;;                  1    wreg      void 
 12675 ;; Registers used:
 12676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12677 ;; Tracked objects:
 12678 ;;		On entry : 0/0
 12679 ;;		On exit  : 0/0
 12680 ;;		Unchanged: 0/0
 12681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12682 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12683 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12684 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12685 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12686 ;;Total ram usage:       10 bytes
 12687 ;; Hardware stack levels used:    1
 12688 ;; Hardware stack levels required when called:    8
 12689 ;; This function calls:
 12690 ;;		_isdigit
 12691 ;;		_printf
 12692 ;;		_strlen
 12693 ;; This function is called by:
 12694 ;;		_parse_cmd_str
 12695 ;; This function uses a non-reentrant model
 12696 ;;
 12697                           
 12698                           	psect	text55
 12699  002A10                     __ptext55:
 12700                           	opt stack 0
 12701  002A10                     _collect_column:
 12702                           	opt stack 20
 12703                           
 12704                           ;cmd_consol.c: 88: printf("col1 = %s\r\n", str);
 12705                           
 12706                           ;incstack = 0
 12707  002A10  0EC6               	movlw	low STR_20
 12708  002A12  6E1E               	movwf	printf@f,c
 12709  002A14  0EFE               	movlw	high STR_20
 12710  002A16  6E1F               	movwf	printf@f+1,c
 12711  002A18  C030  F020         	movff	collect_column@str,?_printf+2
 12712  002A1C  C031  F021         	movff	collect_column@str+1,?_printf+3
 12713  002A20  EC48  F012         	call	_printf	;wreg free
 12714                           
 12715                           ;cmd_consol.c: 89: int i = 0;
 12716  002A24  0E00               	movlw	0
 12717  002A26  6E38               	movwf	collect_column@i+1,c
 12718  002A28  0E00               	movlw	0
 12719  002A2A  6E37               	movwf	collect_column@i,c
 12720                           
 12721                           ;cmd_consol.c: 90: char column = 0;
 12722  002A2C  0E00               	movlw	0
 12723  002A2E  6E39               	movwf	collect_column@column,c
 12724                           
 12725                           ;cmd_consol.c: 91: for (i = 0; i < strlen(str); i++) {
 12726  002A30  0E00               	movlw	0
 12727  002A32  6E38               	movwf	collect_column@i+1,c
 12728  002A34  0E00               	movlw	0
 12729  002A36  6E37               	movwf	collect_column@i,c
 12730  002A38  D03B               	goto	l6892
 12731  002A3A                     l6886:
 12732                           
 12733                           ;cmd_consol.c: 92: if (isdigit(str[i]) == 1) {
 12734  002A3A  5037               	movf	collect_column@i,w,c
 12735  002A3C  2430               	addwf	collect_column@str,w,c
 12736  002A3E  6E34               	movwf	??_collect_column& (0+255),c
 12737  002A40  5038               	movf	collect_column@i+1,w,c
 12738  002A42  2031               	addwfc	collect_column@str+1,w,c
 12739  002A44  6E35               	movwf	(??_collect_column+1)& (0+255),c
 12740  002A46  C034  FFF6         	movff	??_collect_column,tblptrl
 12741  002A4A  C035  FFF7         	movff	??_collect_column+1,tblptrh
 12742  002A4E  0E00               	movlw	low (__mediumconst shr (0+16))
 12743  002A50  6EF8               	movwf	tblptru,c
 12744  002A52  0E0F               	movlw	(high __ramtop+-1)
 12745  002A54  64F7               	cpfsgt	tblptrh,c
 12746  002A56  D003               	bra	u6977
 12747  002A58  0008               	tblrd		*
 12748  002A5A  50F5               	movf	tablat,w,c
 12749  002A5C  D005               	bra	u6970
 12750  002A5E                     u6977:
 12751  002A5E  CFF6 FFE9          	movff	tblptrl,fsr0l
 12752  002A62  CFF7 FFEA          	movff	tblptrh,fsr0h
 12753  002A66  50EF               	movf	indf0,w,c
 12754  002A68                     u6970:
 12755  002A68  EC3D  F01D         	call	_isdigit
 12756  002A6C  A0D8               	btfss	status,0,c
 12757  002A6E  0012               	return	
 12758                           
 12759                           ;cmd_consol.c: 93: column = column * 10 + (str[i] - '0');
 12760  002A70  5037               	movf	collect_column@i,w,c
 12761  002A72  2430               	addwf	collect_column@str,w,c
 12762  002A74  6E34               	movwf	??_collect_column& (0+255),c
 12763  002A76  5038               	movf	collect_column@i+1,w,c
 12764  002A78  2031               	addwfc	collect_column@str+1,w,c
 12765  002A7A  6E35               	movwf	(??_collect_column+1)& (0+255),c
 12766  002A7C  C034  FFF6         	movff	??_collect_column,tblptrl
 12767  002A80  C035  FFF7         	movff	??_collect_column+1,tblptrh
 12768  002A84  0E00               	movlw	low (__mediumconst shr (0+16))
 12769  002A86  6EF8               	movwf	tblptru,c
 12770  002A88  0E0F               	movlw	(high __ramtop+-1)
 12771  002A8A  64F7               	cpfsgt	tblptrh,c
 12772  002A8C  D003               	bra	u6997
 12773  002A8E  0008               	tblrd		*
 12774  002A90  50F5               	movf	tablat,w,c
 12775  002A92  D005               	bra	u6990
 12776  002A94                     u6997:
 12777  002A94  CFF6 FFE9          	movff	tblptrl,fsr0l
 12778  002A98  CFF7 FFEA          	movff	tblptrh,fsr0h
 12779  002A9C  50EF               	movf	indf0,w,c
 12780  002A9E                     u6990:
 12781  002A9E  6E36               	movwf	(??_collect_column+2)& (0+255),c
 12782  002AA0  5039               	movf	collect_column@column,w,c
 12783  002AA2  0D0A               	mullw	10
 12784  002AA4  50F3               	movf	prodl,w,c
 12785  002AA6  2436               	addwf	??_collect_column+2,w,c
 12786  002AA8  0FD0               	addlw	208
 12787  002AAA  6E39               	movwf	collect_column@column,c
 12788                           
 12789                           ;cmd_consol.c: 99: return;
 12790                           
 12791                           ;cmd_consol.c: 96: } else {
 12792  002AAC  4A37               	infsnz	collect_column@i,f,c
 12793  002AAE  2A38               	incf	collect_column@i+1,f,c
 12794  002AB0                     l6892:
 12795  002AB0  C030  F01E         	movff	collect_column@str,strlen@s
 12796  002AB4  C031  F01F         	movff	collect_column@str+1,strlen@s+1
 12797  002AB8  EC2E  F01A         	call	_strlen	;wreg free
 12798  002ABC  501E               	movf	?_strlen,w,c
 12799  002ABE  5C37               	subwf	collect_column@i,w,c
 12800  002AC0  501F               	movf	?_strlen+1,w,c
 12801  002AC2  5838               	subwfb	collect_column@i+1,w,c
 12802  002AC4  A0D8               	btfss	status,0,c
 12803  002AC6  D7B9               	goto	l6886
 12804                           
 12805                           ;cmd_consol.c: 100: }
 12806                           ;cmd_consol.c: 102: }
 12807                           ;cmd_consol.c: 103: printf("Col2 = %d\r\n", column);
 12808  002AC8  0EA2               	movlw	low STR_21
 12809  002ACA  6E1E               	movwf	printf@f,c
 12810  002ACC  0EFE               	movlw	high STR_21
 12811  002ACE  6E1F               	movwf	printf@f+1,c
 12812  002AD0  C039  F020         	movff	collect_column@column,?_printf+2
 12813  002AD4  6A21               	clrf	?_printf+3,c
 12814  002AD6  EC48  F012         	call	_printf	;wreg free
 12815                           
 12816                           ;cmd_consol.c: 104: if (column >= clcd_config_data.clcd_max_col) {
 12817  002ADA  504B               	movf	_clcd_config_data+2,w,c
 12818  002ADC  5C39               	subwf	collect_column@column,w,c
 12819  002ADE  A0D8               	btfss	status,0,c
 12820  002AE0  D007               	goto	l6900
 12821                           
 12822                           ;cmd_consol.c: 105: *data_column = -1;
 12823  002AE2  C032  FFD9         	movff	collect_column@data_column,fsr2l
 12824  002AE6  C033  FFDA         	movff	collect_column@data_column+1,fsr2h
 12825  002AEA  0EFF               	movlw	255
 12826  002AEC  6EDF               	movwf	indf2,c
 12827                           
 12828                           ;cmd_consol.c: 106: } else {
 12829  002AEE  0012               	return	
 12830  002AF0                     l6900:
 12831                           
 12832                           ;cmd_consol.c: 107: *data_column = column;
 12833  002AF0  C032  FFD9         	movff	collect_column@data_column,fsr2l
 12834  002AF4  C033  FFDA         	movff	collect_column@data_column+1,fsr2h
 12835  002AF8  C039  FFDF         	movff	collect_column@column,indf2
 12836  002AFC  0012               	return	
 12837  002AFE                     __end_of_collect_column:
 12838                           	opt stack 0
 12839                           tblptru	equ	0xFF8
 12840                           tblptrh	equ	0xFF7
 12841                           tblptrl	equ	0xFF6
 12842                           tablat	equ	0xFF5
 12843                           prodh	equ	0xFF4
 12844                           prodl	equ	0xFF3
 12845                           intcon	equ	0xFF2
 12846                           indf0	equ	0xFEF
 12847                           postinc0	equ	0xFEE
 12848                           fsr0h	equ	0xFEA
 12849                           fsr0l	equ	0xFE9
 12850                           wreg	equ	0xFE8
 12851                           indf1	equ	0xFE7
 12852                           postdec1	equ	0xFE5
 12853                           fsr1h	equ	0xFE2
 12854                           fsr1l	equ	0xFE1
 12855                           indf2	equ	0xFDF
 12856                           postinc2	equ	0xFDE
 12857                           fsr2h	equ	0xFDA
 12858                           fsr2l	equ	0xFD9
 12859                           status	equ	0xFD8
 12860                           
 12861 ;; *************** function _strlen *****************
 12862 ;; Defined at:
 12863 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strlen.c"
 12864 ;; Parameters:    Size  Location     Type
 12865 ;;  s               2   29[COMRAM] PTR const unsigned char 
 12866 ;;		 -> uart_str(150), STR_84(4), STR_83(7), STR_82(7), 
 12867 ;;		 -> STR_79(7), STR_77(7), STR_75(7), STR_73(7), 
 12868 ;;		 -> STR_71(2), STR_69(7), STR_68(5), STR_67(7), 
 12869 ;;		 -> STR_64(7), STR_62(7), STR_60(7), STR_58(7), 
 12870 ;;		 -> STR_56(7), STR_55(7), STR_54(7), STR_51(7), 
 12871 ;;		 -> STR_48(7), STR_47(7), STR_45(8), STR_43(2), 
 12872 ;;		 -> STR_40(7), STR_38(7), STR_37(6), STR_36(7), 
 12873 ;;		 -> STR_35(6), STR_34(7), STR_32(7), STR_31(7), 
 12874 ;;		 -> STR_30(5), STR_28(7), RAM(3895), STR_27(6), 
 12875 ;;		 -> STR_26(7), STR_25(4), STR_24(7), NULL(0), 
 12876 ;;		 -> STR_23(4), clcd_display_string_details.string(40), clcd_display_string_details(1080), 
 12877 ;; Auto vars:     Size  Location     Type
 12878 ;;  cp              2   33[COMRAM] PTR const unsigned char 
 12879 ;;		 -> uart_str(150), STR_84(4), STR_83(7), STR_82(7), 
 12880 ;;		 -> STR_79(7), STR_77(7), STR_75(7), STR_73(7), 
 12881 ;;		 -> STR_71(2), STR_69(7), STR_68(5), STR_67(7), 
 12882 ;;		 -> STR_64(7), STR_62(7), STR_60(7), STR_58(7), 
 12883 ;;		 -> STR_56(7), STR_55(7), STR_54(7), STR_51(7), 
 12884 ;;		 -> STR_48(7), STR_47(7), STR_45(8), STR_43(2), 
 12885 ;;		 -> STR_40(7), STR_38(7), STR_37(6), STR_36(7), 
 12886 ;;		 -> STR_35(6), STR_34(7), STR_32(7), STR_31(7), 
 12887 ;;		 -> STR_30(5), STR_28(7), RAM(3895), STR_27(6), 
 12888 ;;		 -> STR_26(7), STR_25(4), STR_24(7), NULL(0), 
 12889 ;;		 -> STR_23(4), clcd_display_string_details.string(40), clcd_display_string_details(1080), 
 12890 ;; Return value:  Size  Location     Type
 12891 ;;                  2   29[COMRAM] unsigned int 
 12892 ;; Registers used:
 12893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 12894 ;; Tracked objects:
 12895 ;;		On entry : 0/0
 12896 ;;		On exit  : 0/0
 12897 ;;		Unchanged: 0/0
 12898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12899 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12901 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12902 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12903 ;;Total ram usage:        6 bytes
 12904 ;; Hardware stack levels used:    1
 12905 ;; Hardware stack levels required when called:    5
 12906 ;; This function calls:
 12907 ;;		Nothing
 12908 ;; This function is called by:
 12909 ;;		_copy_data
 12910 ;;		_scroll_off
 12911 ;;		_make_display
 12912 ;;		_collect_row
 12913 ;;		_get_str
 12914 ;;		_get_direction
 12915 ;;		_get_dis_frq
 12916 ;;		_collect_column
 12917 ;;		_parse_cmd_str
 12918 ;;		_strstr
 12919 ;;		_put_string
 12920 ;;		_display_string
 12921 ;; This function uses a non-reentrant model
 12922 ;;
 12923                           
 12924                           	psect	text56
 12925  00345C                     __ptext56:
 12926                           	opt stack 0
 12927  00345C                     _strlen:
 12928                           	opt stack 24
 12929                           
 12930                           ;incstack = 0
 12931  00345C  C01E  F022         	movff	strlen@s,strlen@cp
 12932  003460  C01F  F023         	movff	strlen@s+1,strlen@cp+1
 12933  003464  D002               	goto	l6142
 12934  003466                     l6140:
 12935  003466  4A22               	infsnz	strlen@cp,f,c
 12936  003468  2A23               	incf	strlen@cp+1,f,c
 12937  00346A                     l6142:
 12938  00346A  C022  FFF6         	movff	strlen@cp,tblptrl
 12939  00346E  C023  FFF7         	movff	strlen@cp+1,tblptrh
 12940  003472  0E00               	movlw	low (__mediumconst shr (0+16))
 12941  003474  6EF8               	movwf	tblptru,c
 12942  003476  0E0F               	movlw	(high __ramtop+-1)
 12943  003478  64F7               	cpfsgt	tblptrh,c
 12944  00347A  D003               	bra	u5957
 12945  00347C  0008               	tblrd		*
 12946  00347E  50F5               	movf	tablat,w,c
 12947  003480  D005               	bra	u5950
 12948  003482                     u5957:
 12949  003482  CFF6 FFE9          	movff	tblptrl,fsr0l
 12950  003486  CFF7 FFEA          	movff	tblptrh,fsr0h
 12951  00348A  50EF               	movf	indf0,w,c
 12952  00348C                     u5950:
 12953  00348C  0900               	iorlw	0
 12954  00348E  A4D8               	btfss	status,2,c
 12955  003490  D7EA               	goto	l6140
 12956  003492  C01E  F020         	movff	strlen@s,??_strlen
 12957  003496  C01F  F021         	movff	strlen@s+1,??_strlen+1
 12958  00349A  1E20               	comf	??_strlen,f,c
 12959  00349C  1E21               	comf	??_strlen+1,f,c
 12960  00349E  4A20               	infsnz	??_strlen,f,c
 12961  0034A0  2A21               	incf	??_strlen+1,f,c
 12962  0034A2  5022               	movf	strlen@cp,w,c
 12963  0034A4  2420               	addwf	??_strlen,w,c
 12964  0034A6  6E1E               	movwf	?_strlen,c
 12965  0034A8  5023               	movf	strlen@cp+1,w,c
 12966  0034AA  2021               	addwfc	??_strlen+1,w,c
 12967  0034AC  6E1F               	movwf	?_strlen+1,c
 12968  0034AE  0012               	return	
 12969  0034B0                     __end_of_strlen:
 12970                           	opt stack 0
 12971                           tblptru	equ	0xFF8
 12972                           tblptrh	equ	0xFF7
 12973                           tblptrl	equ	0xFF6
 12974                           tablat	equ	0xFF5
 12975                           prodh	equ	0xFF4
 12976                           prodl	equ	0xFF3
 12977                           intcon	equ	0xFF2
 12978                           indf0	equ	0xFEF
 12979                           postinc0	equ	0xFEE
 12980                           fsr0h	equ	0xFEA
 12981                           fsr0l	equ	0xFE9
 12982                           wreg	equ	0xFE8
 12983                           indf1	equ	0xFE7
 12984                           postdec1	equ	0xFE5
 12985                           fsr1h	equ	0xFE2
 12986                           fsr1l	equ	0xFE1
 12987                           indf2	equ	0xFDF
 12988                           postinc2	equ	0xFDE
 12989                           fsr2h	equ	0xFDA
 12990                           fsr2l	equ	0xFD9
 12991                           status	equ	0xFD8
 12992                           
 12993 ;; *************** function _printf *****************
 12994 ;; Defined at:
 12995 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12996 ;; Parameters:    Size  Location     Type
 12997 ;;  f               2   29[COMRAM] PTR const unsigned char 
 12998 ;;		 -> STR_135(18), STR_133(5), STR_129(3), STR_128(3), 
 12999 ;;		 -> STR_127(3), STR_125(7), STR_123(7), STR_121(7), 
 13000 ;;		 -> STR_119(13), STR_117(5), STR_114(13), STR_111(13), 
 13001 ;;		 -> STR_108(13), STR_105(13), STR_104(5), STR_103(11), 
 13002 ;;		 -> STR_100(13), STR_97(13), STR_96(5), STR_93(13), 
 13003 ;;		 -> STR_92(5), STR_89(13), STR_88(5), STR_81(25), 
 13004 ;;		 -> STR_80(11), STR_78(25), STR_76(27), STR_74(27), 
 13005 ;;		 -> STR_72(10), STR_70(9), STR_66(25), STR_65(11), 
 13006 ;;		 -> STR_63(25), STR_61(27), STR_59(27), STR_57(12), 
 13007 ;;		 -> STR_53(14), STR_52(9), STR_50(11), STR_49(9), 
 13008 ;;		 -> STR_46(9), STR_44(11), STR_42(11), STR_41(12), 
 13009 ;;		 -> STR_39(12), STR_33(7), STR_29(8), STR_22(8), 
 13010 ;;		 -> STR_21(12), STR_20(12), STR_19(19), STR_18(17), 
 13011 ;;		 -> STR_17(12), STR_16(12), STR_15(16), STR_14(16), 
 13012 ;;		 -> STR_13(19), STR_12(3), STR_11(5), STR_10(16), 
 13013 ;;		 -> STR_9(39), STR_8(26), STR_7(26), STR_6(26), 
 13014 ;;		 -> STR_4(17), STR_3(18), STR_2(9), STR_1(9), 
 13015 ;; Auto vars:     Size  Location     Type
 13016 ;;  tmpval          4    0        struct .
 13017 ;;  val             2   44[COMRAM] unsigned int 
 13018 ;;  ap              2   42[COMRAM] PTR void [1]
 13019 ;;		 -> ?_printf(2), 
 13020 ;;  cp              2   40[COMRAM] PTR const unsigned char 
 13021 ;;		 -> STR_136(7), STR_134(6), uart_str(150), STR_126(15), 
 13022 ;;		 -> STR_124(12), STR_122(12), STR_120(7), STR_118(6), 
 13023 ;;		 -> STR_115(7), STR_112(8), STR_109(6), STR_106(6), 
 13024 ;;		 -> STR_101(5), STR_98(4), STR_94(4), STR_90(6), 
 13025 ;;		 -> STR_83(7), STR_82(7), STR_79(7), STR_77(7), 
 13026 ;;		 -> STR_75(7), STR_73(7), STR_71(2), STR_69(7), 
 13027 ;;		 -> STR_64(7), STR_62(7), STR_60(7), STR_58(7), 
 13028 ;;		 -> STR_56(7), STR_55(7), STR_51(7), STR_48(7), 
 13029 ;;		 -> STR_47(7), cmd_data.data(40), STR_43(2), STR_40(7), 
 13030 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 13031 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
 13032 ;;		 -> CMD(15), STR_24(7), NULL(0), cmd_data(50), 
 13033 ;;		 -> STR_5(5), 
 13034 ;;  len             2    0        unsigned int 
 13035 ;;  c               1   46[COMRAM] char 
 13036 ;;  prec            1   39[COMRAM] char 
 13037 ;;  flag            1   38[COMRAM] unsigned char 
 13038 ;; Return value:  Size  Location     Type
 13039 ;;                  2   29[COMRAM] int 
 13040 ;; Registers used:
 13041 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13042 ;; Tracked objects:
 13043 ;;		On entry : 0/0
 13044 ;;		On exit  : 0/0
 13045 ;;		Unchanged: 0/0
 13046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13047 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13048 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13049 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13050 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13051 ;;Total ram usage:       18 bytes
 13052 ;; Hardware stack levels used:    1
 13053 ;; Hardware stack levels required when called:    7
 13054 ;; This function calls:
 13055 ;;		___lwdiv
 13056 ;;		___lwmod
 13057 ;;		_putch
 13058 ;; This function is called by:
 13059 ;;		_init_clcd_cusotom_lcd
 13060 ;;		_copy_data
 13061 ;;		_conflict_check
 13062 ;;		_update_string_data
 13063 ;;		_clcd_display_string_config
 13064 ;;		_collect_row
 13065 ;;		_get_direction
 13066 ;;		_get_dis_frq
 13067 ;;		_collect_column
 13068 ;;		_parse_cmd_str
 13069 ;;		_reply_to_host
 13070 ;;		_cmd_consol_task
 13071 ;;		_main
 13072 ;;		_display_string
 13073 ;; This function uses a non-reentrant model
 13074 ;;
 13075                           
 13076                           	psect	text57
 13077  002490                     __ptext57:
 13078                           	opt stack 0
 13079  002490                     _printf:
 13080                           	opt stack 23
 13081                           
 13082                           ;doprnt.c: 466: va_list ap;
 13083                           ;doprnt.c: 499: signed char c;
 13084                           ;doprnt.c: 506: signed char prec;
 13085                           ;doprnt.c: 508: unsigned char flag;
 13086                           ;doprnt.c: 523: union {
 13087                           ;doprnt.c: 524: unsigned long vd;
 13088                           ;doprnt.c: 525: double integ;
 13089                           ;doprnt.c: 526: } tmpval;
 13090                           ;doprnt.c: 528: unsigned int val;
 13091                           ;doprnt.c: 529: unsigned len;
 13092                           ;doprnt.c: 530: const char * cp;
 13093                           ;doprnt.c: 533: *ap = __va_start();
 13094                           
 13095                           ;incstack = 0
 13096  002490  0E20               	movlw	low (?_printf+2)
 13097  002492  6E2B               	movwf	printf@ap,c
 13098  002494  0E00               	movlw	high (?_printf+2)
 13099  002496  6E2C               	movwf	printf@ap+1,c
 13100                           
 13101                           ;doprnt.c: 536: while(c = *f++) {
 13102  002498  D0D9               	goto	l6136
 13103  00249A                     l6070:
 13104                           
 13105                           ;doprnt.c: 538: if(c != '%')
 13106  00249A  0E25               	movlw	37
 13107  00249C  182F               	xorwf	printf@c,w,c
 13108  00249E  B4D8               	btfsc	status,2,c
 13109  0024A0  D004               	goto	l6074
 13110                           
 13111                           ;doprnt.c: 540: {
 13112                           ;doprnt.c: 541: (putch(c) );
 13113  0024A2  502F               	movf	printf@c,w,c
 13114  0024A4  ECF8  F01D         	call	_putch
 13115                           
 13116                           ;doprnt.c: 542: continue;
 13117  0024A8  D0D1               	goto	l6136
 13118  0024AA                     l6074:
 13119                           
 13120                           ;doprnt.c: 543: }
 13121                           ;doprnt.c: 548: flag = 0;
 13122  0024AA  0E00               	movlw	0
 13123  0024AC  6E27               	movwf	printf@flag,c
 13124                           
 13125                           ;doprnt.c: 635: switch(c = *f++) {
 13126  0024AE  D04D               	goto	l6098
 13127  0024B0                     l6076:
 13128                           
 13129                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13130  0024B0  C02B  FFD9         	movff	printf@ap,fsr2l
 13131  0024B4  C02C  FFDA         	movff	printf@ap+1,fsr2h
 13132  0024B8  CFDE F029          	movff	postinc2,printf@cp
 13133  0024BC  CFDD F02A          	movff	postdec2,printf@cp+1
 13134  0024C0  0E02               	movlw	2
 13135  0024C2  262B               	addwf	printf@ap,f,c
 13136  0024C4  0E00               	movlw	0
 13137  0024C6  222C               	addwfc	printf@ap+1,f,c
 13138                           
 13139                           ;doprnt.c: 740: if(!cp)
 13140  0024C8  5029               	movf	printf@cp,w,c
 13141  0024CA  102A               	iorwf	printf@cp+1,w,c
 13142  0024CC  A4D8               	btfss	status,2,c
 13143  0024CE  D01A               	goto	l6088
 13144                           
 13145                           ;doprnt.c: 741: cp = "(null)";
 13146  0024D0  0E92               	movlw	low STR_136
 13147  0024D2  6E29               	movwf	printf@cp,c
 13148  0024D4  0EFF               	movlw	high STR_136
 13149  0024D6  6E2A               	movwf	printf@cp+1,c
 13150                           
 13151                           ;doprnt.c: 777: while(*cp)
 13152  0024D8  D015               	goto	l6088
 13153  0024DA                     l6084:
 13154                           
 13155                           ;doprnt.c: 778: (putch(*cp++) );
 13156  0024DA  C029  FFF6         	movff	printf@cp,tblptrl
 13157  0024DE  C02A  FFF7         	movff	printf@cp+1,tblptrh
 13158  0024E2  0E00               	movlw	low (__mediumconst shr (0+16))
 13159  0024E4  6EF8               	movwf	tblptru,c
 13160  0024E6  0E0F               	movlw	(high __ramtop+-1)
 13161  0024E8  64F7               	cpfsgt	tblptrh,c
 13162  0024EA  D003               	bra	u5857
 13163  0024EC  0008               	tblrd		*
 13164  0024EE  50F5               	movf	tablat,w,c
 13165  0024F0  D005               	bra	u5850
 13166  0024F2                     u5857:
 13167  0024F2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13168  0024F6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13169  0024FA  50EF               	movf	indf0,w,c
 13170  0024FC                     u5850:
 13171  0024FC  ECF8  F01D         	call	_putch
 13172  002500  4A29               	infsnz	printf@cp,f,c
 13173  002502  2A2A               	incf	printf@cp+1,f,c
 13174  002504                     l6088:
 13175  002504  C029  FFF6         	movff	printf@cp,tblptrl
 13176  002508  C02A  FFF7         	movff	printf@cp+1,tblptrh
 13177  00250C  0E00               	movlw	low (__mediumconst shr (0+16))
 13178  00250E  6EF8               	movwf	tblptru,c
 13179  002510  0E0F               	movlw	(high __ramtop+-1)
 13180  002512  64F7               	cpfsgt	tblptrh,c
 13181  002514  D003               	bra	u5867
 13182  002516  0008               	tblrd		*
 13183  002518  50F5               	movf	tablat,w,c
 13184  00251A  D005               	bra	u5860
 13185  00251C                     u5867:
 13186  00251C  CFF6 FFE9          	movff	tblptrl,fsr0l
 13187  002520  CFF7 FFEA          	movff	tblptrh,fsr0h
 13188  002524  50EF               	movf	indf0,w,c
 13189  002526                     u5860:
 13190  002526  0900               	iorlw	0
 13191  002528  B4D8               	btfsc	status,2,c
 13192  00252A  D090               	goto	l6136
 13193  00252C  D7D6               	goto	l6084
 13194  00252E                     l6090:
 13195                           
 13196                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 13197  00252E  C02B  FFD9         	movff	printf@ap,fsr2l
 13198  002532  C02C  FFDA         	movff	printf@ap+1,fsr2h
 13199  002536  50DF               	movf	indf2,w,c
 13200  002538  6E2F               	movwf	printf@c,c
 13201  00253A  0E02               	movlw	2
 13202  00253C  262B               	addwf	printf@ap,f,c
 13203  00253E  0E00               	movlw	0
 13204  002540  222C               	addwfc	printf@ap+1,f,c
 13205  002542                     l6094:
 13206                           
 13207                           ;doprnt.c: 809: (putch(c) );
 13208  002542  502F               	movf	printf@c,w,c
 13209  002544  ECF8  F01D         	call	_putch
 13210                           
 13211                           ;doprnt.c: 810: continue;
 13212  002548  D081               	goto	l6136
 13213  00254A                     l6098:
 13214  00254A  C01E  FFF6         	movff	printf@f,tblptrl
 13215  00254E  C01F  FFF7         	movff	printf@f+1,tblptrh
 13216  002552  4A1E               	infsnz	printf@f,f,c
 13217  002554  2A1F               	incf	printf@f+1,f,c
 13218  002556                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13219  002556  6AF8               	clrf	tblptru,c
 13220  002558                     	endif
 13221  002558                     	if	0	;tblptru may be non-zero
 13222  002558                     	endif
 13223  002558  0008               	tblrd		*
 13224  00255A  CFF5 F02F          	movff	tablat,printf@c
 13225  00255E  502F               	movf	printf@c,w,c
 13226                           
 13227                           ; Switch size 1, requested type "space"
 13228                           ; Number of cases is 5, Range of values is 0 to 115
 13229                           ; switch strategies available:
 13230                           ; Name         Instructions Cycles
 13231                           ; simple_byte           16     9 (average)
 13232                           ;	Chosen strategy is simple_byte
 13233  002560  0A00               	xorlw	0	; case 0
 13234  002562  B4D8               	btfsc	status,2,c
 13235  002564  0012               	return	
 13236  002566  0A63               	xorlw	99	; case 99
 13237  002568  B4D8               	btfsc	status,2,c
 13238  00256A  D7E1               	goto	l6090
 13239  00256C  0A07               	xorlw	7	; case 100
 13240  00256E  B4D8               	btfsc	status,2,c
 13241  002570  D007               	goto	l6100
 13242  002572  0A0D               	xorlw	13	; case 105
 13243  002574  B4D8               	btfsc	status,2,c
 13244  002576  D004               	goto	l6100
 13245  002578  0A1A               	xorlw	26	; case 115
 13246  00257A  B4D8               	btfsc	status,2,c
 13247  00257C  D799               	goto	l6076
 13248  00257E  D7E1               	goto	l6094
 13249  002580                     l6100:
 13250                           
 13251                           ;doprnt.c: 1253: {
 13252                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13253  002580  C02B  FFD9         	movff	printf@ap,fsr2l
 13254  002584  C02C  FFDA         	movff	printf@ap+1,fsr2h
 13255  002588  CFDE F02D          	movff	postinc2,printf@val
 13256  00258C  CFDD F02E          	movff	postdec2,printf@val+1
 13257  002590  0E02               	movlw	2
 13258  002592  262B               	addwf	printf@ap,f,c
 13259  002594  0E00               	movlw	0
 13260  002596  222C               	addwfc	printf@ap+1,f,c
 13261                           
 13262                           ;doprnt.c: 1261: if((int)val < 0) {
 13263  002598  AE2E               	btfss	printf@val+1,7,c
 13264  00259A  D006               	goto	l6110
 13265                           
 13266                           ;doprnt.c: 1262: flag |= 0x03;
 13267  00259C  0E03               	movlw	3
 13268  00259E  1227               	iorwf	printf@flag,f,c
 13269                           
 13270                           ;doprnt.c: 1263: val = -val;
 13271  0025A0  6C2D               	negf	printf@val,c
 13272  0025A2  1E2E               	comf	printf@val+1,f,c
 13273  0025A4  B0D8               	btfsc	status,0,c
 13274  0025A6  2A2E               	incf	printf@val+1,f,c
 13275  0025A8                     l6110:
 13276                           
 13277                           ;doprnt.c: 1264: }
 13278                           ;doprnt.c: 1266: }
 13279                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13280  0025A8  0E01               	movlw	1
 13281  0025AA  6E2F               	movwf	printf@c,c
 13282  0025AC                     l6112:
 13283  0025AC  0E05               	movlw	5
 13284  0025AE  182F               	xorwf	printf@c,w,c
 13285  0025B0  B4D8               	btfsc	status,2,c
 13286  0025B2  D015               	goto	l6124
 13287                           
 13288                           ;doprnt.c: 1306: if(val < dpowers[c])
 13289  0025B4  502F               	movf	printf@c,w,c
 13290  0025B6  0D02               	mullw	2
 13291  0025B8  0EE9               	movlw	low _dpowers
 13292  0025BA  24F3               	addwf	prodl,w,c
 13293  0025BC  6EF6               	movwf	tblptrl,c
 13294  0025BE  0EFC               	movlw	high _dpowers
 13295  0025C0  20F4               	addwfc	prodh,w,c
 13296  0025C2  6EF7               	movwf	tblptrh,c
 13297  0025C4                     	if	1	;There are 3 active tblptr bytes
 13298  0025C4  6AF8               	clrf	tblptru,c
 13299  0025C6  0E00               	movlw	low (__mediumconst shr (0+16))
 13300  0025C8  22F8               	addwfc	tblptru,f,c
 13301  0025CA                     	endif
 13302  0025CA  0009               	tblrd		*+
 13303  0025CC  50F5               	movf	tablat,w,c
 13304  0025CE  5C2D               	subwf	printf@val,w,c
 13305  0025D0  0009               	tblrd		*+
 13306  0025D2  50F5               	movf	tablat,w,c
 13307  0025D4  582E               	subwfb	printf@val+1,w,c
 13308  0025D6  A0D8               	btfss	status,0,c
 13309  0025D8  D002               	goto	l6124
 13310                           
 13311                           ;doprnt.c: 1307: break;
 13312  0025DA  2A2F               	incf	printf@c,f,c
 13313  0025DC  D7E7               	goto	l6112
 13314  0025DE                     l6124:
 13315                           
 13316                           ;doprnt.c: 1422: {
 13317                           ;doprnt.c: 1438: if(flag & 0x03)
 13318  0025DE  C027  F026         	movff	printf@flag,??_printf
 13319  0025E2  0E03               	movlw	3
 13320  0025E4  1626               	andwf	??_printf,f,c
 13321  0025E6  B4D8               	btfsc	status,2,c
 13322  0025E8  D003               	goto	l6128
 13323                           
 13324                           ;doprnt.c: 1439: (putch('-') );
 13325  0025EA  0E2D               	movlw	45
 13326  0025EC  ECF8  F01D         	call	_putch
 13327  0025F0                     l6128:
 13328                           
 13329                           ;doprnt.c: 1469: }
 13330                           ;doprnt.c: 1472: prec = c;
 13331  0025F0  C02F  F028         	movff	printf@c,printf@prec
 13332                           
 13333                           ;doprnt.c: 1474: while(prec--) {
 13334  0025F4  D027               	goto	l6134
 13335  0025F6                     l6130:
 13336                           
 13337                           ;doprnt.c: 1478: {
 13338                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13339  0025F6  5028               	movf	printf@prec,w,c
 13340  0025F8  0D02               	mullw	2
 13341  0025FA  0EE9               	movlw	low _dpowers
 13342  0025FC  24F3               	addwf	prodl,w,c
 13343  0025FE  6EF6               	movwf	tblptrl,c
 13344  002600  0EFC               	movlw	high _dpowers
 13345  002602  20F4               	addwfc	prodh,w,c
 13346  002604  6EF7               	movwf	tblptrh,c
 13347  002606                     	if	1	;There are 3 active tblptr bytes
 13348  002606  6AF8               	clrf	tblptru,c
 13349  002608  0E00               	movlw	low (__mediumconst shr (0+16))
 13350  00260A  22F8               	addwfc	tblptru,f,c
 13351  00260C                     	endif
 13352  00260C  0009               	tblrd		*+
 13353  00260E  CFF5 F012          	movff	tablat,___lwdiv@divisor
 13354  002612  000A               	tblrd		*-
 13355  002614  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
 13356  002618  C02D  F010         	movff	printf@val,___lwdiv@dividend
 13357  00261C  C02E  F011         	movff	printf@val+1,___lwdiv@dividend+1
 13358  002620  EC58  F01A         	call	___lwdiv	;wreg free
 13359  002624  C010  F017         	movff	?___lwdiv,___lwmod@dividend
 13360  002628  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
 13361  00262C  0E00               	movlw	0
 13362  00262E  6E1A               	movwf	___lwmod@divisor+1,c
 13363  002630  0E0A               	movlw	10
 13364  002632  6E19               	movwf	___lwmod@divisor,c
 13365  002634  ECA8  F01B         	call	___lwmod	;wreg free
 13366  002638  5017               	movf	?___lwmod,w,c
 13367  00263A  0F30               	addlw	48
 13368  00263C  6E2F               	movwf	printf@c,c
 13369                           
 13370                           ;doprnt.c: 1523: }
 13371                           ;doprnt.c: 1524: (putch(c) );
 13372  00263E  502F               	movf	printf@c,w,c
 13373  002640  ECF8  F01D         	call	_putch
 13374  002644                     l6134:
 13375  002644  0628               	decf	printf@prec,f,c
 13376  002646  2828               	incf	printf@prec,w,c
 13377  002648  A4D8               	btfss	status,2,c
 13378  00264A  D7D5               	goto	l6130
 13379  00264C                     l6136:
 13380  00264C  C01E  FFF6         	movff	printf@f,tblptrl
 13381  002650  C01F  FFF7         	movff	printf@f+1,tblptrh
 13382  002654  4A1E               	infsnz	printf@f,f,c
 13383  002656  2A1F               	incf	printf@f+1,f,c
 13384  002658                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13385  002658  6AF8               	clrf	tblptru,c
 13386  00265A                     	endif
 13387  00265A                     	if	0	;tblptru may be non-zero
 13388  00265A                     	endif
 13389  00265A  0008               	tblrd		*
 13390  00265C  CFF5 F02F          	movff	tablat,printf@c
 13391  002660  502F               	movf	printf@c,w,c
 13392  002662  B4D8               	btfsc	status,2,c
 13393  002664  0012               	return	
 13394  002666  D719               	goto	l6070
 13395  002668                     __end_of_printf:
 13396                           	opt stack 0
 13397                           tblptru	equ	0xFF8
 13398                           tblptrh	equ	0xFF7
 13399                           tblptrl	equ	0xFF6
 13400                           tablat	equ	0xFF5
 13401                           prodh	equ	0xFF4
 13402                           prodl	equ	0xFF3
 13403                           intcon	equ	0xFF2
 13404                           indf0	equ	0xFEF
 13405                           postinc0	equ	0xFEE
 13406                           fsr0h	equ	0xFEA
 13407                           fsr0l	equ	0xFE9
 13408                           wreg	equ	0xFE8
 13409                           indf1	equ	0xFE7
 13410                           postdec1	equ	0xFE5
 13411                           fsr1h	equ	0xFE2
 13412                           fsr1l	equ	0xFE1
 13413                           indf2	equ	0xFDF
 13414                           postinc2	equ	0xFDE
 13415                           postdec2	equ	0xFDD
 13416                           fsr2h	equ	0xFDA
 13417                           fsr2l	equ	0xFD9
 13418                           status	equ	0xFD8
 13419                           
 13420 ;; *************** function _putch *****************
 13421 ;; Defined at:
 13422 ;;		line 160 in file "mcc_generated_files/eusart1.c"
 13423 ;; Parameters:    Size  Location     Type
 13424 ;;  txData          1    wreg     unsigned char 
 13425 ;; Auto vars:     Size  Location     Type
 13426 ;;  txData          1   16[COMRAM] unsigned char 
 13427 ;; Return value:  Size  Location     Type
 13428 ;;                  1    wreg      void 
 13429 ;; Registers used:
 13430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13431 ;; Tracked objects:
 13432 ;;		On entry : 0/0
 13433 ;;		On exit  : 0/0
 13434 ;;		Unchanged: 0/0
 13435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13440 ;;Total ram usage:        1 bytes
 13441 ;; Hardware stack levels used:    1
 13442 ;; Hardware stack levels required when called:    6
 13443 ;; This function calls:
 13444 ;;		_EUSART1_Write
 13445 ;; This function is called by:
 13446 ;;		_printf
 13447 ;;		_puts
 13448 ;;		_cputs
 13449 ;; This function uses a non-reentrant model
 13450 ;;
 13451                           
 13452                           	psect	text58
 13453  003BF0                     __ptext58:
 13454                           	opt stack 0
 13455  003BF0                     _putch:
 13456                           	opt stack 23
 13457                           
 13458                           ;incstack = 0
 13459                           ;putch@txData stored from wreg
 13460  003BF0  6E11               	movwf	putch@txData,c
 13461                           
 13462                           ;eusart1.c: 162: EUSART1_Write(txData);
 13463  003BF2  5011               	movf	putch@txData,w,c
 13464  003BF4  ECE9  F01B         	call	_EUSART1_Write
 13465  003BF8  0012               	return		;funcret
 13466  003BFA                     __end_of_putch:
 13467                           	opt stack 0
 13468                           tblptru	equ	0xFF8
 13469                           tblptrh	equ	0xFF7
 13470                           tblptrl	equ	0xFF6
 13471                           tablat	equ	0xFF5
 13472                           prodh	equ	0xFF4
 13473                           prodl	equ	0xFF3
 13474                           intcon	equ	0xFF2
 13475                           indf0	equ	0xFEF
 13476                           postinc0	equ	0xFEE
 13477                           fsr0h	equ	0xFEA
 13478                           fsr0l	equ	0xFE9
 13479                           wreg	equ	0xFE8
 13480                           indf1	equ	0xFE7
 13481                           postdec1	equ	0xFE5
 13482                           fsr1h	equ	0xFE2
 13483                           fsr1l	equ	0xFE1
 13484                           indf2	equ	0xFDF
 13485                           postinc2	equ	0xFDE
 13486                           postdec2	equ	0xFDD
 13487                           fsr2h	equ	0xFDA
 13488                           fsr2l	equ	0xFD9
 13489                           status	equ	0xFD8
 13490                           
 13491 ;; *************** function _EUSART1_Write *****************
 13492 ;; Defined at:
 13493 ;;		line 132 in file "mcc_generated_files/eusart1.c"
 13494 ;; Parameters:    Size  Location     Type
 13495 ;;  txData          1    wreg     unsigned char 
 13496 ;; Auto vars:     Size  Location     Type
 13497 ;;  txData          1   15[COMRAM] unsigned char 
 13498 ;; Return value:  Size  Location     Type
 13499 ;;                  1    wreg      void 
 13500 ;; Registers used:
 13501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13502 ;; Tracked objects:
 13503 ;;		On entry : 0/0
 13504 ;;		On exit  : 0/0
 13505 ;;		Unchanged: 0/0
 13506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13510 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13511 ;;Total ram usage:        1 bytes
 13512 ;; Hardware stack levels used:    1
 13513 ;; Hardware stack levels required when called:    5
 13514 ;; This function calls:
 13515 ;;		Nothing
 13516 ;; This function is called by:
 13517 ;;		_putch
 13518 ;; This function uses a non-reentrant model
 13519 ;;
 13520                           
 13521                           	psect	text59
 13522  0037D2                     __ptext59:
 13523                           	opt stack 0
 13524  0037D2                     _EUSART1_Write:
 13525                           	opt stack 23
 13526                           
 13527                           ;incstack = 0
 13528                           ;EUSART1_Write@txData stored from wreg
 13529  0037D2  6E10               	movwf	EUSART1_Write@txData,c
 13530  0037D4                     l5954:
 13531  0037D4  0100               	movlb	0	; () banked
 13532  0037D6  51FE               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 13533  0037D8  B4D8               	btfsc	status,2,c
 13534  0037DA  D7FC               	goto	l5954
 13535                           
 13536                           ; BSR set to: 0
 13537                           ;eusart1.c: 136: }
 13538                           ;eusart1.c: 138: if(0 == PIE1bits.TX1IE)
 13539  0037DC  B89D               	btfsc	3997,4,c	;volatile
 13540  0037DE  D003               	goto	l193
 13541                           
 13542                           ; BSR set to: 0
 13543                           ;eusart1.c: 139: {
 13544                           ;eusart1.c: 140: TXREG1 = txData;
 13545  0037E0  C010  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 13546                           
 13547                           ;eusart1.c: 141: }
 13548  0037E4  D013               	goto	l5968
 13549  0037E6                     l193:
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;eusart1.c: 142: else
 13553                           ;eusart1.c: 143: {
 13554                           ;eusart1.c: 144: PIE1bits.TX1IE = 0;
 13555  0037E6  989D               	bcf	3997,4,c	;volatile
 13556                           
 13557                           ; BSR set to: 0
 13558                           ;eusart1.c: 145: eusart1TxBuffer[eusart1TxHead++] = txData;
 13559  0037E8  5047               	movf	_eusart1TxHead,w,c	;volatile
 13560  0037EA  0D01               	mullw	1
 13561  0037EC  0E68               	movlw	low _eusart1TxBuffer
 13562  0037EE  24F3               	addwf	prodl,w,c
 13563  0037F0  6ED9               	movwf	fsr2l,c
 13564  0037F2  0E00               	movlw	high _eusart1TxBuffer
 13565  0037F4  20F4               	addwfc	prodh,w,c
 13566  0037F6  6EDA               	movwf	fsr2h,c
 13567  0037F8  C010  FFDF         	movff	EUSART1_Write@txData,indf2
 13568                           
 13569                           ; BSR set to: 0
 13570  0037FC  2A47               	incf	_eusart1TxHead,f,c	;volatile
 13571                           
 13572                           ; BSR set to: 0
 13573                           ;eusart1.c: 146: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 13574  0037FE  0E07               	movlw	7
 13575  003800  6447               	cpfsgt	_eusart1TxHead,c	;volatile
 13576  003802  D002               	goto	l5966
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;eusart1.c: 147: {
 13580                           ;eusart1.c: 148: eusart1TxHead = 0;
 13581  003804  0E00               	movlw	0
 13582  003806  6E47               	movwf	_eusart1TxHead,c	;volatile
 13583  003808                     l5966:
 13584                           
 13585                           ; BSR set to: 0
 13586                           ;eusart1.c: 149: }
 13587                           ;eusart1.c: 150: eusart1TxBufferRemaining--;
 13588  003808  0100               	movlb	0	; () banked
 13589  00380A  07FE               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 13590  00380C                     l5968:
 13591                           
 13592                           ; BSR set to: 0
 13593                           ;eusart1.c: 151: }
 13594                           ;eusart1.c: 152: PIE1bits.TX1IE = 1;
 13595  00380C  889D               	bsf	3997,4,c	;volatile
 13596                           
 13597                           ; BSR set to: 0
 13598  00380E  0012               	return		;funcret
 13599  003810                     __end_of_EUSART1_Write:
 13600                           	opt stack 0
 13601                           tblptru	equ	0xFF8
 13602                           tblptrh	equ	0xFF7
 13603                           tblptrl	equ	0xFF6
 13604                           tablat	equ	0xFF5
 13605                           prodh	equ	0xFF4
 13606                           prodl	equ	0xFF3
 13607                           intcon	equ	0xFF2
 13608                           indf0	equ	0xFEF
 13609                           postinc0	equ	0xFEE
 13610                           fsr0h	equ	0xFEA
 13611                           fsr0l	equ	0xFE9
 13612                           wreg	equ	0xFE8
 13613                           indf1	equ	0xFE7
 13614                           postdec1	equ	0xFE5
 13615                           fsr1h	equ	0xFE2
 13616                           fsr1l	equ	0xFE1
 13617                           indf2	equ	0xFDF
 13618                           postinc2	equ	0xFDE
 13619                           postdec2	equ	0xFDD
 13620                           fsr2h	equ	0xFDA
 13621                           fsr2l	equ	0xFD9
 13622                           status	equ	0xFD8
 13623                           
 13624 ;; *************** function ___lwmod *****************
 13625 ;; Defined at:
 13626 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13627 ;; Parameters:    Size  Location     Type
 13628 ;;  dividend        2   22[COMRAM] unsigned int 
 13629 ;;  divisor         2   24[COMRAM] unsigned int 
 13630 ;; Auto vars:     Size  Location     Type
 13631 ;;  counter         1   26[COMRAM] unsigned char 
 13632 ;; Return value:  Size  Location     Type
 13633 ;;                  2   22[COMRAM] unsigned int 
 13634 ;; Registers used:
 13635 ;;		wreg, status,2, status,0
 13636 ;; Tracked objects:
 13637 ;;		On entry : 0/0
 13638 ;;		On exit  : 0/0
 13639 ;;		Unchanged: 0/0
 13640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13641 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13644 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13645 ;;Total ram usage:        5 bytes
 13646 ;; Hardware stack levels used:    1
 13647 ;; Hardware stack levels required when called:    5
 13648 ;; This function calls:
 13649 ;;		Nothing
 13650 ;; This function is called by:
 13651 ;;		_printf
 13652 ;; This function uses a non-reentrant model
 13653 ;;
 13654                           
 13655                           	psect	text60
 13656  003750                     __ptext60:
 13657                           	opt stack 0
 13658  003750                     ___lwmod:
 13659                           	opt stack 24
 13660                           
 13661                           ; BSR set to: 0
 13662                           ;incstack = 0
 13663  003750  5019               	movf	___lwmod@divisor,w,c
 13664  003752  101A               	iorwf	___lwmod@divisor+1,w,c
 13665  003754  B4D8               	btfsc	status,2,c
 13666  003756  D018               	goto	l1484
 13667  003758  0E01               	movlw	1
 13668  00375A  6E1B               	movwf	___lwmod@counter,c
 13669  00375C  D004               	goto	l6044
 13670  00375E                     l6042:
 13671  00375E  90D8               	bcf	status,0,c
 13672  003760  3619               	rlcf	___lwmod@divisor,f,c
 13673  003762  361A               	rlcf	___lwmod@divisor+1,f,c
 13674  003764  2A1B               	incf	___lwmod@counter,f,c
 13675  003766                     l6044:
 13676  003766  AE1A               	btfss	___lwmod@divisor+1,7,c
 13677  003768  D7FA               	goto	l6042
 13678  00376A                     l6046:
 13679  00376A  5019               	movf	___lwmod@divisor,w,c
 13680  00376C  5C17               	subwf	___lwmod@dividend,w,c
 13681  00376E  501A               	movf	___lwmod@divisor+1,w,c
 13682  003770  5818               	subwfb	___lwmod@dividend+1,w,c
 13683  003772  A0D8               	btfss	status,0,c
 13684  003774  D004               	goto	l6050
 13685  003776  5019               	movf	___lwmod@divisor,w,c
 13686  003778  5E17               	subwf	___lwmod@dividend,f,c
 13687  00377A  501A               	movf	___lwmod@divisor+1,w,c
 13688  00377C  5A18               	subwfb	___lwmod@dividend+1,f,c
 13689  00377E                     l6050:
 13690  00377E  90D8               	bcf	status,0,c
 13691  003780  321A               	rrcf	___lwmod@divisor+1,f,c
 13692  003782  3219               	rrcf	___lwmod@divisor,f,c
 13693  003784  2E1B               	decfsz	___lwmod@counter,f,c
 13694  003786  D7F1               	goto	l6046
 13695  003788                     l1484:
 13696  003788  C017  F017         	movff	___lwmod@dividend,?___lwmod
 13697  00378C  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
 13698  003790  0012               	return		;funcret
 13699  003792                     __end_of___lwmod:
 13700                           	opt stack 0
 13701                           tblptru	equ	0xFF8
 13702                           tblptrh	equ	0xFF7
 13703                           tblptrl	equ	0xFF6
 13704                           tablat	equ	0xFF5
 13705                           prodh	equ	0xFF4
 13706                           prodl	equ	0xFF3
 13707                           intcon	equ	0xFF2
 13708                           indf0	equ	0xFEF
 13709                           postinc0	equ	0xFEE
 13710                           fsr0h	equ	0xFEA
 13711                           fsr0l	equ	0xFE9
 13712                           wreg	equ	0xFE8
 13713                           indf1	equ	0xFE7
 13714                           postdec1	equ	0xFE5
 13715                           fsr1h	equ	0xFE2
 13716                           fsr1l	equ	0xFE1
 13717                           indf2	equ	0xFDF
 13718                           postinc2	equ	0xFDE
 13719                           postdec2	equ	0xFDD
 13720                           fsr2h	equ	0xFDA
 13721                           fsr2l	equ	0xFD9
 13722                           status	equ	0xFD8
 13723                           
 13724 ;; *************** function ___lwdiv *****************
 13725 ;; Defined at:
 13726 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13727 ;; Parameters:    Size  Location     Type
 13728 ;;  dividend        2   15[COMRAM] unsigned int 
 13729 ;;  divisor         2   17[COMRAM] unsigned int 
 13730 ;; Auto vars:     Size  Location     Type
 13731 ;;  quotient        2   20[COMRAM] unsigned int 
 13732 ;;  counter         1   19[COMRAM] unsigned char 
 13733 ;; Return value:  Size  Location     Type
 13734 ;;                  2   15[COMRAM] unsigned int 
 13735 ;; Registers used:
 13736 ;;		wreg, status,2, status,0
 13737 ;; Tracked objects:
 13738 ;;		On entry : 0/0
 13739 ;;		On exit  : 0/0
 13740 ;;		Unchanged: 0/0
 13741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13742 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13743 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13745 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13746 ;;Total ram usage:        7 bytes
 13747 ;; Hardware stack levels used:    1
 13748 ;; Hardware stack levels required when called:    5
 13749 ;; This function calls:
 13750 ;;		Nothing
 13751 ;; This function is called by:
 13752 ;;		_printf
 13753 ;; This function uses a non-reentrant model
 13754 ;;
 13755                           
 13756                           	psect	text61
 13757  0034B0                     __ptext61:
 13758                           	opt stack 0
 13759  0034B0                     ___lwdiv:
 13760                           	opt stack 24
 13761                           
 13762                           ;incstack = 0
 13763  0034B0  0E00               	movlw	0
 13764  0034B2  6E16               	movwf	___lwdiv@quotient+1,c
 13765  0034B4  0E00               	movlw	0
 13766  0034B6  6E15               	movwf	___lwdiv@quotient,c
 13767  0034B8  5012               	movf	___lwdiv@divisor,w,c
 13768  0034BA  1013               	iorwf	___lwdiv@divisor+1,w,c
 13769  0034BC  B4D8               	btfsc	status,2,c
 13770  0034BE  D01C               	goto	l1474
 13771  0034C0  0E01               	movlw	1
 13772  0034C2  6E14               	movwf	___lwdiv@counter,c
 13773  0034C4  D004               	goto	l6024
 13774  0034C6                     l6022:
 13775  0034C6  90D8               	bcf	status,0,c
 13776  0034C8  3612               	rlcf	___lwdiv@divisor,f,c
 13777  0034CA  3613               	rlcf	___lwdiv@divisor+1,f,c
 13778  0034CC  2A14               	incf	___lwdiv@counter,f,c
 13779  0034CE                     l6024:
 13780  0034CE  AE13               	btfss	___lwdiv@divisor+1,7,c
 13781  0034D0  D7FA               	goto	l6022
 13782  0034D2                     l6026:
 13783  0034D2  90D8               	bcf	status,0,c
 13784  0034D4  3615               	rlcf	___lwdiv@quotient,f,c
 13785  0034D6  3616               	rlcf	___lwdiv@quotient+1,f,c
 13786  0034D8  5012               	movf	___lwdiv@divisor,w,c
 13787  0034DA  5C10               	subwf	___lwdiv@dividend,w,c
 13788  0034DC  5013               	movf	___lwdiv@divisor+1,w,c
 13789  0034DE  5811               	subwfb	___lwdiv@dividend+1,w,c
 13790  0034E0  A0D8               	btfss	status,0,c
 13791  0034E2  D005               	goto	l6034
 13792  0034E4  5012               	movf	___lwdiv@divisor,w,c
 13793  0034E6  5E10               	subwf	___lwdiv@dividend,f,c
 13794  0034E8  5013               	movf	___lwdiv@divisor+1,w,c
 13795  0034EA  5A11               	subwfb	___lwdiv@dividend+1,f,c
 13796  0034EC  8015               	bsf	___lwdiv@quotient,0,c
 13797  0034EE                     l6034:
 13798  0034EE  90D8               	bcf	status,0,c
 13799  0034F0  3213               	rrcf	___lwdiv@divisor+1,f,c
 13800  0034F2  3212               	rrcf	___lwdiv@divisor,f,c
 13801  0034F4  2E14               	decfsz	___lwdiv@counter,f,c
 13802  0034F6  D7ED               	goto	l6026
 13803  0034F8                     l1474:
 13804  0034F8  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
 13805  0034FC  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13806  003500  0012               	return		;funcret
 13807  003502                     __end_of___lwdiv:
 13808                           	opt stack 0
 13809                           tblptru	equ	0xFF8
 13810                           tblptrh	equ	0xFF7
 13811                           tblptrl	equ	0xFF6
 13812                           tablat	equ	0xFF5
 13813                           prodh	equ	0xFF4
 13814                           prodl	equ	0xFF3
 13815                           intcon	equ	0xFF2
 13816                           indf0	equ	0xFEF
 13817                           postinc0	equ	0xFEE
 13818                           fsr0h	equ	0xFEA
 13819                           fsr0l	equ	0xFE9
 13820                           wreg	equ	0xFE8
 13821                           indf1	equ	0xFE7
 13822                           postdec1	equ	0xFE5
 13823                           fsr1h	equ	0xFE2
 13824                           fsr1l	equ	0xFE1
 13825                           indf2	equ	0xFDF
 13826                           postinc2	equ	0xFDE
 13827                           postdec2	equ	0xFDD
 13828                           fsr2h	equ	0xFDA
 13829                           fsr2l	equ	0xFD9
 13830                           status	equ	0xFD8
 13831                           
 13832 ;; *************** function _atoi *****************
 13833 ;; Defined at:
 13834 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
 13835 ;; Parameters:    Size  Location     Type
 13836 ;;  s               2   29[COMRAM] PTR const unsigned char 
 13837 ;;		 -> uart_str(150), STR_83(7), STR_82(7), STR_79(7), 
 13838 ;;		 -> STR_77(7), STR_75(7), STR_73(7), STR_71(2), 
 13839 ;;		 -> STR_69(7), STR_64(7), STR_62(7), STR_60(7), 
 13840 ;;		 -> STR_58(7), STR_56(7), STR_55(7), STR_51(7), 
 13841 ;;		 -> STR_48(7), STR_47(7), STR_43(2), STR_40(7), 
 13842 ;;		 -> STR_38(7), STR_36(7), STR_34(7), STR_32(7), 
 13843 ;;		 -> STR_31(7), STR_28(7), RAM(3895), STR_26(7), 
 13844 ;;		 -> STR_24(7), NULL(0), 
 13845 ;; Auto vars:     Size  Location     Type
 13846 ;;  a               2   34[COMRAM] int 
 13847 ;;  sign            1   33[COMRAM] unsigned char 
 13848 ;; Return value:  Size  Location     Type
 13849 ;;                  2   29[COMRAM] int 
 13850 ;; Registers used:
 13851 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13852 ;; Tracked objects:
 13853 ;;		On entry : 0/0
 13854 ;;		On exit  : 0/0
 13855 ;;		Unchanged: 0/0
 13856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13857 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13858 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13859 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13860 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13861 ;;Total ram usage:        7 bytes
 13862 ;; Hardware stack levels used:    1
 13863 ;; Hardware stack levels required when called:    6
 13864 ;; This function calls:
 13865 ;;		___wmul
 13866 ;;		_isdigit
 13867 ;; This function is called by:
 13868 ;;		_parse_cmd_str
 13869 ;; This function uses a non-reentrant model
 13870 ;;
 13871                           
 13872                           	psect	text62
 13873  002668                     __ptext62:
 13874                           	opt stack 0
 13875  002668                     _atoi:
 13876                           	opt stack 22
 13877                           
 13878                           ;incstack = 0
 13879  002668  D002               	goto	l6952
 13880  00266A                     l6950:
 13881  00266A  4A1E               	infsnz	atoi@s,f,c
 13882  00266C  2A1F               	incf	atoi@s+1,f,c
 13883  00266E                     l6952:
 13884  00266E  C01E  FFF6         	movff	atoi@s,tblptrl
 13885  002672  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13886  002676  0E00               	movlw	low (__mediumconst shr (0+16))
 13887  002678  6EF8               	movwf	tblptru,c
 13888  00267A  0E0F               	movlw	(high __ramtop+-1)
 13889  00267C  64F7               	cpfsgt	tblptrh,c
 13890  00267E  D003               	bra	u7107
 13891  002680  0008               	tblrd		*
 13892  002682  50F5               	movf	tablat,w,c
 13893  002684  D005               	bra	u7100
 13894  002686                     u7107:
 13895  002686  CFF6 FFE9          	movff	tblptrl,fsr0l
 13896  00268A  CFF7 FFEA          	movff	tblptrh,fsr0h
 13897  00268E  50EF               	movf	indf0,w,c
 13898  002690                     u7100:
 13899  002690  0A20               	xorlw	32
 13900  002692  B4D8               	btfsc	status,2,c
 13901  002694  D7EA               	goto	l6950
 13902  002696  C01E  FFF6         	movff	atoi@s,tblptrl
 13903  00269A  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13904  00269E  0E00               	movlw	low (__mediumconst shr (0+16))
 13905  0026A0  6EF8               	movwf	tblptru,c
 13906  0026A2  0E0F               	movlw	(high __ramtop+-1)
 13907  0026A4  64F7               	cpfsgt	tblptrh,c
 13908  0026A6  D003               	bra	u7127
 13909  0026A8  0008               	tblrd		*
 13910  0026AA  50F5               	movf	tablat,w,c
 13911  0026AC  D005               	bra	u7120
 13912  0026AE                     u7127:
 13913  0026AE  CFF6 FFE9          	movff	tblptrl,fsr0l
 13914  0026B2  CFF7 FFEA          	movff	tblptrh,fsr0h
 13915  0026B6  50EF               	movf	indf0,w,c
 13916  0026B8                     u7120:
 13917  0026B8  0A09               	xorlw	9
 13918  0026BA  B4D8               	btfsc	status,2,c
 13919  0026BC  D7D6               	goto	l6950
 13920  0026BE  0E00               	movlw	0
 13921  0026C0  6E24               	movwf	atoi@a+1,c
 13922  0026C2  0E00               	movlw	0
 13923  0026C4  6E23               	movwf	atoi@a,c
 13924  0026C6  0E00               	movlw	0
 13925  0026C8  6E22               	movwf	atoi@sign,c
 13926  0026CA  C01E  FFF6         	movff	atoi@s,tblptrl
 13927  0026CE  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13928  0026D2  0E00               	movlw	low (__mediumconst shr (0+16))
 13929  0026D4  6EF8               	movwf	tblptru,c
 13930  0026D6  0E0F               	movlw	(high __ramtop+-1)
 13931  0026D8  64F7               	cpfsgt	tblptrh,c
 13932  0026DA  D003               	bra	u7147
 13933  0026DC  0008               	tblrd		*
 13934  0026DE  50F5               	movf	tablat,w,c
 13935  0026E0  D005               	bra	u7140
 13936  0026E2                     u7147:
 13937  0026E2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13938  0026E6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13939  0026EA  50EF               	movf	indf0,w,c
 13940  0026EC                     u7140:
 13941  0026EC  0A2D               	xorlw	45
 13942  0026EE  A4D8               	btfss	status,2,c
 13943  0026F0  D002               	goto	l6962
 13944  0026F2  2A22               	incf	atoi@sign,f,c
 13945  0026F4  D03C               	goto	l6968
 13946  0026F6                     l6962:
 13947  0026F6  C01E  FFF6         	movff	atoi@s,tblptrl
 13948  0026FA  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13949  0026FE  0E00               	movlw	low (__mediumconst shr (0+16))
 13950  002700  6EF8               	movwf	tblptru,c
 13951  002702  0E0F               	movlw	(high __ramtop+-1)
 13952  002704  64F7               	cpfsgt	tblptrh,c
 13953  002706  D003               	bra	u7167
 13954  002708  0008               	tblrd		*
 13955  00270A  50F5               	movf	tablat,w,c
 13956  00270C  D005               	bra	u7160
 13957  00270E                     u7167:
 13958  00270E  CFF6 FFE9          	movff	tblptrl,fsr0l
 13959  002712  CFF7 FFEA          	movff	tblptrh,fsr0h
 13960  002716  50EF               	movf	indf0,w,c
 13961  002718                     u7160:
 13962  002718  0A2B               	xorlw	43
 13963  00271A  A4D8               	btfss	status,2,c
 13964  00271C  D02A               	goto	l6970
 13965  00271E  D027               	goto	l6968
 13966  002720                     l6966:
 13967  002720  C023  F018         	movff	atoi@a,___wmul@multiplier
 13968  002724  C024  F019         	movff	atoi@a+1,___wmul@multiplier+1
 13969  002728  0E00               	movlw	0
 13970  00272A  6E1B               	movwf	___wmul@multiplicand+1,c
 13971  00272C  0E0A               	movlw	10
 13972  00272E  6E1A               	movwf	___wmul@multiplicand,c
 13973  002730  ECD5  F01C         	call	___wmul	;wreg free
 13974  002734  C01E  FFF6         	movff	atoi@s,tblptrl
 13975  002738  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13976  00273C  0E00               	movlw	low (__mediumconst shr (0+16))
 13977  00273E  6EF8               	movwf	tblptru,c
 13978  002740  0E0F               	movlw	(high __ramtop+-1)
 13979  002742  64F7               	cpfsgt	tblptrh,c
 13980  002744  D003               	bra	u7187
 13981  002746  0008               	tblrd		*
 13982  002748  50F5               	movf	tablat,w,c
 13983  00274A  D005               	bra	u7180
 13984  00274C                     u7187:
 13985  00274C  CFF6 FFE9          	movff	tblptrl,fsr0l
 13986  002750  CFF7 FFEA          	movff	tblptrh,fsr0h
 13987  002754  50EF               	movf	indf0,w,c
 13988  002756                     u7180:
 13989  002756  6E20               	movwf	??_atoi& (0+255),c
 13990  002758  6A21               	clrf	(??_atoi+1)& (0+255),c
 13991  00275A  5018               	movf	?___wmul,w,c
 13992  00275C  2620               	addwf	??_atoi,f,c
 13993  00275E  5019               	movf	?___wmul+1,w,c
 13994  002760  2221               	addwfc	??_atoi+1,f,c
 13995  002762  0ED0               	movlw	208
 13996  002764  2420               	addwf	??_atoi,w,c
 13997  002766  6E23               	movwf	atoi@a,c
 13998  002768  0EFF               	movlw	255
 13999  00276A  2021               	addwfc	??_atoi+1,w,c
 14000  00276C  6E24               	movwf	atoi@a+1,c
 14001  00276E                     l6968:
 14002  00276E  4A1E               	infsnz	atoi@s,f,c
 14003  002770  2A1F               	incf	atoi@s+1,f,c
 14004  002772                     l6970:
 14005  002772  C01E  FFF6         	movff	atoi@s,tblptrl
 14006  002776  C01F  FFF7         	movff	atoi@s+1,tblptrh
 14007  00277A  0E00               	movlw	low (__mediumconst shr (0+16))
 14008  00277C  6EF8               	movwf	tblptru,c
 14009  00277E  0E0F               	movlw	(high __ramtop+-1)
 14010  002780  64F7               	cpfsgt	tblptrh,c
 14011  002782  D003               	bra	u7197
 14012  002784  0008               	tblrd		*
 14013  002786  50F5               	movf	tablat,w,c
 14014  002788  D005               	bra	u7190
 14015  00278A                     u7197:
 14016  00278A  CFF6 FFE9          	movff	tblptrl,fsr0l
 14017  00278E  CFF7 FFEA          	movff	tblptrh,fsr0h
 14018  002792  50EF               	movf	indf0,w,c
 14019  002794                     u7190:
 14020  002794  EC3D  F01D         	call	_isdigit
 14021  002798  B0D8               	btfsc	status,0,c
 14022  00279A  D7C2               	goto	l6966
 14023  00279C  5022               	movf	atoi@sign,w,c
 14024  00279E  B4D8               	btfsc	status,2,c
 14025  0027A0  D00D               	goto	l1224
 14026  0027A2  C023  F020         	movff	atoi@a,??_atoi
 14027  0027A6  C024  F021         	movff	atoi@a+1,??_atoi+1
 14028  0027AA  1E20               	comf	??_atoi,f,c
 14029  0027AC  1E21               	comf	??_atoi+1,f,c
 14030  0027AE  4A20               	infsnz	??_atoi,f,c
 14031  0027B0  2A21               	incf	??_atoi+1,f,c
 14032  0027B2  C020  F01E         	movff	??_atoi,?_atoi
 14033  0027B6  C021  F01F         	movff	??_atoi+1,?_atoi+1
 14034  0027BA  0012               	return	
 14035  0027BC                     l1224:
 14036  0027BC  C023  F01E         	movff	atoi@a,?_atoi
 14037  0027C0  C024  F01F         	movff	atoi@a+1,?_atoi+1
 14038  0027C4  0012               	return		;funcret
 14039  0027C6                     __end_of_atoi:
 14040                           	opt stack 0
 14041                           tblptru	equ	0xFF8
 14042                           tblptrh	equ	0xFF7
 14043                           tblptrl	equ	0xFF6
 14044                           tablat	equ	0xFF5
 14045                           prodh	equ	0xFF4
 14046                           prodl	equ	0xFF3
 14047                           intcon	equ	0xFF2
 14048                           indf0	equ	0xFEF
 14049                           postinc0	equ	0xFEE
 14050                           fsr0h	equ	0xFEA
 14051                           fsr0l	equ	0xFE9
 14052                           wreg	equ	0xFE8
 14053                           indf1	equ	0xFE7
 14054                           postdec1	equ	0xFE5
 14055                           fsr1h	equ	0xFE2
 14056                           fsr1l	equ	0xFE1
 14057                           indf2	equ	0xFDF
 14058                           postinc2	equ	0xFDE
 14059                           postdec2	equ	0xFDD
 14060                           fsr2h	equ	0xFDA
 14061                           fsr2l	equ	0xFD9
 14062                           status	equ	0xFD8
 14063                           
 14064 ;; *************** function _isdigit *****************
 14065 ;; Defined at:
 14066 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14067 ;; Parameters:    Size  Location     Type
 14068 ;;  c               1    wreg     unsigned char 
 14069 ;; Auto vars:     Size  Location     Type
 14070 ;;  c               1   17[COMRAM] unsigned char 
 14071 ;; Return value:  Size  Location     Type
 14072 ;;		None               void
 14073 ;; Registers used:
 14074 ;;		wreg, status,2, status,0
 14075 ;; Tracked objects:
 14076 ;;		On entry : 0/0
 14077 ;;		On exit  : 0/0
 14078 ;;		Unchanged: 0/0
 14079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14081 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14082 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14083 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14084 ;;Total ram usage:        3 bytes
 14085 ;; Hardware stack levels used:    1
 14086 ;; Hardware stack levels required when called:    5
 14087 ;; This function calls:
 14088 ;;		Nothing
 14089 ;; This function is called by:
 14090 ;;		_collect_row
 14091 ;;		_get_direction
 14092 ;;		_get_dis_frq
 14093 ;;		_collect_column
 14094 ;;		_parse_cmd_str
 14095 ;;		_atoi
 14096 ;; This function uses a non-reentrant model
 14097 ;;
 14098                           
 14099                           	psect	text63
 14100  003A7A                     __ptext63:
 14101                           	opt stack 0
 14102  003A7A                     _isdigit:
 14103                           	opt stack 23
 14104                           
 14105                           ;incstack = 0
 14106                           ;isdigit@c stored from wreg
 14107  003A7A  6E12               	movwf	isdigit@c,c
 14108  003A7C  0E00               	movlw	0
 14109  003A7E  6E11               	movwf	_isdigit$2216,c
 14110  003A80  0E3A               	movlw	58
 14111  003A82  6012               	cpfslt	isdigit@c,c
 14112  003A84  D005               	goto	l6524
 14113  003A86  0E2F               	movlw	47
 14114  003A88  6412               	cpfsgt	isdigit@c,c
 14115  003A8A  D002               	goto	l6524
 14116  003A8C  0E01               	movlw	1
 14117  003A8E  6E11               	movwf	_isdigit$2216,c
 14118  003A90                     l6524:
 14119  003A90  C011  F010         	movff	_isdigit$2216,??_isdigit
 14120  003A94  3010               	rrcf	??_isdigit,w,c
 14121  003A96  0012               	return	
 14122  003A98                     __end_of_isdigit:
 14123                           	opt stack 0
 14124                           tblptru	equ	0xFF8
 14125                           tblptrh	equ	0xFF7
 14126                           tblptrl	equ	0xFF6
 14127                           tablat	equ	0xFF5
 14128                           prodh	equ	0xFF4
 14129                           prodl	equ	0xFF3
 14130                           intcon	equ	0xFF2
 14131                           indf0	equ	0xFEF
 14132                           postinc0	equ	0xFEE
 14133                           fsr0h	equ	0xFEA
 14134                           fsr0l	equ	0xFE9
 14135                           wreg	equ	0xFE8
 14136                           indf1	equ	0xFE7
 14137                           postdec1	equ	0xFE5
 14138                           fsr1h	equ	0xFE2
 14139                           fsr1l	equ	0xFE1
 14140                           indf2	equ	0xFDF
 14141                           postinc2	equ	0xFDE
 14142                           postdec2	equ	0xFDD
 14143                           fsr2h	equ	0xFDA
 14144                           fsr2l	equ	0xFD9
 14145                           status	equ	0xFD8
 14146                           
 14147 ;; *************** function ___wmul *****************
 14148 ;; Defined at:
 14149 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14150 ;; Parameters:    Size  Location     Type
 14151 ;;  multiplier      2   23[COMRAM] unsigned int 
 14152 ;;  multiplicand    2   25[COMRAM] unsigned int 
 14153 ;; Auto vars:     Size  Location     Type
 14154 ;;  product         2   27[COMRAM] unsigned int 
 14155 ;; Return value:  Size  Location     Type
 14156 ;;                  2   23[COMRAM] unsigned int 
 14157 ;; Registers used:
 14158 ;;		wreg, status,2, status,0, prodl, prodh
 14159 ;; Tracked objects:
 14160 ;;		On entry : 0/0
 14161 ;;		On exit  : 0/0
 14162 ;;		Unchanged: 0/0
 14163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14164 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14165 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14167 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14168 ;;Total ram usage:        6 bytes
 14169 ;; Hardware stack levels used:    1
 14170 ;; Hardware stack levels required when called:    5
 14171 ;; This function calls:
 14172 ;;		Nothing
 14173 ;; This function is called by:
 14174 ;;		_init_clcd_cusotom_lcd
 14175 ;;		_conflict_check
 14176 ;;		_update_string_data
 14177 ;;		_make_display
 14178 ;;		_atoi
 14179 ;; This function uses a non-reentrant model
 14180 ;;
 14181                           
 14182                           	psect	text64
 14183  0039AA                     __ptext64:
 14184                           	opt stack 0
 14185  0039AA                     ___wmul:
 14186                           	opt stack 24
 14187                           
 14188                           ;incstack = 0
 14189  0039AA  5018               	movf	___wmul@multiplier,w,c
 14190  0039AC  021A               	mulwf	___wmul@multiplicand,c
 14191  0039AE  CFF3 F01C          	movff	prodl,___wmul@product
 14192  0039B2  CFF4 F01D          	movff	prodh,___wmul@product+1
 14193  0039B6  5018               	movf	___wmul@multiplier,w,c
 14194  0039B8  021B               	mulwf	___wmul@multiplicand+1,c
 14195  0039BA  50F3               	movf	prodl,w,c
 14196  0039BC  261D               	addwf	___wmul@product+1,f,c
 14197  0039BE  5019               	movf	___wmul@multiplier+1,w,c
 14198  0039C0  021A               	mulwf	___wmul@multiplicand,c
 14199  0039C2  50F3               	movf	prodl,w,c
 14200  0039C4  261D               	addwf	___wmul@product+1,f,c
 14201  0039C6  C01C  F018         	movff	___wmul@product,?___wmul
 14202  0039CA  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 14203  0039CE  0012               	return	
 14204  0039D0                     __end_of___wmul:
 14205                           	opt stack 0
 14206                           tblptru	equ	0xFF8
 14207                           tblptrh	equ	0xFF7
 14208                           tblptrl	equ	0xFF6
 14209                           tablat	equ	0xFF5
 14210                           prodh	equ	0xFF4
 14211                           prodl	equ	0xFF3
 14212                           intcon	equ	0xFF2
 14213                           indf0	equ	0xFEF
 14214                           postinc0	equ	0xFEE
 14215                           fsr0h	equ	0xFEA
 14216                           fsr0l	equ	0xFE9
 14217                           wreg	equ	0xFE8
 14218                           indf1	equ	0xFE7
 14219                           postdec1	equ	0xFE5
 14220                           fsr1h	equ	0xFE2
 14221                           fsr1l	equ	0xFE1
 14222                           indf2	equ	0xFDF
 14223                           postinc2	equ	0xFDE
 14224                           postdec2	equ	0xFDD
 14225                           fsr2h	equ	0xFDA
 14226                           fsr2l	equ	0xFD9
 14227                           status	equ	0xFD8
 14228                           
 14229 ;; *************** function _getch *****************
 14230 ;; Defined at:
 14231 ;;		line 155 in file "mcc_generated_files/eusart1.c"
 14232 ;; Parameters:    Size  Location     Type
 14233 ;;		None
 14234 ;; Auto vars:     Size  Location     Type
 14235 ;;		None
 14236 ;; Return value:  Size  Location     Type
 14237 ;;                  1    wreg      unsigned char 
 14238 ;; Registers used:
 14239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14240 ;; Tracked objects:
 14241 ;;		On entry : 0/0
 14242 ;;		On exit  : 0/0
 14243 ;;		Unchanged: 0/0
 14244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14249 ;;Total ram usage:        0 bytes
 14250 ;; Hardware stack levels used:    1
 14251 ;; Hardware stack levels required when called:    6
 14252 ;; This function calls:
 14253 ;;		_EUSART1_Read
 14254 ;; This function is called by:
 14255 ;;		_cmd_consol_task
 14256 ;; This function uses a non-reentrant model
 14257 ;;
 14258                           
 14259                           	psect	text65
 14260  003C0C                     __ptext65:
 14261                           	opt stack 0
 14262  003C0C                     _getch:
 14263                           	opt stack 23
 14264                           
 14265                           ;eusart1.c: 157: return EUSART1_Read();
 14266                           
 14267                           ;incstack = 0
 14268  003C0C  EC5C  F01C         	call	_EUSART1_Read	;wreg free
 14269  003C10  0012               	return	
 14270  003C12                     __end_of_getch:
 14271                           	opt stack 0
 14272                           tblptru	equ	0xFF8
 14273                           tblptrh	equ	0xFF7
 14274                           tblptrl	equ	0xFF6
 14275                           tablat	equ	0xFF5
 14276                           prodh	equ	0xFF4
 14277                           prodl	equ	0xFF3
 14278                           intcon	equ	0xFF2
 14279                           indf0	equ	0xFEF
 14280                           postinc0	equ	0xFEE
 14281                           fsr0h	equ	0xFEA
 14282                           fsr0l	equ	0xFE9
 14283                           wreg	equ	0xFE8
 14284                           indf1	equ	0xFE7
 14285                           postdec1	equ	0xFE5
 14286                           fsr1h	equ	0xFE2
 14287                           fsr1l	equ	0xFE1
 14288                           indf2	equ	0xFDF
 14289                           postinc2	equ	0xFDE
 14290                           postdec2	equ	0xFDD
 14291                           fsr2h	equ	0xFDA
 14292                           fsr2l	equ	0xFD9
 14293                           status	equ	0xFD8
 14294                           
 14295 ;; *************** function _EUSART1_Read *****************
 14296 ;; Defined at:
 14297 ;;		line 112 in file "mcc_generated_files/eusart1.c"
 14298 ;; Parameters:    Size  Location     Type
 14299 ;;		None
 14300 ;; Auto vars:     Size  Location     Type
 14301 ;;  readValue       1   15[COMRAM] unsigned char 
 14302 ;; Return value:  Size  Location     Type
 14303 ;;                  1    wreg      unsigned char 
 14304 ;; Registers used:
 14305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14306 ;; Tracked objects:
 14307 ;;		On entry : 0/0
 14308 ;;		On exit  : 0/0
 14309 ;;		Unchanged: 0/0
 14310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14314 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14315 ;;Total ram usage:        1 bytes
 14316 ;; Hardware stack levels used:    1
 14317 ;; Hardware stack levels required when called:    5
 14318 ;; This function calls:
 14319 ;;		Nothing
 14320 ;; This function is called by:
 14321 ;;		_getch
 14322 ;; This function uses a non-reentrant model
 14323 ;;
 14324                           
 14325                           	psect	text66
 14326  0038B8                     __ptext66:
 14327                           	opt stack 0
 14328  0038B8                     _EUSART1_Read:
 14329                           	opt stack 23
 14330                           
 14331                           ;eusart1.c: 114: uint8_t readValue = 0;
 14332                           
 14333                           ;incstack = 0
 14334  0038B8  0E00               	movlw	0
 14335  0038BA  6E10               	movwf	EUSART1_Read@readValue,c
 14336  0038BC                     l4588:
 14337  0038BC  5044               	movf	_eusart1RxCount,w,c	;volatile
 14338  0038BE  B4D8               	btfsc	status,2,c
 14339  0038C0  D7FD               	goto	l4588
 14340                           
 14341                           ;eusart1.c: 118: }
 14342                           ;eusart1.c: 120: readValue = eusart1RxBuffer[eusart1RxTail++];
 14343  0038C2  5046               	movf	_eusart1RxTail,w,c	;volatile
 14344  0038C4  0D01               	mullw	1
 14345  0038C6  0E60               	movlw	low _eusart1RxBuffer
 14346  0038C8  24F3               	addwf	prodl,w,c
 14347  0038CA  6ED9               	movwf	fsr2l,c
 14348  0038CC  0E00               	movlw	high _eusart1RxBuffer
 14349  0038CE  20F4               	addwfc	prodh,w,c
 14350  0038D0  6EDA               	movwf	fsr2h,c
 14351  0038D2  50DF               	movf	indf2,w,c
 14352  0038D4  6E10               	movwf	EUSART1_Read@readValue,c
 14353  0038D6  2A46               	incf	_eusart1RxTail,f,c	;volatile
 14354                           
 14355                           ;eusart1.c: 121: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 14356  0038D8  0E07               	movlw	7
 14357  0038DA  6446               	cpfsgt	_eusart1RxTail,c	;volatile
 14358  0038DC  D002               	goto	l4598
 14359                           
 14360                           ;eusart1.c: 122: {
 14361                           ;eusart1.c: 123: eusart1RxTail = 0;
 14362  0038DE  0E00               	movlw	0
 14363  0038E0  6E46               	movwf	_eusart1RxTail,c	;volatile
 14364  0038E2                     l4598:
 14365                           
 14366                           ;eusart1.c: 124: }
 14367                           ;eusart1.c: 125: PIE1bits.RC1IE = 0;
 14368  0038E2  9A9D               	bcf	3997,5,c	;volatile
 14369                           
 14370                           ;eusart1.c: 126: eusart1RxCount--;
 14371  0038E4  0644               	decf	_eusart1RxCount,f,c	;volatile
 14372                           
 14373                           ;eusart1.c: 127: PIE1bits.RC1IE = 1;
 14374  0038E6  8A9D               	bsf	3997,5,c	;volatile
 14375                           
 14376                           ;eusart1.c: 129: return readValue;
 14377  0038E8  5010               	movf	EUSART1_Read@readValue,w,c
 14378  0038EA  0012               	return	
 14379  0038EC                     __end_of_EUSART1_Read:
 14380                           	opt stack 0
 14381                           tblptru	equ	0xFF8
 14382                           tblptrh	equ	0xFF7
 14383                           tblptrl	equ	0xFF6
 14384                           tablat	equ	0xFF5
 14385                           prodh	equ	0xFF4
 14386                           prodl	equ	0xFF3
 14387                           intcon	equ	0xFF2
 14388                           indf0	equ	0xFEF
 14389                           postinc0	equ	0xFEE
 14390                           fsr0h	equ	0xFEA
 14391                           fsr0l	equ	0xFE9
 14392                           wreg	equ	0xFE8
 14393                           indf1	equ	0xFE7
 14394                           postdec1	equ	0xFE5
 14395                           fsr1h	equ	0xFE2
 14396                           fsr1l	equ	0xFE1
 14397                           indf2	equ	0xFDF
 14398                           postinc2	equ	0xFDE
 14399                           postdec2	equ	0xFDD
 14400                           fsr2h	equ	0xFDA
 14401                           fsr2l	equ	0xFD9
 14402                           status	equ	0xFD8
 14403                           
 14404 ;; *************** function _TMR5_StopTimer *****************
 14405 ;; Defined at:
 14406 ;;		line 94 in file "mcc_generated_files/tmr5.c"
 14407 ;; Parameters:    Size  Location     Type
 14408 ;;		None
 14409 ;; Auto vars:     Size  Location     Type
 14410 ;;		None
 14411 ;; Return value:  Size  Location     Type
 14412 ;;                  1    wreg      void 
 14413 ;; Registers used:
 14414 ;;		None
 14415 ;; Tracked objects:
 14416 ;;		On entry : 0/0
 14417 ;;		On exit  : 0/0
 14418 ;;		Unchanged: 0/0
 14419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14424 ;;Total ram usage:        0 bytes
 14425 ;; Hardware stack levels used:    1
 14426 ;; Hardware stack levels required when called:    5
 14427 ;; This function calls:
 14428 ;;		Nothing
 14429 ;; This function is called by:
 14430 ;;		_main
 14431 ;;		__delay_10uS
 14432 ;; This function uses a non-reentrant model
 14433 ;;
 14434                           
 14435                           	psect	text67
 14436  003C12                     __ptext67:
 14437                           	opt stack 0
 14438  003C12                     _TMR5_StopTimer:
 14439                           	opt stack 25
 14440                           
 14441                           ;tmr5.c: 97: T5CONbits.TMR5ON = 0;
 14442                           
 14443                           ;incstack = 0
 14444  003C12  010F               	movlb	15	; () banked
 14445  003C14  914E               	bcf	78,0,b	;volatile
 14446                           
 14447                           ; BSR set to: 15
 14448  003C16  0012               	return		;funcret
 14449  003C18                     __end_of_TMR5_StopTimer:
 14450                           	opt stack 0
 14451                           tblptru	equ	0xFF8
 14452                           tblptrh	equ	0xFF7
 14453                           tblptrl	equ	0xFF6
 14454                           tablat	equ	0xFF5
 14455                           prodh	equ	0xFF4
 14456                           prodl	equ	0xFF3
 14457                           intcon	equ	0xFF2
 14458                           indf0	equ	0xFEF
 14459                           postinc0	equ	0xFEE
 14460                           fsr0h	equ	0xFEA
 14461                           fsr0l	equ	0xFE9
 14462                           wreg	equ	0xFE8
 14463                           indf1	equ	0xFE7
 14464                           postdec1	equ	0xFE5
 14465                           fsr1h	equ	0xFE2
 14466                           fsr1l	equ	0xFE1
 14467                           indf2	equ	0xFDF
 14468                           postinc2	equ	0xFDE
 14469                           postdec2	equ	0xFDD
 14470                           fsr2h	equ	0xFDA
 14471                           fsr2l	equ	0xFD9
 14472                           status	equ	0xFD8
 14473                           
 14474 ;; *************** function _TMR0_StopTimer *****************
 14475 ;; Defined at:
 14476 ;;		line 101 in file "mcc_generated_files/tmr0.c"
 14477 ;; Parameters:    Size  Location     Type
 14478 ;;		None
 14479 ;; Auto vars:     Size  Location     Type
 14480 ;;		None
 14481 ;; Return value:  Size  Location     Type
 14482 ;;                  1    wreg      void 
 14483 ;; Registers used:
 14484 ;;		None
 14485 ;; Tracked objects:
 14486 ;;		On entry : 0/0
 14487 ;;		On exit  : 0/0
 14488 ;;		Unchanged: 0/0
 14489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14494 ;;Total ram usage:        0 bytes
 14495 ;; Hardware stack levels used:    1
 14496 ;; Hardware stack levels required when called:    5
 14497 ;; This function calls:
 14498 ;;		Nothing
 14499 ;; This function is called by:
 14500 ;;		_main
 14501 ;; This function uses a non-reentrant model
 14502 ;;
 14503                           
 14504                           	psect	text68
 14505  003C22                     __ptext68:
 14506                           	opt stack 0
 14507  003C22                     _TMR0_StopTimer:
 14508                           	opt stack 25
 14509                           
 14510                           ;tmr0.c: 104: T0CONbits.TMR0ON = 0;
 14511                           
 14512                           ; BSR set to: 15
 14513                           ;incstack = 0
 14514  003C22  9ED5               	bcf	4053,7,c	;volatile
 14515  003C24  0012               	return		;funcret
 14516  003C26                     __end_of_TMR0_StopTimer:
 14517                           	opt stack 0
 14518                           tblptru	equ	0xFF8
 14519                           tblptrh	equ	0xFF7
 14520                           tblptrl	equ	0xFF6
 14521                           tablat	equ	0xFF5
 14522                           prodh	equ	0xFF4
 14523                           prodl	equ	0xFF3
 14524                           intcon	equ	0xFF2
 14525                           indf0	equ	0xFEF
 14526                           postinc0	equ	0xFEE
 14527                           fsr0h	equ	0xFEA
 14528                           fsr0l	equ	0xFE9
 14529                           wreg	equ	0xFE8
 14530                           indf1	equ	0xFE7
 14531                           postdec1	equ	0xFE5
 14532                           fsr1h	equ	0xFE2
 14533                           fsr1l	equ	0xFE1
 14534                           indf2	equ	0xFDF
 14535                           postinc2	equ	0xFDE
 14536                           postdec2	equ	0xFDD
 14537                           fsr2h	equ	0xFDA
 14538                           fsr2l	equ	0xFD9
 14539                           status	equ	0xFD8
 14540                           
 14541 ;; *************** function _SYSTEM_Initialize *****************
 14542 ;; Defined at:
 14543 ;;		line 111 in file "mcc_generated_files/mcc.c"
 14544 ;; Parameters:    Size  Location     Type
 14545 ;;		None
 14546 ;; Auto vars:     Size  Location     Type
 14547 ;;		None
 14548 ;; Return value:  Size  Location     Type
 14549 ;;                  1    wreg      void 
 14550 ;; Registers used:
 14551 ;;		wreg, status,2, status,0, cstack
 14552 ;; Tracked objects:
 14553 ;;		On entry : 0/0
 14554 ;;		On exit  : 0/0
 14555 ;;		Unchanged: 0/0
 14556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14561 ;;Total ram usage:        0 bytes
 14562 ;; Hardware stack levels used:    1
 14563 ;; Hardware stack levels required when called:    7
 14564 ;; This function calls:
 14565 ;;		_EUSART1_Initialize
 14566 ;;		_INTERRUPT_Initialize
 14567 ;;		_OSCILLATOR_Initialize
 14568 ;;		_PIN_MANAGER_Initialize
 14569 ;;		_TMR0_Initialize
 14570 ;;		_TMR1_Initialize
 14571 ;;		_TMR5_Initialize
 14572 ;; This function is called by:
 14573 ;;		_main
 14574 ;; This function uses a non-reentrant model
 14575 ;;
 14576                           
 14577                           	psect	text69
 14578  003A98                     __ptext69:
 14579                           	opt stack 0
 14580  003A98                     _SYSTEM_Initialize:
 14581                           	opt stack 23
 14582                           
 14583                           ;mcc.c: 114: INTERRUPT_Initialize();
 14584                           
 14585                           ;incstack = 0
 14586  003A98  EC17  F01E         	call	_INTERRUPT_Initialize	;wreg free
 14587                           
 14588                           ;mcc.c: 115: PIN_MANAGER_Initialize();
 14589  003A9C  EC1B  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
 14590                           
 14591                           ;mcc.c: 116: OSCILLATOR_Initialize();
 14592  003AA0  ECCE  F01D         	call	_OSCILLATOR_Initialize	;wreg free
 14593                           
 14594                           ;mcc.c: 117: TMR5_Initialize();
 14595  003AA4  ECE8  F01C         	call	_TMR5_Initialize	;wreg free
 14596                           
 14597                           ;mcc.c: 118: TMR1_Initialize();
 14598  003AA8  EC1E  F01D         	call	_TMR1_Initialize	;wreg free
 14599                           
 14600                           ;mcc.c: 119: TMR0_Initialize();
 14601  003AAC  EC25  F01C         	call	_TMR0_Initialize	;wreg free
 14602                           
 14603                           ;mcc.c: 120: EUSART1_Initialize();
 14604  003AB0  EC41  F01C         	call	_EUSART1_Initialize	;wreg free
 14605  003AB4  0012               	return		;funcret
 14606  003AB6                     __end_of_SYSTEM_Initialize:
 14607                           	opt stack 0
 14608                           tblptru	equ	0xFF8
 14609                           tblptrh	equ	0xFF7
 14610                           tblptrl	equ	0xFF6
 14611                           tablat	equ	0xFF5
 14612                           prodh	equ	0xFF4
 14613                           prodl	equ	0xFF3
 14614                           intcon	equ	0xFF2
 14615                           indf0	equ	0xFEF
 14616                           postinc0	equ	0xFEE
 14617                           fsr0h	equ	0xFEA
 14618                           fsr0l	equ	0xFE9
 14619                           wreg	equ	0xFE8
 14620                           indf1	equ	0xFE7
 14621                           postdec1	equ	0xFE5
 14622                           fsr1h	equ	0xFE2
 14623                           fsr1l	equ	0xFE1
 14624                           indf2	equ	0xFDF
 14625                           postinc2	equ	0xFDE
 14626                           postdec2	equ	0xFDD
 14627                           fsr2h	equ	0xFDA
 14628                           fsr2l	equ	0xFD9
 14629                           status	equ	0xFD8
 14630                           
 14631 ;; *************** function _TMR5_Initialize *****************
 14632 ;; Defined at:
 14633 ;;		line 62 in file "mcc_generated_files/tmr5.c"
 14634 ;; Parameters:    Size  Location     Type
 14635 ;;		None
 14636 ;; Auto vars:     Size  Location     Type
 14637 ;;		None
 14638 ;; Return value:  Size  Location     Type
 14639 ;;                  1    wreg      void 
 14640 ;; Registers used:
 14641 ;;		wreg, status,2, cstack
 14642 ;; Tracked objects:
 14643 ;;		On entry : 0/0
 14644 ;;		On exit  : 0/0
 14645 ;;		Unchanged: 0/0
 14646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14651 ;;Total ram usage:        0 bytes
 14652 ;; Hardware stack levels used:    1
 14653 ;; Hardware stack levels required when called:    6
 14654 ;; This function calls:
 14655 ;;		_TMR5_StartTimer
 14656 ;; This function is called by:
 14657 ;;		_SYSTEM_Initialize
 14658 ;; This function uses a non-reentrant model
 14659 ;;
 14660                           
 14661                           	psect	text70
 14662  0039D0                     __ptext70:
 14663                           	opt stack 0
 14664  0039D0                     _TMR5_Initialize:
 14665                           	opt stack 23
 14666                           
 14667                           ;tmr5.c: 67: T5CON = 0x12;
 14668                           
 14669                           ;incstack = 0
 14670  0039D0  0E12               	movlw	18
 14671  0039D2  010F               	movlb	15	; () banked
 14672  0039D4  6F4E               	movwf	78,b	;volatile
 14673                           
 14674                           ;tmr5.c: 70: T5GCON = 0x00;
 14675  0039D6  0E00               	movlw	0
 14676  0039D8  010F               	movlb	15	; () banked
 14677  0039DA  6F4D               	movwf	77,b	;volatile
 14678                           
 14679                           ; BSR set to: 15
 14680                           ;tmr5.c: 73: TMR5H = 0xFF;
 14681  0039DC  010F               	movlb	15	; () banked
 14682  0039DE  6950               	setf	80,b	;volatile
 14683                           
 14684                           ;tmr5.c: 76: TMR5L = 0xEC;
 14685  0039E0  0EEC               	movlw	236
 14686  0039E2  010F               	movlb	15	; () banked
 14687  0039E4  6F4F               	movwf	79,b	;volatile
 14688                           
 14689                           ; BSR set to: 15
 14690                           ;tmr5.c: 79: timer5ReloadVal=TMR5;
 14691  0039E6  CF4F F0FC          	movff	3919,_timer5ReloadVal	;volatile
 14692  0039EA  CF50 F0FD          	movff	3920,_timer5ReloadVal+1	;volatile
 14693                           
 14694                           ; BSR set to: 15
 14695                           ;tmr5.c: 82: PIR5bits.TMR5IF = 0;
 14696  0039EE  927E               	bcf	3966,1,c	;volatile
 14697                           
 14698                           ; BSR set to: 15
 14699                           ;tmr5.c: 85: TMR5_StartTimer();
 14700  0039F0  EC0C  F01E         	call	_TMR5_StartTimer	;wreg free
 14701  0039F4  0012               	return		;funcret
 14702  0039F6                     __end_of_TMR5_Initialize:
 14703                           	opt stack 0
 14704                           tblptru	equ	0xFF8
 14705                           tblptrh	equ	0xFF7
 14706                           tblptrl	equ	0xFF6
 14707                           tablat	equ	0xFF5
 14708                           prodh	equ	0xFF4
 14709                           prodl	equ	0xFF3
 14710                           intcon	equ	0xFF2
 14711                           indf0	equ	0xFEF
 14712                           postinc0	equ	0xFEE
 14713                           fsr0h	equ	0xFEA
 14714                           fsr0l	equ	0xFE9
 14715                           wreg	equ	0xFE8
 14716                           indf1	equ	0xFE7
 14717                           postdec1	equ	0xFE5
 14718                           fsr1h	equ	0xFE2
 14719                           fsr1l	equ	0xFE1
 14720                           indf2	equ	0xFDF
 14721                           postinc2	equ	0xFDE
 14722                           postdec2	equ	0xFDD
 14723                           fsr2h	equ	0xFDA
 14724                           fsr2l	equ	0xFD9
 14725                           status	equ	0xFD8
 14726                           
 14727 ;; *************** function _TMR5_StartTimer *****************
 14728 ;; Defined at:
 14729 ;;		line 88 in file "mcc_generated_files/tmr5.c"
 14730 ;; Parameters:    Size  Location     Type
 14731 ;;		None
 14732 ;; Auto vars:     Size  Location     Type
 14733 ;;		None
 14734 ;; Return value:  Size  Location     Type
 14735 ;;                  1    wreg      void 
 14736 ;; Registers used:
 14737 ;;		None
 14738 ;; Tracked objects:
 14739 ;;		On entry : 0/0
 14740 ;;		On exit  : 0/0
 14741 ;;		Unchanged: 0/0
 14742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14747 ;;Total ram usage:        0 bytes
 14748 ;; Hardware stack levels used:    1
 14749 ;; Hardware stack levels required when called:    5
 14750 ;; This function calls:
 14751 ;;		Nothing
 14752 ;; This function is called by:
 14753 ;;		_TMR5_Initialize
 14754 ;;		__delay_10uS
 14755 ;; This function uses a non-reentrant model
 14756 ;;
 14757                           
 14758                           	psect	text71
 14759  003C18                     __ptext71:
 14760                           	opt stack 0
 14761  003C18                     _TMR5_StartTimer:
 14762                           	opt stack 23
 14763                           
 14764                           ;tmr5.c: 91: T5CONbits.TMR5ON = 1;
 14765                           
 14766                           ;incstack = 0
 14767  003C18  010F               	movlb	15	; () banked
 14768  003C1A  814E               	bsf	78,0,b	;volatile
 14769                           
 14770                           ; BSR set to: 15
 14771  003C1C  0012               	return		;funcret
 14772  003C1E                     __end_of_TMR5_StartTimer:
 14773                           	opt stack 0
 14774                           tblptru	equ	0xFF8
 14775                           tblptrh	equ	0xFF7
 14776                           tblptrl	equ	0xFF6
 14777                           tablat	equ	0xFF5
 14778                           prodh	equ	0xFF4
 14779                           prodl	equ	0xFF3
 14780                           intcon	equ	0xFF2
 14781                           indf0	equ	0xFEF
 14782                           postinc0	equ	0xFEE
 14783                           fsr0h	equ	0xFEA
 14784                           fsr0l	equ	0xFE9
 14785                           wreg	equ	0xFE8
 14786                           indf1	equ	0xFE7
 14787                           postdec1	equ	0xFE5
 14788                           fsr1h	equ	0xFE2
 14789                           fsr1l	equ	0xFE1
 14790                           indf2	equ	0xFDF
 14791                           postinc2	equ	0xFDE
 14792                           postdec2	equ	0xFDD
 14793                           fsr2h	equ	0xFDA
 14794                           fsr2l	equ	0xFD9
 14795                           status	equ	0xFD8
 14796                           
 14797 ;; *************** function _TMR1_Initialize *****************
 14798 ;; Defined at:
 14799 ;;		line 62 in file "mcc_generated_files/tmr1.c"
 14800 ;; Parameters:    Size  Location     Type
 14801 ;;		None
 14802 ;; Auto vars:     Size  Location     Type
 14803 ;;		None
 14804 ;; Return value:  Size  Location     Type
 14805 ;;                  1    wreg      void 
 14806 ;; Registers used:
 14807 ;;		wreg, status,2, cstack
 14808 ;; Tracked objects:
 14809 ;;		On entry : 0/0
 14810 ;;		On exit  : 0/0
 14811 ;;		Unchanged: 0/0
 14812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14817 ;;Total ram usage:        0 bytes
 14818 ;; Hardware stack levels used:    1
 14819 ;; Hardware stack levels required when called:    6
 14820 ;; This function calls:
 14821 ;;		_TMR1_StartTimer
 14822 ;; This function is called by:
 14823 ;;		_SYSTEM_Initialize
 14824 ;; This function uses a non-reentrant model
 14825 ;;
 14826                           
 14827                           	psect	text72
 14828  003A3C                     __ptext72:
 14829                           	opt stack 0
 14830  003A3C                     _TMR1_Initialize:
 14831                           	opt stack 23
 14832                           
 14833                           ;tmr1.c: 67: T1CON = 0x32;
 14834                           
 14835                           ; BSR set to: 15
 14836                           ;incstack = 0
 14837  003A3C  0E32               	movlw	50
 14838  003A3E  6ECD               	movwf	4045,c	;volatile
 14839                           
 14840                           ;tmr1.c: 70: T1GCON = 0x00;
 14841  003A40  0E00               	movlw	0
 14842  003A42  6ECC               	movwf	4044,c	;volatile
 14843                           
 14844                           ;tmr1.c: 73: TMR1H = 0xFE;
 14845  003A44  0EFE               	movlw	254
 14846  003A46  6ECF               	movwf	4047,c	;volatile
 14847                           
 14848                           ;tmr1.c: 76: TMR1L = 0x0C;
 14849  003A48  0E0C               	movlw	12
 14850  003A4A  6ECE               	movwf	4046,c	;volatile
 14851                           
 14852                           ;tmr1.c: 79: timer1ReloadVal=TMR1;
 14853  003A4C  CFCE F0FA          	movff	4046,_timer1ReloadVal	;volatile
 14854  003A50  CFCF F0FB          	movff	4047,_timer1ReloadVal+1	;volatile
 14855                           
 14856                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
 14857  003A54  909E               	bcf	3998,0,c	;volatile
 14858                           
 14859                           ;tmr1.c: 85: TMR1_StartTimer();
 14860  003A56  EC13  F01E         	call	_TMR1_StartTimer	;wreg free
 14861  003A5A  0012               	return		;funcret
 14862  003A5C                     __end_of_TMR1_Initialize:
 14863                           	opt stack 0
 14864                           tblptru	equ	0xFF8
 14865                           tblptrh	equ	0xFF7
 14866                           tblptrl	equ	0xFF6
 14867                           tablat	equ	0xFF5
 14868                           prodh	equ	0xFF4
 14869                           prodl	equ	0xFF3
 14870                           intcon	equ	0xFF2
 14871                           indf0	equ	0xFEF
 14872                           postinc0	equ	0xFEE
 14873                           fsr0h	equ	0xFEA
 14874                           fsr0l	equ	0xFE9
 14875                           wreg	equ	0xFE8
 14876                           indf1	equ	0xFE7
 14877                           postdec1	equ	0xFE5
 14878                           fsr1h	equ	0xFE2
 14879                           fsr1l	equ	0xFE1
 14880                           indf2	equ	0xFDF
 14881                           postinc2	equ	0xFDE
 14882                           postdec2	equ	0xFDD
 14883                           fsr2h	equ	0xFDA
 14884                           fsr2l	equ	0xFD9
 14885                           status	equ	0xFD8
 14886                           
 14887 ;; *************** function _TMR1_StartTimer *****************
 14888 ;; Defined at:
 14889 ;;		line 88 in file "mcc_generated_files/tmr1.c"
 14890 ;; Parameters:    Size  Location     Type
 14891 ;;		None
 14892 ;; Auto vars:     Size  Location     Type
 14893 ;;		None
 14894 ;; Return value:  Size  Location     Type
 14895 ;;                  1    wreg      void 
 14896 ;; Registers used:
 14897 ;;		None
 14898 ;; Tracked objects:
 14899 ;;		On entry : 0/0
 14900 ;;		On exit  : 0/0
 14901 ;;		Unchanged: 0/0
 14902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14907 ;;Total ram usage:        0 bytes
 14908 ;; Hardware stack levels used:    1
 14909 ;; Hardware stack levels required when called:    5
 14910 ;; This function calls:
 14911 ;;		Nothing
 14912 ;; This function is called by:
 14913 ;;		_TMR1_Initialize
 14914 ;;		__delay_MS
 14915 ;; This function uses a non-reentrant model
 14916 ;;
 14917                           
 14918                           	psect	text73
 14919  003C26                     __ptext73:
 14920                           	opt stack 0
 14921  003C26                     _TMR1_StartTimer:
 14922                           	opt stack 20
 14923                           
 14924                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
 14925                           
 14926                           ;incstack = 0
 14927  003C26  80CD               	bsf	4045,0,c	;volatile
 14928  003C28  0012               	return		;funcret
 14929  003C2A                     __end_of_TMR1_StartTimer:
 14930                           	opt stack 0
 14931                           tblptru	equ	0xFF8
 14932                           tblptrh	equ	0xFF7
 14933                           tblptrl	equ	0xFF6
 14934                           tablat	equ	0xFF5
 14935                           prodh	equ	0xFF4
 14936                           prodl	equ	0xFF3
 14937                           intcon	equ	0xFF2
 14938                           indf0	equ	0xFEF
 14939                           postinc0	equ	0xFEE
 14940                           fsr0h	equ	0xFEA
 14941                           fsr0l	equ	0xFE9
 14942                           wreg	equ	0xFE8
 14943                           indf1	equ	0xFE7
 14944                           postdec1	equ	0xFE5
 14945                           fsr1h	equ	0xFE2
 14946                           fsr1l	equ	0xFE1
 14947                           indf2	equ	0xFDF
 14948                           postinc2	equ	0xFDE
 14949                           postdec2	equ	0xFDD
 14950                           fsr2h	equ	0xFDA
 14951                           fsr2l	equ	0xFD9
 14952                           status	equ	0xFD8
 14953                           
 14954 ;; *************** function _TMR0_Initialize *****************
 14955 ;; Defined at:
 14956 ;;		line 66 in file "mcc_generated_files/tmr0.c"
 14957 ;; Parameters:    Size  Location     Type
 14958 ;;		None
 14959 ;; Auto vars:     Size  Location     Type
 14960 ;;		None
 14961 ;; Return value:  Size  Location     Type
 14962 ;;                  1    wreg      void 
 14963 ;; Registers used:
 14964 ;;		wreg, status,2, status,0, cstack
 14965 ;; Tracked objects:
 14966 ;;		On entry : 0/0
 14967 ;;		On exit  : 0/0
 14968 ;;		Unchanged: 0/0
 14969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14972 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14973 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14974 ;;Total ram usage:        2 bytes
 14975 ;; Hardware stack levels used:    1
 14976 ;; Hardware stack levels required when called:    6
 14977 ;; This function calls:
 14978 ;;		_TMR0_SetInterruptHandler
 14979 ;;		_TMR0_StartTimer
 14980 ;; This function is called by:
 14981 ;;		_SYSTEM_Initialize
 14982 ;; This function uses a non-reentrant model
 14983 ;;
 14984                           
 14985                           	psect	text74
 14986  00384A                     __ptext74:
 14987                           	opt stack 0
 14988  00384A                     _TMR0_Initialize:
 14989                           	opt stack 23
 14990                           
 14991                           ;tmr0.c: 71: T0CON = 0x17;
 14992                           
 14993                           ;incstack = 0
 14994  00384A  0E17               	movlw	23
 14995  00384C  6ED5               	movwf	4053,c	;volatile
 14996                           
 14997                           ;tmr0.c: 74: TMR0H = 0xC2;
 14998  00384E  0EC2               	movlw	194
 14999  003850  6ED7               	movwf	4055,c	;volatile
 15000                           
 15001                           ;tmr0.c: 77: TMR0L = 0xF6;
 15002  003852  0EF6               	movlw	246
 15003  003854  6ED6               	movwf	4054,c	;volatile
 15004                           
 15005                           ;tmr0.c: 80: timer0ReloadVal = (TMR0H << 8) | TMR0L;
 15006  003856  50D6               	movf	4054,w,c	;volatile
 15007  003858  CFD7 F012          	movff	4055,??_TMR0_Initialize	;volatile
 15008  00385C  6A13               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 15009  00385E  C012  F013         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 15010  003862  6A12               	clrf	??_TMR0_Initialize,c
 15011  003864  1012               	iorwf	??_TMR0_Initialize,w,c
 15012  003866  6E4E               	movwf	_timer0ReloadVal,c	;volatile
 15013  003868  5013               	movf	??_TMR0_Initialize+1,w,c
 15014  00386A  6E4F               	movwf	_timer0ReloadVal+1,c	;volatile
 15015                           
 15016                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
 15017  00386C  94F2               	bcf	intcon,2,c	;volatile
 15018                           
 15019                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
 15020  00386E  8AF2               	bsf	intcon,5,c	;volatile
 15021                           
 15022                           ;tmr0.c: 89: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 15023  003870  0E32               	movlw	low _TMR0_DefaultInterruptHandler
 15024  003872  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
 15025  003874  0E3C               	movlw	high _TMR0_DefaultInterruptHandler
 15026  003876  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
 15027  003878  ECFD  F01D         	call	_TMR0_SetInterruptHandler	;wreg free
 15028                           
 15029                           ;tmr0.c: 92: TMR0_StartTimer();
 15030  00387C  EC15  F01E         	call	_TMR0_StartTimer	;wreg free
 15031  003880  0012               	return		;funcret
 15032  003882                     __end_of_TMR0_Initialize:
 15033                           	opt stack 0
 15034                           tblptru	equ	0xFF8
 15035                           tblptrh	equ	0xFF7
 15036                           tblptrl	equ	0xFF6
 15037                           tablat	equ	0xFF5
 15038                           prodh	equ	0xFF4
 15039                           prodl	equ	0xFF3
 15040                           intcon	equ	0xFF2
 15041                           indf0	equ	0xFEF
 15042                           postinc0	equ	0xFEE
 15043                           fsr0h	equ	0xFEA
 15044                           fsr0l	equ	0xFE9
 15045                           wreg	equ	0xFE8
 15046                           indf1	equ	0xFE7
 15047                           postdec1	equ	0xFE5
 15048                           fsr1h	equ	0xFE2
 15049                           fsr1l	equ	0xFE1
 15050                           indf2	equ	0xFDF
 15051                           postinc2	equ	0xFDE
 15052                           postdec2	equ	0xFDD
 15053                           fsr2h	equ	0xFDA
 15054                           fsr2l	equ	0xFD9
 15055                           status	equ	0xFD8
 15056                           
 15057 ;; *************** function _TMR0_StartTimer *****************
 15058 ;; Defined at:
 15059 ;;		line 95 in file "mcc_generated_files/tmr0.c"
 15060 ;; Parameters:    Size  Location     Type
 15061 ;;		None
 15062 ;; Auto vars:     Size  Location     Type
 15063 ;;		None
 15064 ;; Return value:  Size  Location     Type
 15065 ;;                  1    wreg      void 
 15066 ;; Registers used:
 15067 ;;		None
 15068 ;; Tracked objects:
 15069 ;;		On entry : 0/0
 15070 ;;		On exit  : 0/0
 15071 ;;		Unchanged: 0/0
 15072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15077 ;;Total ram usage:        0 bytes
 15078 ;; Hardware stack levels used:    1
 15079 ;; Hardware stack levels required when called:    5
 15080 ;; This function calls:
 15081 ;;		Nothing
 15082 ;; This function is called by:
 15083 ;;		_TMR0_Initialize
 15084 ;;		_main
 15085 ;; This function uses a non-reentrant model
 15086 ;;
 15087                           
 15088                           	psect	text75
 15089  003C2A                     __ptext75:
 15090                           	opt stack 0
 15091  003C2A                     _TMR0_StartTimer:
 15092                           	opt stack 25
 15093                           
 15094                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
 15095                           
 15096                           ;incstack = 0
 15097  003C2A  8ED5               	bsf	4053,7,c	;volatile
 15098  003C2C  0012               	return		;funcret
 15099  003C2E                     __end_of_TMR0_StartTimer:
 15100                           	opt stack 0
 15101                           tblptru	equ	0xFF8
 15102                           tblptrh	equ	0xFF7
 15103                           tblptrl	equ	0xFF6
 15104                           tablat	equ	0xFF5
 15105                           prodh	equ	0xFF4
 15106                           prodl	equ	0xFF3
 15107                           intcon	equ	0xFF2
 15108                           indf0	equ	0xFEF
 15109                           postinc0	equ	0xFEE
 15110                           fsr0h	equ	0xFEA
 15111                           fsr0l	equ	0xFE9
 15112                           wreg	equ	0xFE8
 15113                           indf1	equ	0xFE7
 15114                           postdec1	equ	0xFE5
 15115                           fsr1h	equ	0xFE2
 15116                           fsr1l	equ	0xFE1
 15117                           indf2	equ	0xFDF
 15118                           postinc2	equ	0xFDE
 15119                           postdec2	equ	0xFDD
 15120                           fsr2h	equ	0xFDA
 15121                           fsr2l	equ	0xFD9
 15122                           status	equ	0xFD8
 15123                           
 15124 ;; *************** function _TMR0_SetInterruptHandler *****************
 15125 ;; Defined at:
 15126 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 15127 ;; Parameters:    Size  Location     Type
 15128 ;;  InterruptHan    2   15[COMRAM] PTR void 
 15129 ;;		 -> make_array(1), TMR0_DefaultInterruptHandler(1), 
 15130 ;; Auto vars:     Size  Location     Type
 15131 ;;		None
 15132 ;; Return value:  Size  Location     Type
 15133 ;;                  1    wreg      void 
 15134 ;; Registers used:
 15135 ;;		wreg, status,2, status,0
 15136 ;; Tracked objects:
 15137 ;;		On entry : 0/0
 15138 ;;		On exit  : 0/0
 15139 ;;		Unchanged: 0/0
 15140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15141 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15144 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15145 ;;Total ram usage:        2 bytes
 15146 ;; Hardware stack levels used:    1
 15147 ;; Hardware stack levels required when called:    5
 15148 ;; This function calls:
 15149 ;;		Nothing
 15150 ;; This function is called by:
 15151 ;;		_TMR0_Initialize
 15152 ;;		_main
 15153 ;; This function uses a non-reentrant model
 15154 ;;
 15155                           
 15156                           	psect	text76
 15157  003BFA                     __ptext76:
 15158                           	opt stack 0
 15159  003BFA                     _TMR0_SetInterruptHandler:
 15160                           	opt stack 25
 15161                           
 15162                           ;tmr0.c: 163: TMR0_InterruptHandler = InterruptHandler;
 15163                           
 15164                           ;incstack = 0
 15165  003BFA  C010  F0F8         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
 15166  003BFE  C011  F0F9         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
 15167  003C02  0012               	return		;funcret
 15168  003C04                     __end_of_TMR0_SetInterruptHandler:
 15169                           	opt stack 0
 15170                           tblptru	equ	0xFF8
 15171                           tblptrh	equ	0xFF7
 15172                           tblptrl	equ	0xFF6
 15173                           tablat	equ	0xFF5
 15174                           prodh	equ	0xFF4
 15175                           prodl	equ	0xFF3
 15176                           intcon	equ	0xFF2
 15177                           indf0	equ	0xFEF
 15178                           postinc0	equ	0xFEE
 15179                           fsr0h	equ	0xFEA
 15180                           fsr0l	equ	0xFE9
 15181                           wreg	equ	0xFE8
 15182                           indf1	equ	0xFE7
 15183                           postdec1	equ	0xFE5
 15184                           fsr1h	equ	0xFE2
 15185                           fsr1l	equ	0xFE1
 15186                           indf2	equ	0xFDF
 15187                           postinc2	equ	0xFDE
 15188                           postdec2	equ	0xFDD
 15189                           fsr2h	equ	0xFDA
 15190                           fsr2l	equ	0xFD9
 15191                           status	equ	0xFD8
 15192                           
 15193 ;; *************** function _PIN_MANAGER_Initialize *****************
 15194 ;; Defined at:
 15195 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 15196 ;; Parameters:    Size  Location     Type
 15197 ;;		None
 15198 ;; Auto vars:     Size  Location     Type
 15199 ;;		None
 15200 ;; Return value:  Size  Location     Type
 15201 ;;                  1    wreg      void 
 15202 ;; Registers used:
 15203 ;;		wreg, status,2
 15204 ;; Tracked objects:
 15205 ;;		On entry : 0/0
 15206 ;;		On exit  : 0/0
 15207 ;;		Unchanged: 0/0
 15208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15213 ;;Total ram usage:        0 bytes
 15214 ;; Hardware stack levels used:    1
 15215 ;; Hardware stack levels required when called:    5
 15216 ;; This function calls:
 15217 ;;		Nothing
 15218 ;; This function is called by:
 15219 ;;		_SYSTEM_Initialize
 15220 ;; This function uses a non-reentrant model
 15221 ;;
 15222                           
 15223                           	psect	text77
 15224  003636                     __ptext77:
 15225                           	opt stack 0
 15226  003636                     _PIN_MANAGER_Initialize:
 15227                           	opt stack 24
 15228                           
 15229                           ;pin_manager.c: 56: LATE = 0x00;
 15230                           
 15231                           ;incstack = 0
 15232  003636  0E00               	movlw	0
 15233  003638  6E8D               	movwf	3981,c	;volatile
 15234                           
 15235                           ;pin_manager.c: 57: LATD = 0x00;
 15236  00363A  0E00               	movlw	0
 15237  00363C  6E8C               	movwf	3980,c	;volatile
 15238                           
 15239                           ;pin_manager.c: 58: LATA = 0x00;
 15240  00363E  0E00               	movlw	0
 15241  003640  6E89               	movwf	3977,c	;volatile
 15242                           
 15243                           ;pin_manager.c: 59: LATB = 0x00;
 15244  003642  0E00               	movlw	0
 15245  003644  6E8A               	movwf	3978,c	;volatile
 15246                           
 15247                           ;pin_manager.c: 60: LATC = 0x00;
 15248  003646  0E00               	movlw	0
 15249  003648  6E8B               	movwf	3979,c	;volatile
 15250                           
 15251                           ;pin_manager.c: 65: TRISE = 0x03;
 15252  00364A  0E03               	movlw	3
 15253  00364C  6E96               	movwf	3990,c	;volatile
 15254                           
 15255                           ;pin_manager.c: 66: TRISA = 0xF8;
 15256  00364E  0EF8               	movlw	248
 15257  003650  6E92               	movwf	3986,c	;volatile
 15258                           
 15259                           ;pin_manager.c: 67: TRISB = 0xFF;
 15260  003652  6893               	setf	3987,c	;volatile
 15261                           
 15262                           ;pin_manager.c: 68: TRISC = 0xBF;
 15263  003654  0EBF               	movlw	191
 15264  003656  6E94               	movwf	3988,c	;volatile
 15265                           
 15266                           ;pin_manager.c: 69: TRISD = 0x00;
 15267  003658  0E00               	movlw	0
 15268  00365A  6E95               	movwf	3989,c	;volatile
 15269                           
 15270                           ;pin_manager.c: 74: ANSELC = 0x3C;
 15271  00365C  0E3C               	movlw	60
 15272  00365E  010F               	movlb	15	; () banked
 15273  003660  6F3A               	movwf	58,b	;volatile
 15274                           
 15275                           ;pin_manager.c: 75: ANSELB = 0x3F;
 15276  003662  0E3F               	movlw	63
 15277  003664  010F               	movlb	15	; () banked
 15278  003666  6F39               	movwf	57,b	;volatile
 15279                           
 15280                           ;pin_manager.c: 76: ANSELD = 0x00;
 15281  003668  0E00               	movlw	0
 15282  00366A  010F               	movlb	15	; () banked
 15283  00366C  6F3B               	movwf	59,b	;volatile
 15284                           
 15285                           ;pin_manager.c: 77: ANSELE = 0x03;
 15286  00366E  0E03               	movlw	3
 15287  003670  010F               	movlb	15	; () banked
 15288  003672  6F3C               	movwf	60,b	;volatile
 15289                           
 15290                           ;pin_manager.c: 78: ANSELA = 0x28;
 15291  003674  0E28               	movlw	40
 15292  003676  010F               	movlb	15	; () banked
 15293  003678  6F38               	movwf	56,b	;volatile
 15294                           
 15295                           ; BSR set to: 15
 15296                           ;pin_manager.c: 83: WPUB = 0xFF;
 15297  00367A  6861               	setf	3937,c	;volatile
 15298                           
 15299                           ; BSR set to: 15
 15300                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
 15301  00367C  9EF1               	bcf	intcon2,7,c	;volatile
 15302                           
 15303                           ; BSR set to: 15
 15304  00367E  0012               	return		;funcret
 15305  003680                     __end_of_PIN_MANAGER_Initialize:
 15306                           	opt stack 0
 15307                           tblptru	equ	0xFF8
 15308                           tblptrh	equ	0xFF7
 15309                           tblptrl	equ	0xFF6
 15310                           tablat	equ	0xFF5
 15311                           prodh	equ	0xFF4
 15312                           prodl	equ	0xFF3
 15313                           intcon	equ	0xFF2
 15314                           intcon2	equ	0xFF1
 15315                           indf0	equ	0xFEF
 15316                           postinc0	equ	0xFEE
 15317                           fsr0h	equ	0xFEA
 15318                           fsr0l	equ	0xFE9
 15319                           wreg	equ	0xFE8
 15320                           indf1	equ	0xFE7
 15321                           postdec1	equ	0xFE5
 15322                           fsr1h	equ	0xFE2
 15323                           fsr1l	equ	0xFE1
 15324                           indf2	equ	0xFDF
 15325                           postinc2	equ	0xFDE
 15326                           postdec2	equ	0xFDD
 15327                           fsr2h	equ	0xFDA
 15328                           fsr2l	equ	0xFD9
 15329                           status	equ	0xFD8
 15330                           
 15331 ;; *************** function _OSCILLATOR_Initialize *****************
 15332 ;; Defined at:
 15333 ;;		line 123 in file "mcc_generated_files/mcc.c"
 15334 ;; Parameters:    Size  Location     Type
 15335 ;;		None
 15336 ;; Auto vars:     Size  Location     Type
 15337 ;;		None
 15338 ;; Return value:  Size  Location     Type
 15339 ;;                  1    wreg      void 
 15340 ;; Registers used:
 15341 ;;		wreg, status,2
 15342 ;; Tracked objects:
 15343 ;;		On entry : 0/0
 15344 ;;		On exit  : 0/0
 15345 ;;		Unchanged: 0/0
 15346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15351 ;;Total ram usage:        0 bytes
 15352 ;; Hardware stack levels used:    1
 15353 ;; Hardware stack levels required when called:    5
 15354 ;; This function calls:
 15355 ;;		Nothing
 15356 ;; This function is called by:
 15357 ;;		_SYSTEM_Initialize
 15358 ;; This function uses a non-reentrant model
 15359 ;;
 15360                           
 15361                           	psect	text78
 15362  003B9C                     __ptext78:
 15363                           	opt stack 0
 15364  003B9C                     _OSCILLATOR_Initialize:
 15365                           	opt stack 24
 15366                           
 15367                           ;mcc.c: 126: OSCCON = 0x70;
 15368                           
 15369                           ; BSR set to: 15
 15370                           ;incstack = 0
 15371  003B9C  0E70               	movlw	112
 15372  003B9E  6ED3               	movwf	4051,c	;volatile
 15373                           
 15374                           ;mcc.c: 128: OSCCON2 = 0x04;
 15375  003BA0  0E04               	movlw	4
 15376  003BA2  6ED2               	movwf	4050,c	;volatile
 15377                           
 15378                           ;mcc.c: 130: OSCTUNE = 0x80;
 15379  003BA4  0E80               	movlw	128
 15380  003BA6  6E9B               	movwf	3995,c	;volatile
 15381  003BA8  0012               	return		;funcret
 15382  003BAA                     __end_of_OSCILLATOR_Initialize:
 15383                           	opt stack 0
 15384                           tblptru	equ	0xFF8
 15385                           tblptrh	equ	0xFF7
 15386                           tblptrl	equ	0xFF6
 15387                           tablat	equ	0xFF5
 15388                           prodh	equ	0xFF4
 15389                           prodl	equ	0xFF3
 15390                           intcon	equ	0xFF2
 15391                           intcon2	equ	0xFF1
 15392                           indf0	equ	0xFEF
 15393                           postinc0	equ	0xFEE
 15394                           fsr0h	equ	0xFEA
 15395                           fsr0l	equ	0xFE9
 15396                           wreg	equ	0xFE8
 15397                           indf1	equ	0xFE7
 15398                           postdec1	equ	0xFE5
 15399                           fsr1h	equ	0xFE2
 15400                           fsr1l	equ	0xFE1
 15401                           indf2	equ	0xFDF
 15402                           postinc2	equ	0xFDE
 15403                           postdec2	equ	0xFDD
 15404                           fsr2h	equ	0xFDA
 15405                           fsr2l	equ	0xFD9
 15406                           status	equ	0xFD8
 15407                           
 15408 ;; *************** function _INTERRUPT_Initialize *****************
 15409 ;; Defined at:
 15410 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 15411 ;; Parameters:    Size  Location     Type
 15412 ;;		None
 15413 ;; Auto vars:     Size  Location     Type
 15414 ;;		None
 15415 ;; Return value:  Size  Location     Type
 15416 ;;                  1    wreg      void 
 15417 ;; Registers used:
 15418 ;;		None
 15419 ;; Tracked objects:
 15420 ;;		On entry : 0/0
 15421 ;;		On exit  : 0/0
 15422 ;;		Unchanged: 0/0
 15423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15428 ;;Total ram usage:        0 bytes
 15429 ;; Hardware stack levels used:    1
 15430 ;; Hardware stack levels required when called:    5
 15431 ;; This function calls:
 15432 ;;		Nothing
 15433 ;; This function is called by:
 15434 ;;		_SYSTEM_Initialize
 15435 ;; This function uses a non-reentrant model
 15436 ;;
 15437                           
 15438                           	psect	text79
 15439  003C2E                     __ptext79:
 15440                           	opt stack 0
 15441  003C2E                     _INTERRUPT_Initialize:
 15442                           	opt stack 24
 15443                           
 15444                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
 15445                           
 15446                           ;incstack = 0
 15447  003C2E  9ED0               	bcf	4048,7,c	;volatile
 15448  003C30  0012               	return		;funcret
 15449  003C32                     __end_of_INTERRUPT_Initialize:
 15450                           	opt stack 0
 15451                           tblptru	equ	0xFF8
 15452                           tblptrh	equ	0xFF7
 15453                           tblptrl	equ	0xFF6
 15454                           tablat	equ	0xFF5
 15455                           prodh	equ	0xFF4
 15456                           prodl	equ	0xFF3
 15457                           intcon	equ	0xFF2
 15458                           intcon2	equ	0xFF1
 15459                           indf0	equ	0xFEF
 15460                           postinc0	equ	0xFEE
 15461                           fsr0h	equ	0xFEA
 15462                           fsr0l	equ	0xFE9
 15463                           wreg	equ	0xFE8
 15464                           indf1	equ	0xFE7
 15465                           postdec1	equ	0xFE5
 15466                           fsr1h	equ	0xFE2
 15467                           fsr1l	equ	0xFE1
 15468                           indf2	equ	0xFDF
 15469                           postinc2	equ	0xFDE
 15470                           postdec2	equ	0xFDD
 15471                           fsr2h	equ	0xFDA
 15472                           fsr2l	equ	0xFD9
 15473                           status	equ	0xFD8
 15474                           
 15475 ;; *************** function _EUSART1_Initialize *****************
 15476 ;; Defined at:
 15477 ;;		line 75 in file "mcc_generated_files/eusart1.c"
 15478 ;; Parameters:    Size  Location     Type
 15479 ;;		None
 15480 ;; Auto vars:     Size  Location     Type
 15481 ;;		None
 15482 ;; Return value:  Size  Location     Type
 15483 ;;                  1    wreg      void 
 15484 ;; Registers used:
 15485 ;;		wreg, status,2
 15486 ;; Tracked objects:
 15487 ;;		On entry : 0/0
 15488 ;;		On exit  : 0/0
 15489 ;;		Unchanged: 0/0
 15490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15495 ;;Total ram usage:        0 bytes
 15496 ;; Hardware stack levels used:    1
 15497 ;; Hardware stack levels required when called:    5
 15498 ;; This function calls:
 15499 ;;		Nothing
 15500 ;; This function is called by:
 15501 ;;		_SYSTEM_Initialize
 15502 ;; This function uses a non-reentrant model
 15503 ;;
 15504                           
 15505                           	psect	text80
 15506  003882                     __ptext80:
 15507                           	opt stack 0
 15508  003882                     _EUSART1_Initialize:
 15509                           	opt stack 24
 15510                           
 15511                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
 15512                           
 15513                           ;incstack = 0
 15514  003882  9A9D               	bcf	3997,5,c	;volatile
 15515                           
 15516                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
 15517  003884  989D               	bcf	3997,4,c	;volatile
 15518                           
 15519                           ;eusart1.c: 84: BAUDCON1 = 0x08;
 15520  003886  0E08               	movlw	8
 15521  003888  6EB8               	movwf	4024,c	;volatile
 15522                           
 15523                           ;eusart1.c: 87: RCSTA1 = 0x90;
 15524  00388A  0E90               	movlw	144
 15525  00388C  6EAB               	movwf	4011,c	;volatile
 15526                           
 15527                           ;eusart1.c: 90: TXSTA1 = 0x24;
 15528  00388E  0E24               	movlw	36
 15529  003890  6EAC               	movwf	4012,c	;volatile
 15530                           
 15531                           ;eusart1.c: 93: SPBRG1 = 0xA0;
 15532  003892  0EA0               	movlw	160
 15533  003894  6EAF               	movwf	4015,c	;volatile
 15534                           
 15535                           ;eusart1.c: 96: SPBRGH1 = 0x01;
 15536  003896  0E01               	movlw	1
 15537  003898  6EB0               	movwf	4016,c	;volatile
 15538                           
 15539                           ;eusart1.c: 100: eusart1TxHead = 0;
 15540  00389A  0E00               	movlw	0
 15541  00389C  6E47               	movwf	_eusart1TxHead,c	;volatile
 15542                           
 15543                           ;eusart1.c: 101: eusart1TxTail = 0;
 15544  00389E  0E00               	movlw	0
 15545  0038A0  6E48               	movwf	_eusart1TxTail,c	;volatile
 15546                           
 15547                           ;eusart1.c: 102: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 15548  0038A2  0E08               	movlw	8
 15549  0038A4  0100               	movlb	0	; () banked
 15550  0038A6  6FFE               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15551                           
 15552                           ;eusart1.c: 104: eusart1RxHead = 0;
 15553  0038A8  0E00               	movlw	0
 15554  0038AA  6E45               	movwf	_eusart1RxHead,c	;volatile
 15555                           
 15556                           ;eusart1.c: 105: eusart1RxTail = 0;
 15557  0038AC  0E00               	movlw	0
 15558  0038AE  6E46               	movwf	_eusart1RxTail,c	;volatile
 15559                           
 15560                           ;eusart1.c: 106: eusart1RxCount = 0;
 15561  0038B0  0E00               	movlw	0
 15562  0038B2  6E44               	movwf	_eusart1RxCount,c	;volatile
 15563                           
 15564                           ; BSR set to: 0
 15565                           ;eusart1.c: 109: PIE1bits.RC1IE = 1;
 15566  0038B4  8A9D               	bsf	3997,5,c	;volatile
 15567                           
 15568                           ; BSR set to: 0
 15569  0038B6  0012               	return		;funcret
 15570  0038B8                     __end_of_EUSART1_Initialize:
 15571                           	opt stack 0
 15572                           tblptru	equ	0xFF8
 15573                           tblptrh	equ	0xFF7
 15574                           tblptrl	equ	0xFF6
 15575                           tablat	equ	0xFF5
 15576                           prodh	equ	0xFF4
 15577                           prodl	equ	0xFF3
 15578                           intcon	equ	0xFF2
 15579                           intcon2	equ	0xFF1
 15580                           indf0	equ	0xFEF
 15581                           postinc0	equ	0xFEE
 15582                           fsr0h	equ	0xFEA
 15583                           fsr0l	equ	0xFE9
 15584                           wreg	equ	0xFE8
 15585                           indf1	equ	0xFE7
 15586                           postdec1	equ	0xFE5
 15587                           fsr1h	equ	0xFE2
 15588                           fsr1l	equ	0xFE1
 15589                           indf2	equ	0xFDF
 15590                           postinc2	equ	0xFDE
 15591                           postdec2	equ	0xFDD
 15592                           fsr2h	equ	0xFDA
 15593                           fsr2l	equ	0xFD9
 15594                           status	equ	0xFD8
 15595                           
 15596 ;; *************** function _INTERRUPT_InterruptManager *****************
 15597 ;; Defined at:
 15598 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 15599 ;; Parameters:    Size  Location     Type
 15600 ;;		None
 15601 ;; Auto vars:     Size  Location     Type
 15602 ;;		None
 15603 ;; Return value:  Size  Location     Type
 15604 ;;                  1    wreg      void 
 15605 ;; Registers used:
 15606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 15607 ;; Tracked objects:
 15608 ;;		On entry : 0/0
 15609 ;;		On exit  : 0/0
 15610 ;;		Unchanged: 0/0
 15611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15614 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15615 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15616 ;;Total ram usage:       14 bytes
 15617 ;; Hardware stack levels used:    1
 15618 ;; Hardware stack levels required when called:    4
 15619 ;; This function calls:
 15620 ;;		_EUSART1_Receive_ISR
 15621 ;;		_EUSART1_Transmit_ISR
 15622 ;;		_TMR0_ISR
 15623 ;; This function is called by:
 15624 ;;		Interrupt level 2
 15625 ;; This function uses a non-reentrant model
 15626 ;;
 15627                           
 15628                           	psect	intcode
 15629  000008                     __pintcode:
 15630                           	opt stack 0
 15631  000008                     _INTERRUPT_InterruptManager:
 15632                           	opt stack 17
 15633                           
 15634                           ; BSR set to: 0
 15635                           ;incstack = 0
 15636  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15637  00000A  CFFA F002          	movff	pclath,??_INTERRUPT_InterruptManager
 15638  00000E  CFFB F003          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 15639  000012  CFE9 F004          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 15640  000016  CFEA F005          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 15641  00001A  CFE1 F006          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 15642  00001E  CFE2 F007          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 15643  000022  CFD9 F008          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 15644  000026  CFDA F009          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 15645  00002A  CFF3 F00A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 15646  00002E  CFF4 F00B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 15647  000032  CFF6 F00C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 15648  000036  CFF7 F00D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 15649  00003A  CFF8 F00E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 15650  00003E  CFF5 F00F          	movff	tablat,??_INTERRUPT_InterruptManager+13
 15651                           
 15652                           ;interrupt_manager.c: 60: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 15653  000042  BAF2               	btfsc	intcon,5,c	;volatile
 15654  000044  A4F2               	btfss	intcon,2,c	;volatile
 15655  000046  D003               	goto	i2l60
 15656                           
 15657                           ;interrupt_manager.c: 61: {
 15658                           ;interrupt_manager.c: 62: TMR0_ISR();
 15659  000048  ECA3  F01D         	call	_TMR0_ISR	;wreg free
 15660                           
 15661                           ;interrupt_manager.c: 63: }
 15662  00004C  D00E               	goto	i2l66
 15663  00004E                     i2l60:
 15664                           
 15665                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 15666  00004E  BCF2               	btfsc	intcon,6,c	;volatile
 15667  000050  A89D               	btfss	3997,4,c	;volatile
 15668  000052  D005               	goto	i2l62
 15669  000054  A89E               	btfss	3998,4,c	;volatile
 15670  000056  D003               	goto	i2l62
 15671                           
 15672                           ;interrupt_manager.c: 65: {
 15673                           ;interrupt_manager.c: 66: EUSART1_Transmit_ISR();
 15674  000058  EC8F  F01C         	call	_EUSART1_Transmit_ISR	;wreg free
 15675                           
 15676                           ;interrupt_manager.c: 67: }
 15677  00005C  D006               	goto	i2l66
 15678  00005E                     i2l62:
 15679                           
 15680                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 15681  00005E  BCF2               	btfsc	intcon,6,c	;volatile
 15682  000060  AA9D               	btfss	3997,5,c	;volatile
 15683  000062  D003               	goto	i2l66
 15684  000064  BA9E               	btfsc	3998,5,c	;volatile
 15685                           
 15686                           ;interrupt_manager.c: 69: {
 15687                           ;interrupt_manager.c: 70: EUSART1_Receive_ISR();
 15688  000066  ECBF  F01C         	call	_EUSART1_Receive_ISR	;wreg free
 15689  00006A                     i2l66:
 15690  00006A  C00F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 15691  00006E  C00E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 15692  000072  C00D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 15693  000076  C00C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 15694  00007A  C00B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 15695  00007E  C00A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 15696  000082  C009  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 15697  000086  C008  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 15698  00008A  C007  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 15699  00008E  C006  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 15700  000092  C005  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 15701  000096  C004  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 15702  00009A  C003  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 15703  00009E  C002  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 15704  0000A2  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15705  0000A4  0011               	retfie		f
 15706  0000A6                     __end_of_INTERRUPT_InterruptManager:
 15707                           	opt stack 0
 15708                           pclatu	equ	0xFFB
 15709                           pclath	equ	0xFFA
 15710                           tblptru	equ	0xFF8
 15711                           tblptrh	equ	0xFF7
 15712                           tblptrl	equ	0xFF6
 15713                           tablat	equ	0xFF5
 15714                           prodh	equ	0xFF4
 15715                           prodl	equ	0xFF3
 15716                           intcon	equ	0xFF2
 15717                           intcon2	equ	0xFF1
 15718                           indf0	equ	0xFEF
 15719                           postinc0	equ	0xFEE
 15720                           fsr0h	equ	0xFEA
 15721                           fsr0l	equ	0xFE9
 15722                           wreg	equ	0xFE8
 15723                           indf1	equ	0xFE7
 15724                           postdec1	equ	0xFE5
 15725                           fsr1h	equ	0xFE2
 15726                           fsr1l	equ	0xFE1
 15727                           indf2	equ	0xFDF
 15728                           postinc2	equ	0xFDE
 15729                           postdec2	equ	0xFDD
 15730                           fsr2h	equ	0xFDA
 15731                           fsr2l	equ	0xFD9
 15732                           status	equ	0xFD8
 15733                           
 15734 ;; *************** function _TMR0_ISR *****************
 15735 ;; Defined at:
 15736 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 15737 ;; Parameters:    Size  Location     Type
 15738 ;;		None
 15739 ;; Auto vars:     Size  Location     Type
 15740 ;;		None
 15741 ;; Return value:  Size  Location     Type
 15742 ;;                  1    wreg      void 
 15743 ;; Registers used:
 15744 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 15745 ;; Tracked objects:
 15746 ;;		On entry : 0/0
 15747 ;;		On exit  : 0/0
 15748 ;;		Unchanged: 0/0
 15749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15754 ;;Total ram usage:        0 bytes
 15755 ;; Hardware stack levels used:    1
 15756 ;; Hardware stack levels required when called:    3
 15757 ;; This function calls:
 15758 ;;		_TMR0_CallBack
 15759 ;; This function is called by:
 15760 ;;		_INTERRUPT_InterruptManager
 15761 ;; This function uses a non-reentrant model
 15762 ;;
 15763                           
 15764                           	psect	text82
 15765  003B46                     __ptext82:
 15766                           	opt stack 0
 15767  003B46                     _TMR0_ISR:
 15768                           	opt stack 17
 15769                           
 15770                           ;tmr0.c: 138: INTCONbits.TMR0IF = 0;
 15771                           
 15772                           ;incstack = 0
 15773  003B46  94F2               	bcf	intcon,2,c	;volatile
 15774                           
 15775                           ;tmr0.c: 142: TMR0H = timer0ReloadVal >> 8;
 15776  003B48  504F               	movf	_timer0ReloadVal+1,w,c	;volatile
 15777  003B4A  6ED7               	movwf	4055,c	;volatile
 15778                           
 15779                           ;tmr0.c: 143: TMR0L = (uint8_t) timer0ReloadVal;
 15780  003B4C  C04E  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 15781                           
 15782                           ;tmr0.c: 147: TMR0_CallBack();
 15783  003B50  ECFB  F01C         	call	_TMR0_CallBack	;wreg free
 15784  003B54  0012               	return		;funcret
 15785  003B56                     __end_of_TMR0_ISR:
 15786                           	opt stack 0
 15787                           pclatu	equ	0xFFB
 15788                           pclath	equ	0xFFA
 15789                           tblptru	equ	0xFF8
 15790                           tblptrh	equ	0xFF7
 15791                           tblptrl	equ	0xFF6
 15792                           tablat	equ	0xFF5
 15793                           prodh	equ	0xFF4
 15794                           prodl	equ	0xFF3
 15795                           intcon	equ	0xFF2
 15796                           intcon2	equ	0xFF1
 15797                           indf0	equ	0xFEF
 15798                           postinc0	equ	0xFEE
 15799                           fsr0h	equ	0xFEA
 15800                           fsr0l	equ	0xFE9
 15801                           wreg	equ	0xFE8
 15802                           indf1	equ	0xFE7
 15803                           postdec1	equ	0xFE5
 15804                           fsr1h	equ	0xFE2
 15805                           fsr1l	equ	0xFE1
 15806                           indf2	equ	0xFDF
 15807                           postinc2	equ	0xFDE
 15808                           postdec2	equ	0xFDD
 15809                           fsr2h	equ	0xFDA
 15810                           fsr2l	equ	0xFD9
 15811                           status	equ	0xFD8
 15812                           
 15813 ;; *************** function _TMR0_CallBack *****************
 15814 ;; Defined at:
 15815 ;;		line 152 in file "mcc_generated_files/tmr0.c"
 15816 ;; Parameters:    Size  Location     Type
 15817 ;;		None
 15818 ;; Auto vars:     Size  Location     Type
 15819 ;;		None
 15820 ;; Return value:  Size  Location     Type
 15821 ;;                  1    wreg      void 
 15822 ;; Registers used:
 15823 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 15824 ;; Tracked objects:
 15825 ;;		On entry : 0/0
 15826 ;;		On exit  : 0/0
 15827 ;;		Unchanged: 0/0
 15828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15833 ;;Total ram usage:        0 bytes
 15834 ;; Hardware stack levels used:    1
 15835 ;; Hardware stack levels required when called:    2
 15836 ;; This function calls:
 15837 ;;		Absolute function
 15838 ;;		_TMR0_DefaultInterruptHandler
 15839 ;;		_make_array
 15840 ;; This function is called by:
 15841 ;;		_TMR0_ISR
 15842 ;; This function uses a non-reentrant model
 15843 ;;
 15844                           
 15845                           	psect	text83
 15846  0039F6                     __ptext83:
 15847                           	opt stack 0
 15848  0039F6                     _TMR0_CallBack:
 15849                           	opt stack 17
 15850                           
 15851                           ;tmr0.c: 156: if(TMR0_InterruptHandler)
 15852                           
 15853                           ;incstack = 0
 15854  0039F6  0100               	movlb	0	; () banked
 15855  0039F8  51F8               	movf	_TMR0_InterruptHandler& (0+255),w,b
 15856  0039FA  0100               	movlb	0	; () banked
 15857  0039FC  11F9               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 15858  0039FE  B4D8               	btfsc	status,2,c
 15859  003A00  0012               	return	
 15860                           
 15861                           ; BSR set to: 0
 15862                           ;tmr0.c: 157: {
 15863                           ;tmr0.c: 158: TMR0_InterruptHandler();
 15864  003A02  D801               	call	i2u446_48
 15865  003A04  0012               	return	
 15866  003A06                     i2u446_48:
 15867  003A06  0005               	push	
 15868  003A08  6EFA               	movwf	pclath,c
 15869  003A0A  0100               	movlb	0	; () banked
 15870  003A0C  51F8               	movf	_TMR0_InterruptHandler& (0+255),w,b
 15871  003A0E  6EFD               	movwf	tosl,c
 15872  003A10  51F9               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 15873  003A12  6EFE               	movwf	tosh,c
 15874  003A14  6AFF               	clrf	tosu,c
 15875  003A16  50FA               	movf	pclath,w,c
 15876  003A18  0012               	return		;indir
 15877  003A1A                     __end_of_TMR0_CallBack:
 15878                           	opt stack 0
 15879                           tosu	equ	0xFFF
 15880                           tosh	equ	0xFFE
 15881                           tosl	equ	0xFFD
 15882                           pclatu	equ	0xFFB
 15883                           pclath	equ	0xFFA
 15884                           tblptru	equ	0xFF8
 15885                           tblptrh	equ	0xFF7
 15886                           tblptrl	equ	0xFF6
 15887                           tablat	equ	0xFF5
 15888                           prodh	equ	0xFF4
 15889                           prodl	equ	0xFF3
 15890                           intcon	equ	0xFF2
 15891                           intcon2	equ	0xFF1
 15892                           indf0	equ	0xFEF
 15893                           postinc0	equ	0xFEE
 15894                           fsr0h	equ	0xFEA
 15895                           fsr0l	equ	0xFE9
 15896                           wreg	equ	0xFE8
 15897                           indf1	equ	0xFE7
 15898                           postdec1	equ	0xFE5
 15899                           fsr1h	equ	0xFE2
 15900                           fsr1l	equ	0xFE1
 15901                           indf2	equ	0xFDF
 15902                           postinc2	equ	0xFDE
 15903                           postdec2	equ	0xFDD
 15904                           fsr2h	equ	0xFDA
 15905                           fsr2l	equ	0xFD9
 15906                           status	equ	0xFD8
 15907                           
 15908 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 15909 ;; Defined at:
 15910 ;;		line 166 in file "mcc_generated_files/tmr0.c"
 15911 ;; Parameters:    Size  Location     Type
 15912 ;;		None
 15913 ;; Auto vars:     Size  Location     Type
 15914 ;;		None
 15915 ;; Return value:  Size  Location     Type
 15916 ;;                  1    wreg      void 
 15917 ;; Registers used:
 15918 ;;		None
 15919 ;; Tracked objects:
 15920 ;;		On entry : 0/0
 15921 ;;		On exit  : 0/0
 15922 ;;		Unchanged: 0/0
 15923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15928 ;;Total ram usage:        0 bytes
 15929 ;; Hardware stack levels used:    1
 15930 ;; This function calls:
 15931 ;;		Nothing
 15932 ;; This function is called by:
 15933 ;;		_TMR0_Initialize
 15934 ;;		_TMR0_CallBack
 15935 ;; This function uses a non-reentrant model
 15936 ;;
 15937                           
 15938                           	psect	text84
 15939  003C32                     __ptext84:
 15940                           	opt stack 0
 15941  003C32                     _TMR0_DefaultInterruptHandler:
 15942                           	opt stack 18
 15943                           
 15944                           ;incstack = 0
 15945  003C32  0012               	return		;funcret
 15946  003C34                     __end_of_TMR0_DefaultInterruptHandler:
 15947                           	opt stack 0
 15948                           tosu	equ	0xFFF
 15949                           tosh	equ	0xFFE
 15950                           tosl	equ	0xFFD
 15951                           pclatu	equ	0xFFB
 15952                           pclath	equ	0xFFA
 15953                           tblptru	equ	0xFF8
 15954                           tblptrh	equ	0xFF7
 15955                           tblptrl	equ	0xFF6
 15956                           tablat	equ	0xFF5
 15957                           prodh	equ	0xFF4
 15958                           prodl	equ	0xFF3
 15959                           intcon	equ	0xFF2
 15960                           intcon2	equ	0xFF1
 15961                           indf0	equ	0xFEF
 15962                           postinc0	equ	0xFEE
 15963                           fsr0h	equ	0xFEA
 15964                           fsr0l	equ	0xFE9
 15965                           wreg	equ	0xFE8
 15966                           indf1	equ	0xFE7
 15967                           postdec1	equ	0xFE5
 15968                           fsr1h	equ	0xFE2
 15969                           fsr1l	equ	0xFE1
 15970                           indf2	equ	0xFDF
 15971                           postinc2	equ	0xFDE
 15972                           postdec2	equ	0xFDD
 15973                           fsr2h	equ	0xFDA
 15974                           fsr2l	equ	0xFD9
 15975                           status	equ	0xFD8
 15976                           
 15977 ;; *************** function _make_array *****************
 15978 ;; Defined at:
 15979 ;;		line 59 in file "main.c"
 15980 ;; Parameters:    Size  Location     Type
 15981 ;;		None
 15982 ;; Auto vars:     Size  Location     Type
 15983 ;;		None
 15984 ;; Return value:  Size  Location     Type
 15985 ;;                  1    wreg      void 
 15986 ;; Registers used:
 15987 ;;		wreg, status,2, status,0, cstack
 15988 ;; Tracked objects:
 15989 ;;		On entry : 0/0
 15990 ;;		On exit  : 0/0
 15991 ;;		Unchanged: 0/0
 15992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15997 ;;Total ram usage:        0 bytes
 15998 ;; Hardware stack levels used:    1
 15999 ;; Hardware stack levels required when called:    1
 16000 ;; This function calls:
 16001 ;;		_heart_beat
 16002 ;; This function is called by:
 16003 ;;		_main
 16004 ;;		_TMR0_CallBack
 16005 ;; This function uses a non-reentrant model
 16006 ;;
 16007                           
 16008                           	psect	text85
 16009  003BD0                     __ptext85:
 16010                           	opt stack 0
 16011  003BD0                     _make_array:
 16012                           	opt stack 17
 16013                           
 16014                           ;main.c: 61: static char i=0;
 16015                           ;main.c: 62: heart_beat();
 16016                           
 16017                           ;incstack = 0
 16018  003BD0  EC5B  F01D         	call	_heart_beat	;wreg free
 16019                           
 16020                           ;main.c: 65: display = 1;
 16021  003BD4  0E01               	movlw	1
 16022  003BD6  0100               	movlb	0	; () banked
 16023  003BD8  6F83               	movwf	_display& (0+255),b
 16024                           
 16025                           ; BSR set to: 0
 16026  003BDA  0012               	return		;funcret
 16027  003BDC                     __end_of_make_array:
 16028                           	opt stack 0
 16029                           tosu	equ	0xFFF
 16030                           tosh	equ	0xFFE
 16031                           tosl	equ	0xFFD
 16032                           pclatu	equ	0xFFB
 16033                           pclath	equ	0xFFA
 16034                           tblptru	equ	0xFF8
 16035                           tblptrh	equ	0xFF7
 16036                           tblptrl	equ	0xFF6
 16037                           tablat	equ	0xFF5
 16038                           prodh	equ	0xFF4
 16039                           prodl	equ	0xFF3
 16040                           intcon	equ	0xFF2
 16041                           intcon2	equ	0xFF1
 16042                           indf0	equ	0xFEF
 16043                           postinc0	equ	0xFEE
 16044                           fsr0h	equ	0xFEA
 16045                           fsr0l	equ	0xFE9
 16046                           wreg	equ	0xFE8
 16047                           indf1	equ	0xFE7
 16048                           postdec1	equ	0xFE5
 16049                           fsr1h	equ	0xFE2
 16050                           fsr1l	equ	0xFE1
 16051                           indf2	equ	0xFDF
 16052                           postinc2	equ	0xFDE
 16053                           postdec2	equ	0xFDD
 16054                           fsr2h	equ	0xFDA
 16055                           fsr2l	equ	0xFD9
 16056                           status	equ	0xFD8
 16057                           
 16058 ;; *************** function _heart_beat *****************
 16059 ;; Defined at:
 16060 ;;		line 54 in file "main.c"
 16061 ;; Parameters:    Size  Location     Type
 16062 ;;		None
 16063 ;; Auto vars:     Size  Location     Type
 16064 ;;		None
 16065 ;; Return value:  Size  Location     Type
 16066 ;;                  1    wreg      void 
 16067 ;; Registers used:
 16068 ;;		wreg, status,2, status,0
 16069 ;; Tracked objects:
 16070 ;;		On entry : 0/0
 16071 ;;		On exit  : 0/0
 16072 ;;		Unchanged: 0/0
 16073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16076 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16077 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16078 ;;Total ram usage:        1 bytes
 16079 ;; Hardware stack levels used:    1
 16080 ;; This function calls:
 16081 ;;		Nothing
 16082 ;; This function is called by:
 16083 ;;		_make_array
 16084 ;; This function uses a non-reentrant model
 16085 ;;
 16086                           
 16087                           	psect	text86
 16088  003AB6                     __ptext86:
 16089                           	opt stack 0
 16090  003AB6                     _heart_beat:
 16091                           	opt stack 17
 16092                           
 16093                           ; BSR set to: 0
 16094                           ;incstack = 0
 16095                           ;main.c: 56: do { LATEbits.LATE2 = ~LATEbits.LATE2; } while(0);
 16096  003AB6  A48D               	btfss	3981,2,c	;volatile
 16097  003AB8  D002               	goto	i2u373_40
 16098  003ABA  0E01               	movlw	1
 16099  003ABC  D001               	goto	i2u373_46
 16100  003ABE                     i2u373_40:
 16101  003ABE  0E00               	movlw	0
 16102  003AC0                     i2u373_46:
 16103  003AC0  0AFF               	xorlw	255
 16104  003AC2  6E01               	movwf	??_heart_beat& (0+255),c
 16105  003AC4  4601               	rlncf	??_heart_beat,f,c
 16106  003AC6  4601               	rlncf	??_heart_beat,f,c
 16107  003AC8  508D               	movf	3981,w,c	;volatile
 16108  003ACA  1801               	xorwf	??_heart_beat,w,c
 16109  003ACC  0BFB               	andlw	-5
 16110  003ACE  1801               	xorwf	??_heart_beat,w,c
 16111  003AD0  6E8D               	movwf	3981,c	;volatile
 16112  003AD2  0012               	return	
 16113  003AD4                     __end_of_heart_beat:
 16114                           	opt stack 0
 16115                           tosu	equ	0xFFF
 16116                           tosh	equ	0xFFE
 16117                           tosl	equ	0xFFD
 16118                           pclatu	equ	0xFFB
 16119                           pclath	equ	0xFFA
 16120                           tblptru	equ	0xFF8
 16121                           tblptrh	equ	0xFF7
 16122                           tblptrl	equ	0xFF6
 16123                           tablat	equ	0xFF5
 16124                           prodh	equ	0xFF4
 16125                           prodl	equ	0xFF3
 16126                           intcon	equ	0xFF2
 16127                           intcon2	equ	0xFF1
 16128                           indf0	equ	0xFEF
 16129                           postinc0	equ	0xFEE
 16130                           fsr0h	equ	0xFEA
 16131                           fsr0l	equ	0xFE9
 16132                           wreg	equ	0xFE8
 16133                           indf1	equ	0xFE7
 16134                           postdec1	equ	0xFE5
 16135                           fsr1h	equ	0xFE2
 16136                           fsr1l	equ	0xFE1
 16137                           indf2	equ	0xFDF
 16138                           postinc2	equ	0xFDE
 16139                           postdec2	equ	0xFDD
 16140                           fsr2h	equ	0xFDA
 16141                           fsr2l	equ	0xFD9
 16142                           status	equ	0xFD8
 16143                           
 16144 ;; *************** function _EUSART1_Transmit_ISR *****************
 16145 ;; Defined at:
 16146 ;;		line 165 in file "mcc_generated_files/eusart1.c"
 16147 ;; Parameters:    Size  Location     Type
 16148 ;;		None
 16149 ;; Auto vars:     Size  Location     Type
 16150 ;;		None
 16151 ;; Return value:  Size  Location     Type
 16152 ;;                  1    wreg      void 
 16153 ;; Registers used:
 16154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16155 ;; Tracked objects:
 16156 ;;		On entry : 0/0
 16157 ;;		On exit  : 0/0
 16158 ;;		Unchanged: 0/0
 16159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16164 ;;Total ram usage:        0 bytes
 16165 ;; Hardware stack levels used:    1
 16166 ;; This function calls:
 16167 ;;		Nothing
 16168 ;; This function is called by:
 16169 ;;		_INTERRUPT_InterruptManager
 16170 ;; This function uses a non-reentrant model
 16171 ;;
 16172                           
 16173                           	psect	text87
 16174  00391E                     __ptext87:
 16175                           	opt stack 0
 16176  00391E                     _EUSART1_Transmit_ISR:
 16177                           	opt stack 20
 16178                           
 16179                           ;eusart1.c: 169: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 16180                           
 16181                           ;incstack = 0
 16182  00391E  0E08               	movlw	8
 16183  003920  0100               	movlb	0	; () banked
 16184  003922  61FE               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 16185  003924  D013               	goto	i2l205
 16186                           
 16187                           ; BSR set to: 0
 16188                           ;eusart1.c: 170: {
 16189                           ;eusart1.c: 171: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 16190  003926  5048               	movf	_eusart1TxTail,w,c	;volatile
 16191  003928  0D01               	mullw	1
 16192  00392A  0E68               	movlw	low _eusart1TxBuffer
 16193  00392C  24F3               	addwf	prodl,w,c
 16194  00392E  6ED9               	movwf	fsr2l,c
 16195  003930  0E00               	movlw	high _eusart1TxBuffer
 16196  003932  20F4               	addwfc	prodh,w,c
 16197  003934  6EDA               	movwf	fsr2h,c
 16198  003936  50DF               	movf	indf2,w,c
 16199  003938  6EAD               	movwf	4013,c	;volatile
 16200                           
 16201                           ; BSR set to: 0
 16202  00393A  2A48               	incf	_eusart1TxTail,f,c	;volatile
 16203                           
 16204                           ; BSR set to: 0
 16205                           ;eusart1.c: 172: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 16206  00393C  0E07               	movlw	7
 16207  00393E  6448               	cpfsgt	_eusart1TxTail,c	;volatile
 16208  003940  D002               	goto	i2l5638
 16209                           
 16210                           ; BSR set to: 0
 16211                           ;eusart1.c: 173: {
 16212                           ;eusart1.c: 174: eusart1TxTail = 0;
 16213  003942  0E00               	movlw	0
 16214  003944  6E48               	movwf	_eusart1TxTail,c	;volatile
 16215  003946                     i2l5638:
 16216                           
 16217                           ; BSR set to: 0
 16218                           ;eusart1.c: 175: }
 16219                           ;eusart1.c: 176: eusart1TxBufferRemaining++;
 16220  003946  0100               	movlb	0	; () banked
 16221  003948  2BFE               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 16222                           
 16223                           ;eusart1.c: 177: }
 16224  00394A  0012               	return	
 16225  00394C                     i2l205:
 16226                           
 16227                           ; BSR set to: 0
 16228                           ;eusart1.c: 178: else
 16229                           ;eusart1.c: 179: {
 16230                           ;eusart1.c: 180: PIE1bits.TX1IE = 0;
 16231  00394C  989D               	bcf	3997,4,c	;volatile
 16232  00394E  0012               	return	
 16233  003950                     __end_of_EUSART1_Transmit_ISR:
 16234                           	opt stack 0
 16235                           tosu	equ	0xFFF
 16236                           tosh	equ	0xFFE
 16237                           tosl	equ	0xFFD
 16238                           pclatu	equ	0xFFB
 16239                           pclath	equ	0xFFA
 16240                           tblptru	equ	0xFF8
 16241                           tblptrh	equ	0xFF7
 16242                           tblptrl	equ	0xFF6
 16243                           tablat	equ	0xFF5
 16244                           prodh	equ	0xFF4
 16245                           prodl	equ	0xFF3
 16246                           intcon	equ	0xFF2
 16247                           intcon2	equ	0xFF1
 16248                           indf0	equ	0xFEF
 16249                           postinc0	equ	0xFEE
 16250                           fsr0h	equ	0xFEA
 16251                           fsr0l	equ	0xFE9
 16252                           wreg	equ	0xFE8
 16253                           indf1	equ	0xFE7
 16254                           postdec1	equ	0xFE5
 16255                           fsr1h	equ	0xFE2
 16256                           fsr1l	equ	0xFE1
 16257                           indf2	equ	0xFDF
 16258                           postinc2	equ	0xFDE
 16259                           postdec2	equ	0xFDD
 16260                           fsr2h	equ	0xFDA
 16261                           fsr2l	equ	0xFD9
 16262                           status	equ	0xFD8
 16263                           
 16264 ;; *************** function _EUSART1_Receive_ISR *****************
 16265 ;; Defined at:
 16266 ;;		line 184 in file "mcc_generated_files/eusart1.c"
 16267 ;; Parameters:    Size  Location     Type
 16268 ;;		None
 16269 ;; Auto vars:     Size  Location     Type
 16270 ;;		None
 16271 ;; Return value:  Size  Location     Type
 16272 ;;                  1    wreg      void 
 16273 ;; Registers used:
 16274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16275 ;; Tracked objects:
 16276 ;;		On entry : 0/0
 16277 ;;		On exit  : 0/0
 16278 ;;		Unchanged: 0/0
 16279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16284 ;;Total ram usage:        0 bytes
 16285 ;; Hardware stack levels used:    1
 16286 ;; This function calls:
 16287 ;;		Nothing
 16288 ;; This function is called by:
 16289 ;;		_INTERRUPT_InterruptManager
 16290 ;; This function uses a non-reentrant model
 16291 ;;
 16292                           
 16293                           	psect	text88
 16294  00397E                     __ptext88:
 16295                           	opt stack 0
 16296  00397E                     _EUSART1_Receive_ISR:
 16297                           	opt stack 20
 16298                           
 16299                           ;eusart1.c: 187: if(1 == RCSTA1bits.OERR)
 16300                           
 16301                           ; BSR set to: 0
 16302                           ;incstack = 0
 16303  00397E  A2AB               	btfss	4011,1,c	;volatile
 16304  003980  D002               	goto	i2l5644
 16305                           
 16306                           ;eusart1.c: 188: {
 16307                           ;eusart1.c: 191: RCSTA1bits.CREN = 0;
 16308  003982  98AB               	bcf	4011,4,c	;volatile
 16309                           
 16310                           ;eusart1.c: 192: RCSTA1bits.CREN = 1;
 16311  003984  88AB               	bsf	4011,4,c	;volatile
 16312  003986                     i2l5644:
 16313                           
 16314                           ;eusart1.c: 193: }
 16315                           ;eusart1.c: 196: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 16316  003986  5045               	movf	_eusart1RxHead,w,c	;volatile
 16317  003988  0D01               	mullw	1
 16318  00398A  0E60               	movlw	low _eusart1RxBuffer
 16319  00398C  24F3               	addwf	prodl,w,c
 16320  00398E  6ED9               	movwf	fsr2l,c
 16321  003990  0E00               	movlw	high _eusart1RxBuffer
 16322  003992  20F4               	addwfc	prodh,w,c
 16323  003994  6EDA               	movwf	fsr2h,c
 16324  003996  CFAE FFDF          	movff	4014,indf2	;volatile
 16325  00399A  2A45               	incf	_eusart1RxHead,f,c	;volatile
 16326                           
 16327                           ;eusart1.c: 197: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 16328  00399C  0E07               	movlw	7
 16329  00399E  6445               	cpfsgt	_eusart1RxHead,c	;volatile
 16330  0039A0  D002               	goto	i2l5652
 16331                           
 16332                           ;eusart1.c: 198: {
 16333                           ;eusart1.c: 199: eusart1RxHead = 0;
 16334  0039A2  0E00               	movlw	0
 16335  0039A4  6E45               	movwf	_eusart1RxHead,c	;volatile
 16336  0039A6                     i2l5652:
 16337                           
 16338                           ;eusart1.c: 200: }
 16339                           ;eusart1.c: 201: eusart1RxCount++;
 16340  0039A6  2A44               	incf	_eusart1RxCount,f,c	;volatile
 16341  0039A8  0012               	return		;funcret
 16342  0039AA                     __end_of_EUSART1_Receive_ISR:
 16343                           	opt stack 0
 16344                           tosu	equ	0xFFF
 16345                           tosh	equ	0xFFE
 16346                           tosl	equ	0xFFD
 16347                           pclatu	equ	0xFFB
 16348                           pclath	equ	0xFFA
 16349                           tblptru	equ	0xFF8
 16350                           tblptrh	equ	0xFF7
 16351                           tblptrl	equ	0xFF6
 16352                           tablat	equ	0xFF5
 16353                           prodh	equ	0xFF4
 16354                           prodl	equ	0xFF3
 16355                           intcon	equ	0xFF2
 16356                           intcon2	equ	0xFF1
 16357                           indf0	equ	0xFEF
 16358                           postinc0	equ	0xFEE
 16359                           fsr0h	equ	0xFEA
 16360                           fsr0l	equ	0xFE9
 16361                           wreg	equ	0xFE8
 16362                           indf1	equ	0xFE7
 16363                           postdec1	equ	0xFE5
 16364                           fsr1h	equ	0xFE2
 16365                           fsr1l	equ	0xFE1
 16366                           indf2	equ	0xFDF
 16367                           postinc2	equ	0xFDE
 16368                           postdec2	equ	0xFDD
 16369                           fsr2h	equ	0xFDA
 16370                           fsr2l	equ	0xFD9
 16371                           status	equ	0xFD8
 16372                           tosu	equ	0xFFF
 16373                           tosh	equ	0xFFE
 16374                           tosl	equ	0xFFD
 16375                           pclatu	equ	0xFFB
 16376                           pclath	equ	0xFFA
 16377                           tblptru	equ	0xFF8
 16378                           tblptrh	equ	0xFF7
 16379                           tblptrl	equ	0xFF6
 16380                           tablat	equ	0xFF5
 16381                           prodh	equ	0xFF4
 16382                           prodl	equ	0xFF3
 16383                           intcon	equ	0xFF2
 16384                           intcon2	equ	0xFF1
 16385                           indf0	equ	0xFEF
 16386                           postinc0	equ	0xFEE
 16387                           fsr0h	equ	0xFEA
 16388                           fsr0l	equ	0xFE9
 16389                           wreg	equ	0xFE8
 16390                           indf1	equ	0xFE7
 16391                           postdec1	equ	0xFE5
 16392                           fsr1h	equ	0xFE2
 16393                           fsr1l	equ	0xFE1
 16394                           indf2	equ	0xFDF
 16395                           postinc2	equ	0xFDE
 16396                           postdec2	equ	0xFDD
 16397                           fsr2h	equ	0xFDA
 16398                           fsr2l	equ	0xFD9
 16399                           status	equ	0xFD8
 16400                           
 16401                           	psect	text89
 16402  000000                     __ptext89:
 16403                           	opt stack 0
 16404                           tosu	equ	0xFFF
 16405                           tosh	equ	0xFFE
 16406                           tosl	equ	0xFFD
 16407                           pclatu	equ	0xFFB
 16408                           pclath	equ	0xFFA
 16409                           tblptru	equ	0xFF8
 16410                           tblptrh	equ	0xFF7
 16411                           tblptrl	equ	0xFF6
 16412                           tablat	equ	0xFF5
 16413                           prodh	equ	0xFF4
 16414                           prodl	equ	0xFF3
 16415                           intcon	equ	0xFF2
 16416                           intcon2	equ	0xFF1
 16417                           indf0	equ	0xFEF
 16418                           postinc0	equ	0xFEE
 16419                           fsr0h	equ	0xFEA
 16420                           fsr0l	equ	0xFE9
 16421                           wreg	equ	0xFE8
 16422                           indf1	equ	0xFE7
 16423                           postdec1	equ	0xFE5
 16424                           fsr1h	equ	0xFE2
 16425                           fsr1l	equ	0xFE1
 16426                           indf2	equ	0xFDF
 16427                           postinc2	equ	0xFDE
 16428                           postdec2	equ	0xFDD
 16429                           fsr2h	equ	0xFDA
 16430                           fsr2l	equ	0xFD9
 16431                           status	equ	0xFD8
 16432                           
 16433                           	psect	rparam
 16434  0000                     tosu	equ	0xFFF
 16435                           tosh	equ	0xFFE
 16436                           tosl	equ	0xFFD
 16437                           pclatu	equ	0xFFB
 16438                           pclath	equ	0xFFA
 16439                           tblptru	equ	0xFF8
 16440                           tblptrh	equ	0xFF7
 16441                           tblptrl	equ	0xFF6
 16442                           tablat	equ	0xFF5
 16443                           prodh	equ	0xFF4
 16444                           prodl	equ	0xFF3
 16445                           intcon	equ	0xFF2
 16446                           intcon2	equ	0xFF1
 16447                           indf0	equ	0xFEF
 16448                           postinc0	equ	0xFEE
 16449                           fsr0h	equ	0xFEA
 16450                           fsr0l	equ	0xFE9
 16451                           wreg	equ	0xFE8
 16452                           indf1	equ	0xFE7
 16453                           postdec1	equ	0xFE5
 16454                           fsr1h	equ	0xFE2
 16455                           fsr1l	equ	0xFE1
 16456                           indf2	equ	0xFDF
 16457                           postinc2	equ	0xFDE
 16458                           postdec2	equ	0xFDD
 16459                           fsr2h	equ	0xFDA
 16460                           fsr2l	equ	0xFD9
 16461                           status	equ	0xFD8
 16462                           
 16463                           	psect	temp
 16464  000050                     btemp:
 16465                           	opt stack 0
 16466  000050                     	ds	1
 16467  0000                     int$flags	set	btemp
 16468                           tosu	equ	0xFFF
 16469                           tosh	equ	0xFFE
 16470                           tosl	equ	0xFFD
 16471                           pclatu	equ	0xFFB
 16472                           pclath	equ	0xFFA
 16473                           tblptru	equ	0xFF8
 16474                           tblptrh	equ	0xFF7
 16475                           tblptrl	equ	0xFF6
 16476                           tablat	equ	0xFF5
 16477                           prodh	equ	0xFF4
 16478                           prodl	equ	0xFF3
 16479                           intcon	equ	0xFF2
 16480                           intcon2	equ	0xFF1
 16481                           indf0	equ	0xFEF
 16482                           postinc0	equ	0xFEE
 16483                           fsr0h	equ	0xFEA
 16484                           fsr0l	equ	0xFE9
 16485                           wreg	equ	0xFE8
 16486                           indf1	equ	0xFE7
 16487                           postdec1	equ	0xFE5
 16488                           fsr1h	equ	0xFE2
 16489                           fsr1l	equ	0xFE1
 16490                           indf2	equ	0xFDF
 16491                           postinc2	equ	0xFDE
 16492                           postdec2	equ	0xFDD
 16493                           fsr2h	equ	0xFDA
 16494                           fsr2l	equ	0xFD9
 16495                           status	equ	0xFD8


Data Sizes:
    Strings     779
    Constant    10
    Data        13
    BSS         1486
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      79
    BANK0           160     16     159
    BANK1           256      0     120
    BANK2           256      0     150
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), STR_77(CODE[7]), 
		 -> STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), STR_69(CODE[7]), 
		 -> STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), 
		 -> STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), STR_38(CODE[7]), 
		 -> STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), 
		 -> STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_84(CODE[4]), STR_68(CODE[5]), STR_67(CODE[7]), STR_54(CODE[7]), 
		 -> STR_45(CODE[8]), STR_37(CODE[6]), STR_35(CODE[6]), STR_30(CODE[5]), 
		 -> STR_27(CODE[6]), STR_25(CODE[4]), STR_23(CODE[4]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 
		 -> NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), STR_77(CODE[7]), 
		 -> STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), STR_69(CODE[7]), 
		 -> STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), 
		 -> STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), STR_38(CODE[7]), 
		 -> STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), 
		 -> STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 
		 -> NULL(NULL[0]), 

    cputs@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_132(CODE[12]), STR_131(CODE[12]), STR_86(CODE[5]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), STR_77(CODE[7]), 
		 -> STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), STR_69(CODE[7]), 
		 -> STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), 
		 -> STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), STR_38(CODE[7]), 
		 -> STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), 
		 -> STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 
		 -> NULL(NULL[0]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_84(CODE[4]), STR_68(CODE[5]), STR_67(CODE[7]), STR_54(CODE[7]), 
		 -> STR_45(CODE[8]), STR_37(CODE[6]), STR_35(CODE[6]), STR_30(CODE[5]), 
		 -> STR_27(CODE[6]), STR_25(CODE[4]), STR_23(CODE[4]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 
		 -> NULL(NULL[0]), 

    strncpy@from	PTR const unsigned char  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1080]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_84(CODE[4]), STR_83(CODE[7]), STR_82(CODE[7]), 
		 -> STR_79(CODE[7]), STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), 
		 -> STR_71(CODE[2]), STR_69(CODE[7]), STR_68(CODE[5]), STR_67(CODE[7]), 
		 -> STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), 
		 -> STR_56(CODE[7]), STR_55(CODE[7]), STR_54(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_45(CODE[8]), STR_43(CODE[2]), 
		 -> STR_40(CODE[7]), STR_38(CODE[7]), STR_37(CODE[6]), STR_36(CODE[7]), 
		 -> STR_35(CODE[6]), STR_34(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), 
		 -> STR_30(CODE[5]), STR_28(CODE[7]), RAM(DATA[3895]), STR_27(CODE[6]), 
		 -> STR_26(CODE[7]), STR_25(CODE[4]), STR_24(CODE[7]), NULL(NULL[0]), 
		 -> STR_23(CODE[4]), clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1080]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_84(CODE[4]), STR_83(CODE[7]), STR_82(CODE[7]), 
		 -> STR_79(CODE[7]), STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), 
		 -> STR_71(CODE[2]), STR_69(CODE[7]), STR_68(CODE[5]), STR_67(CODE[7]), 
		 -> STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), 
		 -> STR_56(CODE[7]), STR_55(CODE[7]), STR_54(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_45(CODE[8]), STR_43(CODE[2]), 
		 -> STR_40(CODE[7]), STR_38(CODE[7]), STR_37(CODE[6]), STR_36(CODE[7]), 
		 -> STR_35(CODE[6]), STR_34(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), 
		 -> STR_30(CODE[5]), STR_28(CODE[7]), RAM(DATA[3895]), STR_27(CODE[6]), 
		 -> STR_26(CODE[7]), STR_25(CODE[4]), STR_24(CODE[7]), NULL(NULL[0]), 
		 -> STR_23(CODE[4]), clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1080]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), cmd_data.data(BANK0[40]), STR_43(CODE[2]), 
		 -> STR_40(CODE[7]), STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), 
		 -> STR_32(CODE[7]), STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), 
		 -> STR_26(CODE[7]), STR_24(CODE[7]), NULL(NULL[0]), cmd_data(BANK0[50]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[50]), clcd_display_string_details(BIGRAM[1080]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[50]), clcd_display_string_details(BIGRAM[1080]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_130(CODE[5]), STR_116(CODE[7]), STR_113(CODE[7]), STR_110(CODE[8]), 
		 -> STR_107(CODE[6]), STR_102(CODE[6]), STR_99(CODE[5]), STR_95(CODE[4]), 
		 -> STR_91(CODE[4]), STR_87(CODE[6]), STR_85(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), CMD(BANK0[15]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_132(CODE[12]), STR_131(CODE[12]), STR_86(CODE[5]), 

    memset@p1	PTR void  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), STR_83(CODE[7]), STR_82(CODE[7]), 
		 -> STR_79(CODE[7]), STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), 
		 -> STR_71(CODE[2]), STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), 
		 -> STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), 
		 -> STR_51(CODE[7]), STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), 
		 -> STR_40(CODE[7]), STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), 
		 -> STR_32(CODE[7]), STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), 
		 -> STR_26(CODE[7]), CMD(BANK0[15]), STR_24(CODE[7]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[50]), conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), 
		 -> clcd_config_data(COMRAM[5]), 

    memset@p	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), STR_83(CODE[7]), STR_82(CODE[7]), 
		 -> STR_79(CODE[7]), STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), 
		 -> STR_71(CODE[2]), STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), 
		 -> STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), 
		 -> STR_51(CODE[7]), STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), 
		 -> STR_40(CODE[7]), STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), 
		 -> STR_32(CODE[7]), STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), 
		 -> STR_26(CODE[7]), CMD(BANK0[15]), STR_24(CODE[7]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[50]), conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), 
		 -> clcd_config_data(COMRAM[5]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1080]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1080]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> STR_24(CODE[7]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_135(CODE[18]), STR_133(CODE[5]), STR_129(CODE[3]), STR_128(CODE[3]), 
		 -> STR_127(CODE[3]), STR_125(CODE[7]), STR_123(CODE[7]), STR_121(CODE[7]), 
		 -> STR_119(CODE[13]), STR_117(CODE[5]), STR_114(CODE[13]), STR_111(CODE[13]), 
		 -> STR_108(CODE[13]), STR_105(CODE[13]), STR_104(CODE[5]), STR_103(CODE[11]), 
		 -> STR_100(CODE[13]), STR_97(CODE[13]), STR_96(CODE[5]), STR_93(CODE[13]), 
		 -> STR_92(CODE[5]), STR_89(CODE[13]), STR_88(CODE[5]), STR_81(CODE[25]), 
		 -> STR_80(CODE[11]), STR_78(CODE[25]), STR_76(CODE[27]), STR_74(CODE[27]), 
		 -> STR_72(CODE[10]), STR_70(CODE[9]), STR_66(CODE[25]), STR_65(CODE[11]), 
		 -> STR_63(CODE[25]), STR_61(CODE[27]), STR_59(CODE[27]), STR_57(CODE[12]), 
		 -> STR_53(CODE[14]), STR_52(CODE[9]), STR_50(CODE[11]), STR_49(CODE[9]), 
		 -> STR_46(CODE[9]), STR_44(CODE[11]), STR_42(CODE[11]), STR_41(CODE[12]), 
		 -> STR_39(CODE[12]), STR_33(CODE[7]), STR_29(CODE[8]), STR_22(CODE[8]), 
		 -> STR_21(CODE[12]), STR_20(CODE[12]), STR_19(CODE[19]), STR_18(CODE[17]), 
		 -> STR_17(CODE[12]), STR_16(CODE[12]), STR_15(CODE[16]), STR_14(CODE[16]), 
		 -> STR_13(CODE[19]), STR_12(CODE[3]), STR_11(CODE[5]), STR_10(CODE[16]), 
		 -> STR_9(CODE[39]), STR_8(CODE[26]), STR_7(CODE[26]), STR_6(CODE[26]), 
		 -> STR_4(CODE[17]), STR_3(CODE[18]), STR_2(CODE[9]), STR_1(CODE[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 3895
		 -> STR_136(CODE[7]), STR_134(CODE[6]), uart_str(BANK2[150]), STR_126(CODE[15]), 
		 -> STR_124(CODE[12]), STR_122(CODE[12]), STR_120(CODE[7]), STR_118(CODE[6]), 
		 -> STR_115(CODE[7]), STR_112(CODE[8]), STR_109(CODE[6]), STR_106(CODE[6]), 
		 -> STR_101(CODE[5]), STR_98(CODE[4]), STR_94(CODE[4]), STR_90(CODE[6]), 
		 -> STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), STR_77(CODE[7]), 
		 -> STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), STR_69(CODE[7]), 
		 -> STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), 
		 -> STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), cmd_data.data(BANK0[40]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> CMD(BANK0[15]), STR_24(CODE[7]), NULL(NULL[0]), cmd_data(BANK0[50]), 
		 -> STR_5(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), STR_26(CODE[7]), STR_24(CODE[7]), 
		 -> NULL(NULL[0]), 

    parse_cmd_str@temp	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> STR_24(CODE[7]), NULL(NULL[0]), 

    parse_cmd_str@ptr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    parse_cmd_str@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    collect_column@data_column	PTR unsigned char  size(2) Largest target is 50
		 -> cmd_data(BANK0[50]), 

    collect_column@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> STR_24(CODE[7]), NULL(NULL[0]), 

    get_dis_frq@data_frq	PTR unsigned char  size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    get_dis_frq@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> STR_24(CODE[7]), NULL(NULL[0]), 

    get_direction@data_direction	PTR unsigned char  size(2) Largest target is 3895
		 -> RAM(DATA[3895]), 

    get_direction@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> STR_24(CODE[7]), NULL(NULL[0]), 

    get_str@data_str	PTR unsigned char  size(2) Largest target is 50
		 -> cmd_data(BANK0[50]), 

    get_str@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> STR_24(CODE[7]), NULL(NULL[0]), 

    collect_row@data_row	PTR unsigned char  size(2) Largest target is 50
		 -> cmd_data(BANK0[50]), 

    collect_row@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_83(CODE[7]), STR_82(CODE[7]), STR_79(CODE[7]), 
		 -> STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), STR_71(CODE[2]), 
		 -> STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), STR_60(CODE[7]), 
		 -> STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), STR_51(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), STR_40(CODE[7]), 
		 -> STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), STR_26(CODE[7]), 
		 -> STR_24(CODE[7]), NULL(NULL[0]), 

    scroll_off@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    scroll_right_to_left@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    scroll_left_to_right@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    write_str@str	PTR const unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    update_string_data@data	PTR struct . size(2) Largest target is 50
		 -> cmd_data(BANK0[50]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[50]), clcd_display_string_details(BIGRAM[1080]), 

    copy_data@data	PTR struct . size(2) Largest target is 50
		 -> cmd_data(BANK0[50]), 

    copy_data@clcd_str_data	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    sp__max_display_support	PTR unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), 

    sp__memset	PTR void  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), STR_83(CODE[7]), STR_82(CODE[7]), 
		 -> STR_79(CODE[7]), STR_77(CODE[7]), STR_75(CODE[7]), STR_73(CODE[7]), 
		 -> STR_71(CODE[2]), STR_69(CODE[7]), STR_64(CODE[7]), STR_62(CODE[7]), 
		 -> STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), STR_55(CODE[7]), 
		 -> STR_51(CODE[7]), STR_48(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), 
		 -> STR_40(CODE[7]), STR_38(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), 
		 -> STR_32(CODE[7]), STR_31(CODE[7]), STR_28(CODE[7]), RAM(DATA[3895]), 
		 -> STR_26(CODE[7]), CMD(BANK0[15]), STR_24(CODE[7]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[50]), conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), 
		 -> clcd_config_data(COMRAM[5]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> make_array(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> make_array(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_make_display
    _console_init->_memset
    _clear_cmd_data->_memset
    _update_string_data->_make_display
    _make_display->_scroll_right_to_left
    _scroll_right_to_left->_memset
    _scroll_off->_strlen
    _scroll_left_to_right->_memset
    _display_text->_write_str
    _set_cursor->_write_lcd_cmd
    _char_enter_mode_left_to_right->_write_lcd_cmd
    _copy_data->_printf
    _conflict_check->_printf
    _puts->_cputs
    _cputs->_putch
    _init_clcd_cusotom_lcd->_printf
    _write_lcd_cmd->_delay
    _clear_display_array->_memset
    _clear_display_structure->_memset
    _clcd_display_string_config->_printf
    _write_str->_write_lcd_data
    _write_lcd_data->_delay
    _parse_cmd_str->_collect_column
    _parse_cmd_str->_collect_row
    _parse_cmd_str->_get_direction
    _parse_cmd_str->_get_dis_frq
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _strstr->_strncmp
    _strncmp->_strlen
    _get_str->_memset
    _memset->_strlen
    _get_dis_frq->_printf
    _get_direction->_printf
    _collect_row->_printf
    _collect_column->_printf
    _strlen->___wmul
    _printf->___wmul
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    ___wmul->___awdiv
    _getch->_EUSART1_Read
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _make_array->_heart_beat

Critical Paths under _main in BANK0

    _main->_cmd_consol_task
    _cmd_consol_task->_reply_to_host
    _reply_to_host->_update_string_data

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  314856
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                     _TMR1_StopTimer
                     _TMR5_StopTimer
                          __delay_MS
                    _cmd_consol_task
                       _console_init
                       _make_display
                             _printf
 ---------------------------------------------------------------------------------
 (1) _console_init                                         0     0      0   15058
                     _clear_cmd_data
                             _memset
 ---------------------------------------------------------------------------------
 (2) _clear_cmd_data                                       0     0      0    7529
                             _memset
 ---------------------------------------------------------------------------------
 (1) _cmd_consol_task                                      2     2      0  260106
                                             14 BANK0      2     2      0
                              _getch
                             _memset
                      _parse_cmd_str
                             _printf
                               _puts
                      _reply_to_host
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _reply_to_host                                        4     4      0  151173
                                             10 BANK0      4     4      0
                       _clcd_max_col
                       _clcd_max_row
              _init_clcd_cusotom_lcd
                    _max_display_str
                _max_display_support
                      _max_uid_range
                      _min_uid_range
                             _printf
                               _puts
                             _strcmp
                 _update_string_data
 ---------------------------------------------------------------------------------
 (3) _update_string_data                                  10     8      2   74760
                                              0 BANK0     10     8      2
                             ___wmul
                     _conflict_check
                          _copy_data
                       _make_display
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (1) _make_display                                         5     5      0   31828
                                             59 COMRAM     5     5      0
                             ___wmul
                       _display_text
               _scroll_left_to_right
                         _scroll_off
               _scroll_right_to_left
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_right_to_left                                16    14      2   10175
                                             43 COMRAM    16    14      2
                             ___wmul (ARG)
                             _memcpy
                             _memset
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              8     2      6     433
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _scroll_off                                          15    13      2    2960
                                             35 COMRAM    15    13      2
                             ___wmul (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_left_to_right                                11     9      2    9742
                                             43 COMRAM    11     9      2
                             ___wmul (ARG)
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _display_text                                         0     0      0    2572
      _char_enter_mode_left_to_right
                         _set_cursor
                      _write_lcd_cmd
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _set_cursor                                           2     1      1     805
                                             23 COMRAM     2     1      1
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _char_enter_mode_left_to_right                        0     0      0     401
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (4) _copy_data                                           10     6      4   12388
                                             47 COMRAM     6     2      4
                             _printf
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _conflict_check                                       9     7      2   11609
                                             47 COMRAM     9     7      2
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    1827
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _puts                                                 2     0      2     590
                                             19 COMRAM     2     0      2
                              _cputs
                              _putch
 ---------------------------------------------------------------------------------
 (4) _cputs                                                2     0      2     235
                                             17 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _min_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_display_support                                  2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _max_display_str                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_clcd_cusotom_lcd                                2     1      1   67085
                                             47 COMRAM     2     1      1
                            ___awdiv
                             ___wmul
                   _init_CLCD_config
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (4) _init_CLCD_config                                     0     0      0   47673
                          __delay_MS
         _clcd_display_string_config
                             _memset
                         _reset_clcd
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _write_lcd_cmd                                        1     1      0     401
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _reset_clcd                                           0     0      0   22587
                _clear_display_array
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _clear_display_array                                  0     0      0   15058
                             _memset
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _reset_display_structure_count                        0     0      0    7529
            _clear_display_structure
 ---------------------------------------------------------------------------------
 (7) _clear_display_structure                              0     0      0    7529
                             _memset
 ---------------------------------------------------------------------------------
 (5) _clcd_display_string_config                           0     0      0   16469
                             _memcpy
                             _memset
                             _printf
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _write_str                                            3     1      2     965
                                             23 COMRAM     3     1      2
                     _write_lcd_data
 ---------------------------------------------------------------------------------
 (4) _write_lcd_data                                       1     1      0     401
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                7     5      2     370
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     4      6    1098
                                             15 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) __delay_MS                                            5     3      2     687
                                             15 COMRAM     5     3      2
            _TMR1_HasOverflowOccured
                        _TMR1_Reload
                    _TMR1_StartTimer
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     907
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _clcd_max_row                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clcd_max_col                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parse_cmd_str                                       18    16      2   91925
                                             57 COMRAM     5     3      2
                                              0 BANK0     13    13      0
                               _atoi
                     _collect_column
                        _collect_row
                      _get_direction
                        _get_dis_frq
                            _get_str
                            _isdigit
                             _memset
                             _printf
                             _strcpy
                             _strlen
                             _strstr
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _strtok                                               4     0      4    6189
                                             28 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (4) _strspn                                               7     3      4     873
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strcspn                                              7     3      4     873
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    5240
                                             44 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     423
                                             35 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) _strchr                                               6     2      4     586
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _get_str                                              4     0      4   12389
                                             43 COMRAM     4     0      4
                             _memset
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    2265
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6    7529
                                             35 COMRAM     8     2      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _get_dis_frq                                         10     6      4    9803
                                             47 COMRAM    10     6      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _get_direction                                       10     6      4    9803
                                             47 COMRAM    10     6      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_row                                         10     6      4   10296
                                             47 COMRAM    10     6      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_column                                      10     6      4   10296
                                             47 COMRAM    10     6      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2    2286
                                             29 COMRAM     6     4      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _printf                                              24    16      8    6877
                                             29 COMRAM    18    10      8
                            ___awdiv (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                       _clcd_max_col (ARG)
                       _clcd_max_row (ARG)
                    _max_display_str (ARG)
                _max_display_support (ARG)
                      _max_uid_range (ARG)
                      _min_uid_range (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             16 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    4361
                                             29 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3774
                                             23 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getch                                                0     0      0      24
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         1     1      0      24
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     150
                                             17 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     150
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         14    14      0       0
                                              1 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                         _make_array *
 ---------------------------------------------------------------------------------
 (13) _make_array                                          0     0      0       0
                         _heart_beat
 ---------------------------------------------------------------------------------
 (14) _heart_beat                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_SetInterruptHandler
   _TMR0_StartTimer
   _TMR0_StopTimer
   _TMR1_StopTimer
   _TMR5_StopTimer
   __delay_MS
     _TMR1_HasOverflowOccured
     _TMR1_Reload
     _TMR1_StartTimer
     _TMR1_StopTimer
   _cmd_consol_task
     _getch
       _EUSART1_Read
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _parse_cmd_str
       _atoi
         ___wmul
           ___awdiv (ARG)
         _isdigit
       _collect_column
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _collect_row
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_direction
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_dis_frq
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_str
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strcpy
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _isdigit
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
       _strcpy
       _strlen
         ___wmul (ARG)
           ___awdiv (ARG)
       _strstr
         _strchr
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
         _strncmp
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _clcd_max_col (ARG)
       _clcd_max_row (ARG)
       _max_display_str (ARG)
       _max_display_support (ARG)
       _max_uid_range (ARG)
       _min_uid_range (ARG)
       _putch (ARG)
         _EUSART1_Write
     _puts
       _cputs
         _putch
           _EUSART1_Write
       _putch
         _EUSART1_Write
     _reply_to_host
       _clcd_max_col
       _clcd_max_row
       _init_clcd_cusotom_lcd
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _init_CLCD_config
           __delay_MS
             _TMR1_HasOverflowOccured
             _TMR1_Reload
             _TMR1_StartTimer
             _TMR1_StopTimer
           _clcd_display_string_config
             _memcpy
             _memset
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _printf
               ___awdiv (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _clcd_max_col (ARG)
               _clcd_max_row (ARG)
               _max_display_str (ARG)
               _max_display_support (ARG)
               _max_uid_range (ARG)
               _min_uid_range (ARG)
               _putch (ARG)
                 _EUSART1_Write
             _write_str
               _write_lcd_data
                 _delay
           _memset
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _reset_clcd
             _clear_display_array
               _memset
                 _strlen (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
               _reset_display_structure_count
                 _clear_display_structure
                   _memset
                     _strlen (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
             _reset_display_structure_count
               _clear_display_structure
                 _memset
                   _strlen (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
           _write_lcd_cmd
             _delay
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
       _max_display_str
       _max_display_support
       _max_uid_range
       _min_uid_range
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
       _puts
         _cputs
           _putch
             _EUSART1_Write
         _putch
           _EUSART1_Write
       _strcmp
       _update_string_data
         ___wmul
           ___awdiv (ARG)
         _conflict_check
           ___wmul
             ___awdiv (ARG)
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
         _copy_data
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
           _strcpy
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _make_display
           ___wmul
             ___awdiv (ARG)
           _display_text
             _char_enter_mode_left_to_right
               _write_lcd_cmd
                 _delay
             _set_cursor
               _write_lcd_cmd
                 _delay
             _write_lcd_cmd
               _delay
             _write_str
               _write_lcd_data
                 _delay
           _scroll_left_to_right
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
           _scroll_off
             ___wmul (ARG)
               ___awdiv (ARG)
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _scroll_right_to_left
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _strncpy (ARG)
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
     _strcmp
   _console_init
     _clear_cmd_data
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _make_display
     ___wmul
       ___awdiv (ARG)
     _display_text
       _char_enter_mode_left_to_right
         _write_lcd_cmd
           _delay
       _set_cursor
         _write_lcd_cmd
           _delay
       _write_lcd_cmd
         _delay
       _write_str
         _write_lcd_data
           _delay
     _scroll_left_to_right
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _scroll_off
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _scroll_right_to_left
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strncpy (ARG)
     _strlen
       ___wmul (ARG)
         ___awdiv (ARG)
   _printf
     ___awdiv (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
     _clcd_max_col (ARG)
     _clcd_max_row (ARG)
     _max_display_str (ARG)
     _max_display_support (ARG)
     _max_uid_range (ARG)
     _min_uid_range (ARG)
     _putch (ARG)
       _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _make_array *
         _heart_beat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     438      37       27.7%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      78       7       46.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4F       1       84.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1FC      12        0.0%
DATA                 0      0     634       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Oct 28 22:17:36 2017

                       _eusart1TxBufferRemaining 00FE                            __end_of_parse_cmd_str 0FB4  
                                   ___awdiv@sign 0015                            _init_clcd_cusotom_lcd 2CC6  
                            ___wmul@multiplicand 001A                                  _timer0ReloadVal 004E  
                                   __CFG_CP0$OFF 000000                                     __CFG_CP1$OFF 000000  
                                   __CFG_CP2$OFF 000000                                     __CFG_CP3$OFF 000000  
                                    __CFG_LVP$ON 000000                                              l193 37E6  
                                            l840 14EA                                              _CMD 00CC  
                                   __CFG_CPB$OFF 000000                                     __CFG_CPD$OFF 000000  
                                ?_conflict_check 0030                                    ?_display_text 0001  
                                _timer1ReloadVal 00FA                                              _str 00EB  
                      collect_column@data_column 0032                                              prod 000FF3  
                               _LCD_16x2_DISPLAY 007E                                              tosl 000FFD  
                                            wreg 000FE8                                     get_dis_frq@i 0037  
                                           l1224 27BC                                             l1474 34F8  
                                           l1484 3788                                             l1736 3598  
                                           l1755 3548                                             l6100 2580  
                                           l6022 34C6                                             l6110 25A8  
                                           l1694 2F28                                             l6024 34CE  
                                           l6112 25AC                                             l6200 371E  
                                           l1689 2E84                                             l6034 34EE  
                                           l6026 34D2                                             l6050 377E  
                                           l6042 375E                                             l6130 25F6  
                                           l6044 3766                                             l6124 25DE  
                                           l6140 3466                                             l6204 3726  
                                           l6212 373A                                             l6300 1276  
                                           l6046 376A                                             l6134 2644  
                                           l6070 249A                                             l6142 346A  
                                           l6150 37A4                                             l6128 25F0  
                                           l6136 264C                                             l6224 368A  
                                           l7112 03F0                                             l7040 015E  
                                           l6160 3816                                             l6090 252E  
                                           l6074 24AA                                             l6226 3692  
                                           l6170 3840                                             l6242 16BC  
                                           l6234 1688                                             l6322 2850  
                                           l6084 24DA                                             l6076 24B0  
                                           l7036 015A                                             l6156 37C0  
                                           l6094 2542                                             l6166 3838  
                                           l6262 18F6                                             l6254 17FC  
                                           l6246 16D6                                             l6238 16A2  
                                           l6190 3388                                             l6182 3356  
                                           l6502 23D8                                             l6510 2466  
                                           l6088 2504                                             l6600 350C  
                                           l7128 0486                                             l7056 01F4  
                                           l6168 383E                                             l6176 3B18  
                                           l6336 28C8                                             l6098 254A  
                                           l6610 3564                                             l6602 3514  
                                           l7242 0856                                             l7074 02A2  
                                           l6258 18AA                                             l6338 28E2  
                                           l6346 2906                                             l6194 3398  
                                           l6282 1004                                             l6274 0FD0  
                                           l4588 38BC                                             l6524 3A90  
                                           l6372 3206                                             l6700 3B98  
                                           l6436 19BC                                             l6364 3100  
                                           l6188 337E                                             l6292 117A  
                                           l6508 2462                                             l4598 38E2  
                                           l7350 0B7C                                             l7246 085A  
                                           l7238 07CA                                             l7190 064E  
                                           l6550 314E                                             l6542 3130  
                                           l6454 1AB0                                             l6286 101E  
                                           l6278 0FEA                                             l6608 355C  
                                           l7248 085E                                             l7272 08D6  
                                           l6560 316E                                             l6552 3152  
                                           l6536 3120                                             l6480 1C12  
                                           l6296 1224                                             l7512 13E0  
                                           l7504 1348                                             l6810 3348  
                                           l6378 3238                                             l7346 0B78  
                                           l7354 0B80                                             l7362 0B88  
                                           l7186 064A                                             l7194 0652  
                                           l6466 1B62                                             l6482 1C16  
                                           l6490 22C0                                             l6722 1D02  
                                           l7530 1500                                             l7522 146A  
                                           l6900 2AF0                                             l6820 2C6C  
                                           l7380 0BF2                                             l7268 08D2  
                                           l7276 08DA                                             l6548 3146  
                                           l6564 3178                                             l6660 3B60  
                                           l6476 1C0C                                             l6468 1B68  
                                           l6732 1D88                                             l7516 142E  
                                           l7508 1392                                             l5950 36FA  
                                           l6590 2E52                                             l6582 2DA6  
                                           l6910 3022                                             l7454 0EFE  
                                           l7462 0F06                                             l7470 0F0E  
                                           l7358 0B84                                             l7366 0B8C  
                                           l6574 3952                                             l7542 1596  
                                           l7534 1532                                             l7630 1EE0  
                                           l6840 2CB6                                             l6824 2C70  
                                           l6816 2BF8                                             l6592 2E5A  
                                           l6904 2FE8                                             l6912 304C  
                                           l6568 3186                                             l6648 3B7C  
                                           l6672 3B6E                                             l6496 234C  
                                           l6744 1DBA                                             l7528 14CE  
                                           l7624 1EC2                                             l5954 37D4  
                                           l6826 2C74                                             l5946 36D0  
                                           l6586 2E06                                             l7458 0F02  
                                           l7466 0F0A                                             l7474 0F12  
                                           l7482 0F1A                                             l6578 3968  
                                           l6738 1D8C                                             l7562 1630  
                                           l7538 1564                                             l7618 1EA6  
                                           l7650 1FA2                                             l7810 3444  
                                           l6780 294C                                             l6852 2B88  
                                           l6916 307C                                             l5972 35FE  
                                           l6748 1DEA                                             l6756 1E20  
                                           l7556 15FC                                             l7652 1FA8  
                                           l6950 266A                                             l5966 3808  
                                           l7478 0F16                                             l7494 0F88  
                                           l5982 361C                                             l5974 3606  
                                           l6758 1E26                                             l7566 164E  
                                           l7558 1612                                             l7638 1F1A  
                                           l6952 266E                                             l5968 380C  
                                           l6872 2BD2                                             l6856 2B8C  
                                           l6848 2B14                                             l6944 2F1C  
                                           l6936 2ED6                                             l6928 2E96  
                                           l7488 0F7E                                             l6688 3B8A  
                                           l5984 3620                                             l6768 1E94  
                                           l7648 1F9C                                             l6970 2772  
                                           l6962 26F6                                             l6794 2A02  
                                           l6786 29C2                                             l6858 2B90  
                                           l5978 3616                                             l7666 2028  
                                           l7658 1FD6                                             l6892 2AB0  
                                           l6980 35AC                                             l7684 2094  
                                           l7676 206C                                             l6966 2720  
                                           l6886 2A3A                                             l7678 2082  
                                           l6968 276E                                             l6984 35E0  
                                           l7688 209C                                             l6978 35A4  
               __size_of_clear_display_structure 001E                                             STR_1 FF71  
                                           STR_2 FF68                                             STR_3 FE08  
                                           STR_4 FE2B                                             STR_5 FFE8  
                                           STR_6 FD50                                             STR_7 FD84  
                                           STR_8 FD6A                                             STR_9 FCF3  
                                           _LATA 000F89                                             _LATB 000F8A  
                                           _LATC 000F8B                                             _LATD 000F8C  
                                           _LATE 000F8D                                             u7100 2690  
                                           u6060 36BC                                             u7120 26B8  
                                           u7040 3076                                             u6330 3228  
                                           u7107 2686                                             u6067 36B2  
                                           u7140 26EC                                             u7300 0216  
                                           u6350 3266                                             u7127 26AE  
                                           u7047 306C                                             u7160 2718  
                                           u6337 321E                                             u6370 19D0  
                                           u7147 26E2                                             i2l60 004E  
                                           u7180 2756                                             u6620 2DC8  
                                           u5820 3BCC                                             u6357 325C  
                                           i2l62 005E                                             u7190 2794  
                                           u8230 1FBE                                             u7167 270E  
                                           u5680 36F6                                             i2l66 006A  
                                           u5850 24FC                                             u6810 297A  
                                           u6650 2E42                                             u7610 0842  
                                           u7450 057E                                             u7290 0214  
                        _TMR1_HasOverflowOccured 3BC4                                             u7187 274C  
                                           u6627 2DBE                                             u5860 2526  
                                           u7540 074C                                             u7197 278A  
                                           u6645 2E00                                             u5950 348C  
                                           u6830 29B0                                             u5687 36EA  
                                           u6647 2DF6                                             u6920 2B42  
                                           u5857 24F2                                             u6817 2970  
                                           u6657 2E38                                             u7617 0838  
                                           u7457 0574                                             u5867 251C  
                                           u7547 0742                                             u6940 2B78  
                                           u5957 3482                                             u6837 29A6  
                                           u6870 2C26                                             u7590 0802  
                                           u6927 2B38                                             u7680 09A0  
                                           u6970 2A68                                             u6890 2C5C  
                                           u6947 2B6E                                             u6877 2C1C  
                                           u7597 07F8                                             u6990 2A9E  
                                           u7687 0996                                             u6977 2A5E  
                                           u6897 2C52                                             u6997 2A94  
                                           _TMR1 000FCE                                             _TMR5 000F4F  
                                           _WPUB 000F61                                    _EUSART1_Write 37D2  
                                  ?_make_display 0001                                             _atoi 2668  
                                           _main 3404                                    ?_EUSART1_Read 0001  
                                _TMR0_StartTimer 3C2A                                             fsr0h 000FEA  
                                           fsr1h 000FE2                                             indf0 000FEF  
                                           fsr2h 000FDA                                             fsr0l 000FE9  
                                           indf1 000FE7                                             indf2 000FDF  
                                           fsr1l 000FE1                                             fsr2l 000FD9  
                                           btemp 0050                                             _puts 3B22  
                                  __CFG_BORV$190 000000                                             prodh 000FF4  
                                           prodl 000FF3                                             start 00A6  
                                _timer5ReloadVal 00FC                                    __CFG_IESO$OFF 000000  
                           __end_of_clcd_max_col 3B9C                             __end_of_clcd_max_row 3B8E  
                                  ?_console_init 0001                                     ___param_bank 000000  
                                   collect_row@i 0037                          __end_of_TMR0_Initialize 3882  
                 ??_TMR0_DefaultInterruptHandler 0001                   __size_of_OSCILLATOR_Initialize 000E  
                  __end_of_OSCILLATOR_Initialize 3BAA                                      make_array@i 0085  
                                          ?_atoi 001E                                            ?_main 0001  
                                __end_of___awdiv 3190                                   ??_display_text 001B  
                                          STR_10 FE5C                                            STR_11 FFE3  
                                          STR_12 FE9F                                            STR_20 FEC6  
                                          STR_21 FEA2                                            STR_13 FDE3  
                                          STR_30 FFDE                                            STR_22 FF82  
                                          STR_14 FE4C                                            STR_31 FFA7  
                                          STR_23 FFED                                            STR_15 FE3C  
                                          STR_40 FFA7                                            STR_32 FFA7  
                                          STR_24 FFA7                                            STR_16 FED2  
                                          STR_41 FEDE                                            STR_25 FFF1  
                                          STR_33 FF99                                            STR_17 FEAE  
                                          STR_50 FF2F                                            STR_34 FFA7  
                                          STR_26 FFA7                                            STR_42 FF2F  
                                          STR_18 FE1A                                            STR_51 FFA7  
                                          STR_43 FFFC                                            STR_35 FFC2  
                                          STR_27 FFBC                                            STR_19 FDD0  
                                          STR_60 FFA7                                            STR_36 FFA7  
                                          STR_28 FFA7                                            STR_52 FF56  
                                          STR_44 FF24                                            STR_37 FFCE  
                                          STR_45 FF8A                                            STR_29 FF7A  
                                          STR_53 FE7B                                            STR_61 FD1A  
                                          STR_62 FFA7                                            STR_38 FFA7  
                                          STR_54 FFAE                                            STR_70 FF5F  
                                          STR_46 FF44                                            STR_71 FFFC  
                                          STR_55 FFA7                                            STR_47 FFA7  
                                          STR_39 FEDE                                            STR_63 FDB7  
                                          STR_80 FF19                                            STR_64 FFA7  
                                          STR_56 FFA7                                            STR_48 FFA7  
                                          STR_72 FF3A                                            STR_81 FD9E  
                                          STR_73 FFA7                                            STR_49 FF4D  
                                          STR_65 FF19                                            STR_57 FE96  
                                          STR_74 FD35                                            STR_82 FFA7  
                                          STR_58 FFA7                                            STR_90 FFBC  
                                          STR_66 FD9E                                            STR_83 FFA7  
                                          STR_75 FFA7                                            STR_91 FFED  
                                          STR_67 FFB5                                            STR_59 FD35  
                                          STR_76 FD1A                                            STR_92 FDF1  
                                          STR_84 FFF5                                            STR_68 FFD9  
                                          STR_93 FE89                                            STR_77 FFA7  
                                          STR_69 FFA7                                            STR_85 FFF5  
                                          STR_78 FDB7                                            STR_86 FE91  
                                          STR_94 FFED                                            STR_79 FFA7  
                                          STR_95 FFF1                                            STR_87 FFBC  
                                          STR_96 FDF1                                            STR_88 FFA2  
                                          STR_97 FE89                                            STR_89 FE89  
                                          STR_98 FFF1                                            STR_99 FFDE  
                                _TMR1_StartTimer 3C26                                            ?_puts 0014  
                                          _T0CON 000FD5                                  ___awdiv@divisor 0012  
                                          _T1CON 000FCD                                            _T5CON 000F4E  
                                 __CFG_DEBUG$OFF 000000                                  __end_of___lwdiv 3502  
                                ??_get_direction 0034                                  __end_of___lwmod 3792  
                                          i2l205 394C                                  ___awdiv@counter 0014  
                                          _TMR0H 000FD7                                            _TMR1H 000FCF  
                                          _TMR0L 000FD6                                            _TMR1L 000FCE  
                                          _TMR5H 000F50                                            _TMR5L 000F4F  
                                          _PORTD 000F83                                            _TRISA 000F92  
                                          _TRISB 000F93                                            _TRISC 000F94  
                                          _TRISD 000F95                                            _TRISE 000F96  
                      __size_of_init_CLCD_config 00B4                __size_of_TMR0_SetInterruptHandler 000A  
                                  __CFG_WRT0$OFF 000000                                    __CFG_WRT1$OFF 000000  
                                  __CFG_WRT2$OFF 000000                        ?_TMR0_SetInterruptHandler 0010  
                                  __CFG_WRT3$OFF 000000                             _EUSART1_Transmit_ISR 391E  
                                 __CFG_EBTR0$OFF 000000                                   __CFG_FCMEN$OFF 000000  
                                 __CFG_EBTR1$OFF 000000                                   __CFG_EBTR2$OFF 000000  
                                 __CFG_EBTR3$OFF 000000                                 __end_of_TMR0_ISR 3B56  
                                  __CFG_WRTB$OFF 000000                                    __CFG_WRTC$OFF 000000  
                                __end_of_get_str 334C                                    __CFG_WRTD$OFF 000000  
                                          _check 0080                                   __CFG_EBTRB$OFF 000000  
                                          _delay 35EC                                            _getch 3C0C  
                                __end_of_dpowers FCF3                          __end_of_max_display_str 3B80  
                                          _cputs 3950                                  __end_of_isdigit 3A98  
                             __CFG_MCLRE$EXTMCLR 000000                                            atoi@a 0023  
                                          atoi@s 001E                                            _putch 3BF0  
                        __size_of_clear_cmd_data 0032                                   ?_EUSART1_Write 0001  
                        __end_of_TMR1_Initialize 3A5C                                            pclath 000FFA  
                                 ??_make_display 003C                                            tablat 000FF5  
                                 ??_EUSART1_Read 0010                                            puts@s 0014  
                                          status 000FD8                                   __CFG_HFOFST$ON 000000  
                                __end_of_strcspn 35A2                                  __end_of_strncmp 2E74  
                                __end_of_strncpy 33AA                             _scroll_right_to_left 0FB4  
                                 __CFG_PBADEN$ON 000000                         scroll_right_to_left@line 003B  
                                _TMR5_Initialize 39D0                                   ??_console_init 002C  
                                __initialization 3276                                   get_dis_frq@frq 0039  
                                 get_dis_frq@str 0030                                     __end_of_atoi 27C6  
                     __end_of_EUSART1_Initialize 38B8                                     __end_of_main 345C  
                                   __end_of_puts 3B36                           ?_init_clcd_cusotom_lcd 0030  
                                 get_direction@i 0037                      ?_INTERRUPT_InterruptManager 0001  
                  __size_of_scroll_left_to_right 0338                                 _cmd_consol_state 0082  
                                         ??_atoi 0020                                           ??_main 0041  
                                         ??_puts 0016                                 ??_write_lcd_data 0017  
                                  __activetblptr 000003                                   __CFG_PLLCFG$ON 000000  
                            collect_row@data_row 0032                                    __delay_MS@val 0013  
                          ?_EUSART1_Transmit_ISR 0001                        ??_TMR1_HasOverflowOccured 0010  
                                reply_to_host@ch 00E8                                           ?_delay 0010  
                        __end_of_TMR0_StartTimer 3C2E                                           ?_getch 0001  
                                         ?_cputs 0012                                           STR_100 FE89  
                                         STR_101 FFDE                                           STR_102 FFC2  
                                         STR_110 FF8A                                           STR_111 FE89  
                                         STR_103 FF0E                                           STR_104 FDF1  
                                         STR_120 FFB5                                           STR_112 FF8A  
                                         STR_105 FE89                                           STR_113 FFAE  
                                         STR_121 FFA0                                           STR_114 FE89  
                                         STR_106 FFC2                                           STR_130 FFD4  
                                         STR_122 FF02                                           STR_123 FFA0  
                                         STR_115 FFAE                                           STR_107 FFCE  
                                         STR_131 FEF6                                           STR_108 FE89  
                                         STR_116 FFB5                                           STR_124 FEEA  
                                         STR_132 FEBA                                           STR_133 FFA2  
                                         STR_117 FFA2                                           STR_125 FFA0  
                                         STR_109 FFCE                                           STR_134 FFC8  
                                         STR_118 FFC8                                           STR_126 FE6C  
                                         STR_127 FE9F                                           STR_119 FE89  
                                         STR_135 FDF6                                           STR_128 FFF9  
                                         STR_136 FF92                                           STR_129 FFF9  
                               ___awdiv@dividend 0010                                           _ANSELA 000F38  
                                         ?_putch 0001                                           _ANSELB 000F39  
                                         _ANSELC 000F3A                                           _ANSELD 000F3B  
                                         _ANSELE 000F3C                                           _T1GCON 000FCC  
                                         _T5GCON 000F4D                         __size_of_cmd_consol_task 021C  
                                 __CFG_WDTEN$OFF 000000                                           i2l5652 39A6  
                                         i2l5644 3986                                           i2l5638 3946  
                                         _RCREG1 000FAE                                           _RCSTA1 000FAB  
                                         _OSCCON 000FD3                                           _SPBRG1 000FAF  
                                         _TXREG1 000FAD                            ?_scroll_right_to_left 002C  
                                         _TXSTA1 000FAC                           __size_of_max_uid_range 000E  
                            _clear_display_array 3A1A                                   __CFG_XINST$OFF 000000  
                              collect_column@str 0030                             __size_of_get_dis_frq 00E4  
                        __end_of_TMR1_StartTimer 3C2A                                     ?_TMR1_Reload 0001  
                                         ___wmul 39AA                                        ??___awdiv 0014  
                                 __CFG_STVREN$ON 000000                                        ??___lwdiv 0014  
                           __size_of_collect_row 00EE                                        ??___lwmod 001B  
                                         _memcpy 3792                                 ?_TMR0_Initialize 0001  
                                         _memset 36C6                                           delay@i 0015  
                                         clear_0 329E                                           clear_1 32B0  
                                         clear_2 32BC                                           clear_3 32C8  
                                         clear_4 32D4                                 ___awdiv@quotient 0016  
                                         _printf 2490                                           _strchr 3206  
                                         _strcmp 35A2                     scroll_off@display_char_count 002D  
                                         _strcpy 3680                                           _strlen 345C  
                                      ??_get_str 0030                                           _strtok 2E74  
                                         _strspn 3502                                           _strstr 2FE6  
                                _TMR5_StartTimer 3C18                                           cputs@s 0012  
                                      ??_isdigit 0010                             ?_clear_display_array 0001  
                                   __mediumconst FCE8                                           tblptrh 000FF7  
                                         tblptrl 000FF6                                           tblptru 000FF8  
                          __end_of_TMR0_CallBack 3A1A                                  ??_EUSART1_Write 0010  
                        _clear_display_structure 3A5C         TMR0_SetInterruptHandler@InterruptHandler 0010  
                               ?_max_display_str 0001                                        ??_strcspn 001A  
                                _eusart1RxBuffer 0060                      __end_of_max_display_support 3BE6  
                                      ??_strncmp 002A                                        ??_strncpy 0016  
                  __size_of_INTERRUPT_Initialize 0004                                 ??_collect_column 0034  
                                _eusart1TxBuffer 0068                                 ?_TMR1_Initialize 0001  
                        __end_of_TMR5_Initialize 39F6                  ??_reset_display_structure_count 002C  
                              _SYSTEM_Initialize 3A98                            __size_of_clcd_max_col 000E  
                                     __accesstop 0060                            __size_of_clcd_max_row 000E  
                        __end_of__initialization 32DA                               __size_of__delay_MS 0044  
scroll_left_to_right@clcd_display_string_details 002C                               ?_SYSTEM_Initialize 0001  
                           __end_of_display_text 310C                                    ___rparam_used 000001  
            __size_of_clcd_display_string_config 005A                                   __pcstackCOMRAM 0001  
                                   __pidataBANK0 3BAA                              ??_SYSTEM_Initialize 0014  
                                      ?_TMR0_ISR 0001                                    __end_of_delay 3636  
                                  __end_of_getch 3C12                                 ??_conflict_check 0032  
                                  __end_of_cputs 397E                             _display_struct_count 0074  
                           cmd_consol_task@_1806 0078                                    __end_of_putch 3BFA  
                            get_dis_frq@data_frq 0032                             __end_of_make_display 2490  
                           __end_of_EUSART1_Read 38EC                                   collect_row@row 0039  
                                 collect_row@str 0030                       __end_of_update_string_data 1E98  
                         __size_of_write_lcd_cmd 001C                           ??_EUSART1_Transmit_ISR 0001  
                          __end_of_reply_to_host 166C                            ??_clear_display_array 002C  
                update_string_data@exist_uid_idx 00E0                                 _init_CLCD_config 2F32  
                                  _max_uid_range 3B64                           __size_of_min_uid_range 000E  
                    __end_of_EUSART1_Receive_ISR 39AA                                     _clcd_max_col 3B8E  
                                   _clcd_max_row 3B80                             __end_of_console_init 3206  
                                        ??_delay 0012                                          ??_getch 0011  
                               ?_TMR0_StartTimer 0001                                          ??_cputs 0014  
                      __end_of_SYSTEM_Initialize 3AB6                                   _clear_cmd_data 38EC  
                                        ??_putch 0011                                    _eusart1RxHead 0045  
                                  _eusart1TxHead 0047                               __size_of_copy_data 01FA  
                                  _eusart1RxTail 0046                                       __pbssBANK0 0060  
                                     __pbssBANK1 0100                                       __pbssBANK2 0200  
                                  _eusart1TxTail 0048                           ??_scroll_right_to_left 002E  
                                     _data_count 0043                                       __pnvCOMRAM 004E  
          scroll_off@clcd_display_string_details 0024                                ??_cmd_consol_task 00E9  
                             __CFG_CCP2MX$PORTC1 000000                 __end_of_TMR0_SetInterruptHandler 3C04  
                        __size_of_TMR0_StopTimer 0004                                          ?___wmul 0018  
                               ?_TMR1_StartTimer 0001                                       ??_TMR0_ISR 0002  
                        __end_of_TMR5_StartTimer 3C1E                               __CFG_CCP3MX$PORTB5 000000  
                ??_char_enter_mode_left_to_right 0018                                          ?_memcpy 0010  
                                        ?_memset 0024                      get_direction@data_direction 0032  
                                        ?_printf 001E                                          ?_strchr 0010  
                                        ?_strcmp 0010                                          ?_strcpy 0010  
                                        ?_strlen 001E                                       _heart_beat 3AB6  
                        __size_of_TMR1_StopTimer 0004                                          ?_strtok 001D  
                                        ?_strspn 0016                                          ?_strstr 002D  
                              __end_of__delay_MS 3750                                   ?_max_uid_range 0001  
                      ??_clear_display_structure 002C                                          _OSCCON2 000FD2  
                         __end_of_clear_cmd_data 391E                                          _OSCTUNE 000F9B  
                                        _SPBRGH1 000FB0                           copy_data@clcd_str_data 0030  
                               write_lcd_cmd@cmd 0017                                 _print_data_ready 0076  
                                     _make_array 3BD0                           __size_of_parse_cmd_str 0F0A  
                               ?_TMR5_Initialize 0001                                    _write_lcd_cmd 3AD4  
                                __CFG_PWRTEN$OFF 000000                               __size_of_write_str 003A  
          __end_of_reset_display_structure_count 3B46           __size_of_reset_display_structure_count 0010  
                  _reset_display_structure_count 3B36                                          __Hparam 0000  
                        ??_init_clcd_cusotom_lcd 0031                                    _min_uid_range 3B56  
                                        __Lparam 0000  scroll_right_to_left@clcd_display_string_details 002C  
                                        ___awdiv 310C                                  __size_of___wmul 0026  
                                        ___lwdiv 34B0                                          ___lwmod 3750  
             __end_of_clcd_display_string_config 3404                       _clcd_display_string_config 33AA  
                                  copy_data@data 0032                                __end_of_copy_data 22AE  
                           __size_of_TMR1_Reload 000C                                          __pcinit 3276  
                                __size_of_memcpy 0040                                  __size_of_memset 0046  
                                        __ramtop 1000                                          __ptext0 3404  
                                        __ptext1 3190                                          __ptext2 38EC  
                                        __ptext3 1E98                                          __ptext4 131E  
                                        __ptext5 1C34                                          __ptext6 22AE  
                                        __ptext7 0FB4                                          __ptext8 334C  
                                        __ptext9 27C6                                  __size_of_printf 01D8  
                                        _display 0083                                          _get_str 32E4  
                                      _T0CONbits 000FD5                          __size_of_TMR5_StopTimer 0006  
                                __size_of_strchr 0070                                  __size_of_strcmp 004A  
                                __size_of_strcpy 0046                                  __size_of_strlen 0054  
                                      _T1CONbits 000FCD                                  __size_of_strtok 00BE  
                                __size_of_strspn 0050                                  __size_of_strstr 00A0  
                                        _dpowers FCE9                            _OSCILLATOR_Initialize 3B9C  
                                     delay@delay 0010                                          _isdigit 3A7A  
                          __end_of_get_direction 2CC6                               _EUSART1_Initialize 3882  
                       ??_PIN_MANAGER_Initialize 0010                                        _T5CONbits 000F4E  
                                ?_clear_cmd_data 0001                       __size_of_SYSTEM_Initialize 001E  
                                        _strcspn 3552                                          _strncmp 2DA4  
                                        _strncpy 334C                            __size_of_display_text 0086  
                           end_of_initialization 32DA                     __end_of_scroll_left_to_right 19A4  
                            ?_EUSART1_Initialize 0001                                          memcpy@d 0016  
                                        memcpy@n 0014                                          memcpy@s 0018  
                                 ?_write_lcd_cmd 0001                                      scroll_off@i 0031  
                                    scroll_off@j 002F                                      scroll_off@k 002A  
                                        memset@c 0026                                          memset@n 0028  
                                        memset@p 002A                                 cmd_consol_task@i 007A  
                                 ?_min_uid_range 0001                  __end_of_clear_display_structure 3A7A  
                                 parse_cmd_str@i 00DB                                       _reset_clcd 3BE6  
                                     _set_cursor 3B0C                                          printf@c 002F  
                                        printf@f 001E                            __size_of_make_display 01E2  
                                     _scroll_off 27C6                                          postdec1 000FE5  
                                        postdec2 000FDD                                          postinc0 000FEE  
                                        postinc2 000FDE                            __size_of_EUSART1_Read 0034  
                                   _conflict_arr 00B8                                 ?_TMR5_StartTimer 0001  
                           ??_EUSART1_Initialize 0010                                          strcmp@r 0015  
                                  _parse_cmd_str 00AA                                          strlen@s 001E  
                                ??_max_uid_range 0010                                          strspn@i 001B  
                       _TMR0_SetInterruptHandler 3BFA                                        _PORTAbits 000F80  
                                      _PORTDbits 000F83                            __size_of_console_init 0076  
                                    ?_heart_beat 0001                            _TMR5_InterruptHandler 0072  
          __end_of_char_enter_mode_left_to_right 3C0C           __size_of_char_enter_mode_left_to_right 0008  
                  _char_enter_mode_left_to_right 3C04                                     _display_text 3086  
                              __end_of_write_str 384A               init_clcd_cusotom_lcd@clcd_init_col 0030  
                             write_lcd_data@data 0017               init_clcd_cusotom_lcd@clcd_init_row 0031  
                            EUSART1_Write@txData 0010                                      ?_make_array 0001  
                                   _make_display 22AE                                    ??_get_dis_frq 0034  
                                   _EUSART1_Read 38B8                                       get_str@str 002C  
                       __end_of_init_CLCD_config 2FE6                                    ??_collect_row 0034  
                              _lcd_display_array 0100                                   _TMR0_StopTimer 3C22  
                                   _console_init 3190                                make_display@count 003F  
                   __end_of_INTERRUPT_Initialize 3C32                                     write_str@str 0018  
                                 ?_parse_cmd_str 003A                   ?_reset_display_structure_count 0001  
                                 __end_of___wmul 39D0                                  collect_column@i 0037  
                              __size_of_TMR0_ISR 0010                                   _TMR1_StopTimer 3C1E  
                                 __end_of_memcpy 37D2                           ?_OSCILLATOR_Initialize 0001  
                                 __end_of_memset 370C                         ?_TMR1_HasOverflowOccured 0001  
                                 __end_of_printf 2668                           conflict_check@conflict 0036  
                                 __end_of_strchr 3276                                   __end_of_strcmp 35EC  
                                 __end_of_strcpy 36C6                                   __end_of_strlen 34B0  
                                 __end_of_strtok 2F32                                   __end_of_strspn 3552  
                                 __end_of_strstr 3086                              start_initialization 3276  
                           set_cursor@col_number 0018                         __size_of_TMR0_Initialize 0038  
                __size_of_PIN_MANAGER_Initialize 004A                                  _cmd_consol_task 1E98  
                               get_direction@str 0030                                      putch@txData 0011  
                                ??_write_lcd_cmd 0017                            __end_of_EUSART1_Write 3810  
                        __size_of_write_lcd_data 001C                             collect_column@column 0039  
                             _update_string_data 1C34                                  ??_min_uid_range 0010  
                            __size_of_heart_beat 001E                           __end_of_TMR0_StopTimer 3C26  
                   __size_of_max_display_support 000A                         __size_of_max_display_str 000E  
                                    ?_reset_clcd 0001                              ?_update_string_data 00DB  
                                  _clcd_init_col 0081                         __size_of_TMR1_Initialize 0020  
                                    ?_set_cursor 0018                                    _clcd_init_row 0041  
                                    ?_scroll_off 0024                                         ??___wmul 001C  
                            __end_of_get_dis_frq 2BE2                           __size_of_TMR0_CallBack 0024  
                         __end_of_TMR1_StopTimer 3C22                                      __pdataBANK0 00EB  
                    __end_of_clear_display_array 3A3C                                         ??_memcpy 0016  
                                       ??_memset 002A                              update_string_data@i 00E3  
                           _scroll_left_to_right 166C                                   scroll_off@line 002C  
                            __end_of_collect_row 2A10                              __size_of_make_array 000C  
                                       ??_printf 0026                                   _TMR5_StopTimer 3C12  
                                       ??_strchr 0014                                         ??_strcmp 0014  
                                       ??_strcpy 0014                                         ??_strlen 0020  
                                       ??_strtok 0021                                         ??_strspn 001A  
                                 _eusart1RxCount 0044                                         ??_strstr 0031  
                   ??_clcd_display_string_config 0030                                      __pbssBIGRAM 0296  
                                    __pbssCOMRAM 0041                             ??_update_string_data 00DD  
                  __size_of_EUSART1_Transmit_ISR 0032                                    __pcstackBANK0 00DB  
                                __delay_MS@delay 0010                                        __delay_MS 370C  
                 ?_char_enter_mode_left_to_right 0001                                     _isdigit$2216 0011  
                   __size_of_EUSART1_Receive_ISR 002C                            _TMR0_InterruptHandler 00F8  
                                      __pnvBANK0 00F8                    __size_of_scroll_right_to_left 036A  
                       __size_of_TMR0_StartTimer 0004                                  ?_TMR0_StopTimer 0001  
                         __size_of_reply_to_host 034E                                 ___lwdiv@dividend 0010  
                         _PIN_MANAGER_Initialize 3636                                  conflict_check@i 0037  
                                ??_parse_cmd_str 003C                   __size_of_init_clcd_cusotom_lcd 00DE  
                                      __pintcode 0008                          __size_of_collect_column 00EE  
                  __end_of_init_clcd_cusotom_lcd 2DA4                                    __pmediumconst FCE8  
                                       ?___awdiv 0010                                         ?___lwdiv 0010  
                                       ?___lwmod 0017                  __end_of_TMR1_HasOverflowOccured 3BD0  
                                ?_TMR1_StopTimer 0001                           __end_of_TMR5_StopTimer 3C18  
                    update_string_data@end_point 00E2                            ?_scroll_left_to_right 002C  
                    ?_clcd_display_string_config 0001                     ??_INTERRUPT_InterruptManager 0002  
                               __CFG_PRICLKEN$ON 000000                                 ??_clear_cmd_data 002C  
                              parse_cmd_str@temp 00E6                                         ?_get_str 002C  
                        __end_of_cmd_consol_task 20B4                                        _copy_data 20B4  
                                       _BAUDCON1 000FB8                         __size_of_TMR1_StartTimer 0004  
                                       ?_isdigit 0001                          __size_of_conflict_check 0290  
                            __size_of_reset_clcd 000A                                       ?__delay_MS 0010  
                               ___lwdiv@quotient 0015                                 _clcd_config_data 0049  
                                 __size_of_delay 004A                              __size_of_set_cursor 0016  
                                 __size_of_getch 0006                                   __size_of_cputs 002E  
                                  _TMR0_CallBack 39F6                                         ?_strcspn 0016  
                                       ?_strncmp 0024                              __size_of_scroll_off 015C  
                                       ?_strncpy 0010                                   __size_of_putch 000A  
                           _INTERRUPT_Initialize 3C2E                    conflict_check@new_start_point 0030  
                           set_cursor@row_number 0019                                ??_TMR0_Initialize 0012  
                            _conflict_data_count 0042                                   ___wmul@product 001C  
                                       _LATEbits 000F8D                              parse_cmd_str@i_1700 00DF  
                            parse_cmd_str@i_1709 00DC                                      strncpy@from 0012  
                                    _get_dis_frq 2AFE                                         _PIE1bits 000F9D  
                                    strncpy@size 0014              __size_of_INTERRUPT_InterruptManager 009E  
                                      _valid_cmd 0084                       ??_TMR0_SetInterruptHandler 0012  
                                       _PIR1bits 000F9E                                         i2u373_40 3ABE  
                                       i2u373_46 3AC0                                         i2u446_48 3A06  
                                       _PIR5bits 000F7E                                      _collect_row 2922  
                       __size_of_TMR5_Initialize 0026                                         _RCONbits 000FD0  
                                  ??_TMR1_Reload 0010                                 __CFG_WDTPS$32768 000000  
                            parse_cmd_str@column 00DE                                         _TMR0_ISR 3B46  
                              ??_max_display_str 0010                              parse_cmd_str@scroll 00E1  
                                ?_TMR5_StopTimer 0001                         ?_clear_display_structure 0001  
                              ??_TMR1_Initialize 0010                                     ??_heart_beat 0001  
                              ___wmul@multiplier 0018                                       printf@flag 0027  
                                     ?_copy_data 0030                                       printf@prec 0028  
                                  _reply_to_host 131E                                   ?_TMR0_CallBack 0001  
                                    _INTCON2bits 000FF1                                        copy_data0 328A  
                                      _write_str 3810                            ?_INTERRUPT_Initialize 0001  
                                 _write_lcd_data 3AF0                                     ??_make_array 0002  
                          EUSART1_Read@readValue 0010                           get_direction@direction 0039  
                             __end_of_heart_beat 3AD4                                         __Hrparam 0000  
                       scroll_left_to_right@line 0036                                ?_init_CLCD_config 0001  
                  update_string_data@start_point 00E1                                         __Lrparam 0000  
                             __CFG_BOREN$SBORDIS 000000                           __size_of_get_direction 00E4  
                             ??_init_CLCD_config 0030                                __CFG_P2BMX$PORTD2 000000  
                         ??_scroll_left_to_right 002E                          ??_OSCILLATOR_Initialize 0010  
                              ??_TMR0_StartTimer 0010                                  get_str@data_str 002E  
                               __size_of___awdiv 0084                      __size_of_EUSART1_Initialize 0036  
                               __size_of___lwdiv 0052                                 __size_of___lwmod 0042  
                    _clcd_display_string_details 0296                               __end_of_make_array 3BDC  
                            __end_of_TMR1_Reload 3BC4                            _TMR1_InterruptHandler 0070  
                          __end_of_max_uid_range 3B72                                   ?_reply_to_host 0001  
                               ?_cmd_consol_task 0001                                 __size_of_get_str 0068  
                            _max_display_support 3BDC                         __size_of_TMR5_StartTimer 0006  
                                  ?_clcd_max_col 0001                                         _cmd_data 0086  
                                  ?_clcd_max_row 0001                                 __size_of_isdigit 001E  
                                ___lwdiv@divisor 0012                                      ??__delay_MS 0012  
                         __end_of_write_lcd_data 3B0C                                  ___lwdiv@counter 0014  
                                       __ptext10 166C                                         __ptext11 3086  
                                       __ptext20 3B64                                         __ptext12 3B0C  
                                       __ptext21 3BDC                                         __ptext13 3C04  
                                     _T1GCONbits 000FCC                                         __ptext30 33AA  
                                       __ptext22 3B72                                         __ptext14 20B4  
                                       __ptext31 3810                                         __ptext23 2CC6  
                                       __ptext15 19A4                                         __ptext40 3B80  
                                       __ptext32 3AF0                                         __ptext24 2F32  
                                       __ptext16 35A2                                         __ptext41 3B8E  
                                       __ptext33 35EC                                         __ptext25 3AD4  
                                       __ptext17 3B22                                         __ptext50 3680  
                                       __ptext42 00AA                                         __ptext34 3792  
                                       __ptext26 3BE6                                         __ptext18 3950  
                                       __ptext51 36C6                                         __ptext43 2E74  
                                       __ptext35 370C                                         __ptext27 3A1A  
                                       __ptext19 3B56                                         __ptext60 3750  
                                       __ptext52 2AFE                                         __ptext44 3502  
                                       __ptext36 3C1E                                         __ptext28 3B36  
                                       __ptext61 34B0                                         __ptext53 2BE2  
                                       __ptext45 3552                                         __ptext37 3BB8  
                                       __ptext29 3A5C                                         __ptext70 39D0  
                                       __ptext62 2668                                         __ptext54 2922  
                                       __ptext46 2FE6                                         __ptext38 3BC4  
                                       __ptext71 3C18                                         __ptext63 3A7A  
                                       __ptext55 2A10                                         __ptext47 2DA4  
                                       __ptext39 310C                                         __ptext80 3882  
                                       __ptext72 3A3C                                         __ptext64 39AA  
                                       __ptext56 345C                                         __ptext48 3206  
                                       __ptext73 3C26                                         __ptext65 3C0C  
                                       __ptext57 2490                                         __ptext49 32E4  
                                       __ptext82 3B46                                         __ptext74 384A  
                                       __ptext66 38B8                                         __ptext58 3BF0  
                                       __ptext83 39F6                                         __ptext75 3C2A  
                                       __ptext67 3C12                                         __ptext59 37D2  
                                       __ptext84 3C32                                         __ptext76 3BFA  
                                       __ptext68 3C22                                         __ptext85 3BD0  
                                       __ptext77 3636                                         __ptext69 3A98  
                                       __ptext86 3AB6                                         __ptext78 3B9C  
                                       __ptext87 391E                                         __ptext79 3C2E  
                                       __ptext88 397E                                         __ptext89 0000  
                                     ?_write_str 0018                                 parse_cmd_str@uid 00E0  
                               parse_cmd_str@ptr 00E4                                 parse_cmd_str@row 00DD  
                               parse_cmd_str@str 003A                                ??_TMR1_StartTimer 0010  
                               __size_of_strcspn 0050                                 __size_of_strncmp 00D0  
                               __size_of_strncpy 005E                                       strcpy@from 0012  
               __size_of_TMR1_HasOverflowOccured 000C                                    __size_of_atoi 015E  
                                  __size_of_main 0058                                       _T5GCONbits 000F4D  
                                  __size_of_puts 0014                                         delay@val 0013  
                                     strncmp@len 0028             __end_of_TMR0_DefaultInterruptHandler 3C34  
          __size_of_TMR0_DefaultInterruptHandler 0002                     _TMR0_DefaultInterruptHandler 3C32  
                           ?_max_display_support 0010                                     ??_reset_clcd 002C  
                                   ??_set_cursor 0019                                   _collect_column 2A10  
                                   ??_scroll_off 0026                                         _uart_str 0200  
                                       int$flags 0050                                         atoi@sign 0022  
             __end_of_INTERRUPT_InterruptManager 00A6                       _INTERRUPT_InterruptManager 0008  
                                      printf@val 002D                                         _str_data 0150  
                            _EUSART1_Receive_ISR 397E                                       write_str@i 001A  
                              ??_TMR5_Initialize 0010                                      ??_copy_data 0034  
                                 ??_clcd_max_col 0010                                       _INTCONbits 000FF2  
                                 ??_clcd_max_row 0010                                  ??_TMR0_CallBack 0002  
                                 _conflict_check 19A4                                         memcpy@d1 0010  
                                       memcpy@s1 0012                                    _get_direction 2BE2  
                                       isdigit@c 0012                                  ?_write_lcd_data 0001  
                         ??_INTERRUPT_Initialize 0010                                         memset@p1 0024  
                             __end_of_reset_clcd 3BF0                               __end_of_set_cursor 3B22  
                         update_string_data@data 00DB                                cmd_consol_task@ch 00EA  
                                       intlevel2 0000                               __end_of_scroll_off 2922  
                               ??_TMR0_StopTimer 0010                             ?_EUSART1_Receive_ISR 0001  
                                      strchr@chr 0012                            __end_of_write_lcd_cmd 3AF0  
                               ___lwmod@dividend 0017                                        strchr@ptr 0010  
                        ?_PIN_MANAGER_Initialize 0001                            ??_max_display_support 0012  
                                     _RCSTA1bits 000FAB                                        strcspn@s1 0016  
                                      strcspn@s2 0018                            __end_of_min_uid_range 3B64  
                         __end_of_collect_column 2AFE                     __end_of_EUSART1_Transmit_ISR 3950  
                                      strncmp@s1 0024                                        strncmp@s2 0026  
                               ??_TMR1_StopTimer 0010                                        strncpy@cp 0016  
                                      strncpy@to 0010                    ?_TMR0_DefaultInterruptHandler 0001  
                                    _TMR1_Reload 3BB8                                         printf@ap 002B  
                                       printf@cp 0029                                scroll_off@str_len 002E  
                         __size_of_EUSART1_Write 003E                                  ??_reply_to_host 00E5  
                    conflict_check@new_end_point 0031                     __end_of_scroll_right_to_left 131E  
                         __end_of_conflict_check 1C34                                         strcmp@s1 0010  
                                       strcmp@s2 0012                                  ___lwmod@divisor 0019  
                                _TMR0_Initialize 384A                                         strcpy@cp 0014  
                                       strlen@cp 0022                                         strcpy@to 0010  
                                ___lwmod@counter 001B                                         strcspn@i 001B  
                   __size_of_clear_display_array 0022                                   ?_get_direction 0030  
                          parse_cmd_str@uid_1708 00E3                            parse_cmd_str@uid_1697 00E2  
                    __size_of_update_string_data 0264                                __CFG_T3CMX$PORTC0 000000  
                    conflict_check@exist_uid_idx 0035                                         strtok@s1 001D  
                                       strtok@s2 001F                                         strspn@s1 0016  
                                       strspn@s2 0018                                         strtok@sp 007C  
                                       strstr@s1 002D                                         strstr@s2 002F  
                               _LCD_20x4_DISPLAY 007F                                      ??_write_str 001A  
                              ??_TMR5_StartTimer 0010                            ??_EUSART1_Receive_ISR 0001  
                 __end_of_PIN_MANAGER_Initialize 3680                                __CFG_FOSC$INTIO67 000000  
                                _max_display_str 3B72                                     ?_get_dis_frq 0030  
                                ?_collect_column 0030                                  _TMR1_Initialize 3A3C  
                               ??_TMR5_StopTimer 0010                                     ?_collect_row 0030  



Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Oct 30 20:10:00 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   111                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   112  0000                     
   113                           ; Version 1.44
   114                           ; Generated 14/09/2017 GMT
   115                           ; 
   116                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   117                           ; All rights reserved.
   118                           ; 
   119                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   120                           ; 
   121                           ; Redistribution and use in source and binary forms, with or without modification, are
   122                           ; permitted provided that the following conditions are met:
   123                           ; 
   124                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   125                           ;        conditions and the following disclaimer.
   126                           ; 
   127                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   128                           ;        of conditions and the following disclaimer in the documentation and/or other
   129                           ;        materials provided with the distribution.
   130                           ; 
   131                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   132                           ;        software without specific prior written permission.
   133                           ; 
   134                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   135                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   136                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   137                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   138                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   139                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   140                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   141                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   142                           ; 
   143                           ; 
   144                           ; Code-generator required, PIC18F46K22 Definitions
   145                           ; 
   146                           ; SFR Addresses
   147  0000                     
   148                           	psect	idataCOMRAM
   149  003706                     __pidataCOMRAM:
   150                           	opt stack 0
   151                           
   152                           ;initializer for _uid_count
   153  003706  41                 	db	65
   154                           
   155                           	psect	idataBANK0
   156  003604                     __pidataBANK0:
   157                           	opt stack 0
   158                           
   159                           ;initializer for _randx
   160  003604  0001               	dw	1
   161  003606  0000               	dw	0
   162                           
   163                           ;initializer for _str
   164  003608  49                 	db	73
   165  003609  4E                 	db	78
   166  00360A  49                 	db	73
   167  00360B  54                 	db	84
   168  00360C  5F                 	db	95
   169  00360D  53                 	db	83
   170  00360E  55                 	db	85
   171  00360F  43                 	db	67
   172  003610  43                 	db	67
   173  003611  45                 	db	69
   174  003612  53                 	db	83
   175  003613  53                 	db	83
   176  003614  00                 	db	0
   177                           
   178                           	psect	mediumconst
   179  00FCD6                     __pmediumconst:
   180                           	opt stack 0
   181  00FCD6  00                 	db	0
   182  00FCD7                     _dpowers:
   183                           	opt stack 0
   184  00FCD7  0001               	dw	1
   185  00FCD9  000A               	dw	10
   186  00FCDB  0064               	dw	100
   187  00FCDD  03E8               	dw	1000
   188  00FCDF  2710               	dw	10000
   189  00FCE1                     __end_of_dpowers:
   190                           	opt stack 0
   191  00FCE1                     STR_12:
   192  00FCE1  55                 	db	85	;'U'
   193  00FCE2  49                 	db	73	;'I'
   194  00FCE3  44                 	db	68	;'D'
   195  00FCE4  20                 	db	32
   196  00FCE5  3D                 	db	61	;'='
   197  00FCE6  20                 	db	32
   198  00FCE7  25                 	db	37
   199  00FCE8  63                 	db	99	;'c'
   200  00FCE9  2C                 	db	44
   201  00FCEA  20                 	db	32
   202  00FCEB  73                 	db	115	;'s'
   203  00FCEC  74                 	db	116	;'t'
   204  00FCED  61                 	db	97	;'a'
   205  00FCEE  72                 	db	114	;'r'
   206  00FCEF  74                 	db	116	;'t'
   207  00FCF0  5F                 	db	95	;'_'
   208  00FCF1  70                 	db	112	;'p'
   209  00FCF2  74                 	db	116	;'t'
   210  00FCF3  20                 	db	32
   211  00FCF4  3D                 	db	61	;'='
   212  00FCF5  20                 	db	32
   213  00FCF6  25                 	db	37
   214  00FCF7  64                 	db	100	;'d'
   215  00FCF8  2C                 	db	44
   216  00FCF9  20                 	db	32
   217  00FCFA  65                 	db	101	;'e'
   218  00FCFB  6E                 	db	110	;'n'
   219  00FCFC  64                 	db	100	;'d'
   220  00FCFD  5F                 	db	95	;'_'
   221  00FCFE  70                 	db	112	;'p'
   222  00FCFF  74                 	db	116	;'t'
   223  00FD00  20                 	db	32
   224  00FD01  3D                 	db	61	;'='
   225  00FD02  20                 	db	32
   226  00FD03  25                 	db	37
   227  00FD04  64                 	db	100	;'d'
   228  00FD05  0D                 	db	13
   229  00FD06  0A                 	db	10
   230  00FD07  00                 	db	0
   231  00FD08                     STR_59:
   232  00FD08  63                 	db	99	;'c'
   233  00FD09  6D                 	db	109	;'m'
   234  00FD0A  64                 	db	100	;'d'
   235  00FD0B  5F                 	db	95	;'_'
   236  00FD0C  64                 	db	100	;'d'
   237  00FD0D  61                 	db	97	;'a'
   238  00FD0E  74                 	db	116	;'t'
   239  00FD0F  61                 	db	97	;'a'
   240  00FD10  2E                 	db	46
   241  00FD11  73                 	db	115	;'s'
   242  00FD12  74                 	db	116	;'t'
   243  00FD13  61                 	db	97	;'a'
   244  00FD14  72                 	db	114	;'r'
   245  00FD15  74                 	db	116	;'t'
   246  00FD16  5F                 	db	95	;'_'
   247  00FD17  63                 	db	99	;'c'
   248  00FD18  6F                 	db	111	;'o'
   249  00FD19  6C                 	db	108	;'l'
   250  00FD1A  20                 	db	32
   251  00FD1B  3D                 	db	61	;'='
   252  00FD1C  20                 	db	32
   253  00FD1D  25                 	db	37
   254  00FD1E  64                 	db	100	;'d'
   255  00FD1F  2C                 	db	44
   256  00FD20  0D                 	db	13
   257  00FD21  0A                 	db	10
   258  00FD22  00                 	db	0
   259  00FD23                     STR_57:
   260  00FD23  63                 	db	99	;'c'
   261  00FD24  6D                 	db	109	;'m'
   262  00FD25  64                 	db	100	;'d'
   263  00FD26  5F                 	db	95	;'_'
   264  00FD27  64                 	db	100	;'d'
   265  00FD28  61                 	db	97	;'a'
   266  00FD29  74                 	db	116	;'t'
   267  00FD2A  61                 	db	97	;'a'
   268  00FD2B  2E                 	db	46
   269  00FD2C  73                 	db	115	;'s'
   270  00FD2D  74                 	db	116	;'t'
   271  00FD2E  61                 	db	97	;'a'
   272  00FD2F  72                 	db	114	;'r'
   273  00FD30  74                 	db	116	;'t'
   274  00FD31  5F                 	db	95	;'_'
   275  00FD32  72                 	db	114	;'r'
   276  00FD33  6F                 	db	111	;'o'
   277  00FD34  77                 	db	119	;'w'
   278  00FD35  20                 	db	32
   279  00FD36  3D                 	db	61	;'='
   280  00FD37  20                 	db	32
   281  00FD38  25                 	db	37
   282  00FD39  64                 	db	100	;'d'
   283  00FD3A  2C                 	db	44
   284  00FD3B  0D                 	db	13
   285  00FD3C  0A                 	db	10
   286  00FD3D  00                 	db	0
   287  00FD3E                     STR_6:
   288  00FD3E  64                 	db	100	;'d'
   289  00FD3F  69                 	db	105	;'i'
   290  00FD40  73                 	db	115	;'s'
   291  00FD41  70                 	db	112	;'p'
   292  00FD42  6C                 	db	108	;'l'
   293  00FD43  61                 	db	97	;'a'
   294  00FD44  79                 	db	121	;'y'
   295  00FD45  5F                 	db	95	;'_'
   296  00FD46  63                 	db	99	;'c'
   297  00FD47  68                 	db	104	;'h'
   298  00FD48  61                 	db	97	;'a'
   299  00FD49  72                 	db	114	;'r'
   300  00FD4A  5F                 	db	95	;'_'
   301  00FD4B  63                 	db	99	;'c'
   302  00FD4C  6F                 	db	111	;'o'
   303  00FD4D  75                 	db	117	;'u'
   304  00FD4E  6E                 	db	110	;'n'
   305  00FD4F  74                 	db	116	;'t'
   306  00FD50  20                 	db	32
   307  00FD51  3D                 	db	61	;'='
   308  00FD52  20                 	db	32
   309  00FD53  25                 	db	37
   310  00FD54  64                 	db	100	;'d'
   311  00FD55  0D                 	db	13
   312  00FD56  0A                 	db	10
   313  00FD57  00                 	db	0
   314  00FD58                     STR_8:
   315  00FD58  65                 	db	101	;'e'
   316  00FD59  78                 	db	120	;'x'
   317  00FD5A  5F                 	db	95	;'_'
   318  00FD5B  73                 	db	115	;'s'
   319  00FD5C  70                 	db	112	;'p'
   320  00FD5D  20                 	db	32
   321  00FD5E  3C                 	db	60	;'<'
   322  00FD5F  3D                 	db	61	;'='
   323  00FD60  20                 	db	32
   324  00FD61  6E                 	db	110	;'n'
   325  00FD62  65                 	db	101	;'e'
   326  00FD63  77                 	db	119	;'w'
   327  00FD64  5F                 	db	95	;'_'
   328  00FD65  65                 	db	101	;'e'
   329  00FD66  70                 	db	112	;'p'
   330  00FD67  20                 	db	32
   331  00FD68  3C                 	db	60	;'<'
   332  00FD69  3D                 	db	61	;'='
   333  00FD6A  65                 	db	101	;'e'
   334  00FD6B  78                 	db	120	;'x'
   335  00FD6C  5F                 	db	95	;'_'
   336  00FD6D  65                 	db	101	;'e'
   337  00FD6E  70                 	db	112	;'p'
   338  00FD6F  0D                 	db	13
   339  00FD70  0A                 	db	10
   340  00FD71  00                 	db	0
   341  00FD72                     STR_7:
   342  00FD72  65                 	db	101	;'e'
   343  00FD73  78                 	db	120	;'x'
   344  00FD74  5F                 	db	95	;'_'
   345  00FD75  73                 	db	115	;'s'
   346  00FD76  70                 	db	112	;'p'
   347  00FD77  20                 	db	32
   348  00FD78  3C                 	db	60	;'<'
   349  00FD79  3D                 	db	61	;'='
   350  00FD7A  20                 	db	32
   351  00FD7B  6E                 	db	110	;'n'
   352  00FD7C  65                 	db	101	;'e'
   353  00FD7D  77                 	db	119	;'w'
   354  00FD7E  5F                 	db	95	;'_'
   355  00FD7F  73                 	db	115	;'s'
   356  00FD80  70                 	db	112	;'p'
   357  00FD81  20                 	db	32
   358  00FD82  3C                 	db	60	;'<'
   359  00FD83  3D                 	db	61	;'='
   360  00FD84  65                 	db	101	;'e'
   361  00FD85  78                 	db	120	;'x'
   362  00FD86  5F                 	db	95	;'_'
   363  00FD87  65                 	db	101	;'e'
   364  00FD88  70                 	db	112	;'p'
   365  00FD89  0D                 	db	13
   366  00FD8A  0A                 	db	10
   367  00FD8B  00                 	db	0
   368  00FD8C                     STR_64:
   369  00FD8C  63                 	db	99	;'c'
   370  00FD8D  6D                 	db	109	;'m'
   371  00FD8E  64                 	db	100	;'d'
   372  00FD8F  5F                 	db	95	;'_'
   373  00FD90  64                 	db	100	;'d'
   374  00FD91  61                 	db	97	;'a'
   375  00FD92  74                 	db	116	;'t'
   376  00FD93  61                 	db	97	;'a'
   377  00FD94  2E                 	db	46
   378  00FD95  65                 	db	101	;'e'
   379  00FD96  6E                 	db	110	;'n'
   380  00FD97  64                 	db	100	;'d'
   381  00FD98  5F                 	db	95	;'_'
   382  00FD99  63                 	db	99	;'c'
   383  00FD9A  6F                 	db	111	;'o'
   384  00FD9B  6C                 	db	108	;'l'
   385  00FD9C  20                 	db	32
   386  00FD9D  3D                 	db	61	;'='
   387  00FD9E  20                 	db	32
   388  00FD9F  25                 	db	37
   389  00FDA0  64                 	db	100	;'d'
   390  00FDA1  2C                 	db	44
   391  00FDA2  0D                 	db	13
   392  00FDA3  0A                 	db	10
   393  00FDA4  00                 	db	0
   394  00FDA5                     STR_61:
   395  00FDA5  63                 	db	99	;'c'
   396  00FDA6  6D                 	db	109	;'m'
   397  00FDA7  64                 	db	100	;'d'
   398  00FDA8  5F                 	db	95	;'_'
   399  00FDA9  64                 	db	100	;'d'
   400  00FDAA  61                 	db	97	;'a'
   401  00FDAB  74                 	db	116	;'t'
   402  00FDAC  61                 	db	97	;'a'
   403  00FDAD  2E                 	db	46
   404  00FDAE  65                 	db	101	;'e'
   405  00FDAF  6E                 	db	110	;'n'
   406  00FDB0  64                 	db	100	;'d'
   407  00FDB1  5F                 	db	95	;'_'
   408  00FDB2  72                 	db	114	;'r'
   409  00FDB3  6F                 	db	111	;'o'
   410  00FDB4  77                 	db	119	;'w'
   411  00FDB5  20                 	db	32
   412  00FDB6  3D                 	db	61	;'='
   413  00FDB7  20                 	db	32
   414  00FDB8  25                 	db	37
   415  00FDB9  64                 	db	100	;'d'
   416  00FDBA  2C                 	db	44
   417  00FDBB  0D                 	db	13
   418  00FDBC  0A                 	db	10
   419  00FDBD  00                 	db	0
   420  00FDBE                     STR_23:
   421  00FDBE  64                 	db	100	;'d'
   422  00FDBF  69                 	db	105	;'i'
   423  00FDC0  73                 	db	115	;'s'
   424  00FDC1  70                 	db	112	;'p'
   425  00FDC2  6C                 	db	108	;'l'
   426  00FDC3  61                 	db	97	;'a'
   427  00FDC4  79                 	db	121	;'y'
   428  00FDC5  5F                 	db	95	;'_'
   429  00FDC6  66                 	db	102	;'f'
   430  00FDC7  72                 	db	114	;'r'
   431  00FDC8  71                 	db	113	;'q'
   432  00FDC9  20                 	db	32
   433  00FDCA  3D                 	db	61	;'='
   434  00FDCB  20                 	db	32
   435  00FDCC  25                 	db	37
   436  00FDCD  64                 	db	100	;'d'
   437  00FDCE  0D                 	db	13
   438  00FDCF  0A                 	db	10
   439  00FDD0  00                 	db	0
   440  00FDD1                     STR_17:
   441  00FDD1  73                 	db	115	;'s'
   442  00FDD2  69                 	db	105	;'i'
   443  00FDD3  7A                 	db	122	;'z'
   444  00FDD4  65                 	db	101	;'e'
   445  00FDD5  6F                 	db	111	;'o'
   446  00FDD6  66                 	db	102	;'f'
   447  00FDD7  28                 	db	40
   448  00FDD8  73                 	db	115	;'s'
   449  00FDD9  74                 	db	116	;'t'
   450  00FDDA  72                 	db	114	;'r'
   451  00FDDB  29                 	db	41
   452  00FDDC  20                 	db	32
   453  00FDDD  3D                 	db	61	;'='
   454  00FDDE  20                 	db	32
   455  00FDDF  25                 	db	37
   456  00FDE0  64                 	db	100	;'d'
   457  00FDE1  0D                 	db	13
   458  00FDE2  0A                 	db	10
   459  00FDE3  00                 	db	0
   460  00FDE4                     STR_133:
   461  00FDE4  49                 	db	73	;'I'
   462  00FDE5  6E                 	db	110	;'n'
   463  00FDE6  69                 	db	105	;'i'
   464  00FDE7  74                 	db	116	;'t'
   465  00FDE8  5F                 	db	95	;'_'
   466  00FDE9  63                 	db	99	;'c'
   467  00FDEA  6F                 	db	111	;'o'
   468  00FDEB  6D                 	db	109	;'m'
   469  00FDEC  70                 	db	112	;'p'
   470  00FDED  6C                 	db	108	;'l'
   471  00FDEE  65                 	db	101	;'e'
   472  00FDEF  74                 	db	116	;'t'
   473  00FDF0  65                 	db	101	;'e'
   474  00FDF1  2E                 	db	46
   475  00FDF2  2E                 	db	46
   476  00FDF3  0D                 	db	13
   477  00FDF4  0A                 	db	10
   478  00FDF5  00                 	db	0
   479  00FDF6                     STR_24:
   480  00FDF6  6F                 	db	111	;'o'
   481  00FDF7  76                 	db	118	;'v'
   482  00FDF8  65                 	db	101	;'e'
   483  00FDF9  72                 	db	114	;'r'
   484  00FDFA  5F                 	db	95	;'_'
   485  00FDFB  77                 	db	119	;'w'
   486  00FDFC  72                 	db	114	;'r'
   487  00FDFD  69                 	db	105	;'i'
   488  00FDFE  74                 	db	116	;'t'
   489  00FDFF  65                 	db	101	;'e'
   490  00FE00  20                 	db	32
   491  00FE01  3D                 	db	61	;'='
   492  00FE02  20                 	db	32
   493  00FE03  25                 	db	37
   494  00FE04  64                 	db	100	;'d'
   495  00FE05  0D                 	db	13
   496  00FE06  0A                 	db	10
   497  00FE07  00                 	db	0
   498  00FE08                     STR_3:
   499  00FE08  73                 	db	115	;'s'
   500  00FE09  74                 	db	116	;'t'
   501  00FE0A  72                 	db	114	;'r'
   502  00FE0B  69                 	db	105	;'i'
   503  00FE0C  6E                 	db	110	;'n'
   504  00FE0D  67                 	db	103	;'g'
   505  00FE0E  5F                 	db	95	;'_'
   506  00FE0F  63                 	db	99	;'c'
   507  00FE10  6F                 	db	111	;'o'
   508  00FE11  75                 	db	117	;'u'
   509  00FE12  6E                 	db	110	;'n'
   510  00FE13  74                 	db	116	;'t'
   511  00FE14  20                 	db	32
   512  00FE15  3D                 	db	61	;'='
   513  00FE16  20                 	db	32
   514  00FE17  25                 	db	37
   515  00FE18  64                 	db	100	;'d'
   516  00FE19  00                 	db	0
   517  00FE1A                     STR_22:
   518  00FE1A  64                 	db	100	;'d'
   519  00FE1B  69                 	db	105	;'i'
   520  00FE1C  72                 	db	114	;'r'
   521  00FE1D  65                 	db	101	;'e'
   522  00FE1E  63                 	db	99	;'c'
   523  00FE1F  74                 	db	116	;'t'
   524  00FE20  69                 	db	105	;'i'
   525  00FE21  6F                 	db	111	;'o'
   526  00FE22  6E                 	db	110	;'n'
   527  00FE23  20                 	db	32
   528  00FE24  3D                 	db	61	;'='
   529  00FE25  20                 	db	32
   530  00FE26  25                 	db	37
   531  00FE27  64                 	db	100	;'d'
   532  00FE28  0D                 	db	13
   533  00FE29  0A                 	db	10
   534  00FE2A  00                 	db	0
   535  00FE2B                     STR_4:
   536  00FE2B  75                 	db	117	;'u'
   537  00FE2C  69                 	db	105	;'i'
   538  00FE2D  64                 	db	100	;'d'
   539  00FE2E  5F                 	db	95	;'_'
   540  00FE2F  72                 	db	114	;'r'
   541  00FE30  61                 	db	97	;'a'
   542  00FE31  6E                 	db	110	;'n'
   543  00FE32  67                 	db	103	;'g'
   544  00FE33  65                 	db	101	;'e'
   545  00FE34  20                 	db	32
   546  00FE35  3D                 	db	61	;'='
   547  00FE36  20                 	db	32
   548  00FE37  25                 	db	37
   549  00FE38  64                 	db	100	;'d'
   550  00FE39  0D                 	db	13
   551  00FE3A  0A                 	db	10
   552  00FE3B  00                 	db	0
   553  00FE3C  6D                 	db	109	;'m'
   554  00FE3D  69                 	db	105	;'i'
   555  00FE3E  64                 	db	100	;'d'
   556  00FE3F  5F                 	db	95	;'_'
   557  00FE40  63                 	db	99	;'c'
   558  00FE41  68                 	db	104	;'h'
   559  00FE42  61                 	db	97	;'a'
   560  00FE43  72                 	db	114	;'r'
   561  00FE44  20                 	db	32
   562  00FE45  3D                 	db	61	;'='
   563  00FE46  20                 	db	32
   564  00FE47  25                 	db	37
   565  00FE48  64                 	db	100	;'d'
   566  00FE49  0D                 	db	13
   567  00FE4A  0A                 	db	10
   568  00FE4B  00                 	db	0
   569  00FE4C  25                 	db	37
   570  00FE4D  73                 	db	115	;'s'
   571  00FE4E  2C                 	db	44
   572  00FE4F  20                 	db	32
   573  00FE50  73                 	db	115	;'s'
   574  00FE51  74                 	db	116	;'t'
   575  00FE52  72                 	db	114	;'r'
   576  00FE53  6C                 	db	108	;'l'
   577  00FE54  65                 	db	101	;'e'
   578  00FE55  6E                 	db	110	;'n'
   579  00FE56  20                 	db	32
   580  00FE57  25                 	db	37
   581  00FE58  64                 	db	100	;'d'
   582  00FE59  0D                 	db	13
   583  00FE5A  0A                 	db	10
   584  00FE5B  00                 	db	0
   585  00FE5C                     STR_14:
   586  00FE5C  63                 	db	99	;'c'
   587  00FE5D  6F                 	db	111	;'o'
   588  00FE5E  6E                 	db	110	;'n'
   589  00FE5F  66                 	db	102	;'f'
   590  00FE60  6C                 	db	108	;'l'
   591  00FE61  69                 	db	105	;'i'
   592  00FE62  63                 	db	99	;'c'
   593  00FE63  74                 	db	116	;'t'
   594  00FE64  3A                 	db	58	;':'
   595  00FE65  20                 	db	32
   596  00FE66  75                 	db	117	;'u'
   597  00FE67  69                 	db	105	;'i'
   598  00FE68  64                 	db	100	;'d'
   599  00FE69  0D                 	db	13
   600  00FE6A  0A                 	db	10
   601  00FE6B  00                 	db	0
   602  00FE6C                     STR_124:
   603  00FE6C  45                 	db	69	;'E'
   604  00FE6D  52                 	db	82	;'R'
   605  00FE6E  52                 	db	82	;'R'
   606  00FE6F  5F                 	db	95	;'_'
   607  00FE70  53                 	db	83	;'S'
   608  00FE71  43                 	db	67	;'C'
   609  00FE72  52                 	db	82	;'R'
   610  00FE73  4F                 	db	79	;'O'
   611  00FE74  4C                 	db	76	;'L'
   612  00FE75  4C                 	db	76	;'L'
   613  00FE76  5F                 	db	95	;'_'
   614  00FE77  53                 	db	83	;'S'
   615  00FE78  45                 	db	69	;'E'
   616  00FE79  54                 	db	84	;'T'
   617  00FE7A  00                 	db	0
   618  00FE7B                     STR_52:
   619  00FE7B  73                 	db	115	;'s'
   620  00FE7C  63                 	db	99	;'c'
   621  00FE7D  72                 	db	114	;'r'
   622  00FE7E  6F                 	db	111	;'o'
   623  00FE7F  6C                 	db	108	;'l'
   624  00FE80  6C                 	db	108	;'l'
   625  00FE81  20                 	db	32
   626  00FE82  3D                 	db	61	;'='
   627  00FE83  20                 	db	32
   628  00FE84  25                 	db	37
   629  00FE85  64                 	db	100	;'d'
   630  00FE86  2C                 	db	44
   631  00FE87  20                 	db	32
   632  00FE88  00                 	db	0
   633  00FE89                     STR_87:
   634  00FE89  0D                 	db	13
   635  00FE8A  0A                 	db	10
   636  00FE8B  25                 	db	37
   637  00FE8C  73                 	db	115	;'s'
   638  00FE8D  2E                 	db	46
   639  00FE8E  2E                 	db	46
   640  00FE8F  2C                 	db	44
   641  00FE90  20                 	db	32
   642  00FE91  4F                 	db	79	;'O'
   643  00FE92  4B                 	db	75	;'K'
   644  00FE93  0D                 	db	13
   645  00FE94  0A                 	db	10
   646  00FE95  00                 	db	0
   647  00FE96                     STR_55:
   648  00FE96  75                 	db	117	;'u'
   649  00FE97  69                 	db	105	;'i'
   650  00FE98  64                 	db	100	;'d'
   651  00FE99  20                 	db	32
   652  00FE9A  3D                 	db	61	;'='
   653  00FE9B  20                 	db	32
   654  00FE9C  25                 	db	37
   655  00FE9D  64                 	db	100	;'d'
   656  00FE9E  2C                 	db	44
   657  00FE9F  0D                 	db	13
   658  00FEA0  0A                 	db	10
   659  00FEA1  00                 	db	0
   660  00FEA2                     STR_26:
   661  00FEA2  43                 	db	67	;'C'
   662  00FEA3  6F                 	db	111	;'o'
   663  00FEA4  6C                 	db	108	;'l'
   664  00FEA5  32                 	db	50	;'2'
   665  00FEA6  20                 	db	32
   666  00FEA7  3D                 	db	61	;'='
   667  00FEA8  20                 	db	32
   668  00FEA9  25                 	db	37
   669  00FEAA  64                 	db	100	;'d'
   670  00FEAB  0D                 	db	13
   671  00FEAC  0A                 	db	10
   672  00FEAD  00                 	db	0
   673  00FEAE                     STR_21:
   674  00FEAE  72                 	db	114	;'r'
   675  00FEAF  6F                 	db	111	;'o'
   676  00FEB0  77                 	db	119	;'w'
   677  00FEB1  32                 	db	50	;'2'
   678  00FEB2  20                 	db	32
   679  00FEB3  3D                 	db	61	;'='
   680  00FEB4  20                 	db	32
   681  00FEB5  25                 	db	37
   682  00FEB6  64                 	db	100	;'d'
   683  00FEB7  0D                 	db	13
   684  00FEB8  0A                 	db	10
   685  00FEB9  00                 	db	0
   686  00FEBA                     STR_130:
   687  00FEBA  49                 	db	73	;'I'
   688  00FEBB  6E                 	db	110	;'n'
   689  00FEBC  69                 	db	105	;'i'
   690  00FEBD  74                 	db	116	;'t'
   691  00FEBE  5F                 	db	95	;'_'
   692  00FEBF  44                 	db	68	;'D'
   693  00FEC0  6F                 	db	111	;'o'
   694  00FEC1  6E                 	db	110	;'n'
   695  00FEC2  65                 	db	101	;'e'
   696  00FEC3  0D                 	db	13
   697  00FEC4  0A                 	db	10
   698  00FEC5  00                 	db	0
   699  00FEC6                     STR_25:
   700  00FEC6  63                 	db	99	;'c'
   701  00FEC7  6F                 	db	111	;'o'
   702  00FEC8  6C                 	db	108	;'l'
   703  00FEC9  31                 	db	49	;'1'
   704  00FECA  20                 	db	32
   705  00FECB  3D                 	db	61	;'='
   706  00FECC  20                 	db	32
   707  00FECD  25                 	db	37
   708  00FECE  73                 	db	115	;'s'
   709  00FECF  0D                 	db	13
   710  00FED0  0A                 	db	10
   711  00FED1  00                 	db	0
   712  00FED2                     STR_20:
   713  00FED2  72                 	db	114	;'r'
   714  00FED3  6F                 	db	111	;'o'
   715  00FED4  77                 	db	119	;'w'
   716  00FED5  31                 	db	49	;'1'
   717  00FED6  20                 	db	32
   718  00FED7  3D                 	db	61	;'='
   719  00FED8  20                 	db	32
   720  00FED9  25                 	db	37
   721  00FEDA  73                 	db	115	;'s'
   722  00FEDB  0D                 	db	13
   723  00FEDC  0A                 	db	10
   724  00FEDD  00                 	db	0
   725  00FEDE                     STR_39:
   726  00FEDE  74                 	db	116	;'t'
   727  00FEDF  65                 	db	101	;'e'
   728  00FEE0  6D                 	db	109	;'m'
   729  00FEE1  70                 	db	112	;'p'
   730  00FEE2  20                 	db	32
   731  00FEE3  3D                 	db	61	;'='
   732  00FEE4  20                 	db	32
   733  00FEE5  25                 	db	37
   734  00FEE6  73                 	db	115	;'s'
   735  00FEE7  2C                 	db	44
   736  00FEE8  20                 	db	32
   737  00FEE9  00                 	db	0
   738  00FEEA                     STR_122:
   739  00FEEA  45                 	db	69	;'E'
   740  00FEEB  52                 	db	82	;'R'
   741  00FEEC  52                 	db	82	;'R'
   742  00FEED  5F                 	db	95	;'_'
   743  00FEEE  52                 	db	82	;'R'
   744  00FEEF  4F                 	db	79	;'O'
   745  00FEF0  57                 	db	87	;'W'
   746  00FEF1  5F                 	db	95	;'_'
   747  00FEF2  43                 	db	67	;'C'
   748  00FEF3  4F                 	db	79	;'O'
   749  00FEF4  4C                 	db	76	;'L'
   750  00FEF5  00                 	db	0
   751  00FEF6                     STR_129:
   752  00FEF6  45                 	db	69	;'E'
   753  00FEF7  52                 	db	82	;'R'
   754  00FEF8  52                 	db	82	;'R'
   755  00FEF9  5F                 	db	95	;'_'
   756  00FEFA  43                 	db	67	;'C'
   757  00FEFB  4D                 	db	77	;'M'
   758  00FEFC  44                 	db	68	;'D'
   759  00FEFD  5F                 	db	95	;'_'
   760  00FEFE  4C                 	db	76	;'L'
   761  00FEFF  45                 	db	69	;'E'
   762  00FF00  4E                 	db	78	;'N'
   763  00FF01  00                 	db	0
   764  00FF02                     STR_120:
   765  00FF02  45                 	db	69	;'E'
   766  00FF03  52                 	db	82	;'R'
   767  00FF04  52                 	db	82	;'R'
   768  00FF05  5F                 	db	95	;'_'
   769  00FF06  53                 	db	83	;'S'
   770  00FF07  54                 	db	84	;'T'
   771  00FF08  52                 	db	82	;'R'
   772  00FF09  5F                 	db	95	;'_'
   773  00FF0A  53                 	db	83	;'S'
   774  00FF0B  45                 	db	69	;'E'
   775  00FF0C  54                 	db	84	;'T'
   776  00FF0D  00                 	db	0
   777  00FF0E                     STR_101:
   778  00FF0E  25                 	db	37
   779  00FF0F  64                 	db	100	;'d'
   780  00FF10  2C                 	db	44
   781  00FF11  25                 	db	37
   782  00FF12  63                 	db	99	;'c'
   783  00FF13  2D                 	db	45
   784  00FF14  25                 	db	37
   785  00FF15  63                 	db	99	;'c'
   786  00FF16  0D                 	db	13
   787  00FF17  0A                 	db	10
   788  00FF18  00                 	db	0
   789  00FF19                     STR_63:
   790  00FF19  63                 	db	99	;'c'
   791  00FF1A  6F                 	db	111	;'o'
   792  00FF1B  6C                 	db	108	;'l'
   793  00FF1C  20                 	db	32
   794  00FF1D  3D                 	db	61	;'='
   795  00FF1E  20                 	db	32
   796  00FF1F  25                 	db	37
   797  00FF20  73                 	db	115	;'s'
   798  00FF21  0D                 	db	13
   799  00FF22  0A                 	db	10
   800  00FF23  00                 	db	0
   801  00FF24                     STR_44:
   802  00FF24  73                 	db	115	;'s'
   803  00FF25  74                 	db	116	;'t'
   804  00FF26  72                 	db	114	;'r'
   805  00FF27  20                 	db	32
   806  00FF28  3D                 	db	61	;'='
   807  00FF29  20                 	db	32
   808  00FF2A  25                 	db	37
   809  00FF2B  73                 	db	115	;'s'
   810  00FF2C  0D                 	db	13
   811  00FF2D  0A                 	db	10
   812  00FF2E  00                 	db	0
   813  00FF2F                     STR_42:
   814  00FF2F  75                 	db	117	;'u'
   815  00FF30  69                 	db	105	;'i'
   816  00FF31  64                 	db	100	;'d'
   817  00FF32  20                 	db	32
   818  00FF33  3D                 	db	61	;'='
   819  00FF34  20                 	db	32
   820  00FF35  25                 	db	37
   821  00FF36  64                 	db	100	;'d'
   822  00FF37  2C                 	db	44
   823  00FF38  20                 	db	32
   824  00FF39  00                 	db	0
   825  00FF3A                     STR_69:
   826  00FF3A  64                 	db	100	;'d'
   827  00FF3B  61                 	db	97	;'a'
   828  00FF3C  74                 	db	116	;'t'
   829  00FF3D  61                 	db	97	;'a'
   830  00FF3E  3D                 	db	61	;'='
   831  00FF3F  25                 	db	37
   832  00FF40  73                 	db	115	;'s'
   833  00FF41  0D                 	db	13
   834  00FF42  0A                 	db	10
   835  00FF43  00                 	db	0
   836  00FF44                     STR_46:
   837  00FF44  25                 	db	37
   838  00FF45  73                 	db	115	;'s'
   839  00FF46  2E                 	db	46
   840  00FF47  2E                 	db	46
   841  00FF48  2E                 	db	46
   842  00FF49  34                 	db	52	;'4'
   843  00FF4A  0D                 	db	13
   844  00FF4B  0A                 	db	10
   845  00FF4C  00                 	db	0
   846  00FF4D                     STR_48:
   847  00FF4D  25                 	db	37
   848  00FF4E  73                 	db	115	;'s'
   849  00FF4F  2E                 	db	46
   850  00FF50  2E                 	db	46
   851  00FF51  2E                 	db	46
   852  00FF52  35                 	db	53	;'5'
   853  00FF53  0D                 	db	13
   854  00FF54  0A                 	db	10
   855  00FF55  00                 	db	0
   856  00FF56                     STR_51:
   857  00FF56  25                 	db	37
   858  00FF57  73                 	db	115	;'s'
   859  00FF58  2E                 	db	46
   860  00FF59  2E                 	db	46
   861  00FF5A  2E                 	db	46
   862  00FF5B  36                 	db	54	;'6'
   863  00FF5C  0D                 	db	13
   864  00FF5D  0A                 	db	10
   865  00FF5E  00                 	db	0
   866  00FF5F                     STR_67:
   867  00FF5F  43                 	db	67	;'C'
   868  00FF60  4D                 	db	77	;'M'
   869  00FF61  44                 	db	68	;'D'
   870  00FF62  3D                 	db	61	;'='
   871  00FF63  25                 	db	37
   872  00FF64  73                 	db	115	;'s'
   873  00FF65  0D                 	db	13
   874  00FF66  0A                 	db	10
   875  00FF67  00                 	db	0
   876  00FF68                     STR_2:
   877  00FF68  63                 	db	99	;'c'
   878  00FF69  6F                 	db	111	;'o'
   879  00FF6A  6C                 	db	108	;'l'
   880  00FF6B  20                 	db	32
   881  00FF6C  3D                 	db	61	;'='
   882  00FF6D  20                 	db	32
   883  00FF6E  25                 	db	37
   884  00FF6F  64                 	db	100	;'d'
   885  00FF70  00                 	db	0
   886  00FF71                     STR_1:
   887  00FF71  72                 	db	114	;'r'
   888  00FF72  6F                 	db	111	;'o'
   889  00FF73  77                 	db	119	;'w'
   890  00FF74  20                 	db	32
   891  00FF75  3D                 	db	61	;'='
   892  00FF76  20                 	db	32
   893  00FF77  25                 	db	37
   894  00FF78  64                 	db	100	;'d'
   895  00FF79  00                 	db	0
   896  00FF7A                     STR_32:
   897  00FF7A  2E                 	db	46
   898  00FF7B  2E                 	db	46
   899  00FF7C  2E                 	db	46
   900  00FF7D  2E                 	db	46
   901  00FF7E  2E                 	db	46
   902  00FF7F  0D                 	db	13
   903  00FF80  0A                 	db	10
   904  00FF81  00                 	db	0
   905  00FF82                     STR_27:
   906  00FF82  25                 	db	37
   907  00FF83  73                 	db	115	;'s'
   908  00FF84  2E                 	db	46
   909  00FF85  2E                 	db	46
   910  00FF86  32                 	db	50	;'2'
   911  00FF87  0D                 	db	13
   912  00FF88  0A                 	db	10
   913  00FF89  00                 	db	0
   914  00FF8A                     STR_45:
   915  00FF8A  53                 	db	83	;'S'
   916  00FF8B  44                 	db	68	;'D'
   917  00FF8C  53                 	db	83	;'S'
   918  00FF8D  43                 	db	67	;'C'
   919  00FF8E  52                 	db	82	;'R'
   920  00FF8F  4F                 	db	79	;'O'
   921  00FF90  4C                 	db	76	;'L'
   922  00FF91  00                 	db	0
   923  00FF92                     STR_134:
   924  00FF92  28                 	db	40
   925  00FF93  6E                 	db	110	;'n'
   926  00FF94  75                 	db	117	;'u'
   927  00FF95  6C                 	db	108	;'l'
   928  00FF96  6C                 	db	108	;'l'
   929  00FF97  29                 	db	41
   930  00FF98  00                 	db	0
   931  00FF99                     STR_35:
   932  00FF99  25                 	db	37
   933  00FF9A  73                 	db	115	;'s'
   934  00FF9B  2E                 	db	46
   935  00FF9C  2E                 	db	46
   936  00FF9D  0D                 	db	13
   937  00FF9E  0A                 	db	10
   938  00FF9F  00                 	db	0
   939  00FFA0                     STR_119:
   940  00FFA0  0D                 	db	13
   941  00FFA1  0A                 	db	10
   942  00FFA2  25                 	db	37
   943  00FFA3  73                 	db	115	;'s'
   944  00FFA4  0D                 	db	13
   945  00FFA5  0A                 	db	10
   946  00FFA6  00                 	db	0
   947  00FFA7                     STR_28:
   948  00FFA7  2D                 	db	45
   949  00FFA8  27                 	db	39
   950  00FFA9  2C                 	db	44
   951  00FFAA  20                 	db	32
   952  00FFAB  2F                 	db	47
   953  00FFAC  3D                 	db	61	;'='
   954  00FFAD  00                 	db	0
   955  00FFAE                     STR_53:
   956  00FFAE  53                 	db	83	;'S'
   957  00FFAF  44                 	db	68	;'D'
   958  00FFB0  53                 	db	83	;'S'
   959  00FFB1  45                 	db	69	;'E'
   960  00FFB2  52                 	db	82	;'R'
   961  00FFB3  43                 	db	67	;'C'
   962  00FFB4  00                 	db	0
   963  00FFB5                     STR_65:
   964  00FFB5  55                 	db	85	;'U'
   965  00FFB6  50                 	db	80	;'P'
   966  00FFB7  44                 	db	68	;'D'
   967  00FFB8  41                 	db	65	;'A'
   968  00FFB9  54                 	db	84	;'T'
   969  00FFBA  45                 	db	69	;'E'
   970  00FFBB  00                 	db	0
   971  00FFBC                     STR_31:
   972  00FFBC  4C                 	db	76	;'L'
   973  00FFBD  43                 	db	67	;'C'
   974  00FFBE  44                 	db	68	;'D'
   975  00FFBF  53                 	db	83	;'S'
   976  00FFC0  3F                 	db	63	;'?'
   977  00FFC1  00                 	db	0
   978  00FFC2                     STR_37:
   979  00FFC2  47                 	db	71	;'G'
   980  00FFC3  4D                 	db	77	;'M'
   981  00FFC4  44                 	db	68	;'D'
   982  00FFC5  53                 	db	83	;'S'
   983  00FFC6  3F                 	db	63	;'?'
   984  00FFC7  00                 	db	0
   985  00FFC8                     STR_116:
   986  00FFC8  45                 	db	69	;'E'
   987  00FFC9  52                 	db	82	;'R'
   988  00FFCA  52                 	db	82	;'R'
   989  00FFCB  4F                 	db	79	;'O'
   990  00FFCC  52                 	db	82	;'R'
   991  00FFCD  00                 	db	0
   992  00FFCE                     STR_38:
   993  00FFCE  53                 	db	83	;'S'
   994  00FFCF  44                 	db	68	;'D'
   995  00FFD0  53                 	db	83	;'S'
   996  00FFD1  54                 	db	84	;'T'
   997  00FFD2  52                 	db	82	;'R'
   998  00FFD3  00                 	db	0
   999  00FFD4                     STR_128:
  1000  00FFD4  4B                 	db	75	;'K'
  1001  00FFD5  4C                 	db	76	;'L'
  1002  00FFD6  4D                 	db	77	;'M'
  1003  00FFD7  2B                 	db	43
  1004  00FFD8  00                 	db	0
  1005  00FFD9                     STR_66:
  1006  00FFD9  53                 	db	83	;'S'
  1007  00FFDA  53                 	db	83	;'S'
  1008  00FFDB  54                 	db	84	;'T'
  1009  00FFDC  52                 	db	82	;'R'
  1010  00FFDD  00                 	db	0
  1011  00FFDE                     STR_33:
  1012  00FFDE  4C                 	db	76	;'L'
  1013  00FFDF  43                 	db	67	;'C'
  1014  00FFE0  44                 	db	68	;'D'
  1015  00FFE1  53                 	db	83	;'S'
  1016  00FFE2  00                 	db	0
  1017  00FFE3                     STR_15:
  1018  00FFE3  25                 	db	37
  1019  00FFE4  63                 	db	99	;'c'
  1020  00FFE5  2C                 	db	44
  1021  00FFE6  20                 	db	32
  1022  00FFE7  00                 	db	0
  1023  00FFE8                     STR_5:
  1024  00FFE8  34                 	db	52	;'4'
  1025  00FFE9  2C                 	db	44
  1026  00FFEA  32                 	db	50	;'2'
  1027  00FFEB  30                 	db	48	;'0'
  1028  00FFEC  00                 	db	0
  1029  00FFED                     STR_29:
  1030  00FFED  4D                 	db	77	;'M'
  1031  00FFEE  43                 	db	67	;'C'
  1032  00FFEF  3F                 	db	63	;'?'
  1033  00FFF0  00                 	db	0
  1034  00FFF1                     STR_30:
  1035  00FFF1  4D                 	db	77	;'M'
  1036  00FFF2  52                 	db	82	;'R'
  1037  00FFF3  3F                 	db	63	;'?'
  1038  00FFF4  00                 	db	0
  1039  00FFF5                     STR_82:
  1040  00FFF5  4B                 	db	75	;'K'
  1041  00FFF6  4C                 	db	76	;'L'
  1042  00FFF7  4D                 	db	77	;'M'
  1043  00FFF8  00                 	db	0
  1044  00FFF9                     STR_126:
  1045  00FFF9  25                 	db	37
  1046  00FFFA  63                 	db	99	;'c'
  1047  00FFFB  00                 	db	0
  1048  00FFFC                     STR_43:
  1049  00FFFC  2C                 	db	44
  1050  00FFFD  00                 	db	0
  1051  0000                     
  1052                           ; #config settings
  1053  00FFFE  00                 	db	0	; dummy byte at the end
  1054  0000                     
  1055                           	psect	nvCOMRAM
  1056  000049                     __pnvCOMRAM:
  1057                           	opt stack 0
  1058  000049                     _timer0ReloadVal:
  1059                           	opt stack 0
  1060  000049                     	ds	2
  1061                           
  1062                           	psect	nvBANK0
  1063  0000F6                     __pnvBANK0:
  1064                           	opt stack 0
  1065  0000F6                     _TMR0_InterruptHandler:
  1066                           	opt stack 0
  1067  0000F6                     	ds	2
  1068  0000F8                     _timer1ReloadVal:
  1069                           	opt stack 0
  1070  0000F8                     	ds	2
  1071  0000FA                     _timer5ReloadVal:
  1072                           	opt stack 0
  1073  0000FA                     	ds	2
  1074  0000FC                     _eusart1TxBufferRemaining:
  1075                           	opt stack 0
  1076  0000FC                     	ds	1
  1077  0000                     _TMR5	set	3919
  1078  0000                     _T5GCONbits	set	3917
  1079  0000                     _T5CONbits	set	3918
  1080  0000                     _TMR5L	set	3919
  1081  0000                     _TMR5H	set	3920
  1082  0000                     _T5GCON	set	3917
  1083  0000                     _T5CON	set	3918
  1084  0000                     _ANSELA	set	3896
  1085  0000                     _ANSELE	set	3900
  1086  0000                     _ANSELD	set	3899
  1087  0000                     _ANSELB	set	3897
  1088  0000                     _ANSELC	set	3898
  1089  0000                     _TMR1	set	4046
  1090  0000                     _LATEbits	set	3981
  1091  0000                     _PORTD	set	3971
  1092  0000                     _PORTDbits	set	3971
  1093  0000                     _PORTAbits	set	3968
  1094  0000                     _T0CONbits	set	4053
  1095  0000                     _TMR0L	set	4054
  1096  0000                     _TMR0H	set	4055
  1097  0000                     _T0CON	set	4053
  1098  0000                     _T1GCONbits	set	4044
  1099  0000                     _T1CONbits	set	4045
  1100  0000                     _TMR1L	set	4046
  1101  0000                     _TMR1H	set	4047
  1102  0000                     _T1GCON	set	4044
  1103  0000                     _T1CON	set	4045
  1104  0000                     _RCREG1	set	4014
  1105  0000                     _RCSTA1bits	set	4011
  1106  0000                     _TXREG1	set	4013
  1107  0000                     _SPBRGH1	set	4016
  1108  0000                     _SPBRG1	set	4015
  1109  0000                     _TXSTA1	set	4012
  1110  0000                     _RCSTA1	set	4011
  1111  0000                     _BAUDCON1	set	4024
  1112  0000                     _OSCTUNE	set	3995
  1113  0000                     _OSCCON2	set	4050
  1114  0000                     _OSCCON	set	4051
  1115  0000                     _PIR5bits	set	3966
  1116  0000                     _PIR1bits	set	3998
  1117  0000                     _PIE1bits	set	3997
  1118  0000                     _INTCONbits	set	4082
  1119  0000                     _RCONbits	set	4048
  1120  0000                     _INTCON2bits	set	4081
  1121  0000                     _WPUB	set	3937
  1122  0000                     _TRISD	set	3989
  1123  0000                     _TRISC	set	3988
  1124  0000                     _TRISB	set	3987
  1125  0000                     _TRISA	set	3986
  1126  0000                     _TRISE	set	3990
  1127  0000                     _LATC	set	3979
  1128  0000                     _LATB	set	3978
  1129  0000                     _LATA	set	3977
  1130  0000                     _LATD	set	3980
  1131  0000                     _LATE	set	3981
  1132                           
  1133                           	psect	cinit
  1134  002CE8                     __pcinit:
  1135                           	opt stack 0
  1136  002CE8                     start_initialization:
  1137                           	opt stack 0
  1138  002CE8                     __initialization:
  1139                           	opt stack 0
  1140                           
  1141                           ; Initialize objects allocated to BANK0 (17 bytes)
  1142                           ; load TBLPTR registers with __pidataBANK0
  1143  002CE8  0E04               	movlw	low __pidataBANK0
  1144  002CEA  6EF6               	movwf	tblptrl,c
  1145  002CEC  0E36               	movlw	high __pidataBANK0
  1146  002CEE  6EF7               	movwf	tblptrh,c
  1147  002CF0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1148  002CF2  6EF8               	movwf	tblptru,c
  1149  002CF4  EE00  F0E5         	lfsr	0,__pdataBANK0
  1150  002CF8  EE10 F011          	lfsr	1,17
  1151  002CFC                     copy_data0:
  1152  002CFC  0009               	tblrd		*+
  1153  002CFE  CFF5 FFEE          	movff	tablat,postinc0
  1154  002D02  50E5               	movf	postdec1,w,c
  1155  002D04  50E1               	movf	fsr1l,w,c
  1156  002D06  E1FA               	bnz	copy_data0
  1157                           
  1158                           ; Initialize objects allocated to COMRAM (1 bytes)
  1159                           ; load TBLPTR registers with __pidataCOMRAM
  1160  002D08  0E06               	movlw	low __pidataCOMRAM
  1161  002D0A  6EF6               	movwf	tblptrl,c
  1162  002D0C  0E37               	movlw	high __pidataCOMRAM
  1163  002D0E  6EF7               	movwf	tblptrh,c
  1164  002D10  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1165  002D12  6EF8               	movwf	tblptru,c
  1166  002D14  0009               	tblrd		*+	;fetch initializer
  1167  002D16  CFF5 F04B          	movff	tablat,__pdataCOMRAM
  1168                           
  1169                           ; Clear objects allocated to BIGRAM (1100 bytes)
  1170  002D1A  EE02  F096         	lfsr	0,__pbssBIGRAM
  1171  002D1E  EE14 F04C          	lfsr	1,1100
  1172  002D22                     clear_0:
  1173  002D22  6AEE               	clrf	postinc0,c
  1174  002D24  50E5               	movf	postdec1,w,c
  1175  002D26  50E1               	movf	fsr1l,w,c
  1176  002D28  E1FC               	bnz	clear_0
  1177  002D2A  50E2               	movf	fsr1h,w,c
  1178  002D2C  E1FA               	bnz	clear_0
  1179                           
  1180                           ; Clear objects allocated to BANK2 (150 bytes)
  1181  002D2E  EE02  F000         	lfsr	0,__pbssBANK2
  1182  002D32  0E96               	movlw	150
  1183  002D34                     clear_1:
  1184  002D34  6AEE               	clrf	postinc0,c
  1185  002D36  06E8               	decf	wreg,f,c
  1186  002D38  E1FD               	bnz	clear_1
  1187                           
  1188                           ; Clear objects allocated to BANK1 (160 bytes)
  1189  002D3A  EE01  F000         	lfsr	0,__pbssBANK1
  1190  002D3E  0EA0               	movlw	160
  1191  002D40                     clear_2:
  1192  002D40  6AEE               	clrf	postinc0,c
  1193  002D42  06E8               	decf	wreg,f,c
  1194  002D44  E1FD               	bnz	clear_2
  1195                           
  1196                           ; Clear objects allocated to BANK0 (102 bytes)
  1197  002D46  EE00  F060         	lfsr	0,__pbssBANK0
  1198  002D4A  0E66               	movlw	102
  1199  002D4C                     clear_3:
  1200  002D4C  6AEE               	clrf	postinc0,c
  1201  002D4E  06E8               	decf	wreg,f,c
  1202  002D50  E1FD               	bnz	clear_3
  1203                           
  1204                           ; Clear objects allocated to COMRAM (16 bytes)
  1205  002D52  EE00  F039         	lfsr	0,__pbssCOMRAM
  1206  002D56  0E10               	movlw	16
  1207  002D58                     clear_4:
  1208  002D58  6AEE               	clrf	postinc0,c
  1209  002D5A  06E8               	decf	wreg,f,c
  1210  002D5C  E1FD               	bnz	clear_4
  1211  002D5E                     end_of_initialization:
  1212                           	opt stack 0
  1213  002D5E                     __end_of__initialization:
  1214                           	opt stack 0
  1215  002D5E  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1216  002D60  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1217  002D62  0100               	movlb	0
  1218  002D64  EF7C  F017         	goto	_main	;jump to C main() function
  1219                           tblptru	equ	0xFF8
  1220                           tblptrh	equ	0xFF7
  1221                           tblptrl	equ	0xFF6
  1222                           tablat	equ	0xFF5
  1223                           postinc0	equ	0xFEE
  1224                           wreg	equ	0xFE8
  1225                           postdec1	equ	0xFE5
  1226                           fsr1h	equ	0xFE2
  1227                           fsr1l	equ	0xFE1
  1228                           
  1229                           	psect	bssCOMRAM
  1230  000039                     __pbssCOMRAM:
  1231                           	opt stack 0
  1232  000039                     strtok@sp:
  1233                           	opt stack 0
  1234  000039                     	ds	2
  1235  00003B                     _conflict_data_count:
  1236                           	opt stack 0
  1237  00003B                     	ds	1
  1238  00003C                     _data_count:
  1239                           	opt stack 0
  1240  00003C                     	ds	1
  1241  00003D                     _LCD_20x4_DISPLAY:
  1242                           	opt stack 0
  1243  00003D                     	ds	1
  1244  00003E                     _LCD_16x2_DISPLAY:
  1245                           	opt stack 0
  1246  00003E                     	ds	1
  1247  00003F                     _eusart1RxCount:
  1248                           	opt stack 0
  1249  00003F                     	ds	1
  1250  000040                     _eusart1RxTail:
  1251                           	opt stack 0
  1252  000040                     	ds	1
  1253  000041                     _eusart1RxHead:
  1254                           	opt stack 0
  1255  000041                     	ds	1
  1256  000042                     _eusart1TxTail:
  1257                           	opt stack 0
  1258  000042                     	ds	1
  1259  000043                     _eusart1TxHead:
  1260                           	opt stack 0
  1261  000043                     	ds	1
  1262  000044                     _clcd_config_data:
  1263                           	opt stack 0
  1264  000044                     	ds	5
  1265                           tblptru	equ	0xFF8
  1266                           tblptrh	equ	0xFF7
  1267                           tblptrl	equ	0xFF6
  1268                           tablat	equ	0xFF5
  1269                           postinc0	equ	0xFEE
  1270                           wreg	equ	0xFE8
  1271                           postdec1	equ	0xFE5
  1272                           fsr1h	equ	0xFE2
  1273                           fsr1l	equ	0xFE1
  1274                           
  1275                           	psect	dataCOMRAM
  1276  00004B                     __pdataCOMRAM:
  1277                           	opt stack 0
  1278  00004B                     	ds	1
  1279                           tblptru	equ	0xFF8
  1280                           tblptrh	equ	0xFF7
  1281                           tblptrl	equ	0xFF6
  1282                           tablat	equ	0xFF5
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           postdec1	equ	0xFE5
  1286                           fsr1h	equ	0xFE2
  1287                           fsr1l	equ	0xFE1
  1288                           
  1289                           	psect	bssBANK0
  1290  000060                     __pbssBANK0:
  1291                           	opt stack 0
  1292  000060                     _eusart1RxBuffer:
  1293                           	opt stack 0
  1294  000060                     	ds	8
  1295  000068                     _eusart1TxBuffer:
  1296                           	opt stack 0
  1297  000068                     	ds	8
  1298  000070                     	ds	2
  1299  000072                     cmd_consol_task@i:
  1300                           	opt stack 0
  1301  000072                     	ds	2
  1302  000074                     _display_struct_count:
  1303                           	opt stack 0
  1304  000074                     	ds	2
  1305  000076                     _print_data_ready:
  1306                           	opt stack 0
  1307  000076                     	ds	2
  1308  000078                     _TMR1_InterruptHandler:
  1309                           	opt stack 0
  1310  000078                     	ds	2
  1311  00007A                     _TMR5_InterruptHandler:
  1312                           	opt stack 0
  1313  00007A                     	ds	2
  1314  00007C                     	ds	1
  1315  00007D                     _display:
  1316                           	opt stack 0
  1317  00007D                     	ds	1
  1318  00007E                     _cmd_consol_state:
  1319                           	opt stack 0
  1320  00007E                     	ds	1
  1321  00007F                     _check:
  1322                           	opt stack 0
  1323  00007F                     	ds	1
  1324  000080                     _clcd_init_col:
  1325                           	opt stack 0
  1326  000080                     	ds	1
  1327  000081                     _clcd_init_row:
  1328                           	opt stack 0
  1329  000081                     	ds	1
  1330  000082                     _valid_cmd:
  1331                           	opt stack 0
  1332  000082                     	ds	1
  1333  000083                     _cmd_data:
  1334                           	opt stack 0
  1335  000083                     	ds	52
  1336  0000B7                     _CMD:
  1337                           	opt stack 0
  1338  0000B7                     	ds	15
  1339                           tblptru	equ	0xFF8
  1340                           tblptrh	equ	0xFF7
  1341                           tblptrl	equ	0xFF6
  1342                           tablat	equ	0xFF5
  1343                           postinc0	equ	0xFEE
  1344                           wreg	equ	0xFE8
  1345                           postdec1	equ	0xFE5
  1346                           fsr1h	equ	0xFE2
  1347                           fsr1l	equ	0xFE1
  1348                           
  1349                           	psect	dataBANK0
  1350  0000E5                     __pdataBANK0:
  1351                           	opt stack 0
  1352  0000E5                     _randx:
  1353                           	opt stack 0
  1354  0000E5                     	ds	4
  1355  0000E9                     _str:
  1356                           	opt stack 0
  1357  0000E9                     	ds	13
  1358                           tblptru	equ	0xFF8
  1359                           tblptrh	equ	0xFF7
  1360                           tblptrl	equ	0xFF6
  1361                           tablat	equ	0xFF5
  1362                           postinc0	equ	0xFEE
  1363                           wreg	equ	0xFE8
  1364                           postdec1	equ	0xFE5
  1365                           fsr1h	equ	0xFE2
  1366                           fsr1l	equ	0xFE1
  1367                           
  1368                           	psect	bssBANK1
  1369  000100                     __pbssBANK1:
  1370                           	opt stack 0
  1371  000100                     _lcd_display_array:
  1372                           	opt stack 0
  1373  000100                     	ds	80
  1374  000150                     _conflict_arr:
  1375                           	opt stack 0
  1376  000150                     	ds	40
  1377  000178                     _str_data:
  1378                           	opt stack 0
  1379  000178                     	ds	40
  1380                           tblptru	equ	0xFF8
  1381                           tblptrh	equ	0xFF7
  1382                           tblptrl	equ	0xFF6
  1383                           tablat	equ	0xFF5
  1384                           postinc0	equ	0xFEE
  1385                           wreg	equ	0xFE8
  1386                           postdec1	equ	0xFE5
  1387                           fsr1h	equ	0xFE2
  1388                           fsr1l	equ	0xFE1
  1389                           
  1390                           	psect	bssBANK2
  1391  000200                     __pbssBANK2:
  1392                           	opt stack 0
  1393  000200                     _uart_str:
  1394                           	opt stack 0
  1395  000200                     	ds	150
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           postdec1	equ	0xFE5
  1403                           fsr1h	equ	0xFE2
  1404                           fsr1l	equ	0xFE1
  1405                           
  1406                           	psect	bssBIGRAM
  1407  000296                     __pbssBIGRAM:
  1408                           	opt stack 0
  1409  000296                     _clcd_display_string_details:
  1410                           	opt stack 0
  1411  000296                     	ds	1100
  1412                           tblptru	equ	0xFF8
  1413                           tblptrh	equ	0xFF7
  1414                           tblptrl	equ	0xFF6
  1415                           tablat	equ	0xFF5
  1416                           postinc0	equ	0xFEE
  1417                           wreg	equ	0xFE8
  1418                           postdec1	equ	0xFE5
  1419                           fsr1h	equ	0xFE2
  1420                           fsr1l	equ	0xFE1
  1421                           
  1422                           	psect	cstackBANK0
  1423  0000C6                     __pcstackBANK0:
  1424                           	opt stack 0
  1425  0000C6                     ??_copy_data:
  1426  0000C6                     ??_scroll_left_to_right:
  1427  0000C6                     ??_scroll_right_to_left:
  1428  0000C6                     conflict_check@exist_uid_idx:
  1429                           	opt stack 0
  1430  0000C6                     get_dis_frq@frq:
  1431                           	opt stack 0
  1432  0000C6                     get_over_write_data@over_write:
  1433                           	opt stack 0
  1434  0000C6                     collect_row@i:
  1435                           	opt stack 0
  1436  0000C6                     get_direction@i:
  1437                           	opt stack 0
  1438  0000C6                     collect_column@i:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x0
  1442  0000C6                     	ds	1
  1443  0000C7                     conflict_check@conflict:
  1444                           	opt stack 0
  1445  0000C7                     get_dis_frq@i:
  1446                           	opt stack 0
  1447  0000C7                     get_over_write_data@i:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x1
  1451  0000C7                     	ds	1
  1452  0000C8                     collect_row@row:
  1453                           	opt stack 0
  1454  0000C8                     get_direction@direction:
  1455                           	opt stack 0
  1456  0000C8                     collect_column@column:
  1457                           	opt stack 0
  1458  0000C8                     conflict_check@i:
  1459                           	opt stack 0
  1460                           
  1461                           ; 2 bytes @ 0x2
  1462  0000C8                     	ds	1
  1463  0000C9                     parse_cmd_str@str:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x3
  1467  0000C9                     	ds	2
  1468  0000CB                     ??_parse_cmd_str:
  1469                           
  1470                           ; 1 bytes @ 0x5
  1471  0000CB                     	ds	2
  1472  0000CD                     parse_cmd_str@i:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0x7
  1476  0000CD                     	ds	1
  1477  0000CE                     parse_cmd_str@i_1787:
  1478                           	opt stack 0
  1479                           
  1480                           ; 1 bytes @ 0x8
  1481  0000CE                     	ds	1
  1482  0000CF                     parse_cmd_str@ptr:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x9
  1486  0000CF                     	ds	2
  1487  0000D1                     ??_make_display:
  1488  0000D1                     parse_cmd_str@row:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0xB
  1492  0000D1                     	ds	1
  1493  0000D2                     parse_cmd_str@column:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0xC
  1497  0000D2                     	ds	1
  1498  0000D3                     parse_cmd_str@i_1779:
  1499                           	opt stack 0
  1500                           
  1501                           ; 1 bytes @ 0xD
  1502  0000D3                     	ds	1
  1503  0000D4                     parse_cmd_str@uid:
  1504                           	opt stack 0
  1505  0000D4                     update_string_data@data:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0xE
  1509  0000D4                     	ds	1
  1510  0000D5                     parse_cmd_str@scroll:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0xF
  1514  0000D5                     	ds	1
  1515  0000D6                     ??_update_string_data:
  1516  0000D6                     parse_cmd_str@uid_1776:
  1517                           	opt stack 0
  1518                           
  1519                           ; 1 bytes @ 0x10
  1520  0000D6                     	ds	1
  1521  0000D7                     parse_cmd_str@uid_1786:
  1522                           	opt stack 0
  1523                           
  1524                           ; 1 bytes @ 0x11
  1525  0000D7                     	ds	1
  1526  0000D8                     parse_cmd_str@temp:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x12
  1530  0000D8                     	ds	2
  1531  0000DA                     update_string_data@exist_uid_idx:
  1532                           	opt stack 0
  1533                           
  1534                           ; 1 bytes @ 0x14
  1535  0000DA                     	ds	1
  1536  0000DB                     update_string_data@start_point:
  1537                           	opt stack 0
  1538                           
  1539                           ; 1 bytes @ 0x15
  1540  0000DB                     	ds	1
  1541  0000DC                     update_string_data@end_point:
  1542                           	opt stack 0
  1543                           
  1544                           ; 1 bytes @ 0x16
  1545  0000DC                     	ds	1
  1546  0000DD                     update_string_data@i:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x17
  1550  0000DD                     	ds	2
  1551  0000DF                     ??_reply_to_host:
  1552                           
  1553                           ; 1 bytes @ 0x19
  1554  0000DF                     	ds	3
  1555  0000E2                     reply_to_host@ch:
  1556                           	opt stack 0
  1557                           
  1558                           ; 1 bytes @ 0x1C
  1559  0000E2                     	ds	1
  1560  0000E3                     ??_cmd_consol_task:
  1561                           
  1562                           ; 1 bytes @ 0x1D
  1563  0000E3                     	ds	1
  1564  0000E4                     cmd_consol_task@ch:
  1565                           	opt stack 0
  1566                           
  1567                           ; 1 bytes @ 0x1E
  1568  0000E4                     	ds	1
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1h	equ	0xFE2
  1577                           fsr1l	equ	0xFE1
  1578                           
  1579                           	psect	cstackCOMRAM
  1580  000001                     __pcstackCOMRAM:
  1581                           	opt stack 0
  1582  000001                     ??_heart_beat:
  1583  000001                     
  1584                           ; 1 bytes @ 0x0
  1585  000001                     	ds	1
  1586  000002                     ??_INTERRUPT_InterruptManager:
  1587  000002                     
  1588                           ; 1 bytes @ 0x1
  1589  000002                     	ds	18
  1590  000014                     ??_isdigit:
  1591  000014                     ?_max_display_support:
  1592                           	opt stack 0
  1593  000014                     ?_strcmp:
  1594                           	opt stack 0
  1595  000014                     ?_strchr:
  1596                           	opt stack 0
  1597  000014                     ?___awdiv:
  1598                           	opt stack 0
  1599  000014                     ?___lwdiv:
  1600                           	opt stack 0
  1601  000014                     EUSART1_Read@readValue:
  1602                           	opt stack 0
  1603  000014                     EUSART1_Write@txData:
  1604                           	opt stack 0
  1605  000014                     TMR0_SetInterruptHandler@InterruptHandler:
  1606                           	opt stack 0
  1607  000014                     delay@delay:
  1608                           	opt stack 0
  1609  000014                     __delay_MS@delay:
  1610                           	opt stack 0
  1611  000014                     ___awdiv@dividend:
  1612                           	opt stack 0
  1613  000014                     ___lwdiv@dividend:
  1614                           	opt stack 0
  1615  000014                     memcpy@d1:
  1616                           	opt stack 0
  1617  000014                     strcmp@s1:
  1618                           	opt stack 0
  1619  000014                     strcpy@to:
  1620                           	opt stack 0
  1621  000014                     strncpy@to:
  1622                           	opt stack 0
  1623  000014                     strchr@ptr:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x13
  1627  000014                     	ds	1
  1628  000015                     putch@txData:
  1629                           	opt stack 0
  1630  000015                     _isdigit$2299:
  1631                           	opt stack 0
  1632                           
  1633                           ; 1 bytes @ 0x14
  1634  000015                     	ds	1
  1635  000016                     ??_TMR0_Initialize:
  1636  000016                     ??__delay_MS:
  1637  000016                     ??_delay:
  1638  000016                     isdigit@c:
  1639                           	opt stack 0
  1640  000016                     ___awdiv@divisor:
  1641                           	opt stack 0
  1642  000016                     ___lwdiv@divisor:
  1643                           	opt stack 0
  1644  000016                     memcpy@s1:
  1645                           	opt stack 0
  1646  000016                     strcmp@s2:
  1647                           	opt stack 0
  1648  000016                     strcpy@from:
  1649                           	opt stack 0
  1650  000016                     strncpy@from:
  1651                           	opt stack 0
  1652  000016                     cputs@s:
  1653                           	opt stack 0
  1654  000016                     strchr@chr:
  1655                           	opt stack 0
  1656                           
  1657                           ; 2 bytes @ 0x15
  1658  000016                     	ds	1
  1659  000017                     delay@val:
  1660                           	opt stack 0
  1661  000017                     __delay_MS@val:
  1662                           	opt stack 0
  1663                           
  1664                           ; 2 bytes @ 0x16
  1665  000017                     	ds	1
  1666  000018                     ??_strcmp:
  1667  000018                     ?_strspn:
  1668                           	opt stack 0
  1669  000018                     ?_strcspn:
  1670                           	opt stack 0
  1671  000018                     ___awdiv@counter:
  1672                           	opt stack 0
  1673  000018                     ___lwdiv@counter:
  1674                           	opt stack 0
  1675  000018                     memcpy@n:
  1676                           	opt stack 0
  1677  000018                     puts@s:
  1678                           	opt stack 0
  1679  000018                     strcpy@cp:
  1680                           	opt stack 0
  1681  000018                     strncpy@size:
  1682                           	opt stack 0
  1683  000018                     strcspn@s1:
  1684                           	opt stack 0
  1685  000018                     strspn@s1:
  1686                           	opt stack 0
  1687                           
  1688                           ; 2 bytes @ 0x17
  1689  000018                     	ds	1
  1690  000019                     ___awdiv@sign:
  1691                           	opt stack 0
  1692  000019                     strcmp@r:
  1693                           	opt stack 0
  1694  000019                     delay@i:
  1695                           	opt stack 0
  1696  000019                     ___lwdiv@quotient:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0x18
  1700  000019                     	ds	1
  1701  00001A                     ___awdiv@quotient:
  1702                           	opt stack 0
  1703  00001A                     memcpy@d:
  1704                           	opt stack 0
  1705  00001A                     strncpy@cp:
  1706                           	opt stack 0
  1707  00001A                     strcspn@s2:
  1708                           	opt stack 0
  1709  00001A                     strspn@s2:
  1710                           	opt stack 0
  1711                           
  1712                           ; 2 bytes @ 0x19
  1713  00001A                     	ds	1
  1714  00001B                     ?___lwmod:
  1715                           	opt stack 0
  1716  00001B                     write_lcd_cmd@cmd:
  1717                           	opt stack 0
  1718  00001B                     write_lcd_data@data:
  1719                           	opt stack 0
  1720  00001B                     ___lwmod@dividend:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x1A
  1724  00001B                     	ds	1
  1725  00001C                     ??_strspn:
  1726  00001C                     ??_strcspn:
  1727  00001C                     ?___wmul:
  1728                           	opt stack 0
  1729  00001C                     set_cursor@col_number:
  1730                           	opt stack 0
  1731  00001C                     write_str@str:
  1732                           	opt stack 0
  1733  00001C                     ___wmul@multiplier:
  1734                           	opt stack 0
  1735  00001C                     memcpy@s:
  1736                           	opt stack 0
  1737                           
  1738                           ; 2 bytes @ 0x1B
  1739  00001C                     	ds	1
  1740  00001D                     set_cursor@row_number:
  1741                           	opt stack 0
  1742  00001D                     ___lwmod@divisor:
  1743                           	opt stack 0
  1744  00001D                     strcspn@i:
  1745                           	opt stack 0
  1746  00001D                     strspn@i:
  1747                           	opt stack 0
  1748                           
  1749                           ; 2 bytes @ 0x1C
  1750  00001D                     	ds	1
  1751  00001E                     write_str@i:
  1752                           	opt stack 0
  1753  00001E                     memcpy@tmp:
  1754                           	opt stack 0
  1755  00001E                     ___wmul@multiplicand:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x1D
  1759  00001E                     	ds	1
  1760  00001F                     ?_strtok:
  1761                           	opt stack 0
  1762  00001F                     ___lwmod@counter:
  1763                           	opt stack 0
  1764  00001F                     strtok@s1:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0x1E
  1768  00001F                     	ds	1
  1769  000020                     ___wmul@product:
  1770                           	opt stack 0
  1771                           
  1772                           ; 2 bytes @ 0x1F
  1773  000020                     	ds	1
  1774  000021                     strtok@s2:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0x20
  1778  000021                     	ds	1
  1779  000022                     ?_printf:
  1780                           	opt stack 0
  1781  000022                     ?_strlen:
  1782                           	opt stack 0
  1783  000022                     ?_atoi:
  1784                           	opt stack 0
  1785  000022                     printf@f:
  1786                           	opt stack 0
  1787  000022                     atoi@s:
  1788                           	opt stack 0
  1789  000022                     strlen@s:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x21
  1793  000022                     	ds	1
  1794  000023                     
  1795                           ; 1 bytes @ 0x22
  1796  000023                     	ds	1
  1797  000024                     ??_strlen:
  1798  000024                     ??_atoi:
  1799                           
  1800                           ; 1 bytes @ 0x23
  1801  000024                     	ds	2
  1802  000026                     atoi@sign:
  1803                           	opt stack 0
  1804  000026                     strlen@cp:
  1805                           	opt stack 0
  1806                           
  1807                           ; 2 bytes @ 0x25
  1808  000026                     	ds	1
  1809  000027                     atoi@a:
  1810                           	opt stack 0
  1811                           
  1812                           ; 2 bytes @ 0x26
  1813  000027                     	ds	1
  1814  000028                     scroll_off@clcd_display_string_details:
  1815                           	opt stack 0
  1816  000028                     memset@p1:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0x27
  1820  000028                     	ds	2
  1821  00002A                     ??_printf:
  1822  00002A                     ??_scroll_off:
  1823  00002A                     memset@c:
  1824                           	opt stack 0
  1825                           
  1826                           ; 2 bytes @ 0x29
  1827  00002A                     	ds	1
  1828  00002B                     printf@flag:
  1829                           	opt stack 0
  1830                           
  1831                           ; 1 bytes @ 0x2A
  1832  00002B                     	ds	1
  1833  00002C                     printf@prec:
  1834                           	opt stack 0
  1835  00002C                     memset@n:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x2B
  1839  00002C                     	ds	1
  1840  00002D                     printf@cp:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x2C
  1844  00002D                     	ds	1
  1845  00002E                     scroll_off@k:
  1846                           	opt stack 0
  1847  00002E                     memset@p:
  1848                           	opt stack 0
  1849                           
  1850                           ; 2 bytes @ 0x2D
  1851  00002E                     	ds	1
  1852  00002F                     printf@ap:
  1853                           	opt stack 0
  1854                           
  1855                           ; 2 bytes @ 0x2E
  1856  00002F                     	ds	1
  1857  000030                     scroll_off@line:
  1858                           	opt stack 0
  1859  000030                     scroll_left_to_right@clcd_display_string_details:
  1860                           	opt stack 0
  1861  000030                     scroll_right_to_left@clcd_display_string_details:
  1862                           	opt stack 0
  1863  000030                     get_str@str:
  1864                           	opt stack 0
  1865                           
  1866                           ; 2 bytes @ 0x2F
  1867  000030                     	ds	1
  1868  000031                     scroll_off@display_char_count:
  1869                           	opt stack 0
  1870  000031                     printf@val:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x30
  1874  000031                     	ds	1
  1875  000032                     scroll_left_to_right@line:
  1876                           	opt stack 0
  1877  000032                     scroll_right_to_left@line:
  1878                           	opt stack 0
  1879  000032                     scroll_off@str_len:
  1880                           	opt stack 0
  1881  000032                     get_str@data_str:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x31
  1885  000032                     	ds	1
  1886  000033                     printf@c:
  1887                           	opt stack 0
  1888  000033                     scroll_off@j:
  1889                           	opt stack 0
  1890                           
  1891                           ; 2 bytes @ 0x32
  1892  000033                     	ds	1
  1893  000034                     init_clcd_cusotom_lcd@clcd_init_col:
  1894                           	opt stack 0
  1895  000034                     conflict_check@new_start_point:
  1896                           	opt stack 0
  1897  000034                     copy_data@clcd_str_data:
  1898                           	opt stack 0
  1899  000034                     collect_row@str:
  1900                           	opt stack 0
  1901  000034                     get_direction@str:
  1902                           	opt stack 0
  1903  000034                     get_dis_frq@str:
  1904                           	opt stack 0
  1905  000034                     get_over_write_data@str:
  1906                           	opt stack 0
  1907  000034                     collect_column@str:
  1908                           	opt stack 0
  1909                           
  1910                           ; 2 bytes @ 0x33
  1911  000034                     	ds	1
  1912  000035                     init_clcd_cusotom_lcd@clcd_init_row:
  1913                           	opt stack 0
  1914  000035                     conflict_check@new_end_point:
  1915                           	opt stack 0
  1916  000035                     scroll_off@i:
  1917                           	opt stack 0
  1918                           
  1919                           ; 2 bytes @ 0x34
  1920  000035                     	ds	1
  1921  000036                     ??_conflict_check:
  1922  000036                     copy_data@data:
  1923                           	opt stack 0
  1924  000036                     collect_row@data_row:
  1925                           	opt stack 0
  1926  000036                     get_direction@data_direction:
  1927                           	opt stack 0
  1928  000036                     get_dis_frq@data_frq:
  1929                           	opt stack 0
  1930  000036                     get_over_write_data@over_write_data:
  1931                           	opt stack 0
  1932  000036                     collect_column@data_column:
  1933                           	opt stack 0
  1934                           
  1935                           ; 2 bytes @ 0x35
  1936  000036                     	ds	1
  1937  000037                     make_display@count:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0x36
  1941  000037                     	ds	1
  1942  000038                     ??_collect_row:
  1943  000038                     ??_get_direction:
  1944  000038                     ??_get_dis_frq:
  1945  000038                     ??_get_over_write_data:
  1946  000038                     ??_collect_column:
  1947                           
  1948                           ; 1 bytes @ 0x37
  1949  000038                     	ds	1
  1950  000039                     tblptru	equ	0xFF8
  1951                           tblptrh	equ	0xFF7
  1952                           tblptrl	equ	0xFF6
  1953                           tablat	equ	0xFF5
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1h	equ	0xFE2
  1958                           fsr1l	equ	0xFE1
  1959                           
  1960                           ; 1 bytes @ 0x38
  1961 ;;
  1962 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1963 ;;
  1964 ;; *************** function _main *****************
  1965 ;; Defined at:
  1966 ;;		line 77 in file "main.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      void 
  1973 ;; Registers used:
  1974 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;Total ram usage:        0 bytes
  1985 ;; Hardware stack levels required when called:   14
  1986 ;; This function calls:
  1987 ;;		_SYSTEM_Initialize
  1988 ;;		_TMR0_SetInterruptHandler
  1989 ;;		_TMR0_StartTimer
  1990 ;;		_TMR0_StopTimer
  1991 ;;		_TMR1_StopTimer
  1992 ;;		_TMR5_StopTimer
  1993 ;;		__delay_MS
  1994 ;;		_cmd_consol_task
  1995 ;;		_console_init
  1996 ;;		_make_display
  1997 ;;		_printf
  1998 ;; This function is called by:
  1999 ;;		Startup code after reset
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text0
  2004  002EF8                     __ptext0:
  2005                           	opt stack 0
  2006  002EF8                     _main:
  2007                           	opt stack 17
  2008                           
  2009                           ;main.c: 80: SYSTEM_Initialize();
  2010                           
  2011                           ;incstack = 0
  2012  002EF8  ECB3  F01A         	call	_SYSTEM_Initialize	;wreg free
  2013                           
  2014                           ;main.c: 81: TMR5_StopTimer();
  2015  002EFC  EC72  F01B         	call	_TMR5_StopTimer	;wreg free
  2016                           
  2017                           ;main.c: 82: TMR1_StopTimer();
  2018  002F00  EC78  F01B         	call	_TMR1_StopTimer	;wreg free
  2019                           
  2020                           ;main.c: 83: TMR0_StopTimer();
  2021  002F04  EC7A  F01B         	call	_TMR0_StopTimer	;wreg free
  2022                           
  2023                           ;main.c: 85: TMR0_SetInterruptHandler(make_array);
  2024  002F08  0EA2               	movlw	low _make_array
  2025  002F0A  6E14               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  2026  002F0C  0E36               	movlw	high _make_array
  2027  002F0E  6E15               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  2028  002F10  EC66  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  2029                           
  2030                           ;main.c: 105: (INTCONbits.GIE = 1);
  2031  002F14  8EF2               	bsf	intcon,7,c	;volatile
  2032                           
  2033                           ;main.c: 111: (INTCONbits.PEIE = 1);
  2034  002F16  8CF2               	bsf	intcon,6,c	;volatile
  2035                           
  2036                           ;main.c: 115: console_init();
  2037  002F18  ECB4  F016         	call	_console_init	;wreg free
  2038                           
  2039                           ;main.c: 116: _delay_MS(1000);
  2040  002F1C  0E03               	movlw	3
  2041  002F1E  6E15               	movwf	__delay_MS@delay+1,c
  2042  002F20  0EE8               	movlw	232
  2043  002F22  6E14               	movwf	__delay_MS@delay,c
  2044  002F24  EC8D  F018         	call	__delay_MS	;wreg free
  2045                           
  2046                           ;main.c: 118: printf("Init_complete..\r\n");
  2047  002F28  0EE4               	movlw	low STR_133
  2048  002F2A  6E22               	movwf	printf@f,c
  2049  002F2C  0EFD               	movlw	high STR_133
  2050  002F2E  6E23               	movwf	printf@f+1,c
  2051  002F30  EC22  F011         	call	_printf	;wreg free
  2052                           
  2053                           ;main.c: 133: TMR0_StartTimer();
  2054  002F34  EC7E  F01B         	call	_TMR0_StartTimer	;wreg free
  2055  002F38                     
  2056                           ;main.c: 137: {
  2057                           ;main.c: 139: cmd_consol_task();
  2058  002F38  EC34  F00F         	call	_cmd_consol_task	;wreg free
  2059                           
  2060                           ;main.c: 140: if(display == 1){make_display();display = 0;}
  2061  002F3C  0100               	movlb	0	; () banked
  2062  002F3E  057D               	decf	_display& (0+255),w,b
  2063  002F40  A4D8               	btfss	status,2,c
  2064  002F42  D7FA               	goto	l1058
  2065                           
  2066                           ; BSR set to: 0
  2067  002F44  EC31  F010         	call	_make_display	;wreg free
  2068  002F48  0E00               	movlw	0
  2069  002F4A  0100               	movlb	0	; () banked
  2070  002F4C  6F7D               	movwf	_display& (0+255),b
  2071                           
  2072                           ; BSR set to: 0
  2073                           
  2074                           ; BSR set to: 0
  2075  002F4E  D7F4               	goto	l1058
  2076  002F50                     __end_of_main:
  2077                           	opt stack 0
  2078                           tblptru	equ	0xFF8
  2079                           tblptrh	equ	0xFF7
  2080                           tblptrl	equ	0xFF6
  2081                           tablat	equ	0xFF5
  2082                           intcon	equ	0xFF2
  2083                           postinc0	equ	0xFEE
  2084                           wreg	equ	0xFE8
  2085                           postdec1	equ	0xFE5
  2086                           fsr1h	equ	0xFE2
  2087                           fsr1l	equ	0xFE1
  2088                           status	equ	0xFD8
  2089                           
  2090 ;; *************** function _console_init *****************
  2091 ;; Defined at:
  2092 ;;		line 478 in file "cmd_consol.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;		None
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;		None
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2110 ;;Total ram usage:        0 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    7
  2113 ;; This function calls:
  2114 ;;		_clear_cmd_data
  2115 ;;		_memset
  2116 ;; This function is called by:
  2117 ;;		_main
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text1
  2122  002D68                     __ptext1:
  2123                           	opt stack 0
  2124  002D68                     _console_init:
  2125                           	opt stack 23
  2126                           
  2127                           ;cmd_consol.c: 479: cmd_consol_state = CMD_CONSOL_INIT;
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;incstack = 0
  2131  002D68  0E00               	movlw	0
  2132  002D6A  0100               	movlb	0	; () banked
  2133  002D6C  6F7E               	movwf	_cmd_consol_state& (0+255),b
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;cmd_consol.c: 480: clear_cmd_data();
  2137  002D6E  EC2C  F01A         	call	_clear_cmd_data	;wreg free
  2138                           
  2139                           ;cmd_consol.c: 481: valid_cmd = 0;
  2140  002D72  0E00               	movlw	0
  2141  002D74  0100               	movlb	0	; () banked
  2142  002D76  6F82               	movwf	_valid_cmd& (0+255),b
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;cmd_consol.c: 482: clcd_init_row = 0;
  2146  002D78  0E00               	movlw	0
  2147  002D7A  6F81               	movwf	_clcd_init_row& (0+255),b
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;cmd_consol.c: 483: clcd_init_col = 0;
  2151  002D7C  0E00               	movlw	0
  2152  002D7E  6F80               	movwf	_clcd_init_col& (0+255),b
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;cmd_consol.c: 484: check = 0;
  2156  002D80  0E00               	movlw	0
  2157  002D82  6F7F               	movwf	_check& (0+255),b
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;cmd_consol.c: 485: memset(CMD, 0, sizeof (CMD));
  2161  002D84  0EB7               	movlw	low _CMD
  2162  002D86  6E28               	movwf	memset@p1,c
  2163  002D88  0E00               	movlw	high _CMD
  2164  002D8A  6E29               	movwf	memset@p1+1,c
  2165  002D8C  0E00               	movlw	0
  2166  002D8E  6E2B               	movwf	memset@c+1,c
  2167  002D90  0E00               	movlw	0
  2168  002D92  6E2A               	movwf	memset@c,c
  2169  002D94  0E00               	movlw	0
  2170  002D96  6E2D               	movwf	memset@n+1,c
  2171  002D98  0E0F               	movlw	15
  2172  002D9A  6E2C               	movwf	memset@n,c
  2173  002D9C  EC00  F01A         	call	_memset	;wreg free
  2174                           
  2175                           ;cmd_consol.c: 486: memset(str_data, 0, sizeof (str_data));
  2176  002DA0  0E78               	movlw	low _str_data
  2177  002DA2  6E28               	movwf	memset@p1,c
  2178  002DA4  0E01               	movlw	high _str_data
  2179  002DA6  6E29               	movwf	memset@p1+1,c
  2180  002DA8  0E00               	movlw	0
  2181  002DAA  6E2B               	movwf	memset@c+1,c
  2182  002DAC  0E00               	movlw	0
  2183  002DAE  6E2A               	movwf	memset@c,c
  2184  002DB0  0E00               	movlw	0
  2185  002DB2  6E2D               	movwf	memset@n+1,c
  2186  002DB4  0E28               	movlw	40
  2187  002DB6  6E2C               	movwf	memset@n,c
  2188  002DB8  EC00  F01A         	call	_memset	;wreg free
  2189                           
  2190                           ;cmd_consol.c: 487: memset(uart_str, 0, sizeof (uart_str));
  2191  002DBC  0E00               	movlw	low _uart_str
  2192  002DBE  6E28               	movwf	memset@p1,c
  2193  002DC0  0E02               	movlw	high _uart_str
  2194  002DC2  6E29               	movwf	memset@p1+1,c
  2195  002DC4  0E00               	movlw	0
  2196  002DC6  6E2B               	movwf	memset@c+1,c
  2197  002DC8  0E00               	movlw	0
  2198  002DCA  6E2A               	movwf	memset@c,c
  2199  002DCC  0E00               	movlw	0
  2200  002DCE  6E2D               	movwf	memset@n+1,c
  2201  002DD0  0E96               	movlw	150
  2202  002DD2  6E2C               	movwf	memset@n,c
  2203  002DD4  EC00  F01A         	call	_memset	;wreg free
  2204  002DD8  0012               	return		;funcret
  2205  002DDA                     __end_of_console_init:
  2206                           	opt stack 0
  2207                           tblptru	equ	0xFF8
  2208                           tblptrh	equ	0xFF7
  2209                           tblptrl	equ	0xFF6
  2210                           tablat	equ	0xFF5
  2211                           intcon	equ	0xFF2
  2212                           postinc0	equ	0xFEE
  2213                           wreg	equ	0xFE8
  2214                           postdec1	equ	0xFE5
  2215                           fsr1h	equ	0xFE2
  2216                           fsr1l	equ	0xFE1
  2217                           status	equ	0xFD8
  2218                           
  2219 ;; *************** function _clear_cmd_data *****************
  2220 ;; Defined at:
  2221 ;;		line 8 in file "cmd_consol.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;		None
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;		None
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  1    wreg      void 
  2228 ;; Registers used:
  2229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;Total ram usage:        0 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    6
  2242 ;; This function calls:
  2243 ;;		_memset
  2244 ;; This function is called by:
  2245 ;;		_console_init
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           	psect	text2
  2250  003458                     __ptext2:
  2251                           	opt stack 0
  2252  003458                     _clear_cmd_data:
  2253                           	opt stack 23
  2254                           
  2255                           ;cmd_consol.c: 9: memset(&cmd_data, 0, sizeof (CMD_CONSOL_DATA));
  2256                           
  2257                           ;incstack = 0
  2258  003458  0E83               	movlw	low _cmd_data
  2259  00345A  6E28               	movwf	memset@p1,c
  2260  00345C  0E00               	movlw	high _cmd_data
  2261  00345E  6E29               	movwf	memset@p1+1,c
  2262  003460  0E00               	movlw	0
  2263  003462  6E2B               	movwf	memset@c+1,c
  2264  003464  0E00               	movlw	0
  2265  003466  6E2A               	movwf	memset@c,c
  2266  003468  0E00               	movlw	0
  2267  00346A  6E2D               	movwf	memset@n+1,c
  2268  00346C  0E34               	movlw	52
  2269  00346E  6E2C               	movwf	memset@n,c
  2270  003470  EC00  F01A         	call	_memset	;wreg free
  2271                           
  2272                           ;cmd_consol.c: 11: cmd_data.scroll = -1;
  2273  003474  0100               	movlb	0	; () banked
  2274  003476  69B2               	setf	(_cmd_data+47)& (0+255),b
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;cmd_consol.c: 12: cmd_data.end_col = cmd_data.start_col = -1;
  2278  003478  69AE               	setf	(_cmd_data+43)& (0+255),b
  2279  00347A  69B0               	setf	(_cmd_data+45)& (0+255),b
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;cmd_consol.c: 13: cmd_data.end_row = cmd_data.end_row = -1;
  2283  00347C  69AF               	setf	(_cmd_data+44)& (0+255),b
  2284  00347E  69AF               	setf	(_cmd_data+44)& (0+255),b
  2285                           
  2286                           ; BSR set to: 0
  2287  003480  0012               	return		;funcret
  2288  003482                     __end_of_clear_cmd_data:
  2289                           	opt stack 0
  2290                           tblptru	equ	0xFF8
  2291                           tblptrh	equ	0xFF7
  2292                           tblptrl	equ	0xFF6
  2293                           tablat	equ	0xFF5
  2294                           intcon	equ	0xFF2
  2295                           postinc0	equ	0xFEE
  2296                           wreg	equ	0xFE8
  2297                           postdec1	equ	0xFE5
  2298                           fsr1h	equ	0xFE2
  2299                           fsr1l	equ	0xFE1
  2300                           status	equ	0xFD8
  2301                           
  2302 ;; *************** function _cmd_consol_task *****************
  2303 ;; Defined at:
  2304 ;;		line 490 in file "cmd_consol.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;		None
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;  ch              1   30[BANK0 ] unsigned char 
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  1    wreg      void 
  2311 ;; Registers used:
  2312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;Total ram usage:        2 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:   13
  2325 ;; This function calls:
  2326 ;;		_getch
  2327 ;;		_memset
  2328 ;;		_parse_cmd_str
  2329 ;;		_printf
  2330 ;;		_puts
  2331 ;;		_reply_to_host
  2332 ;;		_strcmp
  2333 ;; This function is called by:
  2334 ;;		_main
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           	psect	text3
  2339  001E68                     __ptext3:
  2340                           	opt stack 0
  2341  001E68                     _cmd_consol_task:
  2342                           	opt stack 17
  2343                           
  2344                           ;cmd_consol.c: 491: if ((eusart1RxCount) > 0) {
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;incstack = 0
  2348  001E68  503F               	movf	_eusart1RxCount,w,c	;volatile
  2349  001E6A  B4D8               	btfsc	status,2,c
  2350  001E6C  D0EE               	goto	l923
  2351                           
  2352                           ;cmd_consol.c: 492: static int i = 0;
  2353                           ;cmd_consol.c: 493: unsigned char ch = 0;
  2354  001E6E  0E00               	movlw	0
  2355  001E70  0100               	movlb	0	; () banked
  2356  001E72  6FE4               	movwf	cmd_consol_task@ch& (0+255),b
  2357                           
  2358                           ;cmd_consol.c: 494: while ((eusart1RxCount)) {
  2359  001E74  D072               	goto	l912
  2360  001E76                     
  2361                           ;cmd_consol.c: 495: ch = getch();
  2362                           
  2363                           ; BSR set to: 0
  2364  001E76  EC6F  F01B         	call	_getch	;wreg free
  2365  001E7A  0100               	movlb	0	; () banked
  2366  001E7C  6FE4               	movwf	cmd_consol_task@ch& (0+255),b
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;cmd_consol.c: 496: if (ch == '\n' || ch == '\r') {
  2370  001E7E  0E0A               	movlw	10
  2371  001E80  19E4               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2372  001E82  B4D8               	btfsc	status,2,c
  2373  001E84  D004               	goto	u7310
  2374                           
  2375                           ; BSR set to: 0
  2376  001E86  0E0D               	movlw	13
  2377  001E88  19E4               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2378  001E8A  A4D8               	btfss	status,2,c
  2379  001E8C  D00D               	goto	l914
  2380  001E8E                     u7310:
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;cmd_consol.c: 497: i = 0;
  2384                           
  2385                           ; BSR set to: 0
  2386  001E8E  0E00               	movlw	0
  2387  001E90  6F73               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2388  001E92  0E00               	movlw	0
  2389  001E94  6F72               	movwf	cmd_consol_task@i& (0+255),b
  2390                           
  2391                           ;cmd_consol.c: 498: check = 1;
  2392  001E96  0E01               	movlw	1
  2393  001E98  6F7F               	movwf	_check& (0+255),b
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;cmd_consol.c: 499: printf("\r\n");
  2397  001E9A  0E9F               	movlw	low (STR_55+9)
  2398  001E9C  6E22               	movwf	printf@f,c
  2399  001E9E  0EFE               	movlw	high (STR_55+9)
  2400  001EA0  6E23               	movwf	printf@f+1,c
  2401  001EA2  EC22  F011         	call	_printf	;wreg free
  2402                           
  2403                           ;cmd_consol.c: 500: break;
  2404  001EA6  D05C               	goto	u7340
  2405  001EA8                     l914:
  2406  001EA8  0E08               	movlw	8
  2407  001EAA  0100               	movlb	0	; () banked
  2408  001EAC  19E4               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2409  001EAE  A4D8               	btfss	status,2,c
  2410  001EB0  D015               	goto	l919
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;cmd_consol.c: 502: uart_str[--i] = 0;
  2414  001EB2  0772               	decf	cmd_consol_task@i& (0+255),f,b
  2415  001EB4  A0D8               	btfss	status,0,c
  2416  001EB6  0773               	decf	(cmd_consol_task@i+1)& (0+255),f,b
  2417  001EB8  0E00               	movlw	low _uart_str
  2418  001EBA  2572               	addwf	cmd_consol_task@i& (0+255),w,b
  2419  001EBC  6ED9               	movwf	fsr2l,c
  2420  001EBE  0E02               	movlw	high _uart_str
  2421  001EC0  2173               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2422  001EC2  6EDA               	movwf	fsr2h,c
  2423  001EC4  0E00               	movlw	0
  2424  001EC6  6EDF               	movwf	indf2,c
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;cmd_consol.c: 503: printf("%c", ch);
  2428  001EC8  0EF9               	movlw	low STR_126
  2429  001ECA  6E22               	movwf	printf@f,c
  2430  001ECC  0EFF               	movlw	high STR_126
  2431  001ECE  6E23               	movwf	printf@f+1,c
  2432  001ED0  C0E4  F024         	movff	cmd_consol_task@ch,?_printf+2
  2433  001ED4  6A25               	clrf	?_printf+3,c
  2434  001ED6  EC22  F011         	call	_printf	;wreg free
  2435                           
  2436                           ;cmd_consol.c: 504: continue;
  2437  001EDA  D03F               	goto	l912
  2438  001EDC                     l919:
  2439                           
  2440                           ;cmd_consol.c: 506: uart_str[i] = ch;
  2441  001EDC  0E00               	movlw	low _uart_str
  2442  001EDE  0100               	movlb	0	; () banked
  2443  001EE0  2572               	addwf	cmd_consol_task@i& (0+255),w,b
  2444  001EE2  6ED9               	movwf	fsr2l,c
  2445  001EE4  0E02               	movlw	high _uart_str
  2446  001EE6  2173               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2447  001EE8  6EDA               	movwf	fsr2h,c
  2448  001EEA  C0E4  FFDF         	movff	cmd_consol_task@ch,indf2
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;cmd_consol.c: 507: printf("%c", uart_str[i]);
  2452  001EEE  0EF9               	movlw	low STR_126
  2453  001EF0  6E22               	movwf	printf@f,c
  2454  001EF2  0EFF               	movlw	high STR_126
  2455  001EF4  6E23               	movwf	printf@f+1,c
  2456  001EF6  0E00               	movlw	low _uart_str
  2457  001EF8  2572               	addwf	cmd_consol_task@i& (0+255),w,b
  2458  001EFA  6ED9               	movwf	fsr2l,c
  2459  001EFC  0E02               	movlw	high _uart_str
  2460  001EFE  2173               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2461  001F00  6EDA               	movwf	fsr2h,c
  2462  001F02  50DF               	movf	indf2,w,c
  2463  001F04  6FE3               	movwf	??_cmd_consol_task& (0+255),b
  2464  001F06  51E3               	movf	??_cmd_consol_task& (0+255),w,b
  2465  001F08  6E24               	movwf	?_printf+2,c
  2466  001F0A  6A25               	clrf	?_printf+3,c
  2467  001F0C  EC22  F011         	call	_printf	;wreg free
  2468                           
  2469                           ;cmd_consol.c: 508: }
  2470                           ;cmd_consol.c: 509: if (strcmp(uart_str, "KLM+") == 0) {
  2471  001F10  0E00               	movlw	low _uart_str
  2472  001F12  6E14               	movwf	strcmp@s1,c
  2473  001F14  0E02               	movlw	high _uart_str
  2474  001F16  6E15               	movwf	strcmp@s1+1,c
  2475  001F18  0ED4               	movlw	low STR_128
  2476  001F1A  6E16               	movwf	strcmp@s2,c
  2477  001F1C  0EFF               	movlw	high STR_128
  2478  001F1E  6E17               	movwf	strcmp@s2+1,c
  2479  001F20  EC46  F018         	call	_strcmp	;wreg free
  2480  001F24  5014               	movf	?_strcmp,w,c
  2481  001F26  1015               	iorwf	?_strcmp+1,w,c
  2482  001F28  A4D8               	btfss	status,2,c
  2483  001F2A  D014               	goto	l921
  2484                           
  2485                           ;cmd_consol.c: 510: memset(uart_str, 0, sizeof (uart_str));
  2486  001F2C  0E00               	movlw	low _uart_str
  2487  001F2E  6E28               	movwf	memset@p1,c
  2488  001F30  0E02               	movlw	high _uart_str
  2489  001F32  6E29               	movwf	memset@p1+1,c
  2490  001F34  0E00               	movlw	0
  2491  001F36  6E2B               	movwf	memset@c+1,c
  2492  001F38  0E00               	movlw	0
  2493  001F3A  6E2A               	movwf	memset@c,c
  2494  001F3C  0E00               	movlw	0
  2495  001F3E  6E2D               	movwf	memset@n+1,c
  2496  001F40  0E96               	movlw	150
  2497  001F42  6E2C               	movwf	memset@n,c
  2498  001F44  EC00  F01A         	call	_memset	;wreg free
  2499                           
  2500                           ;cmd_consol.c: 511: i = 0;
  2501  001F48  0E00               	movlw	0
  2502  001F4A  0100               	movlb	0	; () banked
  2503  001F4C  6F73               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2504  001F4E  0E00               	movlw	0
  2505  001F50  6F72               	movwf	cmd_consol_task@i& (0+255),b
  2506                           
  2507                           ;cmd_consol.c: 512: continue;
  2508  001F52  D003               	goto	l912
  2509  001F54                     l921:
  2510                           
  2511                           ;cmd_consol.c: 513: }
  2512                           ;cmd_consol.c: 514: i++;
  2513                           
  2514                           ; BSR set to: 0
  2515  001F54  0100               	movlb	0	; () banked
  2516  001F56  4B72               	infsnz	cmd_consol_task@i& (0+255),f,b
  2517  001F58  2B73               	incf	(cmd_consol_task@i+1)& (0+255),f,b
  2518  001F5A                     l912:
  2519                           
  2520                           ; BSR set to: 0
  2521  001F5A  503F               	movf	_eusart1RxCount,w,c	;volatile
  2522  001F5C  A4D8               	btfss	status,2,c
  2523  001F5E  D78B               	goto	l913
  2524  001F60                     u7340:
  2525                           
  2526                           ;cmd_consol.c: 515: }
  2527                           ;cmd_consol.c: 516: if (i > 150) {
  2528  001F60  0100               	movlb	0	; () banked
  2529  001F62  BF73               	btfsc	(cmd_consol_task@i+1)& (0+255),7,b
  2530  001F64  D072               	goto	l923
  2531  001F66  5173               	movf	(cmd_consol_task@i+1)& (0+255),w,b
  2532  001F68  E104               	bnz	u7350
  2533  001F6A  0E97               	movlw	151
  2534  001F6C  5D72               	subwf	cmd_consol_task@i& (0+255),w,b
  2535  001F6E  A0D8               	btfss	status,0,c
  2536  001F70  D06C               	goto	l923
  2537  001F72                     u7350:
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;cmd_consol.c: 517: puts("ERR_CMD_LEN");
  2541  001F72  0EF6               	movlw	low STR_129
  2542  001F74  6E18               	movwf	puts@s,c
  2543  001F76  0EFE               	movlw	high STR_129
  2544  001F78  6E19               	movwf	puts@s+1,c
  2545  001F7A  ECF8  F01A         	call	_puts	;wreg free
  2546                           
  2547                           ;cmd_consol.c: 518: i = 0;
  2548  001F7E  0E00               	movlw	0
  2549  001F80  0100               	movlb	0	; () banked
  2550  001F82  6F73               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2551  001F84  0E00               	movlw	0
  2552  001F86  6F72               	movwf	cmd_consol_task@i& (0+255),b
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;cmd_consol.c: 519: }
  2556                           ;cmd_consol.c: 520: }
  2557                           ;cmd_consol.c: 521: switch (cmd_consol_state) {
  2558                           
  2559                           ; BSR set to: 0
  2560  001F88  D060               	goto	l923
  2561  001F8A                     
  2562                           ; BSR set to: 0
  2563                           ;cmd_consol.c: 523: {
  2564                           ;cmd_consol.c: 524: memset(CMD, 0, sizeof (CMD));
  2565                           
  2566                           ; BSR set to: 0
  2567  001F8A  0EB7               	movlw	low _CMD
  2568  001F8C  6E28               	movwf	memset@p1,c
  2569  001F8E  0E00               	movlw	high _CMD
  2570  001F90  6E29               	movwf	memset@p1+1,c
  2571  001F92  0E00               	movlw	0
  2572  001F94  6E2B               	movwf	memset@c+1,c
  2573  001F96  0E00               	movlw	0
  2574  001F98  6E2A               	movwf	memset@c,c
  2575  001F9A  0E00               	movlw	0
  2576  001F9C  6E2D               	movwf	memset@n+1,c
  2577  001F9E  0E0F               	movlw	15
  2578  001FA0  6E2C               	movwf	memset@n,c
  2579  001FA2  EC00  F01A         	call	_memset	;wreg free
  2580                           
  2581                           ;cmd_consol.c: 525: memset(uart_str, 0, sizeof (uart_str));
  2582  001FA6  0E00               	movlw	low _uart_str
  2583  001FA8  6E28               	movwf	memset@p1,c
  2584  001FAA  0E02               	movlw	high _uart_str
  2585  001FAC  6E29               	movwf	memset@p1+1,c
  2586  001FAE  0E00               	movlw	0
  2587  001FB0  6E2B               	movwf	memset@c+1,c
  2588  001FB2  0E00               	movlw	0
  2589  001FB4  6E2A               	movwf	memset@c,c
  2590  001FB6  0E00               	movlw	0
  2591  001FB8  6E2D               	movwf	memset@n+1,c
  2592  001FBA  0E96               	movlw	150
  2593  001FBC  6E2C               	movwf	memset@n,c
  2594  001FBE  EC00  F01A         	call	_memset	;wreg free
  2595                           
  2596                           ;cmd_consol.c: 526: valid_cmd = 0;
  2597  001FC2  0E00               	movlw	0
  2598  001FC4  0100               	movlb	0	; () banked
  2599  001FC6  6F82               	movwf	_valid_cmd& (0+255),b
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;cmd_consol.c: 527: puts("Init_Done\r\n");
  2603  001FC8  0EBA               	movlw	low STR_130
  2604  001FCA  6E18               	movwf	puts@s,c
  2605  001FCC  0EFE               	movlw	high STR_130
  2606  001FCE  6E19               	movwf	puts@s+1,c
  2607  001FD0  ECF8  F01A         	call	_puts	;wreg free
  2608                           
  2609                           ;cmd_consol.c: 528: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2610  001FD4  0E01               	movlw	1
  2611  001FD6  0100               	movlb	0	; () banked
  2612  001FD8  6F7E               	movwf	_cmd_consol_state& (0+255),b
  2613                           
  2614                           ;cmd_consol.c: 529: break;
  2615  001FDA  0012               	return	
  2616  001FDC                     
  2617                           ; BSR set to: 0
  2618                           ;cmd_consol.c: 532: {
  2619                           ;cmd_consol.c: 533: static int i = 0;
  2620                           ;cmd_consol.c: 535: if (check == 1) {
  2621                           
  2622                           ; BSR set to: 0
  2623  001FDC  057F               	decf	_check& (0+255),w,b
  2624  001FDE  A4D8               	btfss	status,2,c
  2625  001FE0  0012               	return	
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;cmd_consol.c: 536: check = 0;
  2629  001FE2  0E00               	movlw	0
  2630  001FE4  6F7F               	movwf	_check& (0+255),b
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;cmd_consol.c: 537: if (parse_cmd_str(uart_str) == 0) {
  2634  001FE6  0E00               	movlw	low _uart_str
  2635  001FE8  6FC9               	movwf	parse_cmd_str@str& (0+255),b
  2636  001FEA  0E02               	movlw	high _uart_str
  2637  001FEC  6FCA               	movwf	(parse_cmd_str@str+1)& (0+255),b
  2638  001FEE  EC65  F000         	call	_parse_cmd_str	;wreg free
  2639  001FF2  0900               	iorlw	0
  2640  001FF4  A4D8               	btfss	status,2,c
  2641  001FF6  D012               	goto	l930
  2642                           
  2643                           ;cmd_consol.c: 538: memset(uart_str, 0, sizeof (uart_str));
  2644  001FF8  0E00               	movlw	low _uart_str
  2645  001FFA  6E28               	movwf	memset@p1,c
  2646  001FFC  0E02               	movlw	high _uart_str
  2647  001FFE  6E29               	movwf	memset@p1+1,c
  2648  002000  0E00               	movlw	0
  2649  002002  6E2B               	movwf	memset@c+1,c
  2650  002004  0E00               	movlw	0
  2651  002006  6E2A               	movwf	memset@c,c
  2652  002008  0E00               	movlw	0
  2653  00200A  6E2D               	movwf	memset@n+1,c
  2654  00200C  0E96               	movlw	150
  2655  00200E  6E2C               	movwf	memset@n,c
  2656  002010  EC00  F01A         	call	_memset	;wreg free
  2657                           
  2658                           ;cmd_consol.c: 539: cmd_consol_state = CMD_CONSOL_REPLY_HOST;
  2659  002014  0E02               	movlw	2
  2660  002016  0100               	movlb	0	; () banked
  2661  002018  6F7E               	movwf	_cmd_consol_state& (0+255),b
  2662                           
  2663                           ;cmd_consol.c: 540: } else {
  2664  00201A  0012               	return	
  2665  00201C                     l930:
  2666                           
  2667                           ;cmd_consol.c: 541: printf("%s\r\n", "ERROR");
  2668                           
  2669                           ; BSR set to: 0
  2670  00201C  0EA2               	movlw	low (STR_119+2)
  2671  00201E  6E22               	movwf	printf@f,c
  2672  002020  0EFF               	movlw	high (STR_119+2)
  2673  002022  6E23               	movwf	printf@f+1,c
  2674  002024  0EC8               	movlw	low STR_116
  2675  002026  6E24               	movwf	?_printf+2,c
  2676  002028  0EFF               	movlw	high STR_116
  2677  00202A  6E25               	movwf	?_printf+3,c
  2678  00202C  EC22  F011         	call	_printf	;wreg free
  2679                           
  2680                           ;cmd_consol.c: 542: }
  2681                           ;cmd_consol.c: 543: }
  2682                           ;cmd_consol.c: 544: break;
  2683  002030  0012               	return	
  2684  002032                     
  2685                           ;cmd_consol.c: 547: {
  2686                           ;cmd_consol.c: 548: if (valid_cmd == 1) {
  2687  002032  0100               	movlb	0	; () banked
  2688  002034  0582               	decf	_valid_cmd& (0+255),w,b
  2689  002036  A4D8               	btfss	status,2,c
  2690  002038  D005               	goto	l933
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;cmd_consol.c: 549: reply_to_host();
  2694  00203A  EC1F  F00A         	call	_reply_to_host	;wreg free
  2695                           
  2696                           ;cmd_consol.c: 550: valid_cmd = 0;
  2697  00203E  0E00               	movlw	0
  2698  002040  0100               	movlb	0	; () banked
  2699  002042  6F82               	movwf	_valid_cmd& (0+255),b
  2700  002044                     l933:
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;cmd_consol.c: 552: }
  2704                           ;cmd_consol.c: 553: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2705                           
  2706                           ; BSR set to: 0
  2707  002044  0E01               	movlw	1
  2708  002046  6F7E               	movwf	_cmd_consol_state& (0+255),b
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;cmd_consol.c: 555: }
  2712                           ;cmd_consol.c: 556: }
  2713                           
  2714                           ;cmd_consol.c: 554: break;
  2715  002048  0012               	return	
  2716  00204A                     l923:
  2717                           
  2718                           ; BSR set to: 0
  2719  00204A  0100               	movlb	0	; () banked
  2720  00204C  517E               	movf	_cmd_consol_state& (0+255),w,b
  2721                           
  2722                           ; Switch size 1, requested type "space"
  2723                           ; Number of cases is 3, Range of values is 0 to 2
  2724                           ; switch strategies available:
  2725                           ; Name         Instructions Cycles
  2726                           ; simple_byte           10     6 (average)
  2727                           ;	Chosen strategy is simple_byte
  2728  00204E  0A00               	xorlw	0	; case 0
  2729  002050  B4D8               	btfsc	status,2,c
  2730  002052  D79B               	goto	l924
  2731  002054  0A01               	xorlw	1	; case 1
  2732  002056  B4D8               	btfsc	status,2,c
  2733  002058  D7C1               	goto	l926
  2734  00205A  0A03               	xorlw	3	; case 2
  2735  00205C  A4D8               	btfss	status,2,c
  2736  00205E  0012               	return	
  2737  002060  D7E8               	goto	l932
  2738  002062                     __end_of_cmd_consol_task:
  2739                           	opt stack 0
  2740                           tblptru	equ	0xFF8
  2741                           tblptrh	equ	0xFF7
  2742                           tblptrl	equ	0xFF6
  2743                           tablat	equ	0xFF5
  2744                           intcon	equ	0xFF2
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           postdec1	equ	0xFE5
  2748                           fsr1h	equ	0xFE2
  2749                           fsr1l	equ	0xFE1
  2750                           indf2	equ	0xFDF
  2751                           fsr2h	equ	0xFDA
  2752                           fsr2l	equ	0xFD9
  2753                           status	equ	0xFD8
  2754                           
  2755 ;; *************** function _reply_to_host *****************
  2756 ;; Defined at:
  2757 ;;		line 431 in file "cmd_consol.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;		None
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  ch              1   28[BANK0 ] unsigned char 
  2762 ;; Return value:  Size  Location     Type
  2763 ;;                  1    wreg      void 
  2764 ;; Registers used:
  2765 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2773 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;Total ram usage:        4 bytes
  2776 ;; Hardware stack levels used:    1
  2777 ;; Hardware stack levels required when called:   12
  2778 ;; This function calls:
  2779 ;;		_clcd_max_col
  2780 ;;		_clcd_max_row
  2781 ;;		_init_clcd_cusotom_lcd
  2782 ;;		_max_display_str
  2783 ;;		_max_display_support
  2784 ;;		_max_uid_range
  2785 ;;		_min_uid_range
  2786 ;;		_printf
  2787 ;;		_puts
  2788 ;;		_strcmp
  2789 ;;		_update_string_data
  2790 ;; This function is called by:
  2791 ;;		_cmd_consol_task
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text4
  2796  00143E                     __ptext4:
  2797                           	opt stack 0
  2798  00143E                     _reply_to_host:
  2799                           	opt stack 17
  2800                           
  2801                           ;cmd_consol.c: 432: if (strcmp(CMD, "KLM") == 0) {
  2802                           
  2803                           ;incstack = 0
  2804  00143E  0EB7               	movlw	low _CMD
  2805  001440  6E14               	movwf	strcmp@s1,c
  2806  001442  0E00               	movlw	high _CMD
  2807  001444  6E15               	movwf	strcmp@s1+1,c
  2808  001446  0EF5               	movlw	low STR_82
  2809  001448  6E16               	movwf	strcmp@s2,c
  2810  00144A  0EFF               	movlw	high STR_82
  2811  00144C  6E17               	movwf	strcmp@s2+1,c
  2812  00144E  EC46  F018         	call	_strcmp	;wreg free
  2813  001452  5014               	movf	?_strcmp,w,c
  2814  001454  1015               	iorwf	?_strcmp+1,w,c
  2815  001456  A4D8               	btfss	status,2,c
  2816  001458  D007               	goto	l873
  2817                           
  2818                           ;cmd_consol.c: 433: puts("OK\r\n");
  2819  00145A  0E91               	movlw	low (STR_87+8)
  2820  00145C  6E18               	movwf	puts@s,c
  2821  00145E  0EFE               	movlw	high (STR_87+8)
  2822  001460  6E19               	movwf	puts@s+1,c
  2823  001462  ECF8  F01A         	call	_puts	;wreg free
  2824                           
  2825                           ;cmd_consol.c: 434: } else if (strcmp(CMD, "LCDS?") == 0) {
  2826  001466  0012               	return	
  2827  001468                     l873:
  2828  001468  0EB7               	movlw	low _CMD
  2829  00146A  6E14               	movwf	strcmp@s1,c
  2830  00146C  0E00               	movlw	high _CMD
  2831  00146E  6E15               	movwf	strcmp@s1+1,c
  2832  001470  0EBC               	movlw	low STR_31
  2833  001472  6E16               	movwf	strcmp@s2,c
  2834  001474  0EFF               	movlw	high STR_31
  2835  001476  6E17               	movwf	strcmp@s2+1,c
  2836  001478  EC46  F018         	call	_strcmp	;wreg free
  2837  00147C  5014               	movf	?_strcmp,w,c
  2838  00147E  1015               	iorwf	?_strcmp+1,w,c
  2839  001480  A4D8               	btfss	status,2,c
  2840  001482  D017               	goto	l875
  2841                           
  2842                           ;cmd_consol.c: 435: printf("%s\r\n", max_display_support());
  2843  001484  0EA2               	movlw	low (STR_119+2)
  2844  001486  6E22               	movwf	printf@f,c
  2845  001488  0EFF               	movlw	high (STR_119+2)
  2846  00148A  6E23               	movwf	printf@f+1,c
  2847  00148C  EC57  F01B         	call	_max_display_support	;wreg free
  2848  001490  C014  F024         	movff	?_max_display_support,?_printf+2
  2849  001494  C015  F025         	movff	?_max_display_support+1,?_printf+3
  2850  001498  EC22  F011         	call	_printf	;wreg free
  2851                           
  2852                           ;cmd_consol.c: 436: printf("\r\n%s.., OK\r\n", "LCDS?");
  2853  00149C  0E89               	movlw	low STR_87
  2854  00149E  6E22               	movwf	printf@f,c
  2855  0014A0  0EFE               	movlw	high STR_87
  2856  0014A2  6E23               	movwf	printf@f+1,c
  2857  0014A4  0EBC               	movlw	low STR_31
  2858  0014A6  6E24               	movwf	?_printf+2,c
  2859  0014A8  0EFF               	movlw	high STR_31
  2860  0014AA  6E25               	movwf	?_printf+3,c
  2861  0014AC  EC22  F011         	call	_printf	;wreg free
  2862                           
  2863                           ;cmd_consol.c: 437: } else if (strcmp(CMD, "MC?") == 0) {
  2864  0014B0  0012               	return	
  2865  0014B2                     l875:
  2866  0014B2  0EB7               	movlw	low _CMD
  2867  0014B4  6E14               	movwf	strcmp@s1,c
  2868  0014B6  0E00               	movlw	high _CMD
  2869  0014B8  6E15               	movwf	strcmp@s1+1,c
  2870  0014BA  0EED               	movlw	low STR_29
  2871  0014BC  6E16               	movwf	strcmp@s2,c
  2872  0014BE  0EFF               	movlw	high STR_29
  2873  0014C0  6E17               	movwf	strcmp@s2+1,c
  2874  0014C2  EC46  F018         	call	_strcmp	;wreg free
  2875  0014C6  5014               	movf	?_strcmp,w,c
  2876  0014C8  1015               	iorwf	?_strcmp+1,w,c
  2877  0014CA  A4D8               	btfss	status,2,c
  2878  0014CC  D018               	goto	l877
  2879                           
  2880                           ;cmd_consol.c: 438: printf("%d\r\n", clcd_max_col());
  2881  0014CE  0EDF               	movlw	low (STR_17+14)
  2882  0014D0  6E22               	movwf	printf@f,c
  2883  0014D2  0EFD               	movlw	high (STR_17+14)
  2884  0014D4  6E23               	movwf	printf@f+1,c
  2885  0014D6  EC37  F01B         	call	_clcd_max_col	;wreg free
  2886  0014DA  0100               	movlb	0	; () banked
  2887  0014DC  6FDF               	movwf	??_reply_to_host& (0+255),b
  2888  0014DE  51DF               	movf	??_reply_to_host& (0+255),w,b
  2889  0014E0  6E24               	movwf	?_printf+2,c
  2890  0014E2  6A25               	clrf	?_printf+3,c
  2891  0014E4  EC22  F011         	call	_printf	;wreg free
  2892                           
  2893                           ;cmd_consol.c: 439: printf("\r\n%s.., OK\r\n", "MC?");
  2894  0014E8  0E89               	movlw	low STR_87
  2895  0014EA  6E22               	movwf	printf@f,c
  2896  0014EC  0EFE               	movlw	high STR_87
  2897  0014EE  6E23               	movwf	printf@f+1,c
  2898  0014F0  0EED               	movlw	low STR_29
  2899  0014F2  6E24               	movwf	?_printf+2,c
  2900  0014F4  0EFF               	movlw	high STR_29
  2901  0014F6  6E25               	movwf	?_printf+3,c
  2902  0014F8  EC22  F011         	call	_printf	;wreg free
  2903                           
  2904                           ;cmd_consol.c: 440: } else if (strcmp(CMD, "MR?") == 0) {
  2905  0014FC  0012               	return	
  2906  0014FE                     l877:
  2907  0014FE  0EB7               	movlw	low _CMD
  2908  001500  6E14               	movwf	strcmp@s1,c
  2909  001502  0E00               	movlw	high _CMD
  2910  001504  6E15               	movwf	strcmp@s1+1,c
  2911  001506  0EF1               	movlw	low STR_30
  2912  001508  6E16               	movwf	strcmp@s2,c
  2913  00150A  0EFF               	movlw	high STR_30
  2914  00150C  6E17               	movwf	strcmp@s2+1,c
  2915  00150E  EC46  F018         	call	_strcmp	;wreg free
  2916  001512  5014               	movf	?_strcmp,w,c
  2917  001514  1015               	iorwf	?_strcmp+1,w,c
  2918  001516  A4D8               	btfss	status,2,c
  2919  001518  D018               	goto	l879
  2920                           
  2921                           ;cmd_consol.c: 441: printf("%d\r\n", clcd_max_row());
  2922  00151A  0EDF               	movlw	low (STR_17+14)
  2923  00151C  6E22               	movwf	printf@f,c
  2924  00151E  0EFD               	movlw	high (STR_17+14)
  2925  001520  6E23               	movwf	printf@f+1,c
  2926  001522  EC30  F01B         	call	_clcd_max_row	;wreg free
  2927  001526  0100               	movlb	0	; () banked
  2928  001528  6FDF               	movwf	??_reply_to_host& (0+255),b
  2929  00152A  51DF               	movf	??_reply_to_host& (0+255),w,b
  2930  00152C  6E24               	movwf	?_printf+2,c
  2931  00152E  6A25               	clrf	?_printf+3,c
  2932  001530  EC22  F011         	call	_printf	;wreg free
  2933                           
  2934                           ;cmd_consol.c: 442: printf("\r\n%s.., OK\r\n", "MR?");
  2935  001534  0E89               	movlw	low STR_87
  2936  001536  6E22               	movwf	printf@f,c
  2937  001538  0EFE               	movlw	high STR_87
  2938  00153A  6E23               	movwf	printf@f+1,c
  2939  00153C  0EF1               	movlw	low STR_30
  2940  00153E  6E24               	movwf	?_printf+2,c
  2941  001540  0EFF               	movlw	high STR_30
  2942  001542  6E25               	movwf	?_printf+3,c
  2943  001544  EC22  F011         	call	_printf	;wreg free
  2944                           
  2945                           ;cmd_consol.c: 443: } else if (strcmp(CMD, "LCDS") == 0) {
  2946  001548  0012               	return	
  2947  00154A                     l879:
  2948  00154A  0EB7               	movlw	low _CMD
  2949  00154C  6E14               	movwf	strcmp@s1,c
  2950  00154E  0E00               	movlw	high _CMD
  2951  001550  6E15               	movwf	strcmp@s1+1,c
  2952  001552  0EDE               	movlw	low STR_33
  2953  001554  6E16               	movwf	strcmp@s2,c
  2954  001556  0EFF               	movlw	high STR_33
  2955  001558  6E17               	movwf	strcmp@s2+1,c
  2956  00155A  EC46  F018         	call	_strcmp	;wreg free
  2957  00155E  5014               	movf	?_strcmp,w,c
  2958  001560  1015               	iorwf	?_strcmp+1,w,c
  2959  001562  A4D8               	btfss	status,2,c
  2960  001564  D011               	goto	l881
  2961                           
  2962                           ;cmd_consol.c: 444: init_clcd_cusotom_lcd(clcd_init_row, clcd_init_col);
  2963  001566  C080  F034         	movff	_clcd_init_col,init_clcd_cusotom_lcd@clcd_init_col
  2964  00156A  0100               	movlb	0	; () banked
  2965  00156C  5181               	movf	_clcd_init_row& (0+255),w,b
  2966  00156E  ECBC  F012         	call	_init_clcd_cusotom_lcd
  2967                           
  2968                           ;cmd_consol.c: 445: printf("\r\n%s.., OK\r\n", "LCDS");
  2969  001572  0E89               	movlw	low STR_87
  2970  001574  6E22               	movwf	printf@f,c
  2971  001576  0EFE               	movlw	high STR_87
  2972  001578  6E23               	movwf	printf@f+1,c
  2973  00157A  0EDE               	movlw	low STR_33
  2974  00157C  6E24               	movwf	?_printf+2,c
  2975  00157E  0EFF               	movlw	high STR_33
  2976  001580  6E25               	movwf	?_printf+3,c
  2977  001582  EC22  F011         	call	_printf	;wreg free
  2978                           
  2979                           ;cmd_consol.c: 446: } else if (strcmp(CMD, "GMDS?") == 0) {
  2980  001586  0012               	return	
  2981  001588                     l881:
  2982  001588  0EB7               	movlw	low _CMD
  2983  00158A  6E14               	movwf	strcmp@s1,c
  2984  00158C  0E00               	movlw	high _CMD
  2985  00158E  6E15               	movwf	strcmp@s1+1,c
  2986  001590  0EC2               	movlw	low STR_37
  2987  001592  6E16               	movwf	strcmp@s2,c
  2988  001594  0EFF               	movlw	high STR_37
  2989  001596  6E17               	movwf	strcmp@s2+1,c
  2990  001598  EC46  F018         	call	_strcmp	;wreg free
  2991  00159C  5014               	movf	?_strcmp,w,c
  2992  00159E  1015               	iorwf	?_strcmp+1,w,c
  2993  0015A0  A4D8               	btfss	status,2,c
  2994  0015A2  D039               	goto	l883
  2995                           
  2996                           ;cmd_consol.c: 447: if (max_display_str() != 0) {
  2997  0015A4  EC29  F01B         	call	_max_display_str	;wreg free
  2998  0015A8  0900               	iorlw	0
  2999  0015AA  B4D8               	btfsc	status,2,c
  3000  0015AC  D01C               	goto	l884
  3001                           
  3002                           ;cmd_consol.c: 448: printf("%d,%c-%c\r\n", max_display_str(), min_uid_range(), max_uid_r
      +                          ange());
  3003  0015AE  0E0E               	movlw	low STR_101
  3004  0015B0  6E22               	movwf	printf@f,c
  3005  0015B2  0EFF               	movlw	high STR_101
  3006  0015B4  6E23               	movwf	printf@f+1,c
  3007  0015B6  EC29  F01B         	call	_max_display_str	;wreg free
  3008  0015BA  0100               	movlb	0	; () banked
  3009  0015BC  6FDF               	movwf	??_reply_to_host& (0+255),b
  3010  0015BE  51DF               	movf	??_reply_to_host& (0+255),w,b
  3011  0015C0  6E24               	movwf	?_printf+2,c
  3012  0015C2  6A25               	clrf	?_printf+3,c
  3013  0015C4  EC1B  F01B         	call	_min_uid_range	;wreg free
  3014  0015C8  0100               	movlb	0	; () banked
  3015  0015CA  6FE0               	movwf	(??_reply_to_host+1)& (0+255),b
  3016  0015CC  51E0               	movf	(??_reply_to_host+1)& (0+255),w,b
  3017  0015CE  6E26               	movwf	?_printf+4,c
  3018  0015D0  6A27               	clrf	?_printf+5,c
  3019  0015D2  EC22  F01B         	call	_max_uid_range	;wreg free
  3020  0015D6  0100               	movlb	0	; () banked
  3021  0015D8  6FE1               	movwf	(??_reply_to_host+2)& (0+255),b
  3022  0015DA  51E1               	movf	(??_reply_to_host+2)& (0+255),w,b
  3023  0015DC  6E28               	movwf	?_printf+6,c
  3024  0015DE  6A29               	clrf	?_printf+7,c
  3025  0015E0  EC22  F011         	call	_printf	;wreg free
  3026                           
  3027                           ;cmd_consol.c: 449: } else {
  3028  0015E4  D00D               	goto	l885
  3029  0015E6                     l884:
  3030                           
  3031                           ;cmd_consol.c: 450: printf("%d\r\n", max_display_str());
  3032  0015E6  0EDF               	movlw	low (STR_17+14)
  3033  0015E8  6E22               	movwf	printf@f,c
  3034  0015EA  0EFD               	movlw	high (STR_17+14)
  3035  0015EC  6E23               	movwf	printf@f+1,c
  3036  0015EE  EC29  F01B         	call	_max_display_str	;wreg free
  3037  0015F2  0100               	movlb	0	; () banked
  3038  0015F4  6FDF               	movwf	??_reply_to_host& (0+255),b
  3039  0015F6  51DF               	movf	??_reply_to_host& (0+255),w,b
  3040  0015F8  6E24               	movwf	?_printf+2,c
  3041  0015FA  6A25               	clrf	?_printf+3,c
  3042  0015FC  EC22  F011         	call	_printf	;wreg free
  3043  001600                     l885:
  3044                           
  3045                           ;cmd_consol.c: 451: }
  3046                           ;cmd_consol.c: 452: printf("\r\n%s.., OK\r\n", "GMDS?");
  3047  001600  0E89               	movlw	low STR_87
  3048  001602  6E22               	movwf	printf@f,c
  3049  001604  0EFE               	movlw	high STR_87
  3050  001606  6E23               	movwf	printf@f+1,c
  3051  001608  0EC2               	movlw	low STR_37
  3052  00160A  6E24               	movwf	?_printf+2,c
  3053  00160C  0EFF               	movlw	high STR_37
  3054  00160E  6E25               	movwf	?_printf+3,c
  3055  001610  EC22  F011         	call	_printf	;wreg free
  3056                           
  3057                           ;cmd_consol.c: 453: } else if (strcmp(CMD, "SDSTR") == 0) {
  3058  001614  0012               	return	
  3059  001616                     l883:
  3060  001616  0EB7               	movlw	low _CMD
  3061  001618  6E14               	movwf	strcmp@s1,c
  3062  00161A  0E00               	movlw	high _CMD
  3063  00161C  6E15               	movwf	strcmp@s1+1,c
  3064  00161E  0ECE               	movlw	low STR_38
  3065  001620  6E16               	movwf	strcmp@s2,c
  3066  001622  0EFF               	movlw	high STR_38
  3067  001624  6E17               	movwf	strcmp@s2+1,c
  3068  001626  EC46  F018         	call	_strcmp	;wreg free
  3069  00162A  5014               	movf	?_strcmp,w,c
  3070  00162C  1015               	iorwf	?_strcmp+1,w,c
  3071  00162E  A4D8               	btfss	status,2,c
  3072  001630  D00B               	goto	l887
  3073                           
  3074                           ;cmd_consol.c: 454: printf("\r\n%s.., OK\r\n", "SDSTR");
  3075  001632  0E89               	movlw	low STR_87
  3076  001634  6E22               	movwf	printf@f,c
  3077  001636  0EFE               	movlw	high STR_87
  3078  001638  6E23               	movwf	printf@f+1,c
  3079  00163A  0ECE               	movlw	low STR_38
  3080  00163C  6E24               	movwf	?_printf+2,c
  3081  00163E  0EFF               	movlw	high STR_38
  3082  001640  6E25               	movwf	?_printf+3,c
  3083  001642  EC22  F011         	call	_printf	;wreg free
  3084                           
  3085                           ;cmd_consol.c: 455: } else if (strcmp(CMD, "SDSCROL") == 0) {
  3086  001646  0012               	return	
  3087  001648                     l887:
  3088  001648  0EB7               	movlw	low _CMD
  3089  00164A  6E14               	movwf	strcmp@s1,c
  3090  00164C  0E00               	movlw	high _CMD
  3091  00164E  6E15               	movwf	strcmp@s1+1,c
  3092  001650  0E8A               	movlw	low STR_45
  3093  001652  6E16               	movwf	strcmp@s2,c
  3094  001654  0EFF               	movlw	high STR_45
  3095  001656  6E17               	movwf	strcmp@s2+1,c
  3096  001658  EC46  F018         	call	_strcmp	;wreg free
  3097  00165C  5014               	movf	?_strcmp,w,c
  3098  00165E  1015               	iorwf	?_strcmp+1,w,c
  3099  001660  A4D8               	btfss	status,2,c
  3100  001662  D00B               	goto	l889
  3101                           
  3102                           ;cmd_consol.c: 456: printf("\r\n%s.., OK\r\n", "SDSCROL");
  3103  001664  0E89               	movlw	low STR_87
  3104  001666  6E22               	movwf	printf@f,c
  3105  001668  0EFE               	movlw	high STR_87
  3106  00166A  6E23               	movwf	printf@f+1,c
  3107  00166C  0E8A               	movlw	low STR_45
  3108  00166E  6E24               	movwf	?_printf+2,c
  3109  001670  0EFF               	movlw	high STR_45
  3110  001672  6E25               	movwf	?_printf+3,c
  3111  001674  EC22  F011         	call	_printf	;wreg free
  3112                           
  3113                           ;cmd_consol.c: 457: } else if (strcmp(CMD, "SDSERC") == 0) {
  3114  001678  0012               	return	
  3115  00167A                     l889:
  3116  00167A  0EB7               	movlw	low _CMD
  3117  00167C  6E14               	movwf	strcmp@s1,c
  3118  00167E  0E00               	movlw	high _CMD
  3119  001680  6E15               	movwf	strcmp@s1+1,c
  3120  001682  0EAE               	movlw	low STR_53
  3121  001684  6E16               	movwf	strcmp@s2,c
  3122  001686  0EFF               	movlw	high STR_53
  3123  001688  6E17               	movwf	strcmp@s2+1,c
  3124  00168A  EC46  F018         	call	_strcmp	;wreg free
  3125  00168E  5014               	movf	?_strcmp,w,c
  3126  001690  1015               	iorwf	?_strcmp+1,w,c
  3127  001692  A4D8               	btfss	status,2,c
  3128  001694  D00B               	goto	l891
  3129                           
  3130                           ;cmd_consol.c: 458: printf("\r\n%s.., OK\r\n", "SDSERC");
  3131  001696  0E89               	movlw	low STR_87
  3132  001698  6E22               	movwf	printf@f,c
  3133  00169A  0EFE               	movlw	high STR_87
  3134  00169C  6E23               	movwf	printf@f+1,c
  3135  00169E  0EAE               	movlw	low STR_53
  3136  0016A0  6E24               	movwf	?_printf+2,c
  3137  0016A2  0EFF               	movlw	high STR_53
  3138  0016A4  6E25               	movwf	?_printf+3,c
  3139  0016A6  EC22  F011         	call	_printf	;wreg free
  3140                           
  3141                           ;cmd_consol.c: 459: } else if (strcmp(CMD, "UPDATE") == 0) {
  3142  0016AA  0012               	return	
  3143  0016AC                     l891:
  3144  0016AC  0EB7               	movlw	low _CMD
  3145  0016AE  6E14               	movwf	strcmp@s1,c
  3146  0016B0  0E00               	movlw	high _CMD
  3147  0016B2  6E15               	movwf	strcmp@s1+1,c
  3148  0016B4  0EB5               	movlw	low STR_65
  3149  0016B6  6E16               	movwf	strcmp@s2,c
  3150  0016B8  0EFF               	movlw	high STR_65
  3151  0016BA  6E17               	movwf	strcmp@s2+1,c
  3152  0016BC  EC46  F018         	call	_strcmp	;wreg free
  3153  0016C0  5014               	movf	?_strcmp,w,c
  3154  0016C2  1015               	iorwf	?_strcmp+1,w,c
  3155  0016C4  A4D8               	btfss	status,2,c
  3156  0016C6  0012               	return	
  3157                           
  3158                           ;cmd_consol.c: 460: if (cmd_data.data_set == 1 && cmd_data.row_col_set == 1 && cmd_data.
      +                          scroll_set == 1) {
  3159  0016C8  0100               	movlb	0	; () banked
  3160  0016CA  05AC               	decf	(_cmd_data+41)& (0+255),w,b
  3161  0016CC  A4D8               	btfss	status,2,c
  3162  0016CE  D027               	goto	l894
  3163                           
  3164                           ; BSR set to: 0
  3165  0016D0  05B1               	decf	(_cmd_data+46)& (0+255),w,b
  3166  0016D2  A4D8               	btfss	status,2,c
  3167  0016D4  D024               	goto	l894
  3168                           
  3169                           ; BSR set to: 0
  3170  0016D6  05B3               	decf	(_cmd_data+48)& (0+255),w,b
  3171  0016D8  A4D8               	btfss	status,2,c
  3172  0016DA  D021               	goto	l894
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;cmd_consol.c: 461: char ch = update_string_data(&cmd_data);
  3176  0016DC  0E83               	movlw	low _cmd_data
  3177  0016DE  6FD4               	movwf	update_string_data@data& (0+255),b
  3178  0016E0  0E00               	movlw	high _cmd_data
  3179  0016E2  6FD5               	movwf	(update_string_data@data+1)& (0+255),b
  3180  0016E4  EC0D  F00D         	call	_update_string_data	;wreg free
  3181  0016E8  0100               	movlb	0	; () banked
  3182  0016EA  6FE2               	movwf	reply_to_host@ch& (0+255),b
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;cmd_consol.c: 462: if (ch == 1)
  3186  0016EC  05E2               	decf	reply_to_host@ch& (0+255),w,b
  3187  0016EE  A4D8               	btfss	status,2,c
  3188  0016F0  D00B               	goto	l895
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;cmd_consol.c: 463: printf("%s\r\n", "ERROR");
  3192  0016F2  0EA2               	movlw	low (STR_119+2)
  3193  0016F4  6E22               	movwf	printf@f,c
  3194  0016F6  0EFF               	movlw	high (STR_119+2)
  3195  0016F8  6E23               	movwf	printf@f+1,c
  3196  0016FA  0EC8               	movlw	low STR_116
  3197  0016FC  6E24               	movwf	?_printf+2,c
  3198  0016FE  0EFF               	movlw	high STR_116
  3199  001700  6E25               	movwf	?_printf+3,c
  3200  001702  EC22  F011         	call	_printf	;wreg free
  3201  001706  0012               	return	
  3202  001708                     l895:
  3203                           
  3204                           ;cmd_consol.c: 464: else
  3205                           ;cmd_consol.c: 465: printf("\r\n%s.., OK\r\n", "UPDATE");
  3206  001708  0E89               	movlw	low STR_87
  3207  00170A  6E22               	movwf	printf@f,c
  3208  00170C  0EFE               	movlw	high STR_87
  3209  00170E  6E23               	movwf	printf@f+1,c
  3210  001710  0EB5               	movlw	low STR_65
  3211  001712  6E24               	movwf	?_printf+2,c
  3212  001714  0EFF               	movlw	high STR_65
  3213  001716  6E25               	movwf	?_printf+3,c
  3214  001718  EC22  F011         	call	_printf	;wreg free
  3215                           
  3216                           ;cmd_consol.c: 466: } else {
  3217  00171C  0012               	return	
  3218  00171E                     l894:
  3219                           
  3220                           ;cmd_consol.c: 467: if (cmd_data.data_set == 0) {
  3221  00171E  0100               	movlb	0	; () banked
  3222  001720  51AC               	movf	(_cmd_data+41)& (0+255),w,b
  3223  001722  A4D8               	btfss	status,2,c
  3224  001724  D00B               	goto	l898
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;cmd_consol.c: 468: printf("\r\n%s\r\n", "ERR_STR_SET");
  3228  001726  0EA0               	movlw	low STR_119
  3229  001728  6E22               	movwf	printf@f,c
  3230  00172A  0EFF               	movlw	high STR_119
  3231  00172C  6E23               	movwf	printf@f+1,c
  3232  00172E  0E02               	movlw	low STR_120
  3233  001730  6E24               	movwf	?_printf+2,c
  3234  001732  0EFF               	movlw	high STR_120
  3235  001734  6E25               	movwf	?_printf+3,c
  3236  001736  EC22  F011         	call	_printf	;wreg free
  3237                           
  3238                           ;cmd_consol.c: 469: } else if (cmd_data.row_col_set == 0) {
  3239  00173A  0012               	return	
  3240  00173C                     l898:
  3241  00173C  0100               	movlb	0	; () banked
  3242  00173E  51B1               	movf	(_cmd_data+46)& (0+255),w,b
  3243  001740  A4D8               	btfss	status,2,c
  3244  001742  D00B               	goto	l900
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;cmd_consol.c: 470: printf("\r\n%s\r\n", "ERR_ROW_COL");
  3248  001744  0EA0               	movlw	low STR_119
  3249  001746  6E22               	movwf	printf@f,c
  3250  001748  0EFF               	movlw	high STR_119
  3251  00174A  6E23               	movwf	printf@f+1,c
  3252  00174C  0EEA               	movlw	low STR_122
  3253  00174E  6E24               	movwf	?_printf+2,c
  3254  001750  0EFE               	movlw	high STR_122
  3255  001752  6E25               	movwf	?_printf+3,c
  3256  001754  EC22  F011         	call	_printf	;wreg free
  3257                           
  3258                           ;cmd_consol.c: 471: } else if (cmd_data.scroll_set == 0) {
  3259  001758  0012               	return	
  3260  00175A                     l900:
  3261  00175A  0100               	movlb	0	; () banked
  3262  00175C  51B3               	movf	(_cmd_data+48)& (0+255),w,b
  3263  00175E  A4D8               	btfss	status,2,c
  3264  001760  0012               	return	
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;cmd_consol.c: 472: printf("\r\n%s\r\n", "ERR_SCROLL_SET");
  3268  001762  0EA0               	movlw	low STR_119
  3269  001764  6E22               	movwf	printf@f,c
  3270  001766  0EFF               	movlw	high STR_119
  3271  001768  6E23               	movwf	printf@f+1,c
  3272  00176A  0E6C               	movlw	low STR_124
  3273  00176C  6E24               	movwf	?_printf+2,c
  3274  00176E  0EFE               	movlw	high STR_124
  3275  001770  6E25               	movwf	?_printf+3,c
  3276  001772  EC22  F011         	call	_printf	;wreg free
  3277  001776  0012               	return	
  3278  001778                     __end_of_reply_to_host:
  3279                           	opt stack 0
  3280                           tblptru	equ	0xFF8
  3281                           tblptrh	equ	0xFF7
  3282                           tblptrl	equ	0xFF6
  3283                           tablat	equ	0xFF5
  3284                           intcon	equ	0xFF2
  3285                           postinc0	equ	0xFEE
  3286                           wreg	equ	0xFE8
  3287                           postdec1	equ	0xFE5
  3288                           fsr1h	equ	0xFE2
  3289                           fsr1l	equ	0xFE1
  3290                           indf2	equ	0xFDF
  3291                           fsr2h	equ	0xFDA
  3292                           fsr2l	equ	0xFD9
  3293                           status	equ	0xFD8
  3294                           
  3295 ;; *************** function _update_string_data *****************
  3296 ;; Defined at:
  3297 ;;		line 271 in file "clcd.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  data            2   14[BANK0 ] PTR struct .
  3300 ;;		 -> cmd_data(52), 
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;  i               2   23[BANK0 ] int 
  3303 ;;  end_point       1   22[BANK0 ] unsigned char 
  3304 ;;  start_point     1   21[BANK0 ] unsigned char 
  3305 ;;  exist_uid_id    1   20[BANK0 ] unsigned char 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      unsigned char 
  3308 ;; Registers used:
  3309 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3315 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;Total ram usage:       11 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:   10
  3322 ;; This function calls:
  3323 ;;		___wmul
  3324 ;;		_conflict_check
  3325 ;;		_copy_data
  3326 ;;		_make_display
  3327 ;;		_memset
  3328 ;;		_printf
  3329 ;; This function is called by:
  3330 ;;		_reply_to_host
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           	psect	text5
  3335  001A1A                     __ptext5:
  3336                           	opt stack 0
  3337  001A1A                     _update_string_data:
  3338                           	opt stack 18
  3339                           
  3340                           ;clcd.c: 272: int i = 0;
  3341                           
  3342                           ;incstack = 0
  3343  001A1A  0E00               	movlw	0
  3344  001A1C  0100               	movlb	0	; () banked
  3345  001A1E  6FDE               	movwf	(update_string_data@i+1)& (0+255),b
  3346  001A20  0E00               	movlw	0
  3347  001A22  6FDD               	movwf	update_string_data@i& (0+255),b
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;clcd.c: 273: char exist_uid_idx = -1;
  3351  001A24  69DA               	setf	update_string_data@exist_uid_idx& (0+255),b
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;clcd.c: 274: char start_point, end_point;
  3355                           ;clcd.c: 275: memset(conflict_arr, -1, sizeof (conflict_arr));
  3356  001A26  0E50               	movlw	low _conflict_arr
  3357  001A28  6E28               	movwf	memset@p1,c
  3358  001A2A  0E01               	movlw	high _conflict_arr
  3359  001A2C  6E29               	movwf	memset@p1+1,c
  3360  001A2E  0EFF               	movlw	255
  3361  001A30  6E2B               	movwf	memset@c+1,c
  3362  001A32  682A               	setf	memset@c,c
  3363  001A34  0E00               	movlw	0
  3364  001A36  6E2D               	movwf	memset@n+1,c
  3365  001A38  0E28               	movlw	40
  3366  001A3A  6E2C               	movwf	memset@n,c
  3367  001A3C  EC00  F01A         	call	_memset	;wreg free
  3368                           
  3369                           ;clcd.c: 276: conflict_data_count = 0;
  3370  001A40  0E00               	movlw	0
  3371  001A42  6E3B               	movwf	_conflict_data_count,c
  3372                           
  3373                           ;clcd.c: 277: start_point = (data->start_row * clcd_config_data.clcd_max_col) + data->st
      +                          art_col;
  3374  001A44  0100               	movlb	0	; () banked
  3375  001A46  EE20 F02B          	lfsr	2,43
  3376  001A4A  51D4               	movf	update_string_data@data& (0+255),w,b
  3377  001A4C  26D9               	addwf	fsr2l,f,c
  3378  001A4E  51D5               	movf	(update_string_data@data+1)& (0+255),w,b
  3379  001A50  22DA               	addwfc	fsr2h,f,c
  3380  001A52  50DF               	movf	indf2,w,c
  3381  001A54  6FD6               	movwf	??_update_string_data& (0+255),b
  3382  001A56  EE20 F02A          	lfsr	2,42
  3383  001A5A  51D4               	movf	update_string_data@data& (0+255),w,b
  3384  001A5C  26D9               	addwf	fsr2l,f,c
  3385  001A5E  51D5               	movf	(update_string_data@data+1)& (0+255),w,b
  3386  001A60  22DA               	addwfc	fsr2h,f,c
  3387  001A62  50DF               	movf	indf2,w,c
  3388  001A64  0246               	mulwf	_clcd_config_data+2,c
  3389  001A66  50F3               	movf	prodl,w,c
  3390  001A68  25D6               	addwf	??_update_string_data& (0+255),w,b
  3391  001A6A  6FDB               	movwf	update_string_data@start_point& (0+255),b
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;clcd.c: 278: end_point = (data->end_row * clcd_config_data.clcd_max_col) + data->end_co
      +                          l;
  3395  001A6C  EE20 F02D          	lfsr	2,45
  3396  001A70  51D4               	movf	update_string_data@data& (0+255),w,b
  3397  001A72  26D9               	addwf	fsr2l,f,c
  3398  001A74  51D5               	movf	(update_string_data@data+1)& (0+255),w,b
  3399  001A76  22DA               	addwfc	fsr2h,f,c
  3400  001A78  50DF               	movf	indf2,w,c
  3401  001A7A  6FD6               	movwf	??_update_string_data& (0+255),b
  3402  001A7C  EE20 F02C          	lfsr	2,44
  3403  001A80  51D4               	movf	update_string_data@data& (0+255),w,b
  3404  001A82  26D9               	addwf	fsr2l,f,c
  3405  001A84  51D5               	movf	(update_string_data@data+1)& (0+255),w,b
  3406  001A86  22DA               	addwfc	fsr2h,f,c
  3407  001A88  50DF               	movf	indf2,w,c
  3408  001A8A  0246               	mulwf	_clcd_config_data+2,c
  3409  001A8C  50F3               	movf	prodl,w,c
  3410  001A8E  25D6               	addwf	??_update_string_data& (0+255),w,b
  3411  001A90  6FDC               	movwf	update_string_data@end_point& (0+255),b
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;clcd.c: 280: printf("UID = %c, start_pt = %d, end_pt = %d\r\n", data->uid, start_point,
      +                           end_point);
  3415  001A92  0EE1               	movlw	low STR_12
  3416  001A94  6E22               	movwf	printf@f,c
  3417  001A96  0EFC               	movlw	high STR_12
  3418  001A98  6E23               	movwf	printf@f+1,c
  3419  001A9A  C0D4  FFD9         	movff	update_string_data@data,fsr2l
  3420  001A9E  C0D5  FFDA         	movff	update_string_data@data+1,fsr2h
  3421  001AA2  50DF               	movf	indf2,w,c
  3422  001AA4  6FD6               	movwf	??_update_string_data& (0+255),b
  3423  001AA6  51D6               	movf	??_update_string_data& (0+255),w,b
  3424  001AA8  6E24               	movwf	?_printf+2,c
  3425  001AAA  6A25               	clrf	?_printf+3,c
  3426  001AAC  C0DB  F026         	movff	update_string_data@start_point,?_printf+4
  3427  001AB0  6A27               	clrf	?_printf+5,c
  3428  001AB2  C0DC  F028         	movff	update_string_data@end_point,?_printf+6
  3429  001AB6  6A29               	clrf	?_printf+7,c
  3430  001AB8  EC22  F011         	call	_printf	;wreg free
  3431                           
  3432                           ;clcd.c: 282: if (data_count < clcd_config_data.clcd_max_display_string) {
  3433  001ABC  5048               	movf	_clcd_config_data+4,w,c
  3434  001ABE  5C3C               	subwf	_data_count,w,c
  3435  001AC0  B0D8               	btfsc	status,0,c
  3436  001AC2  D0D1               	goto	l492
  3437                           
  3438                           ;clcd.c: 283: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3439  001AC4  0E00               	movlw	0
  3440  001AC6  0100               	movlb	0	; () banked
  3441  001AC8  6FDE               	movwf	(update_string_data@i+1)& (0+255),b
  3442  001ACA  0E00               	movlw	0
  3443  001ACC  6FDD               	movwf	update_string_data@i& (0+255),b
  3444  001ACE  D09B               	goto	l493
  3445  001AD0                     
  3446                           ; BSR set to: 0
  3447                           ;clcd.c: 284: if (clcd_display_string_details[i].uid == data->uid) {
  3448                           
  3449                           ; BSR set to: 0
  3450  001AD0  C0DD  F01C         	movff	update_string_data@i,___wmul@multiplier
  3451  001AD4  C0DE  F01D         	movff	update_string_data@i+1,___wmul@multiplier+1
  3452  001AD8  0E00               	movlw	0
  3453  001ADA  6E1F               	movwf	___wmul@multiplicand+1,c
  3454  001ADC  0E37               	movlw	55
  3455  001ADE  6E1E               	movwf	___wmul@multiplicand,c
  3456  001AE0  EC41  F01A         	call	___wmul	;wreg free
  3457  001AE4  0E96               	movlw	low _clcd_display_string_details
  3458  001AE6  241C               	addwf	?___wmul,w,c
  3459  001AE8  6ED9               	movwf	fsr2l,c
  3460  001AEA  0E02               	movlw	high _clcd_display_string_details
  3461  001AEC  201D               	addwfc	?___wmul+1,w,c
  3462  001AEE  6EDA               	movwf	fsr2h,c
  3463  001AF0  C0D4  FFE1         	movff	update_string_data@data,fsr1l
  3464  001AF4  C0D5  FFE2         	movff	update_string_data@data+1,fsr1h
  3465  001AF8  50E7               	movf	indf1,w,c
  3466  001AFA  0100               	movlb	0	; () banked
  3467  001AFC  6FD8               	movwf	(??_update_string_data+2)& (0+255),b
  3468  001AFE  6BD9               	clrf	(??_update_string_data+3)& (0+255),b
  3469  001B00  50DE               	movf	postinc2,w,c
  3470  001B02  19D8               	xorwf	(??_update_string_data+2)& (0+255),w,b
  3471  001B04  E12D               	bnz	l6701
  3472  001B06  50DE               	movf	postinc2,w,c
  3473  001B08  19D9               	xorwf	(??_update_string_data+3)& (0+255),w,b
  3474  001B0A  A4D8               	btfss	status,2,c
  3475  001B0C  D029               	goto	l495
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;clcd.c: 285: exist_uid_idx = i;
  3479  001B0E  C0DD  F0DA         	movff	update_string_data@i,update_string_data@exist_uid_idx
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;clcd.c: 286: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  3483  001B12  C0DD  F01C         	movff	update_string_data@i,___wmul@multiplier
  3484  001B16  C0DE  F01D         	movff	update_string_data@i+1,___wmul@multiplier+1
  3485  001B1A  0E00               	movlw	0
  3486  001B1C  6E1F               	movwf	___wmul@multiplicand+1,c
  3487  001B1E  0E37               	movlw	55
  3488  001B20  6E1E               	movwf	___wmul@multiplicand,c
  3489  001B22  EC41  F01A         	call	___wmul	;wreg free
  3490  001B26  0E96               	movlw	low _clcd_display_string_details
  3491  001B28  241C               	addwf	?___wmul,w,c
  3492  001B2A  6ED9               	movwf	fsr2l,c
  3493  001B2C  0E02               	movlw	high _clcd_display_string_details
  3494  001B2E  201D               	addwfc	?___wmul+1,w,c
  3495  001B30  6EDA               	movwf	fsr2h,c
  3496  001B32  503B               	movf	_conflict_data_count,w,c
  3497  001B34  0D02               	mullw	2
  3498  001B36  0E50               	movlw	low _conflict_arr
  3499  001B38  24F3               	addwf	prodl,w,c
  3500  001B3A  6EE1               	movwf	fsr1l,c
  3501  001B3C  0E01               	movlw	high _conflict_arr
  3502  001B3E  20F4               	addwfc	prodh,w,c
  3503  001B40  6EE2               	movwf	fsr1h,c
  3504  001B42  CFDE FFE6          	movff	postinc2,postinc1
  3505  001B46  CFDD FFE5          	movff	postdec2,postdec1
  3506  001B4A  2A3B               	incf	_conflict_data_count,f,c
  3507                           
  3508                           ;clcd.c: 287: conflict_check(exist_uid_idx, start_point, end_point);
  3509  001B4C  C0DB  F034         	movff	update_string_data@start_point,conflict_check@new_start_point
  3510  001B50  C0DC  F035         	movff	update_string_data@end_point,conflict_check@new_end_point
  3511  001B54  0100               	movlb	0	; () banked
  3512  001B56  51DA               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3513  001B58  ECBC  F00B         	call	_conflict_check
  3514                           
  3515                           ;clcd.c: 288: return 1;
  3516  001B5C  0E01               	movlw	1
  3517  001B5E  0012               	return	
  3518  001B60                     l495:
  3519  001B60                     l6701:
  3520                           
  3521                           ;clcd.c: 290: if (conflict_check(exist_uid_idx, start_point, end_point) == 1) {
  3522  001B60  C0DB  F034         	movff	update_string_data@start_point,conflict_check@new_start_point
  3523  001B64  C0DC  F035         	movff	update_string_data@end_point,conflict_check@new_end_point
  3524  001B68  0100               	movlb	0	; () banked
  3525  001B6A  51DA               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3526  001B6C  ECBC  F00B         	call	_conflict_check
  3527  001B70  06E8               	decf	wreg,f,c
  3528  001B72  A4D8               	btfss	status,2,c
  3529  001B74  D045               	goto	l498
  3530                           
  3531                           ;clcd.c: 291: printf("conflict: uid\r\n");
  3532  001B76  0E5C               	movlw	low STR_14
  3533  001B78  6E22               	movwf	printf@f,c
  3534  001B7A  0EFE               	movlw	high STR_14
  3535  001B7C  6E23               	movwf	printf@f+1,c
  3536  001B7E  EC22  F011         	call	_printf	;wreg free
  3537                           
  3538                           ;clcd.c: 292: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3539  001B82  0E00               	movlw	0
  3540  001B84  0100               	movlb	0	; () banked
  3541  001B86  6FDE               	movwf	(update_string_data@i+1)& (0+255),b
  3542  001B88  0E00               	movlw	0
  3543  001B8A  6FDD               	movwf	update_string_data@i& (0+255),b
  3544  001B8C  D024               	goto	l499
  3545  001B8E                     
  3546                           ; BSR set to: 0
  3547                           ;clcd.c: 293: if (conflict_arr[i] != -1)
  3548                           
  3549                           ; BSR set to: 0
  3550  001B8E  90D8               	bcf	status,0,c
  3551  001B90  35DD               	rlcf	update_string_data@i& (0+255),w,b
  3552  001B92  6ED9               	movwf	fsr2l,c
  3553  001B94  35DE               	rlcf	(update_string_data@i+1)& (0+255),w,b
  3554  001B96  6EDA               	movwf	fsr2h,c
  3555  001B98  0E50               	movlw	low _conflict_arr
  3556  001B9A  26D9               	addwf	fsr2l,f,c
  3557  001B9C  0E01               	movlw	high _conflict_arr
  3558  001B9E  22DA               	addwfc	fsr2h,f,c
  3559  001BA0  28DE               	incf	postinc2,w,c
  3560  001BA2  E103               	bnz	u6060
  3561  001BA4  28DE               	incf	postinc2,w,c
  3562  001BA6  B4D8               	btfsc	status,2,c
  3563  001BA8  D013               	goto	l501
  3564  001BAA                     u6060:
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;clcd.c: 294: printf("%c, ", conflict_arr[i]);
  3568  001BAA  0EE3               	movlw	low STR_15
  3569  001BAC  6E22               	movwf	printf@f,c
  3570  001BAE  0EFF               	movlw	high STR_15
  3571  001BB0  6E23               	movwf	printf@f+1,c
  3572  001BB2  90D8               	bcf	status,0,c
  3573  001BB4  35DD               	rlcf	update_string_data@i& (0+255),w,b
  3574  001BB6  6ED9               	movwf	fsr2l,c
  3575  001BB8  35DE               	rlcf	(update_string_data@i+1)& (0+255),w,b
  3576  001BBA  6EDA               	movwf	fsr2h,c
  3577  001BBC  0E50               	movlw	low _conflict_arr
  3578  001BBE  26D9               	addwf	fsr2l,f,c
  3579  001BC0  0E01               	movlw	high _conflict_arr
  3580  001BC2  22DA               	addwfc	fsr2h,f,c
  3581  001BC4  CFDE F024          	movff	postinc2,?_printf+2
  3582  001BC8  CFDD F025          	movff	postdec2,?_printf+3
  3583  001BCC  EC22  F011         	call	_printf	;wreg free
  3584  001BD0                     l501:
  3585  001BD0  0100               	movlb	0	; () banked
  3586  001BD2  4BDD               	infsnz	update_string_data@i& (0+255),f,b
  3587  001BD4  2BDE               	incf	(update_string_data@i+1)& (0+255),f,b
  3588  001BD6                     l499:
  3589                           
  3590                           ; BSR set to: 0
  3591                           
  3592                           ; BSR set to: 0
  3593  001BD6  5048               	movf	_clcd_config_data+4,w,c
  3594  001BD8  6FD6               	movwf	??_update_string_data& (0+255),b
  3595  001BDA  6BD7               	clrf	(??_update_string_data+1)& (0+255),b
  3596  001BDC  51D6               	movf	??_update_string_data& (0+255),w,b
  3597  001BDE  5DDD               	subwf	update_string_data@i& (0+255),w,b
  3598  001BE0  51DE               	movf	(update_string_data@i+1)& (0+255),w,b
  3599  001BE2  0A80               	xorlw	128
  3600  001BE4  6FD8               	movwf	(??_update_string_data+2)& (0+255),b
  3601  001BE6  51D7               	movf	(??_update_string_data+1)& (0+255),w,b
  3602  001BE8  0A80               	xorlw	128
  3603  001BEA  59D8               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3604  001BEC  A0D8               	btfss	status,0,c
  3605  001BEE  D7CF               	goto	l500
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;clcd.c: 295: }
  3609                           ;clcd.c: 296: printf("\r\n");
  3610                           
  3611                           ; BSR set to: 0
  3612  001BF0  0E9F               	movlw	low (STR_55+9)
  3613  001BF2  6E22               	movwf	printf@f,c
  3614  001BF4  0EFE               	movlw	high (STR_55+9)
  3615  001BF6  6E23               	movwf	printf@f+1,c
  3616  001BF8  EC22  F011         	call	_printf	;wreg free
  3617                           
  3618                           ;clcd.c: 297: return 1;
  3619  001BFC  0E01               	movlw	1
  3620  001BFE  0012               	return	
  3621  001C00                     l498:
  3622  001C00  0100               	movlb	0	; () banked
  3623  001C02  4BDD               	infsnz	update_string_data@i& (0+255),f,b
  3624  001C04  2BDE               	incf	(update_string_data@i+1)& (0+255),f,b
  3625  001C06                     l493:
  3626                           
  3627                           ; BSR set to: 0
  3628                           
  3629                           ; BSR set to: 0
  3630  001C06  5048               	movf	_clcd_config_data+4,w,c
  3631  001C08  6FD6               	movwf	??_update_string_data& (0+255),b
  3632  001C0A  6BD7               	clrf	(??_update_string_data+1)& (0+255),b
  3633  001C0C  51D6               	movf	??_update_string_data& (0+255),w,b
  3634  001C0E  5DDD               	subwf	update_string_data@i& (0+255),w,b
  3635  001C10  51DE               	movf	(update_string_data@i+1)& (0+255),w,b
  3636  001C12  0A80               	xorlw	128
  3637  001C14  6FD8               	movwf	(??_update_string_data+2)& (0+255),b
  3638  001C16  51D7               	movf	(??_update_string_data+1)& (0+255),w,b
  3639  001C18  0A80               	xorlw	128
  3640  001C1A  59D8               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3641  001C1C  A0D8               	btfss	status,0,c
  3642  001C1E  D758               	goto	l494
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;clcd.c: 298: }
  3646                           ;clcd.c: 299: }
  3647                           ;clcd.c: 300: }
  3648                           ;clcd.c: 301: memset(&clcd_display_string_details[data_count], 0, sizeof (CLCD_STRING_DI
      +                          SPLAY_DETAILS));
  3649                           
  3650                           ; BSR set to: 0
  3651  001C20  503C               	movf	_data_count,w,c
  3652  001C22  0D37               	mullw	55
  3653  001C24  0E96               	movlw	low _clcd_display_string_details
  3654  001C26  24F3               	addwf	prodl,w,c
  3655  001C28  6E28               	movwf	memset@p1,c
  3656  001C2A  0E02               	movlw	high _clcd_display_string_details
  3657  001C2C  20F4               	addwfc	prodh,w,c
  3658  001C2E  6E29               	movwf	memset@p1+1,c
  3659  001C30  0E00               	movlw	0
  3660  001C32  6E2B               	movwf	memset@c+1,c
  3661  001C34  0E00               	movlw	0
  3662  001C36  6E2A               	movwf	memset@c,c
  3663  001C38  0E00               	movlw	0
  3664  001C3A  6E2D               	movwf	memset@n+1,c
  3665  001C3C  0E37               	movlw	55
  3666  001C3E  6E2C               	movwf	memset@n,c
  3667  001C40  EC00  F01A         	call	_memset	;wreg free
  3668                           
  3669                           ;clcd.c: 302: copy_data(&clcd_display_string_details[data_count], data);
  3670  001C44  503C               	movf	_data_count,w,c
  3671  001C46  0D37               	mullw	55
  3672  001C48  0E96               	movlw	low _clcd_display_string_details
  3673  001C4A  24F3               	addwf	prodl,w,c
  3674  001C4C  6E34               	movwf	copy_data@clcd_str_data,c
  3675  001C4E  0E02               	movlw	high _clcd_display_string_details
  3676  001C50  20F4               	addwfc	prodh,w,c
  3677  001C52  6E35               	movwf	copy_data@clcd_str_data+1,c
  3678  001C54  C0D4  F036         	movff	update_string_data@data,copy_data@data
  3679  001C58  C0D5  F037         	movff	update_string_data@data+1,copy_data@data+1
  3680  001C5C  EC35  F00E         	call	_copy_data	;wreg free
  3681                           
  3682                           ;clcd.c: 303: data_count++;
  3683  001C60  2A3C               	incf	_data_count,f,c
  3684                           
  3685                           ;clcd.c: 304: make_display();
  3686  001C62  EC31  F010         	call	_make_display	;wreg free
  3687  001C66                     l492:
  3688                           
  3689                           ;clcd.c: 307: }
  3690                           ;clcd.c: 308: return 0;
  3691  001C66  0E00               	movlw	0
  3692  001C68  0012               	return	
  3693  001C6A                     __end_of_update_string_data:
  3694                           	opt stack 0
  3695                           tblptru	equ	0xFF8
  3696                           tblptrh	equ	0xFF7
  3697                           tblptrl	equ	0xFF6
  3698                           tablat	equ	0xFF5
  3699                           prodh	equ	0xFF4
  3700                           prodl	equ	0xFF3
  3701                           intcon	equ	0xFF2
  3702                           postinc0	equ	0xFEE
  3703                           wreg	equ	0xFE8
  3704                           indf1	equ	0xFE7
  3705                           postinc1	equ	0xFE6
  3706                           postdec1	equ	0xFE5
  3707                           fsr1h	equ	0xFE2
  3708                           fsr1l	equ	0xFE1
  3709                           indf2	equ	0xFDF
  3710                           postinc2	equ	0xFDE
  3711                           postdec2	equ	0xFDD
  3712                           fsr2h	equ	0xFDA
  3713                           fsr2l	equ	0xFD9
  3714                           status	equ	0xFD8
  3715                           
  3716 ;; *************** function _make_display *****************
  3717 ;; Defined at:
  3718 ;;		line 656 in file "clcd.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;		None
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  count           2   54[COMRAM] int 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      void 
  3725 ;; Registers used:
  3726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3733 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3734 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3735 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3736 ;;Total ram usage:        5 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    9
  3739 ;; This function calls:
  3740 ;;		___wmul
  3741 ;;		_display_text
  3742 ;;		_scroll_left_to_right
  3743 ;;		_scroll_off
  3744 ;;		_scroll_right_to_left
  3745 ;;		_strlen
  3746 ;; This function is called by:
  3747 ;;		_update_string_data
  3748 ;;		_main
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           	psect	text6
  3753  002062                     __ptext6:
  3754                           	opt stack 0
  3755  002062                     _make_display:
  3756                           	opt stack 21
  3757                           
  3758                           ;clcd.c: 657: int count = 0;
  3759                           
  3760                           ;incstack = 0
  3761  002062  0E00               	movlw	0
  3762  002064  6E38               	movwf	make_display@count+1,c
  3763  002066  0E00               	movlw	0
  3764  002068  6E37               	movwf	make_display@count,c
  3765                           
  3766                           ;clcd.c: 658: for (count = 0; count < clcd_config_data.clcd_max_display_string; count++)
      +                           {
  3767  00206A  0E00               	movlw	0
  3768  00206C  6E38               	movwf	make_display@count+1,c
  3769  00206E  0E00               	movlw	0
  3770  002070  6E37               	movwf	make_display@count,c
  3771  002072  D0D3               	goto	l629
  3772  002074                     
  3773                           ;clcd.c: 659: if (strlen(clcd_display_string_details[count].string) != 0 && clcd_display
      +                          _string_details[count].direction == 2) {
  3774  002074  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3775  002078  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3776  00207C  0E00               	movlw	0
  3777  00207E  6E1F               	movwf	___wmul@multiplicand+1,c
  3778  002080  0E37               	movlw	55
  3779  002082  6E1E               	movwf	___wmul@multiplicand,c
  3780  002084  EC41  F01A         	call	___wmul	;wreg free
  3781  002088  0E02               	movlw	2
  3782  00208A  261C               	addwf	?___wmul,f,c
  3783  00208C  0E00               	movlw	0
  3784  00208E  221D               	addwfc	?___wmul+1,f,c
  3785  002090  0E96               	movlw	low _clcd_display_string_details
  3786  002092  241C               	addwf	?___wmul,w,c
  3787  002094  6E22               	movwf	strlen@s,c
  3788  002096  0E02               	movlw	high _clcd_display_string_details
  3789  002098  201D               	addwfc	?___wmul+1,w,c
  3790  00209A  6E23               	movwf	strlen@s+1,c
  3791  00209C  EC4C  F019         	call	_strlen	;wreg free
  3792  0020A0  5022               	movf	?_strlen,w,c
  3793  0020A2  1023               	iorwf	?_strlen+1,w,c
  3794  0020A4  B4D8               	btfsc	status,2,c
  3795  0020A6  D02C               	goto	l631
  3796  0020A8  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3797  0020AC  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3798  0020B0  0E00               	movlw	0
  3799  0020B2  6E1F               	movwf	___wmul@multiplicand+1,c
  3800  0020B4  0E37               	movlw	55
  3801  0020B6  6E1E               	movwf	___wmul@multiplicand,c
  3802  0020B8  EC41  F01A         	call	___wmul	;wreg free
  3803  0020BC  0E31               	movlw	49
  3804  0020BE  261C               	addwf	?___wmul,f,c
  3805  0020C0  0E00               	movlw	0
  3806  0020C2  221D               	addwfc	?___wmul+1,f,c
  3807  0020C4  0E96               	movlw	low _clcd_display_string_details
  3808  0020C6  241C               	addwf	?___wmul,w,c
  3809  0020C8  6ED9               	movwf	fsr2l,c
  3810  0020CA  0E02               	movlw	high _clcd_display_string_details
  3811  0020CC  201D               	addwfc	?___wmul+1,w,c
  3812  0020CE  6EDA               	movwf	fsr2h,c
  3813  0020D0  50DF               	movf	223,w,c
  3814  0020D2  0B07               	andlw	7
  3815  0020D4  0A02               	xorlw	2
  3816  0020D6  A4D8               	btfss	status,2,c
  3817  0020D8  D013               	goto	l631
  3818                           
  3819                           ;clcd.c: 660: scroll_left_to_right(&clcd_display_string_details[count]);
  3820  0020DA  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3821  0020DE  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3822  0020E2  0E00               	movlw	0
  3823  0020E4  6E1F               	movwf	___wmul@multiplicand+1,c
  3824  0020E6  0E37               	movlw	55
  3825  0020E8  6E1E               	movwf	___wmul@multiplicand,c
  3826  0020EA  EC41  F01A         	call	___wmul	;wreg free
  3827  0020EE  0E96               	movlw	low _clcd_display_string_details
  3828  0020F0  241C               	addwf	?___wmul,w,c
  3829  0020F2  6E30               	movwf	scroll_left_to_right@clcd_display_string_details,c
  3830  0020F4  0E02               	movlw	high _clcd_display_string_details
  3831  0020F6  201D               	addwfc	?___wmul+1,w,c
  3832  0020F8  6E31               	movwf	scroll_left_to_right@clcd_display_string_details+1,c
  3833  0020FA  EC7B  F008         	call	_scroll_left_to_right	;wreg free
  3834                           
  3835                           ;clcd.c: 661: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 1) {
  3836  0020FE  D08B               	goto	l635
  3837  002100                     l631:
  3838  002100  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3839  002104  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3840  002108  0E00               	movlw	0
  3841  00210A  6E1F               	movwf	___wmul@multiplicand+1,c
  3842  00210C  0E37               	movlw	55
  3843  00210E  6E1E               	movwf	___wmul@multiplicand,c
  3844  002110  EC41  F01A         	call	___wmul	;wreg free
  3845  002114  0E02               	movlw	2
  3846  002116  261C               	addwf	?___wmul,f,c
  3847  002118  0E00               	movlw	0
  3848  00211A  221D               	addwfc	?___wmul+1,f,c
  3849  00211C  0E96               	movlw	low _clcd_display_string_details
  3850  00211E  241C               	addwf	?___wmul,w,c
  3851  002120  6E22               	movwf	strlen@s,c
  3852  002122  0E02               	movlw	high _clcd_display_string_details
  3853  002124  201D               	addwfc	?___wmul+1,w,c
  3854  002126  6E23               	movwf	strlen@s+1,c
  3855  002128  EC4C  F019         	call	_strlen	;wreg free
  3856  00212C  5022               	movf	?_strlen,w,c
  3857  00212E  1023               	iorwf	?_strlen+1,w,c
  3858  002130  B4D8               	btfsc	status,2,c
  3859  002132  D02C               	goto	l633
  3860  002134  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3861  002138  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3862  00213C  0E00               	movlw	0
  3863  00213E  6E1F               	movwf	___wmul@multiplicand+1,c
  3864  002140  0E37               	movlw	55
  3865  002142  6E1E               	movwf	___wmul@multiplicand,c
  3866  002144  EC41  F01A         	call	___wmul	;wreg free
  3867  002148  0E31               	movlw	49
  3868  00214A  261C               	addwf	?___wmul,f,c
  3869  00214C  0E00               	movlw	0
  3870  00214E  221D               	addwfc	?___wmul+1,f,c
  3871  002150  0E96               	movlw	low _clcd_display_string_details
  3872  002152  241C               	addwf	?___wmul,w,c
  3873  002154  6ED9               	movwf	fsr2l,c
  3874  002156  0E02               	movlw	high _clcd_display_string_details
  3875  002158  201D               	addwfc	?___wmul+1,w,c
  3876  00215A  6EDA               	movwf	fsr2h,c
  3877  00215C  50DF               	movf	223,w,c
  3878  00215E  0B07               	andlw	7
  3879  002160  06E8               	decf	wreg,f,c
  3880  002162  A4D8               	btfss	status,2,c
  3881  002164  D013               	goto	l633
  3882                           
  3883                           ;clcd.c: 662: scroll_right_to_left(&clcd_display_string_details[count]);
  3884  002166  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3885  00216A  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3886  00216E  0E00               	movlw	0
  3887  002170  6E1F               	movwf	___wmul@multiplicand+1,c
  3888  002172  0E37               	movlw	55
  3889  002174  6E1E               	movwf	___wmul@multiplicand,c
  3890  002176  EC41  F01A         	call	___wmul	;wreg free
  3891  00217A  0E96               	movlw	low _clcd_display_string_details
  3892  00217C  241C               	addwf	?___wmul,w,c
  3893  00217E  6E30               	movwf	scroll_right_to_left@clcd_display_string_details,c
  3894  002180  0E02               	movlw	high _clcd_display_string_details
  3895  002182  201D               	addwfc	?___wmul+1,w,c
  3896  002184  6E31               	movwf	scroll_right_to_left@clcd_display_string_details+1,c
  3897  002186  ECCA  F006         	call	_scroll_right_to_left	;wreg free
  3898                           
  3899                           ;clcd.c: 663: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 0) {
  3900  00218A  D045               	goto	l635
  3901  00218C                     l633:
  3902  00218C  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3903  002190  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3904  002194  0E00               	movlw	0
  3905  002196  6E1F               	movwf	___wmul@multiplicand+1,c
  3906  002198  0E37               	movlw	55
  3907  00219A  6E1E               	movwf	___wmul@multiplicand,c
  3908  00219C  EC41  F01A         	call	___wmul	;wreg free
  3909  0021A0  0E02               	movlw	2
  3910  0021A2  261C               	addwf	?___wmul,f,c
  3911  0021A4  0E00               	movlw	0
  3912  0021A6  221D               	addwfc	?___wmul+1,f,c
  3913  0021A8  0E96               	movlw	low _clcd_display_string_details
  3914  0021AA  241C               	addwf	?___wmul,w,c
  3915  0021AC  6E22               	movwf	strlen@s,c
  3916  0021AE  0E02               	movlw	high _clcd_display_string_details
  3917  0021B0  201D               	addwfc	?___wmul+1,w,c
  3918  0021B2  6E23               	movwf	strlen@s+1,c
  3919  0021B4  EC4C  F019         	call	_strlen	;wreg free
  3920  0021B8  5022               	movf	?_strlen,w,c
  3921  0021BA  1023               	iorwf	?_strlen+1,w,c
  3922  0021BC  B4D8               	btfsc	status,2,c
  3923  0021BE  D02B               	goto	l635
  3924  0021C0  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3925  0021C4  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3926  0021C8  0E00               	movlw	0
  3927  0021CA  6E1F               	movwf	___wmul@multiplicand+1,c
  3928  0021CC  0E37               	movlw	55
  3929  0021CE  6E1E               	movwf	___wmul@multiplicand,c
  3930  0021D0  EC41  F01A         	call	___wmul	;wreg free
  3931  0021D4  0E31               	movlw	49
  3932  0021D6  261C               	addwf	?___wmul,f,c
  3933  0021D8  0E00               	movlw	0
  3934  0021DA  221D               	addwfc	?___wmul+1,f,c
  3935  0021DC  0E96               	movlw	low _clcd_display_string_details
  3936  0021DE  241C               	addwf	?___wmul,w,c
  3937  0021E0  6ED9               	movwf	fsr2l,c
  3938  0021E2  0E02               	movlw	high _clcd_display_string_details
  3939  0021E4  201D               	addwfc	?___wmul+1,w,c
  3940  0021E6  6EDA               	movwf	fsr2h,c
  3941  0021E8  50DF               	movf	223,w,c
  3942  0021EA  0B07               	andlw	7
  3943  0021EC  0900               	iorlw	0
  3944  0021EE  A4D8               	btfss	status,2,c
  3945  0021F0  D012               	goto	l635
  3946                           
  3947                           ;clcd.c: 664: scroll_off(&clcd_display_string_details[count]);
  3948  0021F2  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3949  0021F6  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3950  0021FA  0E00               	movlw	0
  3951  0021FC  6E1F               	movwf	___wmul@multiplicand+1,c
  3952  0021FE  0E37               	movlw	55
  3953  002200  6E1E               	movwf	___wmul@multiplicand,c
  3954  002202  EC41  F01A         	call	___wmul	;wreg free
  3955  002206  0E96               	movlw	low _clcd_display_string_details
  3956  002208  241C               	addwf	?___wmul,w,c
  3957  00220A  6E28               	movwf	scroll_off@clcd_display_string_details,c
  3958  00220C  0E02               	movlw	high _clcd_display_string_details
  3959  00220E  201D               	addwfc	?___wmul+1,w,c
  3960  002210  6E29               	movwf	scroll_off@clcd_display_string_details+1,c
  3961  002212  EC0E  F012         	call	_scroll_off	;wreg free
  3962  002216                     l635:
  3963  002216  4A37               	infsnz	make_display@count,f,c
  3964  002218  2A38               	incf	make_display@count+1,f,c
  3965  00221A                     l629:
  3966  00221A  5048               	movf	_clcd_config_data+4,w,c
  3967  00221C  0100               	movlb	0	; () banked
  3968  00221E  6FD1               	movwf	??_make_display& (0+255),b
  3969  002220  6BD2               	clrf	(??_make_display+1)& (0+255),b
  3970  002222  51D1               	movf	??_make_display& (0+255),w,b
  3971  002224  5C37               	subwf	make_display@count,w,c
  3972  002226  5038               	movf	make_display@count+1,w,c
  3973  002228  0A80               	xorlw	128
  3974  00222A  6FD3               	movwf	(??_make_display+2)& (0+255),b
  3975  00222C  51D2               	movf	(??_make_display+1)& (0+255),w,b
  3976  00222E  0A80               	xorlw	128
  3977  002230  59D3               	subwfb	(??_make_display+2)& (0+255),w,b
  3978  002232  A0D8               	btfss	status,0,c
  3979  002234  D71F               	goto	l630
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;clcd.c: 665: }
  3983                           ;clcd.c: 666: }
  3984                           ;clcd.c: 667: print_data_ready = 1;
  3985                           
  3986                           ; BSR set to: 0
  3987  002236  0E00               	movlw	0
  3988  002238  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  3989  00223A  0E01               	movlw	1
  3990  00223C  6F76               	movwf	_print_data_ready& (0+255),b
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;clcd.c: 668: display_text();
  3994  00223E  EC33  F016         	call	_display_text	;wreg free
  3995  002242  0012               	return		;funcret
  3996  002244                     __end_of_make_display:
  3997                           	opt stack 0
  3998                           tblptru	equ	0xFF8
  3999                           tblptrh	equ	0xFF7
  4000                           tblptrl	equ	0xFF6
  4001                           tablat	equ	0xFF5
  4002                           prodh	equ	0xFF4
  4003                           prodl	equ	0xFF3
  4004                           intcon	equ	0xFF2
  4005                           postinc0	equ	0xFEE
  4006                           wreg	equ	0xFE8
  4007                           indf1	equ	0xFE7
  4008                           postinc1	equ	0xFE6
  4009                           postdec1	equ	0xFE5
  4010                           fsr1h	equ	0xFE2
  4011                           fsr1l	equ	0xFE1
  4012                           indf2	equ	0xFDF
  4013                           postinc2	equ	0xFDE
  4014                           postdec2	equ	0xFDD
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function _scroll_right_to_left *****************
  4020 ;; Defined at:
  4021 ;;		line 541 in file "clcd.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  clcd_display    2   47[COMRAM] PTR struct .
  4024 ;;		 -> clcd_display_string_details(1100), 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  line            1   49[COMRAM] unsigned char 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4036 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Temps:          0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;      Totals:         3      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;Total ram usage:       14 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    6
  4043 ;; This function calls:
  4044 ;;		_memcpy
  4045 ;;		_memset
  4046 ;;		_strncpy
  4047 ;; This function is called by:
  4048 ;;		_make_display
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           	psect	text7
  4053  000D94                     __ptext7:
  4054                           	opt stack 0
  4055  000D94                     _scroll_right_to_left:
  4056                           	opt stack 23
  4057                           
  4058                           ;clcd.c: 543: char line = -1;
  4059                           
  4060                           ;incstack = 0
  4061  000D94  6832               	setf	scroll_right_to_left@line,c
  4062                           
  4063                           ;clcd.c: 544: if (clcd_display_string_details->start_row == 0)
  4064  000D96  EE20 F02B          	lfsr	2,43
  4065  000D9A  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4066  000D9C  26D9               	addwf	fsr2l,f,c
  4067  000D9E  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4068  000DA0  22DA               	addwfc	fsr2h,f,c
  4069  000DA2  50DF               	movf	indf2,w,c
  4070  000DA4  0B7F               	andlw	127
  4071  000DA6  0900               	iorlw	0
  4072  000DA8  A4D8               	btfss	status,2,c
  4073  000DAA  D002               	goto	l601
  4074                           
  4075                           ;clcd.c: 545: line = 0;
  4076  000DAC  0E00               	movlw	0
  4077  000DAE  D00C               	goto	L1
  4078  000DB0                     l601:
  4079                           
  4080                           ;clcd.c: 546: else if (clcd_display_string_details->start_row == 1)
  4081  000DB0  EE20 F02B          	lfsr	2,43
  4082  000DB4  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4083  000DB6  26D9               	addwf	fsr2l,f,c
  4084  000DB8  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4085  000DBA  22DA               	addwfc	fsr2h,f,c
  4086  000DBC  50DF               	movf	indf2,w,c
  4087  000DBE  0B7F               	andlw	127
  4088  000DC0  06E8               	decf	wreg,f,c
  4089  000DC2  A4D8               	btfss	status,2,c
  4090  000DC4  D002               	goto	l603
  4091                           
  4092                           ;clcd.c: 547: line = 1;
  4093  000DC6  0E01               	movlw	1
  4094  000DC8                     L1:
  4095  000DC8  6E32               	movwf	scroll_right_to_left@line,c
  4096  000DCA                     l603:
  4097                           
  4098                           ;clcd.c: 548: if (clcd_display_string_details->start_row == 2)
  4099  000DCA  EE20 F02B          	lfsr	2,43
  4100  000DCE  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4101  000DD0  26D9               	addwf	fsr2l,f,c
  4102  000DD2  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4103  000DD4  22DA               	addwfc	fsr2h,f,c
  4104  000DD6  50DF               	movf	indf2,w,c
  4105  000DD8  0B7F               	andlw	127
  4106  000DDA  0A02               	xorlw	2
  4107  000DDC  A4D8               	btfss	status,2,c
  4108  000DDE  D002               	goto	l604
  4109                           
  4110                           ;clcd.c: 549: line = 2;
  4111  000DE0  0E02               	movlw	2
  4112  000DE2  6E32               	movwf	scroll_right_to_left@line,c
  4113  000DE4                     l604:
  4114                           
  4115                           ;clcd.c: 550: if (clcd_display_string_details->start_row == 3)
  4116  000DE4  EE20 F02B          	lfsr	2,43
  4117  000DE8  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4118  000DEA  26D9               	addwf	fsr2l,f,c
  4119  000DEC  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4120  000DEE  22DA               	addwfc	fsr2h,f,c
  4121  000DF0  50DF               	movf	indf2,w,c
  4122  000DF2  0B7F               	andlw	127
  4123  000DF4  0A03               	xorlw	3
  4124  000DF6  A4D8               	btfss	status,2,c
  4125  000DF8  D002               	goto	l605
  4126                           
  4127                           ;clcd.c: 551: line = 3;
  4128  000DFA  0E03               	movlw	3
  4129  000DFC  6E32               	movwf	scroll_right_to_left@line,c
  4130  000DFE                     l605:
  4131                           
  4132                           ;clcd.c: 553: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  4133                           ;clcd.c: 554: ' ', clcd_display_string_details->display_char_count);
  4134  000DFE  5032               	movf	scroll_right_to_left@line,w,c
  4135  000E00  0D14               	mullw	20
  4136  000E02  0E00               	movlw	low _lcd_display_array
  4137  000E04  0100               	movlb	0	; () banked
  4138  000E06  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4139  000E08  0E01               	movlw	high _lcd_display_array
  4140  000E0A  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4141  000E0C  50F3               	movf	prodl,w,c
  4142  000E0E  27C6               	addwf	??_scroll_right_to_left& (0+255),f,b
  4143  000E10  50F4               	movf	prodh,w,c
  4144  000E12  23C7               	addwfc	(??_scroll_right_to_left+1)& (0+255),f,b
  4145  000E14  EE20 F02C          	lfsr	2,44
  4146  000E18  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4147  000E1A  26D9               	addwf	fsr2l,f,c
  4148  000E1C  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4149  000E1E  22DA               	addwfc	fsr2h,f,c
  4150  000E20  50DF               	movf	indf2,w,c
  4151  000E22  0B7F               	andlw	127
  4152  000E24  6FC8               	movwf	(??_scroll_right_to_left+2)& (0+255),b
  4153  000E26  51C8               	movf	(??_scroll_right_to_left+2)& (0+255),w,b
  4154  000E28  0D01               	mullw	1
  4155  000E2A  50F3               	movf	prodl,w,c
  4156  000E2C  25C6               	addwf	??_scroll_right_to_left& (0+255),w,b
  4157  000E2E  6E28               	movwf	memset@p1,c
  4158  000E30  50F4               	movf	prodh,w,c
  4159  000E32  21C7               	addwfc	(??_scroll_right_to_left+1)& (0+255),w,b
  4160  000E34  6E29               	movwf	memset@p1+1,c
  4161  000E36  0E00               	movlw	0
  4162  000E38  6E2B               	movwf	memset@c+1,c
  4163  000E3A  0E20               	movlw	32
  4164  000E3C  6E2A               	movwf	memset@c,c
  4165  000E3E  EE20 F032          	lfsr	2,50
  4166  000E42  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4167  000E44  26D9               	addwf	fsr2l,f,c
  4168  000E46  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4169  000E48  22DA               	addwfc	fsr2h,f,c
  4170  000E4A  50DF               	movf	indf2,w,c
  4171  000E4C  6FC9               	movwf	(??_scroll_right_to_left+3)& (0+255),b
  4172  000E4E  51C9               	movf	(??_scroll_right_to_left+3)& (0+255),w,b
  4173  000E50  6E2C               	movwf	memset@n,c
  4174  000E52  6A2D               	clrf	memset@n+1,c
  4175  000E54  EC00  F01A         	call	_memset	;wreg free
  4176                           
  4177                           ;clcd.c: 555: if (clcd_display_string_details->length_count_for_left_scroll > clcd_displ
      +                          ay_string_details->strlen) {
  4178  000E58  EE20 F02A          	lfsr	2,42
  4179  000E5C  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4180  000E5E  26D9               	addwf	fsr2l,f,c
  4181  000E60  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4182  000E62  22DA               	addwfc	fsr2h,f,c
  4183  000E64  50DF               	movf	indf2,w,c
  4184  000E66  0B7F               	andlw	127
  4185  000E68  0100               	movlb	0	; () banked
  4186  000E6A  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4187  000E6C  EE20 F035          	lfsr	2,53
  4188  000E70  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4189  000E72  26D9               	addwf	fsr2l,f,c
  4190  000E74  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4191  000E76  22DA               	addwfc	fsr2h,f,c
  4192  000E78  50DF               	movf	indf2,w,c
  4193  000E7A  0B7F               	andlw	127
  4194  000E7C  5DC6               	subwf	??_scroll_right_to_left& (0+255),w,b
  4195  000E7E  B0D8               	btfsc	status,0,c
  4196  000E80  D066               	goto	l606
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;clcd.c: 557: strncpy(lcd_display_array[line]+(clcd_display_string_details->end_col - cl
      +                          cd_display_string_details->length_decount_for_left_scroll),
  4200                           ;clcd.c: 558: clcd_display_string_details->string, (clcd_display_string_details->display
      +                          _char_count -
  4201                           ;clcd.c: 559: (clcd_display_string_details->display_char_count - (clcd_display_string_de
      +                          tails->length_decount_for_left_scroll + 1))));
  4202  000E82  5032               	movf	scroll_right_to_left@line,w,c
  4203  000E84  0D14               	mullw	20
  4204  000E86  EE20 F036          	lfsr	2,54
  4205  000E8A  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4206  000E8C  26D9               	addwf	fsr2l,f,c
  4207  000E8E  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4208  000E90  22DA               	addwfc	fsr2h,f,c
  4209  000E92  50DF               	movf	indf2,w,c
  4210  000E94  0B7F               	andlw	127
  4211  000E96  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4212  000E98  6BC7               	clrf	(??_scroll_right_to_left+1)& (0+255),b
  4213  000E9A  1FC6               	comf	??_scroll_right_to_left& (0+255),f,b
  4214  000E9C  1FC7               	comf	(??_scroll_right_to_left+1)& (0+255),f,b
  4215  000E9E  4BC6               	infsnz	??_scroll_right_to_left& (0+255),f,b
  4216  000EA0  2BC7               	incf	(??_scroll_right_to_left+1)& (0+255),f,b
  4217  000EA2  EE20 F02F          	lfsr	2,47
  4218  000EA6  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4219  000EA8  26D9               	addwf	fsr2l,f,c
  4220  000EAA  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4221  000EAC  22DA               	addwfc	fsr2h,f,c
  4222  000EAE  50DF               	movf	indf2,w,c
  4223  000EB0  0B7F               	andlw	127
  4224  000EB2  6FC8               	movwf	(??_scroll_right_to_left+2)& (0+255),b
  4225  000EB4  6BC9               	clrf	(??_scroll_right_to_left+3)& (0+255),b
  4226  000EB6  51C6               	movf	??_scroll_right_to_left& (0+255),w,b
  4227  000EB8  27C8               	addwf	(??_scroll_right_to_left+2)& (0+255),f,b
  4228  000EBA  51C7               	movf	(??_scroll_right_to_left+1)& (0+255),w,b
  4229  000EBC  23C9               	addwfc	(??_scroll_right_to_left+3)& (0+255),f,b
  4230  000EBE  0E00               	movlw	low _lcd_display_array
  4231  000EC0  6FCA               	movwf	(??_scroll_right_to_left+4)& (0+255),b
  4232  000EC2  0E01               	movlw	high _lcd_display_array
  4233  000EC4  6FCB               	movwf	(??_scroll_right_to_left+5)& (0+255),b
  4234  000EC6  51C8               	movf	(??_scroll_right_to_left+2)& (0+255),w,b
  4235  000EC8  27CA               	addwf	(??_scroll_right_to_left+4)& (0+255),f,b
  4236  000ECA  51C9               	movf	(??_scroll_right_to_left+3)& (0+255),w,b
  4237  000ECC  23CB               	addwfc	(??_scroll_right_to_left+5)& (0+255),f,b
  4238  000ECE  50F3               	movf	prodl,w,c
  4239  000ED0  25CA               	addwf	(??_scroll_right_to_left+4)& (0+255),w,b
  4240  000ED2  6E14               	movwf	strncpy@to,c
  4241  000ED4  50F4               	movf	prodh,w,c
  4242  000ED6  21CB               	addwfc	(??_scroll_right_to_left+5)& (0+255),w,b
  4243  000ED8  6E15               	movwf	strncpy@to+1,c
  4244  000EDA  0E02               	movlw	2
  4245  000EDC  2430               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4246  000EDE  6E16               	movwf	strncpy@from,c
  4247  000EE0  0E00               	movlw	0
  4248  000EE2  2031               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4249  000EE4  6E17               	movwf	strncpy@from+1,c
  4250  000EE6  EE20 F036          	lfsr	2,54
  4251  000EEA  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4252  000EEC  26D9               	addwf	fsr2l,f,c
  4253  000EEE  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4254  000EF0  22DA               	addwfc	fsr2h,f,c
  4255  000EF2  50DF               	movf	indf2,w,c
  4256  000EF4  0B7F               	andlw	127
  4257  000EF6  6FCC               	movwf	(??_scroll_right_to_left+6)& (0+255),b
  4258  000EF8  6BCD               	clrf	(??_scroll_right_to_left+7)& (0+255),b
  4259  000EFA  0E01               	movlw	1
  4260  000EFC  27CC               	addwf	(??_scroll_right_to_left+6)& (0+255),f,b
  4261  000EFE  0E00               	movlw	0
  4262  000F00  23CD               	addwfc	(??_scroll_right_to_left+7)& (0+255),f,b
  4263  000F02  1FCC               	comf	(??_scroll_right_to_left+6)& (0+255),f,b
  4264  000F04  1FCD               	comf	(??_scroll_right_to_left+7)& (0+255),f,b
  4265  000F06  4BCC               	infsnz	(??_scroll_right_to_left+6)& (0+255),f,b
  4266  000F08  2BCD               	incf	(??_scroll_right_to_left+7)& (0+255),f,b
  4267  000F0A  EE20 F032          	lfsr	2,50
  4268  000F0E  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4269  000F10  26D9               	addwf	fsr2l,f,c
  4270  000F12  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4271  000F14  22DA               	addwfc	fsr2h,f,c
  4272  000F16  50DF               	movf	indf2,w,c
  4273  000F18  6FCE               	movwf	(??_scroll_right_to_left+8)& (0+255),b
  4274  000F1A  6BCF               	clrf	(??_scroll_right_to_left+9)& (0+255),b
  4275  000F1C  51CC               	movf	(??_scroll_right_to_left+6)& (0+255),w,b
  4276  000F1E  27CE               	addwf	(??_scroll_right_to_left+8)& (0+255),f,b
  4277  000F20  51CD               	movf	(??_scroll_right_to_left+7)& (0+255),w,b
  4278  000F22  23CF               	addwfc	(??_scroll_right_to_left+9)& (0+255),f,b
  4279  000F24  1FCE               	comf	(??_scroll_right_to_left+8)& (0+255),f,b
  4280  000F26  1FCF               	comf	(??_scroll_right_to_left+9)& (0+255),f,b
  4281  000F28  4BCE               	infsnz	(??_scroll_right_to_left+8)& (0+255),f,b
  4282  000F2A  2BCF               	incf	(??_scroll_right_to_left+9)& (0+255),f,b
  4283  000F2C  EE20 F032          	lfsr	2,50
  4284  000F30  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4285  000F32  26D9               	addwf	fsr2l,f,c
  4286  000F34  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4287  000F36  22DA               	addwfc	fsr2h,f,c
  4288  000F38  50DF               	movf	indf2,w,c
  4289  000F3A  6FD0               	movwf	(??_scroll_right_to_left+10)& (0+255),b
  4290  000F3C  51D0               	movf	(??_scroll_right_to_left+10)& (0+255),w,b
  4291  000F3E  25CE               	addwf	(??_scroll_right_to_left+8)& (0+255),w,b
  4292  000F40  6E18               	movwf	strncpy@size,c
  4293  000F42  0E00               	movlw	0
  4294  000F44  21CF               	addwfc	(??_scroll_right_to_left+9)& (0+255),w,b
  4295  000F46  6E19               	movwf	strncpy@size+1,c
  4296  000F48  EC20  F017         	call	_strncpy	;wreg free
  4297                           
  4298                           ;clcd.c: 560: } else {
  4299  000F4C  D056               	goto	l608
  4300  000F4E                     l606:
  4301                           
  4302                           ;clcd.c: 561: if (clcd_display_string_details->string[clcd_display_string_details->lengt
      +                          h_count_for_left_scroll] != (0)) {
  4303  000F4E  EE20 F035          	lfsr	2,53
  4304  000F52  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4305  000F54  26D9               	addwf	fsr2l,f,c
  4306  000F56  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4307  000F58  22DA               	addwfc	fsr2h,f,c
  4308  000F5A  50DF               	movf	indf2,w,c
  4309  000F5C  0B7F               	andlw	127
  4310  000F5E  0100               	movlb	0	; () banked
  4311  000F60  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4312  000F62  51C6               	movf	??_scroll_right_to_left& (0+255),w,b
  4313  000F64  0D01               	mullw	1
  4314  000F66  0E02               	movlw	2
  4315  000F68  26F3               	addwf	prodl,f,c
  4316  000F6A  0E00               	movlw	0
  4317  000F6C  22F4               	addwfc	prodh,f,c
  4318  000F6E  50F3               	movf	prodl,w,c
  4319  000F70  2430               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4320  000F72  6ED9               	movwf	fsr2l,c
  4321  000F74  50F4               	movf	prodh,w,c
  4322  000F76  2031               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4323  000F78  6EDA               	movwf	fsr2h,c
  4324  000F7A  50DF               	movf	indf2,w,c
  4325  000F7C  B4D8               	btfsc	status,2,c
  4326  000F7E  D03D               	goto	l608
  4327                           
  4328                           ; BSR set to: 0
  4329                           ;clcd.c: 562: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  4330                           ;clcd.c: 563: clcd_display_string_details->string + clcd_display_string_details->length_
      +                          count_for_left_scroll,
  4331                           ;clcd.c: 564: clcd_display_string_details->display_char_count);
  4332  000F80  5032               	movf	scroll_right_to_left@line,w,c
  4333  000F82  0D14               	mullw	20
  4334  000F84  0E00               	movlw	low _lcd_display_array
  4335  000F86  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4336  000F88  0E01               	movlw	high _lcd_display_array
  4337  000F8A  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4338  000F8C  50F3               	movf	prodl,w,c
  4339  000F8E  27C6               	addwf	??_scroll_right_to_left& (0+255),f,b
  4340  000F90  50F4               	movf	prodh,w,c
  4341  000F92  23C7               	addwfc	(??_scroll_right_to_left+1)& (0+255),f,b
  4342  000F94  EE20 F02C          	lfsr	2,44
  4343  000F98  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4344  000F9A  26D9               	addwf	fsr2l,f,c
  4345  000F9C  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4346  000F9E  22DA               	addwfc	fsr2h,f,c
  4347  000FA0  50DF               	movf	indf2,w,c
  4348  000FA2  0B7F               	andlw	127
  4349  000FA4  6FC8               	movwf	(??_scroll_right_to_left+2)& (0+255),b
  4350  000FA6  51C8               	movf	(??_scroll_right_to_left+2)& (0+255),w,b
  4351  000FA8  0D01               	mullw	1
  4352  000FAA  50F3               	movf	prodl,w,c
  4353  000FAC  25C6               	addwf	??_scroll_right_to_left& (0+255),w,b
  4354  000FAE  6E14               	movwf	memcpy@d1,c
  4355  000FB0  50F4               	movf	prodh,w,c
  4356  000FB2  21C7               	addwfc	(??_scroll_right_to_left+1)& (0+255),w,b
  4357  000FB4  6E15               	movwf	memcpy@d1+1,c
  4358  000FB6  EE20 F035          	lfsr	2,53
  4359  000FBA  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4360  000FBC  26D9               	addwf	fsr2l,f,c
  4361  000FBE  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4362  000FC0  22DA               	addwfc	fsr2h,f,c
  4363  000FC2  50DF               	movf	indf2,w,c
  4364  000FC4  0B7F               	andlw	127
  4365  000FC6  6FC9               	movwf	(??_scroll_right_to_left+3)& (0+255),b
  4366  000FC8  51C9               	movf	(??_scroll_right_to_left+3)& (0+255),w,b
  4367  000FCA  0D01               	mullw	1
  4368  000FCC  0E02               	movlw	2
  4369  000FCE  26F3               	addwf	prodl,f,c
  4370  000FD0  0E00               	movlw	0
  4371  000FD2  22F4               	addwfc	prodh,f,c
  4372  000FD4  50F3               	movf	prodl,w,c
  4373  000FD6  2430               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4374  000FD8  6E16               	movwf	memcpy@s1,c
  4375  000FDA  50F4               	movf	prodh,w,c
  4376  000FDC  2031               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4377  000FDE  6E17               	movwf	memcpy@s1+1,c
  4378  000FE0  EE20 F032          	lfsr	2,50
  4379  000FE4  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4380  000FE6  26D9               	addwf	fsr2l,f,c
  4381  000FE8  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4382  000FEA  22DA               	addwfc	fsr2h,f,c
  4383  000FEC  50DF               	movf	indf2,w,c
  4384  000FEE  6FCA               	movwf	(??_scroll_right_to_left+4)& (0+255),b
  4385  000FF0  51CA               	movf	(??_scroll_right_to_left+4)& (0+255),w,b
  4386  000FF2  6E18               	movwf	memcpy@n,c
  4387  000FF4  6A19               	clrf	memcpy@n+1,c
  4388  000FF6  EC6B  F018         	call	_memcpy	;wreg free
  4389  000FFA                     l608:
  4390                           
  4391                           ;clcd.c: 567: }
  4392                           ;clcd.c: 568: }
  4393                           ;clcd.c: 570: if (clcd_display_string_details->length_count_for_left_scroll <= clcd_disp
      +                          lay_string_details->strlen)
  4394  000FFA  EE20 F035          	lfsr	2,53
  4395  000FFE  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4396  001000  26D9               	addwf	fsr2l,f,c
  4397  001002  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4398  001004  22DA               	addwfc	fsr2h,f,c
  4399  001006  50DF               	movf	indf2,w,c
  4400  001008  0B7F               	andlw	127
  4401  00100A  0100               	movlb	0	; () banked
  4402  00100C  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4403  00100E  EE20 F02A          	lfsr	2,42
  4404  001012  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4405  001014  26D9               	addwf	fsr2l,f,c
  4406  001016  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4407  001018  22DA               	addwfc	fsr2h,f,c
  4408  00101A  50DF               	movf	indf2,w,c
  4409  00101C  0B7F               	andlw	127
  4410  00101E  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4411  001020  51C6               	movf	??_scroll_right_to_left& (0+255),w,b
  4412  001022  5DC7               	subwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4413  001024  A0D8               	btfss	status,0,c
  4414  001026  D013               	goto	l610
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;clcd.c: 571: {
  4418                           ;clcd.c: 572: clcd_display_string_details->length_count_for_left_scroll++;
  4419  001028  0E01               	movlw	1
  4420  00102A  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4421  00102C  EE20 F035          	lfsr	2,53
  4422  001030  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4423  001032  26D9               	addwf	fsr2l,f,c
  4424  001034  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4425  001036  22DA               	addwfc	fsr2h,f,c
  4426  001038  50DF               	movf	indf2,w,c
  4427  00103A  0B7F               	andlw	127
  4428  00103C  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4429  00103E  51C6               	movf	??_scroll_right_to_left& (0+255),w,b
  4430  001040  27C7               	addwf	(??_scroll_right_to_left+1)& (0+255),f,b
  4431  001042  50DF               	movf	indf2,w,c
  4432  001044  19C7               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4433  001046  0B80               	andlw	-128
  4434  001048  19C7               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4435  00104A  6EDF               	movwf	indf2,c
  4436                           
  4437                           ;clcd.c: 573: } else if (clcd_display_string_details->length_count_for_left_scroll > clc
      +                          d_display_string_details->strlen)
  4438  00104C  0012               	return	
  4439  00104E                     l610:
  4440                           
  4441                           ; BSR set to: 0
  4442                           
  4443                           ; BSR set to: 0
  4444  00104E  EE20 F02A          	lfsr	2,42
  4445  001052  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4446  001054  26D9               	addwf	fsr2l,f,c
  4447  001056  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4448  001058  22DA               	addwfc	fsr2h,f,c
  4449  00105A  50DF               	movf	indf2,w,c
  4450  00105C  0B7F               	andlw	127
  4451  00105E  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4452  001060  EE20 F035          	lfsr	2,53
  4453  001064  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4454  001066  26D9               	addwf	fsr2l,f,c
  4455  001068  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4456  00106A  22DA               	addwfc	fsr2h,f,c
  4457  00106C  50DF               	movf	indf2,w,c
  4458  00106E  0B7F               	andlw	127
  4459  001070  5DC6               	subwf	??_scroll_right_to_left& (0+255),w,b
  4460  001072  B0D8               	btfsc	status,0,c
  4461  001074  0012               	return	
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;clcd.c: 574: {
  4465                           ;clcd.c: 575: clcd_display_string_details->length_decount_for_left_scroll++;
  4466  001076  0E01               	movlw	1
  4467  001078  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4468  00107A  EE20 F036          	lfsr	2,54
  4469  00107E  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4470  001080  26D9               	addwf	fsr2l,f,c
  4471  001082  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4472  001084  22DA               	addwfc	fsr2h,f,c
  4473  001086  50DF               	movf	indf2,w,c
  4474  001088  0B7F               	andlw	127
  4475  00108A  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4476  00108C  51C6               	movf	??_scroll_right_to_left& (0+255),w,b
  4477  00108E  27C7               	addwf	(??_scroll_right_to_left+1)& (0+255),f,b
  4478  001090  50DF               	movf	indf2,w,c
  4479  001092  19C7               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4480  001094  0B80               	andlw	-128
  4481  001096  19C7               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4482  001098  6EDF               	movwf	indf2,c
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;clcd.c: 576: if (clcd_display_string_details->length_decount_for_left_scroll == clcd_di
      +                          splay_string_details->display_char_count) {
  4486  00109A  EE20 F032          	lfsr	2,50
  4487  00109E  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4488  0010A0  26D9               	addwf	fsr2l,f,c
  4489  0010A2  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4490  0010A4  22DA               	addwfc	fsr2h,f,c
  4491  0010A6  EE10 F036          	lfsr	1,54
  4492  0010AA  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4493  0010AC  26E1               	addwf	fsr1l,f,c
  4494  0010AE  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4495  0010B0  22E2               	addwfc	fsr1h,f,c
  4496  0010B2  50E7               	movf	indf1,w,c
  4497  0010B4  0B7F               	andlw	127
  4498  0010B6  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4499  0010B8  50DE               	movf	postinc2,w,c
  4500  0010BA  19C7               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4501  0010BC  A4D8               	btfss	status,2,c
  4502  0010BE  0012               	return	
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;clcd.c: 577: clcd_display_string_details->length_decount_for_left_scroll = 0;
  4506  0010C0  EE20 F036          	lfsr	2,54
  4507  0010C4  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4508  0010C6  26D9               	addwf	fsr2l,f,c
  4509  0010C8  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4510  0010CA  22DA               	addwfc	fsr2h,f,c
  4511  0010CC  90DF               	bcf	indf2,0,c
  4512  0010CE  92DF               	bcf	indf2,1,c
  4513  0010D0  94DF               	bcf	indf2,2,c
  4514  0010D2  96DF               	bcf	indf2,3,c
  4515  0010D4  98DF               	bcf	indf2,4,c
  4516  0010D6  9ADF               	bcf	indf2,5,c
  4517  0010D8  9CDF               	bcf	indf2,6,c
  4518                           
  4519                           ;clcd.c: 578: clcd_display_string_details->length_count_for_left_scroll = 0;
  4520  0010DA  EE20 F035          	lfsr	2,53
  4521  0010DE  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4522  0010E0  26D9               	addwf	fsr2l,f,c
  4523  0010E2  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4524  0010E4  22DA               	addwfc	fsr2h,f,c
  4525  0010E6  90DF               	bcf	indf2,0,c
  4526  0010E8  92DF               	bcf	indf2,1,c
  4527  0010EA  94DF               	bcf	indf2,2,c
  4528  0010EC  96DF               	bcf	indf2,3,c
  4529  0010EE  98DF               	bcf	indf2,4,c
  4530  0010F0  9ADF               	bcf	indf2,5,c
  4531  0010F2  9CDF               	bcf	indf2,6,c
  4532                           
  4533                           ; BSR set to: 0
  4534                           
  4535                           ; BSR set to: 0
  4536  0010F4  0012               	return	
  4537  0010F6                     __end_of_scroll_right_to_left:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           intcon	equ	0xFF2
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           indf1	equ	0xFE7
  4549                           postinc1	equ	0xFE6
  4550                           postdec1	equ	0xFE5
  4551                           fsr1h	equ	0xFE2
  4552                           fsr1l	equ	0xFE1
  4553                           indf2	equ	0xFDF
  4554                           postinc2	equ	0xFDE
  4555                           postdec2	equ	0xFDD
  4556                           fsr2h	equ	0xFDA
  4557                           fsr2l	equ	0xFD9
  4558                           status	equ	0xFD8
  4559                           
  4560 ;; *************** function _strncpy *****************
  4561 ;; Defined at:
  4562 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strncpy.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;  to              2   19[COMRAM] PTR unsigned char 
  4565 ;;		 -> lcd_display_array(80), 
  4566 ;;  from            2   21[COMRAM] PTR const unsigned char 
  4567 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1100), 
  4568 ;;  size            2   23[COMRAM] unsigned int 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  cp              2   25[COMRAM] PTR unsigned char 
  4571 ;;		 -> lcd_display_array(80), 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;                  2   19[COMRAM] PTR unsigned char 
  4574 ;; Registers used:
  4575 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4581 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4585 ;;Total ram usage:        8 bytes
  4586 ;; Hardware stack levels used:    1
  4587 ;; Hardware stack levels required when called:    5
  4588 ;; This function calls:
  4589 ;;		Nothing
  4590 ;; This function is called by:
  4591 ;;		_scroll_right_to_left
  4592 ;; This function uses a non-reentrant model
  4593 ;;
  4594                           
  4595                           	psect	text8
  4596  002E40                     __ptext8:
  4597                           	opt stack 0
  4598  002E40                     _strncpy:
  4599                           	opt stack 23
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;incstack = 0
  4603  002E40  C014  F01A         	movff	strncpy@to,strncpy@cp
  4604  002E44  C015  F01B         	movff	strncpy@to+1,strncpy@cp+1
  4605  002E48  D014               	goto	l1715
  4606  002E4A  0618               	decf	strncpy@size,f,c
  4607  002E4C  A0D8               	btfss	status,0,c
  4608  002E4E  0619               	decf	strncpy@size+1,f,c
  4609  002E50  C016  FFD9         	movff	strncpy@from,fsr2l
  4610  002E54  C017  FFDA         	movff	strncpy@from+1,fsr2h
  4611  002E58  4A16               	infsnz	strncpy@from,f,c
  4612  002E5A  2A17               	incf	strncpy@from+1,f,c
  4613  002E5C  C01A  FFE1         	movff	strncpy@cp,fsr1l
  4614  002E60  C01B  FFE2         	movff	strncpy@cp+1,fsr1h
  4615  002E64  4A1A               	infsnz	strncpy@cp,f,c
  4616  002E66  2A1B               	incf	strncpy@cp+1,f,c
  4617  002E68  CFDF FFE7          	movff	indf2,indf1
  4618  002E6C  50E7               	movf	indf1,w,c
  4619  002E6E  B4D8               	btfsc	status,2,c
  4620  002E70  D00D               	goto	l1717
  4621  002E72                     l1715:
  4622  002E72  5018               	movf	strncpy@size,w,c
  4623  002E74  1019               	iorwf	strncpy@size+1,w,c
  4624  002E76  B4D8               	btfsc	status,2,c
  4625  002E78  D009               	goto	l1717
  4626  002E7A  D7E7               	goto	l1714
  4627  002E7C                     l4305:
  4628  002E7C  C01A  FFD9         	movff	strncpy@cp,fsr2l
  4629  002E80  C01B  FFDA         	movff	strncpy@cp+1,fsr2h
  4630  002E84  0E00               	movlw	0
  4631  002E86  6EDF               	movwf	indf2,c
  4632  002E88  4A1A               	infsnz	strncpy@cp,f,c
  4633  002E8A  2A1B               	incf	strncpy@cp+1,f,c
  4634  002E8C                     l1717:
  4635  002E8C  0618               	decf	strncpy@size,f,c
  4636  002E8E  A0D8               	btfss	status,0,c
  4637  002E90  0619               	decf	strncpy@size+1,f,c
  4638  002E92  2818               	incf	strncpy@size,w,c
  4639  002E94  E1F3               	bnz	l4305
  4640  002E96  2819               	incf	strncpy@size+1,w,c
  4641  002E98  B4D8               	btfsc	status,2,c
  4642  002E9A  0012               	return	
  4643  002E9C  D7EF               	goto	l1718
  4644  002E9E                     __end_of_strncpy:
  4645                           	opt stack 0
  4646                           tblptru	equ	0xFF8
  4647                           tblptrh	equ	0xFF7
  4648                           tblptrl	equ	0xFF6
  4649                           tablat	equ	0xFF5
  4650                           prodh	equ	0xFF4
  4651                           prodl	equ	0xFF3
  4652                           intcon	equ	0xFF2
  4653                           postinc0	equ	0xFEE
  4654                           wreg	equ	0xFE8
  4655                           indf1	equ	0xFE7
  4656                           postinc1	equ	0xFE6
  4657                           postdec1	equ	0xFE5
  4658                           fsr1h	equ	0xFE2
  4659                           fsr1l	equ	0xFE1
  4660                           indf2	equ	0xFDF
  4661                           postinc2	equ	0xFDE
  4662                           postdec2	equ	0xFDD
  4663                           fsr2h	equ	0xFDA
  4664                           fsr2l	equ	0xFD9
  4665                           status	equ	0xFD8
  4666                           
  4667 ;; *************** function _scroll_off *****************
  4668 ;; Defined at:
  4669 ;;		line 585 in file "clcd.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;  clcd_display    2   39[COMRAM] PTR struct .
  4672 ;;		 -> clcd_display_string_details(1100), 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;  i               2   52[COMRAM] int 
  4675 ;;  j               2   50[COMRAM] int 
  4676 ;;  k               2   45[COMRAM] int 
  4677 ;;  str_len         1   49[COMRAM] unsigned char 
  4678 ;;  display_char    1   48[COMRAM] unsigned char 
  4679 ;;  line            1   47[COMRAM] unsigned char 
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  1    wreg      void 
  4682 ;; Registers used:
  4683 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4689 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;Total ram usage:       15 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    6
  4696 ;; This function calls:
  4697 ;;		_strlen
  4698 ;; This function is called by:
  4699 ;;		_make_display
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           	psect	text9
  4704  00241C                     __ptext9:
  4705                           	opt stack 0
  4706  00241C                     _scroll_off:
  4707                           	opt stack 23
  4708                           
  4709                           ;clcd.c: 586: char line = -1;
  4710                           
  4711                           ;incstack = 0
  4712  00241C  6830               	setf	scroll_off@line,c
  4713                           
  4714                           ;clcd.c: 588: int i = 0;
  4715  00241E  0E00               	movlw	0
  4716  002420  6E36               	movwf	scroll_off@i+1,c
  4717  002422  0E00               	movlw	0
  4718  002424  6E35               	movwf	scroll_off@i,c
  4719                           
  4720                           ;clcd.c: 589: int j = 0, k = 0;
  4721  002426  0E00               	movlw	0
  4722  002428  6E34               	movwf	scroll_off@j+1,c
  4723  00242A  0E00               	movlw	0
  4724  00242C  6E33               	movwf	scroll_off@j,c
  4725  00242E  0E00               	movlw	0
  4726  002430  6E2F               	movwf	scroll_off@k+1,c
  4727  002432  0E00               	movlw	0
  4728  002434  6E2E               	movwf	scroll_off@k,c
  4729                           
  4730                           ;clcd.c: 590: char display_char_count = clcd_display_string_details->end_point - clcd_di
      +                          splay_string_details->start_point;
  4731  002436  EE20 F030          	lfsr	2,48
  4732  00243A  5028               	movf	scroll_off@clcd_display_string_details,w,c
  4733  00243C  26D9               	addwf	fsr2l,f,c
  4734  00243E  5029               	movf	scroll_off@clcd_display_string_details+1,w,c
  4735  002440  22DA               	addwfc	fsr2h,f,c
  4736  002442  50DF               	movf	indf2,w,c
  4737  002444  0B7F               	andlw	127
  4738  002446  6E2A               	movwf	??_scroll_off& (0+255),c
  4739  002448  EE20 F02D          	lfsr	2,45
  4740  00244C  5028               	movf	scroll_off@clcd_display_string_details,w,c
  4741  00244E  26D9               	addwf	fsr2l,f,c
  4742  002450  5029               	movf	scroll_off@clcd_display_string_details+1,w,c
  4743  002452  22DA               	addwfc	fsr2h,f,c
  4744  002454  50DF               	movf	indf2,w,c
  4745  002456  0B7F               	andlw	127
  4746  002458  0800               	sublw	0
  4747  00245A  242A               	addwf	??_scroll_off,w,c
  4748  00245C  6E31               	movwf	scroll_off@display_char_count,c
  4749                           
  4750                           ;clcd.c: 591: char str_len = strlen(clcd_display_string_details->string);
  4751  00245E  0E02               	movlw	2
  4752  002460  2428               	addwf	scroll_off@clcd_display_string_details,w,c
  4753  002462  6E22               	movwf	strlen@s,c
  4754  002464  0E00               	movlw	0
  4755  002466  2029               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4756  002468  6E23               	movwf	strlen@s+1,c
  4757  00246A  EC4C  F019         	call	_strlen	;wreg free
  4758  00246E  5022               	movf	?_strlen,w,c
  4759  002470  6E32               	movwf	scroll_off@str_len,c
  4760                           
  4761                           ;clcd.c: 592: line = clcd_display_string_details->start_row;
  4762  002472  EE20 F02B          	lfsr	2,43
  4763  002476  5028               	movf	scroll_off@clcd_display_string_details,w,c
  4764  002478  26D9               	addwf	fsr2l,f,c
  4765  00247A  5029               	movf	scroll_off@clcd_display_string_details+1,w,c
  4766  00247C  22DA               	addwfc	fsr2h,f,c
  4767  00247E  50DF               	movf	indf2,w,c
  4768  002480  0B7F               	andlw	127
  4769  002482  6E30               	movwf	scroll_off@line,c
  4770                           
  4771                           ;clcd.c: 593: j = clcd_display_string_details->start_col;
  4772  002484  EE20 F02C          	lfsr	2,44
  4773  002488  5028               	movf	scroll_off@clcd_display_string_details,w,c
  4774  00248A  26D9               	addwf	fsr2l,f,c
  4775  00248C  5029               	movf	scroll_off@clcd_display_string_details+1,w,c
  4776  00248E  22DA               	addwfc	fsr2h,f,c
  4777  002490  50DF               	movf	indf2,w,c
  4778  002492  0B7F               	andlw	127
  4779  002494  6E2A               	movwf	??_scroll_off& (0+255),c
  4780  002496  502A               	movf	??_scroll_off,w,c
  4781  002498  6E33               	movwf	scroll_off@j,c
  4782  00249A  6A34               	clrf	scroll_off@j+1,c
  4783                           
  4784                           ;clcd.c: 594: for (i = 0; i < str_len;) {
  4785  00249C  0E00               	movlw	0
  4786  00249E  6E36               	movwf	scroll_off@i+1,c
  4787  0024A0  0E00               	movlw	0
  4788  0024A2  6E35               	movwf	scroll_off@i,c
  4789  0024A4  D05B               	goto	l624
  4790  0024A6                     
  4791                           ;clcd.c: 596: lcd_display_array[line][j] = clcd_display_string_details->string[i++];
  4792  0024A6  0E02               	movlw	2
  4793  0024A8  2435               	addwf	scroll_off@i,w,c
  4794  0024AA  6E2A               	movwf	??_scroll_off& (0+255),c
  4795  0024AC  0E00               	movlw	0
  4796  0024AE  2036               	addwfc	scroll_off@i+1,w,c
  4797  0024B0  6E2B               	movwf	(??_scroll_off+1)& (0+255),c
  4798  0024B2  502A               	movf	??_scroll_off,w,c
  4799  0024B4  2428               	addwf	scroll_off@clcd_display_string_details,w,c
  4800  0024B6  6ED9               	movwf	fsr2l,c
  4801  0024B8  502B               	movf	??_scroll_off+1,w,c
  4802  0024BA  2029               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4803  0024BC  6EDA               	movwf	fsr2h,c
  4804  0024BE  5030               	movf	scroll_off@line,w,c
  4805  0024C0  0D14               	mullw	20
  4806  0024C2  0E00               	movlw	low _lcd_display_array
  4807  0024C4  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4808  0024C6  0E01               	movlw	high _lcd_display_array
  4809  0024C8  6E2D               	movwf	(??_scroll_off+3)& (0+255),c
  4810  0024CA  50F3               	movf	prodl,w,c
  4811  0024CC  262C               	addwf	??_scroll_off+2,f,c
  4812  0024CE  50F4               	movf	prodh,w,c
  4813  0024D0  222D               	addwfc	??_scroll_off+3,f,c
  4814  0024D2  5033               	movf	scroll_off@j,w,c
  4815  0024D4  242C               	addwf	??_scroll_off+2,w,c
  4816  0024D6  6EE1               	movwf	fsr1l,c
  4817  0024D8  5034               	movf	scroll_off@j+1,w,c
  4818  0024DA  202D               	addwfc	??_scroll_off+3,w,c
  4819  0024DC  6EE2               	movwf	fsr1h,c
  4820  0024DE  CFDF FFE7          	movff	indf2,indf1
  4821  0024E2  4A35               	infsnz	scroll_off@i,f,c
  4822  0024E4  2A36               	incf	scroll_off@i+1,f,c
  4823                           
  4824                           ;clcd.c: 597: if (i >= str_len)break;
  4825  0024E6  5032               	movf	scroll_off@str_len,w,c
  4826  0024E8  6E2A               	movwf	??_scroll_off& (0+255),c
  4827  0024EA  6A2B               	clrf	(??_scroll_off+1)& (0+255),c
  4828  0024EC  502A               	movf	??_scroll_off,w,c
  4829  0024EE  5C35               	subwf	scroll_off@i,w,c
  4830  0024F0  5036               	movf	scroll_off@i+1,w,c
  4831  0024F2  0A80               	xorlw	128
  4832  0024F4  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4833  0024F6  502B               	movf	??_scroll_off+1,w,c
  4834  0024F8  0A80               	xorlw	128
  4835  0024FA  582C               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4836  0024FC  B0D8               	btfsc	status,0,c
  4837  0024FE  D01C               	goto	u5810
  4838                           
  4839                           ;clcd.c: 598: if (i >= display_char_count)break;
  4840  002500  5031               	movf	scroll_off@display_char_count,w,c
  4841  002502  6E2A               	movwf	??_scroll_off& (0+255),c
  4842  002504  6A2B               	clrf	(??_scroll_off+1)& (0+255),c
  4843  002506  502A               	movf	??_scroll_off,w,c
  4844  002508  5C35               	subwf	scroll_off@i,w,c
  4845  00250A  5036               	movf	scroll_off@i+1,w,c
  4846  00250C  0A80               	xorlw	128
  4847  00250E  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4848  002510  502B               	movf	??_scroll_off+1,w,c
  4849  002512  0A80               	xorlw	128
  4850  002514  582C               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4851  002516  B0D8               	btfsc	status,0,c
  4852  002518  D00F               	goto	u5810
  4853  00251A  4A33               	infsnz	scroll_off@j,f,c
  4854  00251C  2A34               	incf	scroll_off@j+1,f,c
  4855  00251E  5046               	movf	_clcd_config_data+2,w,c
  4856  002520  6E2A               	movwf	??_scroll_off& (0+255),c
  4857  002522  6A2B               	clrf	(??_scroll_off+1)& (0+255),c
  4858  002524  502A               	movf	??_scroll_off,w,c
  4859  002526  5C33               	subwf	scroll_off@j,w,c
  4860  002528  5034               	movf	scroll_off@j+1,w,c
  4861  00252A  0A80               	xorlw	128
  4862  00252C  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4863  00252E  502B               	movf	??_scroll_off+1,w,c
  4864  002530  0A80               	xorlw	128
  4865  002532  582C               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4866  002534  A0D8               	btfss	status,0,c
  4867  002536  D7B7               	goto	l620
  4868  002538                     u5810:
  4869                           
  4870                           ;clcd.c: 599: }
  4871                           ;clcd.c: 601: j = 0;
  4872  002538  0E00               	movlw	0
  4873  00253A  6E34               	movwf	scroll_off@j+1,c
  4874  00253C  0E00               	movlw	0
  4875  00253E  6E33               	movwf	scroll_off@j,c
  4876                           
  4877                           ;clcd.c: 602: line++;
  4878  002540  2A30               	incf	scroll_off@line,f,c
  4879                           
  4880                           ;clcd.c: 603: if (i >= display_char_count)break;
  4881  002542  5031               	movf	scroll_off@display_char_count,w,c
  4882  002544  6E2A               	movwf	??_scroll_off& (0+255),c
  4883  002546  6A2B               	clrf	(??_scroll_off+1)& (0+255),c
  4884  002548  502A               	movf	??_scroll_off,w,c
  4885  00254A  5C35               	subwf	scroll_off@i,w,c
  4886  00254C  5036               	movf	scroll_off@i+1,w,c
  4887  00254E  0A80               	xorlw	128
  4888  002550  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4889  002552  502B               	movf	??_scroll_off+1,w,c
  4890  002554  0A80               	xorlw	128
  4891  002556  582C               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4892  002558  B0D8               	btfsc	status,0,c
  4893  00255A  0012               	return	
  4894  00255C                     l624:
  4895  00255C  5032               	movf	scroll_off@str_len,w,c
  4896  00255E  6E2A               	movwf	??_scroll_off& (0+255),c
  4897  002560  6A2B               	clrf	(??_scroll_off+1)& (0+255),c
  4898  002562  502A               	movf	??_scroll_off,w,c
  4899  002564  5C35               	subwf	scroll_off@i,w,c
  4900  002566  5036               	movf	scroll_off@i+1,w,c
  4901  002568  0A80               	xorlw	128
  4902  00256A  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4903  00256C  502B               	movf	??_scroll_off+1,w,c
  4904  00256E  0A80               	xorlw	128
  4905  002570  582C               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4906  002572  B0D8               	btfsc	status,0,c
  4907  002574  0012               	return	
  4908  002576  D7D3               	goto	l619
  4909  002578                     __end_of_scroll_off:
  4910                           	opt stack 0
  4911                           tblptru	equ	0xFF8
  4912                           tblptrh	equ	0xFF7
  4913                           tblptrl	equ	0xFF6
  4914                           tablat	equ	0xFF5
  4915                           prodh	equ	0xFF4
  4916                           prodl	equ	0xFF3
  4917                           intcon	equ	0xFF2
  4918                           postinc0	equ	0xFEE
  4919                           wreg	equ	0xFE8
  4920                           indf1	equ	0xFE7
  4921                           postinc1	equ	0xFE6
  4922                           postdec1	equ	0xFE5
  4923                           fsr1h	equ	0xFE2
  4924                           fsr1l	equ	0xFE1
  4925                           indf2	equ	0xFDF
  4926                           postinc2	equ	0xFDE
  4927                           postdec2	equ	0xFDD
  4928                           fsr2h	equ	0xFDA
  4929                           fsr2l	equ	0xFD9
  4930                           status	equ	0xFD8
  4931                           
  4932 ;; *************** function _scroll_left_to_right *****************
  4933 ;; Defined at:
  4934 ;;		line 501 in file "clcd.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;  clcd_display    2   47[COMRAM] PTR struct .
  4937 ;;		 -> clcd_display_string_details(1100), 
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;  line            1   49[COMRAM] unsigned char 
  4940 ;; Return value:  Size  Location     Type
  4941 ;;                  1    wreg      void 
  4942 ;; Registers used:
  4943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4949 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4951 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;Total ram usage:       11 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; Hardware stack levels required when called:    6
  4956 ;; This function calls:
  4957 ;;		_memcpy
  4958 ;;		_memset
  4959 ;; This function is called by:
  4960 ;;		_make_display
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	text10
  4965  0010F6                     __ptext10:
  4966                           	opt stack 0
  4967  0010F6                     _scroll_left_to_right:
  4968                           	opt stack 23
  4969                           
  4970                           ;clcd.c: 502: char line = -1;
  4971                           
  4972                           ;incstack = 0
  4973  0010F6  6832               	setf	scroll_left_to_right@line,c
  4974                           
  4975                           ;clcd.c: 503: if (clcd_display_string_details->start_row == 0)
  4976  0010F8  EE20 F02B          	lfsr	2,43
  4977  0010FC  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4978  0010FE  26D9               	addwf	fsr2l,f,c
  4979  001100  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4980  001102  22DA               	addwfc	fsr2h,f,c
  4981  001104  50DF               	movf	indf2,w,c
  4982  001106  0B7F               	andlw	127
  4983  001108  0900               	iorlw	0
  4984  00110A  A4D8               	btfss	status,2,c
  4985  00110C  D002               	goto	l585
  4986                           
  4987                           ;clcd.c: 504: line = 0;
  4988  00110E  0E00               	movlw	0
  4989  001110  D00C               	goto	L2
  4990  001112                     l585:
  4991                           
  4992                           ;clcd.c: 505: else if (clcd_display_string_details->start_row == 1)
  4993  001112  EE20 F02B          	lfsr	2,43
  4994  001116  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4995  001118  26D9               	addwf	fsr2l,f,c
  4996  00111A  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4997  00111C  22DA               	addwfc	fsr2h,f,c
  4998  00111E  50DF               	movf	indf2,w,c
  4999  001120  0B7F               	andlw	127
  5000  001122  06E8               	decf	wreg,f,c
  5001  001124  A4D8               	btfss	status,2,c
  5002  001126  D002               	goto	l587
  5003                           
  5004                           ;clcd.c: 506: line = 1;
  5005  001128  0E01               	movlw	1
  5006  00112A                     L2:
  5007  00112A  6E32               	movwf	scroll_left_to_right@line,c
  5008  00112C                     l587:
  5009                           
  5010                           ;clcd.c: 507: if (clcd_display_string_details->start_row == 2)
  5011  00112C  EE20 F02B          	lfsr	2,43
  5012  001130  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5013  001132  26D9               	addwf	fsr2l,f,c
  5014  001134  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5015  001136  22DA               	addwfc	fsr2h,f,c
  5016  001138  50DF               	movf	indf2,w,c
  5017  00113A  0B7F               	andlw	127
  5018  00113C  0A02               	xorlw	2
  5019  00113E  A4D8               	btfss	status,2,c
  5020  001140  D002               	goto	l588
  5021                           
  5022                           ;clcd.c: 508: line = 2;
  5023  001142  0E02               	movlw	2
  5024  001144  6E32               	movwf	scroll_left_to_right@line,c
  5025  001146                     l588:
  5026                           
  5027                           ;clcd.c: 509: if (clcd_display_string_details->start_row == 3)
  5028  001146  EE20 F02B          	lfsr	2,43
  5029  00114A  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5030  00114C  26D9               	addwf	fsr2l,f,c
  5031  00114E  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5032  001150  22DA               	addwfc	fsr2h,f,c
  5033  001152  50DF               	movf	indf2,w,c
  5034  001154  0B7F               	andlw	127
  5035  001156  0A03               	xorlw	3
  5036  001158  A4D8               	btfss	status,2,c
  5037  00115A  D002               	goto	l589
  5038                           
  5039                           ;clcd.c: 510: line = 3;
  5040  00115C  0E03               	movlw	3
  5041  00115E  6E32               	movwf	scroll_left_to_right@line,c
  5042  001160                     l589:
  5043                           
  5044                           ;clcd.c: 512: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  5045                           ;clcd.c: 513: ' ', clcd_display_string_details->display_char_count);
  5046  001160  5032               	movf	scroll_left_to_right@line,w,c
  5047  001162  0D14               	mullw	20
  5048  001164  0E00               	movlw	low _lcd_display_array
  5049  001166  0100               	movlb	0	; () banked
  5050  001168  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5051  00116A  0E01               	movlw	high _lcd_display_array
  5052  00116C  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5053  00116E  50F3               	movf	prodl,w,c
  5054  001170  27C6               	addwf	??_scroll_left_to_right& (0+255),f,b
  5055  001172  50F4               	movf	prodh,w,c
  5056  001174  23C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),f,b
  5057  001176  EE20 F02C          	lfsr	2,44
  5058  00117A  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5059  00117C  26D9               	addwf	fsr2l,f,c
  5060  00117E  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5061  001180  22DA               	addwfc	fsr2h,f,c
  5062  001182  50DF               	movf	indf2,w,c
  5063  001184  0B7F               	andlw	127
  5064  001186  6FC8               	movwf	(??_scroll_left_to_right+2)& (0+255),b
  5065  001188  51C8               	movf	(??_scroll_left_to_right+2)& (0+255),w,b
  5066  00118A  0D01               	mullw	1
  5067  00118C  50F3               	movf	prodl,w,c
  5068  00118E  25C6               	addwf	??_scroll_left_to_right& (0+255),w,b
  5069  001190  6E28               	movwf	memset@p1,c
  5070  001192  50F4               	movf	prodh,w,c
  5071  001194  21C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),w,b
  5072  001196  6E29               	movwf	memset@p1+1,c
  5073  001198  0E00               	movlw	0
  5074  00119A  6E2B               	movwf	memset@c+1,c
  5075  00119C  0E20               	movlw	32
  5076  00119E  6E2A               	movwf	memset@c,c
  5077  0011A0  EE20 F032          	lfsr	2,50
  5078  0011A4  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5079  0011A6  26D9               	addwf	fsr2l,f,c
  5080  0011A8  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5081  0011AA  22DA               	addwfc	fsr2h,f,c
  5082  0011AC  50DF               	movf	indf2,w,c
  5083  0011AE  6FC9               	movwf	(??_scroll_left_to_right+3)& (0+255),b
  5084  0011B0  51C9               	movf	(??_scroll_left_to_right+3)& (0+255),w,b
  5085  0011B2  6E2C               	movwf	memset@n,c
  5086  0011B4  6A2D               	clrf	memset@n+1,c
  5087  0011B6  EC00  F01A         	call	_memset	;wreg free
  5088                           
  5089                           ;clcd.c: 515: if (clcd_display_string_details->length_count_for_right_scroll > clcd_disp
      +                          lay_string_details->display_char_count) {
  5090  0011BA  EE20 F032          	lfsr	2,50
  5091  0011BE  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5092  0011C0  26D9               	addwf	fsr2l,f,c
  5093  0011C2  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5094  0011C4  22DA               	addwfc	fsr2h,f,c
  5095  0011C6  50DF               	movf	indf2,w,c
  5096  0011C8  0100               	movlb	0	; () banked
  5097  0011CA  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5098  0011CC  EE20 F033          	lfsr	2,51
  5099  0011D0  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5100  0011D2  26D9               	addwf	fsr2l,f,c
  5101  0011D4  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5102  0011D6  22DA               	addwfc	fsr2h,f,c
  5103  0011D8  50DF               	movf	indf2,w,c
  5104  0011DA  0B7F               	andlw	127
  5105  0011DC  5DC6               	subwf	??_scroll_left_to_right& (0+255),w,b
  5106  0011DE  B0D8               	btfsc	status,0,c
  5107  0011E0  D058               	goto	l590
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;clcd.c: 516: if (clcd_display_string_details->string[0] != (0)) {
  5111  0011E2  EE20 F002          	lfsr	2,2
  5112  0011E6  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5113  0011E8  26D9               	addwf	fsr2l,f,c
  5114  0011EA  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5115  0011EC  22DA               	addwfc	fsr2h,f,c
  5116  0011EE  50DF               	movf	indf2,w,c
  5117  0011F0  B4D8               	btfsc	status,2,c
  5118  0011F2  D0A7               	goto	l593
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;clcd.c: 517: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  5122                           ;clcd.c: 518: clcd_display_string_details->string +
  5123                           ;clcd.c: 519: ((clcd_display_string_details->strlen - 1) - clcd_display_string_details->
      +                          length_decount_for_right_scroll),
  5124                           ;clcd.c: 520: clcd_display_string_details->display_char_count);
  5125  0011F4  5032               	movf	scroll_left_to_right@line,w,c
  5126  0011F6  0D14               	mullw	20
  5127  0011F8  0E00               	movlw	low _lcd_display_array
  5128  0011FA  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5129  0011FC  0E01               	movlw	high _lcd_display_array
  5130  0011FE  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5131  001200  50F3               	movf	prodl,w,c
  5132  001202  27C6               	addwf	??_scroll_left_to_right& (0+255),f,b
  5133  001204  50F4               	movf	prodh,w,c
  5134  001206  23C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),f,b
  5135  001208  EE20 F02C          	lfsr	2,44
  5136  00120C  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5137  00120E  26D9               	addwf	fsr2l,f,c
  5138  001210  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5139  001212  22DA               	addwfc	fsr2h,f,c
  5140  001214  50DF               	movf	indf2,w,c
  5141  001216  0B7F               	andlw	127
  5142  001218  6FC8               	movwf	(??_scroll_left_to_right+2)& (0+255),b
  5143  00121A  51C8               	movf	(??_scroll_left_to_right+2)& (0+255),w,b
  5144  00121C  0D01               	mullw	1
  5145  00121E  50F3               	movf	prodl,w,c
  5146  001220  25C6               	addwf	??_scroll_left_to_right& (0+255),w,b
  5147  001222  6E14               	movwf	memcpy@d1,c
  5148  001224  50F4               	movf	prodh,w,c
  5149  001226  21C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),w,b
  5150  001228  6E15               	movwf	memcpy@d1+1,c
  5151  00122A  EE20 F034          	lfsr	2,52
  5152  00122E  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5153  001230  26D9               	addwf	fsr2l,f,c
  5154  001232  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5155  001234  22DA               	addwfc	fsr2h,f,c
  5156  001236  50DF               	movf	indf2,w,c
  5157  001238  0B7F               	andlw	127
  5158  00123A  6FC9               	movwf	(??_scroll_left_to_right+3)& (0+255),b
  5159  00123C  6BCA               	clrf	(??_scroll_left_to_right+4)& (0+255),b
  5160  00123E  1FC9               	comf	(??_scroll_left_to_right+3)& (0+255),f,b
  5161  001240  1FCA               	comf	(??_scroll_left_to_right+4)& (0+255),f,b
  5162  001242  4BC9               	infsnz	(??_scroll_left_to_right+3)& (0+255),f,b
  5163  001244  2BCA               	incf	(??_scroll_left_to_right+4)& (0+255),f,b
  5164  001246  EE20 F02A          	lfsr	2,42
  5165  00124A  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5166  00124C  26D9               	addwf	fsr2l,f,c
  5167  00124E  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5168  001250  22DA               	addwfc	fsr2h,f,c
  5169  001252  50DF               	movf	indf2,w,c
  5170  001254  0B7F               	andlw	127
  5171  001256  6FCB               	movwf	(??_scroll_left_to_right+5)& (0+255),b
  5172  001258  6BCC               	clrf	(??_scroll_left_to_right+6)& (0+255),b
  5173  00125A  51C9               	movf	(??_scroll_left_to_right+3)& (0+255),w,b
  5174  00125C  27CB               	addwf	(??_scroll_left_to_right+5)& (0+255),f,b
  5175  00125E  51CA               	movf	(??_scroll_left_to_right+4)& (0+255),w,b
  5176  001260  23CC               	addwfc	(??_scroll_left_to_right+6)& (0+255),f,b
  5177  001262  0E01               	movlw	1
  5178  001264  27CB               	addwf	(??_scroll_left_to_right+5)& (0+255),f,b
  5179  001266  0E00               	movlw	0
  5180  001268  23CC               	addwfc	(??_scroll_left_to_right+6)& (0+255),f,b
  5181  00126A  51CB               	movf	(??_scroll_left_to_right+5)& (0+255),w,b
  5182  00126C  2430               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5183  00126E  6E16               	movwf	memcpy@s1,c
  5184  001270  51CC               	movf	(??_scroll_left_to_right+6)& (0+255),w,b
  5185  001272  2031               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5186  001274  6E17               	movwf	memcpy@s1+1,c
  5187  001276  EE20 F032          	lfsr	2,50
  5188  00127A  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5189  00127C  26D9               	addwf	fsr2l,f,c
  5190  00127E  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5191  001280  22DA               	addwfc	fsr2h,f,c
  5192  001282  50DF               	movf	indf2,w,c
  5193  001284  6FCD               	movwf	(??_scroll_left_to_right+7)& (0+255),b
  5194  001286  51CD               	movf	(??_scroll_left_to_right+7)& (0+255),w,b
  5195  001288  6E18               	movwf	memcpy@n,c
  5196  00128A  6A19               	clrf	memcpy@n+1,c
  5197  00128C  EC6B  F018         	call	_memcpy	;wreg free
  5198                           
  5199                           ;clcd.c: 521: }
  5200                           ;clcd.c: 522: } else {
  5201  001290  D058               	goto	l593
  5202  001292                     l590:
  5203                           
  5204                           ;clcd.c: 523: if (clcd_display_string_details->string[0] != (0)) {
  5205  001292  EE20 F002          	lfsr	2,2
  5206  001296  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5207  001298  26D9               	addwf	fsr2l,f,c
  5208  00129A  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5209  00129C  22DA               	addwfc	fsr2h,f,c
  5210  00129E  50DF               	movf	indf2,w,c
  5211  0012A0  B4D8               	btfsc	status,2,c
  5212  0012A2  D04F               	goto	l593
  5213                           
  5214                           ;clcd.c: 524: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col +
  5215                           ;clcd.c: 525: clcd_display_string_details->length_count_for_right_scroll,
  5216                           ;clcd.c: 526: clcd_display_string_details->string,
  5217                           ;clcd.c: 527: clcd_display_string_details->display_char_count - clcd_display_string_deta
      +                          ils->length_count_for_right_scroll);
  5218  0012A4  5032               	movf	scroll_left_to_right@line,w,c
  5219  0012A6  0D14               	mullw	20
  5220  0012A8  0E00               	movlw	low _lcd_display_array
  5221  0012AA  0100               	movlb	0	; () banked
  5222  0012AC  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5223  0012AE  0E01               	movlw	high _lcd_display_array
  5224  0012B0  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5225  0012B2  50F3               	movf	prodl,w,c
  5226  0012B4  27C6               	addwf	??_scroll_left_to_right& (0+255),f,b
  5227  0012B6  50F4               	movf	prodh,w,c
  5228  0012B8  23C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),f,b
  5229  0012BA  EE20 F02C          	lfsr	2,44
  5230  0012BE  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5231  0012C0  26D9               	addwf	fsr2l,f,c
  5232  0012C2  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5233  0012C4  22DA               	addwfc	fsr2h,f,c
  5234  0012C6  50DF               	movf	indf2,w,c
  5235  0012C8  0B7F               	andlw	127
  5236  0012CA  6FC8               	movwf	(??_scroll_left_to_right+2)& (0+255),b
  5237  0012CC  51C8               	movf	(??_scroll_left_to_right+2)& (0+255),w,b
  5238  0012CE  0D01               	mullw	1
  5239  0012D0  50F3               	movf	prodl,w,c
  5240  0012D2  27C6               	addwf	??_scroll_left_to_right& (0+255),f,b
  5241  0012D4  50F4               	movf	prodh,w,c
  5242  0012D6  23C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),f,b
  5243  0012D8  EE20 F033          	lfsr	2,51
  5244  0012DC  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5245  0012DE  26D9               	addwf	fsr2l,f,c
  5246  0012E0  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5247  0012E2  22DA               	addwfc	fsr2h,f,c
  5248  0012E4  50DF               	movf	indf2,w,c
  5249  0012E6  0B7F               	andlw	127
  5250  0012E8  6FC9               	movwf	(??_scroll_left_to_right+3)& (0+255),b
  5251  0012EA  51C9               	movf	(??_scroll_left_to_right+3)& (0+255),w,b
  5252  0012EC  0D01               	mullw	1
  5253  0012EE  50F3               	movf	prodl,w,c
  5254  0012F0  25C6               	addwf	??_scroll_left_to_right& (0+255),w,b
  5255  0012F2  6E14               	movwf	memcpy@d1,c
  5256  0012F4  50F4               	movf	prodh,w,c
  5257  0012F6  21C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),w,b
  5258  0012F8  6E15               	movwf	memcpy@d1+1,c
  5259  0012FA  0E02               	movlw	2
  5260  0012FC  2430               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5261  0012FE  6E16               	movwf	memcpy@s1,c
  5262  001300  0E00               	movlw	0
  5263  001302  2031               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5264  001304  6E17               	movwf	memcpy@s1+1,c
  5265  001306  EE20 F033          	lfsr	2,51
  5266  00130A  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5267  00130C  26D9               	addwf	fsr2l,f,c
  5268  00130E  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5269  001310  22DA               	addwfc	fsr2h,f,c
  5270  001312  50DF               	movf	indf2,w,c
  5271  001314  0B7F               	andlw	127
  5272  001316  6FCA               	movwf	(??_scroll_left_to_right+4)& (0+255),b
  5273  001318  6BCB               	clrf	(??_scroll_left_to_right+5)& (0+255),b
  5274  00131A  1FCA               	comf	(??_scroll_left_to_right+4)& (0+255),f,b
  5275  00131C  1FCB               	comf	(??_scroll_left_to_right+5)& (0+255),f,b
  5276  00131E  4BCA               	infsnz	(??_scroll_left_to_right+4)& (0+255),f,b
  5277  001320  2BCB               	incf	(??_scroll_left_to_right+5)& (0+255),f,b
  5278  001322  EE20 F032          	lfsr	2,50
  5279  001326  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5280  001328  26D9               	addwf	fsr2l,f,c
  5281  00132A  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5282  00132C  22DA               	addwfc	fsr2h,f,c
  5283  00132E  50DF               	movf	indf2,w,c
  5284  001330  6FCC               	movwf	(??_scroll_left_to_right+6)& (0+255),b
  5285  001332  51CC               	movf	(??_scroll_left_to_right+6)& (0+255),w,b
  5286  001334  25CA               	addwf	(??_scroll_left_to_right+4)& (0+255),w,b
  5287  001336  6E18               	movwf	memcpy@n,c
  5288  001338  0E00               	movlw	0
  5289  00133A  21CB               	addwfc	(??_scroll_left_to_right+5)& (0+255),w,b
  5290  00133C  6E19               	movwf	memcpy@n+1,c
  5291  00133E  EC6B  F018         	call	_memcpy	;wreg free
  5292  001342                     l593:
  5293                           
  5294                           ;clcd.c: 528: }
  5295                           ;clcd.c: 529: }
  5296                           ;clcd.c: 530: if (clcd_display_string_details->length_count_for_right_scroll <= clcd_dis
      +                          play_string_details->display_char_count) {
  5297  001342  EE20 F033          	lfsr	2,51
  5298  001346  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5299  001348  26D9               	addwf	fsr2l,f,c
  5300  00134A  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5301  00134C  22DA               	addwfc	fsr2h,f,c
  5302  00134E  50DF               	movf	indf2,w,c
  5303  001350  0B7F               	andlw	127
  5304  001352  0100               	movlb	0	; () banked
  5305  001354  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5306  001356  EE20 F032          	lfsr	2,50
  5307  00135A  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5308  00135C  26D9               	addwf	fsr2l,f,c
  5309  00135E  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5310  001360  22DA               	addwfc	fsr2h,f,c
  5311  001362  51C6               	movf	??_scroll_left_to_right& (0+255),w,b
  5312  001364  5CDE               	subwf	postinc2,w,c
  5313  001366  A0D8               	btfss	status,0,c
  5314  001368  D013               	goto	l594
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;clcd.c: 531: clcd_display_string_details->length_count_for_right_scroll++;
  5318  00136A  0E01               	movlw	1
  5319  00136C  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5320  00136E  EE20 F033          	lfsr	2,51
  5321  001372  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5322  001374  26D9               	addwf	fsr2l,f,c
  5323  001376  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5324  001378  22DA               	addwfc	fsr2h,f,c
  5325  00137A  50DF               	movf	indf2,w,c
  5326  00137C  0B7F               	andlw	127
  5327  00137E  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5328  001380  51C6               	movf	??_scroll_left_to_right& (0+255),w,b
  5329  001382  27C7               	addwf	(??_scroll_left_to_right+1)& (0+255),f,b
  5330  001384  50DF               	movf	indf2,w,c
  5331  001386  19C7               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,b
  5332  001388  0B80               	andlw	-128
  5333  00138A  19C7               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,b
  5334  00138C  6EDF               	movwf	indf2,c
  5335                           
  5336                           ;clcd.c: 532: } else if (clcd_display_string_details->length_decount_for_right_scroll < 
      +                          clcd_display_string_details->strlen) {
  5337  00138E  0012               	return	
  5338  001390                     l594:
  5339                           
  5340                           ; BSR set to: 0
  5341                           
  5342                           ; BSR set to: 0
  5343  001390  EE20 F034          	lfsr	2,52
  5344  001394  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5345  001396  26D9               	addwf	fsr2l,f,c
  5346  001398  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5347  00139A  22DA               	addwfc	fsr2h,f,c
  5348  00139C  50DF               	movf	indf2,w,c
  5349  00139E  0B7F               	andlw	127
  5350  0013A0  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5351  0013A2  EE20 F02A          	lfsr	2,42
  5352  0013A6  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5353  0013A8  26D9               	addwf	fsr2l,f,c
  5354  0013AA  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5355  0013AC  22DA               	addwfc	fsr2h,f,c
  5356  0013AE  50DF               	movf	indf2,w,c
  5357  0013B0  0B7F               	andlw	127
  5358  0013B2  5DC6               	subwf	??_scroll_left_to_right& (0+255),w,b
  5359  0013B4  B0D8               	btfsc	status,0,c
  5360  0013B6  0012               	return	
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;clcd.c: 533: clcd_display_string_details->length_decount_for_right_scroll++;
  5364  0013B8  0E01               	movlw	1
  5365  0013BA  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5366  0013BC  EE20 F034          	lfsr	2,52
  5367  0013C0  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5368  0013C2  26D9               	addwf	fsr2l,f,c
  5369  0013C4  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5370  0013C6  22DA               	addwfc	fsr2h,f,c
  5371  0013C8  50DF               	movf	indf2,w,c
  5372  0013CA  0B7F               	andlw	127
  5373  0013CC  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5374  0013CE  51C6               	movf	??_scroll_left_to_right& (0+255),w,b
  5375  0013D0  27C7               	addwf	(??_scroll_left_to_right+1)& (0+255),f,b
  5376  0013D2  50DF               	movf	indf2,w,c
  5377  0013D4  19C7               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,b
  5378  0013D6  0B80               	andlw	-128
  5379  0013D8  19C7               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,b
  5380  0013DA  6EDF               	movwf	indf2,c
  5381                           
  5382                           ;clcd.c: 534: if (clcd_display_string_details->length_decount_for_right_scroll >= clcd_d
      +                          isplay_string_details->strlen) {
  5383  0013DC  EE20 F02A          	lfsr	2,42
  5384  0013E0  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5385  0013E2  26D9               	addwf	fsr2l,f,c
  5386  0013E4  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5387  0013E6  22DA               	addwfc	fsr2h,f,c
  5388  0013E8  50DF               	movf	indf2,w,c
  5389  0013EA  0B7F               	andlw	127
  5390  0013EC  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5391  0013EE  EE20 F034          	lfsr	2,52
  5392  0013F2  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5393  0013F4  26D9               	addwf	fsr2l,f,c
  5394  0013F6  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5395  0013F8  22DA               	addwfc	fsr2h,f,c
  5396  0013FA  50DF               	movf	indf2,w,c
  5397  0013FC  0B7F               	andlw	127
  5398  0013FE  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5399  001400  51C6               	movf	??_scroll_left_to_right& (0+255),w,b
  5400  001402  5DC7               	subwf	(??_scroll_left_to_right+1)& (0+255),w,b
  5401  001404  A0D8               	btfss	status,0,c
  5402  001406  0012               	return	
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;clcd.c: 535: clcd_display_string_details->length_count_for_right_scroll = 0;
  5406  001408  EE20 F033          	lfsr	2,51
  5407  00140C  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5408  00140E  26D9               	addwf	fsr2l,f,c
  5409  001410  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5410  001412  22DA               	addwfc	fsr2h,f,c
  5411  001414  90DF               	bcf	indf2,0,c
  5412  001416  92DF               	bcf	indf2,1,c
  5413  001418  94DF               	bcf	indf2,2,c
  5414  00141A  96DF               	bcf	indf2,3,c
  5415  00141C  98DF               	bcf	indf2,4,c
  5416  00141E  9ADF               	bcf	indf2,5,c
  5417  001420  9CDF               	bcf	indf2,6,c
  5418                           
  5419                           ;clcd.c: 536: clcd_display_string_details->length_decount_for_right_scroll = 0;
  5420  001422  EE20 F034          	lfsr	2,52
  5421  001426  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5422  001428  26D9               	addwf	fsr2l,f,c
  5423  00142A  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5424  00142C  22DA               	addwfc	fsr2h,f,c
  5425  00142E  90DF               	bcf	indf2,0,c
  5426  001430  92DF               	bcf	indf2,1,c
  5427  001432  94DF               	bcf	indf2,2,c
  5428  001434  96DF               	bcf	indf2,3,c
  5429  001436  98DF               	bcf	indf2,4,c
  5430  001438  9ADF               	bcf	indf2,5,c
  5431  00143A  9CDF               	bcf	indf2,6,c
  5432                           
  5433                           ; BSR set to: 0
  5434                           
  5435                           ; BSR set to: 0
  5436  00143C  0012               	return	
  5437  00143E                     __end_of_scroll_left_to_right:
  5438                           	opt stack 0
  5439                           tblptru	equ	0xFF8
  5440                           tblptrh	equ	0xFF7
  5441                           tblptrl	equ	0xFF6
  5442                           tablat	equ	0xFF5
  5443                           prodh	equ	0xFF4
  5444                           prodl	equ	0xFF3
  5445                           intcon	equ	0xFF2
  5446                           postinc0	equ	0xFEE
  5447                           wreg	equ	0xFE8
  5448                           indf1	equ	0xFE7
  5449                           postinc1	equ	0xFE6
  5450                           postdec1	equ	0xFE5
  5451                           fsr1h	equ	0xFE2
  5452                           fsr1l	equ	0xFE1
  5453                           indf2	equ	0xFDF
  5454                           postinc2	equ	0xFDE
  5455                           postdec2	equ	0xFDD
  5456                           fsr2h	equ	0xFDA
  5457                           fsr2l	equ	0xFD9
  5458                           status	equ	0xFD8
  5459                           
  5460 ;; *************** function _display_text *****************
  5461 ;; Defined at:
  5462 ;;		line 671 in file "clcd.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;		None
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;Total ram usage:        0 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    8
  5483 ;; This function calls:
  5484 ;;		_char_enter_mode_left_to_right
  5485 ;;		_set_cursor
  5486 ;;		_write_lcd_cmd
  5487 ;;		_write_str
  5488 ;; This function is called by:
  5489 ;;		_make_display
  5490 ;;		_display_screen
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text11
  5495  002C66                     __ptext11:
  5496                           	opt stack 0
  5497  002C66                     _display_text:
  5498                           	opt stack 21
  5499                           
  5500                           ;clcd.c: 672: if (print_data_ready == 1) {
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;incstack = 0
  5504  002C66  0100               	movlb	0	; () banked
  5505  002C68  0576               	decf	_print_data_ready& (0+255),w,b
  5506  002C6A  1177               	iorwf	(_print_data_ready+1)& (0+255),w,b
  5507  002C6C  A4D8               	btfss	status,2,c
  5508  002C6E  D037               	goto	l640
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;clcd.c: 673: write_lcd_cmd(0x01);;
  5512  002C70  0E01               	movlw	1
  5513  002C72  ECD1  F01A         	call	_write_lcd_cmd
  5514                           
  5515                           ;clcd.c: 674: char_enter_mode_left_to_right();
  5516  002C76  EC6B  F01B         	call	_char_enter_mode_left_to_right	;wreg free
  5517                           
  5518                           ;clcd.c: 675: set_cursor(0x80, 0);
  5519  002C7A  0E00               	movlw	0
  5520  002C7C  6E1C               	movwf	set_cursor@col_number,c
  5521  002C7E  0E80               	movlw	128
  5522  002C80  ECED  F01A         	call	_set_cursor
  5523                           
  5524                           ;clcd.c: 676: write_str(lcd_display_array[0]);
  5525  002C84  0E00               	movlw	low _lcd_display_array
  5526  002C86  6E1C               	movwf	write_str@str,c
  5527  002C88  0E01               	movlw	high _lcd_display_array
  5528  002C8A  6E1D               	movwf	write_str@str+1,c
  5529  002C8C  EC2F  F019         	call	_write_str	;wreg free
  5530                           
  5531                           ;clcd.c: 677: set_cursor(0xC0, 0);
  5532  002C90  0E00               	movlw	0
  5533  002C92  6E1C               	movwf	set_cursor@col_number,c
  5534  002C94  0EC0               	movlw	192
  5535  002C96  ECED  F01A         	call	_set_cursor
  5536                           
  5537                           ;clcd.c: 678: write_str(lcd_display_array[1]);
  5538  002C9A  0E14               	movlw	low (_lcd_display_array+20)
  5539  002C9C  6E1C               	movwf	write_str@str,c
  5540  002C9E  0E01               	movlw	high (_lcd_display_array+20)
  5541  002CA0  6E1D               	movwf	write_str@str+1,c
  5542  002CA2  EC2F  F019         	call	_write_str	;wreg free
  5543                           
  5544                           ;clcd.c: 679: set_cursor(0x94, 0);
  5545  002CA6  0E00               	movlw	0
  5546  002CA8  6E1C               	movwf	set_cursor@col_number,c
  5547  002CAA  0E94               	movlw	148
  5548  002CAC  ECED  F01A         	call	_set_cursor
  5549                           
  5550                           ;clcd.c: 680: write_str(lcd_display_array[2]);
  5551  002CB0  0E28               	movlw	low (_lcd_display_array+40)
  5552  002CB2  6E1C               	movwf	write_str@str,c
  5553  002CB4  0E01               	movlw	high (_lcd_display_array+40)
  5554  002CB6  6E1D               	movwf	write_str@str+1,c
  5555  002CB8  EC2F  F019         	call	_write_str	;wreg free
  5556                           
  5557                           ;clcd.c: 681: set_cursor(0xD4, 0);
  5558  002CBC  0E00               	movlw	0
  5559  002CBE  6E1C               	movwf	set_cursor@col_number,c
  5560  002CC0  0ED4               	movlw	212
  5561  002CC2  ECED  F01A         	call	_set_cursor
  5562                           
  5563                           ;clcd.c: 682: write_str(lcd_display_array[3]);
  5564  002CC6  0E3C               	movlw	low (_lcd_display_array+60)
  5565  002CC8  6E1C               	movwf	write_str@str,c
  5566  002CCA  0E01               	movlw	high (_lcd_display_array+60)
  5567  002CCC  6E1D               	movwf	write_str@str+1,c
  5568  002CCE  EC2F  F019         	call	_write_str	;wreg free
  5569                           
  5570                           ;clcd.c: 683: print_data_ready = 0;
  5571  002CD2  0E00               	movlw	0
  5572  002CD4  0100               	movlb	0	; () banked
  5573  002CD6  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5574  002CD8  0E00               	movlw	0
  5575  002CDA  6F76               	movwf	_print_data_ready& (0+255),b
  5576                           
  5577                           ;clcd.c: 684: } else {
  5578  002CDC  0012               	return	
  5579  002CDE                     l640:
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;clcd.c: 685: print_data_ready = 0;
  5583                           
  5584                           ; BSR set to: 0
  5585  002CDE  0E00               	movlw	0
  5586  002CE0  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5587  002CE2  0E00               	movlw	0
  5588  002CE4  6F76               	movwf	_print_data_ready& (0+255),b
  5589  002CE6  0012               	return	
  5590  002CE8                     __end_of_display_text:
  5591                           	opt stack 0
  5592                           tblptru	equ	0xFF8
  5593                           tblptrh	equ	0xFF7
  5594                           tblptrl	equ	0xFF6
  5595                           tablat	equ	0xFF5
  5596                           prodh	equ	0xFF4
  5597                           prodl	equ	0xFF3
  5598                           intcon	equ	0xFF2
  5599                           postinc0	equ	0xFEE
  5600                           wreg	equ	0xFE8
  5601                           indf1	equ	0xFE7
  5602                           postinc1	equ	0xFE6
  5603                           postdec1	equ	0xFE5
  5604                           fsr1h	equ	0xFE2
  5605                           fsr1l	equ	0xFE1
  5606                           indf2	equ	0xFDF
  5607                           postinc2	equ	0xFDE
  5608                           postdec2	equ	0xFDD
  5609                           fsr2h	equ	0xFDA
  5610                           fsr2l	equ	0xFD9
  5611                           status	equ	0xFD8
  5612                           
  5613 ;; *************** function _set_cursor *****************
  5614 ;; Defined at:
  5615 ;;		line 320 in file "clcd.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  row_number      1    wreg     unsigned char 
  5618 ;;  col_number      1   27[COMRAM] unsigned char 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  row_number      1   28[COMRAM] unsigned char 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0, cstack
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5630 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;Total ram usage:        2 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    7
  5637 ;; This function calls:
  5638 ;;		_write_lcd_cmd
  5639 ;; This function is called by:
  5640 ;;		_display_text
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text12
  5645  0035DA                     __ptext12:
  5646                           	opt stack 0
  5647  0035DA                     _set_cursor:
  5648                           	opt stack 21
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;incstack = 0
  5652                           ;set_cursor@row_number stored from wreg
  5653  0035DA  6E1D               	movwf	set_cursor@row_number,c
  5654                           
  5655                           ;clcd.c: 321: if (col_number > 20) {
  5656  0035DC  0E14               	movlw	20
  5657  0035DE  641C               	cpfsgt	set_cursor@col_number,c
  5658  0035E0  D002               	goto	l512
  5659                           
  5660                           ;clcd.c: 322: col_number = 0;
  5661  0035E2  0E00               	movlw	0
  5662  0035E4  6E1C               	movwf	set_cursor@col_number,c
  5663  0035E6                     l512:
  5664                           
  5665                           ;clcd.c: 323: }
  5666                           ;clcd.c: 324: write_lcd_cmd(col_number + row_number);
  5667  0035E6  501C               	movf	set_cursor@col_number,w,c
  5668  0035E8  241D               	addwf	set_cursor@row_number,w,c
  5669  0035EA  ECD1  F01A         	call	_write_lcd_cmd
  5670  0035EE  0012               	return		;funcret
  5671  0035F0                     __end_of_set_cursor:
  5672                           	opt stack 0
  5673                           tblptru	equ	0xFF8
  5674                           tblptrh	equ	0xFF7
  5675                           tblptrl	equ	0xFF6
  5676                           tablat	equ	0xFF5
  5677                           prodh	equ	0xFF4
  5678                           prodl	equ	0xFF3
  5679                           intcon	equ	0xFF2
  5680                           postinc0	equ	0xFEE
  5681                           wreg	equ	0xFE8
  5682                           indf1	equ	0xFE7
  5683                           postinc1	equ	0xFE6
  5684                           postdec1	equ	0xFE5
  5685                           fsr1h	equ	0xFE2
  5686                           fsr1l	equ	0xFE1
  5687                           indf2	equ	0xFDF
  5688                           postinc2	equ	0xFDE
  5689                           postdec2	equ	0xFDD
  5690                           fsr2h	equ	0xFDA
  5691                           fsr2l	equ	0xFD9
  5692                           status	equ	0xFD8
  5693                           
  5694 ;; *************** function _char_enter_mode_left_to_right *****************
  5695 ;; Defined at:
  5696 ;;		line 361 in file "clcd.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;		None
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;		None
  5701 ;; Return value:  Size  Location     Type
  5702 ;;                  1    wreg      void 
  5703 ;; Registers used:
  5704 ;;		wreg, status,2, status,0, cstack
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;Total ram usage:        0 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    7
  5717 ;; This function calls:
  5718 ;;		_write_lcd_cmd
  5719 ;; This function is called by:
  5720 ;;		_display_text
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text13
  5725  0036D6                     __ptext13:
  5726                           	opt stack 0
  5727  0036D6                     _char_enter_mode_left_to_right:
  5728                           	opt stack 21
  5729                           
  5730                           ;clcd.c: 365: write_lcd_cmd(0x06);
  5731                           
  5732                           ;incstack = 0
  5733  0036D6  0E06               	movlw	6
  5734  0036D8  ECD1  F01A         	call	_write_lcd_cmd
  5735  0036DC  0012               	return		;funcret
  5736  0036DE                     __end_of_char_enter_mode_left_to_right:
  5737                           	opt stack 0
  5738                           tblptru	equ	0xFF8
  5739                           tblptrh	equ	0xFF7
  5740                           tblptrl	equ	0xFF6
  5741                           tablat	equ	0xFF5
  5742                           prodh	equ	0xFF4
  5743                           prodl	equ	0xFF3
  5744                           intcon	equ	0xFF2
  5745                           postinc0	equ	0xFEE
  5746                           wreg	equ	0xFE8
  5747                           indf1	equ	0xFE7
  5748                           postinc1	equ	0xFE6
  5749                           postdec1	equ	0xFE5
  5750                           fsr1h	equ	0xFE2
  5751                           fsr1l	equ	0xFE1
  5752                           indf2	equ	0xFDF
  5753                           postinc2	equ	0xFDE
  5754                           postdec2	equ	0xFDD
  5755                           fsr2h	equ	0xFDA
  5756                           fsr2l	equ	0xFD9
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function _copy_data *****************
  5760 ;; Defined at:
  5761 ;;		line 121 in file "clcd.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;  clcd_str_dat    2   51[COMRAM] PTR struct .
  5764 ;;		 -> clcd_display_string_details(1100), 
  5765 ;;  data            2   53[COMRAM] PTR struct .
  5766 ;;		 -> cmd_data(52), 
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;  col2            1    0        unsigned char 
  5769 ;;  row2            1    0        unsigned char 
  5770 ;;  col1            1    0        unsigned char 
  5771 ;;  row1            1    0        unsigned char 
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  1    wreg      void 
  5774 ;; Registers used:
  5775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5781 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;Total ram usage:        6 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:    8
  5788 ;; This function calls:
  5789 ;;		_printf
  5790 ;;		_strcpy
  5791 ;;		_strlen
  5792 ;; This function is called by:
  5793 ;;		_update_string_data
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           	psect	text14
  5798  001C6A                     __ptext14:
  5799                           	opt stack 0
  5800  001C6A                     _copy_data:
  5801                           	opt stack 19
  5802                           
  5803                           ;clcd.c: 122: char row1, col1, row2, col2;
  5804                           ;clcd.c: 123: clcd_str_data->uid = data->uid;
  5805                           
  5806                           ;incstack = 0
  5807  001C6A  C036  FFD9         	movff	copy_data@data,fsr2l
  5808  001C6E  C037  FFDA         	movff	copy_data@data+1,fsr2h
  5809  001C72  50DF               	movf	indf2,w,c
  5810  001C74  0100               	movlb	0	; () banked
  5811  001C76  6FC6               	movwf	??_copy_data& (0+255),b
  5812  001C78  6BC7               	clrf	(??_copy_data+1)& (0+255),b
  5813  001C7A  C034  FFD9         	movff	copy_data@clcd_str_data,fsr2l
  5814  001C7E  C035  FFDA         	movff	copy_data@clcd_str_data+1,fsr2h
  5815  001C82  C0C6  FFDE         	movff	??_copy_data,postinc2
  5816  001C86  C0C7  FFDD         	movff	??_copy_data+1,postdec2
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;clcd.c: 124: strcpy(clcd_str_data->string, data->data);
  5820  001C8A  0E02               	movlw	2
  5821  001C8C  2434               	addwf	copy_data@clcd_str_data,w,c
  5822  001C8E  6E14               	movwf	strcpy@to,c
  5823  001C90  0E00               	movlw	0
  5824  001C92  2035               	addwfc	copy_data@clcd_str_data+1,w,c
  5825  001C94  6E15               	movwf	strcpy@to+1,c
  5826  001C96  0E01               	movlw	1
  5827  001C98  2436               	addwf	copy_data@data,w,c
  5828  001C9A  6E16               	movwf	strcpy@from,c
  5829  001C9C  0E00               	movlw	0
  5830  001C9E  2037               	addwfc	copy_data@data+1,w,c
  5831  001CA0  6E17               	movwf	strcpy@from+1,c
  5832  001CA2  ECE9  F019         	call	_strcpy	;wreg free
  5833                           
  5834                           ;clcd.c: 125: clcd_str_data->strlen = strlen(clcd_str_data->string);
  5835  001CA6  0E02               	movlw	2
  5836  001CA8  2434               	addwf	copy_data@clcd_str_data,w,c
  5837  001CAA  6E22               	movwf	strlen@s,c
  5838  001CAC  0E00               	movlw	0
  5839  001CAE  2035               	addwfc	copy_data@clcd_str_data+1,w,c
  5840  001CB0  6E23               	movwf	strlen@s+1,c
  5841  001CB2  EC4C  F019         	call	_strlen	;wreg free
  5842  001CB6  EE20 F02A          	lfsr	2,42
  5843  001CBA  5034               	movf	copy_data@clcd_str_data,w,c
  5844  001CBC  26D9               	addwf	fsr2l,f,c
  5845  001CBE  5035               	movf	copy_data@clcd_str_data+1,w,c
  5846  001CC0  22DA               	addwfc	fsr2h,f,c
  5847  001CC2  50DF               	movf	indf2,w,c
  5848  001CC4  1822               	xorwf	?_strlen,w,c
  5849  001CC6  0B80               	andlw	-128
  5850  001CC8  1822               	xorwf	?_strlen,w,c
  5851  001CCA  6EDF               	movwf	indf2,c
  5852                           
  5853                           ;clcd.c: 126: clcd_str_data->start_row = data->start_row;
  5854  001CCC  EE20 F02A          	lfsr	2,42
  5855  001CD0  5036               	movf	copy_data@data,w,c
  5856  001CD2  26D9               	addwf	fsr2l,f,c
  5857  001CD4  5037               	movf	copy_data@data+1,w,c
  5858  001CD6  22DA               	addwfc	fsr2h,f,c
  5859  001CD8  50DF               	movf	indf2,w,c
  5860  001CDA  0100               	movlb	0	; () banked
  5861  001CDC  6FC6               	movwf	??_copy_data& (0+255),b
  5862  001CDE  EE20 F02B          	lfsr	2,43
  5863  001CE2  5034               	movf	copy_data@clcd_str_data,w,c
  5864  001CE4  26D9               	addwf	fsr2l,f,c
  5865  001CE6  5035               	movf	copy_data@clcd_str_data+1,w,c
  5866  001CE8  22DA               	addwfc	fsr2h,f,c
  5867  001CEA  50DF               	movf	indf2,w,c
  5868  001CEC  19C6               	xorwf	??_copy_data& (0+255),w,b
  5869  001CEE  0B80               	andlw	-128
  5870  001CF0  19C6               	xorwf	??_copy_data& (0+255),w,b
  5871  001CF2  6EDF               	movwf	indf2,c
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;clcd.c: 127: clcd_str_data->start_col = data->start_col;
  5875  001CF4  EE20 F02B          	lfsr	2,43
  5876  001CF8  5036               	movf	copy_data@data,w,c
  5877  001CFA  26D9               	addwf	fsr2l,f,c
  5878  001CFC  5037               	movf	copy_data@data+1,w,c
  5879  001CFE  22DA               	addwfc	fsr2h,f,c
  5880  001D00  50DF               	movf	indf2,w,c
  5881  001D02  6FC6               	movwf	??_copy_data& (0+255),b
  5882  001D04  EE20 F02C          	lfsr	2,44
  5883  001D08  5034               	movf	copy_data@clcd_str_data,w,c
  5884  001D0A  26D9               	addwf	fsr2l,f,c
  5885  001D0C  5035               	movf	copy_data@clcd_str_data+1,w,c
  5886  001D0E  22DA               	addwfc	fsr2h,f,c
  5887  001D10  50DF               	movf	indf2,w,c
  5888  001D12  19C6               	xorwf	??_copy_data& (0+255),w,b
  5889  001D14  0B80               	andlw	-128
  5890  001D16  19C6               	xorwf	??_copy_data& (0+255),w,b
  5891  001D18  6EDF               	movwf	indf2,c
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;clcd.c: 128: clcd_str_data->end_row = data->end_row;
  5895  001D1A  EE20 F02C          	lfsr	2,44
  5896  001D1E  5036               	movf	copy_data@data,w,c
  5897  001D20  26D9               	addwf	fsr2l,f,c
  5898  001D22  5037               	movf	copy_data@data+1,w,c
  5899  001D24  22DA               	addwfc	fsr2h,f,c
  5900  001D26  50DF               	movf	indf2,w,c
  5901  001D28  6FC6               	movwf	??_copy_data& (0+255),b
  5902  001D2A  EE20 F02E          	lfsr	2,46
  5903  001D2E  5034               	movf	copy_data@clcd_str_data,w,c
  5904  001D30  26D9               	addwf	fsr2l,f,c
  5905  001D32  5035               	movf	copy_data@clcd_str_data+1,w,c
  5906  001D34  22DA               	addwfc	fsr2h,f,c
  5907  001D36  50DF               	movf	indf2,w,c
  5908  001D38  19C6               	xorwf	??_copy_data& (0+255),w,b
  5909  001D3A  0B80               	andlw	-128
  5910  001D3C  19C6               	xorwf	??_copy_data& (0+255),w,b
  5911  001D3E  6EDF               	movwf	indf2,c
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;clcd.c: 129: clcd_str_data->end_col = data->end_col;
  5915  001D40  EE20 F02D          	lfsr	2,45
  5916  001D44  5036               	movf	copy_data@data,w,c
  5917  001D46  26D9               	addwf	fsr2l,f,c
  5918  001D48  5037               	movf	copy_data@data+1,w,c
  5919  001D4A  22DA               	addwfc	fsr2h,f,c
  5920  001D4C  50DF               	movf	indf2,w,c
  5921  001D4E  6FC6               	movwf	??_copy_data& (0+255),b
  5922  001D50  EE20 F02F          	lfsr	2,47
  5923  001D54  5034               	movf	copy_data@clcd_str_data,w,c
  5924  001D56  26D9               	addwf	fsr2l,f,c
  5925  001D58  5035               	movf	copy_data@clcd_str_data+1,w,c
  5926  001D5A  22DA               	addwfc	fsr2h,f,c
  5927  001D5C  50DF               	movf	indf2,w,c
  5928  001D5E  19C6               	xorwf	??_copy_data& (0+255),w,b
  5929  001D60  0B80               	andlw	-128
  5930  001D62  19C6               	xorwf	??_copy_data& (0+255),w,b
  5931  001D64  6EDF               	movwf	indf2,c
  5932                           
  5933                           ; BSR set to: 0
  5934                           ;clcd.c: 130: clcd_str_data->start_point = (clcd_str_data->start_row * clcd_config_data.
      +                          clcd_max_col) + clcd_str_data->start_col;
  5935  001D66  EE20 F02C          	lfsr	2,44
  5936  001D6A  5034               	movf	copy_data@clcd_str_data,w,c
  5937  001D6C  26D9               	addwf	fsr2l,f,c
  5938  001D6E  5035               	movf	copy_data@clcd_str_data+1,w,c
  5939  001D70  22DA               	addwfc	fsr2h,f,c
  5940  001D72  50DF               	movf	indf2,w,c
  5941  001D74  0B7F               	andlw	127
  5942  001D76  6FC6               	movwf	??_copy_data& (0+255),b
  5943  001D78  EE20 F02B          	lfsr	2,43
  5944  001D7C  5034               	movf	copy_data@clcd_str_data,w,c
  5945  001D7E  26D9               	addwf	fsr2l,f,c
  5946  001D80  5035               	movf	copy_data@clcd_str_data+1,w,c
  5947  001D82  22DA               	addwfc	fsr2h,f,c
  5948  001D84  50DF               	movf	indf2,w,c
  5949  001D86  0B7F               	andlw	127
  5950  001D88  0246               	mulwf	_clcd_config_data+2,c
  5951  001D8A  50F3               	movf	prodl,w,c
  5952  001D8C  25C6               	addwf	??_copy_data& (0+255),w,b
  5953  001D8E  6FC7               	movwf	(??_copy_data+1)& (0+255),b
  5954  001D90  EE20 F02D          	lfsr	2,45
  5955  001D94  5034               	movf	copy_data@clcd_str_data,w,c
  5956  001D96  26D9               	addwf	fsr2l,f,c
  5957  001D98  5035               	movf	copy_data@clcd_str_data+1,w,c
  5958  001D9A  22DA               	addwfc	fsr2h,f,c
  5959  001D9C  50DF               	movf	indf2,w,c
  5960  001D9E  19C7               	xorwf	(??_copy_data+1)& (0+255),w,b
  5961  001DA0  0B80               	andlw	-128
  5962  001DA2  19C7               	xorwf	(??_copy_data+1)& (0+255),w,b
  5963  001DA4  6EDF               	movwf	indf2,c
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;clcd.c: 131: clcd_str_data->end_point = (clcd_str_data->end_row * clcd_config_data.clcd
      +                          _max_col) + clcd_str_data->end_col;
  5967  001DA6  EE20 F02F          	lfsr	2,47
  5968  001DAA  5034               	movf	copy_data@clcd_str_data,w,c
  5969  001DAC  26D9               	addwf	fsr2l,f,c
  5970  001DAE  5035               	movf	copy_data@clcd_str_data+1,w,c
  5971  001DB0  22DA               	addwfc	fsr2h,f,c
  5972  001DB2  50DF               	movf	indf2,w,c
  5973  001DB4  0B7F               	andlw	127
  5974  001DB6  6FC6               	movwf	??_copy_data& (0+255),b
  5975  001DB8  EE20 F02E          	lfsr	2,46
  5976  001DBC  5034               	movf	copy_data@clcd_str_data,w,c
  5977  001DBE  26D9               	addwf	fsr2l,f,c
  5978  001DC0  5035               	movf	copy_data@clcd_str_data+1,w,c
  5979  001DC2  22DA               	addwfc	fsr2h,f,c
  5980  001DC4  50DF               	movf	indf2,w,c
  5981  001DC6  0B7F               	andlw	127
  5982  001DC8  0246               	mulwf	_clcd_config_data+2,c
  5983  001DCA  50F3               	movf	prodl,w,c
  5984  001DCC  25C6               	addwf	??_copy_data& (0+255),w,b
  5985  001DCE  6FC7               	movwf	(??_copy_data+1)& (0+255),b
  5986  001DD0  EE20 F030          	lfsr	2,48
  5987  001DD4  5034               	movf	copy_data@clcd_str_data,w,c
  5988  001DD6  26D9               	addwf	fsr2l,f,c
  5989  001DD8  5035               	movf	copy_data@clcd_str_data+1,w,c
  5990  001DDA  22DA               	addwfc	fsr2h,f,c
  5991  001DDC  50DF               	movf	indf2,w,c
  5992  001DDE  19C7               	xorwf	(??_copy_data+1)& (0+255),w,b
  5993  001DE0  0B80               	andlw	-128
  5994  001DE2  19C7               	xorwf	(??_copy_data+1)& (0+255),w,b
  5995  001DE4  6EDF               	movwf	indf2,c
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;clcd.c: 132: clcd_str_data->direction = data->scroll;
  5999  001DE6  EE20 F02F          	lfsr	2,47
  6000  001DEA  5036               	movf	copy_data@data,w,c
  6001  001DEC  26D9               	addwf	fsr2l,f,c
  6002  001DEE  5037               	movf	copy_data@data+1,w,c
  6003  001DF0  22DA               	addwfc	fsr2h,f,c
  6004  001DF2  50DF               	movf	indf2,w,c
  6005  001DF4  6FC6               	movwf	??_copy_data& (0+255),b
  6006  001DF6  EE20 F031          	lfsr	2,49
  6007  001DFA  5034               	movf	copy_data@clcd_str_data,w,c
  6008  001DFC  26D9               	addwf	fsr2l,f,c
  6009  001DFE  5035               	movf	copy_data@clcd_str_data+1,w,c
  6010  001E00  22DA               	addwfc	fsr2h,f,c
  6011  001E02  50DF               	movf	indf2,w,c
  6012  001E04  19C6               	xorwf	??_copy_data& (0+255),w,b
  6013  001E06  0BF8               	andlw	-8
  6014  001E08  19C6               	xorwf	??_copy_data& (0+255),w,b
  6015  001E0A  6EDF               	movwf	indf2,c
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;clcd.c: 133: clcd_str_data->display_char_count = (clcd_str_data->end_point - clcd_str_d
      +                          ata->start_point) + 1;
  6019  001E0C  EE20 F032          	lfsr	2,50
  6020  001E10  5034               	movf	copy_data@clcd_str_data,w,c
  6021  001E12  26D9               	addwf	fsr2l,f,c
  6022  001E14  5035               	movf	copy_data@clcd_str_data+1,w,c
  6023  001E16  22DA               	addwfc	fsr2h,f,c
  6024  001E18  EE10 F030          	lfsr	1,48
  6025  001E1C  5034               	movf	copy_data@clcd_str_data,w,c
  6026  001E1E  26E1               	addwf	fsr1l,f,c
  6027  001E20  5035               	movf	copy_data@clcd_str_data+1,w,c
  6028  001E22  22E2               	addwfc	fsr1h,f,c
  6029  001E24  50E7               	movf	indf1,w,c
  6030  001E26  0B7F               	andlw	127
  6031  001E28  6FC6               	movwf	??_copy_data& (0+255),b
  6032  001E2A  EE10 F02D          	lfsr	1,45
  6033  001E2E  5034               	movf	copy_data@clcd_str_data,w,c
  6034  001E30  26E1               	addwf	fsr1l,f,c
  6035  001E32  5035               	movf	copy_data@clcd_str_data+1,w,c
  6036  001E34  22E2               	addwfc	fsr1h,f,c
  6037  001E36  50E7               	movf	indf1,w,c
  6038  001E38  0B7F               	andlw	127
  6039  001E3A  0800               	sublw	0
  6040  001E3C  25C6               	addwf	??_copy_data& (0+255),w,b
  6041  001E3E  6FC7               	movwf	(??_copy_data+1)& (0+255),b
  6042  001E40  29C7               	incf	(??_copy_data+1)& (0+255),w,b
  6043  001E42  6EDF               	movwf	indf2,c
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;clcd.c: 134: printf("display_char_count = %d\r\n", clcd_str_data->display_char_count);
  6047  001E44  0E3E               	movlw	low STR_6
  6048  001E46  6E22               	movwf	printf@f,c
  6049  001E48  0EFD               	movlw	high STR_6
  6050  001E4A  6E23               	movwf	printf@f+1,c
  6051  001E4C  EE20 F032          	lfsr	2,50
  6052  001E50  5034               	movf	copy_data@clcd_str_data,w,c
  6053  001E52  26D9               	addwf	fsr2l,f,c
  6054  001E54  5035               	movf	copy_data@clcd_str_data+1,w,c
  6055  001E56  22DA               	addwfc	fsr2h,f,c
  6056  001E58  50DF               	movf	indf2,w,c
  6057  001E5A  6FC6               	movwf	??_copy_data& (0+255),b
  6058  001E5C  51C6               	movf	??_copy_data& (0+255),w,b
  6059  001E5E  6E24               	movwf	?_printf+2,c
  6060  001E60  6A25               	clrf	?_printf+3,c
  6061  001E62  EC22  F011         	call	_printf	;wreg free
  6062  001E66  0012               	return		;funcret
  6063  001E68                     __end_of_copy_data:
  6064                           	opt stack 0
  6065                           tblptru	equ	0xFF8
  6066                           tblptrh	equ	0xFF7
  6067                           tblptrl	equ	0xFF6
  6068                           tablat	equ	0xFF5
  6069                           prodh	equ	0xFF4
  6070                           prodl	equ	0xFF3
  6071                           intcon	equ	0xFF2
  6072                           postinc0	equ	0xFEE
  6073                           wreg	equ	0xFE8
  6074                           indf1	equ	0xFE7
  6075                           postinc1	equ	0xFE6
  6076                           postdec1	equ	0xFE5
  6077                           fsr1h	equ	0xFE2
  6078                           fsr1l	equ	0xFE1
  6079                           indf2	equ	0xFDF
  6080                           postinc2	equ	0xFDE
  6081                           postdec2	equ	0xFDD
  6082                           fsr2h	equ	0xFDA
  6083                           fsr2l	equ	0xFD9
  6084                           status	equ	0xFD8
  6085                           
  6086 ;; *************** function _conflict_check *****************
  6087 ;; Defined at:
  6088 ;;		line 137 in file "clcd.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;  exist_uid_id    1    wreg     unsigned char 
  6091 ;;  new_start_po    1   51[COMRAM] unsigned char 
  6092 ;;  new_end_poin    1   52[COMRAM] unsigned char 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  exist_uid_id    1    0[BANK0 ] unsigned char 
  6095 ;;  i               2    2[BANK0 ] int 
  6096 ;;  conflict        1    1[BANK0 ] unsigned char 
  6097 ;; Return value:  Size  Location     Type
  6098 ;;                  1    wreg      unsigned char 
  6099 ;; Registers used:
  6100 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6106 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;Total ram usage:        9 bytes
  6111 ;; Hardware stack levels used:    1
  6112 ;; Hardware stack levels required when called:    8
  6113 ;; This function calls:
  6114 ;;		___wmul
  6115 ;;		_printf
  6116 ;; This function is called by:
  6117 ;;		_update_string_data
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           	psect	text15
  6122  001778                     __ptext15:
  6123                           	opt stack 0
  6124  001778                     _conflict_check:
  6125                           	opt stack 19
  6126                           
  6127                           ;incstack = 0
  6128                           ;conflict_check@exist_uid_idx stored from wreg
  6129  001778  0100               	movlb	0	; () banked
  6130  00177A  6FC6               	movwf	conflict_check@exist_uid_idx& (0+255),b
  6131                           
  6132                           ;clcd.c: 138: int i = 0;
  6133  00177C  0E00               	movlw	0
  6134  00177E  0100               	movlb	0	; () banked
  6135  001780  6FC9               	movwf	(conflict_check@i+1)& (0+255),b
  6136  001782  0E00               	movlw	0
  6137  001784  6FC8               	movwf	conflict_check@i& (0+255),b
  6138                           
  6139                           ;clcd.c: 139: bool conflict = 0;
  6140  001786  0E00               	movlw	0
  6141  001788  6FC7               	movwf	conflict_check@conflict& (0+255),b
  6142                           
  6143                           ;clcd.c: 141: for (i = 0; i < clcd_config_data.clcd_max_display_string;) {
  6144  00178A  0E00               	movlw	0
  6145  00178C  6FC9               	movwf	(conflict_check@i+1)& (0+255),b
  6146  00178E  0E00               	movlw	0
  6147  001790  6FC8               	movwf	conflict_check@i& (0+255),b
  6148  001792  D134               	goto	l454
  6149  001794                     
  6150                           ; BSR set to: 0
  6151                           ;clcd.c: 142: if (exist_uid_idx != i && clcd_display_string_details[i].uid != 0) {
  6152                           
  6153                           ; BSR set to: 0
  6154  001794  51C6               	movf	conflict_check@exist_uid_idx& (0+255),w,b
  6155  001796  6E36               	movwf	??_conflict_check& (0+255),c
  6156  001798  6A37               	clrf	(??_conflict_check+1)& (0+255),c
  6157  00179A  51C8               	movf	conflict_check@i& (0+255),w,b
  6158  00179C  1836               	xorwf	??_conflict_check,w,c
  6159  00179E  E104               	bnz	u5840
  6160  0017A0  51C9               	movf	(conflict_check@i+1)& (0+255),w,b
  6161  0017A2  1837               	xorwf	??_conflict_check+1,w,c
  6162  0017A4  B4D8               	btfsc	status,2,c
  6163  0017A6  D127               	goto	l456
  6164  0017A8                     u5840:
  6165                           
  6166                           ; BSR set to: 0
  6167  0017A8  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6168  0017AC  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6169  0017B0  0E00               	movlw	0
  6170  0017B2  6E1F               	movwf	___wmul@multiplicand+1,c
  6171  0017B4  0E37               	movlw	55
  6172  0017B6  6E1E               	movwf	___wmul@multiplicand,c
  6173  0017B8  EC41  F01A         	call	___wmul	;wreg free
  6174  0017BC  0E96               	movlw	low _clcd_display_string_details
  6175  0017BE  241C               	addwf	?___wmul,w,c
  6176  0017C0  6ED9               	movwf	fsr2l,c
  6177  0017C2  0E02               	movlw	high _clcd_display_string_details
  6178  0017C4  201D               	addwfc	?___wmul+1,w,c
  6179  0017C6  6EDA               	movwf	fsr2h,c
  6180  0017C8  50DE               	movf	postinc2,w,c
  6181  0017CA  10DE               	iorwf	postinc2,w,c
  6182  0017CC  B4D8               	btfsc	status,2,c
  6183  0017CE  D113               	goto	l456
  6184                           
  6185                           ;clcd.c: 143: if (new_start_point >= clcd_display_string_details[i].start_point && new_s
      +                          tart_point <= clcd_display_string_details[i].end_point) {
  6186  0017D0  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6187  0017D4  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6188  0017D8  0E00               	movlw	0
  6189  0017DA  6E1F               	movwf	___wmul@multiplicand+1,c
  6190  0017DC  0E37               	movlw	55
  6191  0017DE  6E1E               	movwf	___wmul@multiplicand,c
  6192  0017E0  EC41  F01A         	call	___wmul	;wreg free
  6193  0017E4  0E2D               	movlw	45
  6194  0017E6  261C               	addwf	?___wmul,f,c
  6195  0017E8  0E00               	movlw	0
  6196  0017EA  221D               	addwfc	?___wmul+1,f,c
  6197  0017EC  0E96               	movlw	low _clcd_display_string_details
  6198  0017EE  241C               	addwf	?___wmul,w,c
  6199  0017F0  6ED9               	movwf	fsr2l,c
  6200  0017F2  0E02               	movlw	high _clcd_display_string_details
  6201  0017F4  201D               	addwfc	?___wmul+1,w,c
  6202  0017F6  6EDA               	movwf	fsr2h,c
  6203  0017F8  50DF               	movf	223,w,c
  6204  0017FA  0B7F               	andlw	127
  6205  0017FC  6E36               	movwf	??_conflict_check& (0+255),c
  6206  0017FE  5036               	movf	??_conflict_check,w,c
  6207  001800  5C34               	subwf	conflict_check@new_start_point,w,c
  6208  001802  A0D8               	btfss	status,0,c
  6209  001804  D044               	goto	l453
  6210  001806  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6211  00180A  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6212  00180E  0E00               	movlw	0
  6213  001810  6E1F               	movwf	___wmul@multiplicand+1,c
  6214  001812  0E37               	movlw	55
  6215  001814  6E1E               	movwf	___wmul@multiplicand,c
  6216  001816  EC41  F01A         	call	___wmul	;wreg free
  6217  00181A  0E30               	movlw	48
  6218  00181C  261C               	addwf	?___wmul,f,c
  6219  00181E  0E00               	movlw	0
  6220  001820  221D               	addwfc	?___wmul+1,f,c
  6221  001822  0E96               	movlw	low _clcd_display_string_details
  6222  001824  241C               	addwf	?___wmul,w,c
  6223  001826  6ED9               	movwf	fsr2l,c
  6224  001828  0E02               	movlw	high _clcd_display_string_details
  6225  00182A  201D               	addwfc	?___wmul+1,w,c
  6226  00182C  6EDA               	movwf	fsr2h,c
  6227  00182E  50DF               	movf	223,w,c
  6228  001830  0B7F               	andlw	127
  6229  001832  6E36               	movwf	??_conflict_check& (0+255),c
  6230  001834  5034               	movf	conflict_check@new_start_point,w,c
  6231  001836  5C36               	subwf	??_conflict_check,w,c
  6232  001838  A0D8               	btfss	status,0,c
  6233  00183A  D029               	goto	l453
  6234                           
  6235                           ;clcd.c: 144: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6236  00183C  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6237  001840  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6238  001844  0E00               	movlw	0
  6239  001846  6E1F               	movwf	___wmul@multiplicand+1,c
  6240  001848  0E37               	movlw	55
  6241  00184A  6E1E               	movwf	___wmul@multiplicand,c
  6242  00184C  EC41  F01A         	call	___wmul	;wreg free
  6243  001850  0E96               	movlw	low _clcd_display_string_details
  6244  001852  241C               	addwf	?___wmul,w,c
  6245  001854  6ED9               	movwf	fsr2l,c
  6246  001856  0E02               	movlw	high _clcd_display_string_details
  6247  001858  201D               	addwfc	?___wmul+1,w,c
  6248  00185A  6EDA               	movwf	fsr2h,c
  6249  00185C  503B               	movf	_conflict_data_count,w,c
  6250  00185E  0D02               	mullw	2
  6251  001860  0E50               	movlw	low _conflict_arr
  6252  001862  24F3               	addwf	prodl,w,c
  6253  001864  6EE1               	movwf	fsr1l,c
  6254  001866  0E01               	movlw	high _conflict_arr
  6255  001868  20F4               	addwfc	prodh,w,c
  6256  00186A  6EE2               	movwf	fsr1h,c
  6257  00186C  CFDE FFE6          	movff	postinc2,postinc1
  6258  001870  CFDD FFE5          	movff	postdec2,postdec1
  6259  001874  2A3B               	incf	_conflict_data_count,f,c
  6260                           
  6261                           ;clcd.c: 145: i++;
  6262  001876  0100               	movlb	0	; () banked
  6263  001878  4BC8               	infsnz	conflict_check@i& (0+255),f,b
  6264  00187A  2BC9               	incf	(conflict_check@i+1)& (0+255),f,b
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;clcd.c: 146: printf("ex_sp <= new_sp <=ex_ep\r\n");
  6268  00187C  0E72               	movlw	low STR_7
  6269  00187E  6E22               	movwf	printf@f,c
  6270  001880  0EFD               	movlw	high STR_7
  6271  001882  6E23               	movwf	printf@f+1,c
  6272  001884  EC22  F011         	call	_printf	;wreg free
  6273                           
  6274                           ;clcd.c: 147: conflict = 1;
  6275  001888  0E01               	movlw	1
  6276  00188A  0100               	movlb	0	; () banked
  6277  00188C  D05B               	goto	L3
  6278  00188E                     l453:
  6279                           
  6280                           ;clcd.c: 149: }
  6281                           ;clcd.c: 150: if (new_end_point >= clcd_display_string_details[i].start_point && new_end
      +                          _point <= clcd_display_string_details[i].end_point) {
  6282                           
  6283                           ; BSR set to: 0
  6284  00188E  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6285  001892  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6286  001896  0E00               	movlw	0
  6287  001898  6E1F               	movwf	___wmul@multiplicand+1,c
  6288  00189A  0E37               	movlw	55
  6289  00189C  6E1E               	movwf	___wmul@multiplicand,c
  6290  00189E  EC41  F01A         	call	___wmul	;wreg free
  6291  0018A2  0E2D               	movlw	45
  6292  0018A4  261C               	addwf	?___wmul,f,c
  6293  0018A6  0E00               	movlw	0
  6294  0018A8  221D               	addwfc	?___wmul+1,f,c
  6295  0018AA  0E96               	movlw	low _clcd_display_string_details
  6296  0018AC  241C               	addwf	?___wmul,w,c
  6297  0018AE  6ED9               	movwf	fsr2l,c
  6298  0018B0  0E02               	movlw	high _clcd_display_string_details
  6299  0018B2  201D               	addwfc	?___wmul+1,w,c
  6300  0018B4  6EDA               	movwf	fsr2h,c
  6301  0018B6  50DF               	movf	223,w,c
  6302  0018B8  0B7F               	andlw	127
  6303  0018BA  6E36               	movwf	??_conflict_check& (0+255),c
  6304  0018BC  5036               	movf	??_conflict_check,w,c
  6305  0018BE  5C35               	subwf	conflict_check@new_end_point,w,c
  6306  0018C0  A0D8               	btfss	status,0,c
  6307  0018C2  D042               	goto	l455
  6308  0018C4  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6309  0018C8  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6310  0018CC  0E00               	movlw	0
  6311  0018CE  6E1F               	movwf	___wmul@multiplicand+1,c
  6312  0018D0  0E37               	movlw	55
  6313  0018D2  6E1E               	movwf	___wmul@multiplicand,c
  6314  0018D4  EC41  F01A         	call	___wmul	;wreg free
  6315  0018D8  0E30               	movlw	48
  6316  0018DA  261C               	addwf	?___wmul,f,c
  6317  0018DC  0E00               	movlw	0
  6318  0018DE  221D               	addwfc	?___wmul+1,f,c
  6319  0018E0  0E96               	movlw	low _clcd_display_string_details
  6320  0018E2  241C               	addwf	?___wmul,w,c
  6321  0018E4  6ED9               	movwf	fsr2l,c
  6322  0018E6  0E02               	movlw	high _clcd_display_string_details
  6323  0018E8  201D               	addwfc	?___wmul+1,w,c
  6324  0018EA  6EDA               	movwf	fsr2h,c
  6325  0018EC  50DF               	movf	223,w,c
  6326  0018EE  0B7F               	andlw	127
  6327  0018F0  6E36               	movwf	??_conflict_check& (0+255),c
  6328  0018F2  5035               	movf	conflict_check@new_end_point,w,c
  6329  0018F4  5C36               	subwf	??_conflict_check,w,c
  6330  0018F6  A0D8               	btfss	status,0,c
  6331  0018F8  D027               	goto	l455
  6332                           
  6333                           ;clcd.c: 151: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6334  0018FA  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6335  0018FE  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6336  001902  0E00               	movlw	0
  6337  001904  6E1F               	movwf	___wmul@multiplicand+1,c
  6338  001906  0E37               	movlw	55
  6339  001908  6E1E               	movwf	___wmul@multiplicand,c
  6340  00190A  EC41  F01A         	call	___wmul	;wreg free
  6341  00190E  0E96               	movlw	low _clcd_display_string_details
  6342  001910  241C               	addwf	?___wmul,w,c
  6343  001912  6ED9               	movwf	fsr2l,c
  6344  001914  0E02               	movlw	high _clcd_display_string_details
  6345  001916  201D               	addwfc	?___wmul+1,w,c
  6346  001918  6EDA               	movwf	fsr2h,c
  6347  00191A  503B               	movf	_conflict_data_count,w,c
  6348  00191C  0D02               	mullw	2
  6349  00191E  0E50               	movlw	low _conflict_arr
  6350  001920  24F3               	addwf	prodl,w,c
  6351  001922  6EE1               	movwf	fsr1l,c
  6352  001924  0E01               	movlw	high _conflict_arr
  6353  001926  20F4               	addwfc	prodh,w,c
  6354  001928  6EE2               	movwf	fsr1h,c
  6355  00192A  CFDE FFE6          	movff	postinc2,postinc1
  6356  00192E  CFDD FFE5          	movff	postdec2,postdec1
  6357  001932  2A3B               	incf	_conflict_data_count,f,c
  6358                           
  6359                           ;clcd.c: 152: printf("ex_sp <= new_ep <=ex_ep\r\n");
  6360  001934  0E58               	movlw	low STR_8
  6361  001936  6E22               	movwf	printf@f,c
  6362  001938  0EFD               	movlw	high STR_8
  6363  00193A  6E23               	movwf	printf@f+1,c
  6364  00193C  EC22  F011         	call	_printf	;wreg free
  6365  001940  D056               	goto	l6587
  6366  001942                     l6577:
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;clcd.c: 154: conflict = 1;
  6370  001942  0E01               	movlw	1
  6371  001944                     L3:
  6372  001944  6FC7               	movwf	conflict_check@conflict& (0+255),b
  6373                           
  6374                           ;clcd.c: 155: continue;
  6375  001946  D05A               	goto	l454
  6376  001948                     l455:
  6377                           
  6378                           ;clcd.c: 156: }
  6379                           ;clcd.c: 157: if (new_start_point <= clcd_display_string_details[i].start_point && new_e
      +                          nd_point >= clcd_display_string_details[i].end_point) {
  6380                           
  6381                           ; BSR set to: 0
  6382  001948  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6383  00194C  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6384  001950  0E00               	movlw	0
  6385  001952  6E1F               	movwf	___wmul@multiplicand+1,c
  6386  001954  0E37               	movlw	55
  6387  001956  6E1E               	movwf	___wmul@multiplicand,c
  6388  001958  EC41  F01A         	call	___wmul	;wreg free
  6389  00195C  0E2D               	movlw	45
  6390  00195E  261C               	addwf	?___wmul,f,c
  6391  001960  0E00               	movlw	0
  6392  001962  221D               	addwfc	?___wmul+1,f,c
  6393  001964  0E96               	movlw	low _clcd_display_string_details
  6394  001966  241C               	addwf	?___wmul,w,c
  6395  001968  6ED9               	movwf	fsr2l,c
  6396  00196A  0E02               	movlw	high _clcd_display_string_details
  6397  00196C  201D               	addwfc	?___wmul+1,w,c
  6398  00196E  6EDA               	movwf	fsr2h,c
  6399  001970  50DF               	movf	223,w,c
  6400  001972  0B7F               	andlw	127
  6401  001974  6E36               	movwf	??_conflict_check& (0+255),c
  6402  001976  5034               	movf	conflict_check@new_start_point,w,c
  6403  001978  5C36               	subwf	??_conflict_check,w,c
  6404  00197A  A0D8               	btfss	status,0,c
  6405  00197C  D03C               	goto	l456
  6406  00197E  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6407  001982  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6408  001986  0E00               	movlw	0
  6409  001988  6E1F               	movwf	___wmul@multiplicand+1,c
  6410  00198A  0E37               	movlw	55
  6411  00198C  6E1E               	movwf	___wmul@multiplicand,c
  6412  00198E  EC41  F01A         	call	___wmul	;wreg free
  6413  001992  0E30               	movlw	48
  6414  001994  261C               	addwf	?___wmul,f,c
  6415  001996  0E00               	movlw	0
  6416  001998  221D               	addwfc	?___wmul+1,f,c
  6417  00199A  0E96               	movlw	low _clcd_display_string_details
  6418  00199C  241C               	addwf	?___wmul,w,c
  6419  00199E  6ED9               	movwf	fsr2l,c
  6420  0019A0  0E02               	movlw	high _clcd_display_string_details
  6421  0019A2  201D               	addwfc	?___wmul+1,w,c
  6422  0019A4  6EDA               	movwf	fsr2h,c
  6423  0019A6  50DF               	movf	223,w,c
  6424  0019A8  0B7F               	andlw	127
  6425  0019AA  6E36               	movwf	??_conflict_check& (0+255),c
  6426  0019AC  5036               	movf	??_conflict_check,w,c
  6427  0019AE  5C35               	subwf	conflict_check@new_end_point,w,c
  6428  0019B0  A0D8               	btfss	status,0,c
  6429  0019B2  D021               	goto	l456
  6430                           
  6431                           ;clcd.c: 158: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6432  0019B4  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6433  0019B8  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6434  0019BC  0E00               	movlw	0
  6435  0019BE  6E1F               	movwf	___wmul@multiplicand+1,c
  6436  0019C0  0E37               	movlw	55
  6437  0019C2  6E1E               	movwf	___wmul@multiplicand,c
  6438  0019C4  EC41  F01A         	call	___wmul	;wreg free
  6439  0019C8  0E96               	movlw	low _clcd_display_string_details
  6440  0019CA  241C               	addwf	?___wmul,w,c
  6441  0019CC  6ED9               	movwf	fsr2l,c
  6442  0019CE  0E02               	movlw	high _clcd_display_string_details
  6443  0019D0  201D               	addwfc	?___wmul+1,w,c
  6444  0019D2  6EDA               	movwf	fsr2h,c
  6445  0019D4  503B               	movf	_conflict_data_count,w,c
  6446  0019D6  0D02               	mullw	2
  6447  0019D8  0E50               	movlw	low _conflict_arr
  6448  0019DA  24F3               	addwf	prodl,w,c
  6449  0019DC  6EE1               	movwf	fsr1l,c
  6450  0019DE  0E01               	movlw	high _conflict_arr
  6451  0019E0  20F4               	addwfc	prodh,w,c
  6452  0019E2  6EE2               	movwf	fsr1h,c
  6453  0019E4  CFDE FFE6          	movff	postinc2,postinc1
  6454  0019E8  CFDD FFE5          	movff	postdec2,postdec1
  6455  0019EC  2A3B               	incf	_conflict_data_count,f,c
  6456  0019EE                     l6587:
  6457                           
  6458                           ;clcd.c: 159: i++;
  6459  0019EE  0100               	movlb	0	; () banked
  6460  0019F0  4BC8               	infsnz	conflict_check@i& (0+255),f,b
  6461  0019F2  2BC9               	incf	(conflict_check@i+1)& (0+255),f,b
  6462  0019F4  D7A6               	goto	l6577
  6463  0019F6                     l456:
  6464                           
  6465                           ;clcd.c: 162: }
  6466                           ;clcd.c: 163: }
  6467                           ;clcd.c: 164: i++;
  6468                           
  6469                           ; BSR set to: 0
  6470                           
  6471                           ; BSR set to: 0
  6472  0019F6  0100               	movlb	0	; () banked
  6473  0019F8  4BC8               	infsnz	conflict_check@i& (0+255),f,b
  6474  0019FA  2BC9               	incf	(conflict_check@i+1)& (0+255),f,b
  6475  0019FC                     l454:
  6476                           
  6477                           ; BSR set to: 0
  6478                           
  6479                           ; BSR set to: 0
  6480                           
  6481                           ; BSR set to: 0
  6482  0019FC  5048               	movf	_clcd_config_data+4,w,c
  6483  0019FE  6E36               	movwf	??_conflict_check& (0+255),c
  6484  001A00  6A37               	clrf	(??_conflict_check+1)& (0+255),c
  6485  001A02  5036               	movf	??_conflict_check,w,c
  6486  001A04  5DC8               	subwf	conflict_check@i& (0+255),w,b
  6487  001A06  51C9               	movf	(conflict_check@i+1)& (0+255),w,b
  6488  001A08  0A80               	xorlw	128
  6489  001A0A  6E38               	movwf	(??_conflict_check+2)& (0+255),c
  6490  001A0C  5037               	movf	??_conflict_check+1,w,c
  6491  001A0E  0A80               	xorlw	128
  6492  001A10  5838               	subwfb	(??_conflict_check+2)& (0+255),w,c
  6493  001A12  A0D8               	btfss	status,0,c
  6494  001A14  D6BF               	goto	l451
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;clcd.c: 165: }
  6498                           ;clcd.c: 173: return conflict;
  6499                           
  6500                           ; BSR set to: 0
  6501  001A16  51C7               	movf	conflict_check@conflict& (0+255),w,b
  6502  001A18  0012               	return	
  6503  001A1A                     __end_of_conflict_check:
  6504                           	opt stack 0
  6505                           tblptru	equ	0xFF8
  6506                           tblptrh	equ	0xFF7
  6507                           tblptrl	equ	0xFF6
  6508                           tablat	equ	0xFF5
  6509                           prodh	equ	0xFF4
  6510                           prodl	equ	0xFF3
  6511                           intcon	equ	0xFF2
  6512                           postinc0	equ	0xFEE
  6513                           wreg	equ	0xFE8
  6514                           indf1	equ	0xFE7
  6515                           postinc1	equ	0xFE6
  6516                           postdec1	equ	0xFE5
  6517                           fsr1h	equ	0xFE2
  6518                           fsr1l	equ	0xFE1
  6519                           indf2	equ	0xFDF
  6520                           postinc2	equ	0xFDE
  6521                           postdec2	equ	0xFDD
  6522                           fsr2h	equ	0xFDA
  6523                           fsr2l	equ	0xFD9
  6524                           status	equ	0xFD8
  6525                           
  6526 ;; *************** function _puts *****************
  6527 ;; Defined at:
  6528 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\puts.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;  s               2   23[COMRAM] PTR const unsigned char 
  6531 ;;		 -> STR_130(12), STR_129(12), STR_84(5), 
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;		None
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  2   23[COMRAM] int 
  6536 ;; Registers used:
  6537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6546 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;Total ram usage:        2 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    8
  6550 ;; This function calls:
  6551 ;;		_cputs
  6552 ;;		_putch
  6553 ;; This function is called by:
  6554 ;;		_reply_to_host
  6555 ;;		_cmd_consol_task
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           	psect	text16
  6560  0035F0                     __ptext16:
  6561                           	opt stack 0
  6562  0035F0                     _puts:
  6563                           	opt stack 20
  6564                           
  6565                           ; BSR set to: 0
  6566                           ;incstack = 0
  6567  0035F0  C018  F016         	movff	puts@s,cputs@s
  6568  0035F4  C019  F017         	movff	puts@s+1,cputs@s+1
  6569  0035F8  ECD2  F019         	call	_cputs	;wreg free
  6570  0035FC  0E0A               	movlw	10
  6571  0035FE  EC61  F01B         	call	_putch
  6572  003602  0012               	return		;funcret
  6573  003604                     __end_of_puts:
  6574                           	opt stack 0
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodh	equ	0xFF4
  6580                           prodl	equ	0xFF3
  6581                           intcon	equ	0xFF2
  6582                           postinc0	equ	0xFEE
  6583                           wreg	equ	0xFE8
  6584                           indf1	equ	0xFE7
  6585                           postinc1	equ	0xFE6
  6586                           postdec1	equ	0xFE5
  6587                           fsr1h	equ	0xFE2
  6588                           fsr1l	equ	0xFE1
  6589                           indf2	equ	0xFDF
  6590                           postinc2	equ	0xFDE
  6591                           postdec2	equ	0xFDD
  6592                           fsr2h	equ	0xFDA
  6593                           fsr2l	equ	0xFD9
  6594                           status	equ	0xFD8
  6595                           
  6596 ;; *************** function _cputs *****************
  6597 ;; Defined at:
  6598 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\cputs.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  s               2   21[COMRAM] PTR const unsigned char 
  6601 ;;		 -> STR_130(12), STR_129(12), STR_84(5), 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;		None
  6604 ;; Return value:  Size  Location     Type
  6605 ;;                  1    wreg      void 
  6606 ;; Registers used:
  6607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6613 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;Total ram usage:        2 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    7
  6620 ;; This function calls:
  6621 ;;		_putch
  6622 ;; This function is called by:
  6623 ;;		_puts
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text17
  6628  0033A4                     __ptext17:
  6629                           	opt stack 0
  6630  0033A4                     _cputs:
  6631                           	opt stack 20
  6632                           
  6633                           ;incstack = 0
  6634  0033A4  D00B               	goto	l1758
  6635  0033A6  C016  FFF6         	movff	cputs@s,tblptrl
  6636  0033AA  C017  FFF7         	movff	cputs@s+1,tblptrh
  6637  0033AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6638  0033AE  6AF8               	clrf	tblptru,c
  6639  0033B0                     	endif
  6640  0033B0                     	if	0	;tblptru may be non-zero
  6641  0033B0                     	endif
  6642  0033B0  0008               	tblrd		*
  6643  0033B2  50F5               	movf	tablat,w,c
  6644  0033B4  EC61  F01B         	call	_putch
  6645  0033B8  4A16               	infsnz	cputs@s,f,c
  6646  0033BA  2A17               	incf	cputs@s+1,f,c
  6647  0033BC                     l1758:
  6648  0033BC  C016  FFF6         	movff	cputs@s,tblptrl
  6649  0033C0  C017  FFF7         	movff	cputs@s+1,tblptrh
  6650  0033C4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6651  0033C4  6AF8               	clrf	tblptru,c
  6652  0033C6                     	endif
  6653  0033C6                     	if	0	;tblptru may be non-zero
  6654  0033C6                     	endif
  6655  0033C6  0008               	tblrd		*
  6656  0033C8  50F5               	movf	tablat,w,c
  6657  0033CA  0900               	iorlw	0
  6658  0033CC  B4D8               	btfsc	status,2,c
  6659  0033CE  0012               	return	
  6660  0033D0  D7EA               	goto	l1759
  6661  0033D2                     __end_of_cputs:
  6662                           	opt stack 0
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           prodh	equ	0xFF4
  6668                           prodl	equ	0xFF3
  6669                           intcon	equ	0xFF2
  6670                           postinc0	equ	0xFEE
  6671                           wreg	equ	0xFE8
  6672                           indf1	equ	0xFE7
  6673                           postinc1	equ	0xFE6
  6674                           postdec1	equ	0xFE5
  6675                           fsr1h	equ	0xFE2
  6676                           fsr1l	equ	0xFE1
  6677                           indf2	equ	0xFDF
  6678                           postinc2	equ	0xFDE
  6679                           postdec2	equ	0xFDD
  6680                           fsr2h	equ	0xFDA
  6681                           fsr2l	equ	0xFD9
  6682                           status	equ	0xFD8
  6683                           
  6684 ;; *************** function _min_uid_range *****************
  6685 ;; Defined at:
  6686 ;;		line 89 in file "clcd.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;		None
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      unsigned char 
  6693 ;; Registers used:
  6694 ;;		wreg, status,2
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6704 ;;Total ram usage:        0 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    5
  6707 ;; This function calls:
  6708 ;;		Nothing
  6709 ;; This function is called by:
  6710 ;;		_reply_to_host
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text18
  6715  003636                     __ptext18:
  6716                           	opt stack 0
  6717  003636                     _min_uid_range:
  6718                           	opt stack 23
  6719                           
  6720                           ;clcd.c: 90: if (clcd_config_data.init_done == 0)
  6721                           
  6722                           ;incstack = 0
  6723  003636  5044               	movf	_clcd_config_data,w,c
  6724  003638  A4D8               	btfss	status,2,c
  6725  00363A  D002               	goto	l424
  6726                           
  6727                           ;clcd.c: 91: return 0;
  6728  00363C  0E00               	movlw	0
  6729  00363E  0012               	return	
  6730  003640                     l424:
  6731                           
  6732                           ;clcd.c: 92: else
  6733                           ;clcd.c: 93: return 'A';
  6734  003640  0E41               	movlw	65
  6735  003642  0012               	return	
  6736  003644                     __end_of_min_uid_range:
  6737                           	opt stack 0
  6738                           tblptru	equ	0xFF8
  6739                           tblptrh	equ	0xFF7
  6740                           tblptrl	equ	0xFF6
  6741                           tablat	equ	0xFF5
  6742                           prodh	equ	0xFF4
  6743                           prodl	equ	0xFF3
  6744                           intcon	equ	0xFF2
  6745                           postinc0	equ	0xFEE
  6746                           wreg	equ	0xFE8
  6747                           indf1	equ	0xFE7
  6748                           postinc1	equ	0xFE6
  6749                           postdec1	equ	0xFE5
  6750                           fsr1h	equ	0xFE2
  6751                           fsr1l	equ	0xFE1
  6752                           indf2	equ	0xFDF
  6753                           postinc2	equ	0xFDE
  6754                           postdec2	equ	0xFDD
  6755                           fsr2h	equ	0xFDA
  6756                           fsr2l	equ	0xFD9
  6757                           status	equ	0xFD8
  6758                           
  6759 ;; *************** function _max_uid_range *****************
  6760 ;; Defined at:
  6761 ;;		line 96 in file "clcd.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;		None
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;		None
  6766 ;; Return value:  Size  Location     Type
  6767 ;;                  1    wreg      unsigned char 
  6768 ;; Registers used:
  6769 ;;		wreg, status,2, status,0
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6779 ;;Total ram usage:        0 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; Hardware stack levels required when called:    5
  6782 ;; This function calls:
  6783 ;;		Nothing
  6784 ;; This function is called by:
  6785 ;;		_reply_to_host
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           	psect	text19
  6790  003644                     __ptext19:
  6791                           	opt stack 0
  6792  003644                     _max_uid_range:
  6793                           	opt stack 23
  6794                           
  6795                           ;clcd.c: 97: if (clcd_config_data.init_done == 0)
  6796                           
  6797                           ;incstack = 0
  6798  003644  5044               	movf	_clcd_config_data,w,c
  6799  003646  A4D8               	btfss	status,2,c
  6800  003648  D002               	goto	l429
  6801                           
  6802                           ;clcd.c: 98: return 0;
  6803  00364A  0E00               	movlw	0
  6804  00364C  0012               	return	
  6805  00364E                     l429:
  6806                           
  6807                           ;clcd.c: 99: else
  6808                           ;clcd.c: 100: return clcd_config_data.uid_range - 1;
  6809  00364E  0447               	decf	_clcd_config_data+3,w,c
  6810  003650  0012               	return	
  6811  003652                     __end_of_max_uid_range:
  6812                           	opt stack 0
  6813                           tblptru	equ	0xFF8
  6814                           tblptrh	equ	0xFF7
  6815                           tblptrl	equ	0xFF6
  6816                           tablat	equ	0xFF5
  6817                           prodh	equ	0xFF4
  6818                           prodl	equ	0xFF3
  6819                           intcon	equ	0xFF2
  6820                           postinc0	equ	0xFEE
  6821                           wreg	equ	0xFE8
  6822                           indf1	equ	0xFE7
  6823                           postinc1	equ	0xFE6
  6824                           postdec1	equ	0xFE5
  6825                           fsr1h	equ	0xFE2
  6826                           fsr1l	equ	0xFE1
  6827                           indf2	equ	0xFDF
  6828                           postinc2	equ	0xFDE
  6829                           postdec2	equ	0xFDD
  6830                           fsr2h	equ	0xFDA
  6831                           fsr2l	equ	0xFD9
  6832                           status	equ	0xFD8
  6833                           
  6834 ;; *************** function _max_display_support *****************
  6835 ;; Defined at:
  6836 ;;		line 103 in file "clcd.c"
  6837 ;; Parameters:    Size  Location     Type
  6838 ;;		None
  6839 ;; Auto vars:     Size  Location     Type
  6840 ;;		None
  6841 ;; Return value:  Size  Location     Type
  6842 ;;                  2   19[COMRAM] PTR unsigned char 
  6843 ;; Registers used:
  6844 ;;		wreg, status,2, status,0
  6845 ;; Tracked objects:
  6846 ;;		On entry : 0/0
  6847 ;;		On exit  : 0/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6850 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;Total ram usage:        2 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; Hardware stack levels required when called:    5
  6857 ;; This function calls:
  6858 ;;		Nothing
  6859 ;; This function is called by:
  6860 ;;		_reply_to_host
  6861 ;; This function uses a non-reentrant model
  6862 ;;
  6863                           
  6864                           	psect	text20
  6865  0036AE                     __ptext20:
  6866                           	opt stack 0
  6867  0036AE                     _max_display_support:
  6868                           	opt stack 23
  6869                           
  6870                           ;clcd.c: 104: return "4,20";
  6871                           
  6872                           ;incstack = 0
  6873  0036AE  0EE8               	movlw	low STR_5
  6874  0036B0  6E14               	movwf	?_max_display_support,c
  6875  0036B2  0EFF               	movlw	high STR_5
  6876  0036B4  6E15               	movwf	?_max_display_support+1,c
  6877  0036B6  0012               	return	
  6878  0036B8                     __end_of_max_display_support:
  6879                           	opt stack 0
  6880                           tblptru	equ	0xFF8
  6881                           tblptrh	equ	0xFF7
  6882                           tblptrl	equ	0xFF6
  6883                           tablat	equ	0xFF5
  6884                           prodh	equ	0xFF4
  6885                           prodl	equ	0xFF3
  6886                           intcon	equ	0xFF2
  6887                           postinc0	equ	0xFEE
  6888                           wreg	equ	0xFE8
  6889                           indf1	equ	0xFE7
  6890                           postinc1	equ	0xFE6
  6891                           postdec1	equ	0xFE5
  6892                           fsr1h	equ	0xFE2
  6893                           fsr1l	equ	0xFE1
  6894                           indf2	equ	0xFDF
  6895                           postinc2	equ	0xFDE
  6896                           postdec2	equ	0xFDD
  6897                           fsr2h	equ	0xFDA
  6898                           fsr2l	equ	0xFD9
  6899                           status	equ	0xFD8
  6900                           
  6901 ;; *************** function _max_display_str *****************
  6902 ;; Defined at:
  6903 ;;		line 82 in file "clcd.c"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;		None
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;		None
  6908 ;; Return value:  Size  Location     Type
  6909 ;;                  1    wreg      unsigned char 
  6910 ;; Registers used:
  6911 ;;		wreg, status,2
  6912 ;; Tracked objects:
  6913 ;;		On entry : 0/0
  6914 ;;		On exit  : 0/0
  6915 ;;		Unchanged: 0/0
  6916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6921 ;;Total ram usage:        0 bytes
  6922 ;; Hardware stack levels used:    1
  6923 ;; Hardware stack levels required when called:    5
  6924 ;; This function calls:
  6925 ;;		Nothing
  6926 ;; This function is called by:
  6927 ;;		_reply_to_host
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           	psect	text21
  6932  003652                     __ptext21:
  6933                           	opt stack 0
  6934  003652                     _max_display_str:
  6935                           	opt stack 23
  6936                           
  6937                           ;clcd.c: 83: if (clcd_config_data.init_done == 0)
  6938                           
  6939                           ;incstack = 0
  6940  003652  5044               	movf	_clcd_config_data,w,c
  6941  003654  A4D8               	btfss	status,2,c
  6942  003656  D002               	goto	l419
  6943                           
  6944                           ;clcd.c: 84: return 0;
  6945  003658  0E00               	movlw	0
  6946  00365A  0012               	return	
  6947  00365C                     l419:
  6948                           
  6949                           ;clcd.c: 85: else
  6950                           ;clcd.c: 86: return clcd_config_data.clcd_max_display_string;
  6951  00365C  5048               	movf	_clcd_config_data+4,w,c
  6952  00365E  0012               	return	
  6953  003660                     __end_of_max_display_str:
  6954                           	opt stack 0
  6955                           tblptru	equ	0xFF8
  6956                           tblptrh	equ	0xFF7
  6957                           tblptrl	equ	0xFF6
  6958                           tablat	equ	0xFF5
  6959                           prodh	equ	0xFF4
  6960                           prodl	equ	0xFF3
  6961                           intcon	equ	0xFF2
  6962                           postinc0	equ	0xFEE
  6963                           wreg	equ	0xFE8
  6964                           indf1	equ	0xFE7
  6965                           postinc1	equ	0xFE6
  6966                           postdec1	equ	0xFE5
  6967                           fsr1h	equ	0xFE2
  6968                           fsr1l	equ	0xFE1
  6969                           indf2	equ	0xFDF
  6970                           postinc2	equ	0xFDE
  6971                           postdec2	equ	0xFDD
  6972                           fsr2h	equ	0xFDA
  6973                           fsr2l	equ	0xFD9
  6974                           status	equ	0xFD8
  6975                           
  6976 ;; *************** function _init_clcd_cusotom_lcd *****************
  6977 ;; Defined at:
  6978 ;;		line 50 in file "clcd.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;  clcd_init_ro    1    wreg     unsigned char 
  6981 ;;  clcd_init_co    1   51[COMRAM] unsigned char 
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;  clcd_init_ro    1   52[COMRAM] unsigned char 
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  1    wreg      void 
  6986 ;; Registers used:
  6987 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6993 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;Total ram usage:        2 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:   11
  7000 ;; This function calls:
  7001 ;;		___awdiv
  7002 ;;		___wmul
  7003 ;;		_init_CLCD_config
  7004 ;;		_memset
  7005 ;;		_printf
  7006 ;; This function is called by:
  7007 ;;		_reply_to_host
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           	psect	text22
  7012  002578                     __ptext22:
  7013                           	opt stack 0
  7014  002578                     _init_clcd_cusotom_lcd:
  7015                           	opt stack 17
  7016                           
  7017                           ;incstack = 0
  7018                           ;init_clcd_cusotom_lcd@clcd_init_row stored from wreg
  7019  002578  6E35               	movwf	init_clcd_cusotom_lcd@clcd_init_row,c
  7020                           
  7021                           ;clcd.c: 51: init_CLCD_config();
  7022  00257A  EC48  F014         	call	_init_CLCD_config	;wreg free
  7023                           
  7024                           ;clcd.c: 52: data_count = 0;
  7025  00257E  0E00               	movlw	0
  7026  002580  6E3C               	movwf	_data_count,c
  7027                           
  7028                           ;clcd.c: 53: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details)
      +                          );
  7029  002582  0E96               	movlw	low _clcd_display_string_details
  7030  002584  6E28               	movwf	memset@p1,c
  7031  002586  0E02               	movlw	high _clcd_display_string_details
  7032  002588  6E29               	movwf	memset@p1+1,c
  7033  00258A  0E00               	movlw	0
  7034  00258C  6E2B               	movwf	memset@c+1,c
  7035  00258E  0E00               	movlw	0
  7036  002590  6E2A               	movwf	memset@c,c
  7037  002592  0E04               	movlw	4
  7038  002594  6E2D               	movwf	memset@n+1,c
  7039  002596  0E4C               	movlw	76
  7040  002598  6E2C               	movwf	memset@n,c
  7041  00259A  EC00  F01A         	call	_memset	;wreg free
  7042                           
  7043                           ;clcd.c: 54: memset(conflict_arr, 0, sizeof (conflict_arr));
  7044  00259E  0E50               	movlw	low _conflict_arr
  7045  0025A0  6E28               	movwf	memset@p1,c
  7046  0025A2  0E01               	movlw	high _conflict_arr
  7047  0025A4  6E29               	movwf	memset@p1+1,c
  7048  0025A6  0E00               	movlw	0
  7049  0025A8  6E2B               	movwf	memset@c+1,c
  7050  0025AA  0E00               	movlw	0
  7051  0025AC  6E2A               	movwf	memset@c,c
  7052  0025AE  0E00               	movlw	0
  7053  0025B0  6E2D               	movwf	memset@n+1,c
  7054  0025B2  0E28               	movlw	40
  7055  0025B4  6E2C               	movwf	memset@n,c
  7056  0025B6  EC00  F01A         	call	_memset	;wreg free
  7057                           
  7058                           ;clcd.c: 55: clcd_config_data.init_done = 1;
  7059  0025BA  0E01               	movlw	1
  7060  0025BC  6E44               	movwf	_clcd_config_data,c
  7061                           
  7062                           ;clcd.c: 56: printf("row = %d", clcd_init_row);
  7063  0025BE  0E71               	movlw	low STR_1
  7064  0025C0  6E22               	movwf	printf@f,c
  7065  0025C2  0EFF               	movlw	high STR_1
  7066  0025C4  6E23               	movwf	printf@f+1,c
  7067  0025C6  C035  F024         	movff	init_clcd_cusotom_lcd@clcd_init_row,?_printf+2
  7068  0025CA  6A25               	clrf	?_printf+3,c
  7069  0025CC  EC22  F011         	call	_printf	;wreg free
  7070                           
  7071                           ;clcd.c: 57: clcd_config_data.clcd_max_row = clcd_init_row;
  7072  0025D0  C035  F045         	movff	init_clcd_cusotom_lcd@clcd_init_row,_clcd_config_data+1
  7073                           
  7074                           ;clcd.c: 58: printf("col = %d", clcd_init_col);
  7075  0025D4  0E68               	movlw	low STR_2
  7076  0025D6  6E22               	movwf	printf@f,c
  7077  0025D8  0EFF               	movlw	high STR_2
  7078  0025DA  6E23               	movwf	printf@f+1,c
  7079  0025DC  C034  F024         	movff	init_clcd_cusotom_lcd@clcd_init_col,?_printf+2
  7080  0025E0  6A25               	clrf	?_printf+3,c
  7081  0025E2  EC22  F011         	call	_printf	;wreg free
  7082                           
  7083                           ;clcd.c: 59: clcd_config_data.clcd_max_col = clcd_init_col;
  7084  0025E6  C034  F046         	movff	init_clcd_cusotom_lcd@clcd_init_col,_clcd_config_data+2
  7085                           
  7086                           ;clcd.c: 60: printf("string_count = %d", (clcd_init_col / 4) * clcd_init_row);
  7087  0025EA  0E08               	movlw	low STR_3
  7088  0025EC  6E22               	movwf	printf@f,c
  7089  0025EE  0EFE               	movlw	high STR_3
  7090  0025F0  6E23               	movwf	printf@f+1,c
  7091  0025F2  0E00               	movlw	0
  7092  0025F4  6E17               	movwf	___awdiv@divisor+1,c
  7093  0025F6  0E04               	movlw	4
  7094  0025F8  6E16               	movwf	___awdiv@divisor,c
  7095  0025FA  C034  F014         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7096  0025FE  6A15               	clrf	___awdiv@dividend+1,c
  7097  002600  ECF1  F015         	call	___awdiv	;wreg free
  7098  002604  C014  F01C         	movff	?___awdiv,___wmul@multiplier
  7099  002608  C015  F01D         	movff	?___awdiv+1,___wmul@multiplier+1
  7100  00260C  C035  F01E         	movff	init_clcd_cusotom_lcd@clcd_init_row,___wmul@multiplicand
  7101  002610  6A1F               	clrf	___wmul@multiplicand+1,c
  7102  002612  EC41  F01A         	call	___wmul	;wreg free
  7103  002616  C01C  F024         	movff	?___wmul,?_printf+2
  7104  00261A  C01D  F025         	movff	?___wmul+1,?_printf+3
  7105  00261E  EC22  F011         	call	_printf	;wreg free
  7106                           
  7107                           ;clcd.c: 61: clcd_config_data.clcd_max_display_string = (clcd_init_col / 4) * clcd_init_
      +                          row;
  7108  002622  C034  F014         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7109  002626  6A15               	clrf	___awdiv@dividend+1,c
  7110  002628  0E00               	movlw	0
  7111  00262A  6E17               	movwf	___awdiv@divisor+1,c
  7112  00262C  0E04               	movlw	4
  7113  00262E  6E16               	movwf	___awdiv@divisor,c
  7114  002630  ECF1  F015         	call	___awdiv	;wreg free
  7115  002634  5014               	movf	?___awdiv,w,c
  7116  002636  0235               	mulwf	init_clcd_cusotom_lcd@clcd_init_row,c
  7117  002638  CFF3 F048          	movff	prodl,_clcd_config_data+4
  7118                           
  7119                           ;clcd.c: 62: clcd_config_data.uid_range = 'A' + clcd_config_data.clcd_max_display_string
      +                          ;
  7120  00263C  5048               	movf	_clcd_config_data+4,w,c
  7121  00263E  0F41               	addlw	65
  7122  002640  6E47               	movwf	_clcd_config_data+3,c
  7123                           
  7124                           ;clcd.c: 63: printf("uid_range = %d\r\n", clcd_config_data.uid_range);
  7125  002642  0E2B               	movlw	low STR_4
  7126  002644  6E22               	movwf	printf@f,c
  7127  002646  0EFE               	movlw	high STR_4
  7128  002648  6E23               	movwf	printf@f+1,c
  7129  00264A  C047  F024         	movff	_clcd_config_data+3,?_printf+2
  7130  00264E  6A25               	clrf	?_printf+3,c
  7131  002650  EC22  F011         	call	_printf	;wreg free
  7132  002654  0012               	return		;funcret
  7133  002656                     __end_of_init_clcd_cusotom_lcd:
  7134                           	opt stack 0
  7135                           tblptru	equ	0xFF8
  7136                           tblptrh	equ	0xFF7
  7137                           tblptrl	equ	0xFF6
  7138                           tablat	equ	0xFF5
  7139                           prodh	equ	0xFF4
  7140                           prodl	equ	0xFF3
  7141                           intcon	equ	0xFF2
  7142                           postinc0	equ	0xFEE
  7143                           wreg	equ	0xFE8
  7144                           indf1	equ	0xFE7
  7145                           postinc1	equ	0xFE6
  7146                           postdec1	equ	0xFE5
  7147                           fsr1h	equ	0xFE2
  7148                           fsr1l	equ	0xFE1
  7149                           indf2	equ	0xFDF
  7150                           postinc2	equ	0xFDE
  7151                           postdec2	equ	0xFDD
  7152                           fsr2h	equ	0xFDA
  7153                           fsr2l	equ	0xFD9
  7154                           status	equ	0xFD8
  7155                           
  7156 ;; *************** function _init_CLCD_config *****************
  7157 ;; Defined at:
  7158 ;;		line 16 in file "clcd.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;		None
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;		None
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  1    wreg      void 
  7165 ;; Registers used:
  7166 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;Total ram usage:        0 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:   10
  7179 ;; This function calls:
  7180 ;;		__delay_MS
  7181 ;;		_clcd_display_string_config
  7182 ;;		_memset
  7183 ;;		_reset_clcd
  7184 ;;		_write_lcd_cmd
  7185 ;; This function is called by:
  7186 ;;		_init_clcd_cusotom_lcd
  7187 ;;		_init_clcd_lcd_16x2
  7188 ;;		_init_clcd_lcd_20x4
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           	psect	text23
  7193  002890                     __ptext23:
  7194                           	opt stack 0
  7195  002890                     _init_CLCD_config:
  7196                           	opt stack 17
  7197                           
  7198                           ;clcd.c: 17: memset(&clcd_config_data, 0, sizeof (CLCD_CONFIG_DATA));
  7199                           
  7200                           ;incstack = 0
  7201  002890  0E44               	movlw	low _clcd_config_data
  7202  002892  6E28               	movwf	memset@p1,c
  7203  002894  0E00               	movlw	high _clcd_config_data
  7204  002896  6E29               	movwf	memset@p1+1,c
  7205  002898  0E00               	movlw	0
  7206  00289A  6E2B               	movwf	memset@c+1,c
  7207  00289C  0E00               	movlw	0
  7208  00289E  6E2A               	movwf	memset@c,c
  7209  0028A0  0E00               	movlw	0
  7210  0028A2  6E2D               	movwf	memset@n+1,c
  7211  0028A4  0E05               	movlw	5
  7212  0028A6  6E2C               	movwf	memset@n,c
  7213  0028A8  EC00  F01A         	call	_memset	;wreg free
  7214                           
  7215                           ;clcd.c: 19: TRISD = 0x00;
  7216  0028AC  0E00               	movlw	0
  7217  0028AE  6E95               	movwf	3989,c	;volatile
  7218                           
  7219                           ;clcd.c: 22: TRISA = (unsigned char) (TRISA | 0xF0);
  7220  0028B0  5092               	movf	3986,w,c	;volatile
  7221  0028B2  09F0               	iorlw	240
  7222  0028B4  6E92               	movwf	3986,c	;volatile
  7223                           
  7224                           ;clcd.c: 24: PORTAbits.RA0 = 0;
  7225  0028B6  9080               	bcf	3968,0,c	;volatile
  7226                           
  7227                           ;clcd.c: 25: _delay_MS(250);
  7228  0028B8  0E00               	movlw	0
  7229  0028BA  6E15               	movwf	__delay_MS@delay+1,c
  7230  0028BC  0EFA               	movlw	250
  7231  0028BE  6E14               	movwf	__delay_MS@delay,c
  7232  0028C0  EC8D  F018         	call	__delay_MS	;wreg free
  7233                           
  7234                           ;clcd.c: 28: write_lcd_cmd(0X38);
  7235  0028C4  0E38               	movlw	56
  7236  0028C6  ECD1  F01A         	call	_write_lcd_cmd
  7237                           
  7238                           ;clcd.c: 29: _delay_MS(250);
  7239  0028CA  0E00               	movlw	0
  7240  0028CC  6E15               	movwf	__delay_MS@delay+1,c
  7241  0028CE  0EFA               	movlw	250
  7242  0028D0  6E14               	movwf	__delay_MS@delay,c
  7243  0028D2  EC8D  F018         	call	__delay_MS	;wreg free
  7244                           
  7245                           ;clcd.c: 31: write_lcd_cmd(0x0E);;
  7246  0028D6  0E0E               	movlw	14
  7247  0028D8  ECD1  F01A         	call	_write_lcd_cmd
  7248                           
  7249                           ;clcd.c: 32: _delay_MS(250);
  7250  0028DC  0E00               	movlw	0
  7251  0028DE  6E15               	movwf	__delay_MS@delay+1,c
  7252  0028E0  0EFA               	movlw	250
  7253  0028E2  6E14               	movwf	__delay_MS@delay,c
  7254  0028E4  EC8D  F018         	call	__delay_MS	;wreg free
  7255                           
  7256                           ;clcd.c: 34: write_lcd_cmd(0x01);;
  7257  0028E8  0E01               	movlw	1
  7258  0028EA  ECD1  F01A         	call	_write_lcd_cmd
  7259                           
  7260                           ;clcd.c: 35: _delay_MS(250);
  7261  0028EE  0E00               	movlw	0
  7262  0028F0  6E15               	movwf	__delay_MS@delay+1,c
  7263  0028F2  0EFA               	movlw	250
  7264  0028F4  6E14               	movwf	__delay_MS@delay,c
  7265  0028F6  EC8D  F018         	call	__delay_MS	;wreg free
  7266                           
  7267                           ;clcd.c: 37: write_lcd_cmd(0x06);;
  7268  0028FA  0E06               	movlw	6
  7269  0028FC  ECD1  F01A         	call	_write_lcd_cmd
  7270                           
  7271                           ;clcd.c: 38: _delay_MS(250);
  7272  002900  0E00               	movlw	0
  7273  002902  6E15               	movwf	__delay_MS@delay+1,c
  7274  002904  0EFA               	movlw	250
  7275  002906  6E14               	movwf	__delay_MS@delay,c
  7276  002908  EC8D  F018         	call	__delay_MS	;wreg free
  7277                           
  7278                           ;clcd.c: 40: write_lcd_cmd(0x0F);
  7279  00290C  0E0F               	movlw	15
  7280  00290E  ECD1  F01A         	call	_write_lcd_cmd
  7281                           
  7282                           ;clcd.c: 41: _delay_MS(250);
  7283  002912  0E00               	movlw	0
  7284  002914  6E15               	movwf	__delay_MS@delay+1,c
  7285  002916  0EFA               	movlw	250
  7286  002918  6E14               	movwf	__delay_MS@delay,c
  7287  00291A  EC8D  F018         	call	__delay_MS	;wreg free
  7288                           
  7289                           ;clcd.c: 43: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7290  00291E  0E00               	movlw	low _lcd_display_array
  7291  002920  6E28               	movwf	memset@p1,c
  7292  002922  0E01               	movlw	high _lcd_display_array
  7293  002924  6E29               	movwf	memset@p1+1,c
  7294  002926  0E00               	movlw	0
  7295  002928  6E2B               	movwf	memset@c+1,c
  7296  00292A  0E20               	movlw	32
  7297  00292C  6E2A               	movwf	memset@c,c
  7298  00292E  0E00               	movlw	0
  7299  002930  6E2D               	movwf	memset@n+1,c
  7300  002932  0E50               	movlw	80
  7301  002934  6E2C               	movwf	memset@n,c
  7302  002936  EC00  F01A         	call	_memset	;wreg free
  7303                           
  7304                           ;clcd.c: 45: clcd_display_string_config();
  7305  00293A  EC4F  F017         	call	_clcd_display_string_config	;wreg free
  7306                           
  7307                           ;clcd.c: 47: reset_clcd();
  7308  00293E  EC5C  F01B         	call	_reset_clcd	;wreg free
  7309  002942  0012               	return		;funcret
  7310  002944                     __end_of_init_CLCD_config:
  7311                           	opt stack 0
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           intcon	equ	0xFF2
  7319                           postinc0	equ	0xFEE
  7320                           wreg	equ	0xFE8
  7321                           indf1	equ	0xFE7
  7322                           postinc1	equ	0xFE6
  7323                           postdec1	equ	0xFE5
  7324                           fsr1h	equ	0xFE2
  7325                           fsr1l	equ	0xFE1
  7326                           indf2	equ	0xFDF
  7327                           postinc2	equ	0xFDE
  7328                           postdec2	equ	0xFDD
  7329                           fsr2h	equ	0xFDA
  7330                           fsr2l	equ	0xFD9
  7331                           status	equ	0xFD8
  7332                           
  7333 ;; *************** function _write_lcd_cmd *****************
  7334 ;; Defined at:
  7335 ;;		line 395 in file "clcd.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  cmd             1    wreg     unsigned char 
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;  cmd             1   26[COMRAM] unsigned char 
  7340 ;; Return value:  Size  Location     Type
  7341 ;;                  1    wreg      void 
  7342 ;; Registers used:
  7343 ;;		wreg, status,2, status,0, cstack
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;Total ram usage:        1 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; Hardware stack levels required when called:    6
  7356 ;; This function calls:
  7357 ;;		_delay
  7358 ;; This function is called by:
  7359 ;;		_init_CLCD_config
  7360 ;;		_set_cursor
  7361 ;;		_char_enter_mode_left_to_right
  7362 ;;		_display_text
  7363 ;;		_set_cursor_at_home
  7364 ;;		_display_and_cursor_control
  7365 ;;		_scroll_display_right
  7366 ;;		_scroll_display_left
  7367 ;;		_put_string
  7368 ;;		_put_char
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           	psect	text24
  7373  0035A2                     __ptext24:
  7374                           	opt stack 0
  7375  0035A2                     _write_lcd_cmd:
  7376                           	opt stack 22
  7377                           
  7378                           ;incstack = 0
  7379                           ;write_lcd_cmd@cmd stored from wreg
  7380  0035A2  6E1B               	movwf	write_lcd_cmd@cmd,c
  7381                           
  7382                           ;clcd.c: 396: PORTD = cmd;
  7383  0035A4  C01B  FF83         	movff	write_lcd_cmd@cmd,3971	;volatile
  7384                           
  7385                           ;clcd.c: 397: PORTAbits.RA2 = 0;
  7386  0035A8  9480               	bcf	3968,2,c	;volatile
  7387                           
  7388                           ;clcd.c: 398: PORTAbits.RA1 = 0;
  7389  0035AA  9280               	bcf	3968,1,c	;volatile
  7390                           
  7391                           ;clcd.c: 399: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7392  0035AC  8080               	bsf	3968,0,c	;volatile
  7393  0035AE  0E00               	movlw	0
  7394  0035B0  6E15               	movwf	delay@delay+1,c
  7395  0035B2  0E01               	movlw	1
  7396  0035B4  6E14               	movwf	delay@delay,c
  7397  0035B6  EC21  F018         	call	_delay	;wreg free
  7398  0035BA  9080               	bcf	3968,0,c	;volatile
  7399  0035BC  0012               	return		;funcret
  7400  0035BE                     __end_of_write_lcd_cmd:
  7401                           	opt stack 0
  7402                           tblptru	equ	0xFF8
  7403                           tblptrh	equ	0xFF7
  7404                           tblptrl	equ	0xFF6
  7405                           tablat	equ	0xFF5
  7406                           prodh	equ	0xFF4
  7407                           prodl	equ	0xFF3
  7408                           intcon	equ	0xFF2
  7409                           postinc0	equ	0xFEE
  7410                           wreg	equ	0xFE8
  7411                           indf1	equ	0xFE7
  7412                           postinc1	equ	0xFE6
  7413                           postdec1	equ	0xFE5
  7414                           fsr1h	equ	0xFE2
  7415                           fsr1l	equ	0xFE1
  7416                           indf2	equ	0xFDF
  7417                           postinc2	equ	0xFDE
  7418                           postdec2	equ	0xFDD
  7419                           fsr2h	equ	0xFDA
  7420                           fsr2l	equ	0xFD9
  7421                           status	equ	0xFD8
  7422                           
  7423 ;; *************** function _reset_clcd *****************
  7424 ;; Defined at:
  7425 ;;		line 11 in file "clcd.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;		None
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;		None
  7430 ;; Return value:  Size  Location     Type
  7431 ;;                  1    wreg      void 
  7432 ;; Registers used:
  7433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7434 ;; Tracked objects:
  7435 ;;		On entry : 0/0
  7436 ;;		On exit  : 0/0
  7437 ;;		Unchanged: 0/0
  7438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7443 ;;Total ram usage:        0 bytes
  7444 ;; Hardware stack levels used:    1
  7445 ;; Hardware stack levels required when called:    9
  7446 ;; This function calls:
  7447 ;;		_clear_display_array
  7448 ;;		_reset_display_structure_count
  7449 ;; This function is called by:
  7450 ;;		_init_CLCD_config
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           	psect	text25
  7455  0036B8                     __ptext25:
  7456                           	opt stack 0
  7457  0036B8                     _reset_clcd:
  7458                           	opt stack 17
  7459                           
  7460                           ;clcd.c: 12: clear_display_array();
  7461                           
  7462                           ;incstack = 0
  7463  0036B8  EC54  F01A         	call	_clear_display_array	;wreg free
  7464                           
  7465                           ;clcd.c: 13: reset_display_structure_count();
  7466  0036BC  EC0B  F01B         	call	_reset_display_structure_count	;wreg free
  7467  0036C0  0012               	return		;funcret
  7468  0036C2                     __end_of_reset_clcd:
  7469                           	opt stack 0
  7470                           tblptru	equ	0xFF8
  7471                           tblptrh	equ	0xFF7
  7472                           tblptrl	equ	0xFF6
  7473                           tablat	equ	0xFF5
  7474                           prodh	equ	0xFF4
  7475                           prodl	equ	0xFF3
  7476                           intcon	equ	0xFF2
  7477                           postinc0	equ	0xFEE
  7478                           wreg	equ	0xFE8
  7479                           indf1	equ	0xFE7
  7480                           postinc1	equ	0xFE6
  7481                           postdec1	equ	0xFE5
  7482                           fsr1h	equ	0xFE2
  7483                           fsr1l	equ	0xFE1
  7484                           indf2	equ	0xFDF
  7485                           postinc2	equ	0xFDE
  7486                           postdec2	equ	0xFDD
  7487                           fsr2h	equ	0xFDA
  7488                           fsr2l	equ	0xFD9
  7489                           status	equ	0xFD8
  7490                           
  7491 ;; *************** function _clear_display_array *****************
  7492 ;; Defined at:
  7493 ;;		line 496 in file "clcd.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;		None
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;		None
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      void 
  7500 ;; Registers used:
  7501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;Total ram usage:        0 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    8
  7514 ;; This function calls:
  7515 ;;		_memset
  7516 ;;		_reset_display_structure_count
  7517 ;; This function is called by:
  7518 ;;		_reset_clcd
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           	psect	text26
  7523  0034A8                     __ptext26:
  7524                           	opt stack 0
  7525  0034A8                     _clear_display_array:
  7526                           	opt stack 17
  7527                           
  7528                           ;clcd.c: 497: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7529                           
  7530                           ;incstack = 0
  7531  0034A8  0E00               	movlw	low _lcd_display_array
  7532  0034AA  6E28               	movwf	memset@p1,c
  7533  0034AC  0E01               	movlw	high _lcd_display_array
  7534  0034AE  6E29               	movwf	memset@p1+1,c
  7535  0034B0  0E00               	movlw	0
  7536  0034B2  6E2B               	movwf	memset@c+1,c
  7537  0034B4  0E20               	movlw	32
  7538  0034B6  6E2A               	movwf	memset@c,c
  7539  0034B8  0E00               	movlw	0
  7540  0034BA  6E2D               	movwf	memset@n+1,c
  7541  0034BC  0E50               	movlw	80
  7542  0034BE  6E2C               	movwf	memset@n,c
  7543  0034C0  EC00  F01A         	call	_memset	;wreg free
  7544                           
  7545                           ;clcd.c: 498: reset_display_structure_count();
  7546  0034C4  EC0B  F01B         	call	_reset_display_structure_count	;wreg free
  7547  0034C8  0012               	return		;funcret
  7548  0034CA                     __end_of_clear_display_array:
  7549                           	opt stack 0
  7550                           tblptru	equ	0xFF8
  7551                           tblptrh	equ	0xFF7
  7552                           tblptrl	equ	0xFF6
  7553                           tablat	equ	0xFF5
  7554                           prodh	equ	0xFF4
  7555                           prodl	equ	0xFF3
  7556                           intcon	equ	0xFF2
  7557                           postinc0	equ	0xFEE
  7558                           wreg	equ	0xFE8
  7559                           indf1	equ	0xFE7
  7560                           postinc1	equ	0xFE6
  7561                           postdec1	equ	0xFE5
  7562                           fsr1h	equ	0xFE2
  7563                           fsr1l	equ	0xFE1
  7564                           indf2	equ	0xFDF
  7565                           postinc2	equ	0xFDE
  7566                           postdec2	equ	0xFDD
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _reset_display_structure_count *****************
  7572 ;; Defined at:
  7573 ;;		line 491 in file "clcd.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;		None
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;		None
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  1    wreg      void 
  7580 ;; Registers used:
  7581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7591 ;;Total ram usage:        0 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    7
  7594 ;; This function calls:
  7595 ;;		_clear_display_structure
  7596 ;; This function is called by:
  7597 ;;		_reset_clcd
  7598 ;;		_clear_display_array
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           	psect	text27
  7603  003616                     __ptext27:
  7604                           	opt stack 0
  7605  003616                     _reset_display_structure_count:
  7606                           	opt stack 18
  7607                           
  7608                           ;clcd.c: 492: display_struct_count = 0;
  7609                           
  7610                           ;incstack = 0
  7611  003616  0E00               	movlw	0
  7612  003618  0100               	movlb	0	; () banked
  7613  00361A  6F75               	movwf	(_display_struct_count+1)& (0+255),b
  7614  00361C  0E00               	movlw	0
  7615  00361E  6F74               	movwf	_display_struct_count& (0+255),b
  7616                           
  7617                           ; BSR set to: 0
  7618                           ;clcd.c: 493: clear_display_structure();
  7619  003620  EC95  F01A         	call	_clear_display_structure	;wreg free
  7620  003624  0012               	return		;funcret
  7621  003626                     __end_of_reset_display_structure_count:
  7622                           	opt stack 0
  7623                           tblptru	equ	0xFF8
  7624                           tblptrh	equ	0xFF7
  7625                           tblptrl	equ	0xFF6
  7626                           tablat	equ	0xFF5
  7627                           prodh	equ	0xFF4
  7628                           prodl	equ	0xFF3
  7629                           intcon	equ	0xFF2
  7630                           postinc0	equ	0xFEE
  7631                           wreg	equ	0xFE8
  7632                           indf1	equ	0xFE7
  7633                           postinc1	equ	0xFE6
  7634                           postdec1	equ	0xFE5
  7635                           fsr1h	equ	0xFE2
  7636                           fsr1l	equ	0xFE1
  7637                           indf2	equ	0xFDF
  7638                           postinc2	equ	0xFDE
  7639                           postdec2	equ	0xFDD
  7640                           fsr2h	equ	0xFDA
  7641                           fsr2l	equ	0xFD9
  7642                           status	equ	0xFD8
  7643                           
  7644 ;; *************** function _clear_display_structure *****************
  7645 ;; Defined at:
  7646 ;;		line 487 in file "clcd.c"
  7647 ;; Parameters:    Size  Location     Type
  7648 ;;		None
  7649 ;; Auto vars:     Size  Location     Type
  7650 ;;		None
  7651 ;; Return value:  Size  Location     Type
  7652 ;;                  1    wreg      void 
  7653 ;; Registers used:
  7654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7655 ;; Tracked objects:
  7656 ;;		On entry : 0/0
  7657 ;;		On exit  : 0/0
  7658 ;;		Unchanged: 0/0
  7659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;Total ram usage:        0 bytes
  7665 ;; Hardware stack levels used:    1
  7666 ;; Hardware stack levels required when called:    6
  7667 ;; This function calls:
  7668 ;;		_memset
  7669 ;; This function is called by:
  7670 ;;		_reset_display_structure_count
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           	psect	text28
  7675  00352A                     __ptext28:
  7676                           	opt stack 0
  7677  00352A                     _clear_display_structure:
  7678                           	opt stack 18
  7679                           
  7680                           ;clcd.c: 488: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details
      +                          ));
  7681                           
  7682                           ;incstack = 0
  7683  00352A  0E96               	movlw	low _clcd_display_string_details
  7684  00352C  6E28               	movwf	memset@p1,c
  7685  00352E  0E02               	movlw	high _clcd_display_string_details
  7686  003530  6E29               	movwf	memset@p1+1,c
  7687  003532  0E00               	movlw	0
  7688  003534  6E2B               	movwf	memset@c+1,c
  7689  003536  0E00               	movlw	0
  7690  003538  6E2A               	movwf	memset@c,c
  7691  00353A  0E04               	movlw	4
  7692  00353C  6E2D               	movwf	memset@n+1,c
  7693  00353E  0E4C               	movlw	76
  7694  003540  6E2C               	movwf	memset@n,c
  7695  003542  EC00  F01A         	call	_memset	;wreg free
  7696  003546  0012               	return		;funcret
  7697  003548                     __end_of_clear_display_structure:
  7698                           	opt stack 0
  7699                           tblptru	equ	0xFF8
  7700                           tblptrh	equ	0xFF7
  7701                           tblptrl	equ	0xFF6
  7702                           tablat	equ	0xFF5
  7703                           prodh	equ	0xFF4
  7704                           prodl	equ	0xFF3
  7705                           intcon	equ	0xFF2
  7706                           postinc0	equ	0xFEE
  7707                           wreg	equ	0xFE8
  7708                           indf1	equ	0xFE7
  7709                           postinc1	equ	0xFE6
  7710                           postdec1	equ	0xFE5
  7711                           fsr1h	equ	0xFE2
  7712                           fsr1l	equ	0xFE1
  7713                           indf2	equ	0xFDF
  7714                           postinc2	equ	0xFDE
  7715                           postdec2	equ	0xFDD
  7716                           fsr2h	equ	0xFDA
  7717                           fsr2l	equ	0xFD9
  7718                           status	equ	0xFD8
  7719                           
  7720 ;; *************** function _clcd_display_string_config *****************
  7721 ;; Defined at:
  7722 ;;		line 313 in file "clcd.c"
  7723 ;; Parameters:    Size  Location     Type
  7724 ;;		None
  7725 ;; Auto vars:     Size  Location     Type
  7726 ;;		None
  7727 ;; Return value:  Size  Location     Type
  7728 ;;                  1    wreg      void 
  7729 ;; Registers used:
  7730 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7731 ;; Tracked objects:
  7732 ;;		On entry : 0/0
  7733 ;;		On exit  : 0/0
  7734 ;;		Unchanged: 0/0
  7735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7740 ;;Total ram usage:        0 bytes
  7741 ;; Hardware stack levels used:    1
  7742 ;; Hardware stack levels required when called:    8
  7743 ;; This function calls:
  7744 ;;		_memcpy
  7745 ;;		_memset
  7746 ;;		_printf
  7747 ;;		_write_str
  7748 ;; This function is called by:
  7749 ;;		_init_CLCD_config
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           	psect	text29
  7754  002E9E                     __ptext29:
  7755                           	opt stack 0
  7756  002E9E                     _clcd_display_string_config:
  7757                           	opt stack 18
  7758                           
  7759                           ;clcd.c: 314: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7760                           
  7761                           ;incstack = 0
  7762  002E9E  0E00               	movlw	low _lcd_display_array
  7763  002EA0  6E28               	movwf	memset@p1,c
  7764  002EA2  0E01               	movlw	high _lcd_display_array
  7765  002EA4  6E29               	movwf	memset@p1+1,c
  7766  002EA6  0E00               	movlw	0
  7767  002EA8  6E2B               	movwf	memset@c+1,c
  7768  002EAA  0E20               	movlw	32
  7769  002EAC  6E2A               	movwf	memset@c,c
  7770  002EAE  0E00               	movlw	0
  7771  002EB0  6E2D               	movwf	memset@n+1,c
  7772  002EB2  0E50               	movlw	80
  7773  002EB4  6E2C               	movwf	memset@n,c
  7774  002EB6  EC00  F01A         	call	_memset	;wreg free
  7775                           
  7776                           ;clcd.c: 315: printf("sizeof(str) = %d\r\n", sizeof (str));
  7777  002EBA  0ED1               	movlw	low STR_17
  7778  002EBC  6E22               	movwf	printf@f,c
  7779  002EBE  0EFD               	movlw	high STR_17
  7780  002EC0  6E23               	movwf	printf@f+1,c
  7781  002EC2  0E00               	movlw	0
  7782  002EC4  6E25               	movwf	?_printf+3,c
  7783  002EC6  0E0D               	movlw	13
  7784  002EC8  6E24               	movwf	?_printf+2,c
  7785  002ECA  EC22  F011         	call	_printf	;wreg free
  7786                           
  7787                           ;clcd.c: 316: memcpy(lcd_display_array[0], str, sizeof (str));
  7788  002ECE  0E00               	movlw	low _lcd_display_array
  7789  002ED0  6E14               	movwf	memcpy@d1,c
  7790  002ED2  0E01               	movlw	high _lcd_display_array
  7791  002ED4  6E15               	movwf	memcpy@d1+1,c
  7792  002ED6  0EE9               	movlw	low _str
  7793  002ED8  6E16               	movwf	memcpy@s1,c
  7794  002EDA  0E00               	movlw	high _str
  7795  002EDC  6E17               	movwf	memcpy@s1+1,c
  7796  002EDE  0E00               	movlw	0
  7797  002EE0  6E19               	movwf	memcpy@n+1,c
  7798  002EE2  0E0D               	movlw	13
  7799  002EE4  6E18               	movwf	memcpy@n,c
  7800  002EE6  EC6B  F018         	call	_memcpy	;wreg free
  7801                           
  7802                           ;clcd.c: 317: write_str(lcd_display_array[0]);
  7803  002EEA  0E00               	movlw	low _lcd_display_array
  7804  002EEC  6E1C               	movwf	write_str@str,c
  7805  002EEE  0E01               	movlw	high _lcd_display_array
  7806  002EF0  6E1D               	movwf	write_str@str+1,c
  7807  002EF2  EC2F  F019         	call	_write_str	;wreg free
  7808  002EF6  0012               	return		;funcret
  7809  002EF8                     __end_of_clcd_display_string_config:
  7810                           	opt stack 0
  7811                           tblptru	equ	0xFF8
  7812                           tblptrh	equ	0xFF7
  7813                           tblptrl	equ	0xFF6
  7814                           tablat	equ	0xFF5
  7815                           prodh	equ	0xFF4
  7816                           prodl	equ	0xFF3
  7817                           intcon	equ	0xFF2
  7818                           postinc0	equ	0xFEE
  7819                           wreg	equ	0xFE8
  7820                           indf1	equ	0xFE7
  7821                           postinc1	equ	0xFE6
  7822                           postdec1	equ	0xFE5
  7823                           fsr1h	equ	0xFE2
  7824                           fsr1l	equ	0xFE1
  7825                           indf2	equ	0xFDF
  7826                           postinc2	equ	0xFDE
  7827                           postdec2	equ	0xFDD
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function _write_str *****************
  7833 ;; Defined at:
  7834 ;;		line 409 in file "clcd.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  str             2   27[COMRAM] PTR const unsigned char 
  7837 ;;		 -> lcd_display_array(80), 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;  i               1   29[COMRAM] unsigned char 
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  1    wreg      void 
  7842 ;; Registers used:
  7843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7849 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;Total ram usage:        3 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    7
  7856 ;; This function calls:
  7857 ;;		_write_lcd_data
  7858 ;; This function is called by:
  7859 ;;		_clcd_display_string_config
  7860 ;;		_display_text
  7861 ;;		_put_string
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text30
  7866  00325E                     __ptext30:
  7867                           	opt stack 0
  7868  00325E                     _write_str:
  7869                           	opt stack 21
  7870                           
  7871                           ;clcd.c: 411: unsigned char i = 0;
  7872                           
  7873                           ;incstack = 0
  7874  00325E  0E00               	movlw	0
  7875  003260  6E1E               	movwf	write_str@i,c
  7876                           
  7877                           ;clcd.c: 412: while (i < clcd_config_data.clcd_max_col) {
  7878  003262  D015               	goto	l549
  7879  003264                     
  7880                           ;clcd.c: 413: if (*str != (0))
  7881  003264  C01C  FFD9         	movff	write_str@str,fsr2l
  7882  003268  C01D  FFDA         	movff	write_str@str+1,fsr2h
  7883  00326C  50DF               	movf	indf2,w,c
  7884  00326E  B4D8               	btfsc	status,2,c
  7885  003270  D00A               	goto	l551
  7886                           
  7887                           ;clcd.c: 414: write_lcd_data(*str++);
  7888  003272  C01C  FFD9         	movff	write_str@str,fsr2l
  7889  003276  C01D  FFDA         	movff	write_str@str+1,fsr2h
  7890  00327A  50DF               	movf	indf2,w,c
  7891  00327C  ECDF  F01A         	call	_write_lcd_data
  7892  003280  4A1C               	infsnz	write_str@str,f,c
  7893  003282  2A1D               	incf	write_str@str+1,f,c
  7894  003284  D003               	goto	l552
  7895  003286                     l551:
  7896                           
  7897                           ;clcd.c: 415: else
  7898                           ;clcd.c: 416: write_lcd_data(' ');
  7899  003286  0E20               	movlw	32
  7900  003288  ECDF  F01A         	call	_write_lcd_data
  7901  00328C                     l552:
  7902                           
  7903                           ;clcd.c: 418: i++;
  7904  00328C  2A1E               	incf	write_str@i,f,c
  7905  00328E                     l549:
  7906  00328E  5046               	movf	_clcd_config_data+2,w,c
  7907  003290  5C1E               	subwf	write_str@i,w,c
  7908  003292  B0D8               	btfsc	status,0,c
  7909  003294  0012               	return	
  7910  003296  D7E6               	goto	l550
  7911  003298                     __end_of_write_str:
  7912                           	opt stack 0
  7913                           tblptru	equ	0xFF8
  7914                           tblptrh	equ	0xFF7
  7915                           tblptrl	equ	0xFF6
  7916                           tablat	equ	0xFF5
  7917                           prodh	equ	0xFF4
  7918                           prodl	equ	0xFF3
  7919                           intcon	equ	0xFF2
  7920                           postinc0	equ	0xFEE
  7921                           wreg	equ	0xFE8
  7922                           indf1	equ	0xFE7
  7923                           postinc1	equ	0xFE6
  7924                           postdec1	equ	0xFE5
  7925                           fsr1h	equ	0xFE2
  7926                           fsr1l	equ	0xFE1
  7927                           indf2	equ	0xFDF
  7928                           postinc2	equ	0xFDE
  7929                           postdec2	equ	0xFDD
  7930                           fsr2h	equ	0xFDA
  7931                           fsr2l	equ	0xFD9
  7932                           status	equ	0xFD8
  7933                           
  7934 ;; *************** function _write_lcd_data *****************
  7935 ;; Defined at:
  7936 ;;		line 402 in file "clcd.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;  data            1    wreg     unsigned char 
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;  data            1   26[COMRAM] unsigned char 
  7941 ;; Return value:  Size  Location     Type
  7942 ;;                  1    wreg      void 
  7943 ;; Registers used:
  7944 ;;		wreg, status,2, status,0, cstack
  7945 ;; Tracked objects:
  7946 ;;		On entry : 0/0
  7947 ;;		On exit  : 0/0
  7948 ;;		Unchanged: 0/0
  7949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;Total ram usage:        1 bytes
  7955 ;; Hardware stack levels used:    1
  7956 ;; Hardware stack levels required when called:    6
  7957 ;; This function calls:
  7958 ;;		_delay
  7959 ;; This function is called by:
  7960 ;;		_write_str
  7961 ;;		_put_char
  7962 ;; This function uses a non-reentrant model
  7963 ;;
  7964                           
  7965                           	psect	text31
  7966  0035BE                     __ptext31:
  7967                           	opt stack 0
  7968  0035BE                     _write_lcd_data:
  7969                           	opt stack 21
  7970                           
  7971                           ;incstack = 0
  7972                           ;write_lcd_data@data stored from wreg
  7973  0035BE  6E1B               	movwf	write_lcd_data@data,c
  7974                           
  7975                           ;clcd.c: 403: PORTAbits.RA2 = 1;
  7976  0035C0  8480               	bsf	3968,2,c	;volatile
  7977                           
  7978                           ;clcd.c: 404: PORTAbits.RA1 = 0;
  7979  0035C2  9280               	bcf	3968,1,c	;volatile
  7980                           
  7981                           ;clcd.c: 405: PORTD = data;
  7982  0035C4  C01B  FF83         	movff	write_lcd_data@data,3971	;volatile
  7983                           
  7984                           ;clcd.c: 406: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7985  0035C8  8080               	bsf	3968,0,c	;volatile
  7986  0035CA  0E00               	movlw	0
  7987  0035CC  6E15               	movwf	delay@delay+1,c
  7988  0035CE  0E01               	movlw	1
  7989  0035D0  6E14               	movwf	delay@delay,c
  7990  0035D2  EC21  F018         	call	_delay	;wreg free
  7991  0035D6  9080               	bcf	3968,0,c	;volatile
  7992  0035D8  0012               	return		;funcret
  7993  0035DA                     __end_of_write_lcd_data:
  7994                           	opt stack 0
  7995                           tblptru	equ	0xFF8
  7996                           tblptrh	equ	0xFF7
  7997                           tblptrl	equ	0xFF6
  7998                           tablat	equ	0xFF5
  7999                           prodh	equ	0xFF4
  8000                           prodl	equ	0xFF3
  8001                           intcon	equ	0xFF2
  8002                           postinc0	equ	0xFEE
  8003                           wreg	equ	0xFE8
  8004                           indf1	equ	0xFE7
  8005                           postinc1	equ	0xFE6
  8006                           postdec1	equ	0xFE5
  8007                           fsr1h	equ	0xFE2
  8008                           fsr1l	equ	0xFE1
  8009                           indf2	equ	0xFDF
  8010                           postinc2	equ	0xFDE
  8011                           postdec2	equ	0xFDD
  8012                           fsr2h	equ	0xFDA
  8013                           fsr2l	equ	0xFD9
  8014                           status	equ	0xFD8
  8015                           
  8016 ;; *************** function _delay *****************
  8017 ;; Defined at:
  8018 ;;		line 5 in file "delay.c"
  8019 ;; Parameters:    Size  Location     Type
  8020 ;;  delay           2   19[COMRAM] int 
  8021 ;; Auto vars:     Size  Location     Type
  8022 ;;  i               2   24[COMRAM] int 
  8023 ;;  val             2   22[COMRAM] int 
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      void 
  8026 ;; Registers used:
  8027 ;;		wreg, status,2, status,0
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8034 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8035 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;Total ram usage:        7 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:    5
  8040 ;; This function calls:
  8041 ;;		Nothing
  8042 ;; This function is called by:
  8043 ;;		_write_lcd_cmd
  8044 ;;		_write_lcd_data
  8045 ;;		_is_busy
  8046 ;; This function uses a non-reentrant model
  8047 ;;
  8048                           
  8049                           	psect	text32
  8050  003042                     __ptext32:
  8051                           	opt stack 0
  8052  003042                     _delay:
  8053                           	opt stack 21
  8054                           
  8055                           ;delay.c: 7: int val = 0, i;
  8056                           
  8057                           ;incstack = 0
  8058  003042  0E00               	movlw	0
  8059  003044  6E18               	movwf	delay@val+1,c
  8060  003046  0E00               	movlw	0
  8061  003048  6E17               	movwf	delay@val,c
  8062                           
  8063                           ;delay.c: 8: for (val = 0; val < delay; val++) {
  8064  00304A  0E00               	movlw	0
  8065  00304C  6E18               	movwf	delay@val+1,c
  8066  00304E  0E00               	movlw	0
  8067  003050  6E17               	movwf	delay@val,c
  8068  003052  D011               	goto	l957
  8069  003054                     
  8070                           ;delay.c: 9: for(i=0; i<350; i++)
  8071  003054  0E00               	movlw	0
  8072  003056  6E1A               	movwf	delay@i+1,c
  8073  003058  0E00               	movlw	0
  8074  00305A  6E19               	movwf	delay@i,c
  8075  00305C                     l4087:
  8076  00305C  BE1A               	btfsc	delay@i+1,7,c
  8077  00305E  D006               	goto	l959
  8078  003060  0E5E               	movlw	94
  8079  003062  5C19               	subwf	delay@i,w,c
  8080  003064  0E01               	movlw	1
  8081  003066  581A               	subwfb	delay@i+1,w,c
  8082  003068  B0D8               	btfsc	status,0,c
  8083  00306A  D003               	goto	u2750
  8084  00306C                     l959:
  8085                           
  8086                           ;delay.c: 10: {
  8087  00306C  4A19               	infsnz	delay@i,f,c
  8088  00306E  2A1A               	incf	delay@i+1,f,c
  8089  003070  D7F5               	goto	l4087
  8090  003072                     u2750:
  8091  003072  4A17               	infsnz	delay@val,f,c
  8092  003074  2A18               	incf	delay@val+1,f,c
  8093  003076                     l957:
  8094  003076  5014               	movf	delay@delay,w,c
  8095  003078  5C17               	subwf	delay@val,w,c
  8096  00307A  5018               	movf	delay@val+1,w,c
  8097  00307C  0A80               	xorlw	128
  8098  00307E  6E16               	movwf	??_delay& (0+255),c
  8099  003080  5015               	movf	delay@delay+1,w,c
  8100  003082  0A80               	xorlw	128
  8101  003084  5816               	subwfb	??_delay& (0+255),w,c
  8102  003086  B0D8               	btfsc	status,0,c
  8103  003088  0012               	return	
  8104  00308A  D7E4               	goto	l958
  8105  00308C                     __end_of_delay:
  8106                           	opt stack 0
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           prodh	equ	0xFF4
  8112                           prodl	equ	0xFF3
  8113                           intcon	equ	0xFF2
  8114                           postinc0	equ	0xFEE
  8115                           wreg	equ	0xFE8
  8116                           indf1	equ	0xFE7
  8117                           postinc1	equ	0xFE6
  8118                           postdec1	equ	0xFE5
  8119                           fsr1h	equ	0xFE2
  8120                           fsr1l	equ	0xFE1
  8121                           indf2	equ	0xFDF
  8122                           postinc2	equ	0xFDE
  8123                           postdec2	equ	0xFDD
  8124                           fsr2h	equ	0xFDA
  8125                           fsr2l	equ	0xFD9
  8126                           status	equ	0xFD8
  8127                           
  8128 ;; *************** function _memcpy *****************
  8129 ;; Defined at:
  8130 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\memcpy.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;  d1              2   19[COMRAM] PTR void 
  8133 ;;		 -> lcd_display_array(80), 
  8134 ;;  s1              2   21[COMRAM] PTR const void 
  8135 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1100), 
  8136 ;;  n               2   23[COMRAM] unsigned int 
  8137 ;; Auto vars:     Size  Location     Type
  8138 ;;  s               2   27[COMRAM] PTR const unsigned char 
  8139 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1100), 
  8140 ;;  d               2   25[COMRAM] PTR unsigned char 
  8141 ;;		 -> lcd_display_array(80), 
  8142 ;;  tmp             1   29[COMRAM] unsigned char 
  8143 ;; Return value:  Size  Location     Type
  8144 ;;                  2   19[COMRAM] PTR void 
  8145 ;; Registers used:
  8146 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8152 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8156 ;;Total ram usage:       11 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    5
  8159 ;; This function calls:
  8160 ;;		Nothing
  8161 ;; This function is called by:
  8162 ;;		_clcd_display_string_config
  8163 ;;		_scroll_left_to_right
  8164 ;;		_scroll_right_to_left
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text33
  8169  0030D6                     __ptext33:
  8170                           	opt stack 0
  8171  0030D6                     _memcpy:
  8172                           	opt stack 23
  8173                           
  8174                           ;incstack = 0
  8175  0030D6  C016  F01C         	movff	memcpy@s1,memcpy@s
  8176  0030DA  C017  F01D         	movff	memcpy@s1+1,memcpy@s+1
  8177  0030DE  C014  F01A         	movff	memcpy@d1,memcpy@d
  8178  0030E2  C015  F01B         	movff	memcpy@d1+1,memcpy@d+1
  8179  0030E6  D010               	goto	l1546
  8180  0030E8                     l4263:
  8181  0030E8  C01C  FFD9         	movff	memcpy@s,fsr2l
  8182  0030EC  C01D  FFDA         	movff	memcpy@s+1,fsr2h
  8183  0030F0  50DF               	movf	indf2,w,c
  8184  0030F2  6E1E               	movwf	memcpy@tmp,c
  8185  0030F4  4A1C               	infsnz	memcpy@s,f,c
  8186  0030F6  2A1D               	incf	memcpy@s+1,f,c
  8187  0030F8  C01A  FFD9         	movff	memcpy@d,fsr2l
  8188  0030FC  C01B  FFDA         	movff	memcpy@d+1,fsr2h
  8189  003100  C01E  FFDF         	movff	memcpy@tmp,indf2
  8190  003104  4A1A               	infsnz	memcpy@d,f,c
  8191  003106  2A1B               	incf	memcpy@d+1,f,c
  8192  003108                     l1546:
  8193  003108  0618               	decf	memcpy@n,f,c
  8194  00310A  A0D8               	btfss	status,0,c
  8195  00310C  0619               	decf	memcpy@n+1,f,c
  8196  00310E  2818               	incf	memcpy@n,w,c
  8197  003110  E1EB               	bnz	l4263
  8198  003112  2819               	incf	memcpy@n+1,w,c
  8199  003114  B4D8               	btfsc	status,2,c
  8200  003116  0012               	return	
  8201  003118  D7E7               	goto	l1547
  8202  00311A                     __end_of_memcpy:
  8203                           	opt stack 0
  8204                           tblptru	equ	0xFF8
  8205                           tblptrh	equ	0xFF7
  8206                           tblptrl	equ	0xFF6
  8207                           tablat	equ	0xFF5
  8208                           prodh	equ	0xFF4
  8209                           prodl	equ	0xFF3
  8210                           intcon	equ	0xFF2
  8211                           postinc0	equ	0xFEE
  8212                           wreg	equ	0xFE8
  8213                           indf1	equ	0xFE7
  8214                           postinc1	equ	0xFE6
  8215                           postdec1	equ	0xFE5
  8216                           fsr1h	equ	0xFE2
  8217                           fsr1l	equ	0xFE1
  8218                           indf2	equ	0xFDF
  8219                           postinc2	equ	0xFDE
  8220                           postdec2	equ	0xFDD
  8221                           fsr2h	equ	0xFDA
  8222                           fsr2l	equ	0xFD9
  8223                           status	equ	0xFD8
  8224                           
  8225 ;; *************** function __delay_MS *****************
  8226 ;; Defined at:
  8227 ;;		line 29 in file "delay.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;  delay           2   19[COMRAM] int 
  8230 ;; Auto vars:     Size  Location     Type
  8231 ;;  val             2   22[COMRAM] int 
  8232 ;; Return value:  Size  Location     Type
  8233 ;;                  1    wreg      void 
  8234 ;; Registers used:
  8235 ;;		wreg, status,2, status,0, cstack
  8236 ;; Tracked objects:
  8237 ;;		On entry : 0/0
  8238 ;;		On exit  : 0/0
  8239 ;;		Unchanged: 0/0
  8240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8241 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;Total ram usage:        5 bytes
  8246 ;; Hardware stack levels used:    1
  8247 ;; Hardware stack levels required when called:    6
  8248 ;; This function calls:
  8249 ;;		_TMR1_HasOverflowOccured
  8250 ;;		_TMR1_Reload
  8251 ;;		_TMR1_StartTimer
  8252 ;;		_TMR1_StopTimer
  8253 ;; This function is called by:
  8254 ;;		_init_CLCD_config
  8255 ;;		_main
  8256 ;;		_put_char
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           	psect	text34
  8261  00311A                     __ptext34:
  8262                           	opt stack 0
  8263  00311A                     __delay_MS:
  8264                           	opt stack 20
  8265                           
  8266                           ;delay.c: 30: int val = 0;
  8267                           
  8268                           ;incstack = 0
  8269  00311A  0E00               	movlw	0
  8270  00311C  6E18               	movwf	__delay_MS@val+1,c
  8271  00311E  0E00               	movlw	0
  8272  003120  6E17               	movwf	__delay_MS@val,c
  8273                           
  8274                           ;delay.c: 31: for (val = 0; val < delay; val++) {
  8275  003122  0E00               	movlw	0
  8276  003124  6E18               	movwf	__delay_MS@val+1,c
  8277  003126  0E00               	movlw	0
  8278  003128  6E17               	movwf	__delay_MS@val,c
  8279  00312A  D00E               	goto	l974
  8280  00312C                     
  8281                           ;delay.c: 32: TMR1_Reload();
  8282  00312C  EC45  F01B         	call	_TMR1_Reload	;wreg free
  8283                           
  8284                           ;delay.c: 33: TMR1_StartTimer();
  8285  003130  EC7C  F01B         	call	_TMR1_StartTimer	;wreg free
  8286  003134  EC4B  F01B         	call	_TMR1_HasOverflowOccured	;wreg free
  8287  003138  0900               	iorlw	0
  8288  00313A  B4D8               	btfsc	status,2,c
  8289  00313C  D7FB               	goto	l977
  8290                           
  8291                           ;delay.c: 35: TMR1_StopTimer();
  8292  00313E  EC78  F01B         	call	_TMR1_StopTimer	;wreg free
  8293                           
  8294                           ;delay.c: 36: PIR1bits.TMR1IF = 0;
  8295  003142  909E               	bcf	3998,0,c	;volatile
  8296  003144  4A17               	infsnz	__delay_MS@val,f,c
  8297  003146  2A18               	incf	__delay_MS@val+1,f,c
  8298  003148                     l974:
  8299  003148  5014               	movf	__delay_MS@delay,w,c
  8300  00314A  5C17               	subwf	__delay_MS@val,w,c
  8301  00314C  5018               	movf	__delay_MS@val+1,w,c
  8302  00314E  0A80               	xorlw	128
  8303  003150  6E16               	movwf	??__delay_MS& (0+255),c
  8304  003152  5015               	movf	__delay_MS@delay+1,w,c
  8305  003154  0A80               	xorlw	128
  8306  003156  5816               	subwfb	??__delay_MS& (0+255),w,c
  8307  003158  B0D8               	btfsc	status,0,c
  8308  00315A  0012               	return	
  8309  00315C  D7E7               	goto	l975
  8310  00315E                     __end_of__delay_MS:
  8311                           	opt stack 0
  8312                           tblptru	equ	0xFF8
  8313                           tblptrh	equ	0xFF7
  8314                           tblptrl	equ	0xFF6
  8315                           tablat	equ	0xFF5
  8316                           prodh	equ	0xFF4
  8317                           prodl	equ	0xFF3
  8318                           intcon	equ	0xFF2
  8319                           postinc0	equ	0xFEE
  8320                           wreg	equ	0xFE8
  8321                           indf1	equ	0xFE7
  8322                           postinc1	equ	0xFE6
  8323                           postdec1	equ	0xFE5
  8324                           fsr1h	equ	0xFE2
  8325                           fsr1l	equ	0xFE1
  8326                           indf2	equ	0xFDF
  8327                           postinc2	equ	0xFDE
  8328                           postdec2	equ	0xFDD
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333 ;; *************** function _TMR1_StopTimer *****************
  8334 ;; Defined at:
  8335 ;;		line 94 in file "mcc_generated_files/tmr1.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;		None
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  1    wreg      void 
  8342 ;; Registers used:
  8343 ;;		None
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;Total ram usage:        0 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    5
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		__delay_MS
  8360 ;;		_main
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text35
  8365  0036F0                     __ptext35:
  8366                           	opt stack 0
  8367  0036F0                     _TMR1_StopTimer:
  8368                           	opt stack 20
  8369                           
  8370                           ;tmr1.c: 97: T1CONbits.TMR1ON = 0;
  8371                           
  8372                           ;incstack = 0
  8373  0036F0  90CD               	bcf	4045,0,c	;volatile
  8374  0036F2  0012               	return		;funcret
  8375  0036F4                     __end_of_TMR1_StopTimer:
  8376                           	opt stack 0
  8377                           tblptru	equ	0xFF8
  8378                           tblptrh	equ	0xFF7
  8379                           tblptrl	equ	0xFF6
  8380                           tablat	equ	0xFF5
  8381                           prodh	equ	0xFF4
  8382                           prodl	equ	0xFF3
  8383                           intcon	equ	0xFF2
  8384                           postinc0	equ	0xFEE
  8385                           wreg	equ	0xFE8
  8386                           indf1	equ	0xFE7
  8387                           postinc1	equ	0xFE6
  8388                           postdec1	equ	0xFE5
  8389                           fsr1h	equ	0xFE2
  8390                           fsr1l	equ	0xFE1
  8391                           indf2	equ	0xFDF
  8392                           postinc2	equ	0xFDE
  8393                           postdec2	equ	0xFDD
  8394                           fsr2h	equ	0xFDA
  8395                           fsr2l	equ	0xFD9
  8396                           status	equ	0xFD8
  8397                           
  8398 ;; *************** function _TMR1_Reload *****************
  8399 ;; Defined at:
  8400 ;;		line 136 in file "mcc_generated_files/tmr1.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;		None
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;		None
  8405 ;; Return value:  Size  Location     Type
  8406 ;;                  1    wreg      void 
  8407 ;; Registers used:
  8408 ;;		wreg, status,2
  8409 ;; Tracked objects:
  8410 ;;		On entry : 0/0
  8411 ;;		On exit  : 0/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;Total ram usage:        0 bytes
  8419 ;; Hardware stack levels used:    1
  8420 ;; Hardware stack levels required when called:    5
  8421 ;; This function calls:
  8422 ;;		Nothing
  8423 ;; This function is called by:
  8424 ;;		__delay_MS
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           	psect	text36
  8429  00368A                     __ptext36:
  8430                           	opt stack 0
  8431  00368A                     _TMR1_Reload:
  8432                           	opt stack 20
  8433                           
  8434                           ;tmr1.c: 139: TMR1H = (timer1ReloadVal >> 8);
  8435                           
  8436                           ;incstack = 0
  8437  00368A  0100               	movlb	0	; () banked
  8438  00368C  51F9               	movf	(_timer1ReloadVal+1)& (0+255),w,b	;volatile
  8439  00368E  6ECF               	movwf	4047,c	;volatile
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;tmr1.c: 140: TMR1L = (uint8_t) timer1ReloadVal;
  8443  003690  C0F8  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8444                           
  8445                           ; BSR set to: 0
  8446  003694  0012               	return		;funcret
  8447  003696                     __end_of_TMR1_Reload:
  8448                           	opt stack 0
  8449                           tblptru	equ	0xFF8
  8450                           tblptrh	equ	0xFF7
  8451                           tblptrl	equ	0xFF6
  8452                           tablat	equ	0xFF5
  8453                           prodh	equ	0xFF4
  8454                           prodl	equ	0xFF3
  8455                           intcon	equ	0xFF2
  8456                           postinc0	equ	0xFEE
  8457                           wreg	equ	0xFE8
  8458                           indf1	equ	0xFE7
  8459                           postinc1	equ	0xFE6
  8460                           postdec1	equ	0xFE5
  8461                           fsr1h	equ	0xFE2
  8462                           fsr1l	equ	0xFE1
  8463                           indf2	equ	0xFDF
  8464                           postinc2	equ	0xFDE
  8465                           postdec2	equ	0xFDD
  8466                           fsr2h	equ	0xFDA
  8467                           fsr2l	equ	0xFD9
  8468                           status	equ	0xFD8
  8469                           
  8470 ;; *************** function _TMR1_HasOverflowOccured *****************
  8471 ;; Defined at:
  8472 ;;		line 153 in file "mcc_generated_files/tmr1.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;		None
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;		None
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  1    wreg      unsigned char 
  8479 ;; Registers used:
  8480 ;;		wreg
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;Total ram usage:        0 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    5
  8493 ;; This function calls:
  8494 ;;		Nothing
  8495 ;; This function is called by:
  8496 ;;		__delay_MS
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           	psect	text37
  8501  003696                     __ptext37:
  8502                           	opt stack 0
  8503  003696                     _TMR1_HasOverflowOccured:
  8504                           	opt stack 20
  8505                           
  8506                           ;tmr1.c: 156: return(PIR1bits.TMR1IF);
  8507                           
  8508                           ; BSR set to: 0
  8509                           ;incstack = 0
  8510  003696  A09E               	btfss	3998,0,c	;volatile
  8511  003698  D002               	goto	u2830
  8512  00369A  0E01               	movlw	1
  8513  00369C  0012               	return	
  8514  00369E                     u2830:
  8515  00369E  0E00               	movlw	0
  8516  0036A0  0012               	return	
  8517  0036A2                     __end_of_TMR1_HasOverflowOccured:
  8518                           	opt stack 0
  8519                           tblptru	equ	0xFF8
  8520                           tblptrh	equ	0xFF7
  8521                           tblptrl	equ	0xFF6
  8522                           tablat	equ	0xFF5
  8523                           prodh	equ	0xFF4
  8524                           prodl	equ	0xFF3
  8525                           intcon	equ	0xFF2
  8526                           postinc0	equ	0xFEE
  8527                           wreg	equ	0xFE8
  8528                           indf1	equ	0xFE7
  8529                           postinc1	equ	0xFE6
  8530                           postdec1	equ	0xFE5
  8531                           fsr1h	equ	0xFE2
  8532                           fsr1l	equ	0xFE1
  8533                           indf2	equ	0xFDF
  8534                           postinc2	equ	0xFDE
  8535                           postdec2	equ	0xFDD
  8536                           fsr2h	equ	0xFDA
  8537                           fsr2l	equ	0xFD9
  8538                           status	equ	0xFD8
  8539                           
  8540 ;; *************** function ___awdiv *****************
  8541 ;; Defined at:
  8542 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\awdiv.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;  dividend        2   19[COMRAM] int 
  8545 ;;  divisor         2   21[COMRAM] int 
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;  quotient        2   25[COMRAM] int 
  8548 ;;  sign            1   24[COMRAM] unsigned char 
  8549 ;;  counter         1   23[COMRAM] unsigned char 
  8550 ;; Return value:  Size  Location     Type
  8551 ;;                  2   19[COMRAM] int 
  8552 ;; Registers used:
  8553 ;;		wreg, status,2, status,0
  8554 ;; Tracked objects:
  8555 ;;		On entry : 0/0
  8556 ;;		On exit  : 0/0
  8557 ;;		Unchanged: 0/0
  8558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8559 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8560 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8562 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8563 ;;Total ram usage:        8 bytes
  8564 ;; Hardware stack levels used:    1
  8565 ;; Hardware stack levels required when called:    5
  8566 ;; This function calls:
  8567 ;;		Nothing
  8568 ;; This function is called by:
  8569 ;;		_init_clcd_cusotom_lcd
  8570 ;;		_display_string
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           	psect	text38
  8575  002BE2                     __ptext38:
  8576                           	opt stack 0
  8577  002BE2                     ___awdiv:
  8578                           	opt stack 22
  8579                           
  8580                           ;incstack = 0
  8581  002BE2  0E00               	movlw	0
  8582  002BE4  6E19               	movwf	___awdiv@sign,c
  8583  002BE6  AE17               	btfss	___awdiv@divisor+1,7,c
  8584  002BE8  D006               	goto	l1281
  8585  002BEA  6C16               	negf	___awdiv@divisor,c
  8586  002BEC  1E17               	comf	___awdiv@divisor+1,f,c
  8587  002BEE  B0D8               	btfsc	status,0,c
  8588  002BF0  2A17               	incf	___awdiv@divisor+1,f,c
  8589  002BF2  0E01               	movlw	1
  8590  002BF4  6E19               	movwf	___awdiv@sign,c
  8591  002BF6                     l1281:
  8592  002BF6  AE15               	btfss	___awdiv@dividend+1,7,c
  8593  002BF8  D006               	goto	l1282
  8594  002BFA  6C14               	negf	___awdiv@dividend,c
  8595  002BFC  1E15               	comf	___awdiv@dividend+1,f,c
  8596  002BFE  B0D8               	btfsc	status,0,c
  8597  002C00  2A15               	incf	___awdiv@dividend+1,f,c
  8598  002C02  0E01               	movlw	1
  8599  002C04  1A19               	xorwf	___awdiv@sign,f,c
  8600  002C06                     l1282:
  8601  002C06  0E00               	movlw	0
  8602  002C08  6E1B               	movwf	___awdiv@quotient+1,c
  8603  002C0A  0E00               	movlw	0
  8604  002C0C  6E1A               	movwf	___awdiv@quotient,c
  8605  002C0E  5016               	movf	___awdiv@divisor,w,c
  8606  002C10  1017               	iorwf	___awdiv@divisor+1,w,c
  8607  002C12  B4D8               	btfsc	status,2,c
  8608  002C14  D01C               	goto	l1289
  8609  002C16  0E01               	movlw	1
  8610  002C18  6E18               	movwf	___awdiv@counter,c
  8611  002C1A  D004               	goto	l1284
  8612  002C1C  90D8               	bcf	status,0,c
  8613  002C1E  3616               	rlcf	___awdiv@divisor,f,c
  8614  002C20  3617               	rlcf	___awdiv@divisor+1,f,c
  8615  002C22  2A18               	incf	___awdiv@counter,f,c
  8616  002C24                     l1284:
  8617  002C24  AE17               	btfss	___awdiv@divisor+1,7,c
  8618  002C26  D7FA               	goto	l1285
  8619  002C28                     u3560:
  8620  002C28  90D8               	bcf	status,0,c
  8621  002C2A  361A               	rlcf	___awdiv@quotient,f,c
  8622  002C2C  361B               	rlcf	___awdiv@quotient+1,f,c
  8623  002C2E  5016               	movf	___awdiv@divisor,w,c
  8624  002C30  5C14               	subwf	___awdiv@dividend,w,c
  8625  002C32  5017               	movf	___awdiv@divisor+1,w,c
  8626  002C34  5815               	subwfb	___awdiv@dividend+1,w,c
  8627  002C36  A0D8               	btfss	status,0,c
  8628  002C38  D005               	goto	l1288
  8629  002C3A  5016               	movf	___awdiv@divisor,w,c
  8630  002C3C  5E14               	subwf	___awdiv@dividend,f,c
  8631  002C3E  5017               	movf	___awdiv@divisor+1,w,c
  8632  002C40  5A15               	subwfb	___awdiv@dividend+1,f,c
  8633  002C42  801A               	bsf	___awdiv@quotient,0,c
  8634  002C44                     l1288:
  8635  002C44  90D8               	bcf	status,0,c
  8636  002C46  3217               	rrcf	___awdiv@divisor+1,f,c
  8637  002C48  3216               	rrcf	___awdiv@divisor,f,c
  8638  002C4A  2E18               	decfsz	___awdiv@counter,f,c
  8639  002C4C  D7ED               	goto	u3560
  8640  002C4E                     l1289:
  8641  002C4E  5019               	movf	___awdiv@sign,w,c
  8642  002C50  B4D8               	btfsc	status,2,c
  8643  002C52  D004               	goto	l1290
  8644  002C54  6C1A               	negf	___awdiv@quotient,c
  8645  002C56  1E1B               	comf	___awdiv@quotient+1,f,c
  8646  002C58  B0D8               	btfsc	status,0,c
  8647  002C5A  2A1B               	incf	___awdiv@quotient+1,f,c
  8648  002C5C                     l1290:
  8649  002C5C  C01A  F014         	movff	___awdiv@quotient,?___awdiv
  8650  002C60  C01B  F015         	movff	___awdiv@quotient+1,?___awdiv+1
  8651  002C64  0012               	return	
  8652  002C66                     __end_of___awdiv:
  8653                           	opt stack 0
  8654                           tblptru	equ	0xFF8
  8655                           tblptrh	equ	0xFF7
  8656                           tblptrl	equ	0xFF6
  8657                           tablat	equ	0xFF5
  8658                           prodh	equ	0xFF4
  8659                           prodl	equ	0xFF3
  8660                           intcon	equ	0xFF2
  8661                           postinc0	equ	0xFEE
  8662                           wreg	equ	0xFE8
  8663                           indf1	equ	0xFE7
  8664                           postinc1	equ	0xFE6
  8665                           postdec1	equ	0xFE5
  8666                           fsr1h	equ	0xFE2
  8667                           fsr1l	equ	0xFE1
  8668                           indf2	equ	0xFDF
  8669                           postinc2	equ	0xFDE
  8670                           postdec2	equ	0xFDD
  8671                           fsr2h	equ	0xFDA
  8672                           fsr2l	equ	0xFD9
  8673                           status	equ	0xFD8
  8674                           
  8675 ;; *************** function _clcd_max_row *****************
  8676 ;; Defined at:
  8677 ;;		line 107 in file "clcd.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;		None
  8680 ;; Auto vars:     Size  Location     Type
  8681 ;;		None
  8682 ;; Return value:  Size  Location     Type
  8683 ;;                  1    wreg      unsigned char 
  8684 ;; Registers used:
  8685 ;;		wreg, status,2
  8686 ;; Tracked objects:
  8687 ;;		On entry : 0/0
  8688 ;;		On exit  : 0/0
  8689 ;;		Unchanged: 0/0
  8690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;Total ram usage:        0 bytes
  8696 ;; Hardware stack levels used:    1
  8697 ;; Hardware stack levels required when called:    5
  8698 ;; This function calls:
  8699 ;;		Nothing
  8700 ;; This function is called by:
  8701 ;;		_reply_to_host
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           	psect	text39
  8706  003660                     __ptext39:
  8707                           	opt stack 0
  8708  003660                     _clcd_max_row:
  8709                           	opt stack 23
  8710                           
  8711                           ;clcd.c: 108: if (clcd_config_data.init_done == 0)
  8712                           
  8713                           ;incstack = 0
  8714  003660  5044               	movf	_clcd_config_data,w,c
  8715  003662  A4D8               	btfss	status,2,c
  8716  003664  D002               	goto	l437
  8717                           
  8718                           ;clcd.c: 109: return 0;
  8719  003666  0E00               	movlw	0
  8720  003668  0012               	return	
  8721  00366A                     l437:
  8722                           
  8723                           ;clcd.c: 110: else
  8724                           ;clcd.c: 111: return clcd_config_data.clcd_max_row;
  8725  00366A  5045               	movf	_clcd_config_data+1,w,c
  8726  00366C  0012               	return	
  8727  00366E                     __end_of_clcd_max_row:
  8728                           	opt stack 0
  8729                           tblptru	equ	0xFF8
  8730                           tblptrh	equ	0xFF7
  8731                           tblptrl	equ	0xFF6
  8732                           tablat	equ	0xFF5
  8733                           prodh	equ	0xFF4
  8734                           prodl	equ	0xFF3
  8735                           intcon	equ	0xFF2
  8736                           postinc0	equ	0xFEE
  8737                           wreg	equ	0xFE8
  8738                           indf1	equ	0xFE7
  8739                           postinc1	equ	0xFE6
  8740                           postdec1	equ	0xFE5
  8741                           fsr1h	equ	0xFE2
  8742                           fsr1l	equ	0xFE1
  8743                           indf2	equ	0xFDF
  8744                           postinc2	equ	0xFDE
  8745                           postdec2	equ	0xFDD
  8746                           fsr2h	equ	0xFDA
  8747                           fsr2l	equ	0xFD9
  8748                           status	equ	0xFD8
  8749                           
  8750 ;; *************** function _clcd_max_col *****************
  8751 ;; Defined at:
  8752 ;;		line 114 in file "clcd.c"
  8753 ;; Parameters:    Size  Location     Type
  8754 ;;		None
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;		None
  8757 ;; Return value:  Size  Location     Type
  8758 ;;                  1    wreg      unsigned char 
  8759 ;; Registers used:
  8760 ;;		wreg, status,2
  8761 ;; Tracked objects:
  8762 ;;		On entry : 0/0
  8763 ;;		On exit  : 0/0
  8764 ;;		Unchanged: 0/0
  8765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;Total ram usage:        0 bytes
  8771 ;; Hardware stack levels used:    1
  8772 ;; Hardware stack levels required when called:    5
  8773 ;; This function calls:
  8774 ;;		Nothing
  8775 ;; This function is called by:
  8776 ;;		_reply_to_host
  8777 ;; This function uses a non-reentrant model
  8778 ;;
  8779                           
  8780                           	psect	text40
  8781  00366E                     __ptext40:
  8782                           	opt stack 0
  8783  00366E                     _clcd_max_col:
  8784                           	opt stack 23
  8785                           
  8786                           ;clcd.c: 115: if (clcd_config_data.init_done == 0)
  8787                           
  8788                           ;incstack = 0
  8789  00366E  5044               	movf	_clcd_config_data,w,c
  8790  003670  A4D8               	btfss	status,2,c
  8791  003672  D002               	goto	l442
  8792                           
  8793                           ;clcd.c: 116: return 0;
  8794  003674  0E00               	movlw	0
  8795  003676  0012               	return	
  8796  003678                     l442:
  8797                           
  8798                           ;clcd.c: 117: else
  8799                           ;clcd.c: 118: return clcd_config_data.clcd_max_col;
  8800  003678  5046               	movf	_clcd_config_data+2,w,c
  8801  00367A  0012               	return	
  8802  00367C                     __end_of_clcd_max_col:
  8803                           	opt stack 0
  8804                           tblptru	equ	0xFF8
  8805                           tblptrh	equ	0xFF7
  8806                           tblptrl	equ	0xFF6
  8807                           tablat	equ	0xFF5
  8808                           prodh	equ	0xFF4
  8809                           prodl	equ	0xFF3
  8810                           intcon	equ	0xFF2
  8811                           postinc0	equ	0xFEE
  8812                           wreg	equ	0xFE8
  8813                           indf1	equ	0xFE7
  8814                           postinc1	equ	0xFE6
  8815                           postdec1	equ	0xFE5
  8816                           fsr1h	equ	0xFE2
  8817                           fsr1l	equ	0xFE1
  8818                           indf2	equ	0xFDF
  8819                           postinc2	equ	0xFDE
  8820                           postdec2	equ	0xFDD
  8821                           fsr2h	equ	0xFDA
  8822                           fsr2l	equ	0xFD9
  8823                           status	equ	0xFD8
  8824                           
  8825 ;; *************** function _parse_cmd_str *****************
  8826 ;; Defined at:
  8827 ;;		line 125 in file "cmd_consol.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;  str             2    3[BANK0 ] PTR unsigned char 
  8830 ;;		 -> uart_str(150), 
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;  i               1    8[BANK0 ] unsigned char 
  8833 ;;  i               1   13[BANK0 ] unsigned char 
  8834 ;;  i               1    7[BANK0 ] unsigned char 
  8835 ;;  uid             1   17[BANK0 ] unsigned char 
  8836 ;;  uid             1   16[BANK0 ] unsigned char 
  8837 ;;  scroll          1   15[BANK0 ] unsigned char 
  8838 ;;  uid             1   14[BANK0 ] unsigned char 
  8839 ;;  column          1   12[BANK0 ] unsigned char 
  8840 ;;  row             1   11[BANK0 ] unsigned char 
  8841 ;;  temp            2   18[BANK0 ] PTR unsigned char 
  8842 ;;		 -> uart_str(150), NULL(0), 
  8843 ;;  ptr             2    9[BANK0 ] PTR unsigned char 
  8844 ;;		 -> uart_str(150), 
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  1    wreg      unsigned char 
  8847 ;; Registers used:
  8848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8854 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8857 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8858 ;;Total ram usage:       17 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:    9
  8861 ;; This function calls:
  8862 ;;		_atoi
  8863 ;;		_collect_column
  8864 ;;		_collect_row
  8865 ;;		_get_direction
  8866 ;;		_get_dis_frq
  8867 ;;		_get_over_write_data
  8868 ;;		_get_str
  8869 ;;		_isdigit
  8870 ;;		_memset
  8871 ;;		_printf
  8872 ;;		_strcmp
  8873 ;;		_strcpy
  8874 ;;		_strlen
  8875 ;;		_strtok
  8876 ;; This function is called by:
  8877 ;;		_cmd_consol_task
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           	psect	text41
  8882  0000CA                     __ptext41:
  8883                           	opt stack 0
  8884  0000CA                     _parse_cmd_str:
  8885                           	opt stack 20
  8886                           
  8887                           ;cmd_consol.c: 126: printf("%s..2\r\n", str);
  8888                           
  8889                           ;incstack = 0
  8890  0000CA  0E82               	movlw	low STR_27
  8891  0000CC  6E22               	movwf	printf@f,c
  8892  0000CE  0EFF               	movlw	high STR_27
  8893  0000D0  6E23               	movwf	printf@f+1,c
  8894  0000D2  C0C9  F024         	movff	parse_cmd_str@str,?_printf+2
  8895  0000D6  C0CA  F025         	movff	parse_cmd_str@str+1,?_printf+3
  8896  0000DA  EC22  F011         	call	_printf	;wreg free
  8897                           
  8898                           ;cmd_consol.c: 127: char *temp;
  8899                           ;cmd_consol.c: 128: char *ptr = str;
  8900  0000DE  C0C9  F0CF         	movff	parse_cmd_str@str,parse_cmd_str@ptr
  8901  0000E2  C0CA  F0D0         	movff	parse_cmd_str@str+1,parse_cmd_str@ptr+1
  8902                           
  8903                           ;cmd_consol.c: 129: temp = strtok(ptr, "-', /=");
  8904  0000E6  C0CF  F01F         	movff	parse_cmd_str@ptr,strtok@s1
  8905  0000EA  C0D0  F020         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  8906  0000EE  0EA7               	movlw	low STR_28
  8907  0000F0  6E21               	movwf	strtok@s2,c
  8908  0000F2  0EFF               	movlw	high STR_28
  8909  0000F4  6E22               	movwf	strtok@s2+1,c
  8910  0000F6  ECA2  F014         	call	_strtok	;wreg free
  8911  0000FA  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
  8912  0000FE  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
  8913                           
  8914                           ;cmd_consol.c: 130: if (temp != (0)) {
  8915  000102  0100               	movlb	0	; () banked
  8916  000104  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  8917  000106  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8918  000108  B4D8               	btfsc	status,2,c
  8919  00010A  0012               	return	
  8920                           
  8921                           ; BSR set to: 0
  8922                           ;cmd_consol.c: 131: if (strcmp(temp, "MC?") == 0) {
  8923  00010C  C0D8  F014         	movff	parse_cmd_str@temp,strcmp@s1
  8924  000110  C0D9  F015         	movff	parse_cmd_str@temp+1,strcmp@s1+1
  8925  000114  0EED               	movlw	low STR_29
  8926  000116  6E16               	movwf	strcmp@s2,c
  8927  000118  0EFF               	movlw	high STR_29
  8928  00011A  6E17               	movwf	strcmp@s2+1,c
  8929  00011C  EC46  F018         	call	_strcmp	;wreg free
  8930  000120  5014               	movf	?_strcmp,w,c
  8931  000122  1015               	iorwf	?_strcmp+1,w,c
  8932  000124  A4D8               	btfss	status,2,c
  8933  000126  D029               	goto	l774
  8934                           
  8935                           ;cmd_consol.c: 133: if (temp != (0)) {
  8936  000128  0100               	movlb	0	; () banked
  8937  00012A  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  8938  00012C  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8939  00012E  B4D8               	btfsc	status,2,c
  8940  000130  EFB4  F006         	goto	l870
  8941                           
  8942                           ; BSR set to: 0
  8943                           ;cmd_consol.c: 134: strcpy(CMD, temp);
  8944  000134  0EB7               	movlw	low _CMD
  8945  000136  6E14               	movwf	strcpy@to,c
  8946  000138  0E00               	movlw	high _CMD
  8947  00013A  6E15               	movwf	strcpy@to+1,c
  8948  00013C  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
  8949  000140  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  8950  000144  ECE9  F019         	call	_strcpy	;wreg free
  8951                           
  8952                           ;cmd_consol.c: 135: valid_cmd = 1;
  8953  000148  0E01               	movlw	1
  8954  00014A  0100               	movlb	0	; () banked
  8955  00014C  6F82               	movwf	_valid_cmd& (0+255),b
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;cmd_consol.c: 136: memset(str, 0, strlen(str));
  8959  00014E  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
  8960  000152  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  8961  000156  0E00               	movlw	0
  8962  000158  6E2B               	movwf	memset@c+1,c
  8963  00015A  0E00               	movlw	0
  8964  00015C  6E2A               	movwf	memset@c,c
  8965  00015E  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
  8966  000162  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  8967  000166  EC4C  F019         	call	_strlen	;wreg free
  8968  00016A  C022  F02C         	movff	?_strlen,memset@n
  8969  00016E  C023  F02D         	movff	?_strlen+1,memset@n+1
  8970  000172  EC00  F01A         	call	_memset	;wreg free
  8971  000176                     l6933:
  8972                           
  8973                           ;cmd_consol.c: 137: return 0;
  8974  000176  0E00               	movlw	0
  8975  000178  0012               	return	
  8976  00017A                     l774:
  8977  00017A  C0D8  F014         	movff	parse_cmd_str@temp,strcmp@s1
  8978  00017E  C0D9  F015         	movff	parse_cmd_str@temp+1,strcmp@s1+1
  8979  000182  0EF1               	movlw	low STR_30
  8980  000184  6E16               	movwf	strcmp@s2,c
  8981  000186  0EFF               	movlw	high STR_30
  8982  000188  6E17               	movwf	strcmp@s2+1,c
  8983  00018A  EC46  F018         	call	_strcmp	;wreg free
  8984  00018E  5014               	movf	?_strcmp,w,c
  8985  000190  1015               	iorwf	?_strcmp+1,w,c
  8986  000192  A4D8               	btfss	status,2,c
  8987  000194  D028               	goto	l778
  8988                           
  8989                           ;cmd_consol.c: 141: if (temp != (0)) {
  8990  000196  0100               	movlb	0	; () banked
  8991  000198  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  8992  00019A  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8993  00019C  B4D8               	btfsc	status,2,c
  8994  00019E  EFB4  F006         	goto	l870
  8995                           
  8996                           ; BSR set to: 0
  8997                           ;cmd_consol.c: 142: strcpy(CMD, temp);
  8998  0001A2  0EB7               	movlw	low _CMD
  8999  0001A4  6E14               	movwf	strcpy@to,c
  9000  0001A6  0E00               	movlw	high _CMD
  9001  0001A8  6E15               	movwf	strcpy@to+1,c
  9002  0001AA  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
  9003  0001AE  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9004  0001B2  ECE9  F019         	call	_strcpy	;wreg free
  9005                           
  9006                           ;cmd_consol.c: 143: valid_cmd = 1;
  9007  0001B6  0E01               	movlw	1
  9008  0001B8  0100               	movlb	0	; () banked
  9009  0001BA  6F82               	movwf	_valid_cmd& (0+255),b
  9010                           
  9011                           ; BSR set to: 0
  9012                           ;cmd_consol.c: 144: memset(str, 0, strlen(str));
  9013  0001BC  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
  9014  0001C0  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9015  0001C4  0E00               	movlw	0
  9016  0001C6  6E2B               	movwf	memset@c+1,c
  9017  0001C8  0E00               	movlw	0
  9018  0001CA  6E2A               	movwf	memset@c,c
  9019  0001CC  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
  9020  0001D0  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9021  0001D4  EC4C  F019         	call	_strlen	;wreg free
  9022  0001D8  C022  F02C         	movff	?_strlen,memset@n
  9023  0001DC  C023  F02D         	movff	?_strlen+1,memset@n+1
  9024  0001E0  EC00  F01A         	call	_memset	;wreg free
  9025  0001E4  D7C8               	goto	l6933
  9026  0001E6                     l778:
  9027  0001E6  C0D8  F014         	movff	parse_cmd_str@temp,strcmp@s1
  9028  0001EA  C0D9  F015         	movff	parse_cmd_str@temp+1,strcmp@s1+1
  9029  0001EE  0EBC               	movlw	low STR_31
  9030  0001F0  6E16               	movwf	strcmp@s2,c
  9031  0001F2  0EFF               	movlw	high STR_31
  9032  0001F4  6E17               	movwf	strcmp@s2+1,c
  9033  0001F6  EC46  F018         	call	_strcmp	;wreg free
  9034  0001FA  5014               	movf	?_strcmp,w,c
  9035  0001FC  1015               	iorwf	?_strcmp+1,w,c
  9036  0001FE  A4D8               	btfss	status,2,c
  9037  000200  D02E               	goto	l781
  9038                           
  9039                           ;cmd_consol.c: 149: if (temp != (0)) {
  9040  000202  0100               	movlb	0	; () banked
  9041  000204  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9042  000206  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9043  000208  B4D8               	btfsc	status,2,c
  9044  00020A  EFB4  F006         	goto	l870
  9045                           
  9046                           ; BSR set to: 0
  9047                           ;cmd_consol.c: 150: strcpy(CMD, temp);
  9048  00020E  0EB7               	movlw	low _CMD
  9049  000210  6E14               	movwf	strcpy@to,c
  9050  000212  0E00               	movlw	high _CMD
  9051  000214  6E15               	movwf	strcpy@to+1,c
  9052  000216  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
  9053  00021A  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9054  00021E  ECE9  F019         	call	_strcpy	;wreg free
  9055                           
  9056                           ;cmd_consol.c: 151: valid_cmd = 1;
  9057  000222  0E01               	movlw	1
  9058  000224  0100               	movlb	0	; () banked
  9059  000226  6F82               	movwf	_valid_cmd& (0+255),b
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;cmd_consol.c: 152: memset(str, 0, strlen(str));
  9063  000228  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
  9064  00022C  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9065  000230  0E00               	movlw	0
  9066  000232  6E2B               	movwf	memset@c+1,c
  9067  000234  0E00               	movlw	0
  9068  000236  6E2A               	movwf	memset@c,c
  9069  000238  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
  9070  00023C  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9071  000240  EC4C  F019         	call	_strlen	;wreg free
  9072  000244  C022  F02C         	movff	?_strlen,memset@n
  9073  000248  C023  F02D         	movff	?_strlen+1,memset@n+1
  9074  00024C  EC00  F01A         	call	_memset	;wreg free
  9075                           
  9076                           ;cmd_consol.c: 153: printf(".....\r\n");
  9077  000250  0E7A               	movlw	low STR_32
  9078  000252  6E22               	movwf	printf@f,c
  9079  000254  0EFF               	movlw	high STR_32
  9080  000256  6E23               	movwf	printf@f+1,c
  9081  000258  EC22  F011         	call	_printf	;wreg free
  9082  00025C  D78C               	goto	l6933
  9083  00025E                     l781:
  9084  00025E  C0D8  F014         	movff	parse_cmd_str@temp,strcmp@s1
  9085  000262  C0D9  F015         	movff	parse_cmd_str@temp+1,strcmp@s1+1
  9086  000266  0EDE               	movlw	low STR_33
  9087  000268  6E16               	movwf	strcmp@s2,c
  9088  00026A  0EFF               	movlw	high STR_33
  9089  00026C  6E17               	movwf	strcmp@s2+1,c
  9090  00026E  EC46  F018         	call	_strcmp	;wreg free
  9091  000272  5014               	movf	?_strcmp,w,c
  9092  000274  1015               	iorwf	?_strcmp+1,w,c
  9093  000276  A4D8               	btfss	status,2,c
  9094  000278  D07B               	goto	l784
  9095                           
  9096                           ;cmd_consol.c: 158: if (temp != (0)) {
  9097  00027A  0100               	movlb	0	; () banked
  9098  00027C  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9099  00027E  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9100  000280  B4D8               	btfsc	status,2,c
  9101  000282  EFB4  F006         	goto	l870
  9102                           
  9103                           ; BSR set to: 0
  9104                           ;cmd_consol.c: 159: strcpy(CMD, temp);
  9105  000286  0EB7               	movlw	low _CMD
  9106  000288  6E14               	movwf	strcpy@to,c
  9107  00028A  0E00               	movlw	high _CMD
  9108  00028C  6E15               	movwf	strcpy@to+1,c
  9109  00028E  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
  9110  000292  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9111  000296  ECE9  F019         	call	_strcpy	;wreg free
  9112                           
  9113                           ;cmd_consol.c: 160: temp = strtok((0), "-', /=");
  9114  00029A  0E00               	movlw	0
  9115  00029C  6E1F               	movwf	strtok@s1,c
  9116  00029E  0E00               	movlw	0
  9117  0002A0  6E20               	movwf	strtok@s1+1,c
  9118  0002A2  0EA7               	movlw	low STR_28
  9119  0002A4  6E21               	movwf	strtok@s2,c
  9120  0002A6  0EFF               	movlw	high STR_28
  9121  0002A8  6E22               	movwf	strtok@s2+1,c
  9122  0002AA  ECA2  F014         	call	_strtok	;wreg free
  9123  0002AE  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
  9124  0002B2  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
  9125                           
  9126                           ;cmd_consol.c: 161: printf("%s..\r\n", temp);
  9127  0002B6  0E99               	movlw	low STR_35
  9128  0002B8  6E22               	movwf	printf@f,c
  9129  0002BA  0EFF               	movlw	high STR_35
  9130  0002BC  6E23               	movwf	printf@f+1,c
  9131  0002BE  C0D8  F024         	movff	parse_cmd_str@temp,?_printf+2
  9132  0002C2  C0D9  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9133  0002C6  EC22  F011         	call	_printf	;wreg free
  9134                           
  9135                           ;cmd_consol.c: 162: char row = 0, column = 0;
  9136  0002CA  0E00               	movlw	0
  9137  0002CC  0100               	movlb	0	; () banked
  9138  0002CE  6FD1               	movwf	parse_cmd_str@row& (0+255),b
  9139                           
  9140                           ; BSR set to: 0
  9141  0002D0  0E00               	movlw	0
  9142  0002D2  6FD2               	movwf	parse_cmd_str@column& (0+255),b
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;cmd_consol.c: 163: if (temp != (0)) {
  9146  0002D4  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9147  0002D6  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9148  0002D8  B4D8               	btfsc	status,2,c
  9149  0002DA  EFB4  F006         	goto	l870
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;cmd_consol.c: 164: row = atoi(temp);
  9153  0002DE  C0D8  F022         	movff	parse_cmd_str@temp,atoi@s
  9154  0002E2  C0D9  F023         	movff	parse_cmd_str@temp+1,atoi@s+1
  9155  0002E6  EC2B  F013         	call	_atoi	;wreg free
  9156  0002EA  5022               	movf	?_atoi,w,c
  9157  0002EC  0100               	movlb	0	; () banked
  9158  0002EE  6FD1               	movwf	parse_cmd_str@row& (0+255),b
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;cmd_consol.c: 165: if (row > 0) {
  9162  0002F0  51D1               	movf	parse_cmd_str@row& (0+255),w,b
  9163  0002F2  B4D8               	btfsc	status,2,c
  9164  0002F4  EFB4  F006         	goto	l870
  9165                           
  9166                           ; BSR set to: 0
  9167                           ;cmd_consol.c: 166: temp = strtok((0), "-', /=");
  9168  0002F8  0E00               	movlw	0
  9169  0002FA  6E1F               	movwf	strtok@s1,c
  9170  0002FC  0E00               	movlw	0
  9171  0002FE  6E20               	movwf	strtok@s1+1,c
  9172  000300  0EA7               	movlw	low STR_28
  9173  000302  6E21               	movwf	strtok@s2,c
  9174  000304  0EFF               	movlw	high STR_28
  9175  000306  6E22               	movwf	strtok@s2+1,c
  9176  000308  ECA2  F014         	call	_strtok	;wreg free
  9177  00030C  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
  9178  000310  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
  9179                           
  9180                           ;cmd_consol.c: 167: if (temp != (0)) {
  9181  000314  0100               	movlb	0	; () banked
  9182  000316  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9183  000318  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9184  00031A  B4D8               	btfsc	status,2,c
  9185  00031C  EFB4  F006         	goto	l870
  9186                           
  9187                           ; BSR set to: 0
  9188                           ;cmd_consol.c: 168: column = atoi(temp);
  9189  000320  C0D8  F022         	movff	parse_cmd_str@temp,atoi@s
  9190  000324  C0D9  F023         	movff	parse_cmd_str@temp+1,atoi@s+1
  9191  000328  EC2B  F013         	call	_atoi	;wreg free
  9192  00032C  5022               	movf	?_atoi,w,c
  9193  00032E  0100               	movlb	0	; () banked
  9194  000330  6FD2               	movwf	parse_cmd_str@column& (0+255),b
  9195                           
  9196                           ; BSR set to: 0
  9197                           ;cmd_consol.c: 169: if (column > 0) {
  9198  000332  51D2               	movf	parse_cmd_str@column& (0+255),w,b
  9199  000334  B4D8               	btfsc	status,2,c
  9200  000336  EFB4  F006         	goto	l870
  9201                           
  9202                           ; BSR set to: 0
  9203                           ;cmd_consol.c: 170: clcd_init_col = column;
  9204  00033A  C0D2  F080         	movff	parse_cmd_str@column,_clcd_init_col
  9205                           
  9206                           ;cmd_consol.c: 171: clcd_init_row = row;
  9207  00033E  C0D1  F081         	movff	parse_cmd_str@row,_clcd_init_row
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;cmd_consol.c: 172: valid_cmd = 1;
  9211  000342  0E01               	movlw	1
  9212  000344  6F82               	movwf	_valid_cmd& (0+255),b
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;cmd_consol.c: 173: memset(str, 0, strlen(str));
  9216  000346  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
  9217  00034A  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9218  00034E  0E00               	movlw	0
  9219  000350  6E2B               	movwf	memset@c+1,c
  9220  000352  0E00               	movlw	0
  9221  000354  6E2A               	movwf	memset@c,c
  9222  000356  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
  9223  00035A  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9224  00035E  EC4C  F019         	call	_strlen	;wreg free
  9225  000362  C022  F02C         	movff	?_strlen,memset@n
  9226  000366  C023  F02D         	movff	?_strlen+1,memset@n+1
  9227  00036A  EC00  F01A         	call	_memset	;wreg free
  9228  00036E  D703               	goto	l6933
  9229  000370                     l784:
  9230  000370  C0D8  F014         	movff	parse_cmd_str@temp,strcmp@s1
  9231  000374  C0D9  F015         	movff	parse_cmd_str@temp+1,strcmp@s1+1
  9232  000378  0EC2               	movlw	low STR_37
  9233  00037A  6E16               	movwf	strcmp@s2,c
  9234  00037C  0EFF               	movlw	high STR_37
  9235  00037E  6E17               	movwf	strcmp@s2+1,c
  9236  000380  EC46  F018         	call	_strcmp	;wreg free
  9237  000384  5014               	movf	?_strcmp,w,c
  9238  000386  1015               	iorwf	?_strcmp+1,w,c
  9239  000388  A4D8               	btfss	status,2,c
  9240  00038A  D028               	goto	l791
  9241                           
  9242                           ;cmd_consol.c: 184: if (temp != (0)) {
  9243  00038C  0100               	movlb	0	; () banked
  9244  00038E  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9245  000390  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9246  000392  B4D8               	btfsc	status,2,c
  9247  000394  EFB4  F006         	goto	l870
  9248                           
  9249                           ; BSR set to: 0
  9250                           ;cmd_consol.c: 185: strcpy(CMD, temp);
  9251  000398  0EB7               	movlw	low _CMD
  9252  00039A  6E14               	movwf	strcpy@to,c
  9253  00039C  0E00               	movlw	high _CMD
  9254  00039E  6E15               	movwf	strcpy@to+1,c
  9255  0003A0  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
  9256  0003A4  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9257  0003A8  ECE9  F019         	call	_strcpy	;wreg free
  9258                           
  9259                           ;cmd_consol.c: 186: valid_cmd = 1;
  9260  0003AC  0E01               	movlw	1
  9261  0003AE  0100               	movlb	0	; () banked
  9262  0003B0  6F82               	movwf	_valid_cmd& (0+255),b
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;cmd_consol.c: 187: memset(str, 0, strlen(str));
  9266  0003B2  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
  9267  0003B6  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9268  0003BA  0E00               	movlw	0
  9269  0003BC  6E2B               	movwf	memset@c+1,c
  9270  0003BE  0E00               	movlw	0
  9271  0003C0  6E2A               	movwf	memset@c,c
  9272  0003C2  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
  9273  0003C6  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9274  0003CA  EC4C  F019         	call	_strlen	;wreg free
  9275  0003CE  C022  F02C         	movff	?_strlen,memset@n
  9276  0003D2  C023  F02D         	movff	?_strlen+1,memset@n+1
  9277  0003D6  EC00  F01A         	call	_memset	;wreg free
  9278  0003DA  D6CD               	goto	l6933
  9279  0003DC                     l791:
  9280  0003DC  C0D8  F014         	movff	parse_cmd_str@temp,strcmp@s1
  9281  0003E0  C0D9  F015         	movff	parse_cmd_str@temp+1,strcmp@s1+1
  9282  0003E4  0ECE               	movlw	low STR_38
  9283  0003E6  6E16               	movwf	strcmp@s2,c
  9284  0003E8  0EFF               	movlw	high STR_38
  9285  0003EA  6E17               	movwf	strcmp@s2+1,c
  9286  0003EC  EC46  F018         	call	_strcmp	;wreg free
  9287  0003F0  5014               	movf	?_strcmp,w,c
  9288  0003F2  1015               	iorwf	?_strcmp+1,w,c
  9289  0003F4  A4D8               	btfss	status,2,c
  9290  0003F6  D0AF               	goto	l794
  9291                           
  9292                           ;cmd_consol.c: 192: if (clcd_config_data.init_done == 1) {
  9293  0003F8  0444               	decf	_clcd_config_data,w,c
  9294  0003FA  A4D8               	btfss	status,2,c
  9295  0003FC  EFB4  F006         	goto	l870
  9296                           
  9297                           ;cmd_consol.c: 193: cmd_data.data_set = 0;
  9298  000400  0E00               	movlw	0
  9299  000402  0100               	movlb	0	; () banked
  9300  000404  6FAC               	movwf	(_cmd_data+41)& (0+255),b
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;cmd_consol.c: 195: if (temp != (0)) {
  9304  000406  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9305  000408  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9306  00040A  B4D8               	btfsc	status,2,c
  9307  00040C  EFB4  F006         	goto	l870
  9308                           
  9309                           ; BSR set to: 0
  9310                           ;cmd_consol.c: 196: printf("temp = %s, ", temp);
  9311  000410  0EDE               	movlw	low STR_39
  9312  000412  6E22               	movwf	printf@f,c
  9313  000414  0EFE               	movlw	high STR_39
  9314  000416  6E23               	movwf	printf@f+1,c
  9315  000418  C0D8  F024         	movff	parse_cmd_str@temp,?_printf+2
  9316  00041C  C0D9  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9317  000420  EC22  F011         	call	_printf	;wreg free
  9318                           
  9319                           ;cmd_consol.c: 197: strcpy(CMD, temp);
  9320  000424  0EB7               	movlw	low _CMD
  9321  000426  6E14               	movwf	strcpy@to,c
  9322  000428  0E00               	movlw	high _CMD
  9323  00042A  6E15               	movwf	strcpy@to+1,c
  9324  00042C  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
  9325  000430  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9326  000434  ECE9  F019         	call	_strcpy	;wreg free
  9327                           
  9328                           ;cmd_consol.c: 198: char uid = 0;
  9329  000438  0E00               	movlw	0
  9330  00043A  0100               	movlb	0	; () banked
  9331  00043C  6FD4               	movwf	parse_cmd_str@uid& (0+255),b
  9332                           
  9333                           ; BSR set to: 0
  9334                           ;cmd_consol.c: 199: cmd_data.uid = -1;
  9335  00043E  6983               	setf	_cmd_data& (0+255),b
  9336                           
  9337                           ; BSR set to: 0
  9338                           ;cmd_consol.c: 200: temp = strtok((0), "-', /=");
  9339  000440  0E00               	movlw	0
  9340  000442  6E1F               	movwf	strtok@s1,c
  9341  000444  0E00               	movlw	0
  9342  000446  6E20               	movwf	strtok@s1+1,c
  9343  000448  0EA7               	movlw	low STR_28
  9344  00044A  6E21               	movwf	strtok@s2,c
  9345  00044C  0EFF               	movlw	high STR_28
  9346  00044E  6E22               	movwf	strtok@s2+1,c
  9347  000450  ECA2  F014         	call	_strtok	;wreg free
  9348  000454  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
  9349  000458  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
  9350                           
  9351                           ;cmd_consol.c: 201: if (temp != (0)) {
  9352  00045C  0100               	movlb	0	; () banked
  9353  00045E  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9354  000460  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9355  000462  B4D8               	btfsc	status,2,c
  9356  000464  EFB4  F006         	goto	l870
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;cmd_consol.c: 202: printf("temp = %s, ", temp);
  9360  000468  0EDE               	movlw	low STR_39
  9361  00046A  6E22               	movwf	printf@f,c
  9362  00046C  0EFE               	movlw	high STR_39
  9363  00046E  6E23               	movwf	printf@f+1,c
  9364  000470  C0D8  F024         	movff	parse_cmd_str@temp,?_printf+2
  9365  000474  C0D9  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9366  000478  EC22  F011         	call	_printf	;wreg free
  9367                           
  9368                           ;cmd_consol.c: 203: char i = 0;
  9369  00047C  0E00               	movlw	0
  9370  00047E  0100               	movlb	0	; () banked
  9371  000480  6FCD               	movwf	parse_cmd_str@i& (0+255),b
  9372                           
  9373                           ; BSR set to: 0
  9374                           ;cmd_consol.c: 204: uid = temp[0];
  9375  000482  C0D8  FFD9         	movff	parse_cmd_str@temp,fsr2l
  9376  000486  C0D9  FFDA         	movff	parse_cmd_str@temp+1,fsr2h
  9377  00048A  50DF               	movf	indf2,w,c
  9378  00048C  6FD4               	movwf	parse_cmd_str@uid& (0+255),b
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;cmd_consol.c: 205: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9382  00048E  0E40               	movlw	64
  9383  000490  65D4               	cpfsgt	parse_cmd_str@uid& (0+255),b
  9384  000492  D05F               	goto	l798
  9385                           
  9386                           ; BSR set to: 0
  9387  000494  5047               	movf	_clcd_config_data+3,w,c
  9388  000496  5DD4               	subwf	parse_cmd_str@uid& (0+255),w,b
  9389  000498  B0D8               	btfsc	status,0,c
  9390  00049A  D05B               	goto	l798
  9391                           
  9392                           ; BSR set to: 0
  9393                           ;cmd_consol.c: 206: printf("uid = %d, ", uid);
  9394  00049C  0E2F               	movlw	low STR_42
  9395  00049E  6E22               	movwf	printf@f,c
  9396  0004A0  0EFF               	movlw	high STR_42
  9397  0004A2  6E23               	movwf	printf@f+1,c
  9398  0004A4  C0D4  F024         	movff	parse_cmd_str@uid,?_printf+2
  9399  0004A8  6A25               	clrf	?_printf+3,c
  9400  0004AA  EC22  F011         	call	_printf	;wreg free
  9401                           
  9402                           ;cmd_consol.c: 207: cmd_data.uid = uid;
  9403  0004AE  C0D4  F083         	movff	parse_cmd_str@uid,_cmd_data
  9404                           
  9405                           ;cmd_consol.c: 208: temp = strtok((0), ",");
  9406  0004B2  0E00               	movlw	0
  9407  0004B4  6E1F               	movwf	strtok@s1,c
  9408  0004B6  0E00               	movlw	0
  9409  0004B8  6E20               	movwf	strtok@s1+1,c
  9410  0004BA  0EFC               	movlw	low STR_43
  9411  0004BC  6E21               	movwf	strtok@s2,c
  9412  0004BE  0EFF               	movlw	high STR_43
  9413  0004C0  6E22               	movwf	strtok@s2+1,c
  9414  0004C2  ECA2  F014         	call	_strtok	;wreg free
  9415  0004C6  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
  9416  0004CA  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
  9417                           
  9418                           ;cmd_consol.c: 209: if (temp != (0)) {
  9419  0004CE  0100               	movlb	0	; () banked
  9420  0004D0  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9421  0004D2  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9422  0004D4  B4D8               	btfsc	status,2,c
  9423  0004D6  EFB4  F006         	goto	l870
  9424                           
  9425                           ; BSR set to: 0
  9426                           ;cmd_consol.c: 210: printf("str = %s\r\n", temp);
  9427  0004DA  0E24               	movlw	low STR_44
  9428  0004DC  6E22               	movwf	printf@f,c
  9429  0004DE  0EFF               	movlw	high STR_44
  9430  0004E0  6E23               	movwf	printf@f+1,c
  9431  0004E2  C0D8  F024         	movff	parse_cmd_str@temp,?_printf+2
  9432  0004E6  C0D9  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9433  0004EA  EC22  F011         	call	_printf	;wreg free
  9434                           
  9435                           ;cmd_consol.c: 211: if (strlen(temp) < 40) {
  9436  0004EE  C0D8  F022         	movff	parse_cmd_str@temp,strlen@s
  9437  0004F2  C0D9  F023         	movff	parse_cmd_str@temp+1,strlen@s+1
  9438  0004F6  EC4C  F019         	call	_strlen	;wreg free
  9439  0004FA  5023               	movf	?_strlen+1,w,c
  9440  0004FC  E128               	bnz	l7075
  9441  0004FE  0E28               	movlw	40
  9442  000500  5C22               	subwf	?_strlen,w,c
  9443  000502  B0D8               	btfsc	status,0,c
  9444  000504  D024               	goto	l800
  9445                           
  9446                           ;cmd_consol.c: 212: strcpy(cmd_data.data, temp);
  9447  000506  0E84               	movlw	low (_cmd_data+1)
  9448  000508  6E14               	movwf	strcpy@to,c
  9449  00050A  0E00               	movlw	high (_cmd_data+1)
  9450  00050C  6E15               	movwf	strcpy@to+1,c
  9451  00050E  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
  9452  000512  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9453  000516  ECE9  F019         	call	_strcpy	;wreg free
  9454                           
  9455                           ;cmd_consol.c: 213: valid_cmd = 1;
  9456  00051A  0E01               	movlw	1
  9457  00051C  0100               	movlb	0	; () banked
  9458  00051E  6F82               	movwf	_valid_cmd& (0+255),b
  9459                           
  9460                           ; BSR set to: 0
  9461                           ;cmd_consol.c: 214: cmd_data.data_set = 1;
  9462  000520  0E01               	movlw	1
  9463  000522  6FAC               	movwf	(_cmd_data+41)& (0+255),b
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;cmd_consol.c: 215: memset(str, 0, strlen(str));
  9467  000524  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
  9468  000528  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9469  00052C  0E00               	movlw	0
  9470  00052E  6E2B               	movwf	memset@c+1,c
  9471  000530  0E00               	movlw	0
  9472  000532  6E2A               	movwf	memset@c,c
  9473  000534  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
  9474  000538  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9475  00053C  EC4C  F019         	call	_strlen	;wreg free
  9476  000540  C022  F02C         	movff	?_strlen,memset@n
  9477  000544  C023  F02D         	movff	?_strlen+1,memset@n+1
  9478  000548  EC00  F01A         	call	_memset	;wreg free
  9479  00054C  D614               	goto	l6933
  9480  00054E                     l800:
  9481  00054E                     l7075:
  9482                           
  9483                           ;cmd_consol.c: 218: return 2;
  9484  00054E  0E02               	movlw	2
  9485  000550  0012               	return	
  9486  000552                     l798:
  9487                           
  9488                           ;cmd_consol.c: 222: return 8;
  9489  000552  0E08               	movlw	8
  9490  000554  0012               	return	
  9491  000556                     l794:
  9492  000556  C0D8  F014         	movff	parse_cmd_str@temp,strcmp@s1
  9493  00055A  C0D9  F015         	movff	parse_cmd_str@temp+1,strcmp@s1+1
  9494  00055E  0E8A               	movlw	low STR_45
  9495  000560  6E16               	movwf	strcmp@s2,c
  9496  000562  0EFF               	movlw	high STR_45
  9497  000564  6E17               	movwf	strcmp@s2+1,c
  9498  000566  EC46  F018         	call	_strcmp	;wreg free
  9499  00056A  5014               	movf	?_strcmp,w,c
  9500  00056C  1015               	iorwf	?_strcmp+1,w,c
  9501  00056E  A4D8               	btfss	status,2,c
  9502  000570  D0DF               	goto	l804
  9503                           
  9504                           ;cmd_consol.c: 228: printf("%s...4\r\n", temp);
  9505  000572  0E44               	movlw	low STR_46
  9506  000574  6E22               	movwf	printf@f,c
  9507  000576  0EFF               	movlw	high STR_46
  9508  000578  6E23               	movwf	printf@f+1,c
  9509  00057A  C0D8  F024         	movff	parse_cmd_str@temp,?_printf+2
  9510  00057E  C0D9  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9511  000582  EC22  F011         	call	_printf	;wreg free
  9512                           
  9513                           ;cmd_consol.c: 229: if (clcd_config_data.init_done == 1) {
  9514  000586  0444               	decf	_clcd_config_data,w,c
  9515  000588  A4D8               	btfss	status,2,c
  9516  00058A  D3EE               	goto	l870
  9517                           
  9518                           ;cmd_consol.c: 230: cmd_data.scroll_set = 0;
  9519  00058C  0E00               	movlw	0
  9520  00058E  0100               	movlb	0	; () banked
  9521  000590  6FB3               	movwf	(_cmd_data+48)& (0+255),b
  9522                           
  9523                           ; BSR set to: 0
  9524                           ;cmd_consol.c: 232: if (temp != (0)) {
  9525  000592  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9526  000594  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9527  000596  B4D8               	btfsc	status,2,c
  9528  000598  D3E7               	goto	l870
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;cmd_consol.c: 233: strcpy(CMD, temp);
  9532  00059A  0EB7               	movlw	low _CMD
  9533  00059C  6E14               	movwf	strcpy@to,c
  9534  00059E  0E00               	movlw	high _CMD
  9535  0005A0  6E15               	movwf	strcpy@to+1,c
  9536  0005A2  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
  9537  0005A6  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9538  0005AA  ECE9  F019         	call	_strcpy	;wreg free
  9539                           
  9540                           ;cmd_consol.c: 234: char scroll = 0;
  9541  0005AE  0E00               	movlw	0
  9542  0005B0  0100               	movlb	0	; () banked
  9543  0005B2  6FD5               	movwf	parse_cmd_str@scroll& (0+255),b
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;cmd_consol.c: 235: char uid = 0;
  9547  0005B4  0E00               	movlw	0
  9548  0005B6  6FD6               	movwf	parse_cmd_str@uid_1776& (0+255),b
  9549                           
  9550                           ; BSR set to: 0
  9551                           ;cmd_consol.c: 236: temp = strtok((0), "-', /=");
  9552  0005B8  0E00               	movlw	0
  9553  0005BA  6E1F               	movwf	strtok@s1,c
  9554  0005BC  0E00               	movlw	0
  9555  0005BE  6E20               	movwf	strtok@s1+1,c
  9556  0005C0  0EA7               	movlw	low STR_28
  9557  0005C2  6E21               	movwf	strtok@s2,c
  9558  0005C4  0EFF               	movlw	high STR_28
  9559  0005C6  6E22               	movwf	strtok@s2+1,c
  9560  0005C8  ECA2  F014         	call	_strtok	;wreg free
  9561  0005CC  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
  9562  0005D0  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
  9563                           
  9564                           ;cmd_consol.c: 237: if (temp != (0)) {
  9565  0005D4  0100               	movlb	0	; () banked
  9566  0005D6  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9567  0005D8  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9568  0005DA  B4D8               	btfsc	status,2,c
  9569  0005DC  D3C5               	goto	l870
  9570                           
  9571                           ; BSR set to: 0
  9572                           ;cmd_consol.c: 238: printf("%s...5\r\n", temp);
  9573  0005DE  0E4D               	movlw	low STR_48
  9574  0005E0  6E22               	movwf	printf@f,c
  9575  0005E2  0EFF               	movlw	high STR_48
  9576  0005E4  6E23               	movwf	printf@f+1,c
  9577  0005E6  C0D8  F024         	movff	parse_cmd_str@temp,?_printf+2
  9578  0005EA  C0D9  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9579  0005EE  EC22  F011         	call	_printf	;wreg free
  9580                           
  9581                           ;cmd_consol.c: 239: char i = 0;
  9582  0005F2  0E00               	movlw	0
  9583  0005F4  0100               	movlb	0	; () banked
  9584  0005F6  6FD3               	movwf	parse_cmd_str@i_1779& (0+255),b
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;cmd_consol.c: 240: uid = temp[0];
  9588  0005F8  C0D8  FFD9         	movff	parse_cmd_str@temp,fsr2l
  9589  0005FC  C0D9  FFDA         	movff	parse_cmd_str@temp+1,fsr2h
  9590  000600  50DF               	movf	indf2,w,c
  9591  000602  6FD6               	movwf	parse_cmd_str@uid_1776& (0+255),b
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;cmd_consol.c: 241: cmd_data.scroll = -1;
  9595  000604  69B2               	setf	(_cmd_data+47)& (0+255),b
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;cmd_consol.c: 242: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9599  000606  0E40               	movlw	64
  9600  000608  65D6               	cpfsgt	parse_cmd_str@uid_1776& (0+255),b
  9601  00060A  D090               	goto	l808
  9602                           
  9603                           ; BSR set to: 0
  9604  00060C  5047               	movf	_clcd_config_data+3,w,c
  9605  00060E  5DD6               	subwf	parse_cmd_str@uid_1776& (0+255),w,b
  9606  000610  B0D8               	btfsc	status,0,c
  9607  000612  D08C               	goto	l808
  9608                           
  9609                           ; BSR set to: 0
  9610                           ;cmd_consol.c: 243: printf("uid = %d, ", uid);
  9611  000614  0E2F               	movlw	low STR_42
  9612  000616  6E22               	movwf	printf@f,c
  9613  000618  0EFF               	movlw	high STR_42
  9614  00061A  6E23               	movwf	printf@f+1,c
  9615  00061C  C0D6  F024         	movff	parse_cmd_str@uid_1776,?_printf+2
  9616  000620  6A25               	clrf	?_printf+3,c
  9617  000622  EC22  F011         	call	_printf	;wreg free
  9618                           
  9619                           ;cmd_consol.c: 244: if (uid == cmd_data.uid) {
  9620  000626  0100               	movlb	0	; () banked
  9621  000628  51D6               	movf	parse_cmd_str@uid_1776& (0+255),w,b
  9622  00062A  1983               	xorwf	_cmd_data& (0+255),w,b
  9623  00062C  A4D8               	btfss	status,2,c
  9624  00062E  D39C               	goto	l870
  9625                           
  9626                           ; BSR set to: 0
  9627                           ;cmd_consol.c: 245: temp = strtok((0), "-', /=");
  9628  000630  0E00               	movlw	0
  9629  000632  6E1F               	movwf	strtok@s1,c
  9630  000634  0E00               	movlw	0
  9631  000636  6E20               	movwf	strtok@s1+1,c
  9632  000638  0EA7               	movlw	low STR_28
  9633  00063A  6E21               	movwf	strtok@s2,c
  9634  00063C  0EFF               	movlw	high STR_28
  9635  00063E  6E22               	movwf	strtok@s2+1,c
  9636  000640  ECA2  F014         	call	_strtok	;wreg free
  9637  000644  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
  9638  000648  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
  9639                           
  9640                           ;cmd_consol.c: 246: if (temp != (0)) {
  9641  00064C  0100               	movlb	0	; () banked
  9642  00064E  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9643  000650  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9644  000652  B4D8               	btfsc	status,2,c
  9645  000654  D389               	goto	l870
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;cmd_consol.c: 247: printf("%s...6\r\n", temp);
  9649  000656  0E56               	movlw	low STR_51
  9650  000658  6E22               	movwf	printf@f,c
  9651  00065A  0EFF               	movlw	high STR_51
  9652  00065C  6E23               	movwf	printf@f+1,c
  9653  00065E  C0D8  F024         	movff	parse_cmd_str@temp,?_printf+2
  9654  000662  C0D9  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9655  000666  EC22  F011         	call	_printf	;wreg free
  9656                           
  9657                           ;cmd_consol.c: 248: for (i = 0; i < strlen(temp); i++) {
  9658  00066A  0E00               	movlw	0
  9659  00066C  0100               	movlb	0	; () banked
  9660  00066E  6FD3               	movwf	parse_cmd_str@i_1779& (0+255),b
  9661  000670  D023               	goto	l811
  9662  000672                     
  9663                           ; BSR set to: 0
  9664                           ;cmd_consol.c: 249: if (isdigit(temp[i]) == 1) {
  9665                           
  9666                           ; BSR set to: 0
  9667  000672  51D3               	movf	parse_cmd_str@i_1779& (0+255),w,b
  9668  000674  0D01               	mullw	1
  9669  000676  50F3               	movf	prodl,w,c
  9670  000678  25D8               	addwf	parse_cmd_str@temp& (0+255),w,b
  9671  00067A  6ED9               	movwf	fsr2l,c
  9672  00067C  50F4               	movf	prodh,w,c
  9673  00067E  21D9               	addwfc	(parse_cmd_str@temp+1)& (0+255),w,b
  9674  000680  6EDA               	movwf	fsr2h,c
  9675  000682  50DF               	movf	indf2,w,c
  9676  000684  ECA4  F01A         	call	_isdigit
  9677  000688  A0D8               	btfss	status,0,c
  9678  00068A  D012               	goto	l813
  9679                           
  9680                           ;cmd_consol.c: 250: scroll = scroll * 10 + (temp[i] - '0');
  9681  00068C  0100               	movlb	0	; () banked
  9682  00068E  51D3               	movf	parse_cmd_str@i_1779& (0+255),w,b
  9683  000690  0D01               	mullw	1
  9684  000692  50F3               	movf	prodl,w,c
  9685  000694  25D8               	addwf	parse_cmd_str@temp& (0+255),w,b
  9686  000696  6ED9               	movwf	fsr2l,c
  9687  000698  50F4               	movf	prodh,w,c
  9688  00069A  21D9               	addwfc	(parse_cmd_str@temp+1)& (0+255),w,b
  9689  00069C  6EDA               	movwf	fsr2h,c
  9690  00069E  50DF               	movf	indf2,w,c
  9691  0006A0  6FCB               	movwf	??_parse_cmd_str& (0+255),b
  9692  0006A2  51D5               	movf	parse_cmd_str@scroll& (0+255),w,b
  9693  0006A4  0D0A               	mullw	10
  9694  0006A6  50F3               	movf	prodl,w,c
  9695  0006A8  25CB               	addwf	??_parse_cmd_str& (0+255),w,b
  9696  0006AA  0FD0               	addlw	208
  9697  0006AC  6FD5               	movwf	parse_cmd_str@scroll& (0+255),b
  9698                           
  9699                           ;cmd_consol.c: 251: } else {
  9700  0006AE  D002               	goto	l814
  9701  0006B0                     l813:
  9702                           
  9703                           ;cmd_consol.c: 253: return 0;
  9704                           
  9705                           ; BSR set to: 0
  9706  0006B0  0E00               	movlw	0
  9707  0006B2  0012               	return	
  9708  0006B4                     l814:
  9709  0006B4  0100               	movlb	0	; () banked
  9710  0006B6  2BD3               	incf	parse_cmd_str@i_1779& (0+255),f,b
  9711  0006B8                     l811:
  9712                           
  9713                           ; BSR set to: 0
  9714                           
  9715                           ; BSR set to: 0
  9716  0006B8  C0D8  F022         	movff	parse_cmd_str@temp,strlen@s
  9717  0006BC  C0D9  F023         	movff	parse_cmd_str@temp+1,strlen@s+1
  9718  0006C0  EC4C  F019         	call	_strlen	;wreg free
  9719  0006C4  0100               	movlb	0	; () banked
  9720  0006C6  51D3               	movf	parse_cmd_str@i_1779& (0+255),w,b
  9721  0006C8  6FCB               	movwf	??_parse_cmd_str& (0+255),b
  9722  0006CA  6BCC               	clrf	(??_parse_cmd_str+1)& (0+255),b
  9723  0006CC  5022               	movf	?_strlen,w,c
  9724  0006CE  5DCB               	subwf	??_parse_cmd_str& (0+255),w,b
  9725  0006D0  5023               	movf	?_strlen+1,w,c
  9726  0006D2  59CC               	subwfb	(??_parse_cmd_str+1)& (0+255),w,b
  9727  0006D4  A0D8               	btfss	status,0,c
  9728  0006D6  D7CD               	goto	l812
  9729                           
  9730                           ; BSR set to: 0
  9731                           ;cmd_consol.c: 254: }
  9732                           ;cmd_consol.c: 255: }
  9733                           ;cmd_consol.c: 257: if (scroll < 3) {
  9734                           
  9735                           ; BSR set to: 0
  9736  0006D8  0E03               	movlw	3
  9737  0006DA  61D5               	cpfslt	parse_cmd_str@scroll& (0+255),b
  9738  0006DC  D025               	goto	l816
  9739                           
  9740                           ; BSR set to: 0
  9741                           ;cmd_consol.c: 258: printf("scroll = %d, ", scroll);
  9742  0006DE  0E7B               	movlw	low STR_52
  9743  0006E0  6E22               	movwf	printf@f,c
  9744  0006E2  0EFE               	movlw	high STR_52
  9745  0006E4  6E23               	movwf	printf@f+1,c
  9746  0006E6  C0D5  F024         	movff	parse_cmd_str@scroll,?_printf+2
  9747  0006EA  6A25               	clrf	?_printf+3,c
  9748  0006EC  EC22  F011         	call	_printf	;wreg free
  9749                           
  9750                           ;cmd_consol.c: 259: cmd_data.scroll = scroll;
  9751  0006F0  C0D5  F0B2         	movff	parse_cmd_str@scroll,_cmd_data+47
  9752                           
  9753                           ;cmd_consol.c: 260: cmd_data.scroll_set = 1;
  9754  0006F4  0E01               	movlw	1
  9755  0006F6  0100               	movlb	0	; () banked
  9756  0006F8  6FB3               	movwf	(_cmd_data+48)& (0+255),b
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;cmd_consol.c: 261: valid_cmd = 1;
  9760  0006FA  0E01               	movlw	1
  9761  0006FC  6F82               	movwf	_valid_cmd& (0+255),b
  9762                           
  9763                           ; BSR set to: 0
  9764                           ;cmd_consol.c: 262: memset(str, 0, strlen(str));
  9765  0006FE  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
  9766  000702  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9767  000706  0E00               	movlw	0
  9768  000708  6E2B               	movwf	memset@c+1,c
  9769  00070A  0E00               	movlw	0
  9770  00070C  6E2A               	movwf	memset@c,c
  9771  00070E  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
  9772  000712  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9773  000716  EC4C  F019         	call	_strlen	;wreg free
  9774  00071A  C022  F02C         	movff	?_strlen,memset@n
  9775  00071E  C023  F02D         	movff	?_strlen+1,memset@n+1
  9776  000722  EC00  F01A         	call	_memset	;wreg free
  9777  000726  D527               	goto	l6933
  9778  000728                     l816:
  9779                           
  9780                           ;cmd_consol.c: 265: return 4;
  9781  000728  0E04               	movlw	4
  9782  00072A  0012               	return	
  9783  00072C                     l808:
  9784                           
  9785                           ;cmd_consol.c: 270: return 8;
  9786  00072C  0E08               	movlw	8
  9787  00072E  0012               	return	
  9788  000730                     l804:
  9789  000730  C0D8  F014         	movff	parse_cmd_str@temp,strcmp@s1
  9790  000734  C0D9  F015         	movff	parse_cmd_str@temp+1,strcmp@s1+1
  9791  000738  0EAE               	movlw	low STR_53
  9792  00073A  6E16               	movwf	strcmp@s2,c
  9793  00073C  0EFF               	movlw	high STR_53
  9794  00073E  6E17               	movwf	strcmp@s2+1,c
  9795  000740  EC46  F018         	call	_strcmp	;wreg free
  9796  000744  5014               	movf	?_strcmp,w,c
  9797  000746  1015               	iorwf	?_strcmp+1,w,c
  9798  000748  A4D8               	btfss	status,2,c
  9799  00074A  D11B               	goto	l820
  9800                           
  9801                           ;cmd_consol.c: 276: if (clcd_config_data.init_done == 1) {
  9802  00074C  0444               	decf	_clcd_config_data,w,c
  9803  00074E  A4D8               	btfss	status,2,c
  9804  000750  D30B               	goto	l870
  9805                           
  9806                           ;cmd_consol.c: 277: cmd_data.row_col_set = 0;
  9807  000752  0E00               	movlw	0
  9808  000754  0100               	movlb	0	; () banked
  9809  000756  6FB1               	movwf	(_cmd_data+46)& (0+255),b
  9810                           
  9811                           ; BSR set to: 0
  9812                           ;cmd_consol.c: 279: if (temp != (0)) {
  9813  000758  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9814  00075A  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9815  00075C  B4D8               	btfsc	status,2,c
  9816  00075E  D304               	goto	l870
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;cmd_consol.c: 280: strcpy(CMD, temp);
  9820  000760  0EB7               	movlw	low _CMD
  9821  000762  6E14               	movwf	strcpy@to,c
  9822  000764  0E00               	movlw	high _CMD
  9823  000766  6E15               	movwf	strcpy@to+1,c
  9824  000768  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
  9825  00076C  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9826  000770  ECE9  F019         	call	_strcpy	;wreg free
  9827                           
  9828                           ;cmd_consol.c: 281: temp = strtok((0), "-', /=");
  9829  000774  0E00               	movlw	0
  9830  000776  6E1F               	movwf	strtok@s1,c
  9831  000778  0E00               	movlw	0
  9832  00077A  6E20               	movwf	strtok@s1+1,c
  9833  00077C  0EA7               	movlw	low STR_28
  9834  00077E  6E21               	movwf	strtok@s2,c
  9835  000780  0EFF               	movlw	high STR_28
  9836  000782  6E22               	movwf	strtok@s2+1,c
  9837  000784  ECA2  F014         	call	_strtok	;wreg free
  9838  000788  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
  9839  00078C  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
  9840                           
  9841                           ;cmd_consol.c: 282: char uid = 0;
  9842  000790  0E00               	movlw	0
  9843  000792  0100               	movlb	0	; () banked
  9844  000794  6FD7               	movwf	parse_cmd_str@uid_1786& (0+255),b
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;cmd_consol.c: 283: if (temp != (0)) {
  9848  000796  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9849  000798  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9850  00079A  B4D8               	btfsc	status,2,c
  9851  00079C  D2E5               	goto	l870
  9852                           
  9853                           ; BSR set to: 0
  9854                           ;cmd_consol.c: 284: char i = 0;
  9855  00079E  0E00               	movlw	0
  9856  0007A0  6FCE               	movwf	parse_cmd_str@i_1787& (0+255),b
  9857                           
  9858                           ; BSR set to: 0
  9859                           ;cmd_consol.c: 285: uid = temp[0];
  9860  0007A2  C0D8  FFD9         	movff	parse_cmd_str@temp,fsr2l
  9861  0007A6  C0D9  FFDA         	movff	parse_cmd_str@temp+1,fsr2h
  9862  0007AA  50DF               	movf	indf2,w,c
  9863  0007AC  6FD7               	movwf	parse_cmd_str@uid_1786& (0+255),b
  9864                           
  9865                           ; BSR set to: 0
  9866                           ;cmd_consol.c: 286: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9867  0007AE  0E40               	movlw	64
  9868  0007B0  65D7               	cpfsgt	parse_cmd_str@uid_1786& (0+255),b
  9869  0007B2  D0E5               	goto	l824
  9870                           
  9871                           ; BSR set to: 0
  9872  0007B4  5047               	movf	_clcd_config_data+3,w,c
  9873  0007B6  5DD7               	subwf	parse_cmd_str@uid_1786& (0+255),w,b
  9874  0007B8  B0D8               	btfsc	status,0,c
  9875  0007BA  D0E1               	goto	l824
  9876                           
  9877                           ; BSR set to: 0
  9878                           ;cmd_consol.c: 287: printf("uid = %d,\r\n", uid);
  9879  0007BC  0E96               	movlw	low STR_55
  9880  0007BE  6E22               	movwf	printf@f,c
  9881  0007C0  0EFE               	movlw	high STR_55
  9882  0007C2  6E23               	movwf	printf@f+1,c
  9883  0007C4  C0D7  F024         	movff	parse_cmd_str@uid_1786,?_printf+2
  9884  0007C8  6A25               	clrf	?_printf+3,c
  9885  0007CA  EC22  F011         	call	_printf	;wreg free
  9886                           
  9887                           ;cmd_consol.c: 288: if (uid == cmd_data.uid) {
  9888  0007CE  0100               	movlb	0	; () banked
  9889  0007D0  51D7               	movf	parse_cmd_str@uid_1786& (0+255),w,b
  9890  0007D2  1983               	xorwf	_cmd_data& (0+255),w,b
  9891  0007D4  A4D8               	btfss	status,2,c
  9892  0007D6  D2C8               	goto	l870
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;cmd_consol.c: 289: temp = strtok((0), "-', /=");
  9896  0007D8  0E00               	movlw	0
  9897  0007DA  6E1F               	movwf	strtok@s1,c
  9898  0007DC  0E00               	movlw	0
  9899  0007DE  6E20               	movwf	strtok@s1+1,c
  9900  0007E0  0EA7               	movlw	low STR_28
  9901  0007E2  6E21               	movwf	strtok@s2,c
  9902  0007E4  0EFF               	movlw	high STR_28
  9903  0007E6  6E22               	movwf	strtok@s2+1,c
  9904  0007E8  ECA2  F014         	call	_strtok	;wreg free
  9905  0007EC  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
  9906  0007F0  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
  9907                           
  9908                           ;cmd_consol.c: 290: if (temp != (0)) {
  9909  0007F4  0100               	movlb	0	; () banked
  9910  0007F6  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9911  0007F8  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9912  0007FA  B4D8               	btfsc	status,2,c
  9913  0007FC  D2B5               	goto	l870
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;cmd_consol.c: 291: collect_row(temp, &cmd_data.start_row);
  9917  0007FE  C0D8  F034         	movff	parse_cmd_str@temp,collect_row@str
  9918  000802  C0D9  F035         	movff	parse_cmd_str@temp+1,collect_row@str+1
  9919  000806  0EAD               	movlw	low (_cmd_data+42)
  9920  000808  6E36               	movwf	collect_row@data_row,c
  9921  00080A  0E00               	movlw	high (_cmd_data+42)
  9922  00080C  6E37               	movwf	collect_row@data_row+1,c
  9923  00080E  EC92  F013         	call	_collect_row	;wreg free
  9924                           
  9925                           ;cmd_consol.c: 292: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
  9926  000812  0E23               	movlw	low STR_57
  9927  000814  6E22               	movwf	printf@f,c
  9928  000816  0EFD               	movlw	high STR_57
  9929  000818  6E23               	movwf	printf@f+1,c
  9930  00081A  C0AD  F024         	movff	_cmd_data+42,?_printf+2
  9931  00081E  6A25               	clrf	?_printf+3,c
  9932  000820  EC22  F011         	call	_printf	;wreg free
  9933                           
  9934                           ;cmd_consol.c: 293: if (cmd_data.start_row != 255) {
  9935  000824  0100               	movlb	0	; () banked
  9936  000826  29AD               	incf	(_cmd_data+42)& (0+255),w,b
  9937  000828  B4D8               	btfsc	status,2,c
  9938  00082A  D0A7               	goto	l827
  9939                           
  9940                           ; BSR set to: 0
  9941                           ;cmd_consol.c: 294: temp = strtok((0), "-', /=");
  9942  00082C  0E00               	movlw	0
  9943  00082E  6E1F               	movwf	strtok@s1,c
  9944  000830  0E00               	movlw	0
  9945  000832  6E20               	movwf	strtok@s1+1,c
  9946  000834  0EA7               	movlw	low STR_28
  9947  000836  6E21               	movwf	strtok@s2,c
  9948  000838  0EFF               	movlw	high STR_28
  9949  00083A  6E22               	movwf	strtok@s2+1,c
  9950  00083C  ECA2  F014         	call	_strtok	;wreg free
  9951  000840  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
  9952  000844  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
  9953                           
  9954                           ;cmd_consol.c: 295: if (temp != (0)) {
  9955  000848  0100               	movlb	0	; () banked
  9956  00084A  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
  9957  00084C  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9958  00084E  B4D8               	btfsc	status,2,c
  9959  000850  D28B               	goto	l870
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;cmd_consol.c: 296: collect_column(temp, &cmd_data.start_col);
  9963  000852  C0D8  F034         	movff	parse_cmd_str@temp,collect_column@str
  9964  000856  C0D9  F035         	movff	parse_cmd_str@temp+1,collect_column@str+1
  9965  00085A  0EAE               	movlw	low (_cmd_data+43)
  9966  00085C  6E36               	movwf	collect_column@data_column,c
  9967  00085E  0E00               	movlw	high (_cmd_data+43)
  9968  000860  6E37               	movwf	collect_column@data_column+1,c
  9969  000862  ECED  F013         	call	_collect_column	;wreg free
  9970                           
  9971                           ;cmd_consol.c: 297: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
  9972  000866  0E08               	movlw	low STR_59
  9973  000868  6E22               	movwf	printf@f,c
  9974  00086A  0EFD               	movlw	high STR_59
  9975  00086C  6E23               	movwf	printf@f+1,c
  9976  00086E  C0AE  F024         	movff	_cmd_data+43,?_printf+2
  9977  000872  6A25               	clrf	?_printf+3,c
  9978  000874  EC22  F011         	call	_printf	;wreg free
  9979                           
  9980                           ;cmd_consol.c: 298: if (cmd_data.start_row != 255) {
  9981  000878  0100               	movlb	0	; () banked
  9982  00087A  29AD               	incf	(_cmd_data+42)& (0+255),w,b
  9983  00087C  B4D8               	btfsc	status,2,c
  9984  00087E  D07B               	goto	l829
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;cmd_consol.c: 299: temp = strtok((0), "-', /=");
  9988  000880  0E00               	movlw	0
  9989  000882  6E1F               	movwf	strtok@s1,c
  9990  000884  0E00               	movlw	0
  9991  000886  6E20               	movwf	strtok@s1+1,c
  9992  000888  0EA7               	movlw	low STR_28
  9993  00088A  6E21               	movwf	strtok@s2,c
  9994  00088C  0EFF               	movlw	high STR_28
  9995  00088E  6E22               	movwf	strtok@s2+1,c
  9996  000890  ECA2  F014         	call	_strtok	;wreg free
  9997  000894  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
  9998  000898  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
  9999                           
 10000                           ;cmd_consol.c: 300: if (temp != (0)) {
 10001  00089C  0100               	movlb	0	; () banked
 10002  00089E  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
 10003  0008A0  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10004  0008A2  B4D8               	btfsc	status,2,c
 10005  0008A4  D261               	goto	l870
 10006                           
 10007                           ; BSR set to: 0
 10008                           ;cmd_consol.c: 301: collect_row(temp, &cmd_data.end_row);
 10009  0008A6  C0D8  F034         	movff	parse_cmd_str@temp,collect_row@str
 10010  0008AA  C0D9  F035         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10011  0008AE  0EAF               	movlw	low (_cmd_data+44)
 10012  0008B0  6E36               	movwf	collect_row@data_row,c
 10013  0008B2  0E00               	movlw	high (_cmd_data+44)
 10014  0008B4  6E37               	movwf	collect_row@data_row+1,c
 10015  0008B6  EC92  F013         	call	_collect_row	;wreg free
 10016                           
 10017                           ;cmd_consol.c: 302: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 10018  0008BA  0EA5               	movlw	low STR_61
 10019  0008BC  6E22               	movwf	printf@f,c
 10020  0008BE  0EFD               	movlw	high STR_61
 10021  0008C0  6E23               	movwf	printf@f+1,c
 10022  0008C2  C0AF  F024         	movff	_cmd_data+44,?_printf+2
 10023  0008C6  6A25               	clrf	?_printf+3,c
 10024  0008C8  EC22  F011         	call	_printf	;wreg free
 10025                           
 10026                           ;cmd_consol.c: 303: if (cmd_data.end_row != 255) {
 10027  0008CC  0100               	movlb	0	; () banked
 10028  0008CE  29AF               	incf	(_cmd_data+44)& (0+255),w,b
 10029  0008D0  B4D8               	btfsc	status,2,c
 10030  0008D2  D04F               	goto	l831
 10031                           
 10032                           ; BSR set to: 0
 10033                           ;cmd_consol.c: 304: temp = strtok((0), "-', /=");
 10034  0008D4  0E00               	movlw	0
 10035  0008D6  6E1F               	movwf	strtok@s1,c
 10036  0008D8  0E00               	movlw	0
 10037  0008DA  6E20               	movwf	strtok@s1+1,c
 10038  0008DC  0EA7               	movlw	low STR_28
 10039  0008DE  6E21               	movwf	strtok@s2,c
 10040  0008E0  0EFF               	movlw	high STR_28
 10041  0008E2  6E22               	movwf	strtok@s2+1,c
 10042  0008E4  ECA2  F014         	call	_strtok	;wreg free
 10043  0008E8  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
 10044  0008EC  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
 10045                           
 10046                           ;cmd_consol.c: 305: if (temp != (0)) {
 10047  0008F0  0100               	movlb	0	; () banked
 10048  0008F2  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
 10049  0008F4  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10050  0008F6  B4D8               	btfsc	status,2,c
 10051  0008F8  D237               	goto	l870
 10052                           
 10053                           ; BSR set to: 0
 10054                           ;cmd_consol.c: 306: printf("col = %s\r\n", temp);
 10055  0008FA  0E19               	movlw	low STR_63
 10056  0008FC  6E22               	movwf	printf@f,c
 10057  0008FE  0EFF               	movlw	high STR_63
 10058  000900  6E23               	movwf	printf@f+1,c
 10059  000902  C0D8  F024         	movff	parse_cmd_str@temp,?_printf+2
 10060  000906  C0D9  F025         	movff	parse_cmd_str@temp+1,?_printf+3
 10061  00090A  EC22  F011         	call	_printf	;wreg free
 10062                           
 10063                           ;cmd_consol.c: 307: collect_column(temp, &cmd_data.end_col);
 10064  00090E  C0D8  F034         	movff	parse_cmd_str@temp,collect_column@str
 10065  000912  C0D9  F035         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10066  000916  0EB0               	movlw	low (_cmd_data+45)
 10067  000918  6E36               	movwf	collect_column@data_column,c
 10068  00091A  0E00               	movlw	high (_cmd_data+45)
 10069  00091C  6E37               	movwf	collect_column@data_column+1,c
 10070  00091E  ECED  F013         	call	_collect_column	;wreg free
 10071                           
 10072                           ;cmd_consol.c: 308: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 10073  000922  0E8C               	movlw	low STR_64
 10074  000924  6E22               	movwf	printf@f,c
 10075  000926  0EFD               	movlw	high STR_64
 10076  000928  6E23               	movwf	printf@f+1,c
 10077  00092A  C0B0  F024         	movff	_cmd_data+45,?_printf+2
 10078  00092E  6A25               	clrf	?_printf+3,c
 10079  000930  EC22  F011         	call	_printf	;wreg free
 10080                           
 10081                           ;cmd_consol.c: 309: if (cmd_data.end_row != 255) {
 10082  000934  0100               	movlb	0	; () banked
 10083  000936  29AF               	incf	(_cmd_data+44)& (0+255),w,b
 10084  000938  B4D8               	btfsc	status,2,c
 10085  00093A  D019               	goto	l833
 10086                           
 10087                           ; BSR set to: 0
 10088                           ;cmd_consol.c: 310: cmd_data.row_col_set = 1;
 10089  00093C  0E01               	movlw	1
 10090  00093E  6FB1               	movwf	(_cmd_data+46)& (0+255),b
 10091                           
 10092                           ;cmd_consol.c: 311: valid_cmd = 1;
 10093  000940  0E01               	movlw	1
 10094  000942  6F82               	movwf	_valid_cmd& (0+255),b
 10095                           
 10096                           ; BSR set to: 0
 10097                           ;cmd_consol.c: 312: memset(str, 0, strlen(str));
 10098  000944  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
 10099  000948  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
 10100  00094C  0E00               	movlw	0
 10101  00094E  6E2B               	movwf	memset@c+1,c
 10102  000950  0E00               	movlw	0
 10103  000952  6E2A               	movwf	memset@c,c
 10104  000954  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
 10105  000958  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
 10106  00095C  EC4C  F019         	call	_strlen	;wreg free
 10107  000960  C022  F02C         	movff	?_strlen,memset@n
 10108  000964  C023  F02D         	movff	?_strlen+1,memset@n+1
 10109  000968  EC00  F01A         	call	_memset	;wreg free
 10110  00096C  D404               	goto	l6933
 10111  00096E                     l833:
 10112                           
 10113                           ;cmd_consol.c: 315: return 3;
 10114  00096E  0E03               	movlw	3
 10115  000970  0012               	return	
 10116  000972                     l831:
 10117                           
 10118                           ;cmd_consol.c: 319: return 3;
 10119  000972  0E03               	movlw	3
 10120  000974  0012               	return	
 10121  000976                     l829:
 10122                           
 10123                           ;cmd_consol.c: 323: return 3;
 10124  000976  0E03               	movlw	3
 10125  000978  0012               	return	
 10126  00097A                     l827:
 10127                           
 10128                           ;cmd_consol.c: 327: return 3;
 10129  00097A  0E03               	movlw	3
 10130  00097C  0012               	return	
 10131  00097E                     l824:
 10132                           
 10133                           ;cmd_consol.c: 332: return 8;
 10134  00097E  0E08               	movlw	8
 10135  000980  0012               	return	
 10136  000982                     l820:
 10137  000982  C0D8  F014         	movff	parse_cmd_str@temp,strcmp@s1
 10138  000986  C0D9  F015         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 10139  00098A  0EB5               	movlw	low STR_65
 10140  00098C  6E16               	movwf	strcmp@s2,c
 10141  00098E  0EFF               	movlw	high STR_65
 10142  000990  6E17               	movwf	strcmp@s2+1,c
 10143  000992  EC46  F018         	call	_strcmp	;wreg free
 10144  000996  5014               	movf	?_strcmp,w,c
 10145  000998  1015               	iorwf	?_strcmp+1,w,c
 10146  00099A  A4D8               	btfss	status,2,c
 10147  00099C  D023               	goto	l840
 10148                           
 10149                           ;cmd_consol.c: 338: strcpy(CMD, temp);
 10150  00099E  0EB7               	movlw	low _CMD
 10151  0009A0  6E14               	movwf	strcpy@to,c
 10152  0009A2  0E00               	movlw	high _CMD
 10153  0009A4  6E15               	movwf	strcpy@to+1,c
 10154  0009A6  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
 10155  0009AA  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10156  0009AE  ECE9  F019         	call	_strcpy	;wreg free
 10157                           
 10158                           ;cmd_consol.c: 339: memset(str, 0, strlen(str));
 10159  0009B2  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
 10160  0009B6  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
 10161  0009BA  0E00               	movlw	0
 10162  0009BC  6E2B               	movwf	memset@c+1,c
 10163  0009BE  0E00               	movlw	0
 10164  0009C0  6E2A               	movwf	memset@c,c
 10165  0009C2  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
 10166  0009C6  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
 10167  0009CA  EC4C  F019         	call	_strlen	;wreg free
 10168  0009CE  C022  F02C         	movff	?_strlen,memset@n
 10169  0009D2  C023  F02D         	movff	?_strlen+1,memset@n+1
 10170  0009D6  EC00  F01A         	call	_memset	;wreg free
 10171                           
 10172                           ;cmd_consol.c: 340: valid_cmd = 1;
 10173  0009DA  0E01               	movlw	1
 10174  0009DC  0100               	movlb	0	; () banked
 10175  0009DE  6F82               	movwf	_valid_cmd& (0+255),b
 10176  0009E0  EFBB  F000         	goto	l6933
 10177  0009E4                     l840:
 10178                           
 10179                           ; BSR set to: 0
 10180  0009E4  C0D8  F014         	movff	parse_cmd_str@temp,strcmp@s1
 10181  0009E8  C0D9  F015         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 10182  0009EC  0ED9               	movlw	low STR_66
 10183  0009EE  6E16               	movwf	strcmp@s2,c
 10184  0009F0  0EFF               	movlw	high STR_66
 10185  0009F2  6E17               	movwf	strcmp@s2+1,c
 10186  0009F4  EC46  F018         	call	_strcmp	;wreg free
 10187  0009F8  5014               	movf	?_strcmp,w,c
 10188  0009FA  1015               	iorwf	?_strcmp+1,w,c
 10189  0009FC  A4D8               	btfss	status,2,c
 10190  0009FE  D183               	goto	l842
 10191                           
 10192                           ;cmd_consol.c: 343: if (clcd_config_data.init_done == 1) {
 10193  000A00  0444               	decf	_clcd_config_data,w,c
 10194  000A02  A4D8               	btfss	status,2,c
 10195  000A04  D1B1               	goto	l870
 10196                           
 10197                           ;cmd_consol.c: 345: if (temp != (0)) {
 10198  000A06  0100               	movlb	0	; () banked
 10199  000A08  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
 10200  000A0A  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10201  000A0C  B4D8               	btfsc	status,2,c
 10202  000A0E  D1AC               	goto	l870
 10203                           
 10204                           ; BSR set to: 0
 10205                           ;cmd_consol.c: 346: strcpy(CMD, temp);
 10206  000A10  0EB7               	movlw	low _CMD
 10207  000A12  6E14               	movwf	strcpy@to,c
 10208  000A14  0E00               	movlw	high _CMD
 10209  000A16  6E15               	movwf	strcpy@to+1,c
 10210  000A18  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
 10211  000A1C  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10212  000A20  ECE9  F019         	call	_strcpy	;wreg free
 10213                           
 10214                           ;cmd_consol.c: 347: printf("CMD=%s\r\n", CMD);
 10215  000A24  0E5F               	movlw	low STR_67
 10216  000A26  6E22               	movwf	printf@f,c
 10217  000A28  0EFF               	movlw	high STR_67
 10218  000A2A  6E23               	movwf	printf@f+1,c
 10219  000A2C  0EB7               	movlw	low _CMD
 10220  000A2E  6E24               	movwf	?_printf+2,c
 10221  000A30  0E00               	movlw	high _CMD
 10222  000A32  6E25               	movwf	?_printf+3,c
 10223  000A34  EC22  F011         	call	_printf	;wreg free
 10224                           
 10225                           ;cmd_consol.c: 348: temp = strtok((0), ",");
 10226  000A38  0E00               	movlw	0
 10227  000A3A  6E1F               	movwf	strtok@s1,c
 10228  000A3C  0E00               	movlw	0
 10229  000A3E  6E20               	movwf	strtok@s1+1,c
 10230  000A40  0EFC               	movlw	low STR_43
 10231  000A42  6E21               	movwf	strtok@s2,c
 10232  000A44  0EFF               	movlw	high STR_43
 10233  000A46  6E22               	movwf	strtok@s2+1,c
 10234  000A48  ECA2  F014         	call	_strtok	;wreg free
 10235  000A4C  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
 10236  000A50  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
 10237                           
 10238                           ;cmd_consol.c: 349: if (temp != (0)) {
 10239  000A54  0100               	movlb	0	; () banked
 10240  000A56  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
 10241  000A58  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10242  000A5A  B4D8               	btfsc	status,2,c
 10243  000A5C  D185               	goto	l870
 10244                           
 10245                           ; BSR set to: 0
 10246                           ;cmd_consol.c: 350: if (get_str(temp, cmd_data.data) == 1) {
 10247  000A5E  C0D8  F030         	movff	parse_cmd_str@temp,get_str@str
 10248  000A62  C0D9  F031         	movff	parse_cmd_str@temp+1,get_str@str+1
 10249  000A66  0E84               	movlw	low (_cmd_data+1)
 10250  000A68  6E32               	movwf	get_str@data_str,c
 10251  000A6A  0E00               	movlw	high (_cmd_data+1)
 10252  000A6C  6E33               	movwf	get_str@data_str+1,c
 10253  000A6E  ECED  F016         	call	_get_str	;wreg free
 10254  000A72  06E8               	decf	wreg,f,c
 10255  000A74  A4D8               	btfss	status,2,c
 10256  000A76  D145               	goto	l846
 10257                           
 10258                           ;cmd_consol.c: 351: printf("data=%s\r\n", cmd_data.data);
 10259  000A78  0E3A               	movlw	low STR_69
 10260  000A7A  6E22               	movwf	printf@f,c
 10261  000A7C  0EFF               	movlw	high STR_69
 10262  000A7E  6E23               	movwf	printf@f+1,c
 10263  000A80  0E84               	movlw	low (_cmd_data+1)
 10264  000A82  6E24               	movwf	?_printf+2,c
 10265  000A84  0E00               	movlw	high (_cmd_data+1)
 10266  000A86  6E25               	movwf	?_printf+3,c
 10267  000A88  EC22  F011         	call	_printf	;wreg free
 10268                           
 10269                           ;cmd_consol.c: 352: temp = strtok((0), "-', /=");
 10270  000A8C  0E00               	movlw	0
 10271  000A8E  6E1F               	movwf	strtok@s1,c
 10272  000A90  0E00               	movlw	0
 10273  000A92  6E20               	movwf	strtok@s1+1,c
 10274  000A94  0EA7               	movlw	low STR_28
 10275  000A96  6E21               	movwf	strtok@s2,c
 10276  000A98  0EFF               	movlw	high STR_28
 10277  000A9A  6E22               	movwf	strtok@s2+1,c
 10278  000A9C  ECA2  F014         	call	_strtok	;wreg free
 10279  000AA0  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
 10280  000AA4  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
 10281                           
 10282                           ;cmd_consol.c: 353: if (temp != (0)) {
 10283  000AA8  0100               	movlb	0	; () banked
 10284  000AAA  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
 10285  000AAC  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10286  000AAE  B4D8               	btfsc	status,2,c
 10287  000AB0  D15B               	goto	l870
 10288                           
 10289                           ; BSR set to: 0
 10290                           ;cmd_consol.c: 354: collect_row(temp, &cmd_data.start_row);
 10291  000AB2  C0D8  F034         	movff	parse_cmd_str@temp,collect_row@str
 10292  000AB6  C0D9  F035         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10293  000ABA  0EAD               	movlw	low (_cmd_data+42)
 10294  000ABC  6E36               	movwf	collect_row@data_row,c
 10295  000ABE  0E00               	movlw	high (_cmd_data+42)
 10296  000AC0  6E37               	movwf	collect_row@data_row+1,c
 10297  000AC2  EC92  F013         	call	_collect_row	;wreg free
 10298                           
 10299                           ;cmd_consol.c: 355: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 10300  000AC6  0E23               	movlw	low STR_57
 10301  000AC8  6E22               	movwf	printf@f,c
 10302  000ACA  0EFD               	movlw	high STR_57
 10303  000ACC  6E23               	movwf	printf@f+1,c
 10304  000ACE  C0AD  F024         	movff	_cmd_data+42,?_printf+2
 10305  000AD2  6A25               	clrf	?_printf+3,c
 10306  000AD4  EC22  F011         	call	_printf	;wreg free
 10307                           
 10308                           ;cmd_consol.c: 356: if (cmd_data.start_row != 255) {
 10309  000AD8  0100               	movlb	0	; () banked
 10310  000ADA  29AD               	incf	(_cmd_data+42)& (0+255),w,b
 10311  000ADC  B4D8               	btfsc	status,2,c
 10312  000ADE  D10F               	goto	l848
 10313                           
 10314                           ; BSR set to: 0
 10315                           ;cmd_consol.c: 357: temp = strtok((0), "-', /=");
 10316  000AE0  0E00               	movlw	0
 10317  000AE2  6E1F               	movwf	strtok@s1,c
 10318  000AE4  0E00               	movlw	0
 10319  000AE6  6E20               	movwf	strtok@s1+1,c
 10320  000AE8  0EA7               	movlw	low STR_28
 10321  000AEA  6E21               	movwf	strtok@s2,c
 10322  000AEC  0EFF               	movlw	high STR_28
 10323  000AEE  6E22               	movwf	strtok@s2+1,c
 10324  000AF0  ECA2  F014         	call	_strtok	;wreg free
 10325  000AF4  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
 10326  000AF8  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
 10327                           
 10328                           ;cmd_consol.c: 358: if (temp != (0)) {
 10329  000AFC  0100               	movlb	0	; () banked
 10330  000AFE  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
 10331  000B00  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10332  000B02  B4D8               	btfsc	status,2,c
 10333  000B04  D131               	goto	l870
 10334                           
 10335                           ; BSR set to: 0
 10336                           ;cmd_consol.c: 359: collect_column(temp, &cmd_data.start_col);
 10337  000B06  C0D8  F034         	movff	parse_cmd_str@temp,collect_column@str
 10338  000B0A  C0D9  F035         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10339  000B0E  0EAE               	movlw	low (_cmd_data+43)
 10340  000B10  6E36               	movwf	collect_column@data_column,c
 10341  000B12  0E00               	movlw	high (_cmd_data+43)
 10342  000B14  6E37               	movwf	collect_column@data_column+1,c
 10343  000B16  ECED  F013         	call	_collect_column	;wreg free
 10344                           
 10345                           ;cmd_consol.c: 360: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 10346  000B1A  0E08               	movlw	low STR_59
 10347  000B1C  6E22               	movwf	printf@f,c
 10348  000B1E  0EFD               	movlw	high STR_59
 10349  000B20  6E23               	movwf	printf@f+1,c
 10350  000B22  C0AE  F024         	movff	_cmd_data+43,?_printf+2
 10351  000B26  6A25               	clrf	?_printf+3,c
 10352  000B28  EC22  F011         	call	_printf	;wreg free
 10353                           
 10354                           ;cmd_consol.c: 361: if (cmd_data.start_row != 255) {
 10355  000B2C  0100               	movlb	0	; () banked
 10356  000B2E  29AD               	incf	(_cmd_data+42)& (0+255),w,b
 10357  000B30  B4D8               	btfsc	status,2,c
 10358  000B32  D0E3               	goto	l850
 10359                           
 10360                           ; BSR set to: 0
 10361                           ;cmd_consol.c: 362: temp = strtok((0), "-', /=");
 10362  000B34  0E00               	movlw	0
 10363  000B36  6E1F               	movwf	strtok@s1,c
 10364  000B38  0E00               	movlw	0
 10365  000B3A  6E20               	movwf	strtok@s1+1,c
 10366  000B3C  0EA7               	movlw	low STR_28
 10367  000B3E  6E21               	movwf	strtok@s2,c
 10368  000B40  0EFF               	movlw	high STR_28
 10369  000B42  6E22               	movwf	strtok@s2+1,c
 10370  000B44  ECA2  F014         	call	_strtok	;wreg free
 10371  000B48  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
 10372  000B4C  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
 10373                           
 10374                           ;cmd_consol.c: 363: if (temp != (0)) {
 10375  000B50  0100               	movlb	0	; () banked
 10376  000B52  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
 10377  000B54  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10378  000B56  B4D8               	btfsc	status,2,c
 10379  000B58  D107               	goto	l870
 10380                           
 10381                           ; BSR set to: 0
 10382                           ;cmd_consol.c: 364: collect_row(temp, &cmd_data.end_row);
 10383  000B5A  C0D8  F034         	movff	parse_cmd_str@temp,collect_row@str
 10384  000B5E  C0D9  F035         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10385  000B62  0EAF               	movlw	low (_cmd_data+44)
 10386  000B64  6E36               	movwf	collect_row@data_row,c
 10387  000B66  0E00               	movlw	high (_cmd_data+44)
 10388  000B68  6E37               	movwf	collect_row@data_row+1,c
 10389  000B6A  EC92  F013         	call	_collect_row	;wreg free
 10390                           
 10391                           ;cmd_consol.c: 365: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 10392  000B6E  0EA5               	movlw	low STR_61
 10393  000B70  6E22               	movwf	printf@f,c
 10394  000B72  0EFD               	movlw	high STR_61
 10395  000B74  6E23               	movwf	printf@f+1,c
 10396  000B76  C0AF  F024         	movff	_cmd_data+44,?_printf+2
 10397  000B7A  6A25               	clrf	?_printf+3,c
 10398  000B7C  EC22  F011         	call	_printf	;wreg free
 10399                           
 10400                           ;cmd_consol.c: 366: if (cmd_data.end_row != 255) {
 10401  000B80  0100               	movlb	0	; () banked
 10402  000B82  29AF               	incf	(_cmd_data+44)& (0+255),w,b
 10403  000B84  B4D8               	btfsc	status,2,c
 10404  000B86  D0B7               	goto	l852
 10405                           
 10406                           ; BSR set to: 0
 10407                           ;cmd_consol.c: 367: temp = strtok((0), "-', /=");
 10408  000B88  0E00               	movlw	0
 10409  000B8A  6E1F               	movwf	strtok@s1,c
 10410  000B8C  0E00               	movlw	0
 10411  000B8E  6E20               	movwf	strtok@s1+1,c
 10412  000B90  0EA7               	movlw	low STR_28
 10413  000B92  6E21               	movwf	strtok@s2,c
 10414  000B94  0EFF               	movlw	high STR_28
 10415  000B96  6E22               	movwf	strtok@s2+1,c
 10416  000B98  ECA2  F014         	call	_strtok	;wreg free
 10417  000B9C  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
 10418  000BA0  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
 10419                           
 10420                           ;cmd_consol.c: 368: if (temp != (0)) {
 10421  000BA4  0100               	movlb	0	; () banked
 10422  000BA6  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
 10423  000BA8  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10424  000BAA  B4D8               	btfsc	status,2,c
 10425  000BAC  D0DD               	goto	l870
 10426                           
 10427                           ; BSR set to: 0
 10428                           ;cmd_consol.c: 369: printf("col = %s\r\n", temp);
 10429  000BAE  0E19               	movlw	low STR_63
 10430  000BB0  6E22               	movwf	printf@f,c
 10431  000BB2  0EFF               	movlw	high STR_63
 10432  000BB4  6E23               	movwf	printf@f+1,c
 10433  000BB6  C0D8  F024         	movff	parse_cmd_str@temp,?_printf+2
 10434  000BBA  C0D9  F025         	movff	parse_cmd_str@temp+1,?_printf+3
 10435  000BBE  EC22  F011         	call	_printf	;wreg free
 10436                           
 10437                           ;cmd_consol.c: 370: collect_column(temp, &cmd_data.end_col);
 10438  000BC2  C0D8  F034         	movff	parse_cmd_str@temp,collect_column@str
 10439  000BC6  C0D9  F035         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10440  000BCA  0EB0               	movlw	low (_cmd_data+45)
 10441  000BCC  6E36               	movwf	collect_column@data_column,c
 10442  000BCE  0E00               	movlw	high (_cmd_data+45)
 10443  000BD0  6E37               	movwf	collect_column@data_column+1,c
 10444  000BD2  ECED  F013         	call	_collect_column	;wreg free
 10445                           
 10446                           ;cmd_consol.c: 371: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 10447  000BD6  0E8C               	movlw	low STR_64
 10448  000BD8  6E22               	movwf	printf@f,c
 10449  000BDA  0EFD               	movlw	high STR_64
 10450  000BDC  6E23               	movwf	printf@f+1,c
 10451  000BDE  C0B0  F024         	movff	_cmd_data+45,?_printf+2
 10452  000BE2  6A25               	clrf	?_printf+3,c
 10453  000BE4  EC22  F011         	call	_printf	;wreg free
 10454                           
 10455                           ;cmd_consol.c: 372: if (cmd_data.end_row != 255) {
 10456  000BE8  0100               	movlb	0	; () banked
 10457  000BEA  29AF               	incf	(_cmd_data+44)& (0+255),w,b
 10458  000BEC  B4D8               	btfsc	status,2,c
 10459  000BEE  D081               	goto	l854
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;cmd_consol.c: 373: temp = strtok((0), "-', /=");
 10463  000BF0  0E00               	movlw	0
 10464  000BF2  6E1F               	movwf	strtok@s1,c
 10465  000BF4  0E00               	movlw	0
 10466  000BF6  6E20               	movwf	strtok@s1+1,c
 10467  000BF8  0EA7               	movlw	low STR_28
 10468  000BFA  6E21               	movwf	strtok@s2,c
 10469  000BFC  0EFF               	movlw	high STR_28
 10470  000BFE  6E22               	movwf	strtok@s2+1,c
 10471  000C00  ECA2  F014         	call	_strtok	;wreg free
 10472  000C04  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
 10473  000C08  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
 10474                           
 10475                           ;cmd_consol.c: 374: if (temp != (0)) {
 10476  000C0C  0100               	movlb	0	; () banked
 10477  000C0E  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
 10478  000C10  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10479  000C12  B4D8               	btfsc	status,2,c
 10480  000C14  D0A9               	goto	l870
 10481                           
 10482                           ; BSR set to: 0
 10483                           ;cmd_consol.c: 375: if (get_direction(temp, &cmd_data.scroll) == 1) {
 10484  000C16  C0D8  F034         	movff	parse_cmd_str@temp,get_direction@str
 10485  000C1A  C0D9  F035         	movff	parse_cmd_str@temp+1,get_direction@str+1
 10486  000C1E  0EB2               	movlw	low (_cmd_data+47)
 10487  000C20  6E36               	movwf	get_direction@data_direction,c
 10488  000C22  0E00               	movlw	high (_cmd_data+47)
 10489  000C24  6E37               	movwf	get_direction@data_direction+1,c
 10490  000C26  ECFA  F014         	call	_get_direction	;wreg free
 10491  000C2A  06E8               	decf	wreg,f,c
 10492  000C2C  A4D8               	btfss	status,2,c
 10493  000C2E  D05F               	goto	l856
 10494                           
 10495                           ;cmd_consol.c: 376: temp = strtok((0), "-', /=");
 10496  000C30  0E00               	movlw	0
 10497  000C32  6E1F               	movwf	strtok@s1,c
 10498  000C34  0E00               	movlw	0
 10499  000C36  6E20               	movwf	strtok@s1+1,c
 10500  000C38  0EA7               	movlw	low STR_28
 10501  000C3A  6E21               	movwf	strtok@s2,c
 10502  000C3C  0EFF               	movlw	high STR_28
 10503  000C3E  6E22               	movwf	strtok@s2+1,c
 10504  000C40  ECA2  F014         	call	_strtok	;wreg free
 10505  000C44  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
 10506  000C48  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
 10507                           
 10508                           ;cmd_consol.c: 377: if (temp != (0)) {
 10509  000C4C  0100               	movlb	0	; () banked
 10510  000C4E  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
 10511  000C50  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10512  000C52  B4D8               	btfsc	status,2,c
 10513  000C54  D089               	goto	l870
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;cmd_consol.c: 378: if (get_dis_frq(temp, &cmd_data.dis_frq) == 1) {
 10517  000C56  C0D8  F034         	movff	parse_cmd_str@temp,get_dis_frq@str
 10518  000C5A  C0D9  F035         	movff	parse_cmd_str@temp+1,get_dis_frq@str+1
 10519  000C5E  0EB4               	movlw	low (_cmd_data+49)
 10520  000C60  6E36               	movwf	get_dis_frq@data_frq,c
 10521  000C62  0E00               	movlw	high (_cmd_data+49)
 10522  000C64  6E37               	movwf	get_dis_frq@data_frq+1,c
 10523  000C66  ECA1  F015         	call	_get_dis_frq	;wreg free
 10524  000C6A  06E8               	decf	wreg,f,c
 10525  000C6C  A4D8               	btfss	status,2,c
 10526  000C6E  D03D               	goto	l858
 10527                           
 10528                           ;cmd_consol.c: 379: temp = strtok((0), "-', /=");
 10529  000C70  0E00               	movlw	0
 10530  000C72  6E1F               	movwf	strtok@s1,c
 10531  000C74  0E00               	movlw	0
 10532  000C76  6E20               	movwf	strtok@s1+1,c
 10533  000C78  0EA7               	movlw	low STR_28
 10534  000C7A  6E21               	movwf	strtok@s2,c
 10535  000C7C  0EFF               	movlw	high STR_28
 10536  000C7E  6E22               	movwf	strtok@s2+1,c
 10537  000C80  ECA2  F014         	call	_strtok	;wreg free
 10538  000C84  C01F  F0D8         	movff	?_strtok,parse_cmd_str@temp
 10539  000C88  C020  F0D9         	movff	?_strtok+1,parse_cmd_str@temp+1
 10540                           
 10541                           ;cmd_consol.c: 380: if (temp != (0)) {
 10542  000C8C  0100               	movlb	0	; () banked
 10543  000C8E  51D8               	movf	parse_cmd_str@temp& (0+255),w,b
 10544  000C90  11D9               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10545  000C92  B4D8               	btfsc	status,2,c
 10546  000C94  D069               	goto	l870
 10547                           
 10548                           ; BSR set to: 0
 10549                           ;cmd_consol.c: 381: if (get_over_write_data(temp, &cmd_data.over_write) == 1) {
 10550  000C96  C0D8  F034         	movff	parse_cmd_str@temp,get_over_write_data@str
 10551  000C9A  C0D9  F035         	movff	parse_cmd_str@temp+1,get_over_write_data@str+1
 10552  000C9E  0EB6               	movlw	low (_cmd_data+51)
 10553  000CA0  6E36               	movwf	get_over_write_data@over_write_data,c
 10554  000CA2  0E00               	movlw	high (_cmd_data+51)
 10555  000CA4  6E37               	movwf	get_over_write_data@over_write_data+1,c
 10556  000CA6  EC51  F015         	call	_get_over_write_data	;wreg free
 10557  000CAA  06E8               	decf	wreg,f,c
 10558  000CAC  A4D8               	btfss	status,2,c
 10559  000CAE  D01B               	goto	l860
 10560                           
 10561                           ;cmd_consol.c: 382: cmd_data.row_col_set = 1;
 10562  000CB0  0E01               	movlw	1
 10563  000CB2  0100               	movlb	0	; () banked
 10564  000CB4  6FB1               	movwf	(_cmd_data+46)& (0+255),b
 10565                           
 10566                           ;cmd_consol.c: 383: valid_cmd = 1;
 10567  000CB6  0E01               	movlw	1
 10568  000CB8  6F82               	movwf	_valid_cmd& (0+255),b
 10569                           
 10570                           ; BSR set to: 0
 10571                           ;cmd_consol.c: 384: memset(str, 0, strlen(str));
 10572  000CBA  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
 10573  000CBE  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
 10574  000CC2  0E00               	movlw	0
 10575  000CC4  6E2B               	movwf	memset@c+1,c
 10576  000CC6  0E00               	movlw	0
 10577  000CC8  6E2A               	movwf	memset@c,c
 10578  000CCA  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
 10579  000CCE  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
 10580  000CD2  EC4C  F019         	call	_strlen	;wreg free
 10581  000CD6  C022  F02C         	movff	?_strlen,memset@n
 10582  000CDA  C023  F02D         	movff	?_strlen+1,memset@n+1
 10583  000CDE  EC00  F01A         	call	_memset	;wreg free
 10584  000CE2  EFBB  F000         	goto	l6933
 10585  000CE6                     l860:
 10586                           
 10587                           ;cmd_consol.c: 387: return 6;
 10588  000CE6  0E06               	movlw	6
 10589  000CE8  0012               	return	
 10590  000CEA                     l858:
 10591                           
 10592                           ;cmd_consol.c: 391: return 5;
 10593  000CEA  0E05               	movlw	5
 10594  000CEC  0012               	return	
 10595  000CEE                     l856:
 10596                           
 10597                           ;cmd_consol.c: 395: return 4;
 10598  000CEE  0E04               	movlw	4
 10599  000CF0  0012               	return	
 10600  000CF2                     l854:
 10601                           
 10602                           ;cmd_consol.c: 399: return 3;
 10603  000CF2  0E03               	movlw	3
 10604  000CF4  0012               	return	
 10605  000CF6                     l852:
 10606                           
 10607                           ;cmd_consol.c: 403: return 3;
 10608  000CF6  0E03               	movlw	3
 10609  000CF8  0012               	return	
 10610  000CFA                     l850:
 10611                           
 10612                           ;cmd_consol.c: 407: return 3;
 10613  000CFA  0E03               	movlw	3
 10614  000CFC  0012               	return	
 10615  000CFE                     l848:
 10616                           
 10617                           ;cmd_consol.c: 411: return 3;
 10618  000CFE  0E03               	movlw	3
 10619  000D00  0012               	return	
 10620  000D02                     l846:
 10621                           
 10622                           ;cmd_consol.c: 415: return 2;
 10623  000D02  0E02               	movlw	2
 10624  000D04  0012               	return	
 10625  000D06                     l842:
 10626  000D06  C0D8  F014         	movff	parse_cmd_str@temp,strcmp@s1
 10627  000D0A  C0D9  F015         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 10628  000D0E  0EF5               	movlw	low STR_82
 10629  000D10  6E16               	movwf	strcmp@s2,c
 10630  000D12  0EFF               	movlw	high STR_82
 10631  000D14  6E17               	movwf	strcmp@s2+1,c
 10632  000D16  EC46  F018         	call	_strcmp	;wreg free
 10633  000D1A  5014               	movf	?_strcmp,w,c
 10634  000D1C  1015               	iorwf	?_strcmp+1,w,c
 10635  000D1E  A4D8               	btfss	status,2,c
 10636  000D20  D023               	goto	l870
 10637                           
 10638                           ;cmd_consol.c: 421: strcpy(CMD, temp);
 10639  000D22  0EB7               	movlw	low _CMD
 10640  000D24  6E14               	movwf	strcpy@to,c
 10641  000D26  0E00               	movlw	high _CMD
 10642  000D28  6E15               	movwf	strcpy@to+1,c
 10643  000D2A  C0D8  F016         	movff	parse_cmd_str@temp,strcpy@from
 10644  000D2E  C0D9  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10645  000D32  ECE9  F019         	call	_strcpy	;wreg free
 10646                           
 10647                           ;cmd_consol.c: 422: memset(str, 0, strlen(str));
 10648  000D36  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
 10649  000D3A  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
 10650  000D3E  0E00               	movlw	0
 10651  000D40  6E2B               	movwf	memset@c+1,c
 10652  000D42  0E00               	movlw	0
 10653  000D44  6E2A               	movwf	memset@c,c
 10654  000D46  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
 10655  000D4A  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
 10656  000D4E  EC4C  F019         	call	_strlen	;wreg free
 10657  000D52  C022  F02C         	movff	?_strlen,memset@n
 10658  000D56  C023  F02D         	movff	?_strlen+1,memset@n+1
 10659  000D5A  EC00  F01A         	call	_memset	;wreg free
 10660                           
 10661                           ;cmd_consol.c: 423: valid_cmd = 1;
 10662  000D5E  0E01               	movlw	1
 10663  000D60  0100               	movlb	0	; () banked
 10664  000D62  6F82               	movwf	_valid_cmd& (0+255),b
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;cmd_consol.c: 424: return 0;
 10668  000D64  0E00               	movlw	0
 10669                           
 10670                           ; BSR set to: 0
 10671  000D66  0012               	return	
 10672  000D68                     l870:
 10673                           
 10674                           ;cmd_consol.c: 425: }
 10675                           ;cmd_consol.c: 426: memset(str, 0, strlen(str));
 10676                           
 10677                           ; BSR set to: 0
 10678                           
 10679                           ; BSR set to: 0
 10680                           
 10681                           ; BSR set to: 0
 10682                           
 10683                           ; BSR set to: 0
 10684                           
 10685                           ; BSR set to: 0
 10686                           
 10687                           ; BSR set to: 0
 10688                           
 10689                           ; BSR set to: 0
 10690                           
 10691                           ; BSR set to: 0
 10692                           
 10693                           ; BSR set to: 0
 10694                           
 10695                           ; BSR set to: 0
 10696                           
 10697                           ; BSR set to: 0
 10698  000D68  C0C9  F028         	movff	parse_cmd_str@str,memset@p1
 10699  000D6C  C0CA  F029         	movff	parse_cmd_str@str+1,memset@p1+1
 10700  000D70  0E00               	movlw	0
 10701  000D72  6E2B               	movwf	memset@c+1,c
 10702  000D74  0E00               	movlw	0
 10703  000D76  6E2A               	movwf	memset@c,c
 10704  000D78  C0C9  F022         	movff	parse_cmd_str@str,strlen@s
 10705  000D7C  C0CA  F023         	movff	parse_cmd_str@str+1,strlen@s+1
 10706  000D80  EC4C  F019         	call	_strlen	;wreg free
 10707  000D84  C022  F02C         	movff	?_strlen,memset@n
 10708  000D88  C023  F02D         	movff	?_strlen+1,memset@n+1
 10709  000D8C  EC00  F01A         	call	_memset	;wreg free
 10710                           
 10711                           ;cmd_consol.c: 427: return 1;
 10712  000D90  0E01               	movlw	1
 10713  000D92  0012               	return	
 10714  000D94                     __end_of_parse_cmd_str:
 10715                           	opt stack 0
 10716                           tblptru	equ	0xFF8
 10717                           tblptrh	equ	0xFF7
 10718                           tblptrl	equ	0xFF6
 10719                           tablat	equ	0xFF5
 10720                           prodh	equ	0xFF4
 10721                           prodl	equ	0xFF3
 10722                           intcon	equ	0xFF2
 10723                           postinc0	equ	0xFEE
 10724                           wreg	equ	0xFE8
 10725                           indf1	equ	0xFE7
 10726                           postinc1	equ	0xFE6
 10727                           postdec1	equ	0xFE5
 10728                           fsr1h	equ	0xFE2
 10729                           fsr1l	equ	0xFE1
 10730                           indf2	equ	0xFDF
 10731                           postinc2	equ	0xFDE
 10732                           postdec2	equ	0xFDD
 10733                           fsr2h	equ	0xFDA
 10734                           fsr2l	equ	0xFD9
 10735                           status	equ	0xFD8
 10736                           
 10737 ;; *************** function _strtok *****************
 10738 ;; Defined at:
 10739 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strtok.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;  s1              2   30[COMRAM] PTR unsigned char 
 10742 ;;		 -> uart_str(150), NULL(0), 
 10743 ;;  s2              2   32[COMRAM] PTR const unsigned char 
 10744 ;;		 -> STR_81(7), STR_80(7), STR_79(7), STR_76(7), 
 10745 ;;		 -> STR_74(7), STR_72(7), STR_70(7), STR_68(2), 
 10746 ;;		 -> STR_62(7), STR_60(7), STR_58(7), STR_56(7), 
 10747 ;;		 -> STR_54(7), STR_50(7), STR_47(7), STR_43(2), 
 10748 ;;		 -> STR_40(7), STR_36(7), STR_34(7), STR_28(7), 
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;		None
 10751 ;; Return value:  Size  Location     Type
 10752 ;;                  2   30[COMRAM] PTR unsigned char 
 10753 ;; Registers used:
 10754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10755 ;; Tracked objects:
 10756 ;;		On entry : 0/0
 10757 ;;		On exit  : 0/0
 10758 ;;		Unchanged: 0/0
 10759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10760 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10763 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10764 ;;Total ram usage:        4 bytes
 10765 ;; Hardware stack levels used:    1
 10766 ;; Hardware stack levels required when called:    7
 10767 ;; This function calls:
 10768 ;;		_strcspn
 10769 ;;		_strspn
 10770 ;; This function is called by:
 10771 ;;		_parse_cmd_str
 10772 ;; This function uses a non-reentrant model
 10773 ;;
 10774                           
 10775                           	psect	text42
 10776  002944                     __ptext42:
 10777                           	opt stack 0
 10778  002944                     _strtok:
 10779                           	opt stack 21
 10780                           
 10781                           ;incstack = 0
 10782  002944  501F               	movf	strtok@s1,w,c
 10783  002946  1020               	iorwf	strtok@s1+1,w,c
 10784  002948  A4D8               	btfss	status,2,c
 10785  00294A  D004               	goto	l1729
 10786  00294C  C039  F01F         	movff	strtok@sp,strtok@s1
 10787  002950  C03A  F020         	movff	strtok@sp+1,strtok@s1+1
 10788  002954                     l1729:
 10789  002954  501F               	movf	strtok@s1,w,c
 10790  002956  1020               	iorwf	strtok@s1+1,w,c
 10791  002958  A4D8               	btfss	status,2,c
 10792  00295A  D005               	goto	l1730
 10793  00295C  0E00               	movlw	0
 10794  00295E  6E1F               	movwf	?_strtok,c
 10795  002960  0E00               	movlw	0
 10796  002962  6E20               	movwf	?_strtok+1,c
 10797  002964  0012               	return	
 10798  002966                     l1730:
 10799  002966  C01F  F018         	movff	strtok@s1,strspn@s1
 10800  00296A  C020  F019         	movff	strtok@s1+1,strspn@s1+1
 10801  00296E  C021  F01A         	movff	strtok@s2,strspn@s2
 10802  002972  C022  F01B         	movff	strtok@s2+1,strspn@s2+1
 10803  002976  ECD1  F017         	call	_strspn	;wreg free
 10804  00297A  5018               	movf	?_strspn,w,c
 10805  00297C  261F               	addwf	strtok@s1,f,c
 10806  00297E  5019               	movf	?_strspn+1,w,c
 10807  002980  2220               	addwfc	strtok@s1+1,f,c
 10808  002982  C01F  FFD9         	movff	strtok@s1,fsr2l
 10809  002986  C020  FFDA         	movff	strtok@s1+1,fsr2h
 10810  00298A  50DF               	movf	indf2,w,c
 10811  00298C  A4D8               	btfss	status,2,c
 10812  00298E  D009               	goto	l1732
 10813  002990  0E00               	movlw	0
 10814  002992  6E39               	movwf	strtok@sp,c
 10815  002994  0E00               	movlw	0
 10816  002996  6E3A               	movwf	strtok@sp+1,c
 10817  002998  C039  F01F         	movff	strtok@sp,?_strtok
 10818  00299C  C03A  F020         	movff	strtok@sp+1,?_strtok+1
 10819  0029A0  0012               	return	
 10820  0029A2                     l1732:
 10821  0029A2  C01F  F018         	movff	strtok@s1,strcspn@s1
 10822  0029A6  C020  F019         	movff	strtok@s1+1,strcspn@s1+1
 10823  0029AA  C021  F01A         	movff	strtok@s2,strcspn@s2
 10824  0029AE  C022  F01B         	movff	strtok@s2+1,strcspn@s2+1
 10825  0029B2  ECF9  F017         	call	_strcspn	;wreg free
 10826  0029B6  5018               	movf	?_strcspn,w,c
 10827  0029B8  241F               	addwf	strtok@s1,w,c
 10828  0029BA  6E39               	movwf	strtok@sp,c
 10829  0029BC  5019               	movf	?_strcspn+1,w,c
 10830  0029BE  2020               	addwfc	strtok@s1+1,w,c
 10831  0029C0  6E3A               	movwf	strtok@sp+1,c
 10832  0029C2  C039  FFD9         	movff	strtok@sp,fsr2l
 10833  0029C6  C03A  FFDA         	movff	strtok@sp+1,fsr2h
 10834  0029CA  50DF               	movf	indf2,w,c
 10835  0029CC  B4D8               	btfsc	status,2,c
 10836  0029CE  D009               	goto	l1733
 10837  0029D0  C039  FFD9         	movff	strtok@sp,fsr2l
 10838  0029D4  C03A  FFDA         	movff	strtok@sp+1,fsr2h
 10839  0029D8  0E00               	movlw	0
 10840  0029DA  6EDF               	movwf	indf2,c
 10841  0029DC  4A39               	infsnz	strtok@sp,f,c
 10842  0029DE  2A3A               	incf	strtok@sp+1,f,c
 10843  0029E0  D004               	goto	l1734
 10844  0029E2                     l1733:
 10845  0029E2  0E00               	movlw	0
 10846  0029E4  6E39               	movwf	strtok@sp,c
 10847  0029E6  0E00               	movlw	0
 10848  0029E8  6E3A               	movwf	strtok@sp+1,c
 10849  0029EA                     l1734:
 10850  0029EA  C01F  F01F         	movff	strtok@s1,?_strtok
 10851  0029EE  C020  F020         	movff	strtok@s1+1,?_strtok+1
 10852  0029F2  0012               	return	
 10853  0029F4                     __end_of_strtok:
 10854                           	opt stack 0
 10855                           tblptru	equ	0xFF8
 10856                           tblptrh	equ	0xFF7
 10857                           tblptrl	equ	0xFF6
 10858                           tablat	equ	0xFF5
 10859                           prodh	equ	0xFF4
 10860                           prodl	equ	0xFF3
 10861                           intcon	equ	0xFF2
 10862                           postinc0	equ	0xFEE
 10863                           wreg	equ	0xFE8
 10864                           indf1	equ	0xFE7
 10865                           postinc1	equ	0xFE6
 10866                           postdec1	equ	0xFE5
 10867                           fsr1h	equ	0xFE2
 10868                           fsr1l	equ	0xFE1
 10869                           indf2	equ	0xFDF
 10870                           postinc2	equ	0xFDE
 10871                           postdec2	equ	0xFDD
 10872                           fsr2h	equ	0xFDA
 10873                           fsr2l	equ	0xFD9
 10874                           status	equ	0xFD8
 10875                           
 10876 ;; *************** function _strspn *****************
 10877 ;; Defined at:
 10878 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strspn.c"
 10879 ;; Parameters:    Size  Location     Type
 10880 ;;  s1              2   23[COMRAM] PTR const unsigned char 
 10881 ;;		 -> uart_str(150), NULL(0), 
 10882 ;;  s2              2   25[COMRAM] PTR const unsigned char 
 10883 ;;		 -> STR_81(7), STR_80(7), STR_79(7), STR_76(7), 
 10884 ;;		 -> STR_74(7), STR_72(7), STR_70(7), STR_68(2), 
 10885 ;;		 -> STR_62(7), STR_60(7), STR_58(7), STR_56(7), 
 10886 ;;		 -> STR_54(7), STR_50(7), STR_47(7), STR_43(2), 
 10887 ;;		 -> STR_40(7), STR_36(7), STR_34(7), STR_28(7), 
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;  i               2   28[COMRAM] unsigned int 
 10890 ;; Return value:  Size  Location     Type
 10891 ;;                  2   23[COMRAM] unsigned int 
 10892 ;; Registers used:
 10893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10899 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10901 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;Total ram usage:        7 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; Hardware stack levels required when called:    6
 10906 ;; This function calls:
 10907 ;;		_strchr
 10908 ;; This function is called by:
 10909 ;;		_strtok
 10910 ;; This function uses a non-reentrant model
 10911 ;;
 10912                           
 10913                           	psect	text43
 10914  002FA2                     __ptext43:
 10915                           	opt stack 0
 10916  002FA2                     _strspn:
 10917                           	opt stack 21
 10918                           
 10919                           ;incstack = 0
 10920  002FA2  0E00               	movlw	0
 10921  002FA4  6E1E               	movwf	strspn@i+1,c
 10922  002FA6  0E00               	movlw	0
 10923  002FA8  6E1D               	movwf	strspn@i,c
 10924  002FAA  D004               	goto	l1776
 10925  002FAC  4A18               	infsnz	strspn@s1,f,c
 10926  002FAE  2A19               	incf	strspn@s1+1,f,c
 10927  002FB0  4A1D               	infsnz	strspn@i,f,c
 10928  002FB2  2A1E               	incf	strspn@i+1,f,c
 10929  002FB4                     l1776:
 10930  002FB4  C018  FFD9         	movff	strspn@s1,fsr2l
 10931  002FB8  C019  FFDA         	movff	strspn@s1+1,fsr2h
 10932  002FBC  50DF               	movf	indf2,w,c
 10933  002FBE  B4D8               	btfsc	status,2,c
 10934  002FC0  D013               	goto	u3610
 10935  002FC2  C01A  F014         	movff	strspn@s2,strchr@ptr
 10936  002FC6  C01B  F015         	movff	strspn@s2+1,strchr@ptr+1
 10937  002FCA  C018  FFD9         	movff	strspn@s1,fsr2l
 10938  002FCE  C019  FFDA         	movff	strspn@s1+1,fsr2h
 10939  002FD2  50DF               	movf	indf2,w,c
 10940  002FD4  6E1C               	movwf	??_strspn& (0+255),c
 10941  002FD6  501C               	movf	??_strspn,w,c
 10942  002FD8  6E16               	movwf	strchr@chr,c
 10943  002FDA  6A17               	clrf	strchr@chr+1,c
 10944  002FDC  ECF1  F018         	call	_strchr	;wreg free
 10945  002FE0  5014               	movf	?_strchr,w,c
 10946  002FE2  1015               	iorwf	?_strchr+1,w,c
 10947  002FE4  A4D8               	btfss	status,2,c
 10948  002FE6  D7E2               	goto	l1777
 10949  002FE8                     u3610:
 10950  002FE8  C01D  F018         	movff	strspn@i,?_strspn
 10951  002FEC  C01E  F019         	movff	strspn@i+1,?_strspn+1
 10952  002FF0  0012               	return		;funcret
 10953  002FF2                     __end_of_strspn:
 10954                           	opt stack 0
 10955                           tblptru	equ	0xFF8
 10956                           tblptrh	equ	0xFF7
 10957                           tblptrl	equ	0xFF6
 10958                           tablat	equ	0xFF5
 10959                           prodh	equ	0xFF4
 10960                           prodl	equ	0xFF3
 10961                           intcon	equ	0xFF2
 10962                           postinc0	equ	0xFEE
 10963                           wreg	equ	0xFE8
 10964                           indf1	equ	0xFE7
 10965                           postinc1	equ	0xFE6
 10966                           postdec1	equ	0xFE5
 10967                           fsr1h	equ	0xFE2
 10968                           fsr1l	equ	0xFE1
 10969                           indf2	equ	0xFDF
 10970                           postinc2	equ	0xFDE
 10971                           postdec2	equ	0xFDD
 10972                           fsr2h	equ	0xFDA
 10973                           fsr2l	equ	0xFD9
 10974                           status	equ	0xFD8
 10975                           
 10976 ;; *************** function _strcspn *****************
 10977 ;; Defined at:
 10978 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strcspn.c"
 10979 ;; Parameters:    Size  Location     Type
 10980 ;;  s1              2   23[COMRAM] PTR const unsigned char 
 10981 ;;		 -> uart_str(150), NULL(0), 
 10982 ;;  s2              2   25[COMRAM] PTR const unsigned char 
 10983 ;;		 -> STR_81(7), STR_80(7), STR_79(7), STR_76(7), 
 10984 ;;		 -> STR_74(7), STR_72(7), STR_70(7), STR_68(2), 
 10985 ;;		 -> STR_62(7), STR_60(7), STR_58(7), STR_56(7), 
 10986 ;;		 -> STR_54(7), STR_50(7), STR_47(7), STR_43(2), 
 10987 ;;		 -> STR_40(7), STR_36(7), STR_34(7), STR_28(7), 
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;  i               2   28[COMRAM] unsigned int 
 10990 ;; Return value:  Size  Location     Type
 10991 ;;                  2   23[COMRAM] unsigned int 
 10992 ;; Registers used:
 10993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10994 ;; Tracked objects:
 10995 ;;		On entry : 0/0
 10996 ;;		On exit  : 0/0
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10999 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11000 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11001 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11002 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11003 ;;Total ram usage:        7 bytes
 11004 ;; Hardware stack levels used:    1
 11005 ;; Hardware stack levels required when called:    6
 11006 ;; This function calls:
 11007 ;;		_strchr
 11008 ;; This function is called by:
 11009 ;;		_strtok
 11010 ;; This function uses a non-reentrant model
 11011 ;;
 11012                           
 11013                           	psect	text44
 11014  002FF2                     __ptext44:
 11015                           	opt stack 0
 11016  002FF2                     _strcspn:
 11017                           	opt stack 21
 11018                           
 11019                           ;incstack = 0
 11020  002FF2  0E00               	movlw	0
 11021  002FF4  6E1E               	movwf	strcspn@i+1,c
 11022  002FF6  0E00               	movlw	0
 11023  002FF8  6E1D               	movwf	strcspn@i,c
 11024  002FFA  D004               	goto	l1766
 11025  002FFC  4A18               	infsnz	strcspn@s1,f,c
 11026  002FFE  2A19               	incf	strcspn@s1+1,f,c
 11027  003000  4A1D               	infsnz	strcspn@i,f,c
 11028  003002  2A1E               	incf	strcspn@i+1,f,c
 11029  003004                     l1766:
 11030  003004  C018  FFD9         	movff	strcspn@s1,fsr2l
 11031  003008  C019  FFDA         	movff	strcspn@s1+1,fsr2h
 11032  00300C  50DF               	movf	indf2,w,c
 11033  00300E  B4D8               	btfsc	status,2,c
 11034  003010  D013               	goto	u3630
 11035  003012  C01A  F014         	movff	strcspn@s2,strchr@ptr
 11036  003016  C01B  F015         	movff	strcspn@s2+1,strchr@ptr+1
 11037  00301A  C018  FFD9         	movff	strcspn@s1,fsr2l
 11038  00301E  C019  FFDA         	movff	strcspn@s1+1,fsr2h
 11039  003022  50DF               	movf	indf2,w,c
 11040  003024  6E1C               	movwf	??_strcspn& (0+255),c
 11041  003026  501C               	movf	??_strcspn,w,c
 11042  003028  6E16               	movwf	strchr@chr,c
 11043  00302A  6A17               	clrf	strchr@chr+1,c
 11044  00302C  ECF1  F018         	call	_strchr	;wreg free
 11045  003030  5014               	movf	?_strchr,w,c
 11046  003032  1015               	iorwf	?_strchr+1,w,c
 11047  003034  B4D8               	btfsc	status,2,c
 11048  003036  D7E2               	goto	l1767
 11049  003038                     u3630:
 11050  003038  C01D  F018         	movff	strcspn@i,?_strcspn
 11051  00303C  C01E  F019         	movff	strcspn@i+1,?_strcspn+1
 11052  003040  0012               	return		;funcret
 11053  003042                     __end_of_strcspn:
 11054                           	opt stack 0
 11055                           tblptru	equ	0xFF8
 11056                           tblptrh	equ	0xFF7
 11057                           tblptrl	equ	0xFF6
 11058                           tablat	equ	0xFF5
 11059                           prodh	equ	0xFF4
 11060                           prodl	equ	0xFF3
 11061                           intcon	equ	0xFF2
 11062                           postinc0	equ	0xFEE
 11063                           wreg	equ	0xFE8
 11064                           indf1	equ	0xFE7
 11065                           postinc1	equ	0xFE6
 11066                           postdec1	equ	0xFE5
 11067                           fsr1h	equ	0xFE2
 11068                           fsr1l	equ	0xFE1
 11069                           indf2	equ	0xFDF
 11070                           postinc2	equ	0xFDE
 11071                           postdec2	equ	0xFDD
 11072                           fsr2h	equ	0xFDA
 11073                           fsr2l	equ	0xFD9
 11074                           status	equ	0xFD8
 11075                           
 11076 ;; *************** function _strchr *****************
 11077 ;; Defined at:
 11078 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strchr.c"
 11079 ;; Parameters:    Size  Location     Type
 11080 ;;  ptr             2   19[COMRAM] PTR const unsigned char 
 11081 ;;		 -> STR_81(7), STR_80(7), STR_79(7), STR_76(7), 
 11082 ;;		 -> STR_74(7), STR_72(7), STR_70(7), STR_68(2), 
 11083 ;;		 -> STR_62(7), STR_60(7), STR_58(7), STR_56(7), 
 11084 ;;		 -> STR_54(7), STR_50(7), STR_47(7), STR_43(2), 
 11085 ;;		 -> STR_40(7), STR_36(7), STR_34(7), STR_28(7), 
 11086 ;;  chr             2   21[COMRAM] int 
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;		None
 11089 ;; Return value:  Size  Location     Type
 11090 ;;                  2   19[COMRAM] PTR unsigned char 
 11091 ;; Registers used:
 11092 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11093 ;; Tracked objects:
 11094 ;;		On entry : 0/0
 11095 ;;		On exit  : 0/0
 11096 ;;		Unchanged: 0/0
 11097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11098 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11101 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11102 ;;Total ram usage:        4 bytes
 11103 ;; Hardware stack levels used:    1
 11104 ;; Hardware stack levels required when called:    5
 11105 ;; This function calls:
 11106 ;;		Nothing
 11107 ;; This function is called by:
 11108 ;;		_strcspn
 11109 ;;		_strspn
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           	psect	text45
 11114  0031E2                     __ptext45:
 11115                           	opt stack 0
 11116  0031E2                     _strchr:
 11117                           	opt stack 21
 11118                           
 11119                           ;incstack = 0
 11120  0031E2  C014  FFF6         	movff	strchr@ptr,tblptrl
 11121  0031E6  C015  FFF7         	movff	strchr@ptr+1,tblptrh
 11122  0031EA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11123  0031EA  6AF8               	clrf	tblptru,c
 11124  0031EC                     	endif
 11125  0031EC                     	if	0	;tblptru may be non-zero
 11126  0031EC                     	endif
 11127  0031EC  0008               	tblrd		*
 11128  0031EE  50F5               	movf	tablat,w,c
 11129  0031F0  1816               	xorwf	strchr@chr,w,c
 11130  0031F2  A4D8               	btfss	status,2,c
 11131  0031F4  D005               	goto	l1785
 11132  0031F6  C014  F014         	movff	strchr@ptr,?_strchr
 11133  0031FA  C015  F015         	movff	strchr@ptr+1,?_strchr+1
 11134  0031FE  0012               	return	
 11135  003200                     l1785:
 11136  003200  C014  FFF6         	movff	strchr@ptr,tblptrl
 11137  003204  C015  FFF7         	movff	strchr@ptr+1,tblptrh
 11138  003208  4A14               	infsnz	strchr@ptr,f,c
 11139  00320A  2A15               	incf	strchr@ptr+1,f,c
 11140  00320C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11141  00320C  6AF8               	clrf	tblptru,c
 11142  00320E                     	endif
 11143  00320E                     	if	0	;tblptru may be non-zero
 11144  00320E                     	endif
 11145  00320E  0008               	tblrd		*
 11146  003210  50F5               	movf	tablat,w,c
 11147  003212  0900               	iorlw	0
 11148  003214  A4D8               	btfss	status,2,c
 11149  003216  D7E5               	goto	_strchr
 11150  003218  0E00               	movlw	0
 11151  00321A  6E14               	movwf	?_strchr,c
 11152  00321C  0E00               	movlw	0
 11153  00321E  6E15               	movwf	?_strchr+1,c
 11154  003220  0012               	return	
 11155  003222                     __end_of_strchr:
 11156                           	opt stack 0
 11157                           tblptru	equ	0xFF8
 11158                           tblptrh	equ	0xFF7
 11159                           tblptrl	equ	0xFF6
 11160                           tablat	equ	0xFF5
 11161                           prodh	equ	0xFF4
 11162                           prodl	equ	0xFF3
 11163                           intcon	equ	0xFF2
 11164                           postinc0	equ	0xFEE
 11165                           wreg	equ	0xFE8
 11166                           indf1	equ	0xFE7
 11167                           postinc1	equ	0xFE6
 11168                           postdec1	equ	0xFE5
 11169                           fsr1h	equ	0xFE2
 11170                           fsr1l	equ	0xFE1
 11171                           indf2	equ	0xFDF
 11172                           postinc2	equ	0xFDE
 11173                           postdec2	equ	0xFDD
 11174                           fsr2h	equ	0xFDA
 11175                           fsr2l	equ	0xFD9
 11176                           status	equ	0xFD8
 11177                           
 11178 ;; *************** function _strcmp *****************
 11179 ;; Defined at:
 11180 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strcmp.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;  s1              2   19[COMRAM] PTR const unsigned char 
 11183 ;;		 -> uart_str(150), CMD(15), NULL(0), 
 11184 ;;  s2              2   21[COMRAM] PTR const unsigned char 
 11185 ;;		 -> STR_128(5), STR_114(7), STR_111(7), STR_108(8), 
 11186 ;;		 -> STR_105(6), STR_100(6), STR_97(5), STR_93(4), 
 11187 ;;		 -> STR_89(4), STR_85(6), STR_83(4), STR_82(4), 
 11188 ;;		 -> STR_66(5), STR_65(7), STR_53(7), STR_45(8), 
 11189 ;;		 -> STR_38(6), STR_37(6), STR_33(5), STR_31(6), 
 11190 ;;		 -> STR_30(4), STR_29(4), 
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;  r               1   24[COMRAM] char 
 11193 ;; Return value:  Size  Location     Type
 11194 ;;                  2   19[COMRAM] int 
 11195 ;; Registers used:
 11196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11197 ;; Tracked objects:
 11198 ;;		On entry : 0/0
 11199 ;;		On exit  : 0/0
 11200 ;;		Unchanged: 0/0
 11201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11202 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11203 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11204 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11205 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;Total ram usage:        6 bytes
 11207 ;; Hardware stack levels used:    1
 11208 ;; Hardware stack levels required when called:    5
 11209 ;; This function calls:
 11210 ;;		Nothing
 11211 ;; This function is called by:
 11212 ;;		_parse_cmd_str
 11213 ;;		_reply_to_host
 11214 ;;		_cmd_consol_task
 11215 ;; This function uses a non-reentrant model
 11216 ;;
 11217                           
 11218                           	psect	text46
 11219  00308C                     __ptext46:
 11220                           	opt stack 0
 11221  00308C                     _strcmp:
 11222                           	opt stack 24
 11223                           
 11224                           ;incstack = 0
 11225  00308C  D004               	goto	l1693
 11226  00308E  4A14               	infsnz	strcmp@s1,f,c
 11227  003090  2A15               	incf	strcmp@s1+1,f,c
 11228  003092  4A16               	infsnz	strcmp@s2,f,c
 11229  003094  2A17               	incf	strcmp@s2+1,f,c
 11230  003096                     l1693:
 11231  003096  C014  FFD9         	movff	strcmp@s1,fsr2l
 11232  00309A  C015  FFDA         	movff	strcmp@s1+1,fsr2h
 11233  00309E  50DF               	movf	indf2,w,c
 11234  0030A0  6E18               	movwf	??_strcmp& (0+255),c
 11235  0030A2  C016  FFF6         	movff	strcmp@s2,tblptrl
 11236  0030A6  C017  FFF7         	movff	strcmp@s2+1,tblptrh
 11237  0030AA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11238  0030AA  6AF8               	clrf	tblptru,c
 11239  0030AC                     	endif
 11240  0030AC                     	if	0	;tblptru may be non-zero
 11241  0030AC                     	endif
 11242  0030AC  0008               	tblrd		*
 11243  0030AE  50F5               	movf	tablat,w,c
 11244  0030B0  0800               	sublw	0
 11245  0030B2  2418               	addwf	??_strcmp,w,c
 11246  0030B4  6E19               	movwf	strcmp@r,c
 11247  0030B6  5019               	movf	strcmp@r,w,c
 11248  0030B8  A4D8               	btfss	status,2,c
 11249  0030BA  D007               	goto	u3960
 11250  0030BC  C014  FFD9         	movff	strcmp@s1,fsr2l
 11251  0030C0  C015  FFDA         	movff	strcmp@s1+1,fsr2h
 11252  0030C4  50DF               	movf	indf2,w,c
 11253  0030C6  A4D8               	btfss	status,2,c
 11254  0030C8  D7E2               	goto	l1694
 11255  0030CA                     u3960:
 11256  0030CA  5019               	movf	strcmp@r,w,c
 11257  0030CC  6E14               	movwf	?_strcmp,c
 11258  0030CE  6A15               	clrf	?_strcmp+1,c
 11259  0030D0  BE14               	btfsc	?_strcmp,7,c
 11260  0030D2  0615               	decf	?_strcmp+1,f,c
 11261  0030D4  0012               	return	
 11262  0030D6                     __end_of_strcmp:
 11263                           	opt stack 0
 11264                           tblptru	equ	0xFF8
 11265                           tblptrh	equ	0xFF7
 11266                           tblptrl	equ	0xFF6
 11267                           tablat	equ	0xFF5
 11268                           prodh	equ	0xFF4
 11269                           prodl	equ	0xFF3
 11270                           intcon	equ	0xFF2
 11271                           postinc0	equ	0xFEE
 11272                           wreg	equ	0xFE8
 11273                           indf1	equ	0xFE7
 11274                           postinc1	equ	0xFE6
 11275                           postdec1	equ	0xFE5
 11276                           fsr1h	equ	0xFE2
 11277                           fsr1l	equ	0xFE1
 11278                           indf2	equ	0xFDF
 11279                           postinc2	equ	0xFDE
 11280                           postdec2	equ	0xFDD
 11281                           fsr2h	equ	0xFDA
 11282                           fsr2l	equ	0xFD9
 11283                           status	equ	0xFD8
 11284                           
 11285 ;; *************** function _get_str *****************
 11286 ;; Defined at:
 11287 ;;		line 38 in file "cmd_consol.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;  str             2   47[COMRAM] PTR unsigned char 
 11290 ;;		 -> uart_str(150), NULL(0), 
 11291 ;;  data_str        2   49[COMRAM] PTR unsigned char 
 11292 ;;		 -> cmd_data(52), 
 11293 ;; Auto vars:     Size  Location     Type
 11294 ;;		None
 11295 ;; Return value:  Size  Location     Type
 11296 ;;                  1    wreg      unsigned char 
 11297 ;; Registers used:
 11298 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11299 ;; Tracked objects:
 11300 ;;		On entry : 0/0
 11301 ;;		On exit  : 0/0
 11302 ;;		Unchanged: 0/0
 11303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11304 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;Total ram usage:        4 bytes
 11309 ;; Hardware stack levels used:    1
 11310 ;; Hardware stack levels required when called:    6
 11311 ;; This function calls:
 11312 ;;		_memset
 11313 ;;		_strcpy
 11314 ;;		_strlen
 11315 ;; This function is called by:
 11316 ;;		_parse_cmd_str
 11317 ;; This function uses a non-reentrant model
 11318 ;;
 11319                           
 11320                           	psect	text47
 11321  002DDA                     __ptext47:
 11322                           	opt stack 0
 11323  002DDA                     _get_str:
 11324                           	opt stack 22
 11325                           
 11326                           ;cmd_consol.c: 39: if (strlen(str) < 40) {
 11327                           
 11328                           ;incstack = 0
 11329  002DDA  C030  F022         	movff	get_str@str,strlen@s
 11330  002DDE  C031  F023         	movff	get_str@str+1,strlen@s+1
 11331  002DE2  EC4C  F019         	call	_strlen	;wreg free
 11332  002DE6  5023               	movf	?_strlen+1,w,c
 11333  002DE8  E129               	bnz	l6775
 11334  002DEA  0E28               	movlw	40
 11335  002DEC  5C22               	subwf	?_strlen,w,c
 11336  002DEE  B0D8               	btfsc	status,0,c
 11337  002DF0  D025               	goto	l733
 11338                           
 11339                           ;cmd_consol.c: 40: strcpy(data_str, str);
 11340  002DF2  C032  F014         	movff	get_str@data_str,strcpy@to
 11341  002DF6  C033  F015         	movff	get_str@data_str+1,strcpy@to+1
 11342  002DFA  C030  F016         	movff	get_str@str,strcpy@from
 11343  002DFE  C031  F017         	movff	get_str@str+1,strcpy@from+1
 11344  002E02  ECE9  F019         	call	_strcpy	;wreg free
 11345                           
 11346                           ;cmd_consol.c: 41: valid_cmd = 1;
 11347  002E06  0E01               	movlw	1
 11348  002E08  0100               	movlb	0	; () banked
 11349  002E0A  6F82               	movwf	_valid_cmd& (0+255),b
 11350                           
 11351                           ; BSR set to: 0
 11352                           ;cmd_consol.c: 42: cmd_data.data_set = 1;
 11353  002E0C  0E01               	movlw	1
 11354  002E0E  6FAC               	movwf	(_cmd_data+41)& (0+255),b
 11355                           
 11356                           ; BSR set to: 0
 11357                           ;cmd_consol.c: 43: memset(str, 0, strlen(str));
 11358  002E10  C030  F028         	movff	get_str@str,memset@p1
 11359  002E14  C031  F029         	movff	get_str@str+1,memset@p1+1
 11360  002E18  0E00               	movlw	0
 11361  002E1A  6E2B               	movwf	memset@c+1,c
 11362  002E1C  0E00               	movlw	0
 11363  002E1E  6E2A               	movwf	memset@c,c
 11364  002E20  C030  F022         	movff	get_str@str,strlen@s
 11365  002E24  C031  F023         	movff	get_str@str+1,strlen@s+1
 11366  002E28  EC4C  F019         	call	_strlen	;wreg free
 11367  002E2C  C022  F02C         	movff	?_strlen,memset@n
 11368  002E30  C023  F02D         	movff	?_strlen+1,memset@n+1
 11369  002E34  EC00  F01A         	call	_memset	;wreg free
 11370                           
 11371                           ;cmd_consol.c: 44: return 1;
 11372  002E38  0E01               	movlw	1
 11373  002E3A  0012               	return	
 11374  002E3C                     l733:
 11375  002E3C                     l6775:
 11376                           
 11377                           ;cmd_consol.c: 45: }
 11378                           ;cmd_consol.c: 46: return 0;
 11379  002E3C  0E00               	movlw	0
 11380  002E3E  0012               	return	
 11381  002E40                     __end_of_get_str:
 11382                           	opt stack 0
 11383                           tblptru	equ	0xFF8
 11384                           tblptrh	equ	0xFF7
 11385                           tblptrl	equ	0xFF6
 11386                           tablat	equ	0xFF5
 11387                           prodh	equ	0xFF4
 11388                           prodl	equ	0xFF3
 11389                           intcon	equ	0xFF2
 11390                           postinc0	equ	0xFEE
 11391                           wreg	equ	0xFE8
 11392                           indf1	equ	0xFE7
 11393                           postinc1	equ	0xFE6
 11394                           postdec1	equ	0xFE5
 11395                           fsr1h	equ	0xFE2
 11396                           fsr1l	equ	0xFE1
 11397                           indf2	equ	0xFDF
 11398                           postinc2	equ	0xFDE
 11399                           postdec2	equ	0xFDD
 11400                           fsr2h	equ	0xFDA
 11401                           fsr2l	equ	0xFD9
 11402                           status	equ	0xFD8
 11403                           
 11404 ;; *************** function _strcpy *****************
 11405 ;; Defined at:
 11406 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strcpy.c"
 11407 ;; Parameters:    Size  Location     Type
 11408 ;;  to              2   19[COMRAM] PTR unsigned char 
 11409 ;;		 -> CMD(15), cmd_data(52), clcd_display_string_details(1100), 
 11410 ;;  from            2   21[COMRAM] PTR const unsigned char 
 11411 ;;		 -> uart_str(150), cmd_data.data(40), NULL(0), cmd_data(52), 
 11412 ;; Auto vars:     Size  Location     Type
 11413 ;;  cp              2   23[COMRAM] PTR unsigned char 
 11414 ;;		 -> CMD(15), cmd_data(52), clcd_display_string_details(1100), 
 11415 ;; Return value:  Size  Location     Type
 11416 ;;                  2   19[COMRAM] PTR unsigned char 
 11417 ;; Registers used:
 11418 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 11419 ;; Tracked objects:
 11420 ;;		On entry : 0/0
 11421 ;;		On exit  : 0/0
 11422 ;;		Unchanged: 0/0
 11423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11424 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11425 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11427 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11428 ;;Total ram usage:        6 bytes
 11429 ;; Hardware stack levels used:    1
 11430 ;; Hardware stack levels required when called:    5
 11431 ;; This function calls:
 11432 ;;		Nothing
 11433 ;; This function is called by:
 11434 ;;		_copy_data
 11435 ;;		_get_str
 11436 ;;		_parse_cmd_str
 11437 ;;		_copy_display_struct
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441                           	psect	text48
 11442  0033D2                     __ptext48:
 11443                           	opt stack 0
 11444  0033D2                     _strcpy:
 11445                           	opt stack 21
 11446                           
 11447                           ;incstack = 0
 11448  0033D2  C014  F018         	movff	strcpy@to,strcpy@cp
 11449  0033D6  C015  F019         	movff	strcpy@to+1,strcpy@cp+1
 11450  0033DA  D004               	goto	l1701
 11451  0033DC  4A18               	infsnz	strcpy@cp,f,c
 11452  0033DE  2A19               	incf	strcpy@cp+1,f,c
 11453  0033E0  4A16               	infsnz	strcpy@from,f,c
 11454  0033E2  2A17               	incf	strcpy@from+1,f,c
 11455  0033E4                     l1701:
 11456  0033E4  C016  FFD9         	movff	strcpy@from,fsr2l
 11457  0033E8  C017  FFDA         	movff	strcpy@from+1,fsr2h
 11458  0033EC  C018  FFE1         	movff	strcpy@cp,fsr1l
 11459  0033F0  C019  FFE2         	movff	strcpy@cp+1,fsr1h
 11460  0033F4  CFDF FFE7          	movff	indf2,indf1
 11461  0033F8  50E7               	movf	indf1,w,c
 11462  0033FA  B4D8               	btfsc	status,2,c
 11463  0033FC  0012               	return	
 11464  0033FE  D7EE               	goto	l1702
 11465  003400                     __end_of_strcpy:
 11466                           	opt stack 0
 11467                           tblptru	equ	0xFF8
 11468                           tblptrh	equ	0xFF7
 11469                           tblptrl	equ	0xFF6
 11470                           tablat	equ	0xFF5
 11471                           prodh	equ	0xFF4
 11472                           prodl	equ	0xFF3
 11473                           intcon	equ	0xFF2
 11474                           postinc0	equ	0xFEE
 11475                           wreg	equ	0xFE8
 11476                           indf1	equ	0xFE7
 11477                           postinc1	equ	0xFE6
 11478                           postdec1	equ	0xFE5
 11479                           fsr1h	equ	0xFE2
 11480                           fsr1l	equ	0xFE1
 11481                           indf2	equ	0xFDF
 11482                           postinc2	equ	0xFDE
 11483                           postdec2	equ	0xFDD
 11484                           fsr2h	equ	0xFDA
 11485                           fsr2l	equ	0xFD9
 11486                           status	equ	0xFD8
 11487                           
 11488 ;; *************** function _memset *****************
 11489 ;; Defined at:
 11490 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\memset.c"
 11491 ;; Parameters:    Size  Location     Type
 11492 ;;  p1              2   39[COMRAM] PTR void 
 11493 ;;		 -> uart_str(150), str_data(40), CMD(15), NULL(0), 
 11494 ;;		 -> cmd_data(52), conflict_arr(40), clcd_display_string_details(1100), lcd_display_array(80), 
 11495 ;;		 -> clcd_config_data(5), 
 11496 ;;  c               2   41[COMRAM] int 
 11497 ;;  n               2   43[COMRAM] unsigned int 
 11498 ;; Auto vars:     Size  Location     Type
 11499 ;;  p               2   45[COMRAM] PTR unsigned char 
 11500 ;;		 -> uart_str(150), str_data(40), CMD(15), NULL(0), 
 11501 ;;		 -> cmd_data(52), conflict_arr(40), clcd_display_string_details(1100), lcd_display_array(80), 
 11502 ;;		 -> clcd_config_data(5), 
 11503 ;; Return value:  Size  Location     Type
 11504 ;;                  2   39[COMRAM] PTR void 
 11505 ;; Registers used:
 11506 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11507 ;; Tracked objects:
 11508 ;;		On entry : 0/0
 11509 ;;		On exit  : 0/0
 11510 ;;		Unchanged: 0/0
 11511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11512 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11513 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11515 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;Total ram usage:        8 bytes
 11517 ;; Hardware stack levels used:    1
 11518 ;; Hardware stack levels required when called:    5
 11519 ;; This function calls:
 11520 ;;		Nothing
 11521 ;; This function is called by:
 11522 ;;		_init_CLCD_config
 11523 ;;		_init_clcd_cusotom_lcd
 11524 ;;		_update_string_data
 11525 ;;		_clcd_display_string_config
 11526 ;;		_clear_display_structure
 11527 ;;		_clear_display_array
 11528 ;;		_scroll_left_to_right
 11529 ;;		_scroll_right_to_left
 11530 ;;		_clear_cmd_data
 11531 ;;		_get_str
 11532 ;;		_parse_cmd_str
 11533 ;;		_console_init
 11534 ;;		_cmd_consol_task
 11535 ;;		_set_string_data
 11536 ;; This function uses a non-reentrant model
 11537 ;;
 11538                           
 11539                           	psect	text49
 11540  003400                     __ptext49:
 11541                           	opt stack 0
 11542  003400                     _memset:
 11543                           	opt stack 23
 11544                           
 11545                           ;incstack = 0
 11546  003400  C028  F02E         	movff	memset@p1,memset@p
 11547  003404  C029  F02F         	movff	memset@p1+1,memset@p+1
 11548  003408  D008               	goto	l1552
 11549  00340A                     l4059:
 11550  00340A  C02E  FFD9         	movff	memset@p,fsr2l
 11551  00340E  C02F  FFDA         	movff	memset@p+1,fsr2h
 11552  003412  C02A  FFDF         	movff	memset@c,indf2
 11553  003416  4A2E               	infsnz	memset@p,f,c
 11554  003418  2A2F               	incf	memset@p+1,f,c
 11555  00341A                     l1552:
 11556  00341A  062C               	decf	memset@n,f,c
 11557  00341C  A0D8               	btfss	status,0,c
 11558  00341E  062D               	decf	memset@n+1,f,c
 11559  003420  282C               	incf	memset@n,w,c
 11560  003422  E1F3               	bnz	l4059
 11561  003424  282D               	incf	memset@n+1,w,c
 11562  003426  B4D8               	btfsc	status,2,c
 11563  003428  0012               	return	
 11564  00342A  D7EF               	goto	l1553
 11565  00342C                     __end_of_memset:
 11566                           	opt stack 0
 11567                           tblptru	equ	0xFF8
 11568                           tblptrh	equ	0xFF7
 11569                           tblptrl	equ	0xFF6
 11570                           tablat	equ	0xFF5
 11571                           prodh	equ	0xFF4
 11572                           prodl	equ	0xFF3
 11573                           intcon	equ	0xFF2
 11574                           postinc0	equ	0xFEE
 11575                           wreg	equ	0xFE8
 11576                           indf1	equ	0xFE7
 11577                           postinc1	equ	0xFE6
 11578                           postdec1	equ	0xFE5
 11579                           fsr1h	equ	0xFE2
 11580                           fsr1l	equ	0xFE1
 11581                           indf2	equ	0xFDF
 11582                           postinc2	equ	0xFDE
 11583                           postdec2	equ	0xFDD
 11584                           fsr2h	equ	0xFDA
 11585                           fsr2l	equ	0xFD9
 11586                           status	equ	0xFD8
 11587                           
 11588 ;; *************** function _get_over_write_data *****************
 11589 ;; Defined at:
 11590 ;;		line 85 in file "cmd_consol.c"
 11591 ;; Parameters:    Size  Location     Type
 11592 ;;  str             2   51[COMRAM] PTR unsigned char 
 11593 ;;		 -> uart_str(150), NULL(0), 
 11594 ;;  over_write_d    2   53[COMRAM] PTR unsigned char 
 11595 ;;		 -> cmd_data(52), 
 11596 ;; Auto vars:     Size  Location     Type
 11597 ;;  i               2    1[BANK0 ] int 
 11598 ;;  over_write      1    0[BANK0 ] unsigned char 
 11599 ;; Return value:  Size  Location     Type
 11600 ;;                  1    wreg      unsigned char 
 11601 ;; Registers used:
 11602 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11603 ;; Tracked objects:
 11604 ;;		On entry : 0/0
 11605 ;;		On exit  : 0/0
 11606 ;;		Unchanged: 0/0
 11607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11608 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;Total ram usage:        8 bytes
 11613 ;; Hardware stack levels used:    1
 11614 ;; Hardware stack levels required when called:    8
 11615 ;; This function calls:
 11616 ;;		_isdigit
 11617 ;;		_printf
 11618 ;;		_strlen
 11619 ;; This function is called by:
 11620 ;;		_parse_cmd_str
 11621 ;; This function uses a non-reentrant model
 11622 ;;
 11623                           
 11624                           	psect	text50
 11625  002AA2                     __ptext50:
 11626                           	opt stack 0
 11627  002AA2                     _get_over_write_data:
 11628                           	opt stack 20
 11629                           
 11630                           ;cmd_consol.c: 86: char over_write = 0;
 11631                           
 11632                           ;incstack = 0
 11633  002AA2  0E00               	movlw	0
 11634  002AA4  0100               	movlb	0	; () banked
 11635  002AA6  6FC6               	movwf	get_over_write_data@over_write& (0+255),b
 11636                           
 11637                           ;cmd_consol.c: 87: int i = 0;
 11638  002AA8  0E00               	movlw	0
 11639  002AAA  6FC8               	movwf	(get_over_write_data@i+1)& (0+255),b
 11640  002AAC  0E00               	movlw	0
 11641  002AAE  6FC7               	movwf	get_over_write_data@i& (0+255),b
 11642                           
 11643                           ;cmd_consol.c: 88: for (i = 0; i < strlen(str); i++) {
 11644  002AB0  0E00               	movlw	0
 11645  002AB2  6FC8               	movwf	(get_over_write_data@i+1)& (0+255),b
 11646  002AB4  0E00               	movlw	0
 11647  002AB6  6FC7               	movwf	get_over_write_data@i& (0+255),b
 11648  002AB8  D026               	goto	l755
 11649  002ABA                     
 11650                           ; BSR set to: 0
 11651                           ;cmd_consol.c: 89: if (isdigit(str[i]) == 1) {
 11652                           
 11653                           ; BSR set to: 0
 11654  002ABA  51C7               	movf	get_over_write_data@i& (0+255),w,b
 11655  002ABC  2434               	addwf	get_over_write_data@str,w,c
 11656  002ABE  6ED9               	movwf	fsr2l,c
 11657  002AC0  51C8               	movf	(get_over_write_data@i+1)& (0+255),w,b
 11658  002AC2  2035               	addwfc	get_over_write_data@str+1,w,c
 11659  002AC4  6EDA               	movwf	fsr2h,c
 11660  002AC6  50DF               	movf	indf2,w,c
 11661  002AC8  ECA4  F01A         	call	_isdigit
 11662  002ACC  A0D8               	btfss	status,0,c
 11663  002ACE  D010               	goto	l757
 11664                           
 11665                           ;cmd_consol.c: 90: over_write = over_write * 10 + (str[i] - '0');
 11666  002AD0  0100               	movlb	0	; () banked
 11667  002AD2  51C7               	movf	get_over_write_data@i& (0+255),w,b
 11668  002AD4  2434               	addwf	get_over_write_data@str,w,c
 11669  002AD6  6ED9               	movwf	fsr2l,c
 11670  002AD8  51C8               	movf	(get_over_write_data@i+1)& (0+255),w,b
 11671  002ADA  2035               	addwfc	get_over_write_data@str+1,w,c
 11672  002ADC  6EDA               	movwf	fsr2h,c
 11673  002ADE  50DF               	movf	indf2,w,c
 11674  002AE0  6E38               	movwf	??_get_over_write_data& (0+255),c
 11675  002AE2  51C6               	movf	get_over_write_data@over_write& (0+255),w,b
 11676  002AE4  0D0A               	mullw	10
 11677  002AE6  50F3               	movf	prodl,w,c
 11678  002AE8  2438               	addwf	??_get_over_write_data,w,c
 11679  002AEA  0FD0               	addlw	208
 11680  002AEC  6FC6               	movwf	get_over_write_data@over_write& (0+255),b
 11681                           
 11682                           ;cmd_consol.c: 91: } else {
 11683  002AEE  D008               	goto	l758
 11684  002AF0                     l757:
 11685                           
 11686                           ;cmd_consol.c: 92: *over_write_data = 0;
 11687                           
 11688                           ; BSR set to: 0
 11689  002AF0  C036  FFD9         	movff	get_over_write_data@over_write_data,fsr2l
 11690  002AF4  C037  FFDA         	movff	get_over_write_data@over_write_data+1,fsr2h
 11691  002AF8  0E00               	movlw	0
 11692  002AFA  6EDF               	movwf	indf2,c
 11693                           
 11694                           ;cmd_consol.c: 93: return 0;
 11695  002AFC  0E00               	movlw	0
 11696  002AFE  0012               	return	
 11697  002B00                     l758:
 11698  002B00  0100               	movlb	0	; () banked
 11699  002B02  4BC7               	infsnz	get_over_write_data@i& (0+255),f,b
 11700  002B04  2BC8               	incf	(get_over_write_data@i+1)& (0+255),f,b
 11701  002B06                     l755:
 11702                           
 11703                           ; BSR set to: 0
 11704                           
 11705                           ; BSR set to: 0
 11706  002B06  C034  F022         	movff	get_over_write_data@str,strlen@s
 11707  002B0A  C035  F023         	movff	get_over_write_data@str+1,strlen@s+1
 11708  002B0E  EC4C  F019         	call	_strlen	;wreg free
 11709  002B12  5022               	movf	?_strlen,w,c
 11710  002B14  0100               	movlb	0	; () banked
 11711  002B16  5DC7               	subwf	get_over_write_data@i& (0+255),w,b
 11712  002B18  5023               	movf	?_strlen+1,w,c
 11713  002B1A  59C8               	subwfb	(get_over_write_data@i+1)& (0+255),w,b
 11714  002B1C  A0D8               	btfss	status,0,c
 11715  002B1E  D7CD               	goto	l756
 11716                           
 11717                           ; BSR set to: 0
 11718                           ;cmd_consol.c: 94: }
 11719                           ;cmd_consol.c: 95: }
 11720                           ;cmd_consol.c: 96: printf("over_write = %d\r\n", over_write);
 11721                           
 11722                           ; BSR set to: 0
 11723  002B20  0EF6               	movlw	low STR_24
 11724  002B22  6E22               	movwf	printf@f,c
 11725  002B24  0EFD               	movlw	high STR_24
 11726  002B26  6E23               	movwf	printf@f+1,c
 11727  002B28  C0C6  F024         	movff	get_over_write_data@over_write,?_printf+2
 11728  002B2C  6A25               	clrf	?_printf+3,c
 11729  002B2E  EC22  F011         	call	_printf	;wreg free
 11730                           
 11731                           ;cmd_consol.c: 97: *over_write_data = over_write;
 11732  002B32  C036  FFD9         	movff	get_over_write_data@over_write_data,fsr2l
 11733  002B36  C037  FFDA         	movff	get_over_write_data@over_write_data+1,fsr2h
 11734  002B3A  C0C6  FFDF         	movff	get_over_write_data@over_write,indf2
 11735                           
 11736                           ;cmd_consol.c: 98: return 1;
 11737  002B3E  0E01               	movlw	1
 11738  002B40  0012               	return	
 11739  002B42                     __end_of_get_over_write_data:
 11740                           	opt stack 0
 11741                           tblptru	equ	0xFF8
 11742                           tblptrh	equ	0xFF7
 11743                           tblptrl	equ	0xFF6
 11744                           tablat	equ	0xFF5
 11745                           prodh	equ	0xFF4
 11746                           prodl	equ	0xFF3
 11747                           intcon	equ	0xFF2
 11748                           postinc0	equ	0xFEE
 11749                           wreg	equ	0xFE8
 11750                           indf1	equ	0xFE7
 11751                           postinc1	equ	0xFE6
 11752                           postdec1	equ	0xFE5
 11753                           fsr1h	equ	0xFE2
 11754                           fsr1l	equ	0xFE1
 11755                           indf2	equ	0xFDF
 11756                           postinc2	equ	0xFDE
 11757                           postdec2	equ	0xFDD
 11758                           fsr2h	equ	0xFDA
 11759                           fsr2l	equ	0xFD9
 11760                           status	equ	0xFD8
 11761                           
 11762 ;; *************** function _get_dis_frq *****************
 11763 ;; Defined at:
 11764 ;;		line 68 in file "cmd_consol.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;  str             2   51[COMRAM] PTR unsigned char 
 11767 ;;		 -> uart_str(150), NULL(0), 
 11768 ;;  data_frq        2   53[COMRAM] PTR unsigned char 
 11769 ;;		 -> cmd_data(52), 
 11770 ;; Auto vars:     Size  Location     Type
 11771 ;;  i               2    1[BANK0 ] int 
 11772 ;;  frq             1    0[BANK0 ] unsigned char 
 11773 ;; Return value:  Size  Location     Type
 11774 ;;                  1    wreg      unsigned char 
 11775 ;; Registers used:
 11776 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11777 ;; Tracked objects:
 11778 ;;		On entry : 0/0
 11779 ;;		On exit  : 0/0
 11780 ;;		Unchanged: 0/0
 11781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11782 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11783 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11785 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11786 ;;Total ram usage:        8 bytes
 11787 ;; Hardware stack levels used:    1
 11788 ;; Hardware stack levels required when called:    8
 11789 ;; This function calls:
 11790 ;;		_isdigit
 11791 ;;		_printf
 11792 ;;		_strlen
 11793 ;; This function is called by:
 11794 ;;		_parse_cmd_str
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           	psect	text51
 11799  002B42                     __ptext51:
 11800                           	opt stack 0
 11801  002B42                     _get_dis_frq:
 11802                           	opt stack 20
 11803                           
 11804                           ;cmd_consol.c: 69: char frq = 0;
 11805                           
 11806                           ;incstack = 0
 11807  002B42  0E00               	movlw	0
 11808  002B44  0100               	movlb	0	; () banked
 11809  002B46  6FC6               	movwf	get_dis_frq@frq& (0+255),b
 11810                           
 11811                           ;cmd_consol.c: 70: int i = 0;
 11812  002B48  0E00               	movlw	0
 11813  002B4A  6FC8               	movwf	(get_dis_frq@i+1)& (0+255),b
 11814  002B4C  0E00               	movlw	0
 11815  002B4E  6FC7               	movwf	get_dis_frq@i& (0+255),b
 11816                           
 11817                           ;cmd_consol.c: 71: for (i = 0; i < strlen(str); i++) {
 11818  002B50  0E00               	movlw	0
 11819  002B52  6FC8               	movwf	(get_dis_frq@i+1)& (0+255),b
 11820  002B54  0E00               	movlw	0
 11821  002B56  6FC7               	movwf	get_dis_frq@i& (0+255),b
 11822  002B58  D026               	goto	l747
 11823  002B5A                     
 11824                           ; BSR set to: 0
 11825                           ;cmd_consol.c: 72: if (isdigit(str[i]) == 1) {
 11826                           
 11827                           ; BSR set to: 0
 11828  002B5A  51C7               	movf	get_dis_frq@i& (0+255),w,b
 11829  002B5C  2434               	addwf	get_dis_frq@str,w,c
 11830  002B5E  6ED9               	movwf	fsr2l,c
 11831  002B60  51C8               	movf	(get_dis_frq@i+1)& (0+255),w,b
 11832  002B62  2035               	addwfc	get_dis_frq@str+1,w,c
 11833  002B64  6EDA               	movwf	fsr2h,c
 11834  002B66  50DF               	movf	indf2,w,c
 11835  002B68  ECA4  F01A         	call	_isdigit
 11836  002B6C  A0D8               	btfss	status,0,c
 11837  002B6E  D010               	goto	l749
 11838                           
 11839                           ;cmd_consol.c: 73: frq = frq * 10 + (str[i] - '0');
 11840  002B70  0100               	movlb	0	; () banked
 11841  002B72  51C7               	movf	get_dis_frq@i& (0+255),w,b
 11842  002B74  2434               	addwf	get_dis_frq@str,w,c
 11843  002B76  6ED9               	movwf	fsr2l,c
 11844  002B78  51C8               	movf	(get_dis_frq@i+1)& (0+255),w,b
 11845  002B7A  2035               	addwfc	get_dis_frq@str+1,w,c
 11846  002B7C  6EDA               	movwf	fsr2h,c
 11847  002B7E  50DF               	movf	indf2,w,c
 11848  002B80  6E38               	movwf	??_get_dis_frq& (0+255),c
 11849  002B82  51C6               	movf	get_dis_frq@frq& (0+255),w,b
 11850  002B84  0D0A               	mullw	10
 11851  002B86  50F3               	movf	prodl,w,c
 11852  002B88  2438               	addwf	??_get_dis_frq,w,c
 11853  002B8A  0FD0               	addlw	208
 11854  002B8C  6FC6               	movwf	get_dis_frq@frq& (0+255),b
 11855                           
 11856                           ;cmd_consol.c: 74: } else {
 11857  002B8E  D008               	goto	l750
 11858  002B90                     l749:
 11859                           
 11860                           ;cmd_consol.c: 75: *data_frq = 1;
 11861                           
 11862                           ; BSR set to: 0
 11863  002B90  C036  FFD9         	movff	get_dis_frq@data_frq,fsr2l
 11864  002B94  C037  FFDA         	movff	get_dis_frq@data_frq+1,fsr2h
 11865  002B98  0E01               	movlw	1
 11866  002B9A  6EDF               	movwf	indf2,c
 11867                           
 11868                           ;cmd_consol.c: 77: return 0;
 11869  002B9C  0E00               	movlw	0
 11870  002B9E  0012               	return	
 11871  002BA0                     l750:
 11872  002BA0  0100               	movlb	0	; () banked
 11873  002BA2  4BC7               	infsnz	get_dis_frq@i& (0+255),f,b
 11874  002BA4  2BC8               	incf	(get_dis_frq@i+1)& (0+255),f,b
 11875  002BA6                     l747:
 11876                           
 11877                           ; BSR set to: 0
 11878                           
 11879                           ; BSR set to: 0
 11880  002BA6  C034  F022         	movff	get_dis_frq@str,strlen@s
 11881  002BAA  C035  F023         	movff	get_dis_frq@str+1,strlen@s+1
 11882  002BAE  EC4C  F019         	call	_strlen	;wreg free
 11883  002BB2  5022               	movf	?_strlen,w,c
 11884  002BB4  0100               	movlb	0	; () banked
 11885  002BB6  5DC7               	subwf	get_dis_frq@i& (0+255),w,b
 11886  002BB8  5023               	movf	?_strlen+1,w,c
 11887  002BBA  59C8               	subwfb	(get_dis_frq@i+1)& (0+255),w,b
 11888  002BBC  A0D8               	btfss	status,0,c
 11889  002BBE  D7CD               	goto	l748
 11890                           
 11891                           ; BSR set to: 0
 11892                           ;cmd_consol.c: 78: }
 11893                           ;cmd_consol.c: 79: }
 11894                           ;cmd_consol.c: 80: printf("display_frq = %d\r\n", frq);
 11895                           
 11896                           ; BSR set to: 0
 11897  002BC0  0EBE               	movlw	low STR_23
 11898  002BC2  6E22               	movwf	printf@f,c
 11899  002BC4  0EFD               	movlw	high STR_23
 11900  002BC6  6E23               	movwf	printf@f+1,c
 11901  002BC8  C0C6  F024         	movff	get_dis_frq@frq,?_printf+2
 11902  002BCC  6A25               	clrf	?_printf+3,c
 11903  002BCE  EC22  F011         	call	_printf	;wreg free
 11904                           
 11905                           ;cmd_consol.c: 81: *data_frq = frq;
 11906  002BD2  C036  FFD9         	movff	get_dis_frq@data_frq,fsr2l
 11907  002BD6  C037  FFDA         	movff	get_dis_frq@data_frq+1,fsr2h
 11908  002BDA  C0C6  FFDF         	movff	get_dis_frq@frq,indf2
 11909                           
 11910                           ;cmd_consol.c: 82: return 1;
 11911  002BDE  0E01               	movlw	1
 11912  002BE0  0012               	return	
 11913  002BE2                     __end_of_get_dis_frq:
 11914                           	opt stack 0
 11915                           tblptru	equ	0xFF8
 11916                           tblptrh	equ	0xFF7
 11917                           tblptrl	equ	0xFF6
 11918                           tablat	equ	0xFF5
 11919                           prodh	equ	0xFF4
 11920                           prodl	equ	0xFF3
 11921                           intcon	equ	0xFF2
 11922                           postinc0	equ	0xFEE
 11923                           wreg	equ	0xFE8
 11924                           indf1	equ	0xFE7
 11925                           postinc1	equ	0xFE6
 11926                           postdec1	equ	0xFE5
 11927                           fsr1h	equ	0xFE2
 11928                           fsr1l	equ	0xFE1
 11929                           indf2	equ	0xFDF
 11930                           postinc2	equ	0xFDE
 11931                           postdec2	equ	0xFDD
 11932                           fsr2h	equ	0xFDA
 11933                           fsr2l	equ	0xFD9
 11934                           status	equ	0xFD8
 11935                           
 11936 ;; *************** function _get_direction *****************
 11937 ;; Defined at:
 11938 ;;		line 49 in file "cmd_consol.c"
 11939 ;; Parameters:    Size  Location     Type
 11940 ;;  str             2   51[COMRAM] PTR unsigned char 
 11941 ;;		 -> uart_str(150), NULL(0), 
 11942 ;;  data_directi    2   53[COMRAM] PTR unsigned char 
 11943 ;;		 -> cmd_data(52), 
 11944 ;; Auto vars:     Size  Location     Type
 11945 ;;  i               2    0[BANK0 ] int 
 11946 ;;  direction       1    2[BANK0 ] unsigned char 
 11947 ;; Return value:  Size  Location     Type
 11948 ;;                  1    wreg      unsigned char 
 11949 ;; Registers used:
 11950 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11951 ;; Tracked objects:
 11952 ;;		On entry : 0/0
 11953 ;;		On exit  : 0/0
 11954 ;;		Unchanged: 0/0
 11955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11956 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11957 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11958 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11959 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11960 ;;Total ram usage:        8 bytes
 11961 ;; Hardware stack levels used:    1
 11962 ;; Hardware stack levels required when called:    8
 11963 ;; This function calls:
 11964 ;;		_isdigit
 11965 ;;		_printf
 11966 ;;		_strlen
 11967 ;; This function is called by:
 11968 ;;		_parse_cmd_str
 11969 ;; This function uses a non-reentrant model
 11970 ;;
 11971                           
 11972                           	psect	text52
 11973  0029F4                     __ptext52:
 11974                           	opt stack 0
 11975  0029F4                     _get_direction:
 11976                           	opt stack 20
 11977                           
 11978                           ;cmd_consol.c: 50: char direction = 0;
 11979                           
 11980                           ;incstack = 0
 11981  0029F4  0E00               	movlw	0
 11982  0029F6  0100               	movlb	0	; () banked
 11983  0029F8  6FC8               	movwf	get_direction@direction& (0+255),b
 11984                           
 11985                           ;cmd_consol.c: 51: int i = 0;
 11986  0029FA  0E00               	movlw	0
 11987  0029FC  6FC7               	movwf	(get_direction@i+1)& (0+255),b
 11988  0029FE  0E00               	movlw	0
 11989  002A00  6FC6               	movwf	get_direction@i& (0+255),b
 11990                           
 11991                           ;cmd_consol.c: 52: for (i = 0; i < strlen(str); i++) {
 11992  002A02  0E00               	movlw	0
 11993  002A04  6FC7               	movwf	(get_direction@i+1)& (0+255),b
 11994  002A06  0E00               	movlw	0
 11995  002A08  6FC6               	movwf	get_direction@i& (0+255),b
 11996  002A0A  D020               	goto	l737
 11997  002A0C                     
 11998                           ; BSR set to: 0
 11999                           ;cmd_consol.c: 53: if (isdigit(str[i]) == 1)
 12000                           
 12001                           ; BSR set to: 0
 12002  002A0C  51C6               	movf	get_direction@i& (0+255),w,b
 12003  002A0E  2434               	addwf	get_direction@str,w,c
 12004  002A10  6ED9               	movwf	fsr2l,c
 12005  002A12  51C7               	movf	(get_direction@i+1)& (0+255),w,b
 12006  002A14  2035               	addwfc	get_direction@str+1,w,c
 12007  002A16  6EDA               	movwf	fsr2h,c
 12008  002A18  50DF               	movf	indf2,w,c
 12009  002A1A  ECA4  F01A         	call	_isdigit
 12010  002A1E  A0D8               	btfss	status,0,c
 12011  002A20  D010               	goto	l739
 12012                           
 12013                           ;cmd_consol.c: 54: direction = direction * 10 + (str[i] - '0');
 12014  002A22  0100               	movlb	0	; () banked
 12015  002A24  51C6               	movf	get_direction@i& (0+255),w,b
 12016  002A26  2434               	addwf	get_direction@str,w,c
 12017  002A28  6ED9               	movwf	fsr2l,c
 12018  002A2A  51C7               	movf	(get_direction@i+1)& (0+255),w,b
 12019  002A2C  2035               	addwfc	get_direction@str+1,w,c
 12020  002A2E  6EDA               	movwf	fsr2h,c
 12021  002A30  50DF               	movf	indf2,w,c
 12022  002A32  6E38               	movwf	??_get_direction& (0+255),c
 12023  002A34  51C8               	movf	get_direction@direction& (0+255),w,b
 12024  002A36  0D0A               	mullw	10
 12025  002A38  50F3               	movf	prodl,w,c
 12026  002A3A  2438               	addwf	??_get_direction,w,c
 12027  002A3C  0FD0               	addlw	208
 12028  002A3E  6FC8               	movwf	get_direction@direction& (0+255),b
 12029  002A40  D002               	goto	l740
 12030  002A42                     l739:
 12031                           
 12032                           ;cmd_consol.c: 55: else
 12033                           ;cmd_consol.c: 56: return 0;
 12034                           
 12035                           ; BSR set to: 0
 12036  002A42  0E00               	movlw	0
 12037  002A44  0012               	return	
 12038  002A46                     l740:
 12039  002A46  0100               	movlb	0	; () banked
 12040  002A48  4BC6               	infsnz	get_direction@i& (0+255),f,b
 12041  002A4A  2BC7               	incf	(get_direction@i+1)& (0+255),f,b
 12042  002A4C                     l737:
 12043                           
 12044                           ; BSR set to: 0
 12045                           
 12046                           ; BSR set to: 0
 12047  002A4C  C034  F022         	movff	get_direction@str,strlen@s
 12048  002A50  C035  F023         	movff	get_direction@str+1,strlen@s+1
 12049  002A54  EC4C  F019         	call	_strlen	;wreg free
 12050  002A58  5022               	movf	?_strlen,w,c
 12051  002A5A  0100               	movlb	0	; () banked
 12052  002A5C  5DC6               	subwf	get_direction@i& (0+255),w,b
 12053  002A5E  5023               	movf	?_strlen+1,w,c
 12054  002A60  59C7               	subwfb	(get_direction@i+1)& (0+255),w,b
 12055  002A62  A0D8               	btfss	status,0,c
 12056  002A64  D7D3               	goto	l738
 12057                           
 12058                           ; BSR set to: 0
 12059                           ;cmd_consol.c: 57: }
 12060                           ;cmd_consol.c: 58: printf("direction = %d\r\n", direction);
 12061                           
 12062                           ; BSR set to: 0
 12063  002A66  0E1A               	movlw	low STR_22
 12064  002A68  6E22               	movwf	printf@f,c
 12065  002A6A  0EFE               	movlw	high STR_22
 12066  002A6C  6E23               	movwf	printf@f+1,c
 12067  002A6E  C0C8  F024         	movff	get_direction@direction,?_printf+2
 12068  002A72  6A25               	clrf	?_printf+3,c
 12069  002A74  EC22  F011         	call	_printf	;wreg free
 12070                           
 12071                           ;cmd_consol.c: 59: if (direction >= clcd_config_data.clcd_max_row) {
 12072  002A78  5045               	movf	_clcd_config_data+1,w,c
 12073  002A7A  0100               	movlb	0	; () banked
 12074  002A7C  5DC8               	subwf	get_direction@direction& (0+255),w,b
 12075  002A7E  A0D8               	btfss	status,0,c
 12076  002A80  D008               	goto	l743
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;cmd_consol.c: 60: *data_direction = -1;
 12080  002A82  C036  FFD9         	movff	get_direction@data_direction,fsr2l
 12081  002A86  C037  FFDA         	movff	get_direction@data_direction+1,fsr2h
 12082  002A8A  0EFF               	movlw	255
 12083  002A8C  6EDF               	movwf	indf2,c
 12084                           
 12085                           ; BSR set to: 0
 12086                           ;cmd_consol.c: 61: return 0;
 12087  002A8E  0E00               	movlw	0
 12088                           
 12089                           ; BSR set to: 0
 12090                           ;cmd_consol.c: 62: } else {
 12091                           
 12092                           ; BSR set to: 0
 12093  002A90  0012               	return	
 12094  002A92                     l743:
 12095                           
 12096                           ; BSR set to: 0
 12097                           ;cmd_consol.c: 63: *data_direction = direction;
 12098                           
 12099                           ; BSR set to: 0
 12100  002A92  C036  FFD9         	movff	get_direction@data_direction,fsr2l
 12101  002A96  C037  FFDA         	movff	get_direction@data_direction+1,fsr2h
 12102  002A9A  C0C8  FFDF         	movff	get_direction@direction,indf2
 12103                           
 12104                           ; BSR set to: 0
 12105                           ;cmd_consol.c: 64: return 1;
 12106  002A9E  0E01               	movlw	1
 12107                           
 12108                           ; BSR set to: 0
 12109  002AA0  0012               	return	
 12110  002AA2                     __end_of_get_direction:
 12111                           	opt stack 0
 12112                           tblptru	equ	0xFF8
 12113                           tblptrh	equ	0xFF7
 12114                           tblptrl	equ	0xFF6
 12115                           tablat	equ	0xFF5
 12116                           prodh	equ	0xFF4
 12117                           prodl	equ	0xFF3
 12118                           intcon	equ	0xFF2
 12119                           postinc0	equ	0xFEE
 12120                           wreg	equ	0xFE8
 12121                           indf1	equ	0xFE7
 12122                           postinc1	equ	0xFE6
 12123                           postdec1	equ	0xFE5
 12124                           fsr1h	equ	0xFE2
 12125                           fsr1l	equ	0xFE1
 12126                           indf2	equ	0xFDF
 12127                           postinc2	equ	0xFDE
 12128                           postdec2	equ	0xFDD
 12129                           fsr2h	equ	0xFDA
 12130                           fsr2l	equ	0xFD9
 12131                           status	equ	0xFD8
 12132                           
 12133 ;; *************** function _collect_row *****************
 12134 ;; Defined at:
 12135 ;;		line 16 in file "cmd_consol.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;  str             2   51[COMRAM] PTR unsigned char 
 12138 ;;		 -> uart_str(150), NULL(0), 
 12139 ;;  data_row        2   53[COMRAM] PTR unsigned char 
 12140 ;;		 -> cmd_data(52), 
 12141 ;; Auto vars:     Size  Location     Type
 12142 ;;  i               2    0[BANK0 ] int 
 12143 ;;  row             1    2[BANK0 ] unsigned char 
 12144 ;; Return value:  Size  Location     Type
 12145 ;;                  1    wreg      void 
 12146 ;; Registers used:
 12147 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12148 ;; Tracked objects:
 12149 ;;		On entry : 0/0
 12150 ;;		On exit  : 0/0
 12151 ;;		Unchanged: 0/0
 12152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12153 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12154 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12155 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12156 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12157 ;;Total ram usage:        8 bytes
 12158 ;; Hardware stack levels used:    1
 12159 ;; Hardware stack levels required when called:    8
 12160 ;; This function calls:
 12161 ;;		_isdigit
 12162 ;;		_printf
 12163 ;;		_strlen
 12164 ;; This function is called by:
 12165 ;;		_parse_cmd_str
 12166 ;; This function uses a non-reentrant model
 12167 ;;
 12168                           
 12169                           	psect	text53
 12170  002724                     __ptext53:
 12171                           	opt stack 0
 12172  002724                     _collect_row:
 12173                           	opt stack 20
 12174                           
 12175                           ;cmd_consol.c: 17: printf("row1 = %s\r\n", str);
 12176                           
 12177                           ;incstack = 0
 12178  002724  0ED2               	movlw	low STR_20
 12179  002726  6E22               	movwf	printf@f,c
 12180  002728  0EFE               	movlw	high STR_20
 12181  00272A  6E23               	movwf	printf@f+1,c
 12182  00272C  C034  F024         	movff	collect_row@str,?_printf+2
 12183  002730  C035  F025         	movff	collect_row@str+1,?_printf+3
 12184  002734  EC22  F011         	call	_printf	;wreg free
 12185                           
 12186                           ;cmd_consol.c: 18: char row = 0;
 12187  002738  0E00               	movlw	0
 12188  00273A  0100               	movlb	0	; () banked
 12189  00273C  6FC8               	movwf	collect_row@row& (0+255),b
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;cmd_consol.c: 19: int i = 0;
 12193  00273E  0E00               	movlw	0
 12194  002740  6FC7               	movwf	(collect_row@i+1)& (0+255),b
 12195  002742  0E00               	movlw	0
 12196  002744  6FC6               	movwf	collect_row@i& (0+255),b
 12197                           
 12198                           ; BSR set to: 0
 12199                           ;cmd_consol.c: 20: for (i = 0; i < strlen(str); i++) {
 12200  002746  0E00               	movlw	0
 12201  002748  6FC7               	movwf	(collect_row@i+1)& (0+255),b
 12202  00274A  0E00               	movlw	0
 12203  00274C  6FC6               	movwf	collect_row@i& (0+255),b
 12204  00274E  D01C               	goto	l720
 12205  002750                     
 12206                           ; BSR set to: 0
 12207                           ;cmd_consol.c: 21: if (isdigit(str[i]) == 1)
 12208                           
 12209                           ; BSR set to: 0
 12210  002750  51C6               	movf	collect_row@i& (0+255),w,b
 12211  002752  2434               	addwf	collect_row@str,w,c
 12212  002754  6ED9               	movwf	fsr2l,c
 12213  002756  51C7               	movf	(collect_row@i+1)& (0+255),w,b
 12214  002758  2035               	addwfc	collect_row@str+1,w,c
 12215  00275A  6EDA               	movwf	fsr2h,c
 12216  00275C  50DF               	movf	indf2,w,c
 12217  00275E  ECA4  F01A         	call	_isdigit
 12218  002762  A0D8               	btfss	status,0,c
 12219  002764  0012               	return	
 12220                           
 12221                           ;cmd_consol.c: 22: row = row * 10 + (str[i] - '0');
 12222  002766  0100               	movlb	0	; () banked
 12223  002768  51C6               	movf	collect_row@i& (0+255),w,b
 12224  00276A  2434               	addwf	collect_row@str,w,c
 12225  00276C  6ED9               	movwf	fsr2l,c
 12226  00276E  51C7               	movf	(collect_row@i+1)& (0+255),w,b
 12227  002770  2035               	addwfc	collect_row@str+1,w,c
 12228  002772  6EDA               	movwf	fsr2h,c
 12229  002774  50DF               	movf	indf2,w,c
 12230  002776  6E38               	movwf	??_collect_row& (0+255),c
 12231  002778  51C8               	movf	collect_row@row& (0+255),w,b
 12232  00277A  0D0A               	mullw	10
 12233  00277C  50F3               	movf	prodl,w,c
 12234  00277E  2438               	addwf	??_collect_row,w,c
 12235  002780  0FD0               	addlw	208
 12236  002782  6FC8               	movwf	collect_row@row& (0+255),b
 12237                           
 12238                           ; BSR set to: 0
 12239                           
 12240                           ; BSR set to: 0
 12241                           
 12242                           ; BSR set to: 0
 12243                           ;cmd_consol.c: 23: else
 12244                           ;cmd_consol.c: 24: return;
 12245  002784  4BC6               	infsnz	collect_row@i& (0+255),f,b
 12246  002786  2BC7               	incf	(collect_row@i+1)& (0+255),f,b
 12247  002788                     l720:
 12248                           
 12249                           ; BSR set to: 0
 12250                           
 12251                           ; BSR set to: 0
 12252  002788  C034  F022         	movff	collect_row@str,strlen@s
 12253  00278C  C035  F023         	movff	collect_row@str+1,strlen@s+1
 12254  002790  EC4C  F019         	call	_strlen	;wreg free
 12255  002794  5022               	movf	?_strlen,w,c
 12256  002796  0100               	movlb	0	; () banked
 12257  002798  5DC6               	subwf	collect_row@i& (0+255),w,b
 12258  00279A  5023               	movf	?_strlen+1,w,c
 12259  00279C  59C7               	subwfb	(collect_row@i+1)& (0+255),w,b
 12260  00279E  A0D8               	btfss	status,0,c
 12261  0027A0  D7D7               	goto	l721
 12262                           
 12263                           ; BSR set to: 0
 12264                           ;cmd_consol.c: 25: }
 12265                           ;cmd_consol.c: 26: printf("row2 = %d\r\n", row);
 12266                           
 12267                           ; BSR set to: 0
 12268  0027A2  0EAE               	movlw	low STR_21
 12269  0027A4  6E22               	movwf	printf@f,c
 12270  0027A6  0EFE               	movlw	high STR_21
 12271  0027A8  6E23               	movwf	printf@f+1,c
 12272  0027AA  C0C8  F024         	movff	collect_row@row,?_printf+2
 12273  0027AE  6A25               	clrf	?_printf+3,c
 12274  0027B0  EC22  F011         	call	_printf	;wreg free
 12275                           
 12276                           ;cmd_consol.c: 27: if (row >= clcd_config_data.clcd_max_row) {
 12277  0027B4  5045               	movf	_clcd_config_data+1,w,c
 12278  0027B6  0100               	movlb	0	; () banked
 12279  0027B8  5DC8               	subwf	collect_row@row& (0+255),w,b
 12280  0027BA  A0D8               	btfss	status,0,c
 12281  0027BC  D007               	goto	l726
 12282                           
 12283                           ; BSR set to: 0
 12284                           ;cmd_consol.c: 28: *data_row = -1;
 12285  0027BE  C036  FFD9         	movff	collect_row@data_row,fsr2l
 12286  0027C2  C037  FFDA         	movff	collect_row@data_row+1,fsr2h
 12287  0027C6  0EFF               	movlw	255
 12288  0027C8  6EDF               	movwf	indf2,c
 12289                           
 12290                           ;cmd_consol.c: 29: } else {
 12291  0027CA  0012               	return	
 12292  0027CC                     l726:
 12293                           
 12294                           ; BSR set to: 0
 12295                           ;cmd_consol.c: 30: *data_row = row;
 12296                           
 12297                           ; BSR set to: 0
 12298  0027CC  C036  FFD9         	movff	collect_row@data_row,fsr2l
 12299  0027D0  C037  FFDA         	movff	collect_row@data_row+1,fsr2h
 12300  0027D4  C0C8  FFDF         	movff	collect_row@row,indf2
 12301  0027D8  0012               	return	
 12302  0027DA                     __end_of_collect_row:
 12303                           	opt stack 0
 12304                           tblptru	equ	0xFF8
 12305                           tblptrh	equ	0xFF7
 12306                           tblptrl	equ	0xFF6
 12307                           tablat	equ	0xFF5
 12308                           prodh	equ	0xFF4
 12309                           prodl	equ	0xFF3
 12310                           intcon	equ	0xFF2
 12311                           postinc0	equ	0xFEE
 12312                           wreg	equ	0xFE8
 12313                           indf1	equ	0xFE7
 12314                           postinc1	equ	0xFE6
 12315                           postdec1	equ	0xFE5
 12316                           fsr1h	equ	0xFE2
 12317                           fsr1l	equ	0xFE1
 12318                           indf2	equ	0xFDF
 12319                           postinc2	equ	0xFDE
 12320                           postdec2	equ	0xFDD
 12321                           fsr2h	equ	0xFDA
 12322                           fsr2l	equ	0xFD9
 12323                           status	equ	0xFD8
 12324                           
 12325 ;; *************** function _collect_column *****************
 12326 ;; Defined at:
 12327 ;;		line 101 in file "cmd_consol.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;  str             2   51[COMRAM] PTR unsigned char 
 12330 ;;		 -> uart_str(150), NULL(0), 
 12331 ;;  data_column     2   53[COMRAM] PTR unsigned char 
 12332 ;;		 -> cmd_data(52), 
 12333 ;; Auto vars:     Size  Location     Type
 12334 ;;  i               2    0[BANK0 ] int 
 12335 ;;  column          1    2[BANK0 ] unsigned char 
 12336 ;; Return value:  Size  Location     Type
 12337 ;;                  1    wreg      void 
 12338 ;; Registers used:
 12339 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12340 ;; Tracked objects:
 12341 ;;		On entry : 0/0
 12342 ;;		On exit  : 0/0
 12343 ;;		Unchanged: 0/0
 12344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12346 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12347 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12348 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12349 ;;Total ram usage:        8 bytes
 12350 ;; Hardware stack levels used:    1
 12351 ;; Hardware stack levels required when called:    8
 12352 ;; This function calls:
 12353 ;;		_isdigit
 12354 ;;		_printf
 12355 ;;		_strlen
 12356 ;; This function is called by:
 12357 ;;		_parse_cmd_str
 12358 ;; This function uses a non-reentrant model
 12359 ;;
 12360                           
 12361                           	psect	text54
 12362  0027DA                     __ptext54:
 12363                           	opt stack 0
 12364  0027DA                     _collect_column:
 12365                           	opt stack 20
 12366                           
 12367                           ;cmd_consol.c: 102: printf("col1 = %s\r\n", str);
 12368                           
 12369                           ;incstack = 0
 12370  0027DA  0EC6               	movlw	low STR_25
 12371  0027DC  6E22               	movwf	printf@f,c
 12372  0027DE  0EFE               	movlw	high STR_25
 12373  0027E0  6E23               	movwf	printf@f+1,c
 12374  0027E2  C034  F024         	movff	collect_column@str,?_printf+2
 12375  0027E6  C035  F025         	movff	collect_column@str+1,?_printf+3
 12376  0027EA  EC22  F011         	call	_printf	;wreg free
 12377                           
 12378                           ;cmd_consol.c: 103: int i = 0;
 12379  0027EE  0E00               	movlw	0
 12380  0027F0  0100               	movlb	0	; () banked
 12381  0027F2  6FC7               	movwf	(collect_column@i+1)& (0+255),b
 12382  0027F4  0E00               	movlw	0
 12383  0027F6  6FC6               	movwf	collect_column@i& (0+255),b
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;cmd_consol.c: 104: char column = 0;
 12387  0027F8  0E00               	movlw	0
 12388  0027FA  6FC8               	movwf	collect_column@column& (0+255),b
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;cmd_consol.c: 105: for (i = 0; i < strlen(str); i++) {
 12392  0027FC  0E00               	movlw	0
 12393  0027FE  6FC7               	movwf	(collect_column@i+1)& (0+255),b
 12394  002800  0E00               	movlw	0
 12395  002802  6FC6               	movwf	collect_column@i& (0+255),b
 12396  002804  D01C               	goto	l763
 12397  002806                     
 12398                           ; BSR set to: 0
 12399                           ;cmd_consol.c: 106: if (isdigit(str[i]) == 1) {
 12400                           
 12401                           ; BSR set to: 0
 12402  002806  51C6               	movf	collect_column@i& (0+255),w,b
 12403  002808  2434               	addwf	collect_column@str,w,c
 12404  00280A  6ED9               	movwf	fsr2l,c
 12405  00280C  51C7               	movf	(collect_column@i+1)& (0+255),w,b
 12406  00280E  2035               	addwfc	collect_column@str+1,w,c
 12407  002810  6EDA               	movwf	fsr2h,c
 12408  002812  50DF               	movf	indf2,w,c
 12409  002814  ECA4  F01A         	call	_isdigit
 12410  002818  A0D8               	btfss	status,0,c
 12411  00281A  0012               	return	
 12412                           
 12413                           ;cmd_consol.c: 107: column = column * 10 + (str[i] - '0');
 12414  00281C  0100               	movlb	0	; () banked
 12415  00281E  51C6               	movf	collect_column@i& (0+255),w,b
 12416  002820  2434               	addwf	collect_column@str,w,c
 12417  002822  6ED9               	movwf	fsr2l,c
 12418  002824  51C7               	movf	(collect_column@i+1)& (0+255),w,b
 12419  002826  2035               	addwfc	collect_column@str+1,w,c
 12420  002828  6EDA               	movwf	fsr2h,c
 12421  00282A  50DF               	movf	indf2,w,c
 12422  00282C  6E38               	movwf	??_collect_column& (0+255),c
 12423  00282E  51C8               	movf	collect_column@column& (0+255),w,b
 12424  002830  0D0A               	mullw	10
 12425  002832  50F3               	movf	prodl,w,c
 12426  002834  2438               	addwf	??_collect_column,w,c
 12427  002836  0FD0               	addlw	208
 12428  002838  6FC8               	movwf	collect_column@column& (0+255),b
 12429                           
 12430                           ; BSR set to: 0
 12431                           
 12432                           ; BSR set to: 0
 12433                           
 12434                           ; BSR set to: 0
 12435                           ;cmd_consol.c: 113: return;
 12436                           
 12437                           ;cmd_consol.c: 110: } else {
 12438  00283A  4BC6               	infsnz	collect_column@i& (0+255),f,b
 12439  00283C  2BC7               	incf	(collect_column@i+1)& (0+255),f,b
 12440  00283E                     l763:
 12441                           
 12442                           ; BSR set to: 0
 12443                           
 12444                           ; BSR set to: 0
 12445  00283E  C034  F022         	movff	collect_column@str,strlen@s
 12446  002842  C035  F023         	movff	collect_column@str+1,strlen@s+1
 12447  002846  EC4C  F019         	call	_strlen	;wreg free
 12448  00284A  5022               	movf	?_strlen,w,c
 12449  00284C  0100               	movlb	0	; () banked
 12450  00284E  5DC6               	subwf	collect_column@i& (0+255),w,b
 12451  002850  5023               	movf	?_strlen+1,w,c
 12452  002852  59C7               	subwfb	(collect_column@i+1)& (0+255),w,b
 12453  002854  A0D8               	btfss	status,0,c
 12454  002856  D7D7               	goto	l764
 12455                           
 12456                           ; BSR set to: 0
 12457                           ;cmd_consol.c: 114: }
 12458                           ;cmd_consol.c: 116: }
 12459                           ;cmd_consol.c: 117: printf("Col2 = %d\r\n", column);
 12460                           
 12461                           ; BSR set to: 0
 12462  002858  0EA2               	movlw	low STR_26
 12463  00285A  6E22               	movwf	printf@f,c
 12464  00285C  0EFE               	movlw	high STR_26
 12465  00285E  6E23               	movwf	printf@f+1,c
 12466  002860  C0C8  F024         	movff	collect_column@column,?_printf+2
 12467  002864  6A25               	clrf	?_printf+3,c
 12468  002866  EC22  F011         	call	_printf	;wreg free
 12469                           
 12470                           ;cmd_consol.c: 118: if (column >= clcd_config_data.clcd_max_col) {
 12471  00286A  5046               	movf	_clcd_config_data+2,w,c
 12472  00286C  0100               	movlb	0	; () banked
 12473  00286E  5DC8               	subwf	collect_column@column& (0+255),w,b
 12474  002870  A0D8               	btfss	status,0,c
 12475  002872  D007               	goto	l769
 12476                           
 12477                           ; BSR set to: 0
 12478                           ;cmd_consol.c: 119: *data_column = -1;
 12479  002874  C036  FFD9         	movff	collect_column@data_column,fsr2l
 12480  002878  C037  FFDA         	movff	collect_column@data_column+1,fsr2h
 12481  00287C  0EFF               	movlw	255
 12482  00287E  6EDF               	movwf	indf2,c
 12483                           
 12484                           ;cmd_consol.c: 120: } else {
 12485  002880  0012               	return	
 12486  002882                     l769:
 12487                           
 12488                           ; BSR set to: 0
 12489                           ;cmd_consol.c: 121: *data_column = column;
 12490                           
 12491                           ; BSR set to: 0
 12492  002882  C036  FFD9         	movff	collect_column@data_column,fsr2l
 12493  002886  C037  FFDA         	movff	collect_column@data_column+1,fsr2h
 12494  00288A  C0C8  FFDF         	movff	collect_column@column,indf2
 12495  00288E  0012               	return	
 12496  002890                     __end_of_collect_column:
 12497                           	opt stack 0
 12498                           tblptru	equ	0xFF8
 12499                           tblptrh	equ	0xFF7
 12500                           tblptrl	equ	0xFF6
 12501                           tablat	equ	0xFF5
 12502                           prodh	equ	0xFF4
 12503                           prodl	equ	0xFF3
 12504                           intcon	equ	0xFF2
 12505                           postinc0	equ	0xFEE
 12506                           wreg	equ	0xFE8
 12507                           indf1	equ	0xFE7
 12508                           postinc1	equ	0xFE6
 12509                           postdec1	equ	0xFE5
 12510                           fsr1h	equ	0xFE2
 12511                           fsr1l	equ	0xFE1
 12512                           indf2	equ	0xFDF
 12513                           postinc2	equ	0xFDE
 12514                           postdec2	equ	0xFDD
 12515                           fsr2h	equ	0xFDA
 12516                           fsr2l	equ	0xFD9
 12517                           status	equ	0xFD8
 12518                           
 12519 ;; *************** function _strlen *****************
 12520 ;; Defined at:
 12521 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strlen.c"
 12522 ;; Parameters:    Size  Location     Type
 12523 ;;  s               2   33[COMRAM] PTR const unsigned char 
 12524 ;;		 -> uart_str(150), NULL(0), clcd_display_string_details.string(40), clcd_display_string_details(1100), 
 12525 ;; Auto vars:     Size  Location     Type
 12526 ;;  cp              2   37[COMRAM] PTR const unsigned char 
 12527 ;;		 -> uart_str(150), NULL(0), clcd_display_string_details.string(40), clcd_display_string_details(1100), 
 12528 ;; Return value:  Size  Location     Type
 12529 ;;                  2   33[COMRAM] unsigned int 
 12530 ;; Registers used:
 12531 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12532 ;; Tracked objects:
 12533 ;;		On entry : 0/0
 12534 ;;		On exit  : 0/0
 12535 ;;		Unchanged: 0/0
 12536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12537 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12538 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12539 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12540 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12541 ;;Total ram usage:        6 bytes
 12542 ;; Hardware stack levels used:    1
 12543 ;; Hardware stack levels required when called:    5
 12544 ;; This function calls:
 12545 ;;		Nothing
 12546 ;; This function is called by:
 12547 ;;		_copy_data
 12548 ;;		_scroll_off
 12549 ;;		_make_display
 12550 ;;		_collect_row
 12551 ;;		_get_str
 12552 ;;		_get_direction
 12553 ;;		_get_dis_frq
 12554 ;;		_get_over_write_data
 12555 ;;		_collect_column
 12556 ;;		_parse_cmd_str
 12557 ;;		_copy_display_struct
 12558 ;;		_put_string
 12559 ;;		_display_string
 12560 ;; This function uses a non-reentrant model
 12561 ;;
 12562                           
 12563                           	psect	text55
 12564  003298                     __ptext55:
 12565                           	opt stack 0
 12566  003298                     _strlen:
 12567                           	opt stack 24
 12568                           
 12569                           ;incstack = 0
 12570  003298  C022  F026         	movff	strlen@s,strlen@cp
 12571  00329C  C023  F027         	movff	strlen@s+1,strlen@cp+1
 12572  0032A0  D002               	goto	l1707
 12573  0032A2  4A26               	infsnz	strlen@cp,f,c
 12574  0032A4  2A27               	incf	strlen@cp+1,f,c
 12575  0032A6                     l1707:
 12576  0032A6  C026  FFD9         	movff	strlen@cp,fsr2l
 12577  0032AA  C027  FFDA         	movff	strlen@cp+1,fsr2h
 12578  0032AE  50DF               	movf	indf2,w,c
 12579  0032B0  A4D8               	btfss	status,2,c
 12580  0032B2  D7F7               	goto	l1708
 12581  0032B4  C022  F024         	movff	strlen@s,??_strlen
 12582  0032B8  C023  F025         	movff	strlen@s+1,??_strlen+1
 12583  0032BC  1E24               	comf	??_strlen,f,c
 12584  0032BE  1E25               	comf	??_strlen+1,f,c
 12585  0032C0  4A24               	infsnz	??_strlen,f,c
 12586  0032C2  2A25               	incf	??_strlen+1,f,c
 12587  0032C4  5026               	movf	strlen@cp,w,c
 12588  0032C6  2424               	addwf	??_strlen,w,c
 12589  0032C8  6E22               	movwf	?_strlen,c
 12590  0032CA  5027               	movf	strlen@cp+1,w,c
 12591  0032CC  2025               	addwfc	??_strlen+1,w,c
 12592  0032CE  6E23               	movwf	?_strlen+1,c
 12593  0032D0  0012               	return	
 12594  0032D2                     __end_of_strlen:
 12595                           	opt stack 0
 12596                           tblptru	equ	0xFF8
 12597                           tblptrh	equ	0xFF7
 12598                           tblptrl	equ	0xFF6
 12599                           tablat	equ	0xFF5
 12600                           prodh	equ	0xFF4
 12601                           prodl	equ	0xFF3
 12602                           intcon	equ	0xFF2
 12603                           postinc0	equ	0xFEE
 12604                           wreg	equ	0xFE8
 12605                           indf1	equ	0xFE7
 12606                           postinc1	equ	0xFE6
 12607                           postdec1	equ	0xFE5
 12608                           fsr1h	equ	0xFE2
 12609                           fsr1l	equ	0xFE1
 12610                           indf2	equ	0xFDF
 12611                           postinc2	equ	0xFDE
 12612                           postdec2	equ	0xFDD
 12613                           fsr2h	equ	0xFDA
 12614                           fsr2l	equ	0xFD9
 12615                           status	equ	0xFD8
 12616                           
 12617 ;; *************** function _printf *****************
 12618 ;; Defined at:
 12619 ;;		line 464 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\doprnt.c"
 12620 ;; Parameters:    Size  Location     Type
 12621 ;;  f               2   33[COMRAM] PTR const unsigned char 
 12622 ;;		 -> STR_133(18), STR_131(5), STR_127(3), STR_126(3), 
 12623 ;;		 -> STR_125(3), STR_123(7), STR_121(7), STR_119(7), 
 12624 ;;		 -> STR_117(13), STR_115(5), STR_112(13), STR_109(13), 
 12625 ;;		 -> STR_106(13), STR_103(13), STR_102(5), STR_101(11), 
 12626 ;;		 -> STR_98(13), STR_95(13), STR_94(5), STR_91(13), 
 12627 ;;		 -> STR_90(5), STR_87(13), STR_86(5), STR_78(25), 
 12628 ;;		 -> STR_77(11), STR_75(25), STR_73(27), STR_71(27), 
 12629 ;;		 -> STR_69(10), STR_67(9), STR_64(25), STR_63(11), 
 12630 ;;		 -> STR_61(25), STR_59(27), STR_57(27), STR_55(12), 
 12631 ;;		 -> STR_52(14), STR_51(9), STR_49(11), STR_48(9), 
 12632 ;;		 -> STR_46(9), STR_44(11), STR_42(11), STR_41(12), 
 12633 ;;		 -> STR_39(12), STR_35(7), STR_32(8), STR_27(8), 
 12634 ;;		 -> STR_26(12), STR_25(12), STR_24(18), STR_23(19), 
 12635 ;;		 -> STR_22(17), STR_21(12), STR_20(12), STR_19(16), 
 12636 ;;		 -> STR_18(16), STR_17(19), STR_16(3), STR_15(5), 
 12637 ;;		 -> STR_14(16), STR_13(39), STR_12(39), STR_11(26), 
 12638 ;;		 -> STR_10(26), STR_9(26), STR_8(26), STR_7(26), 
 12639 ;;		 -> STR_6(26), STR_4(17), STR_3(18), STR_2(9), 
 12640 ;;		 -> STR_1(9), 
 12641 ;; Auto vars:     Size  Location     Type
 12642 ;;  tmpval          4    0        struct .
 12643 ;;  val             2   48[COMRAM] unsigned int 
 12644 ;;  ap              2   46[COMRAM] PTR void [1]
 12645 ;;		 -> ?_printf(2), 
 12646 ;;  cp              2   44[COMRAM] PTR const unsigned char 
 12647 ;;		 -> STR_134(7), STR_132(6), uart_str(150), STR_124(15), 
 12648 ;;		 -> STR_122(12), STR_120(12), STR_118(7), STR_116(6), 
 12649 ;;		 -> STR_113(7), STR_110(8), STR_107(6), STR_104(6), 
 12650 ;;		 -> STR_99(5), STR_96(4), STR_92(4), STR_88(6), 
 12651 ;;		 -> cmd_data.data(40), CMD(15), NULL(0), cmd_data(52), 
 12652 ;;		 -> STR_5(5), 
 12653 ;;  len             2    0        unsigned int 
 12654 ;;  c               1   50[COMRAM] char 
 12655 ;;  prec            1   43[COMRAM] char 
 12656 ;;  flag            1   42[COMRAM] unsigned char 
 12657 ;; Return value:  Size  Location     Type
 12658 ;;                  2   33[COMRAM] int 
 12659 ;; Registers used:
 12660 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12661 ;; Tracked objects:
 12662 ;;		On entry : 0/0
 12663 ;;		On exit  : 0/0
 12664 ;;		Unchanged: 0/0
 12665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12666 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12667 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12668 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12669 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12670 ;;Total ram usage:       18 bytes
 12671 ;; Hardware stack levels used:    1
 12672 ;; Hardware stack levels required when called:    7
 12673 ;; This function calls:
 12674 ;;		___lwdiv
 12675 ;;		___lwmod
 12676 ;;		_putch
 12677 ;; This function is called by:
 12678 ;;		_init_clcd_cusotom_lcd
 12679 ;;		_copy_data
 12680 ;;		_conflict_check
 12681 ;;		_update_string_data
 12682 ;;		_clcd_display_string_config
 12683 ;;		_collect_row
 12684 ;;		_get_direction
 12685 ;;		_get_dis_frq
 12686 ;;		_get_over_write_data
 12687 ;;		_collect_column
 12688 ;;		_parse_cmd_str
 12689 ;;		_reply_to_host
 12690 ;;		_cmd_consol_task
 12691 ;;		_main
 12692 ;;		_conflict
 12693 ;;		_copy_display_struct
 12694 ;;		_set_string_data
 12695 ;;		_display_string
 12696 ;; This function uses a non-reentrant model
 12697 ;;
 12698                           
 12699                           	psect	text56
 12700  002244                     __ptext56:
 12701                           	opt stack 0
 12702  002244                     _printf:
 12703                           	opt stack 23
 12704                           
 12705                           ;doprnt.c: 466: va_list ap;
 12706                           ;doprnt.c: 499: signed char c;
 12707                           ;doprnt.c: 506: signed char prec;
 12708                           ;doprnt.c: 508: unsigned char flag;
 12709                           ;doprnt.c: 523: union {
 12710                           ;doprnt.c: 524: unsigned long vd;
 12711                           ;doprnt.c: 525: double integ;
 12712                           ;doprnt.c: 526: } tmpval;
 12713                           ;doprnt.c: 528: unsigned int val;
 12714                           ;doprnt.c: 529: unsigned len;
 12715                           ;doprnt.c: 530: const char * cp;
 12716                           ;doprnt.c: 533: *ap = __va_start();
 12717                           
 12718                           ;incstack = 0
 12719  002244  0E24               	movlw	low (?_printf+2)
 12720  002246  6E2F               	movwf	printf@ap,c
 12721  002248  0E00               	movlw	high (?_printf+2)
 12722  00224A  6E30               	movwf	printf@ap+1,c
 12723                           
 12724                           ;doprnt.c: 536: while(c = *f++) {
 12725  00224C  D0D9               	goto	u5570
 12726  00224E                     
 12727                           ;doprnt.c: 538: if(c != '%')
 12728  00224E  0E25               	movlw	37
 12729  002250  1833               	xorwf	printf@c,w,c
 12730  002252  B4D8               	btfsc	status,2,c
 12731  002254  D004               	goto	l1075
 12732                           
 12733                           ;doprnt.c: 540: {
 12734                           ;doprnt.c: 541: (putch(c) );
 12735  002256  5033               	movf	printf@c,w,c
 12736  002258  EC61  F01B         	call	_putch
 12737                           
 12738                           ;doprnt.c: 542: continue;
 12739  00225C  D0D1               	goto	u5570
 12740  00225E                     l1075:
 12741                           
 12742                           ;doprnt.c: 543: }
 12743                           ;doprnt.c: 548: flag = 0;
 12744  00225E  0E00               	movlw	0
 12745  002260  6E2B               	movwf	printf@flag,c
 12746                           
 12747                           ;doprnt.c: 635: switch(c = *f++) {
 12748  002262  D04D               	goto	l1076
 12749  002264                     
 12750                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12751  002264  C02F  FFD9         	movff	printf@ap,fsr2l
 12752  002268  C030  FFDA         	movff	printf@ap+1,fsr2h
 12753  00226C  CFDE F02D          	movff	postinc2,printf@cp
 12754  002270  CFDD F02E          	movff	postdec2,printf@cp+1
 12755  002274  0E02               	movlw	2
 12756  002276  262F               	addwf	printf@ap,f,c
 12757  002278  0E00               	movlw	0
 12758  00227A  2230               	addwfc	printf@ap+1,f,c
 12759                           
 12760                           ;doprnt.c: 740: if(!cp)
 12761  00227C  502D               	movf	printf@cp,w,c
 12762  00227E  102E               	iorwf	printf@cp+1,w,c
 12763  002280  A4D8               	btfss	status,2,c
 12764  002282  D01A               	goto	l1084
 12765                           
 12766                           ;doprnt.c: 741: cp = "(null)";
 12767  002284  0E92               	movlw	low STR_134
 12768  002286  6E2D               	movwf	printf@cp,c
 12769  002288  0EFF               	movlw	high STR_134
 12770  00228A  6E2E               	movwf	printf@cp+1,c
 12771                           
 12772                           ;doprnt.c: 777: while(*cp)
 12773  00228C  D015               	goto	l1084
 12774  00228E                     
 12775                           ;doprnt.c: 778: (putch(*cp++) );
 12776  00228E  C02D  FFF6         	movff	printf@cp,tblptrl
 12777  002292  C02E  FFF7         	movff	printf@cp+1,tblptrh
 12778  002296  0E00               	movlw	low (__mediumconst shr (0+16))
 12779  002298  6EF8               	movwf	tblptru,c
 12780  00229A  0E0F               	movlw	(high __ramtop+-1)
 12781  00229C  64F7               	cpfsgt	tblptrh,c
 12782  00229E  D003               	bra	u5497
 12783  0022A0  0008               	tblrd		*
 12784  0022A2  50F5               	movf	tablat,w,c
 12785  0022A4  D005               	bra	u5490
 12786  0022A6                     u5497:
 12787  0022A6  CFF6 FFE9          	movff	tblptrl,fsr0l
 12788  0022AA  CFF7 FFEA          	movff	tblptrh,fsr0h
 12789  0022AE  50EF               	movf	indf0,w,c
 12790  0022B0                     u5490:
 12791  0022B0  EC61  F01B         	call	_putch
 12792  0022B4  4A2D               	infsnz	printf@cp,f,c
 12793  0022B6  2A2E               	incf	printf@cp+1,f,c
 12794  0022B8                     l1084:
 12795  0022B8  C02D  FFF6         	movff	printf@cp,tblptrl
 12796  0022BC  C02E  FFF7         	movff	printf@cp+1,tblptrh
 12797  0022C0  0E00               	movlw	low (__mediumconst shr (0+16))
 12798  0022C2  6EF8               	movwf	tblptru,c
 12799  0022C4  0E0F               	movlw	(high __ramtop+-1)
 12800  0022C6  64F7               	cpfsgt	tblptrh,c
 12801  0022C8  D003               	bra	u5507
 12802  0022CA  0008               	tblrd		*
 12803  0022CC  50F5               	movf	tablat,w,c
 12804  0022CE  D005               	bra	u5500
 12805  0022D0                     u5507:
 12806  0022D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 12807  0022D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 12808  0022D8  50EF               	movf	indf0,w,c
 12809  0022DA                     u5500:
 12810  0022DA  0900               	iorlw	0
 12811  0022DC  B4D8               	btfsc	status,2,c
 12812  0022DE  D090               	goto	u5570
 12813  0022E0  D7D6               	goto	l1085
 12814  0022E2                     
 12815                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 12816  0022E2  C02F  FFD9         	movff	printf@ap,fsr2l
 12817  0022E6  C030  FFDA         	movff	printf@ap+1,fsr2h
 12818  0022EA  50DF               	movf	indf2,w,c
 12819  0022EC  6E33               	movwf	printf@c,c
 12820  0022EE  0E02               	movlw	2
 12821  0022F0  262F               	addwf	printf@ap,f,c
 12822  0022F2  0E00               	movlw	0
 12823  0022F4  2230               	addwfc	printf@ap+1,f,c
 12824  0022F6                     
 12825                           ;doprnt.c: 809: (putch(c) );
 12826  0022F6  5033               	movf	printf@c,w,c
 12827  0022F8  EC61  F01B         	call	_putch
 12828                           
 12829                           ;doprnt.c: 810: continue;
 12830  0022FC  D081               	goto	u5570
 12831  0022FE                     l1076:
 12832  0022FE  C022  FFF6         	movff	printf@f,tblptrl
 12833  002302  C023  FFF7         	movff	printf@f+1,tblptrh
 12834  002306  4A22               	infsnz	printf@f,f,c
 12835  002308  2A23               	incf	printf@f+1,f,c
 12836  00230A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12837  00230A  6AF8               	clrf	tblptru,c
 12838  00230C                     	endif
 12839  00230C                     	if	0	;tblptru may be non-zero
 12840  00230C                     	endif
 12841  00230C  0008               	tblrd		*
 12842  00230E  CFF5 F033          	movff	tablat,printf@c
 12843  002312  5033               	movf	printf@c,w,c
 12844                           
 12845                           ; Switch size 1, requested type "space"
 12846                           ; Number of cases is 5, Range of values is 0 to 115
 12847                           ; switch strategies available:
 12848                           ; Name         Instructions Cycles
 12849                           ; simple_byte           16     9 (average)
 12850                           ;	Chosen strategy is simple_byte
 12851  002314  0A00               	xorlw	0	; case 0
 12852  002316  B4D8               	btfsc	status,2,c
 12853  002318  0012               	return	
 12854  00231A  0A63               	xorlw	99	; case 99
 12855  00231C  B4D8               	btfsc	status,2,c
 12856  00231E  D7E1               	goto	l1087
 12857  002320  0A07               	xorlw	7	; case 100
 12858  002322  B4D8               	btfsc	status,2,c
 12859  002324  D007               	goto	l1081
 12860  002326  0A0D               	xorlw	13	; case 105
 12861  002328  B4D8               	btfsc	status,2,c
 12862  00232A  D004               	goto	l1081
 12863  00232C  0A1A               	xorlw	26	; case 115
 12864  00232E  B4D8               	btfsc	status,2,c
 12865  002330  D799               	goto	l1082
 12866  002332  D7E1               	goto	l1088
 12867  002334                     l1081:
 12868                           
 12869                           ;doprnt.c: 1253: {
 12870                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12871  002334  C02F  FFD9         	movff	printf@ap,fsr2l
 12872  002338  C030  FFDA         	movff	printf@ap+1,fsr2h
 12873  00233C  CFDE F031          	movff	postinc2,printf@val
 12874  002340  CFDD F032          	movff	postdec2,printf@val+1
 12875  002344  0E02               	movlw	2
 12876  002346  262F               	addwf	printf@ap,f,c
 12877  002348  0E00               	movlw	0
 12878  00234A  2230               	addwfc	printf@ap+1,f,c
 12879                           
 12880                           ;doprnt.c: 1261: if((int)val < 0) {
 12881  00234C  AE32               	btfss	printf@val+1,7,c
 12882  00234E  D006               	goto	l1089
 12883                           
 12884                           ;doprnt.c: 1262: flag |= 0x03;
 12885  002350  0E03               	movlw	3
 12886  002352  122B               	iorwf	printf@flag,f,c
 12887                           
 12888                           ;doprnt.c: 1263: val = -val;
 12889  002354  6C31               	negf	printf@val,c
 12890  002356  1E32               	comf	printf@val+1,f,c
 12891  002358  B0D8               	btfsc	status,0,c
 12892  00235A  2A32               	incf	printf@val+1,f,c
 12893  00235C                     l1089:
 12894                           
 12895                           ;doprnt.c: 1264: }
 12896                           ;doprnt.c: 1266: }
 12897                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12898  00235C  0E01               	movlw	1
 12899  00235E  6E33               	movwf	printf@c,c
 12900  002360                     l6315:
 12901  002360  0E05               	movlw	5
 12902  002362  1833               	xorwf	printf@c,w,c
 12903  002364  B4D8               	btfsc	status,2,c
 12904  002366  D015               	goto	u5550
 12905                           
 12906                           ;doprnt.c: 1306: if(val < dpowers[c])
 12907  002368  5033               	movf	printf@c,w,c
 12908  00236A  0D02               	mullw	2
 12909  00236C  0ED7               	movlw	low _dpowers
 12910  00236E  24F3               	addwf	prodl,w,c
 12911  002370  6EF6               	movwf	tblptrl,c
 12912  002372  0EFC               	movlw	high _dpowers
 12913  002374  20F4               	addwfc	prodh,w,c
 12914  002376  6EF7               	movwf	tblptrh,c
 12915  002378                     	if	1	;There are 3 active tblptr bytes
 12916  002378  6AF8               	clrf	tblptru,c
 12917  00237A  0E00               	movlw	low (__mediumconst shr (0+16))
 12918  00237C  22F8               	addwfc	tblptru,f,c
 12919  00237E                     	endif
 12920  00237E  0009               	tblrd		*+
 12921  002380  50F5               	movf	tablat,w,c
 12922  002382  5C31               	subwf	printf@val,w,c
 12923  002384  0009               	tblrd		*+
 12924  002386  50F5               	movf	tablat,w,c
 12925  002388  5832               	subwfb	printf@val+1,w,c
 12926  00238A  A0D8               	btfss	status,0,c
 12927  00238C  D002               	goto	u5550
 12928                           
 12929                           ;doprnt.c: 1307: break;
 12930  00238E  2A33               	incf	printf@c,f,c
 12931  002390  D7E7               	goto	l6315
 12932  002392                     u5550:
 12933                           
 12934                           ;doprnt.c: 1422: {
 12935                           ;doprnt.c: 1438: if(flag & 0x03)
 12936  002392  C02B  F02A         	movff	printf@flag,??_printf
 12937  002396  0E03               	movlw	3
 12938  002398  162A               	andwf	??_printf,f,c
 12939  00239A  B4D8               	btfsc	status,2,c
 12940  00239C  D003               	goto	l1093
 12941                           
 12942                           ;doprnt.c: 1439: (putch('-') );
 12943  00239E  0E2D               	movlw	45
 12944  0023A0  EC61  F01B         	call	_putch
 12945  0023A4                     l1093:
 12946                           
 12947                           ;doprnt.c: 1469: }
 12948                           ;doprnt.c: 1472: prec = c;
 12949  0023A4  C033  F02C         	movff	printf@c,printf@prec
 12950                           
 12951                           ;doprnt.c: 1474: while(prec--) {
 12952  0023A8  D027               	goto	l1094
 12953  0023AA                     
 12954                           ;doprnt.c: 1478: {
 12955                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12956  0023AA  502C               	movf	printf@prec,w,c
 12957  0023AC  0D02               	mullw	2
 12958  0023AE  0ED7               	movlw	low _dpowers
 12959  0023B0  24F3               	addwf	prodl,w,c
 12960  0023B2  6EF6               	movwf	tblptrl,c
 12961  0023B4  0EFC               	movlw	high _dpowers
 12962  0023B6  20F4               	addwfc	prodh,w,c
 12963  0023B8  6EF7               	movwf	tblptrh,c
 12964  0023BA                     	if	1	;There are 3 active tblptr bytes
 12965  0023BA  6AF8               	clrf	tblptru,c
 12966  0023BC  0E00               	movlw	low (__mediumconst shr (0+16))
 12967  0023BE  22F8               	addwfc	tblptru,f,c
 12968  0023C0                     	endif
 12969  0023C0  0009               	tblrd		*+
 12970  0023C2  CFF5 F016          	movff	tablat,___lwdiv@divisor
 12971  0023C6  000A               	tblrd		*-
 12972  0023C8  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
 12973  0023CC  C031  F014         	movff	printf@val,___lwdiv@dividend
 12974  0023D0  C032  F015         	movff	printf@val+1,___lwdiv@dividend+1
 12975  0023D4  ECA8  F017         	call	___lwdiv	;wreg free
 12976  0023D8  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
 12977  0023DC  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
 12978  0023E0  0E00               	movlw	0
 12979  0023E2  6E1E               	movwf	___lwmod@divisor+1,c
 12980  0023E4  0E0A               	movlw	10
 12981  0023E6  6E1D               	movwf	___lwmod@divisor,c
 12982  0023E8  ECAF  F018         	call	___lwmod	;wreg free
 12983  0023EC  501B               	movf	?___lwmod,w,c
 12984  0023EE  0F30               	addlw	48
 12985  0023F0  6E33               	movwf	printf@c,c
 12986                           
 12987                           ;doprnt.c: 1523: }
 12988                           ;doprnt.c: 1524: (putch(c) );
 12989  0023F2  5033               	movf	printf@c,w,c
 12990  0023F4  EC61  F01B         	call	_putch
 12991  0023F8                     l1094:
 12992  0023F8  062C               	decf	printf@prec,f,c
 12993  0023FA  282C               	incf	printf@prec,w,c
 12994  0023FC  A4D8               	btfss	status,2,c
 12995  0023FE  D7D5               	goto	l1095
 12996  002400                     u5570:
 12997  002400  C022  FFF6         	movff	printf@f,tblptrl
 12998  002404  C023  FFF7         	movff	printf@f+1,tblptrh
 12999  002408  4A22               	infsnz	printf@f,f,c
 13000  00240A  2A23               	incf	printf@f+1,f,c
 13001  00240C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13002  00240C  6AF8               	clrf	tblptru,c
 13003  00240E                     	endif
 13004  00240E                     	if	0	;tblptru may be non-zero
 13005  00240E                     	endif
 13006  00240E  0008               	tblrd		*
 13007  002410  CFF5 F033          	movff	tablat,printf@c
 13008  002414  5033               	movf	printf@c,w,c
 13009  002416  B4D8               	btfsc	status,2,c
 13010  002418  0012               	return	
 13011  00241A  D719               	goto	l1074
 13012  00241C                     __end_of_printf:
 13013                           	opt stack 0
 13014                           tblptru	equ	0xFF8
 13015                           tblptrh	equ	0xFF7
 13016                           tblptrl	equ	0xFF6
 13017                           tablat	equ	0xFF5
 13018                           prodh	equ	0xFF4
 13019                           prodl	equ	0xFF3
 13020                           intcon	equ	0xFF2
 13021                           indf0	equ	0xFEF
 13022                           postinc0	equ	0xFEE
 13023                           fsr0h	equ	0xFEA
 13024                           fsr0l	equ	0xFE9
 13025                           wreg	equ	0xFE8
 13026                           indf1	equ	0xFE7
 13027                           postinc1	equ	0xFE6
 13028                           postdec1	equ	0xFE5
 13029                           fsr1h	equ	0xFE2
 13030                           fsr1l	equ	0xFE1
 13031                           indf2	equ	0xFDF
 13032                           postinc2	equ	0xFDE
 13033                           postdec2	equ	0xFDD
 13034                           fsr2h	equ	0xFDA
 13035                           fsr2l	equ	0xFD9
 13036                           status	equ	0xFD8
 13037                           
 13038 ;; *************** function _putch *****************
 13039 ;; Defined at:
 13040 ;;		line 160 in file "mcc_generated_files/eusart1.c"
 13041 ;; Parameters:    Size  Location     Type
 13042 ;;  txData          1    wreg     unsigned char 
 13043 ;; Auto vars:     Size  Location     Type
 13044 ;;  txData          1   20[COMRAM] unsigned char 
 13045 ;; Return value:  Size  Location     Type
 13046 ;;                  1    wreg      void 
 13047 ;; Registers used:
 13048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13049 ;; Tracked objects:
 13050 ;;		On entry : 0/0
 13051 ;;		On exit  : 0/0
 13052 ;;		Unchanged: 0/0
 13053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13057 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13058 ;;Total ram usage:        1 bytes
 13059 ;; Hardware stack levels used:    1
 13060 ;; Hardware stack levels required when called:    6
 13061 ;; This function calls:
 13062 ;;		_EUSART1_Write
 13063 ;; This function is called by:
 13064 ;;		_printf
 13065 ;;		_puts
 13066 ;;		_cputs
 13067 ;; This function uses a non-reentrant model
 13068 ;;
 13069                           
 13070                           	psect	text57
 13071  0036C2                     __ptext57:
 13072                           	opt stack 0
 13073  0036C2                     _putch:
 13074                           	opt stack 23
 13075                           
 13076                           ;incstack = 0
 13077                           ;putch@txData stored from wreg
 13078  0036C2  6E15               	movwf	putch@txData,c
 13079                           
 13080                           ;eusart1.c: 162: EUSART1_Write(txData);
 13081  0036C4  5015               	movf	putch@txData,w,c
 13082  0036C6  EC11  F019         	call	_EUSART1_Write
 13083  0036CA  0012               	return		;funcret
 13084  0036CC                     __end_of_putch:
 13085                           	opt stack 0
 13086                           tblptru	equ	0xFF8
 13087                           tblptrh	equ	0xFF7
 13088                           tblptrl	equ	0xFF6
 13089                           tablat	equ	0xFF5
 13090                           prodh	equ	0xFF4
 13091                           prodl	equ	0xFF3
 13092                           intcon	equ	0xFF2
 13093                           indf0	equ	0xFEF
 13094                           postinc0	equ	0xFEE
 13095                           fsr0h	equ	0xFEA
 13096                           fsr0l	equ	0xFE9
 13097                           wreg	equ	0xFE8
 13098                           indf1	equ	0xFE7
 13099                           postinc1	equ	0xFE6
 13100                           postdec1	equ	0xFE5
 13101                           fsr1h	equ	0xFE2
 13102                           fsr1l	equ	0xFE1
 13103                           indf2	equ	0xFDF
 13104                           postinc2	equ	0xFDE
 13105                           postdec2	equ	0xFDD
 13106                           fsr2h	equ	0xFDA
 13107                           fsr2l	equ	0xFD9
 13108                           status	equ	0xFD8
 13109                           
 13110 ;; *************** function _EUSART1_Write *****************
 13111 ;; Defined at:
 13112 ;;		line 132 in file "mcc_generated_files/eusart1.c"
 13113 ;; Parameters:    Size  Location     Type
 13114 ;;  txData          1    wreg     unsigned char 
 13115 ;; Auto vars:     Size  Location     Type
 13116 ;;  txData          1   19[COMRAM] unsigned char 
 13117 ;; Return value:  Size  Location     Type
 13118 ;;                  1    wreg      void 
 13119 ;; Registers used:
 13120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13121 ;; Tracked objects:
 13122 ;;		On entry : 0/0
 13123 ;;		On exit  : 0/0
 13124 ;;		Unchanged: 0/0
 13125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13127 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;Total ram usage:        1 bytes
 13131 ;; Hardware stack levels used:    1
 13132 ;; Hardware stack levels required when called:    5
 13133 ;; This function calls:
 13134 ;;		Nothing
 13135 ;; This function is called by:
 13136 ;;		_putch
 13137 ;; This function uses a non-reentrant model
 13138 ;;
 13139                           
 13140                           	psect	text58
 13141  003222                     __ptext58:
 13142                           	opt stack 0
 13143  003222                     _EUSART1_Write:
 13144                           	opt stack 23
 13145                           
 13146                           ;incstack = 0
 13147                           ;EUSART1_Write@txData stored from wreg
 13148  003222  6E14               	movwf	EUSART1_Write@txData,c
 13149  003224                     
 13150                           ;eusart1.c: 135: {
 13151                           
 13152                           ;eusart1.c: 134: while(0 == eusart1TxBufferRemaining)
 13153  003224  0100               	movlb	0	; () banked
 13154  003226  51FC               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 13155  003228  B4D8               	btfsc	status,2,c
 13156  00322A  D7FC               	goto	l6213
 13157                           
 13158                           ; BSR set to: 0
 13159                           ;eusart1.c: 136: }
 13160                           ;eusart1.c: 138: if(0 == PIE1bits.TX1IE)
 13161  00322C  B89D               	btfsc	3997,4,c	;volatile
 13162  00322E  D003               	goto	l195
 13163                           
 13164                           ; BSR set to: 0
 13165                           ;eusart1.c: 139: {
 13166                           ;eusart1.c: 140: TXREG1 = txData;
 13167  003230  C014  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 13168                           
 13169                           ;eusart1.c: 141: }
 13170  003234  D012               	goto	l196
 13171  003236                     l195:
 13172                           
 13173                           ; BSR set to: 0
 13174                           ;eusart1.c: 142: else
 13175                           ;eusart1.c: 143: {
 13176                           ;eusart1.c: 144: PIE1bits.TX1IE = 0;
 13177  003236  989D               	bcf	3997,4,c	;volatile
 13178                           
 13179                           ; BSR set to: 0
 13180                           ;eusart1.c: 145: eusart1TxBuffer[eusart1TxHead++] = txData;
 13181  003238  5043               	movf	_eusart1TxHead,w,c	;volatile
 13182  00323A  0D01               	mullw	1
 13183  00323C  0E68               	movlw	low _eusart1TxBuffer
 13184  00323E  24F3               	addwf	prodl,w,c
 13185  003240  6ED9               	movwf	fsr2l,c
 13186  003242  0E00               	movlw	high _eusart1TxBuffer
 13187  003244  20F4               	addwfc	prodh,w,c
 13188  003246  6EDA               	movwf	fsr2h,c
 13189  003248  C014  FFDF         	movff	EUSART1_Write@txData,indf2
 13190                           
 13191                           ; BSR set to: 0
 13192  00324C  2A43               	incf	_eusart1TxHead,f,c	;volatile
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;eusart1.c: 146: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 13196  00324E  0E07               	movlw	7
 13197  003250  6443               	cpfsgt	_eusart1TxHead,c	;volatile
 13198  003252  D002               	goto	l197
 13199                           
 13200                           ; BSR set to: 0
 13201                           ;eusart1.c: 147: {
 13202                           ;eusart1.c: 148: eusart1TxHead = 0;
 13203  003254  0E00               	movlw	0
 13204  003256  6E43               	movwf	_eusart1TxHead,c	;volatile
 13205  003258                     l197:
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;eusart1.c: 149: }
 13209                           ;eusart1.c: 150: eusart1TxBufferRemaining--;
 13210                           
 13211                           ; BSR set to: 0
 13212  003258  07FC               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 13213  00325A                     l196:
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;eusart1.c: 151: }
 13217                           ;eusart1.c: 152: PIE1bits.TX1IE = 1;
 13218                           
 13219                           ; BSR set to: 0
 13220  00325A  889D               	bsf	3997,4,c	;volatile
 13221                           
 13222                           ; BSR set to: 0
 13223  00325C  0012               	return		;funcret
 13224  00325E                     __end_of_EUSART1_Write:
 13225                           	opt stack 0
 13226                           tblptru	equ	0xFF8
 13227                           tblptrh	equ	0xFF7
 13228                           tblptrl	equ	0xFF6
 13229                           tablat	equ	0xFF5
 13230                           prodh	equ	0xFF4
 13231                           prodl	equ	0xFF3
 13232                           intcon	equ	0xFF2
 13233                           indf0	equ	0xFEF
 13234                           postinc0	equ	0xFEE
 13235                           fsr0h	equ	0xFEA
 13236                           fsr0l	equ	0xFE9
 13237                           wreg	equ	0xFE8
 13238                           indf1	equ	0xFE7
 13239                           postinc1	equ	0xFE6
 13240                           postdec1	equ	0xFE5
 13241                           fsr1h	equ	0xFE2
 13242                           fsr1l	equ	0xFE1
 13243                           indf2	equ	0xFDF
 13244                           postinc2	equ	0xFDE
 13245                           postdec2	equ	0xFDD
 13246                           fsr2h	equ	0xFDA
 13247                           fsr2l	equ	0xFD9
 13248                           status	equ	0xFD8
 13249                           
 13250 ;; *************** function ___lwmod *****************
 13251 ;; Defined at:
 13252 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwmod.c"
 13253 ;; Parameters:    Size  Location     Type
 13254 ;;  dividend        2   26[COMRAM] unsigned int 
 13255 ;;  divisor         2   28[COMRAM] unsigned int 
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;  counter         1   30[COMRAM] unsigned char 
 13258 ;; Return value:  Size  Location     Type
 13259 ;;                  2   26[COMRAM] unsigned int 
 13260 ;; Registers used:
 13261 ;;		wreg, status,2, status,0
 13262 ;; Tracked objects:
 13263 ;;		On entry : 0/0
 13264 ;;		On exit  : 0/0
 13265 ;;		Unchanged: 0/0
 13266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13267 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13271 ;;Total ram usage:        5 bytes
 13272 ;; Hardware stack levels used:    1
 13273 ;; Hardware stack levels required when called:    5
 13274 ;; This function calls:
 13275 ;;		Nothing
 13276 ;; This function is called by:
 13277 ;;		_printf
 13278 ;; This function uses a non-reentrant model
 13279 ;;
 13280                           
 13281                           	psect	text59
 13282  00315E                     __ptext59:
 13283                           	opt stack 0
 13284  00315E                     ___lwmod:
 13285                           	opt stack 24
 13286                           
 13287                           ; BSR set to: 0
 13288                           ;incstack = 0
 13289  00315E  501D               	movf	___lwmod@divisor,w,c
 13290  003160  101E               	iorwf	___lwmod@divisor+1,w,c
 13291  003162  B4D8               	btfsc	status,2,c
 13292  003164  D018               	goto	l1537
 13293  003166  0E01               	movlw	1
 13294  003168  6E1F               	movwf	___lwmod@counter,c
 13295  00316A  D004               	goto	l1532
 13296  00316C  90D8               	bcf	status,0,c
 13297  00316E  361D               	rlcf	___lwmod@divisor,f,c
 13298  003170  361E               	rlcf	___lwmod@divisor+1,f,c
 13299  003172  2A1F               	incf	___lwmod@counter,f,c
 13300  003174                     l1532:
 13301  003174  AE1E               	btfss	___lwmod@divisor+1,7,c
 13302  003176  D7FA               	goto	l1533
 13303  003178                     u5450:
 13304  003178  501D               	movf	___lwmod@divisor,w,c
 13305  00317A  5C1B               	subwf	___lwmod@dividend,w,c
 13306  00317C  501E               	movf	___lwmod@divisor+1,w,c
 13307  00317E  581C               	subwfb	___lwmod@dividend+1,w,c
 13308  003180  A0D8               	btfss	status,0,c
 13309  003182  D004               	goto	l1536
 13310  003184  501D               	movf	___lwmod@divisor,w,c
 13311  003186  5E1B               	subwf	___lwmod@dividend,f,c
 13312  003188  501E               	movf	___lwmod@divisor+1,w,c
 13313  00318A  5A1C               	subwfb	___lwmod@dividend+1,f,c
 13314  00318C                     l1536:
 13315  00318C  90D8               	bcf	status,0,c
 13316  00318E  321E               	rrcf	___lwmod@divisor+1,f,c
 13317  003190  321D               	rrcf	___lwmod@divisor,f,c
 13318  003192  2E1F               	decfsz	___lwmod@counter,f,c
 13319  003194  D7F1               	goto	u5450
 13320  003196                     l1537:
 13321  003196  C01B  F01B         	movff	___lwmod@dividend,?___lwmod
 13322  00319A  C01C  F01C         	movff	___lwmod@dividend+1,?___lwmod+1
 13323  00319E  0012               	return		;funcret
 13324  0031A0                     __end_of___lwmod:
 13325                           	opt stack 0
 13326                           tblptru	equ	0xFF8
 13327                           tblptrh	equ	0xFF7
 13328                           tblptrl	equ	0xFF6
 13329                           tablat	equ	0xFF5
 13330                           prodh	equ	0xFF4
 13331                           prodl	equ	0xFF3
 13332                           intcon	equ	0xFF2
 13333                           indf0	equ	0xFEF
 13334                           postinc0	equ	0xFEE
 13335                           fsr0h	equ	0xFEA
 13336                           fsr0l	equ	0xFE9
 13337                           wreg	equ	0xFE8
 13338                           indf1	equ	0xFE7
 13339                           postinc1	equ	0xFE6
 13340                           postdec1	equ	0xFE5
 13341                           fsr1h	equ	0xFE2
 13342                           fsr1l	equ	0xFE1
 13343                           indf2	equ	0xFDF
 13344                           postinc2	equ	0xFDE
 13345                           postdec2	equ	0xFDD
 13346                           fsr2h	equ	0xFDA
 13347                           fsr2l	equ	0xFD9
 13348                           status	equ	0xFD8
 13349                           
 13350 ;; *************** function ___lwdiv *****************
 13351 ;; Defined at:
 13352 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 13353 ;; Parameters:    Size  Location     Type
 13354 ;;  dividend        2   19[COMRAM] unsigned int 
 13355 ;;  divisor         2   21[COMRAM] unsigned int 
 13356 ;; Auto vars:     Size  Location     Type
 13357 ;;  quotient        2   24[COMRAM] unsigned int 
 13358 ;;  counter         1   23[COMRAM] unsigned char 
 13359 ;; Return value:  Size  Location     Type
 13360 ;;                  2   19[COMRAM] unsigned int 
 13361 ;; Registers used:
 13362 ;;		wreg, status,2, status,0
 13363 ;; Tracked objects:
 13364 ;;		On entry : 0/0
 13365 ;;		On exit  : 0/0
 13366 ;;		Unchanged: 0/0
 13367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13368 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13369 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13371 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13372 ;;Total ram usage:        7 bytes
 13373 ;; Hardware stack levels used:    1
 13374 ;; Hardware stack levels required when called:    5
 13375 ;; This function calls:
 13376 ;;		Nothing
 13377 ;; This function is called by:
 13378 ;;		_printf
 13379 ;; This function uses a non-reentrant model
 13380 ;;
 13381                           
 13382                           	psect	text60
 13383  002F50                     __ptext60:
 13384                           	opt stack 0
 13385  002F50                     ___lwdiv:
 13386                           	opt stack 24
 13387                           
 13388                           ;incstack = 0
 13389  002F50  0E00               	movlw	0
 13390  002F52  6E1A               	movwf	___lwdiv@quotient+1,c
 13391  002F54  0E00               	movlw	0
 13392  002F56  6E19               	movwf	___lwdiv@quotient,c
 13393  002F58  5016               	movf	___lwdiv@divisor,w,c
 13394  002F5A  1017               	iorwf	___lwdiv@divisor+1,w,c
 13395  002F5C  B4D8               	btfsc	status,2,c
 13396  002F5E  D01C               	goto	l1527
 13397  002F60  0E01               	movlw	1
 13398  002F62  6E18               	movwf	___lwdiv@counter,c
 13399  002F64  D004               	goto	l1522
 13400  002F66  90D8               	bcf	status,0,c
 13401  002F68  3616               	rlcf	___lwdiv@divisor,f,c
 13402  002F6A  3617               	rlcf	___lwdiv@divisor+1,f,c
 13403  002F6C  2A18               	incf	___lwdiv@counter,f,c
 13404  002F6E                     l1522:
 13405  002F6E  AE17               	btfss	___lwdiv@divisor+1,7,c
 13406  002F70  D7FA               	goto	l1523
 13407  002F72                     u5420:
 13408  002F72  90D8               	bcf	status,0,c
 13409  002F74  3619               	rlcf	___lwdiv@quotient,f,c
 13410  002F76  361A               	rlcf	___lwdiv@quotient+1,f,c
 13411  002F78  5016               	movf	___lwdiv@divisor,w,c
 13412  002F7A  5C14               	subwf	___lwdiv@dividend,w,c
 13413  002F7C  5017               	movf	___lwdiv@divisor+1,w,c
 13414  002F7E  5815               	subwfb	___lwdiv@dividend+1,w,c
 13415  002F80  A0D8               	btfss	status,0,c
 13416  002F82  D005               	goto	l1526
 13417  002F84  5016               	movf	___lwdiv@divisor,w,c
 13418  002F86  5E14               	subwf	___lwdiv@dividend,f,c
 13419  002F88  5017               	movf	___lwdiv@divisor+1,w,c
 13420  002F8A  5A15               	subwfb	___lwdiv@dividend+1,f,c
 13421  002F8C  8019               	bsf	___lwdiv@quotient,0,c
 13422  002F8E                     l1526:
 13423  002F8E  90D8               	bcf	status,0,c
 13424  002F90  3217               	rrcf	___lwdiv@divisor+1,f,c
 13425  002F92  3216               	rrcf	___lwdiv@divisor,f,c
 13426  002F94  2E18               	decfsz	___lwdiv@counter,f,c
 13427  002F96  D7ED               	goto	u5420
 13428  002F98                     l1527:
 13429  002F98  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
 13430  002F9C  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13431  002FA0  0012               	return		;funcret
 13432  002FA2                     __end_of___lwdiv:
 13433                           	opt stack 0
 13434                           tblptru	equ	0xFF8
 13435                           tblptrh	equ	0xFF7
 13436                           tblptrl	equ	0xFF6
 13437                           tablat	equ	0xFF5
 13438                           prodh	equ	0xFF4
 13439                           prodl	equ	0xFF3
 13440                           intcon	equ	0xFF2
 13441                           indf0	equ	0xFEF
 13442                           postinc0	equ	0xFEE
 13443                           fsr0h	equ	0xFEA
 13444                           fsr0l	equ	0xFE9
 13445                           wreg	equ	0xFE8
 13446                           indf1	equ	0xFE7
 13447                           postinc1	equ	0xFE6
 13448                           postdec1	equ	0xFE5
 13449                           fsr1h	equ	0xFE2
 13450                           fsr1l	equ	0xFE1
 13451                           indf2	equ	0xFDF
 13452                           postinc2	equ	0xFDE
 13453                           postdec2	equ	0xFDD
 13454                           fsr2h	equ	0xFDA
 13455                           fsr2l	equ	0xFD9
 13456                           status	equ	0xFD8
 13457                           
 13458 ;; *************** function _atoi *****************
 13459 ;; Defined at:
 13460 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\atoi.c"
 13461 ;; Parameters:    Size  Location     Type
 13462 ;;  s               2   33[COMRAM] PTR const unsigned char 
 13463 ;;		 -> uart_str(150), NULL(0), 
 13464 ;; Auto vars:     Size  Location     Type
 13465 ;;  a               2   38[COMRAM] int 
 13466 ;;  sign            1   37[COMRAM] unsigned char 
 13467 ;; Return value:  Size  Location     Type
 13468 ;;                  2   33[COMRAM] int 
 13469 ;; Registers used:
 13470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13471 ;; Tracked objects:
 13472 ;;		On entry : 0/0
 13473 ;;		On exit  : 0/0
 13474 ;;		Unchanged: 0/0
 13475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13476 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13477 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13478 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13479 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13480 ;;Total ram usage:        7 bytes
 13481 ;; Hardware stack levels used:    1
 13482 ;; Hardware stack levels required when called:    6
 13483 ;; This function calls:
 13484 ;;		___wmul
 13485 ;;		_isdigit
 13486 ;; This function is called by:
 13487 ;;		_parse_cmd_str
 13488 ;; This function uses a non-reentrant model
 13489 ;;
 13490                           
 13491                           	psect	text61
 13492  002656                     __ptext61:
 13493                           	opt stack 0
 13494  002656                     _atoi:
 13495                           	opt stack 22
 13496                           
 13497                           ;incstack = 0
 13498  002656  D002               	goto	l1262
 13499  002658  4A22               	infsnz	atoi@s,f,c
 13500  00265A  2A23               	incf	atoi@s+1,f,c
 13501  00265C                     l1262:
 13502  00265C  C022  FFD9         	movff	atoi@s,fsr2l
 13503  002660  C023  FFDA         	movff	atoi@s+1,fsr2h
 13504  002664  0E20               	movlw	32
 13505  002666  18DE               	xorwf	postinc2,w,c
 13506  002668  B4D8               	btfsc	status,2,c
 13507  00266A  D7F6               	goto	l1263
 13508  00266C  C022  FFD9         	movff	atoi@s,fsr2l
 13509  002670  C023  FFDA         	movff	atoi@s+1,fsr2h
 13510  002674  0E09               	movlw	9
 13511  002676  18DE               	xorwf	postinc2,w,c
 13512  002678  B4D8               	btfsc	status,2,c
 13513  00267A  D7EE               	goto	l1263
 13514  00267C  0E00               	movlw	0
 13515  00267E  6E28               	movwf	atoi@a+1,c
 13516  002680  0E00               	movlw	0
 13517  002682  6E27               	movwf	atoi@a,c
 13518  002684  0E00               	movlw	0
 13519  002686  6E26               	movwf	atoi@sign,c
 13520  002688  C022  FFD9         	movff	atoi@s,fsr2l
 13521  00268C  C023  FFDA         	movff	atoi@s+1,fsr2h
 13522  002690  0E2D               	movlw	45
 13523  002692  18DE               	xorwf	postinc2,w,c
 13524  002694  A4D8               	btfss	status,2,c
 13525  002696  D002               	goto	l1265
 13526  002698  2A26               	incf	atoi@sign,f,c
 13527  00269A  D024               	goto	l6903
 13528  00269C                     l1265:
 13529  00269C  C022  FFD9         	movff	atoi@s,fsr2l
 13530  0026A0  C023  FFDA         	movff	atoi@s+1,fsr2h
 13531  0026A4  0E2B               	movlw	43
 13532  0026A6  18DE               	xorwf	postinc2,w,c
 13533  0026A8  A4D8               	btfss	status,2,c
 13534  0026AA  D01E               	goto	l1268
 13535  0026AC  D01B               	goto	l6903
 13536  0026AE  C027  F01C         	movff	atoi@a,___wmul@multiplier
 13537  0026B2  C028  F01D         	movff	atoi@a+1,___wmul@multiplier+1
 13538  0026B6  0E00               	movlw	0
 13539  0026B8  6E1F               	movwf	___wmul@multiplicand+1,c
 13540  0026BA  0E0A               	movlw	10
 13541  0026BC  6E1E               	movwf	___wmul@multiplicand,c
 13542  0026BE  EC41  F01A         	call	___wmul	;wreg free
 13543  0026C2  C022  FFD9         	movff	atoi@s,fsr2l
 13544  0026C6  C023  FFDA         	movff	atoi@s+1,fsr2h
 13545  0026CA  50DF               	movf	indf2,w,c
 13546  0026CC  6E24               	movwf	??_atoi& (0+255),c
 13547  0026CE  6A25               	clrf	(??_atoi+1)& (0+255),c
 13548  0026D0  501C               	movf	?___wmul,w,c
 13549  0026D2  2624               	addwf	??_atoi,f,c
 13550  0026D4  501D               	movf	?___wmul+1,w,c
 13551  0026D6  2225               	addwfc	??_atoi+1,f,c
 13552  0026D8  0ED0               	movlw	208
 13553  0026DA  2424               	addwf	??_atoi,w,c
 13554  0026DC  6E27               	movwf	atoi@a,c
 13555  0026DE  0EFF               	movlw	255
 13556  0026E0  2025               	addwfc	??_atoi+1,w,c
 13557  0026E2  6E28               	movwf	atoi@a+1,c
 13558  0026E4                     l6903:
 13559  0026E4  4A22               	infsnz	atoi@s,f,c
 13560  0026E6  2A23               	incf	atoi@s+1,f,c
 13561  0026E8                     l1268:
 13562  0026E8  C022  FFD9         	movff	atoi@s,fsr2l
 13563  0026EC  C023  FFDA         	movff	atoi@s+1,fsr2h
 13564  0026F0  50DF               	movf	indf2,w,c
 13565  0026F2  ECA4  F01A         	call	_isdigit
 13566  0026F6  B0D8               	btfsc	status,0,c
 13567  0026F8  D7DA               	goto	l1269
 13568  0026FA  5026               	movf	atoi@sign,w,c
 13569  0026FC  B4D8               	btfsc	status,2,c
 13570  0026FE  D00D               	goto	l1271
 13571  002700  C027  F024         	movff	atoi@a,??_atoi
 13572  002704  C028  F025         	movff	atoi@a+1,??_atoi+1
 13573  002708  1E24               	comf	??_atoi,f,c
 13574  00270A  1E25               	comf	??_atoi+1,f,c
 13575  00270C  4A24               	infsnz	??_atoi,f,c
 13576  00270E  2A25               	incf	??_atoi+1,f,c
 13577  002710  C024  F022         	movff	??_atoi,?_atoi
 13578  002714  C025  F023         	movff	??_atoi+1,?_atoi+1
 13579  002718  0012               	return	
 13580  00271A                     l1271:
 13581  00271A  C027  F022         	movff	atoi@a,?_atoi
 13582  00271E  C028  F023         	movff	atoi@a+1,?_atoi+1
 13583  002722  0012               	return		;funcret
 13584  002724                     __end_of_atoi:
 13585                           	opt stack 0
 13586                           tblptru	equ	0xFF8
 13587                           tblptrh	equ	0xFF7
 13588                           tblptrl	equ	0xFF6
 13589                           tablat	equ	0xFF5
 13590                           prodh	equ	0xFF4
 13591                           prodl	equ	0xFF3
 13592                           intcon	equ	0xFF2
 13593                           indf0	equ	0xFEF
 13594                           postinc0	equ	0xFEE
 13595                           fsr0h	equ	0xFEA
 13596                           fsr0l	equ	0xFE9
 13597                           wreg	equ	0xFE8
 13598                           indf1	equ	0xFE7
 13599                           postinc1	equ	0xFE6
 13600                           postdec1	equ	0xFE5
 13601                           fsr1h	equ	0xFE2
 13602                           fsr1l	equ	0xFE1
 13603                           indf2	equ	0xFDF
 13604                           postinc2	equ	0xFDE
 13605                           postdec2	equ	0xFDD
 13606                           fsr2h	equ	0xFDA
 13607                           fsr2l	equ	0xFD9
 13608                           status	equ	0xFD8
 13609                           
 13610 ;; *************** function _isdigit *****************
 13611 ;; Defined at:
 13612 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\isdigit.c"
 13613 ;; Parameters:    Size  Location     Type
 13614 ;;  c               1    wreg     unsigned char 
 13615 ;; Auto vars:     Size  Location     Type
 13616 ;;  c               1   21[COMRAM] unsigned char 
 13617 ;; Return value:  Size  Location     Type
 13618 ;;		None               void
 13619 ;; Registers used:
 13620 ;;		wreg, status,2, status,0
 13621 ;; Tracked objects:
 13622 ;;		On entry : 0/0
 13623 ;;		On exit  : 0/0
 13624 ;;		Unchanged: 0/0
 13625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13627 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13628 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13629 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13630 ;;Total ram usage:        3 bytes
 13631 ;; Hardware stack levels used:    1
 13632 ;; Hardware stack levels required when called:    5
 13633 ;; This function calls:
 13634 ;;		Nothing
 13635 ;; This function is called by:
 13636 ;;		_collect_row
 13637 ;;		_get_direction
 13638 ;;		_get_dis_frq
 13639 ;;		_get_over_write_data
 13640 ;;		_collect_column
 13641 ;;		_parse_cmd_str
 13642 ;;		_atoi
 13643 ;; This function uses a non-reentrant model
 13644 ;;
 13645                           
 13646                           	psect	text62
 13647  003548                     __ptext62:
 13648                           	opt stack 0
 13649  003548                     _isdigit:
 13650                           	opt stack 23
 13651                           
 13652                           ;incstack = 0
 13653                           ;isdigit@c stored from wreg
 13654  003548  6E16               	movwf	isdigit@c,c
 13655  00354A  0E00               	movlw	0
 13656  00354C  6E15               	movwf	_isdigit$2299,c
 13657  00354E  0E3A               	movlw	58
 13658  003550  6016               	cpfslt	isdigit@c,c
 13659  003552  D005               	goto	l1443
 13660  003554  0E2F               	movlw	47
 13661  003556  6416               	cpfsgt	isdigit@c,c
 13662  003558  D002               	goto	l1443
 13663  00355A  0E01               	movlw	1
 13664  00355C  6E15               	movwf	_isdigit$2299,c
 13665  00355E                     l1443:
 13666  00355E  C015  F014         	movff	_isdigit$2299,??_isdigit
 13667  003562  3014               	rrcf	??_isdigit,w,c
 13668  003564  0012               	return	
 13669  003566                     __end_of_isdigit:
 13670                           	opt stack 0
 13671                           tblptru	equ	0xFF8
 13672                           tblptrh	equ	0xFF7
 13673                           tblptrl	equ	0xFF6
 13674                           tablat	equ	0xFF5
 13675                           prodh	equ	0xFF4
 13676                           prodl	equ	0xFF3
 13677                           intcon	equ	0xFF2
 13678                           indf0	equ	0xFEF
 13679                           postinc0	equ	0xFEE
 13680                           fsr0h	equ	0xFEA
 13681                           fsr0l	equ	0xFE9
 13682                           wreg	equ	0xFE8
 13683                           indf1	equ	0xFE7
 13684                           postinc1	equ	0xFE6
 13685                           postdec1	equ	0xFE5
 13686                           fsr1h	equ	0xFE2
 13687                           fsr1l	equ	0xFE1
 13688                           indf2	equ	0xFDF
 13689                           postinc2	equ	0xFDE
 13690                           postdec2	equ	0xFDD
 13691                           fsr2h	equ	0xFDA
 13692                           fsr2l	equ	0xFD9
 13693                           status	equ	0xFD8
 13694                           
 13695 ;; *************** function ___wmul *****************
 13696 ;; Defined at:
 13697 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul16.c"
 13698 ;; Parameters:    Size  Location     Type
 13699 ;;  multiplier      2   27[COMRAM] unsigned int 
 13700 ;;  multiplicand    2   29[COMRAM] unsigned int 
 13701 ;; Auto vars:     Size  Location     Type
 13702 ;;  product         2   31[COMRAM] unsigned int 
 13703 ;; Return value:  Size  Location     Type
 13704 ;;                  2   27[COMRAM] unsigned int 
 13705 ;; Registers used:
 13706 ;;		wreg, status,2, status,0, prodl, prodh
 13707 ;; Tracked objects:
 13708 ;;		On entry : 0/0
 13709 ;;		On exit  : 0/0
 13710 ;;		Unchanged: 0/0
 13711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13712 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13715 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13716 ;;Total ram usage:        6 bytes
 13717 ;; Hardware stack levels used:    1
 13718 ;; Hardware stack levels required when called:    5
 13719 ;; This function calls:
 13720 ;;		Nothing
 13721 ;; This function is called by:
 13722 ;;		_init_clcd_cusotom_lcd
 13723 ;;		_conflict_check
 13724 ;;		_update_string_data
 13725 ;;		_make_display
 13726 ;;		_atoi
 13727 ;;		_conflict
 13728 ;;		_get_new_uid
 13729 ;; This function uses a non-reentrant model
 13730 ;;
 13731                           
 13732                           	psect	text63
 13733  003482                     __ptext63:
 13734                           	opt stack 0
 13735  003482                     ___wmul:
 13736                           	opt stack 24
 13737                           
 13738                           ;incstack = 0
 13739  003482  501C               	movf	___wmul@multiplier,w,c
 13740  003484  021E               	mulwf	___wmul@multiplicand,c
 13741  003486  CFF3 F020          	movff	prodl,___wmul@product
 13742  00348A  CFF4 F021          	movff	prodh,___wmul@product+1
 13743  00348E  501C               	movf	___wmul@multiplier,w,c
 13744  003490  021F               	mulwf	___wmul@multiplicand+1,c
 13745  003492  50F3               	movf	prodl,w,c
 13746  003494  2621               	addwf	___wmul@product+1,f,c
 13747  003496  501D               	movf	___wmul@multiplier+1,w,c
 13748  003498  021E               	mulwf	___wmul@multiplicand,c
 13749  00349A  50F3               	movf	prodl,w,c
 13750  00349C  2621               	addwf	___wmul@product+1,f,c
 13751  00349E  C020  F01C         	movff	___wmul@product,?___wmul
 13752  0034A2  C021  F01D         	movff	___wmul@product+1,?___wmul+1
 13753  0034A6  0012               	return	
 13754  0034A8                     __end_of___wmul:
 13755                           	opt stack 0
 13756                           tblptru	equ	0xFF8
 13757                           tblptrh	equ	0xFF7
 13758                           tblptrl	equ	0xFF6
 13759                           tablat	equ	0xFF5
 13760                           prodh	equ	0xFF4
 13761                           prodl	equ	0xFF3
 13762                           intcon	equ	0xFF2
 13763                           indf0	equ	0xFEF
 13764                           postinc0	equ	0xFEE
 13765                           fsr0h	equ	0xFEA
 13766                           fsr0l	equ	0xFE9
 13767                           wreg	equ	0xFE8
 13768                           indf1	equ	0xFE7
 13769                           postinc1	equ	0xFE6
 13770                           postdec1	equ	0xFE5
 13771                           fsr1h	equ	0xFE2
 13772                           fsr1l	equ	0xFE1
 13773                           indf2	equ	0xFDF
 13774                           postinc2	equ	0xFDE
 13775                           postdec2	equ	0xFDD
 13776                           fsr2h	equ	0xFDA
 13777                           fsr2l	equ	0xFD9
 13778                           status	equ	0xFD8
 13779                           
 13780 ;; *************** function _getch *****************
 13781 ;; Defined at:
 13782 ;;		line 155 in file "mcc_generated_files/eusart1.c"
 13783 ;; Parameters:    Size  Location     Type
 13784 ;;		None
 13785 ;; Auto vars:     Size  Location     Type
 13786 ;;		None
 13787 ;; Return value:  Size  Location     Type
 13788 ;;                  1    wreg      unsigned char 
 13789 ;; Registers used:
 13790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13791 ;; Tracked objects:
 13792 ;;		On entry : 0/0
 13793 ;;		On exit  : 0/0
 13794 ;;		Unchanged: 0/0
 13795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13800 ;;Total ram usage:        0 bytes
 13801 ;; Hardware stack levels used:    1
 13802 ;; Hardware stack levels required when called:    6
 13803 ;; This function calls:
 13804 ;;		_EUSART1_Read
 13805 ;; This function is called by:
 13806 ;;		_cmd_consol_task
 13807 ;; This function uses a non-reentrant model
 13808 ;;
 13809                           
 13810                           	psect	text64
 13811  0036DE                     __ptext64:
 13812                           	opt stack 0
 13813  0036DE                     _getch:
 13814                           	opt stack 23
 13815                           
 13816                           ;eusart1.c: 157: return EUSART1_Read();
 13817                           
 13818                           ;incstack = 0
 13819  0036DE  ECA0  F019         	call	_EUSART1_Read	;wreg free
 13820  0036E2  0012               	return	
 13821  0036E4                     __end_of_getch:
 13822                           	opt stack 0
 13823                           tblptru	equ	0xFF8
 13824                           tblptrh	equ	0xFF7
 13825                           tblptrl	equ	0xFF6
 13826                           tablat	equ	0xFF5
 13827                           prodh	equ	0xFF4
 13828                           prodl	equ	0xFF3
 13829                           intcon	equ	0xFF2
 13830                           indf0	equ	0xFEF
 13831                           postinc0	equ	0xFEE
 13832                           fsr0h	equ	0xFEA
 13833                           fsr0l	equ	0xFE9
 13834                           wreg	equ	0xFE8
 13835                           indf1	equ	0xFE7
 13836                           postinc1	equ	0xFE6
 13837                           postdec1	equ	0xFE5
 13838                           fsr1h	equ	0xFE2
 13839                           fsr1l	equ	0xFE1
 13840                           indf2	equ	0xFDF
 13841                           postinc2	equ	0xFDE
 13842                           postdec2	equ	0xFDD
 13843                           fsr2h	equ	0xFDA
 13844                           fsr2l	equ	0xFD9
 13845                           status	equ	0xFD8
 13846                           
 13847 ;; *************** function _EUSART1_Read *****************
 13848 ;; Defined at:
 13849 ;;		line 112 in file "mcc_generated_files/eusart1.c"
 13850 ;; Parameters:    Size  Location     Type
 13851 ;;		None
 13852 ;; Auto vars:     Size  Location     Type
 13853 ;;  readValue       1   19[COMRAM] unsigned char 
 13854 ;; Return value:  Size  Location     Type
 13855 ;;                  1    wreg      unsigned char 
 13856 ;; Registers used:
 13857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13858 ;; Tracked objects:
 13859 ;;		On entry : 0/0
 13860 ;;		On exit  : 0/0
 13861 ;;		Unchanged: 0/0
 13862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13864 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13866 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13867 ;;Total ram usage:        1 bytes
 13868 ;; Hardware stack levels used:    1
 13869 ;; Hardware stack levels required when called:    5
 13870 ;; This function calls:
 13871 ;;		Nothing
 13872 ;; This function is called by:
 13873 ;;		_getch
 13874 ;; This function uses a non-reentrant model
 13875 ;;
 13876                           
 13877                           	psect	text65
 13878  003340                     __ptext65:
 13879                           	opt stack 0
 13880  003340                     _EUSART1_Read:
 13881                           	opt stack 23
 13882                           
 13883                           ;eusart1.c: 114: uint8_t readValue = 0;
 13884                           
 13885                           ;incstack = 0
 13886  003340  0E00               	movlw	0
 13887  003342  6E14               	movwf	EUSART1_Read@readValue,c
 13888  003344                     
 13889                           ;eusart1.c: 117: {
 13890  003344  503F               	movf	_eusart1RxCount,w,c	;volatile
 13891  003346  B4D8               	btfsc	status,2,c
 13892  003348  D7FD               	goto	l186
 13893                           
 13894                           ;eusart1.c: 118: }
 13895                           ;eusart1.c: 120: readValue = eusart1RxBuffer[eusart1RxTail++];
 13896  00334A  5040               	movf	_eusart1RxTail,w,c	;volatile
 13897  00334C  0D01               	mullw	1
 13898  00334E  0E60               	movlw	low _eusart1RxBuffer
 13899  003350  24F3               	addwf	prodl,w,c
 13900  003352  6ED9               	movwf	fsr2l,c
 13901  003354  0E00               	movlw	high _eusart1RxBuffer
 13902  003356  20F4               	addwfc	prodh,w,c
 13903  003358  6EDA               	movwf	fsr2h,c
 13904  00335A  50DF               	movf	indf2,w,c
 13905  00335C  6E14               	movwf	EUSART1_Read@readValue,c
 13906  00335E  2A40               	incf	_eusart1RxTail,f,c	;volatile
 13907                           
 13908                           ;eusart1.c: 121: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 13909  003360  0E07               	movlw	7
 13910  003362  6440               	cpfsgt	_eusart1RxTail,c	;volatile
 13911  003364  D002               	goto	l188
 13912                           
 13913                           ;eusart1.c: 122: {
 13914                           ;eusart1.c: 123: eusart1RxTail = 0;
 13915  003366  0E00               	movlw	0
 13916  003368  6E40               	movwf	_eusart1RxTail,c	;volatile
 13917  00336A                     l188:
 13918                           
 13919                           ;eusart1.c: 124: }
 13920                           ;eusart1.c: 125: PIE1bits.RC1IE = 0;
 13921  00336A  9A9D               	bcf	3997,5,c	;volatile
 13922                           
 13923                           ;eusart1.c: 126: eusart1RxCount--;
 13924  00336C  063F               	decf	_eusart1RxCount,f,c	;volatile
 13925                           
 13926                           ;eusart1.c: 127: PIE1bits.RC1IE = 1;
 13927  00336E  8A9D               	bsf	3997,5,c	;volatile
 13928                           
 13929                           ;eusart1.c: 129: return readValue;
 13930  003370  5014               	movf	EUSART1_Read@readValue,w,c
 13931  003372  0012               	return	
 13932  003374                     __end_of_EUSART1_Read:
 13933                           	opt stack 0
 13934                           tblptru	equ	0xFF8
 13935                           tblptrh	equ	0xFF7
 13936                           tblptrl	equ	0xFF6
 13937                           tablat	equ	0xFF5
 13938                           prodh	equ	0xFF4
 13939                           prodl	equ	0xFF3
 13940                           intcon	equ	0xFF2
 13941                           indf0	equ	0xFEF
 13942                           postinc0	equ	0xFEE
 13943                           fsr0h	equ	0xFEA
 13944                           fsr0l	equ	0xFE9
 13945                           wreg	equ	0xFE8
 13946                           indf1	equ	0xFE7
 13947                           postinc1	equ	0xFE6
 13948                           postdec1	equ	0xFE5
 13949                           fsr1h	equ	0xFE2
 13950                           fsr1l	equ	0xFE1
 13951                           indf2	equ	0xFDF
 13952                           postinc2	equ	0xFDE
 13953                           postdec2	equ	0xFDD
 13954                           fsr2h	equ	0xFDA
 13955                           fsr2l	equ	0xFD9
 13956                           status	equ	0xFD8
 13957                           
 13958 ;; *************** function _TMR5_StopTimer *****************
 13959 ;; Defined at:
 13960 ;;		line 94 in file "mcc_generated_files/tmr5.c"
 13961 ;; Parameters:    Size  Location     Type
 13962 ;;		None
 13963 ;; Auto vars:     Size  Location     Type
 13964 ;;		None
 13965 ;; Return value:  Size  Location     Type
 13966 ;;                  1    wreg      void 
 13967 ;; Registers used:
 13968 ;;		None
 13969 ;; Tracked objects:
 13970 ;;		On entry : 0/0
 13971 ;;		On exit  : 0/0
 13972 ;;		Unchanged: 0/0
 13973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13978 ;;Total ram usage:        0 bytes
 13979 ;; Hardware stack levels used:    1
 13980 ;; Hardware stack levels required when called:    5
 13981 ;; This function calls:
 13982 ;;		Nothing
 13983 ;; This function is called by:
 13984 ;;		_main
 13985 ;;		__delay_10uS
 13986 ;; This function uses a non-reentrant model
 13987 ;;
 13988                           
 13989                           	psect	text66
 13990  0036E4                     __ptext66:
 13991                           	opt stack 0
 13992  0036E4                     _TMR5_StopTimer:
 13993                           	opt stack 25
 13994                           
 13995                           ;tmr5.c: 97: T5CONbits.TMR5ON = 0;
 13996                           
 13997                           ;incstack = 0
 13998  0036E4  010F               	movlb	15	; () banked
 13999  0036E6  914E               	bcf	78,0,b	;volatile
 14000                           
 14001                           ; BSR set to: 15
 14002  0036E8  0012               	return		;funcret
 14003  0036EA                     __end_of_TMR5_StopTimer:
 14004                           	opt stack 0
 14005                           tblptru	equ	0xFF8
 14006                           tblptrh	equ	0xFF7
 14007                           tblptrl	equ	0xFF6
 14008                           tablat	equ	0xFF5
 14009                           prodh	equ	0xFF4
 14010                           prodl	equ	0xFF3
 14011                           intcon	equ	0xFF2
 14012                           indf0	equ	0xFEF
 14013                           postinc0	equ	0xFEE
 14014                           fsr0h	equ	0xFEA
 14015                           fsr0l	equ	0xFE9
 14016                           wreg	equ	0xFE8
 14017                           indf1	equ	0xFE7
 14018                           postinc1	equ	0xFE6
 14019                           postdec1	equ	0xFE5
 14020                           fsr1h	equ	0xFE2
 14021                           fsr1l	equ	0xFE1
 14022                           indf2	equ	0xFDF
 14023                           postinc2	equ	0xFDE
 14024                           postdec2	equ	0xFDD
 14025                           fsr2h	equ	0xFDA
 14026                           fsr2l	equ	0xFD9
 14027                           status	equ	0xFD8
 14028                           
 14029 ;; *************** function _TMR0_StopTimer *****************
 14030 ;; Defined at:
 14031 ;;		line 101 in file "mcc_generated_files/tmr0.c"
 14032 ;; Parameters:    Size  Location     Type
 14033 ;;		None
 14034 ;; Auto vars:     Size  Location     Type
 14035 ;;		None
 14036 ;; Return value:  Size  Location     Type
 14037 ;;                  1    wreg      void 
 14038 ;; Registers used:
 14039 ;;		None
 14040 ;; Tracked objects:
 14041 ;;		On entry : 0/0
 14042 ;;		On exit  : 0/0
 14043 ;;		Unchanged: 0/0
 14044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14049 ;;Total ram usage:        0 bytes
 14050 ;; Hardware stack levels used:    1
 14051 ;; Hardware stack levels required when called:    5
 14052 ;; This function calls:
 14053 ;;		Nothing
 14054 ;; This function is called by:
 14055 ;;		_main
 14056 ;; This function uses a non-reentrant model
 14057 ;;
 14058                           
 14059                           	psect	text67
 14060  0036F4                     __ptext67:
 14061                           	opt stack 0
 14062  0036F4                     _TMR0_StopTimer:
 14063                           	opt stack 25
 14064                           
 14065                           ;tmr0.c: 104: T0CONbits.TMR0ON = 0;
 14066                           
 14067                           ; BSR set to: 15
 14068                           ;incstack = 0
 14069  0036F4  9ED5               	bcf	4053,7,c	;volatile
 14070  0036F6  0012               	return		;funcret
 14071  0036F8                     __end_of_TMR0_StopTimer:
 14072                           	opt stack 0
 14073                           tblptru	equ	0xFF8
 14074                           tblptrh	equ	0xFF7
 14075                           tblptrl	equ	0xFF6
 14076                           tablat	equ	0xFF5
 14077                           prodh	equ	0xFF4
 14078                           prodl	equ	0xFF3
 14079                           intcon	equ	0xFF2
 14080                           indf0	equ	0xFEF
 14081                           postinc0	equ	0xFEE
 14082                           fsr0h	equ	0xFEA
 14083                           fsr0l	equ	0xFE9
 14084                           wreg	equ	0xFE8
 14085                           indf1	equ	0xFE7
 14086                           postinc1	equ	0xFE6
 14087                           postdec1	equ	0xFE5
 14088                           fsr1h	equ	0xFE2
 14089                           fsr1l	equ	0xFE1
 14090                           indf2	equ	0xFDF
 14091                           postinc2	equ	0xFDE
 14092                           postdec2	equ	0xFDD
 14093                           fsr2h	equ	0xFDA
 14094                           fsr2l	equ	0xFD9
 14095                           status	equ	0xFD8
 14096                           
 14097 ;; *************** function _SYSTEM_Initialize *****************
 14098 ;; Defined at:
 14099 ;;		line 111 in file "mcc_generated_files/mcc.c"
 14100 ;; Parameters:    Size  Location     Type
 14101 ;;		None
 14102 ;; Auto vars:     Size  Location     Type
 14103 ;;		None
 14104 ;; Return value:  Size  Location     Type
 14105 ;;                  1    wreg      void 
 14106 ;; Registers used:
 14107 ;;		wreg, status,2, status,0, cstack
 14108 ;; Tracked objects:
 14109 ;;		On entry : 0/0
 14110 ;;		On exit  : 0/0
 14111 ;;		Unchanged: 0/0
 14112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14117 ;;Total ram usage:        0 bytes
 14118 ;; Hardware stack levels used:    1
 14119 ;; Hardware stack levels required when called:    7
 14120 ;; This function calls:
 14121 ;;		_EUSART1_Initialize
 14122 ;;		_INTERRUPT_Initialize
 14123 ;;		_OSCILLATOR_Initialize
 14124 ;;		_PIN_MANAGER_Initialize
 14125 ;;		_TMR0_Initialize
 14126 ;;		_TMR1_Initialize
 14127 ;;		_TMR5_Initialize
 14128 ;; This function is called by:
 14129 ;;		_main
 14130 ;; This function uses a non-reentrant model
 14131 ;;
 14132                           
 14133                           	psect	text68
 14134  003566                     __ptext68:
 14135                           	opt stack 0
 14136  003566                     _SYSTEM_Initialize:
 14137                           	opt stack 23
 14138                           
 14139                           ;mcc.c: 114: INTERRUPT_Initialize();
 14140                           
 14141                           ;incstack = 0
 14142  003566  EC80  F01B         	call	_INTERRUPT_Initialize	;wreg free
 14143                           
 14144                           ;mcc.c: 115: PIN_MANAGER_Initialize();
 14145  00356A  ECD0  F018         	call	_PIN_MANAGER_Initialize	;wreg free
 14146                           
 14147                           ;mcc.c: 116: OSCILLATOR_Initialize();
 14148  00356E  EC3E  F01B         	call	_OSCILLATOR_Initialize	;wreg free
 14149                           
 14150                           ;mcc.c: 117: TMR5_Initialize();
 14151  003572  EC65  F01A         	call	_TMR5_Initialize	;wreg free
 14152                           
 14153                           ;mcc.c: 118: TMR1_Initialize();
 14154  003576  EC75  F01A         	call	_TMR1_Initialize	;wreg free
 14155                           
 14156                           ;mcc.c: 119: TMR0_Initialize();
 14157  00357A  EC69  F019         	call	_TMR0_Initialize	;wreg free
 14158                           
 14159                           ;mcc.c: 120: EUSART1_Initialize();
 14160  00357E  EC85  F019         	call	_EUSART1_Initialize	;wreg free
 14161  003582  0012               	return		;funcret
 14162  003584                     __end_of_SYSTEM_Initialize:
 14163                           	opt stack 0
 14164                           tblptru	equ	0xFF8
 14165                           tblptrh	equ	0xFF7
 14166                           tblptrl	equ	0xFF6
 14167                           tablat	equ	0xFF5
 14168                           prodh	equ	0xFF4
 14169                           prodl	equ	0xFF3
 14170                           intcon	equ	0xFF2
 14171                           indf0	equ	0xFEF
 14172                           postinc0	equ	0xFEE
 14173                           fsr0h	equ	0xFEA
 14174                           fsr0l	equ	0xFE9
 14175                           wreg	equ	0xFE8
 14176                           indf1	equ	0xFE7
 14177                           postinc1	equ	0xFE6
 14178                           postdec1	equ	0xFE5
 14179                           fsr1h	equ	0xFE2
 14180                           fsr1l	equ	0xFE1
 14181                           indf2	equ	0xFDF
 14182                           postinc2	equ	0xFDE
 14183                           postdec2	equ	0xFDD
 14184                           fsr2h	equ	0xFDA
 14185                           fsr2l	equ	0xFD9
 14186                           status	equ	0xFD8
 14187                           
 14188 ;; *************** function _TMR5_Initialize *****************
 14189 ;; Defined at:
 14190 ;;		line 62 in file "mcc_generated_files/tmr5.c"
 14191 ;; Parameters:    Size  Location     Type
 14192 ;;		None
 14193 ;; Auto vars:     Size  Location     Type
 14194 ;;		None
 14195 ;; Return value:  Size  Location     Type
 14196 ;;                  1    wreg      void 
 14197 ;; Registers used:
 14198 ;;		wreg, status,2, cstack
 14199 ;; Tracked objects:
 14200 ;;		On entry : 0/0
 14201 ;;		On exit  : 0/0
 14202 ;;		Unchanged: 0/0
 14203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14208 ;;Total ram usage:        0 bytes
 14209 ;; Hardware stack levels used:    1
 14210 ;; Hardware stack levels required when called:    6
 14211 ;; This function calls:
 14212 ;;		_TMR5_StartTimer
 14213 ;; This function is called by:
 14214 ;;		_SYSTEM_Initialize
 14215 ;; This function uses a non-reentrant model
 14216 ;;
 14217                           
 14218                           	psect	text69
 14219  0034CA                     __ptext69:
 14220                           	opt stack 0
 14221  0034CA                     _TMR5_Initialize:
 14222                           	opt stack 23
 14223                           
 14224                           ;tmr5.c: 67: T5CON = 0x12;
 14225                           
 14226                           ;incstack = 0
 14227  0034CA  0E12               	movlw	18
 14228  0034CC  010F               	movlb	15	; () banked
 14229  0034CE  6F4E               	movwf	78,b	;volatile
 14230                           
 14231                           ;tmr5.c: 70: T5GCON = 0x00;
 14232  0034D0  0E00               	movlw	0
 14233  0034D2  6F4D               	movwf	77,b	;volatile
 14234                           
 14235                           ; BSR set to: 15
 14236                           ;tmr5.c: 73: TMR5H = 0xFF;
 14237  0034D4  6950               	setf	80,b	;volatile
 14238                           
 14239                           ;tmr5.c: 76: TMR5L = 0xEC;
 14240  0034D6  0EEC               	movlw	236
 14241  0034D8  6F4F               	movwf	79,b	;volatile
 14242                           
 14243                           ; BSR set to: 15
 14244                           ;tmr5.c: 79: timer5ReloadVal=TMR5;
 14245  0034DA  CF4F F0FA          	movff	3919,_timer5ReloadVal	;volatile
 14246  0034DE  CF50 F0FB          	movff	3920,_timer5ReloadVal+1	;volatile
 14247                           
 14248                           ; BSR set to: 15
 14249                           ;tmr5.c: 82: PIR5bits.TMR5IF = 0;
 14250  0034E2  927E               	bcf	3966,1,c	;volatile
 14251                           
 14252                           ; BSR set to: 15
 14253                           ;tmr5.c: 85: TMR5_StartTimer();
 14254  0034E4  EC75  F01B         	call	_TMR5_StartTimer	;wreg free
 14255  0034E8  0012               	return		;funcret
 14256  0034EA                     __end_of_TMR5_Initialize:
 14257                           	opt stack 0
 14258                           tblptru	equ	0xFF8
 14259                           tblptrh	equ	0xFF7
 14260                           tblptrl	equ	0xFF6
 14261                           tablat	equ	0xFF5
 14262                           prodh	equ	0xFF4
 14263                           prodl	equ	0xFF3
 14264                           intcon	equ	0xFF2
 14265                           indf0	equ	0xFEF
 14266                           postinc0	equ	0xFEE
 14267                           fsr0h	equ	0xFEA
 14268                           fsr0l	equ	0xFE9
 14269                           wreg	equ	0xFE8
 14270                           indf1	equ	0xFE7
 14271                           postinc1	equ	0xFE6
 14272                           postdec1	equ	0xFE5
 14273                           fsr1h	equ	0xFE2
 14274                           fsr1l	equ	0xFE1
 14275                           indf2	equ	0xFDF
 14276                           postinc2	equ	0xFDE
 14277                           postdec2	equ	0xFDD
 14278                           fsr2h	equ	0xFDA
 14279                           fsr2l	equ	0xFD9
 14280                           status	equ	0xFD8
 14281                           
 14282 ;; *************** function _TMR5_StartTimer *****************
 14283 ;; Defined at:
 14284 ;;		line 88 in file "mcc_generated_files/tmr5.c"
 14285 ;; Parameters:    Size  Location     Type
 14286 ;;		None
 14287 ;; Auto vars:     Size  Location     Type
 14288 ;;		None
 14289 ;; Return value:  Size  Location     Type
 14290 ;;                  1    wreg      void 
 14291 ;; Registers used:
 14292 ;;		None
 14293 ;; Tracked objects:
 14294 ;;		On entry : 0/0
 14295 ;;		On exit  : 0/0
 14296 ;;		Unchanged: 0/0
 14297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14302 ;;Total ram usage:        0 bytes
 14303 ;; Hardware stack levels used:    1
 14304 ;; Hardware stack levels required when called:    5
 14305 ;; This function calls:
 14306 ;;		Nothing
 14307 ;; This function is called by:
 14308 ;;		_TMR5_Initialize
 14309 ;;		__delay_10uS
 14310 ;; This function uses a non-reentrant model
 14311 ;;
 14312                           
 14313                           	psect	text70
 14314  0036EA                     __ptext70:
 14315                           	opt stack 0
 14316  0036EA                     _TMR5_StartTimer:
 14317                           	opt stack 23
 14318                           
 14319                           ;tmr5.c: 91: T5CONbits.TMR5ON = 1;
 14320                           
 14321                           ;incstack = 0
 14322  0036EA  010F               	movlb	15	; () banked
 14323  0036EC  814E               	bsf	78,0,b	;volatile
 14324                           
 14325                           ; BSR set to: 15
 14326  0036EE  0012               	return		;funcret
 14327  0036F0                     __end_of_TMR5_StartTimer:
 14328                           	opt stack 0
 14329                           tblptru	equ	0xFF8
 14330                           tblptrh	equ	0xFF7
 14331                           tblptrl	equ	0xFF6
 14332                           tablat	equ	0xFF5
 14333                           prodh	equ	0xFF4
 14334                           prodl	equ	0xFF3
 14335                           intcon	equ	0xFF2
 14336                           indf0	equ	0xFEF
 14337                           postinc0	equ	0xFEE
 14338                           fsr0h	equ	0xFEA
 14339                           fsr0l	equ	0xFE9
 14340                           wreg	equ	0xFE8
 14341                           indf1	equ	0xFE7
 14342                           postinc1	equ	0xFE6
 14343                           postdec1	equ	0xFE5
 14344                           fsr1h	equ	0xFE2
 14345                           fsr1l	equ	0xFE1
 14346                           indf2	equ	0xFDF
 14347                           postinc2	equ	0xFDE
 14348                           postdec2	equ	0xFDD
 14349                           fsr2h	equ	0xFDA
 14350                           fsr2l	equ	0xFD9
 14351                           status	equ	0xFD8
 14352                           
 14353 ;; *************** function _TMR1_Initialize *****************
 14354 ;; Defined at:
 14355 ;;		line 62 in file "mcc_generated_files/tmr1.c"
 14356 ;; Parameters:    Size  Location     Type
 14357 ;;		None
 14358 ;; Auto vars:     Size  Location     Type
 14359 ;;		None
 14360 ;; Return value:  Size  Location     Type
 14361 ;;                  1    wreg      void 
 14362 ;; Registers used:
 14363 ;;		wreg, status,2, cstack
 14364 ;; Tracked objects:
 14365 ;;		On entry : 0/0
 14366 ;;		On exit  : 0/0
 14367 ;;		Unchanged: 0/0
 14368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14373 ;;Total ram usage:        0 bytes
 14374 ;; Hardware stack levels used:    1
 14375 ;; Hardware stack levels required when called:    6
 14376 ;; This function calls:
 14377 ;;		_TMR1_StartTimer
 14378 ;; This function is called by:
 14379 ;;		_SYSTEM_Initialize
 14380 ;; This function uses a non-reentrant model
 14381 ;;
 14382                           
 14383                           	psect	text71
 14384  0034EA                     __ptext71:
 14385                           	opt stack 0
 14386  0034EA                     _TMR1_Initialize:
 14387                           	opt stack 23
 14388                           
 14389                           ;tmr1.c: 67: T1CON = 0x32;
 14390                           
 14391                           ; BSR set to: 15
 14392                           ;incstack = 0
 14393  0034EA  0E32               	movlw	50
 14394  0034EC  6ECD               	movwf	4045,c	;volatile
 14395                           
 14396                           ;tmr1.c: 70: T1GCON = 0x00;
 14397  0034EE  0E00               	movlw	0
 14398  0034F0  6ECC               	movwf	4044,c	;volatile
 14399                           
 14400                           ;tmr1.c: 73: TMR1H = 0xFE;
 14401  0034F2  0EFE               	movlw	254
 14402  0034F4  6ECF               	movwf	4047,c	;volatile
 14403                           
 14404                           ;tmr1.c: 76: TMR1L = 0x0C;
 14405  0034F6  0E0C               	movlw	12
 14406  0034F8  6ECE               	movwf	4046,c	;volatile
 14407                           
 14408                           ;tmr1.c: 79: timer1ReloadVal=TMR1;
 14409  0034FA  CFCE F0F8          	movff	4046,_timer1ReloadVal	;volatile
 14410  0034FE  CFCF F0F9          	movff	4047,_timer1ReloadVal+1	;volatile
 14411                           
 14412                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
 14413  003502  909E               	bcf	3998,0,c	;volatile
 14414                           
 14415                           ;tmr1.c: 85: TMR1_StartTimer();
 14416  003504  EC7C  F01B         	call	_TMR1_StartTimer	;wreg free
 14417  003508  0012               	return		;funcret
 14418  00350A                     __end_of_TMR1_Initialize:
 14419                           	opt stack 0
 14420                           tblptru	equ	0xFF8
 14421                           tblptrh	equ	0xFF7
 14422                           tblptrl	equ	0xFF6
 14423                           tablat	equ	0xFF5
 14424                           prodh	equ	0xFF4
 14425                           prodl	equ	0xFF3
 14426                           intcon	equ	0xFF2
 14427                           indf0	equ	0xFEF
 14428                           postinc0	equ	0xFEE
 14429                           fsr0h	equ	0xFEA
 14430                           fsr0l	equ	0xFE9
 14431                           wreg	equ	0xFE8
 14432                           indf1	equ	0xFE7
 14433                           postinc1	equ	0xFE6
 14434                           postdec1	equ	0xFE5
 14435                           fsr1h	equ	0xFE2
 14436                           fsr1l	equ	0xFE1
 14437                           indf2	equ	0xFDF
 14438                           postinc2	equ	0xFDE
 14439                           postdec2	equ	0xFDD
 14440                           fsr2h	equ	0xFDA
 14441                           fsr2l	equ	0xFD9
 14442                           status	equ	0xFD8
 14443                           
 14444 ;; *************** function _TMR1_StartTimer *****************
 14445 ;; Defined at:
 14446 ;;		line 88 in file "mcc_generated_files/tmr1.c"
 14447 ;; Parameters:    Size  Location     Type
 14448 ;;		None
 14449 ;; Auto vars:     Size  Location     Type
 14450 ;;		None
 14451 ;; Return value:  Size  Location     Type
 14452 ;;                  1    wreg      void 
 14453 ;; Registers used:
 14454 ;;		None
 14455 ;; Tracked objects:
 14456 ;;		On entry : 0/0
 14457 ;;		On exit  : 0/0
 14458 ;;		Unchanged: 0/0
 14459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14464 ;;Total ram usage:        0 bytes
 14465 ;; Hardware stack levels used:    1
 14466 ;; Hardware stack levels required when called:    5
 14467 ;; This function calls:
 14468 ;;		Nothing
 14469 ;; This function is called by:
 14470 ;;		_TMR1_Initialize
 14471 ;;		__delay_MS
 14472 ;; This function uses a non-reentrant model
 14473 ;;
 14474                           
 14475                           	psect	text72
 14476  0036F8                     __ptext72:
 14477                           	opt stack 0
 14478  0036F8                     _TMR1_StartTimer:
 14479                           	opt stack 20
 14480                           
 14481                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
 14482                           
 14483                           ;incstack = 0
 14484  0036F8  80CD               	bsf	4045,0,c	;volatile
 14485  0036FA  0012               	return		;funcret
 14486  0036FC                     __end_of_TMR1_StartTimer:
 14487                           	opt stack 0
 14488                           tblptru	equ	0xFF8
 14489                           tblptrh	equ	0xFF7
 14490                           tblptrl	equ	0xFF6
 14491                           tablat	equ	0xFF5
 14492                           prodh	equ	0xFF4
 14493                           prodl	equ	0xFF3
 14494                           intcon	equ	0xFF2
 14495                           indf0	equ	0xFEF
 14496                           postinc0	equ	0xFEE
 14497                           fsr0h	equ	0xFEA
 14498                           fsr0l	equ	0xFE9
 14499                           wreg	equ	0xFE8
 14500                           indf1	equ	0xFE7
 14501                           postinc1	equ	0xFE6
 14502                           postdec1	equ	0xFE5
 14503                           fsr1h	equ	0xFE2
 14504                           fsr1l	equ	0xFE1
 14505                           indf2	equ	0xFDF
 14506                           postinc2	equ	0xFDE
 14507                           postdec2	equ	0xFDD
 14508                           fsr2h	equ	0xFDA
 14509                           fsr2l	equ	0xFD9
 14510                           status	equ	0xFD8
 14511                           
 14512 ;; *************** function _TMR0_Initialize *****************
 14513 ;; Defined at:
 14514 ;;		line 66 in file "mcc_generated_files/tmr0.c"
 14515 ;; Parameters:    Size  Location     Type
 14516 ;;		None
 14517 ;; Auto vars:     Size  Location     Type
 14518 ;;		None
 14519 ;; Return value:  Size  Location     Type
 14520 ;;                  1    wreg      void 
 14521 ;; Registers used:
 14522 ;;		wreg, status,2, status,0, cstack
 14523 ;; Tracked objects:
 14524 ;;		On entry : 0/0
 14525 ;;		On exit  : 0/0
 14526 ;;		Unchanged: 0/0
 14527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14530 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14531 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14532 ;;Total ram usage:        2 bytes
 14533 ;; Hardware stack levels used:    1
 14534 ;; Hardware stack levels required when called:    6
 14535 ;; This function calls:
 14536 ;;		_TMR0_SetInterruptHandler
 14537 ;;		_TMR0_StartTimer
 14538 ;; This function is called by:
 14539 ;;		_SYSTEM_Initialize
 14540 ;; This function uses a non-reentrant model
 14541 ;;
 14542                           
 14543                           	psect	text73
 14544  0032D2                     __ptext73:
 14545                           	opt stack 0
 14546  0032D2                     _TMR0_Initialize:
 14547                           	opt stack 23
 14548                           
 14549                           ;tmr0.c: 71: T0CON = 0x17;
 14550                           
 14551                           ;incstack = 0
 14552  0032D2  0E17               	movlw	23
 14553  0032D4  6ED5               	movwf	4053,c	;volatile
 14554                           
 14555                           ;tmr0.c: 74: TMR0H = 0xC2;
 14556  0032D6  0EC2               	movlw	194
 14557  0032D8  6ED7               	movwf	4055,c	;volatile
 14558                           
 14559                           ;tmr0.c: 77: TMR0L = 0xF6;
 14560  0032DA  0EF6               	movlw	246
 14561  0032DC  6ED6               	movwf	4054,c	;volatile
 14562                           
 14563                           ;tmr0.c: 80: timer0ReloadVal = (TMR0H << 8) | TMR0L;
 14564  0032DE  50D6               	movf	4054,w,c	;volatile
 14565  0032E0  CFD7 F016          	movff	4055,??_TMR0_Initialize	;volatile
 14566  0032E4  6A17               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 14567  0032E6  C016  F017         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 14568  0032EA  6A16               	clrf	??_TMR0_Initialize,c
 14569  0032EC  1016               	iorwf	??_TMR0_Initialize,w,c
 14570  0032EE  6E49               	movwf	_timer0ReloadVal,c	;volatile
 14571  0032F0  5017               	movf	??_TMR0_Initialize+1,w,c
 14572  0032F2  6E4A               	movwf	_timer0ReloadVal+1,c	;volatile
 14573                           
 14574                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
 14575  0032F4  94F2               	bcf	intcon,2,c	;volatile
 14576                           
 14577                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
 14578  0032F6  8AF2               	bsf	intcon,5,c	;volatile
 14579                           
 14580                           ;tmr0.c: 89: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 14581  0032F8  0E04               	movlw	low _TMR0_DefaultInterruptHandler
 14582  0032FA  6E14               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
 14583  0032FC  0E37               	movlw	high _TMR0_DefaultInterruptHandler
 14584  0032FE  6E15               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
 14585  003300  EC66  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
 14586                           
 14587                           ;tmr0.c: 92: TMR0_StartTimer();
 14588  003304  EC7E  F01B         	call	_TMR0_StartTimer	;wreg free
 14589  003308  0012               	return		;funcret
 14590  00330A                     __end_of_TMR0_Initialize:
 14591                           	opt stack 0
 14592                           tblptru	equ	0xFF8
 14593                           tblptrh	equ	0xFF7
 14594                           tblptrl	equ	0xFF6
 14595                           tablat	equ	0xFF5
 14596                           prodh	equ	0xFF4
 14597                           prodl	equ	0xFF3
 14598                           intcon	equ	0xFF2
 14599                           indf0	equ	0xFEF
 14600                           postinc0	equ	0xFEE
 14601                           fsr0h	equ	0xFEA
 14602                           fsr0l	equ	0xFE9
 14603                           wreg	equ	0xFE8
 14604                           indf1	equ	0xFE7
 14605                           postinc1	equ	0xFE6
 14606                           postdec1	equ	0xFE5
 14607                           fsr1h	equ	0xFE2
 14608                           fsr1l	equ	0xFE1
 14609                           indf2	equ	0xFDF
 14610                           postinc2	equ	0xFDE
 14611                           postdec2	equ	0xFDD
 14612                           fsr2h	equ	0xFDA
 14613                           fsr2l	equ	0xFD9
 14614                           status	equ	0xFD8
 14615                           
 14616 ;; *************** function _TMR0_StartTimer *****************
 14617 ;; Defined at:
 14618 ;;		line 95 in file "mcc_generated_files/tmr0.c"
 14619 ;; Parameters:    Size  Location     Type
 14620 ;;		None
 14621 ;; Auto vars:     Size  Location     Type
 14622 ;;		None
 14623 ;; Return value:  Size  Location     Type
 14624 ;;                  1    wreg      void 
 14625 ;; Registers used:
 14626 ;;		None
 14627 ;; Tracked objects:
 14628 ;;		On entry : 0/0
 14629 ;;		On exit  : 0/0
 14630 ;;		Unchanged: 0/0
 14631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14636 ;;Total ram usage:        0 bytes
 14637 ;; Hardware stack levels used:    1
 14638 ;; Hardware stack levels required when called:    5
 14639 ;; This function calls:
 14640 ;;		Nothing
 14641 ;; This function is called by:
 14642 ;;		_TMR0_Initialize
 14643 ;;		_main
 14644 ;; This function uses a non-reentrant model
 14645 ;;
 14646                           
 14647                           	psect	text74
 14648  0036FC                     __ptext74:
 14649                           	opt stack 0
 14650  0036FC                     _TMR0_StartTimer:
 14651                           	opt stack 25
 14652                           
 14653                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
 14654                           
 14655                           ;incstack = 0
 14656  0036FC  8ED5               	bsf	4053,7,c	;volatile
 14657  0036FE  0012               	return		;funcret
 14658  003700                     __end_of_TMR0_StartTimer:
 14659                           	opt stack 0
 14660                           tblptru	equ	0xFF8
 14661                           tblptrh	equ	0xFF7
 14662                           tblptrl	equ	0xFF6
 14663                           tablat	equ	0xFF5
 14664                           prodh	equ	0xFF4
 14665                           prodl	equ	0xFF3
 14666                           intcon	equ	0xFF2
 14667                           indf0	equ	0xFEF
 14668                           postinc0	equ	0xFEE
 14669                           fsr0h	equ	0xFEA
 14670                           fsr0l	equ	0xFE9
 14671                           wreg	equ	0xFE8
 14672                           indf1	equ	0xFE7
 14673                           postinc1	equ	0xFE6
 14674                           postdec1	equ	0xFE5
 14675                           fsr1h	equ	0xFE2
 14676                           fsr1l	equ	0xFE1
 14677                           indf2	equ	0xFDF
 14678                           postinc2	equ	0xFDE
 14679                           postdec2	equ	0xFDD
 14680                           fsr2h	equ	0xFDA
 14681                           fsr2l	equ	0xFD9
 14682                           status	equ	0xFD8
 14683                           
 14684 ;; *************** function _TMR0_SetInterruptHandler *****************
 14685 ;; Defined at:
 14686 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;  InterruptHan    2   19[COMRAM] PTR void 
 14689 ;;		 -> make_array(1), TMR0_DefaultInterruptHandler(1), 
 14690 ;; Auto vars:     Size  Location     Type
 14691 ;;		None
 14692 ;; Return value:  Size  Location     Type
 14693 ;;                  1    wreg      void 
 14694 ;; Registers used:
 14695 ;;		wreg, status,2, status,0
 14696 ;; Tracked objects:
 14697 ;;		On entry : 0/0
 14698 ;;		On exit  : 0/0
 14699 ;;		Unchanged: 0/0
 14700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14705 ;;Total ram usage:        2 bytes
 14706 ;; Hardware stack levels used:    1
 14707 ;; Hardware stack levels required when called:    5
 14708 ;; This function calls:
 14709 ;;		Nothing
 14710 ;; This function is called by:
 14711 ;;		_TMR0_Initialize
 14712 ;;		_main
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716                           	psect	text75
 14717  0036CC                     __ptext75:
 14718                           	opt stack 0
 14719  0036CC                     _TMR0_SetInterruptHandler:
 14720                           	opt stack 25
 14721                           
 14722                           ;tmr0.c: 163: TMR0_InterruptHandler = InterruptHandler;
 14723                           
 14724                           ;incstack = 0
 14725  0036CC  C014  F0F6         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
 14726  0036D0  C015  F0F7         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
 14727  0036D4  0012               	return		;funcret
 14728  0036D6                     __end_of_TMR0_SetInterruptHandler:
 14729                           	opt stack 0
 14730                           tblptru	equ	0xFF8
 14731                           tblptrh	equ	0xFF7
 14732                           tblptrl	equ	0xFF6
 14733                           tablat	equ	0xFF5
 14734                           prodh	equ	0xFF4
 14735                           prodl	equ	0xFF3
 14736                           intcon	equ	0xFF2
 14737                           indf0	equ	0xFEF
 14738                           postinc0	equ	0xFEE
 14739                           fsr0h	equ	0xFEA
 14740                           fsr0l	equ	0xFE9
 14741                           wreg	equ	0xFE8
 14742                           indf1	equ	0xFE7
 14743                           postinc1	equ	0xFE6
 14744                           postdec1	equ	0xFE5
 14745                           fsr1h	equ	0xFE2
 14746                           fsr1l	equ	0xFE1
 14747                           indf2	equ	0xFDF
 14748                           postinc2	equ	0xFDE
 14749                           postdec2	equ	0xFDD
 14750                           fsr2h	equ	0xFDA
 14751                           fsr2l	equ	0xFD9
 14752                           status	equ	0xFD8
 14753                           
 14754 ;; *************** function _PIN_MANAGER_Initialize *****************
 14755 ;; Defined at:
 14756 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14757 ;; Parameters:    Size  Location     Type
 14758 ;;		None
 14759 ;; Auto vars:     Size  Location     Type
 14760 ;;		None
 14761 ;; Return value:  Size  Location     Type
 14762 ;;                  1    wreg      void 
 14763 ;; Registers used:
 14764 ;;		wreg, status,2
 14765 ;; Tracked objects:
 14766 ;;		On entry : 0/0
 14767 ;;		On exit  : 0/0
 14768 ;;		Unchanged: 0/0
 14769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14774 ;;Total ram usage:        0 bytes
 14775 ;; Hardware stack levels used:    1
 14776 ;; Hardware stack levels required when called:    5
 14777 ;; This function calls:
 14778 ;;		Nothing
 14779 ;; This function is called by:
 14780 ;;		_SYSTEM_Initialize
 14781 ;; This function uses a non-reentrant model
 14782 ;;
 14783                           
 14784                           	psect	text76
 14785  0031A0                     __ptext76:
 14786                           	opt stack 0
 14787  0031A0                     _PIN_MANAGER_Initialize:
 14788                           	opt stack 24
 14789                           
 14790                           ;pin_manager.c: 56: LATE = 0x00;
 14791                           
 14792                           ;incstack = 0
 14793  0031A0  0E00               	movlw	0
 14794  0031A2  6E8D               	movwf	3981,c	;volatile
 14795                           
 14796                           ;pin_manager.c: 57: LATD = 0x00;
 14797  0031A4  0E00               	movlw	0
 14798  0031A6  6E8C               	movwf	3980,c	;volatile
 14799                           
 14800                           ;pin_manager.c: 58: LATA = 0x00;
 14801  0031A8  0E00               	movlw	0
 14802  0031AA  6E89               	movwf	3977,c	;volatile
 14803                           
 14804                           ;pin_manager.c: 59: LATB = 0x00;
 14805  0031AC  0E00               	movlw	0
 14806  0031AE  6E8A               	movwf	3978,c	;volatile
 14807                           
 14808                           ;pin_manager.c: 60: LATC = 0x00;
 14809  0031B0  0E00               	movlw	0
 14810  0031B2  6E8B               	movwf	3979,c	;volatile
 14811                           
 14812                           ;pin_manager.c: 65: TRISE = 0x03;
 14813  0031B4  0E03               	movlw	3
 14814  0031B6  6E96               	movwf	3990,c	;volatile
 14815                           
 14816                           ;pin_manager.c: 66: TRISA = 0xF8;
 14817  0031B8  0EF8               	movlw	248
 14818  0031BA  6E92               	movwf	3986,c	;volatile
 14819                           
 14820                           ;pin_manager.c: 67: TRISB = 0xFF;
 14821  0031BC  6893               	setf	3987,c	;volatile
 14822                           
 14823                           ;pin_manager.c: 68: TRISC = 0xBF;
 14824  0031BE  0EBF               	movlw	191
 14825  0031C0  6E94               	movwf	3988,c	;volatile
 14826                           
 14827                           ;pin_manager.c: 69: TRISD = 0x00;
 14828  0031C2  0E00               	movlw	0
 14829  0031C4  6E95               	movwf	3989,c	;volatile
 14830                           
 14831                           ;pin_manager.c: 74: ANSELC = 0x3C;
 14832  0031C6  0E3C               	movlw	60
 14833  0031C8  010F               	movlb	15	; () banked
 14834  0031CA  6F3A               	movwf	58,b	;volatile
 14835                           
 14836                           ;pin_manager.c: 75: ANSELB = 0x3F;
 14837  0031CC  0E3F               	movlw	63
 14838  0031CE  6F39               	movwf	57,b	;volatile
 14839                           
 14840                           ;pin_manager.c: 76: ANSELD = 0x00;
 14841  0031D0  0E00               	movlw	0
 14842  0031D2  6F3B               	movwf	59,b	;volatile
 14843                           
 14844                           ;pin_manager.c: 77: ANSELE = 0x03;
 14845  0031D4  0E03               	movlw	3
 14846  0031D6  6F3C               	movwf	60,b	;volatile
 14847                           
 14848                           ;pin_manager.c: 78: ANSELA = 0x28;
 14849  0031D8  0E28               	movlw	40
 14850  0031DA  6F38               	movwf	56,b	;volatile
 14851                           
 14852                           ; BSR set to: 15
 14853                           ;pin_manager.c: 83: WPUB = 0xFF;
 14854  0031DC  6861               	setf	3937,c	;volatile
 14855                           
 14856                           ; BSR set to: 15
 14857                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
 14858  0031DE  9EF1               	bcf	intcon2,7,c	;volatile
 14859                           
 14860                           ; BSR set to: 15
 14861  0031E0  0012               	return		;funcret
 14862  0031E2                     __end_of_PIN_MANAGER_Initialize:
 14863                           	opt stack 0
 14864                           tblptru	equ	0xFF8
 14865                           tblptrh	equ	0xFF7
 14866                           tblptrl	equ	0xFF6
 14867                           tablat	equ	0xFF5
 14868                           prodh	equ	0xFF4
 14869                           prodl	equ	0xFF3
 14870                           intcon	equ	0xFF2
 14871                           intcon2	equ	0xFF1
 14872                           indf0	equ	0xFEF
 14873                           postinc0	equ	0xFEE
 14874                           fsr0h	equ	0xFEA
 14875                           fsr0l	equ	0xFE9
 14876                           wreg	equ	0xFE8
 14877                           indf1	equ	0xFE7
 14878                           postinc1	equ	0xFE6
 14879                           postdec1	equ	0xFE5
 14880                           fsr1h	equ	0xFE2
 14881                           fsr1l	equ	0xFE1
 14882                           indf2	equ	0xFDF
 14883                           postinc2	equ	0xFDE
 14884                           postdec2	equ	0xFDD
 14885                           fsr2h	equ	0xFDA
 14886                           fsr2l	equ	0xFD9
 14887                           status	equ	0xFD8
 14888                           
 14889 ;; *************** function _OSCILLATOR_Initialize *****************
 14890 ;; Defined at:
 14891 ;;		line 123 in file "mcc_generated_files/mcc.c"
 14892 ;; Parameters:    Size  Location     Type
 14893 ;;		None
 14894 ;; Auto vars:     Size  Location     Type
 14895 ;;		None
 14896 ;; Return value:  Size  Location     Type
 14897 ;;                  1    wreg      void 
 14898 ;; Registers used:
 14899 ;;		wreg, status,2
 14900 ;; Tracked objects:
 14901 ;;		On entry : 0/0
 14902 ;;		On exit  : 0/0
 14903 ;;		Unchanged: 0/0
 14904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14909 ;;Total ram usage:        0 bytes
 14910 ;; Hardware stack levels used:    1
 14911 ;; Hardware stack levels required when called:    5
 14912 ;; This function calls:
 14913 ;;		Nothing
 14914 ;; This function is called by:
 14915 ;;		_SYSTEM_Initialize
 14916 ;; This function uses a non-reentrant model
 14917 ;;
 14918                           
 14919                           	psect	text77
 14920  00367C                     __ptext77:
 14921                           	opt stack 0
 14922  00367C                     _OSCILLATOR_Initialize:
 14923                           	opt stack 24
 14924                           
 14925                           ;mcc.c: 126: OSCCON = 0x70;
 14926                           
 14927                           ; BSR set to: 15
 14928                           ;incstack = 0
 14929  00367C  0E70               	movlw	112
 14930  00367E  6ED3               	movwf	4051,c	;volatile
 14931                           
 14932                           ;mcc.c: 128: OSCCON2 = 0x04;
 14933  003680  0E04               	movlw	4
 14934  003682  6ED2               	movwf	4050,c	;volatile
 14935                           
 14936                           ;mcc.c: 130: OSCTUNE = 0x80;
 14937  003684  0E80               	movlw	128
 14938  003686  6E9B               	movwf	3995,c	;volatile
 14939  003688  0012               	return		;funcret
 14940  00368A                     __end_of_OSCILLATOR_Initialize:
 14941                           	opt stack 0
 14942                           tblptru	equ	0xFF8
 14943                           tblptrh	equ	0xFF7
 14944                           tblptrl	equ	0xFF6
 14945                           tablat	equ	0xFF5
 14946                           prodh	equ	0xFF4
 14947                           prodl	equ	0xFF3
 14948                           intcon	equ	0xFF2
 14949                           intcon2	equ	0xFF1
 14950                           indf0	equ	0xFEF
 14951                           postinc0	equ	0xFEE
 14952                           fsr0h	equ	0xFEA
 14953                           fsr0l	equ	0xFE9
 14954                           wreg	equ	0xFE8
 14955                           indf1	equ	0xFE7
 14956                           postinc1	equ	0xFE6
 14957                           postdec1	equ	0xFE5
 14958                           fsr1h	equ	0xFE2
 14959                           fsr1l	equ	0xFE1
 14960                           indf2	equ	0xFDF
 14961                           postinc2	equ	0xFDE
 14962                           postdec2	equ	0xFDD
 14963                           fsr2h	equ	0xFDA
 14964                           fsr2l	equ	0xFD9
 14965                           status	equ	0xFD8
 14966                           
 14967 ;; *************** function _INTERRUPT_Initialize *****************
 14968 ;; Defined at:
 14969 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 14970 ;; Parameters:    Size  Location     Type
 14971 ;;		None
 14972 ;; Auto vars:     Size  Location     Type
 14973 ;;		None
 14974 ;; Return value:  Size  Location     Type
 14975 ;;                  1    wreg      void 
 14976 ;; Registers used:
 14977 ;;		None
 14978 ;; Tracked objects:
 14979 ;;		On entry : 0/0
 14980 ;;		On exit  : 0/0
 14981 ;;		Unchanged: 0/0
 14982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14987 ;;Total ram usage:        0 bytes
 14988 ;; Hardware stack levels used:    1
 14989 ;; Hardware stack levels required when called:    5
 14990 ;; This function calls:
 14991 ;;		Nothing
 14992 ;; This function is called by:
 14993 ;;		_SYSTEM_Initialize
 14994 ;; This function uses a non-reentrant model
 14995 ;;
 14996                           
 14997                           	psect	text78
 14998  003700                     __ptext78:
 14999                           	opt stack 0
 15000  003700                     _INTERRUPT_Initialize:
 15001                           	opt stack 24
 15002                           
 15003                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
 15004                           
 15005                           ;incstack = 0
 15006  003700  9ED0               	bcf	4048,7,c	;volatile
 15007  003702  0012               	return		;funcret
 15008  003704                     __end_of_INTERRUPT_Initialize:
 15009                           	opt stack 0
 15010                           tblptru	equ	0xFF8
 15011                           tblptrh	equ	0xFF7
 15012                           tblptrl	equ	0xFF6
 15013                           tablat	equ	0xFF5
 15014                           prodh	equ	0xFF4
 15015                           prodl	equ	0xFF3
 15016                           intcon	equ	0xFF2
 15017                           intcon2	equ	0xFF1
 15018                           indf0	equ	0xFEF
 15019                           postinc0	equ	0xFEE
 15020                           fsr0h	equ	0xFEA
 15021                           fsr0l	equ	0xFE9
 15022                           wreg	equ	0xFE8
 15023                           indf1	equ	0xFE7
 15024                           postinc1	equ	0xFE6
 15025                           postdec1	equ	0xFE5
 15026                           fsr1h	equ	0xFE2
 15027                           fsr1l	equ	0xFE1
 15028                           indf2	equ	0xFDF
 15029                           postinc2	equ	0xFDE
 15030                           postdec2	equ	0xFDD
 15031                           fsr2h	equ	0xFDA
 15032                           fsr2l	equ	0xFD9
 15033                           status	equ	0xFD8
 15034                           
 15035 ;; *************** function _EUSART1_Initialize *****************
 15036 ;; Defined at:
 15037 ;;		line 75 in file "mcc_generated_files/eusart1.c"
 15038 ;; Parameters:    Size  Location     Type
 15039 ;;		None
 15040 ;; Auto vars:     Size  Location     Type
 15041 ;;		None
 15042 ;; Return value:  Size  Location     Type
 15043 ;;                  1    wreg      void 
 15044 ;; Registers used:
 15045 ;;		wreg, status,2
 15046 ;; Tracked objects:
 15047 ;;		On entry : 0/0
 15048 ;;		On exit  : 0/0
 15049 ;;		Unchanged: 0/0
 15050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15055 ;;Total ram usage:        0 bytes
 15056 ;; Hardware stack levels used:    1
 15057 ;; Hardware stack levels required when called:    5
 15058 ;; This function calls:
 15059 ;;		Nothing
 15060 ;; This function is called by:
 15061 ;;		_SYSTEM_Initialize
 15062 ;; This function uses a non-reentrant model
 15063 ;;
 15064                           
 15065                           	psect	text79
 15066  00330A                     __ptext79:
 15067                           	opt stack 0
 15068  00330A                     _EUSART1_Initialize:
 15069                           	opt stack 24
 15070                           
 15071                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
 15072                           
 15073                           ;incstack = 0
 15074  00330A  9A9D               	bcf	3997,5,c	;volatile
 15075                           
 15076                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
 15077  00330C  989D               	bcf	3997,4,c	;volatile
 15078                           
 15079                           ;eusart1.c: 84: BAUDCON1 = 0x08;
 15080  00330E  0E08               	movlw	8
 15081  003310  6EB8               	movwf	4024,c	;volatile
 15082                           
 15083                           ;eusart1.c: 87: RCSTA1 = 0x90;
 15084  003312  0E90               	movlw	144
 15085  003314  6EAB               	movwf	4011,c	;volatile
 15086                           
 15087                           ;eusart1.c: 90: TXSTA1 = 0x24;
 15088  003316  0E24               	movlw	36
 15089  003318  6EAC               	movwf	4012,c	;volatile
 15090                           
 15091                           ;eusart1.c: 93: SPBRG1 = 0xA0;
 15092  00331A  0EA0               	movlw	160
 15093  00331C  6EAF               	movwf	4015,c	;volatile
 15094                           
 15095                           ;eusart1.c: 96: SPBRGH1 = 0x01;
 15096  00331E  0E01               	movlw	1
 15097  003320  6EB0               	movwf	4016,c	;volatile
 15098                           
 15099                           ;eusart1.c: 100: eusart1TxHead = 0;
 15100  003322  0E00               	movlw	0
 15101  003324  6E43               	movwf	_eusart1TxHead,c	;volatile
 15102                           
 15103                           ;eusart1.c: 101: eusart1TxTail = 0;
 15104  003326  0E00               	movlw	0
 15105  003328  6E42               	movwf	_eusart1TxTail,c	;volatile
 15106                           
 15107                           ;eusart1.c: 102: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 15108  00332A  0E08               	movlw	8
 15109  00332C  0100               	movlb	0	; () banked
 15110  00332E  6FFC               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15111                           
 15112                           ;eusart1.c: 104: eusart1RxHead = 0;
 15113  003330  0E00               	movlw	0
 15114  003332  6E41               	movwf	_eusart1RxHead,c	;volatile
 15115                           
 15116                           ;eusart1.c: 105: eusart1RxTail = 0;
 15117  003334  0E00               	movlw	0
 15118  003336  6E40               	movwf	_eusart1RxTail,c	;volatile
 15119                           
 15120                           ;eusart1.c: 106: eusart1RxCount = 0;
 15121  003338  0E00               	movlw	0
 15122  00333A  6E3F               	movwf	_eusart1RxCount,c	;volatile
 15123                           
 15124                           ; BSR set to: 0
 15125                           ;eusart1.c: 109: PIE1bits.RC1IE = 1;
 15126  00333C  8A9D               	bsf	3997,5,c	;volatile
 15127                           
 15128                           ; BSR set to: 0
 15129  00333E  0012               	return		;funcret
 15130  003340                     __end_of_EUSART1_Initialize:
 15131                           	opt stack 0
 15132                           tblptru	equ	0xFF8
 15133                           tblptrh	equ	0xFF7
 15134                           tblptrl	equ	0xFF6
 15135                           tablat	equ	0xFF5
 15136                           prodh	equ	0xFF4
 15137                           prodl	equ	0xFF3
 15138                           intcon	equ	0xFF2
 15139                           intcon2	equ	0xFF1
 15140                           indf0	equ	0xFEF
 15141                           postinc0	equ	0xFEE
 15142                           fsr0h	equ	0xFEA
 15143                           fsr0l	equ	0xFE9
 15144                           wreg	equ	0xFE8
 15145                           indf1	equ	0xFE7
 15146                           postinc1	equ	0xFE6
 15147                           postdec1	equ	0xFE5
 15148                           fsr1h	equ	0xFE2
 15149                           fsr1l	equ	0xFE1
 15150                           indf2	equ	0xFDF
 15151                           postinc2	equ	0xFDE
 15152                           postdec2	equ	0xFDD
 15153                           fsr2h	equ	0xFDA
 15154                           fsr2l	equ	0xFD9
 15155                           status	equ	0xFD8
 15156                           
 15157 ;; *************** function _INTERRUPT_InterruptManager *****************
 15158 ;; Defined at:
 15159 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 15160 ;; Parameters:    Size  Location     Type
 15161 ;;		None
 15162 ;; Auto vars:     Size  Location     Type
 15163 ;;		None
 15164 ;; Return value:  Size  Location     Type
 15165 ;;                  1    wreg      void 
 15166 ;; Registers used:
 15167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 15168 ;; Tracked objects:
 15169 ;;		On entry : 0/0
 15170 ;;		On exit  : 0/0
 15171 ;;		Unchanged: 0/0
 15172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15175 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15176 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15177 ;;Total ram usage:       18 bytes
 15178 ;; Hardware stack levels used:    1
 15179 ;; Hardware stack levels required when called:    4
 15180 ;; This function calls:
 15181 ;;		_EUSART1_Receive_ISR
 15182 ;;		_EUSART1_Transmit_ISR
 15183 ;;		_TMR0_ISR
 15184 ;; This function is called by:
 15185 ;;		Interrupt level 2
 15186 ;; This function uses a non-reentrant model
 15187 ;;
 15188                           
 15189                           	psect	intcode
 15190  000008                     __pintcode:
 15191                           	opt stack 0
 15192  000008                     _INTERRUPT_InterruptManager:
 15193                           	opt stack 17
 15194                           
 15195                           ; BSR set to: 0
 15196                           ;incstack = 0
 15197  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15198  00000A  CFFA F002          	movff	pclath,??_INTERRUPT_InterruptManager
 15199  00000E  CFFB F003          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 15200  000012  CFE9 F004          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 15201  000016  CFEA F005          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 15202  00001A  CFE1 F006          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 15203  00001E  CFE2 F007          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 15204  000022  CFD9 F008          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 15205  000026  CFDA F009          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 15206  00002A  CFF3 F00A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 15207  00002E  CFF4 F00B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 15208  000032  CFF6 F00C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 15209  000036  CFF7 F00D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 15210  00003A  CFF8 F00E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 15211  00003E  CFF5 F00F          	movff	tablat,??_INTERRUPT_InterruptManager+13
 15212  000042  C04C  F010         	movff	btemp,??_INTERRUPT_InterruptManager+14
 15213  000046  C04D  F011         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 15214  00004A  C04E  F012         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 15215  00004E  C04F  F013         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 15216                           
 15217                           ;interrupt_manager.c: 60: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 15218  000052  BAF2               	btfsc	intcon,5,c	;volatile
 15219  000054  A4F2               	btfss	intcon,2,c	;volatile
 15220  000056  D003               	goto	i2l62
 15221                           
 15222                           ;interrupt_manager.c: 61: {
 15223                           ;interrupt_manager.c: 62: TMR0_ISR();
 15224  000058  EC13  F01B         	call	_TMR0_ISR	;wreg free
 15225                           
 15226                           ;interrupt_manager.c: 63: }
 15227  00005C  D00E               	goto	i2l66
 15228  00005E                     i2l62:
 15229                           
 15230                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 15231  00005E  BCF2               	btfsc	intcon,6,c	;volatile
 15232  000060  A89D               	btfss	3997,4,c	;volatile
 15233  000062  D005               	goto	i2l64
 15234  000064  A89E               	btfss	3998,4,c	;volatile
 15235  000066  D003               	goto	i2l64
 15236                           
 15237                           ;interrupt_manager.c: 65: {
 15238                           ;interrupt_manager.c: 66: EUSART1_Transmit_ISR();
 15239  000068  ECBA  F019         	call	_EUSART1_Transmit_ISR	;wreg free
 15240                           
 15241                           ;interrupt_manager.c: 67: }
 15242  00006C  D006               	goto	i2l66
 15243  00006E                     i2l64:
 15244                           
 15245                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 15246  00006E  BCF2               	btfsc	intcon,6,c	;volatile
 15247  000070  AA9D               	btfss	3997,5,c	;volatile
 15248  000072  D003               	goto	i2l66
 15249  000074  BA9E               	btfsc	3998,5,c	;volatile
 15250                           
 15251                           ;interrupt_manager.c: 69: {
 15252                           ;interrupt_manager.c: 70: EUSART1_Receive_ISR();
 15253  000076  EC16  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 15254  00007A                     i2l66:
 15255                           
 15256                           ;interrupt_manager.c: 72: else
 15257                           ;interrupt_manager.c: 73: {
 15258  00007A  C013  F04F         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 15259  00007E  C012  F04E         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 15260  000082  C011  F04D         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 15261  000086  C010  F04C         	movff	??_INTERRUPT_InterruptManager+14,btemp
 15262  00008A  C00F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 15263  00008E  C00E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 15264  000092  C00D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 15265  000096  C00C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 15266  00009A  C00B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 15267  00009E  C00A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 15268  0000A2  C009  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 15269  0000A6  C008  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 15270  0000AA  C007  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 15271  0000AE  C006  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 15272  0000B2  C005  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 15273  0000B6  C004  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 15274  0000BA  C003  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 15275  0000BE  C002  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 15276  0000C2  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15277  0000C4  0011               	retfie		f
 15278  0000C6                     __end_of_INTERRUPT_InterruptManager:
 15279                           	opt stack 0
 15280                           pclatu	equ	0xFFB
 15281                           pclath	equ	0xFFA
 15282                           tblptru	equ	0xFF8
 15283                           tblptrh	equ	0xFF7
 15284                           tblptrl	equ	0xFF6
 15285                           tablat	equ	0xFF5
 15286                           prodh	equ	0xFF4
 15287                           prodl	equ	0xFF3
 15288                           intcon	equ	0xFF2
 15289                           intcon2	equ	0xFF1
 15290                           indf0	equ	0xFEF
 15291                           postinc0	equ	0xFEE
 15292                           fsr0h	equ	0xFEA
 15293                           fsr0l	equ	0xFE9
 15294                           wreg	equ	0xFE8
 15295                           indf1	equ	0xFE7
 15296                           postinc1	equ	0xFE6
 15297                           postdec1	equ	0xFE5
 15298                           fsr1h	equ	0xFE2
 15299                           fsr1l	equ	0xFE1
 15300                           indf2	equ	0xFDF
 15301                           postinc2	equ	0xFDE
 15302                           postdec2	equ	0xFDD
 15303                           fsr2h	equ	0xFDA
 15304                           fsr2l	equ	0xFD9
 15305                           status	equ	0xFD8
 15306                           
 15307 ;; *************** function _TMR0_ISR *****************
 15308 ;; Defined at:
 15309 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 15310 ;; Parameters:    Size  Location     Type
 15311 ;;		None
 15312 ;; Auto vars:     Size  Location     Type
 15313 ;;		None
 15314 ;; Return value:  Size  Location     Type
 15315 ;;                  1    wreg      void 
 15316 ;; Registers used:
 15317 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 15318 ;; Tracked objects:
 15319 ;;		On entry : 0/0
 15320 ;;		On exit  : 0/0
 15321 ;;		Unchanged: 0/0
 15322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15327 ;;Total ram usage:        0 bytes
 15328 ;; Hardware stack levels used:    1
 15329 ;; Hardware stack levels required when called:    3
 15330 ;; This function calls:
 15331 ;;		_TMR0_CallBack
 15332 ;; This function is called by:
 15333 ;;		_INTERRUPT_InterruptManager
 15334 ;; This function uses a non-reentrant model
 15335 ;;
 15336                           
 15337                           	psect	text81
 15338  003626                     __ptext81:
 15339                           	opt stack 0
 15340  003626                     _TMR0_ISR:
 15341                           	opt stack 17
 15342                           
 15343                           ;tmr0.c: 138: INTCONbits.TMR0IF = 0;
 15344                           
 15345                           ;incstack = 0
 15346  003626  94F2               	bcf	intcon,2,c	;volatile
 15347                           
 15348                           ;tmr0.c: 142: TMR0H = timer0ReloadVal >> 8;
 15349  003628  504A               	movf	_timer0ReloadVal+1,w,c	;volatile
 15350  00362A  6ED7               	movwf	4055,c	;volatile
 15351                           
 15352                           ;tmr0.c: 143: TMR0L = (uint8_t) timer0ReloadVal;
 15353  00362C  C049  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 15354                           
 15355                           ;tmr0.c: 147: TMR0_CallBack();
 15356  003630  EC85  F01A         	call	_TMR0_CallBack	;wreg free
 15357  003634  0012               	return		;funcret
 15358  003636                     __end_of_TMR0_ISR:
 15359                           	opt stack 0
 15360                           pclatu	equ	0xFFB
 15361                           pclath	equ	0xFFA
 15362                           tblptru	equ	0xFF8
 15363                           tblptrh	equ	0xFF7
 15364                           tblptrl	equ	0xFF6
 15365                           tablat	equ	0xFF5
 15366                           prodh	equ	0xFF4
 15367                           prodl	equ	0xFF3
 15368                           intcon	equ	0xFF2
 15369                           intcon2	equ	0xFF1
 15370                           indf0	equ	0xFEF
 15371                           postinc0	equ	0xFEE
 15372                           fsr0h	equ	0xFEA
 15373                           fsr0l	equ	0xFE9
 15374                           wreg	equ	0xFE8
 15375                           indf1	equ	0xFE7
 15376                           postinc1	equ	0xFE6
 15377                           postdec1	equ	0xFE5
 15378                           fsr1h	equ	0xFE2
 15379                           fsr1l	equ	0xFE1
 15380                           indf2	equ	0xFDF
 15381                           postinc2	equ	0xFDE
 15382                           postdec2	equ	0xFDD
 15383                           fsr2h	equ	0xFDA
 15384                           fsr2l	equ	0xFD9
 15385                           status	equ	0xFD8
 15386                           
 15387 ;; *************** function _TMR0_CallBack *****************
 15388 ;; Defined at:
 15389 ;;		line 152 in file "mcc_generated_files/tmr0.c"
 15390 ;; Parameters:    Size  Location     Type
 15391 ;;		None
 15392 ;; Auto vars:     Size  Location     Type
 15393 ;;		None
 15394 ;; Return value:  Size  Location     Type
 15395 ;;                  1    wreg      void 
 15396 ;; Registers used:
 15397 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 15398 ;; Tracked objects:
 15399 ;;		On entry : 0/0
 15400 ;;		On exit  : 0/0
 15401 ;;		Unchanged: 0/0
 15402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15407 ;;Total ram usage:        0 bytes
 15408 ;; Hardware stack levels used:    1
 15409 ;; Hardware stack levels required when called:    2
 15410 ;; This function calls:
 15411 ;;		Absolute function
 15412 ;;		_TMR0_DefaultInterruptHandler
 15413 ;;		_make_array
 15414 ;; This function is called by:
 15415 ;;		_TMR0_ISR
 15416 ;; This function uses a non-reentrant model
 15417 ;;
 15418                           
 15419                           	psect	text82
 15420  00350A                     __ptext82:
 15421                           	opt stack 0
 15422  00350A                     _TMR0_CallBack:
 15423                           	opt stack 17
 15424                           
 15425                           ;tmr0.c: 156: if(TMR0_InterruptHandler)
 15426                           
 15427                           ;incstack = 0
 15428  00350A  0100               	movlb	0	; () banked
 15429  00350C  51F6               	movf	_TMR0_InterruptHandler& (0+255),w,b
 15430  00350E  11F7               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 15431  003510  B4D8               	btfsc	status,2,c
 15432  003512  0012               	return	
 15433                           
 15434                           ; BSR set to: 0
 15435                           ;tmr0.c: 157: {
 15436                           ;tmr0.c: 158: TMR0_InterruptHandler();
 15437  003514  D801               	call	i2u404_48
 15438  003516  0012               	return	
 15439  003518                     i2u404_48:
 15440  003518  0005               	push	
 15441  00351A  6EFA               	movwf	pclath,c
 15442  00351C  51F6               	movf	_TMR0_InterruptHandler& (0+255),w,b
 15443  00351E  6EFD               	movwf	tosl,c
 15444  003520  51F7               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 15445  003522  6EFE               	movwf	tosh,c
 15446  003524  6AFF               	clrf	tosu,c
 15447  003526  50FA               	movf	pclath,w,c
 15448  003528  0012               	return		;indir
 15449  00352A                     __end_of_TMR0_CallBack:
 15450                           	opt stack 0
 15451                           tosu	equ	0xFFF
 15452                           tosh	equ	0xFFE
 15453                           tosl	equ	0xFFD
 15454                           pclatu	equ	0xFFB
 15455                           pclath	equ	0xFFA
 15456                           tblptru	equ	0xFF8
 15457                           tblptrh	equ	0xFF7
 15458                           tblptrl	equ	0xFF6
 15459                           tablat	equ	0xFF5
 15460                           prodh	equ	0xFF4
 15461                           prodl	equ	0xFF3
 15462                           intcon	equ	0xFF2
 15463                           intcon2	equ	0xFF1
 15464                           indf0	equ	0xFEF
 15465                           postinc0	equ	0xFEE
 15466                           fsr0h	equ	0xFEA
 15467                           fsr0l	equ	0xFE9
 15468                           wreg	equ	0xFE8
 15469                           indf1	equ	0xFE7
 15470                           postinc1	equ	0xFE6
 15471                           postdec1	equ	0xFE5
 15472                           fsr1h	equ	0xFE2
 15473                           fsr1l	equ	0xFE1
 15474                           indf2	equ	0xFDF
 15475                           postinc2	equ	0xFDE
 15476                           postdec2	equ	0xFDD
 15477                           fsr2h	equ	0xFDA
 15478                           fsr2l	equ	0xFD9
 15479                           status	equ	0xFD8
 15480                           
 15481 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 15482 ;; Defined at:
 15483 ;;		line 166 in file "mcc_generated_files/tmr0.c"
 15484 ;; Parameters:    Size  Location     Type
 15485 ;;		None
 15486 ;; Auto vars:     Size  Location     Type
 15487 ;;		None
 15488 ;; Return value:  Size  Location     Type
 15489 ;;                  1    wreg      void 
 15490 ;; Registers used:
 15491 ;;		None
 15492 ;; Tracked objects:
 15493 ;;		On entry : 0/0
 15494 ;;		On exit  : 0/0
 15495 ;;		Unchanged: 0/0
 15496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15501 ;;Total ram usage:        0 bytes
 15502 ;; Hardware stack levels used:    1
 15503 ;; This function calls:
 15504 ;;		Nothing
 15505 ;; This function is called by:
 15506 ;;		_TMR0_Initialize
 15507 ;;		_TMR0_CallBack
 15508 ;; This function uses a non-reentrant model
 15509 ;;
 15510                           
 15511                           	psect	text83
 15512  003704                     __ptext83:
 15513                           	opt stack 0
 15514  003704                     _TMR0_DefaultInterruptHandler:
 15515                           	opt stack 18
 15516                           
 15517                           ;incstack = 0
 15518  003704  0012               	return		;funcret
 15519  003706                     __end_of_TMR0_DefaultInterruptHandler:
 15520                           	opt stack 0
 15521                           tosu	equ	0xFFF
 15522                           tosh	equ	0xFFE
 15523                           tosl	equ	0xFFD
 15524                           pclatu	equ	0xFFB
 15525                           pclath	equ	0xFFA
 15526                           tblptru	equ	0xFF8
 15527                           tblptrh	equ	0xFF7
 15528                           tblptrl	equ	0xFF6
 15529                           tablat	equ	0xFF5
 15530                           prodh	equ	0xFF4
 15531                           prodl	equ	0xFF3
 15532                           intcon	equ	0xFF2
 15533                           intcon2	equ	0xFF1
 15534                           indf0	equ	0xFEF
 15535                           postinc0	equ	0xFEE
 15536                           fsr0h	equ	0xFEA
 15537                           fsr0l	equ	0xFE9
 15538                           wreg	equ	0xFE8
 15539                           indf1	equ	0xFE7
 15540                           postinc1	equ	0xFE6
 15541                           postdec1	equ	0xFE5
 15542                           fsr1h	equ	0xFE2
 15543                           fsr1l	equ	0xFE1
 15544                           indf2	equ	0xFDF
 15545                           postinc2	equ	0xFDE
 15546                           postdec2	equ	0xFDD
 15547                           fsr2h	equ	0xFDA
 15548                           fsr2l	equ	0xFD9
 15549                           status	equ	0xFD8
 15550                           
 15551 ;; *************** function _make_array *****************
 15552 ;; Defined at:
 15553 ;;		line 59 in file "main.c"
 15554 ;; Parameters:    Size  Location     Type
 15555 ;;		None
 15556 ;; Auto vars:     Size  Location     Type
 15557 ;;		None
 15558 ;; Return value:  Size  Location     Type
 15559 ;;                  1    wreg      void 
 15560 ;; Registers used:
 15561 ;;		wreg, status,2, status,0, cstack
 15562 ;; Tracked objects:
 15563 ;;		On entry : 0/0
 15564 ;;		On exit  : 0/0
 15565 ;;		Unchanged: 0/0
 15566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15571 ;;Total ram usage:        0 bytes
 15572 ;; Hardware stack levels used:    1
 15573 ;; Hardware stack levels required when called:    1
 15574 ;; This function calls:
 15575 ;;		_heart_beat
 15576 ;; This function is called by:
 15577 ;;		_main
 15578 ;;		_TMR0_CallBack
 15579 ;; This function uses a non-reentrant model
 15580 ;;
 15581                           
 15582                           	psect	text84
 15583  0036A2                     __ptext84:
 15584                           	opt stack 0
 15585  0036A2                     _make_array:
 15586                           	opt stack 17
 15587                           
 15588                           ;main.c: 61: static char i=0;
 15589                           ;main.c: 62: heart_beat();
 15590                           
 15591                           ;incstack = 0
 15592  0036A2  ECC2  F01A         	call	_heart_beat	;wreg free
 15593                           
 15594                           ;main.c: 65: display = 1;
 15595  0036A6  0E01               	movlw	1
 15596  0036A8  0100               	movlb	0	; () banked
 15597  0036AA  6F7D               	movwf	_display& (0+255),b
 15598                           
 15599                           ; BSR set to: 0
 15600  0036AC  0012               	return		;funcret
 15601  0036AE                     __end_of_make_array:
 15602                           	opt stack 0
 15603                           tosu	equ	0xFFF
 15604                           tosh	equ	0xFFE
 15605                           tosl	equ	0xFFD
 15606                           pclatu	equ	0xFFB
 15607                           pclath	equ	0xFFA
 15608                           tblptru	equ	0xFF8
 15609                           tblptrh	equ	0xFF7
 15610                           tblptrl	equ	0xFF6
 15611                           tablat	equ	0xFF5
 15612                           prodh	equ	0xFF4
 15613                           prodl	equ	0xFF3
 15614                           intcon	equ	0xFF2
 15615                           intcon2	equ	0xFF1
 15616                           indf0	equ	0xFEF
 15617                           postinc0	equ	0xFEE
 15618                           fsr0h	equ	0xFEA
 15619                           fsr0l	equ	0xFE9
 15620                           wreg	equ	0xFE8
 15621                           indf1	equ	0xFE7
 15622                           postinc1	equ	0xFE6
 15623                           postdec1	equ	0xFE5
 15624                           fsr1h	equ	0xFE2
 15625                           fsr1l	equ	0xFE1
 15626                           indf2	equ	0xFDF
 15627                           postinc2	equ	0xFDE
 15628                           postdec2	equ	0xFDD
 15629                           fsr2h	equ	0xFDA
 15630                           fsr2l	equ	0xFD9
 15631                           status	equ	0xFD8
 15632                           
 15633 ;; *************** function _heart_beat *****************
 15634 ;; Defined at:
 15635 ;;		line 54 in file "main.c"
 15636 ;; Parameters:    Size  Location     Type
 15637 ;;		None
 15638 ;; Auto vars:     Size  Location     Type
 15639 ;;		None
 15640 ;; Return value:  Size  Location     Type
 15641 ;;                  1    wreg      void 
 15642 ;; Registers used:
 15643 ;;		wreg, status,2, status,0
 15644 ;; Tracked objects:
 15645 ;;		On entry : 0/0
 15646 ;;		On exit  : 0/0
 15647 ;;		Unchanged: 0/0
 15648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15651 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15652 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15653 ;;Total ram usage:        1 bytes
 15654 ;; Hardware stack levels used:    1
 15655 ;; This function calls:
 15656 ;;		Nothing
 15657 ;; This function is called by:
 15658 ;;		_make_array
 15659 ;; This function uses a non-reentrant model
 15660 ;;
 15661                           
 15662                           	psect	text85
 15663  003584                     __ptext85:
 15664                           	opt stack 0
 15665  003584                     _heart_beat:
 15666                           	opt stack 17
 15667                           
 15668                           ; BSR set to: 0
 15669                           ;incstack = 0
 15670                           ;main.c: 56: do { LATEbits.LATE2 = ~LATEbits.LATE2; } while(0);
 15671  003584  A48D               	btfss	3981,2,c	;volatile
 15672  003586  D002               	goto	i2u352_40
 15673  003588  0E01               	movlw	1
 15674  00358A  D001               	goto	i2u352_46
 15675  00358C                     i2u352_40:
 15676  00358C  0E00               	movlw	0
 15677  00358E                     i2u352_46:
 15678  00358E  0AFF               	xorlw	255
 15679  003590  6E01               	movwf	??_heart_beat& (0+255),c
 15680  003592  4601               	rlncf	??_heart_beat,f,c
 15681  003594  4601               	rlncf	??_heart_beat,f,c
 15682  003596  508D               	movf	3981,w,c	;volatile
 15683  003598  1801               	xorwf	??_heart_beat,w,c
 15684  00359A  0BFB               	andlw	-5
 15685  00359C  1801               	xorwf	??_heart_beat,w,c
 15686  00359E  6E8D               	movwf	3981,c	;volatile
 15687  0035A0  0012               	return	
 15688  0035A2                     __end_of_heart_beat:
 15689                           	opt stack 0
 15690                           tosu	equ	0xFFF
 15691                           tosh	equ	0xFFE
 15692                           tosl	equ	0xFFD
 15693                           pclatu	equ	0xFFB
 15694                           pclath	equ	0xFFA
 15695                           tblptru	equ	0xFF8
 15696                           tblptrh	equ	0xFF7
 15697                           tblptrl	equ	0xFF6
 15698                           tablat	equ	0xFF5
 15699                           prodh	equ	0xFF4
 15700                           prodl	equ	0xFF3
 15701                           intcon	equ	0xFF2
 15702                           intcon2	equ	0xFF1
 15703                           indf0	equ	0xFEF
 15704                           postinc0	equ	0xFEE
 15705                           fsr0h	equ	0xFEA
 15706                           fsr0l	equ	0xFE9
 15707                           wreg	equ	0xFE8
 15708                           indf1	equ	0xFE7
 15709                           postinc1	equ	0xFE6
 15710                           postdec1	equ	0xFE5
 15711                           fsr1h	equ	0xFE2
 15712                           fsr1l	equ	0xFE1
 15713                           indf2	equ	0xFDF
 15714                           postinc2	equ	0xFDE
 15715                           postdec2	equ	0xFDD
 15716                           fsr2h	equ	0xFDA
 15717                           fsr2l	equ	0xFD9
 15718                           status	equ	0xFD8
 15719                           
 15720 ;; *************** function _EUSART1_Transmit_ISR *****************
 15721 ;; Defined at:
 15722 ;;		line 165 in file "mcc_generated_files/eusart1.c"
 15723 ;; Parameters:    Size  Location     Type
 15724 ;;		None
 15725 ;; Auto vars:     Size  Location     Type
 15726 ;;		None
 15727 ;; Return value:  Size  Location     Type
 15728 ;;                  1    wreg      void 
 15729 ;; Registers used:
 15730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15731 ;; Tracked objects:
 15732 ;;		On entry : 0/0
 15733 ;;		On exit  : 0/0
 15734 ;;		Unchanged: 0/0
 15735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15740 ;;Total ram usage:        0 bytes
 15741 ;; Hardware stack levels used:    1
 15742 ;; This function calls:
 15743 ;;		Nothing
 15744 ;; This function is called by:
 15745 ;;		_INTERRUPT_InterruptManager
 15746 ;; This function uses a non-reentrant model
 15747 ;;
 15748                           
 15749                           	psect	text86
 15750  003374                     __ptext86:
 15751                           	opt stack 0
 15752  003374                     _EUSART1_Transmit_ISR:
 15753                           	opt stack 20
 15754                           
 15755                           ;eusart1.c: 169: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 15756                           
 15757                           ;incstack = 0
 15758  003374  0E08               	movlw	8
 15759  003376  0100               	movlb	0	; () banked
 15760  003378  61FC               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15761  00337A  D012               	goto	i2l207
 15762                           
 15763                           ; BSR set to: 0
 15764                           ;eusart1.c: 170: {
 15765                           ;eusart1.c: 171: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 15766  00337C  5042               	movf	_eusart1TxTail,w,c	;volatile
 15767  00337E  0D01               	mullw	1
 15768  003380  0E68               	movlw	low _eusart1TxBuffer
 15769  003382  24F3               	addwf	prodl,w,c
 15770  003384  6ED9               	movwf	fsr2l,c
 15771  003386  0E00               	movlw	high _eusart1TxBuffer
 15772  003388  20F4               	addwfc	prodh,w,c
 15773  00338A  6EDA               	movwf	fsr2h,c
 15774  00338C  50DF               	movf	indf2,w,c
 15775  00338E  6EAD               	movwf	4013,c	;volatile
 15776                           
 15777                           ; BSR set to: 0
 15778  003390  2A42               	incf	_eusart1TxTail,f,c	;volatile
 15779                           
 15780                           ; BSR set to: 0
 15781                           ;eusart1.c: 172: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 15782  003392  0E07               	movlw	7
 15783  003394  6442               	cpfsgt	_eusart1TxTail,c	;volatile
 15784  003396  D002               	goto	i2l208
 15785                           
 15786                           ; BSR set to: 0
 15787                           ;eusart1.c: 173: {
 15788                           ;eusart1.c: 174: eusart1TxTail = 0;
 15789  003398  0E00               	movlw	0
 15790  00339A  6E42               	movwf	_eusart1TxTail,c	;volatile
 15791  00339C                     i2l208:
 15792                           
 15793                           ; BSR set to: 0
 15794                           ;eusart1.c: 175: }
 15795                           ;eusart1.c: 176: eusart1TxBufferRemaining++;
 15796                           
 15797                           ; BSR set to: 0
 15798  00339C  2BFC               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 15799                           
 15800                           ;eusart1.c: 177: }
 15801  00339E  0012               	return	
 15802  0033A0                     i2l207:
 15803                           
 15804                           ; BSR set to: 0
 15805                           ;eusart1.c: 178: else
 15806                           ;eusart1.c: 179: {
 15807                           ;eusart1.c: 180: PIE1bits.TX1IE = 0;
 15808  0033A0  989D               	bcf	3997,4,c	;volatile
 15809  0033A2  0012               	return	
 15810  0033A4                     __end_of_EUSART1_Transmit_ISR:
 15811                           	opt stack 0
 15812                           tosu	equ	0xFFF
 15813                           tosh	equ	0xFFE
 15814                           tosl	equ	0xFFD
 15815                           pclatu	equ	0xFFB
 15816                           pclath	equ	0xFFA
 15817                           tblptru	equ	0xFF8
 15818                           tblptrh	equ	0xFF7
 15819                           tblptrl	equ	0xFF6
 15820                           tablat	equ	0xFF5
 15821                           prodh	equ	0xFF4
 15822                           prodl	equ	0xFF3
 15823                           intcon	equ	0xFF2
 15824                           intcon2	equ	0xFF1
 15825                           indf0	equ	0xFEF
 15826                           postinc0	equ	0xFEE
 15827                           fsr0h	equ	0xFEA
 15828                           fsr0l	equ	0xFE9
 15829                           wreg	equ	0xFE8
 15830                           indf1	equ	0xFE7
 15831                           postinc1	equ	0xFE6
 15832                           postdec1	equ	0xFE5
 15833                           fsr1h	equ	0xFE2
 15834                           fsr1l	equ	0xFE1
 15835                           indf2	equ	0xFDF
 15836                           postinc2	equ	0xFDE
 15837                           postdec2	equ	0xFDD
 15838                           fsr2h	equ	0xFDA
 15839                           fsr2l	equ	0xFD9
 15840                           status	equ	0xFD8
 15841                           
 15842 ;; *************** function _EUSART1_Receive_ISR *****************
 15843 ;; Defined at:
 15844 ;;		line 184 in file "mcc_generated_files/eusart1.c"
 15845 ;; Parameters:    Size  Location     Type
 15846 ;;		None
 15847 ;; Auto vars:     Size  Location     Type
 15848 ;;		None
 15849 ;; Return value:  Size  Location     Type
 15850 ;;                  1    wreg      void 
 15851 ;; Registers used:
 15852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15853 ;; Tracked objects:
 15854 ;;		On entry : 0/0
 15855 ;;		On exit  : 0/0
 15856 ;;		Unchanged: 0/0
 15857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15862 ;;Total ram usage:        0 bytes
 15863 ;; Hardware stack levels used:    1
 15864 ;; This function calls:
 15865 ;;		Nothing
 15866 ;; This function is called by:
 15867 ;;		_INTERRUPT_InterruptManager
 15868 ;; This function uses a non-reentrant model
 15869 ;;
 15870                           
 15871                           	psect	text87
 15872  00342C                     __ptext87:
 15873                           	opt stack 0
 15874  00342C                     _EUSART1_Receive_ISR:
 15875                           	opt stack 20
 15876                           
 15877                           ;eusart1.c: 187: if(1 == RCSTA1bits.OERR)
 15878                           
 15879                           ; BSR set to: 0
 15880                           ;incstack = 0
 15881  00342C  A2AB               	btfss	4011,1,c	;volatile
 15882  00342E  D002               	goto	i2l213
 15883                           
 15884                           ;eusart1.c: 188: {
 15885                           ;eusart1.c: 191: RCSTA1bits.CREN = 0;
 15886  003430  98AB               	bcf	4011,4,c	;volatile
 15887                           
 15888                           ;eusart1.c: 192: RCSTA1bits.CREN = 1;
 15889  003432  88AB               	bsf	4011,4,c	;volatile
 15890  003434                     i2l213:
 15891                           
 15892                           ;eusart1.c: 193: }
 15893                           ;eusart1.c: 196: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15894  003434  5041               	movf	_eusart1RxHead,w,c	;volatile
 15895  003436  0D01               	mullw	1
 15896  003438  0E60               	movlw	low _eusart1RxBuffer
 15897  00343A  24F3               	addwf	prodl,w,c
 15898  00343C  6ED9               	movwf	fsr2l,c
 15899  00343E  0E00               	movlw	high _eusart1RxBuffer
 15900  003440  20F4               	addwfc	prodh,w,c
 15901  003442  6EDA               	movwf	fsr2h,c
 15902  003444  CFAE FFDF          	movff	4014,indf2	;volatile
 15903  003448  2A41               	incf	_eusart1RxHead,f,c	;volatile
 15904                           
 15905                           ;eusart1.c: 197: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 15906  00344A  0E07               	movlw	7
 15907  00344C  6441               	cpfsgt	_eusart1RxHead,c	;volatile
 15908  00344E  D002               	goto	i2l214
 15909                           
 15910                           ;eusart1.c: 198: {
 15911                           ;eusart1.c: 199: eusart1RxHead = 0;
 15912  003450  0E00               	movlw	0
 15913  003452  6E41               	movwf	_eusart1RxHead,c	;volatile
 15914  003454                     i2l214:
 15915                           
 15916                           ;eusart1.c: 200: }
 15917                           ;eusart1.c: 201: eusart1RxCount++;
 15918  003454  2A3F               	incf	_eusart1RxCount,f,c	;volatile
 15919  003456  0012               	return		;funcret
 15920  003458                     __end_of_EUSART1_Receive_ISR:
 15921                           	opt stack 0
 15922                           tosu	equ	0xFFF
 15923                           tosh	equ	0xFFE
 15924                           tosl	equ	0xFFD
 15925                           pclatu	equ	0xFFB
 15926                           pclath	equ	0xFFA
 15927                           tblptru	equ	0xFF8
 15928                           tblptrh	equ	0xFF7
 15929                           tblptrl	equ	0xFF6
 15930                           tablat	equ	0xFF5
 15931                           prodh	equ	0xFF4
 15932                           prodl	equ	0xFF3
 15933                           intcon	equ	0xFF2
 15934                           intcon2	equ	0xFF1
 15935                           indf0	equ	0xFEF
 15936                           postinc0	equ	0xFEE
 15937                           fsr0h	equ	0xFEA
 15938                           fsr0l	equ	0xFE9
 15939                           wreg	equ	0xFE8
 15940                           indf1	equ	0xFE7
 15941                           postinc1	equ	0xFE6
 15942                           postdec1	equ	0xFE5
 15943                           fsr1h	equ	0xFE2
 15944                           fsr1l	equ	0xFE1
 15945                           indf2	equ	0xFDF
 15946                           postinc2	equ	0xFDE
 15947                           postdec2	equ	0xFDD
 15948                           fsr2h	equ	0xFDA
 15949                           fsr2l	equ	0xFD9
 15950                           status	equ	0xFD8
 15951                           tosu	equ	0xFFF
 15952                           tosh	equ	0xFFE
 15953                           tosl	equ	0xFFD
 15954                           pclatu	equ	0xFFB
 15955                           pclath	equ	0xFFA
 15956                           tblptru	equ	0xFF8
 15957                           tblptrh	equ	0xFF7
 15958                           tblptrl	equ	0xFF6
 15959                           tablat	equ	0xFF5
 15960                           prodh	equ	0xFF4
 15961                           prodl	equ	0xFF3
 15962                           intcon	equ	0xFF2
 15963                           intcon2	equ	0xFF1
 15964                           indf0	equ	0xFEF
 15965                           postinc0	equ	0xFEE
 15966                           fsr0h	equ	0xFEA
 15967                           fsr0l	equ	0xFE9
 15968                           wreg	equ	0xFE8
 15969                           indf1	equ	0xFE7
 15970                           postinc1	equ	0xFE6
 15971                           postdec1	equ	0xFE5
 15972                           fsr1h	equ	0xFE2
 15973                           fsr1l	equ	0xFE1
 15974                           indf2	equ	0xFDF
 15975                           postinc2	equ	0xFDE
 15976                           postdec2	equ	0xFDD
 15977                           fsr2h	equ	0xFDA
 15978                           fsr2l	equ	0xFD9
 15979                           status	equ	0xFD8
 15980                           
 15981                           	psect	text88
 15982  000000                     __ptext88:
 15983                           	opt stack 0
 15984                           tosu	equ	0xFFF
 15985                           tosh	equ	0xFFE
 15986                           tosl	equ	0xFFD
 15987                           pclatu	equ	0xFFB
 15988                           pclath	equ	0xFFA
 15989                           tblptru	equ	0xFF8
 15990                           tblptrh	equ	0xFF7
 15991                           tblptrl	equ	0xFF6
 15992                           tablat	equ	0xFF5
 15993                           prodh	equ	0xFF4
 15994                           prodl	equ	0xFF3
 15995                           intcon	equ	0xFF2
 15996                           intcon2	equ	0xFF1
 15997                           indf0	equ	0xFEF
 15998                           postinc0	equ	0xFEE
 15999                           fsr0h	equ	0xFEA
 16000                           fsr0l	equ	0xFE9
 16001                           wreg	equ	0xFE8
 16002                           indf1	equ	0xFE7
 16003                           postinc1	equ	0xFE6
 16004                           postdec1	equ	0xFE5
 16005                           fsr1h	equ	0xFE2
 16006                           fsr1l	equ	0xFE1
 16007                           indf2	equ	0xFDF
 16008                           postinc2	equ	0xFDE
 16009                           postdec2	equ	0xFDD
 16010                           fsr2h	equ	0xFDA
 16011                           fsr2l	equ	0xFD9
 16012                           status	equ	0xFD8
 16013                           
 16014                           	psect	rparam
 16015  0000                     tosu	equ	0xFFF
 16016                           tosh	equ	0xFFE
 16017                           tosl	equ	0xFFD
 16018                           pclatu	equ	0xFFB
 16019                           pclath	equ	0xFFA
 16020                           tblptru	equ	0xFF8
 16021                           tblptrh	equ	0xFF7
 16022                           tblptrl	equ	0xFF6
 16023                           tablat	equ	0xFF5
 16024                           prodh	equ	0xFF4
 16025                           prodl	equ	0xFF3
 16026                           intcon	equ	0xFF2
 16027                           intcon2	equ	0xFF1
 16028                           indf0	equ	0xFEF
 16029                           postinc0	equ	0xFEE
 16030                           fsr0h	equ	0xFEA
 16031                           fsr0l	equ	0xFE9
 16032                           wreg	equ	0xFE8
 16033                           indf1	equ	0xFE7
 16034                           postinc1	equ	0xFE6
 16035                           postdec1	equ	0xFE5
 16036                           fsr1h	equ	0xFE2
 16037                           fsr1l	equ	0xFE1
 16038                           indf2	equ	0xFDF
 16039                           postinc2	equ	0xFDE
 16040                           postdec2	equ	0xFDD
 16041                           fsr2h	equ	0xFDA
 16042                           fsr2l	equ	0xFD9
 16043                           status	equ	0xFD8
 16044                           
 16045                           	psect	temp
 16046  00004C                     btemp:
 16047                           	opt stack 0
 16048  00004C                     	ds	1
 16049  0000                     int$flags	set	btemp
 16050  0000                     wtemp6	set	btemp+1
 16051                           tosu	equ	0xFFF
 16052                           tosh	equ	0xFFE
 16053                           tosl	equ	0xFFD
 16054                           pclatu	equ	0xFFB
 16055                           pclath	equ	0xFFA
 16056                           tblptru	equ	0xFF8
 16057                           tblptrh	equ	0xFF7
 16058                           tblptrl	equ	0xFF6
 16059                           tablat	equ	0xFF5
 16060                           prodh	equ	0xFF4
 16061                           prodl	equ	0xFF3
 16062                           intcon	equ	0xFF2
 16063                           intcon2	equ	0xFF1
 16064                           indf0	equ	0xFEF
 16065                           postinc0	equ	0xFEE
 16066                           fsr0h	equ	0xFEA
 16067                           fsr0l	equ	0xFE9
 16068                           wreg	equ	0xFE8
 16069                           indf1	equ	0xFE7
 16070                           postinc1	equ	0xFE6
 16071                           postdec1	equ	0xFE5
 16072                           fsr1h	equ	0xFE2
 16073                           fsr1l	equ	0xFE1
 16074                           indf2	equ	0xFDF
 16075                           postinc2	equ	0xFDE
 16076                           postdec2	equ	0xFDD
 16077                           fsr2h	equ	0xFDA
 16078                           fsr2l	equ	0xFD9
 16079                           status	equ	0xFD8


Data Sizes:
    Strings     797
    Constant    10
    Data        18
    BSS         1528
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      75
    BANK0           160     31     157
    BANK1           256      0     160
    BANK2           256      0     150
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[7]), STR_80(CODE[7]), STR_79(CODE[7]), STR_76(CODE[7]), 
		 -> STR_74(CODE[7]), STR_72(CODE[7]), STR_70(CODE[7]), STR_68(CODE[2]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_54(CODE[7]), STR_50(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), 
		 -> STR_40(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_28(CODE[7]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[7]), STR_80(CODE[7]), STR_79(CODE[7]), STR_76(CODE[7]), 
		 -> STR_74(CODE[7]), STR_72(CODE[7]), STR_70(CODE[7]), STR_68(CODE[2]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_54(CODE[7]), STR_50(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), 
		 -> STR_40(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_28(CODE[7]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[7]), STR_80(CODE[7]), STR_79(CODE[7]), STR_76(CODE[7]), 
		 -> STR_74(CODE[7]), STR_72(CODE[7]), STR_70(CODE[7]), STR_68(CODE[2]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_54(CODE[7]), STR_50(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), 
		 -> STR_40(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), NULL(NULL[0]), 
		 -> STR_28(CODE[7]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[7]), STR_80(CODE[7]), STR_79(CODE[7]), STR_76(CODE[7]), 
		 -> STR_74(CODE[7]), STR_72(CODE[7]), STR_70(CODE[7]), STR_68(CODE[2]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_54(CODE[7]), STR_50(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), 
		 -> STR_40(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_28(CODE[7]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    cputs@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_130(CODE[12]), STR_129(CODE[12]), STR_84(CODE[5]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[7]), STR_80(CODE[7]), STR_79(CODE[7]), STR_76(CODE[7]), 
		 -> STR_74(CODE[7]), STR_72(CODE[7]), STR_70(CODE[7]), STR_68(CODE[2]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_54(CODE[7]), STR_50(CODE[7]), STR_47(CODE[7]), STR_43(CODE[2]), 
		 -> STR_40(CODE[7]), STR_36(CODE[7]), STR_34(CODE[7]), STR_28(CODE[7]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strncpy@from	PTR const unsigned char  size(2) Largest target is 1100
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1100]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 1100
		 -> uart_str(BANK2[150]), NULL(NULL[0]), clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1100]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 1100
		 -> uart_str(BANK2[150]), NULL(NULL[0]), clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1100]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), cmd_data.data(BANK0[40]), NULL(NULL[0]), cmd_data(BANK0[52]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 1100
		 -> CMD(BANK0[15]), cmd_data(BANK0[52]), clcd_display_string_details(BIGRAM[1100]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 1100
		 -> CMD(BANK0[15]), cmd_data(BANK0[52]), clcd_display_string_details(BIGRAM[1100]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_128(CODE[5]), STR_114(CODE[7]), STR_111(CODE[7]), STR_108(CODE[8]), 
		 -> STR_105(CODE[6]), STR_100(CODE[6]), STR_97(CODE[5]), STR_93(CODE[4]), 
		 -> STR_89(CODE[4]), STR_85(CODE[6]), STR_83(CODE[4]), STR_82(CODE[4]), 
		 -> STR_66(CODE[5]), STR_65(CODE[7]), STR_53(CODE[7]), STR_45(CODE[8]), 
		 -> STR_38(CODE[6]), STR_37(CODE[6]), STR_33(CODE[5]), STR_31(CODE[6]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), CMD(BANK0[15]), NULL(NULL[0]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_130(CODE[12]), STR_129(CODE[12]), STR_84(CODE[5]), 

    memset@p1	PTR void  size(2) Largest target is 1100
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[52]), conflict_arr(BANK1[40]), clcd_display_string_details(BIGRAM[1100]), lcd_display_array(BANK1[80]), 
		 -> clcd_config_data(COMRAM[5]), 

    memset@p	PTR unsigned char  size(2) Largest target is 1100
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[52]), conflict_arr(BANK1[40]), clcd_display_string_details(BIGRAM[1100]), lcd_display_array(BANK1[80]), 
		 -> clcd_config_data(COMRAM[5]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 1100
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1100]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 1100
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1100]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_133(CODE[18]), STR_131(CODE[5]), STR_127(CODE[3]), STR_126(CODE[3]), 
		 -> STR_125(CODE[3]), STR_123(CODE[7]), STR_121(CODE[7]), STR_119(CODE[7]), 
		 -> STR_117(CODE[13]), STR_115(CODE[5]), STR_112(CODE[13]), STR_109(CODE[13]), 
		 -> STR_106(CODE[13]), STR_103(CODE[13]), STR_102(CODE[5]), STR_101(CODE[11]), 
		 -> STR_98(CODE[13]), STR_95(CODE[13]), STR_94(CODE[5]), STR_91(CODE[13]), 
		 -> STR_90(CODE[5]), STR_87(CODE[13]), STR_86(CODE[5]), STR_78(CODE[25]), 
		 -> STR_77(CODE[11]), STR_75(CODE[25]), STR_73(CODE[27]), STR_71(CODE[27]), 
		 -> STR_69(CODE[10]), STR_67(CODE[9]), STR_64(CODE[25]), STR_63(CODE[11]), 
		 -> STR_61(CODE[25]), STR_59(CODE[27]), STR_57(CODE[27]), STR_55(CODE[12]), 
		 -> STR_52(CODE[14]), STR_51(CODE[9]), STR_49(CODE[11]), STR_48(CODE[9]), 
		 -> STR_46(CODE[9]), STR_44(CODE[11]), STR_42(CODE[11]), STR_41(CODE[12]), 
		 -> STR_39(CODE[12]), STR_35(CODE[7]), STR_32(CODE[8]), STR_27(CODE[8]), 
		 -> STR_26(CODE[12]), STR_25(CODE[12]), STR_24(CODE[18]), STR_23(CODE[19]), 
		 -> STR_22(CODE[17]), STR_21(CODE[12]), STR_20(CODE[12]), STR_19(CODE[16]), 
		 -> STR_18(CODE[16]), STR_17(CODE[19]), STR_16(CODE[3]), STR_15(CODE[5]), 
		 -> STR_14(CODE[16]), STR_13(CODE[39]), STR_12(CODE[39]), STR_11(CODE[26]), 
		 -> STR_10(CODE[26]), STR_9(CODE[26]), STR_8(CODE[26]), STR_7(CODE[26]), 
		 -> STR_6(CODE[26]), STR_4(CODE[17]), STR_3(CODE[18]), STR_2(CODE[9]), 
		 -> STR_1(CODE[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 150
		 -> STR_134(CODE[7]), STR_132(CODE[6]), uart_str(BANK2[150]), STR_124(CODE[15]), 
		 -> STR_122(CODE[12]), STR_120(CODE[12]), STR_118(CODE[7]), STR_116(CODE[6]), 
		 -> STR_113(CODE[7]), STR_110(CODE[8]), STR_107(CODE[6]), STR_104(CODE[6]), 
		 -> STR_99(CODE[5]), STR_96(CODE[4]), STR_92(CODE[4]), STR_88(CODE[6]), 
		 -> cmd_data.data(BANK0[40]), CMD(BANK0[15]), NULL(NULL[0]), cmd_data(BANK0[52]), 
		 -> STR_5(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    parse_cmd_str@temp	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    parse_cmd_str@ptr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    parse_cmd_str@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    collect_column@data_column	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    collect_column@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    get_over_write_data@over_write_data	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    get_over_write_data@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    get_dis_frq@data_frq	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    get_dis_frq@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    get_direction@data_direction	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    get_direction@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    get_str@data_str	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    get_str@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    collect_row@data_row	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    collect_row@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    scroll_off@clcd_display_string_details	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    scroll_right_to_left@clcd_display_string_details	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    scroll_left_to_right@clcd_display_string_details	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    write_str@str	PTR const unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    update_string_data@data	PTR struct . size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 1100
		 -> CMD(BANK0[15]), cmd_data(BANK0[52]), clcd_display_string_details(BIGRAM[1100]), 

    copy_data@data	PTR struct . size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    copy_data@clcd_str_data	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    sp__max_display_support	PTR unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), 

    sp__memset	PTR void  size(2) Largest target is 1100
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[52]), conflict_arr(BANK1[40]), clcd_display_string_details(BIGRAM[1100]), lcd_display_array(BANK1[80]), 
		 -> clcd_config_data(COMRAM[5]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> make_array(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> make_array(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_make_display
    _console_init->_memset
    _clear_cmd_data->_memset
    _update_string_data->_conflict_check
    _update_string_data->_make_display
    _make_display->_scroll_off
    _scroll_right_to_left->_memset
    _scroll_off->_strlen
    _scroll_left_to_right->_memset
    _display_text->_write_str
    _set_cursor->_write_lcd_cmd
    _char_enter_mode_left_to_right->_write_lcd_cmd
    _copy_data->_printf
    _conflict_check->_printf
    _puts->_cputs
    _cputs->_putch
    _init_clcd_cusotom_lcd->_printf
    _write_lcd_cmd->_delay
    _clear_display_array->_memset
    _clear_display_structure->_memset
    _clcd_display_string_config->_printf
    _write_str->_write_lcd_data
    _write_lcd_data->_delay
    _parse_cmd_str->_collect_column
    _parse_cmd_str->_collect_row
    _parse_cmd_str->_get_direction
    _parse_cmd_str->_get_dis_frq
    _parse_cmd_str->_get_over_write_data
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _get_str->_memset
    _memset->_strlen
    _get_over_write_data->_printf
    _get_dis_frq->_printf
    _get_direction->_printf
    _collect_row->_printf
    _collect_column->_printf
    _strlen->___wmul
    _printf->___wmul
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    ___wmul->___awdiv
    _getch->_EUSART1_Read
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _make_array->_heart_beat

Critical Paths under _main in BANK0

    _main->_cmd_consol_task
    _cmd_consol_task->_reply_to_host
    _reply_to_host->_update_string_data
    _update_string_data->_make_display
    _make_display->_scroll_right_to_left
    _parse_cmd_str->_collect_column
    _parse_cmd_str->_collect_row
    _parse_cmd_str->_get_direction
    _parse_cmd_str->_get_dis_frq
    _parse_cmd_str->_get_over_write_data

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  371369
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                     _TMR1_StopTimer
                     _TMR5_StopTimer
                          __delay_MS
                    _cmd_consol_task
                       _console_init
                       _make_display
                             _printf
 ---------------------------------------------------------------------------------
 (1) _console_init                                         0     0      0   15696
                     _clear_cmd_data
                             _memset
 ---------------------------------------------------------------------------------
 (2) _clear_cmd_data                                       0     0      0    7848
                             _memset
 ---------------------------------------------------------------------------------
 (1) _cmd_consol_task                                      2     2      0  310510
                                             29 BANK0      2     2      0
                              _getch
                             _memset
                      _parse_cmd_str
                             _printf
                               _puts
                      _reply_to_host
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _reply_to_host                                        4     4      0  176563
                                             25 BANK0      4     4      0
                       _clcd_max_col
                       _clcd_max_row
              _init_clcd_cusotom_lcd
                    _max_display_str
                _max_display_support
                      _max_uid_range
                      _min_uid_range
                             _printf
                               _puts
                             _strcmp
                 _update_string_data
 ---------------------------------------------------------------------------------
 (3) _update_string_data                                  11     9      2   89848
                                             14 BANK0     11     9      2
                             ___wmul
                     _conflict_check
                          _copy_data
                       _make_display
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (1) _make_display                                         5     5      0   35897
                                             54 COMRAM     2     2      0
                                             11 BANK0      3     3      0
                             ___wmul
                       _display_text
               _scroll_left_to_right
                         _scroll_off
               _scroll_right_to_left
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_right_to_left                                14    12      2   10400
                                             47 COMRAM     3     1      2
                                              0 BANK0     11    11      0
                             ___wmul (ARG)
                             _memcpy
                             _memset
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              8     2      6     369
                                             19 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _scroll_off                                          15    13      2    3427
                                             39 COMRAM    15    13      2
                             ___wmul (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_left_to_right                                11     9      2   10031
                                             47 COMRAM     3     1      2
                                              0 BANK0      8     8      0
                             ___wmul (ARG)
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _display_text                                         0     0      0    2268
      _char_enter_mode_left_to_right
                         _set_cursor
                      _write_lcd_cmd
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _set_cursor                                           2     1      1     714
                                             27 COMRAM     2     1      1
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _char_enter_mode_left_to_right                        0     0      0     343
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (4) _copy_data                                           10     6      4   14344
                                             51 COMRAM     4     0      4
                                              0 BANK0      2     2      0
                             _printf
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _conflict_check                                       9     7      2   15985
                                             51 COMRAM     5     3      2
                                              0 BANK0      4     4      0
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) _puts                                                 2     0      2     642
                                             23 COMRAM     2     0      2
                              _cputs
                              _putch
 ---------------------------------------------------------------------------------
 (4) _cputs                                                2     0      2     248
                                             21 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _min_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_display_support                                  2     0      2       0
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _max_display_str                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_clcd_cusotom_lcd                                2     1      1   74341
                                             51 COMRAM     2     1      1
                            ___awdiv
                             ___wmul
                   _init_CLCD_config
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (4) _init_CLCD_config                                     0     0      0   50424
                          __delay_MS
         _clcd_display_string_config
                             _memset
                         _reset_clcd
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _write_lcd_cmd                                        1     1      0     343
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _reset_clcd                                           0     0      0   23544
                _clear_display_array
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _clear_display_array                                  0     0      0   15696
                             _memset
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _reset_display_structure_count                        0     0      0    7848
            _clear_display_structure
 ---------------------------------------------------------------------------------
 (7) _clear_display_structure                              0     0      0    7848
                             _memset
 ---------------------------------------------------------------------------------
 (5) _clcd_display_string_config                           0     0      0   18034
                             _memcpy
                             _memset
                             _printf
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _write_str                                            3     1      2     868
                                             27 COMRAM     3     1      2
                     _write_lcd_data
 ---------------------------------------------------------------------------------
 (4) _write_lcd_data                                       1     1      0     343
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                7     5      2     321
                                             19 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    1055
                                             19 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (5) __delay_MS                                            5     3      2     655
                                             19 COMRAM     5     3      2
            _TMR1_HasOverflowOccured
                        _TMR1_Reload
                    _TMR1_StartTimer
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     756
                                             19 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _clcd_max_row                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clcd_max_col                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parse_cmd_str                                       17    15      2  113574
                                              3 BANK0     17    15      2
                               _atoi
                     _collect_column
                        _collect_row
                      _get_direction
                        _get_dis_frq
                _get_over_write_data
                            _get_str
                            _isdigit
                             _memset
                             _printf
                             _strcmp
                             _strcpy
                             _strlen
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _strtok                                               4     0      4    4510
                                             30 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (4) _strspn                                               7     3      4     635
                                             23 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strcspn                                              7     3      4     635
                                             23 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (5) _strchr                                               4     0      4     392
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    3435
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _get_str                                              4     0      4   13278
                                             47 COMRAM     4     0      4
                             _memset
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    2355
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6    7848
                                             39 COMRAM     8     2      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _get_over_write_data                                  8     4      4   11638
                                             51 COMRAM     5     1      4
                                              0 BANK0      3     3      0
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _get_dis_frq                                          8     4      4   11638
                                             51 COMRAM     5     1      4
                                              0 BANK0      3     3      0
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _get_direction                                        8     4      4   11669
                                             51 COMRAM     5     1      4
                                              0 BANK0      3     3      0
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_row                                          8     4      4   12240
                                             51 COMRAM     5     1      4
                                              0 BANK0      3     3      0
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_column                                       8     4      4   12240
                                             51 COMRAM     5     1      4
                                              0 BANK0      3     3      0
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2    2740
                                             33 COMRAM     6     4      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _printf                                              24    16      8    8263
                                             33 COMRAM    18    10      8
                            ___awdiv (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                       _clcd_max_col (ARG)
                       _clcd_max_row (ARG)
                    _max_display_str (ARG)
                _max_display_support (ARG)
                      _max_uid_range (ARG)
                      _min_uid_range (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             20 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             26 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    7325
                                             33 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    6712
                                             27 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getch                                                0     0      0      24
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         1     1      0      24
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     174
                                             21 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         18    18      0       0
                                              1 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                         _make_array *
 ---------------------------------------------------------------------------------
 (13) _make_array                                          0     0      0       0
                         _heart_beat
 ---------------------------------------------------------------------------------
 (14) _heart_beat                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_SetInterruptHandler
   _TMR0_StartTimer
   _TMR0_StopTimer
   _TMR1_StopTimer
   _TMR5_StopTimer
   __delay_MS
     _TMR1_HasOverflowOccured
     _TMR1_Reload
     _TMR1_StartTimer
     _TMR1_StopTimer
   _cmd_consol_task
     _getch
       _EUSART1_Read
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _parse_cmd_str
       _atoi
         ___wmul
           ___awdiv (ARG)
         _isdigit
       _collect_column
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _collect_row
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_direction
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_dis_frq
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_over_write_data
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_str
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strcpy
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _isdigit
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
       _strcmp
       _strcpy
       _strlen
         ___wmul (ARG)
           ___awdiv (ARG)
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _clcd_max_col (ARG)
       _clcd_max_row (ARG)
       _max_display_str (ARG)
       _max_display_support (ARG)
       _max_uid_range (ARG)
       _min_uid_range (ARG)
       _putch (ARG)
         _EUSART1_Write
     _puts
       _cputs
         _putch
           _EUSART1_Write
       _putch
         _EUSART1_Write
     _reply_to_host
       _clcd_max_col
       _clcd_max_row
       _init_clcd_cusotom_lcd
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _init_CLCD_config
           __delay_MS
             _TMR1_HasOverflowOccured
             _TMR1_Reload
             _TMR1_StartTimer
             _TMR1_StopTimer
           _clcd_display_string_config
             _memcpy
             _memset
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _printf
               ___awdiv (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _clcd_max_col (ARG)
               _clcd_max_row (ARG)
               _max_display_str (ARG)
               _max_display_support (ARG)
               _max_uid_range (ARG)
               _min_uid_range (ARG)
               _putch (ARG)
                 _EUSART1_Write
             _write_str
               _write_lcd_data
                 _delay
           _memset
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _reset_clcd
             _clear_display_array
               _memset
                 _strlen (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
               _reset_display_structure_count
                 _clear_display_structure
                   _memset
                     _strlen (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
             _reset_display_structure_count
               _clear_display_structure
                 _memset
                   _strlen (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
           _write_lcd_cmd
             _delay
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
       _max_display_str
       _max_display_support
       _max_uid_range
       _min_uid_range
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
       _puts
         _cputs
           _putch
             _EUSART1_Write
         _putch
           _EUSART1_Write
       _strcmp
       _update_string_data
         ___wmul
           ___awdiv (ARG)
         _conflict_check
           ___wmul
             ___awdiv (ARG)
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
         _copy_data
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
           _strcpy
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _make_display
           ___wmul
             ___awdiv (ARG)
           _display_text
             _char_enter_mode_left_to_right
               _write_lcd_cmd
                 _delay
             _set_cursor
               _write_lcd_cmd
                 _delay
             _write_lcd_cmd
               _delay
             _write_str
               _write_lcd_data
                 _delay
           _scroll_left_to_right
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
           _scroll_off
             ___wmul (ARG)
               ___awdiv (ARG)
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _scroll_right_to_left
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _strncpy (ARG)
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
     _strcmp
   _console_init
     _clear_cmd_data
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _make_display
     ___wmul
       ___awdiv (ARG)
     _display_text
       _char_enter_mode_left_to_right
         _write_lcd_cmd
           _delay
       _set_cursor
         _write_lcd_cmd
           _delay
       _write_lcd_cmd
         _delay
       _write_str
         _write_lcd_data
           _delay
     _scroll_left_to_right
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _scroll_off
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _scroll_right_to_left
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strncpy (ARG)
     _strlen
       ___wmul (ARG)
         ___awdiv (ARG)
   _printf
     ___awdiv (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
     _clcd_max_col (ARG)
     _clcd_max_row (ARG)
     _max_display_str (ARG)
     _max_display_support (ARG)
     _max_uid_range (ARG)
     _min_uid_range (ARG)
     _putch (ARG)
       _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _make_array *
         _heart_beat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     44C      37       28.2%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A0       7       62.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1F      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4B       1       79.8%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     21E      12        0.0%
DATA                 0      0     66A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Oct 30 20:10:00 2017

                       _eusart1TxBufferRemaining 00FC                            __end_of_parse_cmd_str 0D94  
                                   ___awdiv@sign 0019                            _init_clcd_cusotom_lcd 2578  
                            ___wmul@multiplicand 001E                                  _timer0ReloadVal 0049  
                                   __CFG_CP0$OFF 000000                                     __CFG_CP1$OFF 000000  
                                   __CFG_CP2$OFF 000000                                     __CFG_CP3$OFF 000000  
                                    __CFG_LVP$ON 000000                                              l500 1B8E  
                                            l501 1BD0                                              l424 3640  
                                            l512 35E6                                              l601 0DB0  
                                            l186 3344                                              l442 3678  
                                            l610 104E                                              l195 3236  
                                            l419 365C                                              l451 1794  
                                            l603 0DCA                                              l188 336A  
                                            l196 325A                                              l620 24A6  
                                            l604 0DE4                                              l197 3258  
                                            l437 366A                                              l429 364E  
                                            l453 188E                                              l605 0DFE  
                                            l550 3264                                              l454 19FC  
                                            l606 0F4E                                              l630 2074  
                                            l551 3286                                              l455 1948  
                                            l631 2100                                              l720 2788  
                                            l800 054E                                              l552 328C  
                                            l456 19F6                                              l640 2CDE  
                                            l624 255C                                              l608 0FFA  
                                            l721 2750                                              l633 218C  
                                            l811 06B8                                              l619 251E  
                                            l635 2216                                              l740 2A46  
                                            l820 0982                                              l804 0730  
                                            l812 0672                                              l492 1C66  
                                            l900 175A                                              l733 2E3C  
                                            l813 06B0                                              l549 328E  
                                            l629 221A                                              l493 1C06  
                                            l726 27CC                                              l750 2BA0  
                                            l814 06B4                                              l590 1292  
                                            l494 1AD0                                              l743 2A92  
                                            l831 0972                                              l495 1B60  
                                            l840 09E4                                              l824 097E  
                                            l808 072C                                              l816 0728  
                                            l912 1F5A                                              l737 2A4C  
                                            l833 096E                                              l593 1342  
                                            l585 1112                                              l921 1F54  
                                            l913 1E76                                              l738 2A0C  
                                            l842 0D06                                              l850 0CFA  
                                            l594 1390                                              l498 1C00  
                                            l930 201C                                              l914 1EA8  
                                            l763 283E                                              l739 2A42  
                                            l747 2BA6                                              l755 2B06  
                                            l827 097A                                              l587 112C  
                                            l499 1BD6                                              l923 204A  
                                            l764 2806                                              l748 2B5A  
                                            l756 2ABA                                              l852 0CF6  
                                            l860 0CE6                                              l588 1146  
                                            l932 2032                                              l924 1F8A  
                                            l749 2B90                                              l757 2AF0  
                                            l829 0976                                              l781 025E  
                                            l589 1160                                              l933 2044  
                                            l758 2B00                                              l870 0D68  
                                            l846 0D02                                              l854 0CF2  
                                            l774 017A                                              l926 1FDC  
                                            l791 03DC                                              l919 1EDC  
                                            l848 0CFE                                              l856 0CEE  
                                            l784 0370                                              l769 2882  
                                            l881 1588                                              l873 1468  
                                            l858 0CEA                                              l794 0556  
                                            l778 01E6                                              _CMD 00B7  
                                            l891 16AC                                              l883 1616  
                                            l875 14B2                                              l884 15E6  
                                            l957 3076                                              l885 1600  
                                            l877 14FE                                              l798 0552  
                                            l974 3148                                              l958 3054  
                                            l894 171E                                              l975 312C  
                                            l959 306C                                              l895 1708  
                                            l887 1648                                              l879 154A  
                                            l977 3134                                              l889 167A  
                                            l898 173C                                     __CFG_CPB$OFF 000000  
                                   __CFG_CPD$OFF 000000                                  ?_conflict_check 0034  
                                  ?_display_text 0001                                  _timer1ReloadVal 00F8  
                                            _str 00E9                        collect_column@data_column 0036  
                                            prod 000FF3                                 _LCD_16x2_DISPLAY 003E  
                                            tosl 000FFD                                              wreg 000FE8  
                                   get_dis_frq@i 00C7                                             l1081 2334  
                                           l1082 2264                                             l1074 224E  
                                           l1058 2F38                                             l1075 225E  
                                           l1076 22FE                                             l1084 22B8  
                                           l1093 23A4                                             l1085 228E  
                                           l1262 265C                                             l1094 23F8  
                                           l1271 271A                                             l1263 2658  
                                           l1095 23AA                                             l1087 22E2  
                                           l1088 22F6                                             l1265 269C  
                                           l1089 235C                                             l1281 2BF6  
                                           l1522 2F6E                                             l1290 2C5C  
                                           l1282 2C06                                             l1443 355E  
                                           l1523 2F66                                             l1268 26E8  
                                           l1532 3174                                             l1284 2C24  
                                           l1269 26AE                                             l1533 316C  
                                           l1701 33E4                                             l1285 2C1C  
                                           l1526 2F8E                                             l1702 33DC  
                                           l1527 2F98                                             l1536 318C  
                                           l1552 341A                                             l1288 2C44  
                                           l1537 3196                                             l1553 340A  
                                           l1289 2C4E                                             l1730 2966  
                                           l1546 3108                                             l1714 2E4A  
                                           l1707 32A6                                             l1547 30E8  
                                           l1715 2E72                                             l1708 32A2  
                                           l1732 29A2                                             l1733 29E2  
                                           l1717 2E8C                                             l1734 29EA  
                                           l1718 2E7C                                             l1729 2954  
                                           l4305 2E7C                                             l4059 340A  
                                           l1693 3096                                             l1694 308E  
                                           l1766 3004                                             l1758 33BC  
                                           l1767 2FFC                                             l4263 30E8  
                                           l4087 305C                                             l1759 33A6  
                                           l1776 2FB4                                             l1785 3200  
                                           l1777 2FAC                                             l6213 3224  
                                           l6315 2360                                             l7075 054E  
                                           l6701 1B60                                             l6903 26E4  
                                           l6577 1942                                             l6587 19EE  
                                           l6933 0176                                             l6775 2E3C  
               __size_of_clear_display_structure 001E                                             STR_1 FF71  
                                           STR_2 FF68                                             STR_3 FE08  
                                           STR_4 FE2B                                             STR_5 FFE8  
                                           STR_6 FD3E                                             STR_7 FD72  
                                           STR_8 FD58                                             _LATA 000F89  
                                           _LATB 000F8A                                             _LATC 000F8B  
                                           _LATD 000F8C                                             _LATE 000F8D  
                                           u3610 2FE8                                             u3630 3038  
                                           u2830 369E                                             u2750 3072  
                                           u3560 2C28                                             u5420 2F72  
                                           u5500 22DA                                             u6060 1BAA  
                                           u5450 3178                                             u5507 22D0  
                                           u5550 2392                                             u7310 1E8E  
                                           u3960 30CA                                             u5570 2400  
                                           u5490 22B0                                             u5810 2538  
                                           u7340 1F60                                             i2l62 005E  
                                           u7350 1F72                                             i2l64 006E  
                                           u5840 17A8                                             u5497 22A6  
                                           i2l66 007A                          _TMR1_HasOverflowOccured 3696  
                                           _TMR1 000FCE                                             _TMR5 000F4F  
                                           _WPUB 000F61                                    _EUSART1_Write 3222  
                                  ?_make_display 0001                                             _atoi 2656  
                                           _main 2EF8                                    ?_EUSART1_Read 0001  
                                _TMR0_StartTimer 36FC                                             fsr0h 000FEA  
                                           fsr1h 000FE2                                             indf0 000FEF  
                                           fsr2h 000FDA                                             fsr0l 000FE9  
                                           indf1 000FE7                                             indf2 000FDF  
                                           fsr1l 000FE1                                             fsr2l 000FD9  
                                           btemp 004C                                             _puts 35F0  
                                  __CFG_BORV$190 000000                            ??_get_over_write_data 0038  
                                           prodh 000FF4                                             prodl 000FF3  
                                           start 00C6                                  _timer5ReloadVal 00FA  
                                  __CFG_IESO$OFF 000000                             __end_of_clcd_max_col 367C  
                           __end_of_clcd_max_row 366E                                    ?_console_init 0001  
                                   ___param_bank 000000                                     collect_row@i 00C6  
                        __end_of_TMR0_Initialize 330A                   ??_TMR0_DefaultInterruptHandler 0001  
                 __size_of_OSCILLATOR_Initialize 000E                    __end_of_OSCILLATOR_Initialize 368A  
                                    make_array@i 007C                                            ?_atoi 0022  
                                          ?_main 0001                                  __end_of___awdiv 2C66  
                                 ??_display_text 001F                                            STR_20 FED2  
                                          STR_12 FCE1                                            STR_13 FCE1  
                                          STR_21 FEAE                                            STR_30 FFF1  
                                          STR_14 FE5C                                            STR_22 FE1A  
                                          STR_15 FFE3                                            STR_31 FFBC  
                                          STR_23 FDBE                                            STR_16 FE9F  
                                          STR_40 FFA7                                            STR_32 FF7A  
                                          STR_24 FDF6                                            STR_41 FEDE  
                                          STR_33 FFDE                                            STR_25 FEC6  
                                          STR_17 FDD1                                            STR_50 FFA7  
                                          STR_34 FFA7                                            STR_42 FF2F  
                                          STR_26 FEA2                                            STR_18 FE4C  
                                          STR_43 FFFC                                            STR_35 FF99  
                                          STR_27 FF82                                            STR_51 FF56  
                                          STR_19 FE3C                                            STR_60 FFA7  
                                          STR_36 FFA7                                            STR_28 FFA7  
                                          STR_44 FF24                                            STR_52 FE7B  
                                          STR_29 FFED                                            STR_37 FFC2  
                                          STR_53 FFAE                                            STR_45 FF8A  
                                          STR_61 FDA5                                            STR_70 FFA7  
                                          STR_62 FFA7                                            STR_54 FFA7  
                                          STR_38 FFCE                                            STR_46 FF44  
                                          STR_71 FD23                                            STR_47 FFA7  
                                          STR_63 FF19                                            STR_39 FEDE  
                                          STR_55 FE96                                            STR_80 FFA7  
                                          STR_72 FFA7                                            STR_56 FFA7  
                                          STR_48 FF4D                                            STR_64 FD8C  
                                          STR_73 FD08                                            STR_49 FF2F  
                                          STR_81 FFA7                                            STR_65 FFB5  
                                          STR_57 FD23                                            STR_90 FDDF  
                                          STR_74 FFA7                                            STR_58 FFA7  
                                          STR_82 FFF5                                            STR_66 FFD9  
                                          STR_75 FDA5                                            STR_91 FE89  
                                          STR_83 FFF5                                            STR_67 FF5F  
                                          STR_59 FD08                                            STR_84 FE91  
                                          STR_68 FFFC                                            STR_76 FFA7  
                                          STR_92 FFED                                            STR_77 FF19  
                                          STR_93 FFF1                                            STR_85 FFBC  
                                          STR_69 FF3A                                            STR_78 FD8C  
                                          STR_94 FDDF                                            STR_86 FFA2  
                                          STR_95 FE89                                            STR_79 FFA7  
                                          STR_87 FE89                                            STR_96 FFF1  
                                          STR_88 FFBC                                            STR_89 FFED  
                                          STR_97 FFDE                                            STR_98 FE89  
                                          STR_99 FFDE                                  _TMR1_StartTimer 36F8  
                                          ?_puts 0018                                            _T0CON 000FD5  
                                ___awdiv@divisor 0016                                            _T1CON 000FCD  
                                          _T5CON 000F4E                                   __CFG_DEBUG$OFF 000000  
                                __end_of___lwdiv 2FA2                                  ??_get_direction 0038  
                                __end_of___lwmod 31A0                                            i2l213 3434  
                                          i2l214 3454                                            i2l207 33A0  
                                          i2l208 339C                                  ___awdiv@counter 0018  
                                          _TMR0H 000FD7                                            _TMR1H 000FCF  
                                          _TMR0L 000FD6                                            _TMR1L 000FCE  
                                          _TMR5H 000F50                                            _TMR5L 000F4F  
                                          _PORTD 000F83                                            _TRISA 000F92  
                                          _TRISB 000F93                                            _TRISC 000F94  
                                          _TRISD 000F95                                            _TRISE 000F96  
                      __size_of_init_CLCD_config 00B4                __size_of_TMR0_SetInterruptHandler 000A  
                                  __CFG_WRT0$OFF 000000                                    __CFG_WRT1$OFF 000000  
                                  __CFG_WRT2$OFF 000000                        ?_TMR0_SetInterruptHandler 0014  
                                  __CFG_WRT3$OFF 000000                             _EUSART1_Transmit_ISR 3374  
                                 __CFG_EBTR0$OFF 000000                                   __CFG_FCMEN$OFF 000000  
                                 __CFG_EBTR1$OFF 000000                                   __CFG_EBTR2$OFF 000000  
                                 __CFG_EBTR3$OFF 000000                                 __end_of_TMR0_ISR 3636  
                                  __CFG_WRTB$OFF 000000                                    __CFG_WRTC$OFF 000000  
                                __end_of_get_str 2E40                                    __CFG_WRTD$OFF 000000  
                                          _check 007F                                   __CFG_EBTRB$OFF 000000  
                                          _delay 3042                                            _getch 36DE  
                                __end_of_dpowers FCE1                          __end_of_max_display_str 3660  
                                          _cputs 33A4                                  __end_of_isdigit 3566  
                                          _randx 00E5                               __CFG_MCLRE$EXTMCLR 000000  
                                          atoi@a 0027                                            atoi@s 0022  
                                          _putch 36C2                          __size_of_clear_cmd_data 002A  
                                 ?_EUSART1_Write 0001                          __end_of_TMR1_Initialize 350A  
                                          pclath 000FFA                                   ??_make_display 00D1  
                                          tablat 000FF5                                   ??_EUSART1_Read 0014  
                                          puts@s 0018                                            status 000FD8  
                                          wtemp6 004D                                   __CFG_HFOFST$ON 000000  
                                __end_of_strcspn 3042                                  __end_of_strncpy 2E9E  
                           _scroll_right_to_left 0D94                                   __CFG_PBADEN$ON 000000  
                       scroll_right_to_left@line 0032                                  _TMR5_Initialize 34CA  
                                 ??_console_init 0030                                  __initialization 2CE8  
                                 get_dis_frq@frq 00C6                                   get_dis_frq@str 0034  
                                   __end_of_atoi 2724                       __end_of_EUSART1_Initialize 3340  
                                   __end_of_main 2F50                                     __end_of_puts 3604  
                         ?_init_clcd_cusotom_lcd 0034                                   get_direction@i 00C6  
                    ?_INTERRUPT_InterruptManager 0001                    __size_of_scroll_left_to_right 0348  
                               _cmd_consol_state 007E                                           ??_atoi 0024  
                                         ??_main 0039                                           ??_puts 001A  
                               ??_write_lcd_data 001B                                    __activetblptr 000003  
                                 __CFG_PLLCFG$ON 000000                              collect_row@data_row 0036  
                                  __delay_MS@val 0017                            ?_EUSART1_Transmit_ISR 0001  
                      ??_TMR1_HasOverflowOccured 0014                                  reply_to_host@ch 00E2  
                                         ?_delay 0014                          __end_of_TMR0_StartTimer 3700  
                                         ?_getch 0001                                           ?_cputs 0016  
                                         STR_100 FFC2                                           STR_101 FF0E  
                                         STR_102 FDDF                                           STR_110 FF8A  
                                         STR_103 FE89                                           STR_111 FFAE  
                                         STR_112 FE89                                           STR_104 FFC2  
                                         STR_120 FF02                                           STR_121 FFA0  
                                         STR_113 FFAE                                           STR_105 FFCE  
                                         STR_106 FE89                                           STR_114 FFB5  
                                         STR_122 FEEA                                           STR_130 FEBA  
                                         STR_131 FFA2                                           STR_115 FFA2  
                                         STR_123 FFA0                                           STR_107 FFCE  
                                         STR_108 FF8A                                           STR_132 FFC8  
                                         STR_116 FFC8                                           STR_124 FE6C  
                                         STR_125 FE9F                                           STR_117 FE89  
                                         STR_109 FE89                                           STR_133 FDE4  
                                         STR_118 FFB5                                           STR_126 FFF9  
                                         STR_134 FF92                                           STR_127 FFF9  
                                         STR_119 FFA0                                           STR_128 FFD4  
                                         STR_129 FEF6                                 ___awdiv@dividend 0014  
                                         _ANSELA 000F38                                           ?_putch 0001  
                                         _ANSELB 000F39                                           _ANSELC 000F3A  
                                         _ANSELD 000F3B                                           _ANSELE 000F3C  
                                         _T1GCON 000FCC                                           _T5GCON 000F4D  
                       __size_of_cmd_consol_task 01FA                                   __CFG_WDTEN$OFF 000000  
                                         _RCREG1 000FAE                                           _RCSTA1 000FAB  
                                         _OSCCON 000FD3                                           _SPBRG1 000FAF  
                                         _TXREG1 000FAD                            ?_scroll_right_to_left 0030  
                                         _TXSTA1 000FAC                           __size_of_max_uid_range 000E  
                            _clear_display_array 34A8                                   __CFG_XINST$OFF 000000  
                              collect_column@str 0034                             __size_of_get_dis_frq 00A0  
                        __end_of_TMR1_StartTimer 36FC                                     ?_TMR1_Reload 0001  
                                         ___wmul 3482                                        ??___awdiv 0018  
                                 __CFG_STVREN$ON 000000                                        ??___lwdiv 0018  
                           __size_of_collect_row 00B6                                        ??___lwmod 001F  
                                         _memcpy 30D6                                 ?_TMR0_Initialize 0001  
                                         _memset 3400                                           delay@i 0019  
                                         clear_0 2D22                                           clear_1 2D34  
                                         clear_2 2D40                                           clear_3 2D4C  
                                         clear_4 2D58                                 ___awdiv@quotient 001A  
                                         _printf 2244                                           _strchr 31E2  
                                         _strcmp 308C                     scroll_off@display_char_count 0031  
                                         _strcpy 33D2                                           _strlen 3298  
                                      ??_get_str 0034                                           _strtok 2944  
                                         _strspn 2FA2                                  _TMR5_StartTimer 36EA  
                                         cputs@s 0016                                     __pdataCOMRAM 004B  
                                      ??_isdigit 0014                             ?_clear_display_array 0001  
                                   __mediumconst FCD6                                           tblptrh 000FF7  
                                         tblptrl 000FF6                                           tblptru 000FF8  
                          __end_of_TMR0_CallBack 352A                                  ??_EUSART1_Write 0014  
                        _clear_display_structure 352A         TMR0_SetInterruptHandler@InterruptHandler 0014  
                               ?_max_display_str 0001                                        ??_strcspn 001C  
                                _eusart1RxBuffer 0060                      __end_of_max_display_support 36B8  
                                      ??_strncpy 001A                    __size_of_INTERRUPT_Initialize 0004  
                               ??_collect_column 0038                                  _eusart1TxBuffer 0068  
                               ?_TMR1_Initialize 0001                          __end_of_TMR5_Initialize 34EA  
                ??_reset_display_structure_count 0030                                _SYSTEM_Initialize 3566  
                          __size_of_clcd_max_col 000E                                       __accesstop 0060  
                          __size_of_clcd_max_row 000E                          __end_of__initialization 2D5E  
                             __size_of__delay_MS 0044  scroll_left_to_right@clcd_display_string_details 0030  
                             ?_SYSTEM_Initialize 0001                             __end_of_display_text 2CE8  
                                  ___rparam_used 000001              __size_of_clcd_display_string_config 005A  
                                 __pcstackCOMRAM 0001                                     __pidataBANK0 3604  
                            ??_SYSTEM_Initialize 0018                                        ?_TMR0_ISR 0001  
                                  __end_of_delay 308C                                    __end_of_getch 36E4  
                               ??_conflict_check 0036                                    __end_of_cputs 33D2  
                           _display_struct_count 0074                             cmd_consol_task@_1885 0070  
                                  __end_of_putch 36CC                              get_dis_frq@data_frq 0036  
                           __end_of_make_display 2244                             __end_of_EUSART1_Read 3374  
                                 collect_row@row 00C8                                   collect_row@str 0034  
                     __end_of_update_string_data 1C6A                           __size_of_write_lcd_cmd 001C  
                         ??_EUSART1_Transmit_ISR 0001                            __end_of_reply_to_host 1778  
                          ??_clear_display_array 0030                  update_string_data@exist_uid_idx 00DA  
                               _init_CLCD_config 2890                                    _max_uid_range 3644  
                         __size_of_min_uid_range 000E                      __end_of_EUSART1_Receive_ISR 3458  
                                   _clcd_max_col 366E                                     _clcd_max_row 3660  
                           __end_of_console_init 2DDA                                          ??_delay 0016  
                                        ??_getch 0015                                 ?_TMR0_StartTimer 0001  
                                        ??_cputs 0018                        __end_of_SYSTEM_Initialize 3584  
                                 _clear_cmd_data 3458                                          ??_putch 0015  
                                  _eusart1RxHead 0041                                    _eusart1TxHead 0043  
                             __size_of_copy_data 01FE                                    _eusart1RxTail 0040  
                                     __pbssBANK0 0060                                       __pbssBANK1 0100  
                                     __pbssBANK2 0200                                    _eusart1TxTail 0042  
                         ??_scroll_right_to_left 00C6                                       _data_count 003C  
                                     __pnvCOMRAM 0049            scroll_off@clcd_display_string_details 0028  
                              ??_cmd_consol_task 00E3                               __CFG_CCP2MX$PORTC1 000000  
               __end_of_TMR0_SetInterruptHandler 36D6                          __size_of_TMR0_StopTimer 0004  
                                        ?___wmul 001C                                 ?_TMR1_StartTimer 0001  
                                     ??_TMR0_ISR 0002                          __end_of_TMR5_StartTimer 36F0  
                             __CFG_CCP3MX$PORTB5 000000                  ??_char_enter_mode_left_to_right 001C  
                                        ?_memcpy 0014                                          ?_memset 0028  
                    get_direction@data_direction 0036                                          ?_printf 0022  
                                        ?_strchr 0014                                          ?_strcmp 0014  
                                        ?_strcpy 0014                                          ?_strlen 0022  
                                     _heart_beat 3584                          __size_of_TMR1_StopTimer 0004  
                                        ?_strtok 001F                                          ?_strspn 0018  
                              __end_of__delay_MS 315E                                   ?_max_uid_range 0001  
                      ??_clear_display_structure 0030                                          _OSCCON2 000FD2  
                         __end_of_clear_cmd_data 3482                                          _OSCTUNE 000F9B  
                                        _SPBRGH1 000FB0                           copy_data@clcd_str_data 0034  
                               write_lcd_cmd@cmd 001B                      __end_of_get_over_write_data 2B42  
                               _print_data_ready 0076                                       _make_array 36A2  
                         __size_of_parse_cmd_str 0CCA                                 ?_TMR5_Initialize 0001  
                                  _write_lcd_cmd 35A2                                  __CFG_PWRTEN$OFF 000000  
                             __size_of_write_str 003A            __end_of_reset_display_structure_count 3626  
         __size_of_reset_display_structure_count 0010                    _reset_display_structure_count 3616  
                                        __Hparam 0000                          ??_init_clcd_cusotom_lcd 0035  
                                  _min_uid_range 3636                                          __Lparam 0000  
scroll_right_to_left@clcd_display_string_details 0030                                          ___awdiv 2BE2  
                                __size_of___wmul 0026                                          ___lwdiv 2F50  
                                        ___lwmod 315E               __end_of_clcd_display_string_config 2EF8  
                     _clcd_display_string_config 2E9E                                    copy_data@data 0036  
                              __end_of_copy_data 1E68                             __size_of_TMR1_Reload 000C  
                                        __pcinit 2CE8                                  __size_of_memcpy 0044  
                                __size_of_memset 002C                                          __ramtop 1000  
                                        __ptext0 2EF8                                          __ptext1 2D68  
                                        __ptext2 3458                                          __ptext3 1E68  
                                        __ptext4 143E                                          __ptext5 1A1A  
                                        __ptext6 2062                                          __ptext7 0D94  
                                        __ptext8 2E40                                          __ptext9 241C  
                                __size_of_printf 01D8                             get_over_write_data@i 00C7  
                                        _display 007D                                          _get_str 2DDA  
                                      _T0CONbits 000FD5                          __size_of_TMR5_StopTimer 0006  
                                __size_of_strchr 0040                                  __size_of_strcmp 004A  
                                __size_of_strcpy 002E                                  __size_of_strlen 003A  
                                      _T1CONbits 000FCD                                  __size_of_strtok 00B0  
                                __size_of_strspn 0050                                          _dpowers FCD7  
                          _OSCILLATOR_Initialize 367C                                       delay@delay 0014  
                                        _isdigit 3548                            __end_of_get_direction 2AA2  
                             _EUSART1_Initialize 330A                         ??_PIN_MANAGER_Initialize 0014  
                                      _T5CONbits 000F4E                                  ?_clear_cmd_data 0001  
                     __size_of_SYSTEM_Initialize 001E                                          _strcspn 2FF2  
                                        _strncpy 2E40                            __size_of_display_text 0082  
                           end_of_initialization 2D5E                     __end_of_scroll_left_to_right 143E  
                            ?_EUSART1_Initialize 0001                                          memcpy@d 001A  
                                        memcpy@n 0018                                          memcpy@s 001C  
                                 ?_write_lcd_cmd 0001                                      scroll_off@i 0035  
                                    scroll_off@j 0033                                      scroll_off@k 002E  
                                        memset@c 002A                                          memset@n 002C  
                                        memset@p 002E                                 cmd_consol_task@i 0072  
                                 ?_min_uid_range 0001                  __end_of_clear_display_structure 3548  
                                 parse_cmd_str@i 00CD                                       _reset_clcd 36B8  
                                     _set_cursor 35DA                                          printf@c 0033  
                                        printf@f 0022                            __size_of_make_display 01E2  
                                     _scroll_off 241C                                          postdec1 000FE5  
                                        postdec2 000FDD                                          postinc0 000FEE  
                                        postinc1 000FE6                                          postinc2 000FDE  
                          __size_of_EUSART1_Read 0034                                     _conflict_arr 0150  
                               ?_TMR5_StartTimer 0001                             ??_EUSART1_Initialize 0014  
                                        strcmp@r 0019                                    _parse_cmd_str 00CA  
                                        strlen@s 0022                                  ??_max_uid_range 0014  
                                        strspn@i 001D                         _TMR0_SetInterruptHandler 36CC  
                                      _PORTAbits 000F80                                        _PORTDbits 000F83  
                          __size_of_console_init 0072                                      ?_heart_beat 0001  
                          _TMR5_InterruptHandler 007A            __end_of_char_enter_mode_left_to_right 36DE  
         __size_of_char_enter_mode_left_to_right 0008                    _char_enter_mode_left_to_right 36D6  
                                   _display_text 2C66                                __end_of_write_str 3298  
             init_clcd_cusotom_lcd@clcd_init_col 0034                               write_lcd_data@data 001B  
             init_clcd_cusotom_lcd@clcd_init_row 0035                              EUSART1_Write@txData 0014  
                                    ?_make_array 0001                                     _make_display 2062  
                                  ??_get_dis_frq 0038                                     _EUSART1_Read 3340  
                                     get_str@str 0030                         __end_of_init_CLCD_config 2944  
                                  ??_collect_row 0038                                _lcd_display_array 0100  
                                 _TMR0_StopTimer 36F4                                     _console_init 2D68  
                              make_display@count 0037                     __end_of_INTERRUPT_Initialize 3704  
                                   write_str@str 001C                                   ?_parse_cmd_str 00C9  
                 ?_reset_display_structure_count 0001                                   __end_of___wmul 34A8  
                                  __pidataCOMRAM 3706                                  collect_column@i 00C6  
                              __size_of_TMR0_ISR 0010                                   _TMR1_StopTimer 36F0  
                                 __end_of_memcpy 311A                           ?_OSCILLATOR_Initialize 0001  
                                 __end_of_memset 342C                         ?_TMR1_HasOverflowOccured 0001  
                                 __end_of_printf 241C                           conflict_check@conflict 00C7  
                                 __end_of_strchr 3222                                   __end_of_strcmp 30D6  
                                 __end_of_strcpy 3400                                   __end_of_strlen 32D2  
                                 __end_of_strtok 29F4                                   __end_of_strspn 2FF2  
                            start_initialization 2CE8                             set_cursor@col_number 001C  
                       __size_of_TMR0_Initialize 0038                  __size_of_PIN_MANAGER_Initialize 0042  
                                _cmd_consol_task 1E68                                 get_direction@str 0034  
                                    putch@txData 0015                                  ??_write_lcd_cmd 001B  
                          __end_of_EUSART1_Write 325E                          __size_of_write_lcd_data 001C  
                           collect_column@column 00C8                               _update_string_data 1A1A  
                                ??_min_uid_range 0014                              __size_of_heart_beat 001E  
                         __end_of_TMR0_StopTimer 36F8                     __size_of_max_display_support 000A  
                       __size_of_max_display_str 000E                                      ?_reset_clcd 0001  
                            ?_update_string_data 00D4                                    _clcd_init_col 0080  
                       __size_of_TMR1_Initialize 0020                                      ?_set_cursor 001C  
                                  _clcd_init_row 0081                                      ?_scroll_off 0028  
                                       ??___wmul 0020                              __end_of_get_dis_frq 2BE2  
                         __size_of_TMR0_CallBack 0020                           __end_of_TMR1_StopTimer 36F4  
                                    __pdataBANK0 00E5                      __end_of_clear_display_array 34CA  
                                       ??_memcpy 001A                                         ??_memset 002E  
                            update_string_data@i 00DD                             _scroll_left_to_right 10F6  
                                 scroll_off@line 0030                              __end_of_collect_row 27DA  
                            __size_of_make_array 000C                                         ??_printf 002A  
                                 _TMR5_StopTimer 36E4                                         ??_strchr 0018  
                                       ??_strcmp 0018                                         ??_strcpy 0018  
                                       ??_strlen 0024                                         ??_strtok 0023  
                                       ??_strspn 001C                                   _eusart1RxCount 003F  
                   ??_clcd_display_string_config 0034                                      __pbssBIGRAM 0296  
                                    __pbssCOMRAM 0039                             ??_update_string_data 00D6  
                  __size_of_EUSART1_Transmit_ISR 0030                                    __pcstackBANK0 00C6  
                                __delay_MS@delay 0014                                        __delay_MS 311A  
                 ?_char_enter_mode_left_to_right 0001                                     _isdigit$2299 0015  
                   __size_of_EUSART1_Receive_ISR 002C                            _TMR0_InterruptHandler 00F6  
                                      __pnvBANK0 00F6                    __size_of_scroll_right_to_left 0362  
                       __size_of_TMR0_StartTimer 0004                                  ?_TMR0_StopTimer 0001  
                         __size_of_reply_to_host 033A                                 ___lwdiv@dividend 0014  
                         _PIN_MANAGER_Initialize 31A0                                  conflict_check@i 00C8  
                                ??_parse_cmd_str 00CB                   __size_of_init_clcd_cusotom_lcd 00DE  
                                      __pintcode 0008                          __size_of_collect_column 00B6  
                  __end_of_init_clcd_cusotom_lcd 2656                                    __pmediumconst FCD6  
                                       ?___awdiv 0014                                         ?___lwdiv 0014  
                                       ?___lwmod 001B                  __end_of_TMR1_HasOverflowOccured 36A2  
                                ?_TMR1_StopTimer 0001                           __end_of_TMR5_StopTimer 36EA  
                    update_string_data@end_point 00DC                            ?_scroll_left_to_right 0030  
                    ?_clcd_display_string_config 0001               get_over_write_data@over_write_data 0036  
                   ??_INTERRUPT_InterruptManager 0002                                 __CFG_PRICLKEN$ON 000000  
                         get_over_write_data@str 0034                                 ??_clear_cmd_data 0030  
                              parse_cmd_str@temp 00D8                                         ?_get_str 0030  
                        __end_of_cmd_consol_task 2062                                        _copy_data 1C6A  
                                       _BAUDCON1 000FB8                         __size_of_TMR1_StartTimer 0004  
                                       ?_isdigit 0001                          __size_of_conflict_check 02A2  
                            __size_of_reset_clcd 000A                                       ?__delay_MS 0014  
                               ___lwdiv@quotient 0019                                 _clcd_config_data 0044  
                                 __size_of_delay 004A                              __size_of_set_cursor 0016  
                                 __size_of_getch 0006                                   __size_of_cputs 002E  
                                  _TMR0_CallBack 350A                                         ?_strcspn 0018  
                            __size_of_scroll_off 015C                                         ?_strncpy 0014  
                                 __size_of_putch 000A                             _INTERRUPT_Initialize 3700  
                  conflict_check@new_start_point 0034                             set_cursor@row_number 001D  
                              ??_TMR0_Initialize 0016                              _conflict_data_count 003B  
                                 ___wmul@product 0020                                         _LATEbits 000F8D  
                            parse_cmd_str@i_1779 00D3                              parse_cmd_str@i_1787 00CE  
                                    strncpy@from 0016                                      _get_dis_frq 2B42  
                                       _PIE1bits 000F9D                                      strncpy@size 0018  
                   __size_of_get_over_write_data 00A0              __size_of_INTERRUPT_InterruptManager 00BE  
                                      _valid_cmd 0082                                         i2u404_48 3518  
                     ??_TMR0_SetInterruptHandler 0016                                         i2u352_40 358C  
                                       i2u352_46 358E                                         _PIR1bits 000F9E  
                                      _uid_count 004B                                         _PIR5bits 000F7E  
                                    _collect_row 2724                         __size_of_TMR5_Initialize 0020  
                                       _RCONbits 000FD0                                    ??_TMR1_Reload 0014  
                               __CFG_WDTPS$32768 000000                              parse_cmd_str@column 00D2  
                                       _TMR0_ISR 3626                                ??_max_display_str 0014  
                            parse_cmd_str@scroll 00D5                                  ?_TMR5_StopTimer 0001  
                       ?_clear_display_structure 0001                                ??_TMR1_Initialize 0014  
                                   ??_heart_beat 0001                                ___wmul@multiplier 001C  
                                     printf@flag 002B                                       ?_copy_data 0034  
                                     printf@prec 002C                                    _reply_to_host 143E  
                                 ?_TMR0_CallBack 0001                                      _INTCON2bits 000FF1  
                                      copy_data0 2CFC                                        _write_str 325E  
                          ?_INTERRUPT_Initialize 0001                                   _write_lcd_data 35BE  
                                   ??_make_array 0002                            EUSART1_Read@readValue 0014  
                         get_direction@direction 00C8                               __end_of_heart_beat 35A2  
                                       __Hrparam 0000                         scroll_left_to_right@line 0032  
                              ?_init_CLCD_config 0001                    update_string_data@start_point 00DB  
                                      memcpy@tmp 001E                                         __Lrparam 0000  
                             __CFG_BOREN$SBORDIS 000000                           __size_of_get_direction 00AE  
                             ??_init_CLCD_config 0034                                __CFG_P2BMX$PORTD2 000000  
                         ??_scroll_left_to_right 00C6                          ??_OSCILLATOR_Initialize 0014  
                              ??_TMR0_StartTimer 0014                                  get_str@data_str 0032  
                               __size_of___awdiv 0084                      __size_of_EUSART1_Initialize 0036  
                               __size_of___lwdiv 0052                                 __size_of___lwmod 0042  
                    _clcd_display_string_details 0296                               __end_of_make_array 36AE  
                            __end_of_TMR1_Reload 3696                            _TMR1_InterruptHandler 0078  
                          __end_of_max_uid_range 3652                                   ?_reply_to_host 0001  
                               ?_cmd_consol_task 0001                                 __size_of_get_str 0066  
                            _max_display_support 36AE                         __size_of_TMR5_StartTimer 0006  
                                  ?_clcd_max_col 0001                                         _cmd_data 0083  
                                  ?_clcd_max_row 0001                                 __size_of_isdigit 001E  
                                ___lwdiv@divisor 0016                                      ??__delay_MS 0016  
                         __end_of_write_lcd_data 35DA                                  ___lwdiv@counter 0018  
                                       __ptext10 10F6                                         __ptext11 2C66  
                                       __ptext20 36AE                                         __ptext12 35DA  
                                       __ptext21 3652                                         __ptext13 36D6  
                                     _T1GCONbits 000FCC                                         __ptext30 325E  
                                       __ptext22 2578                                         __ptext14 1C6A  
                                       __ptext31 35BE                                         __ptext23 2890  
                                       __ptext15 1778                                         __ptext40 366E  
                                       __ptext32 3042                                         __ptext24 35A2  
                                       __ptext16 35F0                                         __ptext41 00CA  
                                       __ptext33 30D6                                         __ptext25 36B8  
                                       __ptext17 33A4                                         __ptext50 2AA2  
                                       __ptext42 2944                                         __ptext34 311A  
                                       __ptext26 34A8                                         __ptext18 3636  
                                       __ptext51 2B42                                         __ptext43 2FA2  
                                       __ptext35 36F0                                         __ptext27 3616  
                                       __ptext19 3644                                         __ptext60 2F50  
                                       __ptext52 29F4                                         __ptext44 2FF2  
                                       __ptext36 368A                                         __ptext28 352A  
                                       __ptext61 2656                                         __ptext53 2724  
                                       __ptext45 31E2                                         __ptext37 3696  
                                       __ptext29 2E9E                                         __ptext70 36EA  
                                       __ptext62 3548                                         __ptext54 27DA  
                                       __ptext46 308C                                         __ptext38 2BE2  
                                       __ptext71 34EA                                         __ptext63 3482  
                                       __ptext55 3298                                         __ptext47 2DDA  
                                       __ptext39 3660                                         __ptext72 36F8  
                                       __ptext64 36DE                                         __ptext56 2244  
                                       __ptext48 33D2                                         __ptext81 3626  
                                       __ptext73 32D2                                         __ptext65 3340  
                                       __ptext57 36C2                                         __ptext49 3400  
                                       __ptext82 350A                                         __ptext74 36FC  
                                       __ptext66 36E4                                         __ptext58 3222  
                                       __ptext83 3704                                         __ptext75 36CC  
                                       __ptext67 36F4                                         __ptext59 315E  
                                       __ptext84 36A2                                         __ptext76 31A0  
                                       __ptext68 3566                                         __ptext85 3584  
                                       __ptext77 367C                                         __ptext69 34CA  
                                       __ptext86 3374                                         __ptext78 3700  
                                       __ptext87 342C                                         __ptext79 330A  
                                       __ptext88 0000                                       ?_write_str 001C  
                               parse_cmd_str@uid 00D4                                 parse_cmd_str@ptr 00CF  
                               parse_cmd_str@row 00D1                                 parse_cmd_str@str 00C9  
                              ??_TMR1_StartTimer 0014                                 __size_of_strcspn 0050  
                               __size_of_strncpy 005E                                       strcpy@from 0016  
               __size_of_TMR1_HasOverflowOccured 000C                                    __size_of_atoi 00CE  
                                  __size_of_main 0058                                       _T5GCONbits 000F4D  
                                  __size_of_puts 0014                                         delay@val 0017  
           __end_of_TMR0_DefaultInterruptHandler 3706            __size_of_TMR0_DefaultInterruptHandler 0002  
                   _TMR0_DefaultInterruptHandler 3704                             ?_max_display_support 0014  
                                   ??_reset_clcd 0030                                     ??_set_cursor 001D  
                                 _collect_column 27DA                                     ??_scroll_off 002A  
                                       _uart_str 0200                                         int$flags 004C  
                                       atoi@sign 0026               __end_of_INTERRUPT_InterruptManager 00C6  
                     _INTERRUPT_InterruptManager 0008                                        printf@val 0031  
                                       _str_data 0178                              _EUSART1_Receive_ISR 342C  
                                     write_str@i 001E                                ??_TMR5_Initialize 0014  
                                    ??_copy_data 00C6                                   ??_clcd_max_col 0014  
                                     _INTCONbits 000FF2                                   ??_clcd_max_row 0014  
                                ??_TMR0_CallBack 0002                                   _conflict_check 1778  
                                       memcpy@d1 0014                                         memcpy@s1 0016  
                                  _get_direction 29F4                                         isdigit@c 0016  
                                ?_write_lcd_data 0001                           ??_INTERRUPT_Initialize 0014  
                                       memset@p1 0028                               __end_of_reset_clcd 36C2  
                             __end_of_set_cursor 35F0                           update_string_data@data 00D4  
                              cmd_consol_task@ch 00E4                                         intlevel2 0000  
                             __end_of_scroll_off 2578                                 ??_TMR0_StopTimer 0014  
                           ?_EUSART1_Receive_ISR 0001                                        strchr@chr 0016  
                          __end_of_write_lcd_cmd 35BE                                 ___lwmod@dividend 001B  
                                      strchr@ptr 0014                          ?_PIN_MANAGER_Initialize 0001  
                          ??_max_display_support 0016                                       _RCSTA1bits 000FAB  
                                      strcspn@s1 0018                                        strcspn@s2 001A  
                          __end_of_min_uid_range 3644                           __end_of_collect_column 2890  
                   __end_of_EUSART1_Transmit_ISR 33A4                                 ??_TMR1_StopTimer 0014  
                                      strncpy@cp 001A                                        strncpy@to 0014  
                  ?_TMR0_DefaultInterruptHandler 0001                                      _TMR1_Reload 368A  
                                       printf@ap 002F                                         printf@cp 002D  
                  get_over_write_data@over_write 00C6                                scroll_off@str_len 0032  
                         __size_of_EUSART1_Write 003C                                  ??_reply_to_host 00DF  
                    conflict_check@new_end_point 0035                     __end_of_scroll_right_to_left 10F6  
                         __end_of_conflict_check 1A1A                                         strcmp@s1 0014  
                                       strcmp@s2 0016                                  ___lwmod@divisor 001D  
                                _TMR0_Initialize 32D2                                         strcpy@cp 0018  
                                       strlen@cp 0026                                         strcpy@to 0014  
                                ___lwmod@counter 001F                              _get_over_write_data 2AA2  
                                       strcspn@i 001D                     __size_of_clear_display_array 0022  
                                 ?_get_direction 0034                            parse_cmd_str@uid_1776 00D6  
                          parse_cmd_str@uid_1786 00D7                      __size_of_update_string_data 0250  
                              __CFG_T3CMX$PORTC0 000000                      conflict_check@exist_uid_idx 00C6  
                                       strtok@s1 001F                                         strtok@s2 0021  
                                       strspn@s1 0018                                         strspn@s2 001A  
                                       strtok@sp 0039                                 _LCD_20x4_DISPLAY 003D  
                                    ??_write_str 001E                                ??_TMR5_StartTimer 0014  
                          ??_EUSART1_Receive_ISR 0001                   __end_of_PIN_MANAGER_Initialize 31E2  
                              __CFG_FOSC$INTIO67 000000                                  _max_display_str 3652  
                                   ?_get_dis_frq 0034                                  ?_collect_column 0034  
                           ?_get_over_write_data 0034                                  _TMR1_Initialize 34EA  
                               ??_TMR5_StopTimer 0014                                     ?_collect_row 0034  



Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Oct 30 05:14:00 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   113                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   114  0000                     
   115                           ; Version 1.44
   116                           ; Generated 14/09/2017 GMT
   117                           ; 
   118                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F46K22 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150                           	psect	idataCOMRAM
   151  003CBE                     __pidataCOMRAM:
   152                           	opt stack 0
   153                           
   154                           ;initializer for _uid_count
   155  003CBE  41                 	db	65
   156                           
   157                           	psect	idataBANK0
   158  003BBC                     __pidataBANK0:
   159                           	opt stack 0
   160                           
   161                           ;initializer for _randx
   162  003BBC  0001               	dw	1
   163  003BBE  0000               	dw	0
   164                           
   165                           ;initializer for _str
   166  003BC0  49                 	db	73
   167  003BC1  4E                 	db	78
   168  003BC2  49                 	db	73
   169  003BC3  54                 	db	84
   170  003BC4  5F                 	db	95
   171  003BC5  53                 	db	83
   172  003BC6  55                 	db	85
   173  003BC7  43                 	db	67
   174  003BC8  43                 	db	67
   175  003BC9  45                 	db	69
   176  003BCA  53                 	db	83
   177  003BCB  53                 	db	83
   178  003BCC  00                 	db	0
   179                           
   180                           	psect	mediumconst
   181  00FCD6                     __pmediumconst:
   182                           	opt stack 0
   183  00FCD6  00                 	db	0
   184  00FCD7                     _dpowers:
   185                           	opt stack 0
   186  00FCD7  0001               	dw	1
   187  00FCD9  000A               	dw	10
   188  00FCDB  0064               	dw	100
   189  00FCDD  03E8               	dw	1000
   190  00FCDF  2710               	dw	10000
   191  00FCE1                     __end_of_dpowers:
   192                           	opt stack 0
   193  00FCE1                     STR_12:
   194  00FCE1  55                 	db	85	;'U'
   195  00FCE2  49                 	db	73	;'I'
   196  00FCE3  44                 	db	68	;'D'
   197  00FCE4  20                 	db	32
   198  00FCE5  3D                 	db	61	;'='
   199  00FCE6  20                 	db	32
   200  00FCE7  25                 	db	37
   201  00FCE8  63                 	db	99	;'c'
   202  00FCE9  2C                 	db	44
   203  00FCEA  20                 	db	32
   204  00FCEB  73                 	db	115	;'s'
   205  00FCEC  74                 	db	116	;'t'
   206  00FCED  61                 	db	97	;'a'
   207  00FCEE  72                 	db	114	;'r'
   208  00FCEF  74                 	db	116	;'t'
   209  00FCF0  5F                 	db	95	;'_'
   210  00FCF1  70                 	db	112	;'p'
   211  00FCF2  74                 	db	116	;'t'
   212  00FCF3  20                 	db	32
   213  00FCF4  3D                 	db	61	;'='
   214  00FCF5  20                 	db	32
   215  00FCF6  25                 	db	37
   216  00FCF7  64                 	db	100	;'d'
   217  00FCF8  2C                 	db	44
   218  00FCF9  20                 	db	32
   219  00FCFA  65                 	db	101	;'e'
   220  00FCFB  6E                 	db	110	;'n'
   221  00FCFC  64                 	db	100	;'d'
   222  00FCFD  5F                 	db	95	;'_'
   223  00FCFE  70                 	db	112	;'p'
   224  00FCFF  74                 	db	116	;'t'
   225  00FD00  20                 	db	32
   226  00FD01  3D                 	db	61	;'='
   227  00FD02  20                 	db	32
   228  00FD03  25                 	db	37
   229  00FD04  64                 	db	100	;'d'
   230  00FD05  0D                 	db	13
   231  00FD06  0A                 	db	10
   232  00FD07  00                 	db	0
   233  00FD08                     STR_66:
   234  00FD08  63                 	db	99	;'c'
   235  00FD09  6D                 	db	109	;'m'
   236  00FD0A  64                 	db	100	;'d'
   237  00FD0B  5F                 	db	95	;'_'
   238  00FD0C  64                 	db	100	;'d'
   239  00FD0D  61                 	db	97	;'a'
   240  00FD0E  74                 	db	116	;'t'
   241  00FD0F  61                 	db	97	;'a'
   242  00FD10  2E                 	db	46
   243  00FD11  73                 	db	115	;'s'
   244  00FD12  74                 	db	116	;'t'
   245  00FD13  61                 	db	97	;'a'
   246  00FD14  72                 	db	114	;'r'
   247  00FD15  74                 	db	116	;'t'
   248  00FD16  5F                 	db	95	;'_'
   249  00FD17  63                 	db	99	;'c'
   250  00FD18  6F                 	db	111	;'o'
   251  00FD19  6C                 	db	108	;'l'
   252  00FD1A  20                 	db	32
   253  00FD1B  3D                 	db	61	;'='
   254  00FD1C  20                 	db	32
   255  00FD1D  25                 	db	37
   256  00FD1E  64                 	db	100	;'d'
   257  00FD1F  2C                 	db	44
   258  00FD20  0D                 	db	13
   259  00FD21  0A                 	db	10
   260  00FD22  00                 	db	0
   261  00FD23                     STR_64:
   262  00FD23  63                 	db	99	;'c'
   263  00FD24  6D                 	db	109	;'m'
   264  00FD25  64                 	db	100	;'d'
   265  00FD26  5F                 	db	95	;'_'
   266  00FD27  64                 	db	100	;'d'
   267  00FD28  61                 	db	97	;'a'
   268  00FD29  74                 	db	116	;'t'
   269  00FD2A  61                 	db	97	;'a'
   270  00FD2B  2E                 	db	46
   271  00FD2C  73                 	db	115	;'s'
   272  00FD2D  74                 	db	116	;'t'
   273  00FD2E  61                 	db	97	;'a'
   274  00FD2F  72                 	db	114	;'r'
   275  00FD30  74                 	db	116	;'t'
   276  00FD31  5F                 	db	95	;'_'
   277  00FD32  72                 	db	114	;'r'
   278  00FD33  6F                 	db	111	;'o'
   279  00FD34  77                 	db	119	;'w'
   280  00FD35  20                 	db	32
   281  00FD36  3D                 	db	61	;'='
   282  00FD37  20                 	db	32
   283  00FD38  25                 	db	37
   284  00FD39  64                 	db	100	;'d'
   285  00FD3A  2C                 	db	44
   286  00FD3B  0D                 	db	13
   287  00FD3C  0A                 	db	10
   288  00FD3D  00                 	db	0
   289  00FD3E                     STR_6:
   290  00FD3E  64                 	db	100	;'d'
   291  00FD3F  69                 	db	105	;'i'
   292  00FD40  73                 	db	115	;'s'
   293  00FD41  70                 	db	112	;'p'
   294  00FD42  6C                 	db	108	;'l'
   295  00FD43  61                 	db	97	;'a'
   296  00FD44  79                 	db	121	;'y'
   297  00FD45  5F                 	db	95	;'_'
   298  00FD46  63                 	db	99	;'c'
   299  00FD47  68                 	db	104	;'h'
   300  00FD48  61                 	db	97	;'a'
   301  00FD49  72                 	db	114	;'r'
   302  00FD4A  5F                 	db	95	;'_'
   303  00FD4B  63                 	db	99	;'c'
   304  00FD4C  6F                 	db	111	;'o'
   305  00FD4D  75                 	db	117	;'u'
   306  00FD4E  6E                 	db	110	;'n'
   307  00FD4F  74                 	db	116	;'t'
   308  00FD50  20                 	db	32
   309  00FD51  3D                 	db	61	;'='
   310  00FD52  20                 	db	32
   311  00FD53  25                 	db	37
   312  00FD54  64                 	db	100	;'d'
   313  00FD55  0D                 	db	13
   314  00FD56  0A                 	db	10
   315  00FD57  00                 	db	0
   316  00FD58                     STR_8:
   317  00FD58  65                 	db	101	;'e'
   318  00FD59  78                 	db	120	;'x'
   319  00FD5A  5F                 	db	95	;'_'
   320  00FD5B  73                 	db	115	;'s'
   321  00FD5C  70                 	db	112	;'p'
   322  00FD5D  20                 	db	32
   323  00FD5E  3C                 	db	60	;'<'
   324  00FD5F  3D                 	db	61	;'='
   325  00FD60  20                 	db	32
   326  00FD61  6E                 	db	110	;'n'
   327  00FD62  65                 	db	101	;'e'
   328  00FD63  77                 	db	119	;'w'
   329  00FD64  5F                 	db	95	;'_'
   330  00FD65  65                 	db	101	;'e'
   331  00FD66  70                 	db	112	;'p'
   332  00FD67  20                 	db	32
   333  00FD68  3C                 	db	60	;'<'
   334  00FD69  3D                 	db	61	;'='
   335  00FD6A  65                 	db	101	;'e'
   336  00FD6B  78                 	db	120	;'x'
   337  00FD6C  5F                 	db	95	;'_'
   338  00FD6D  65                 	db	101	;'e'
   339  00FD6E  70                 	db	112	;'p'
   340  00FD6F  0D                 	db	13
   341  00FD70  0A                 	db	10
   342  00FD71  00                 	db	0
   343  00FD72                     STR_7:
   344  00FD72  65                 	db	101	;'e'
   345  00FD73  78                 	db	120	;'x'
   346  00FD74  5F                 	db	95	;'_'
   347  00FD75  73                 	db	115	;'s'
   348  00FD76  70                 	db	112	;'p'
   349  00FD77  20                 	db	32
   350  00FD78  3C                 	db	60	;'<'
   351  00FD79  3D                 	db	61	;'='
   352  00FD7A  20                 	db	32
   353  00FD7B  6E                 	db	110	;'n'
   354  00FD7C  65                 	db	101	;'e'
   355  00FD7D  77                 	db	119	;'w'
   356  00FD7E  5F                 	db	95	;'_'
   357  00FD7F  73                 	db	115	;'s'
   358  00FD80  70                 	db	112	;'p'
   359  00FD81  20                 	db	32
   360  00FD82  3C                 	db	60	;'<'
   361  00FD83  3D                 	db	61	;'='
   362  00FD84  65                 	db	101	;'e'
   363  00FD85  78                 	db	120	;'x'
   364  00FD86  5F                 	db	95	;'_'
   365  00FD87  65                 	db	101	;'e'
   366  00FD88  70                 	db	112	;'p'
   367  00FD89  0D                 	db	13
   368  00FD8A  0A                 	db	10
   369  00FD8B  00                 	db	0
   370  00FD8C                     STR_71:
   371  00FD8C  63                 	db	99	;'c'
   372  00FD8D  6D                 	db	109	;'m'
   373  00FD8E  64                 	db	100	;'d'
   374  00FD8F  5F                 	db	95	;'_'
   375  00FD90  64                 	db	100	;'d'
   376  00FD91  61                 	db	97	;'a'
   377  00FD92  74                 	db	116	;'t'
   378  00FD93  61                 	db	97	;'a'
   379  00FD94  2E                 	db	46
   380  00FD95  65                 	db	101	;'e'
   381  00FD96  6E                 	db	110	;'n'
   382  00FD97  64                 	db	100	;'d'
   383  00FD98  5F                 	db	95	;'_'
   384  00FD99  63                 	db	99	;'c'
   385  00FD9A  6F                 	db	111	;'o'
   386  00FD9B  6C                 	db	108	;'l'
   387  00FD9C  20                 	db	32
   388  00FD9D  3D                 	db	61	;'='
   389  00FD9E  20                 	db	32
   390  00FD9F  25                 	db	37
   391  00FDA0  64                 	db	100	;'d'
   392  00FDA1  2C                 	db	44
   393  00FDA2  0D                 	db	13
   394  00FDA3  0A                 	db	10
   395  00FDA4  00                 	db	0
   396  00FDA5                     STR_68:
   397  00FDA5  63                 	db	99	;'c'
   398  00FDA6  6D                 	db	109	;'m'
   399  00FDA7  64                 	db	100	;'d'
   400  00FDA8  5F                 	db	95	;'_'
   401  00FDA9  64                 	db	100	;'d'
   402  00FDAA  61                 	db	97	;'a'
   403  00FDAB  74                 	db	116	;'t'
   404  00FDAC  61                 	db	97	;'a'
   405  00FDAD  2E                 	db	46
   406  00FDAE  65                 	db	101	;'e'
   407  00FDAF  6E                 	db	110	;'n'
   408  00FDB0  64                 	db	100	;'d'
   409  00FDB1  5F                 	db	95	;'_'
   410  00FDB2  72                 	db	114	;'r'
   411  00FDB3  6F                 	db	111	;'o'
   412  00FDB4  77                 	db	119	;'w'
   413  00FDB5  20                 	db	32
   414  00FDB6  3D                 	db	61	;'='
   415  00FDB7  20                 	db	32
   416  00FDB8  25                 	db	37
   417  00FDB9  64                 	db	100	;'d'
   418  00FDBA  2C                 	db	44
   419  00FDBB  0D                 	db	13
   420  00FDBC  0A                 	db	10
   421  00FDBD  00                 	db	0
   422  00FDBE                     STR_23:
   423  00FDBE  64                 	db	100	;'d'
   424  00FDBF  69                 	db	105	;'i'
   425  00FDC0  73                 	db	115	;'s'
   426  00FDC1  70                 	db	112	;'p'
   427  00FDC2  6C                 	db	108	;'l'
   428  00FDC3  61                 	db	97	;'a'
   429  00FDC4  79                 	db	121	;'y'
   430  00FDC5  5F                 	db	95	;'_'
   431  00FDC6  66                 	db	102	;'f'
   432  00FDC7  72                 	db	114	;'r'
   433  00FDC8  71                 	db	113	;'q'
   434  00FDC9  20                 	db	32
   435  00FDCA  3D                 	db	61	;'='
   436  00FDCB  20                 	db	32
   437  00FDCC  25                 	db	37
   438  00FDCD  64                 	db	100	;'d'
   439  00FDCE  0D                 	db	13
   440  00FDCF  0A                 	db	10
   441  00FDD0  00                 	db	0
   442  00FDD1                     STR_17:
   443  00FDD1  73                 	db	115	;'s'
   444  00FDD2  69                 	db	105	;'i'
   445  00FDD3  7A                 	db	122	;'z'
   446  00FDD4  65                 	db	101	;'e'
   447  00FDD5  6F                 	db	111	;'o'
   448  00FDD6  66                 	db	102	;'f'
   449  00FDD7  28                 	db	40
   450  00FDD8  73                 	db	115	;'s'
   451  00FDD9  74                 	db	116	;'t'
   452  00FDDA  72                 	db	114	;'r'
   453  00FDDB  29                 	db	41
   454  00FDDC  20                 	db	32
   455  00FDDD  3D                 	db	61	;'='
   456  00FDDE  20                 	db	32
   457  00FDDF  25                 	db	37
   458  00FDE0  64                 	db	100	;'d'
   459  00FDE1  0D                 	db	13
   460  00FDE2  0A                 	db	10
   461  00FDE3  00                 	db	0
   462  00FDE4                     STR_141:
   463  00FDE4  49                 	db	73	;'I'
   464  00FDE5  6E                 	db	110	;'n'
   465  00FDE6  69                 	db	105	;'i'
   466  00FDE7  74                 	db	116	;'t'
   467  00FDE8  5F                 	db	95	;'_'
   468  00FDE9  63                 	db	99	;'c'
   469  00FDEA  6F                 	db	111	;'o'
   470  00FDEB  6D                 	db	109	;'m'
   471  00FDEC  70                 	db	112	;'p'
   472  00FDED  6C                 	db	108	;'l'
   473  00FDEE  65                 	db	101	;'e'
   474  00FDEF  74                 	db	116	;'t'
   475  00FDF0  65                 	db	101	;'e'
   476  00FDF1  2E                 	db	46
   477  00FDF2  2E                 	db	46
   478  00FDF3  0D                 	db	13
   479  00FDF4  0A                 	db	10
   480  00FDF5  00                 	db	0
   481  00FDF6                     STR_24:
   482  00FDF6  6F                 	db	111	;'o'
   483  00FDF7  76                 	db	118	;'v'
   484  00FDF8  65                 	db	101	;'e'
   485  00FDF9  72                 	db	114	;'r'
   486  00FDFA  5F                 	db	95	;'_'
   487  00FDFB  77                 	db	119	;'w'
   488  00FDFC  72                 	db	114	;'r'
   489  00FDFD  69                 	db	105	;'i'
   490  00FDFE  74                 	db	116	;'t'
   491  00FDFF  65                 	db	101	;'e'
   492  00FE00  20                 	db	32
   493  00FE01  3D                 	db	61	;'='
   494  00FE02  20                 	db	32
   495  00FE03  25                 	db	37
   496  00FE04  64                 	db	100	;'d'
   497  00FE05  0D                 	db	13
   498  00FE06  0A                 	db	10
   499  00FE07  00                 	db	0
   500  00FE08                     STR_3:
   501  00FE08  73                 	db	115	;'s'
   502  00FE09  74                 	db	116	;'t'
   503  00FE0A  72                 	db	114	;'r'
   504  00FE0B  69                 	db	105	;'i'
   505  00FE0C  6E                 	db	110	;'n'
   506  00FE0D  67                 	db	103	;'g'
   507  00FE0E  5F                 	db	95	;'_'
   508  00FE0F  63                 	db	99	;'c'
   509  00FE10  6F                 	db	111	;'o'
   510  00FE11  75                 	db	117	;'u'
   511  00FE12  6E                 	db	110	;'n'
   512  00FE13  74                 	db	116	;'t'
   513  00FE14  20                 	db	32
   514  00FE15  3D                 	db	61	;'='
   515  00FE16  20                 	db	32
   516  00FE17  25                 	db	37
   517  00FE18  64                 	db	100	;'d'
   518  00FE19  00                 	db	0
   519  00FE1A                     STR_22:
   520  00FE1A  64                 	db	100	;'d'
   521  00FE1B  69                 	db	105	;'i'
   522  00FE1C  72                 	db	114	;'r'
   523  00FE1D  65                 	db	101	;'e'
   524  00FE1E  63                 	db	99	;'c'
   525  00FE1F  74                 	db	116	;'t'
   526  00FE20  69                 	db	105	;'i'
   527  00FE21  6F                 	db	111	;'o'
   528  00FE22  6E                 	db	110	;'n'
   529  00FE23  20                 	db	32
   530  00FE24  3D                 	db	61	;'='
   531  00FE25  20                 	db	32
   532  00FE26  25                 	db	37
   533  00FE27  64                 	db	100	;'d'
   534  00FE28  0D                 	db	13
   535  00FE29  0A                 	db	10
   536  00FE2A  00                 	db	0
   537  00FE2B                     STR_4:
   538  00FE2B  75                 	db	117	;'u'
   539  00FE2C  69                 	db	105	;'i'
   540  00FE2D  64                 	db	100	;'d'
   541  00FE2E  5F                 	db	95	;'_'
   542  00FE2F  72                 	db	114	;'r'
   543  00FE30  61                 	db	97	;'a'
   544  00FE31  6E                 	db	110	;'n'
   545  00FE32  67                 	db	103	;'g'
   546  00FE33  65                 	db	101	;'e'
   547  00FE34  20                 	db	32
   548  00FE35  3D                 	db	61	;'='
   549  00FE36  20                 	db	32
   550  00FE37  25                 	db	37
   551  00FE38  64                 	db	100	;'d'
   552  00FE39  0D                 	db	13
   553  00FE3A  0A                 	db	10
   554  00FE3B  00                 	db	0
   555  00FE3C  6D                 	db	109	;'m'
   556  00FE3D  69                 	db	105	;'i'
   557  00FE3E  64                 	db	100	;'d'
   558  00FE3F  5F                 	db	95	;'_'
   559  00FE40  63                 	db	99	;'c'
   560  00FE41  68                 	db	104	;'h'
   561  00FE42  61                 	db	97	;'a'
   562  00FE43  72                 	db	114	;'r'
   563  00FE44  20                 	db	32
   564  00FE45  3D                 	db	61	;'='
   565  00FE46  20                 	db	32
   566  00FE47  25                 	db	37
   567  00FE48  64                 	db	100	;'d'
   568  00FE49  0D                 	db	13
   569  00FE4A  0A                 	db	10
   570  00FE4B  00                 	db	0
   571  00FE4C  25                 	db	37
   572  00FE4D  73                 	db	115	;'s'
   573  00FE4E  2C                 	db	44
   574  00FE4F  20                 	db	32
   575  00FE50  73                 	db	115	;'s'
   576  00FE51  74                 	db	116	;'t'
   577  00FE52  72                 	db	114	;'r'
   578  00FE53  6C                 	db	108	;'l'
   579  00FE54  65                 	db	101	;'e'
   580  00FE55  6E                 	db	110	;'n'
   581  00FE56  20                 	db	32
   582  00FE57  25                 	db	37
   583  00FE58  64                 	db	100	;'d'
   584  00FE59  0D                 	db	13
   585  00FE5A  0A                 	db	10
   586  00FE5B  00                 	db	0
   587  00FE5C                     STR_14:
   588  00FE5C  63                 	db	99	;'c'
   589  00FE5D  6F                 	db	111	;'o'
   590  00FE5E  6E                 	db	110	;'n'
   591  00FE5F  66                 	db	102	;'f'
   592  00FE60  6C                 	db	108	;'l'
   593  00FE61  69                 	db	105	;'i'
   594  00FE62  63                 	db	99	;'c'
   595  00FE63  74                 	db	116	;'t'
   596  00FE64  3A                 	db	58	;':'
   597  00FE65  20                 	db	32
   598  00FE66  75                 	db	117	;'u'
   599  00FE67  69                 	db	105	;'i'
   600  00FE68  64                 	db	100	;'d'
   601  00FE69  0D                 	db	13
   602  00FE6A  0A                 	db	10
   603  00FE6B  00                 	db	0
   604  00FE6C                     STR_132:
   605  00FE6C  45                 	db	69	;'E'
   606  00FE6D  52                 	db	82	;'R'
   607  00FE6E  52                 	db	82	;'R'
   608  00FE6F  5F                 	db	95	;'_'
   609  00FE70  53                 	db	83	;'S'
   610  00FE71  43                 	db	67	;'C'
   611  00FE72  52                 	db	82	;'R'
   612  00FE73  4F                 	db	79	;'O'
   613  00FE74  4C                 	db	76	;'L'
   614  00FE75  4C                 	db	76	;'L'
   615  00FE76  5F                 	db	95	;'_'
   616  00FE77  53                 	db	83	;'S'
   617  00FE78  45                 	db	69	;'E'
   618  00FE79  54                 	db	84	;'T'
   619  00FE7A  00                 	db	0
   620  00FE7B                     STR_58:
   621  00FE7B  73                 	db	115	;'s'
   622  00FE7C  63                 	db	99	;'c'
   623  00FE7D  72                 	db	114	;'r'
   624  00FE7E  6F                 	db	111	;'o'
   625  00FE7F  6C                 	db	108	;'l'
   626  00FE80  6C                 	db	108	;'l'
   627  00FE81  20                 	db	32
   628  00FE82  3D                 	db	61	;'='
   629  00FE83  20                 	db	32
   630  00FE84  25                 	db	37
   631  00FE85  64                 	db	100	;'d'
   632  00FE86  2C                 	db	44
   633  00FE87  20                 	db	32
   634  00FE88  00                 	db	0
   635  00FE89                     STR_95:
   636  00FE89  0D                 	db	13
   637  00FE8A  0A                 	db	10
   638  00FE8B  25                 	db	37
   639  00FE8C  73                 	db	115	;'s'
   640  00FE8D  2E                 	db	46
   641  00FE8E  2E                 	db	46
   642  00FE8F  2C                 	db	44
   643  00FE90  20                 	db	32
   644  00FE91  4F                 	db	79	;'O'
   645  00FE92  4B                 	db	75	;'K'
   646  00FE93  0D                 	db	13
   647  00FE94  0A                 	db	10
   648  00FE95  00                 	db	0
   649  00FE96                     STR_62:
   650  00FE96  75                 	db	117	;'u'
   651  00FE97  69                 	db	105	;'i'
   652  00FE98  64                 	db	100	;'d'
   653  00FE99  20                 	db	32
   654  00FE9A  3D                 	db	61	;'='
   655  00FE9B  20                 	db	32
   656  00FE9C  25                 	db	37
   657  00FE9D  64                 	db	100	;'d'
   658  00FE9E  2C                 	db	44
   659  00FE9F  0D                 	db	13
   660  00FEA0  0A                 	db	10
   661  00FEA1  00                 	db	0
   662  00FEA2                     STR_26:
   663  00FEA2  43                 	db	67	;'C'
   664  00FEA3  6F                 	db	111	;'o'
   665  00FEA4  6C                 	db	108	;'l'
   666  00FEA5  32                 	db	50	;'2'
   667  00FEA6  20                 	db	32
   668  00FEA7  3D                 	db	61	;'='
   669  00FEA8  20                 	db	32
   670  00FEA9  25                 	db	37
   671  00FEAA  64                 	db	100	;'d'
   672  00FEAB  0D                 	db	13
   673  00FEAC  0A                 	db	10
   674  00FEAD  00                 	db	0
   675  00FEAE                     STR_21:
   676  00FEAE  72                 	db	114	;'r'
   677  00FEAF  6F                 	db	111	;'o'
   678  00FEB0  77                 	db	119	;'w'
   679  00FEB1  32                 	db	50	;'2'
   680  00FEB2  20                 	db	32
   681  00FEB3  3D                 	db	61	;'='
   682  00FEB4  20                 	db	32
   683  00FEB5  25                 	db	37
   684  00FEB6  64                 	db	100	;'d'
   685  00FEB7  0D                 	db	13
   686  00FEB8  0A                 	db	10
   687  00FEB9  00                 	db	0
   688  00FEBA                     STR_138:
   689  00FEBA  49                 	db	73	;'I'
   690  00FEBB  6E                 	db	110	;'n'
   691  00FEBC  69                 	db	105	;'i'
   692  00FEBD  74                 	db	116	;'t'
   693  00FEBE  5F                 	db	95	;'_'
   694  00FEBF  44                 	db	68	;'D'
   695  00FEC0  6F                 	db	111	;'o'
   696  00FEC1  6E                 	db	110	;'n'
   697  00FEC2  65                 	db	101	;'e'
   698  00FEC3  0D                 	db	13
   699  00FEC4  0A                 	db	10
   700  00FEC5  00                 	db	0
   701  00FEC6                     STR_25:
   702  00FEC6  63                 	db	99	;'c'
   703  00FEC7  6F                 	db	111	;'o'
   704  00FEC8  6C                 	db	108	;'l'
   705  00FEC9  31                 	db	49	;'1'
   706  00FECA  20                 	db	32
   707  00FECB  3D                 	db	61	;'='
   708  00FECC  20                 	db	32
   709  00FECD  25                 	db	37
   710  00FECE  73                 	db	115	;'s'
   711  00FECF  0D                 	db	13
   712  00FED0  0A                 	db	10
   713  00FED1  00                 	db	0
   714  00FED2                     STR_20:
   715  00FED2  72                 	db	114	;'r'
   716  00FED3  6F                 	db	111	;'o'
   717  00FED4  77                 	db	119	;'w'
   718  00FED5  31                 	db	49	;'1'
   719  00FED6  20                 	db	32
   720  00FED7  3D                 	db	61	;'='
   721  00FED8  20                 	db	32
   722  00FED9  25                 	db	37
   723  00FEDA  73                 	db	115	;'s'
   724  00FEDB  0D                 	db	13
   725  00FEDC  0A                 	db	10
   726  00FEDD  00                 	db	0
   727  00FEDE                     STR_44:
   728  00FEDE  74                 	db	116	;'t'
   729  00FEDF  65                 	db	101	;'e'
   730  00FEE0  6D                 	db	109	;'m'
   731  00FEE1  70                 	db	112	;'p'
   732  00FEE2  20                 	db	32
   733  00FEE3  3D                 	db	61	;'='
   734  00FEE4  20                 	db	32
   735  00FEE5  25                 	db	37
   736  00FEE6  73                 	db	115	;'s'
   737  00FEE7  2C                 	db	44
   738  00FEE8  20                 	db	32
   739  00FEE9  00                 	db	0
   740  00FEEA                     STR_130:
   741  00FEEA  45                 	db	69	;'E'
   742  00FEEB  52                 	db	82	;'R'
   743  00FEEC  52                 	db	82	;'R'
   744  00FEED  5F                 	db	95	;'_'
   745  00FEEE  52                 	db	82	;'R'
   746  00FEEF  4F                 	db	79	;'O'
   747  00FEF0  57                 	db	87	;'W'
   748  00FEF1  5F                 	db	95	;'_'
   749  00FEF2  43                 	db	67	;'C'
   750  00FEF3  4F                 	db	79	;'O'
   751  00FEF4  4C                 	db	76	;'L'
   752  00FEF5  00                 	db	0
   753  00FEF6                     STR_137:
   754  00FEF6  45                 	db	69	;'E'
   755  00FEF7  52                 	db	82	;'R'
   756  00FEF8  52                 	db	82	;'R'
   757  00FEF9  5F                 	db	95	;'_'
   758  00FEFA  43                 	db	67	;'C'
   759  00FEFB  4D                 	db	77	;'M'
   760  00FEFC  44                 	db	68	;'D'
   761  00FEFD  5F                 	db	95	;'_'
   762  00FEFE  4C                 	db	76	;'L'
   763  00FEFF  45                 	db	69	;'E'
   764  00FF00  4E                 	db	78	;'N'
   765  00FF01  00                 	db	0
   766  00FF02                     STR_128:
   767  00FF02  45                 	db	69	;'E'
   768  00FF03  52                 	db	82	;'R'
   769  00FF04  52                 	db	82	;'R'
   770  00FF05  5F                 	db	95	;'_'
   771  00FF06  53                 	db	83	;'S'
   772  00FF07  54                 	db	84	;'T'
   773  00FF08  52                 	db	82	;'R'
   774  00FF09  5F                 	db	95	;'_'
   775  00FF0A  53                 	db	83	;'S'
   776  00FF0B  45                 	db	69	;'E'
   777  00FF0C  54                 	db	84	;'T'
   778  00FF0D  00                 	db	0
   779  00FF0E                     STR_109:
   780  00FF0E  25                 	db	37
   781  00FF0F  64                 	db	100	;'d'
   782  00FF10  2C                 	db	44
   783  00FF11  25                 	db	37
   784  00FF12  63                 	db	99	;'c'
   785  00FF13  2D                 	db	45
   786  00FF14  25                 	db	37
   787  00FF15  63                 	db	99	;'c'
   788  00FF16  0D                 	db	13
   789  00FF17  0A                 	db	10
   790  00FF18  00                 	db	0
   791  00FF19                     STR_70:
   792  00FF19  63                 	db	99	;'c'
   793  00FF1A  6F                 	db	111	;'o'
   794  00FF1B  6C                 	db	108	;'l'
   795  00FF1C  20                 	db	32
   796  00FF1D  3D                 	db	61	;'='
   797  00FF1E  20                 	db	32
   798  00FF1F  25                 	db	37
   799  00FF20  73                 	db	115	;'s'
   800  00FF21  0D                 	db	13
   801  00FF22  0A                 	db	10
   802  00FF23  00                 	db	0
   803  00FF24                     STR_49:
   804  00FF24  73                 	db	115	;'s'
   805  00FF25  74                 	db	116	;'t'
   806  00FF26  72                 	db	114	;'r'
   807  00FF27  20                 	db	32
   808  00FF28  3D                 	db	61	;'='
   809  00FF29  20                 	db	32
   810  00FF2A  25                 	db	37
   811  00FF2B  73                 	db	115	;'s'
   812  00FF2C  0D                 	db	13
   813  00FF2D  0A                 	db	10
   814  00FF2E  00                 	db	0
   815  00FF2F                     STR_47:
   816  00FF2F  75                 	db	117	;'u'
   817  00FF30  69                 	db	105	;'i'
   818  00FF31  64                 	db	100	;'d'
   819  00FF32  20                 	db	32
   820  00FF33  3D                 	db	61	;'='
   821  00FF34  20                 	db	32
   822  00FF35  25                 	db	37
   823  00FF36  64                 	db	100	;'d'
   824  00FF37  2C                 	db	44
   825  00FF38  20                 	db	32
   826  00FF39  00                 	db	0
   827  00FF3A                     STR_77:
   828  00FF3A  64                 	db	100	;'d'
   829  00FF3B  61                 	db	97	;'a'
   830  00FF3C  74                 	db	116	;'t'
   831  00FF3D  61                 	db	97	;'a'
   832  00FF3E  3D                 	db	61	;'='
   833  00FF3F  25                 	db	37
   834  00FF40  73                 	db	115	;'s'
   835  00FF41  0D                 	db	13
   836  00FF42  0A                 	db	10
   837  00FF43  00                 	db	0
   838  00FF44                     STR_51:
   839  00FF44  25                 	db	37
   840  00FF45  73                 	db	115	;'s'
   841  00FF46  2E                 	db	46
   842  00FF47  2E                 	db	46
   843  00FF48  2E                 	db	46
   844  00FF49  34                 	db	52	;'4'
   845  00FF4A  0D                 	db	13
   846  00FF4B  0A                 	db	10
   847  00FF4C  00                 	db	0
   848  00FF4D                     STR_54:
   849  00FF4D  25                 	db	37
   850  00FF4E  73                 	db	115	;'s'
   851  00FF4F  2E                 	db	46
   852  00FF50  2E                 	db	46
   853  00FF51  2E                 	db	46
   854  00FF52  35                 	db	53	;'5'
   855  00FF53  0D                 	db	13
   856  00FF54  0A                 	db	10
   857  00FF55  00                 	db	0
   858  00FF56                     STR_57:
   859  00FF56  25                 	db	37
   860  00FF57  73                 	db	115	;'s'
   861  00FF58  2E                 	db	46
   862  00FF59  2E                 	db	46
   863  00FF5A  2E                 	db	46
   864  00FF5B  36                 	db	54	;'6'
   865  00FF5C  0D                 	db	13
   866  00FF5D  0A                 	db	10
   867  00FF5E  00                 	db	0
   868  00FF5F                     STR_75:
   869  00FF5F  43                 	db	67	;'C'
   870  00FF60  4D                 	db	77	;'M'
   871  00FF61  44                 	db	68	;'D'
   872  00FF62  3D                 	db	61	;'='
   873  00FF63  25                 	db	37
   874  00FF64  73                 	db	115	;'s'
   875  00FF65  0D                 	db	13
   876  00FF66  0A                 	db	10
   877  00FF67  00                 	db	0
   878  00FF68                     STR_2:
   879  00FF68  63                 	db	99	;'c'
   880  00FF69  6F                 	db	111	;'o'
   881  00FF6A  6C                 	db	108	;'l'
   882  00FF6B  20                 	db	32
   883  00FF6C  3D                 	db	61	;'='
   884  00FF6D  20                 	db	32
   885  00FF6E  25                 	db	37
   886  00FF6F  64                 	db	100	;'d'
   887  00FF70  00                 	db	0
   888  00FF71                     STR_1:
   889  00FF71  72                 	db	114	;'r'
   890  00FF72  6F                 	db	111	;'o'
   891  00FF73  77                 	db	119	;'w'
   892  00FF74  20                 	db	32
   893  00FF75  3D                 	db	61	;'='
   894  00FF76  20                 	db	32
   895  00FF77  25                 	db	37
   896  00FF78  64                 	db	100	;'d'
   897  00FF79  00                 	db	0
   898  00FF7A                     STR_34:
   899  00FF7A  2E                 	db	46
   900  00FF7B  2E                 	db	46
   901  00FF7C  2E                 	db	46
   902  00FF7D  2E                 	db	46
   903  00FF7E  2E                 	db	46
   904  00FF7F  0D                 	db	13
   905  00FF80  0A                 	db	10
   906  00FF81  00                 	db	0
   907  00FF82                     STR_27:
   908  00FF82  25                 	db	37
   909  00FF83  73                 	db	115	;'s'
   910  00FF84  2E                 	db	46
   911  00FF85  2E                 	db	46
   912  00FF86  32                 	db	50	;'2'
   913  00FF87  0D                 	db	13
   914  00FF88  0A                 	db	10
   915  00FF89  00                 	db	0
   916  00FF8A                     STR_50:
   917  00FF8A  53                 	db	83	;'S'
   918  00FF8B  44                 	db	68	;'D'
   919  00FF8C  53                 	db	83	;'S'
   920  00FF8D  43                 	db	67	;'C'
   921  00FF8E  52                 	db	82	;'R'
   922  00FF8F  4F                 	db	79	;'O'
   923  00FF90  4C                 	db	76	;'L'
   924  00FF91  00                 	db	0
   925  00FF92                     STR_142:
   926  00FF92  28                 	db	40
   927  00FF93  6E                 	db	110	;'n'
   928  00FF94  75                 	db	117	;'u'
   929  00FF95  6C                 	db	108	;'l'
   930  00FF96  6C                 	db	108	;'l'
   931  00FF97  29                 	db	41
   932  00FF98  00                 	db	0
   933  00FF99                     STR_38:
   934  00FF99  25                 	db	37
   935  00FF9A  73                 	db	115	;'s'
   936  00FF9B  2E                 	db	46
   937  00FF9C  2E                 	db	46
   938  00FF9D  0D                 	db	13
   939  00FF9E  0A                 	db	10
   940  00FF9F  00                 	db	0
   941  00FFA0                     STR_127:
   942  00FFA0  0D                 	db	13
   943  00FFA1  0A                 	db	10
   944  00FFA2  25                 	db	37
   945  00FFA3  73                 	db	115	;'s'
   946  00FFA4  0D                 	db	13
   947  00FFA5  0A                 	db	10
   948  00FFA6  00                 	db	0
   949  00FFA7                     STR_29:
   950  00FFA7  2D                 	db	45
   951  00FFA8  27                 	db	39
   952  00FFA9  2C                 	db	44
   953  00FFAA  20                 	db	32
   954  00FFAB  2F                 	db	47
   955  00FFAC  3D                 	db	61	;'='
   956  00FFAD  00                 	db	0
   957  00FFAE                     STR_59:
   958  00FFAE  53                 	db	83	;'S'
   959  00FFAF  44                 	db	68	;'D'
   960  00FFB0  53                 	db	83	;'S'
   961  00FFB1  45                 	db	69	;'E'
   962  00FFB2  52                 	db	82	;'R'
   963  00FFB3  43                 	db	67	;'C'
   964  00FFB4  00                 	db	0
   965  00FFB5                     STR_72:
   966  00FFB5  55                 	db	85	;'U'
   967  00FFB6  50                 	db	80	;'P'
   968  00FFB7  44                 	db	68	;'D'
   969  00FFB8  41                 	db	65	;'A'
   970  00FFB9  54                 	db	84	;'T'
   971  00FFBA  45                 	db	69	;'E'
   972  00FFBB  00                 	db	0
   973  00FFBC                     STR_32:
   974  00FFBC  4C                 	db	76	;'L'
   975  00FFBD  43                 	db	67	;'C'
   976  00FFBE  44                 	db	68	;'D'
   977  00FFBF  53                 	db	83	;'S'
   978  00FFC0  3F                 	db	63	;'?'
   979  00FFC1  00                 	db	0
   980  00FFC2                     STR_40:
   981  00FFC2  47                 	db	71	;'G'
   982  00FFC3  4D                 	db	77	;'M'
   983  00FFC4  44                 	db	68	;'D'
   984  00FFC5  53                 	db	83	;'S'
   985  00FFC6  3F                 	db	63	;'?'
   986  00FFC7  00                 	db	0
   987  00FFC8                     STR_124:
   988  00FFC8  45                 	db	69	;'E'
   989  00FFC9  52                 	db	82	;'R'
   990  00FFCA  52                 	db	82	;'R'
   991  00FFCB  4F                 	db	79	;'O'
   992  00FFCC  52                 	db	82	;'R'
   993  00FFCD  00                 	db	0
   994  00FFCE                     STR_42:
   995  00FFCE  53                 	db	83	;'S'
   996  00FFCF  44                 	db	68	;'D'
   997  00FFD0  53                 	db	83	;'S'
   998  00FFD1  54                 	db	84	;'T'
   999  00FFD2  52                 	db	82	;'R'
  1000  00FFD3  00                 	db	0
  1001  00FFD4                     STR_136:
  1002  00FFD4  4B                 	db	75	;'K'
  1003  00FFD5  4C                 	db	76	;'L'
  1004  00FFD6  4D                 	db	77	;'M'
  1005  00FFD7  2B                 	db	43
  1006  00FFD8  00                 	db	0
  1007  00FFD9                     STR_73:
  1008  00FFD9  53                 	db	83	;'S'
  1009  00FFDA  53                 	db	83	;'S'
  1010  00FFDB  54                 	db	84	;'T'
  1011  00FFDC  52                 	db	82	;'R'
  1012  00FFDD  00                 	db	0
  1013  00FFDE                     STR_35:
  1014  00FFDE  4C                 	db	76	;'L'
  1015  00FFDF  43                 	db	67	;'C'
  1016  00FFE0  44                 	db	68	;'D'
  1017  00FFE1  53                 	db	83	;'S'
  1018  00FFE2  00                 	db	0
  1019  00FFE3                     STR_15:
  1020  00FFE3  25                 	db	37
  1021  00FFE4  63                 	db	99	;'c'
  1022  00FFE5  2C                 	db	44
  1023  00FFE6  20                 	db	32
  1024  00FFE7  00                 	db	0
  1025  00FFE8                     STR_5:
  1026  00FFE8  34                 	db	52	;'4'
  1027  00FFE9  2C                 	db	44
  1028  00FFEA  32                 	db	50	;'2'
  1029  00FFEB  30                 	db	48	;'0'
  1030  00FFEC  00                 	db	0
  1031  00FFED                     STR_28:
  1032  00FFED  4D                 	db	77	;'M'
  1033  00FFEE  43                 	db	67	;'C'
  1034  00FFEF  3F                 	db	63	;'?'
  1035  00FFF0  00                 	db	0
  1036  00FFF1                     STR_30:
  1037  00FFF1  4D                 	db	77	;'M'
  1038  00FFF2  52                 	db	82	;'R'
  1039  00FFF3  3F                 	db	63	;'?'
  1040  00FFF4  00                 	db	0
  1041  00FFF5                     STR_90:
  1042  00FFF5  4B                 	db	75	;'K'
  1043  00FFF6  4C                 	db	76	;'L'
  1044  00FFF7  4D                 	db	77	;'M'
  1045  00FFF8  00                 	db	0
  1046  00FFF9                     STR_134:
  1047  00FFF9  25                 	db	37
  1048  00FFFA  63                 	db	99	;'c'
  1049  00FFFB  00                 	db	0
  1050  00FFFC                     STR_48:
  1051  00FFFC  2C                 	db	44
  1052  00FFFD  00                 	db	0
  1053  0000                     
  1054                           ; #config settings
  1055  00FFFE  00                 	db	0	; dummy byte at the end
  1056  0000                     
  1057                           	psect	nvCOMRAM
  1058  000049                     __pnvCOMRAM:
  1059                           	opt stack 0
  1060  000049                     _timer0ReloadVal:
  1061                           	opt stack 0
  1062  000049                     	ds	2
  1063                           
  1064                           	psect	nvBANK0
  1065  0000F6                     __pnvBANK0:
  1066                           	opt stack 0
  1067  0000F6                     _TMR0_InterruptHandler:
  1068                           	opt stack 0
  1069  0000F6                     	ds	2
  1070  0000F8                     _timer1ReloadVal:
  1071                           	opt stack 0
  1072  0000F8                     	ds	2
  1073  0000FA                     _timer5ReloadVal:
  1074                           	opt stack 0
  1075  0000FA                     	ds	2
  1076  0000FC                     _eusart1TxBufferRemaining:
  1077                           	opt stack 0
  1078  0000FC                     	ds	1
  1079  0000                     _TMR5	set	3919
  1080  0000                     _T5GCONbits	set	3917
  1081  0000                     _T5CONbits	set	3918
  1082  0000                     _TMR5L	set	3919
  1083  0000                     _TMR5H	set	3920
  1084  0000                     _T5GCON	set	3917
  1085  0000                     _T5CON	set	3918
  1086  0000                     _ANSELA	set	3896
  1087  0000                     _ANSELE	set	3900
  1088  0000                     _ANSELD	set	3899
  1089  0000                     _ANSELB	set	3897
  1090  0000                     _ANSELC	set	3898
  1091  0000                     _TMR1	set	4046
  1092  0000                     _LATEbits	set	3981
  1093  0000                     _PORTD	set	3971
  1094  0000                     _PORTDbits	set	3971
  1095  0000                     _PORTAbits	set	3968
  1096  0000                     _T0CONbits	set	4053
  1097  0000                     _TMR0L	set	4054
  1098  0000                     _TMR0H	set	4055
  1099  0000                     _T0CON	set	4053
  1100  0000                     _T1GCONbits	set	4044
  1101  0000                     _T1CONbits	set	4045
  1102  0000                     _TMR1L	set	4046
  1103  0000                     _TMR1H	set	4047
  1104  0000                     _T1GCON	set	4044
  1105  0000                     _T1CON	set	4045
  1106  0000                     _RCREG1	set	4014
  1107  0000                     _RCSTA1bits	set	4011
  1108  0000                     _TXREG1	set	4013
  1109  0000                     _SPBRGH1	set	4016
  1110  0000                     _SPBRG1	set	4015
  1111  0000                     _TXSTA1	set	4012
  1112  0000                     _RCSTA1	set	4011
  1113  0000                     _BAUDCON1	set	4024
  1114  0000                     _OSCTUNE	set	3995
  1115  0000                     _OSCCON2	set	4050
  1116  0000                     _OSCCON	set	4051
  1117  0000                     _PIR5bits	set	3966
  1118  0000                     _PIR1bits	set	3998
  1119  0000                     _PIE1bits	set	3997
  1120  0000                     _INTCONbits	set	4082
  1121  0000                     _RCONbits	set	4048
  1122  0000                     _INTCON2bits	set	4081
  1123  0000                     _WPUB	set	3937
  1124  0000                     _TRISD	set	3989
  1125  0000                     _TRISC	set	3988
  1126  0000                     _TRISB	set	3987
  1127  0000                     _TRISA	set	3986
  1128  0000                     _TRISE	set	3990
  1129  0000                     _LATC	set	3979
  1130  0000                     _LATB	set	3978
  1131  0000                     _LATA	set	3977
  1132  0000                     _LATD	set	3980
  1133  0000                     _LATE	set	3981
  1134                           
  1135                           	psect	cinit
  1136  003224                     __pcinit:
  1137                           	opt stack 0
  1138  003224                     start_initialization:
  1139                           	opt stack 0
  1140  003224                     __initialization:
  1141                           	opt stack 0
  1142                           
  1143                           ; Initialize objects allocated to BANK0 (17 bytes)
  1144                           ; load TBLPTR registers with __pidataBANK0
  1145  003224  0EBC               	movlw	low __pidataBANK0
  1146  003226  6EF6               	movwf	tblptrl,c
  1147  003228  0E3B               	movlw	high __pidataBANK0
  1148  00322A  6EF7               	movwf	tblptrh,c
  1149  00322C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1150  00322E  6EF8               	movwf	tblptru,c
  1151  003230  EE00  F0E5         	lfsr	0,__pdataBANK0
  1152  003234  EE10 F011          	lfsr	1,17
  1153  003238                     copy_data0:
  1154  003238  0009               	tblrd		*+
  1155  00323A  CFF5 FFEE          	movff	tablat,postinc0
  1156  00323E  50E5               	movf	postdec1,w,c
  1157  003240  50E1               	movf	fsr1l,w,c
  1158  003242  E1FA               	bnz	copy_data0
  1159                           
  1160                           ; Initialize objects allocated to COMRAM (1 bytes)
  1161                           ; load TBLPTR registers with __pidataCOMRAM
  1162  003244  0EBE               	movlw	low __pidataCOMRAM
  1163  003246  6EF6               	movwf	tblptrl,c
  1164  003248  0E3C               	movlw	high __pidataCOMRAM
  1165  00324A  6EF7               	movwf	tblptrh,c
  1166  00324C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1167  00324E  6EF8               	movwf	tblptru,c
  1168  003250  0009               	tblrd		*+	;fetch initializer
  1169  003252  CFF5 F04B          	movff	tablat,__pdataCOMRAM
  1170                           
  1171                           ; Clear objects allocated to BIGRAM (1100 bytes)
  1172  003256  EE02  F096         	lfsr	0,__pbssBIGRAM
  1173  00325A  EE14 F04C          	lfsr	1,1100
  1174  00325E                     clear_0:
  1175  00325E  6AEE               	clrf	postinc0,c
  1176  003260  50E5               	movf	postdec1,w,c
  1177  003262  50E1               	movf	fsr1l,w,c
  1178  003264  E1FC               	bnz	clear_0
  1179  003266  50E2               	movf	fsr1h,w,c
  1180  003268  E1FA               	bnz	clear_0
  1181                           
  1182                           ; Clear objects allocated to BANK2 (150 bytes)
  1183  00326A  EE02  F000         	lfsr	0,__pbssBANK2
  1184  00326E  0E96               	movlw	150
  1185  003270                     clear_1:
  1186  003270  6AEE               	clrf	postinc0,c
  1187  003272  06E8               	decf	wreg,f,c
  1188  003274  E1FD               	bnz	clear_1
  1189                           
  1190                           ; Clear objects allocated to BANK1 (160 bytes)
  1191  003276  EE01  F000         	lfsr	0,__pbssBANK1
  1192  00327A  0EA0               	movlw	160
  1193  00327C                     clear_2:
  1194  00327C  6AEE               	clrf	postinc0,c
  1195  00327E  06E8               	decf	wreg,f,c
  1196  003280  E1FD               	bnz	clear_2
  1197                           
  1198                           ; Clear objects allocated to BANK0 (102 bytes)
  1199  003282  EE00  F060         	lfsr	0,__pbssBANK0
  1200  003286  0E66               	movlw	102
  1201  003288                     clear_3:
  1202  003288  6AEE               	clrf	postinc0,c
  1203  00328A  06E8               	decf	wreg,f,c
  1204  00328C  E1FD               	bnz	clear_3
  1205                           
  1206                           ; Clear objects allocated to COMRAM (16 bytes)
  1207  00328E  EE00  F039         	lfsr	0,__pbssCOMRAM
  1208  003292  0E10               	movlw	16
  1209  003294                     clear_4:
  1210  003294  6AEE               	clrf	postinc0,c
  1211  003296  06E8               	decf	wreg,f,c
  1212  003298  E1FD               	bnz	clear_4
  1213  00329A                     end_of_initialization:
  1214                           	opt stack 0
  1215  00329A                     __end_of__initialization:
  1216                           	opt stack 0
  1217  00329A  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1218  00329C  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1219  00329E  0100               	movlb	0
  1220  0032A0  EF52  F01A         	goto	_main	;jump to C main() function
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           postdec1	equ	0xFE5
  1228                           fsr1h	equ	0xFE2
  1229                           fsr1l	equ	0xFE1
  1230                           
  1231                           	psect	bssCOMRAM
  1232  000039                     __pbssCOMRAM:
  1233                           	opt stack 0
  1234  000039                     strtok@sp:
  1235                           	opt stack 0
  1236  000039                     	ds	2
  1237  00003B                     _conflict_data_count:
  1238                           	opt stack 0
  1239  00003B                     	ds	1
  1240  00003C                     _data_count:
  1241                           	opt stack 0
  1242  00003C                     	ds	1
  1243  00003D                     _LCD_20x4_DISPLAY:
  1244                           	opt stack 0
  1245  00003D                     	ds	1
  1246  00003E                     _LCD_16x2_DISPLAY:
  1247                           	opt stack 0
  1248  00003E                     	ds	1
  1249  00003F                     _eusart1RxCount:
  1250                           	opt stack 0
  1251  00003F                     	ds	1
  1252  000040                     _eusart1RxTail:
  1253                           	opt stack 0
  1254  000040                     	ds	1
  1255  000041                     _eusart1RxHead:
  1256                           	opt stack 0
  1257  000041                     	ds	1
  1258  000042                     _eusart1TxTail:
  1259                           	opt stack 0
  1260  000042                     	ds	1
  1261  000043                     _eusart1TxHead:
  1262                           	opt stack 0
  1263  000043                     	ds	1
  1264  000044                     _clcd_config_data:
  1265                           	opt stack 0
  1266  000044                     	ds	5
  1267                           tblptru	equ	0xFF8
  1268                           tblptrh	equ	0xFF7
  1269                           tblptrl	equ	0xFF6
  1270                           tablat	equ	0xFF5
  1271                           postinc0	equ	0xFEE
  1272                           wreg	equ	0xFE8
  1273                           postdec1	equ	0xFE5
  1274                           fsr1h	equ	0xFE2
  1275                           fsr1l	equ	0xFE1
  1276                           
  1277                           	psect	dataCOMRAM
  1278  00004B                     __pdataCOMRAM:
  1279                           	opt stack 0
  1280  00004B                     	ds	1
  1281                           tblptru	equ	0xFF8
  1282                           tblptrh	equ	0xFF7
  1283                           tblptrl	equ	0xFF6
  1284                           tablat	equ	0xFF5
  1285                           postinc0	equ	0xFEE
  1286                           wreg	equ	0xFE8
  1287                           postdec1	equ	0xFE5
  1288                           fsr1h	equ	0xFE2
  1289                           fsr1l	equ	0xFE1
  1290                           
  1291                           	psect	bssBANK0
  1292  000060                     __pbssBANK0:
  1293                           	opt stack 0
  1294  000060                     _eusart1RxBuffer:
  1295                           	opt stack 0
  1296  000060                     	ds	8
  1297  000068                     _eusart1TxBuffer:
  1298                           	opt stack 0
  1299  000068                     	ds	8
  1300  000070                     	ds	2
  1301  000072                     cmd_consol_task@i:
  1302                           	opt stack 0
  1303  000072                     	ds	2
  1304  000074                     _display_struct_count:
  1305                           	opt stack 0
  1306  000074                     	ds	2
  1307  000076                     _print_data_ready:
  1308                           	opt stack 0
  1309  000076                     	ds	2
  1310  000078                     _TMR1_InterruptHandler:
  1311                           	opt stack 0
  1312  000078                     	ds	2
  1313  00007A                     _TMR5_InterruptHandler:
  1314                           	opt stack 0
  1315  00007A                     	ds	2
  1316  00007C                     	ds	1
  1317  00007D                     _display:
  1318                           	opt stack 0
  1319  00007D                     	ds	1
  1320  00007E                     _cmd_consol_state:
  1321                           	opt stack 0
  1322  00007E                     	ds	1
  1323  00007F                     _check:
  1324                           	opt stack 0
  1325  00007F                     	ds	1
  1326  000080                     _clcd_init_col:
  1327                           	opt stack 0
  1328  000080                     	ds	1
  1329  000081                     _clcd_init_row:
  1330                           	opt stack 0
  1331  000081                     	ds	1
  1332  000082                     _valid_cmd:
  1333                           	opt stack 0
  1334  000082                     	ds	1
  1335  000083                     _cmd_data:
  1336                           	opt stack 0
  1337  000083                     	ds	52
  1338  0000B7                     _CMD:
  1339                           	opt stack 0
  1340  0000B7                     	ds	15
  1341                           tblptru	equ	0xFF8
  1342                           tblptrh	equ	0xFF7
  1343                           tblptrl	equ	0xFF6
  1344                           tablat	equ	0xFF5
  1345                           postinc0	equ	0xFEE
  1346                           wreg	equ	0xFE8
  1347                           postdec1	equ	0xFE5
  1348                           fsr1h	equ	0xFE2
  1349                           fsr1l	equ	0xFE1
  1350                           
  1351                           	psect	dataBANK0
  1352  0000E5                     __pdataBANK0:
  1353                           	opt stack 0
  1354  0000E5                     _randx:
  1355                           	opt stack 0
  1356  0000E5                     	ds	4
  1357  0000E9                     _str:
  1358                           	opt stack 0
  1359  0000E9                     	ds	13
  1360                           tblptru	equ	0xFF8
  1361                           tblptrh	equ	0xFF7
  1362                           tblptrl	equ	0xFF6
  1363                           tablat	equ	0xFF5
  1364                           postinc0	equ	0xFEE
  1365                           wreg	equ	0xFE8
  1366                           postdec1	equ	0xFE5
  1367                           fsr1h	equ	0xFE2
  1368                           fsr1l	equ	0xFE1
  1369                           
  1370                           	psect	bssBANK1
  1371  000100                     __pbssBANK1:
  1372                           	opt stack 0
  1373  000100                     _lcd_display_array:
  1374                           	opt stack 0
  1375  000100                     	ds	80
  1376  000150                     _conflict_arr:
  1377                           	opt stack 0
  1378  000150                     	ds	40
  1379  000178                     _str_data:
  1380                           	opt stack 0
  1381  000178                     	ds	40
  1382                           tblptru	equ	0xFF8
  1383                           tblptrh	equ	0xFF7
  1384                           tblptrl	equ	0xFF6
  1385                           tablat	equ	0xFF5
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           postdec1	equ	0xFE5
  1389                           fsr1h	equ	0xFE2
  1390                           fsr1l	equ	0xFE1
  1391                           
  1392                           	psect	bssBANK2
  1393  000200                     __pbssBANK2:
  1394                           	opt stack 0
  1395  000200                     _uart_str:
  1396                           	opt stack 0
  1397  000200                     	ds	150
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           postinc0	equ	0xFEE
  1403                           wreg	equ	0xFE8
  1404                           postdec1	equ	0xFE5
  1405                           fsr1h	equ	0xFE2
  1406                           fsr1l	equ	0xFE1
  1407                           
  1408                           	psect	bssBIGRAM
  1409  000296                     __pbssBIGRAM:
  1410                           	opt stack 0
  1411  000296                     _clcd_display_string_details:
  1412                           	opt stack 0
  1413  000296                     	ds	1100
  1414                           tblptru	equ	0xFF8
  1415                           tblptrh	equ	0xFF7
  1416                           tblptrl	equ	0xFF6
  1417                           tablat	equ	0xFF5
  1418                           postinc0	equ	0xFEE
  1419                           wreg	equ	0xFE8
  1420                           postdec1	equ	0xFE5
  1421                           fsr1h	equ	0xFE2
  1422                           fsr1l	equ	0xFE1
  1423                           
  1424                           	psect	cstackBANK0
  1425  0000C6                     __pcstackBANK0:
  1426                           	opt stack 0
  1427  0000C6                     ??_copy_data:
  1428  0000C6                     ??_scroll_left_to_right:
  1429  0000C6                     ??_scroll_right_to_left:
  1430  0000C6                     ??_collect_row:
  1431  0000C6                     ??_get_direction:
  1432  0000C6                     ??_get_dis_frq:
  1433  0000C6                     ??_get_over_write_data:
  1434  0000C6                     ??_collect_column:
  1435  0000C6                     conflict_check@exist_uid_idx:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x0
  1439  0000C6                     	ds	1
  1440  0000C7                     conflict_check@conflict:
  1441                           	opt stack 0
  1442                           
  1443                           ; 1 bytes @ 0x1
  1444  0000C7                     	ds	1
  1445  0000C8                     conflict_check@i:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x2
  1449  0000C8                     	ds	1
  1450  0000C9                     get_dis_frq@frq:
  1451                           	opt stack 0
  1452  0000C9                     get_over_write_data@over_write:
  1453                           	opt stack 0
  1454  0000C9                     collect_row@i:
  1455                           	opt stack 0
  1456  0000C9                     get_direction@i:
  1457                           	opt stack 0
  1458  0000C9                     collect_column@i:
  1459                           	opt stack 0
  1460                           
  1461                           ; 2 bytes @ 0x3
  1462  0000C9                     	ds	1
  1463  0000CA                     get_dis_frq@i:
  1464                           	opt stack 0
  1465  0000CA                     get_over_write_data@i:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x4
  1469  0000CA                     	ds	1
  1470  0000CB                     collect_row@row:
  1471                           	opt stack 0
  1472  0000CB                     get_direction@direction:
  1473                           	opt stack 0
  1474  0000CB                     collect_column@column:
  1475                           	opt stack 0
  1476                           
  1477                           ; 1 bytes @ 0x5
  1478  0000CB                     	ds	1
  1479  0000CC                     parse_cmd_str@str:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x6
  1483  0000CC                     	ds	2
  1484  0000CE                     ??_parse_cmd_str:
  1485                           
  1486                           ; 1 bytes @ 0x8
  1487  0000CE                     	ds	3
  1488  0000D1                     ??_make_display:
  1489  0000D1                     parse_cmd_str@i:
  1490                           	opt stack 0
  1491                           
  1492                           ; 1 bytes @ 0xB
  1493  0000D1                     	ds	1
  1494  0000D2                     parse_cmd_str@i_1801:
  1495                           	opt stack 0
  1496                           
  1497                           ; 1 bytes @ 0xC
  1498  0000D2                     	ds	1
  1499  0000D3                     parse_cmd_str@row:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0xD
  1503  0000D3                     	ds	1
  1504  0000D4                     parse_cmd_str@column:
  1505                           	opt stack 0
  1506  0000D4                     update_string_data@data:
  1507                           	opt stack 0
  1508                           
  1509                           ; 2 bytes @ 0xE
  1510  0000D4                     	ds	1
  1511  0000D5                     parse_cmd_str@i_1792:
  1512                           	opt stack 0
  1513                           
  1514                           ; 1 bytes @ 0xF
  1515  0000D5                     	ds	1
  1516  0000D6                     ??_update_string_data:
  1517  0000D6                     parse_cmd_str@uid:
  1518                           	opt stack 0
  1519                           
  1520                           ; 1 bytes @ 0x10
  1521  0000D6                     	ds	1
  1522  0000D7                     parse_cmd_str@scroll:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x11
  1526  0000D7                     	ds	1
  1527  0000D8                     parse_cmd_str@uid_1789:
  1528                           	opt stack 0
  1529                           
  1530                           ; 1 bytes @ 0x12
  1531  0000D8                     	ds	1
  1532  0000D9                     parse_cmd_str@uid_1800:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0x13
  1536  0000D9                     	ds	1
  1537  0000DA                     update_string_data@exist_uid_idx:
  1538                           	opt stack 0
  1539  0000DA                     parse_cmd_str@ptr:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x14
  1543  0000DA                     	ds	1
  1544  0000DB                     update_string_data@start_point:
  1545                           	opt stack 0
  1546                           
  1547                           ; 1 bytes @ 0x15
  1548  0000DB                     	ds	1
  1549  0000DC                     update_string_data@end_point:
  1550                           	opt stack 0
  1551  0000DC                     parse_cmd_str@temp:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x16
  1555  0000DC                     	ds	1
  1556  0000DD                     update_string_data@i:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x17
  1560  0000DD                     	ds	2
  1561  0000DF                     ??_reply_to_host:
  1562                           
  1563                           ; 1 bytes @ 0x19
  1564  0000DF                     	ds	3
  1565  0000E2                     reply_to_host@ch:
  1566                           	opt stack 0
  1567                           
  1568                           ; 1 bytes @ 0x1C
  1569  0000E2                     	ds	1
  1570  0000E3                     ??_cmd_consol_task:
  1571                           
  1572                           ; 1 bytes @ 0x1D
  1573  0000E3                     	ds	1
  1574  0000E4                     cmd_consol_task@ch:
  1575                           	opt stack 0
  1576                           
  1577                           ; 1 bytes @ 0x1E
  1578  0000E4                     	ds	1
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           postinc0	equ	0xFEE
  1584                           wreg	equ	0xFE8
  1585                           postdec1	equ	0xFE5
  1586                           fsr1h	equ	0xFE2
  1587                           fsr1l	equ	0xFE1
  1588                           
  1589                           	psect	cstackCOMRAM
  1590  000001                     __pcstackCOMRAM:
  1591                           	opt stack 0
  1592  000001                     ??_heart_beat:
  1593  000001                     
  1594                           ; 1 bytes @ 0x0
  1595  000001                     	ds	1
  1596  000002                     ??_INTERRUPT_InterruptManager:
  1597  000002                     
  1598                           ; 1 bytes @ 0x1
  1599  000002                     	ds	18
  1600  000014                     ??_isdigit:
  1601  000014                     ?_max_display_support:
  1602                           	opt stack 0
  1603  000014                     ?_strcmp:
  1604                           	opt stack 0
  1605  000014                     ?_strchr:
  1606                           	opt stack 0
  1607  000014                     ?___awdiv:
  1608                           	opt stack 0
  1609  000014                     ?___lwdiv:
  1610                           	opt stack 0
  1611  000014                     EUSART1_Read@readValue:
  1612                           	opt stack 0
  1613  000014                     EUSART1_Write@txData:
  1614                           	opt stack 0
  1615  000014                     TMR0_SetInterruptHandler@InterruptHandler:
  1616                           	opt stack 0
  1617  000014                     delay@delay:
  1618                           	opt stack 0
  1619  000014                     __delay_MS@delay:
  1620                           	opt stack 0
  1621  000014                     ___awdiv@dividend:
  1622                           	opt stack 0
  1623  000014                     ___lwdiv@dividend:
  1624                           	opt stack 0
  1625  000014                     memcpy@d1:
  1626                           	opt stack 0
  1627  000014                     strcmp@s1:
  1628                           	opt stack 0
  1629  000014                     strcpy@to:
  1630                           	opt stack 0
  1631  000014                     strncpy@to:
  1632                           	opt stack 0
  1633  000014                     strchr@ptr:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x13
  1637  000014                     	ds	1
  1638  000015                     putch@txData:
  1639                           	opt stack 0
  1640  000015                     _isdigit$2314:
  1641                           	opt stack 0
  1642                           
  1643                           ; 1 bytes @ 0x14
  1644  000015                     	ds	1
  1645  000016                     ??_TMR0_Initialize:
  1646  000016                     ??__delay_MS:
  1647  000016                     ??_delay:
  1648  000016                     isdigit@c:
  1649                           	opt stack 0
  1650  000016                     ___awdiv@divisor:
  1651                           	opt stack 0
  1652  000016                     ___lwdiv@divisor:
  1653                           	opt stack 0
  1654  000016                     memcpy@s1:
  1655                           	opt stack 0
  1656  000016                     strcmp@s2:
  1657                           	opt stack 0
  1658  000016                     strcpy@from:
  1659                           	opt stack 0
  1660  000016                     strncpy@from:
  1661                           	opt stack 0
  1662  000016                     cputs@s:
  1663                           	opt stack 0
  1664  000016                     strchr@chr:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x15
  1668  000016                     	ds	1
  1669  000017                     delay@val:
  1670                           	opt stack 0
  1671  000017                     __delay_MS@val:
  1672                           	opt stack 0
  1673                           
  1674                           ; 2 bytes @ 0x16
  1675  000017                     	ds	1
  1676  000018                     ??_strcmp:
  1677  000018                     ??_strchr:
  1678  000018                     ___awdiv@counter:
  1679                           	opt stack 0
  1680  000018                     ___lwdiv@counter:
  1681                           	opt stack 0
  1682  000018                     memcpy@n:
  1683                           	opt stack 0
  1684  000018                     puts@s:
  1685                           	opt stack 0
  1686  000018                     strcpy@cp:
  1687                           	opt stack 0
  1688  000018                     strncpy@size:
  1689                           	opt stack 0
  1690                           
  1691                           ; 2 bytes @ 0x17
  1692  000018                     	ds	1
  1693  000019                     ___awdiv@sign:
  1694                           	opt stack 0
  1695  000019                     strcmp@r:
  1696                           	opt stack 0
  1697  000019                     delay@i:
  1698                           	opt stack 0
  1699  000019                     ___lwdiv@quotient:
  1700                           	opt stack 0
  1701                           
  1702                           ; 2 bytes @ 0x18
  1703  000019                     	ds	1
  1704  00001A                     ?_strspn:
  1705                           	opt stack 0
  1706  00001A                     ?_strcspn:
  1707                           	opt stack 0
  1708  00001A                     ___awdiv@quotient:
  1709                           	opt stack 0
  1710  00001A                     memcpy@d:
  1711                           	opt stack 0
  1712  00001A                     strncpy@cp:
  1713                           	opt stack 0
  1714  00001A                     strcspn@s1:
  1715                           	opt stack 0
  1716  00001A                     strspn@s1:
  1717                           	opt stack 0
  1718                           
  1719                           ; 2 bytes @ 0x19
  1720  00001A                     	ds	1
  1721  00001B                     ?___lwmod:
  1722                           	opt stack 0
  1723  00001B                     write_lcd_cmd@cmd:
  1724                           	opt stack 0
  1725  00001B                     write_lcd_data@data:
  1726                           	opt stack 0
  1727  00001B                     ___lwmod@dividend:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x1A
  1731  00001B                     	ds	1
  1732  00001C                     ?___wmul:
  1733                           	opt stack 0
  1734  00001C                     set_cursor@col_number:
  1735                           	opt stack 0
  1736  00001C                     write_str@str:
  1737                           	opt stack 0
  1738  00001C                     ___wmul@multiplier:
  1739                           	opt stack 0
  1740  00001C                     memcpy@s:
  1741                           	opt stack 0
  1742  00001C                     strcspn@s2:
  1743                           	opt stack 0
  1744  00001C                     strspn@s2:
  1745                           	opt stack 0
  1746                           
  1747                           ; 2 bytes @ 0x1B
  1748  00001C                     	ds	1
  1749  00001D                     set_cursor@row_number:
  1750                           	opt stack 0
  1751  00001D                     ___lwmod@divisor:
  1752                           	opt stack 0
  1753                           
  1754                           ; 2 bytes @ 0x1C
  1755  00001D                     	ds	1
  1756  00001E                     ??_strspn:
  1757  00001E                     ??_strcspn:
  1758  00001E                     write_str@i:
  1759                           	opt stack 0
  1760  00001E                     memcpy@tmp:
  1761                           	opt stack 0
  1762  00001E                     ___wmul@multiplicand:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0x1D
  1766  00001E                     	ds	1
  1767  00001F                     ___lwmod@counter:
  1768                           	opt stack 0
  1769  00001F                     strcspn@i:
  1770                           	opt stack 0
  1771  00001F                     strspn@i:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x1E
  1775  00001F                     	ds	1
  1776  000020                     ___wmul@product:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0x1F
  1780  000020                     	ds	1
  1781  000021                     ?_strtok:
  1782                           	opt stack 0
  1783  000021                     strtok@s1:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x20
  1787  000021                     	ds	1
  1788  000022                     ?_printf:
  1789                           	opt stack 0
  1790  000022                     ?_strlen:
  1791                           	opt stack 0
  1792  000022                     ?_atoi:
  1793                           	opt stack 0
  1794  000022                     printf@f:
  1795                           	opt stack 0
  1796  000022                     atoi@s:
  1797                           	opt stack 0
  1798  000022                     strlen@s:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x21
  1802  000022                     	ds	1
  1803  000023                     strtok@s2:
  1804                           	opt stack 0
  1805                           
  1806                           ; 2 bytes @ 0x22
  1807  000023                     	ds	1
  1808  000024                     ??_strlen:
  1809  000024                     ??_atoi:
  1810                           
  1811                           ; 1 bytes @ 0x23
  1812  000024                     	ds	1
  1813  000025                     
  1814                           ; 1 bytes @ 0x24
  1815  000025                     	ds	1
  1816  000026                     atoi@sign:
  1817                           	opt stack 0
  1818  000026                     strlen@cp:
  1819                           	opt stack 0
  1820                           
  1821                           ; 2 bytes @ 0x25
  1822  000026                     	ds	1
  1823  000027                     atoi@a:
  1824                           	opt stack 0
  1825                           
  1826                           ; 2 bytes @ 0x26
  1827  000027                     	ds	1
  1828  000028                     ?_strncmp:
  1829                           	opt stack 0
  1830  000028                     scroll_off@clcd_display_string_details:
  1831                           	opt stack 0
  1832  000028                     memset@p1:
  1833                           	opt stack 0
  1834  000028                     strncmp@s1:
  1835                           	opt stack 0
  1836                           
  1837                           ; 2 bytes @ 0x27
  1838  000028                     	ds	2
  1839  00002A                     ??_printf:
  1840  00002A                     ??_scroll_off:
  1841  00002A                     memset@c:
  1842                           	opt stack 0
  1843  00002A                     strncmp@s2:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0x29
  1847  00002A                     	ds	1
  1848  00002B                     printf@flag:
  1849                           	opt stack 0
  1850                           
  1851                           ; 1 bytes @ 0x2A
  1852  00002B                     	ds	1
  1853  00002C                     printf@prec:
  1854                           	opt stack 0
  1855  00002C                     memset@n:
  1856                           	opt stack 0
  1857  00002C                     strncmp@len:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x2B
  1861  00002C                     	ds	1
  1862  00002D                     printf@cp:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x2C
  1866  00002D                     	ds	1
  1867  00002E                     ??_strncmp:
  1868  00002E                     scroll_off@k:
  1869                           	opt stack 0
  1870  00002E                     memset@p:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x2D
  1874  00002E                     	ds	1
  1875  00002F                     printf@ap:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x2E
  1879  00002F                     	ds	1
  1880  000030                     scroll_off@line:
  1881                           	opt stack 0
  1882  000030                     scroll_left_to_right@clcd_display_string_details:
  1883                           	opt stack 0
  1884  000030                     scroll_right_to_left@clcd_display_string_details:
  1885                           	opt stack 0
  1886  000030                     get_str@str:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x2F
  1890  000030                     	ds	1
  1891  000031                     ?_strstr:
  1892                           	opt stack 0
  1893  000031                     scroll_off@display_char_count:
  1894                           	opt stack 0
  1895  000031                     printf@val:
  1896                           	opt stack 0
  1897  000031                     strstr@s1:
  1898                           	opt stack 0
  1899                           
  1900                           ; 2 bytes @ 0x30
  1901  000031                     	ds	1
  1902  000032                     scroll_left_to_right@line:
  1903                           	opt stack 0
  1904  000032                     scroll_right_to_left@line:
  1905                           	opt stack 0
  1906  000032                     scroll_off@str_len:
  1907                           	opt stack 0
  1908  000032                     get_str@data_str:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x31
  1912  000032                     	ds	1
  1913  000033                     printf@c:
  1914                           	opt stack 0
  1915  000033                     scroll_off@j:
  1916                           	opt stack 0
  1917  000033                     strstr@s2:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x32
  1921  000033                     	ds	1
  1922  000034                     init_clcd_cusotom_lcd@clcd_init_col:
  1923                           	opt stack 0
  1924  000034                     conflict_check@new_start_point:
  1925                           	opt stack 0
  1926  000034                     copy_data@clcd_str_data:
  1927                           	opt stack 0
  1928  000034                     collect_row@str:
  1929                           	opt stack 0
  1930  000034                     get_direction@str:
  1931                           	opt stack 0
  1932  000034                     get_dis_frq@str:
  1933                           	opt stack 0
  1934  000034                     get_over_write_data@str:
  1935                           	opt stack 0
  1936  000034                     collect_column@str:
  1937                           	opt stack 0
  1938                           
  1939                           ; 2 bytes @ 0x33
  1940  000034                     	ds	1
  1941  000035                     init_clcd_cusotom_lcd@clcd_init_row:
  1942                           	opt stack 0
  1943  000035                     conflict_check@new_end_point:
  1944                           	opt stack 0
  1945  000035                     scroll_off@i:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x34
  1949  000035                     	ds	1
  1950  000036                     ??_conflict_check:
  1951  000036                     copy_data@data:
  1952                           	opt stack 0
  1953  000036                     collect_row@data_row:
  1954                           	opt stack 0
  1955  000036                     get_direction@data_direction:
  1956                           	opt stack 0
  1957  000036                     get_dis_frq@data_frq:
  1958                           	opt stack 0
  1959  000036                     get_over_write_data@over_write_data:
  1960                           	opt stack 0
  1961  000036                     collect_column@data_column:
  1962                           	opt stack 0
  1963                           
  1964                           ; 2 bytes @ 0x35
  1965  000036                     	ds	1
  1966  000037                     make_display@count:
  1967                           	opt stack 0
  1968                           
  1969                           ; 2 bytes @ 0x36
  1970  000037                     	ds	2
  1971  000039                     tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           postinc0	equ	0xFEE
  1976                           wreg	equ	0xFE8
  1977                           postdec1	equ	0xFE5
  1978                           fsr1h	equ	0xFE2
  1979                           fsr1l	equ	0xFE1
  1980                           
  1981                           ; 1 bytes @ 0x38
  1982 ;;
  1983 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1984 ;;
  1985 ;; *************** function _main *****************
  1986 ;; Defined at:
  1987 ;;		line 77 in file "main.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;Total ram usage:        0 bytes
  2006 ;; Hardware stack levels required when called:   14
  2007 ;; This function calls:
  2008 ;;		_SYSTEM_Initialize
  2009 ;;		_TMR0_SetInterruptHandler
  2010 ;;		_TMR0_StartTimer
  2011 ;;		_TMR0_StopTimer
  2012 ;;		_TMR1_StopTimer
  2013 ;;		_TMR5_StopTimer
  2014 ;;		__delay_MS
  2015 ;;		_cmd_consol_task
  2016 ;;		_console_init
  2017 ;;		_make_display
  2018 ;;		_printf
  2019 ;; This function is called by:
  2020 ;;		Startup code after reset
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text0
  2025  0034A4                     __ptext0:
  2026                           	opt stack 0
  2027  0034A4                     _main:
  2028                           	opt stack 17
  2029                           
  2030                           ;main.c: 80: SYSTEM_Initialize();
  2031                           
  2032                           ;incstack = 0
  2033  0034A4  EC8F  F01D         	call	_SYSTEM_Initialize	;wreg free
  2034                           
  2035                           ;main.c: 81: TMR5_StopTimer();
  2036  0034A8  EC4E  F01E         	call	_TMR5_StopTimer	;wreg free
  2037                           
  2038                           ;main.c: 82: TMR1_StopTimer();
  2039  0034AC  EC54  F01E         	call	_TMR1_StopTimer	;wreg free
  2040                           
  2041                           ;main.c: 83: TMR0_StopTimer();
  2042  0034B0  EC56  F01E         	call	_TMR0_StopTimer	;wreg free
  2043                           
  2044                           ;main.c: 85: TMR0_SetInterruptHandler(make_array);
  2045  0034B4  0E5A               	movlw	low _make_array
  2046  0034B6  6E14               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  2047  0034B8  0E3C               	movlw	high _make_array
  2048  0034BA  6E15               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  2049  0034BC  EC42  F01E         	call	_TMR0_SetInterruptHandler	;wreg free
  2050                           
  2051                           ;main.c: 105: (INTCONbits.GIE = 1);
  2052  0034C0  8EF2               	bsf	intcon,7,c	;volatile
  2053                           
  2054                           ;main.c: 111: (INTCONbits.PEIE = 1);
  2055  0034C2  8CF2               	bsf	intcon,6,c	;volatile
  2056                           
  2057                           ;main.c: 115: console_init();
  2058  0034C4  EC52  F019         	call	_console_init	;wreg free
  2059                           
  2060                           ;main.c: 116: _delay_MS(1000);
  2061  0034C8  0E03               	movlw	3
  2062  0034CA  6E15               	movwf	__delay_MS@delay+1,c
  2063  0034CC  0EE8               	movlw	232
  2064  0034CE  6E14               	movwf	__delay_MS@delay,c
  2065  0034D0  ECD3  F01B         	call	__delay_MS	;wreg free
  2066                           
  2067                           ;main.c: 118: printf("Init_complete..\r\n");
  2068  0034D4  0EE4               	movlw	low STR_141
  2069  0034D6  6E22               	movwf	printf@f,c
  2070  0034D8  0EFD               	movlw	high STR_141
  2071  0034DA  6E23               	movwf	printf@f+1,c
  2072  0034DC  EC1B  F012         	call	_printf	;wreg free
  2073                           
  2074                           ;main.c: 133: TMR0_StartTimer();
  2075  0034E0  EC5A  F01E         	call	_TMR0_StartTimer	;wreg free
  2076  0034E4                     
  2077                           ;main.c: 137: {
  2078                           ;main.c: 139: cmd_consol_task();
  2079  0034E4  EC2D  F010         	call	_cmd_consol_task	;wreg free
  2080                           
  2081                           ;main.c: 140: if(display == 1){make_display();display = 0;}
  2082  0034E8  0100               	movlb	0	; () banked
  2083  0034EA  057D               	decf	_display& (0+255),w,b
  2084  0034EC  A4D8               	btfss	status,2,c
  2085  0034EE  D7FA               	goto	l1059
  2086                           
  2087                           ; BSR set to: 0
  2088  0034F0  EC2A  F011         	call	_make_display	;wreg free
  2089  0034F4  0E00               	movlw	0
  2090  0034F6  0100               	movlb	0	; () banked
  2091  0034F8  6F7D               	movwf	_display& (0+255),b
  2092                           
  2093                           ; BSR set to: 0
  2094                           
  2095                           ; BSR set to: 0
  2096  0034FA  D7F4               	goto	l1059
  2097  0034FC                     __end_of_main:
  2098                           	opt stack 0
  2099                           tblptru	equ	0xFF8
  2100                           tblptrh	equ	0xFF7
  2101                           tblptrl	equ	0xFF6
  2102                           tablat	equ	0xFF5
  2103                           intcon	equ	0xFF2
  2104                           postinc0	equ	0xFEE
  2105                           wreg	equ	0xFE8
  2106                           postdec1	equ	0xFE5
  2107                           fsr1h	equ	0xFE2
  2108                           fsr1l	equ	0xFE1
  2109                           status	equ	0xFD8
  2110                           
  2111 ;; *************** function _console_init *****************
  2112 ;; Defined at:
  2113 ;;		line 475 in file "cmd_consol.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;		None
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;		None
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;Total ram usage:        0 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; Hardware stack levels required when called:    7
  2134 ;; This function calls:
  2135 ;;		_clear_cmd_data
  2136 ;;		_memset
  2137 ;; This function is called by:
  2138 ;;		_main
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text1
  2143  0032A4                     __ptext1:
  2144                           	opt stack 0
  2145  0032A4                     _console_init:
  2146                           	opt stack 23
  2147                           
  2148                           ;cmd_consol.c: 476: cmd_consol_state = CMD_CONSOL_INIT;
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;incstack = 0
  2152  0032A4  0E00               	movlw	0
  2153  0032A6  0100               	movlb	0	; () banked
  2154  0032A8  6F7E               	movwf	_cmd_consol_state& (0+255),b
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;cmd_consol.c: 477: clear_cmd_data();
  2158  0032AA  EC08  F01D         	call	_clear_cmd_data	;wreg free
  2159                           
  2160                           ;cmd_consol.c: 478: valid_cmd = 0;
  2161  0032AE  0E00               	movlw	0
  2162  0032B0  0100               	movlb	0	; () banked
  2163  0032B2  6F82               	movwf	_valid_cmd& (0+255),b
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;cmd_consol.c: 479: clcd_init_row = 0;
  2167  0032B4  0E00               	movlw	0
  2168  0032B6  6F81               	movwf	_clcd_init_row& (0+255),b
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;cmd_consol.c: 480: clcd_init_col = 0;
  2172  0032B8  0E00               	movlw	0
  2173  0032BA  6F80               	movwf	_clcd_init_col& (0+255),b
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;cmd_consol.c: 481: check = 0;
  2177  0032BC  0E00               	movlw	0
  2178  0032BE  6F7F               	movwf	_check& (0+255),b
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;cmd_consol.c: 482: memset(CMD, 0, sizeof (CMD));
  2182  0032C0  0EB7               	movlw	low _CMD
  2183  0032C2  6E28               	movwf	memset@p1,c
  2184  0032C4  0E00               	movlw	high _CMD
  2185  0032C6  6E29               	movwf	memset@p1+1,c
  2186  0032C8  0E00               	movlw	0
  2187  0032CA  6E2B               	movwf	memset@c+1,c
  2188  0032CC  0E00               	movlw	0
  2189  0032CE  6E2A               	movwf	memset@c,c
  2190  0032D0  0E00               	movlw	0
  2191  0032D2  6E2D               	movwf	memset@n+1,c
  2192  0032D4  0E0F               	movlw	15
  2193  0032D6  6E2C               	movwf	memset@n,c
  2194  0032D8  EC8E  F01B         	call	_memset	;wreg free
  2195                           
  2196                           ;cmd_consol.c: 483: memset(str_data, 0, sizeof (str_data));
  2197  0032DC  0E78               	movlw	low _str_data
  2198  0032DE  6E28               	movwf	memset@p1,c
  2199  0032E0  0E01               	movlw	high _str_data
  2200  0032E2  6E29               	movwf	memset@p1+1,c
  2201  0032E4  0E00               	movlw	0
  2202  0032E6  6E2B               	movwf	memset@c+1,c
  2203  0032E8  0E00               	movlw	0
  2204  0032EA  6E2A               	movwf	memset@c,c
  2205  0032EC  0E00               	movlw	0
  2206  0032EE  6E2D               	movwf	memset@n+1,c
  2207  0032F0  0E28               	movlw	40
  2208  0032F2  6E2C               	movwf	memset@n,c
  2209  0032F4  EC8E  F01B         	call	_memset	;wreg free
  2210                           
  2211                           ;cmd_consol.c: 484: memset(uart_str, 0, sizeof (uart_str));
  2212  0032F8  0E00               	movlw	low _uart_str
  2213  0032FA  6E28               	movwf	memset@p1,c
  2214  0032FC  0E02               	movlw	high _uart_str
  2215  0032FE  6E29               	movwf	memset@p1+1,c
  2216  003300  0E00               	movlw	0
  2217  003302  6E2B               	movwf	memset@c+1,c
  2218  003304  0E00               	movlw	0
  2219  003306  6E2A               	movwf	memset@c,c
  2220  003308  0E00               	movlw	0
  2221  00330A  6E2D               	movwf	memset@n+1,c
  2222  00330C  0E96               	movlw	150
  2223  00330E  6E2C               	movwf	memset@n,c
  2224  003310  EC8E  F01B         	call	_memset	;wreg free
  2225  003314  0012               	return		;funcret
  2226  003316                     __end_of_console_init:
  2227                           	opt stack 0
  2228                           tblptru	equ	0xFF8
  2229                           tblptrh	equ	0xFF7
  2230                           tblptrl	equ	0xFF6
  2231                           tablat	equ	0xFF5
  2232                           intcon	equ	0xFF2
  2233                           postinc0	equ	0xFEE
  2234                           wreg	equ	0xFE8
  2235                           postdec1	equ	0xFE5
  2236                           fsr1h	equ	0xFE2
  2237                           fsr1l	equ	0xFE1
  2238                           status	equ	0xFD8
  2239                           
  2240 ;; *************** function _clear_cmd_data *****************
  2241 ;; Defined at:
  2242 ;;		line 8 in file "cmd_consol.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;		None
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;		None
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      void 
  2249 ;; Registers used:
  2250 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;Total ram usage:        0 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    6
  2263 ;; This function calls:
  2264 ;;		_memset
  2265 ;; This function is called by:
  2266 ;;		_console_init
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text2
  2271  003A10                     __ptext2:
  2272                           	opt stack 0
  2273  003A10                     _clear_cmd_data:
  2274                           	opt stack 23
  2275                           
  2276                           ;cmd_consol.c: 9: memset(&cmd_data, 0, sizeof (CMD_CONSOL_DATA));
  2277                           
  2278                           ;incstack = 0
  2279  003A10  0E83               	movlw	low _cmd_data
  2280  003A12  6E28               	movwf	memset@p1,c
  2281  003A14  0E00               	movlw	high _cmd_data
  2282  003A16  6E29               	movwf	memset@p1+1,c
  2283  003A18  0E00               	movlw	0
  2284  003A1A  6E2B               	movwf	memset@c+1,c
  2285  003A1C  0E00               	movlw	0
  2286  003A1E  6E2A               	movwf	memset@c,c
  2287  003A20  0E00               	movlw	0
  2288  003A22  6E2D               	movwf	memset@n+1,c
  2289  003A24  0E34               	movlw	52
  2290  003A26  6E2C               	movwf	memset@n,c
  2291  003A28  EC8E  F01B         	call	_memset	;wreg free
  2292                           
  2293                           ;cmd_consol.c: 11: cmd_data.scroll = -1;
  2294  003A2C  0100               	movlb	0	; () banked
  2295  003A2E  69B2               	setf	(_cmd_data+47)& (0+255),b
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;cmd_consol.c: 12: cmd_data.end_col = cmd_data.start_col = -1;
  2299  003A30  69AE               	setf	(_cmd_data+43)& (0+255),b
  2300  003A32  69B0               	setf	(_cmd_data+45)& (0+255),b
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;cmd_consol.c: 13: cmd_data.end_row = cmd_data.end_row = -1;
  2304  003A34  69AF               	setf	(_cmd_data+44)& (0+255),b
  2305  003A36  69AF               	setf	(_cmd_data+44)& (0+255),b
  2306                           
  2307                           ; BSR set to: 0
  2308  003A38  0012               	return		;funcret
  2309  003A3A                     __end_of_clear_cmd_data:
  2310                           	opt stack 0
  2311                           tblptru	equ	0xFF8
  2312                           tblptrh	equ	0xFF7
  2313                           tblptrl	equ	0xFF6
  2314                           tablat	equ	0xFF5
  2315                           intcon	equ	0xFF2
  2316                           postinc0	equ	0xFEE
  2317                           wreg	equ	0xFE8
  2318                           postdec1	equ	0xFE5
  2319                           fsr1h	equ	0xFE2
  2320                           fsr1l	equ	0xFE1
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function _cmd_consol_task *****************
  2324 ;; Defined at:
  2325 ;;		line 487 in file "cmd_consol.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  ch              1   30[BANK0 ] unsigned char 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;Total ram usage:        2 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:   13
  2346 ;; This function calls:
  2347 ;;		_getch
  2348 ;;		_memset
  2349 ;;		_parse_cmd_str
  2350 ;;		_printf
  2351 ;;		_puts
  2352 ;;		_reply_to_host
  2353 ;;		_strcmp
  2354 ;; This function is called by:
  2355 ;;		_main
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text3
  2360  00205A                     __ptext3:
  2361                           	opt stack 0
  2362  00205A                     _cmd_consol_task:
  2363                           	opt stack 17
  2364                           
  2365                           ;cmd_consol.c: 488: if ((eusart1RxCount) > 0) {
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;incstack = 0
  2369  00205A  503F               	movf	_eusart1RxCount,w,c	;volatile
  2370  00205C  B4D8               	btfsc	status,2,c
  2371  00205E  D0EE               	goto	l924
  2372                           
  2373                           ;cmd_consol.c: 489: static int i = 0;
  2374                           ;cmd_consol.c: 490: unsigned char ch = 0;
  2375  002060  0E00               	movlw	0
  2376  002062  0100               	movlb	0	; () banked
  2377  002064  6FE4               	movwf	cmd_consol_task@ch& (0+255),b
  2378                           
  2379                           ;cmd_consol.c: 491: while ((eusart1RxCount)) {
  2380  002066  D072               	goto	l913
  2381  002068                     
  2382                           ;cmd_consol.c: 492: ch = getch();
  2383                           
  2384                           ; BSR set to: 0
  2385  002068  EC4B  F01E         	call	_getch	;wreg free
  2386  00206C  0100               	movlb	0	; () banked
  2387  00206E  6FE4               	movwf	cmd_consol_task@ch& (0+255),b
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;cmd_consol.c: 493: if (ch == '\n' || ch == '\r') {
  2391  002070  0E0A               	movlw	10
  2392  002072  19E4               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2393  002074  B4D8               	btfsc	status,2,c
  2394  002076  D004               	goto	u8300
  2395                           
  2396                           ; BSR set to: 0
  2397  002078  0E0D               	movlw	13
  2398  00207A  19E4               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2399  00207C  A4D8               	btfss	status,2,c
  2400  00207E  D00D               	goto	l915
  2401  002080                     u8300:
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;cmd_consol.c: 494: i = 0;
  2405                           
  2406                           ; BSR set to: 0
  2407  002080  0E00               	movlw	0
  2408  002082  6F73               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2409  002084  0E00               	movlw	0
  2410  002086  6F72               	movwf	cmd_consol_task@i& (0+255),b
  2411                           
  2412                           ;cmd_consol.c: 495: check = 1;
  2413  002088  0E01               	movlw	1
  2414  00208A  6F7F               	movwf	_check& (0+255),b
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;cmd_consol.c: 496: printf("\r\n");
  2418  00208C  0E9F               	movlw	low (STR_62+9)
  2419  00208E  6E22               	movwf	printf@f,c
  2420  002090  0EFE               	movlw	high (STR_62+9)
  2421  002092  6E23               	movwf	printf@f+1,c
  2422  002094  EC1B  F012         	call	_printf	;wreg free
  2423                           
  2424                           ;cmd_consol.c: 497: break;
  2425  002098  D05C               	goto	u8330
  2426  00209A                     l915:
  2427  00209A  0E08               	movlw	8
  2428  00209C  0100               	movlb	0	; () banked
  2429  00209E  19E4               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2430  0020A0  A4D8               	btfss	status,2,c
  2431  0020A2  D015               	goto	l920
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;cmd_consol.c: 499: uart_str[--i] = 0;
  2435  0020A4  0772               	decf	cmd_consol_task@i& (0+255),f,b
  2436  0020A6  A0D8               	btfss	status,0,c
  2437  0020A8  0773               	decf	(cmd_consol_task@i+1)& (0+255),f,b
  2438  0020AA  0E00               	movlw	low _uart_str
  2439  0020AC  2572               	addwf	cmd_consol_task@i& (0+255),w,b
  2440  0020AE  6ED9               	movwf	fsr2l,c
  2441  0020B0  0E02               	movlw	high _uart_str
  2442  0020B2  2173               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2443  0020B4  6EDA               	movwf	fsr2h,c
  2444  0020B6  0E00               	movlw	0
  2445  0020B8  6EDF               	movwf	indf2,c
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;cmd_consol.c: 500: printf("%c", ch);
  2449  0020BA  0EF9               	movlw	low STR_134
  2450  0020BC  6E22               	movwf	printf@f,c
  2451  0020BE  0EFF               	movlw	high STR_134
  2452  0020C0  6E23               	movwf	printf@f+1,c
  2453  0020C2  C0E4  F024         	movff	cmd_consol_task@ch,?_printf+2
  2454  0020C6  6A25               	clrf	?_printf+3,c
  2455  0020C8  EC1B  F012         	call	_printf	;wreg free
  2456                           
  2457                           ;cmd_consol.c: 501: continue;
  2458  0020CC  D03F               	goto	l913
  2459  0020CE                     l920:
  2460                           
  2461                           ;cmd_consol.c: 503: uart_str[i] = ch;
  2462  0020CE  0E00               	movlw	low _uart_str
  2463  0020D0  0100               	movlb	0	; () banked
  2464  0020D2  2572               	addwf	cmd_consol_task@i& (0+255),w,b
  2465  0020D4  6ED9               	movwf	fsr2l,c
  2466  0020D6  0E02               	movlw	high _uart_str
  2467  0020D8  2173               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2468  0020DA  6EDA               	movwf	fsr2h,c
  2469  0020DC  C0E4  FFDF         	movff	cmd_consol_task@ch,indf2
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;cmd_consol.c: 504: printf("%c", uart_str[i]);
  2473  0020E0  0EF9               	movlw	low STR_134
  2474  0020E2  6E22               	movwf	printf@f,c
  2475  0020E4  0EFF               	movlw	high STR_134
  2476  0020E6  6E23               	movwf	printf@f+1,c
  2477  0020E8  0E00               	movlw	low _uart_str
  2478  0020EA  2572               	addwf	cmd_consol_task@i& (0+255),w,b
  2479  0020EC  6ED9               	movwf	fsr2l,c
  2480  0020EE  0E02               	movlw	high _uart_str
  2481  0020F0  2173               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2482  0020F2  6EDA               	movwf	fsr2h,c
  2483  0020F4  50DF               	movf	indf2,w,c
  2484  0020F6  6FE3               	movwf	??_cmd_consol_task& (0+255),b
  2485  0020F8  51E3               	movf	??_cmd_consol_task& (0+255),w,b
  2486  0020FA  6E24               	movwf	?_printf+2,c
  2487  0020FC  6A25               	clrf	?_printf+3,c
  2488  0020FE  EC1B  F012         	call	_printf	;wreg free
  2489                           
  2490                           ;cmd_consol.c: 505: }
  2491                           ;cmd_consol.c: 506: if (strcmp(uart_str, "KLM+") == 0) {
  2492  002102  0E00               	movlw	low _uart_str
  2493  002104  6E14               	movwf	strcmp@s1,c
  2494  002106  0E02               	movlw	high _uart_str
  2495  002108  6E15               	movwf	strcmp@s1+1,c
  2496  00210A  0ED4               	movlw	low STR_136
  2497  00210C  6E16               	movwf	strcmp@s2,c
  2498  00210E  0EFF               	movlw	high STR_136
  2499  002110  6E17               	movwf	strcmp@s2+1,c
  2500  002112  EC21  F01B         	call	_strcmp	;wreg free
  2501  002116  5014               	movf	?_strcmp,w,c
  2502  002118  1015               	iorwf	?_strcmp+1,w,c
  2503  00211A  A4D8               	btfss	status,2,c
  2504  00211C  D014               	goto	l922
  2505                           
  2506                           ;cmd_consol.c: 507: memset(uart_str, 0, sizeof (uart_str));
  2507  00211E  0E00               	movlw	low _uart_str
  2508  002120  6E28               	movwf	memset@p1,c
  2509  002122  0E02               	movlw	high _uart_str
  2510  002124  6E29               	movwf	memset@p1+1,c
  2511  002126  0E00               	movlw	0
  2512  002128  6E2B               	movwf	memset@c+1,c
  2513  00212A  0E00               	movlw	0
  2514  00212C  6E2A               	movwf	memset@c,c
  2515  00212E  0E00               	movlw	0
  2516  002130  6E2D               	movwf	memset@n+1,c
  2517  002132  0E96               	movlw	150
  2518  002134  6E2C               	movwf	memset@n,c
  2519  002136  EC8E  F01B         	call	_memset	;wreg free
  2520                           
  2521                           ;cmd_consol.c: 508: i = 0;
  2522  00213A  0E00               	movlw	0
  2523  00213C  0100               	movlb	0	; () banked
  2524  00213E  6F73               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2525  002140  0E00               	movlw	0
  2526  002142  6F72               	movwf	cmd_consol_task@i& (0+255),b
  2527                           
  2528                           ;cmd_consol.c: 509: continue;
  2529  002144  D003               	goto	l913
  2530  002146                     l922:
  2531                           
  2532                           ;cmd_consol.c: 510: }
  2533                           ;cmd_consol.c: 511: i++;
  2534                           
  2535                           ; BSR set to: 0
  2536  002146  0100               	movlb	0	; () banked
  2537  002148  4B72               	infsnz	cmd_consol_task@i& (0+255),f,b
  2538  00214A  2B73               	incf	(cmd_consol_task@i+1)& (0+255),f,b
  2539  00214C                     l913:
  2540                           
  2541                           ; BSR set to: 0
  2542  00214C  503F               	movf	_eusart1RxCount,w,c	;volatile
  2543  00214E  A4D8               	btfss	status,2,c
  2544  002150  D78B               	goto	l914
  2545  002152                     u8330:
  2546                           
  2547                           ;cmd_consol.c: 512: }
  2548                           ;cmd_consol.c: 513: if (i > 150) {
  2549  002152  0100               	movlb	0	; () banked
  2550  002154  BF73               	btfsc	(cmd_consol_task@i+1)& (0+255),7,b
  2551  002156  D072               	goto	l924
  2552  002158  5173               	movf	(cmd_consol_task@i+1)& (0+255),w,b
  2553  00215A  E104               	bnz	u8340
  2554  00215C  0E97               	movlw	151
  2555  00215E  5D72               	subwf	cmd_consol_task@i& (0+255),w,b
  2556  002160  A0D8               	btfss	status,0,c
  2557  002162  D06C               	goto	l924
  2558  002164                     u8340:
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;cmd_consol.c: 514: puts("ERR_CMD_LEN");
  2562  002164  0EF6               	movlw	low STR_137
  2563  002166  6E18               	movwf	puts@s,c
  2564  002168  0EFE               	movlw	high STR_137
  2565  00216A  6E19               	movwf	puts@s+1,c
  2566  00216C  ECD4  F01D         	call	_puts	;wreg free
  2567                           
  2568                           ;cmd_consol.c: 515: i = 0;
  2569  002170  0E00               	movlw	0
  2570  002172  0100               	movlb	0	; () banked
  2571  002174  6F73               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2572  002176  0E00               	movlw	0
  2573  002178  6F72               	movwf	cmd_consol_task@i& (0+255),b
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;cmd_consol.c: 516: }
  2577                           ;cmd_consol.c: 517: }
  2578                           ;cmd_consol.c: 518: switch (cmd_consol_state) {
  2579                           
  2580                           ; BSR set to: 0
  2581  00217A  D060               	goto	l924
  2582  00217C                     
  2583                           ; BSR set to: 0
  2584                           ;cmd_consol.c: 520: {
  2585                           ;cmd_consol.c: 521: memset(CMD, 0, sizeof (CMD));
  2586                           
  2587                           ; BSR set to: 0
  2588  00217C  0EB7               	movlw	low _CMD
  2589  00217E  6E28               	movwf	memset@p1,c
  2590  002180  0E00               	movlw	high _CMD
  2591  002182  6E29               	movwf	memset@p1+1,c
  2592  002184  0E00               	movlw	0
  2593  002186  6E2B               	movwf	memset@c+1,c
  2594  002188  0E00               	movlw	0
  2595  00218A  6E2A               	movwf	memset@c,c
  2596  00218C  0E00               	movlw	0
  2597  00218E  6E2D               	movwf	memset@n+1,c
  2598  002190  0E0F               	movlw	15
  2599  002192  6E2C               	movwf	memset@n,c
  2600  002194  EC8E  F01B         	call	_memset	;wreg free
  2601                           
  2602                           ;cmd_consol.c: 522: memset(uart_str, 0, sizeof (uart_str));
  2603  002198  0E00               	movlw	low _uart_str
  2604  00219A  6E28               	movwf	memset@p1,c
  2605  00219C  0E02               	movlw	high _uart_str
  2606  00219E  6E29               	movwf	memset@p1+1,c
  2607  0021A0  0E00               	movlw	0
  2608  0021A2  6E2B               	movwf	memset@c+1,c
  2609  0021A4  0E00               	movlw	0
  2610  0021A6  6E2A               	movwf	memset@c,c
  2611  0021A8  0E00               	movlw	0
  2612  0021AA  6E2D               	movwf	memset@n+1,c
  2613  0021AC  0E96               	movlw	150
  2614  0021AE  6E2C               	movwf	memset@n,c
  2615  0021B0  EC8E  F01B         	call	_memset	;wreg free
  2616                           
  2617                           ;cmd_consol.c: 523: valid_cmd = 0;
  2618  0021B4  0E00               	movlw	0
  2619  0021B6  0100               	movlb	0	; () banked
  2620  0021B8  6F82               	movwf	_valid_cmd& (0+255),b
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;cmd_consol.c: 524: puts("Init_Done\r\n");
  2624  0021BA  0EBA               	movlw	low STR_138
  2625  0021BC  6E18               	movwf	puts@s,c
  2626  0021BE  0EFE               	movlw	high STR_138
  2627  0021C0  6E19               	movwf	puts@s+1,c
  2628  0021C2  ECD4  F01D         	call	_puts	;wreg free
  2629                           
  2630                           ;cmd_consol.c: 525: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2631  0021C6  0E01               	movlw	1
  2632  0021C8  0100               	movlb	0	; () banked
  2633  0021CA  6F7E               	movwf	_cmd_consol_state& (0+255),b
  2634                           
  2635                           ;cmd_consol.c: 526: break;
  2636  0021CC  0012               	return	
  2637  0021CE                     
  2638                           ; BSR set to: 0
  2639                           ;cmd_consol.c: 529: {
  2640                           ;cmd_consol.c: 530: static int i = 0;
  2641                           ;cmd_consol.c: 532: if (check == 1) {
  2642                           
  2643                           ; BSR set to: 0
  2644  0021CE  057F               	decf	_check& (0+255),w,b
  2645  0021D0  A4D8               	btfss	status,2,c
  2646  0021D2  0012               	return	
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;cmd_consol.c: 533: check = 0;
  2650  0021D4  0E00               	movlw	0
  2651  0021D6  6F7F               	movwf	_check& (0+255),b
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;cmd_consol.c: 534: if (parse_cmd_str(uart_str) == 0) {
  2655  0021D8  0E00               	movlw	low _uart_str
  2656  0021DA  6FCC               	movwf	parse_cmd_str@str& (0+255),b
  2657  0021DC  0E02               	movlw	high _uart_str
  2658  0021DE  6FCD               	movwf	(parse_cmd_str@str+1)& (0+255),b
  2659  0021E0  EC65  F000         	call	_parse_cmd_str	;wreg free
  2660  0021E4  0900               	iorlw	0
  2661  0021E6  A4D8               	btfss	status,2,c
  2662  0021E8  D012               	goto	l931
  2663                           
  2664                           ;cmd_consol.c: 535: memset(uart_str, 0, sizeof (uart_str));
  2665  0021EA  0E00               	movlw	low _uart_str
  2666  0021EC  6E28               	movwf	memset@p1,c
  2667  0021EE  0E02               	movlw	high _uart_str
  2668  0021F0  6E29               	movwf	memset@p1+1,c
  2669  0021F2  0E00               	movlw	0
  2670  0021F4  6E2B               	movwf	memset@c+1,c
  2671  0021F6  0E00               	movlw	0
  2672  0021F8  6E2A               	movwf	memset@c,c
  2673  0021FA  0E00               	movlw	0
  2674  0021FC  6E2D               	movwf	memset@n+1,c
  2675  0021FE  0E96               	movlw	150
  2676  002200  6E2C               	movwf	memset@n,c
  2677  002202  EC8E  F01B         	call	_memset	;wreg free
  2678                           
  2679                           ;cmd_consol.c: 536: cmd_consol_state = CMD_CONSOL_REPLY_HOST;
  2680  002206  0E02               	movlw	2
  2681  002208  0100               	movlb	0	; () banked
  2682  00220A  6F7E               	movwf	_cmd_consol_state& (0+255),b
  2683                           
  2684                           ;cmd_consol.c: 537: } else {
  2685  00220C  0012               	return	
  2686  00220E                     l931:
  2687                           
  2688                           ;cmd_consol.c: 538: printf("%s\r\n", "ERROR");
  2689                           
  2690                           ; BSR set to: 0
  2691  00220E  0EA2               	movlw	low (STR_127+2)
  2692  002210  6E22               	movwf	printf@f,c
  2693  002212  0EFF               	movlw	high (STR_127+2)
  2694  002214  6E23               	movwf	printf@f+1,c
  2695  002216  0EC8               	movlw	low STR_124
  2696  002218  6E24               	movwf	?_printf+2,c
  2697  00221A  0EFF               	movlw	high STR_124
  2698  00221C  6E25               	movwf	?_printf+3,c
  2699  00221E  EC1B  F012         	call	_printf	;wreg free
  2700                           
  2701                           ;cmd_consol.c: 539: }
  2702                           ;cmd_consol.c: 540: }
  2703                           ;cmd_consol.c: 541: break;
  2704  002222  0012               	return	
  2705  002224                     
  2706                           ;cmd_consol.c: 544: {
  2707                           ;cmd_consol.c: 545: if (valid_cmd == 1) {
  2708  002224  0100               	movlb	0	; () banked
  2709  002226  0582               	decf	_valid_cmd& (0+255),w,b
  2710  002228  A4D8               	btfss	status,2,c
  2711  00222A  D005               	goto	l934
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;cmd_consol.c: 546: reply_to_host();
  2715  00222C  EC18  F00B         	call	_reply_to_host	;wreg free
  2716                           
  2717                           ;cmd_consol.c: 547: valid_cmd = 0;
  2718  002230  0E00               	movlw	0
  2719  002232  0100               	movlb	0	; () banked
  2720  002234  6F82               	movwf	_valid_cmd& (0+255),b
  2721  002236                     l934:
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;cmd_consol.c: 549: }
  2725                           ;cmd_consol.c: 550: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2726                           
  2727                           ; BSR set to: 0
  2728  002236  0E01               	movlw	1
  2729  002238  6F7E               	movwf	_cmd_consol_state& (0+255),b
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;cmd_consol.c: 552: }
  2733                           ;cmd_consol.c: 553: }
  2734                           
  2735                           ;cmd_consol.c: 551: break;
  2736  00223A  0012               	return	
  2737  00223C                     l924:
  2738                           
  2739                           ; BSR set to: 0
  2740  00223C  0100               	movlb	0	; () banked
  2741  00223E  517E               	movf	_cmd_consol_state& (0+255),w,b
  2742                           
  2743                           ; Switch size 1, requested type "space"
  2744                           ; Number of cases is 3, Range of values is 0 to 2
  2745                           ; switch strategies available:
  2746                           ; Name         Instructions Cycles
  2747                           ; simple_byte           10     6 (average)
  2748                           ;	Chosen strategy is simple_byte
  2749  002240  0A00               	xorlw	0	; case 0
  2750  002242  B4D8               	btfsc	status,2,c
  2751  002244  D79B               	goto	l925
  2752  002246  0A01               	xorlw	1	; case 1
  2753  002248  B4D8               	btfsc	status,2,c
  2754  00224A  D7C1               	goto	l927
  2755  00224C  0A03               	xorlw	3	; case 2
  2756  00224E  A4D8               	btfss	status,2,c
  2757  002250  0012               	return	
  2758  002252  D7E8               	goto	l933
  2759  002254                     __end_of_cmd_consol_task:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           intcon	equ	0xFF2
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           postdec1	equ	0xFE5
  2769                           fsr1h	equ	0xFE2
  2770                           fsr1l	equ	0xFE1
  2771                           indf2	equ	0xFDF
  2772                           fsr2h	equ	0xFDA
  2773                           fsr2l	equ	0xFD9
  2774                           status	equ	0xFD8
  2775                           
  2776 ;; *************** function _reply_to_host *****************
  2777 ;; Defined at:
  2778 ;;		line 428 in file "cmd_consol.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;  ch              1   28[BANK0 ] unsigned char 
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;Total ram usage:        4 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:   12
  2799 ;; This function calls:
  2800 ;;		_clcd_max_col
  2801 ;;		_clcd_max_row
  2802 ;;		_init_clcd_cusotom_lcd
  2803 ;;		_max_display_str
  2804 ;;		_max_display_support
  2805 ;;		_max_uid_range
  2806 ;;		_min_uid_range
  2807 ;;		_printf
  2808 ;;		_puts
  2809 ;;		_strcmp
  2810 ;;		_update_string_data
  2811 ;; This function is called by:
  2812 ;;		_cmd_consol_task
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           	psect	text4
  2817  001630                     __ptext4:
  2818                           	opt stack 0
  2819  001630                     _reply_to_host:
  2820                           	opt stack 17
  2821                           
  2822                           ;cmd_consol.c: 429: if (strcmp(CMD, "KLM") == 0) {
  2823                           
  2824                           ;incstack = 0
  2825  001630  0EB7               	movlw	low _CMD
  2826  001632  6E14               	movwf	strcmp@s1,c
  2827  001634  0E00               	movlw	high _CMD
  2828  001636  6E15               	movwf	strcmp@s1+1,c
  2829  001638  0EF5               	movlw	low STR_90
  2830  00163A  6E16               	movwf	strcmp@s2,c
  2831  00163C  0EFF               	movlw	high STR_90
  2832  00163E  6E17               	movwf	strcmp@s2+1,c
  2833  001640  EC21  F01B         	call	_strcmp	;wreg free
  2834  001644  5014               	movf	?_strcmp,w,c
  2835  001646  1015               	iorwf	?_strcmp+1,w,c
  2836  001648  A4D8               	btfss	status,2,c
  2837  00164A  D007               	goto	l874
  2838                           
  2839                           ;cmd_consol.c: 430: puts("OK\r\n");
  2840  00164C  0E91               	movlw	low (STR_95+8)
  2841  00164E  6E18               	movwf	puts@s,c
  2842  001650  0EFE               	movlw	high (STR_95+8)
  2843  001652  6E19               	movwf	puts@s+1,c
  2844  001654  ECD4  F01D         	call	_puts	;wreg free
  2845                           
  2846                           ;cmd_consol.c: 431: } else if (strcmp(CMD, "LCDS?") == 0) {
  2847  001658  0012               	return	
  2848  00165A                     l874:
  2849  00165A  0EB7               	movlw	low _CMD
  2850  00165C  6E14               	movwf	strcmp@s1,c
  2851  00165E  0E00               	movlw	high _CMD
  2852  001660  6E15               	movwf	strcmp@s1+1,c
  2853  001662  0EBC               	movlw	low STR_32
  2854  001664  6E16               	movwf	strcmp@s2,c
  2855  001666  0EFF               	movlw	high STR_32
  2856  001668  6E17               	movwf	strcmp@s2+1,c
  2857  00166A  EC21  F01B         	call	_strcmp	;wreg free
  2858  00166E  5014               	movf	?_strcmp,w,c
  2859  001670  1015               	iorwf	?_strcmp+1,w,c
  2860  001672  A4D8               	btfss	status,2,c
  2861  001674  D017               	goto	l876
  2862                           
  2863                           ;cmd_consol.c: 432: printf("%s\r\n", max_display_support());
  2864  001676  0EA2               	movlw	low (STR_127+2)
  2865  001678  6E22               	movwf	printf@f,c
  2866  00167A  0EFF               	movlw	high (STR_127+2)
  2867  00167C  6E23               	movwf	printf@f+1,c
  2868  00167E  EC33  F01E         	call	_max_display_support	;wreg free
  2869  001682  C014  F024         	movff	?_max_display_support,?_printf+2
  2870  001686  C015  F025         	movff	?_max_display_support+1,?_printf+3
  2871  00168A  EC1B  F012         	call	_printf	;wreg free
  2872                           
  2873                           ;cmd_consol.c: 433: printf("\r\n%s.., OK\r\n", "LCDS?");
  2874  00168E  0E89               	movlw	low STR_95
  2875  001690  6E22               	movwf	printf@f,c
  2876  001692  0EFE               	movlw	high STR_95
  2877  001694  6E23               	movwf	printf@f+1,c
  2878  001696  0EBC               	movlw	low STR_32
  2879  001698  6E24               	movwf	?_printf+2,c
  2880  00169A  0EFF               	movlw	high STR_32
  2881  00169C  6E25               	movwf	?_printf+3,c
  2882  00169E  EC1B  F012         	call	_printf	;wreg free
  2883                           
  2884                           ;cmd_consol.c: 434: } else if (strcmp(CMD, "MC?") == 0) {
  2885  0016A2  0012               	return	
  2886  0016A4                     l876:
  2887  0016A4  0EB7               	movlw	low _CMD
  2888  0016A6  6E14               	movwf	strcmp@s1,c
  2889  0016A8  0E00               	movlw	high _CMD
  2890  0016AA  6E15               	movwf	strcmp@s1+1,c
  2891  0016AC  0EED               	movlw	low STR_28
  2892  0016AE  6E16               	movwf	strcmp@s2,c
  2893  0016B0  0EFF               	movlw	high STR_28
  2894  0016B2  6E17               	movwf	strcmp@s2+1,c
  2895  0016B4  EC21  F01B         	call	_strcmp	;wreg free
  2896  0016B8  5014               	movf	?_strcmp,w,c
  2897  0016BA  1015               	iorwf	?_strcmp+1,w,c
  2898  0016BC  A4D8               	btfss	status,2,c
  2899  0016BE  D018               	goto	l878
  2900                           
  2901                           ;cmd_consol.c: 435: printf("%d\r\n", clcd_max_col());
  2902  0016C0  0EDF               	movlw	low (STR_17+14)
  2903  0016C2  6E22               	movwf	printf@f,c
  2904  0016C4  0EFD               	movlw	high (STR_17+14)
  2905  0016C6  6E23               	movwf	printf@f+1,c
  2906  0016C8  EC13  F01E         	call	_clcd_max_col	;wreg free
  2907  0016CC  0100               	movlb	0	; () banked
  2908  0016CE  6FDF               	movwf	??_reply_to_host& (0+255),b
  2909  0016D0  51DF               	movf	??_reply_to_host& (0+255),w,b
  2910  0016D2  6E24               	movwf	?_printf+2,c
  2911  0016D4  6A25               	clrf	?_printf+3,c
  2912  0016D6  EC1B  F012         	call	_printf	;wreg free
  2913                           
  2914                           ;cmd_consol.c: 436: printf("\r\n%s.., OK\r\n", "MC?");
  2915  0016DA  0E89               	movlw	low STR_95
  2916  0016DC  6E22               	movwf	printf@f,c
  2917  0016DE  0EFE               	movlw	high STR_95
  2918  0016E0  6E23               	movwf	printf@f+1,c
  2919  0016E2  0EED               	movlw	low STR_28
  2920  0016E4  6E24               	movwf	?_printf+2,c
  2921  0016E6  0EFF               	movlw	high STR_28
  2922  0016E8  6E25               	movwf	?_printf+3,c
  2923  0016EA  EC1B  F012         	call	_printf	;wreg free
  2924                           
  2925                           ;cmd_consol.c: 437: } else if (strcmp(CMD, "MR?") == 0) {
  2926  0016EE  0012               	return	
  2927  0016F0                     l878:
  2928  0016F0  0EB7               	movlw	low _CMD
  2929  0016F2  6E14               	movwf	strcmp@s1,c
  2930  0016F4  0E00               	movlw	high _CMD
  2931  0016F6  6E15               	movwf	strcmp@s1+1,c
  2932  0016F8  0EF1               	movlw	low STR_30
  2933  0016FA  6E16               	movwf	strcmp@s2,c
  2934  0016FC  0EFF               	movlw	high STR_30
  2935  0016FE  6E17               	movwf	strcmp@s2+1,c
  2936  001700  EC21  F01B         	call	_strcmp	;wreg free
  2937  001704  5014               	movf	?_strcmp,w,c
  2938  001706  1015               	iorwf	?_strcmp+1,w,c
  2939  001708  A4D8               	btfss	status,2,c
  2940  00170A  D018               	goto	l880
  2941                           
  2942                           ;cmd_consol.c: 438: printf("%d\r\n", clcd_max_row());
  2943  00170C  0EDF               	movlw	low (STR_17+14)
  2944  00170E  6E22               	movwf	printf@f,c
  2945  001710  0EFD               	movlw	high (STR_17+14)
  2946  001712  6E23               	movwf	printf@f+1,c
  2947  001714  EC0C  F01E         	call	_clcd_max_row	;wreg free
  2948  001718  0100               	movlb	0	; () banked
  2949  00171A  6FDF               	movwf	??_reply_to_host& (0+255),b
  2950  00171C  51DF               	movf	??_reply_to_host& (0+255),w,b
  2951  00171E  6E24               	movwf	?_printf+2,c
  2952  001720  6A25               	clrf	?_printf+3,c
  2953  001722  EC1B  F012         	call	_printf	;wreg free
  2954                           
  2955                           ;cmd_consol.c: 439: printf("\r\n%s.., OK\r\n", "MR?");
  2956  001726  0E89               	movlw	low STR_95
  2957  001728  6E22               	movwf	printf@f,c
  2958  00172A  0EFE               	movlw	high STR_95
  2959  00172C  6E23               	movwf	printf@f+1,c
  2960  00172E  0EF1               	movlw	low STR_30
  2961  001730  6E24               	movwf	?_printf+2,c
  2962  001732  0EFF               	movlw	high STR_30
  2963  001734  6E25               	movwf	?_printf+3,c
  2964  001736  EC1B  F012         	call	_printf	;wreg free
  2965                           
  2966                           ;cmd_consol.c: 440: } else if (strcmp(CMD, "LCDS") == 0) {
  2967  00173A  0012               	return	
  2968  00173C                     l880:
  2969  00173C  0EB7               	movlw	low _CMD
  2970  00173E  6E14               	movwf	strcmp@s1,c
  2971  001740  0E00               	movlw	high _CMD
  2972  001742  6E15               	movwf	strcmp@s1+1,c
  2973  001744  0EDE               	movlw	low STR_35
  2974  001746  6E16               	movwf	strcmp@s2,c
  2975  001748  0EFF               	movlw	high STR_35
  2976  00174A  6E17               	movwf	strcmp@s2+1,c
  2977  00174C  EC21  F01B         	call	_strcmp	;wreg free
  2978  001750  5014               	movf	?_strcmp,w,c
  2979  001752  1015               	iorwf	?_strcmp+1,w,c
  2980  001754  A4D8               	btfss	status,2,c
  2981  001756  D011               	goto	l882
  2982                           
  2983                           ;cmd_consol.c: 441: init_clcd_cusotom_lcd(clcd_init_row, clcd_init_col);
  2984  001758  C080  F034         	movff	_clcd_init_col,init_clcd_cusotom_lcd@clcd_init_col
  2985  00175C  0100               	movlb	0	; () banked
  2986  00175E  5181               	movf	_clcd_init_row& (0+255),w,b
  2987  001760  ECB6  F016         	call	_init_clcd_cusotom_lcd
  2988                           
  2989                           ;cmd_consol.c: 442: printf("\r\n%s.., OK\r\n", "LCDS");
  2990  001764  0E89               	movlw	low STR_95
  2991  001766  6E22               	movwf	printf@f,c
  2992  001768  0EFE               	movlw	high STR_95
  2993  00176A  6E23               	movwf	printf@f+1,c
  2994  00176C  0EDE               	movlw	low STR_35
  2995  00176E  6E24               	movwf	?_printf+2,c
  2996  001770  0EFF               	movlw	high STR_35
  2997  001772  6E25               	movwf	?_printf+3,c
  2998  001774  EC1B  F012         	call	_printf	;wreg free
  2999                           
  3000                           ;cmd_consol.c: 443: } else if (strcmp(CMD, "GMDS?") == 0) {
  3001  001778  0012               	return	
  3002  00177A                     l882:
  3003  00177A  0EB7               	movlw	low _CMD
  3004  00177C  6E14               	movwf	strcmp@s1,c
  3005  00177E  0E00               	movlw	high _CMD
  3006  001780  6E15               	movwf	strcmp@s1+1,c
  3007  001782  0EC2               	movlw	low STR_40
  3008  001784  6E16               	movwf	strcmp@s2,c
  3009  001786  0EFF               	movlw	high STR_40
  3010  001788  6E17               	movwf	strcmp@s2+1,c
  3011  00178A  EC21  F01B         	call	_strcmp	;wreg free
  3012  00178E  5014               	movf	?_strcmp,w,c
  3013  001790  1015               	iorwf	?_strcmp+1,w,c
  3014  001792  A4D8               	btfss	status,2,c
  3015  001794  D039               	goto	l884
  3016                           
  3017                           ;cmd_consol.c: 444: if (max_display_str() != 0) {
  3018  001796  EC05  F01E         	call	_max_display_str	;wreg free
  3019  00179A  0900               	iorlw	0
  3020  00179C  B4D8               	btfsc	status,2,c
  3021  00179E  D01C               	goto	l885
  3022                           
  3023                           ;cmd_consol.c: 445: printf("%d,%c-%c\r\n", max_display_str(), min_uid_range(), max_uid_r
      +                          ange());
  3024  0017A0  0E0E               	movlw	low STR_109
  3025  0017A2  6E22               	movwf	printf@f,c
  3026  0017A4  0EFF               	movlw	high STR_109
  3027  0017A6  6E23               	movwf	printf@f+1,c
  3028  0017A8  EC05  F01E         	call	_max_display_str	;wreg free
  3029  0017AC  0100               	movlb	0	; () banked
  3030  0017AE  6FDF               	movwf	??_reply_to_host& (0+255),b
  3031  0017B0  51DF               	movf	??_reply_to_host& (0+255),w,b
  3032  0017B2  6E24               	movwf	?_printf+2,c
  3033  0017B4  6A25               	clrf	?_printf+3,c
  3034  0017B6  ECF7  F01D         	call	_min_uid_range	;wreg free
  3035  0017BA  0100               	movlb	0	; () banked
  3036  0017BC  6FE0               	movwf	(??_reply_to_host+1)& (0+255),b
  3037  0017BE  51E0               	movf	(??_reply_to_host+1)& (0+255),w,b
  3038  0017C0  6E26               	movwf	?_printf+4,c
  3039  0017C2  6A27               	clrf	?_printf+5,c
  3040  0017C4  ECFE  F01D         	call	_max_uid_range	;wreg free
  3041  0017C8  0100               	movlb	0	; () banked
  3042  0017CA  6FE1               	movwf	(??_reply_to_host+2)& (0+255),b
  3043  0017CC  51E1               	movf	(??_reply_to_host+2)& (0+255),w,b
  3044  0017CE  6E28               	movwf	?_printf+6,c
  3045  0017D0  6A29               	clrf	?_printf+7,c
  3046  0017D2  EC1B  F012         	call	_printf	;wreg free
  3047                           
  3048                           ;cmd_consol.c: 446: } else {
  3049  0017D6  D00D               	goto	l886
  3050  0017D8                     l885:
  3051                           
  3052                           ;cmd_consol.c: 447: printf("%d\r\n", max_display_str());
  3053  0017D8  0EDF               	movlw	low (STR_17+14)
  3054  0017DA  6E22               	movwf	printf@f,c
  3055  0017DC  0EFD               	movlw	high (STR_17+14)
  3056  0017DE  6E23               	movwf	printf@f+1,c
  3057  0017E0  EC05  F01E         	call	_max_display_str	;wreg free
  3058  0017E4  0100               	movlb	0	; () banked
  3059  0017E6  6FDF               	movwf	??_reply_to_host& (0+255),b
  3060  0017E8  51DF               	movf	??_reply_to_host& (0+255),w,b
  3061  0017EA  6E24               	movwf	?_printf+2,c
  3062  0017EC  6A25               	clrf	?_printf+3,c
  3063  0017EE  EC1B  F012         	call	_printf	;wreg free
  3064  0017F2                     l886:
  3065                           
  3066                           ;cmd_consol.c: 448: }
  3067                           ;cmd_consol.c: 449: printf("\r\n%s.., OK\r\n", "GMDS?");
  3068  0017F2  0E89               	movlw	low STR_95
  3069  0017F4  6E22               	movwf	printf@f,c
  3070  0017F6  0EFE               	movlw	high STR_95
  3071  0017F8  6E23               	movwf	printf@f+1,c
  3072  0017FA  0EC2               	movlw	low STR_40
  3073  0017FC  6E24               	movwf	?_printf+2,c
  3074  0017FE  0EFF               	movlw	high STR_40
  3075  001800  6E25               	movwf	?_printf+3,c
  3076  001802  EC1B  F012         	call	_printf	;wreg free
  3077                           
  3078                           ;cmd_consol.c: 450: } else if (strcmp(CMD, "SDSTR") == 0) {
  3079  001806  0012               	return	
  3080  001808                     l884:
  3081  001808  0EB7               	movlw	low _CMD
  3082  00180A  6E14               	movwf	strcmp@s1,c
  3083  00180C  0E00               	movlw	high _CMD
  3084  00180E  6E15               	movwf	strcmp@s1+1,c
  3085  001810  0ECE               	movlw	low STR_42
  3086  001812  6E16               	movwf	strcmp@s2,c
  3087  001814  0EFF               	movlw	high STR_42
  3088  001816  6E17               	movwf	strcmp@s2+1,c
  3089  001818  EC21  F01B         	call	_strcmp	;wreg free
  3090  00181C  5014               	movf	?_strcmp,w,c
  3091  00181E  1015               	iorwf	?_strcmp+1,w,c
  3092  001820  A4D8               	btfss	status,2,c
  3093  001822  D00B               	goto	l888
  3094                           
  3095                           ;cmd_consol.c: 451: printf("\r\n%s.., OK\r\n", "SDSTR");
  3096  001824  0E89               	movlw	low STR_95
  3097  001826  6E22               	movwf	printf@f,c
  3098  001828  0EFE               	movlw	high STR_95
  3099  00182A  6E23               	movwf	printf@f+1,c
  3100  00182C  0ECE               	movlw	low STR_42
  3101  00182E  6E24               	movwf	?_printf+2,c
  3102  001830  0EFF               	movlw	high STR_42
  3103  001832  6E25               	movwf	?_printf+3,c
  3104  001834  EC1B  F012         	call	_printf	;wreg free
  3105                           
  3106                           ;cmd_consol.c: 452: } else if (strcmp(CMD, "SDSCROL") == 0) {
  3107  001838  0012               	return	
  3108  00183A                     l888:
  3109  00183A  0EB7               	movlw	low _CMD
  3110  00183C  6E14               	movwf	strcmp@s1,c
  3111  00183E  0E00               	movlw	high _CMD
  3112  001840  6E15               	movwf	strcmp@s1+1,c
  3113  001842  0E8A               	movlw	low STR_50
  3114  001844  6E16               	movwf	strcmp@s2,c
  3115  001846  0EFF               	movlw	high STR_50
  3116  001848  6E17               	movwf	strcmp@s2+1,c
  3117  00184A  EC21  F01B         	call	_strcmp	;wreg free
  3118  00184E  5014               	movf	?_strcmp,w,c
  3119  001850  1015               	iorwf	?_strcmp+1,w,c
  3120  001852  A4D8               	btfss	status,2,c
  3121  001854  D00B               	goto	l890
  3122                           
  3123                           ;cmd_consol.c: 453: printf("\r\n%s.., OK\r\n", "SDSCROL");
  3124  001856  0E89               	movlw	low STR_95
  3125  001858  6E22               	movwf	printf@f,c
  3126  00185A  0EFE               	movlw	high STR_95
  3127  00185C  6E23               	movwf	printf@f+1,c
  3128  00185E  0E8A               	movlw	low STR_50
  3129  001860  6E24               	movwf	?_printf+2,c
  3130  001862  0EFF               	movlw	high STR_50
  3131  001864  6E25               	movwf	?_printf+3,c
  3132  001866  EC1B  F012         	call	_printf	;wreg free
  3133                           
  3134                           ;cmd_consol.c: 454: } else if (strcmp(CMD, "SDSERC") == 0) {
  3135  00186A  0012               	return	
  3136  00186C                     l890:
  3137  00186C  0EB7               	movlw	low _CMD
  3138  00186E  6E14               	movwf	strcmp@s1,c
  3139  001870  0E00               	movlw	high _CMD
  3140  001872  6E15               	movwf	strcmp@s1+1,c
  3141  001874  0EAE               	movlw	low STR_59
  3142  001876  6E16               	movwf	strcmp@s2,c
  3143  001878  0EFF               	movlw	high STR_59
  3144  00187A  6E17               	movwf	strcmp@s2+1,c
  3145  00187C  EC21  F01B         	call	_strcmp	;wreg free
  3146  001880  5014               	movf	?_strcmp,w,c
  3147  001882  1015               	iorwf	?_strcmp+1,w,c
  3148  001884  A4D8               	btfss	status,2,c
  3149  001886  D00B               	goto	l892
  3150                           
  3151                           ;cmd_consol.c: 455: printf("\r\n%s.., OK\r\n", "SDSERC");
  3152  001888  0E89               	movlw	low STR_95
  3153  00188A  6E22               	movwf	printf@f,c
  3154  00188C  0EFE               	movlw	high STR_95
  3155  00188E  6E23               	movwf	printf@f+1,c
  3156  001890  0EAE               	movlw	low STR_59
  3157  001892  6E24               	movwf	?_printf+2,c
  3158  001894  0EFF               	movlw	high STR_59
  3159  001896  6E25               	movwf	?_printf+3,c
  3160  001898  EC1B  F012         	call	_printf	;wreg free
  3161                           
  3162                           ;cmd_consol.c: 456: } else if (strcmp(CMD, "UPDATE") == 0) {
  3163  00189C  0012               	return	
  3164  00189E                     l892:
  3165  00189E  0EB7               	movlw	low _CMD
  3166  0018A0  6E14               	movwf	strcmp@s1,c
  3167  0018A2  0E00               	movlw	high _CMD
  3168  0018A4  6E15               	movwf	strcmp@s1+1,c
  3169  0018A6  0EB5               	movlw	low STR_72
  3170  0018A8  6E16               	movwf	strcmp@s2,c
  3171  0018AA  0EFF               	movlw	high STR_72
  3172  0018AC  6E17               	movwf	strcmp@s2+1,c
  3173  0018AE  EC21  F01B         	call	_strcmp	;wreg free
  3174  0018B2  5014               	movf	?_strcmp,w,c
  3175  0018B4  1015               	iorwf	?_strcmp+1,w,c
  3176  0018B6  A4D8               	btfss	status,2,c
  3177  0018B8  0012               	return	
  3178                           
  3179                           ;cmd_consol.c: 457: if (cmd_data.data_set == 1 && cmd_data.row_col_set == 1 && cmd_data.
      +                          scroll_set == 1) {
  3180  0018BA  0100               	movlb	0	; () banked
  3181  0018BC  05AC               	decf	(_cmd_data+41)& (0+255),w,b
  3182  0018BE  A4D8               	btfss	status,2,c
  3183  0018C0  D027               	goto	l895
  3184                           
  3185                           ; BSR set to: 0
  3186  0018C2  05B1               	decf	(_cmd_data+46)& (0+255),w,b
  3187  0018C4  A4D8               	btfss	status,2,c
  3188  0018C6  D024               	goto	l895
  3189                           
  3190                           ; BSR set to: 0
  3191  0018C8  05B3               	decf	(_cmd_data+48)& (0+255),w,b
  3192  0018CA  A4D8               	btfss	status,2,c
  3193  0018CC  D021               	goto	l895
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;cmd_consol.c: 458: char ch = update_string_data(&cmd_data);
  3197  0018CE  0E83               	movlw	low _cmd_data
  3198  0018D0  6FD4               	movwf	update_string_data@data& (0+255),b
  3199  0018D2  0E00               	movlw	high _cmd_data
  3200  0018D4  6FD5               	movwf	(update_string_data@data+1)& (0+255),b
  3201  0018D6  EC06  F00E         	call	_update_string_data	;wreg free
  3202  0018DA  0100               	movlb	0	; () banked
  3203  0018DC  6FE2               	movwf	reply_to_host@ch& (0+255),b
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;cmd_consol.c: 459: if (ch == 1)
  3207  0018DE  05E2               	decf	reply_to_host@ch& (0+255),w,b
  3208  0018E0  A4D8               	btfss	status,2,c
  3209  0018E2  D00B               	goto	l896
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;cmd_consol.c: 460: printf("%s\r\n", "ERROR");
  3213  0018E4  0EA2               	movlw	low (STR_127+2)
  3214  0018E6  6E22               	movwf	printf@f,c
  3215  0018E8  0EFF               	movlw	high (STR_127+2)
  3216  0018EA  6E23               	movwf	printf@f+1,c
  3217  0018EC  0EC8               	movlw	low STR_124
  3218  0018EE  6E24               	movwf	?_printf+2,c
  3219  0018F0  0EFF               	movlw	high STR_124
  3220  0018F2  6E25               	movwf	?_printf+3,c
  3221  0018F4  EC1B  F012         	call	_printf	;wreg free
  3222  0018F8  0012               	return	
  3223  0018FA                     l896:
  3224                           
  3225                           ;cmd_consol.c: 461: else
  3226                           ;cmd_consol.c: 462: printf("\r\n%s.., OK\r\n", "UPDATE");
  3227  0018FA  0E89               	movlw	low STR_95
  3228  0018FC  6E22               	movwf	printf@f,c
  3229  0018FE  0EFE               	movlw	high STR_95
  3230  001900  6E23               	movwf	printf@f+1,c
  3231  001902  0EB5               	movlw	low STR_72
  3232  001904  6E24               	movwf	?_printf+2,c
  3233  001906  0EFF               	movlw	high STR_72
  3234  001908  6E25               	movwf	?_printf+3,c
  3235  00190A  EC1B  F012         	call	_printf	;wreg free
  3236                           
  3237                           ;cmd_consol.c: 463: } else {
  3238  00190E  0012               	return	
  3239  001910                     l895:
  3240                           
  3241                           ;cmd_consol.c: 464: if (cmd_data.data_set == 0) {
  3242  001910  0100               	movlb	0	; () banked
  3243  001912  51AC               	movf	(_cmd_data+41)& (0+255),w,b
  3244  001914  A4D8               	btfss	status,2,c
  3245  001916  D00B               	goto	l899
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;cmd_consol.c: 465: printf("\r\n%s\r\n", "ERR_STR_SET");
  3249  001918  0EA0               	movlw	low STR_127
  3250  00191A  6E22               	movwf	printf@f,c
  3251  00191C  0EFF               	movlw	high STR_127
  3252  00191E  6E23               	movwf	printf@f+1,c
  3253  001920  0E02               	movlw	low STR_128
  3254  001922  6E24               	movwf	?_printf+2,c
  3255  001924  0EFF               	movlw	high STR_128
  3256  001926  6E25               	movwf	?_printf+3,c
  3257  001928  EC1B  F012         	call	_printf	;wreg free
  3258                           
  3259                           ;cmd_consol.c: 466: } else if (cmd_data.row_col_set == 0) {
  3260  00192C  0012               	return	
  3261  00192E                     l899:
  3262  00192E  0100               	movlb	0	; () banked
  3263  001930  51B1               	movf	(_cmd_data+46)& (0+255),w,b
  3264  001932  A4D8               	btfss	status,2,c
  3265  001934  D00B               	goto	l901
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;cmd_consol.c: 467: printf("\r\n%s\r\n", "ERR_ROW_COL");
  3269  001936  0EA0               	movlw	low STR_127
  3270  001938  6E22               	movwf	printf@f,c
  3271  00193A  0EFF               	movlw	high STR_127
  3272  00193C  6E23               	movwf	printf@f+1,c
  3273  00193E  0EEA               	movlw	low STR_130
  3274  001940  6E24               	movwf	?_printf+2,c
  3275  001942  0EFE               	movlw	high STR_130
  3276  001944  6E25               	movwf	?_printf+3,c
  3277  001946  EC1B  F012         	call	_printf	;wreg free
  3278                           
  3279                           ;cmd_consol.c: 468: } else if (cmd_data.scroll_set == 0) {
  3280  00194A  0012               	return	
  3281  00194C                     l901:
  3282  00194C  0100               	movlb	0	; () banked
  3283  00194E  51B3               	movf	(_cmd_data+48)& (0+255),w,b
  3284  001950  A4D8               	btfss	status,2,c
  3285  001952  0012               	return	
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;cmd_consol.c: 469: printf("\r\n%s\r\n", "ERR_SCROLL_SET");
  3289  001954  0EA0               	movlw	low STR_127
  3290  001956  6E22               	movwf	printf@f,c
  3291  001958  0EFF               	movlw	high STR_127
  3292  00195A  6E23               	movwf	printf@f+1,c
  3293  00195C  0E6C               	movlw	low STR_132
  3294  00195E  6E24               	movwf	?_printf+2,c
  3295  001960  0EFE               	movlw	high STR_132
  3296  001962  6E25               	movwf	?_printf+3,c
  3297  001964  EC1B  F012         	call	_printf	;wreg free
  3298  001968  0012               	return	
  3299  00196A                     __end_of_reply_to_host:
  3300                           	opt stack 0
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           intcon	equ	0xFF2
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           postdec1	equ	0xFE5
  3309                           fsr1h	equ	0xFE2
  3310                           fsr1l	equ	0xFE1
  3311                           indf2	equ	0xFDF
  3312                           fsr2h	equ	0xFDA
  3313                           fsr2l	equ	0xFD9
  3314                           status	equ	0xFD8
  3315                           
  3316 ;; *************** function _update_string_data *****************
  3317 ;; Defined at:
  3318 ;;		line 271 in file "clcd.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  data            2   14[BANK0 ] PTR struct .
  3321 ;;		 -> cmd_data(52), 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  i               2   23[BANK0 ] int 
  3324 ;;  end_point       1   22[BANK0 ] unsigned char 
  3325 ;;  start_point     1   21[BANK0 ] unsigned char 
  3326 ;;  exist_uid_id    1   20[BANK0 ] unsigned char 
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      unsigned char 
  3329 ;; Registers used:
  3330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3336 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3340 ;;Total ram usage:       11 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; Hardware stack levels required when called:   10
  3343 ;; This function calls:
  3344 ;;		___wmul
  3345 ;;		_conflict_check
  3346 ;;		_copy_data
  3347 ;;		_make_display
  3348 ;;		_memset
  3349 ;;		_printf
  3350 ;; This function is called by:
  3351 ;;		_reply_to_host
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text5
  3356  001C0C                     __ptext5:
  3357                           	opt stack 0
  3358  001C0C                     _update_string_data:
  3359                           	opt stack 18
  3360                           
  3361                           ;clcd.c: 272: int i = 0;
  3362                           
  3363                           ;incstack = 0
  3364  001C0C  0E00               	movlw	0
  3365  001C0E  0100               	movlb	0	; () banked
  3366  001C10  6FDE               	movwf	(update_string_data@i+1)& (0+255),b
  3367  001C12  0E00               	movlw	0
  3368  001C14  6FDD               	movwf	update_string_data@i& (0+255),b
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;clcd.c: 273: char exist_uid_idx = -1;
  3372  001C16  69DA               	setf	update_string_data@exist_uid_idx& (0+255),b
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;clcd.c: 274: char start_point, end_point;
  3376                           ;clcd.c: 275: memset(conflict_arr, -1, sizeof (conflict_arr));
  3377  001C18  0E50               	movlw	low _conflict_arr
  3378  001C1A  6E28               	movwf	memset@p1,c
  3379  001C1C  0E01               	movlw	high _conflict_arr
  3380  001C1E  6E29               	movwf	memset@p1+1,c
  3381  001C20  0EFF               	movlw	255
  3382  001C22  6E2B               	movwf	memset@c+1,c
  3383  001C24  682A               	setf	memset@c,c
  3384  001C26  0E00               	movlw	0
  3385  001C28  6E2D               	movwf	memset@n+1,c
  3386  001C2A  0E28               	movlw	40
  3387  001C2C  6E2C               	movwf	memset@n,c
  3388  001C2E  EC8E  F01B         	call	_memset	;wreg free
  3389                           
  3390                           ;clcd.c: 276: conflict_data_count = 0;
  3391  001C32  0E00               	movlw	0
  3392  001C34  6E3B               	movwf	_conflict_data_count,c
  3393                           
  3394                           ;clcd.c: 277: start_point = (data->start_row * clcd_config_data.clcd_max_col) + data->st
      +                          art_col;
  3395  001C36  0100               	movlb	0	; () banked
  3396  001C38  EE20 F02B          	lfsr	2,43
  3397  001C3C  51D4               	movf	update_string_data@data& (0+255),w,b
  3398  001C3E  26D9               	addwf	fsr2l,f,c
  3399  001C40  51D5               	movf	(update_string_data@data+1)& (0+255),w,b
  3400  001C42  22DA               	addwfc	fsr2h,f,c
  3401  001C44  50DF               	movf	indf2,w,c
  3402  001C46  6FD6               	movwf	??_update_string_data& (0+255),b
  3403  001C48  EE20 F02A          	lfsr	2,42
  3404  001C4C  51D4               	movf	update_string_data@data& (0+255),w,b
  3405  001C4E  26D9               	addwf	fsr2l,f,c
  3406  001C50  51D5               	movf	(update_string_data@data+1)& (0+255),w,b
  3407  001C52  22DA               	addwfc	fsr2h,f,c
  3408  001C54  50DF               	movf	indf2,w,c
  3409  001C56  0246               	mulwf	_clcd_config_data+2,c
  3410  001C58  50F3               	movf	prodl,w,c
  3411  001C5A  25D6               	addwf	??_update_string_data& (0+255),w,b
  3412  001C5C  6FDB               	movwf	update_string_data@start_point& (0+255),b
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;clcd.c: 278: end_point = (data->end_row * clcd_config_data.clcd_max_col) + data->end_co
      +                          l;
  3416  001C5E  EE20 F02D          	lfsr	2,45
  3417  001C62  51D4               	movf	update_string_data@data& (0+255),w,b
  3418  001C64  26D9               	addwf	fsr2l,f,c
  3419  001C66  51D5               	movf	(update_string_data@data+1)& (0+255),w,b
  3420  001C68  22DA               	addwfc	fsr2h,f,c
  3421  001C6A  50DF               	movf	indf2,w,c
  3422  001C6C  6FD6               	movwf	??_update_string_data& (0+255),b
  3423  001C6E  EE20 F02C          	lfsr	2,44
  3424  001C72  51D4               	movf	update_string_data@data& (0+255),w,b
  3425  001C74  26D9               	addwf	fsr2l,f,c
  3426  001C76  51D5               	movf	(update_string_data@data+1)& (0+255),w,b
  3427  001C78  22DA               	addwfc	fsr2h,f,c
  3428  001C7A  50DF               	movf	indf2,w,c
  3429  001C7C  0246               	mulwf	_clcd_config_data+2,c
  3430  001C7E  50F3               	movf	prodl,w,c
  3431  001C80  25D6               	addwf	??_update_string_data& (0+255),w,b
  3432  001C82  6FDC               	movwf	update_string_data@end_point& (0+255),b
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;clcd.c: 280: printf("UID = %c, start_pt = %d, end_pt = %d\r\n", data->uid, start_point,
      +                           end_point);
  3436  001C84  0EE1               	movlw	low STR_12
  3437  001C86  6E22               	movwf	printf@f,c
  3438  001C88  0EFC               	movlw	high STR_12
  3439  001C8A  6E23               	movwf	printf@f+1,c
  3440  001C8C  C0D4  FFD9         	movff	update_string_data@data,fsr2l
  3441  001C90  C0D5  FFDA         	movff	update_string_data@data+1,fsr2h
  3442  001C94  50DF               	movf	indf2,w,c
  3443  001C96  6FD6               	movwf	??_update_string_data& (0+255),b
  3444  001C98  51D6               	movf	??_update_string_data& (0+255),w,b
  3445  001C9A  6E24               	movwf	?_printf+2,c
  3446  001C9C  6A25               	clrf	?_printf+3,c
  3447  001C9E  C0DB  F026         	movff	update_string_data@start_point,?_printf+4
  3448  001CA2  6A27               	clrf	?_printf+5,c
  3449  001CA4  C0DC  F028         	movff	update_string_data@end_point,?_printf+6
  3450  001CA8  6A29               	clrf	?_printf+7,c
  3451  001CAA  EC1B  F012         	call	_printf	;wreg free
  3452                           
  3453                           ;clcd.c: 282: if (data_count < clcd_config_data.clcd_max_display_string) {
  3454  001CAE  5048               	movf	_clcd_config_data+4,w,c
  3455  001CB0  5C3C               	subwf	_data_count,w,c
  3456  001CB2  B0D8               	btfsc	status,0,c
  3457  001CB4  D0D1               	goto	l492
  3458                           
  3459                           ;clcd.c: 283: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3460  001CB6  0E00               	movlw	0
  3461  001CB8  0100               	movlb	0	; () banked
  3462  001CBA  6FDE               	movwf	(update_string_data@i+1)& (0+255),b
  3463  001CBC  0E00               	movlw	0
  3464  001CBE  6FDD               	movwf	update_string_data@i& (0+255),b
  3465  001CC0  D09B               	goto	l493
  3466  001CC2                     
  3467                           ; BSR set to: 0
  3468                           ;clcd.c: 284: if (clcd_display_string_details[i].uid == data->uid) {
  3469                           
  3470                           ; BSR set to: 0
  3471  001CC2  C0DD  F01C         	movff	update_string_data@i,___wmul@multiplier
  3472  001CC6  C0DE  F01D         	movff	update_string_data@i+1,___wmul@multiplier+1
  3473  001CCA  0E00               	movlw	0
  3474  001CCC  6E1F               	movwf	___wmul@multiplicand+1,c
  3475  001CCE  0E37               	movlw	55
  3476  001CD0  6E1E               	movwf	___wmul@multiplicand,c
  3477  001CD2  EC1D  F01D         	call	___wmul	;wreg free
  3478  001CD6  0E96               	movlw	low _clcd_display_string_details
  3479  001CD8  241C               	addwf	?___wmul,w,c
  3480  001CDA  6ED9               	movwf	fsr2l,c
  3481  001CDC  0E02               	movlw	high _clcd_display_string_details
  3482  001CDE  201D               	addwfc	?___wmul+1,w,c
  3483  001CE0  6EDA               	movwf	fsr2h,c
  3484  001CE2  C0D4  FFE1         	movff	update_string_data@data,fsr1l
  3485  001CE6  C0D5  FFE2         	movff	update_string_data@data+1,fsr1h
  3486  001CEA  50E7               	movf	indf1,w,c
  3487  001CEC  0100               	movlb	0	; () banked
  3488  001CEE  6FD8               	movwf	(??_update_string_data+2)& (0+255),b
  3489  001CF0  6BD9               	clrf	(??_update_string_data+3)& (0+255),b
  3490  001CF2  50DE               	movf	postinc2,w,c
  3491  001CF4  19D8               	xorwf	(??_update_string_data+2)& (0+255),w,b
  3492  001CF6  E12D               	bnz	l6810
  3493  001CF8  50DE               	movf	postinc2,w,c
  3494  001CFA  19D9               	xorwf	(??_update_string_data+3)& (0+255),w,b
  3495  001CFC  A4D8               	btfss	status,2,c
  3496  001CFE  D029               	goto	l495
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;clcd.c: 285: exist_uid_idx = i;
  3500  001D00  C0DD  F0DA         	movff	update_string_data@i,update_string_data@exist_uid_idx
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;clcd.c: 286: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  3504  001D04  C0DD  F01C         	movff	update_string_data@i,___wmul@multiplier
  3505  001D08  C0DE  F01D         	movff	update_string_data@i+1,___wmul@multiplier+1
  3506  001D0C  0E00               	movlw	0
  3507  001D0E  6E1F               	movwf	___wmul@multiplicand+1,c
  3508  001D10  0E37               	movlw	55
  3509  001D12  6E1E               	movwf	___wmul@multiplicand,c
  3510  001D14  EC1D  F01D         	call	___wmul	;wreg free
  3511  001D18  0E96               	movlw	low _clcd_display_string_details
  3512  001D1A  241C               	addwf	?___wmul,w,c
  3513  001D1C  6ED9               	movwf	fsr2l,c
  3514  001D1E  0E02               	movlw	high _clcd_display_string_details
  3515  001D20  201D               	addwfc	?___wmul+1,w,c
  3516  001D22  6EDA               	movwf	fsr2h,c
  3517  001D24  503B               	movf	_conflict_data_count,w,c
  3518  001D26  0D02               	mullw	2
  3519  001D28  0E50               	movlw	low _conflict_arr
  3520  001D2A  24F3               	addwf	prodl,w,c
  3521  001D2C  6EE1               	movwf	fsr1l,c
  3522  001D2E  0E01               	movlw	high _conflict_arr
  3523  001D30  20F4               	addwfc	prodh,w,c
  3524  001D32  6EE2               	movwf	fsr1h,c
  3525  001D34  CFDE FFE6          	movff	postinc2,postinc1
  3526  001D38  CFDD FFE5          	movff	postdec2,postdec1
  3527  001D3C  2A3B               	incf	_conflict_data_count,f,c
  3528                           
  3529                           ;clcd.c: 287: conflict_check(exist_uid_idx, start_point, end_point);
  3530  001D3E  C0DB  F034         	movff	update_string_data@start_point,conflict_check@new_start_point
  3531  001D42  C0DC  F035         	movff	update_string_data@end_point,conflict_check@new_end_point
  3532  001D46  0100               	movlb	0	; () banked
  3533  001D48  51DA               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3534  001D4A  ECB5  F00C         	call	_conflict_check
  3535                           
  3536                           ;clcd.c: 288: return 1;
  3537  001D4E  0E01               	movlw	1
  3538  001D50  0012               	return	
  3539  001D52                     l495:
  3540  001D52                     l6810:
  3541                           
  3542                           ;clcd.c: 290: if (conflict_check(exist_uid_idx, start_point, end_point) == 1) {
  3543  001D52  C0DB  F034         	movff	update_string_data@start_point,conflict_check@new_start_point
  3544  001D56  C0DC  F035         	movff	update_string_data@end_point,conflict_check@new_end_point
  3545  001D5A  0100               	movlb	0	; () banked
  3546  001D5C  51DA               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3547  001D5E  ECB5  F00C         	call	_conflict_check
  3548  001D62  06E8               	decf	wreg,f,c
  3549  001D64  A4D8               	btfss	status,2,c
  3550  001D66  D045               	goto	l498
  3551                           
  3552                           ;clcd.c: 291: printf("conflict: uid\r\n");
  3553  001D68  0E5C               	movlw	low STR_14
  3554  001D6A  6E22               	movwf	printf@f,c
  3555  001D6C  0EFE               	movlw	high STR_14
  3556  001D6E  6E23               	movwf	printf@f+1,c
  3557  001D70  EC1B  F012         	call	_printf	;wreg free
  3558                           
  3559                           ;clcd.c: 292: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3560  001D74  0E00               	movlw	0
  3561  001D76  0100               	movlb	0	; () banked
  3562  001D78  6FDE               	movwf	(update_string_data@i+1)& (0+255),b
  3563  001D7A  0E00               	movlw	0
  3564  001D7C  6FDD               	movwf	update_string_data@i& (0+255),b
  3565  001D7E  D024               	goto	l499
  3566  001D80                     
  3567                           ; BSR set to: 0
  3568                           ;clcd.c: 293: if (conflict_arr[i] != -1)
  3569                           
  3570                           ; BSR set to: 0
  3571  001D80  90D8               	bcf	status,0,c
  3572  001D82  35DD               	rlcf	update_string_data@i& (0+255),w,b
  3573  001D84  6ED9               	movwf	fsr2l,c
  3574  001D86  35DE               	rlcf	(update_string_data@i+1)& (0+255),w,b
  3575  001D88  6EDA               	movwf	fsr2h,c
  3576  001D8A  0E50               	movlw	low _conflict_arr
  3577  001D8C  26D9               	addwf	fsr2l,f,c
  3578  001D8E  0E01               	movlw	high _conflict_arr
  3579  001D90  22DA               	addwfc	fsr2h,f,c
  3580  001D92  28DE               	incf	postinc2,w,c
  3581  001D94  E103               	bnz	u6790
  3582  001D96  28DE               	incf	postinc2,w,c
  3583  001D98  B4D8               	btfsc	status,2,c
  3584  001D9A  D013               	goto	l501
  3585  001D9C                     u6790:
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;clcd.c: 294: printf("%c, ", conflict_arr[i]);
  3589  001D9C  0EE3               	movlw	low STR_15
  3590  001D9E  6E22               	movwf	printf@f,c
  3591  001DA0  0EFF               	movlw	high STR_15
  3592  001DA2  6E23               	movwf	printf@f+1,c
  3593  001DA4  90D8               	bcf	status,0,c
  3594  001DA6  35DD               	rlcf	update_string_data@i& (0+255),w,b
  3595  001DA8  6ED9               	movwf	fsr2l,c
  3596  001DAA  35DE               	rlcf	(update_string_data@i+1)& (0+255),w,b
  3597  001DAC  6EDA               	movwf	fsr2h,c
  3598  001DAE  0E50               	movlw	low _conflict_arr
  3599  001DB0  26D9               	addwf	fsr2l,f,c
  3600  001DB2  0E01               	movlw	high _conflict_arr
  3601  001DB4  22DA               	addwfc	fsr2h,f,c
  3602  001DB6  CFDE F024          	movff	postinc2,?_printf+2
  3603  001DBA  CFDD F025          	movff	postdec2,?_printf+3
  3604  001DBE  EC1B  F012         	call	_printf	;wreg free
  3605  001DC2                     l501:
  3606  001DC2  0100               	movlb	0	; () banked
  3607  001DC4  4BDD               	infsnz	update_string_data@i& (0+255),f,b
  3608  001DC6  2BDE               	incf	(update_string_data@i+1)& (0+255),f,b
  3609  001DC8                     l499:
  3610                           
  3611                           ; BSR set to: 0
  3612                           
  3613                           ; BSR set to: 0
  3614  001DC8  5048               	movf	_clcd_config_data+4,w,c
  3615  001DCA  6FD6               	movwf	??_update_string_data& (0+255),b
  3616  001DCC  6BD7               	clrf	(??_update_string_data+1)& (0+255),b
  3617  001DCE  51D6               	movf	??_update_string_data& (0+255),w,b
  3618  001DD0  5DDD               	subwf	update_string_data@i& (0+255),w,b
  3619  001DD2  51DE               	movf	(update_string_data@i+1)& (0+255),w,b
  3620  001DD4  0A80               	xorlw	128
  3621  001DD6  6FD8               	movwf	(??_update_string_data+2)& (0+255),b
  3622  001DD8  51D7               	movf	(??_update_string_data+1)& (0+255),w,b
  3623  001DDA  0A80               	xorlw	128
  3624  001DDC  59D8               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3625  001DDE  A0D8               	btfss	status,0,c
  3626  001DE0  D7CF               	goto	l500
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;clcd.c: 295: }
  3630                           ;clcd.c: 296: printf("\r\n");
  3631                           
  3632                           ; BSR set to: 0
  3633  001DE2  0E9F               	movlw	low (STR_62+9)
  3634  001DE4  6E22               	movwf	printf@f,c
  3635  001DE6  0EFE               	movlw	high (STR_62+9)
  3636  001DE8  6E23               	movwf	printf@f+1,c
  3637  001DEA  EC1B  F012         	call	_printf	;wreg free
  3638                           
  3639                           ;clcd.c: 297: return 1;
  3640  001DEE  0E01               	movlw	1
  3641  001DF0  0012               	return	
  3642  001DF2                     l498:
  3643  001DF2  0100               	movlb	0	; () banked
  3644  001DF4  4BDD               	infsnz	update_string_data@i& (0+255),f,b
  3645  001DF6  2BDE               	incf	(update_string_data@i+1)& (0+255),f,b
  3646  001DF8                     l493:
  3647                           
  3648                           ; BSR set to: 0
  3649                           
  3650                           ; BSR set to: 0
  3651  001DF8  5048               	movf	_clcd_config_data+4,w,c
  3652  001DFA  6FD6               	movwf	??_update_string_data& (0+255),b
  3653  001DFC  6BD7               	clrf	(??_update_string_data+1)& (0+255),b
  3654  001DFE  51D6               	movf	??_update_string_data& (0+255),w,b
  3655  001E00  5DDD               	subwf	update_string_data@i& (0+255),w,b
  3656  001E02  51DE               	movf	(update_string_data@i+1)& (0+255),w,b
  3657  001E04  0A80               	xorlw	128
  3658  001E06  6FD8               	movwf	(??_update_string_data+2)& (0+255),b
  3659  001E08  51D7               	movf	(??_update_string_data+1)& (0+255),w,b
  3660  001E0A  0A80               	xorlw	128
  3661  001E0C  59D8               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3662  001E0E  A0D8               	btfss	status,0,c
  3663  001E10  D758               	goto	l494
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;clcd.c: 298: }
  3667                           ;clcd.c: 299: }
  3668                           ;clcd.c: 300: }
  3669                           ;clcd.c: 301: memset(&clcd_display_string_details[data_count], 0, sizeof (CLCD_STRING_DI
      +                          SPLAY_DETAILS));
  3670                           
  3671                           ; BSR set to: 0
  3672  001E12  503C               	movf	_data_count,w,c
  3673  001E14  0D37               	mullw	55
  3674  001E16  0E96               	movlw	low _clcd_display_string_details
  3675  001E18  24F3               	addwf	prodl,w,c
  3676  001E1A  6E28               	movwf	memset@p1,c
  3677  001E1C  0E02               	movlw	high _clcd_display_string_details
  3678  001E1E  20F4               	addwfc	prodh,w,c
  3679  001E20  6E29               	movwf	memset@p1+1,c
  3680  001E22  0E00               	movlw	0
  3681  001E24  6E2B               	movwf	memset@c+1,c
  3682  001E26  0E00               	movlw	0
  3683  001E28  6E2A               	movwf	memset@c,c
  3684  001E2A  0E00               	movlw	0
  3685  001E2C  6E2D               	movwf	memset@n+1,c
  3686  001E2E  0E37               	movlw	55
  3687  001E30  6E2C               	movwf	memset@n,c
  3688  001E32  EC8E  F01B         	call	_memset	;wreg free
  3689                           
  3690                           ;clcd.c: 302: copy_data(&clcd_display_string_details[data_count], data);
  3691  001E36  503C               	movf	_data_count,w,c
  3692  001E38  0D37               	mullw	55
  3693  001E3A  0E96               	movlw	low _clcd_display_string_details
  3694  001E3C  24F3               	addwf	prodl,w,c
  3695  001E3E  6E34               	movwf	copy_data@clcd_str_data,c
  3696  001E40  0E02               	movlw	high _clcd_display_string_details
  3697  001E42  20F4               	addwfc	prodh,w,c
  3698  001E44  6E35               	movwf	copy_data@clcd_str_data+1,c
  3699  001E46  C0D4  F036         	movff	update_string_data@data,copy_data@data
  3700  001E4A  C0D5  F037         	movff	update_string_data@data+1,copy_data@data+1
  3701  001E4E  EC2E  F00F         	call	_copy_data	;wreg free
  3702                           
  3703                           ;clcd.c: 303: data_count++;
  3704  001E52  2A3C               	incf	_data_count,f,c
  3705                           
  3706                           ;clcd.c: 304: make_display();
  3707  001E54  EC2A  F011         	call	_make_display	;wreg free
  3708  001E58                     l492:
  3709                           
  3710                           ;clcd.c: 307: }
  3711                           ;clcd.c: 308: return 0;
  3712  001E58  0E00               	movlw	0
  3713  001E5A  0012               	return	
  3714  001E5C                     __end_of_update_string_data:
  3715                           	opt stack 0
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           prodh	equ	0xFF4
  3721                           prodl	equ	0xFF3
  3722                           intcon	equ	0xFF2
  3723                           postinc0	equ	0xFEE
  3724                           wreg	equ	0xFE8
  3725                           indf1	equ	0xFE7
  3726                           postinc1	equ	0xFE6
  3727                           postdec1	equ	0xFE5
  3728                           fsr1h	equ	0xFE2
  3729                           fsr1l	equ	0xFE1
  3730                           indf2	equ	0xFDF
  3731                           postinc2	equ	0xFDE
  3732                           postdec2	equ	0xFDD
  3733                           fsr2h	equ	0xFDA
  3734                           fsr2l	equ	0xFD9
  3735                           status	equ	0xFD8
  3736                           
  3737 ;; *************** function _make_display *****************
  3738 ;; Defined at:
  3739 ;;		line 656 in file "clcd.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;		None
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;  count           2   54[COMRAM] int 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;Total ram usage:        5 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    9
  3760 ;; This function calls:
  3761 ;;		___wmul
  3762 ;;		_display_text
  3763 ;;		_scroll_left_to_right
  3764 ;;		_scroll_off
  3765 ;;		_scroll_right_to_left
  3766 ;;		_strlen
  3767 ;; This function is called by:
  3768 ;;		_update_string_data
  3769 ;;		_main
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           	psect	text6
  3774  002254                     __ptext6:
  3775                           	opt stack 0
  3776  002254                     _make_display:
  3777                           	opt stack 21
  3778                           
  3779                           ;clcd.c: 657: int count = 0;
  3780                           
  3781                           ;incstack = 0
  3782  002254  0E00               	movlw	0
  3783  002256  6E38               	movwf	make_display@count+1,c
  3784  002258  0E00               	movlw	0
  3785  00225A  6E37               	movwf	make_display@count,c
  3786                           
  3787                           ;clcd.c: 658: for (count = 0; count < clcd_config_data.clcd_max_display_string; count++)
      +                           {
  3788  00225C  0E00               	movlw	0
  3789  00225E  6E38               	movwf	make_display@count+1,c
  3790  002260  0E00               	movlw	0
  3791  002262  6E37               	movwf	make_display@count,c
  3792  002264  D0D3               	goto	l629
  3793  002266                     
  3794                           ;clcd.c: 659: if (strlen(clcd_display_string_details[count].string) != 0 && clcd_display
      +                          _string_details[count].direction == 2) {
  3795  002266  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3796  00226A  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3797  00226E  0E00               	movlw	0
  3798  002270  6E1F               	movwf	___wmul@multiplicand+1,c
  3799  002272  0E37               	movlw	55
  3800  002274  6E1E               	movwf	___wmul@multiplicand,c
  3801  002276  EC1D  F01D         	call	___wmul	;wreg free
  3802  00227A  0E02               	movlw	2
  3803  00227C  261C               	addwf	?___wmul,f,c
  3804  00227E  0E00               	movlw	0
  3805  002280  221D               	addwfc	?___wmul+1,f,c
  3806  002282  0E96               	movlw	low _clcd_display_string_details
  3807  002284  241C               	addwf	?___wmul,w,c
  3808  002286  6E22               	movwf	strlen@s,c
  3809  002288  0E02               	movlw	high _clcd_display_string_details
  3810  00228A  201D               	addwfc	?___wmul+1,w,c
  3811  00228C  6E23               	movwf	strlen@s+1,c
  3812  00228E  EC7E  F01A         	call	_strlen	;wreg free
  3813  002292  5022               	movf	?_strlen,w,c
  3814  002294  1023               	iorwf	?_strlen+1,w,c
  3815  002296  B4D8               	btfsc	status,2,c
  3816  002298  D02C               	goto	l631
  3817  00229A  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3818  00229E  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3819  0022A2  0E00               	movlw	0
  3820  0022A4  6E1F               	movwf	___wmul@multiplicand+1,c
  3821  0022A6  0E37               	movlw	55
  3822  0022A8  6E1E               	movwf	___wmul@multiplicand,c
  3823  0022AA  EC1D  F01D         	call	___wmul	;wreg free
  3824  0022AE  0E31               	movlw	49
  3825  0022B0  261C               	addwf	?___wmul,f,c
  3826  0022B2  0E00               	movlw	0
  3827  0022B4  221D               	addwfc	?___wmul+1,f,c
  3828  0022B6  0E96               	movlw	low _clcd_display_string_details
  3829  0022B8  241C               	addwf	?___wmul,w,c
  3830  0022BA  6ED9               	movwf	fsr2l,c
  3831  0022BC  0E02               	movlw	high _clcd_display_string_details
  3832  0022BE  201D               	addwfc	?___wmul+1,w,c
  3833  0022C0  6EDA               	movwf	fsr2h,c
  3834  0022C2  50DF               	movf	223,w,c
  3835  0022C4  0B07               	andlw	7
  3836  0022C6  0A02               	xorlw	2
  3837  0022C8  A4D8               	btfss	status,2,c
  3838  0022CA  D013               	goto	l631
  3839                           
  3840                           ;clcd.c: 660: scroll_left_to_right(&clcd_display_string_details[count]);
  3841  0022CC  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3842  0022D0  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3843  0022D4  0E00               	movlw	0
  3844  0022D6  6E1F               	movwf	___wmul@multiplicand+1,c
  3845  0022D8  0E37               	movlw	55
  3846  0022DA  6E1E               	movwf	___wmul@multiplicand,c
  3847  0022DC  EC1D  F01D         	call	___wmul	;wreg free
  3848  0022E0  0E96               	movlw	low _clcd_display_string_details
  3849  0022E2  241C               	addwf	?___wmul,w,c
  3850  0022E4  6E30               	movwf	scroll_left_to_right@clcd_display_string_details,c
  3851  0022E6  0E02               	movlw	high _clcd_display_string_details
  3852  0022E8  201D               	addwfc	?___wmul+1,w,c
  3853  0022EA  6E31               	movwf	scroll_left_to_right@clcd_display_string_details+1,c
  3854  0022EC  EC74  F009         	call	_scroll_left_to_right	;wreg free
  3855                           
  3856                           ;clcd.c: 661: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 1) {
  3857  0022F0  D08B               	goto	l635
  3858  0022F2                     l631:
  3859  0022F2  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3860  0022F6  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3861  0022FA  0E00               	movlw	0
  3862  0022FC  6E1F               	movwf	___wmul@multiplicand+1,c
  3863  0022FE  0E37               	movlw	55
  3864  002300  6E1E               	movwf	___wmul@multiplicand,c
  3865  002302  EC1D  F01D         	call	___wmul	;wreg free
  3866  002306  0E02               	movlw	2
  3867  002308  261C               	addwf	?___wmul,f,c
  3868  00230A  0E00               	movlw	0
  3869  00230C  221D               	addwfc	?___wmul+1,f,c
  3870  00230E  0E96               	movlw	low _clcd_display_string_details
  3871  002310  241C               	addwf	?___wmul,w,c
  3872  002312  6E22               	movwf	strlen@s,c
  3873  002314  0E02               	movlw	high _clcd_display_string_details
  3874  002316  201D               	addwfc	?___wmul+1,w,c
  3875  002318  6E23               	movwf	strlen@s+1,c
  3876  00231A  EC7E  F01A         	call	_strlen	;wreg free
  3877  00231E  5022               	movf	?_strlen,w,c
  3878  002320  1023               	iorwf	?_strlen+1,w,c
  3879  002322  B4D8               	btfsc	status,2,c
  3880  002324  D02C               	goto	l633
  3881  002326  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3882  00232A  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3883  00232E  0E00               	movlw	0
  3884  002330  6E1F               	movwf	___wmul@multiplicand+1,c
  3885  002332  0E37               	movlw	55
  3886  002334  6E1E               	movwf	___wmul@multiplicand,c
  3887  002336  EC1D  F01D         	call	___wmul	;wreg free
  3888  00233A  0E31               	movlw	49
  3889  00233C  261C               	addwf	?___wmul,f,c
  3890  00233E  0E00               	movlw	0
  3891  002340  221D               	addwfc	?___wmul+1,f,c
  3892  002342  0E96               	movlw	low _clcd_display_string_details
  3893  002344  241C               	addwf	?___wmul,w,c
  3894  002346  6ED9               	movwf	fsr2l,c
  3895  002348  0E02               	movlw	high _clcd_display_string_details
  3896  00234A  201D               	addwfc	?___wmul+1,w,c
  3897  00234C  6EDA               	movwf	fsr2h,c
  3898  00234E  50DF               	movf	223,w,c
  3899  002350  0B07               	andlw	7
  3900  002352  06E8               	decf	wreg,f,c
  3901  002354  A4D8               	btfss	status,2,c
  3902  002356  D013               	goto	l633
  3903                           
  3904                           ;clcd.c: 662: scroll_right_to_left(&clcd_display_string_details[count]);
  3905  002358  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3906  00235C  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3907  002360  0E00               	movlw	0
  3908  002362  6E1F               	movwf	___wmul@multiplicand+1,c
  3909  002364  0E37               	movlw	55
  3910  002366  6E1E               	movwf	___wmul@multiplicand,c
  3911  002368  EC1D  F01D         	call	___wmul	;wreg free
  3912  00236C  0E96               	movlw	low _clcd_display_string_details
  3913  00236E  241C               	addwf	?___wmul,w,c
  3914  002370  6E30               	movwf	scroll_right_to_left@clcd_display_string_details,c
  3915  002372  0E02               	movlw	high _clcd_display_string_details
  3916  002374  201D               	addwfc	?___wmul+1,w,c
  3917  002376  6E31               	movwf	scroll_right_to_left@clcd_display_string_details+1,c
  3918  002378  ECC3  F007         	call	_scroll_right_to_left	;wreg free
  3919                           
  3920                           ;clcd.c: 663: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 0) {
  3921  00237C  D045               	goto	l635
  3922  00237E                     l633:
  3923  00237E  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3924  002382  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3925  002386  0E00               	movlw	0
  3926  002388  6E1F               	movwf	___wmul@multiplicand+1,c
  3927  00238A  0E37               	movlw	55
  3928  00238C  6E1E               	movwf	___wmul@multiplicand,c
  3929  00238E  EC1D  F01D         	call	___wmul	;wreg free
  3930  002392  0E02               	movlw	2
  3931  002394  261C               	addwf	?___wmul,f,c
  3932  002396  0E00               	movlw	0
  3933  002398  221D               	addwfc	?___wmul+1,f,c
  3934  00239A  0E96               	movlw	low _clcd_display_string_details
  3935  00239C  241C               	addwf	?___wmul,w,c
  3936  00239E  6E22               	movwf	strlen@s,c
  3937  0023A0  0E02               	movlw	high _clcd_display_string_details
  3938  0023A2  201D               	addwfc	?___wmul+1,w,c
  3939  0023A4  6E23               	movwf	strlen@s+1,c
  3940  0023A6  EC7E  F01A         	call	_strlen	;wreg free
  3941  0023AA  5022               	movf	?_strlen,w,c
  3942  0023AC  1023               	iorwf	?_strlen+1,w,c
  3943  0023AE  B4D8               	btfsc	status,2,c
  3944  0023B0  D02B               	goto	l635
  3945  0023B2  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3946  0023B6  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3947  0023BA  0E00               	movlw	0
  3948  0023BC  6E1F               	movwf	___wmul@multiplicand+1,c
  3949  0023BE  0E37               	movlw	55
  3950  0023C0  6E1E               	movwf	___wmul@multiplicand,c
  3951  0023C2  EC1D  F01D         	call	___wmul	;wreg free
  3952  0023C6  0E31               	movlw	49
  3953  0023C8  261C               	addwf	?___wmul,f,c
  3954  0023CA  0E00               	movlw	0
  3955  0023CC  221D               	addwfc	?___wmul+1,f,c
  3956  0023CE  0E96               	movlw	low _clcd_display_string_details
  3957  0023D0  241C               	addwf	?___wmul,w,c
  3958  0023D2  6ED9               	movwf	fsr2l,c
  3959  0023D4  0E02               	movlw	high _clcd_display_string_details
  3960  0023D6  201D               	addwfc	?___wmul+1,w,c
  3961  0023D8  6EDA               	movwf	fsr2h,c
  3962  0023DA  50DF               	movf	223,w,c
  3963  0023DC  0B07               	andlw	7
  3964  0023DE  0900               	iorlw	0
  3965  0023E0  A4D8               	btfss	status,2,c
  3966  0023E2  D012               	goto	l635
  3967                           
  3968                           ;clcd.c: 664: scroll_off(&clcd_display_string_details[count]);
  3969  0023E4  C037  F01C         	movff	make_display@count,___wmul@multiplier
  3970  0023E8  C038  F01D         	movff	make_display@count+1,___wmul@multiplier+1
  3971  0023EC  0E00               	movlw	0
  3972  0023EE  6E1F               	movwf	___wmul@multiplicand+1,c
  3973  0023F0  0E37               	movlw	55
  3974  0023F2  6E1E               	movwf	___wmul@multiplicand,c
  3975  0023F4  EC1D  F01D         	call	___wmul	;wreg free
  3976  0023F8  0E96               	movlw	low _clcd_display_string_details
  3977  0023FA  241C               	addwf	?___wmul,w,c
  3978  0023FC  6E28               	movwf	scroll_off@clcd_display_string_details,c
  3979  0023FE  0E02               	movlw	high _clcd_display_string_details
  3980  002400  201D               	addwfc	?___wmul+1,w,c
  3981  002402  6E29               	movwf	scroll_off@clcd_display_string_details+1,c
  3982  002404  ECB6  F013         	call	_scroll_off	;wreg free
  3983  002408                     l635:
  3984  002408  4A37               	infsnz	make_display@count,f,c
  3985  00240A  2A38               	incf	make_display@count+1,f,c
  3986  00240C                     l629:
  3987  00240C  5048               	movf	_clcd_config_data+4,w,c
  3988  00240E  0100               	movlb	0	; () banked
  3989  002410  6FD1               	movwf	??_make_display& (0+255),b
  3990  002412  6BD2               	clrf	(??_make_display+1)& (0+255),b
  3991  002414  51D1               	movf	??_make_display& (0+255),w,b
  3992  002416  5C37               	subwf	make_display@count,w,c
  3993  002418  5038               	movf	make_display@count+1,w,c
  3994  00241A  0A80               	xorlw	128
  3995  00241C  6FD3               	movwf	(??_make_display+2)& (0+255),b
  3996  00241E  51D2               	movf	(??_make_display+1)& (0+255),w,b
  3997  002420  0A80               	xorlw	128
  3998  002422  59D3               	subwfb	(??_make_display+2)& (0+255),w,b
  3999  002424  A0D8               	btfss	status,0,c
  4000  002426  D71F               	goto	l630
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;clcd.c: 665: }
  4004                           ;clcd.c: 666: }
  4005                           ;clcd.c: 667: print_data_ready = 1;
  4006                           
  4007                           ; BSR set to: 0
  4008  002428  0E00               	movlw	0
  4009  00242A  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  4010  00242C  0E01               	movlw	1
  4011  00242E  6F76               	movwf	_print_data_ready& (0+255),b
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;clcd.c: 668: display_text();
  4015  002430  ECD1  F018         	call	_display_text	;wreg free
  4016  002434  0012               	return		;funcret
  4017  002436                     __end_of_make_display:
  4018                           	opt stack 0
  4019                           tblptru	equ	0xFF8
  4020                           tblptrh	equ	0xFF7
  4021                           tblptrl	equ	0xFF6
  4022                           tablat	equ	0xFF5
  4023                           prodh	equ	0xFF4
  4024                           prodl	equ	0xFF3
  4025                           intcon	equ	0xFF2
  4026                           postinc0	equ	0xFEE
  4027                           wreg	equ	0xFE8
  4028                           indf1	equ	0xFE7
  4029                           postinc1	equ	0xFE6
  4030                           postdec1	equ	0xFE5
  4031                           fsr1h	equ	0xFE2
  4032                           fsr1l	equ	0xFE1
  4033                           indf2	equ	0xFDF
  4034                           postinc2	equ	0xFDE
  4035                           postdec2	equ	0xFDD
  4036                           fsr2h	equ	0xFDA
  4037                           fsr2l	equ	0xFD9
  4038                           status	equ	0xFD8
  4039                           
  4040 ;; *************** function _scroll_right_to_left *****************
  4041 ;; Defined at:
  4042 ;;		line 541 in file "clcd.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;  clcd_display    2   47[COMRAM] PTR struct .
  4045 ;;		 -> clcd_display_string_details(1100), 
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;  line            1   49[COMRAM] unsigned char 
  4048 ;; Return value:  Size  Location     Type
  4049 ;;                  1    wreg      void 
  4050 ;; Registers used:
  4051 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4052 ;; Tracked objects:
  4053 ;;		On entry : 0/0
  4054 ;;		On exit  : 0/0
  4055 ;;		Unchanged: 0/0
  4056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;      Temps:          0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Totals:         3      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;Total ram usage:       14 bytes
  4062 ;; Hardware stack levels used:    1
  4063 ;; Hardware stack levels required when called:    6
  4064 ;; This function calls:
  4065 ;;		_memcpy
  4066 ;;		_memset
  4067 ;;		_strncpy
  4068 ;; This function is called by:
  4069 ;;		_make_display
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text7
  4074  000F86                     __ptext7:
  4075                           	opt stack 0
  4076  000F86                     _scroll_right_to_left:
  4077                           	opt stack 23
  4078                           
  4079                           ;clcd.c: 543: char line = -1;
  4080                           
  4081                           ;incstack = 0
  4082  000F86  6832               	setf	scroll_right_to_left@line,c
  4083                           
  4084                           ;clcd.c: 544: if (clcd_display_string_details->start_row == 0)
  4085  000F88  EE20 F02B          	lfsr	2,43
  4086  000F8C  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4087  000F8E  26D9               	addwf	fsr2l,f,c
  4088  000F90  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4089  000F92  22DA               	addwfc	fsr2h,f,c
  4090  000F94  50DF               	movf	indf2,w,c
  4091  000F96  0B7F               	andlw	127
  4092  000F98  0900               	iorlw	0
  4093  000F9A  A4D8               	btfss	status,2,c
  4094  000F9C  D002               	goto	l601
  4095                           
  4096                           ;clcd.c: 545: line = 0;
  4097  000F9E  0E00               	movlw	0
  4098  000FA0  D00C               	goto	L1
  4099  000FA2                     l601:
  4100                           
  4101                           ;clcd.c: 546: else if (clcd_display_string_details->start_row == 1)
  4102  000FA2  EE20 F02B          	lfsr	2,43
  4103  000FA6  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4104  000FA8  26D9               	addwf	fsr2l,f,c
  4105  000FAA  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4106  000FAC  22DA               	addwfc	fsr2h,f,c
  4107  000FAE  50DF               	movf	indf2,w,c
  4108  000FB0  0B7F               	andlw	127
  4109  000FB2  06E8               	decf	wreg,f,c
  4110  000FB4  A4D8               	btfss	status,2,c
  4111  000FB6  D002               	goto	l603
  4112                           
  4113                           ;clcd.c: 547: line = 1;
  4114  000FB8  0E01               	movlw	1
  4115  000FBA                     L1:
  4116  000FBA  6E32               	movwf	scroll_right_to_left@line,c
  4117  000FBC                     l603:
  4118                           
  4119                           ;clcd.c: 548: if (clcd_display_string_details->start_row == 2)
  4120  000FBC  EE20 F02B          	lfsr	2,43
  4121  000FC0  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4122  000FC2  26D9               	addwf	fsr2l,f,c
  4123  000FC4  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4124  000FC6  22DA               	addwfc	fsr2h,f,c
  4125  000FC8  50DF               	movf	indf2,w,c
  4126  000FCA  0B7F               	andlw	127
  4127  000FCC  0A02               	xorlw	2
  4128  000FCE  A4D8               	btfss	status,2,c
  4129  000FD0  D002               	goto	l604
  4130                           
  4131                           ;clcd.c: 549: line = 2;
  4132  000FD2  0E02               	movlw	2
  4133  000FD4  6E32               	movwf	scroll_right_to_left@line,c
  4134  000FD6                     l604:
  4135                           
  4136                           ;clcd.c: 550: if (clcd_display_string_details->start_row == 3)
  4137  000FD6  EE20 F02B          	lfsr	2,43
  4138  000FDA  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4139  000FDC  26D9               	addwf	fsr2l,f,c
  4140  000FDE  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4141  000FE0  22DA               	addwfc	fsr2h,f,c
  4142  000FE2  50DF               	movf	indf2,w,c
  4143  000FE4  0B7F               	andlw	127
  4144  000FE6  0A03               	xorlw	3
  4145  000FE8  A4D8               	btfss	status,2,c
  4146  000FEA  D002               	goto	l605
  4147                           
  4148                           ;clcd.c: 551: line = 3;
  4149  000FEC  0E03               	movlw	3
  4150  000FEE  6E32               	movwf	scroll_right_to_left@line,c
  4151  000FF0                     l605:
  4152                           
  4153                           ;clcd.c: 553: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  4154                           ;clcd.c: 554: ' ', clcd_display_string_details->display_char_count);
  4155  000FF0  5032               	movf	scroll_right_to_left@line,w,c
  4156  000FF2  0D14               	mullw	20
  4157  000FF4  0E00               	movlw	low _lcd_display_array
  4158  000FF6  0100               	movlb	0	; () banked
  4159  000FF8  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4160  000FFA  0E01               	movlw	high _lcd_display_array
  4161  000FFC  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4162  000FFE  50F3               	movf	prodl,w,c
  4163  001000  27C6               	addwf	??_scroll_right_to_left& (0+255),f,b
  4164  001002  50F4               	movf	prodh,w,c
  4165  001004  23C7               	addwfc	(??_scroll_right_to_left+1)& (0+255),f,b
  4166  001006  EE20 F02C          	lfsr	2,44
  4167  00100A  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4168  00100C  26D9               	addwf	fsr2l,f,c
  4169  00100E  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4170  001010  22DA               	addwfc	fsr2h,f,c
  4171  001012  50DF               	movf	indf2,w,c
  4172  001014  0B7F               	andlw	127
  4173  001016  6FC8               	movwf	(??_scroll_right_to_left+2)& (0+255),b
  4174  001018  51C8               	movf	(??_scroll_right_to_left+2)& (0+255),w,b
  4175  00101A  0D01               	mullw	1
  4176  00101C  50F3               	movf	prodl,w,c
  4177  00101E  25C6               	addwf	??_scroll_right_to_left& (0+255),w,b
  4178  001020  6E28               	movwf	memset@p1,c
  4179  001022  50F4               	movf	prodh,w,c
  4180  001024  21C7               	addwfc	(??_scroll_right_to_left+1)& (0+255),w,b
  4181  001026  6E29               	movwf	memset@p1+1,c
  4182  001028  0E00               	movlw	0
  4183  00102A  6E2B               	movwf	memset@c+1,c
  4184  00102C  0E20               	movlw	32
  4185  00102E  6E2A               	movwf	memset@c,c
  4186  001030  EE20 F032          	lfsr	2,50
  4187  001034  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4188  001036  26D9               	addwf	fsr2l,f,c
  4189  001038  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4190  00103A  22DA               	addwfc	fsr2h,f,c
  4191  00103C  50DF               	movf	indf2,w,c
  4192  00103E  6FC9               	movwf	(??_scroll_right_to_left+3)& (0+255),b
  4193  001040  51C9               	movf	(??_scroll_right_to_left+3)& (0+255),w,b
  4194  001042  6E2C               	movwf	memset@n,c
  4195  001044  6A2D               	clrf	memset@n+1,c
  4196  001046  EC8E  F01B         	call	_memset	;wreg free
  4197                           
  4198                           ;clcd.c: 555: if (clcd_display_string_details->length_count_for_left_scroll > clcd_displ
      +                          ay_string_details->strlen) {
  4199  00104A  EE20 F02A          	lfsr	2,42
  4200  00104E  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4201  001050  26D9               	addwf	fsr2l,f,c
  4202  001052  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4203  001054  22DA               	addwfc	fsr2h,f,c
  4204  001056  50DF               	movf	indf2,w,c
  4205  001058  0B7F               	andlw	127
  4206  00105A  0100               	movlb	0	; () banked
  4207  00105C  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4208  00105E  EE20 F035          	lfsr	2,53
  4209  001062  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4210  001064  26D9               	addwf	fsr2l,f,c
  4211  001066  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4212  001068  22DA               	addwfc	fsr2h,f,c
  4213  00106A  50DF               	movf	indf2,w,c
  4214  00106C  0B7F               	andlw	127
  4215  00106E  5DC6               	subwf	??_scroll_right_to_left& (0+255),w,b
  4216  001070  B0D8               	btfsc	status,0,c
  4217  001072  D066               	goto	l606
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;clcd.c: 557: strncpy(lcd_display_array[line]+(clcd_display_string_details->end_col - cl
      +                          cd_display_string_details->length_decount_for_left_scroll),
  4221                           ;clcd.c: 558: clcd_display_string_details->string, (clcd_display_string_details->display
      +                          _char_count -
  4222                           ;clcd.c: 559: (clcd_display_string_details->display_char_count - (clcd_display_string_de
      +                          tails->length_decount_for_left_scroll + 1))));
  4223  001074  5032               	movf	scroll_right_to_left@line,w,c
  4224  001076  0D14               	mullw	20
  4225  001078  EE20 F036          	lfsr	2,54
  4226  00107C  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4227  00107E  26D9               	addwf	fsr2l,f,c
  4228  001080  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4229  001082  22DA               	addwfc	fsr2h,f,c
  4230  001084  50DF               	movf	indf2,w,c
  4231  001086  0B7F               	andlw	127
  4232  001088  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4233  00108A  6BC7               	clrf	(??_scroll_right_to_left+1)& (0+255),b
  4234  00108C  1FC6               	comf	??_scroll_right_to_left& (0+255),f,b
  4235  00108E  1FC7               	comf	(??_scroll_right_to_left+1)& (0+255),f,b
  4236  001090  4BC6               	infsnz	??_scroll_right_to_left& (0+255),f,b
  4237  001092  2BC7               	incf	(??_scroll_right_to_left+1)& (0+255),f,b
  4238  001094  EE20 F02F          	lfsr	2,47
  4239  001098  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4240  00109A  26D9               	addwf	fsr2l,f,c
  4241  00109C  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4242  00109E  22DA               	addwfc	fsr2h,f,c
  4243  0010A0  50DF               	movf	indf2,w,c
  4244  0010A2  0B7F               	andlw	127
  4245  0010A4  6FC8               	movwf	(??_scroll_right_to_left+2)& (0+255),b
  4246  0010A6  6BC9               	clrf	(??_scroll_right_to_left+3)& (0+255),b
  4247  0010A8  51C6               	movf	??_scroll_right_to_left& (0+255),w,b
  4248  0010AA  27C8               	addwf	(??_scroll_right_to_left+2)& (0+255),f,b
  4249  0010AC  51C7               	movf	(??_scroll_right_to_left+1)& (0+255),w,b
  4250  0010AE  23C9               	addwfc	(??_scroll_right_to_left+3)& (0+255),f,b
  4251  0010B0  0E00               	movlw	low _lcd_display_array
  4252  0010B2  6FCA               	movwf	(??_scroll_right_to_left+4)& (0+255),b
  4253  0010B4  0E01               	movlw	high _lcd_display_array
  4254  0010B6  6FCB               	movwf	(??_scroll_right_to_left+5)& (0+255),b
  4255  0010B8  51C8               	movf	(??_scroll_right_to_left+2)& (0+255),w,b
  4256  0010BA  27CA               	addwf	(??_scroll_right_to_left+4)& (0+255),f,b
  4257  0010BC  51C9               	movf	(??_scroll_right_to_left+3)& (0+255),w,b
  4258  0010BE  23CB               	addwfc	(??_scroll_right_to_left+5)& (0+255),f,b
  4259  0010C0  50F3               	movf	prodl,w,c
  4260  0010C2  25CA               	addwf	(??_scroll_right_to_left+4)& (0+255),w,b
  4261  0010C4  6E14               	movwf	strncpy@to,c
  4262  0010C6  50F4               	movf	prodh,w,c
  4263  0010C8  21CB               	addwfc	(??_scroll_right_to_left+5)& (0+255),w,b
  4264  0010CA  6E15               	movwf	strncpy@to+1,c
  4265  0010CC  0E02               	movlw	2
  4266  0010CE  2430               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4267  0010D0  6E16               	movwf	strncpy@from,c
  4268  0010D2  0E00               	movlw	0
  4269  0010D4  2031               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4270  0010D6  6E17               	movwf	strncpy@from+1,c
  4271  0010D8  EE20 F036          	lfsr	2,54
  4272  0010DC  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4273  0010DE  26D9               	addwf	fsr2l,f,c
  4274  0010E0  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4275  0010E2  22DA               	addwfc	fsr2h,f,c
  4276  0010E4  50DF               	movf	indf2,w,c
  4277  0010E6  0B7F               	andlw	127
  4278  0010E8  6FCC               	movwf	(??_scroll_right_to_left+6)& (0+255),b
  4279  0010EA  6BCD               	clrf	(??_scroll_right_to_left+7)& (0+255),b
  4280  0010EC  0E01               	movlw	1
  4281  0010EE  27CC               	addwf	(??_scroll_right_to_left+6)& (0+255),f,b
  4282  0010F0  0E00               	movlw	0
  4283  0010F2  23CD               	addwfc	(??_scroll_right_to_left+7)& (0+255),f,b
  4284  0010F4  1FCC               	comf	(??_scroll_right_to_left+6)& (0+255),f,b
  4285  0010F6  1FCD               	comf	(??_scroll_right_to_left+7)& (0+255),f,b
  4286  0010F8  4BCC               	infsnz	(??_scroll_right_to_left+6)& (0+255),f,b
  4287  0010FA  2BCD               	incf	(??_scroll_right_to_left+7)& (0+255),f,b
  4288  0010FC  EE20 F032          	lfsr	2,50
  4289  001100  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4290  001102  26D9               	addwf	fsr2l,f,c
  4291  001104  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4292  001106  22DA               	addwfc	fsr2h,f,c
  4293  001108  50DF               	movf	indf2,w,c
  4294  00110A  6FCE               	movwf	(??_scroll_right_to_left+8)& (0+255),b
  4295  00110C  6BCF               	clrf	(??_scroll_right_to_left+9)& (0+255),b
  4296  00110E  51CC               	movf	(??_scroll_right_to_left+6)& (0+255),w,b
  4297  001110  27CE               	addwf	(??_scroll_right_to_left+8)& (0+255),f,b
  4298  001112  51CD               	movf	(??_scroll_right_to_left+7)& (0+255),w,b
  4299  001114  23CF               	addwfc	(??_scroll_right_to_left+9)& (0+255),f,b
  4300  001116  1FCE               	comf	(??_scroll_right_to_left+8)& (0+255),f,b
  4301  001118  1FCF               	comf	(??_scroll_right_to_left+9)& (0+255),f,b
  4302  00111A  4BCE               	infsnz	(??_scroll_right_to_left+8)& (0+255),f,b
  4303  00111C  2BCF               	incf	(??_scroll_right_to_left+9)& (0+255),f,b
  4304  00111E  EE20 F032          	lfsr	2,50
  4305  001122  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4306  001124  26D9               	addwf	fsr2l,f,c
  4307  001126  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4308  001128  22DA               	addwfc	fsr2h,f,c
  4309  00112A  50DF               	movf	indf2,w,c
  4310  00112C  6FD0               	movwf	(??_scroll_right_to_left+10)& (0+255),b
  4311  00112E  51D0               	movf	(??_scroll_right_to_left+10)& (0+255),w,b
  4312  001130  25CE               	addwf	(??_scroll_right_to_left+8)& (0+255),w,b
  4313  001132  6E18               	movwf	strncpy@size,c
  4314  001134  0E00               	movlw	0
  4315  001136  21CF               	addwfc	(??_scroll_right_to_left+9)& (0+255),w,b
  4316  001138  6E19               	movwf	strncpy@size+1,c
  4317  00113A  ECF6  F019         	call	_strncpy	;wreg free
  4318                           
  4319                           ;clcd.c: 560: } else {
  4320  00113E  D056               	goto	l608
  4321  001140                     l606:
  4322                           
  4323                           ;clcd.c: 561: if (clcd_display_string_details->string[clcd_display_string_details->lengt
      +                          h_count_for_left_scroll] != (0)) {
  4324  001140  EE20 F035          	lfsr	2,53
  4325  001144  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4326  001146  26D9               	addwf	fsr2l,f,c
  4327  001148  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4328  00114A  22DA               	addwfc	fsr2h,f,c
  4329  00114C  50DF               	movf	indf2,w,c
  4330  00114E  0B7F               	andlw	127
  4331  001150  0100               	movlb	0	; () banked
  4332  001152  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4333  001154  51C6               	movf	??_scroll_right_to_left& (0+255),w,b
  4334  001156  0D01               	mullw	1
  4335  001158  0E02               	movlw	2
  4336  00115A  26F3               	addwf	prodl,f,c
  4337  00115C  0E00               	movlw	0
  4338  00115E  22F4               	addwfc	prodh,f,c
  4339  001160  50F3               	movf	prodl,w,c
  4340  001162  2430               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4341  001164  6ED9               	movwf	fsr2l,c
  4342  001166  50F4               	movf	prodh,w,c
  4343  001168  2031               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4344  00116A  6EDA               	movwf	fsr2h,c
  4345  00116C  50DF               	movf	indf2,w,c
  4346  00116E  B4D8               	btfsc	status,2,c
  4347  001170  D03D               	goto	l608
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;clcd.c: 562: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  4351                           ;clcd.c: 563: clcd_display_string_details->string + clcd_display_string_details->length_
      +                          count_for_left_scroll,
  4352                           ;clcd.c: 564: clcd_display_string_details->display_char_count);
  4353  001172  5032               	movf	scroll_right_to_left@line,w,c
  4354  001174  0D14               	mullw	20
  4355  001176  0E00               	movlw	low _lcd_display_array
  4356  001178  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4357  00117A  0E01               	movlw	high _lcd_display_array
  4358  00117C  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4359  00117E  50F3               	movf	prodl,w,c
  4360  001180  27C6               	addwf	??_scroll_right_to_left& (0+255),f,b
  4361  001182  50F4               	movf	prodh,w,c
  4362  001184  23C7               	addwfc	(??_scroll_right_to_left+1)& (0+255),f,b
  4363  001186  EE20 F02C          	lfsr	2,44
  4364  00118A  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4365  00118C  26D9               	addwf	fsr2l,f,c
  4366  00118E  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4367  001190  22DA               	addwfc	fsr2h,f,c
  4368  001192  50DF               	movf	indf2,w,c
  4369  001194  0B7F               	andlw	127
  4370  001196  6FC8               	movwf	(??_scroll_right_to_left+2)& (0+255),b
  4371  001198  51C8               	movf	(??_scroll_right_to_left+2)& (0+255),w,b
  4372  00119A  0D01               	mullw	1
  4373  00119C  50F3               	movf	prodl,w,c
  4374  00119E  25C6               	addwf	??_scroll_right_to_left& (0+255),w,b
  4375  0011A0  6E14               	movwf	memcpy@d1,c
  4376  0011A2  50F4               	movf	prodh,w,c
  4377  0011A4  21C7               	addwfc	(??_scroll_right_to_left+1)& (0+255),w,b
  4378  0011A6  6E15               	movwf	memcpy@d1+1,c
  4379  0011A8  EE20 F035          	lfsr	2,53
  4380  0011AC  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4381  0011AE  26D9               	addwf	fsr2l,f,c
  4382  0011B0  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4383  0011B2  22DA               	addwfc	fsr2h,f,c
  4384  0011B4  50DF               	movf	indf2,w,c
  4385  0011B6  0B7F               	andlw	127
  4386  0011B8  6FC9               	movwf	(??_scroll_right_to_left+3)& (0+255),b
  4387  0011BA  51C9               	movf	(??_scroll_right_to_left+3)& (0+255),w,b
  4388  0011BC  0D01               	mullw	1
  4389  0011BE  0E02               	movlw	2
  4390  0011C0  26F3               	addwf	prodl,f,c
  4391  0011C2  0E00               	movlw	0
  4392  0011C4  22F4               	addwfc	prodh,f,c
  4393  0011C6  50F3               	movf	prodl,w,c
  4394  0011C8  2430               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4395  0011CA  6E16               	movwf	memcpy@s1,c
  4396  0011CC  50F4               	movf	prodh,w,c
  4397  0011CE  2031               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4398  0011D0  6E17               	movwf	memcpy@s1+1,c
  4399  0011D2  EE20 F032          	lfsr	2,50
  4400  0011D6  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4401  0011D8  26D9               	addwf	fsr2l,f,c
  4402  0011DA  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4403  0011DC  22DA               	addwfc	fsr2h,f,c
  4404  0011DE  50DF               	movf	indf2,w,c
  4405  0011E0  6FCA               	movwf	(??_scroll_right_to_left+4)& (0+255),b
  4406  0011E2  51CA               	movf	(??_scroll_right_to_left+4)& (0+255),w,b
  4407  0011E4  6E18               	movwf	memcpy@n,c
  4408  0011E6  6A19               	clrf	memcpy@n+1,c
  4409  0011E8  ECB1  F01B         	call	_memcpy	;wreg free
  4410  0011EC                     l608:
  4411                           
  4412                           ;clcd.c: 567: }
  4413                           ;clcd.c: 568: }
  4414                           ;clcd.c: 570: if (clcd_display_string_details->length_count_for_left_scroll <= clcd_disp
      +                          lay_string_details->strlen)
  4415  0011EC  EE20 F035          	lfsr	2,53
  4416  0011F0  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4417  0011F2  26D9               	addwf	fsr2l,f,c
  4418  0011F4  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4419  0011F6  22DA               	addwfc	fsr2h,f,c
  4420  0011F8  50DF               	movf	indf2,w,c
  4421  0011FA  0B7F               	andlw	127
  4422  0011FC  0100               	movlb	0	; () banked
  4423  0011FE  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4424  001200  EE20 F02A          	lfsr	2,42
  4425  001204  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4426  001206  26D9               	addwf	fsr2l,f,c
  4427  001208  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4428  00120A  22DA               	addwfc	fsr2h,f,c
  4429  00120C  50DF               	movf	indf2,w,c
  4430  00120E  0B7F               	andlw	127
  4431  001210  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4432  001212  51C6               	movf	??_scroll_right_to_left& (0+255),w,b
  4433  001214  5DC7               	subwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4434  001216  A0D8               	btfss	status,0,c
  4435  001218  D013               	goto	l610
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;clcd.c: 571: {
  4439                           ;clcd.c: 572: clcd_display_string_details->length_count_for_left_scroll++;
  4440  00121A  0E01               	movlw	1
  4441  00121C  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4442  00121E  EE20 F035          	lfsr	2,53
  4443  001222  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4444  001224  26D9               	addwf	fsr2l,f,c
  4445  001226  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4446  001228  22DA               	addwfc	fsr2h,f,c
  4447  00122A  50DF               	movf	indf2,w,c
  4448  00122C  0B7F               	andlw	127
  4449  00122E  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4450  001230  51C6               	movf	??_scroll_right_to_left& (0+255),w,b
  4451  001232  27C7               	addwf	(??_scroll_right_to_left+1)& (0+255),f,b
  4452  001234  50DF               	movf	indf2,w,c
  4453  001236  19C7               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4454  001238  0B80               	andlw	-128
  4455  00123A  19C7               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4456  00123C  6EDF               	movwf	indf2,c
  4457                           
  4458                           ;clcd.c: 573: } else if (clcd_display_string_details->length_count_for_left_scroll > clc
      +                          d_display_string_details->strlen)
  4459  00123E  0012               	return	
  4460  001240                     l610:
  4461                           
  4462                           ; BSR set to: 0
  4463                           
  4464                           ; BSR set to: 0
  4465  001240  EE20 F02A          	lfsr	2,42
  4466  001244  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4467  001246  26D9               	addwf	fsr2l,f,c
  4468  001248  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4469  00124A  22DA               	addwfc	fsr2h,f,c
  4470  00124C  50DF               	movf	indf2,w,c
  4471  00124E  0B7F               	andlw	127
  4472  001250  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4473  001252  EE20 F035          	lfsr	2,53
  4474  001256  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4475  001258  26D9               	addwf	fsr2l,f,c
  4476  00125A  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4477  00125C  22DA               	addwfc	fsr2h,f,c
  4478  00125E  50DF               	movf	indf2,w,c
  4479  001260  0B7F               	andlw	127
  4480  001262  5DC6               	subwf	??_scroll_right_to_left& (0+255),w,b
  4481  001264  B0D8               	btfsc	status,0,c
  4482  001266  0012               	return	
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;clcd.c: 574: {
  4486                           ;clcd.c: 575: clcd_display_string_details->length_decount_for_left_scroll++;
  4487  001268  0E01               	movlw	1
  4488  00126A  6FC6               	movwf	??_scroll_right_to_left& (0+255),b
  4489  00126C  EE20 F036          	lfsr	2,54
  4490  001270  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4491  001272  26D9               	addwf	fsr2l,f,c
  4492  001274  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4493  001276  22DA               	addwfc	fsr2h,f,c
  4494  001278  50DF               	movf	indf2,w,c
  4495  00127A  0B7F               	andlw	127
  4496  00127C  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4497  00127E  51C6               	movf	??_scroll_right_to_left& (0+255),w,b
  4498  001280  27C7               	addwf	(??_scroll_right_to_left+1)& (0+255),f,b
  4499  001282  50DF               	movf	indf2,w,c
  4500  001284  19C7               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4501  001286  0B80               	andlw	-128
  4502  001288  19C7               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4503  00128A  6EDF               	movwf	indf2,c
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;clcd.c: 576: if (clcd_display_string_details->length_decount_for_left_scroll == clcd_di
      +                          splay_string_details->display_char_count) {
  4507  00128C  EE20 F032          	lfsr	2,50
  4508  001290  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4509  001292  26D9               	addwf	fsr2l,f,c
  4510  001294  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4511  001296  22DA               	addwfc	fsr2h,f,c
  4512  001298  EE10 F036          	lfsr	1,54
  4513  00129C  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4514  00129E  26E1               	addwf	fsr1l,f,c
  4515  0012A0  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4516  0012A2  22E2               	addwfc	fsr1h,f,c
  4517  0012A4  50E7               	movf	indf1,w,c
  4518  0012A6  0B7F               	andlw	127
  4519  0012A8  6FC7               	movwf	(??_scroll_right_to_left+1)& (0+255),b
  4520  0012AA  50DE               	movf	postinc2,w,c
  4521  0012AC  19C7               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,b
  4522  0012AE  A4D8               	btfss	status,2,c
  4523  0012B0  0012               	return	
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;clcd.c: 577: clcd_display_string_details->length_decount_for_left_scroll = 0;
  4527  0012B2  EE20 F036          	lfsr	2,54
  4528  0012B6  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4529  0012B8  26D9               	addwf	fsr2l,f,c
  4530  0012BA  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4531  0012BC  22DA               	addwfc	fsr2h,f,c
  4532  0012BE  90DF               	bcf	indf2,0,c
  4533  0012C0  92DF               	bcf	indf2,1,c
  4534  0012C2  94DF               	bcf	indf2,2,c
  4535  0012C4  96DF               	bcf	indf2,3,c
  4536  0012C6  98DF               	bcf	indf2,4,c
  4537  0012C8  9ADF               	bcf	indf2,5,c
  4538  0012CA  9CDF               	bcf	indf2,6,c
  4539                           
  4540                           ;clcd.c: 578: clcd_display_string_details->length_count_for_left_scroll = 0;
  4541  0012CC  EE20 F035          	lfsr	2,53
  4542  0012D0  5030               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4543  0012D2  26D9               	addwf	fsr2l,f,c
  4544  0012D4  5031               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4545  0012D6  22DA               	addwfc	fsr2h,f,c
  4546  0012D8  90DF               	bcf	indf2,0,c
  4547  0012DA  92DF               	bcf	indf2,1,c
  4548  0012DC  94DF               	bcf	indf2,2,c
  4549  0012DE  96DF               	bcf	indf2,3,c
  4550  0012E0  98DF               	bcf	indf2,4,c
  4551  0012E2  9ADF               	bcf	indf2,5,c
  4552  0012E4  9CDF               	bcf	indf2,6,c
  4553                           
  4554                           ; BSR set to: 0
  4555                           
  4556                           ; BSR set to: 0
  4557  0012E6  0012               	return	
  4558  0012E8                     __end_of_scroll_right_to_left:
  4559                           	opt stack 0
  4560                           tblptru	equ	0xFF8
  4561                           tblptrh	equ	0xFF7
  4562                           tblptrl	equ	0xFF6
  4563                           tablat	equ	0xFF5
  4564                           prodh	equ	0xFF4
  4565                           prodl	equ	0xFF3
  4566                           intcon	equ	0xFF2
  4567                           postinc0	equ	0xFEE
  4568                           wreg	equ	0xFE8
  4569                           indf1	equ	0xFE7
  4570                           postinc1	equ	0xFE6
  4571                           postdec1	equ	0xFE5
  4572                           fsr1h	equ	0xFE2
  4573                           fsr1l	equ	0xFE1
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function _strncpy *****************
  4582 ;; Defined at:
  4583 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strncpy.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  to              2   19[COMRAM] PTR unsigned char 
  4586 ;;		 -> lcd_display_array(80), 
  4587 ;;  from            2   21[COMRAM] PTR const unsigned char 
  4588 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1100), 
  4589 ;;  size            2   23[COMRAM] unsigned int 
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;  cp              2   25[COMRAM] PTR unsigned char 
  4592 ;;		 -> lcd_display_array(80), 
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  2   19[COMRAM] PTR unsigned char 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4602 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;Total ram usage:        8 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    5
  4609 ;; This function calls:
  4610 ;;		Nothing
  4611 ;; This function is called by:
  4612 ;;		_scroll_right_to_left
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           	psect	text8
  4617  0033EC                     __ptext8:
  4618                           	opt stack 0
  4619  0033EC                     _strncpy:
  4620                           	opt stack 23
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;incstack = 0
  4624  0033EC  C014  F01A         	movff	strncpy@to,strncpy@cp
  4625  0033F0  C015  F01B         	movff	strncpy@to+1,strncpy@cp+1
  4626  0033F4  D014               	goto	l1716
  4627  0033F6  0618               	decf	strncpy@size,f,c
  4628  0033F8  A0D8               	btfss	status,0,c
  4629  0033FA  0619               	decf	strncpy@size+1,f,c
  4630  0033FC  C016  FFD9         	movff	strncpy@from,fsr2l
  4631  003400  C017  FFDA         	movff	strncpy@from+1,fsr2h
  4632  003404  4A16               	infsnz	strncpy@from,f,c
  4633  003406  2A17               	incf	strncpy@from+1,f,c
  4634  003408  C01A  FFE1         	movff	strncpy@cp,fsr1l
  4635  00340C  C01B  FFE2         	movff	strncpy@cp+1,fsr1h
  4636  003410  4A1A               	infsnz	strncpy@cp,f,c
  4637  003412  2A1B               	incf	strncpy@cp+1,f,c
  4638  003414  CFDF FFE7          	movff	indf2,indf1
  4639  003418  50E7               	movf	indf1,w,c
  4640  00341A  B4D8               	btfsc	status,2,c
  4641  00341C  D00D               	goto	l1718
  4642  00341E                     l1716:
  4643  00341E  5018               	movf	strncpy@size,w,c
  4644  003420  1019               	iorwf	strncpy@size+1,w,c
  4645  003422  B4D8               	btfsc	status,2,c
  4646  003424  D009               	goto	l1718
  4647  003426  D7E7               	goto	l1715
  4648  003428                     l4372:
  4649  003428  C01A  FFD9         	movff	strncpy@cp,fsr2l
  4650  00342C  C01B  FFDA         	movff	strncpy@cp+1,fsr2h
  4651  003430  0E00               	movlw	0
  4652  003432  6EDF               	movwf	indf2,c
  4653  003434  4A1A               	infsnz	strncpy@cp,f,c
  4654  003436  2A1B               	incf	strncpy@cp+1,f,c
  4655  003438                     l1718:
  4656  003438  0618               	decf	strncpy@size,f,c
  4657  00343A  A0D8               	btfss	status,0,c
  4658  00343C  0619               	decf	strncpy@size+1,f,c
  4659  00343E  2818               	incf	strncpy@size,w,c
  4660  003440  E1F3               	bnz	l4372
  4661  003442  2819               	incf	strncpy@size+1,w,c
  4662  003444  B4D8               	btfsc	status,2,c
  4663  003446  0012               	return	
  4664  003448  D7EF               	goto	l1719
  4665  00344A                     __end_of_strncpy:
  4666                           	opt stack 0
  4667                           tblptru	equ	0xFF8
  4668                           tblptrh	equ	0xFF7
  4669                           tblptrl	equ	0xFF6
  4670                           tablat	equ	0xFF5
  4671                           prodh	equ	0xFF4
  4672                           prodl	equ	0xFF3
  4673                           intcon	equ	0xFF2
  4674                           postinc0	equ	0xFEE
  4675                           wreg	equ	0xFE8
  4676                           indf1	equ	0xFE7
  4677                           postinc1	equ	0xFE6
  4678                           postdec1	equ	0xFE5
  4679                           fsr1h	equ	0xFE2
  4680                           fsr1l	equ	0xFE1
  4681                           indf2	equ	0xFDF
  4682                           postinc2	equ	0xFDE
  4683                           postdec2	equ	0xFDD
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688 ;; *************** function _scroll_off *****************
  4689 ;; Defined at:
  4690 ;;		line 585 in file "clcd.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  clcd_display    2   39[COMRAM] PTR struct .
  4693 ;;		 -> clcd_display_string_details(1100), 
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;  i               2   52[COMRAM] int 
  4696 ;;  j               2   50[COMRAM] int 
  4697 ;;  k               2   45[COMRAM] int 
  4698 ;;  str_len         1   49[COMRAM] unsigned char 
  4699 ;;  display_char    1   48[COMRAM] unsigned char 
  4700 ;;  line            1   47[COMRAM] unsigned char 
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  1    wreg      void 
  4703 ;; Registers used:
  4704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;Total ram usage:       15 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    6
  4717 ;; This function calls:
  4718 ;;		_strlen
  4719 ;; This function is called by:
  4720 ;;		_make_display
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text9
  4725  00276C                     __ptext9:
  4726                           	opt stack 0
  4727  00276C                     _scroll_off:
  4728                           	opt stack 23
  4729                           
  4730                           ;clcd.c: 586: char line = -1;
  4731                           
  4732                           ;incstack = 0
  4733  00276C  6830               	setf	scroll_off@line,c
  4734                           
  4735                           ;clcd.c: 588: int i = 0;
  4736  00276E  0E00               	movlw	0
  4737  002770  6E36               	movwf	scroll_off@i+1,c
  4738  002772  0E00               	movlw	0
  4739  002774  6E35               	movwf	scroll_off@i,c
  4740                           
  4741                           ;clcd.c: 589: int j = 0, k = 0;
  4742  002776  0E00               	movlw	0
  4743  002778  6E34               	movwf	scroll_off@j+1,c
  4744  00277A  0E00               	movlw	0
  4745  00277C  6E33               	movwf	scroll_off@j,c
  4746  00277E  0E00               	movlw	0
  4747  002780  6E2F               	movwf	scroll_off@k+1,c
  4748  002782  0E00               	movlw	0
  4749  002784  6E2E               	movwf	scroll_off@k,c
  4750                           
  4751                           ;clcd.c: 590: char display_char_count = clcd_display_string_details->end_point - clcd_di
      +                          splay_string_details->start_point;
  4752  002786  EE20 F030          	lfsr	2,48
  4753  00278A  5028               	movf	scroll_off@clcd_display_string_details,w,c
  4754  00278C  26D9               	addwf	fsr2l,f,c
  4755  00278E  5029               	movf	scroll_off@clcd_display_string_details+1,w,c
  4756  002790  22DA               	addwfc	fsr2h,f,c
  4757  002792  50DF               	movf	indf2,w,c
  4758  002794  0B7F               	andlw	127
  4759  002796  6E2A               	movwf	??_scroll_off& (0+255),c
  4760  002798  EE20 F02D          	lfsr	2,45
  4761  00279C  5028               	movf	scroll_off@clcd_display_string_details,w,c
  4762  00279E  26D9               	addwf	fsr2l,f,c
  4763  0027A0  5029               	movf	scroll_off@clcd_display_string_details+1,w,c
  4764  0027A2  22DA               	addwfc	fsr2h,f,c
  4765  0027A4  50DF               	movf	indf2,w,c
  4766  0027A6  0B7F               	andlw	127
  4767  0027A8  0800               	sublw	0
  4768  0027AA  242A               	addwf	??_scroll_off,w,c
  4769  0027AC  6E31               	movwf	scroll_off@display_char_count,c
  4770                           
  4771                           ;clcd.c: 591: char str_len = strlen(clcd_display_string_details->string);
  4772  0027AE  0E02               	movlw	2
  4773  0027B0  2428               	addwf	scroll_off@clcd_display_string_details,w,c
  4774  0027B2  6E22               	movwf	strlen@s,c
  4775  0027B4  0E00               	movlw	0
  4776  0027B6  2029               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4777  0027B8  6E23               	movwf	strlen@s+1,c
  4778  0027BA  EC7E  F01A         	call	_strlen	;wreg free
  4779  0027BE  5022               	movf	?_strlen,w,c
  4780  0027C0  6E32               	movwf	scroll_off@str_len,c
  4781                           
  4782                           ;clcd.c: 592: line = clcd_display_string_details->start_row;
  4783  0027C2  EE20 F02B          	lfsr	2,43
  4784  0027C6  5028               	movf	scroll_off@clcd_display_string_details,w,c
  4785  0027C8  26D9               	addwf	fsr2l,f,c
  4786  0027CA  5029               	movf	scroll_off@clcd_display_string_details+1,w,c
  4787  0027CC  22DA               	addwfc	fsr2h,f,c
  4788  0027CE  50DF               	movf	indf2,w,c
  4789  0027D0  0B7F               	andlw	127
  4790  0027D2  6E30               	movwf	scroll_off@line,c
  4791                           
  4792                           ;clcd.c: 593: j = clcd_display_string_details->start_col;
  4793  0027D4  EE20 F02C          	lfsr	2,44
  4794  0027D8  5028               	movf	scroll_off@clcd_display_string_details,w,c
  4795  0027DA  26D9               	addwf	fsr2l,f,c
  4796  0027DC  5029               	movf	scroll_off@clcd_display_string_details+1,w,c
  4797  0027DE  22DA               	addwfc	fsr2h,f,c
  4798  0027E0  50DF               	movf	indf2,w,c
  4799  0027E2  0B7F               	andlw	127
  4800  0027E4  6E2A               	movwf	??_scroll_off& (0+255),c
  4801  0027E6  502A               	movf	??_scroll_off,w,c
  4802  0027E8  6E33               	movwf	scroll_off@j,c
  4803  0027EA  6A34               	clrf	scroll_off@j+1,c
  4804                           
  4805                           ;clcd.c: 594: for (i = 0; i < str_len;) {
  4806  0027EC  0E00               	movlw	0
  4807  0027EE  6E36               	movwf	scroll_off@i+1,c
  4808  0027F0  0E00               	movlw	0
  4809  0027F2  6E35               	movwf	scroll_off@i,c
  4810  0027F4  D05B               	goto	l624
  4811  0027F6                     
  4812                           ;clcd.c: 596: lcd_display_array[line][j] = clcd_display_string_details->string[i++];
  4813  0027F6  0E02               	movlw	2
  4814  0027F8  2435               	addwf	scroll_off@i,w,c
  4815  0027FA  6E2A               	movwf	??_scroll_off& (0+255),c
  4816  0027FC  0E00               	movlw	0
  4817  0027FE  2036               	addwfc	scroll_off@i+1,w,c
  4818  002800  6E2B               	movwf	(??_scroll_off+1)& (0+255),c
  4819  002802  502A               	movf	??_scroll_off,w,c
  4820  002804  2428               	addwf	scroll_off@clcd_display_string_details,w,c
  4821  002806  6ED9               	movwf	fsr2l,c
  4822  002808  502B               	movf	??_scroll_off+1,w,c
  4823  00280A  2029               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4824  00280C  6EDA               	movwf	fsr2h,c
  4825  00280E  5030               	movf	scroll_off@line,w,c
  4826  002810  0D14               	mullw	20
  4827  002812  0E00               	movlw	low _lcd_display_array
  4828  002814  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4829  002816  0E01               	movlw	high _lcd_display_array
  4830  002818  6E2D               	movwf	(??_scroll_off+3)& (0+255),c
  4831  00281A  50F3               	movf	prodl,w,c
  4832  00281C  262C               	addwf	??_scroll_off+2,f,c
  4833  00281E  50F4               	movf	prodh,w,c
  4834  002820  222D               	addwfc	??_scroll_off+3,f,c
  4835  002822  5033               	movf	scroll_off@j,w,c
  4836  002824  242C               	addwf	??_scroll_off+2,w,c
  4837  002826  6EE1               	movwf	fsr1l,c
  4838  002828  5034               	movf	scroll_off@j+1,w,c
  4839  00282A  202D               	addwfc	??_scroll_off+3,w,c
  4840  00282C  6EE2               	movwf	fsr1h,c
  4841  00282E  CFDF FFE7          	movff	indf2,indf1
  4842  002832  4A35               	infsnz	scroll_off@i,f,c
  4843  002834  2A36               	incf	scroll_off@i+1,f,c
  4844                           
  4845                           ;clcd.c: 597: if (i >= str_len)break;
  4846  002836  5032               	movf	scroll_off@str_len,w,c
  4847  002838  6E2A               	movwf	??_scroll_off& (0+255),c
  4848  00283A  6A2B               	clrf	(??_scroll_off+1)& (0+255),c
  4849  00283C  502A               	movf	??_scroll_off,w,c
  4850  00283E  5C35               	subwf	scroll_off@i,w,c
  4851  002840  5036               	movf	scroll_off@i+1,w,c
  4852  002842  0A80               	xorlw	128
  4853  002844  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4854  002846  502B               	movf	??_scroll_off+1,w,c
  4855  002848  0A80               	xorlw	128
  4856  00284A  582C               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4857  00284C  B0D8               	btfsc	status,0,c
  4858  00284E  D01C               	goto	u6540
  4859                           
  4860                           ;clcd.c: 598: if (i >= display_char_count)break;
  4861  002850  5031               	movf	scroll_off@display_char_count,w,c
  4862  002852  6E2A               	movwf	??_scroll_off& (0+255),c
  4863  002854  6A2B               	clrf	(??_scroll_off+1)& (0+255),c
  4864  002856  502A               	movf	??_scroll_off,w,c
  4865  002858  5C35               	subwf	scroll_off@i,w,c
  4866  00285A  5036               	movf	scroll_off@i+1,w,c
  4867  00285C  0A80               	xorlw	128
  4868  00285E  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4869  002860  502B               	movf	??_scroll_off+1,w,c
  4870  002862  0A80               	xorlw	128
  4871  002864  582C               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4872  002866  B0D8               	btfsc	status,0,c
  4873  002868  D00F               	goto	u6540
  4874  00286A  4A33               	infsnz	scroll_off@j,f,c
  4875  00286C  2A34               	incf	scroll_off@j+1,f,c
  4876  00286E  5046               	movf	_clcd_config_data+2,w,c
  4877  002870  6E2A               	movwf	??_scroll_off& (0+255),c
  4878  002872  6A2B               	clrf	(??_scroll_off+1)& (0+255),c
  4879  002874  502A               	movf	??_scroll_off,w,c
  4880  002876  5C33               	subwf	scroll_off@j,w,c
  4881  002878  5034               	movf	scroll_off@j+1,w,c
  4882  00287A  0A80               	xorlw	128
  4883  00287C  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4884  00287E  502B               	movf	??_scroll_off+1,w,c
  4885  002880  0A80               	xorlw	128
  4886  002882  582C               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4887  002884  A0D8               	btfss	status,0,c
  4888  002886  D7B7               	goto	l620
  4889  002888                     u6540:
  4890                           
  4891                           ;clcd.c: 599: }
  4892                           ;clcd.c: 601: j = 0;
  4893  002888  0E00               	movlw	0
  4894  00288A  6E34               	movwf	scroll_off@j+1,c
  4895  00288C  0E00               	movlw	0
  4896  00288E  6E33               	movwf	scroll_off@j,c
  4897                           
  4898                           ;clcd.c: 602: line++;
  4899  002890  2A30               	incf	scroll_off@line,f,c
  4900                           
  4901                           ;clcd.c: 603: if (i >= display_char_count)break;
  4902  002892  5031               	movf	scroll_off@display_char_count,w,c
  4903  002894  6E2A               	movwf	??_scroll_off& (0+255),c
  4904  002896  6A2B               	clrf	(??_scroll_off+1)& (0+255),c
  4905  002898  502A               	movf	??_scroll_off,w,c
  4906  00289A  5C35               	subwf	scroll_off@i,w,c
  4907  00289C  5036               	movf	scroll_off@i+1,w,c
  4908  00289E  0A80               	xorlw	128
  4909  0028A0  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4910  0028A2  502B               	movf	??_scroll_off+1,w,c
  4911  0028A4  0A80               	xorlw	128
  4912  0028A6  582C               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4913  0028A8  B0D8               	btfsc	status,0,c
  4914  0028AA  0012               	return	
  4915  0028AC                     l624:
  4916  0028AC  5032               	movf	scroll_off@str_len,w,c
  4917  0028AE  6E2A               	movwf	??_scroll_off& (0+255),c
  4918  0028B0  6A2B               	clrf	(??_scroll_off+1)& (0+255),c
  4919  0028B2  502A               	movf	??_scroll_off,w,c
  4920  0028B4  5C35               	subwf	scroll_off@i,w,c
  4921  0028B6  5036               	movf	scroll_off@i+1,w,c
  4922  0028B8  0A80               	xorlw	128
  4923  0028BA  6E2C               	movwf	(??_scroll_off+2)& (0+255),c
  4924  0028BC  502B               	movf	??_scroll_off+1,w,c
  4925  0028BE  0A80               	xorlw	128
  4926  0028C0  582C               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4927  0028C2  B0D8               	btfsc	status,0,c
  4928  0028C4  0012               	return	
  4929  0028C6  D7D3               	goto	l619
  4930  0028C8                     __end_of_scroll_off:
  4931                           	opt stack 0
  4932                           tblptru	equ	0xFF8
  4933                           tblptrh	equ	0xFF7
  4934                           tblptrl	equ	0xFF6
  4935                           tablat	equ	0xFF5
  4936                           prodh	equ	0xFF4
  4937                           prodl	equ	0xFF3
  4938                           intcon	equ	0xFF2
  4939                           postinc0	equ	0xFEE
  4940                           wreg	equ	0xFE8
  4941                           indf1	equ	0xFE7
  4942                           postinc1	equ	0xFE6
  4943                           postdec1	equ	0xFE5
  4944                           fsr1h	equ	0xFE2
  4945                           fsr1l	equ	0xFE1
  4946                           indf2	equ	0xFDF
  4947                           postinc2	equ	0xFDE
  4948                           postdec2	equ	0xFDD
  4949                           fsr2h	equ	0xFDA
  4950                           fsr2l	equ	0xFD9
  4951                           status	equ	0xFD8
  4952                           
  4953 ;; *************** function _scroll_left_to_right *****************
  4954 ;; Defined at:
  4955 ;;		line 501 in file "clcd.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;  clcd_display    2   47[COMRAM] PTR struct .
  4958 ;;		 -> clcd_display_string_details(1100), 
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;  line            1   49[COMRAM] unsigned char 
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  1    wreg      void 
  4963 ;; Registers used:
  4964 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4970 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;Total ram usage:       11 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    6
  4977 ;; This function calls:
  4978 ;;		_memcpy
  4979 ;;		_memset
  4980 ;; This function is called by:
  4981 ;;		_make_display
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text10
  4986  0012E8                     __ptext10:
  4987                           	opt stack 0
  4988  0012E8                     _scroll_left_to_right:
  4989                           	opt stack 23
  4990                           
  4991                           ;clcd.c: 502: char line = -1;
  4992                           
  4993                           ;incstack = 0
  4994  0012E8  6832               	setf	scroll_left_to_right@line,c
  4995                           
  4996                           ;clcd.c: 503: if (clcd_display_string_details->start_row == 0)
  4997  0012EA  EE20 F02B          	lfsr	2,43
  4998  0012EE  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4999  0012F0  26D9               	addwf	fsr2l,f,c
  5000  0012F2  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5001  0012F4  22DA               	addwfc	fsr2h,f,c
  5002  0012F6  50DF               	movf	indf2,w,c
  5003  0012F8  0B7F               	andlw	127
  5004  0012FA  0900               	iorlw	0
  5005  0012FC  A4D8               	btfss	status,2,c
  5006  0012FE  D002               	goto	l585
  5007                           
  5008                           ;clcd.c: 504: line = 0;
  5009  001300  0E00               	movlw	0
  5010  001302  D00C               	goto	L2
  5011  001304                     l585:
  5012                           
  5013                           ;clcd.c: 505: else if (clcd_display_string_details->start_row == 1)
  5014  001304  EE20 F02B          	lfsr	2,43
  5015  001308  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5016  00130A  26D9               	addwf	fsr2l,f,c
  5017  00130C  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5018  00130E  22DA               	addwfc	fsr2h,f,c
  5019  001310  50DF               	movf	indf2,w,c
  5020  001312  0B7F               	andlw	127
  5021  001314  06E8               	decf	wreg,f,c
  5022  001316  A4D8               	btfss	status,2,c
  5023  001318  D002               	goto	l587
  5024                           
  5025                           ;clcd.c: 506: line = 1;
  5026  00131A  0E01               	movlw	1
  5027  00131C                     L2:
  5028  00131C  6E32               	movwf	scroll_left_to_right@line,c
  5029  00131E                     l587:
  5030                           
  5031                           ;clcd.c: 507: if (clcd_display_string_details->start_row == 2)
  5032  00131E  EE20 F02B          	lfsr	2,43
  5033  001322  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5034  001324  26D9               	addwf	fsr2l,f,c
  5035  001326  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5036  001328  22DA               	addwfc	fsr2h,f,c
  5037  00132A  50DF               	movf	indf2,w,c
  5038  00132C  0B7F               	andlw	127
  5039  00132E  0A02               	xorlw	2
  5040  001330  A4D8               	btfss	status,2,c
  5041  001332  D002               	goto	l588
  5042                           
  5043                           ;clcd.c: 508: line = 2;
  5044  001334  0E02               	movlw	2
  5045  001336  6E32               	movwf	scroll_left_to_right@line,c
  5046  001338                     l588:
  5047                           
  5048                           ;clcd.c: 509: if (clcd_display_string_details->start_row == 3)
  5049  001338  EE20 F02B          	lfsr	2,43
  5050  00133C  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5051  00133E  26D9               	addwf	fsr2l,f,c
  5052  001340  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5053  001342  22DA               	addwfc	fsr2h,f,c
  5054  001344  50DF               	movf	indf2,w,c
  5055  001346  0B7F               	andlw	127
  5056  001348  0A03               	xorlw	3
  5057  00134A  A4D8               	btfss	status,2,c
  5058  00134C  D002               	goto	l589
  5059                           
  5060                           ;clcd.c: 510: line = 3;
  5061  00134E  0E03               	movlw	3
  5062  001350  6E32               	movwf	scroll_left_to_right@line,c
  5063  001352                     l589:
  5064                           
  5065                           ;clcd.c: 512: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  5066                           ;clcd.c: 513: ' ', clcd_display_string_details->display_char_count);
  5067  001352  5032               	movf	scroll_left_to_right@line,w,c
  5068  001354  0D14               	mullw	20
  5069  001356  0E00               	movlw	low _lcd_display_array
  5070  001358  0100               	movlb	0	; () banked
  5071  00135A  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5072  00135C  0E01               	movlw	high _lcd_display_array
  5073  00135E  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5074  001360  50F3               	movf	prodl,w,c
  5075  001362  27C6               	addwf	??_scroll_left_to_right& (0+255),f,b
  5076  001364  50F4               	movf	prodh,w,c
  5077  001366  23C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),f,b
  5078  001368  EE20 F02C          	lfsr	2,44
  5079  00136C  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5080  00136E  26D9               	addwf	fsr2l,f,c
  5081  001370  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5082  001372  22DA               	addwfc	fsr2h,f,c
  5083  001374  50DF               	movf	indf2,w,c
  5084  001376  0B7F               	andlw	127
  5085  001378  6FC8               	movwf	(??_scroll_left_to_right+2)& (0+255),b
  5086  00137A  51C8               	movf	(??_scroll_left_to_right+2)& (0+255),w,b
  5087  00137C  0D01               	mullw	1
  5088  00137E  50F3               	movf	prodl,w,c
  5089  001380  25C6               	addwf	??_scroll_left_to_right& (0+255),w,b
  5090  001382  6E28               	movwf	memset@p1,c
  5091  001384  50F4               	movf	prodh,w,c
  5092  001386  21C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),w,b
  5093  001388  6E29               	movwf	memset@p1+1,c
  5094  00138A  0E00               	movlw	0
  5095  00138C  6E2B               	movwf	memset@c+1,c
  5096  00138E  0E20               	movlw	32
  5097  001390  6E2A               	movwf	memset@c,c
  5098  001392  EE20 F032          	lfsr	2,50
  5099  001396  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5100  001398  26D9               	addwf	fsr2l,f,c
  5101  00139A  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5102  00139C  22DA               	addwfc	fsr2h,f,c
  5103  00139E  50DF               	movf	indf2,w,c
  5104  0013A0  6FC9               	movwf	(??_scroll_left_to_right+3)& (0+255),b
  5105  0013A2  51C9               	movf	(??_scroll_left_to_right+3)& (0+255),w,b
  5106  0013A4  6E2C               	movwf	memset@n,c
  5107  0013A6  6A2D               	clrf	memset@n+1,c
  5108  0013A8  EC8E  F01B         	call	_memset	;wreg free
  5109                           
  5110                           ;clcd.c: 515: if (clcd_display_string_details->length_count_for_right_scroll > clcd_disp
      +                          lay_string_details->display_char_count) {
  5111  0013AC  EE20 F032          	lfsr	2,50
  5112  0013B0  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5113  0013B2  26D9               	addwf	fsr2l,f,c
  5114  0013B4  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5115  0013B6  22DA               	addwfc	fsr2h,f,c
  5116  0013B8  50DF               	movf	indf2,w,c
  5117  0013BA  0100               	movlb	0	; () banked
  5118  0013BC  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5119  0013BE  EE20 F033          	lfsr	2,51
  5120  0013C2  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5121  0013C4  26D9               	addwf	fsr2l,f,c
  5122  0013C6  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5123  0013C8  22DA               	addwfc	fsr2h,f,c
  5124  0013CA  50DF               	movf	indf2,w,c
  5125  0013CC  0B7F               	andlw	127
  5126  0013CE  5DC6               	subwf	??_scroll_left_to_right& (0+255),w,b
  5127  0013D0  B0D8               	btfsc	status,0,c
  5128  0013D2  D058               	goto	l590
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;clcd.c: 516: if (clcd_display_string_details->string[0] != (0)) {
  5132  0013D4  EE20 F002          	lfsr	2,2
  5133  0013D8  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5134  0013DA  26D9               	addwf	fsr2l,f,c
  5135  0013DC  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5136  0013DE  22DA               	addwfc	fsr2h,f,c
  5137  0013E0  50DF               	movf	indf2,w,c
  5138  0013E2  B4D8               	btfsc	status,2,c
  5139  0013E4  D0A7               	goto	l593
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;clcd.c: 517: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  5143                           ;clcd.c: 518: clcd_display_string_details->string +
  5144                           ;clcd.c: 519: ((clcd_display_string_details->strlen - 1) - clcd_display_string_details->
      +                          length_decount_for_right_scroll),
  5145                           ;clcd.c: 520: clcd_display_string_details->display_char_count);
  5146  0013E6  5032               	movf	scroll_left_to_right@line,w,c
  5147  0013E8  0D14               	mullw	20
  5148  0013EA  0E00               	movlw	low _lcd_display_array
  5149  0013EC  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5150  0013EE  0E01               	movlw	high _lcd_display_array
  5151  0013F0  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5152  0013F2  50F3               	movf	prodl,w,c
  5153  0013F4  27C6               	addwf	??_scroll_left_to_right& (0+255),f,b
  5154  0013F6  50F4               	movf	prodh,w,c
  5155  0013F8  23C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),f,b
  5156  0013FA  EE20 F02C          	lfsr	2,44
  5157  0013FE  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5158  001400  26D9               	addwf	fsr2l,f,c
  5159  001402  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5160  001404  22DA               	addwfc	fsr2h,f,c
  5161  001406  50DF               	movf	indf2,w,c
  5162  001408  0B7F               	andlw	127
  5163  00140A  6FC8               	movwf	(??_scroll_left_to_right+2)& (0+255),b
  5164  00140C  51C8               	movf	(??_scroll_left_to_right+2)& (0+255),w,b
  5165  00140E  0D01               	mullw	1
  5166  001410  50F3               	movf	prodl,w,c
  5167  001412  25C6               	addwf	??_scroll_left_to_right& (0+255),w,b
  5168  001414  6E14               	movwf	memcpy@d1,c
  5169  001416  50F4               	movf	prodh,w,c
  5170  001418  21C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),w,b
  5171  00141A  6E15               	movwf	memcpy@d1+1,c
  5172  00141C  EE20 F034          	lfsr	2,52
  5173  001420  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5174  001422  26D9               	addwf	fsr2l,f,c
  5175  001424  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5176  001426  22DA               	addwfc	fsr2h,f,c
  5177  001428  50DF               	movf	indf2,w,c
  5178  00142A  0B7F               	andlw	127
  5179  00142C  6FC9               	movwf	(??_scroll_left_to_right+3)& (0+255),b
  5180  00142E  6BCA               	clrf	(??_scroll_left_to_right+4)& (0+255),b
  5181  001430  1FC9               	comf	(??_scroll_left_to_right+3)& (0+255),f,b
  5182  001432  1FCA               	comf	(??_scroll_left_to_right+4)& (0+255),f,b
  5183  001434  4BC9               	infsnz	(??_scroll_left_to_right+3)& (0+255),f,b
  5184  001436  2BCA               	incf	(??_scroll_left_to_right+4)& (0+255),f,b
  5185  001438  EE20 F02A          	lfsr	2,42
  5186  00143C  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5187  00143E  26D9               	addwf	fsr2l,f,c
  5188  001440  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5189  001442  22DA               	addwfc	fsr2h,f,c
  5190  001444  50DF               	movf	indf2,w,c
  5191  001446  0B7F               	andlw	127
  5192  001448  6FCB               	movwf	(??_scroll_left_to_right+5)& (0+255),b
  5193  00144A  6BCC               	clrf	(??_scroll_left_to_right+6)& (0+255),b
  5194  00144C  51C9               	movf	(??_scroll_left_to_right+3)& (0+255),w,b
  5195  00144E  27CB               	addwf	(??_scroll_left_to_right+5)& (0+255),f,b
  5196  001450  51CA               	movf	(??_scroll_left_to_right+4)& (0+255),w,b
  5197  001452  23CC               	addwfc	(??_scroll_left_to_right+6)& (0+255),f,b
  5198  001454  0E01               	movlw	1
  5199  001456  27CB               	addwf	(??_scroll_left_to_right+5)& (0+255),f,b
  5200  001458  0E00               	movlw	0
  5201  00145A  23CC               	addwfc	(??_scroll_left_to_right+6)& (0+255),f,b
  5202  00145C  51CB               	movf	(??_scroll_left_to_right+5)& (0+255),w,b
  5203  00145E  2430               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5204  001460  6E16               	movwf	memcpy@s1,c
  5205  001462  51CC               	movf	(??_scroll_left_to_right+6)& (0+255),w,b
  5206  001464  2031               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5207  001466  6E17               	movwf	memcpy@s1+1,c
  5208  001468  EE20 F032          	lfsr	2,50
  5209  00146C  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5210  00146E  26D9               	addwf	fsr2l,f,c
  5211  001470  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5212  001472  22DA               	addwfc	fsr2h,f,c
  5213  001474  50DF               	movf	indf2,w,c
  5214  001476  6FCD               	movwf	(??_scroll_left_to_right+7)& (0+255),b
  5215  001478  51CD               	movf	(??_scroll_left_to_right+7)& (0+255),w,b
  5216  00147A  6E18               	movwf	memcpy@n,c
  5217  00147C  6A19               	clrf	memcpy@n+1,c
  5218  00147E  ECB1  F01B         	call	_memcpy	;wreg free
  5219                           
  5220                           ;clcd.c: 521: }
  5221                           ;clcd.c: 522: } else {
  5222  001482  D058               	goto	l593
  5223  001484                     l590:
  5224                           
  5225                           ;clcd.c: 523: if (clcd_display_string_details->string[0] != (0)) {
  5226  001484  EE20 F002          	lfsr	2,2
  5227  001488  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5228  00148A  26D9               	addwf	fsr2l,f,c
  5229  00148C  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5230  00148E  22DA               	addwfc	fsr2h,f,c
  5231  001490  50DF               	movf	indf2,w,c
  5232  001492  B4D8               	btfsc	status,2,c
  5233  001494  D04F               	goto	l593
  5234                           
  5235                           ;clcd.c: 524: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col +
  5236                           ;clcd.c: 525: clcd_display_string_details->length_count_for_right_scroll,
  5237                           ;clcd.c: 526: clcd_display_string_details->string,
  5238                           ;clcd.c: 527: clcd_display_string_details->display_char_count - clcd_display_string_deta
      +                          ils->length_count_for_right_scroll);
  5239  001496  5032               	movf	scroll_left_to_right@line,w,c
  5240  001498  0D14               	mullw	20
  5241  00149A  0E00               	movlw	low _lcd_display_array
  5242  00149C  0100               	movlb	0	; () banked
  5243  00149E  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5244  0014A0  0E01               	movlw	high _lcd_display_array
  5245  0014A2  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5246  0014A4  50F3               	movf	prodl,w,c
  5247  0014A6  27C6               	addwf	??_scroll_left_to_right& (0+255),f,b
  5248  0014A8  50F4               	movf	prodh,w,c
  5249  0014AA  23C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),f,b
  5250  0014AC  EE20 F02C          	lfsr	2,44
  5251  0014B0  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5252  0014B2  26D9               	addwf	fsr2l,f,c
  5253  0014B4  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5254  0014B6  22DA               	addwfc	fsr2h,f,c
  5255  0014B8  50DF               	movf	indf2,w,c
  5256  0014BA  0B7F               	andlw	127
  5257  0014BC  6FC8               	movwf	(??_scroll_left_to_right+2)& (0+255),b
  5258  0014BE  51C8               	movf	(??_scroll_left_to_right+2)& (0+255),w,b
  5259  0014C0  0D01               	mullw	1
  5260  0014C2  50F3               	movf	prodl,w,c
  5261  0014C4  27C6               	addwf	??_scroll_left_to_right& (0+255),f,b
  5262  0014C6  50F4               	movf	prodh,w,c
  5263  0014C8  23C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),f,b
  5264  0014CA  EE20 F033          	lfsr	2,51
  5265  0014CE  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5266  0014D0  26D9               	addwf	fsr2l,f,c
  5267  0014D2  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5268  0014D4  22DA               	addwfc	fsr2h,f,c
  5269  0014D6  50DF               	movf	indf2,w,c
  5270  0014D8  0B7F               	andlw	127
  5271  0014DA  6FC9               	movwf	(??_scroll_left_to_right+3)& (0+255),b
  5272  0014DC  51C9               	movf	(??_scroll_left_to_right+3)& (0+255),w,b
  5273  0014DE  0D01               	mullw	1
  5274  0014E0  50F3               	movf	prodl,w,c
  5275  0014E2  25C6               	addwf	??_scroll_left_to_right& (0+255),w,b
  5276  0014E4  6E14               	movwf	memcpy@d1,c
  5277  0014E6  50F4               	movf	prodh,w,c
  5278  0014E8  21C7               	addwfc	(??_scroll_left_to_right+1)& (0+255),w,b
  5279  0014EA  6E15               	movwf	memcpy@d1+1,c
  5280  0014EC  0E02               	movlw	2
  5281  0014EE  2430               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5282  0014F0  6E16               	movwf	memcpy@s1,c
  5283  0014F2  0E00               	movlw	0
  5284  0014F4  2031               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5285  0014F6  6E17               	movwf	memcpy@s1+1,c
  5286  0014F8  EE20 F033          	lfsr	2,51
  5287  0014FC  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5288  0014FE  26D9               	addwf	fsr2l,f,c
  5289  001500  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5290  001502  22DA               	addwfc	fsr2h,f,c
  5291  001504  50DF               	movf	indf2,w,c
  5292  001506  0B7F               	andlw	127
  5293  001508  6FCA               	movwf	(??_scroll_left_to_right+4)& (0+255),b
  5294  00150A  6BCB               	clrf	(??_scroll_left_to_right+5)& (0+255),b
  5295  00150C  1FCA               	comf	(??_scroll_left_to_right+4)& (0+255),f,b
  5296  00150E  1FCB               	comf	(??_scroll_left_to_right+5)& (0+255),f,b
  5297  001510  4BCA               	infsnz	(??_scroll_left_to_right+4)& (0+255),f,b
  5298  001512  2BCB               	incf	(??_scroll_left_to_right+5)& (0+255),f,b
  5299  001514  EE20 F032          	lfsr	2,50
  5300  001518  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5301  00151A  26D9               	addwf	fsr2l,f,c
  5302  00151C  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5303  00151E  22DA               	addwfc	fsr2h,f,c
  5304  001520  50DF               	movf	indf2,w,c
  5305  001522  6FCC               	movwf	(??_scroll_left_to_right+6)& (0+255),b
  5306  001524  51CC               	movf	(??_scroll_left_to_right+6)& (0+255),w,b
  5307  001526  25CA               	addwf	(??_scroll_left_to_right+4)& (0+255),w,b
  5308  001528  6E18               	movwf	memcpy@n,c
  5309  00152A  0E00               	movlw	0
  5310  00152C  21CB               	addwfc	(??_scroll_left_to_right+5)& (0+255),w,b
  5311  00152E  6E19               	movwf	memcpy@n+1,c
  5312  001530  ECB1  F01B         	call	_memcpy	;wreg free
  5313  001534                     l593:
  5314                           
  5315                           ;clcd.c: 528: }
  5316                           ;clcd.c: 529: }
  5317                           ;clcd.c: 530: if (clcd_display_string_details->length_count_for_right_scroll <= clcd_dis
      +                          play_string_details->display_char_count) {
  5318  001534  EE20 F033          	lfsr	2,51
  5319  001538  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5320  00153A  26D9               	addwf	fsr2l,f,c
  5321  00153C  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5322  00153E  22DA               	addwfc	fsr2h,f,c
  5323  001540  50DF               	movf	indf2,w,c
  5324  001542  0B7F               	andlw	127
  5325  001544  0100               	movlb	0	; () banked
  5326  001546  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5327  001548  EE20 F032          	lfsr	2,50
  5328  00154C  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5329  00154E  26D9               	addwf	fsr2l,f,c
  5330  001550  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5331  001552  22DA               	addwfc	fsr2h,f,c
  5332  001554  51C6               	movf	??_scroll_left_to_right& (0+255),w,b
  5333  001556  5CDE               	subwf	postinc2,w,c
  5334  001558  A0D8               	btfss	status,0,c
  5335  00155A  D013               	goto	l594
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;clcd.c: 531: clcd_display_string_details->length_count_for_right_scroll++;
  5339  00155C  0E01               	movlw	1
  5340  00155E  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5341  001560  EE20 F033          	lfsr	2,51
  5342  001564  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5343  001566  26D9               	addwf	fsr2l,f,c
  5344  001568  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5345  00156A  22DA               	addwfc	fsr2h,f,c
  5346  00156C  50DF               	movf	indf2,w,c
  5347  00156E  0B7F               	andlw	127
  5348  001570  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5349  001572  51C6               	movf	??_scroll_left_to_right& (0+255),w,b
  5350  001574  27C7               	addwf	(??_scroll_left_to_right+1)& (0+255),f,b
  5351  001576  50DF               	movf	indf2,w,c
  5352  001578  19C7               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,b
  5353  00157A  0B80               	andlw	-128
  5354  00157C  19C7               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,b
  5355  00157E  6EDF               	movwf	indf2,c
  5356                           
  5357                           ;clcd.c: 532: } else if (clcd_display_string_details->length_decount_for_right_scroll < 
      +                          clcd_display_string_details->strlen) {
  5358  001580  0012               	return	
  5359  001582                     l594:
  5360                           
  5361                           ; BSR set to: 0
  5362                           
  5363                           ; BSR set to: 0
  5364  001582  EE20 F034          	lfsr	2,52
  5365  001586  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5366  001588  26D9               	addwf	fsr2l,f,c
  5367  00158A  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5368  00158C  22DA               	addwfc	fsr2h,f,c
  5369  00158E  50DF               	movf	indf2,w,c
  5370  001590  0B7F               	andlw	127
  5371  001592  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5372  001594  EE20 F02A          	lfsr	2,42
  5373  001598  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5374  00159A  26D9               	addwf	fsr2l,f,c
  5375  00159C  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5376  00159E  22DA               	addwfc	fsr2h,f,c
  5377  0015A0  50DF               	movf	indf2,w,c
  5378  0015A2  0B7F               	andlw	127
  5379  0015A4  5DC6               	subwf	??_scroll_left_to_right& (0+255),w,b
  5380  0015A6  B0D8               	btfsc	status,0,c
  5381  0015A8  0012               	return	
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;clcd.c: 533: clcd_display_string_details->length_decount_for_right_scroll++;
  5385  0015AA  0E01               	movlw	1
  5386  0015AC  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5387  0015AE  EE20 F034          	lfsr	2,52
  5388  0015B2  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5389  0015B4  26D9               	addwf	fsr2l,f,c
  5390  0015B6  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5391  0015B8  22DA               	addwfc	fsr2h,f,c
  5392  0015BA  50DF               	movf	indf2,w,c
  5393  0015BC  0B7F               	andlw	127
  5394  0015BE  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5395  0015C0  51C6               	movf	??_scroll_left_to_right& (0+255),w,b
  5396  0015C2  27C7               	addwf	(??_scroll_left_to_right+1)& (0+255),f,b
  5397  0015C4  50DF               	movf	indf2,w,c
  5398  0015C6  19C7               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,b
  5399  0015C8  0B80               	andlw	-128
  5400  0015CA  19C7               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,b
  5401  0015CC  6EDF               	movwf	indf2,c
  5402                           
  5403                           ;clcd.c: 534: if (clcd_display_string_details->length_decount_for_right_scroll >= clcd_d
      +                          isplay_string_details->strlen) {
  5404  0015CE  EE20 F02A          	lfsr	2,42
  5405  0015D2  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5406  0015D4  26D9               	addwf	fsr2l,f,c
  5407  0015D6  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5408  0015D8  22DA               	addwfc	fsr2h,f,c
  5409  0015DA  50DF               	movf	indf2,w,c
  5410  0015DC  0B7F               	andlw	127
  5411  0015DE  6FC6               	movwf	??_scroll_left_to_right& (0+255),b
  5412  0015E0  EE20 F034          	lfsr	2,52
  5413  0015E4  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5414  0015E6  26D9               	addwf	fsr2l,f,c
  5415  0015E8  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5416  0015EA  22DA               	addwfc	fsr2h,f,c
  5417  0015EC  50DF               	movf	indf2,w,c
  5418  0015EE  0B7F               	andlw	127
  5419  0015F0  6FC7               	movwf	(??_scroll_left_to_right+1)& (0+255),b
  5420  0015F2  51C6               	movf	??_scroll_left_to_right& (0+255),w,b
  5421  0015F4  5DC7               	subwf	(??_scroll_left_to_right+1)& (0+255),w,b
  5422  0015F6  A0D8               	btfss	status,0,c
  5423  0015F8  0012               	return	
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;clcd.c: 535: clcd_display_string_details->length_count_for_right_scroll = 0;
  5427  0015FA  EE20 F033          	lfsr	2,51
  5428  0015FE  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5429  001600  26D9               	addwf	fsr2l,f,c
  5430  001602  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5431  001604  22DA               	addwfc	fsr2h,f,c
  5432  001606  90DF               	bcf	indf2,0,c
  5433  001608  92DF               	bcf	indf2,1,c
  5434  00160A  94DF               	bcf	indf2,2,c
  5435  00160C  96DF               	bcf	indf2,3,c
  5436  00160E  98DF               	bcf	indf2,4,c
  5437  001610  9ADF               	bcf	indf2,5,c
  5438  001612  9CDF               	bcf	indf2,6,c
  5439                           
  5440                           ;clcd.c: 536: clcd_display_string_details->length_decount_for_right_scroll = 0;
  5441  001614  EE20 F034          	lfsr	2,52
  5442  001618  5030               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5443  00161A  26D9               	addwf	fsr2l,f,c
  5444  00161C  5031               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5445  00161E  22DA               	addwfc	fsr2h,f,c
  5446  001620  90DF               	bcf	indf2,0,c
  5447  001622  92DF               	bcf	indf2,1,c
  5448  001624  94DF               	bcf	indf2,2,c
  5449  001626  96DF               	bcf	indf2,3,c
  5450  001628  98DF               	bcf	indf2,4,c
  5451  00162A  9ADF               	bcf	indf2,5,c
  5452  00162C  9CDF               	bcf	indf2,6,c
  5453                           
  5454                           ; BSR set to: 0
  5455                           
  5456                           ; BSR set to: 0
  5457  00162E  0012               	return	
  5458  001630                     __end_of_scroll_left_to_right:
  5459                           	opt stack 0
  5460                           tblptru	equ	0xFF8
  5461                           tblptrh	equ	0xFF7
  5462                           tblptrl	equ	0xFF6
  5463                           tablat	equ	0xFF5
  5464                           prodh	equ	0xFF4
  5465                           prodl	equ	0xFF3
  5466                           intcon	equ	0xFF2
  5467                           postinc0	equ	0xFEE
  5468                           wreg	equ	0xFE8
  5469                           indf1	equ	0xFE7
  5470                           postinc1	equ	0xFE6
  5471                           postdec1	equ	0xFE5
  5472                           fsr1h	equ	0xFE2
  5473                           fsr1l	equ	0xFE1
  5474                           indf2	equ	0xFDF
  5475                           postinc2	equ	0xFDE
  5476                           postdec2	equ	0xFDD
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function _display_text *****************
  5482 ;; Defined at:
  5483 ;;		line 671 in file "clcd.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;		None
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;		None
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      void 
  5490 ;; Registers used:
  5491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;Total ram usage:        0 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    8
  5504 ;; This function calls:
  5505 ;;		_char_enter_mode_left_to_right
  5506 ;;		_set_cursor
  5507 ;;		_write_lcd_cmd
  5508 ;;		_write_str
  5509 ;; This function is called by:
  5510 ;;		_make_display
  5511 ;;		_display_screen
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           	psect	text11
  5516  0031A2                     __ptext11:
  5517                           	opt stack 0
  5518  0031A2                     _display_text:
  5519                           	opt stack 21
  5520                           
  5521                           ;clcd.c: 672: if (print_data_ready == 1) {
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;incstack = 0
  5525  0031A2  0100               	movlb	0	; () banked
  5526  0031A4  0576               	decf	_print_data_ready& (0+255),w,b
  5527  0031A6  1177               	iorwf	(_print_data_ready+1)& (0+255),w,b
  5528  0031A8  A4D8               	btfss	status,2,c
  5529  0031AA  D037               	goto	l640
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;clcd.c: 673: write_lcd_cmd(0x01);;
  5533  0031AC  0E01               	movlw	1
  5534  0031AE  ECAD  F01D         	call	_write_lcd_cmd
  5535                           
  5536                           ;clcd.c: 674: char_enter_mode_left_to_right();
  5537  0031B2  EC47  F01E         	call	_char_enter_mode_left_to_right	;wreg free
  5538                           
  5539                           ;clcd.c: 675: set_cursor(0x80, 0);
  5540  0031B6  0E00               	movlw	0
  5541  0031B8  6E1C               	movwf	set_cursor@col_number,c
  5542  0031BA  0E80               	movlw	128
  5543  0031BC  ECC9  F01D         	call	_set_cursor
  5544                           
  5545                           ;clcd.c: 676: write_str(lcd_display_array[0]);
  5546  0031C0  0E00               	movlw	low _lcd_display_array
  5547  0031C2  6E1C               	movwf	write_str@str,c
  5548  0031C4  0E01               	movlw	high _lcd_display_array
  5549  0031C6  6E1D               	movwf	write_str@str+1,c
  5550  0031C8  EC55  F01C         	call	_write_str	;wreg free
  5551                           
  5552                           ;clcd.c: 677: set_cursor(0xC0, 0);
  5553  0031CC  0E00               	movlw	0
  5554  0031CE  6E1C               	movwf	set_cursor@col_number,c
  5555  0031D0  0EC0               	movlw	192
  5556  0031D2  ECC9  F01D         	call	_set_cursor
  5557                           
  5558                           ;clcd.c: 678: write_str(lcd_display_array[1]);
  5559  0031D6  0E14               	movlw	low (_lcd_display_array+20)
  5560  0031D8  6E1C               	movwf	write_str@str,c
  5561  0031DA  0E01               	movlw	high (_lcd_display_array+20)
  5562  0031DC  6E1D               	movwf	write_str@str+1,c
  5563  0031DE  EC55  F01C         	call	_write_str	;wreg free
  5564                           
  5565                           ;clcd.c: 679: set_cursor(0x94, 0);
  5566  0031E2  0E00               	movlw	0
  5567  0031E4  6E1C               	movwf	set_cursor@col_number,c
  5568  0031E6  0E94               	movlw	148
  5569  0031E8  ECC9  F01D         	call	_set_cursor
  5570                           
  5571                           ;clcd.c: 680: write_str(lcd_display_array[2]);
  5572  0031EC  0E28               	movlw	low (_lcd_display_array+40)
  5573  0031EE  6E1C               	movwf	write_str@str,c
  5574  0031F0  0E01               	movlw	high (_lcd_display_array+40)
  5575  0031F2  6E1D               	movwf	write_str@str+1,c
  5576  0031F4  EC55  F01C         	call	_write_str	;wreg free
  5577                           
  5578                           ;clcd.c: 681: set_cursor(0xD4, 0);
  5579  0031F8  0E00               	movlw	0
  5580  0031FA  6E1C               	movwf	set_cursor@col_number,c
  5581  0031FC  0ED4               	movlw	212
  5582  0031FE  ECC9  F01D         	call	_set_cursor
  5583                           
  5584                           ;clcd.c: 682: write_str(lcd_display_array[3]);
  5585  003202  0E3C               	movlw	low (_lcd_display_array+60)
  5586  003204  6E1C               	movwf	write_str@str,c
  5587  003206  0E01               	movlw	high (_lcd_display_array+60)
  5588  003208  6E1D               	movwf	write_str@str+1,c
  5589  00320A  EC55  F01C         	call	_write_str	;wreg free
  5590                           
  5591                           ;clcd.c: 683: print_data_ready = 0;
  5592  00320E  0E00               	movlw	0
  5593  003210  0100               	movlb	0	; () banked
  5594  003212  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5595  003214  0E00               	movlw	0
  5596  003216  6F76               	movwf	_print_data_ready& (0+255),b
  5597                           
  5598                           ;clcd.c: 684: } else {
  5599  003218  0012               	return	
  5600  00321A                     l640:
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;clcd.c: 685: print_data_ready = 0;
  5604                           
  5605                           ; BSR set to: 0
  5606  00321A  0E00               	movlw	0
  5607  00321C  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5608  00321E  0E00               	movlw	0
  5609  003220  6F76               	movwf	_print_data_ready& (0+255),b
  5610  003222  0012               	return	
  5611  003224                     __end_of_display_text:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           intcon	equ	0xFF2
  5620                           postinc0	equ	0xFEE
  5621                           wreg	equ	0xFE8
  5622                           indf1	equ	0xFE7
  5623                           postinc1	equ	0xFE6
  5624                           postdec1	equ	0xFE5
  5625                           fsr1h	equ	0xFE2
  5626                           fsr1l	equ	0xFE1
  5627                           indf2	equ	0xFDF
  5628                           postinc2	equ	0xFDE
  5629                           postdec2	equ	0xFDD
  5630                           fsr2h	equ	0xFDA
  5631                           fsr2l	equ	0xFD9
  5632                           status	equ	0xFD8
  5633                           
  5634 ;; *************** function _set_cursor *****************
  5635 ;; Defined at:
  5636 ;;		line 320 in file "clcd.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;  row_number      1    wreg     unsigned char 
  5639 ;;  col_number      1   27[COMRAM] unsigned char 
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;  row_number      1   28[COMRAM] unsigned char 
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  1    wreg      void 
  5644 ;; Registers used:
  5645 ;;		wreg, status,2, status,0, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5651 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;Total ram usage:        2 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    7
  5658 ;; This function calls:
  5659 ;;		_write_lcd_cmd
  5660 ;; This function is called by:
  5661 ;;		_display_text
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           	psect	text12
  5666  003B92                     __ptext12:
  5667                           	opt stack 0
  5668  003B92                     _set_cursor:
  5669                           	opt stack 21
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;incstack = 0
  5673                           ;set_cursor@row_number stored from wreg
  5674  003B92  6E1D               	movwf	set_cursor@row_number,c
  5675                           
  5676                           ;clcd.c: 321: if (col_number > 20) {
  5677  003B94  0E14               	movlw	20
  5678  003B96  641C               	cpfsgt	set_cursor@col_number,c
  5679  003B98  D002               	goto	l512
  5680                           
  5681                           ;clcd.c: 322: col_number = 0;
  5682  003B9A  0E00               	movlw	0
  5683  003B9C  6E1C               	movwf	set_cursor@col_number,c
  5684  003B9E                     l512:
  5685                           
  5686                           ;clcd.c: 323: }
  5687                           ;clcd.c: 324: write_lcd_cmd(col_number + row_number);
  5688  003B9E  501C               	movf	set_cursor@col_number,w,c
  5689  003BA0  241D               	addwf	set_cursor@row_number,w,c
  5690  003BA2  ECAD  F01D         	call	_write_lcd_cmd
  5691  003BA6  0012               	return		;funcret
  5692  003BA8                     __end_of_set_cursor:
  5693                           	opt stack 0
  5694                           tblptru	equ	0xFF8
  5695                           tblptrh	equ	0xFF7
  5696                           tblptrl	equ	0xFF6
  5697                           tablat	equ	0xFF5
  5698                           prodh	equ	0xFF4
  5699                           prodl	equ	0xFF3
  5700                           intcon	equ	0xFF2
  5701                           postinc0	equ	0xFEE
  5702                           wreg	equ	0xFE8
  5703                           indf1	equ	0xFE7
  5704                           postinc1	equ	0xFE6
  5705                           postdec1	equ	0xFE5
  5706                           fsr1h	equ	0xFE2
  5707                           fsr1l	equ	0xFE1
  5708                           indf2	equ	0xFDF
  5709                           postinc2	equ	0xFDE
  5710                           postdec2	equ	0xFDD
  5711                           fsr2h	equ	0xFDA
  5712                           fsr2l	equ	0xFD9
  5713                           status	equ	0xFD8
  5714                           
  5715 ;; *************** function _char_enter_mode_left_to_right *****************
  5716 ;; Defined at:
  5717 ;;		line 361 in file "clcd.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;		None
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;		None
  5722 ;; Return value:  Size  Location     Type
  5723 ;;                  1    wreg      void 
  5724 ;; Registers used:
  5725 ;;		wreg, status,2, status,0, cstack
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;Total ram usage:        0 bytes
  5736 ;; Hardware stack levels used:    1
  5737 ;; Hardware stack levels required when called:    7
  5738 ;; This function calls:
  5739 ;;		_write_lcd_cmd
  5740 ;; This function is called by:
  5741 ;;		_display_text
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           	psect	text13
  5746  003C8E                     __ptext13:
  5747                           	opt stack 0
  5748  003C8E                     _char_enter_mode_left_to_right:
  5749                           	opt stack 21
  5750                           
  5751                           ;clcd.c: 365: write_lcd_cmd(0x06);
  5752                           
  5753                           ;incstack = 0
  5754  003C8E  0E06               	movlw	6
  5755  003C90  ECAD  F01D         	call	_write_lcd_cmd
  5756  003C94  0012               	return		;funcret
  5757  003C96                     __end_of_char_enter_mode_left_to_right:
  5758                           	opt stack 0
  5759                           tblptru	equ	0xFF8
  5760                           tblptrh	equ	0xFF7
  5761                           tblptrl	equ	0xFF6
  5762                           tablat	equ	0xFF5
  5763                           prodh	equ	0xFF4
  5764                           prodl	equ	0xFF3
  5765                           intcon	equ	0xFF2
  5766                           postinc0	equ	0xFEE
  5767                           wreg	equ	0xFE8
  5768                           indf1	equ	0xFE7
  5769                           postinc1	equ	0xFE6
  5770                           postdec1	equ	0xFE5
  5771                           fsr1h	equ	0xFE2
  5772                           fsr1l	equ	0xFE1
  5773                           indf2	equ	0xFDF
  5774                           postinc2	equ	0xFDE
  5775                           postdec2	equ	0xFDD
  5776                           fsr2h	equ	0xFDA
  5777                           fsr2l	equ	0xFD9
  5778                           status	equ	0xFD8
  5779                           
  5780 ;; *************** function _copy_data *****************
  5781 ;; Defined at:
  5782 ;;		line 121 in file "clcd.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;  clcd_str_dat    2   51[COMRAM] PTR struct .
  5785 ;;		 -> clcd_display_string_details(1100), 
  5786 ;;  data            2   53[COMRAM] PTR struct .
  5787 ;;		 -> cmd_data(52), 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  col2            1    0        unsigned char 
  5790 ;;  row2            1    0        unsigned char 
  5791 ;;  col1            1    0        unsigned char 
  5792 ;;  row1            1    0        unsigned char 
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5802 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5804 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5805 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5806 ;;Total ram usage:        6 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    8
  5809 ;; This function calls:
  5810 ;;		_printf
  5811 ;;		_strcpy
  5812 ;;		_strlen
  5813 ;; This function is called by:
  5814 ;;		_update_string_data
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text14
  5819  001E5C                     __ptext14:
  5820                           	opt stack 0
  5821  001E5C                     _copy_data:
  5822                           	opt stack 19
  5823                           
  5824                           ;clcd.c: 122: char row1, col1, row2, col2;
  5825                           ;clcd.c: 123: clcd_str_data->uid = data->uid;
  5826                           
  5827                           ;incstack = 0
  5828  001E5C  C036  FFD9         	movff	copy_data@data,fsr2l
  5829  001E60  C037  FFDA         	movff	copy_data@data+1,fsr2h
  5830  001E64  50DF               	movf	indf2,w,c
  5831  001E66  0100               	movlb	0	; () banked
  5832  001E68  6FC6               	movwf	??_copy_data& (0+255),b
  5833  001E6A  6BC7               	clrf	(??_copy_data+1)& (0+255),b
  5834  001E6C  C034  FFD9         	movff	copy_data@clcd_str_data,fsr2l
  5835  001E70  C035  FFDA         	movff	copy_data@clcd_str_data+1,fsr2h
  5836  001E74  C0C6  FFDE         	movff	??_copy_data,postinc2
  5837  001E78  C0C7  FFDD         	movff	??_copy_data+1,postdec2
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;clcd.c: 124: strcpy(clcd_str_data->string, data->data);
  5841  001E7C  0E02               	movlw	2
  5842  001E7E  2434               	addwf	copy_data@clcd_str_data,w,c
  5843  001E80  6E14               	movwf	strcpy@to,c
  5844  001E82  0E00               	movlw	0
  5845  001E84  2035               	addwfc	copy_data@clcd_str_data+1,w,c
  5846  001E86  6E15               	movwf	strcpy@to+1,c
  5847  001E88  0E01               	movlw	1
  5848  001E8A  2436               	addwf	copy_data@data,w,c
  5849  001E8C  6E16               	movwf	strcpy@from,c
  5850  001E8E  0E00               	movlw	0
  5851  001E90  2037               	addwfc	copy_data@data+1,w,c
  5852  001E92  6E17               	movwf	strcpy@from+1,c
  5853  001E94  EC6B  F01B         	call	_strcpy	;wreg free
  5854                           
  5855                           ;clcd.c: 125: clcd_str_data->strlen = strlen(clcd_str_data->string);
  5856  001E98  0E02               	movlw	2
  5857  001E9A  2434               	addwf	copy_data@clcd_str_data,w,c
  5858  001E9C  6E22               	movwf	strlen@s,c
  5859  001E9E  0E00               	movlw	0
  5860  001EA0  2035               	addwfc	copy_data@clcd_str_data+1,w,c
  5861  001EA2  6E23               	movwf	strlen@s+1,c
  5862  001EA4  EC7E  F01A         	call	_strlen	;wreg free
  5863  001EA8  EE20 F02A          	lfsr	2,42
  5864  001EAC  5034               	movf	copy_data@clcd_str_data,w,c
  5865  001EAE  26D9               	addwf	fsr2l,f,c
  5866  001EB0  5035               	movf	copy_data@clcd_str_data+1,w,c
  5867  001EB2  22DA               	addwfc	fsr2h,f,c
  5868  001EB4  50DF               	movf	indf2,w,c
  5869  001EB6  1822               	xorwf	?_strlen,w,c
  5870  001EB8  0B80               	andlw	-128
  5871  001EBA  1822               	xorwf	?_strlen,w,c
  5872  001EBC  6EDF               	movwf	indf2,c
  5873                           
  5874                           ;clcd.c: 126: clcd_str_data->start_row = data->start_row;
  5875  001EBE  EE20 F02A          	lfsr	2,42
  5876  001EC2  5036               	movf	copy_data@data,w,c
  5877  001EC4  26D9               	addwf	fsr2l,f,c
  5878  001EC6  5037               	movf	copy_data@data+1,w,c
  5879  001EC8  22DA               	addwfc	fsr2h,f,c
  5880  001ECA  50DF               	movf	indf2,w,c
  5881  001ECC  0100               	movlb	0	; () banked
  5882  001ECE  6FC6               	movwf	??_copy_data& (0+255),b
  5883  001ED0  EE20 F02B          	lfsr	2,43
  5884  001ED4  5034               	movf	copy_data@clcd_str_data,w,c
  5885  001ED6  26D9               	addwf	fsr2l,f,c
  5886  001ED8  5035               	movf	copy_data@clcd_str_data+1,w,c
  5887  001EDA  22DA               	addwfc	fsr2h,f,c
  5888  001EDC  50DF               	movf	indf2,w,c
  5889  001EDE  19C6               	xorwf	??_copy_data& (0+255),w,b
  5890  001EE0  0B80               	andlw	-128
  5891  001EE2  19C6               	xorwf	??_copy_data& (0+255),w,b
  5892  001EE4  6EDF               	movwf	indf2,c
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;clcd.c: 127: clcd_str_data->start_col = data->start_col;
  5896  001EE6  EE20 F02B          	lfsr	2,43
  5897  001EEA  5036               	movf	copy_data@data,w,c
  5898  001EEC  26D9               	addwf	fsr2l,f,c
  5899  001EEE  5037               	movf	copy_data@data+1,w,c
  5900  001EF0  22DA               	addwfc	fsr2h,f,c
  5901  001EF2  50DF               	movf	indf2,w,c
  5902  001EF4  6FC6               	movwf	??_copy_data& (0+255),b
  5903  001EF6  EE20 F02C          	lfsr	2,44
  5904  001EFA  5034               	movf	copy_data@clcd_str_data,w,c
  5905  001EFC  26D9               	addwf	fsr2l,f,c
  5906  001EFE  5035               	movf	copy_data@clcd_str_data+1,w,c
  5907  001F00  22DA               	addwfc	fsr2h,f,c
  5908  001F02  50DF               	movf	indf2,w,c
  5909  001F04  19C6               	xorwf	??_copy_data& (0+255),w,b
  5910  001F06  0B80               	andlw	-128
  5911  001F08  19C6               	xorwf	??_copy_data& (0+255),w,b
  5912  001F0A  6EDF               	movwf	indf2,c
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;clcd.c: 128: clcd_str_data->end_row = data->end_row;
  5916  001F0C  EE20 F02C          	lfsr	2,44
  5917  001F10  5036               	movf	copy_data@data,w,c
  5918  001F12  26D9               	addwf	fsr2l,f,c
  5919  001F14  5037               	movf	copy_data@data+1,w,c
  5920  001F16  22DA               	addwfc	fsr2h,f,c
  5921  001F18  50DF               	movf	indf2,w,c
  5922  001F1A  6FC6               	movwf	??_copy_data& (0+255),b
  5923  001F1C  EE20 F02E          	lfsr	2,46
  5924  001F20  5034               	movf	copy_data@clcd_str_data,w,c
  5925  001F22  26D9               	addwf	fsr2l,f,c
  5926  001F24  5035               	movf	copy_data@clcd_str_data+1,w,c
  5927  001F26  22DA               	addwfc	fsr2h,f,c
  5928  001F28  50DF               	movf	indf2,w,c
  5929  001F2A  19C6               	xorwf	??_copy_data& (0+255),w,b
  5930  001F2C  0B80               	andlw	-128
  5931  001F2E  19C6               	xorwf	??_copy_data& (0+255),w,b
  5932  001F30  6EDF               	movwf	indf2,c
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;clcd.c: 129: clcd_str_data->end_col = data->end_col;
  5936  001F32  EE20 F02D          	lfsr	2,45
  5937  001F36  5036               	movf	copy_data@data,w,c
  5938  001F38  26D9               	addwf	fsr2l,f,c
  5939  001F3A  5037               	movf	copy_data@data+1,w,c
  5940  001F3C  22DA               	addwfc	fsr2h,f,c
  5941  001F3E  50DF               	movf	indf2,w,c
  5942  001F40  6FC6               	movwf	??_copy_data& (0+255),b
  5943  001F42  EE20 F02F          	lfsr	2,47
  5944  001F46  5034               	movf	copy_data@clcd_str_data,w,c
  5945  001F48  26D9               	addwf	fsr2l,f,c
  5946  001F4A  5035               	movf	copy_data@clcd_str_data+1,w,c
  5947  001F4C  22DA               	addwfc	fsr2h,f,c
  5948  001F4E  50DF               	movf	indf2,w,c
  5949  001F50  19C6               	xorwf	??_copy_data& (0+255),w,b
  5950  001F52  0B80               	andlw	-128
  5951  001F54  19C6               	xorwf	??_copy_data& (0+255),w,b
  5952  001F56  6EDF               	movwf	indf2,c
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;clcd.c: 130: clcd_str_data->start_point = (clcd_str_data->start_row * clcd_config_data.
      +                          clcd_max_col) + clcd_str_data->start_col;
  5956  001F58  EE20 F02C          	lfsr	2,44
  5957  001F5C  5034               	movf	copy_data@clcd_str_data,w,c
  5958  001F5E  26D9               	addwf	fsr2l,f,c
  5959  001F60  5035               	movf	copy_data@clcd_str_data+1,w,c
  5960  001F62  22DA               	addwfc	fsr2h,f,c
  5961  001F64  50DF               	movf	indf2,w,c
  5962  001F66  0B7F               	andlw	127
  5963  001F68  6FC6               	movwf	??_copy_data& (0+255),b
  5964  001F6A  EE20 F02B          	lfsr	2,43
  5965  001F6E  5034               	movf	copy_data@clcd_str_data,w,c
  5966  001F70  26D9               	addwf	fsr2l,f,c
  5967  001F72  5035               	movf	copy_data@clcd_str_data+1,w,c
  5968  001F74  22DA               	addwfc	fsr2h,f,c
  5969  001F76  50DF               	movf	indf2,w,c
  5970  001F78  0B7F               	andlw	127
  5971  001F7A  0246               	mulwf	_clcd_config_data+2,c
  5972  001F7C  50F3               	movf	prodl,w,c
  5973  001F7E  25C6               	addwf	??_copy_data& (0+255),w,b
  5974  001F80  6FC7               	movwf	(??_copy_data+1)& (0+255),b
  5975  001F82  EE20 F02D          	lfsr	2,45
  5976  001F86  5034               	movf	copy_data@clcd_str_data,w,c
  5977  001F88  26D9               	addwf	fsr2l,f,c
  5978  001F8A  5035               	movf	copy_data@clcd_str_data+1,w,c
  5979  001F8C  22DA               	addwfc	fsr2h,f,c
  5980  001F8E  50DF               	movf	indf2,w,c
  5981  001F90  19C7               	xorwf	(??_copy_data+1)& (0+255),w,b
  5982  001F92  0B80               	andlw	-128
  5983  001F94  19C7               	xorwf	(??_copy_data+1)& (0+255),w,b
  5984  001F96  6EDF               	movwf	indf2,c
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;clcd.c: 131: clcd_str_data->end_point = (clcd_str_data->end_row * clcd_config_data.clcd
      +                          _max_col) + clcd_str_data->end_col;
  5988  001F98  EE20 F02F          	lfsr	2,47
  5989  001F9C  5034               	movf	copy_data@clcd_str_data,w,c
  5990  001F9E  26D9               	addwf	fsr2l,f,c
  5991  001FA0  5035               	movf	copy_data@clcd_str_data+1,w,c
  5992  001FA2  22DA               	addwfc	fsr2h,f,c
  5993  001FA4  50DF               	movf	indf2,w,c
  5994  001FA6  0B7F               	andlw	127
  5995  001FA8  6FC6               	movwf	??_copy_data& (0+255),b
  5996  001FAA  EE20 F02E          	lfsr	2,46
  5997  001FAE  5034               	movf	copy_data@clcd_str_data,w,c
  5998  001FB0  26D9               	addwf	fsr2l,f,c
  5999  001FB2  5035               	movf	copy_data@clcd_str_data+1,w,c
  6000  001FB4  22DA               	addwfc	fsr2h,f,c
  6001  001FB6  50DF               	movf	indf2,w,c
  6002  001FB8  0B7F               	andlw	127
  6003  001FBA  0246               	mulwf	_clcd_config_data+2,c
  6004  001FBC  50F3               	movf	prodl,w,c
  6005  001FBE  25C6               	addwf	??_copy_data& (0+255),w,b
  6006  001FC0  6FC7               	movwf	(??_copy_data+1)& (0+255),b
  6007  001FC2  EE20 F030          	lfsr	2,48
  6008  001FC6  5034               	movf	copy_data@clcd_str_data,w,c
  6009  001FC8  26D9               	addwf	fsr2l,f,c
  6010  001FCA  5035               	movf	copy_data@clcd_str_data+1,w,c
  6011  001FCC  22DA               	addwfc	fsr2h,f,c
  6012  001FCE  50DF               	movf	indf2,w,c
  6013  001FD0  19C7               	xorwf	(??_copy_data+1)& (0+255),w,b
  6014  001FD2  0B80               	andlw	-128
  6015  001FD4  19C7               	xorwf	(??_copy_data+1)& (0+255),w,b
  6016  001FD6  6EDF               	movwf	indf2,c
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;clcd.c: 132: clcd_str_data->direction = data->scroll;
  6020  001FD8  EE20 F02F          	lfsr	2,47
  6021  001FDC  5036               	movf	copy_data@data,w,c
  6022  001FDE  26D9               	addwf	fsr2l,f,c
  6023  001FE0  5037               	movf	copy_data@data+1,w,c
  6024  001FE2  22DA               	addwfc	fsr2h,f,c
  6025  001FE4  50DF               	movf	indf2,w,c
  6026  001FE6  6FC6               	movwf	??_copy_data& (0+255),b
  6027  001FE8  EE20 F031          	lfsr	2,49
  6028  001FEC  5034               	movf	copy_data@clcd_str_data,w,c
  6029  001FEE  26D9               	addwf	fsr2l,f,c
  6030  001FF0  5035               	movf	copy_data@clcd_str_data+1,w,c
  6031  001FF2  22DA               	addwfc	fsr2h,f,c
  6032  001FF4  50DF               	movf	indf2,w,c
  6033  001FF6  19C6               	xorwf	??_copy_data& (0+255),w,b
  6034  001FF8  0BF8               	andlw	-8
  6035  001FFA  19C6               	xorwf	??_copy_data& (0+255),w,b
  6036  001FFC  6EDF               	movwf	indf2,c
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;clcd.c: 133: clcd_str_data->display_char_count = (clcd_str_data->end_point - clcd_str_d
      +                          ata->start_point) + 1;
  6040  001FFE  EE20 F032          	lfsr	2,50
  6041  002002  5034               	movf	copy_data@clcd_str_data,w,c
  6042  002004  26D9               	addwf	fsr2l,f,c
  6043  002006  5035               	movf	copy_data@clcd_str_data+1,w,c
  6044  002008  22DA               	addwfc	fsr2h,f,c
  6045  00200A  EE10 F030          	lfsr	1,48
  6046  00200E  5034               	movf	copy_data@clcd_str_data,w,c
  6047  002010  26E1               	addwf	fsr1l,f,c
  6048  002012  5035               	movf	copy_data@clcd_str_data+1,w,c
  6049  002014  22E2               	addwfc	fsr1h,f,c
  6050  002016  50E7               	movf	indf1,w,c
  6051  002018  0B7F               	andlw	127
  6052  00201A  6FC6               	movwf	??_copy_data& (0+255),b
  6053  00201C  EE10 F02D          	lfsr	1,45
  6054  002020  5034               	movf	copy_data@clcd_str_data,w,c
  6055  002022  26E1               	addwf	fsr1l,f,c
  6056  002024  5035               	movf	copy_data@clcd_str_data+1,w,c
  6057  002026  22E2               	addwfc	fsr1h,f,c
  6058  002028  50E7               	movf	indf1,w,c
  6059  00202A  0B7F               	andlw	127
  6060  00202C  0800               	sublw	0
  6061  00202E  25C6               	addwf	??_copy_data& (0+255),w,b
  6062  002030  6FC7               	movwf	(??_copy_data+1)& (0+255),b
  6063  002032  29C7               	incf	(??_copy_data+1)& (0+255),w,b
  6064  002034  6EDF               	movwf	indf2,c
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;clcd.c: 134: printf("display_char_count = %d\r\n", clcd_str_data->display_char_count);
  6068  002036  0E3E               	movlw	low STR_6
  6069  002038  6E22               	movwf	printf@f,c
  6070  00203A  0EFD               	movlw	high STR_6
  6071  00203C  6E23               	movwf	printf@f+1,c
  6072  00203E  EE20 F032          	lfsr	2,50
  6073  002042  5034               	movf	copy_data@clcd_str_data,w,c
  6074  002044  26D9               	addwf	fsr2l,f,c
  6075  002046  5035               	movf	copy_data@clcd_str_data+1,w,c
  6076  002048  22DA               	addwfc	fsr2h,f,c
  6077  00204A  50DF               	movf	indf2,w,c
  6078  00204C  6FC6               	movwf	??_copy_data& (0+255),b
  6079  00204E  51C6               	movf	??_copy_data& (0+255),w,b
  6080  002050  6E24               	movwf	?_printf+2,c
  6081  002052  6A25               	clrf	?_printf+3,c
  6082  002054  EC1B  F012         	call	_printf	;wreg free
  6083  002058  0012               	return		;funcret
  6084  00205A                     __end_of_copy_data:
  6085                           	opt stack 0
  6086                           tblptru	equ	0xFF8
  6087                           tblptrh	equ	0xFF7
  6088                           tblptrl	equ	0xFF6
  6089                           tablat	equ	0xFF5
  6090                           prodh	equ	0xFF4
  6091                           prodl	equ	0xFF3
  6092                           intcon	equ	0xFF2
  6093                           postinc0	equ	0xFEE
  6094                           wreg	equ	0xFE8
  6095                           indf1	equ	0xFE7
  6096                           postinc1	equ	0xFE6
  6097                           postdec1	equ	0xFE5
  6098                           fsr1h	equ	0xFE2
  6099                           fsr1l	equ	0xFE1
  6100                           indf2	equ	0xFDF
  6101                           postinc2	equ	0xFDE
  6102                           postdec2	equ	0xFDD
  6103                           fsr2h	equ	0xFDA
  6104                           fsr2l	equ	0xFD9
  6105                           status	equ	0xFD8
  6106                           
  6107 ;; *************** function _conflict_check *****************
  6108 ;; Defined at:
  6109 ;;		line 137 in file "clcd.c"
  6110 ;; Parameters:    Size  Location     Type
  6111 ;;  exist_uid_id    1    wreg     unsigned char 
  6112 ;;  new_start_po    1   51[COMRAM] unsigned char 
  6113 ;;  new_end_poin    1   52[COMRAM] unsigned char 
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;  exist_uid_id    1    0[BANK0 ] unsigned char 
  6116 ;;  i               2    2[BANK0 ] int 
  6117 ;;  conflict        1    1[BANK0 ] unsigned char 
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  1    wreg      unsigned char 
  6120 ;; Registers used:
  6121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6127 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6128 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6130 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6131 ;;Total ram usage:        9 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    8
  6134 ;; This function calls:
  6135 ;;		___wmul
  6136 ;;		_printf
  6137 ;; This function is called by:
  6138 ;;		_update_string_data
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           	psect	text15
  6143  00196A                     __ptext15:
  6144                           	opt stack 0
  6145  00196A                     _conflict_check:
  6146                           	opt stack 19
  6147                           
  6148                           ;incstack = 0
  6149                           ;conflict_check@exist_uid_idx stored from wreg
  6150  00196A  0100               	movlb	0	; () banked
  6151  00196C  6FC6               	movwf	conflict_check@exist_uid_idx& (0+255),b
  6152                           
  6153                           ;clcd.c: 138: int i = 0;
  6154  00196E  0E00               	movlw	0
  6155  001970  0100               	movlb	0	; () banked
  6156  001972  6FC9               	movwf	(conflict_check@i+1)& (0+255),b
  6157  001974  0E00               	movlw	0
  6158  001976  6FC8               	movwf	conflict_check@i& (0+255),b
  6159                           
  6160                           ;clcd.c: 139: bool conflict = 0;
  6161  001978  0E00               	movlw	0
  6162  00197A  6FC7               	movwf	conflict_check@conflict& (0+255),b
  6163                           
  6164                           ;clcd.c: 141: for (i = 0; i < clcd_config_data.clcd_max_display_string;) {
  6165  00197C  0E00               	movlw	0
  6166  00197E  6FC9               	movwf	(conflict_check@i+1)& (0+255),b
  6167  001980  0E00               	movlw	0
  6168  001982  6FC8               	movwf	conflict_check@i& (0+255),b
  6169  001984  D134               	goto	l454
  6170  001986                     
  6171                           ; BSR set to: 0
  6172                           ;clcd.c: 142: if (exist_uid_idx != i && clcd_display_string_details[i].uid != 0) {
  6173                           
  6174                           ; BSR set to: 0
  6175  001986  51C6               	movf	conflict_check@exist_uid_idx& (0+255),w,b
  6176  001988  6E36               	movwf	??_conflict_check& (0+255),c
  6177  00198A  6A37               	clrf	(??_conflict_check+1)& (0+255),c
  6178  00198C  51C8               	movf	conflict_check@i& (0+255),w,b
  6179  00198E  1836               	xorwf	??_conflict_check,w,c
  6180  001990  E104               	bnz	u6570
  6181  001992  51C9               	movf	(conflict_check@i+1)& (0+255),w,b
  6182  001994  1837               	xorwf	??_conflict_check+1,w,c
  6183  001996  B4D8               	btfsc	status,2,c
  6184  001998  D127               	goto	l456
  6185  00199A                     u6570:
  6186                           
  6187                           ; BSR set to: 0
  6188  00199A  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6189  00199E  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6190  0019A2  0E00               	movlw	0
  6191  0019A4  6E1F               	movwf	___wmul@multiplicand+1,c
  6192  0019A6  0E37               	movlw	55
  6193  0019A8  6E1E               	movwf	___wmul@multiplicand,c
  6194  0019AA  EC1D  F01D         	call	___wmul	;wreg free
  6195  0019AE  0E96               	movlw	low _clcd_display_string_details
  6196  0019B0  241C               	addwf	?___wmul,w,c
  6197  0019B2  6ED9               	movwf	fsr2l,c
  6198  0019B4  0E02               	movlw	high _clcd_display_string_details
  6199  0019B6  201D               	addwfc	?___wmul+1,w,c
  6200  0019B8  6EDA               	movwf	fsr2h,c
  6201  0019BA  50DE               	movf	postinc2,w,c
  6202  0019BC  10DE               	iorwf	postinc2,w,c
  6203  0019BE  B4D8               	btfsc	status,2,c
  6204  0019C0  D113               	goto	l456
  6205                           
  6206                           ;clcd.c: 143: if (new_start_point >= clcd_display_string_details[i].start_point && new_s
      +                          tart_point <= clcd_display_string_details[i].end_point) {
  6207  0019C2  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6208  0019C6  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6209  0019CA  0E00               	movlw	0
  6210  0019CC  6E1F               	movwf	___wmul@multiplicand+1,c
  6211  0019CE  0E37               	movlw	55
  6212  0019D0  6E1E               	movwf	___wmul@multiplicand,c
  6213  0019D2  EC1D  F01D         	call	___wmul	;wreg free
  6214  0019D6  0E2D               	movlw	45
  6215  0019D8  261C               	addwf	?___wmul,f,c
  6216  0019DA  0E00               	movlw	0
  6217  0019DC  221D               	addwfc	?___wmul+1,f,c
  6218  0019DE  0E96               	movlw	low _clcd_display_string_details
  6219  0019E0  241C               	addwf	?___wmul,w,c
  6220  0019E2  6ED9               	movwf	fsr2l,c
  6221  0019E4  0E02               	movlw	high _clcd_display_string_details
  6222  0019E6  201D               	addwfc	?___wmul+1,w,c
  6223  0019E8  6EDA               	movwf	fsr2h,c
  6224  0019EA  50DF               	movf	223,w,c
  6225  0019EC  0B7F               	andlw	127
  6226  0019EE  6E36               	movwf	??_conflict_check& (0+255),c
  6227  0019F0  5036               	movf	??_conflict_check,w,c
  6228  0019F2  5C34               	subwf	conflict_check@new_start_point,w,c
  6229  0019F4  A0D8               	btfss	status,0,c
  6230  0019F6  D044               	goto	l453
  6231  0019F8  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6232  0019FC  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6233  001A00  0E00               	movlw	0
  6234  001A02  6E1F               	movwf	___wmul@multiplicand+1,c
  6235  001A04  0E37               	movlw	55
  6236  001A06  6E1E               	movwf	___wmul@multiplicand,c
  6237  001A08  EC1D  F01D         	call	___wmul	;wreg free
  6238  001A0C  0E30               	movlw	48
  6239  001A0E  261C               	addwf	?___wmul,f,c
  6240  001A10  0E00               	movlw	0
  6241  001A12  221D               	addwfc	?___wmul+1,f,c
  6242  001A14  0E96               	movlw	low _clcd_display_string_details
  6243  001A16  241C               	addwf	?___wmul,w,c
  6244  001A18  6ED9               	movwf	fsr2l,c
  6245  001A1A  0E02               	movlw	high _clcd_display_string_details
  6246  001A1C  201D               	addwfc	?___wmul+1,w,c
  6247  001A1E  6EDA               	movwf	fsr2h,c
  6248  001A20  50DF               	movf	223,w,c
  6249  001A22  0B7F               	andlw	127
  6250  001A24  6E36               	movwf	??_conflict_check& (0+255),c
  6251  001A26  5034               	movf	conflict_check@new_start_point,w,c
  6252  001A28  5C36               	subwf	??_conflict_check,w,c
  6253  001A2A  A0D8               	btfss	status,0,c
  6254  001A2C  D029               	goto	l453
  6255                           
  6256                           ;clcd.c: 144: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6257  001A2E  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6258  001A32  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6259  001A36  0E00               	movlw	0
  6260  001A38  6E1F               	movwf	___wmul@multiplicand+1,c
  6261  001A3A  0E37               	movlw	55
  6262  001A3C  6E1E               	movwf	___wmul@multiplicand,c
  6263  001A3E  EC1D  F01D         	call	___wmul	;wreg free
  6264  001A42  0E96               	movlw	low _clcd_display_string_details
  6265  001A44  241C               	addwf	?___wmul,w,c
  6266  001A46  6ED9               	movwf	fsr2l,c
  6267  001A48  0E02               	movlw	high _clcd_display_string_details
  6268  001A4A  201D               	addwfc	?___wmul+1,w,c
  6269  001A4C  6EDA               	movwf	fsr2h,c
  6270  001A4E  503B               	movf	_conflict_data_count,w,c
  6271  001A50  0D02               	mullw	2
  6272  001A52  0E50               	movlw	low _conflict_arr
  6273  001A54  24F3               	addwf	prodl,w,c
  6274  001A56  6EE1               	movwf	fsr1l,c
  6275  001A58  0E01               	movlw	high _conflict_arr
  6276  001A5A  20F4               	addwfc	prodh,w,c
  6277  001A5C  6EE2               	movwf	fsr1h,c
  6278  001A5E  CFDE FFE6          	movff	postinc2,postinc1
  6279  001A62  CFDD FFE5          	movff	postdec2,postdec1
  6280  001A66  2A3B               	incf	_conflict_data_count,f,c
  6281                           
  6282                           ;clcd.c: 145: i++;
  6283  001A68  0100               	movlb	0	; () banked
  6284  001A6A  4BC8               	infsnz	conflict_check@i& (0+255),f,b
  6285  001A6C  2BC9               	incf	(conflict_check@i+1)& (0+255),f,b
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;clcd.c: 146: printf("ex_sp <= new_sp <=ex_ep\r\n");
  6289  001A6E  0E72               	movlw	low STR_7
  6290  001A70  6E22               	movwf	printf@f,c
  6291  001A72  0EFD               	movlw	high STR_7
  6292  001A74  6E23               	movwf	printf@f+1,c
  6293  001A76  EC1B  F012         	call	_printf	;wreg free
  6294                           
  6295                           ;clcd.c: 147: conflict = 1;
  6296  001A7A  0E01               	movlw	1
  6297  001A7C  0100               	movlb	0	; () banked
  6298  001A7E  D05B               	goto	L3
  6299  001A80                     l453:
  6300                           
  6301                           ;clcd.c: 149: }
  6302                           ;clcd.c: 150: if (new_end_point >= clcd_display_string_details[i].start_point && new_end
      +                          _point <= clcd_display_string_details[i].end_point) {
  6303                           
  6304                           ; BSR set to: 0
  6305  001A80  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6306  001A84  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6307  001A88  0E00               	movlw	0
  6308  001A8A  6E1F               	movwf	___wmul@multiplicand+1,c
  6309  001A8C  0E37               	movlw	55
  6310  001A8E  6E1E               	movwf	___wmul@multiplicand,c
  6311  001A90  EC1D  F01D         	call	___wmul	;wreg free
  6312  001A94  0E2D               	movlw	45
  6313  001A96  261C               	addwf	?___wmul,f,c
  6314  001A98  0E00               	movlw	0
  6315  001A9A  221D               	addwfc	?___wmul+1,f,c
  6316  001A9C  0E96               	movlw	low _clcd_display_string_details
  6317  001A9E  241C               	addwf	?___wmul,w,c
  6318  001AA0  6ED9               	movwf	fsr2l,c
  6319  001AA2  0E02               	movlw	high _clcd_display_string_details
  6320  001AA4  201D               	addwfc	?___wmul+1,w,c
  6321  001AA6  6EDA               	movwf	fsr2h,c
  6322  001AA8  50DF               	movf	223,w,c
  6323  001AAA  0B7F               	andlw	127
  6324  001AAC  6E36               	movwf	??_conflict_check& (0+255),c
  6325  001AAE  5036               	movf	??_conflict_check,w,c
  6326  001AB0  5C35               	subwf	conflict_check@new_end_point,w,c
  6327  001AB2  A0D8               	btfss	status,0,c
  6328  001AB4  D042               	goto	l455
  6329  001AB6  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6330  001ABA  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6331  001ABE  0E00               	movlw	0
  6332  001AC0  6E1F               	movwf	___wmul@multiplicand+1,c
  6333  001AC2  0E37               	movlw	55
  6334  001AC4  6E1E               	movwf	___wmul@multiplicand,c
  6335  001AC6  EC1D  F01D         	call	___wmul	;wreg free
  6336  001ACA  0E30               	movlw	48
  6337  001ACC  261C               	addwf	?___wmul,f,c
  6338  001ACE  0E00               	movlw	0
  6339  001AD0  221D               	addwfc	?___wmul+1,f,c
  6340  001AD2  0E96               	movlw	low _clcd_display_string_details
  6341  001AD4  241C               	addwf	?___wmul,w,c
  6342  001AD6  6ED9               	movwf	fsr2l,c
  6343  001AD8  0E02               	movlw	high _clcd_display_string_details
  6344  001ADA  201D               	addwfc	?___wmul+1,w,c
  6345  001ADC  6EDA               	movwf	fsr2h,c
  6346  001ADE  50DF               	movf	223,w,c
  6347  001AE0  0B7F               	andlw	127
  6348  001AE2  6E36               	movwf	??_conflict_check& (0+255),c
  6349  001AE4  5035               	movf	conflict_check@new_end_point,w,c
  6350  001AE6  5C36               	subwf	??_conflict_check,w,c
  6351  001AE8  A0D8               	btfss	status,0,c
  6352  001AEA  D027               	goto	l455
  6353                           
  6354                           ;clcd.c: 151: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6355  001AEC  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6356  001AF0  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6357  001AF4  0E00               	movlw	0
  6358  001AF6  6E1F               	movwf	___wmul@multiplicand+1,c
  6359  001AF8  0E37               	movlw	55
  6360  001AFA  6E1E               	movwf	___wmul@multiplicand,c
  6361  001AFC  EC1D  F01D         	call	___wmul	;wreg free
  6362  001B00  0E96               	movlw	low _clcd_display_string_details
  6363  001B02  241C               	addwf	?___wmul,w,c
  6364  001B04  6ED9               	movwf	fsr2l,c
  6365  001B06  0E02               	movlw	high _clcd_display_string_details
  6366  001B08  201D               	addwfc	?___wmul+1,w,c
  6367  001B0A  6EDA               	movwf	fsr2h,c
  6368  001B0C  503B               	movf	_conflict_data_count,w,c
  6369  001B0E  0D02               	mullw	2
  6370  001B10  0E50               	movlw	low _conflict_arr
  6371  001B12  24F3               	addwf	prodl,w,c
  6372  001B14  6EE1               	movwf	fsr1l,c
  6373  001B16  0E01               	movlw	high _conflict_arr
  6374  001B18  20F4               	addwfc	prodh,w,c
  6375  001B1A  6EE2               	movwf	fsr1h,c
  6376  001B1C  CFDE FFE6          	movff	postinc2,postinc1
  6377  001B20  CFDD FFE5          	movff	postdec2,postdec1
  6378  001B24  2A3B               	incf	_conflict_data_count,f,c
  6379                           
  6380                           ;clcd.c: 152: printf("ex_sp <= new_ep <=ex_ep\r\n");
  6381  001B26  0E58               	movlw	low STR_8
  6382  001B28  6E22               	movwf	printf@f,c
  6383  001B2A  0EFD               	movlw	high STR_8
  6384  001B2C  6E23               	movwf	printf@f+1,c
  6385  001B2E  EC1B  F012         	call	_printf	;wreg free
  6386  001B32  D056               	goto	l6696
  6387  001B34                     l6686:
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;clcd.c: 154: conflict = 1;
  6391  001B34  0E01               	movlw	1
  6392  001B36                     L3:
  6393  001B36  6FC7               	movwf	conflict_check@conflict& (0+255),b
  6394                           
  6395                           ;clcd.c: 155: continue;
  6396  001B38  D05A               	goto	l454
  6397  001B3A                     l455:
  6398                           
  6399                           ;clcd.c: 156: }
  6400                           ;clcd.c: 157: if (new_start_point <= clcd_display_string_details[i].start_point && new_e
      +                          nd_point >= clcd_display_string_details[i].end_point) {
  6401                           
  6402                           ; BSR set to: 0
  6403  001B3A  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6404  001B3E  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6405  001B42  0E00               	movlw	0
  6406  001B44  6E1F               	movwf	___wmul@multiplicand+1,c
  6407  001B46  0E37               	movlw	55
  6408  001B48  6E1E               	movwf	___wmul@multiplicand,c
  6409  001B4A  EC1D  F01D         	call	___wmul	;wreg free
  6410  001B4E  0E2D               	movlw	45
  6411  001B50  261C               	addwf	?___wmul,f,c
  6412  001B52  0E00               	movlw	0
  6413  001B54  221D               	addwfc	?___wmul+1,f,c
  6414  001B56  0E96               	movlw	low _clcd_display_string_details
  6415  001B58  241C               	addwf	?___wmul,w,c
  6416  001B5A  6ED9               	movwf	fsr2l,c
  6417  001B5C  0E02               	movlw	high _clcd_display_string_details
  6418  001B5E  201D               	addwfc	?___wmul+1,w,c
  6419  001B60  6EDA               	movwf	fsr2h,c
  6420  001B62  50DF               	movf	223,w,c
  6421  001B64  0B7F               	andlw	127
  6422  001B66  6E36               	movwf	??_conflict_check& (0+255),c
  6423  001B68  5034               	movf	conflict_check@new_start_point,w,c
  6424  001B6A  5C36               	subwf	??_conflict_check,w,c
  6425  001B6C  A0D8               	btfss	status,0,c
  6426  001B6E  D03C               	goto	l456
  6427  001B70  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6428  001B74  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6429  001B78  0E00               	movlw	0
  6430  001B7A  6E1F               	movwf	___wmul@multiplicand+1,c
  6431  001B7C  0E37               	movlw	55
  6432  001B7E  6E1E               	movwf	___wmul@multiplicand,c
  6433  001B80  EC1D  F01D         	call	___wmul	;wreg free
  6434  001B84  0E30               	movlw	48
  6435  001B86  261C               	addwf	?___wmul,f,c
  6436  001B88  0E00               	movlw	0
  6437  001B8A  221D               	addwfc	?___wmul+1,f,c
  6438  001B8C  0E96               	movlw	low _clcd_display_string_details
  6439  001B8E  241C               	addwf	?___wmul,w,c
  6440  001B90  6ED9               	movwf	fsr2l,c
  6441  001B92  0E02               	movlw	high _clcd_display_string_details
  6442  001B94  201D               	addwfc	?___wmul+1,w,c
  6443  001B96  6EDA               	movwf	fsr2h,c
  6444  001B98  50DF               	movf	223,w,c
  6445  001B9A  0B7F               	andlw	127
  6446  001B9C  6E36               	movwf	??_conflict_check& (0+255),c
  6447  001B9E  5036               	movf	??_conflict_check,w,c
  6448  001BA0  5C35               	subwf	conflict_check@new_end_point,w,c
  6449  001BA2  A0D8               	btfss	status,0,c
  6450  001BA4  D021               	goto	l456
  6451                           
  6452                           ;clcd.c: 158: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6453  001BA6  C0C8  F01C         	movff	conflict_check@i,___wmul@multiplier
  6454  001BAA  C0C9  F01D         	movff	conflict_check@i+1,___wmul@multiplier+1
  6455  001BAE  0E00               	movlw	0
  6456  001BB0  6E1F               	movwf	___wmul@multiplicand+1,c
  6457  001BB2  0E37               	movlw	55
  6458  001BB4  6E1E               	movwf	___wmul@multiplicand,c
  6459  001BB6  EC1D  F01D         	call	___wmul	;wreg free
  6460  001BBA  0E96               	movlw	low _clcd_display_string_details
  6461  001BBC  241C               	addwf	?___wmul,w,c
  6462  001BBE  6ED9               	movwf	fsr2l,c
  6463  001BC0  0E02               	movlw	high _clcd_display_string_details
  6464  001BC2  201D               	addwfc	?___wmul+1,w,c
  6465  001BC4  6EDA               	movwf	fsr2h,c
  6466  001BC6  503B               	movf	_conflict_data_count,w,c
  6467  001BC8  0D02               	mullw	2
  6468  001BCA  0E50               	movlw	low _conflict_arr
  6469  001BCC  24F3               	addwf	prodl,w,c
  6470  001BCE  6EE1               	movwf	fsr1l,c
  6471  001BD0  0E01               	movlw	high _conflict_arr
  6472  001BD2  20F4               	addwfc	prodh,w,c
  6473  001BD4  6EE2               	movwf	fsr1h,c
  6474  001BD6  CFDE FFE6          	movff	postinc2,postinc1
  6475  001BDA  CFDD FFE5          	movff	postdec2,postdec1
  6476  001BDE  2A3B               	incf	_conflict_data_count,f,c
  6477  001BE0                     l6696:
  6478                           
  6479                           ;clcd.c: 159: i++;
  6480  001BE0  0100               	movlb	0	; () banked
  6481  001BE2  4BC8               	infsnz	conflict_check@i& (0+255),f,b
  6482  001BE4  2BC9               	incf	(conflict_check@i+1)& (0+255),f,b
  6483  001BE6  D7A6               	goto	l6686
  6484  001BE8                     l456:
  6485                           
  6486                           ;clcd.c: 162: }
  6487                           ;clcd.c: 163: }
  6488                           ;clcd.c: 164: i++;
  6489                           
  6490                           ; BSR set to: 0
  6491                           
  6492                           ; BSR set to: 0
  6493  001BE8  0100               	movlb	0	; () banked
  6494  001BEA  4BC8               	infsnz	conflict_check@i& (0+255),f,b
  6495  001BEC  2BC9               	incf	(conflict_check@i+1)& (0+255),f,b
  6496  001BEE                     l454:
  6497                           
  6498                           ; BSR set to: 0
  6499                           
  6500                           ; BSR set to: 0
  6501                           
  6502                           ; BSR set to: 0
  6503  001BEE  5048               	movf	_clcd_config_data+4,w,c
  6504  001BF0  6E36               	movwf	??_conflict_check& (0+255),c
  6505  001BF2  6A37               	clrf	(??_conflict_check+1)& (0+255),c
  6506  001BF4  5036               	movf	??_conflict_check,w,c
  6507  001BF6  5DC8               	subwf	conflict_check@i& (0+255),w,b
  6508  001BF8  51C9               	movf	(conflict_check@i+1)& (0+255),w,b
  6509  001BFA  0A80               	xorlw	128
  6510  001BFC  6E38               	movwf	(??_conflict_check+2)& (0+255),c
  6511  001BFE  5037               	movf	??_conflict_check+1,w,c
  6512  001C00  0A80               	xorlw	128
  6513  001C02  5838               	subwfb	(??_conflict_check+2)& (0+255),w,c
  6514  001C04  A0D8               	btfss	status,0,c
  6515  001C06  D6BF               	goto	l451
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;clcd.c: 165: }
  6519                           ;clcd.c: 173: return conflict;
  6520                           
  6521                           ; BSR set to: 0
  6522  001C08  51C7               	movf	conflict_check@conflict& (0+255),w,b
  6523  001C0A  0012               	return	
  6524  001C0C                     __end_of_conflict_check:
  6525                           	opt stack 0
  6526                           tblptru	equ	0xFF8
  6527                           tblptrh	equ	0xFF7
  6528                           tblptrl	equ	0xFF6
  6529                           tablat	equ	0xFF5
  6530                           prodh	equ	0xFF4
  6531                           prodl	equ	0xFF3
  6532                           intcon	equ	0xFF2
  6533                           postinc0	equ	0xFEE
  6534                           wreg	equ	0xFE8
  6535                           indf1	equ	0xFE7
  6536                           postinc1	equ	0xFE6
  6537                           postdec1	equ	0xFE5
  6538                           fsr1h	equ	0xFE2
  6539                           fsr1l	equ	0xFE1
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           fsr2h	equ	0xFDA
  6544                           fsr2l	equ	0xFD9
  6545                           status	equ	0xFD8
  6546                           
  6547 ;; *************** function _strcmp *****************
  6548 ;; Defined at:
  6549 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strcmp.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;  s1              2   19[COMRAM] PTR const unsigned char 
  6552 ;;		 -> uart_str(150), CMD(15), 
  6553 ;;  s2              2   21[COMRAM] PTR const unsigned char 
  6554 ;;		 -> STR_136(5), STR_122(7), STR_119(7), STR_116(8), 
  6555 ;;		 -> STR_113(6), STR_108(6), STR_105(5), STR_101(4), 
  6556 ;;		 -> STR_97(4), STR_93(6), STR_91(4), 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  r               1   24[COMRAM] char 
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  2   19[COMRAM] int 
  6561 ;; Registers used:
  6562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6568 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6570 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6571 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;Total ram usage:        6 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    5
  6575 ;; This function calls:
  6576 ;;		Nothing
  6577 ;; This function is called by:
  6578 ;;		_reply_to_host
  6579 ;;		_cmd_consol_task
  6580 ;; This function uses a non-reentrant model
  6581 ;;
  6582                           
  6583                           	psect	text16
  6584  003642                     __ptext16:
  6585                           	opt stack 0
  6586  003642                     _strcmp:
  6587                           	opt stack 24
  6588                           
  6589                           ; BSR set to: 0
  6590                           ;incstack = 0
  6591  003642  D004               	goto	l1694
  6592  003644  4A14               	infsnz	strcmp@s1,f,c
  6593  003646  2A15               	incf	strcmp@s1+1,f,c
  6594  003648  4A16               	infsnz	strcmp@s2,f,c
  6595  00364A  2A17               	incf	strcmp@s2+1,f,c
  6596  00364C                     l1694:
  6597  00364C  C014  FFD9         	movff	strcmp@s1,fsr2l
  6598  003650  C015  FFDA         	movff	strcmp@s1+1,fsr2h
  6599  003654  50DF               	movf	indf2,w,c
  6600  003656  6E18               	movwf	??_strcmp& (0+255),c
  6601  003658  C016  FFF6         	movff	strcmp@s2,tblptrl
  6602  00365C  C017  FFF7         	movff	strcmp@s2+1,tblptrh
  6603  003660                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6604  003660  6AF8               	clrf	tblptru,c
  6605  003662                     	endif
  6606  003662                     	if	0	;tblptru may be non-zero
  6607  003662                     	endif
  6608  003662  0008               	tblrd		*
  6609  003664  50F5               	movf	tablat,w,c
  6610  003666  0800               	sublw	0
  6611  003668  2418               	addwf	??_strcmp,w,c
  6612  00366A  6E19               	movwf	strcmp@r,c
  6613  00366C  5019               	movf	strcmp@r,w,c
  6614  00366E  A4D8               	btfss	status,2,c
  6615  003670  D007               	goto	u4680
  6616  003672  C014  FFD9         	movff	strcmp@s1,fsr2l
  6617  003676  C015  FFDA         	movff	strcmp@s1+1,fsr2h
  6618  00367A  50DF               	movf	indf2,w,c
  6619  00367C  A4D8               	btfss	status,2,c
  6620  00367E  D7E2               	goto	l1695
  6621  003680                     u4680:
  6622  003680  5019               	movf	strcmp@r,w,c
  6623  003682  6E14               	movwf	?_strcmp,c
  6624  003684  6A15               	clrf	?_strcmp+1,c
  6625  003686  BE14               	btfsc	?_strcmp,7,c
  6626  003688  0615               	decf	?_strcmp+1,f,c
  6627  00368A  0012               	return	
  6628  00368C                     __end_of_strcmp:
  6629                           	opt stack 0
  6630                           tblptru	equ	0xFF8
  6631                           tblptrh	equ	0xFF7
  6632                           tblptrl	equ	0xFF6
  6633                           tablat	equ	0xFF5
  6634                           prodh	equ	0xFF4
  6635                           prodl	equ	0xFF3
  6636                           intcon	equ	0xFF2
  6637                           postinc0	equ	0xFEE
  6638                           wreg	equ	0xFE8
  6639                           indf1	equ	0xFE7
  6640                           postinc1	equ	0xFE6
  6641                           postdec1	equ	0xFE5
  6642                           fsr1h	equ	0xFE2
  6643                           fsr1l	equ	0xFE1
  6644                           indf2	equ	0xFDF
  6645                           postinc2	equ	0xFDE
  6646                           postdec2	equ	0xFDD
  6647                           fsr2h	equ	0xFDA
  6648                           fsr2l	equ	0xFD9
  6649                           status	equ	0xFD8
  6650                           
  6651 ;; *************** function _puts *****************
  6652 ;; Defined at:
  6653 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\puts.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;  s               2   23[COMRAM] PTR const unsigned char 
  6656 ;;		 -> STR_138(12), STR_137(12), STR_92(5), 
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;		None
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  2   23[COMRAM] int 
  6661 ;; Registers used:
  6662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6668 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6671 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6672 ;;Total ram usage:        2 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    8
  6675 ;; This function calls:
  6676 ;;		_cputs
  6677 ;;		_putch
  6678 ;; This function is called by:
  6679 ;;		_reply_to_host
  6680 ;;		_cmd_consol_task
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text17
  6685  003BA8                     __ptext17:
  6686                           	opt stack 0
  6687  003BA8                     _puts:
  6688                           	opt stack 20
  6689                           
  6690                           ;incstack = 0
  6691  003BA8  C018  F016         	movff	puts@s,cputs@s
  6692  003BAC  C019  F017         	movff	puts@s+1,cputs@s+1
  6693  003BB0  ECDB  F01C         	call	_cputs	;wreg free
  6694  003BB4  0E0A               	movlw	10
  6695  003BB6  EC3D  F01E         	call	_putch
  6696  003BBA  0012               	return		;funcret
  6697  003BBC                     __end_of_puts:
  6698                           	opt stack 0
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           postinc0	equ	0xFEE
  6707                           wreg	equ	0xFE8
  6708                           indf1	equ	0xFE7
  6709                           postinc1	equ	0xFE6
  6710                           postdec1	equ	0xFE5
  6711                           fsr1h	equ	0xFE2
  6712                           fsr1l	equ	0xFE1
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           fsr2h	equ	0xFDA
  6717                           fsr2l	equ	0xFD9
  6718                           status	equ	0xFD8
  6719                           
  6720 ;; *************** function _cputs *****************
  6721 ;; Defined at:
  6722 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\cputs.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  s               2   21[COMRAM] PTR const unsigned char 
  6725 ;;		 -> STR_138(12), STR_137(12), STR_92(5), 
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      void 
  6730 ;; Registers used:
  6731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6737 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;Total ram usage:        2 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    7
  6744 ;; This function calls:
  6745 ;;		_putch
  6746 ;; This function is called by:
  6747 ;;		_puts
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           	psect	text18
  6752  0039B6                     __ptext18:
  6753                           	opt stack 0
  6754  0039B6                     _cputs:
  6755                           	opt stack 20
  6756                           
  6757                           ;incstack = 0
  6758  0039B6  D00B               	goto	l1774
  6759  0039B8  C016  FFF6         	movff	cputs@s,tblptrl
  6760  0039BC  C017  FFF7         	movff	cputs@s+1,tblptrh
  6761  0039C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6762  0039C0  6AF8               	clrf	tblptru,c
  6763  0039C2                     	endif
  6764  0039C2                     	if	0	;tblptru may be non-zero
  6765  0039C2                     	endif
  6766  0039C2  0008               	tblrd		*
  6767  0039C4  50F5               	movf	tablat,w,c
  6768  0039C6  EC3D  F01E         	call	_putch
  6769  0039CA  4A16               	infsnz	cputs@s,f,c
  6770  0039CC  2A17               	incf	cputs@s+1,f,c
  6771  0039CE                     l1774:
  6772  0039CE  C016  FFF6         	movff	cputs@s,tblptrl
  6773  0039D2  C017  FFF7         	movff	cputs@s+1,tblptrh
  6774  0039D6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6775  0039D6  6AF8               	clrf	tblptru,c
  6776  0039D8                     	endif
  6777  0039D8                     	if	0	;tblptru may be non-zero
  6778  0039D8                     	endif
  6779  0039D8  0008               	tblrd		*
  6780  0039DA  50F5               	movf	tablat,w,c
  6781  0039DC  0900               	iorlw	0
  6782  0039DE  B4D8               	btfsc	status,2,c
  6783  0039E0  0012               	return	
  6784  0039E2  D7EA               	goto	l1775
  6785  0039E4                     __end_of_cputs:
  6786                           	opt stack 0
  6787                           tblptru	equ	0xFF8
  6788                           tblptrh	equ	0xFF7
  6789                           tblptrl	equ	0xFF6
  6790                           tablat	equ	0xFF5
  6791                           prodh	equ	0xFF4
  6792                           prodl	equ	0xFF3
  6793                           intcon	equ	0xFF2
  6794                           postinc0	equ	0xFEE
  6795                           wreg	equ	0xFE8
  6796                           indf1	equ	0xFE7
  6797                           postinc1	equ	0xFE6
  6798                           postdec1	equ	0xFE5
  6799                           fsr1h	equ	0xFE2
  6800                           fsr1l	equ	0xFE1
  6801                           indf2	equ	0xFDF
  6802                           postinc2	equ	0xFDE
  6803                           postdec2	equ	0xFDD
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8
  6807                           
  6808 ;; *************** function _min_uid_range *****************
  6809 ;; Defined at:
  6810 ;;		line 89 in file "clcd.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;		None
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;		None
  6815 ;; Return value:  Size  Location     Type
  6816 ;;                  1    wreg      unsigned char 
  6817 ;; Registers used:
  6818 ;;		wreg, status,2
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6828 ;;Total ram usage:        0 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    5
  6831 ;; This function calls:
  6832 ;;		Nothing
  6833 ;; This function is called by:
  6834 ;;		_reply_to_host
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           
  6838                           	psect	text19
  6839  003BEE                     __ptext19:
  6840                           	opt stack 0
  6841  003BEE                     _min_uid_range:
  6842                           	opt stack 23
  6843                           
  6844                           ;clcd.c: 90: if (clcd_config_data.init_done == 0)
  6845                           
  6846                           ;incstack = 0
  6847  003BEE  5044               	movf	_clcd_config_data,w,c
  6848  003BF0  A4D8               	btfss	status,2,c
  6849  003BF2  D002               	goto	l424
  6850                           
  6851                           ;clcd.c: 91: return 0;
  6852  003BF4  0E00               	movlw	0
  6853  003BF6  0012               	return	
  6854  003BF8                     l424:
  6855                           
  6856                           ;clcd.c: 92: else
  6857                           ;clcd.c: 93: return 'A';
  6858  003BF8  0E41               	movlw	65
  6859  003BFA  0012               	return	
  6860  003BFC                     __end_of_min_uid_range:
  6861                           	opt stack 0
  6862                           tblptru	equ	0xFF8
  6863                           tblptrh	equ	0xFF7
  6864                           tblptrl	equ	0xFF6
  6865                           tablat	equ	0xFF5
  6866                           prodh	equ	0xFF4
  6867                           prodl	equ	0xFF3
  6868                           intcon	equ	0xFF2
  6869                           postinc0	equ	0xFEE
  6870                           wreg	equ	0xFE8
  6871                           indf1	equ	0xFE7
  6872                           postinc1	equ	0xFE6
  6873                           postdec1	equ	0xFE5
  6874                           fsr1h	equ	0xFE2
  6875                           fsr1l	equ	0xFE1
  6876                           indf2	equ	0xFDF
  6877                           postinc2	equ	0xFDE
  6878                           postdec2	equ	0xFDD
  6879                           fsr2h	equ	0xFDA
  6880                           fsr2l	equ	0xFD9
  6881                           status	equ	0xFD8
  6882                           
  6883 ;; *************** function _max_uid_range *****************
  6884 ;; Defined at:
  6885 ;;		line 96 in file "clcd.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;		None
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;		None
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  1    wreg      unsigned char 
  6892 ;; Registers used:
  6893 ;;		wreg, status,2, status,0
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;Total ram usage:        0 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; Hardware stack levels required when called:    5
  6906 ;; This function calls:
  6907 ;;		Nothing
  6908 ;; This function is called by:
  6909 ;;		_reply_to_host
  6910 ;; This function uses a non-reentrant model
  6911 ;;
  6912                           
  6913                           	psect	text20
  6914  003BFC                     __ptext20:
  6915                           	opt stack 0
  6916  003BFC                     _max_uid_range:
  6917                           	opt stack 23
  6918                           
  6919                           ;clcd.c: 97: if (clcd_config_data.init_done == 0)
  6920                           
  6921                           ;incstack = 0
  6922  003BFC  5044               	movf	_clcd_config_data,w,c
  6923  003BFE  A4D8               	btfss	status,2,c
  6924  003C00  D002               	goto	l429
  6925                           
  6926                           ;clcd.c: 98: return 0;
  6927  003C02  0E00               	movlw	0
  6928  003C04  0012               	return	
  6929  003C06                     l429:
  6930                           
  6931                           ;clcd.c: 99: else
  6932                           ;clcd.c: 100: return clcd_config_data.uid_range - 1;
  6933  003C06  0447               	decf	_clcd_config_data+3,w,c
  6934  003C08  0012               	return	
  6935  003C0A                     __end_of_max_uid_range:
  6936                           	opt stack 0
  6937                           tblptru	equ	0xFF8
  6938                           tblptrh	equ	0xFF7
  6939                           tblptrl	equ	0xFF6
  6940                           tablat	equ	0xFF5
  6941                           prodh	equ	0xFF4
  6942                           prodl	equ	0xFF3
  6943                           intcon	equ	0xFF2
  6944                           postinc0	equ	0xFEE
  6945                           wreg	equ	0xFE8
  6946                           indf1	equ	0xFE7
  6947                           postinc1	equ	0xFE6
  6948                           postdec1	equ	0xFE5
  6949                           fsr1h	equ	0xFE2
  6950                           fsr1l	equ	0xFE1
  6951                           indf2	equ	0xFDF
  6952                           postinc2	equ	0xFDE
  6953                           postdec2	equ	0xFDD
  6954                           fsr2h	equ	0xFDA
  6955                           fsr2l	equ	0xFD9
  6956                           status	equ	0xFD8
  6957                           
  6958 ;; *************** function _max_display_support *****************
  6959 ;; Defined at:
  6960 ;;		line 103 in file "clcd.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;		None
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;		None
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  2   19[COMRAM] PTR unsigned char 
  6967 ;; Registers used:
  6968 ;;		wreg, status,2, status,0
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;Total ram usage:        2 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; Hardware stack levels required when called:    5
  6981 ;; This function calls:
  6982 ;;		Nothing
  6983 ;; This function is called by:
  6984 ;;		_reply_to_host
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           	psect	text21
  6989  003C66                     __ptext21:
  6990                           	opt stack 0
  6991  003C66                     _max_display_support:
  6992                           	opt stack 23
  6993                           
  6994                           ;clcd.c: 104: return "4,20";
  6995                           
  6996                           ;incstack = 0
  6997  003C66  0EE8               	movlw	low STR_5
  6998  003C68  6E14               	movwf	?_max_display_support,c
  6999  003C6A  0EFF               	movlw	high STR_5
  7000  003C6C  6E15               	movwf	?_max_display_support+1,c
  7001  003C6E  0012               	return	
  7002  003C70                     __end_of_max_display_support:
  7003                           	opt stack 0
  7004                           tblptru	equ	0xFF8
  7005                           tblptrh	equ	0xFF7
  7006                           tblptrl	equ	0xFF6
  7007                           tablat	equ	0xFF5
  7008                           prodh	equ	0xFF4
  7009                           prodl	equ	0xFF3
  7010                           intcon	equ	0xFF2
  7011                           postinc0	equ	0xFEE
  7012                           wreg	equ	0xFE8
  7013                           indf1	equ	0xFE7
  7014                           postinc1	equ	0xFE6
  7015                           postdec1	equ	0xFE5
  7016                           fsr1h	equ	0xFE2
  7017                           fsr1l	equ	0xFE1
  7018                           indf2	equ	0xFDF
  7019                           postinc2	equ	0xFDE
  7020                           postdec2	equ	0xFDD
  7021                           fsr2h	equ	0xFDA
  7022                           fsr2l	equ	0xFD9
  7023                           status	equ	0xFD8
  7024                           
  7025 ;; *************** function _max_display_str *****************
  7026 ;; Defined at:
  7027 ;;		line 82 in file "clcd.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;		None
  7030 ;; Auto vars:     Size  Location     Type
  7031 ;;		None
  7032 ;; Return value:  Size  Location     Type
  7033 ;;                  1    wreg      unsigned char 
  7034 ;; Registers used:
  7035 ;;		wreg, status,2
  7036 ;; Tracked objects:
  7037 ;;		On entry : 0/0
  7038 ;;		On exit  : 0/0
  7039 ;;		Unchanged: 0/0
  7040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7045 ;;Total ram usage:        0 bytes
  7046 ;; Hardware stack levels used:    1
  7047 ;; Hardware stack levels required when called:    5
  7048 ;; This function calls:
  7049 ;;		Nothing
  7050 ;; This function is called by:
  7051 ;;		_reply_to_host
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text22
  7056  003C0A                     __ptext22:
  7057                           	opt stack 0
  7058  003C0A                     _max_display_str:
  7059                           	opt stack 23
  7060                           
  7061                           ;clcd.c: 83: if (clcd_config_data.init_done == 0)
  7062                           
  7063                           ;incstack = 0
  7064  003C0A  5044               	movf	_clcd_config_data,w,c
  7065  003C0C  A4D8               	btfss	status,2,c
  7066  003C0E  D002               	goto	l419
  7067                           
  7068                           ;clcd.c: 84: return 0;
  7069  003C10  0E00               	movlw	0
  7070  003C12  0012               	return	
  7071  003C14                     l419:
  7072                           
  7073                           ;clcd.c: 85: else
  7074                           ;clcd.c: 86: return clcd_config_data.clcd_max_display_string;
  7075  003C14  5048               	movf	_clcd_config_data+4,w,c
  7076  003C16  0012               	return	
  7077  003C18                     __end_of_max_display_str:
  7078                           	opt stack 0
  7079                           tblptru	equ	0xFF8
  7080                           tblptrh	equ	0xFF7
  7081                           tblptrl	equ	0xFF6
  7082                           tablat	equ	0xFF5
  7083                           prodh	equ	0xFF4
  7084                           prodl	equ	0xFF3
  7085                           intcon	equ	0xFF2
  7086                           postinc0	equ	0xFEE
  7087                           wreg	equ	0xFE8
  7088                           indf1	equ	0xFE7
  7089                           postinc1	equ	0xFE6
  7090                           postdec1	equ	0xFE5
  7091                           fsr1h	equ	0xFE2
  7092                           fsr1l	equ	0xFE1
  7093                           indf2	equ	0xFDF
  7094                           postinc2	equ	0xFDE
  7095                           postdec2	equ	0xFDD
  7096                           fsr2h	equ	0xFDA
  7097                           fsr2l	equ	0xFD9
  7098                           status	equ	0xFD8
  7099                           
  7100 ;; *************** function _init_clcd_cusotom_lcd *****************
  7101 ;; Defined at:
  7102 ;;		line 50 in file "clcd.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  clcd_init_ro    1    wreg     unsigned char 
  7105 ;;  clcd_init_co    1   51[COMRAM] unsigned char 
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;  clcd_init_ro    1   52[COMRAM] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  1    wreg      void 
  7110 ;; Registers used:
  7111 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7117 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7120 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7121 ;;Total ram usage:        2 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; Hardware stack levels required when called:   11
  7124 ;; This function calls:
  7125 ;;		___awdiv
  7126 ;;		___wmul
  7127 ;;		_init_CLCD_config
  7128 ;;		_memset
  7129 ;;		_printf
  7130 ;; This function is called by:
  7131 ;;		_reply_to_host
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           	psect	text23
  7136  002D6C                     __ptext23:
  7137                           	opt stack 0
  7138  002D6C                     _init_clcd_cusotom_lcd:
  7139                           	opt stack 17
  7140                           
  7141                           ;incstack = 0
  7142                           ;init_clcd_cusotom_lcd@clcd_init_row stored from wreg
  7143  002D6C  6E35               	movwf	init_clcd_cusotom_lcd@clcd_init_row,c
  7144                           
  7145                           ;clcd.c: 51: init_CLCD_config();
  7146  002D6E  EC8D  F017         	call	_init_CLCD_config	;wreg free
  7147                           
  7148                           ;clcd.c: 52: data_count = 0;
  7149  002D72  0E00               	movlw	0
  7150  002D74  6E3C               	movwf	_data_count,c
  7151                           
  7152                           ;clcd.c: 53: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details)
      +                          );
  7153  002D76  0E96               	movlw	low _clcd_display_string_details
  7154  002D78  6E28               	movwf	memset@p1,c
  7155  002D7A  0E02               	movlw	high _clcd_display_string_details
  7156  002D7C  6E29               	movwf	memset@p1+1,c
  7157  002D7E  0E00               	movlw	0
  7158  002D80  6E2B               	movwf	memset@c+1,c
  7159  002D82  0E00               	movlw	0
  7160  002D84  6E2A               	movwf	memset@c,c
  7161  002D86  0E04               	movlw	4
  7162  002D88  6E2D               	movwf	memset@n+1,c
  7163  002D8A  0E4C               	movlw	76
  7164  002D8C  6E2C               	movwf	memset@n,c
  7165  002D8E  EC8E  F01B         	call	_memset	;wreg free
  7166                           
  7167                           ;clcd.c: 54: memset(conflict_arr, 0, sizeof (conflict_arr));
  7168  002D92  0E50               	movlw	low _conflict_arr
  7169  002D94  6E28               	movwf	memset@p1,c
  7170  002D96  0E01               	movlw	high _conflict_arr
  7171  002D98  6E29               	movwf	memset@p1+1,c
  7172  002D9A  0E00               	movlw	0
  7173  002D9C  6E2B               	movwf	memset@c+1,c
  7174  002D9E  0E00               	movlw	0
  7175  002DA0  6E2A               	movwf	memset@c,c
  7176  002DA2  0E00               	movlw	0
  7177  002DA4  6E2D               	movwf	memset@n+1,c
  7178  002DA6  0E28               	movlw	40
  7179  002DA8  6E2C               	movwf	memset@n,c
  7180  002DAA  EC8E  F01B         	call	_memset	;wreg free
  7181                           
  7182                           ;clcd.c: 55: clcd_config_data.init_done = 1;
  7183  002DAE  0E01               	movlw	1
  7184  002DB0  6E44               	movwf	_clcd_config_data,c
  7185                           
  7186                           ;clcd.c: 56: printf("row = %d", clcd_init_row);
  7187  002DB2  0E71               	movlw	low STR_1
  7188  002DB4  6E22               	movwf	printf@f,c
  7189  002DB6  0EFF               	movlw	high STR_1
  7190  002DB8  6E23               	movwf	printf@f+1,c
  7191  002DBA  C035  F024         	movff	init_clcd_cusotom_lcd@clcd_init_row,?_printf+2
  7192  002DBE  6A25               	clrf	?_printf+3,c
  7193  002DC0  EC1B  F012         	call	_printf	;wreg free
  7194                           
  7195                           ;clcd.c: 57: clcd_config_data.clcd_max_row = clcd_init_row;
  7196  002DC4  C035  F045         	movff	init_clcd_cusotom_lcd@clcd_init_row,_clcd_config_data+1
  7197                           
  7198                           ;clcd.c: 58: printf("col = %d", clcd_init_col);
  7199  002DC8  0E68               	movlw	low STR_2
  7200  002DCA  6E22               	movwf	printf@f,c
  7201  002DCC  0EFF               	movlw	high STR_2
  7202  002DCE  6E23               	movwf	printf@f+1,c
  7203  002DD0  C034  F024         	movff	init_clcd_cusotom_lcd@clcd_init_col,?_printf+2
  7204  002DD4  6A25               	clrf	?_printf+3,c
  7205  002DD6  EC1B  F012         	call	_printf	;wreg free
  7206                           
  7207                           ;clcd.c: 59: clcd_config_data.clcd_max_col = clcd_init_col;
  7208  002DDA  C034  F046         	movff	init_clcd_cusotom_lcd@clcd_init_col,_clcd_config_data+2
  7209                           
  7210                           ;clcd.c: 60: printf("string_count = %d", (clcd_init_col / 4) * clcd_init_row);
  7211  002DDE  0E08               	movlw	low STR_3
  7212  002DE0  6E22               	movwf	printf@f,c
  7213  002DE2  0EFE               	movlw	high STR_3
  7214  002DE4  6E23               	movwf	printf@f+1,c
  7215  002DE6  0E00               	movlw	0
  7216  002DE8  6E17               	movwf	___awdiv@divisor+1,c
  7217  002DEA  0E04               	movlw	4
  7218  002DEC  6E16               	movwf	___awdiv@divisor,c
  7219  002DEE  C034  F014         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7220  002DF2  6A15               	clrf	___awdiv@dividend+1,c
  7221  002DF4  EC8F  F018         	call	___awdiv	;wreg free
  7222  002DF8  C014  F01C         	movff	?___awdiv,___wmul@multiplier
  7223  002DFC  C015  F01D         	movff	?___awdiv+1,___wmul@multiplier+1
  7224  002E00  C035  F01E         	movff	init_clcd_cusotom_lcd@clcd_init_row,___wmul@multiplicand
  7225  002E04  6A1F               	clrf	___wmul@multiplicand+1,c
  7226  002E06  EC1D  F01D         	call	___wmul	;wreg free
  7227  002E0A  C01C  F024         	movff	?___wmul,?_printf+2
  7228  002E0E  C01D  F025         	movff	?___wmul+1,?_printf+3
  7229  002E12  EC1B  F012         	call	_printf	;wreg free
  7230                           
  7231                           ;clcd.c: 61: clcd_config_data.clcd_max_display_string = (clcd_init_col / 4) * clcd_init_
      +                          row;
  7232  002E16  C034  F014         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7233  002E1A  6A15               	clrf	___awdiv@dividend+1,c
  7234  002E1C  0E00               	movlw	0
  7235  002E1E  6E17               	movwf	___awdiv@divisor+1,c
  7236  002E20  0E04               	movlw	4
  7237  002E22  6E16               	movwf	___awdiv@divisor,c
  7238  002E24  EC8F  F018         	call	___awdiv	;wreg free
  7239  002E28  5014               	movf	?___awdiv,w,c
  7240  002E2A  0235               	mulwf	init_clcd_cusotom_lcd@clcd_init_row,c
  7241  002E2C  CFF3 F048          	movff	prodl,_clcd_config_data+4
  7242                           
  7243                           ;clcd.c: 62: clcd_config_data.uid_range = 'A' + clcd_config_data.clcd_max_display_string
      +                          ;
  7244  002E30  5048               	movf	_clcd_config_data+4,w,c
  7245  002E32  0F41               	addlw	65
  7246  002E34  6E47               	movwf	_clcd_config_data+3,c
  7247                           
  7248                           ;clcd.c: 63: printf("uid_range = %d\r\n", clcd_config_data.uid_range);
  7249  002E36  0E2B               	movlw	low STR_4
  7250  002E38  6E22               	movwf	printf@f,c
  7251  002E3A  0EFE               	movlw	high STR_4
  7252  002E3C  6E23               	movwf	printf@f+1,c
  7253  002E3E  C047  F024         	movff	_clcd_config_data+3,?_printf+2
  7254  002E42  6A25               	clrf	?_printf+3,c
  7255  002E44  EC1B  F012         	call	_printf	;wreg free
  7256  002E48  0012               	return		;funcret
  7257  002E4A                     __end_of_init_clcd_cusotom_lcd:
  7258                           	opt stack 0
  7259                           tblptru	equ	0xFF8
  7260                           tblptrh	equ	0xFF7
  7261                           tblptrl	equ	0xFF6
  7262                           tablat	equ	0xFF5
  7263                           prodh	equ	0xFF4
  7264                           prodl	equ	0xFF3
  7265                           intcon	equ	0xFF2
  7266                           postinc0	equ	0xFEE
  7267                           wreg	equ	0xFE8
  7268                           indf1	equ	0xFE7
  7269                           postinc1	equ	0xFE6
  7270                           postdec1	equ	0xFE5
  7271                           fsr1h	equ	0xFE2
  7272                           fsr1l	equ	0xFE1
  7273                           indf2	equ	0xFDF
  7274                           postinc2	equ	0xFDE
  7275                           postdec2	equ	0xFDD
  7276                           fsr2h	equ	0xFDA
  7277                           fsr2l	equ	0xFD9
  7278                           status	equ	0xFD8
  7279                           
  7280 ;; *************** function _init_CLCD_config *****************
  7281 ;; Defined at:
  7282 ;;		line 16 in file "clcd.c"
  7283 ;; Parameters:    Size  Location     Type
  7284 ;;		None
  7285 ;; Auto vars:     Size  Location     Type
  7286 ;;		None
  7287 ;; Return value:  Size  Location     Type
  7288 ;;                  1    wreg      void 
  7289 ;; Registers used:
  7290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7291 ;; Tracked objects:
  7292 ;;		On entry : 0/0
  7293 ;;		On exit  : 0/0
  7294 ;;		Unchanged: 0/0
  7295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;Total ram usage:        0 bytes
  7301 ;; Hardware stack levels used:    1
  7302 ;; Hardware stack levels required when called:   10
  7303 ;; This function calls:
  7304 ;;		__delay_MS
  7305 ;;		_clcd_display_string_config
  7306 ;;		_memset
  7307 ;;		_reset_clcd
  7308 ;;		_write_lcd_cmd
  7309 ;; This function is called by:
  7310 ;;		_init_clcd_cusotom_lcd
  7311 ;;		_init_clcd_lcd_16x2
  7312 ;;		_init_clcd_lcd_20x4
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           	psect	text24
  7317  002F1A                     __ptext24:
  7318                           	opt stack 0
  7319  002F1A                     _init_CLCD_config:
  7320                           	opt stack 17
  7321                           
  7322                           ;clcd.c: 17: memset(&clcd_config_data, 0, sizeof (CLCD_CONFIG_DATA));
  7323                           
  7324                           ;incstack = 0
  7325  002F1A  0E44               	movlw	low _clcd_config_data
  7326  002F1C  6E28               	movwf	memset@p1,c
  7327  002F1E  0E00               	movlw	high _clcd_config_data
  7328  002F20  6E29               	movwf	memset@p1+1,c
  7329  002F22  0E00               	movlw	0
  7330  002F24  6E2B               	movwf	memset@c+1,c
  7331  002F26  0E00               	movlw	0
  7332  002F28  6E2A               	movwf	memset@c,c
  7333  002F2A  0E00               	movlw	0
  7334  002F2C  6E2D               	movwf	memset@n+1,c
  7335  002F2E  0E05               	movlw	5
  7336  002F30  6E2C               	movwf	memset@n,c
  7337  002F32  EC8E  F01B         	call	_memset	;wreg free
  7338                           
  7339                           ;clcd.c: 19: TRISD = 0x00;
  7340  002F36  0E00               	movlw	0
  7341  002F38  6E95               	movwf	3989,c	;volatile
  7342                           
  7343                           ;clcd.c: 22: TRISA = (unsigned char) (TRISA | 0xF0);
  7344  002F3A  5092               	movf	3986,w,c	;volatile
  7345  002F3C  09F0               	iorlw	240
  7346  002F3E  6E92               	movwf	3986,c	;volatile
  7347                           
  7348                           ;clcd.c: 24: PORTAbits.RA0 = 0;
  7349  002F40  9080               	bcf	3968,0,c	;volatile
  7350                           
  7351                           ;clcd.c: 25: _delay_MS(250);
  7352  002F42  0E00               	movlw	0
  7353  002F44  6E15               	movwf	__delay_MS@delay+1,c
  7354  002F46  0EFA               	movlw	250
  7355  002F48  6E14               	movwf	__delay_MS@delay,c
  7356  002F4A  ECD3  F01B         	call	__delay_MS	;wreg free
  7357                           
  7358                           ;clcd.c: 28: write_lcd_cmd(0X38);
  7359  002F4E  0E38               	movlw	56
  7360  002F50  ECAD  F01D         	call	_write_lcd_cmd
  7361                           
  7362                           ;clcd.c: 29: _delay_MS(250);
  7363  002F54  0E00               	movlw	0
  7364  002F56  6E15               	movwf	__delay_MS@delay+1,c
  7365  002F58  0EFA               	movlw	250
  7366  002F5A  6E14               	movwf	__delay_MS@delay,c
  7367  002F5C  ECD3  F01B         	call	__delay_MS	;wreg free
  7368                           
  7369                           ;clcd.c: 31: write_lcd_cmd(0x0E);;
  7370  002F60  0E0E               	movlw	14
  7371  002F62  ECAD  F01D         	call	_write_lcd_cmd
  7372                           
  7373                           ;clcd.c: 32: _delay_MS(250);
  7374  002F66  0E00               	movlw	0
  7375  002F68  6E15               	movwf	__delay_MS@delay+1,c
  7376  002F6A  0EFA               	movlw	250
  7377  002F6C  6E14               	movwf	__delay_MS@delay,c
  7378  002F6E  ECD3  F01B         	call	__delay_MS	;wreg free
  7379                           
  7380                           ;clcd.c: 34: write_lcd_cmd(0x01);;
  7381  002F72  0E01               	movlw	1
  7382  002F74  ECAD  F01D         	call	_write_lcd_cmd
  7383                           
  7384                           ;clcd.c: 35: _delay_MS(250);
  7385  002F78  0E00               	movlw	0
  7386  002F7A  6E15               	movwf	__delay_MS@delay+1,c
  7387  002F7C  0EFA               	movlw	250
  7388  002F7E  6E14               	movwf	__delay_MS@delay,c
  7389  002F80  ECD3  F01B         	call	__delay_MS	;wreg free
  7390                           
  7391                           ;clcd.c: 37: write_lcd_cmd(0x06);;
  7392  002F84  0E06               	movlw	6
  7393  002F86  ECAD  F01D         	call	_write_lcd_cmd
  7394                           
  7395                           ;clcd.c: 38: _delay_MS(250);
  7396  002F8A  0E00               	movlw	0
  7397  002F8C  6E15               	movwf	__delay_MS@delay+1,c
  7398  002F8E  0EFA               	movlw	250
  7399  002F90  6E14               	movwf	__delay_MS@delay,c
  7400  002F92  ECD3  F01B         	call	__delay_MS	;wreg free
  7401                           
  7402                           ;clcd.c: 40: write_lcd_cmd(0x0F);
  7403  002F96  0E0F               	movlw	15
  7404  002F98  ECAD  F01D         	call	_write_lcd_cmd
  7405                           
  7406                           ;clcd.c: 41: _delay_MS(250);
  7407  002F9C  0E00               	movlw	0
  7408  002F9E  6E15               	movwf	__delay_MS@delay+1,c
  7409  002FA0  0EFA               	movlw	250
  7410  002FA2  6E14               	movwf	__delay_MS@delay,c
  7411  002FA4  ECD3  F01B         	call	__delay_MS	;wreg free
  7412                           
  7413                           ;clcd.c: 43: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7414  002FA8  0E00               	movlw	low _lcd_display_array
  7415  002FAA  6E28               	movwf	memset@p1,c
  7416  002FAC  0E01               	movlw	high _lcd_display_array
  7417  002FAE  6E29               	movwf	memset@p1+1,c
  7418  002FB0  0E00               	movlw	0
  7419  002FB2  6E2B               	movwf	memset@c+1,c
  7420  002FB4  0E20               	movlw	32
  7421  002FB6  6E2A               	movwf	memset@c,c
  7422  002FB8  0E00               	movlw	0
  7423  002FBA  6E2D               	movwf	memset@n+1,c
  7424  002FBC  0E50               	movlw	80
  7425  002FBE  6E2C               	movwf	memset@n,c
  7426  002FC0  EC8E  F01B         	call	_memset	;wreg free
  7427                           
  7428                           ;clcd.c: 45: clcd_display_string_config();
  7429  002FC4  EC25  F01A         	call	_clcd_display_string_config	;wreg free
  7430                           
  7431                           ;clcd.c: 47: reset_clcd();
  7432  002FC8  EC38  F01E         	call	_reset_clcd	;wreg free
  7433  002FCC  0012               	return		;funcret
  7434  002FCE                     __end_of_init_CLCD_config:
  7435                           	opt stack 0
  7436                           tblptru	equ	0xFF8
  7437                           tblptrh	equ	0xFF7
  7438                           tblptrl	equ	0xFF6
  7439                           tablat	equ	0xFF5
  7440                           prodh	equ	0xFF4
  7441                           prodl	equ	0xFF3
  7442                           intcon	equ	0xFF2
  7443                           postinc0	equ	0xFEE
  7444                           wreg	equ	0xFE8
  7445                           indf1	equ	0xFE7
  7446                           postinc1	equ	0xFE6
  7447                           postdec1	equ	0xFE5
  7448                           fsr1h	equ	0xFE2
  7449                           fsr1l	equ	0xFE1
  7450                           indf2	equ	0xFDF
  7451                           postinc2	equ	0xFDE
  7452                           postdec2	equ	0xFDD
  7453                           fsr2h	equ	0xFDA
  7454                           fsr2l	equ	0xFD9
  7455                           status	equ	0xFD8
  7456                           
  7457 ;; *************** function _write_lcd_cmd *****************
  7458 ;; Defined at:
  7459 ;;		line 395 in file "clcd.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;  cmd             1    wreg     unsigned char 
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;  cmd             1   26[COMRAM] unsigned char 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      void 
  7466 ;; Registers used:
  7467 ;;		wreg, status,2, status,0, cstack
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;Total ram usage:        1 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    6
  7480 ;; This function calls:
  7481 ;;		_delay
  7482 ;; This function is called by:
  7483 ;;		_init_CLCD_config
  7484 ;;		_set_cursor
  7485 ;;		_char_enter_mode_left_to_right
  7486 ;;		_display_text
  7487 ;;		_set_cursor_at_home
  7488 ;;		_display_and_cursor_control
  7489 ;;		_scroll_display_right
  7490 ;;		_scroll_display_left
  7491 ;;		_put_string
  7492 ;;		_put_char
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           	psect	text25
  7497  003B5A                     __ptext25:
  7498                           	opt stack 0
  7499  003B5A                     _write_lcd_cmd:
  7500                           	opt stack 22
  7501                           
  7502                           ;incstack = 0
  7503                           ;write_lcd_cmd@cmd stored from wreg
  7504  003B5A  6E1B               	movwf	write_lcd_cmd@cmd,c
  7505                           
  7506                           ;clcd.c: 396: PORTD = cmd;
  7507  003B5C  C01B  FF83         	movff	write_lcd_cmd@cmd,3971	;volatile
  7508                           
  7509                           ;clcd.c: 397: PORTAbits.RA2 = 0;
  7510  003B60  9480               	bcf	3968,2,c	;volatile
  7511                           
  7512                           ;clcd.c: 398: PORTAbits.RA1 = 0;
  7513  003B62  9280               	bcf	3968,1,c	;volatile
  7514                           
  7515                           ;clcd.c: 399: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7516  003B64  8080               	bsf	3968,0,c	;volatile
  7517  003B66  0E00               	movlw	0
  7518  003B68  6E15               	movwf	delay@delay+1,c
  7519  003B6A  0E01               	movlw	1
  7520  003B6C  6E14               	movwf	delay@delay,c
  7521  003B6E  EC46  F01B         	call	_delay	;wreg free
  7522  003B72  9080               	bcf	3968,0,c	;volatile
  7523  003B74  0012               	return		;funcret
  7524  003B76                     __end_of_write_lcd_cmd:
  7525                           	opt stack 0
  7526                           tblptru	equ	0xFF8
  7527                           tblptrh	equ	0xFF7
  7528                           tblptrl	equ	0xFF6
  7529                           tablat	equ	0xFF5
  7530                           prodh	equ	0xFF4
  7531                           prodl	equ	0xFF3
  7532                           intcon	equ	0xFF2
  7533                           postinc0	equ	0xFEE
  7534                           wreg	equ	0xFE8
  7535                           indf1	equ	0xFE7
  7536                           postinc1	equ	0xFE6
  7537                           postdec1	equ	0xFE5
  7538                           fsr1h	equ	0xFE2
  7539                           fsr1l	equ	0xFE1
  7540                           indf2	equ	0xFDF
  7541                           postinc2	equ	0xFDE
  7542                           postdec2	equ	0xFDD
  7543                           fsr2h	equ	0xFDA
  7544                           fsr2l	equ	0xFD9
  7545                           status	equ	0xFD8
  7546                           
  7547 ;; *************** function _reset_clcd *****************
  7548 ;; Defined at:
  7549 ;;		line 11 in file "clcd.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;		None
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;		None
  7554 ;; Return value:  Size  Location     Type
  7555 ;;                  1    wreg      void 
  7556 ;; Registers used:
  7557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7558 ;; Tracked objects:
  7559 ;;		On entry : 0/0
  7560 ;;		On exit  : 0/0
  7561 ;;		Unchanged: 0/0
  7562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7567 ;;Total ram usage:        0 bytes
  7568 ;; Hardware stack levels used:    1
  7569 ;; Hardware stack levels required when called:    9
  7570 ;; This function calls:
  7571 ;;		_clear_display_array
  7572 ;;		_reset_display_structure_count
  7573 ;; This function is called by:
  7574 ;;		_init_CLCD_config
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           	psect	text26
  7579  003C70                     __ptext26:
  7580                           	opt stack 0
  7581  003C70                     _reset_clcd:
  7582                           	opt stack 17
  7583                           
  7584                           ;clcd.c: 12: clear_display_array();
  7585                           
  7586                           ;incstack = 0
  7587  003C70  EC30  F01D         	call	_clear_display_array	;wreg free
  7588                           
  7589                           ;clcd.c: 13: reset_display_structure_count();
  7590  003C74  ECE7  F01D         	call	_reset_display_structure_count	;wreg free
  7591  003C78  0012               	return		;funcret
  7592  003C7A                     __end_of_reset_clcd:
  7593                           	opt stack 0
  7594                           tblptru	equ	0xFF8
  7595                           tblptrh	equ	0xFF7
  7596                           tblptrl	equ	0xFF6
  7597                           tablat	equ	0xFF5
  7598                           prodh	equ	0xFF4
  7599                           prodl	equ	0xFF3
  7600                           intcon	equ	0xFF2
  7601                           postinc0	equ	0xFEE
  7602                           wreg	equ	0xFE8
  7603                           indf1	equ	0xFE7
  7604                           postinc1	equ	0xFE6
  7605                           postdec1	equ	0xFE5
  7606                           fsr1h	equ	0xFE2
  7607                           fsr1l	equ	0xFE1
  7608                           indf2	equ	0xFDF
  7609                           postinc2	equ	0xFDE
  7610                           postdec2	equ	0xFDD
  7611                           fsr2h	equ	0xFDA
  7612                           fsr2l	equ	0xFD9
  7613                           status	equ	0xFD8
  7614                           
  7615 ;; *************** function _clear_display_array *****************
  7616 ;; Defined at:
  7617 ;;		line 496 in file "clcd.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;		None
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;		None
  7622 ;; Return value:  Size  Location     Type
  7623 ;;                  1    wreg      void 
  7624 ;; Registers used:
  7625 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7626 ;; Tracked objects:
  7627 ;;		On entry : 0/0
  7628 ;;		On exit  : 0/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7635 ;;Total ram usage:        0 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; Hardware stack levels required when called:    8
  7638 ;; This function calls:
  7639 ;;		_memset
  7640 ;;		_reset_display_structure_count
  7641 ;; This function is called by:
  7642 ;;		_reset_clcd
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           	psect	text27
  7647  003A60                     __ptext27:
  7648                           	opt stack 0
  7649  003A60                     _clear_display_array:
  7650                           	opt stack 17
  7651                           
  7652                           ;clcd.c: 497: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7653                           
  7654                           ;incstack = 0
  7655  003A60  0E00               	movlw	low _lcd_display_array
  7656  003A62  6E28               	movwf	memset@p1,c
  7657  003A64  0E01               	movlw	high _lcd_display_array
  7658  003A66  6E29               	movwf	memset@p1+1,c
  7659  003A68  0E00               	movlw	0
  7660  003A6A  6E2B               	movwf	memset@c+1,c
  7661  003A6C  0E20               	movlw	32
  7662  003A6E  6E2A               	movwf	memset@c,c
  7663  003A70  0E00               	movlw	0
  7664  003A72  6E2D               	movwf	memset@n+1,c
  7665  003A74  0E50               	movlw	80
  7666  003A76  6E2C               	movwf	memset@n,c
  7667  003A78  EC8E  F01B         	call	_memset	;wreg free
  7668                           
  7669                           ;clcd.c: 498: reset_display_structure_count();
  7670  003A7C  ECE7  F01D         	call	_reset_display_structure_count	;wreg free
  7671  003A80  0012               	return		;funcret
  7672  003A82                     __end_of_clear_display_array:
  7673                           	opt stack 0
  7674                           tblptru	equ	0xFF8
  7675                           tblptrh	equ	0xFF7
  7676                           tblptrl	equ	0xFF6
  7677                           tablat	equ	0xFF5
  7678                           prodh	equ	0xFF4
  7679                           prodl	equ	0xFF3
  7680                           intcon	equ	0xFF2
  7681                           postinc0	equ	0xFEE
  7682                           wreg	equ	0xFE8
  7683                           indf1	equ	0xFE7
  7684                           postinc1	equ	0xFE6
  7685                           postdec1	equ	0xFE5
  7686                           fsr1h	equ	0xFE2
  7687                           fsr1l	equ	0xFE1
  7688                           indf2	equ	0xFDF
  7689                           postinc2	equ	0xFDE
  7690                           postdec2	equ	0xFDD
  7691                           fsr2h	equ	0xFDA
  7692                           fsr2l	equ	0xFD9
  7693                           status	equ	0xFD8
  7694                           
  7695 ;; *************** function _reset_display_structure_count *****************
  7696 ;; Defined at:
  7697 ;;		line 491 in file "clcd.c"
  7698 ;; Parameters:    Size  Location     Type
  7699 ;;		None
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;		None
  7702 ;; Return value:  Size  Location     Type
  7703 ;;                  1    wreg      void 
  7704 ;; Registers used:
  7705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7706 ;; Tracked objects:
  7707 ;;		On entry : 0/0
  7708 ;;		On exit  : 0/0
  7709 ;;		Unchanged: 0/0
  7710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7715 ;;Total ram usage:        0 bytes
  7716 ;; Hardware stack levels used:    1
  7717 ;; Hardware stack levels required when called:    7
  7718 ;; This function calls:
  7719 ;;		_clear_display_structure
  7720 ;; This function is called by:
  7721 ;;		_reset_clcd
  7722 ;;		_clear_display_array
  7723 ;; This function uses a non-reentrant model
  7724 ;;
  7725                           
  7726                           	psect	text28
  7727  003BCE                     __ptext28:
  7728                           	opt stack 0
  7729  003BCE                     _reset_display_structure_count:
  7730                           	opt stack 18
  7731                           
  7732                           ;clcd.c: 492: display_struct_count = 0;
  7733                           
  7734                           ;incstack = 0
  7735  003BCE  0E00               	movlw	0
  7736  003BD0  0100               	movlb	0	; () banked
  7737  003BD2  6F75               	movwf	(_display_struct_count+1)& (0+255),b
  7738  003BD4  0E00               	movlw	0
  7739  003BD6  6F74               	movwf	_display_struct_count& (0+255),b
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;clcd.c: 493: clear_display_structure();
  7743  003BD8  EC71  F01D         	call	_clear_display_structure	;wreg free
  7744  003BDC  0012               	return		;funcret
  7745  003BDE                     __end_of_reset_display_structure_count:
  7746                           	opt stack 0
  7747                           tblptru	equ	0xFF8
  7748                           tblptrh	equ	0xFF7
  7749                           tblptrl	equ	0xFF6
  7750                           tablat	equ	0xFF5
  7751                           prodh	equ	0xFF4
  7752                           prodl	equ	0xFF3
  7753                           intcon	equ	0xFF2
  7754                           postinc0	equ	0xFEE
  7755                           wreg	equ	0xFE8
  7756                           indf1	equ	0xFE7
  7757                           postinc1	equ	0xFE6
  7758                           postdec1	equ	0xFE5
  7759                           fsr1h	equ	0xFE2
  7760                           fsr1l	equ	0xFE1
  7761                           indf2	equ	0xFDF
  7762                           postinc2	equ	0xFDE
  7763                           postdec2	equ	0xFDD
  7764                           fsr2h	equ	0xFDA
  7765                           fsr2l	equ	0xFD9
  7766                           status	equ	0xFD8
  7767                           
  7768 ;; *************** function _clear_display_structure *****************
  7769 ;; Defined at:
  7770 ;;		line 487 in file "clcd.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;		None
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;		None
  7775 ;; Return value:  Size  Location     Type
  7776 ;;                  1    wreg      void 
  7777 ;; Registers used:
  7778 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7779 ;; Tracked objects:
  7780 ;;		On entry : 0/0
  7781 ;;		On exit  : 0/0
  7782 ;;		Unchanged: 0/0
  7783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7788 ;;Total ram usage:        0 bytes
  7789 ;; Hardware stack levels used:    1
  7790 ;; Hardware stack levels required when called:    6
  7791 ;; This function calls:
  7792 ;;		_memset
  7793 ;; This function is called by:
  7794 ;;		_reset_display_structure_count
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           	psect	text29
  7799  003AE2                     __ptext29:
  7800                           	opt stack 0
  7801  003AE2                     _clear_display_structure:
  7802                           	opt stack 18
  7803                           
  7804                           ;clcd.c: 488: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details
      +                          ));
  7805                           
  7806                           ;incstack = 0
  7807  003AE2  0E96               	movlw	low _clcd_display_string_details
  7808  003AE4  6E28               	movwf	memset@p1,c
  7809  003AE6  0E02               	movlw	high _clcd_display_string_details
  7810  003AE8  6E29               	movwf	memset@p1+1,c
  7811  003AEA  0E00               	movlw	0
  7812  003AEC  6E2B               	movwf	memset@c+1,c
  7813  003AEE  0E00               	movlw	0
  7814  003AF0  6E2A               	movwf	memset@c,c
  7815  003AF2  0E04               	movlw	4
  7816  003AF4  6E2D               	movwf	memset@n+1,c
  7817  003AF6  0E4C               	movlw	76
  7818  003AF8  6E2C               	movwf	memset@n,c
  7819  003AFA  EC8E  F01B         	call	_memset	;wreg free
  7820  003AFE  0012               	return		;funcret
  7821  003B00                     __end_of_clear_display_structure:
  7822                           	opt stack 0
  7823                           tblptru	equ	0xFF8
  7824                           tblptrh	equ	0xFF7
  7825                           tblptrl	equ	0xFF6
  7826                           tablat	equ	0xFF5
  7827                           prodh	equ	0xFF4
  7828                           prodl	equ	0xFF3
  7829                           intcon	equ	0xFF2
  7830                           postinc0	equ	0xFEE
  7831                           wreg	equ	0xFE8
  7832                           indf1	equ	0xFE7
  7833                           postinc1	equ	0xFE6
  7834                           postdec1	equ	0xFE5
  7835                           fsr1h	equ	0xFE2
  7836                           fsr1l	equ	0xFE1
  7837                           indf2	equ	0xFDF
  7838                           postinc2	equ	0xFDE
  7839                           postdec2	equ	0xFDD
  7840                           fsr2h	equ	0xFDA
  7841                           fsr2l	equ	0xFD9
  7842                           status	equ	0xFD8
  7843                           
  7844 ;; *************** function _clcd_display_string_config *****************
  7845 ;; Defined at:
  7846 ;;		line 313 in file "clcd.c"
  7847 ;; Parameters:    Size  Location     Type
  7848 ;;		None
  7849 ;; Auto vars:     Size  Location     Type
  7850 ;;		None
  7851 ;; Return value:  Size  Location     Type
  7852 ;;                  1    wreg      void 
  7853 ;; Registers used:
  7854 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7855 ;; Tracked objects:
  7856 ;;		On entry : 0/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7864 ;;Total ram usage:        0 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; Hardware stack levels required when called:    8
  7867 ;; This function calls:
  7868 ;;		_memcpy
  7869 ;;		_memset
  7870 ;;		_printf
  7871 ;;		_write_str
  7872 ;; This function is called by:
  7873 ;;		_init_CLCD_config
  7874 ;; This function uses a non-reentrant model
  7875 ;;
  7876                           
  7877                           	psect	text30
  7878  00344A                     __ptext30:
  7879                           	opt stack 0
  7880  00344A                     _clcd_display_string_config:
  7881                           	opt stack 18
  7882                           
  7883                           ;clcd.c: 314: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7884                           
  7885                           ;incstack = 0
  7886  00344A  0E00               	movlw	low _lcd_display_array
  7887  00344C  6E28               	movwf	memset@p1,c
  7888  00344E  0E01               	movlw	high _lcd_display_array
  7889  003450  6E29               	movwf	memset@p1+1,c
  7890  003452  0E00               	movlw	0
  7891  003454  6E2B               	movwf	memset@c+1,c
  7892  003456  0E20               	movlw	32
  7893  003458  6E2A               	movwf	memset@c,c
  7894  00345A  0E00               	movlw	0
  7895  00345C  6E2D               	movwf	memset@n+1,c
  7896  00345E  0E50               	movlw	80
  7897  003460  6E2C               	movwf	memset@n,c
  7898  003462  EC8E  F01B         	call	_memset	;wreg free
  7899                           
  7900                           ;clcd.c: 315: printf("sizeof(str) = %d\r\n", sizeof (str));
  7901  003466  0ED1               	movlw	low STR_17
  7902  003468  6E22               	movwf	printf@f,c
  7903  00346A  0EFD               	movlw	high STR_17
  7904  00346C  6E23               	movwf	printf@f+1,c
  7905  00346E  0E00               	movlw	0
  7906  003470  6E25               	movwf	?_printf+3,c
  7907  003472  0E0D               	movlw	13
  7908  003474  6E24               	movwf	?_printf+2,c
  7909  003476  EC1B  F012         	call	_printf	;wreg free
  7910                           
  7911                           ;clcd.c: 316: memcpy(lcd_display_array[0], str, sizeof (str));
  7912  00347A  0E00               	movlw	low _lcd_display_array
  7913  00347C  6E14               	movwf	memcpy@d1,c
  7914  00347E  0E01               	movlw	high _lcd_display_array
  7915  003480  6E15               	movwf	memcpy@d1+1,c
  7916  003482  0EE9               	movlw	low _str
  7917  003484  6E16               	movwf	memcpy@s1,c
  7918  003486  0E00               	movlw	high _str
  7919  003488  6E17               	movwf	memcpy@s1+1,c
  7920  00348A  0E00               	movlw	0
  7921  00348C  6E19               	movwf	memcpy@n+1,c
  7922  00348E  0E0D               	movlw	13
  7923  003490  6E18               	movwf	memcpy@n,c
  7924  003492  ECB1  F01B         	call	_memcpy	;wreg free
  7925                           
  7926                           ;clcd.c: 317: write_str(lcd_display_array[0]);
  7927  003496  0E00               	movlw	low _lcd_display_array
  7928  003498  6E1C               	movwf	write_str@str,c
  7929  00349A  0E01               	movlw	high _lcd_display_array
  7930  00349C  6E1D               	movwf	write_str@str+1,c
  7931  00349E  EC55  F01C         	call	_write_str	;wreg free
  7932  0034A2  0012               	return		;funcret
  7933  0034A4                     __end_of_clcd_display_string_config:
  7934                           	opt stack 0
  7935                           tblptru	equ	0xFF8
  7936                           tblptrh	equ	0xFF7
  7937                           tblptrl	equ	0xFF6
  7938                           tablat	equ	0xFF5
  7939                           prodh	equ	0xFF4
  7940                           prodl	equ	0xFF3
  7941                           intcon	equ	0xFF2
  7942                           postinc0	equ	0xFEE
  7943                           wreg	equ	0xFE8
  7944                           indf1	equ	0xFE7
  7945                           postinc1	equ	0xFE6
  7946                           postdec1	equ	0xFE5
  7947                           fsr1h	equ	0xFE2
  7948                           fsr1l	equ	0xFE1
  7949                           indf2	equ	0xFDF
  7950                           postinc2	equ	0xFDE
  7951                           postdec2	equ	0xFDD
  7952                           fsr2h	equ	0xFDA
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function _write_str *****************
  7957 ;; Defined at:
  7958 ;;		line 409 in file "clcd.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;  str             2   27[COMRAM] PTR const unsigned char 
  7961 ;;		 -> lcd_display_array(80), 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  i               1   29[COMRAM] unsigned char 
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  1    wreg      void 
  7966 ;; Registers used:
  7967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7973 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;Total ram usage:        3 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; Hardware stack levels required when called:    7
  7980 ;; This function calls:
  7981 ;;		_write_lcd_data
  7982 ;; This function is called by:
  7983 ;;		_clcd_display_string_config
  7984 ;;		_display_text
  7985 ;;		_put_string
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           	psect	text31
  7990  0038AA                     __ptext31:
  7991                           	opt stack 0
  7992  0038AA                     _write_str:
  7993                           	opt stack 21
  7994                           
  7995                           ;clcd.c: 411: unsigned char i = 0;
  7996                           
  7997                           ;incstack = 0
  7998  0038AA  0E00               	movlw	0
  7999  0038AC  6E1E               	movwf	write_str@i,c
  8000                           
  8001                           ;clcd.c: 412: while (i < clcd_config_data.clcd_max_col) {
  8002  0038AE  D015               	goto	l549
  8003  0038B0                     
  8004                           ;clcd.c: 413: if (*str != (0))
  8005  0038B0  C01C  FFD9         	movff	write_str@str,fsr2l
  8006  0038B4  C01D  FFDA         	movff	write_str@str+1,fsr2h
  8007  0038B8  50DF               	movf	indf2,w,c
  8008  0038BA  B4D8               	btfsc	status,2,c
  8009  0038BC  D00A               	goto	l551
  8010                           
  8011                           ;clcd.c: 414: write_lcd_data(*str++);
  8012  0038BE  C01C  FFD9         	movff	write_str@str,fsr2l
  8013  0038C2  C01D  FFDA         	movff	write_str@str+1,fsr2h
  8014  0038C6  50DF               	movf	indf2,w,c
  8015  0038C8  ECBB  F01D         	call	_write_lcd_data
  8016  0038CC  4A1C               	infsnz	write_str@str,f,c
  8017  0038CE  2A1D               	incf	write_str@str+1,f,c
  8018  0038D0  D003               	goto	l552
  8019  0038D2                     l551:
  8020                           
  8021                           ;clcd.c: 415: else
  8022                           ;clcd.c: 416: write_lcd_data(' ');
  8023  0038D2  0E20               	movlw	32
  8024  0038D4  ECBB  F01D         	call	_write_lcd_data
  8025  0038D8                     l552:
  8026                           
  8027                           ;clcd.c: 418: i++;
  8028  0038D8  2A1E               	incf	write_str@i,f,c
  8029  0038DA                     l549:
  8030  0038DA  5046               	movf	_clcd_config_data+2,w,c
  8031  0038DC  5C1E               	subwf	write_str@i,w,c
  8032  0038DE  B0D8               	btfsc	status,0,c
  8033  0038E0  0012               	return	
  8034  0038E2  D7E6               	goto	l550
  8035  0038E4                     __end_of_write_str:
  8036                           	opt stack 0
  8037                           tblptru	equ	0xFF8
  8038                           tblptrh	equ	0xFF7
  8039                           tblptrl	equ	0xFF6
  8040                           tablat	equ	0xFF5
  8041                           prodh	equ	0xFF4
  8042                           prodl	equ	0xFF3
  8043                           intcon	equ	0xFF2
  8044                           postinc0	equ	0xFEE
  8045                           wreg	equ	0xFE8
  8046                           indf1	equ	0xFE7
  8047                           postinc1	equ	0xFE6
  8048                           postdec1	equ	0xFE5
  8049                           fsr1h	equ	0xFE2
  8050                           fsr1l	equ	0xFE1
  8051                           indf2	equ	0xFDF
  8052                           postinc2	equ	0xFDE
  8053                           postdec2	equ	0xFDD
  8054                           fsr2h	equ	0xFDA
  8055                           fsr2l	equ	0xFD9
  8056                           status	equ	0xFD8
  8057                           
  8058 ;; *************** function _write_lcd_data *****************
  8059 ;; Defined at:
  8060 ;;		line 402 in file "clcd.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;  data            1    wreg     unsigned char 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  data            1   26[COMRAM] unsigned char 
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg, status,2, status,0, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;Total ram usage:        1 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    6
  8081 ;; This function calls:
  8082 ;;		_delay
  8083 ;; This function is called by:
  8084 ;;		_write_str
  8085 ;;		_put_char
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           	psect	text32
  8090  003B76                     __ptext32:
  8091                           	opt stack 0
  8092  003B76                     _write_lcd_data:
  8093                           	opt stack 21
  8094                           
  8095                           ;incstack = 0
  8096                           ;write_lcd_data@data stored from wreg
  8097  003B76  6E1B               	movwf	write_lcd_data@data,c
  8098                           
  8099                           ;clcd.c: 403: PORTAbits.RA2 = 1;
  8100  003B78  8480               	bsf	3968,2,c	;volatile
  8101                           
  8102                           ;clcd.c: 404: PORTAbits.RA1 = 0;
  8103  003B7A  9280               	bcf	3968,1,c	;volatile
  8104                           
  8105                           ;clcd.c: 405: PORTD = data;
  8106  003B7C  C01B  FF83         	movff	write_lcd_data@data,3971	;volatile
  8107                           
  8108                           ;clcd.c: 406: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  8109  003B80  8080               	bsf	3968,0,c	;volatile
  8110  003B82  0E00               	movlw	0
  8111  003B84  6E15               	movwf	delay@delay+1,c
  8112  003B86  0E01               	movlw	1
  8113  003B88  6E14               	movwf	delay@delay,c
  8114  003B8A  EC46  F01B         	call	_delay	;wreg free
  8115  003B8E  9080               	bcf	3968,0,c	;volatile
  8116  003B90  0012               	return		;funcret
  8117  003B92                     __end_of_write_lcd_data:
  8118                           	opt stack 0
  8119                           tblptru	equ	0xFF8
  8120                           tblptrh	equ	0xFF7
  8121                           tblptrl	equ	0xFF6
  8122                           tablat	equ	0xFF5
  8123                           prodh	equ	0xFF4
  8124                           prodl	equ	0xFF3
  8125                           intcon	equ	0xFF2
  8126                           postinc0	equ	0xFEE
  8127                           wreg	equ	0xFE8
  8128                           indf1	equ	0xFE7
  8129                           postinc1	equ	0xFE6
  8130                           postdec1	equ	0xFE5
  8131                           fsr1h	equ	0xFE2
  8132                           fsr1l	equ	0xFE1
  8133                           indf2	equ	0xFDF
  8134                           postinc2	equ	0xFDE
  8135                           postdec2	equ	0xFDD
  8136                           fsr2h	equ	0xFDA
  8137                           fsr2l	equ	0xFD9
  8138                           status	equ	0xFD8
  8139                           
  8140 ;; *************** function _delay *****************
  8141 ;; Defined at:
  8142 ;;		line 5 in file "delay.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;  delay           2   19[COMRAM] int 
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;  i               2   24[COMRAM] int 
  8147 ;;  val             2   22[COMRAM] int 
  8148 ;; Return value:  Size  Location     Type
  8149 ;;                  1    wreg      void 
  8150 ;; Registers used:
  8151 ;;		wreg, status,2, status,0
  8152 ;; Tracked objects:
  8153 ;;		On entry : 0/0
  8154 ;;		On exit  : 0/0
  8155 ;;		Unchanged: 0/0
  8156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8157 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8158 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8159 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;Total ram usage:        7 bytes
  8162 ;; Hardware stack levels used:    1
  8163 ;; Hardware stack levels required when called:    5
  8164 ;; This function calls:
  8165 ;;		Nothing
  8166 ;; This function is called by:
  8167 ;;		_write_lcd_cmd
  8168 ;;		_write_lcd_data
  8169 ;;		_is_busy
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           	psect	text33
  8174  00368C                     __ptext33:
  8175                           	opt stack 0
  8176  00368C                     _delay:
  8177                           	opt stack 21
  8178                           
  8179                           ;delay.c: 7: int val = 0, i;
  8180                           
  8181                           ;incstack = 0
  8182  00368C  0E00               	movlw	0
  8183  00368E  6E18               	movwf	delay@val+1,c
  8184  003690  0E00               	movlw	0
  8185  003692  6E17               	movwf	delay@val,c
  8186                           
  8187                           ;delay.c: 8: for (val = 0; val < delay; val++) {
  8188  003694  0E00               	movlw	0
  8189  003696  6E18               	movwf	delay@val+1,c
  8190  003698  0E00               	movlw	0
  8191  00369A  6E17               	movwf	delay@val,c
  8192  00369C  D011               	goto	l958
  8193  00369E                     
  8194                           ;delay.c: 9: for(i=0; i<350; i++)
  8195  00369E  0E00               	movlw	0
  8196  0036A0  6E1A               	movwf	delay@i+1,c
  8197  0036A2  0E00               	movlw	0
  8198  0036A4  6E19               	movwf	delay@i,c
  8199  0036A6                     l4154:
  8200  0036A6  BE1A               	btfsc	delay@i+1,7,c
  8201  0036A8  D006               	goto	l960
  8202  0036AA  0E5E               	movlw	94
  8203  0036AC  5C19               	subwf	delay@i,w,c
  8204  0036AE  0E01               	movlw	1
  8205  0036B0  581A               	subwfb	delay@i+1,w,c
  8206  0036B2  B0D8               	btfsc	status,0,c
  8207  0036B4  D003               	goto	u3120
  8208  0036B6                     l960:
  8209                           
  8210                           ;delay.c: 10: {
  8211  0036B6  4A19               	infsnz	delay@i,f,c
  8212  0036B8  2A1A               	incf	delay@i+1,f,c
  8213  0036BA  D7F5               	goto	l4154
  8214  0036BC                     u3120:
  8215  0036BC  4A17               	infsnz	delay@val,f,c
  8216  0036BE  2A18               	incf	delay@val+1,f,c
  8217  0036C0                     l958:
  8218  0036C0  5014               	movf	delay@delay,w,c
  8219  0036C2  5C17               	subwf	delay@val,w,c
  8220  0036C4  5018               	movf	delay@val+1,w,c
  8221  0036C6  0A80               	xorlw	128
  8222  0036C8  6E16               	movwf	??_delay& (0+255),c
  8223  0036CA  5015               	movf	delay@delay+1,w,c
  8224  0036CC  0A80               	xorlw	128
  8225  0036CE  5816               	subwfb	??_delay& (0+255),w,c
  8226  0036D0  B0D8               	btfsc	status,0,c
  8227  0036D2  0012               	return	
  8228  0036D4  D7E4               	goto	l959
  8229  0036D6                     __end_of_delay:
  8230                           	opt stack 0
  8231                           tblptru	equ	0xFF8
  8232                           tblptrh	equ	0xFF7
  8233                           tblptrl	equ	0xFF6
  8234                           tablat	equ	0xFF5
  8235                           prodh	equ	0xFF4
  8236                           prodl	equ	0xFF3
  8237                           intcon	equ	0xFF2
  8238                           postinc0	equ	0xFEE
  8239                           wreg	equ	0xFE8
  8240                           indf1	equ	0xFE7
  8241                           postinc1	equ	0xFE6
  8242                           postdec1	equ	0xFE5
  8243                           fsr1h	equ	0xFE2
  8244                           fsr1l	equ	0xFE1
  8245                           indf2	equ	0xFDF
  8246                           postinc2	equ	0xFDE
  8247                           postdec2	equ	0xFDD
  8248                           fsr2h	equ	0xFDA
  8249                           fsr2l	equ	0xFD9
  8250                           status	equ	0xFD8
  8251                           
  8252 ;; *************** function _memcpy *****************
  8253 ;; Defined at:
  8254 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\memcpy.c"
  8255 ;; Parameters:    Size  Location     Type
  8256 ;;  d1              2   19[COMRAM] PTR void 
  8257 ;;		 -> lcd_display_array(80), 
  8258 ;;  s1              2   21[COMRAM] PTR const void 
  8259 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1100), 
  8260 ;;  n               2   23[COMRAM] unsigned int 
  8261 ;; Auto vars:     Size  Location     Type
  8262 ;;  s               2   27[COMRAM] PTR const unsigned char 
  8263 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1100), 
  8264 ;;  d               2   25[COMRAM] PTR unsigned char 
  8265 ;;		 -> lcd_display_array(80), 
  8266 ;;  tmp             1   29[COMRAM] unsigned char 
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  2   19[COMRAM] PTR void 
  8269 ;; Registers used:
  8270 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8276 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;Total ram usage:       11 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; Hardware stack levels required when called:    5
  8283 ;; This function calls:
  8284 ;;		Nothing
  8285 ;; This function is called by:
  8286 ;;		_clcd_display_string_config
  8287 ;;		_scroll_left_to_right
  8288 ;;		_scroll_right_to_left
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           	psect	text34
  8293  003762                     __ptext34:
  8294                           	opt stack 0
  8295  003762                     _memcpy:
  8296                           	opt stack 23
  8297                           
  8298                           ;incstack = 0
  8299  003762  C016  F01C         	movff	memcpy@s1,memcpy@s
  8300  003766  C017  F01D         	movff	memcpy@s1+1,memcpy@s+1
  8301  00376A  C014  F01A         	movff	memcpy@d1,memcpy@d
  8302  00376E  C015  F01B         	movff	memcpy@d1+1,memcpy@d+1
  8303  003772  D010               	goto	l1547
  8304  003774                     l4330:
  8305  003774  C01C  FFD9         	movff	memcpy@s,fsr2l
  8306  003778  C01D  FFDA         	movff	memcpy@s+1,fsr2h
  8307  00377C  50DF               	movf	indf2,w,c
  8308  00377E  6E1E               	movwf	memcpy@tmp,c
  8309  003780  4A1C               	infsnz	memcpy@s,f,c
  8310  003782  2A1D               	incf	memcpy@s+1,f,c
  8311  003784  C01A  FFD9         	movff	memcpy@d,fsr2l
  8312  003788  C01B  FFDA         	movff	memcpy@d+1,fsr2h
  8313  00378C  C01E  FFDF         	movff	memcpy@tmp,indf2
  8314  003790  4A1A               	infsnz	memcpy@d,f,c
  8315  003792  2A1B               	incf	memcpy@d+1,f,c
  8316  003794                     l1547:
  8317  003794  0618               	decf	memcpy@n,f,c
  8318  003796  A0D8               	btfss	status,0,c
  8319  003798  0619               	decf	memcpy@n+1,f,c
  8320  00379A  2818               	incf	memcpy@n,w,c
  8321  00379C  E1EB               	bnz	l4330
  8322  00379E  2819               	incf	memcpy@n+1,w,c
  8323  0037A0  B4D8               	btfsc	status,2,c
  8324  0037A2  0012               	return	
  8325  0037A4  D7E7               	goto	l1548
  8326  0037A6                     __end_of_memcpy:
  8327                           	opt stack 0
  8328                           tblptru	equ	0xFF8
  8329                           tblptrh	equ	0xFF7
  8330                           tblptrl	equ	0xFF6
  8331                           tablat	equ	0xFF5
  8332                           prodh	equ	0xFF4
  8333                           prodl	equ	0xFF3
  8334                           intcon	equ	0xFF2
  8335                           postinc0	equ	0xFEE
  8336                           wreg	equ	0xFE8
  8337                           indf1	equ	0xFE7
  8338                           postinc1	equ	0xFE6
  8339                           postdec1	equ	0xFE5
  8340                           fsr1h	equ	0xFE2
  8341                           fsr1l	equ	0xFE1
  8342                           indf2	equ	0xFDF
  8343                           postinc2	equ	0xFDE
  8344                           postdec2	equ	0xFDD
  8345                           fsr2h	equ	0xFDA
  8346                           fsr2l	equ	0xFD9
  8347                           status	equ	0xFD8
  8348                           
  8349 ;; *************** function __delay_MS *****************
  8350 ;; Defined at:
  8351 ;;		line 29 in file "delay.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;  delay           2   19[COMRAM] int 
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;  val             2   22[COMRAM] int 
  8356 ;; Return value:  Size  Location     Type
  8357 ;;                  1    wreg      void 
  8358 ;; Registers used:
  8359 ;;		wreg, status,2, status,0, cstack
  8360 ;; Tracked objects:
  8361 ;;		On entry : 0/0
  8362 ;;		On exit  : 0/0
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8365 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8366 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8367 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8368 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8369 ;;Total ram usage:        5 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; Hardware stack levels required when called:    6
  8372 ;; This function calls:
  8373 ;;		_TMR1_HasOverflowOccured
  8374 ;;		_TMR1_Reload
  8375 ;;		_TMR1_StartTimer
  8376 ;;		_TMR1_StopTimer
  8377 ;; This function is called by:
  8378 ;;		_init_CLCD_config
  8379 ;;		_main
  8380 ;;		_put_char
  8381 ;; This function uses a non-reentrant model
  8382 ;;
  8383                           
  8384                           	psect	text35
  8385  0037A6                     __ptext35:
  8386                           	opt stack 0
  8387  0037A6                     __delay_MS:
  8388                           	opt stack 20
  8389                           
  8390                           ;delay.c: 30: int val = 0;
  8391                           
  8392                           ;incstack = 0
  8393  0037A6  0E00               	movlw	0
  8394  0037A8  6E18               	movwf	__delay_MS@val+1,c
  8395  0037AA  0E00               	movlw	0
  8396  0037AC  6E17               	movwf	__delay_MS@val,c
  8397                           
  8398                           ;delay.c: 31: for (val = 0; val < delay; val++) {
  8399  0037AE  0E00               	movlw	0
  8400  0037B0  6E18               	movwf	__delay_MS@val+1,c
  8401  0037B2  0E00               	movlw	0
  8402  0037B4  6E17               	movwf	__delay_MS@val,c
  8403  0037B6  D00E               	goto	l975
  8404  0037B8                     
  8405                           ;delay.c: 32: TMR1_Reload();
  8406  0037B8  EC21  F01E         	call	_TMR1_Reload	;wreg free
  8407                           
  8408                           ;delay.c: 33: TMR1_StartTimer();
  8409  0037BC  EC58  F01E         	call	_TMR1_StartTimer	;wreg free
  8410  0037C0  EC27  F01E         	call	_TMR1_HasOverflowOccured	;wreg free
  8411  0037C4  0900               	iorlw	0
  8412  0037C6  B4D8               	btfsc	status,2,c
  8413  0037C8  D7FB               	goto	l978
  8414                           
  8415                           ;delay.c: 35: TMR1_StopTimer();
  8416  0037CA  EC54  F01E         	call	_TMR1_StopTimer	;wreg free
  8417                           
  8418                           ;delay.c: 36: PIR1bits.TMR1IF = 0;
  8419  0037CE  909E               	bcf	3998,0,c	;volatile
  8420  0037D0  4A17               	infsnz	__delay_MS@val,f,c
  8421  0037D2  2A18               	incf	__delay_MS@val+1,f,c
  8422  0037D4                     l975:
  8423  0037D4  5014               	movf	__delay_MS@delay,w,c
  8424  0037D6  5C17               	subwf	__delay_MS@val,w,c
  8425  0037D8  5018               	movf	__delay_MS@val+1,w,c
  8426  0037DA  0A80               	xorlw	128
  8427  0037DC  6E16               	movwf	??__delay_MS& (0+255),c
  8428  0037DE  5015               	movf	__delay_MS@delay+1,w,c
  8429  0037E0  0A80               	xorlw	128
  8430  0037E2  5816               	subwfb	??__delay_MS& (0+255),w,c
  8431  0037E4  B0D8               	btfsc	status,0,c
  8432  0037E6  0012               	return	
  8433  0037E8  D7E7               	goto	l976
  8434  0037EA                     __end_of__delay_MS:
  8435                           	opt stack 0
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           prodh	equ	0xFF4
  8441                           prodl	equ	0xFF3
  8442                           intcon	equ	0xFF2
  8443                           postinc0	equ	0xFEE
  8444                           wreg	equ	0xFE8
  8445                           indf1	equ	0xFE7
  8446                           postinc1	equ	0xFE6
  8447                           postdec1	equ	0xFE5
  8448                           fsr1h	equ	0xFE2
  8449                           fsr1l	equ	0xFE1
  8450                           indf2	equ	0xFDF
  8451                           postinc2	equ	0xFDE
  8452                           postdec2	equ	0xFDD
  8453                           fsr2h	equ	0xFDA
  8454                           fsr2l	equ	0xFD9
  8455                           status	equ	0xFD8
  8456                           
  8457 ;; *************** function _TMR1_StopTimer *****************
  8458 ;; Defined at:
  8459 ;;		line 94 in file "mcc_generated_files/tmr1.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;		None
  8462 ;; Auto vars:     Size  Location     Type
  8463 ;;		None
  8464 ;; Return value:  Size  Location     Type
  8465 ;;                  1    wreg      void 
  8466 ;; Registers used:
  8467 ;;		None
  8468 ;; Tracked objects:
  8469 ;;		On entry : 0/0
  8470 ;;		On exit  : 0/0
  8471 ;;		Unchanged: 0/0
  8472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;Total ram usage:        0 bytes
  8478 ;; Hardware stack levels used:    1
  8479 ;; Hardware stack levels required when called:    5
  8480 ;; This function calls:
  8481 ;;		Nothing
  8482 ;; This function is called by:
  8483 ;;		__delay_MS
  8484 ;;		_main
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           	psect	text36
  8489  003CA8                     __ptext36:
  8490                           	opt stack 0
  8491  003CA8                     _TMR1_StopTimer:
  8492                           	opt stack 20
  8493                           
  8494                           ;tmr1.c: 97: T1CONbits.TMR1ON = 0;
  8495                           
  8496                           ;incstack = 0
  8497  003CA8  90CD               	bcf	4045,0,c	;volatile
  8498  003CAA  0012               	return		;funcret
  8499  003CAC                     __end_of_TMR1_StopTimer:
  8500                           	opt stack 0
  8501                           tblptru	equ	0xFF8
  8502                           tblptrh	equ	0xFF7
  8503                           tblptrl	equ	0xFF6
  8504                           tablat	equ	0xFF5
  8505                           prodh	equ	0xFF4
  8506                           prodl	equ	0xFF3
  8507                           intcon	equ	0xFF2
  8508                           postinc0	equ	0xFEE
  8509                           wreg	equ	0xFE8
  8510                           indf1	equ	0xFE7
  8511                           postinc1	equ	0xFE6
  8512                           postdec1	equ	0xFE5
  8513                           fsr1h	equ	0xFE2
  8514                           fsr1l	equ	0xFE1
  8515                           indf2	equ	0xFDF
  8516                           postinc2	equ	0xFDE
  8517                           postdec2	equ	0xFDD
  8518                           fsr2h	equ	0xFDA
  8519                           fsr2l	equ	0xFD9
  8520                           status	equ	0xFD8
  8521                           
  8522 ;; *************** function _TMR1_Reload *****************
  8523 ;; Defined at:
  8524 ;;		line 136 in file "mcc_generated_files/tmr1.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;		None
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;		None
  8529 ;; Return value:  Size  Location     Type
  8530 ;;                  1    wreg      void 
  8531 ;; Registers used:
  8532 ;;		wreg, status,2
  8533 ;; Tracked objects:
  8534 ;;		On entry : 0/0
  8535 ;;		On exit  : 0/0
  8536 ;;		Unchanged: 0/0
  8537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8542 ;;Total ram usage:        0 bytes
  8543 ;; Hardware stack levels used:    1
  8544 ;; Hardware stack levels required when called:    5
  8545 ;; This function calls:
  8546 ;;		Nothing
  8547 ;; This function is called by:
  8548 ;;		__delay_MS
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           	psect	text37
  8553  003C42                     __ptext37:
  8554                           	opt stack 0
  8555  003C42                     _TMR1_Reload:
  8556                           	opt stack 20
  8557                           
  8558                           ;tmr1.c: 139: TMR1H = (timer1ReloadVal >> 8);
  8559                           
  8560                           ;incstack = 0
  8561  003C42  0100               	movlb	0	; () banked
  8562  003C44  51F9               	movf	(_timer1ReloadVal+1)& (0+255),w,b	;volatile
  8563  003C46  6ECF               	movwf	4047,c	;volatile
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;tmr1.c: 140: TMR1L = (uint8_t) timer1ReloadVal;
  8567  003C48  C0F8  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8568                           
  8569                           ; BSR set to: 0
  8570  003C4C  0012               	return		;funcret
  8571  003C4E                     __end_of_TMR1_Reload:
  8572                           	opt stack 0
  8573                           tblptru	equ	0xFF8
  8574                           tblptrh	equ	0xFF7
  8575                           tblptrl	equ	0xFF6
  8576                           tablat	equ	0xFF5
  8577                           prodh	equ	0xFF4
  8578                           prodl	equ	0xFF3
  8579                           intcon	equ	0xFF2
  8580                           postinc0	equ	0xFEE
  8581                           wreg	equ	0xFE8
  8582                           indf1	equ	0xFE7
  8583                           postinc1	equ	0xFE6
  8584                           postdec1	equ	0xFE5
  8585                           fsr1h	equ	0xFE2
  8586                           fsr1l	equ	0xFE1
  8587                           indf2	equ	0xFDF
  8588                           postinc2	equ	0xFDE
  8589                           postdec2	equ	0xFDD
  8590                           fsr2h	equ	0xFDA
  8591                           fsr2l	equ	0xFD9
  8592                           status	equ	0xFD8
  8593                           
  8594 ;; *************** function _TMR1_HasOverflowOccured *****************
  8595 ;; Defined at:
  8596 ;;		line 153 in file "mcc_generated_files/tmr1.c"
  8597 ;; Parameters:    Size  Location     Type
  8598 ;;		None
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;		None
  8601 ;; Return value:  Size  Location     Type
  8602 ;;                  1    wreg      unsigned char 
  8603 ;; Registers used:
  8604 ;;		wreg
  8605 ;; Tracked objects:
  8606 ;;		On entry : 0/0
  8607 ;;		On exit  : 0/0
  8608 ;;		Unchanged: 0/0
  8609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8614 ;;Total ram usage:        0 bytes
  8615 ;; Hardware stack levels used:    1
  8616 ;; Hardware stack levels required when called:    5
  8617 ;; This function calls:
  8618 ;;		Nothing
  8619 ;; This function is called by:
  8620 ;;		__delay_MS
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           	psect	text38
  8625  003C4E                     __ptext38:
  8626                           	opt stack 0
  8627  003C4E                     _TMR1_HasOverflowOccured:
  8628                           	opt stack 20
  8629                           
  8630                           ;tmr1.c: 156: return(PIR1bits.TMR1IF);
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;incstack = 0
  8634  003C4E  A09E               	btfss	3998,0,c	;volatile
  8635  003C50  D002               	goto	u3200
  8636  003C52  0E01               	movlw	1
  8637  003C54  0012               	return	
  8638  003C56                     u3200:
  8639  003C56  0E00               	movlw	0
  8640  003C58  0012               	return	
  8641  003C5A                     __end_of_TMR1_HasOverflowOccured:
  8642                           	opt stack 0
  8643                           tblptru	equ	0xFF8
  8644                           tblptrh	equ	0xFF7
  8645                           tblptrl	equ	0xFF6
  8646                           tablat	equ	0xFF5
  8647                           prodh	equ	0xFF4
  8648                           prodl	equ	0xFF3
  8649                           intcon	equ	0xFF2
  8650                           postinc0	equ	0xFEE
  8651                           wreg	equ	0xFE8
  8652                           indf1	equ	0xFE7
  8653                           postinc1	equ	0xFE6
  8654                           postdec1	equ	0xFE5
  8655                           fsr1h	equ	0xFE2
  8656                           fsr1l	equ	0xFE1
  8657                           indf2	equ	0xFDF
  8658                           postinc2	equ	0xFDE
  8659                           postdec2	equ	0xFDD
  8660                           fsr2h	equ	0xFDA
  8661                           fsr2l	equ	0xFD9
  8662                           status	equ	0xFD8
  8663                           
  8664 ;; *************** function ___awdiv *****************
  8665 ;; Defined at:
  8666 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\awdiv.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;  dividend        2   19[COMRAM] int 
  8669 ;;  divisor         2   21[COMRAM] int 
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;  quotient        2   25[COMRAM] int 
  8672 ;;  sign            1   24[COMRAM] unsigned char 
  8673 ;;  counter         1   23[COMRAM] unsigned char 
  8674 ;; Return value:  Size  Location     Type
  8675 ;;                  2   19[COMRAM] int 
  8676 ;; Registers used:
  8677 ;;		wreg, status,2, status,0
  8678 ;; Tracked objects:
  8679 ;;		On entry : 0/0
  8680 ;;		On exit  : 0/0
  8681 ;;		Unchanged: 0/0
  8682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8683 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8684 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8686 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8687 ;;Total ram usage:        8 bytes
  8688 ;; Hardware stack levels used:    1
  8689 ;; Hardware stack levels required when called:    5
  8690 ;; This function calls:
  8691 ;;		Nothing
  8692 ;; This function is called by:
  8693 ;;		_init_clcd_cusotom_lcd
  8694 ;;		_display_string
  8695 ;; This function uses a non-reentrant model
  8696 ;;
  8697                           
  8698                           	psect	text39
  8699  00311E                     __ptext39:
  8700                           	opt stack 0
  8701  00311E                     ___awdiv:
  8702                           	opt stack 22
  8703                           
  8704                           ;incstack = 0
  8705  00311E  0E00               	movlw	0
  8706  003120  6E19               	movwf	___awdiv@sign,c
  8707  003122  AE17               	btfss	___awdiv@divisor+1,7,c
  8708  003124  D006               	goto	l1282
  8709  003126  6C16               	negf	___awdiv@divisor,c
  8710  003128  1E17               	comf	___awdiv@divisor+1,f,c
  8711  00312A  B0D8               	btfsc	status,0,c
  8712  00312C  2A17               	incf	___awdiv@divisor+1,f,c
  8713  00312E  0E01               	movlw	1
  8714  003130  6E19               	movwf	___awdiv@sign,c
  8715  003132                     l1282:
  8716  003132  AE15               	btfss	___awdiv@dividend+1,7,c
  8717  003134  D006               	goto	l1283
  8718  003136  6C14               	negf	___awdiv@dividend,c
  8719  003138  1E15               	comf	___awdiv@dividend+1,f,c
  8720  00313A  B0D8               	btfsc	status,0,c
  8721  00313C  2A15               	incf	___awdiv@dividend+1,f,c
  8722  00313E  0E01               	movlw	1
  8723  003140  1A19               	xorwf	___awdiv@sign,f,c
  8724  003142                     l1283:
  8725  003142  0E00               	movlw	0
  8726  003144  6E1B               	movwf	___awdiv@quotient+1,c
  8727  003146  0E00               	movlw	0
  8728  003148  6E1A               	movwf	___awdiv@quotient,c
  8729  00314A  5016               	movf	___awdiv@divisor,w,c
  8730  00314C  1017               	iorwf	___awdiv@divisor+1,w,c
  8731  00314E  B4D8               	btfsc	status,2,c
  8732  003150  D01C               	goto	l1290
  8733  003152  0E01               	movlw	1
  8734  003154  6E18               	movwf	___awdiv@counter,c
  8735  003156  D004               	goto	l1285
  8736  003158  90D8               	bcf	status,0,c
  8737  00315A  3616               	rlcf	___awdiv@divisor,f,c
  8738  00315C  3617               	rlcf	___awdiv@divisor+1,f,c
  8739  00315E  2A18               	incf	___awdiv@counter,f,c
  8740  003160                     l1285:
  8741  003160  AE17               	btfss	___awdiv@divisor+1,7,c
  8742  003162  D7FA               	goto	l1286
  8743  003164                     u3970:
  8744  003164  90D8               	bcf	status,0,c
  8745  003166  361A               	rlcf	___awdiv@quotient,f,c
  8746  003168  361B               	rlcf	___awdiv@quotient+1,f,c
  8747  00316A  5016               	movf	___awdiv@divisor,w,c
  8748  00316C  5C14               	subwf	___awdiv@dividend,w,c
  8749  00316E  5017               	movf	___awdiv@divisor+1,w,c
  8750  003170  5815               	subwfb	___awdiv@dividend+1,w,c
  8751  003172  A0D8               	btfss	status,0,c
  8752  003174  D005               	goto	l1289
  8753  003176  5016               	movf	___awdiv@divisor,w,c
  8754  003178  5E14               	subwf	___awdiv@dividend,f,c
  8755  00317A  5017               	movf	___awdiv@divisor+1,w,c
  8756  00317C  5A15               	subwfb	___awdiv@dividend+1,f,c
  8757  00317E  801A               	bsf	___awdiv@quotient,0,c
  8758  003180                     l1289:
  8759  003180  90D8               	bcf	status,0,c
  8760  003182  3217               	rrcf	___awdiv@divisor+1,f,c
  8761  003184  3216               	rrcf	___awdiv@divisor,f,c
  8762  003186  2E18               	decfsz	___awdiv@counter,f,c
  8763  003188  D7ED               	goto	u3970
  8764  00318A                     l1290:
  8765  00318A  5019               	movf	___awdiv@sign,w,c
  8766  00318C  B4D8               	btfsc	status,2,c
  8767  00318E  D004               	goto	l1291
  8768  003190  6C1A               	negf	___awdiv@quotient,c
  8769  003192  1E1B               	comf	___awdiv@quotient+1,f,c
  8770  003194  B0D8               	btfsc	status,0,c
  8771  003196  2A1B               	incf	___awdiv@quotient+1,f,c
  8772  003198                     l1291:
  8773  003198  C01A  F014         	movff	___awdiv@quotient,?___awdiv
  8774  00319C  C01B  F015         	movff	___awdiv@quotient+1,?___awdiv+1
  8775  0031A0  0012               	return	
  8776  0031A2                     __end_of___awdiv:
  8777                           	opt stack 0
  8778                           tblptru	equ	0xFF8
  8779                           tblptrh	equ	0xFF7
  8780                           tblptrl	equ	0xFF6
  8781                           tablat	equ	0xFF5
  8782                           prodh	equ	0xFF4
  8783                           prodl	equ	0xFF3
  8784                           intcon	equ	0xFF2
  8785                           postinc0	equ	0xFEE
  8786                           wreg	equ	0xFE8
  8787                           indf1	equ	0xFE7
  8788                           postinc1	equ	0xFE6
  8789                           postdec1	equ	0xFE5
  8790                           fsr1h	equ	0xFE2
  8791                           fsr1l	equ	0xFE1
  8792                           indf2	equ	0xFDF
  8793                           postinc2	equ	0xFDE
  8794                           postdec2	equ	0xFDD
  8795                           fsr2h	equ	0xFDA
  8796                           fsr2l	equ	0xFD9
  8797                           status	equ	0xFD8
  8798                           
  8799 ;; *************** function _clcd_max_row *****************
  8800 ;; Defined at:
  8801 ;;		line 107 in file "clcd.c"
  8802 ;; Parameters:    Size  Location     Type
  8803 ;;		None
  8804 ;; Auto vars:     Size  Location     Type
  8805 ;;		None
  8806 ;; Return value:  Size  Location     Type
  8807 ;;                  1    wreg      unsigned char 
  8808 ;; Registers used:
  8809 ;;		wreg, status,2
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8819 ;;Total ram usage:        0 bytes
  8820 ;; Hardware stack levels used:    1
  8821 ;; Hardware stack levels required when called:    5
  8822 ;; This function calls:
  8823 ;;		Nothing
  8824 ;; This function is called by:
  8825 ;;		_reply_to_host
  8826 ;; This function uses a non-reentrant model
  8827 ;;
  8828                           
  8829                           	psect	text40
  8830  003C18                     __ptext40:
  8831                           	opt stack 0
  8832  003C18                     _clcd_max_row:
  8833                           	opt stack 23
  8834                           
  8835                           ;clcd.c: 108: if (clcd_config_data.init_done == 0)
  8836                           
  8837                           ;incstack = 0
  8838  003C18  5044               	movf	_clcd_config_data,w,c
  8839  003C1A  A4D8               	btfss	status,2,c
  8840  003C1C  D002               	goto	l437
  8841                           
  8842                           ;clcd.c: 109: return 0;
  8843  003C1E  0E00               	movlw	0
  8844  003C20  0012               	return	
  8845  003C22                     l437:
  8846                           
  8847                           ;clcd.c: 110: else
  8848                           ;clcd.c: 111: return clcd_config_data.clcd_max_row;
  8849  003C22  5045               	movf	_clcd_config_data+1,w,c
  8850  003C24  0012               	return	
  8851  003C26                     __end_of_clcd_max_row:
  8852                           	opt stack 0
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodh	equ	0xFF4
  8858                           prodl	equ	0xFF3
  8859                           intcon	equ	0xFF2
  8860                           postinc0	equ	0xFEE
  8861                           wreg	equ	0xFE8
  8862                           indf1	equ	0xFE7
  8863                           postinc1	equ	0xFE6
  8864                           postdec1	equ	0xFE5
  8865                           fsr1h	equ	0xFE2
  8866                           fsr1l	equ	0xFE1
  8867                           indf2	equ	0xFDF
  8868                           postinc2	equ	0xFDE
  8869                           postdec2	equ	0xFDD
  8870                           fsr2h	equ	0xFDA
  8871                           fsr2l	equ	0xFD9
  8872                           status	equ	0xFD8
  8873                           
  8874 ;; *************** function _clcd_max_col *****************
  8875 ;; Defined at:
  8876 ;;		line 114 in file "clcd.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;		None
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;		None
  8881 ;; Return value:  Size  Location     Type
  8882 ;;                  1    wreg      unsigned char 
  8883 ;; Registers used:
  8884 ;;		wreg, status,2
  8885 ;; Tracked objects:
  8886 ;;		On entry : 0/0
  8887 ;;		On exit  : 0/0
  8888 ;;		Unchanged: 0/0
  8889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8894 ;;Total ram usage:        0 bytes
  8895 ;; Hardware stack levels used:    1
  8896 ;; Hardware stack levels required when called:    5
  8897 ;; This function calls:
  8898 ;;		Nothing
  8899 ;; This function is called by:
  8900 ;;		_reply_to_host
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text41
  8905  003C26                     __ptext41:
  8906                           	opt stack 0
  8907  003C26                     _clcd_max_col:
  8908                           	opt stack 23
  8909                           
  8910                           ;clcd.c: 115: if (clcd_config_data.init_done == 0)
  8911                           
  8912                           ;incstack = 0
  8913  003C26  5044               	movf	_clcd_config_data,w,c
  8914  003C28  A4D8               	btfss	status,2,c
  8915  003C2A  D002               	goto	l442
  8916                           
  8917                           ;clcd.c: 116: return 0;
  8918  003C2C  0E00               	movlw	0
  8919  003C2E  0012               	return	
  8920  003C30                     l442:
  8921                           
  8922                           ;clcd.c: 117: else
  8923                           ;clcd.c: 118: return clcd_config_data.clcd_max_col;
  8924  003C30  5046               	movf	_clcd_config_data+2,w,c
  8925  003C32  0012               	return	
  8926  003C34                     __end_of_clcd_max_col:
  8927                           	opt stack 0
  8928                           tblptru	equ	0xFF8
  8929                           tblptrh	equ	0xFF7
  8930                           tblptrl	equ	0xFF6
  8931                           tablat	equ	0xFF5
  8932                           prodh	equ	0xFF4
  8933                           prodl	equ	0xFF3
  8934                           intcon	equ	0xFF2
  8935                           postinc0	equ	0xFEE
  8936                           wreg	equ	0xFE8
  8937                           indf1	equ	0xFE7
  8938                           postinc1	equ	0xFE6
  8939                           postdec1	equ	0xFE5
  8940                           fsr1h	equ	0xFE2
  8941                           fsr1l	equ	0xFE1
  8942                           indf2	equ	0xFDF
  8943                           postinc2	equ	0xFDE
  8944                           postdec2	equ	0xFDD
  8945                           fsr2h	equ	0xFDA
  8946                           fsr2l	equ	0xFD9
  8947                           status	equ	0xFD8
  8948                           
  8949 ;; *************** function _parse_cmd_str *****************
  8950 ;; Defined at:
  8951 ;;		line 125 in file "cmd_consol.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;  str             2    6[BANK0 ] PTR unsigned char 
  8954 ;;		 -> uart_str(150), 
  8955 ;; Auto vars:     Size  Location     Type
  8956 ;;  i               1   12[BANK0 ] unsigned char 
  8957 ;;  i               1   15[BANK0 ] unsigned char 
  8958 ;;  i               1   11[BANK0 ] unsigned char 
  8959 ;;  uid             1   19[BANK0 ] unsigned char 
  8960 ;;  uid             1   18[BANK0 ] unsigned char 
  8961 ;;  scroll          1   17[BANK0 ] unsigned char 
  8962 ;;  uid             1   16[BANK0 ] unsigned char 
  8963 ;;  column          1   14[BANK0 ] unsigned char 
  8964 ;;  row             1   13[BANK0 ] unsigned char 
  8965 ;;  temp            2   22[BANK0 ] PTR unsigned char 
  8966 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
  8967 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
  8968 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
  8969 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
  8970 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_48(2), 
  8971 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
  8972 ;;		 -> STR_37(7), STR_36(7), STR_33(7), RAM(3895), 
  8973 ;;		 -> STR_31(7), STR_29(7), NULL(0), 
  8974 ;;  ptr             2   20[BANK0 ] PTR unsigned char 
  8975 ;;		 -> uart_str(150), 
  8976 ;; Return value:  Size  Location     Type
  8977 ;;                  1    wreg      unsigned char 
  8978 ;; Registers used:
  8979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8985 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8986 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8987 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8988 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8989 ;;Total ram usage:       18 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    9
  8992 ;; This function calls:
  8993 ;;		_atoi
  8994 ;;		_collect_column
  8995 ;;		_collect_row
  8996 ;;		_get_direction
  8997 ;;		_get_dis_frq
  8998 ;;		_get_over_write_data
  8999 ;;		_get_str
  9000 ;;		_isdigit
  9001 ;;		_memset
  9002 ;;		_printf
  9003 ;;		_strcpy
  9004 ;;		_strlen
  9005 ;;		_strstr
  9006 ;;		_strtok
  9007 ;; This function is called by:
  9008 ;;		_cmd_consol_task
  9009 ;; This function uses a non-reentrant model
  9010 ;;
  9011                           
  9012                           	psect	text42
  9013  0000CA                     __ptext42:
  9014                           	opt stack 0
  9015  0000CA                     _parse_cmd_str:
  9016                           	opt stack 20
  9017                           
  9018                           ;cmd_consol.c: 126: printf("%s..2\r\n", str);
  9019                           
  9020                           ;incstack = 0
  9021  0000CA  0E82               	movlw	low STR_27
  9022  0000CC  6E22               	movwf	printf@f,c
  9023  0000CE  0EFF               	movlw	high STR_27
  9024  0000D0  6E23               	movwf	printf@f+1,c
  9025  0000D2  C0CC  F024         	movff	parse_cmd_str@str,?_printf+2
  9026  0000D6  C0CD  F025         	movff	parse_cmd_str@str+1,?_printf+3
  9027  0000DA  EC1B  F012         	call	_printf	;wreg free
  9028                           
  9029                           ;cmd_consol.c: 127: char *temp;
  9030                           ;cmd_consol.c: 128: char *ptr = str;
  9031  0000DE  C0CC  F0DA         	movff	parse_cmd_str@str,parse_cmd_str@ptr
  9032  0000E2  C0CD  F0DB         	movff	parse_cmd_str@str+1,parse_cmd_str@ptr+1
  9033                           
  9034                           ;cmd_consol.c: 129: if ((temp = strstr(ptr, "MC?")) != (0)) {
  9035  0000E6  C0DA  F031         	movff	parse_cmd_str@ptr,strstr@s1
  9036  0000EA  C0DB  F032         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9037  0000EE  0EED               	movlw	low STR_28
  9038  0000F0  6E33               	movwf	strstr@s2,c
  9039  0000F2  0EFF               	movlw	high STR_28
  9040  0000F4  6E34               	movwf	strstr@s2+1,c
  9041  0000F6  EC3F  F018         	call	_strstr	;wreg free
  9042  0000FA  C031  F0DC         	movff	?_strstr,parse_cmd_str@temp
  9043  0000FE  C032  F0DD         	movff	?_strstr+1,parse_cmd_str@temp+1
  9044  000102  0100               	movlb	0	; () banked
  9045  000104  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9046  000106  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9047  000108  B4D8               	btfsc	status,2,c
  9048  00010A  D037               	goto	l775
  9049                           
  9050                           ; BSR set to: 0
  9051                           ;cmd_consol.c: 130: temp = strtok(ptr, "-', /=");
  9052  00010C  C0DA  F021         	movff	parse_cmd_str@ptr,strtok@s1
  9053  000110  C0DB  F022         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9054  000114  0EA7               	movlw	low STR_29
  9055  000116  6E23               	movwf	strtok@s2,c
  9056  000118  0EFF               	movlw	high STR_29
  9057  00011A  6E24               	movwf	strtok@s2+1,c
  9058  00011C  ECE7  F017         	call	_strtok	;wreg free
  9059  000120  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9060  000124  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9061                           
  9062                           ;cmd_consol.c: 131: if (temp != (0)) {
  9063  000128  0100               	movlb	0	; () banked
  9064  00012A  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9065  00012C  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9066  00012E  B4D8               	btfsc	status,2,c
  9067  000130  EFAD  F007         	goto	l871
  9068                           
  9069                           ; BSR set to: 0
  9070                           ;cmd_consol.c: 132: strcpy(CMD, temp);
  9071  000134  0EB7               	movlw	low _CMD
  9072  000136  6E14               	movwf	strcpy@to,c
  9073  000138  0E00               	movlw	high _CMD
  9074  00013A  6E15               	movwf	strcpy@to+1,c
  9075  00013C  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
  9076  000140  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9077  000144  EC6B  F01B         	call	_strcpy	;wreg free
  9078                           
  9079                           ;cmd_consol.c: 133: valid_cmd = 1;
  9080  000148  0E01               	movlw	1
  9081  00014A  0100               	movlb	0	; () banked
  9082  00014C  6F82               	movwf	_valid_cmd& (0+255),b
  9083                           
  9084                           ; BSR set to: 0
  9085                           ;cmd_consol.c: 134: memset(str, 0, strlen(str));
  9086  00014E  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
  9087  000152  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9088  000156  0E00               	movlw	0
  9089  000158  6E2B               	movwf	memset@c+1,c
  9090  00015A  0E00               	movlw	0
  9091  00015C  6E2A               	movwf	memset@c,c
  9092  00015E  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
  9093  000162  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9094  000166  EC7E  F01A         	call	_strlen	;wreg free
  9095  00016A  C022  F02C         	movff	?_strlen,memset@n
  9096  00016E  C023  F02D         	movff	?_strlen+1,memset@n+1
  9097  000172  EC8E  F01B         	call	_memset	;wreg free
  9098  000176                     l7058:
  9099                           
  9100                           ;cmd_consol.c: 135: return 0;
  9101  000176  0E00               	movlw	0
  9102  000178  0012               	return	
  9103  00017A                     l775:
  9104  00017A  C0DA  F031         	movff	parse_cmd_str@ptr,strstr@s1
  9105  00017E  C0DB  F032         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9106  000182  0EF1               	movlw	low STR_30
  9107  000184  6E33               	movwf	strstr@s2,c
  9108  000186  0EFF               	movlw	high STR_30
  9109  000188  6E34               	movwf	strstr@s2+1,c
  9110  00018A  EC3F  F018         	call	_strstr	;wreg free
  9111  00018E  C031  F0DC         	movff	?_strstr,parse_cmd_str@temp
  9112  000192  C032  F0DD         	movff	?_strstr+1,parse_cmd_str@temp+1
  9113  000196  0100               	movlb	0	; () banked
  9114  000198  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9115  00019A  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9116  00019C  B4D8               	btfsc	status,2,c
  9117  00019E  D036               	goto	l779
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;cmd_consol.c: 138: temp = strtok(ptr, "-', /=");
  9121  0001A0  C0DA  F021         	movff	parse_cmd_str@ptr,strtok@s1
  9122  0001A4  C0DB  F022         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9123  0001A8  0EA7               	movlw	low STR_29
  9124  0001AA  6E23               	movwf	strtok@s2,c
  9125  0001AC  0EFF               	movlw	high STR_29
  9126  0001AE  6E24               	movwf	strtok@s2+1,c
  9127  0001B0  ECE7  F017         	call	_strtok	;wreg free
  9128  0001B4  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9129  0001B8  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9130                           
  9131                           ;cmd_consol.c: 139: if (temp != (0)) {
  9132  0001BC  0100               	movlb	0	; () banked
  9133  0001BE  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9134  0001C0  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9135  0001C2  B4D8               	btfsc	status,2,c
  9136  0001C4  EFAD  F007         	goto	l871
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;cmd_consol.c: 140: strcpy(CMD, temp);
  9140  0001C8  0EB7               	movlw	low _CMD
  9141  0001CA  6E14               	movwf	strcpy@to,c
  9142  0001CC  0E00               	movlw	high _CMD
  9143  0001CE  6E15               	movwf	strcpy@to+1,c
  9144  0001D0  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
  9145  0001D4  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9146  0001D8  EC6B  F01B         	call	_strcpy	;wreg free
  9147                           
  9148                           ;cmd_consol.c: 141: valid_cmd = 1;
  9149  0001DC  0E01               	movlw	1
  9150  0001DE  0100               	movlb	0	; () banked
  9151  0001E0  6F82               	movwf	_valid_cmd& (0+255),b
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;cmd_consol.c: 142: memset(str, 0, strlen(str));
  9155  0001E2  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
  9156  0001E6  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9157  0001EA  0E00               	movlw	0
  9158  0001EC  6E2B               	movwf	memset@c+1,c
  9159  0001EE  0E00               	movlw	0
  9160  0001F0  6E2A               	movwf	memset@c,c
  9161  0001F2  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
  9162  0001F6  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9163  0001FA  EC7E  F01A         	call	_strlen	;wreg free
  9164  0001FE  C022  F02C         	movff	?_strlen,memset@n
  9165  000202  C023  F02D         	movff	?_strlen+1,memset@n+1
  9166  000206  EC8E  F01B         	call	_memset	;wreg free
  9167  00020A  D7B5               	goto	l7058
  9168  00020C                     l779:
  9169  00020C  C0DA  F031         	movff	parse_cmd_str@ptr,strstr@s1
  9170  000210  C0DB  F032         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9171  000214  0EBC               	movlw	low STR_32
  9172  000216  6E33               	movwf	strstr@s2,c
  9173  000218  0EFF               	movlw	high STR_32
  9174  00021A  6E34               	movwf	strstr@s2+1,c
  9175  00021C  EC3F  F018         	call	_strstr	;wreg free
  9176  000220  5031               	movf	?_strstr,w,c
  9177  000222  1032               	iorwf	?_strstr+1,w,c
  9178  000224  B4D8               	btfsc	status,2,c
  9179  000226  D002               	goto	u7260
  9180  000228  0E01               	movlw	1
  9181  00022A  D001               	goto	u7270
  9182  00022C                     u7260:
  9183  00022C  0E00               	movlw	0
  9184  00022E                     u7270:
  9185  00022E  0100               	movlb	0	; () banked
  9186  000230  6FDC               	movwf	parse_cmd_str@temp& (0+255),b
  9187  000232  6BDD               	clrf	(parse_cmd_str@temp+1)& (0+255),b
  9188  000234  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9189  000236  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9190  000238  B4D8               	btfsc	status,2,c
  9191  00023A  D03C               	goto	l782
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;cmd_consol.c: 146: temp = strtok(ptr, "-', /=");
  9195  00023C  C0DA  F021         	movff	parse_cmd_str@ptr,strtok@s1
  9196  000240  C0DB  F022         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9197  000244  0EA7               	movlw	low STR_29
  9198  000246  6E23               	movwf	strtok@s2,c
  9199  000248  0EFF               	movlw	high STR_29
  9200  00024A  6E24               	movwf	strtok@s2+1,c
  9201  00024C  ECE7  F017         	call	_strtok	;wreg free
  9202  000250  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9203  000254  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9204                           
  9205                           ;cmd_consol.c: 147: if (temp != (0)) {
  9206  000258  0100               	movlb	0	; () banked
  9207  00025A  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9208  00025C  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9209  00025E  B4D8               	btfsc	status,2,c
  9210  000260  EFAD  F007         	goto	l871
  9211                           
  9212                           ; BSR set to: 0
  9213                           ;cmd_consol.c: 148: strcpy(CMD, temp);
  9214  000264  0EB7               	movlw	low _CMD
  9215  000266  6E14               	movwf	strcpy@to,c
  9216  000268  0E00               	movlw	high _CMD
  9217  00026A  6E15               	movwf	strcpy@to+1,c
  9218  00026C  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
  9219  000270  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9220  000274  EC6B  F01B         	call	_strcpy	;wreg free
  9221                           
  9222                           ;cmd_consol.c: 149: valid_cmd = 1;
  9223  000278  0E01               	movlw	1
  9224  00027A  0100               	movlb	0	; () banked
  9225  00027C  6F82               	movwf	_valid_cmd& (0+255),b
  9226                           
  9227                           ; BSR set to: 0
  9228                           ;cmd_consol.c: 150: memset(str, 0, strlen(str));
  9229  00027E  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
  9230  000282  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9231  000286  0E00               	movlw	0
  9232  000288  6E2B               	movwf	memset@c+1,c
  9233  00028A  0E00               	movlw	0
  9234  00028C  6E2A               	movwf	memset@c,c
  9235  00028E  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
  9236  000292  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9237  000296  EC7E  F01A         	call	_strlen	;wreg free
  9238  00029A  C022  F02C         	movff	?_strlen,memset@n
  9239  00029E  C023  F02D         	movff	?_strlen+1,memset@n+1
  9240  0002A2  EC8E  F01B         	call	_memset	;wreg free
  9241                           
  9242                           ;cmd_consol.c: 151: printf(".....\r\n");
  9243  0002A6  0E7A               	movlw	low STR_34
  9244  0002A8  6E22               	movwf	printf@f,c
  9245  0002AA  0EFF               	movlw	high STR_34
  9246  0002AC  6E23               	movwf	printf@f+1,c
  9247  0002AE  EC1B  F012         	call	_printf	;wreg free
  9248  0002B2  D761               	goto	l7058
  9249  0002B4                     l782:
  9250  0002B4  C0DA  F031         	movff	parse_cmd_str@ptr,strstr@s1
  9251  0002B8  C0DB  F032         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9252  0002BC  0EDE               	movlw	low STR_35
  9253  0002BE  6E33               	movwf	strstr@s2,c
  9254  0002C0  0EFF               	movlw	high STR_35
  9255  0002C2  6E34               	movwf	strstr@s2+1,c
  9256  0002C4  EC3F  F018         	call	_strstr	;wreg free
  9257  0002C8  C031  F0DC         	movff	?_strstr,parse_cmd_str@temp
  9258  0002CC  C032  F0DD         	movff	?_strstr+1,parse_cmd_str@temp+1
  9259  0002D0  0100               	movlb	0	; () banked
  9260  0002D2  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9261  0002D4  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9262  0002D6  B4D8               	btfsc	status,2,c
  9263  0002D8  D089               	goto	l785
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;cmd_consol.c: 155: temp = strtok(ptr, "-', /=");
  9267  0002DA  C0DA  F021         	movff	parse_cmd_str@ptr,strtok@s1
  9268  0002DE  C0DB  F022         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9269  0002E2  0EA7               	movlw	low STR_29
  9270  0002E4  6E23               	movwf	strtok@s2,c
  9271  0002E6  0EFF               	movlw	high STR_29
  9272  0002E8  6E24               	movwf	strtok@s2+1,c
  9273  0002EA  ECE7  F017         	call	_strtok	;wreg free
  9274  0002EE  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9275  0002F2  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9276                           
  9277                           ;cmd_consol.c: 156: if (temp != (0)) {
  9278  0002F6  0100               	movlb	0	; () banked
  9279  0002F8  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9280  0002FA  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9281  0002FC  B4D8               	btfsc	status,2,c
  9282  0002FE  EFAD  F007         	goto	l871
  9283                           
  9284                           ; BSR set to: 0
  9285                           ;cmd_consol.c: 157: strcpy(CMD, temp);
  9286  000302  0EB7               	movlw	low _CMD
  9287  000304  6E14               	movwf	strcpy@to,c
  9288  000306  0E00               	movlw	high _CMD
  9289  000308  6E15               	movwf	strcpy@to+1,c
  9290  00030A  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
  9291  00030E  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9292  000312  EC6B  F01B         	call	_strcpy	;wreg free
  9293                           
  9294                           ;cmd_consol.c: 158: temp = strtok((0), "-', /=");
  9295  000316  0E00               	movlw	0
  9296  000318  6E21               	movwf	strtok@s1,c
  9297  00031A  0E00               	movlw	0
  9298  00031C  6E22               	movwf	strtok@s1+1,c
  9299  00031E  0EA7               	movlw	low STR_29
  9300  000320  6E23               	movwf	strtok@s2,c
  9301  000322  0EFF               	movlw	high STR_29
  9302  000324  6E24               	movwf	strtok@s2+1,c
  9303  000326  ECE7  F017         	call	_strtok	;wreg free
  9304  00032A  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9305  00032E  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9306                           
  9307                           ;cmd_consol.c: 159: printf("%s..\r\n", temp);
  9308  000332  0E99               	movlw	low STR_38
  9309  000334  6E22               	movwf	printf@f,c
  9310  000336  0EFF               	movlw	high STR_38
  9311  000338  6E23               	movwf	printf@f+1,c
  9312  00033A  C0DC  F024         	movff	parse_cmd_str@temp,?_printf+2
  9313  00033E  C0DD  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9314  000342  EC1B  F012         	call	_printf	;wreg free
  9315                           
  9316                           ;cmd_consol.c: 160: char row = 0, column = 0;
  9317  000346  0E00               	movlw	0
  9318  000348  0100               	movlb	0	; () banked
  9319  00034A  6FD3               	movwf	parse_cmd_str@row& (0+255),b
  9320                           
  9321                           ; BSR set to: 0
  9322  00034C  0E00               	movlw	0
  9323  00034E  6FD4               	movwf	parse_cmd_str@column& (0+255),b
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;cmd_consol.c: 161: if (temp != (0)) {
  9327  000350  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9328  000352  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9329  000354  B4D8               	btfsc	status,2,c
  9330  000356  EFAD  F007         	goto	l871
  9331                           
  9332                           ; BSR set to: 0
  9333                           ;cmd_consol.c: 162: row = atoi(temp);
  9334  00035A  C0DC  F022         	movff	parse_cmd_str@temp,atoi@s
  9335  00035E  C0DD  F023         	movff	parse_cmd_str@temp+1,atoi@s+1
  9336  000362  EC07  F013         	call	_atoi	;wreg free
  9337  000366  5022               	movf	?_atoi,w,c
  9338  000368  0100               	movlb	0	; () banked
  9339  00036A  6FD3               	movwf	parse_cmd_str@row& (0+255),b
  9340                           
  9341                           ; BSR set to: 0
  9342                           ;cmd_consol.c: 163: if (row > 0) {
  9343  00036C  51D3               	movf	parse_cmd_str@row& (0+255),w,b
  9344  00036E  B4D8               	btfsc	status,2,c
  9345  000370  EFAD  F007         	goto	l871
  9346                           
  9347                           ; BSR set to: 0
  9348                           ;cmd_consol.c: 164: temp = strtok((0), "-', /=");
  9349  000374  0E00               	movlw	0
  9350  000376  6E21               	movwf	strtok@s1,c
  9351  000378  0E00               	movlw	0
  9352  00037A  6E22               	movwf	strtok@s1+1,c
  9353  00037C  0EA7               	movlw	low STR_29
  9354  00037E  6E23               	movwf	strtok@s2,c
  9355  000380  0EFF               	movlw	high STR_29
  9356  000382  6E24               	movwf	strtok@s2+1,c
  9357  000384  ECE7  F017         	call	_strtok	;wreg free
  9358  000388  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9359  00038C  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9360                           
  9361                           ;cmd_consol.c: 165: if (temp != (0)) {
  9362  000390  0100               	movlb	0	; () banked
  9363  000392  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9364  000394  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9365  000396  B4D8               	btfsc	status,2,c
  9366  000398  EFAD  F007         	goto	l871
  9367                           
  9368                           ; BSR set to: 0
  9369                           ;cmd_consol.c: 166: column = atoi(temp);
  9370  00039C  C0DC  F022         	movff	parse_cmd_str@temp,atoi@s
  9371  0003A0  C0DD  F023         	movff	parse_cmd_str@temp+1,atoi@s+1
  9372  0003A4  EC07  F013         	call	_atoi	;wreg free
  9373  0003A8  5022               	movf	?_atoi,w,c
  9374  0003AA  0100               	movlb	0	; () banked
  9375  0003AC  6FD4               	movwf	parse_cmd_str@column& (0+255),b
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;cmd_consol.c: 167: if (column > 0) {
  9379  0003AE  51D4               	movf	parse_cmd_str@column& (0+255),w,b
  9380  0003B0  B4D8               	btfsc	status,2,c
  9381  0003B2  EFAD  F007         	goto	l871
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;cmd_consol.c: 168: clcd_init_col = column;
  9385  0003B6  C0D4  F080         	movff	parse_cmd_str@column,_clcd_init_col
  9386                           
  9387                           ;cmd_consol.c: 169: clcd_init_row = row;
  9388  0003BA  C0D3  F081         	movff	parse_cmd_str@row,_clcd_init_row
  9389                           
  9390                           ; BSR set to: 0
  9391                           ;cmd_consol.c: 170: valid_cmd = 1;
  9392  0003BE  0E01               	movlw	1
  9393  0003C0  6F82               	movwf	_valid_cmd& (0+255),b
  9394                           
  9395                           ; BSR set to: 0
  9396                           ;cmd_consol.c: 171: memset(str, 0, strlen(str));
  9397  0003C2  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
  9398  0003C6  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9399  0003CA  0E00               	movlw	0
  9400  0003CC  6E2B               	movwf	memset@c+1,c
  9401  0003CE  0E00               	movlw	0
  9402  0003D0  6E2A               	movwf	memset@c,c
  9403  0003D2  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
  9404  0003D6  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9405  0003DA  EC7E  F01A         	call	_strlen	;wreg free
  9406  0003DE  C022  F02C         	movff	?_strlen,memset@n
  9407  0003E2  C023  F02D         	movff	?_strlen+1,memset@n+1
  9408  0003E6  EC8E  F01B         	call	_memset	;wreg free
  9409  0003EA  D6C5               	goto	l7058
  9410  0003EC                     l785:
  9411  0003EC  C0DA  F031         	movff	parse_cmd_str@ptr,strstr@s1
  9412  0003F0  C0DB  F032         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9413  0003F4  0EC2               	movlw	low STR_40
  9414  0003F6  6E33               	movwf	strstr@s2,c
  9415  0003F8  0EFF               	movlw	high STR_40
  9416  0003FA  6E34               	movwf	strstr@s2+1,c
  9417  0003FC  EC3F  F018         	call	_strstr	;wreg free
  9418  000400  C031  F0DC         	movff	?_strstr,parse_cmd_str@temp
  9419  000404  C032  F0DD         	movff	?_strstr+1,parse_cmd_str@temp+1
  9420  000408  0100               	movlb	0	; () banked
  9421  00040A  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9422  00040C  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9423  00040E  B4D8               	btfsc	status,2,c
  9424  000410  D036               	goto	l792
  9425                           
  9426                           ; BSR set to: 0
  9427                           ;cmd_consol.c: 181: temp = strtok(ptr, "-', /=");
  9428  000412  C0DA  F021         	movff	parse_cmd_str@ptr,strtok@s1
  9429  000416  C0DB  F022         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9430  00041A  0EA7               	movlw	low STR_29
  9431  00041C  6E23               	movwf	strtok@s2,c
  9432  00041E  0EFF               	movlw	high STR_29
  9433  000420  6E24               	movwf	strtok@s2+1,c
  9434  000422  ECE7  F017         	call	_strtok	;wreg free
  9435  000426  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9436  00042A  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9437                           
  9438                           ;cmd_consol.c: 182: if (temp != (0)) {
  9439  00042E  0100               	movlb	0	; () banked
  9440  000430  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9441  000432  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9442  000434  B4D8               	btfsc	status,2,c
  9443  000436  EFAD  F007         	goto	l871
  9444                           
  9445                           ; BSR set to: 0
  9446                           ;cmd_consol.c: 183: strcpy(CMD, temp);
  9447  00043A  0EB7               	movlw	low _CMD
  9448  00043C  6E14               	movwf	strcpy@to,c
  9449  00043E  0E00               	movlw	high _CMD
  9450  000440  6E15               	movwf	strcpy@to+1,c
  9451  000442  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
  9452  000446  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9453  00044A  EC6B  F01B         	call	_strcpy	;wreg free
  9454                           
  9455                           ;cmd_consol.c: 184: valid_cmd = 1;
  9456  00044E  0E01               	movlw	1
  9457  000450  0100               	movlb	0	; () banked
  9458  000452  6F82               	movwf	_valid_cmd& (0+255),b
  9459                           
  9460                           ; BSR set to: 0
  9461                           ;cmd_consol.c: 185: memset(str, 0, strlen(str));
  9462  000454  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
  9463  000458  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9464  00045C  0E00               	movlw	0
  9465  00045E  6E2B               	movwf	memset@c+1,c
  9466  000460  0E00               	movlw	0
  9467  000462  6E2A               	movwf	memset@c,c
  9468  000464  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
  9469  000468  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9470  00046C  EC7E  F01A         	call	_strlen	;wreg free
  9471  000470  C022  F02C         	movff	?_strlen,memset@n
  9472  000474  C023  F02D         	movff	?_strlen+1,memset@n+1
  9473  000478  EC8E  F01B         	call	_memset	;wreg free
  9474  00047C  D67C               	goto	l7058
  9475  00047E                     l792:
  9476  00047E  C0DA  F031         	movff	parse_cmd_str@ptr,strstr@s1
  9477  000482  C0DB  F032         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9478  000486  0ECE               	movlw	low STR_42
  9479  000488  6E33               	movwf	strstr@s2,c
  9480  00048A  0EFF               	movlw	high STR_42
  9481  00048C  6E34               	movwf	strstr@s2+1,c
  9482  00048E  EC3F  F018         	call	_strstr	;wreg free
  9483  000492  C031  F0DC         	movff	?_strstr,parse_cmd_str@temp
  9484  000496  C032  F0DD         	movff	?_strstr+1,parse_cmd_str@temp+1
  9485  00049A  0100               	movlb	0	; () banked
  9486  00049C  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9487  00049E  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9488  0004A0  B4D8               	btfsc	status,2,c
  9489  0004A2  D0CA               	goto	l795
  9490                           
  9491                           ; BSR set to: 0
  9492                           ;cmd_consol.c: 190: if (clcd_config_data.init_done == 1) {
  9493  0004A4  0444               	decf	_clcd_config_data,w,c
  9494  0004A6  A4D8               	btfss	status,2,c
  9495  0004A8  EFAD  F007         	goto	l871
  9496                           
  9497                           ; BSR set to: 0
  9498                           ;cmd_consol.c: 191: cmd_data.data_set = 0;
  9499  0004AC  0E00               	movlw	0
  9500  0004AE  6FAC               	movwf	(_cmd_data+41)& (0+255),b
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;cmd_consol.c: 192: temp = strtok(ptr, "-', /=");
  9504  0004B0  C0DA  F021         	movff	parse_cmd_str@ptr,strtok@s1
  9505  0004B4  C0DB  F022         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9506  0004B8  0EA7               	movlw	low STR_29
  9507  0004BA  6E23               	movwf	strtok@s2,c
  9508  0004BC  0EFF               	movlw	high STR_29
  9509  0004BE  6E24               	movwf	strtok@s2+1,c
  9510  0004C0  ECE7  F017         	call	_strtok	;wreg free
  9511  0004C4  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9512  0004C8  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9513                           
  9514                           ;cmd_consol.c: 193: if (temp != (0)) {
  9515  0004CC  0100               	movlb	0	; () banked
  9516  0004CE  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9517  0004D0  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9518  0004D2  B4D8               	btfsc	status,2,c
  9519  0004D4  EFAD  F007         	goto	l871
  9520                           
  9521                           ; BSR set to: 0
  9522                           ;cmd_consol.c: 194: printf("temp = %s, ", temp);
  9523  0004D8  0EDE               	movlw	low STR_44
  9524  0004DA  6E22               	movwf	printf@f,c
  9525  0004DC  0EFE               	movlw	high STR_44
  9526  0004DE  6E23               	movwf	printf@f+1,c
  9527  0004E0  C0DC  F024         	movff	parse_cmd_str@temp,?_printf+2
  9528  0004E4  C0DD  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9529  0004E8  EC1B  F012         	call	_printf	;wreg free
  9530                           
  9531                           ;cmd_consol.c: 195: strcpy(CMD, temp);
  9532  0004EC  0EB7               	movlw	low _CMD
  9533  0004EE  6E14               	movwf	strcpy@to,c
  9534  0004F0  0E00               	movlw	high _CMD
  9535  0004F2  6E15               	movwf	strcpy@to+1,c
  9536  0004F4  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
  9537  0004F8  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9538  0004FC  EC6B  F01B         	call	_strcpy	;wreg free
  9539                           
  9540                           ;cmd_consol.c: 196: char uid = 0;
  9541  000500  0E00               	movlw	0
  9542  000502  0100               	movlb	0	; () banked
  9543  000504  6FD6               	movwf	parse_cmd_str@uid& (0+255),b
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;cmd_consol.c: 197: cmd_data.uid = -1;
  9547  000506  6983               	setf	_cmd_data& (0+255),b
  9548                           
  9549                           ; BSR set to: 0
  9550                           ;cmd_consol.c: 198: temp = strtok((0), "-', /=");
  9551  000508  0E00               	movlw	0
  9552  00050A  6E21               	movwf	strtok@s1,c
  9553  00050C  0E00               	movlw	0
  9554  00050E  6E22               	movwf	strtok@s1+1,c
  9555  000510  0EA7               	movlw	low STR_29
  9556  000512  6E23               	movwf	strtok@s2,c
  9557  000514  0EFF               	movlw	high STR_29
  9558  000516  6E24               	movwf	strtok@s2+1,c
  9559  000518  ECE7  F017         	call	_strtok	;wreg free
  9560  00051C  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9561  000520  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9562                           
  9563                           ;cmd_consol.c: 199: if (temp != (0)) {
  9564  000524  0100               	movlb	0	; () banked
  9565  000526  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9566  000528  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9567  00052A  B4D8               	btfsc	status,2,c
  9568  00052C  EFAD  F007         	goto	l871
  9569                           
  9570                           ; BSR set to: 0
  9571                           ;cmd_consol.c: 200: printf("temp = %s, ", temp);
  9572  000530  0EDE               	movlw	low STR_44
  9573  000532  6E22               	movwf	printf@f,c
  9574  000534  0EFE               	movlw	high STR_44
  9575  000536  6E23               	movwf	printf@f+1,c
  9576  000538  C0DC  F024         	movff	parse_cmd_str@temp,?_printf+2
  9577  00053C  C0DD  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9578  000540  EC1B  F012         	call	_printf	;wreg free
  9579                           
  9580                           ;cmd_consol.c: 201: char i = 0;
  9581  000544  0E00               	movlw	0
  9582  000546  0100               	movlb	0	; () banked
  9583  000548  6FD1               	movwf	parse_cmd_str@i& (0+255),b
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;cmd_consol.c: 202: uid = temp[0];
  9587  00054A  C0DC  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9588  00054E  C0DD  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9589  000552  0E00               	movlw	low (__mediumconst shr (0+16))
  9590  000554  6EF8               	movwf	tblptru,c
  9591  000556  0E0F               	movlw	(high __ramtop+-1)
  9592  000558  64F7               	cpfsgt	tblptrh,c
  9593  00055A  D003               	bra	u7427
  9594  00055C  0008               	tblrd		*
  9595  00055E  50F5               	movf	tablat,w,c
  9596  000560  D005               	bra	u7420
  9597  000562                     u7427:
  9598  000562  CFF6 FFE9          	movff	tblptrl,fsr0l
  9599  000566  CFF7 FFEA          	movff	tblptrh,fsr0h
  9600  00056A  50EF               	movf	indf0,w,c
  9601  00056C                     u7420:
  9602  00056C  0100               	movlb	0	; () banked
  9603  00056E  6FD6               	movwf	parse_cmd_str@uid& (0+255),b
  9604                           
  9605                           ; BSR set to: 0
  9606                           ;cmd_consol.c: 203: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9607  000570  0E40               	movlw	64
  9608  000572  65D6               	cpfsgt	parse_cmd_str@uid& (0+255),b
  9609  000574  D05F               	goto	l799
  9610                           
  9611                           ; BSR set to: 0
  9612  000576  5047               	movf	_clcd_config_data+3,w,c
  9613  000578  5DD6               	subwf	parse_cmd_str@uid& (0+255),w,b
  9614  00057A  B0D8               	btfsc	status,0,c
  9615  00057C  D05B               	goto	l799
  9616                           
  9617                           ; BSR set to: 0
  9618                           ;cmd_consol.c: 204: printf("uid = %d, ", uid);
  9619  00057E  0E2F               	movlw	low STR_47
  9620  000580  6E22               	movwf	printf@f,c
  9621  000582  0EFF               	movlw	high STR_47
  9622  000584  6E23               	movwf	printf@f+1,c
  9623  000586  C0D6  F024         	movff	parse_cmd_str@uid,?_printf+2
  9624  00058A  6A25               	clrf	?_printf+3,c
  9625  00058C  EC1B  F012         	call	_printf	;wreg free
  9626                           
  9627                           ;cmd_consol.c: 205: cmd_data.uid = uid;
  9628  000590  C0D6  F083         	movff	parse_cmd_str@uid,_cmd_data
  9629                           
  9630                           ;cmd_consol.c: 206: temp = strtok((0), ",");
  9631  000594  0E00               	movlw	0
  9632  000596  6E21               	movwf	strtok@s1,c
  9633  000598  0E00               	movlw	0
  9634  00059A  6E22               	movwf	strtok@s1+1,c
  9635  00059C  0EFC               	movlw	low STR_48
  9636  00059E  6E23               	movwf	strtok@s2,c
  9637  0005A0  0EFF               	movlw	high STR_48
  9638  0005A2  6E24               	movwf	strtok@s2+1,c
  9639  0005A4  ECE7  F017         	call	_strtok	;wreg free
  9640  0005A8  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9641  0005AC  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9642                           
  9643                           ;cmd_consol.c: 207: if (temp != (0)) {
  9644  0005B0  0100               	movlb	0	; () banked
  9645  0005B2  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9646  0005B4  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9647  0005B6  B4D8               	btfsc	status,2,c
  9648  0005B8  EFAD  F007         	goto	l871
  9649                           
  9650                           ; BSR set to: 0
  9651                           ;cmd_consol.c: 208: printf("str = %s\r\n", temp);
  9652  0005BC  0E24               	movlw	low STR_49
  9653  0005BE  6E22               	movwf	printf@f,c
  9654  0005C0  0EFF               	movlw	high STR_49
  9655  0005C2  6E23               	movwf	printf@f+1,c
  9656  0005C4  C0DC  F024         	movff	parse_cmd_str@temp,?_printf+2
  9657  0005C8  C0DD  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9658  0005CC  EC1B  F012         	call	_printf	;wreg free
  9659                           
  9660                           ;cmd_consol.c: 209: if (strlen(temp) < 40) {
  9661  0005D0  C0DC  F022         	movff	parse_cmd_str@temp,strlen@s
  9662  0005D4  C0DD  F023         	movff	parse_cmd_str@temp+1,strlen@s+1
  9663  0005D8  EC7E  F01A         	call	_strlen	;wreg free
  9664  0005DC  5023               	movf	?_strlen+1,w,c
  9665  0005DE  E128               	bnz	l7208
  9666  0005E0  0E28               	movlw	40
  9667  0005E2  5C22               	subwf	?_strlen,w,c
  9668  0005E4  B0D8               	btfsc	status,0,c
  9669  0005E6  D024               	goto	l801
  9670                           
  9671                           ;cmd_consol.c: 210: strcpy(cmd_data.data, temp);
  9672  0005E8  0E84               	movlw	low (_cmd_data+1)
  9673  0005EA  6E14               	movwf	strcpy@to,c
  9674  0005EC  0E00               	movlw	high (_cmd_data+1)
  9675  0005EE  6E15               	movwf	strcpy@to+1,c
  9676  0005F0  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
  9677  0005F4  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9678  0005F8  EC6B  F01B         	call	_strcpy	;wreg free
  9679                           
  9680                           ;cmd_consol.c: 211: valid_cmd = 1;
  9681  0005FC  0E01               	movlw	1
  9682  0005FE  0100               	movlb	0	; () banked
  9683  000600  6F82               	movwf	_valid_cmd& (0+255),b
  9684                           
  9685                           ; BSR set to: 0
  9686                           ;cmd_consol.c: 212: cmd_data.data_set = 1;
  9687  000602  0E01               	movlw	1
  9688  000604  6FAC               	movwf	(_cmd_data+41)& (0+255),b
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;cmd_consol.c: 213: memset(str, 0, strlen(str));
  9692  000606  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
  9693  00060A  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
  9694  00060E  0E00               	movlw	0
  9695  000610  6E2B               	movwf	memset@c+1,c
  9696  000612  0E00               	movlw	0
  9697  000614  6E2A               	movwf	memset@c,c
  9698  000616  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
  9699  00061A  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
  9700  00061E  EC7E  F01A         	call	_strlen	;wreg free
  9701  000622  C022  F02C         	movff	?_strlen,memset@n
  9702  000626  C023  F02D         	movff	?_strlen+1,memset@n+1
  9703  00062A  EC8E  F01B         	call	_memset	;wreg free
  9704  00062E  D5A3               	goto	l7058
  9705  000630                     l801:
  9706  000630                     l7208:
  9707                           
  9708                           ;cmd_consol.c: 216: return 2;
  9709  000630  0E02               	movlw	2
  9710  000632  0012               	return	
  9711  000634                     l799:
  9712                           
  9713                           ;cmd_consol.c: 220: return 8;
  9714  000634  0E08               	movlw	8
  9715  000636  0012               	return	
  9716  000638                     l795:
  9717  000638  C0DA  F031         	movff	parse_cmd_str@ptr,strstr@s1
  9718  00063C  C0DB  F032         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9719  000640  0E8A               	movlw	low STR_50
  9720  000642  6E33               	movwf	strstr@s2,c
  9721  000644  0EFF               	movlw	high STR_50
  9722  000646  6E34               	movwf	strstr@s2+1,c
  9723  000648  EC3F  F018         	call	_strstr	;wreg free
  9724  00064C  C031  F0DC         	movff	?_strstr,parse_cmd_str@temp
  9725  000650  C032  F0DD         	movff	?_strstr+1,parse_cmd_str@temp+1
  9726  000654  0100               	movlb	0	; () banked
  9727  000656  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9728  000658  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9729  00065A  B4D8               	btfsc	status,2,c
  9730  00065C  D124               	goto	l805
  9731                           
  9732                           ; BSR set to: 0
  9733                           ;cmd_consol.c: 226: printf("%s...4\r\n", temp);
  9734  00065E  0E44               	movlw	low STR_51
  9735  000660  6E22               	movwf	printf@f,c
  9736  000662  0EFF               	movlw	high STR_51
  9737  000664  6E23               	movwf	printf@f+1,c
  9738  000666  C0DC  F024         	movff	parse_cmd_str@temp,?_printf+2
  9739  00066A  C0DD  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9740  00066E  EC1B  F012         	call	_printf	;wreg free
  9741                           
  9742                           ;cmd_consol.c: 227: if (clcd_config_data.init_done == 1) {
  9743  000672  0444               	decf	_clcd_config_data,w,c
  9744  000674  A4D8               	btfss	status,2,c
  9745  000676  EFAD  F007         	goto	l871
  9746                           
  9747                           ;cmd_consol.c: 228: cmd_data.scroll_set = 0;
  9748  00067A  0E00               	movlw	0
  9749  00067C  0100               	movlb	0	; () banked
  9750  00067E  6FB3               	movwf	(_cmd_data+48)& (0+255),b
  9751                           
  9752                           ; BSR set to: 0
  9753                           ;cmd_consol.c: 229: temp = strtok(ptr, "-', /=");
  9754  000680  C0DA  F021         	movff	parse_cmd_str@ptr,strtok@s1
  9755  000684  C0DB  F022         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9756  000688  0EA7               	movlw	low STR_29
  9757  00068A  6E23               	movwf	strtok@s2,c
  9758  00068C  0EFF               	movlw	high STR_29
  9759  00068E  6E24               	movwf	strtok@s2+1,c
  9760  000690  ECE7  F017         	call	_strtok	;wreg free
  9761  000694  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9762  000698  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9763                           
  9764                           ;cmd_consol.c: 230: if (temp != (0)) {
  9765  00069C  0100               	movlb	0	; () banked
  9766  00069E  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9767  0006A0  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9768  0006A2  B4D8               	btfsc	status,2,c
  9769  0006A4  EFAD  F007         	goto	l871
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;cmd_consol.c: 231: strcpy(CMD, temp);
  9773  0006A8  0EB7               	movlw	low _CMD
  9774  0006AA  6E14               	movwf	strcpy@to,c
  9775  0006AC  0E00               	movlw	high _CMD
  9776  0006AE  6E15               	movwf	strcpy@to+1,c
  9777  0006B0  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
  9778  0006B4  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9779  0006B8  EC6B  F01B         	call	_strcpy	;wreg free
  9780                           
  9781                           ;cmd_consol.c: 232: char scroll = 0;
  9782  0006BC  0E00               	movlw	0
  9783  0006BE  0100               	movlb	0	; () banked
  9784  0006C0  6FD7               	movwf	parse_cmd_str@scroll& (0+255),b
  9785                           
  9786                           ; BSR set to: 0
  9787                           ;cmd_consol.c: 233: char uid = 0;
  9788  0006C2  0E00               	movlw	0
  9789  0006C4  6FD8               	movwf	parse_cmd_str@uid_1789& (0+255),b
  9790                           
  9791                           ;cmd_consol.c: 234: temp = strtok((0), "-', /=");
  9792  0006C6  0E00               	movlw	0
  9793  0006C8  6E21               	movwf	strtok@s1,c
  9794  0006CA  0E00               	movlw	0
  9795  0006CC  6E22               	movwf	strtok@s1+1,c
  9796  0006CE  0EA7               	movlw	low STR_29
  9797  0006D0  6E23               	movwf	strtok@s2,c
  9798  0006D2  0EFF               	movlw	high STR_29
  9799  0006D4  6E24               	movwf	strtok@s2+1,c
  9800  0006D6  ECE7  F017         	call	_strtok	;wreg free
  9801  0006DA  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9802  0006DE  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9803                           
  9804                           ;cmd_consol.c: 235: if (temp != (0)) {
  9805  0006E2  0100               	movlb	0	; () banked
  9806  0006E4  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9807  0006E6  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9808  0006E8  B4D8               	btfsc	status,2,c
  9809  0006EA  EFAD  F007         	goto	l871
  9810                           
  9811                           ; BSR set to: 0
  9812                           ;cmd_consol.c: 236: printf("%s...5\r\n", temp);
  9813  0006EE  0E4D               	movlw	low STR_54
  9814  0006F0  6E22               	movwf	printf@f,c
  9815  0006F2  0EFF               	movlw	high STR_54
  9816  0006F4  6E23               	movwf	printf@f+1,c
  9817  0006F6  C0DC  F024         	movff	parse_cmd_str@temp,?_printf+2
  9818  0006FA  C0DD  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9819  0006FE  EC1B  F012         	call	_printf	;wreg free
  9820                           
  9821                           ;cmd_consol.c: 237: char i = 0;
  9822  000702  0E00               	movlw	0
  9823  000704  0100               	movlb	0	; () banked
  9824  000706  6FD5               	movwf	parse_cmd_str@i_1792& (0+255),b
  9825                           
  9826                           ; BSR set to: 0
  9827                           ;cmd_consol.c: 238: uid = temp[0];
  9828  000708  C0DC  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9829  00070C  C0DD  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9830  000710  0E00               	movlw	low (__mediumconst shr (0+16))
  9831  000712  6EF8               	movwf	tblptru,c
  9832  000714  0E0F               	movlw	(high __ramtop+-1)
  9833  000716  64F7               	cpfsgt	tblptrh,c
  9834  000718  D003               	bra	u7517
  9835  00071A  0008               	tblrd		*
  9836  00071C  50F5               	movf	tablat,w,c
  9837  00071E  D005               	bra	u7510
  9838  000720                     u7517:
  9839  000720  CFF6 FFE9          	movff	tblptrl,fsr0l
  9840  000724  CFF7 FFEA          	movff	tblptrh,fsr0h
  9841  000728  50EF               	movf	indf0,w,c
  9842  00072A                     u7510:
  9843  00072A  0100               	movlb	0	; () banked
  9844  00072C  6FD8               	movwf	parse_cmd_str@uid_1789& (0+255),b
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;cmd_consol.c: 239: cmd_data.scroll = -1;
  9848  00072E  69B2               	setf	(_cmd_data+47)& (0+255),b
  9849                           
  9850                           ; BSR set to: 0
  9851                           ;cmd_consol.c: 240: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9852  000730  0E40               	movlw	64
  9853  000732  65D8               	cpfsgt	parse_cmd_str@uid_1789& (0+255),b
  9854  000734  D0B6               	goto	l809
  9855                           
  9856                           ; BSR set to: 0
  9857  000736  5047               	movf	_clcd_config_data+3,w,c
  9858  000738  5DD8               	subwf	parse_cmd_str@uid_1789& (0+255),w,b
  9859  00073A  B0D8               	btfsc	status,0,c
  9860  00073C  D0B2               	goto	l809
  9861                           
  9862                           ; BSR set to: 0
  9863                           ;cmd_consol.c: 241: printf("uid = %d, ", uid);
  9864  00073E  0E2F               	movlw	low STR_47
  9865  000740  6E22               	movwf	printf@f,c
  9866  000742  0EFF               	movlw	high STR_47
  9867  000744  6E23               	movwf	printf@f+1,c
  9868  000746  C0D8  F024         	movff	parse_cmd_str@uid_1789,?_printf+2
  9869  00074A  6A25               	clrf	?_printf+3,c
  9870  00074C  EC1B  F012         	call	_printf	;wreg free
  9871                           
  9872                           ;cmd_consol.c: 242: if (uid == cmd_data.uid) {
  9873  000750  0100               	movlb	0	; () banked
  9874  000752  51D8               	movf	parse_cmd_str@uid_1789& (0+255),w,b
  9875  000754  1983               	xorwf	_cmd_data& (0+255),w,b
  9876  000756  A4D8               	btfss	status,2,c
  9877  000758  EFAD  F007         	goto	l871
  9878                           
  9879                           ; BSR set to: 0
  9880                           ;cmd_consol.c: 243: temp = strtok((0), "-', /=");
  9881  00075C  0E00               	movlw	0
  9882  00075E  6E21               	movwf	strtok@s1,c
  9883  000760  0E00               	movlw	0
  9884  000762  6E22               	movwf	strtok@s1+1,c
  9885  000764  0EA7               	movlw	low STR_29
  9886  000766  6E23               	movwf	strtok@s2,c
  9887  000768  0EFF               	movlw	high STR_29
  9888  00076A  6E24               	movwf	strtok@s2+1,c
  9889  00076C  ECE7  F017         	call	_strtok	;wreg free
  9890  000770  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
  9891  000774  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
  9892                           
  9893                           ;cmd_consol.c: 244: if (temp != (0)) {
  9894  000778  0100               	movlb	0	; () banked
  9895  00077A  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
  9896  00077C  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9897  00077E  B4D8               	btfsc	status,2,c
  9898  000780  D3EC               	goto	l871
  9899                           
  9900                           ; BSR set to: 0
  9901                           ;cmd_consol.c: 245: printf("%s...6\r\n", temp);
  9902  000782  0E56               	movlw	low STR_57
  9903  000784  6E22               	movwf	printf@f,c
  9904  000786  0EFF               	movlw	high STR_57
  9905  000788  6E23               	movwf	printf@f+1,c
  9906  00078A  C0DC  F024         	movff	parse_cmd_str@temp,?_printf+2
  9907  00078E  C0DD  F025         	movff	parse_cmd_str@temp+1,?_printf+3
  9908  000792  EC1B  F012         	call	_printf	;wreg free
  9909                           
  9910                           ;cmd_consol.c: 246: for (i = 0; i < strlen(temp); i++) {
  9911  000796  0E00               	movlw	0
  9912  000798  0100               	movlb	0	; () banked
  9913  00079A  6FD5               	movwf	parse_cmd_str@i_1792& (0+255),b
  9914  00079C  D048               	goto	l812
  9915  00079E                     
  9916                           ; BSR set to: 0
  9917                           ;cmd_consol.c: 247: if (isdigit(temp[i]) == 1) {
  9918                           
  9919                           ; BSR set to: 0
  9920  00079E  51D5               	movf	parse_cmd_str@i_1792& (0+255),w,b
  9921  0007A0  0D01               	mullw	1
  9922  0007A2  C0DC  F0CE         	movff	parse_cmd_str@temp,??_parse_cmd_str
  9923  0007A6  C0DD  F0CF         	movff	parse_cmd_str@temp+1,??_parse_cmd_str+1
  9924  0007AA  50F3               	movf	prodl,w,c
  9925  0007AC  27CE               	addwf	??_parse_cmd_str& (0+255),f,b
  9926  0007AE  50F4               	movf	prodh,w,c
  9927  0007B0  23CF               	addwfc	(??_parse_cmd_str+1)& (0+255),f,b
  9928  0007B2  C0CE  FFF6         	movff	??_parse_cmd_str,tblptrl
  9929  0007B6  C0CF  FFF7         	movff	??_parse_cmd_str+1,tblptrh
  9930  0007BA  0E00               	movlw	low (__mediumconst shr (0+16))
  9931  0007BC  6EF8               	movwf	tblptru,c
  9932  0007BE  0E0F               	movlw	(high __ramtop+-1)
  9933  0007C0  64F7               	cpfsgt	tblptrh,c
  9934  0007C2  D003               	bra	u7567
  9935  0007C4  0008               	tblrd		*
  9936  0007C6  50F5               	movf	tablat,w,c
  9937  0007C8  D005               	bra	u7560
  9938  0007CA                     u7567:
  9939  0007CA  CFF6 FFE9          	movff	tblptrl,fsr0l
  9940  0007CE  CFF7 FFEA          	movff	tblptrh,fsr0h
  9941  0007D2  50EF               	movf	indf0,w,c
  9942  0007D4                     u7560:
  9943  0007D4  EC80  F01D         	call	_isdigit
  9944  0007D8  A0D8               	btfss	status,0,c
  9945  0007DA  D025               	goto	l814
  9946                           
  9947                           ;cmd_consol.c: 248: scroll = scroll * 10 + (temp[i] - '0');
  9948  0007DC  0100               	movlb	0	; () banked
  9949  0007DE  51D5               	movf	parse_cmd_str@i_1792& (0+255),w,b
  9950  0007E0  0D01               	mullw	1
  9951  0007E2  C0DC  F0CE         	movff	parse_cmd_str@temp,??_parse_cmd_str
  9952  0007E6  C0DD  F0CF         	movff	parse_cmd_str@temp+1,??_parse_cmd_str+1
  9953  0007EA  50F3               	movf	prodl,w,c
  9954  0007EC  27CE               	addwf	??_parse_cmd_str& (0+255),f,b
  9955  0007EE  50F4               	movf	prodh,w,c
  9956  0007F0  23CF               	addwfc	(??_parse_cmd_str+1)& (0+255),f,b
  9957  0007F2  C0CE  FFF6         	movff	??_parse_cmd_str,tblptrl
  9958  0007F6  C0CF  FFF7         	movff	??_parse_cmd_str+1,tblptrh
  9959  0007FA  0E00               	movlw	low (__mediumconst shr (0+16))
  9960  0007FC  6EF8               	movwf	tblptru,c
  9961  0007FE  0E0F               	movlw	(high __ramtop+-1)
  9962  000800  64F7               	cpfsgt	tblptrh,c
  9963  000802  D003               	bra	u7587
  9964  000804  0008               	tblrd		*
  9965  000806  50F5               	movf	tablat,w,c
  9966  000808  D005               	bra	u7580
  9967  00080A                     u7587:
  9968  00080A  CFF6 FFE9          	movff	tblptrl,fsr0l
  9969  00080E  CFF7 FFEA          	movff	tblptrh,fsr0h
  9970  000812  50EF               	movf	indf0,w,c
  9971  000814                     u7580:
  9972  000814  0100               	movlb	0	; () banked
  9973  000816  6FD0               	movwf	(??_parse_cmd_str+2)& (0+255),b
  9974  000818  51D7               	movf	parse_cmd_str@scroll& (0+255),w,b
  9975  00081A  0D0A               	mullw	10
  9976  00081C  50F3               	movf	prodl,w,c
  9977  00081E  25D0               	addwf	(??_parse_cmd_str+2)& (0+255),w,b
  9978  000820  0FD0               	addlw	208
  9979  000822  6FD7               	movwf	parse_cmd_str@scroll& (0+255),b
  9980                           
  9981                           ;cmd_consol.c: 249: } else {
  9982  000824  D002               	goto	l815
  9983  000826                     l814:
  9984                           
  9985                           ;cmd_consol.c: 251: return 0;
  9986                           
  9987                           ; BSR set to: 0
  9988  000826  0E00               	movlw	0
  9989  000828  0012               	return	
  9990  00082A                     l815:
  9991  00082A  0100               	movlb	0	; () banked
  9992  00082C  2BD5               	incf	parse_cmd_str@i_1792& (0+255),f,b
  9993  00082E                     l812:
  9994                           
  9995                           ; BSR set to: 0
  9996                           
  9997                           ; BSR set to: 0
  9998  00082E  C0DC  F022         	movff	parse_cmd_str@temp,strlen@s
  9999  000832  C0DD  F023         	movff	parse_cmd_str@temp+1,strlen@s+1
 10000  000836  EC7E  F01A         	call	_strlen	;wreg free
 10001  00083A  0100               	movlb	0	; () banked
 10002  00083C  51D5               	movf	parse_cmd_str@i_1792& (0+255),w,b
 10003  00083E  6FCE               	movwf	??_parse_cmd_str& (0+255),b
 10004  000840  6BCF               	clrf	(??_parse_cmd_str+1)& (0+255),b
 10005  000842  5022               	movf	?_strlen,w,c
 10006  000844  5DCE               	subwf	??_parse_cmd_str& (0+255),w,b
 10007  000846  5023               	movf	?_strlen+1,w,c
 10008  000848  59CF               	subwfb	(??_parse_cmd_str+1)& (0+255),w,b
 10009  00084A  A0D8               	btfss	status,0,c
 10010  00084C  D7A8               	goto	l813
 10011                           
 10012                           ; BSR set to: 0
 10013                           ;cmd_consol.c: 252: }
 10014                           ;cmd_consol.c: 253: }
 10015                           ;cmd_consol.c: 255: if (scroll < 3) {
 10016                           
 10017                           ; BSR set to: 0
 10018  00084E  0E03               	movlw	3
 10019  000850  61D7               	cpfslt	parse_cmd_str@scroll& (0+255),b
 10020  000852  D025               	goto	l817
 10021                           
 10022                           ; BSR set to: 0
 10023                           ;cmd_consol.c: 256: printf("scroll = %d, ", scroll);
 10024  000854  0E7B               	movlw	low STR_58
 10025  000856  6E22               	movwf	printf@f,c
 10026  000858  0EFE               	movlw	high STR_58
 10027  00085A  6E23               	movwf	printf@f+1,c
 10028  00085C  C0D7  F024         	movff	parse_cmd_str@scroll,?_printf+2
 10029  000860  6A25               	clrf	?_printf+3,c
 10030  000862  EC1B  F012         	call	_printf	;wreg free
 10031                           
 10032                           ;cmd_consol.c: 257: cmd_data.scroll = scroll;
 10033  000866  C0D7  F0B2         	movff	parse_cmd_str@scroll,_cmd_data+47
 10034                           
 10035                           ;cmd_consol.c: 258: cmd_data.scroll_set = 1;
 10036  00086A  0E01               	movlw	1
 10037  00086C  0100               	movlb	0	; () banked
 10038  00086E  6FB3               	movwf	(_cmd_data+48)& (0+255),b
 10039                           
 10040                           ; BSR set to: 0
 10041                           ;cmd_consol.c: 259: valid_cmd = 1;
 10042  000870  0E01               	movlw	1
 10043  000872  6F82               	movwf	_valid_cmd& (0+255),b
 10044                           
 10045                           ; BSR set to: 0
 10046                           ;cmd_consol.c: 260: memset(str, 0, strlen(str));
 10047  000874  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
 10048  000878  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
 10049  00087C  0E00               	movlw	0
 10050  00087E  6E2B               	movwf	memset@c+1,c
 10051  000880  0E00               	movlw	0
 10052  000882  6E2A               	movwf	memset@c,c
 10053  000884  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
 10054  000888  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
 10055  00088C  EC7E  F01A         	call	_strlen	;wreg free
 10056  000890  C022  F02C         	movff	?_strlen,memset@n
 10057  000894  C023  F02D         	movff	?_strlen+1,memset@n+1
 10058  000898  EC8E  F01B         	call	_memset	;wreg free
 10059  00089C  D46C               	goto	l7058
 10060  00089E                     l817:
 10061                           
 10062                           ;cmd_consol.c: 263: return 4;
 10063  00089E  0E04               	movlw	4
 10064  0008A0  0012               	return	
 10065  0008A2                     l809:
 10066                           
 10067                           ;cmd_consol.c: 268: return 8;
 10068  0008A2  0E08               	movlw	8
 10069  0008A4  0012               	return	
 10070  0008A6                     l805:
 10071  0008A6  C0DA  F031         	movff	parse_cmd_str@ptr,strstr@s1
 10072  0008AA  C0DB  F032         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10073  0008AE  0EAE               	movlw	low STR_59
 10074  0008B0  6E33               	movwf	strstr@s2,c
 10075  0008B2  0EFF               	movlw	high STR_59
 10076  0008B4  6E34               	movwf	strstr@s2+1,c
 10077  0008B6  EC3F  F018         	call	_strstr	;wreg free
 10078  0008BA  C031  F0DC         	movff	?_strstr,parse_cmd_str@temp
 10079  0008BE  C032  F0DD         	movff	?_strstr+1,parse_cmd_str@temp+1
 10080  0008C2  0100               	movlb	0	; () banked
 10081  0008C4  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10082  0008C6  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10083  0008C8  B4D8               	btfsc	status,2,c
 10084  0008CA  D137               	goto	l821
 10085                           
 10086                           ; BSR set to: 0
 10087                           ;cmd_consol.c: 274: if (clcd_config_data.init_done == 1) {
 10088  0008CC  0444               	decf	_clcd_config_data,w,c
 10089  0008CE  A4D8               	btfss	status,2,c
 10090  0008D0  D344               	goto	l871
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;cmd_consol.c: 275: cmd_data.row_col_set = 0;
 10094  0008D2  0E00               	movlw	0
 10095  0008D4  6FB1               	movwf	(_cmd_data+46)& (0+255),b
 10096                           
 10097                           ; BSR set to: 0
 10098                           ;cmd_consol.c: 276: temp = strtok(ptr, "-', /=");
 10099  0008D6  C0DA  F021         	movff	parse_cmd_str@ptr,strtok@s1
 10100  0008DA  C0DB  F022         	movff	parse_cmd_str@ptr+1,strtok@s1+1
 10101  0008DE  0EA7               	movlw	low STR_29
 10102  0008E0  6E23               	movwf	strtok@s2,c
 10103  0008E2  0EFF               	movlw	high STR_29
 10104  0008E4  6E24               	movwf	strtok@s2+1,c
 10105  0008E6  ECE7  F017         	call	_strtok	;wreg free
 10106  0008EA  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10107  0008EE  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10108                           
 10109                           ;cmd_consol.c: 277: if (temp != (0)) {
 10110  0008F2  0100               	movlb	0	; () banked
 10111  0008F4  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10112  0008F6  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10113  0008F8  B4D8               	btfsc	status,2,c
 10114  0008FA  D32F               	goto	l871
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;cmd_consol.c: 278: strcpy(CMD, temp);
 10118  0008FC  0EB7               	movlw	low _CMD
 10119  0008FE  6E14               	movwf	strcpy@to,c
 10120  000900  0E00               	movlw	high _CMD
 10121  000902  6E15               	movwf	strcpy@to+1,c
 10122  000904  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
 10123  000908  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10124  00090C  EC6B  F01B         	call	_strcpy	;wreg free
 10125                           
 10126                           ;cmd_consol.c: 279: temp = strtok((0), "-', /=");
 10127  000910  0E00               	movlw	0
 10128  000912  6E21               	movwf	strtok@s1,c
 10129  000914  0E00               	movlw	0
 10130  000916  6E22               	movwf	strtok@s1+1,c
 10131  000918  0EA7               	movlw	low STR_29
 10132  00091A  6E23               	movwf	strtok@s2,c
 10133  00091C  0EFF               	movlw	high STR_29
 10134  00091E  6E24               	movwf	strtok@s2+1,c
 10135  000920  ECE7  F017         	call	_strtok	;wreg free
 10136  000924  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10137  000928  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10138                           
 10139                           ;cmd_consol.c: 280: char uid = 0;
 10140  00092C  0E00               	movlw	0
 10141  00092E  0100               	movlb	0	; () banked
 10142  000930  6FD9               	movwf	parse_cmd_str@uid_1800& (0+255),b
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;cmd_consol.c: 281: if (temp != (0)) {
 10146  000932  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10147  000934  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10148  000936  B4D8               	btfsc	status,2,c
 10149  000938  D310               	goto	l871
 10150                           
 10151                           ; BSR set to: 0
 10152                           ;cmd_consol.c: 282: char i = 0;
 10153  00093A  0E00               	movlw	0
 10154  00093C  6FD2               	movwf	parse_cmd_str@i_1801& (0+255),b
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;cmd_consol.c: 283: uid = temp[0];
 10158  00093E  C0DC  FFF6         	movff	parse_cmd_str@temp,tblptrl
 10159  000942  C0DD  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
 10160  000946  0E00               	movlw	low (__mediumconst shr (0+16))
 10161  000948  6EF8               	movwf	tblptru,c
 10162  00094A  0E0F               	movlw	(high __ramtop+-1)
 10163  00094C  64F7               	cpfsgt	tblptrh,c
 10164  00094E  D003               	bra	u7657
 10165  000950  0008               	tblrd		*
 10166  000952  50F5               	movf	tablat,w,c
 10167  000954  D005               	bra	u7650
 10168  000956                     u7657:
 10169  000956  CFF6 FFE9          	movff	tblptrl,fsr0l
 10170  00095A  CFF7 FFEA          	movff	tblptrh,fsr0h
 10171  00095E  50EF               	movf	indf0,w,c
 10172  000960                     u7650:
 10173  000960  0100               	movlb	0	; () banked
 10174  000962  6FD9               	movwf	parse_cmd_str@uid_1800& (0+255),b
 10175                           
 10176                           ; BSR set to: 0
 10177                           ;cmd_consol.c: 284: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
 10178  000964  0E40               	movlw	64
 10179  000966  65D9               	cpfsgt	parse_cmd_str@uid_1800& (0+255),b
 10180  000968  D0E6               	goto	l825
 10181                           
 10182                           ; BSR set to: 0
 10183  00096A  5047               	movf	_clcd_config_data+3,w,c
 10184  00096C  5DD9               	subwf	parse_cmd_str@uid_1800& (0+255),w,b
 10185  00096E  B0D8               	btfsc	status,0,c
 10186  000970  D0E2               	goto	l825
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;cmd_consol.c: 285: printf("uid = %d,\r\n", uid);
 10190  000972  0E96               	movlw	low STR_62
 10191  000974  6E22               	movwf	printf@f,c
 10192  000976  0EFE               	movlw	high STR_62
 10193  000978  6E23               	movwf	printf@f+1,c
 10194  00097A  C0D9  F024         	movff	parse_cmd_str@uid_1800,?_printf+2
 10195  00097E  6A25               	clrf	?_printf+3,c
 10196  000980  EC1B  F012         	call	_printf	;wreg free
 10197                           
 10198                           ;cmd_consol.c: 286: if (uid == cmd_data.uid) {
 10199  000984  0100               	movlb	0	; () banked
 10200  000986  51D9               	movf	parse_cmd_str@uid_1800& (0+255),w,b
 10201  000988  1983               	xorwf	_cmd_data& (0+255),w,b
 10202  00098A  A4D8               	btfss	status,2,c
 10203  00098C  D2E6               	goto	l871
 10204                           
 10205                           ; BSR set to: 0
 10206                           ;cmd_consol.c: 287: temp = strtok((0), "-', /=");
 10207  00098E  0E00               	movlw	0
 10208  000990  6E21               	movwf	strtok@s1,c
 10209  000992  0E00               	movlw	0
 10210  000994  6E22               	movwf	strtok@s1+1,c
 10211  000996  0EA7               	movlw	low STR_29
 10212  000998  6E23               	movwf	strtok@s2,c
 10213  00099A  0EFF               	movlw	high STR_29
 10214  00099C  6E24               	movwf	strtok@s2+1,c
 10215  00099E  ECE7  F017         	call	_strtok	;wreg free
 10216  0009A2  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10217  0009A6  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10218                           
 10219                           ;cmd_consol.c: 288: if (temp != (0)) {
 10220  0009AA  0100               	movlb	0	; () banked
 10221  0009AC  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10222  0009AE  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10223  0009B0  B4D8               	btfsc	status,2,c
 10224  0009B2  D2D3               	goto	l871
 10225                           
 10226                           ; BSR set to: 0
 10227                           ;cmd_consol.c: 289: collect_row(temp, &cmd_data.start_row);
 10228  0009B4  C0DC  F034         	movff	parse_cmd_str@temp,collect_row@str
 10229  0009B8  C0DD  F035         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10230  0009BC  0EAD               	movlw	low (_cmd_data+42)
 10231  0009BE  6E36               	movwf	collect_row@data_row,c
 10232  0009C0  0E00               	movlw	high (_cmd_data+42)
 10233  0009C2  6E37               	movwf	collect_row@data_row+1,c
 10234  0009C4  EC64  F014         	call	_collect_row	;wreg free
 10235                           
 10236                           ;cmd_consol.c: 290: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 10237  0009C8  0E23               	movlw	low STR_64
 10238  0009CA  6E22               	movwf	printf@f,c
 10239  0009CC  0EFD               	movlw	high STR_64
 10240  0009CE  6E23               	movwf	printf@f+1,c
 10241  0009D0  C0AD  F024         	movff	_cmd_data+42,?_printf+2
 10242  0009D4  6A25               	clrf	?_printf+3,c
 10243  0009D6  EC1B  F012         	call	_printf	;wreg free
 10244                           
 10245                           ;cmd_consol.c: 291: if (cmd_data.start_row != 255) {
 10246  0009DA  0100               	movlb	0	; () banked
 10247  0009DC  29AD               	incf	(_cmd_data+42)& (0+255),w,b
 10248  0009DE  B4D8               	btfsc	status,2,c
 10249  0009E0  D0A8               	goto	l828
 10250                           
 10251                           ; BSR set to: 0
 10252                           ;cmd_consol.c: 292: temp = strtok((0), "-', /=");
 10253  0009E2  0E00               	movlw	0
 10254  0009E4  6E21               	movwf	strtok@s1,c
 10255  0009E6  0E00               	movlw	0
 10256  0009E8  6E22               	movwf	strtok@s1+1,c
 10257  0009EA  0EA7               	movlw	low STR_29
 10258  0009EC  6E23               	movwf	strtok@s2,c
 10259  0009EE  0EFF               	movlw	high STR_29
 10260  0009F0  6E24               	movwf	strtok@s2+1,c
 10261  0009F2  ECE7  F017         	call	_strtok	;wreg free
 10262  0009F6  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10263  0009FA  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10264                           
 10265                           ;cmd_consol.c: 293: if (temp != (0)) {
 10266  0009FE  0100               	movlb	0	; () banked
 10267  000A00  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10268  000A02  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10269  000A04  B4D8               	btfsc	status,2,c
 10270  000A06  D2A9               	goto	l871
 10271                           
 10272                           ; BSR set to: 0
 10273                           ;cmd_consol.c: 294: collect_column(temp, &cmd_data.start_col);
 10274  000A08  C0DC  F034         	movff	parse_cmd_str@temp,collect_column@str
 10275  000A0C  C0DD  F035         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10276  000A10  0EAE               	movlw	low (_cmd_data+43)
 10277  000A12  6E36               	movwf	collect_column@data_column,c
 10278  000A14  0E00               	movlw	high (_cmd_data+43)
 10279  000A16  6E37               	movwf	collect_column@data_column+1,c
 10280  000A18  ECE0  F014         	call	_collect_column	;wreg free
 10281                           
 10282                           ;cmd_consol.c: 295: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 10283  000A1C  0E08               	movlw	low STR_66
 10284  000A1E  6E22               	movwf	printf@f,c
 10285  000A20  0EFD               	movlw	high STR_66
 10286  000A22  6E23               	movwf	printf@f+1,c
 10287  000A24  C0AE  F024         	movff	_cmd_data+43,?_printf+2
 10288  000A28  6A25               	clrf	?_printf+3,c
 10289  000A2A  EC1B  F012         	call	_printf	;wreg free
 10290                           
 10291                           ;cmd_consol.c: 296: if (cmd_data.start_row != 255) {
 10292  000A2E  0100               	movlb	0	; () banked
 10293  000A30  29AD               	incf	(_cmd_data+42)& (0+255),w,b
 10294  000A32  B4D8               	btfsc	status,2,c
 10295  000A34  D07C               	goto	l830
 10296                           
 10297                           ; BSR set to: 0
 10298                           ;cmd_consol.c: 297: temp = strtok((0), "-', /=");
 10299  000A36  0E00               	movlw	0
 10300  000A38  6E21               	movwf	strtok@s1,c
 10301  000A3A  0E00               	movlw	0
 10302  000A3C  6E22               	movwf	strtok@s1+1,c
 10303  000A3E  0EA7               	movlw	low STR_29
 10304  000A40  6E23               	movwf	strtok@s2,c
 10305  000A42  0EFF               	movlw	high STR_29
 10306  000A44  6E24               	movwf	strtok@s2+1,c
 10307  000A46  ECE7  F017         	call	_strtok	;wreg free
 10308  000A4A  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10309  000A4E  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10310                           
 10311                           ;cmd_consol.c: 298: if (temp != (0)) {
 10312  000A52  0100               	movlb	0	; () banked
 10313  000A54  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10314  000A56  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10315  000A58  B4D8               	btfsc	status,2,c
 10316  000A5A  D27F               	goto	l871
 10317                           
 10318                           ; BSR set to: 0
 10319                           ;cmd_consol.c: 299: collect_row(temp, &cmd_data.end_row);
 10320  000A5C  C0DC  F034         	movff	parse_cmd_str@temp,collect_row@str
 10321  000A60  C0DD  F035         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10322  000A64  0EAF               	movlw	low (_cmd_data+44)
 10323  000A66  6E36               	movwf	collect_row@data_row,c
 10324  000A68  0E00               	movlw	high (_cmd_data+44)
 10325  000A6A  6E37               	movwf	collect_row@data_row+1,c
 10326  000A6C  EC64  F014         	call	_collect_row	;wreg free
 10327                           
 10328                           ;cmd_consol.c: 300: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 10329  000A70  0EA5               	movlw	low STR_68
 10330  000A72  6E22               	movwf	printf@f,c
 10331  000A74  0EFD               	movlw	high STR_68
 10332  000A76  6E23               	movwf	printf@f+1,c
 10333  000A78  C0AF  F024         	movff	_cmd_data+44,?_printf+2
 10334  000A7C  6A25               	clrf	?_printf+3,c
 10335  000A7E  EC1B  F012         	call	_printf	;wreg free
 10336                           
 10337                           ;cmd_consol.c: 301: if (cmd_data.end_row != 255) {
 10338  000A82  0100               	movlb	0	; () banked
 10339  000A84  29AF               	incf	(_cmd_data+44)& (0+255),w,b
 10340  000A86  B4D8               	btfsc	status,2,c
 10341  000A88  D050               	goto	l832
 10342                           
 10343                           ; BSR set to: 0
 10344                           ;cmd_consol.c: 302: temp = strtok((0), "-', /=");
 10345  000A8A  0E00               	movlw	0
 10346  000A8C  6E21               	movwf	strtok@s1,c
 10347  000A8E  0E00               	movlw	0
 10348  000A90  6E22               	movwf	strtok@s1+1,c
 10349  000A92  0EA7               	movlw	low STR_29
 10350  000A94  6E23               	movwf	strtok@s2,c
 10351  000A96  0EFF               	movlw	high STR_29
 10352  000A98  6E24               	movwf	strtok@s2+1,c
 10353  000A9A  ECE7  F017         	call	_strtok	;wreg free
 10354  000A9E  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10355  000AA2  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10356                           
 10357                           ;cmd_consol.c: 303: if (temp != (0)) {
 10358  000AA6  0100               	movlb	0	; () banked
 10359  000AA8  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10360  000AAA  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10361  000AAC  B4D8               	btfsc	status,2,c
 10362  000AAE  D255               	goto	l871
 10363                           
 10364                           ; BSR set to: 0
 10365                           ;cmd_consol.c: 304: printf("col = %s\r\n", temp);
 10366  000AB0  0E19               	movlw	low STR_70
 10367  000AB2  6E22               	movwf	printf@f,c
 10368  000AB4  0EFF               	movlw	high STR_70
 10369  000AB6  6E23               	movwf	printf@f+1,c
 10370  000AB8  C0DC  F024         	movff	parse_cmd_str@temp,?_printf+2
 10371  000ABC  C0DD  F025         	movff	parse_cmd_str@temp+1,?_printf+3
 10372  000AC0  EC1B  F012         	call	_printf	;wreg free
 10373                           
 10374                           ;cmd_consol.c: 305: collect_column(temp, &cmd_data.end_col);
 10375  000AC4  C0DC  F034         	movff	parse_cmd_str@temp,collect_column@str
 10376  000AC8  C0DD  F035         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10377  000ACC  0EB0               	movlw	low (_cmd_data+45)
 10378  000ACE  6E36               	movwf	collect_column@data_column,c
 10379  000AD0  0E00               	movlw	high (_cmd_data+45)
 10380  000AD2  6E37               	movwf	collect_column@data_column+1,c
 10381  000AD4  ECE0  F014         	call	_collect_column	;wreg free
 10382                           
 10383                           ;cmd_consol.c: 306: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 10384  000AD8  0E8C               	movlw	low STR_71
 10385  000ADA  6E22               	movwf	printf@f,c
 10386  000ADC  0EFD               	movlw	high STR_71
 10387  000ADE  6E23               	movwf	printf@f+1,c
 10388  000AE0  C0B0  F024         	movff	_cmd_data+45,?_printf+2
 10389  000AE4  6A25               	clrf	?_printf+3,c
 10390  000AE6  EC1B  F012         	call	_printf	;wreg free
 10391                           
 10392                           ;cmd_consol.c: 307: if (cmd_data.end_row != 255) {
 10393  000AEA  0100               	movlb	0	; () banked
 10394  000AEC  29AF               	incf	(_cmd_data+44)& (0+255),w,b
 10395  000AEE  B4D8               	btfsc	status,2,c
 10396  000AF0  D01A               	goto	l834
 10397                           
 10398                           ; BSR set to: 0
 10399                           ;cmd_consol.c: 308: cmd_data.row_col_set = 1;
 10400  000AF2  0E01               	movlw	1
 10401  000AF4  6FB1               	movwf	(_cmd_data+46)& (0+255),b
 10402                           
 10403                           ;cmd_consol.c: 309: valid_cmd = 1;
 10404  000AF6  0E01               	movlw	1
 10405  000AF8  6F82               	movwf	_valid_cmd& (0+255),b
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;cmd_consol.c: 310: memset(str, 0, strlen(str));
 10409  000AFA  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
 10410  000AFE  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
 10411  000B02  0E00               	movlw	0
 10412  000B04  6E2B               	movwf	memset@c+1,c
 10413  000B06  0E00               	movlw	0
 10414  000B08  6E2A               	movwf	memset@c,c
 10415  000B0A  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
 10416  000B0E  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
 10417  000B12  EC7E  F01A         	call	_strlen	;wreg free
 10418  000B16  C022  F02C         	movff	?_strlen,memset@n
 10419  000B1A  C023  F02D         	movff	?_strlen+1,memset@n+1
 10420  000B1E  EC8E  F01B         	call	_memset	;wreg free
 10421  000B22  EFBB  F000         	goto	l7058
 10422  000B26                     l834:
 10423                           
 10424                           ;cmd_consol.c: 313: return 3;
 10425  000B26  0E03               	movlw	3
 10426  000B28  0012               	return	
 10427  000B2A                     l832:
 10428                           
 10429                           ;cmd_consol.c: 317: return 3;
 10430  000B2A  0E03               	movlw	3
 10431  000B2C  0012               	return	
 10432  000B2E                     l830:
 10433                           
 10434                           ;cmd_consol.c: 321: return 3;
 10435  000B2E  0E03               	movlw	3
 10436  000B30  0012               	return	
 10437  000B32                     l828:
 10438                           
 10439                           ;cmd_consol.c: 325: return 3;
 10440  000B32  0E03               	movlw	3
 10441  000B34  0012               	return	
 10442  000B36                     l825:
 10443                           
 10444                           ;cmd_consol.c: 330: return 8;
 10445  000B36  0E08               	movlw	8
 10446  000B38  0012               	return	
 10447  000B3A                     l821:
 10448  000B3A  C0DA  F031         	movff	parse_cmd_str@ptr,strstr@s1
 10449  000B3E  C0DB  F032         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10450  000B42  0EB5               	movlw	low STR_72
 10451  000B44  6E33               	movwf	strstr@s2,c
 10452  000B46  0EFF               	movlw	high STR_72
 10453  000B48  6E34               	movwf	strstr@s2+1,c
 10454  000B4A  EC3F  F018         	call	_strstr	;wreg free
 10455  000B4E  C031  F0DC         	movff	?_strstr,parse_cmd_str@temp
 10456  000B52  C032  F0DD         	movff	?_strstr+1,parse_cmd_str@temp+1
 10457  000B56  0100               	movlb	0	; () banked
 10458  000B58  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10459  000B5A  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10460  000B5C  B4D8               	btfsc	status,2,c
 10461  000B5E  D023               	goto	l841
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;cmd_consol.c: 336: strcpy(CMD, temp);
 10465  000B60  0EB7               	movlw	low _CMD
 10466  000B62  6E14               	movwf	strcpy@to,c
 10467  000B64  0E00               	movlw	high _CMD
 10468  000B66  6E15               	movwf	strcpy@to+1,c
 10469  000B68  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
 10470  000B6C  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10471  000B70  EC6B  F01B         	call	_strcpy	;wreg free
 10472                           
 10473                           ;cmd_consol.c: 337: memset(str, 0, strlen(str));
 10474  000B74  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
 10475  000B78  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
 10476  000B7C  0E00               	movlw	0
 10477  000B7E  6E2B               	movwf	memset@c+1,c
 10478  000B80  0E00               	movlw	0
 10479  000B82  6E2A               	movwf	memset@c,c
 10480  000B84  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
 10481  000B88  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
 10482  000B8C  EC7E  F01A         	call	_strlen	;wreg free
 10483  000B90  C022  F02C         	movff	?_strlen,memset@n
 10484  000B94  C023  F02D         	movff	?_strlen+1,memset@n+1
 10485  000B98  EC8E  F01B         	call	_memset	;wreg free
 10486                           
 10487                           ;cmd_consol.c: 338: valid_cmd = 1;
 10488  000B9C  0E01               	movlw	1
 10489  000B9E  0100               	movlb	0	; () banked
 10490  000BA0  6F82               	movwf	_valid_cmd& (0+255),b
 10491  000BA2  EFBB  F000         	goto	l7058
 10492  000BA6                     l841:
 10493                           
 10494                           ; BSR set to: 0
 10495                           
 10496                           ; BSR set to: 0
 10497  000BA6  C0DA  F031         	movff	parse_cmd_str@ptr,strstr@s1
 10498  000BAA  C0DB  F032         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10499  000BAE  0ED9               	movlw	low STR_73
 10500  000BB0  6E33               	movwf	strstr@s2,c
 10501  000BB2  0EFF               	movlw	high STR_73
 10502  000BB4  6E34               	movwf	strstr@s2+1,c
 10503  000BB6  EC3F  F018         	call	_strstr	;wreg free
 10504  000BBA  C031  F0DC         	movff	?_strstr,parse_cmd_str@temp
 10505  000BBE  C032  F0DD         	movff	?_strstr+1,parse_cmd_str@temp+1
 10506  000BC2  0100               	movlb	0	; () banked
 10507  000BC4  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10508  000BC6  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10509  000BC8  B4D8               	btfsc	status,2,c
 10510  000BCA  D191               	goto	l843
 10511                           
 10512                           ; BSR set to: 0
 10513                           ;cmd_consol.c: 341: if (clcd_config_data.init_done == 1) {
 10514  000BCC  0444               	decf	_clcd_config_data,w,c
 10515  000BCE  A4D8               	btfss	status,2,c
 10516  000BD0  D1C4               	goto	l871
 10517                           
 10518                           ; BSR set to: 0
 10519                           ;cmd_consol.c: 342: temp = strtok(ptr, "-', /=");
 10520  000BD2  C0DA  F021         	movff	parse_cmd_str@ptr,strtok@s1
 10521  000BD6  C0DB  F022         	movff	parse_cmd_str@ptr+1,strtok@s1+1
 10522  000BDA  0EA7               	movlw	low STR_29
 10523  000BDC  6E23               	movwf	strtok@s2,c
 10524  000BDE  0EFF               	movlw	high STR_29
 10525  000BE0  6E24               	movwf	strtok@s2+1,c
 10526  000BE2  ECE7  F017         	call	_strtok	;wreg free
 10527  000BE6  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10528  000BEA  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10529                           
 10530                           ;cmd_consol.c: 343: if (temp != (0)) {
 10531  000BEE  0100               	movlb	0	; () banked
 10532  000BF0  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10533  000BF2  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10534  000BF4  B4D8               	btfsc	status,2,c
 10535  000BF6  D1B1               	goto	l871
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;cmd_consol.c: 344: strcpy(CMD, temp);
 10539  000BF8  0EB7               	movlw	low _CMD
 10540  000BFA  6E14               	movwf	strcpy@to,c
 10541  000BFC  0E00               	movlw	high _CMD
 10542  000BFE  6E15               	movwf	strcpy@to+1,c
 10543  000C00  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
 10544  000C04  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10545  000C08  EC6B  F01B         	call	_strcpy	;wreg free
 10546                           
 10547                           ;cmd_consol.c: 345: printf("CMD=%s\r\n", CMD);
 10548  000C0C  0E5F               	movlw	low STR_75
 10549  000C0E  6E22               	movwf	printf@f,c
 10550  000C10  0EFF               	movlw	high STR_75
 10551  000C12  6E23               	movwf	printf@f+1,c
 10552  000C14  0EB7               	movlw	low _CMD
 10553  000C16  6E24               	movwf	?_printf+2,c
 10554  000C18  0E00               	movlw	high _CMD
 10555  000C1A  6E25               	movwf	?_printf+3,c
 10556  000C1C  EC1B  F012         	call	_printf	;wreg free
 10557                           
 10558                           ;cmd_consol.c: 346: temp = strtok((0), ",");
 10559  000C20  0E00               	movlw	0
 10560  000C22  6E21               	movwf	strtok@s1,c
 10561  000C24  0E00               	movlw	0
 10562  000C26  6E22               	movwf	strtok@s1+1,c
 10563  000C28  0EFC               	movlw	low STR_48
 10564  000C2A  6E23               	movwf	strtok@s2,c
 10565  000C2C  0EFF               	movlw	high STR_48
 10566  000C2E  6E24               	movwf	strtok@s2+1,c
 10567  000C30  ECE7  F017         	call	_strtok	;wreg free
 10568  000C34  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10569  000C38  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10570                           
 10571                           ;cmd_consol.c: 347: if (temp != (0)) {
 10572  000C3C  0100               	movlb	0	; () banked
 10573  000C3E  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10574  000C40  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10575  000C42  B4D8               	btfsc	status,2,c
 10576  000C44  D18A               	goto	l871
 10577                           
 10578                           ; BSR set to: 0
 10579                           ;cmd_consol.c: 348: if (get_str(temp, cmd_data.data) == 1) {
 10580  000C46  C0DC  F030         	movff	parse_cmd_str@temp,get_str@str
 10581  000C4A  C0DD  F031         	movff	parse_cmd_str@temp+1,get_str@str+1
 10582  000C4E  0E84               	movlw	low (_cmd_data+1)
 10583  000C50  6E32               	movwf	get_str@data_str,c
 10584  000C52  0E00               	movlw	high (_cmd_data+1)
 10585  000C54  6E33               	movwf	get_str@data_str+1,c
 10586  000C56  ECC3  F019         	call	_get_str	;wreg free
 10587  000C5A  06E8               	decf	wreg,f,c
 10588  000C5C  A4D8               	btfss	status,2,c
 10589  000C5E  D145               	goto	l847
 10590                           
 10591                           ;cmd_consol.c: 349: printf("data=%s\r\n", cmd_data.data);
 10592  000C60  0E3A               	movlw	low STR_77
 10593  000C62  6E22               	movwf	printf@f,c
 10594  000C64  0EFF               	movlw	high STR_77
 10595  000C66  6E23               	movwf	printf@f+1,c
 10596  000C68  0E84               	movlw	low (_cmd_data+1)
 10597  000C6A  6E24               	movwf	?_printf+2,c
 10598  000C6C  0E00               	movlw	high (_cmd_data+1)
 10599  000C6E  6E25               	movwf	?_printf+3,c
 10600  000C70  EC1B  F012         	call	_printf	;wreg free
 10601                           
 10602                           ;cmd_consol.c: 350: temp = strtok((0), "-', /=");
 10603  000C74  0E00               	movlw	0
 10604  000C76  6E21               	movwf	strtok@s1,c
 10605  000C78  0E00               	movlw	0
 10606  000C7A  6E22               	movwf	strtok@s1+1,c
 10607  000C7C  0EA7               	movlw	low STR_29
 10608  000C7E  6E23               	movwf	strtok@s2,c
 10609  000C80  0EFF               	movlw	high STR_29
 10610  000C82  6E24               	movwf	strtok@s2+1,c
 10611  000C84  ECE7  F017         	call	_strtok	;wreg free
 10612  000C88  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10613  000C8C  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10614                           
 10615                           ;cmd_consol.c: 351: if (temp != (0)) {
 10616  000C90  0100               	movlb	0	; () banked
 10617  000C92  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10618  000C94  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10619  000C96  B4D8               	btfsc	status,2,c
 10620  000C98  D160               	goto	l871
 10621                           
 10622                           ; BSR set to: 0
 10623                           ;cmd_consol.c: 352: collect_row(temp, &cmd_data.start_row);
 10624  000C9A  C0DC  F034         	movff	parse_cmd_str@temp,collect_row@str
 10625  000C9E  C0DD  F035         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10626  000CA2  0EAD               	movlw	low (_cmd_data+42)
 10627  000CA4  6E36               	movwf	collect_row@data_row,c
 10628  000CA6  0E00               	movlw	high (_cmd_data+42)
 10629  000CA8  6E37               	movwf	collect_row@data_row+1,c
 10630  000CAA  EC64  F014         	call	_collect_row	;wreg free
 10631                           
 10632                           ;cmd_consol.c: 353: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 10633  000CAE  0E23               	movlw	low STR_64
 10634  000CB0  6E22               	movwf	printf@f,c
 10635  000CB2  0EFD               	movlw	high STR_64
 10636  000CB4  6E23               	movwf	printf@f+1,c
 10637  000CB6  C0AD  F024         	movff	_cmd_data+42,?_printf+2
 10638  000CBA  6A25               	clrf	?_printf+3,c
 10639  000CBC  EC1B  F012         	call	_printf	;wreg free
 10640                           
 10641                           ;cmd_consol.c: 354: if (cmd_data.start_row != 255) {
 10642  000CC0  0100               	movlb	0	; () banked
 10643  000CC2  29AD               	incf	(_cmd_data+42)& (0+255),w,b
 10644  000CC4  B4D8               	btfsc	status,2,c
 10645  000CC6  D10F               	goto	l849
 10646                           
 10647                           ; BSR set to: 0
 10648                           ;cmd_consol.c: 355: temp = strtok((0), "-', /=");
 10649  000CC8  0E00               	movlw	0
 10650  000CCA  6E21               	movwf	strtok@s1,c
 10651  000CCC  0E00               	movlw	0
 10652  000CCE  6E22               	movwf	strtok@s1+1,c
 10653  000CD0  0EA7               	movlw	low STR_29
 10654  000CD2  6E23               	movwf	strtok@s2,c
 10655  000CD4  0EFF               	movlw	high STR_29
 10656  000CD6  6E24               	movwf	strtok@s2+1,c
 10657  000CD8  ECE7  F017         	call	_strtok	;wreg free
 10658  000CDC  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10659  000CE0  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10660                           
 10661                           ;cmd_consol.c: 356: if (temp != (0)) {
 10662  000CE4  0100               	movlb	0	; () banked
 10663  000CE6  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10664  000CE8  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10665  000CEA  B4D8               	btfsc	status,2,c
 10666  000CEC  D136               	goto	l871
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;cmd_consol.c: 357: collect_column(temp, &cmd_data.start_col);
 10670  000CEE  C0DC  F034         	movff	parse_cmd_str@temp,collect_column@str
 10671  000CF2  C0DD  F035         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10672  000CF6  0EAE               	movlw	low (_cmd_data+43)
 10673  000CF8  6E36               	movwf	collect_column@data_column,c
 10674  000CFA  0E00               	movlw	high (_cmd_data+43)
 10675  000CFC  6E37               	movwf	collect_column@data_column+1,c
 10676  000CFE  ECE0  F014         	call	_collect_column	;wreg free
 10677                           
 10678                           ;cmd_consol.c: 358: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 10679  000D02  0E08               	movlw	low STR_66
 10680  000D04  6E22               	movwf	printf@f,c
 10681  000D06  0EFD               	movlw	high STR_66
 10682  000D08  6E23               	movwf	printf@f+1,c
 10683  000D0A  C0AE  F024         	movff	_cmd_data+43,?_printf+2
 10684  000D0E  6A25               	clrf	?_printf+3,c
 10685  000D10  EC1B  F012         	call	_printf	;wreg free
 10686                           
 10687                           ;cmd_consol.c: 359: if (cmd_data.start_row != 255) {
 10688  000D14  0100               	movlb	0	; () banked
 10689  000D16  29AD               	incf	(_cmd_data+42)& (0+255),w,b
 10690  000D18  B4D8               	btfsc	status,2,c
 10691  000D1A  D0E3               	goto	l851
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;cmd_consol.c: 360: temp = strtok((0), "-', /=");
 10695  000D1C  0E00               	movlw	0
 10696  000D1E  6E21               	movwf	strtok@s1,c
 10697  000D20  0E00               	movlw	0
 10698  000D22  6E22               	movwf	strtok@s1+1,c
 10699  000D24  0EA7               	movlw	low STR_29
 10700  000D26  6E23               	movwf	strtok@s2,c
 10701  000D28  0EFF               	movlw	high STR_29
 10702  000D2A  6E24               	movwf	strtok@s2+1,c
 10703  000D2C  ECE7  F017         	call	_strtok	;wreg free
 10704  000D30  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10705  000D34  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10706                           
 10707                           ;cmd_consol.c: 361: if (temp != (0)) {
 10708  000D38  0100               	movlb	0	; () banked
 10709  000D3A  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10710  000D3C  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10711  000D3E  B4D8               	btfsc	status,2,c
 10712  000D40  D10C               	goto	l871
 10713                           
 10714                           ; BSR set to: 0
 10715                           ;cmd_consol.c: 362: collect_row(temp, &cmd_data.end_row);
 10716  000D42  C0DC  F034         	movff	parse_cmd_str@temp,collect_row@str
 10717  000D46  C0DD  F035         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10718  000D4A  0EAF               	movlw	low (_cmd_data+44)
 10719  000D4C  6E36               	movwf	collect_row@data_row,c
 10720  000D4E  0E00               	movlw	high (_cmd_data+44)
 10721  000D50  6E37               	movwf	collect_row@data_row+1,c
 10722  000D52  EC64  F014         	call	_collect_row	;wreg free
 10723                           
 10724                           ;cmd_consol.c: 363: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 10725  000D56  0EA5               	movlw	low STR_68
 10726  000D58  6E22               	movwf	printf@f,c
 10727  000D5A  0EFD               	movlw	high STR_68
 10728  000D5C  6E23               	movwf	printf@f+1,c
 10729  000D5E  C0AF  F024         	movff	_cmd_data+44,?_printf+2
 10730  000D62  6A25               	clrf	?_printf+3,c
 10731  000D64  EC1B  F012         	call	_printf	;wreg free
 10732                           
 10733                           ;cmd_consol.c: 364: if (cmd_data.end_row != 255) {
 10734  000D68  0100               	movlb	0	; () banked
 10735  000D6A  29AF               	incf	(_cmd_data+44)& (0+255),w,b
 10736  000D6C  B4D8               	btfsc	status,2,c
 10737  000D6E  D0B7               	goto	l853
 10738                           
 10739                           ; BSR set to: 0
 10740                           ;cmd_consol.c: 365: temp = strtok((0), "-', /=");
 10741  000D70  0E00               	movlw	0
 10742  000D72  6E21               	movwf	strtok@s1,c
 10743  000D74  0E00               	movlw	0
 10744  000D76  6E22               	movwf	strtok@s1+1,c
 10745  000D78  0EA7               	movlw	low STR_29
 10746  000D7A  6E23               	movwf	strtok@s2,c
 10747  000D7C  0EFF               	movlw	high STR_29
 10748  000D7E  6E24               	movwf	strtok@s2+1,c
 10749  000D80  ECE7  F017         	call	_strtok	;wreg free
 10750  000D84  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10751  000D88  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10752                           
 10753                           ;cmd_consol.c: 366: if (temp != (0)) {
 10754  000D8C  0100               	movlb	0	; () banked
 10755  000D8E  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10756  000D90  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10757  000D92  B4D8               	btfsc	status,2,c
 10758  000D94  D0E2               	goto	l871
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;cmd_consol.c: 367: printf("col = %s\r\n", temp);
 10762  000D96  0E19               	movlw	low STR_70
 10763  000D98  6E22               	movwf	printf@f,c
 10764  000D9A  0EFF               	movlw	high STR_70
 10765  000D9C  6E23               	movwf	printf@f+1,c
 10766  000D9E  C0DC  F024         	movff	parse_cmd_str@temp,?_printf+2
 10767  000DA2  C0DD  F025         	movff	parse_cmd_str@temp+1,?_printf+3
 10768  000DA6  EC1B  F012         	call	_printf	;wreg free
 10769                           
 10770                           ;cmd_consol.c: 368: collect_column(temp, &cmd_data.end_col);
 10771  000DAA  C0DC  F034         	movff	parse_cmd_str@temp,collect_column@str
 10772  000DAE  C0DD  F035         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10773  000DB2  0EB0               	movlw	low (_cmd_data+45)
 10774  000DB4  6E36               	movwf	collect_column@data_column,c
 10775  000DB6  0E00               	movlw	high (_cmd_data+45)
 10776  000DB8  6E37               	movwf	collect_column@data_column+1,c
 10777  000DBA  ECE0  F014         	call	_collect_column	;wreg free
 10778                           
 10779                           ;cmd_consol.c: 369: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 10780  000DBE  0E8C               	movlw	low STR_71
 10781  000DC0  6E22               	movwf	printf@f,c
 10782  000DC2  0EFD               	movlw	high STR_71
 10783  000DC4  6E23               	movwf	printf@f+1,c
 10784  000DC6  C0B0  F024         	movff	_cmd_data+45,?_printf+2
 10785  000DCA  6A25               	clrf	?_printf+3,c
 10786  000DCC  EC1B  F012         	call	_printf	;wreg free
 10787                           
 10788                           ;cmd_consol.c: 370: if (cmd_data.end_row != 255) {
 10789  000DD0  0100               	movlb	0	; () banked
 10790  000DD2  29AF               	incf	(_cmd_data+44)& (0+255),w,b
 10791  000DD4  B4D8               	btfsc	status,2,c
 10792  000DD6  D081               	goto	l855
 10793                           
 10794                           ; BSR set to: 0
 10795                           ;cmd_consol.c: 371: temp = strtok((0), "-', /=");
 10796  000DD8  0E00               	movlw	0
 10797  000DDA  6E21               	movwf	strtok@s1,c
 10798  000DDC  0E00               	movlw	0
 10799  000DDE  6E22               	movwf	strtok@s1+1,c
 10800  000DE0  0EA7               	movlw	low STR_29
 10801  000DE2  6E23               	movwf	strtok@s2,c
 10802  000DE4  0EFF               	movlw	high STR_29
 10803  000DE6  6E24               	movwf	strtok@s2+1,c
 10804  000DE8  ECE7  F017         	call	_strtok	;wreg free
 10805  000DEC  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10806  000DF0  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10807                           
 10808                           ;cmd_consol.c: 372: if (temp != (0)) {
 10809  000DF4  0100               	movlb	0	; () banked
 10810  000DF6  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10811  000DF8  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10812  000DFA  B4D8               	btfsc	status,2,c
 10813  000DFC  D0AE               	goto	l871
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;cmd_consol.c: 373: if (get_direction(temp, &cmd_data.scroll) == 1) {
 10817  000DFE  C0DC  F034         	movff	parse_cmd_str@temp,get_direction@str
 10818  000E02  C0DD  F035         	movff	parse_cmd_str@temp+1,get_direction@str+1
 10819  000E06  0EB2               	movlw	low (_cmd_data+47)
 10820  000E08  6E36               	movwf	get_direction@data_direction,c
 10821  000E0A  0E00               	movlw	high (_cmd_data+47)
 10822  000E0C  6E37               	movwf	get_direction@data_direction+1,c
 10823  000E0E  EC5C  F015         	call	_get_direction	;wreg free
 10824  000E12  06E8               	decf	wreg,f,c
 10825  000E14  A4D8               	btfss	status,2,c
 10826  000E16  D05F               	goto	l857
 10827                           
 10828                           ;cmd_consol.c: 374: temp = strtok((0), "-', /=");
 10829  000E18  0E00               	movlw	0
 10830  000E1A  6E21               	movwf	strtok@s1,c
 10831  000E1C  0E00               	movlw	0
 10832  000E1E  6E22               	movwf	strtok@s1+1,c
 10833  000E20  0EA7               	movlw	low STR_29
 10834  000E22  6E23               	movwf	strtok@s2,c
 10835  000E24  0EFF               	movlw	high STR_29
 10836  000E26  6E24               	movwf	strtok@s2+1,c
 10837  000E28  ECE7  F017         	call	_strtok	;wreg free
 10838  000E2C  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10839  000E30  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10840                           
 10841                           ;cmd_consol.c: 375: if (temp != (0)) {
 10842  000E34  0100               	movlb	0	; () banked
 10843  000E36  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10844  000E38  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10845  000E3A  B4D8               	btfsc	status,2,c
 10846  000E3C  D08E               	goto	l871
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;cmd_consol.c: 376: if (get_dis_frq(temp, &cmd_data.dis_frq) == 1) {
 10850  000E3E  C0DC  F034         	movff	parse_cmd_str@temp,get_dis_frq@str
 10851  000E42  C0DD  F035         	movff	parse_cmd_str@temp+1,get_dis_frq@str+1
 10852  000E46  0EB4               	movlw	low (_cmd_data+49)
 10853  000E48  6E36               	movwf	get_dis_frq@data_frq,c
 10854  000E4A  0E00               	movlw	high (_cmd_data+49)
 10855  000E4C  6E37               	movwf	get_dis_frq@data_frq+1,c
 10856  000E4E  EC45  F016         	call	_get_dis_frq	;wreg free
 10857  000E52  06E8               	decf	wreg,f,c
 10858  000E54  A4D8               	btfss	status,2,c
 10859  000E56  D03D               	goto	l859
 10860                           
 10861                           ;cmd_consol.c: 377: temp = strtok((0), "-', /=");
 10862  000E58  0E00               	movlw	0
 10863  000E5A  6E21               	movwf	strtok@s1,c
 10864  000E5C  0E00               	movlw	0
 10865  000E5E  6E22               	movwf	strtok@s1+1,c
 10866  000E60  0EA7               	movlw	low STR_29
 10867  000E62  6E23               	movwf	strtok@s2,c
 10868  000E64  0EFF               	movlw	high STR_29
 10869  000E66  6E24               	movwf	strtok@s2+1,c
 10870  000E68  ECE7  F017         	call	_strtok	;wreg free
 10871  000E6C  C021  F0DC         	movff	?_strtok,parse_cmd_str@temp
 10872  000E70  C022  F0DD         	movff	?_strtok+1,parse_cmd_str@temp+1
 10873                           
 10874                           ;cmd_consol.c: 378: if (temp != (0)) {
 10875  000E74  0100               	movlb	0	; () banked
 10876  000E76  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10877  000E78  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10878  000E7A  B4D8               	btfsc	status,2,c
 10879  000E7C  D06E               	goto	l871
 10880                           
 10881                           ; BSR set to: 0
 10882                           ;cmd_consol.c: 379: if (get_over_write_data(temp, &cmd_data.over_write) == 1) {
 10883  000E7E  C0DC  F034         	movff	parse_cmd_str@temp,get_over_write_data@str
 10884  000E82  C0DD  F035         	movff	parse_cmd_str@temp+1,get_over_write_data@str+1
 10885  000E86  0EB6               	movlw	low (_cmd_data+51)
 10886  000E88  6E36               	movwf	get_over_write_data@over_write_data,c
 10887  000E8A  0E00               	movlw	high (_cmd_data+51)
 10888  000E8C  6E37               	movwf	get_over_write_data@over_write_data+1,c
 10889  000E8E  ECD4  F015         	call	_get_over_write_data	;wreg free
 10890  000E92  06E8               	decf	wreg,f,c
 10891  000E94  A4D8               	btfss	status,2,c
 10892  000E96  D01B               	goto	l861
 10893                           
 10894                           ;cmd_consol.c: 380: cmd_data.row_col_set = 1;
 10895  000E98  0E01               	movlw	1
 10896  000E9A  0100               	movlb	0	; () banked
 10897  000E9C  6FB1               	movwf	(_cmd_data+46)& (0+255),b
 10898                           
 10899                           ;cmd_consol.c: 381: valid_cmd = 1;
 10900  000E9E  0E01               	movlw	1
 10901  000EA0  6F82               	movwf	_valid_cmd& (0+255),b
 10902                           
 10903                           ; BSR set to: 0
 10904                           ;cmd_consol.c: 382: memset(str, 0, strlen(str));
 10905  000EA2  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
 10906  000EA6  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
 10907  000EAA  0E00               	movlw	0
 10908  000EAC  6E2B               	movwf	memset@c+1,c
 10909  000EAE  0E00               	movlw	0
 10910  000EB0  6E2A               	movwf	memset@c,c
 10911  000EB2  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
 10912  000EB6  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
 10913  000EBA  EC7E  F01A         	call	_strlen	;wreg free
 10914  000EBE  C022  F02C         	movff	?_strlen,memset@n
 10915  000EC2  C023  F02D         	movff	?_strlen+1,memset@n+1
 10916  000EC6  EC8E  F01B         	call	_memset	;wreg free
 10917  000ECA  EFBB  F000         	goto	l7058
 10918  000ECE                     l861:
 10919                           
 10920                           ;cmd_consol.c: 385: return 6;
 10921  000ECE  0E06               	movlw	6
 10922  000ED0  0012               	return	
 10923  000ED2                     l859:
 10924                           
 10925                           ;cmd_consol.c: 389: return 5;
 10926  000ED2  0E05               	movlw	5
 10927  000ED4  0012               	return	
 10928  000ED6                     l857:
 10929                           
 10930                           ;cmd_consol.c: 393: return 4;
 10931  000ED6  0E04               	movlw	4
 10932  000ED8  0012               	return	
 10933  000EDA                     l855:
 10934                           
 10935                           ;cmd_consol.c: 397: return 3;
 10936  000EDA  0E03               	movlw	3
 10937  000EDC  0012               	return	
 10938  000EDE                     l853:
 10939                           
 10940                           ;cmd_consol.c: 401: return 3;
 10941  000EDE  0E03               	movlw	3
 10942  000EE0  0012               	return	
 10943  000EE2                     l851:
 10944                           
 10945                           ;cmd_consol.c: 405: return 3;
 10946  000EE2  0E03               	movlw	3
 10947  000EE4  0012               	return	
 10948  000EE6                     l849:
 10949                           
 10950                           ;cmd_consol.c: 409: return 3;
 10951  000EE6  0E03               	movlw	3
 10952  000EE8  0012               	return	
 10953  000EEA                     l847:
 10954                           
 10955                           ;cmd_consol.c: 413: return 2;
 10956  000EEA  0E02               	movlw	2
 10957  000EEC  0012               	return	
 10958  000EEE                     l843:
 10959  000EEE  C0DA  F031         	movff	parse_cmd_str@ptr,strstr@s1
 10960  000EF2  C0DB  F032         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10961  000EF6  0EF5               	movlw	low STR_90
 10962  000EF8  6E33               	movwf	strstr@s2,c
 10963  000EFA  0EFF               	movlw	high STR_90
 10964  000EFC  6E34               	movwf	strstr@s2+1,c
 10965  000EFE  EC3F  F018         	call	_strstr	;wreg free
 10966  000F02  C031  F0DC         	movff	?_strstr,parse_cmd_str@temp
 10967  000F06  C032  F0DD         	movff	?_strstr+1,parse_cmd_str@temp+1
 10968  000F0A  0100               	movlb	0	; () banked
 10969  000F0C  51DC               	movf	parse_cmd_str@temp& (0+255),w,b
 10970  000F0E  11DD               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10971  000F10  B4D8               	btfsc	status,2,c
 10972  000F12  D023               	goto	l871
 10973                           
 10974                           ; BSR set to: 0
 10975                           ;cmd_consol.c: 419: strcpy(CMD, temp);
 10976  000F14  0EB7               	movlw	low _CMD
 10977  000F16  6E14               	movwf	strcpy@to,c
 10978  000F18  0E00               	movlw	high _CMD
 10979  000F1A  6E15               	movwf	strcpy@to+1,c
 10980  000F1C  C0DC  F016         	movff	parse_cmd_str@temp,strcpy@from
 10981  000F20  C0DD  F017         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10982  000F24  EC6B  F01B         	call	_strcpy	;wreg free
 10983                           
 10984                           ;cmd_consol.c: 420: memset(str, 0, strlen(str));
 10985  000F28  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
 10986  000F2C  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
 10987  000F30  0E00               	movlw	0
 10988  000F32  6E2B               	movwf	memset@c+1,c
 10989  000F34  0E00               	movlw	0
 10990  000F36  6E2A               	movwf	memset@c,c
 10991  000F38  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
 10992  000F3C  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
 10993  000F40  EC7E  F01A         	call	_strlen	;wreg free
 10994  000F44  C022  F02C         	movff	?_strlen,memset@n
 10995  000F48  C023  F02D         	movff	?_strlen+1,memset@n+1
 10996  000F4C  EC8E  F01B         	call	_memset	;wreg free
 10997                           
 10998                           ;cmd_consol.c: 421: valid_cmd = 1;
 10999  000F50  0E01               	movlw	1
 11000  000F52  0100               	movlb	0	; () banked
 11001  000F54  6F82               	movwf	_valid_cmd& (0+255),b
 11002                           
 11003                           ; BSR set to: 0
 11004                           ;cmd_consol.c: 422: return 0;
 11005  000F56  0E00               	movlw	0
 11006                           
 11007                           ; BSR set to: 0
 11008  000F58  0012               	return	
 11009  000F5A                     l871:
 11010                           
 11011                           ;cmd_consol.c: 423: }
 11012                           ;cmd_consol.c: 424: memset(str, 0, strlen(str));
 11013                           
 11014                           ; BSR set to: 0
 11015                           
 11016                           ; BSR set to: 0
 11017                           
 11018                           ; BSR set to: 0
 11019                           
 11020                           ; BSR set to: 0
 11021                           
 11022                           ; BSR set to: 0
 11023                           
 11024                           ; BSR set to: 0
 11025                           
 11026                           ; BSR set to: 0
 11027                           
 11028                           ; BSR set to: 0
 11029                           
 11030                           ; BSR set to: 0
 11031                           
 11032                           ; BSR set to: 0
 11033                           
 11034                           ; BSR set to: 0
 11035  000F5A  C0CC  F028         	movff	parse_cmd_str@str,memset@p1
 11036  000F5E  C0CD  F029         	movff	parse_cmd_str@str+1,memset@p1+1
 11037  000F62  0E00               	movlw	0
 11038  000F64  6E2B               	movwf	memset@c+1,c
 11039  000F66  0E00               	movlw	0
 11040  000F68  6E2A               	movwf	memset@c,c
 11041  000F6A  C0CC  F022         	movff	parse_cmd_str@str,strlen@s
 11042  000F6E  C0CD  F023         	movff	parse_cmd_str@str+1,strlen@s+1
 11043  000F72  EC7E  F01A         	call	_strlen	;wreg free
 11044  000F76  C022  F02C         	movff	?_strlen,memset@n
 11045  000F7A  C023  F02D         	movff	?_strlen+1,memset@n+1
 11046  000F7E  EC8E  F01B         	call	_memset	;wreg free
 11047                           
 11048                           ;cmd_consol.c: 425: return 1;
 11049  000F82  0E01               	movlw	1
 11050  000F84  0012               	return	
 11051  000F86                     __end_of_parse_cmd_str:
 11052                           	opt stack 0
 11053                           tblptru	equ	0xFF8
 11054                           tblptrh	equ	0xFF7
 11055                           tblptrl	equ	0xFF6
 11056                           tablat	equ	0xFF5
 11057                           prodh	equ	0xFF4
 11058                           prodl	equ	0xFF3
 11059                           intcon	equ	0xFF2
 11060                           indf0	equ	0xFEF
 11061                           postinc0	equ	0xFEE
 11062                           fsr0h	equ	0xFEA
 11063                           fsr0l	equ	0xFE9
 11064                           wreg	equ	0xFE8
 11065                           indf1	equ	0xFE7
 11066                           postinc1	equ	0xFE6
 11067                           postdec1	equ	0xFE5
 11068                           fsr1h	equ	0xFE2
 11069                           fsr1l	equ	0xFE1
 11070                           indf2	equ	0xFDF
 11071                           postinc2	equ	0xFDE
 11072                           postdec2	equ	0xFDD
 11073                           fsr2h	equ	0xFDA
 11074                           fsr2l	equ	0xFD9
 11075                           status	equ	0xFD8
 11076                           
 11077 ;; *************** function _strtok *****************
 11078 ;; Defined at:
 11079 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strtok.c"
 11080 ;; Parameters:    Size  Location     Type
 11081 ;;  s1              2   32[COMRAM] PTR unsigned char 
 11082 ;;		 -> uart_str(150), NULL(0), 
 11083 ;;  s2              2   34[COMRAM] PTR const unsigned char 
 11084 ;;		 -> STR_89(7), STR_88(7), STR_87(7), STR_84(7), 
 11085 ;;		 -> STR_82(7), STR_80(7), STR_78(7), STR_76(2), 
 11086 ;;		 -> STR_74(7), STR_69(7), STR_67(7), STR_65(7), 
 11087 ;;		 -> STR_63(7), STR_61(7), STR_60(7), STR_56(7), 
 11088 ;;		 -> STR_53(7), STR_52(7), STR_48(2), STR_45(7), 
 11089 ;;		 -> STR_43(7), STR_41(7), STR_39(7), STR_37(7), 
 11090 ;;		 -> STR_36(7), STR_33(7), STR_31(7), STR_29(7), 
 11091 ;; Auto vars:     Size  Location     Type
 11092 ;;		None
 11093 ;; Return value:  Size  Location     Type
 11094 ;;                  2   32[COMRAM] PTR unsigned char 
 11095 ;; Registers used:
 11096 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11097 ;; Tracked objects:
 11098 ;;		On entry : 0/0
 11099 ;;		On exit  : 0/0
 11100 ;;		Unchanged: 0/0
 11101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11105 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11106 ;;Total ram usage:        4 bytes
 11107 ;; Hardware stack levels used:    1
 11108 ;; Hardware stack levels required when called:    7
 11109 ;; This function calls:
 11110 ;;		_strcspn
 11111 ;;		_strspn
 11112 ;; This function is called by:
 11113 ;;		_parse_cmd_str
 11114 ;; This function uses a non-reentrant model
 11115 ;;
 11116                           
 11117                           	psect	text43
 11118  002FCE                     __ptext43:
 11119                           	opt stack 0
 11120  002FCE                     _strtok:
 11121                           	opt stack 21
 11122                           
 11123                           ;incstack = 0
 11124  002FCE  5021               	movf	strtok@s1,w,c
 11125  002FD0  1022               	iorwf	strtok@s1+1,w,c
 11126  002FD2  A4D8               	btfss	status,2,c
 11127  002FD4  D004               	goto	l1745
 11128  002FD6  C039  F021         	movff	strtok@sp,strtok@s1
 11129  002FDA  C03A  F022         	movff	strtok@sp+1,strtok@s1+1
 11130  002FDE                     l1745:
 11131  002FDE  5021               	movf	strtok@s1,w,c
 11132  002FE0  1022               	iorwf	strtok@s1+1,w,c
 11133  002FE2  A4D8               	btfss	status,2,c
 11134  002FE4  D005               	goto	l1746
 11135  002FE6  0E00               	movlw	0
 11136  002FE8  6E21               	movwf	?_strtok,c
 11137  002FEA  0E00               	movlw	0
 11138  002FEC  6E22               	movwf	?_strtok+1,c
 11139  002FEE  0012               	return	
 11140  002FF0                     l1746:
 11141  002FF0  C021  F01A         	movff	strtok@s1,strspn@s1
 11142  002FF4  C022  F01B         	movff	strtok@s1+1,strspn@s1+1
 11143  002FF8  C023  F01C         	movff	strtok@s2,strspn@s2
 11144  002FFC  C024  F01D         	movff	strtok@s2+1,strspn@s2+1
 11145  003000  ECD1  F01A         	call	_strspn	;wreg free
 11146  003004  501A               	movf	?_strspn,w,c
 11147  003006  2621               	addwf	strtok@s1,f,c
 11148  003008  501B               	movf	?_strspn+1,w,c
 11149  00300A  2222               	addwfc	strtok@s1+1,f,c
 11150  00300C  C021  FFD9         	movff	strtok@s1,fsr2l
 11151  003010  C022  FFDA         	movff	strtok@s1+1,fsr2h
 11152  003014  50DF               	movf	indf2,w,c
 11153  003016  A4D8               	btfss	status,2,c
 11154  003018  D009               	goto	l1748
 11155  00301A  0E00               	movlw	0
 11156  00301C  6E39               	movwf	strtok@sp,c
 11157  00301E  0E00               	movlw	0
 11158  003020  6E3A               	movwf	strtok@sp+1,c
 11159  003022  C039  F021         	movff	strtok@sp,?_strtok
 11160  003026  C03A  F022         	movff	strtok@sp+1,?_strtok+1
 11161  00302A  0012               	return	
 11162  00302C                     l1748:
 11163  00302C  C021  F01A         	movff	strtok@s1,strcspn@s1
 11164  003030  C022  F01B         	movff	strtok@s1+1,strcspn@s1+1
 11165  003034  C023  F01C         	movff	strtok@s2,strcspn@s2
 11166  003038  C024  F01D         	movff	strtok@s2+1,strcspn@s2+1
 11167  00303C  ECF9  F01A         	call	_strcspn	;wreg free
 11168  003040  501A               	movf	?_strcspn,w,c
 11169  003042  2421               	addwf	strtok@s1,w,c
 11170  003044  6E39               	movwf	strtok@sp,c
 11171  003046  501B               	movf	?_strcspn+1,w,c
 11172  003048  2022               	addwfc	strtok@s1+1,w,c
 11173  00304A  6E3A               	movwf	strtok@sp+1,c
 11174  00304C  C039  FFD9         	movff	strtok@sp,fsr2l
 11175  003050  C03A  FFDA         	movff	strtok@sp+1,fsr2h
 11176  003054  50DF               	movf	indf2,w,c
 11177  003056  B4D8               	btfsc	status,2,c
 11178  003058  D009               	goto	l1749
 11179  00305A  C039  FFD9         	movff	strtok@sp,fsr2l
 11180  00305E  C03A  FFDA         	movff	strtok@sp+1,fsr2h
 11181  003062  0E00               	movlw	0
 11182  003064  6EDF               	movwf	indf2,c
 11183  003066  4A39               	infsnz	strtok@sp,f,c
 11184  003068  2A3A               	incf	strtok@sp+1,f,c
 11185  00306A  D004               	goto	l1750
 11186  00306C                     l1749:
 11187  00306C  0E00               	movlw	0
 11188  00306E  6E39               	movwf	strtok@sp,c
 11189  003070  0E00               	movlw	0
 11190  003072  6E3A               	movwf	strtok@sp+1,c
 11191  003074                     l1750:
 11192  003074  C021  F021         	movff	strtok@s1,?_strtok
 11193  003078  C022  F022         	movff	strtok@s1+1,?_strtok+1
 11194  00307C  0012               	return	
 11195  00307E                     __end_of_strtok:
 11196                           	opt stack 0
 11197                           tblptru	equ	0xFF8
 11198                           tblptrh	equ	0xFF7
 11199                           tblptrl	equ	0xFF6
 11200                           tablat	equ	0xFF5
 11201                           prodh	equ	0xFF4
 11202                           prodl	equ	0xFF3
 11203                           intcon	equ	0xFF2
 11204                           indf0	equ	0xFEF
 11205                           postinc0	equ	0xFEE
 11206                           fsr0h	equ	0xFEA
 11207                           fsr0l	equ	0xFE9
 11208                           wreg	equ	0xFE8
 11209                           indf1	equ	0xFE7
 11210                           postinc1	equ	0xFE6
 11211                           postdec1	equ	0xFE5
 11212                           fsr1h	equ	0xFE2
 11213                           fsr1l	equ	0xFE1
 11214                           indf2	equ	0xFDF
 11215                           postinc2	equ	0xFDE
 11216                           postdec2	equ	0xFDD
 11217                           fsr2h	equ	0xFDA
 11218                           fsr2l	equ	0xFD9
 11219                           status	equ	0xFD8
 11220                           
 11221 ;; *************** function _strspn *****************
 11222 ;; Defined at:
 11223 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strspn.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;  s1              2   25[COMRAM] PTR const unsigned char 
 11226 ;;		 -> uart_str(150), NULL(0), 
 11227 ;;  s2              2   27[COMRAM] PTR const unsigned char 
 11228 ;;		 -> STR_89(7), STR_88(7), STR_87(7), STR_84(7), 
 11229 ;;		 -> STR_82(7), STR_80(7), STR_78(7), STR_76(2), 
 11230 ;;		 -> STR_74(7), STR_69(7), STR_67(7), STR_65(7), 
 11231 ;;		 -> STR_63(7), STR_61(7), STR_60(7), STR_56(7), 
 11232 ;;		 -> STR_53(7), STR_52(7), STR_48(2), STR_45(7), 
 11233 ;;		 -> STR_43(7), STR_41(7), STR_39(7), STR_37(7), 
 11234 ;;		 -> STR_36(7), STR_33(7), STR_31(7), STR_29(7), 
 11235 ;; Auto vars:     Size  Location     Type
 11236 ;;  i               2   30[COMRAM] unsigned int 
 11237 ;; Return value:  Size  Location     Type
 11238 ;;                  2   25[COMRAM] unsigned int 
 11239 ;; Registers used:
 11240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11241 ;; Tracked objects:
 11242 ;;		On entry : 0/0
 11243 ;;		On exit  : 0/0
 11244 ;;		Unchanged: 0/0
 11245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11246 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11247 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11249 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11250 ;;Total ram usage:        7 bytes
 11251 ;; Hardware stack levels used:    1
 11252 ;; Hardware stack levels required when called:    6
 11253 ;; This function calls:
 11254 ;;		_strchr
 11255 ;; This function is called by:
 11256 ;;		_strtok
 11257 ;; This function uses a non-reentrant model
 11258 ;;
 11259                           
 11260                           	psect	text44
 11261  0035A2                     __ptext44:
 11262                           	opt stack 0
 11263  0035A2                     _strspn:
 11264                           	opt stack 21
 11265                           
 11266                           ;incstack = 0
 11267  0035A2  0E00               	movlw	0
 11268  0035A4  6E20               	movwf	strspn@i+1,c
 11269  0035A6  0E00               	movlw	0
 11270  0035A8  6E1F               	movwf	strspn@i,c
 11271  0035AA  D004               	goto	l1807
 11272  0035AC  4A1A               	infsnz	strspn@s1,f,c
 11273  0035AE  2A1B               	incf	strspn@s1+1,f,c
 11274  0035B0  4A1F               	infsnz	strspn@i,f,c
 11275  0035B2  2A20               	incf	strspn@i+1,f,c
 11276  0035B4                     l1807:
 11277  0035B4  C01A  FFD9         	movff	strspn@s1,fsr2l
 11278  0035B8  C01B  FFDA         	movff	strspn@s1+1,fsr2h
 11279  0035BC  50DF               	movf	indf2,w,c
 11280  0035BE  B4D8               	btfsc	status,2,c
 11281  0035C0  D013               	goto	u4070
 11282  0035C2  C01C  F014         	movff	strspn@s2,strchr@ptr
 11283  0035C6  C01D  F015         	movff	strspn@s2+1,strchr@ptr+1
 11284  0035CA  C01A  FFD9         	movff	strspn@s1,fsr2l
 11285  0035CE  C01B  FFDA         	movff	strspn@s1+1,fsr2h
 11286  0035D2  50DF               	movf	indf2,w,c
 11287  0035D4  6E1E               	movwf	??_strspn& (0+255),c
 11288  0035D6  501E               	movf	??_strspn,w,c
 11289  0035D8  6E16               	movwf	strchr@chr,c
 11290  0035DA  6A17               	clrf	strchr@chr+1,c
 11291  0035DC  EC8B  F019         	call	_strchr	;wreg free
 11292  0035E0  5014               	movf	?_strchr,w,c
 11293  0035E2  1015               	iorwf	?_strchr+1,w,c
 11294  0035E4  A4D8               	btfss	status,2,c
 11295  0035E6  D7E2               	goto	l1808
 11296  0035E8                     u4070:
 11297  0035E8  C01F  F01A         	movff	strspn@i,?_strspn
 11298  0035EC  C020  F01B         	movff	strspn@i+1,?_strspn+1
 11299  0035F0  0012               	return		;funcret
 11300  0035F2                     __end_of_strspn:
 11301                           	opt stack 0
 11302                           tblptru	equ	0xFF8
 11303                           tblptrh	equ	0xFF7
 11304                           tblptrl	equ	0xFF6
 11305                           tablat	equ	0xFF5
 11306                           prodh	equ	0xFF4
 11307                           prodl	equ	0xFF3
 11308                           intcon	equ	0xFF2
 11309                           indf0	equ	0xFEF
 11310                           postinc0	equ	0xFEE
 11311                           fsr0h	equ	0xFEA
 11312                           fsr0l	equ	0xFE9
 11313                           wreg	equ	0xFE8
 11314                           indf1	equ	0xFE7
 11315                           postinc1	equ	0xFE6
 11316                           postdec1	equ	0xFE5
 11317                           fsr1h	equ	0xFE2
 11318                           fsr1l	equ	0xFE1
 11319                           indf2	equ	0xFDF
 11320                           postinc2	equ	0xFDE
 11321                           postdec2	equ	0xFDD
 11322                           fsr2h	equ	0xFDA
 11323                           fsr2l	equ	0xFD9
 11324                           status	equ	0xFD8
 11325                           
 11326 ;; *************** function _strcspn *****************
 11327 ;; Defined at:
 11328 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strcspn.c"
 11329 ;; Parameters:    Size  Location     Type
 11330 ;;  s1              2   25[COMRAM] PTR const unsigned char 
 11331 ;;		 -> uart_str(150), NULL(0), 
 11332 ;;  s2              2   27[COMRAM] PTR const unsigned char 
 11333 ;;		 -> STR_89(7), STR_88(7), STR_87(7), STR_84(7), 
 11334 ;;		 -> STR_82(7), STR_80(7), STR_78(7), STR_76(2), 
 11335 ;;		 -> STR_74(7), STR_69(7), STR_67(7), STR_65(7), 
 11336 ;;		 -> STR_63(7), STR_61(7), STR_60(7), STR_56(7), 
 11337 ;;		 -> STR_53(7), STR_52(7), STR_48(2), STR_45(7), 
 11338 ;;		 -> STR_43(7), STR_41(7), STR_39(7), STR_37(7), 
 11339 ;;		 -> STR_36(7), STR_33(7), STR_31(7), STR_29(7), 
 11340 ;; Auto vars:     Size  Location     Type
 11341 ;;  i               2   30[COMRAM] unsigned int 
 11342 ;; Return value:  Size  Location     Type
 11343 ;;                  2   25[COMRAM] unsigned int 
 11344 ;; Registers used:
 11345 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11346 ;; Tracked objects:
 11347 ;;		On entry : 0/0
 11348 ;;		On exit  : 0/0
 11349 ;;		Unchanged: 0/0
 11350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11351 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11352 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11353 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11354 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11355 ;;Total ram usage:        7 bytes
 11356 ;; Hardware stack levels used:    1
 11357 ;; Hardware stack levels required when called:    6
 11358 ;; This function calls:
 11359 ;;		_strchr
 11360 ;; This function is called by:
 11361 ;;		_strtok
 11362 ;; This function uses a non-reentrant model
 11363 ;;
 11364                           
 11365                           	psect	text45
 11366  0035F2                     __ptext45:
 11367                           	opt stack 0
 11368  0035F2                     _strcspn:
 11369                           	opt stack 21
 11370                           
 11371                           ;incstack = 0
 11372  0035F2  0E00               	movlw	0
 11373  0035F4  6E20               	movwf	strcspn@i+1,c
 11374  0035F6  0E00               	movlw	0
 11375  0035F8  6E1F               	movwf	strcspn@i,c
 11376  0035FA  D004               	goto	l1788
 11377  0035FC  4A1A               	infsnz	strcspn@s1,f,c
 11378  0035FE  2A1B               	incf	strcspn@s1+1,f,c
 11379  003600  4A1F               	infsnz	strcspn@i,f,c
 11380  003602  2A20               	incf	strcspn@i+1,f,c
 11381  003604                     l1788:
 11382  003604  C01A  FFD9         	movff	strcspn@s1,fsr2l
 11383  003608  C01B  FFDA         	movff	strcspn@s1+1,fsr2h
 11384  00360C  50DF               	movf	indf2,w,c
 11385  00360E  B4D8               	btfsc	status,2,c
 11386  003610  D013               	goto	u4090
 11387  003612  C01C  F014         	movff	strcspn@s2,strchr@ptr
 11388  003616  C01D  F015         	movff	strcspn@s2+1,strchr@ptr+1
 11389  00361A  C01A  FFD9         	movff	strcspn@s1,fsr2l
 11390  00361E  C01B  FFDA         	movff	strcspn@s1+1,fsr2h
 11391  003622  50DF               	movf	indf2,w,c
 11392  003624  6E1E               	movwf	??_strcspn& (0+255),c
 11393  003626  501E               	movf	??_strcspn,w,c
 11394  003628  6E16               	movwf	strchr@chr,c
 11395  00362A  6A17               	clrf	strchr@chr+1,c
 11396  00362C  EC8B  F019         	call	_strchr	;wreg free
 11397  003630  5014               	movf	?_strchr,w,c
 11398  003632  1015               	iorwf	?_strchr+1,w,c
 11399  003634  B4D8               	btfsc	status,2,c
 11400  003636  D7E2               	goto	l1789
 11401  003638                     u4090:
 11402  003638  C01F  F01A         	movff	strcspn@i,?_strcspn
 11403  00363C  C020  F01B         	movff	strcspn@i+1,?_strcspn+1
 11404  003640  0012               	return		;funcret
 11405  003642                     __end_of_strcspn:
 11406                           	opt stack 0
 11407                           tblptru	equ	0xFF8
 11408                           tblptrh	equ	0xFF7
 11409                           tblptrl	equ	0xFF6
 11410                           tablat	equ	0xFF5
 11411                           prodh	equ	0xFF4
 11412                           prodl	equ	0xFF3
 11413                           intcon	equ	0xFF2
 11414                           indf0	equ	0xFEF
 11415                           postinc0	equ	0xFEE
 11416                           fsr0h	equ	0xFEA
 11417                           fsr0l	equ	0xFE9
 11418                           wreg	equ	0xFE8
 11419                           indf1	equ	0xFE7
 11420                           postinc1	equ	0xFE6
 11421                           postdec1	equ	0xFE5
 11422                           fsr1h	equ	0xFE2
 11423                           fsr1l	equ	0xFE1
 11424                           indf2	equ	0xFDF
 11425                           postinc2	equ	0xFDE
 11426                           postdec2	equ	0xFDD
 11427                           fsr2h	equ	0xFDA
 11428                           fsr2l	equ	0xFD9
 11429                           status	equ	0xFD8
 11430                           
 11431 ;; *************** function _strstr *****************
 11432 ;; Defined at:
 11433 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strstr.c"
 11434 ;; Parameters:    Size  Location     Type
 11435 ;;  s1              2   48[COMRAM] PTR const unsigned char 
 11436 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
 11437 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
 11438 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
 11439 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
 11440 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_48(2), 
 11441 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
 11442 ;;		 -> STR_37(7), STR_36(7), STR_33(7), STR_31(7), 
 11443 ;;		 -> STR_29(7), NULL(0), 
 11444 ;;  s2              2   50[COMRAM] PTR const unsigned char 
 11445 ;;		 -> STR_90(4), STR_73(5), STR_72(7), STR_59(7), 
 11446 ;;		 -> STR_50(8), STR_42(6), STR_40(6), STR_35(5), 
 11447 ;;		 -> STR_32(6), STR_30(4), STR_28(4), 
 11448 ;; Auto vars:     Size  Location     Type
 11449 ;;		None
 11450 ;; Return value:  Size  Location     Type
 11451 ;;                  2   48[COMRAM] PTR unsigned char 
 11452 ;; Registers used:
 11453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11454 ;; Tracked objects:
 11455 ;;		On entry : 0/0
 11456 ;;		On exit  : 0/0
 11457 ;;		Unchanged: 0/0
 11458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11459 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11462 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11463 ;;Total ram usage:        4 bytes
 11464 ;; Hardware stack levels used:    1
 11465 ;; Hardware stack levels required when called:    6
 11466 ;; This function calls:
 11467 ;;		_strchr
 11468 ;;		_strlen
 11469 ;;		_strncmp
 11470 ;; This function is called by:
 11471 ;;		_parse_cmd_str
 11472 ;; This function uses a non-reentrant model
 11473 ;;
 11474                           
 11475                           	psect	text46
 11476  00307E                     __ptext46:
 11477                           	opt stack 0
 11478  00307E                     _strstr:
 11479                           	opt stack 22
 11480                           
 11481                           ;incstack = 0
 11482  00307E  D032               	goto	l1730
 11483  003080  C031  F028         	movff	strstr@s1,strncmp@s1
 11484  003084  C032  F029         	movff	strstr@s1+1,strncmp@s1+1
 11485  003088  C033  F02A         	movff	strstr@s2,strncmp@s2
 11486  00308C  C034  F02B         	movff	strstr@s2+1,strncmp@s2+1
 11487  003090  C033  F022         	movff	strstr@s2,strlen@s
 11488  003094  C034  F023         	movff	strstr@s2+1,strlen@s+1
 11489  003098  EC7E  F01A         	call	_strlen	;wreg free
 11490  00309C  C022  F02C         	movff	?_strlen,strncmp@len
 11491  0030A0  C023  F02D         	movff	?_strlen+1,strncmp@len+1
 11492  0030A4  EC25  F017         	call	_strncmp	;wreg free
 11493  0030A8  5028               	movf	?_strncmp,w,c
 11494  0030AA  1029               	iorwf	?_strncmp+1,w,c
 11495  0030AC  A4D8               	btfss	status,2,c
 11496  0030AE  D005               	goto	l1732
 11497  0030B0  C031  F031         	movff	strstr@s1,?_strstr
 11498  0030B4  C032  F032         	movff	strstr@s1+1,?_strstr+1
 11499  0030B8  0012               	return	
 11500  0030BA                     l1732:
 11501  0030BA  0E01               	movlw	1
 11502  0030BC  2431               	addwf	strstr@s1,w,c
 11503  0030BE  6E14               	movwf	strchr@ptr,c
 11504  0030C0  0E00               	movlw	0
 11505  0030C2  2032               	addwfc	strstr@s1+1,w,c
 11506  0030C4  6E15               	movwf	strchr@ptr+1,c
 11507  0030C6  C033  FFF6         	movff	strstr@s2,tblptrl
 11508  0030CA  C034  FFF7         	movff	strstr@s2+1,tblptrh
 11509  0030CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11510  0030CE  6AF8               	clrf	tblptru,c
 11511  0030D0                     	endif
 11512  0030D0                     	if	0	;tblptru may be non-zero
 11513  0030D0                     	endif
 11514  0030D0  0008               	tblrd		*
 11515  0030D2  50F5               	movf	tablat,w,c
 11516  0030D4  6E16               	movwf	strchr@chr,c
 11517  0030D6  6A17               	clrf	strchr@chr+1,c
 11518  0030D8  EC8B  F019         	call	_strchr	;wreg free
 11519  0030DC  C014  F031         	movff	?_strchr,strstr@s1
 11520  0030E0  C015  F032         	movff	?_strchr+1,strstr@s1+1
 11521  0030E4                     l1730:
 11522  0030E4  5031               	movf	strstr@s1,w,c
 11523  0030E6  1032               	iorwf	strstr@s1+1,w,c
 11524  0030E8  B4D8               	btfsc	status,2,c
 11525  0030EA  D014               	goto	u7090
 11526  0030EC  C031  FFF6         	movff	strstr@s1,tblptrl
 11527  0030F0  C032  FFF7         	movff	strstr@s1+1,tblptrh
 11528  0030F4  0E00               	movlw	low (__mediumconst shr (0+16))
 11529  0030F6  6EF8               	movwf	tblptru,c
 11530  0030F8  0E0F               	movlw	(high __ramtop+-1)
 11531  0030FA  64F7               	cpfsgt	tblptrh,c
 11532  0030FC  D003               	bra	u7087
 11533  0030FE  0008               	tblrd		*
 11534  003100  50F5               	movf	tablat,w,c
 11535  003102  D005               	bra	u7080
 11536  003104                     u7087:
 11537  003104  CFF6 FFE9          	movff	tblptrl,fsr0l
 11538  003108  CFF7 FFEA          	movff	tblptrh,fsr0h
 11539  00310C  50EF               	movf	indf0,w,c
 11540  00310E                     u7080:
 11541  00310E  0900               	iorlw	0
 11542  003110  A4D8               	btfss	status,2,c
 11543  003112  D7B6               	goto	l1731
 11544  003114                     u7090:
 11545  003114  0E00               	movlw	0
 11546  003116  6E31               	movwf	?_strstr,c
 11547  003118  0E00               	movlw	0
 11548  00311A  6E32               	movwf	?_strstr+1,c
 11549  00311C  0012               	return	
 11550  00311E                     __end_of_strstr:
 11551                           	opt stack 0
 11552                           tblptru	equ	0xFF8
 11553                           tblptrh	equ	0xFF7
 11554                           tblptrl	equ	0xFF6
 11555                           tablat	equ	0xFF5
 11556                           prodh	equ	0xFF4
 11557                           prodl	equ	0xFF3
 11558                           intcon	equ	0xFF2
 11559                           indf0	equ	0xFEF
 11560                           postinc0	equ	0xFEE
 11561                           fsr0h	equ	0xFEA
 11562                           fsr0l	equ	0xFE9
 11563                           wreg	equ	0xFE8
 11564                           indf1	equ	0xFE7
 11565                           postinc1	equ	0xFE6
 11566                           postdec1	equ	0xFE5
 11567                           fsr1h	equ	0xFE2
 11568                           fsr1l	equ	0xFE1
 11569                           indf2	equ	0xFDF
 11570                           postinc2	equ	0xFDE
 11571                           postdec2	equ	0xFDD
 11572                           fsr2h	equ	0xFDA
 11573                           fsr2l	equ	0xFD9
 11574                           status	equ	0xFD8
 11575                           
 11576 ;; *************** function _strncmp *****************
 11577 ;; Defined at:
 11578 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strncmp.c"
 11579 ;; Parameters:    Size  Location     Type
 11580 ;;  s1              2   39[COMRAM] PTR const unsigned char 
 11581 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
 11582 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
 11583 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
 11584 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
 11585 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_48(2), 
 11586 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
 11587 ;;		 -> STR_37(7), STR_36(7), STR_33(7), STR_31(7), 
 11588 ;;		 -> STR_29(7), NULL(0), 
 11589 ;;  s2              2   41[COMRAM] PTR const unsigned char 
 11590 ;;		 -> STR_90(4), STR_73(5), STR_72(7), STR_59(7), 
 11591 ;;		 -> STR_50(8), STR_42(6), STR_40(6), STR_35(5), 
 11592 ;;		 -> STR_32(6), STR_30(4), STR_28(4), 
 11593 ;;  len             2   43[COMRAM] unsigned int 
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;		None
 11596 ;; Return value:  Size  Location     Type
 11597 ;;                  2   39[COMRAM] int 
 11598 ;; Registers used:
 11599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 11600 ;; Tracked objects:
 11601 ;;		On entry : 0/0
 11602 ;;		On exit  : 0/0
 11603 ;;		Unchanged: 0/0
 11604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11605 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11607 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11608 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;Total ram usage:        9 bytes
 11610 ;; Hardware stack levels used:    1
 11611 ;; Hardware stack levels required when called:    5
 11612 ;; This function calls:
 11613 ;;		Nothing
 11614 ;; This function is called by:
 11615 ;;		_strstr
 11616 ;; This function uses a non-reentrant model
 11617 ;;
 11618                           
 11619                           	psect	text47
 11620  002E4A                     __ptext47:
 11621                           	opt stack 0
 11622  002E4A                     _strncmp:
 11623                           	opt stack 22
 11624                           
 11625                           ;incstack = 0
 11626  002E4A  D05A               	goto	l1796
 11627  002E4C                     l4776:
 11628  002E4C  C028  FFF6         	movff	strncmp@s1,tblptrl
 11629  002E50  C029  FFF7         	movff	strncmp@s1+1,tblptrh
 11630  002E54  0E00               	movlw	low (__mediumconst shr (0+16))
 11631  002E56  6EF8               	movwf	tblptru,c
 11632  002E58  0E0F               	movlw	(high __ramtop+-1)
 11633  002E5A  64F7               	cpfsgt	tblptrh,c
 11634  002E5C  D003               	bra	u4017
 11635  002E5E  0008               	tblrd		*
 11636  002E60  50F5               	movf	tablat,w,c
 11637  002E62  D005               	bra	u4010
 11638  002E64                     u4017:
 11639  002E64  CFF6 FFE9          	movff	tblptrl,fsr0l
 11640  002E68  CFF7 FFEA          	movff	tblptrh,fsr0h
 11641  002E6C  50EF               	movf	indf0,w,c
 11642  002E6E                     u4010:
 11643  002E6E  0900               	iorlw	0
 11644  002E70  B4D8               	btfsc	status,2,c
 11645  002E72  D01C               	goto	u4030
 11646  002E74  C02A  FFF6         	movff	strncmp@s2,tblptrl
 11647  002E78  C02B  FFF7         	movff	strncmp@s2+1,tblptrh
 11648  002E7C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11649  002E7C  6AF8               	clrf	tblptru,c
 11650  002E7E                     	endif
 11651  002E7E                     	if	0	;tblptru may be non-zero
 11652  002E7E                     	endif
 11653  002E7E  0008               	tblrd		*
 11654  002E80  CFF5 F02E          	movff	tablat,??_strncmp
 11655  002E84  C028  FFF6         	movff	strncmp@s1,tblptrl
 11656  002E88  C029  FFF7         	movff	strncmp@s1+1,tblptrh
 11657  002E8C  0E00               	movlw	low (__mediumconst shr (0+16))
 11658  002E8E  6EF8               	movwf	tblptru,c
 11659  002E90  0E0F               	movlw	(high __ramtop+-1)
 11660  002E92  64F7               	cpfsgt	tblptrh,c
 11661  002E94  D003               	bra	u4037
 11662  002E96  0008               	tblrd		*
 11663  002E98  50F5               	movf	tablat,w,c
 11664  002E9A  D005               	bra	u4035
 11665  002E9C                     u4037:
 11666  002E9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11667  002EA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 11668  002EA4  50EF               	movf	indf0,w,c
 11669  002EA6                     u4035:
 11670  002EA6  182E               	xorwf	??_strncmp,w,c
 11671  002EA8  B4D8               	btfsc	status,2,c
 11672  002EAA  D026               	goto	l1798
 11673  002EAC                     u4030:
 11674  002EAC  C02A  FFF6         	movff	strncmp@s2,tblptrl
 11675  002EB0  C02B  FFF7         	movff	strncmp@s2+1,tblptrh
 11676  002EB4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11677  002EB4  6AF8               	clrf	tblptru,c
 11678  002EB6                     	endif
 11679  002EB6                     	if	0	;tblptru may be non-zero
 11680  002EB6                     	endif
 11681  002EB6  0008               	tblrd		*
 11682  002EB8  50F5               	movf	tablat,w,c
 11683  002EBA  6E2E               	movwf	??_strncmp& (0+255),c
 11684  002EBC  6A2F               	clrf	(??_strncmp+1)& (0+255),c
 11685  002EBE  1E2E               	comf	??_strncmp,f,c
 11686  002EC0  1E2F               	comf	??_strncmp+1,f,c
 11687  002EC2  4A2E               	infsnz	??_strncmp,f,c
 11688  002EC4  2A2F               	incf	??_strncmp+1,f,c
 11689  002EC6  C028  FFF6         	movff	strncmp@s1,tblptrl
 11690  002ECA  C029  FFF7         	movff	strncmp@s1+1,tblptrh
 11691  002ECE  0E00               	movlw	low (__mediumconst shr (0+16))
 11692  002ED0  6EF8               	movwf	tblptru,c
 11693  002ED2  0E0F               	movlw	(high __ramtop+-1)
 11694  002ED4  64F7               	cpfsgt	tblptrh,c
 11695  002ED6  D003               	bra	u4047
 11696  002ED8  0008               	tblrd		*
 11697  002EDA  50F5               	movf	tablat,w,c
 11698  002EDC  D005               	bra	u4040
 11699  002EDE                     u4047:
 11700  002EDE  CFF6 FFE9          	movff	tblptrl,fsr0l
 11701  002EE2  CFF7 FFEA          	movff	tblptrh,fsr0h
 11702  002EE6  50EF               	movf	indf0,w,c
 11703  002EE8                     u4040:
 11704  002EE8  6E30               	movwf	(??_strncmp+2)& (0+255),c
 11705  002EEA  5030               	movf	??_strncmp+2,w,c
 11706  002EEC  242E               	addwf	??_strncmp,w,c
 11707  002EEE  6E28               	movwf	?_strncmp,c
 11708  002EF0  0E00               	movlw	0
 11709  002EF2  202F               	addwfc	??_strncmp+1,w,c
 11710  002EF4  6E29               	movwf	?_strncmp+1,c
 11711  002EF6  0012               	return	
 11712  002EF8                     l1798:
 11713  002EF8  4A28               	infsnz	strncmp@s1,f,c
 11714  002EFA  2A29               	incf	strncmp@s1+1,f,c
 11715  002EFC  4A2A               	infsnz	strncmp@s2,f,c
 11716  002EFE  2A2B               	incf	strncmp@s2+1,f,c
 11717  002F00                     l1796:
 11718  002F00  062C               	decf	strncmp@len,f,c
 11719  002F02  A0D8               	btfss	status,0,c
 11720  002F04  062D               	decf	strncmp@len+1,f,c
 11721  002F06  282C               	incf	strncmp@len,w,c
 11722  002F08  E1A1               	bnz	l4776
 11723  002F0A  282D               	incf	strncmp@len+1,w,c
 11724  002F0C  A4D8               	btfss	status,2,c
 11725  002F0E  D79E               	goto	l1797
 11726  002F10  0E00               	movlw	0
 11727  002F12  6E29               	movwf	?_strncmp+1,c
 11728  002F14  0E00               	movlw	0
 11729  002F16  6E28               	movwf	?_strncmp,c
 11730  002F18  0012               	return	
 11731  002F1A                     __end_of_strncmp:
 11732                           	opt stack 0
 11733                           tblptru	equ	0xFF8
 11734                           tblptrh	equ	0xFF7
 11735                           tblptrl	equ	0xFF6
 11736                           tablat	equ	0xFF5
 11737                           prodh	equ	0xFF4
 11738                           prodl	equ	0xFF3
 11739                           intcon	equ	0xFF2
 11740                           indf0	equ	0xFEF
 11741                           postinc0	equ	0xFEE
 11742                           fsr0h	equ	0xFEA
 11743                           fsr0l	equ	0xFE9
 11744                           wreg	equ	0xFE8
 11745                           indf1	equ	0xFE7
 11746                           postinc1	equ	0xFE6
 11747                           postdec1	equ	0xFE5
 11748                           fsr1h	equ	0xFE2
 11749                           fsr1l	equ	0xFE1
 11750                           indf2	equ	0xFDF
 11751                           postinc2	equ	0xFDE
 11752                           postdec2	equ	0xFDD
 11753                           fsr2h	equ	0xFDA
 11754                           fsr2l	equ	0xFD9
 11755                           status	equ	0xFD8
 11756                           
 11757 ;; *************** function _strchr *****************
 11758 ;; Defined at:
 11759 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strchr.c"
 11760 ;; Parameters:    Size  Location     Type
 11761 ;;  ptr             2   19[COMRAM] PTR const unsigned char 
 11762 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
 11763 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
 11764 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
 11765 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
 11766 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_48(2), 
 11767 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
 11768 ;;		 -> STR_37(7), STR_36(7), STR_33(7), STR_31(7), 
 11769 ;;		 -> STR_29(7), NULL(0), 
 11770 ;;  chr             2   21[COMRAM] int 
 11771 ;; Auto vars:     Size  Location     Type
 11772 ;;		None
 11773 ;; Return value:  Size  Location     Type
 11774 ;;                  2   19[COMRAM] PTR unsigned char 
 11775 ;; Registers used:
 11776 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 11777 ;; Tracked objects:
 11778 ;;		On entry : 0/0
 11779 ;;		On exit  : 0/0
 11780 ;;		Unchanged: 0/0
 11781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11782 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11785 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11786 ;;Total ram usage:        6 bytes
 11787 ;; Hardware stack levels used:    1
 11788 ;; Hardware stack levels required when called:    5
 11789 ;; This function calls:
 11790 ;;		Nothing
 11791 ;; This function is called by:
 11792 ;;		_strstr
 11793 ;;		_strcspn
 11794 ;;		_strspn
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           	psect	text48
 11799  003316                     __ptext48:
 11800                           	opt stack 0
 11801  003316                     _strchr:
 11802                           	opt stack 21
 11803                           
 11804                           ;incstack = 0
 11805  003316  C014  FFF6         	movff	strchr@ptr,tblptrl
 11806  00331A  C015  FFF7         	movff	strchr@ptr+1,tblptrh
 11807  00331E  0E00               	movlw	low (__mediumconst shr (0+16))
 11808  003320  6EF8               	movwf	tblptru,c
 11809  003322  0E0F               	movlw	(high __ramtop+-1)
 11810  003324  64F7               	cpfsgt	tblptrh,c
 11811  003326  D003               	bra	u3717
 11812  003328  0008               	tblrd		*
 11813  00332A  50F5               	movf	tablat,w,c
 11814  00332C  D005               	bra	u3710
 11815  00332E                     u3717:
 11816  00332E  CFF6 FFE9          	movff	tblptrl,fsr0l
 11817  003332  CFF7 FFEA          	movff	tblptrh,fsr0h
 11818  003336  50EF               	movf	indf0,w,c
 11819  003338                     u3710:
 11820  003338  1816               	xorwf	strchr@chr,w,c
 11821  00333A  A4D8               	btfss	status,2,c
 11822  00333C  D005               	goto	l1781
 11823  00333E  C014  F014         	movff	strchr@ptr,?_strchr
 11824  003342  C015  F015         	movff	strchr@ptr+1,?_strchr+1
 11825  003346  0012               	return	
 11826  003348                     l1781:
 11827  003348  5014               	movf	strchr@ptr,w,c
 11828  00334A  6E18               	movwf	??_strchr& (0+255),c
 11829  00334C  5015               	movf	strchr@ptr+1,w,c
 11830  00334E  6E19               	movwf	(??_strchr+1)& (0+255),c
 11831  003350  4A14               	infsnz	strchr@ptr,f,c
 11832  003352  2A15               	incf	strchr@ptr+1,f,c
 11833  003354  C018  FFF6         	movff	??_strchr,tblptrl
 11834  003358  C019  FFF7         	movff	??_strchr+1,tblptrh
 11835  00335C  0E00               	movlw	low (__mediumconst shr (0+16))
 11836  00335E  6EF8               	movwf	tblptru,c
 11837  003360  0E0F               	movlw	(high __ramtop+-1)
 11838  003362  64F7               	cpfsgt	tblptrh,c
 11839  003364  D003               	bra	u3737
 11840  003366  0008               	tblrd		*
 11841  003368  50F5               	movf	tablat,w,c
 11842  00336A  D005               	bra	u3730
 11843  00336C                     u3737:
 11844  00336C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11845  003370  CFF7 FFEA          	movff	tblptrh,fsr0h
 11846  003374  50EF               	movf	indf0,w,c
 11847  003376                     u3730:
 11848  003376  0900               	iorlw	0
 11849  003378  A4D8               	btfss	status,2,c
 11850  00337A  D7CD               	goto	_strchr
 11851  00337C  0E00               	movlw	0
 11852  00337E  6E14               	movwf	?_strchr,c
 11853  003380  0E00               	movlw	0
 11854  003382  6E15               	movwf	?_strchr+1,c
 11855  003384  0012               	return	
 11856  003386                     __end_of_strchr:
 11857                           	opt stack 0
 11858                           tblptru	equ	0xFF8
 11859                           tblptrh	equ	0xFF7
 11860                           tblptrl	equ	0xFF6
 11861                           tablat	equ	0xFF5
 11862                           prodh	equ	0xFF4
 11863                           prodl	equ	0xFF3
 11864                           intcon	equ	0xFF2
 11865                           indf0	equ	0xFEF
 11866                           postinc0	equ	0xFEE
 11867                           fsr0h	equ	0xFEA
 11868                           fsr0l	equ	0xFE9
 11869                           wreg	equ	0xFE8
 11870                           indf1	equ	0xFE7
 11871                           postinc1	equ	0xFE6
 11872                           postdec1	equ	0xFE5
 11873                           fsr1h	equ	0xFE2
 11874                           fsr1l	equ	0xFE1
 11875                           indf2	equ	0xFDF
 11876                           postinc2	equ	0xFDE
 11877                           postdec2	equ	0xFDD
 11878                           fsr2h	equ	0xFDA
 11879                           fsr2l	equ	0xFD9
 11880                           status	equ	0xFD8
 11881                           
 11882 ;; *************** function _get_str *****************
 11883 ;; Defined at:
 11884 ;;		line 38 in file "cmd_consol.c"
 11885 ;; Parameters:    Size  Location     Type
 11886 ;;  str             2   47[COMRAM] PTR unsigned char 
 11887 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
 11888 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
 11889 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
 11890 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
 11891 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_48(2), 
 11892 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
 11893 ;;		 -> STR_37(7), STR_36(7), STR_33(7), RAM(3895), 
 11894 ;;		 -> STR_31(7), STR_29(7), NULL(0), 
 11895 ;;  data_str        2   49[COMRAM] PTR unsigned char 
 11896 ;;		 -> cmd_data(52), 
 11897 ;; Auto vars:     Size  Location     Type
 11898 ;;		None
 11899 ;; Return value:  Size  Location     Type
 11900 ;;                  1    wreg      unsigned char 
 11901 ;; Registers used:
 11902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11903 ;; Tracked objects:
 11904 ;;		On entry : 0/0
 11905 ;;		On exit  : 0/0
 11906 ;;		Unchanged: 0/0
 11907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11908 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11911 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11912 ;;Total ram usage:        4 bytes
 11913 ;; Hardware stack levels used:    1
 11914 ;; Hardware stack levels required when called:    6
 11915 ;; This function calls:
 11916 ;;		_memset
 11917 ;;		_strcpy
 11918 ;;		_strlen
 11919 ;; This function is called by:
 11920 ;;		_parse_cmd_str
 11921 ;; This function uses a non-reentrant model
 11922 ;;
 11923                           
 11924                           	psect	text49
 11925  003386                     __ptext49:
 11926                           	opt stack 0
 11927  003386                     _get_str:
 11928                           	opt stack 22
 11929                           
 11930                           ;cmd_consol.c: 39: if (strlen(str) < 40) {
 11931                           
 11932                           ;incstack = 0
 11933  003386  C030  F022         	movff	get_str@str,strlen@s
 11934  00338A  C031  F023         	movff	get_str@str+1,strlen@s+1
 11935  00338E  EC7E  F01A         	call	_strlen	;wreg free
 11936  003392  5023               	movf	?_strlen+1,w,c
 11937  003394  E129               	bnz	l6884
 11938  003396  0E28               	movlw	40
 11939  003398  5C22               	subwf	?_strlen,w,c
 11940  00339A  B0D8               	btfsc	status,0,c
 11941  00339C  D025               	goto	l735
 11942                           
 11943                           ;cmd_consol.c: 40: strcpy(data_str, str);
 11944  00339E  C032  F014         	movff	get_str@data_str,strcpy@to
 11945  0033A2  C033  F015         	movff	get_str@data_str+1,strcpy@to+1
 11946  0033A6  C030  F016         	movff	get_str@str,strcpy@from
 11947  0033AA  C031  F017         	movff	get_str@str+1,strcpy@from+1
 11948  0033AE  EC6B  F01B         	call	_strcpy	;wreg free
 11949                           
 11950                           ;cmd_consol.c: 41: valid_cmd = 1;
 11951  0033B2  0E01               	movlw	1
 11952  0033B4  0100               	movlb	0	; () banked
 11953  0033B6  6F82               	movwf	_valid_cmd& (0+255),b
 11954                           
 11955                           ; BSR set to: 0
 11956                           ;cmd_consol.c: 42: cmd_data.data_set = 1;
 11957  0033B8  0E01               	movlw	1
 11958  0033BA  6FAC               	movwf	(_cmd_data+41)& (0+255),b
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;cmd_consol.c: 43: memset(str, 0, strlen(str));
 11962  0033BC  C030  F028         	movff	get_str@str,memset@p1
 11963  0033C0  C031  F029         	movff	get_str@str+1,memset@p1+1
 11964  0033C4  0E00               	movlw	0
 11965  0033C6  6E2B               	movwf	memset@c+1,c
 11966  0033C8  0E00               	movlw	0
 11967  0033CA  6E2A               	movwf	memset@c,c
 11968  0033CC  C030  F022         	movff	get_str@str,strlen@s
 11969  0033D0  C031  F023         	movff	get_str@str+1,strlen@s+1
 11970  0033D4  EC7E  F01A         	call	_strlen	;wreg free
 11971  0033D8  C022  F02C         	movff	?_strlen,memset@n
 11972  0033DC  C023  F02D         	movff	?_strlen+1,memset@n+1
 11973  0033E0  EC8E  F01B         	call	_memset	;wreg free
 11974                           
 11975                           ;cmd_consol.c: 44: return 1;
 11976  0033E4  0E01               	movlw	1
 11977  0033E6  0012               	return	
 11978  0033E8                     l735:
 11979  0033E8                     l6884:
 11980                           
 11981                           ;cmd_consol.c: 45: }
 11982                           ;cmd_consol.c: 46: return 0;
 11983  0033E8  0E00               	movlw	0
 11984  0033EA  0012               	return	
 11985  0033EC                     __end_of_get_str:
 11986                           	opt stack 0
 11987                           tblptru	equ	0xFF8
 11988                           tblptrh	equ	0xFF7
 11989                           tblptrl	equ	0xFF6
 11990                           tablat	equ	0xFF5
 11991                           prodh	equ	0xFF4
 11992                           prodl	equ	0xFF3
 11993                           intcon	equ	0xFF2
 11994                           indf0	equ	0xFEF
 11995                           postinc0	equ	0xFEE
 11996                           fsr0h	equ	0xFEA
 11997                           fsr0l	equ	0xFE9
 11998                           wreg	equ	0xFE8
 11999                           indf1	equ	0xFE7
 12000                           postinc1	equ	0xFE6
 12001                           postdec1	equ	0xFE5
 12002                           fsr1h	equ	0xFE2
 12003                           fsr1l	equ	0xFE1
 12004                           indf2	equ	0xFDF
 12005                           postinc2	equ	0xFDE
 12006                           postdec2	equ	0xFDD
 12007                           fsr2h	equ	0xFDA
 12008                           fsr2l	equ	0xFD9
 12009                           status	equ	0xFD8
 12010                           
 12011 ;; *************** function _strcpy *****************
 12012 ;; Defined at:
 12013 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strcpy.c"
 12014 ;; Parameters:    Size  Location     Type
 12015 ;;  to              2   19[COMRAM] PTR unsigned char 
 12016 ;;		 -> CMD(15), cmd_data(52), clcd_display_string_details(1100), 
 12017 ;;  from            2   21[COMRAM] PTR const unsigned char 
 12018 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
 12019 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
 12020 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
 12021 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
 12022 ;;		 -> STR_56(7), STR_53(7), STR_52(7), cmd_data.data(40), 
 12023 ;;		 -> STR_48(2), STR_45(7), STR_43(7), STR_41(7), 
 12024 ;;		 -> STR_39(7), STR_37(7), STR_36(7), STR_33(7), 
 12025 ;;		 -> RAM(3895), STR_31(7), STR_29(7), NULL(0), 
 12026 ;;		 -> cmd_data(52), 
 12027 ;; Auto vars:     Size  Location     Type
 12028 ;;  cp              2   23[COMRAM] PTR unsigned char 
 12029 ;;		 -> CMD(15), cmd_data(52), clcd_display_string_details(1100), 
 12030 ;; Return value:  Size  Location     Type
 12031 ;;                  2   19[COMRAM] PTR unsigned char 
 12032 ;; Registers used:
 12033 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12034 ;; Tracked objects:
 12035 ;;		On entry : 0/0
 12036 ;;		On exit  : 0/0
 12037 ;;		Unchanged: 0/0
 12038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12039 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12040 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12042 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12043 ;;Total ram usage:        6 bytes
 12044 ;; Hardware stack levels used:    1
 12045 ;; Hardware stack levels required when called:    5
 12046 ;; This function calls:
 12047 ;;		Nothing
 12048 ;; This function is called by:
 12049 ;;		_copy_data
 12050 ;;		_get_str
 12051 ;;		_parse_cmd_str
 12052 ;;		_copy_display_struct
 12053 ;; This function uses a non-reentrant model
 12054 ;;
 12055                           
 12056                           	psect	text50
 12057  0036D6                     __ptext50:
 12058                           	opt stack 0
 12059  0036D6                     _strcpy:
 12060                           	opt stack 21
 12061                           
 12062                           ;incstack = 0
 12063  0036D6  C014  F018         	movff	strcpy@to,strcpy@cp
 12064  0036DA  C015  F019         	movff	strcpy@to+1,strcpy@cp+1
 12065  0036DE  D004               	goto	l1702
 12066  0036E0  4A18               	infsnz	strcpy@cp,f,c
 12067  0036E2  2A19               	incf	strcpy@cp+1,f,c
 12068  0036E4  4A16               	infsnz	strcpy@from,f,c
 12069  0036E6  2A17               	incf	strcpy@from+1,f,c
 12070  0036E8                     l1702:
 12071  0036E8  C016  FFF6         	movff	strcpy@from,tblptrl
 12072  0036EC  C017  FFF7         	movff	strcpy@from+1,tblptrh
 12073  0036F0  0E00               	movlw	low (__mediumconst shr (0+16))
 12074  0036F2  6EF8               	movwf	tblptru,c
 12075  0036F4  C018  FFD9         	movff	strcpy@cp,fsr2l
 12076  0036F8  C019  FFDA         	movff	strcpy@cp+1,fsr2h
 12077  0036FC  0E0F               	movlw	(high __ramtop+-1)
 12078  0036FE  64F7               	cpfsgt	tblptrh,c
 12079  003700  D003               	bra	u3447
 12080  003702  0008               	tblrd		*
 12081  003704  50F5               	movf	tablat,w,c
 12082  003706  D005               	bra	u3440
 12083  003708                     u3447:
 12084  003708  CFF6 FFE9          	movff	tblptrl,fsr0l
 12085  00370C  CFF7 FFEA          	movff	tblptrh,fsr0h
 12086  003710  50EF               	movf	indf0,w,c
 12087  003712                     u3440:
 12088  003712  6EDF               	movwf	indf2,c
 12089  003714  50DF               	movf	indf2,w,c
 12090  003716  B4D8               	btfsc	status,2,c
 12091  003718  0012               	return	
 12092  00371A  D7E2               	goto	l1703
 12093  00371C                     __end_of_strcpy:
 12094                           	opt stack 0
 12095                           tblptru	equ	0xFF8
 12096                           tblptrh	equ	0xFF7
 12097                           tblptrl	equ	0xFF6
 12098                           tablat	equ	0xFF5
 12099                           prodh	equ	0xFF4
 12100                           prodl	equ	0xFF3
 12101                           intcon	equ	0xFF2
 12102                           indf0	equ	0xFEF
 12103                           postinc0	equ	0xFEE
 12104                           fsr0h	equ	0xFEA
 12105                           fsr0l	equ	0xFE9
 12106                           wreg	equ	0xFE8
 12107                           indf1	equ	0xFE7
 12108                           postinc1	equ	0xFE6
 12109                           postdec1	equ	0xFE5
 12110                           fsr1h	equ	0xFE2
 12111                           fsr1l	equ	0xFE1
 12112                           indf2	equ	0xFDF
 12113                           postinc2	equ	0xFDE
 12114                           postdec2	equ	0xFDD
 12115                           fsr2h	equ	0xFDA
 12116                           fsr2l	equ	0xFD9
 12117                           status	equ	0xFD8
 12118                           
 12119 ;; *************** function _memset *****************
 12120 ;; Defined at:
 12121 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\memset.c"
 12122 ;; Parameters:    Size  Location     Type
 12123 ;;  p1              2   39[COMRAM] PTR void 
 12124 ;;		 -> uart_str(150), str_data(40), STR_89(7), STR_88(7), 
 12125 ;;		 -> STR_87(7), STR_84(7), STR_82(7), STR_80(7), 
 12126 ;;		 -> STR_78(7), STR_76(2), STR_74(7), STR_69(7), 
 12127 ;;		 -> STR_67(7), STR_65(7), STR_63(7), STR_61(7), 
 12128 ;;		 -> STR_60(7), STR_56(7), STR_53(7), STR_52(7), 
 12129 ;;		 -> STR_48(2), STR_45(7), STR_43(7), STR_41(7), 
 12130 ;;		 -> STR_39(7), STR_37(7), STR_36(7), STR_33(7), 
 12131 ;;		 -> RAM(3895), STR_31(7), CMD(15), STR_29(7), 
 12132 ;;		 -> NULL(0), cmd_data(52), conflict_arr(40), clcd_display_string_details(1100), 
 12133 ;;		 -> lcd_display_array(80), clcd_config_data(5), 
 12134 ;;  c               2   41[COMRAM] int 
 12135 ;;  n               2   43[COMRAM] unsigned int 
 12136 ;; Auto vars:     Size  Location     Type
 12137 ;;  p               2   45[COMRAM] PTR unsigned char 
 12138 ;;		 -> uart_str(150), str_data(40), STR_89(7), STR_88(7), 
 12139 ;;		 -> STR_87(7), STR_84(7), STR_82(7), STR_80(7), 
 12140 ;;		 -> STR_78(7), STR_76(2), STR_74(7), STR_69(7), 
 12141 ;;		 -> STR_67(7), STR_65(7), STR_63(7), STR_61(7), 
 12142 ;;		 -> STR_60(7), STR_56(7), STR_53(7), STR_52(7), 
 12143 ;;		 -> STR_48(2), STR_45(7), STR_43(7), STR_41(7), 
 12144 ;;		 -> STR_39(7), STR_37(7), STR_36(7), STR_33(7), 
 12145 ;;		 -> RAM(3895), STR_31(7), CMD(15), STR_29(7), 
 12146 ;;		 -> NULL(0), cmd_data(52), conflict_arr(40), clcd_display_string_details(1100), 
 12147 ;;		 -> lcd_display_array(80), clcd_config_data(5), 
 12148 ;; Return value:  Size  Location     Type
 12149 ;;                  2   39[COMRAM] PTR void 
 12150 ;; Registers used:
 12151 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 12152 ;; Tracked objects:
 12153 ;;		On entry : 0/0
 12154 ;;		On exit  : 0/0
 12155 ;;		Unchanged: 0/0
 12156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12157 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12158 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12160 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12161 ;;Total ram usage:        8 bytes
 12162 ;; Hardware stack levels used:    1
 12163 ;; Hardware stack levels required when called:    5
 12164 ;; This function calls:
 12165 ;;		Nothing
 12166 ;; This function is called by:
 12167 ;;		_init_CLCD_config
 12168 ;;		_init_clcd_cusotom_lcd
 12169 ;;		_update_string_data
 12170 ;;		_clcd_display_string_config
 12171 ;;		_clear_display_structure
 12172 ;;		_clear_display_array
 12173 ;;		_scroll_left_to_right
 12174 ;;		_scroll_right_to_left
 12175 ;;		_clear_cmd_data
 12176 ;;		_get_str
 12177 ;;		_parse_cmd_str
 12178 ;;		_console_init
 12179 ;;		_cmd_consol_task
 12180 ;;		_set_string_data
 12181 ;; This function uses a non-reentrant model
 12182 ;;
 12183                           
 12184                           	psect	text51
 12185  00371C                     __ptext51:
 12186                           	opt stack 0
 12187  00371C                     _memset:
 12188                           	opt stack 23
 12189                           
 12190                           ;incstack = 0
 12191  00371C  C028  F02E         	movff	memset@p1,memset@p
 12192  003720  C029  F02F         	movff	memset@p1+1,memset@p+1
 12193  003724  D015               	goto	l1553
 12194  003726                     l4126:
 12195  003726  C02E  FFF6         	movff	memset@p,tblptrl
 12196  00372A  C02F  FFF7         	movff	memset@p+1,tblptrh
 12197  00372E  0E00               	movlw	low (__mediumconst shr (0+16))
 12198  003730  6EF8               	movwf	tblptru,c
 12199  003732  0E0F               	movlw	(high __ramtop+-1)
 12200  003734  64F7               	cpfsgt	tblptrh,c
 12201  003736  D004               	bra	u3067
 12202  003738  C02A  FFF5         	movff	memset@c,tablat
 12203  00373C  000C               	tblwt		*
 12204  00373E  D006               	bra	u3060
 12205  003740                     u3067:
 12206  003740  CFF6 FFE9          	movff	tblptrl,fsr0l
 12207  003744  CFF7 FFEA          	movff	tblptrh,fsr0h
 12208  003748  C02A  FFEF         	movff	memset@c,indf0
 12209  00374C                     u3060:
 12210  00374C  4A2E               	infsnz	memset@p,f,c
 12211  00374E  2A2F               	incf	memset@p+1,f,c
 12212  003750                     l1553:
 12213  003750  062C               	decf	memset@n,f,c
 12214  003752  A0D8               	btfss	status,0,c
 12215  003754  062D               	decf	memset@n+1,f,c
 12216  003756  282C               	incf	memset@n,w,c
 12217  003758  E1E6               	bnz	l4126
 12218  00375A  282D               	incf	memset@n+1,w,c
 12219  00375C  B4D8               	btfsc	status,2,c
 12220  00375E  0012               	return	
 12221  003760  D7E2               	goto	l1554
 12222  003762                     __end_of_memset:
 12223                           	opt stack 0
 12224                           tblptru	equ	0xFF8
 12225                           tblptrh	equ	0xFF7
 12226                           tblptrl	equ	0xFF6
 12227                           tablat	equ	0xFF5
 12228                           prodh	equ	0xFF4
 12229                           prodl	equ	0xFF3
 12230                           intcon	equ	0xFF2
 12231                           indf0	equ	0xFEF
 12232                           postinc0	equ	0xFEE
 12233                           fsr0h	equ	0xFEA
 12234                           fsr0l	equ	0xFE9
 12235                           wreg	equ	0xFE8
 12236                           indf1	equ	0xFE7
 12237                           postinc1	equ	0xFE6
 12238                           postdec1	equ	0xFE5
 12239                           fsr1h	equ	0xFE2
 12240                           fsr1l	equ	0xFE1
 12241                           indf2	equ	0xFDF
 12242                           postinc2	equ	0xFDE
 12243                           postdec2	equ	0xFDD
 12244                           fsr2h	equ	0xFDA
 12245                           fsr2l	equ	0xFD9
 12246                           status	equ	0xFD8
 12247                           
 12248 ;; *************** function _get_over_write_data *****************
 12249 ;; Defined at:
 12250 ;;		line 85 in file "cmd_consol.c"
 12251 ;; Parameters:    Size  Location     Type
 12252 ;;  str             2   51[COMRAM] PTR unsigned char 
 12253 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
 12254 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
 12255 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
 12256 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
 12257 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_48(2), 
 12258 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
 12259 ;;		 -> STR_37(7), STR_36(7), STR_33(7), RAM(3895), 
 12260 ;;		 -> STR_31(7), STR_29(7), NULL(0), 
 12261 ;;  over_write_d    2   53[COMRAM] PTR unsigned char 
 12262 ;;		 -> cmd_data(52), 
 12263 ;; Auto vars:     Size  Location     Type
 12264 ;;  i               2    4[BANK0 ] int 
 12265 ;;  over_write      1    3[BANK0 ] unsigned char 
 12266 ;; Return value:  Size  Location     Type
 12267 ;;                  1    wreg      unsigned char 
 12268 ;; Registers used:
 12269 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12276 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12277 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12278 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12279 ;;Total ram usage:       10 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:    8
 12282 ;; This function calls:
 12283 ;;		_isdigit
 12284 ;;		_printf
 12285 ;;		_strlen
 12286 ;; This function is called by:
 12287 ;;		_parse_cmd_str
 12288 ;; This function uses a non-reentrant model
 12289 ;;
 12290                           
 12291                           	psect	text52
 12292  002BA8                     __ptext52:
 12293                           	opt stack 0
 12294  002BA8                     _get_over_write_data:
 12295                           	opt stack 20
 12296                           
 12297                           ;cmd_consol.c: 86: char over_write = 0;
 12298                           
 12299                           ;incstack = 0
 12300  002BA8  0E00               	movlw	0
 12301  002BAA  0100               	movlb	0	; () banked
 12302  002BAC  6FC9               	movwf	get_over_write_data@over_write& (0+255),b
 12303                           
 12304                           ;cmd_consol.c: 87: int i = 0;
 12305  002BAE  0E00               	movlw	0
 12306  002BB0  6FCB               	movwf	(get_over_write_data@i+1)& (0+255),b
 12307  002BB2  0E00               	movlw	0
 12308  002BB4  6FCA               	movwf	get_over_write_data@i& (0+255),b
 12309                           
 12310                           ;cmd_consol.c: 88: for (i = 0; i < strlen(str); i++) {
 12311  002BB6  0E00               	movlw	0
 12312  002BB8  6FCB               	movwf	(get_over_write_data@i+1)& (0+255),b
 12313  002BBA  0E00               	movlw	0
 12314  002BBC  6FCA               	movwf	get_over_write_data@i& (0+255),b
 12315  002BBE  D047               	goto	l757
 12316  002BC0                     
 12317                           ; BSR set to: 0
 12318                           ;cmd_consol.c: 89: if (isdigit(str[i]) == 1) {
 12319                           
 12320                           ; BSR set to: 0
 12321  002BC0  51CA               	movf	get_over_write_data@i& (0+255),w,b
 12322  002BC2  2434               	addwf	get_over_write_data@str,w,c
 12323  002BC4  6FC6               	movwf	??_get_over_write_data& (0+255),b
 12324  002BC6  51CB               	movf	(get_over_write_data@i+1)& (0+255),w,b
 12325  002BC8  2035               	addwfc	get_over_write_data@str+1,w,c
 12326  002BCA  6FC7               	movwf	(??_get_over_write_data+1)& (0+255),b
 12327  002BCC  C0C6  FFF6         	movff	??_get_over_write_data,tblptrl
 12328  002BD0  C0C7  FFF7         	movff	??_get_over_write_data+1,tblptrh
 12329  002BD4  0E00               	movlw	low (__mediumconst shr (0+16))
 12330  002BD6  6EF8               	movwf	tblptru,c
 12331  002BD8  0E0F               	movlw	(high __ramtop+-1)
 12332  002BDA  64F7               	cpfsgt	tblptrh,c
 12333  002BDC  D003               	bra	u6977
 12334  002BDE  0008               	tblrd		*
 12335  002BE0  50F5               	movf	tablat,w,c
 12336  002BE2  D005               	bra	u6970
 12337  002BE4                     u6977:
 12338  002BE4  CFF6 FFE9          	movff	tblptrl,fsr0l
 12339  002BE8  CFF7 FFEA          	movff	tblptrh,fsr0h
 12340  002BEC  50EF               	movf	indf0,w,c
 12341  002BEE                     u6970:
 12342  002BEE  EC80  F01D         	call	_isdigit
 12343  002BF2  A0D8               	btfss	status,0,c
 12344  002BF4  D021               	goto	l759
 12345                           
 12346                           ;cmd_consol.c: 90: over_write = over_write * 10 + (str[i] - '0');
 12347  002BF6  0100               	movlb	0	; () banked
 12348  002BF8  51CA               	movf	get_over_write_data@i& (0+255),w,b
 12349  002BFA  2434               	addwf	get_over_write_data@str,w,c
 12350  002BFC  6FC6               	movwf	??_get_over_write_data& (0+255),b
 12351  002BFE  51CB               	movf	(get_over_write_data@i+1)& (0+255),w,b
 12352  002C00  2035               	addwfc	get_over_write_data@str+1,w,c
 12353  002C02  6FC7               	movwf	(??_get_over_write_data+1)& (0+255),b
 12354  002C04  C0C6  FFF6         	movff	??_get_over_write_data,tblptrl
 12355  002C08  C0C7  FFF7         	movff	??_get_over_write_data+1,tblptrh
 12356  002C0C  0E00               	movlw	low (__mediumconst shr (0+16))
 12357  002C0E  6EF8               	movwf	tblptru,c
 12358  002C10  0E0F               	movlw	(high __ramtop+-1)
 12359  002C12  64F7               	cpfsgt	tblptrh,c
 12360  002C14  D003               	bra	u6997
 12361  002C16  0008               	tblrd		*
 12362  002C18  50F5               	movf	tablat,w,c
 12363  002C1A  D005               	bra	u6990
 12364  002C1C                     u6997:
 12365  002C1C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12366  002C20  CFF7 FFEA          	movff	tblptrh,fsr0h
 12367  002C24  50EF               	movf	indf0,w,c
 12368  002C26                     u6990:
 12369  002C26  0100               	movlb	0	; () banked
 12370  002C28  6FC8               	movwf	(??_get_over_write_data+2)& (0+255),b
 12371  002C2A  51C9               	movf	get_over_write_data@over_write& (0+255),w,b
 12372  002C2C  0D0A               	mullw	10
 12373  002C2E  50F3               	movf	prodl,w,c
 12374  002C30  25C8               	addwf	(??_get_over_write_data+2)& (0+255),w,b
 12375  002C32  0FD0               	addlw	208
 12376  002C34  6FC9               	movwf	get_over_write_data@over_write& (0+255),b
 12377                           
 12378                           ;cmd_consol.c: 91: } else {
 12379  002C36  D008               	goto	l760
 12380  002C38                     l759:
 12381                           
 12382                           ;cmd_consol.c: 92: *over_write_data = 0;
 12383                           
 12384                           ; BSR set to: 0
 12385  002C38  C036  FFD9         	movff	get_over_write_data@over_write_data,fsr2l
 12386  002C3C  C037  FFDA         	movff	get_over_write_data@over_write_data+1,fsr2h
 12387  002C40  0E00               	movlw	0
 12388  002C42  6EDF               	movwf	indf2,c
 12389                           
 12390                           ;cmd_consol.c: 93: return 0;
 12391  002C44  0E00               	movlw	0
 12392  002C46  0012               	return	
 12393  002C48                     l760:
 12394  002C48  0100               	movlb	0	; () banked
 12395  002C4A  4BCA               	infsnz	get_over_write_data@i& (0+255),f,b
 12396  002C4C  2BCB               	incf	(get_over_write_data@i+1)& (0+255),f,b
 12397  002C4E                     l757:
 12398                           
 12399                           ; BSR set to: 0
 12400                           
 12401                           ; BSR set to: 0
 12402  002C4E  C034  F022         	movff	get_over_write_data@str,strlen@s
 12403  002C52  C035  F023         	movff	get_over_write_data@str+1,strlen@s+1
 12404  002C56  EC7E  F01A         	call	_strlen	;wreg free
 12405  002C5A  5022               	movf	?_strlen,w,c
 12406  002C5C  0100               	movlb	0	; () banked
 12407  002C5E  5DCA               	subwf	get_over_write_data@i& (0+255),w,b
 12408  002C60  5023               	movf	?_strlen+1,w,c
 12409  002C62  59CB               	subwfb	(get_over_write_data@i+1)& (0+255),w,b
 12410  002C64  A0D8               	btfss	status,0,c
 12411  002C66  D7AC               	goto	l758
 12412                           
 12413                           ; BSR set to: 0
 12414                           ;cmd_consol.c: 94: }
 12415                           ;cmd_consol.c: 95: }
 12416                           ;cmd_consol.c: 96: printf("over_write = %d\r\n", over_write);
 12417                           
 12418                           ; BSR set to: 0
 12419  002C68  0EF6               	movlw	low STR_24
 12420  002C6A  6E22               	movwf	printf@f,c
 12421  002C6C  0EFD               	movlw	high STR_24
 12422  002C6E  6E23               	movwf	printf@f+1,c
 12423  002C70  C0C9  F024         	movff	get_over_write_data@over_write,?_printf+2
 12424  002C74  6A25               	clrf	?_printf+3,c
 12425  002C76  EC1B  F012         	call	_printf	;wreg free
 12426                           
 12427                           ;cmd_consol.c: 97: *over_write_data = over_write;
 12428  002C7A  C036  FFD9         	movff	get_over_write_data@over_write_data,fsr2l
 12429  002C7E  C037  FFDA         	movff	get_over_write_data@over_write_data+1,fsr2h
 12430  002C82  C0C9  FFDF         	movff	get_over_write_data@over_write,indf2
 12431                           
 12432                           ;cmd_consol.c: 98: return 1;
 12433  002C86  0E01               	movlw	1
 12434  002C88  0012               	return	
 12435  002C8A                     __end_of_get_over_write_data:
 12436                           	opt stack 0
 12437                           tblptru	equ	0xFF8
 12438                           tblptrh	equ	0xFF7
 12439                           tblptrl	equ	0xFF6
 12440                           tablat	equ	0xFF5
 12441                           prodh	equ	0xFF4
 12442                           prodl	equ	0xFF3
 12443                           intcon	equ	0xFF2
 12444                           indf0	equ	0xFEF
 12445                           postinc0	equ	0xFEE
 12446                           fsr0h	equ	0xFEA
 12447                           fsr0l	equ	0xFE9
 12448                           wreg	equ	0xFE8
 12449                           indf1	equ	0xFE7
 12450                           postinc1	equ	0xFE6
 12451                           postdec1	equ	0xFE5
 12452                           fsr1h	equ	0xFE2
 12453                           fsr1l	equ	0xFE1
 12454                           indf2	equ	0xFDF
 12455                           postinc2	equ	0xFDE
 12456                           postdec2	equ	0xFDD
 12457                           fsr2h	equ	0xFDA
 12458                           fsr2l	equ	0xFD9
 12459                           status	equ	0xFD8
 12460                           
 12461 ;; *************** function _get_dis_frq *****************
 12462 ;; Defined at:
 12463 ;;		line 68 in file "cmd_consol.c"
 12464 ;; Parameters:    Size  Location     Type
 12465 ;;  str             2   51[COMRAM] PTR unsigned char 
 12466 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
 12467 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
 12468 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
 12469 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
 12470 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_48(2), 
 12471 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
 12472 ;;		 -> STR_37(7), STR_36(7), STR_33(7), RAM(3895), 
 12473 ;;		 -> STR_31(7), STR_29(7), NULL(0), 
 12474 ;;  data_frq        2   53[COMRAM] PTR unsigned char 
 12475 ;;		 -> cmd_data(52), 
 12476 ;; Auto vars:     Size  Location     Type
 12477 ;;  i               2    4[BANK0 ] int 
 12478 ;;  frq             1    3[BANK0 ] unsigned char 
 12479 ;; Return value:  Size  Location     Type
 12480 ;;                  1    wreg      unsigned char 
 12481 ;; Registers used:
 12482 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12483 ;; Tracked objects:
 12484 ;;		On entry : 0/0
 12485 ;;		On exit  : 0/0
 12486 ;;		Unchanged: 0/0
 12487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12489 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12490 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12491 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12492 ;;Total ram usage:       10 bytes
 12493 ;; Hardware stack levels used:    1
 12494 ;; Hardware stack levels required when called:    8
 12495 ;; This function calls:
 12496 ;;		_isdigit
 12497 ;;		_printf
 12498 ;;		_strlen
 12499 ;; This function is called by:
 12500 ;;		_parse_cmd_str
 12501 ;; This function uses a non-reentrant model
 12502 ;;
 12503                           
 12504                           	psect	text53
 12505  002C8A                     __ptext53:
 12506                           	opt stack 0
 12507  002C8A                     _get_dis_frq:
 12508                           	opt stack 20
 12509                           
 12510                           ;cmd_consol.c: 69: char frq = 0;
 12511                           
 12512                           ;incstack = 0
 12513  002C8A  0E00               	movlw	0
 12514  002C8C  0100               	movlb	0	; () banked
 12515  002C8E  6FC9               	movwf	get_dis_frq@frq& (0+255),b
 12516                           
 12517                           ;cmd_consol.c: 70: int i = 0;
 12518  002C90  0E00               	movlw	0
 12519  002C92  6FCB               	movwf	(get_dis_frq@i+1)& (0+255),b
 12520  002C94  0E00               	movlw	0
 12521  002C96  6FCA               	movwf	get_dis_frq@i& (0+255),b
 12522                           
 12523                           ;cmd_consol.c: 71: for (i = 0; i < strlen(str); i++) {
 12524  002C98  0E00               	movlw	0
 12525  002C9A  6FCB               	movwf	(get_dis_frq@i+1)& (0+255),b
 12526  002C9C  0E00               	movlw	0
 12527  002C9E  6FCA               	movwf	get_dis_frq@i& (0+255),b
 12528  002CA0  D047               	goto	l749
 12529  002CA2                     
 12530                           ; BSR set to: 0
 12531                           ;cmd_consol.c: 72: if (isdigit(str[i]) == 1) {
 12532                           
 12533                           ; BSR set to: 0
 12534  002CA2  51CA               	movf	get_dis_frq@i& (0+255),w,b
 12535  002CA4  2434               	addwf	get_dis_frq@str,w,c
 12536  002CA6  6FC6               	movwf	??_get_dis_frq& (0+255),b
 12537  002CA8  51CB               	movf	(get_dis_frq@i+1)& (0+255),w,b
 12538  002CAA  2035               	addwfc	get_dis_frq@str+1,w,c
 12539  002CAC  6FC7               	movwf	(??_get_dis_frq+1)& (0+255),b
 12540  002CAE  C0C6  FFF6         	movff	??_get_dis_frq,tblptrl
 12541  002CB2  C0C7  FFF7         	movff	??_get_dis_frq+1,tblptrh
 12542  002CB6  0E00               	movlw	low (__mediumconst shr (0+16))
 12543  002CB8  6EF8               	movwf	tblptru,c
 12544  002CBA  0E0F               	movlw	(high __ramtop+-1)
 12545  002CBC  64F7               	cpfsgt	tblptrh,c
 12546  002CBE  D003               	bra	u6937
 12547  002CC0  0008               	tblrd		*
 12548  002CC2  50F5               	movf	tablat,w,c
 12549  002CC4  D005               	bra	u6930
 12550  002CC6                     u6937:
 12551  002CC6  CFF6 FFE9          	movff	tblptrl,fsr0l
 12552  002CCA  CFF7 FFEA          	movff	tblptrh,fsr0h
 12553  002CCE  50EF               	movf	indf0,w,c
 12554  002CD0                     u6930:
 12555  002CD0  EC80  F01D         	call	_isdigit
 12556  002CD4  A0D8               	btfss	status,0,c
 12557  002CD6  D021               	goto	l751
 12558                           
 12559                           ;cmd_consol.c: 73: frq = frq * 10 + (str[i] - '0');
 12560  002CD8  0100               	movlb	0	; () banked
 12561  002CDA  51CA               	movf	get_dis_frq@i& (0+255),w,b
 12562  002CDC  2434               	addwf	get_dis_frq@str,w,c
 12563  002CDE  6FC6               	movwf	??_get_dis_frq& (0+255),b
 12564  002CE0  51CB               	movf	(get_dis_frq@i+1)& (0+255),w,b
 12565  002CE2  2035               	addwfc	get_dis_frq@str+1,w,c
 12566  002CE4  6FC7               	movwf	(??_get_dis_frq+1)& (0+255),b
 12567  002CE6  C0C6  FFF6         	movff	??_get_dis_frq,tblptrl
 12568  002CEA  C0C7  FFF7         	movff	??_get_dis_frq+1,tblptrh
 12569  002CEE  0E00               	movlw	low (__mediumconst shr (0+16))
 12570  002CF0  6EF8               	movwf	tblptru,c
 12571  002CF2  0E0F               	movlw	(high __ramtop+-1)
 12572  002CF4  64F7               	cpfsgt	tblptrh,c
 12573  002CF6  D003               	bra	u6957
 12574  002CF8  0008               	tblrd		*
 12575  002CFA  50F5               	movf	tablat,w,c
 12576  002CFC  D005               	bra	u6950
 12577  002CFE                     u6957:
 12578  002CFE  CFF6 FFE9          	movff	tblptrl,fsr0l
 12579  002D02  CFF7 FFEA          	movff	tblptrh,fsr0h
 12580  002D06  50EF               	movf	indf0,w,c
 12581  002D08                     u6950:
 12582  002D08  0100               	movlb	0	; () banked
 12583  002D0A  6FC8               	movwf	(??_get_dis_frq+2)& (0+255),b
 12584  002D0C  51C9               	movf	get_dis_frq@frq& (0+255),w,b
 12585  002D0E  0D0A               	mullw	10
 12586  002D10  50F3               	movf	prodl,w,c
 12587  002D12  25C8               	addwf	(??_get_dis_frq+2)& (0+255),w,b
 12588  002D14  0FD0               	addlw	208
 12589  002D16  6FC9               	movwf	get_dis_frq@frq& (0+255),b
 12590                           
 12591                           ;cmd_consol.c: 74: } else {
 12592  002D18  D008               	goto	l752
 12593  002D1A                     l751:
 12594                           
 12595                           ;cmd_consol.c: 75: *data_frq = 1;
 12596                           
 12597                           ; BSR set to: 0
 12598  002D1A  C036  FFD9         	movff	get_dis_frq@data_frq,fsr2l
 12599  002D1E  C037  FFDA         	movff	get_dis_frq@data_frq+1,fsr2h
 12600  002D22  0E01               	movlw	1
 12601  002D24  6EDF               	movwf	indf2,c
 12602                           
 12603                           ;cmd_consol.c: 77: return 0;
 12604  002D26  0E00               	movlw	0
 12605  002D28  0012               	return	
 12606  002D2A                     l752:
 12607  002D2A  0100               	movlb	0	; () banked
 12608  002D2C  4BCA               	infsnz	get_dis_frq@i& (0+255),f,b
 12609  002D2E  2BCB               	incf	(get_dis_frq@i+1)& (0+255),f,b
 12610  002D30                     l749:
 12611                           
 12612                           ; BSR set to: 0
 12613                           
 12614                           ; BSR set to: 0
 12615  002D30  C034  F022         	movff	get_dis_frq@str,strlen@s
 12616  002D34  C035  F023         	movff	get_dis_frq@str+1,strlen@s+1
 12617  002D38  EC7E  F01A         	call	_strlen	;wreg free
 12618  002D3C  5022               	movf	?_strlen,w,c
 12619  002D3E  0100               	movlb	0	; () banked
 12620  002D40  5DCA               	subwf	get_dis_frq@i& (0+255),w,b
 12621  002D42  5023               	movf	?_strlen+1,w,c
 12622  002D44  59CB               	subwfb	(get_dis_frq@i+1)& (0+255),w,b
 12623  002D46  A0D8               	btfss	status,0,c
 12624  002D48  D7AC               	goto	l750
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;cmd_consol.c: 78: }
 12628                           ;cmd_consol.c: 79: }
 12629                           ;cmd_consol.c: 80: printf("display_frq = %d\r\n", frq);
 12630                           
 12631                           ; BSR set to: 0
 12632  002D4A  0EBE               	movlw	low STR_23
 12633  002D4C  6E22               	movwf	printf@f,c
 12634  002D4E  0EFD               	movlw	high STR_23
 12635  002D50  6E23               	movwf	printf@f+1,c
 12636  002D52  C0C9  F024         	movff	get_dis_frq@frq,?_printf+2
 12637  002D56  6A25               	clrf	?_printf+3,c
 12638  002D58  EC1B  F012         	call	_printf	;wreg free
 12639                           
 12640                           ;cmd_consol.c: 81: *data_frq = frq;
 12641  002D5C  C036  FFD9         	movff	get_dis_frq@data_frq,fsr2l
 12642  002D60  C037  FFDA         	movff	get_dis_frq@data_frq+1,fsr2h
 12643  002D64  C0C9  FFDF         	movff	get_dis_frq@frq,indf2
 12644                           
 12645                           ;cmd_consol.c: 82: return 1;
 12646  002D68  0E01               	movlw	1
 12647  002D6A  0012               	return	
 12648  002D6C                     __end_of_get_dis_frq:
 12649                           	opt stack 0
 12650                           tblptru	equ	0xFF8
 12651                           tblptrh	equ	0xFF7
 12652                           tblptrl	equ	0xFF6
 12653                           tablat	equ	0xFF5
 12654                           prodh	equ	0xFF4
 12655                           prodl	equ	0xFF3
 12656                           intcon	equ	0xFF2
 12657                           indf0	equ	0xFEF
 12658                           postinc0	equ	0xFEE
 12659                           fsr0h	equ	0xFEA
 12660                           fsr0l	equ	0xFE9
 12661                           wreg	equ	0xFE8
 12662                           indf1	equ	0xFE7
 12663                           postinc1	equ	0xFE6
 12664                           postdec1	equ	0xFE5
 12665                           fsr1h	equ	0xFE2
 12666                           fsr1l	equ	0xFE1
 12667                           indf2	equ	0xFDF
 12668                           postinc2	equ	0xFDE
 12669                           postdec2	equ	0xFDD
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674 ;; *************** function _get_direction *****************
 12675 ;; Defined at:
 12676 ;;		line 49 in file "cmd_consol.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;  str             2   51[COMRAM] PTR unsigned char 
 12679 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
 12680 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
 12681 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
 12682 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
 12683 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_48(2), 
 12684 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
 12685 ;;		 -> STR_37(7), STR_36(7), STR_33(7), RAM(3895), 
 12686 ;;		 -> STR_31(7), STR_29(7), NULL(0), 
 12687 ;;  data_directi    2   53[COMRAM] PTR unsigned char 
 12688 ;;		 -> cmd_data(52), 
 12689 ;; Auto vars:     Size  Location     Type
 12690 ;;  i               2    3[BANK0 ] int 
 12691 ;;  direction       1    5[BANK0 ] unsigned char 
 12692 ;; Return value:  Size  Location     Type
 12693 ;;                  1    wreg      unsigned char 
 12694 ;; Registers used:
 12695 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12696 ;; Tracked objects:
 12697 ;;		On entry : 0/0
 12698 ;;		On exit  : 0/0
 12699 ;;		Unchanged: 0/0
 12700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12701 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12702 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12703 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12704 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12705 ;;Total ram usage:       10 bytes
 12706 ;; Hardware stack levels used:    1
 12707 ;; Hardware stack levels required when called:    8
 12708 ;; This function calls:
 12709 ;;		_isdigit
 12710 ;;		_printf
 12711 ;;		_strlen
 12712 ;; This function is called by:
 12713 ;;		_parse_cmd_str
 12714 ;; This function uses a non-reentrant model
 12715 ;;
 12716                           
 12717                           	psect	text54
 12718  002AB8                     __ptext54:
 12719                           	opt stack 0
 12720  002AB8                     _get_direction:
 12721                           	opt stack 20
 12722                           
 12723                           ;cmd_consol.c: 50: char direction = 0;
 12724                           
 12725                           ;incstack = 0
 12726  002AB8  0E00               	movlw	0
 12727  002ABA  0100               	movlb	0	; () banked
 12728  002ABC  6FCB               	movwf	get_direction@direction& (0+255),b
 12729                           
 12730                           ;cmd_consol.c: 51: int i = 0;
 12731  002ABE  0E00               	movlw	0
 12732  002AC0  6FCA               	movwf	(get_direction@i+1)& (0+255),b
 12733  002AC2  0E00               	movlw	0
 12734  002AC4  6FC9               	movwf	get_direction@i& (0+255),b
 12735                           
 12736                           ;cmd_consol.c: 52: for (i = 0; i < strlen(str); i++) {
 12737  002AC6  0E00               	movlw	0
 12738  002AC8  6FCA               	movwf	(get_direction@i+1)& (0+255),b
 12739  002ACA  0E00               	movlw	0
 12740  002ACC  6FC9               	movwf	get_direction@i& (0+255),b
 12741  002ACE  D041               	goto	l739
 12742  002AD0                     
 12743                           ; BSR set to: 0
 12744                           ;cmd_consol.c: 53: if (isdigit(str[i]) == 1)
 12745                           
 12746                           ; BSR set to: 0
 12747  002AD0  51C9               	movf	get_direction@i& (0+255),w,b
 12748  002AD2  2434               	addwf	get_direction@str,w,c
 12749  002AD4  6FC6               	movwf	??_get_direction& (0+255),b
 12750  002AD6  51CA               	movf	(get_direction@i+1)& (0+255),w,b
 12751  002AD8  2035               	addwfc	get_direction@str+1,w,c
 12752  002ADA  6FC7               	movwf	(??_get_direction+1)& (0+255),b
 12753  002ADC  C0C6  FFF6         	movff	??_get_direction,tblptrl
 12754  002AE0  C0C7  FFF7         	movff	??_get_direction+1,tblptrh
 12755  002AE4  0E00               	movlw	low (__mediumconst shr (0+16))
 12756  002AE6  6EF8               	movwf	tblptru,c
 12757  002AE8  0E0F               	movlw	(high __ramtop+-1)
 12758  002AEA  64F7               	cpfsgt	tblptrh,c
 12759  002AEC  D003               	bra	u6887
 12760  002AEE  0008               	tblrd		*
 12761  002AF0  50F5               	movf	tablat,w,c
 12762  002AF2  D005               	bra	u6880
 12763  002AF4                     u6887:
 12764  002AF4  CFF6 FFE9          	movff	tblptrl,fsr0l
 12765  002AF8  CFF7 FFEA          	movff	tblptrh,fsr0h
 12766  002AFC  50EF               	movf	indf0,w,c
 12767  002AFE                     u6880:
 12768  002AFE  EC80  F01D         	call	_isdigit
 12769  002B02  A0D8               	btfss	status,0,c
 12770  002B04  D021               	goto	l741
 12771                           
 12772                           ;cmd_consol.c: 54: direction = direction * 10 + (str[i] - '0');
 12773  002B06  0100               	movlb	0	; () banked
 12774  002B08  51C9               	movf	get_direction@i& (0+255),w,b
 12775  002B0A  2434               	addwf	get_direction@str,w,c
 12776  002B0C  6FC6               	movwf	??_get_direction& (0+255),b
 12777  002B0E  51CA               	movf	(get_direction@i+1)& (0+255),w,b
 12778  002B10  2035               	addwfc	get_direction@str+1,w,c
 12779  002B12  6FC7               	movwf	(??_get_direction+1)& (0+255),b
 12780  002B14  C0C6  FFF6         	movff	??_get_direction,tblptrl
 12781  002B18  C0C7  FFF7         	movff	??_get_direction+1,tblptrh
 12782  002B1C  0E00               	movlw	low (__mediumconst shr (0+16))
 12783  002B1E  6EF8               	movwf	tblptru,c
 12784  002B20  0E0F               	movlw	(high __ramtop+-1)
 12785  002B22  64F7               	cpfsgt	tblptrh,c
 12786  002B24  D003               	bra	u6907
 12787  002B26  0008               	tblrd		*
 12788  002B28  50F5               	movf	tablat,w,c
 12789  002B2A  D005               	bra	u6900
 12790  002B2C                     u6907:
 12791  002B2C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12792  002B30  CFF7 FFEA          	movff	tblptrh,fsr0h
 12793  002B34  50EF               	movf	indf0,w,c
 12794  002B36                     u6900:
 12795  002B36  0100               	movlb	0	; () banked
 12796  002B38  6FC8               	movwf	(??_get_direction+2)& (0+255),b
 12797  002B3A  51CB               	movf	get_direction@direction& (0+255),w,b
 12798  002B3C  0D0A               	mullw	10
 12799  002B3E  50F3               	movf	prodl,w,c
 12800  002B40  25C8               	addwf	(??_get_direction+2)& (0+255),w,b
 12801  002B42  0FD0               	addlw	208
 12802  002B44  6FCB               	movwf	get_direction@direction& (0+255),b
 12803  002B46  D002               	goto	l742
 12804  002B48                     l741:
 12805                           
 12806                           ;cmd_consol.c: 55: else
 12807                           ;cmd_consol.c: 56: return 0;
 12808                           
 12809                           ; BSR set to: 0
 12810  002B48  0E00               	movlw	0
 12811  002B4A  0012               	return	
 12812  002B4C                     l742:
 12813  002B4C  0100               	movlb	0	; () banked
 12814  002B4E  4BC9               	infsnz	get_direction@i& (0+255),f,b
 12815  002B50  2BCA               	incf	(get_direction@i+1)& (0+255),f,b
 12816  002B52                     l739:
 12817                           
 12818                           ; BSR set to: 0
 12819                           
 12820                           ; BSR set to: 0
 12821  002B52  C034  F022         	movff	get_direction@str,strlen@s
 12822  002B56  C035  F023         	movff	get_direction@str+1,strlen@s+1
 12823  002B5A  EC7E  F01A         	call	_strlen	;wreg free
 12824  002B5E  5022               	movf	?_strlen,w,c
 12825  002B60  0100               	movlb	0	; () banked
 12826  002B62  5DC9               	subwf	get_direction@i& (0+255),w,b
 12827  002B64  5023               	movf	?_strlen+1,w,c
 12828  002B66  59CA               	subwfb	(get_direction@i+1)& (0+255),w,b
 12829  002B68  A0D8               	btfss	status,0,c
 12830  002B6A  D7B2               	goto	l740
 12831                           
 12832                           ; BSR set to: 0
 12833                           ;cmd_consol.c: 57: }
 12834                           ;cmd_consol.c: 58: printf("direction = %d\r\n", direction);
 12835                           
 12836                           ; BSR set to: 0
 12837  002B6C  0E1A               	movlw	low STR_22
 12838  002B6E  6E22               	movwf	printf@f,c
 12839  002B70  0EFE               	movlw	high STR_22
 12840  002B72  6E23               	movwf	printf@f+1,c
 12841  002B74  C0CB  F024         	movff	get_direction@direction,?_printf+2
 12842  002B78  6A25               	clrf	?_printf+3,c
 12843  002B7A  EC1B  F012         	call	_printf	;wreg free
 12844                           
 12845                           ;cmd_consol.c: 59: if (direction >= clcd_config_data.clcd_max_row) {
 12846  002B7E  5045               	movf	_clcd_config_data+1,w,c
 12847  002B80  0100               	movlb	0	; () banked
 12848  002B82  5DCB               	subwf	get_direction@direction& (0+255),w,b
 12849  002B84  A0D8               	btfss	status,0,c
 12850  002B86  D008               	goto	l745
 12851                           
 12852                           ; BSR set to: 0
 12853                           ;cmd_consol.c: 60: *data_direction = -1;
 12854  002B88  C036  FFD9         	movff	get_direction@data_direction,fsr2l
 12855  002B8C  C037  FFDA         	movff	get_direction@data_direction+1,fsr2h
 12856  002B90  0EFF               	movlw	255
 12857  002B92  6EDF               	movwf	indf2,c
 12858                           
 12859                           ; BSR set to: 0
 12860                           ;cmd_consol.c: 61: return 0;
 12861  002B94  0E00               	movlw	0
 12862                           
 12863                           ; BSR set to: 0
 12864                           ;cmd_consol.c: 62: } else {
 12865                           
 12866                           ; BSR set to: 0
 12867  002B96  0012               	return	
 12868  002B98                     l745:
 12869                           
 12870                           ; BSR set to: 0
 12871                           ;cmd_consol.c: 63: *data_direction = direction;
 12872                           
 12873                           ; BSR set to: 0
 12874  002B98  C036  FFD9         	movff	get_direction@data_direction,fsr2l
 12875  002B9C  C037  FFDA         	movff	get_direction@data_direction+1,fsr2h
 12876  002BA0  C0CB  FFDF         	movff	get_direction@direction,indf2
 12877                           
 12878                           ; BSR set to: 0
 12879                           ;cmd_consol.c: 64: return 1;
 12880  002BA4  0E01               	movlw	1
 12881                           
 12882                           ; BSR set to: 0
 12883  002BA6  0012               	return	
 12884  002BA8                     __end_of_get_direction:
 12885                           	opt stack 0
 12886                           tblptru	equ	0xFF8
 12887                           tblptrh	equ	0xFF7
 12888                           tblptrl	equ	0xFF6
 12889                           tablat	equ	0xFF5
 12890                           prodh	equ	0xFF4
 12891                           prodl	equ	0xFF3
 12892                           intcon	equ	0xFF2
 12893                           indf0	equ	0xFEF
 12894                           postinc0	equ	0xFEE
 12895                           fsr0h	equ	0xFEA
 12896                           fsr0l	equ	0xFE9
 12897                           wreg	equ	0xFE8
 12898                           indf1	equ	0xFE7
 12899                           postinc1	equ	0xFE6
 12900                           postdec1	equ	0xFE5
 12901                           fsr1h	equ	0xFE2
 12902                           fsr1l	equ	0xFE1
 12903                           indf2	equ	0xFDF
 12904                           postinc2	equ	0xFDE
 12905                           postdec2	equ	0xFDD
 12906                           fsr2h	equ	0xFDA
 12907                           fsr2l	equ	0xFD9
 12908                           status	equ	0xFD8
 12909                           
 12910 ;; *************** function _collect_row *****************
 12911 ;; Defined at:
 12912 ;;		line 16 in file "cmd_consol.c"
 12913 ;; Parameters:    Size  Location     Type
 12914 ;;  str             2   51[COMRAM] PTR unsigned char 
 12915 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
 12916 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
 12917 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
 12918 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
 12919 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_48(2), 
 12920 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
 12921 ;;		 -> STR_37(7), STR_36(7), STR_33(7), RAM(3895), 
 12922 ;;		 -> STR_31(7), STR_29(7), NULL(0), 
 12923 ;;  data_row        2   53[COMRAM] PTR unsigned char 
 12924 ;;		 -> cmd_data(52), 
 12925 ;; Auto vars:     Size  Location     Type
 12926 ;;  i               2    3[BANK0 ] int 
 12927 ;;  row             1    5[BANK0 ] unsigned char 
 12928 ;; Return value:  Size  Location     Type
 12929 ;;                  1    wreg      void 
 12930 ;; Registers used:
 12931 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12932 ;; Tracked objects:
 12933 ;;		On entry : 0/0
 12934 ;;		On exit  : 0/0
 12935 ;;		Unchanged: 0/0
 12936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12937 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12938 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12939 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12940 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12941 ;;Total ram usage:       10 bytes
 12942 ;; Hardware stack levels used:    1
 12943 ;; Hardware stack levels required when called:    8
 12944 ;; This function calls:
 12945 ;;		_isdigit
 12946 ;;		_printf
 12947 ;;		_strlen
 12948 ;; This function is called by:
 12949 ;;		_parse_cmd_str
 12950 ;; This function uses a non-reentrant model
 12951 ;;
 12952                           
 12953                           	psect	text55
 12954  0028C8                     __ptext55:
 12955                           	opt stack 0
 12956  0028C8                     _collect_row:
 12957                           	opt stack 20
 12958                           
 12959                           ;cmd_consol.c: 17: printf("row1 = %s\r\n", str);
 12960                           
 12961                           ;incstack = 0
 12962  0028C8  0ED2               	movlw	low STR_20
 12963  0028CA  6E22               	movwf	printf@f,c
 12964  0028CC  0EFE               	movlw	high STR_20
 12965  0028CE  6E23               	movwf	printf@f+1,c
 12966  0028D0  C034  F024         	movff	collect_row@str,?_printf+2
 12967  0028D4  C035  F025         	movff	collect_row@str+1,?_printf+3
 12968  0028D8  EC1B  F012         	call	_printf	;wreg free
 12969                           
 12970                           ;cmd_consol.c: 18: char row = 0;
 12971  0028DC  0E00               	movlw	0
 12972  0028DE  0100               	movlb	0	; () banked
 12973  0028E0  6FCB               	movwf	collect_row@row& (0+255),b
 12974                           
 12975                           ; BSR set to: 0
 12976                           ;cmd_consol.c: 19: int i = 0;
 12977  0028E2  0E00               	movlw	0
 12978  0028E4  6FCA               	movwf	(collect_row@i+1)& (0+255),b
 12979  0028E6  0E00               	movlw	0
 12980  0028E8  6FC9               	movwf	collect_row@i& (0+255),b
 12981                           
 12982                           ; BSR set to: 0
 12983                           ;cmd_consol.c: 20: for (i = 0; i < strlen(str); i++) {
 12984  0028EA  0E00               	movlw	0
 12985  0028EC  6FCA               	movwf	(collect_row@i+1)& (0+255),b
 12986  0028EE  0E00               	movlw	0
 12987  0028F0  6FC9               	movwf	collect_row@i& (0+255),b
 12988  0028F2  D03D               	goto	l722
 12989  0028F4                     
 12990                           ; BSR set to: 0
 12991                           ;cmd_consol.c: 21: if (isdigit(str[i]) == 1)
 12992                           
 12993                           ; BSR set to: 0
 12994  0028F4  51C9               	movf	collect_row@i& (0+255),w,b
 12995  0028F6  2434               	addwf	collect_row@str,w,c
 12996  0028F8  6FC6               	movwf	??_collect_row& (0+255),b
 12997  0028FA  51CA               	movf	(collect_row@i+1)& (0+255),w,b
 12998  0028FC  2035               	addwfc	collect_row@str+1,w,c
 12999  0028FE  6FC7               	movwf	(??_collect_row+1)& (0+255),b
 13000  002900  C0C6  FFF6         	movff	??_collect_row,tblptrl
 13001  002904  C0C7  FFF7         	movff	??_collect_row+1,tblptrh
 13002  002908  0E00               	movlw	low (__mediumconst shr (0+16))
 13003  00290A  6EF8               	movwf	tblptru,c
 13004  00290C  0E0F               	movlw	(high __ramtop+-1)
 13005  00290E  64F7               	cpfsgt	tblptrh,c
 13006  002910  D003               	bra	u6827
 13007  002912  0008               	tblrd		*
 13008  002914  50F5               	movf	tablat,w,c
 13009  002916  D005               	bra	u6820
 13010  002918                     u6827:
 13011  002918  CFF6 FFE9          	movff	tblptrl,fsr0l
 13012  00291C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13013  002920  50EF               	movf	indf0,w,c
 13014  002922                     u6820:
 13015  002922  EC80  F01D         	call	_isdigit
 13016  002926  A0D8               	btfss	status,0,c
 13017  002928  0012               	return	
 13018                           
 13019                           ;cmd_consol.c: 22: row = row * 10 + (str[i] - '0');
 13020  00292A  0100               	movlb	0	; () banked
 13021  00292C  51C9               	movf	collect_row@i& (0+255),w,b
 13022  00292E  2434               	addwf	collect_row@str,w,c
 13023  002930  6FC6               	movwf	??_collect_row& (0+255),b
 13024  002932  51CA               	movf	(collect_row@i+1)& (0+255),w,b
 13025  002934  2035               	addwfc	collect_row@str+1,w,c
 13026  002936  6FC7               	movwf	(??_collect_row+1)& (0+255),b
 13027  002938  C0C6  FFF6         	movff	??_collect_row,tblptrl
 13028  00293C  C0C7  FFF7         	movff	??_collect_row+1,tblptrh
 13029  002940  0E00               	movlw	low (__mediumconst shr (0+16))
 13030  002942  6EF8               	movwf	tblptru,c
 13031  002944  0E0F               	movlw	(high __ramtop+-1)
 13032  002946  64F7               	cpfsgt	tblptrh,c
 13033  002948  D003               	bra	u6847
 13034  00294A  0008               	tblrd		*
 13035  00294C  50F5               	movf	tablat,w,c
 13036  00294E  D005               	bra	u6840
 13037  002950                     u6847:
 13038  002950  CFF6 FFE9          	movff	tblptrl,fsr0l
 13039  002954  CFF7 FFEA          	movff	tblptrh,fsr0h
 13040  002958  50EF               	movf	indf0,w,c
 13041  00295A                     u6840:
 13042  00295A  0100               	movlb	0	; () banked
 13043  00295C  6FC8               	movwf	(??_collect_row+2)& (0+255),b
 13044  00295E  51CB               	movf	collect_row@row& (0+255),w,b
 13045  002960  0D0A               	mullw	10
 13046  002962  50F3               	movf	prodl,w,c
 13047  002964  25C8               	addwf	(??_collect_row+2)& (0+255),w,b
 13048  002966  0FD0               	addlw	208
 13049  002968  6FCB               	movwf	collect_row@row& (0+255),b
 13050                           
 13051                           ; BSR set to: 0
 13052                           
 13053                           ; BSR set to: 0
 13054                           
 13055                           ; BSR set to: 0
 13056                           ;cmd_consol.c: 23: else
 13057                           ;cmd_consol.c: 24: return;
 13058  00296A  4BC9               	infsnz	collect_row@i& (0+255),f,b
 13059  00296C  2BCA               	incf	(collect_row@i+1)& (0+255),f,b
 13060  00296E                     l722:
 13061                           
 13062                           ; BSR set to: 0
 13063                           
 13064                           ; BSR set to: 0
 13065  00296E  C034  F022         	movff	collect_row@str,strlen@s
 13066  002972  C035  F023         	movff	collect_row@str+1,strlen@s+1
 13067  002976  EC7E  F01A         	call	_strlen	;wreg free
 13068  00297A  5022               	movf	?_strlen,w,c
 13069  00297C  0100               	movlb	0	; () banked
 13070  00297E  5DC9               	subwf	collect_row@i& (0+255),w,b
 13071  002980  5023               	movf	?_strlen+1,w,c
 13072  002982  59CA               	subwfb	(collect_row@i+1)& (0+255),w,b
 13073  002984  A0D8               	btfss	status,0,c
 13074  002986  D7B6               	goto	l723
 13075                           
 13076                           ; BSR set to: 0
 13077                           ;cmd_consol.c: 25: }
 13078                           ;cmd_consol.c: 26: printf("row2 = %d\r\n", row);
 13079                           
 13080                           ; BSR set to: 0
 13081  002988  0EAE               	movlw	low STR_21
 13082  00298A  6E22               	movwf	printf@f,c
 13083  00298C  0EFE               	movlw	high STR_21
 13084  00298E  6E23               	movwf	printf@f+1,c
 13085  002990  C0CB  F024         	movff	collect_row@row,?_printf+2
 13086  002994  6A25               	clrf	?_printf+3,c
 13087  002996  EC1B  F012         	call	_printf	;wreg free
 13088                           
 13089                           ;cmd_consol.c: 27: if (row >= clcd_config_data.clcd_max_row) {
 13090  00299A  5045               	movf	_clcd_config_data+1,w,c
 13091  00299C  0100               	movlb	0	; () banked
 13092  00299E  5DCB               	subwf	collect_row@row& (0+255),w,b
 13093  0029A0  A0D8               	btfss	status,0,c
 13094  0029A2  D007               	goto	l728
 13095                           
 13096                           ; BSR set to: 0
 13097                           ;cmd_consol.c: 28: *data_row = -1;
 13098  0029A4  C036  FFD9         	movff	collect_row@data_row,fsr2l
 13099  0029A8  C037  FFDA         	movff	collect_row@data_row+1,fsr2h
 13100  0029AC  0EFF               	movlw	255
 13101  0029AE  6EDF               	movwf	indf2,c
 13102                           
 13103                           ;cmd_consol.c: 29: } else {
 13104  0029B0  0012               	return	
 13105  0029B2                     l728:
 13106                           
 13107                           ; BSR set to: 0
 13108                           ;cmd_consol.c: 30: *data_row = row;
 13109                           
 13110                           ; BSR set to: 0
 13111  0029B2  C036  FFD9         	movff	collect_row@data_row,fsr2l
 13112  0029B6  C037  FFDA         	movff	collect_row@data_row+1,fsr2h
 13113  0029BA  C0CB  FFDF         	movff	collect_row@row,indf2
 13114  0029BE  0012               	return	
 13115  0029C0                     __end_of_collect_row:
 13116                           	opt stack 0
 13117                           tblptru	equ	0xFF8
 13118                           tblptrh	equ	0xFF7
 13119                           tblptrl	equ	0xFF6
 13120                           tablat	equ	0xFF5
 13121                           prodh	equ	0xFF4
 13122                           prodl	equ	0xFF3
 13123                           intcon	equ	0xFF2
 13124                           indf0	equ	0xFEF
 13125                           postinc0	equ	0xFEE
 13126                           fsr0h	equ	0xFEA
 13127                           fsr0l	equ	0xFE9
 13128                           wreg	equ	0xFE8
 13129                           indf1	equ	0xFE7
 13130                           postinc1	equ	0xFE6
 13131                           postdec1	equ	0xFE5
 13132                           fsr1h	equ	0xFE2
 13133                           fsr1l	equ	0xFE1
 13134                           indf2	equ	0xFDF
 13135                           postinc2	equ	0xFDE
 13136                           postdec2	equ	0xFDD
 13137                           fsr2h	equ	0xFDA
 13138                           fsr2l	equ	0xFD9
 13139                           status	equ	0xFD8
 13140                           
 13141 ;; *************** function _collect_column *****************
 13142 ;; Defined at:
 13143 ;;		line 101 in file "cmd_consol.c"
 13144 ;; Parameters:    Size  Location     Type
 13145 ;;  str             2   51[COMRAM] PTR unsigned char 
 13146 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
 13147 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
 13148 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
 13149 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
 13150 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_48(2), 
 13151 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
 13152 ;;		 -> STR_37(7), STR_36(7), STR_33(7), RAM(3895), 
 13153 ;;		 -> STR_31(7), STR_29(7), NULL(0), 
 13154 ;;  data_column     2   53[COMRAM] PTR unsigned char 
 13155 ;;		 -> cmd_data(52), 
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;  i               2    3[BANK0 ] int 
 13158 ;;  column          1    5[BANK0 ] unsigned char 
 13159 ;; Return value:  Size  Location     Type
 13160 ;;                  1    wreg      void 
 13161 ;; Registers used:
 13162 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13163 ;; Tracked objects:
 13164 ;;		On entry : 0/0
 13165 ;;		On exit  : 0/0
 13166 ;;		Unchanged: 0/0
 13167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13168 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13169 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13170 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13171 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13172 ;;Total ram usage:       10 bytes
 13173 ;; Hardware stack levels used:    1
 13174 ;; Hardware stack levels required when called:    8
 13175 ;; This function calls:
 13176 ;;		_isdigit
 13177 ;;		_printf
 13178 ;;		_strlen
 13179 ;; This function is called by:
 13180 ;;		_parse_cmd_str
 13181 ;; This function uses a non-reentrant model
 13182 ;;
 13183                           
 13184                           	psect	text56
 13185  0029C0                     __ptext56:
 13186                           	opt stack 0
 13187  0029C0                     _collect_column:
 13188                           	opt stack 20
 13189                           
 13190                           ;cmd_consol.c: 102: printf("col1 = %s\r\n", str);
 13191                           
 13192                           ;incstack = 0
 13193  0029C0  0EC6               	movlw	low STR_25
 13194  0029C2  6E22               	movwf	printf@f,c
 13195  0029C4  0EFE               	movlw	high STR_25
 13196  0029C6  6E23               	movwf	printf@f+1,c
 13197  0029C8  C034  F024         	movff	collect_column@str,?_printf+2
 13198  0029CC  C035  F025         	movff	collect_column@str+1,?_printf+3
 13199  0029D0  EC1B  F012         	call	_printf	;wreg free
 13200                           
 13201                           ;cmd_consol.c: 103: int i = 0;
 13202  0029D4  0E00               	movlw	0
 13203  0029D6  0100               	movlb	0	; () banked
 13204  0029D8  6FCA               	movwf	(collect_column@i+1)& (0+255),b
 13205  0029DA  0E00               	movlw	0
 13206  0029DC  6FC9               	movwf	collect_column@i& (0+255),b
 13207                           
 13208                           ; BSR set to: 0
 13209                           ;cmd_consol.c: 104: char column = 0;
 13210  0029DE  0E00               	movlw	0
 13211  0029E0  6FCB               	movwf	collect_column@column& (0+255),b
 13212                           
 13213                           ; BSR set to: 0
 13214                           ;cmd_consol.c: 105: for (i = 0; i < strlen(str); i++) {
 13215  0029E2  0E00               	movlw	0
 13216  0029E4  6FCA               	movwf	(collect_column@i+1)& (0+255),b
 13217  0029E6  0E00               	movlw	0
 13218  0029E8  6FC9               	movwf	collect_column@i& (0+255),b
 13219  0029EA  D03D               	goto	l765
 13220  0029EC                     
 13221                           ; BSR set to: 0
 13222                           ;cmd_consol.c: 106: if (isdigit(str[i]) == 1) {
 13223                           
 13224                           ; BSR set to: 0
 13225  0029EC  51C9               	movf	collect_column@i& (0+255),w,b
 13226  0029EE  2434               	addwf	collect_column@str,w,c
 13227  0029F0  6FC6               	movwf	??_collect_column& (0+255),b
 13228  0029F2  51CA               	movf	(collect_column@i+1)& (0+255),w,b
 13229  0029F4  2035               	addwfc	collect_column@str+1,w,c
 13230  0029F6  6FC7               	movwf	(??_collect_column+1)& (0+255),b
 13231  0029F8  C0C6  FFF6         	movff	??_collect_column,tblptrl
 13232  0029FC  C0C7  FFF7         	movff	??_collect_column+1,tblptrh
 13233  002A00  0E00               	movlw	low (__mediumconst shr (0+16))
 13234  002A02  6EF8               	movwf	tblptru,c
 13235  002A04  0E0F               	movlw	(high __ramtop+-1)
 13236  002A06  64F7               	cpfsgt	tblptrh,c
 13237  002A08  D003               	bra	u7017
 13238  002A0A  0008               	tblrd		*
 13239  002A0C  50F5               	movf	tablat,w,c
 13240  002A0E  D005               	bra	u7010
 13241  002A10                     u7017:
 13242  002A10  CFF6 FFE9          	movff	tblptrl,fsr0l
 13243  002A14  CFF7 FFEA          	movff	tblptrh,fsr0h
 13244  002A18  50EF               	movf	indf0,w,c
 13245  002A1A                     u7010:
 13246  002A1A  EC80  F01D         	call	_isdigit
 13247  002A1E  A0D8               	btfss	status,0,c
 13248  002A20  0012               	return	
 13249                           
 13250                           ;cmd_consol.c: 107: column = column * 10 + (str[i] - '0');
 13251  002A22  0100               	movlb	0	; () banked
 13252  002A24  51C9               	movf	collect_column@i& (0+255),w,b
 13253  002A26  2434               	addwf	collect_column@str,w,c
 13254  002A28  6FC6               	movwf	??_collect_column& (0+255),b
 13255  002A2A  51CA               	movf	(collect_column@i+1)& (0+255),w,b
 13256  002A2C  2035               	addwfc	collect_column@str+1,w,c
 13257  002A2E  6FC7               	movwf	(??_collect_column+1)& (0+255),b
 13258  002A30  C0C6  FFF6         	movff	??_collect_column,tblptrl
 13259  002A34  C0C7  FFF7         	movff	??_collect_column+1,tblptrh
 13260  002A38  0E00               	movlw	low (__mediumconst shr (0+16))
 13261  002A3A  6EF8               	movwf	tblptru,c
 13262  002A3C  0E0F               	movlw	(high __ramtop+-1)
 13263  002A3E  64F7               	cpfsgt	tblptrh,c
 13264  002A40  D003               	bra	u7037
 13265  002A42  0008               	tblrd		*
 13266  002A44  50F5               	movf	tablat,w,c
 13267  002A46  D005               	bra	u7030
 13268  002A48                     u7037:
 13269  002A48  CFF6 FFE9          	movff	tblptrl,fsr0l
 13270  002A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13271  002A50  50EF               	movf	indf0,w,c
 13272  002A52                     u7030:
 13273  002A52  0100               	movlb	0	; () banked
 13274  002A54  6FC8               	movwf	(??_collect_column+2)& (0+255),b
 13275  002A56  51CB               	movf	collect_column@column& (0+255),w,b
 13276  002A58  0D0A               	mullw	10
 13277  002A5A  50F3               	movf	prodl,w,c
 13278  002A5C  25C8               	addwf	(??_collect_column+2)& (0+255),w,b
 13279  002A5E  0FD0               	addlw	208
 13280  002A60  6FCB               	movwf	collect_column@column& (0+255),b
 13281                           
 13282                           ; BSR set to: 0
 13283                           
 13284                           ; BSR set to: 0
 13285                           
 13286                           ; BSR set to: 0
 13287                           ;cmd_consol.c: 113: return;
 13288                           
 13289                           ;cmd_consol.c: 110: } else {
 13290  002A62  4BC9               	infsnz	collect_column@i& (0+255),f,b
 13291  002A64  2BCA               	incf	(collect_column@i+1)& (0+255),f,b
 13292  002A66                     l765:
 13293                           
 13294                           ; BSR set to: 0
 13295                           
 13296                           ; BSR set to: 0
 13297  002A66  C034  F022         	movff	collect_column@str,strlen@s
 13298  002A6A  C035  F023         	movff	collect_column@str+1,strlen@s+1
 13299  002A6E  EC7E  F01A         	call	_strlen	;wreg free
 13300  002A72  5022               	movf	?_strlen,w,c
 13301  002A74  0100               	movlb	0	; () banked
 13302  002A76  5DC9               	subwf	collect_column@i& (0+255),w,b
 13303  002A78  5023               	movf	?_strlen+1,w,c
 13304  002A7A  59CA               	subwfb	(collect_column@i+1)& (0+255),w,b
 13305  002A7C  A0D8               	btfss	status,0,c
 13306  002A7E  D7B6               	goto	l766
 13307                           
 13308                           ; BSR set to: 0
 13309                           ;cmd_consol.c: 114: }
 13310                           ;cmd_consol.c: 116: }
 13311                           ;cmd_consol.c: 117: printf("Col2 = %d\r\n", column);
 13312                           
 13313                           ; BSR set to: 0
 13314  002A80  0EA2               	movlw	low STR_26
 13315  002A82  6E22               	movwf	printf@f,c
 13316  002A84  0EFE               	movlw	high STR_26
 13317  002A86  6E23               	movwf	printf@f+1,c
 13318  002A88  C0CB  F024         	movff	collect_column@column,?_printf+2
 13319  002A8C  6A25               	clrf	?_printf+3,c
 13320  002A8E  EC1B  F012         	call	_printf	;wreg free
 13321                           
 13322                           ;cmd_consol.c: 118: if (column >= clcd_config_data.clcd_max_col) {
 13323  002A92  5046               	movf	_clcd_config_data+2,w,c
 13324  002A94  0100               	movlb	0	; () banked
 13325  002A96  5DCB               	subwf	collect_column@column& (0+255),w,b
 13326  002A98  A0D8               	btfss	status,0,c
 13327  002A9A  D007               	goto	l771
 13328                           
 13329                           ; BSR set to: 0
 13330                           ;cmd_consol.c: 119: *data_column = -1;
 13331  002A9C  C036  FFD9         	movff	collect_column@data_column,fsr2l
 13332  002AA0  C037  FFDA         	movff	collect_column@data_column+1,fsr2h
 13333  002AA4  0EFF               	movlw	255
 13334  002AA6  6EDF               	movwf	indf2,c
 13335                           
 13336                           ;cmd_consol.c: 120: } else {
 13337  002AA8  0012               	return	
 13338  002AAA                     l771:
 13339                           
 13340                           ; BSR set to: 0
 13341                           ;cmd_consol.c: 121: *data_column = column;
 13342                           
 13343                           ; BSR set to: 0
 13344  002AAA  C036  FFD9         	movff	collect_column@data_column,fsr2l
 13345  002AAE  C037  FFDA         	movff	collect_column@data_column+1,fsr2h
 13346  002AB2  C0CB  FFDF         	movff	collect_column@column,indf2
 13347  002AB6  0012               	return	
 13348  002AB8                     __end_of_collect_column:
 13349                           	opt stack 0
 13350                           tblptru	equ	0xFF8
 13351                           tblptrh	equ	0xFF7
 13352                           tblptrl	equ	0xFF6
 13353                           tablat	equ	0xFF5
 13354                           prodh	equ	0xFF4
 13355                           prodl	equ	0xFF3
 13356                           intcon	equ	0xFF2
 13357                           indf0	equ	0xFEF
 13358                           postinc0	equ	0xFEE
 13359                           fsr0h	equ	0xFEA
 13360                           fsr0l	equ	0xFE9
 13361                           wreg	equ	0xFE8
 13362                           indf1	equ	0xFE7
 13363                           postinc1	equ	0xFE6
 13364                           postdec1	equ	0xFE5
 13365                           fsr1h	equ	0xFE2
 13366                           fsr1l	equ	0xFE1
 13367                           indf2	equ	0xFDF
 13368                           postinc2	equ	0xFDE
 13369                           postdec2	equ	0xFDD
 13370                           fsr2h	equ	0xFDA
 13371                           fsr2l	equ	0xFD9
 13372                           status	equ	0xFD8
 13373                           
 13374 ;; *************** function _strlen *****************
 13375 ;; Defined at:
 13376 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strlen.c"
 13377 ;; Parameters:    Size  Location     Type
 13378 ;;  s               2   33[COMRAM] PTR const unsigned char 
 13379 ;;		 -> uart_str(150), STR_90(4), STR_89(7), STR_88(7), 
 13380 ;;		 -> STR_87(7), STR_84(7), STR_82(7), STR_80(7), 
 13381 ;;		 -> STR_78(7), STR_76(2), STR_74(7), STR_73(5), 
 13382 ;;		 -> STR_72(7), STR_69(7), STR_67(7), STR_65(7), 
 13383 ;;		 -> STR_63(7), STR_61(7), STR_60(7), STR_59(7), 
 13384 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_50(8), 
 13385 ;;		 -> STR_48(2), STR_45(7), STR_43(7), STR_42(6), 
 13386 ;;		 -> STR_41(7), STR_40(6), STR_39(7), STR_37(7), 
 13387 ;;		 -> STR_36(7), STR_35(5), STR_33(7), RAM(3895), 
 13388 ;;		 -> STR_32(6), STR_31(7), STR_30(4), STR_29(7), 
 13389 ;;		 -> NULL(0), STR_28(4), clcd_display_string_details.string(40), clcd_display_string_details(1100), 
 13390 ;; Auto vars:     Size  Location     Type
 13391 ;;  cp              2   37[COMRAM] PTR const unsigned char 
 13392 ;;		 -> uart_str(150), STR_90(4), STR_89(7), STR_88(7), 
 13393 ;;		 -> STR_87(7), STR_84(7), STR_82(7), STR_80(7), 
 13394 ;;		 -> STR_78(7), STR_76(2), STR_74(7), STR_73(5), 
 13395 ;;		 -> STR_72(7), STR_69(7), STR_67(7), STR_65(7), 
 13396 ;;		 -> STR_63(7), STR_61(7), STR_60(7), STR_59(7), 
 13397 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_50(8), 
 13398 ;;		 -> STR_48(2), STR_45(7), STR_43(7), STR_42(6), 
 13399 ;;		 -> STR_41(7), STR_40(6), STR_39(7), STR_37(7), 
 13400 ;;		 -> STR_36(7), STR_35(5), STR_33(7), RAM(3895), 
 13401 ;;		 -> STR_32(6), STR_31(7), STR_30(4), STR_29(7), 
 13402 ;;		 -> NULL(0), STR_28(4), clcd_display_string_details.string(40), clcd_display_string_details(1100), 
 13403 ;; Return value:  Size  Location     Type
 13404 ;;                  2   33[COMRAM] unsigned int 
 13405 ;; Registers used:
 13406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 13407 ;; Tracked objects:
 13408 ;;		On entry : 0/0
 13409 ;;		On exit  : 0/0
 13410 ;;		Unchanged: 0/0
 13411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13414 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13415 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13416 ;;Total ram usage:        6 bytes
 13417 ;; Hardware stack levels used:    1
 13418 ;; Hardware stack levels required when called:    5
 13419 ;; This function calls:
 13420 ;;		Nothing
 13421 ;; This function is called by:
 13422 ;;		_copy_data
 13423 ;;		_scroll_off
 13424 ;;		_make_display
 13425 ;;		_collect_row
 13426 ;;		_get_str
 13427 ;;		_get_direction
 13428 ;;		_get_dis_frq
 13429 ;;		_get_over_write_data
 13430 ;;		_collect_column
 13431 ;;		_parse_cmd_str
 13432 ;;		_strstr
 13433 ;;		_copy_display_struct
 13434 ;;		_put_string
 13435 ;;		_display_string
 13436 ;; This function uses a non-reentrant model
 13437 ;;
 13438                           
 13439                           	psect	text57
 13440  0034FC                     __ptext57:
 13441                           	opt stack 0
 13442  0034FC                     _strlen:
 13443                           	opt stack 24
 13444                           
 13445                           ;incstack = 0
 13446  0034FC  C022  F026         	movff	strlen@s,strlen@cp
 13447  003500  C023  F027         	movff	strlen@s+1,strlen@cp+1
 13448  003504  D002               	goto	l1708
 13449  003506  4A26               	infsnz	strlen@cp,f,c
 13450  003508  2A27               	incf	strlen@cp+1,f,c
 13451  00350A                     l1708:
 13452  00350A  C026  FFF6         	movff	strlen@cp,tblptrl
 13453  00350E  C027  FFF7         	movff	strlen@cp+1,tblptrh
 13454  003512  0E00               	movlw	low (__mediumconst shr (0+16))
 13455  003514  6EF8               	movwf	tblptru,c
 13456  003516  0E0F               	movlw	(high __ramtop+-1)
 13457  003518  64F7               	cpfsgt	tblptrh,c
 13458  00351A  D003               	bra	u6317
 13459  00351C  0008               	tblrd		*
 13460  00351E  50F5               	movf	tablat,w,c
 13461  003520  D005               	bra	u6310
 13462  003522                     u6317:
 13463  003522  CFF6 FFE9          	movff	tblptrl,fsr0l
 13464  003526  CFF7 FFEA          	movff	tblptrh,fsr0h
 13465  00352A  50EF               	movf	indf0,w,c
 13466  00352C                     u6310:
 13467  00352C  0900               	iorlw	0
 13468  00352E  A4D8               	btfss	status,2,c
 13469  003530  D7EA               	goto	l1709
 13470  003532  C022  F024         	movff	strlen@s,??_strlen
 13471  003536  C023  F025         	movff	strlen@s+1,??_strlen+1
 13472  00353A  1E24               	comf	??_strlen,f,c
 13473  00353C  1E25               	comf	??_strlen+1,f,c
 13474  00353E  4A24               	infsnz	??_strlen,f,c
 13475  003540  2A25               	incf	??_strlen+1,f,c
 13476  003542  5026               	movf	strlen@cp,w,c
 13477  003544  2424               	addwf	??_strlen,w,c
 13478  003546  6E22               	movwf	?_strlen,c
 13479  003548  5027               	movf	strlen@cp+1,w,c
 13480  00354A  2025               	addwfc	??_strlen+1,w,c
 13481  00354C  6E23               	movwf	?_strlen+1,c
 13482  00354E  0012               	return	
 13483  003550                     __end_of_strlen:
 13484                           	opt stack 0
 13485                           tblptru	equ	0xFF8
 13486                           tblptrh	equ	0xFF7
 13487                           tblptrl	equ	0xFF6
 13488                           tablat	equ	0xFF5
 13489                           prodh	equ	0xFF4
 13490                           prodl	equ	0xFF3
 13491                           intcon	equ	0xFF2
 13492                           indf0	equ	0xFEF
 13493                           postinc0	equ	0xFEE
 13494                           fsr0h	equ	0xFEA
 13495                           fsr0l	equ	0xFE9
 13496                           wreg	equ	0xFE8
 13497                           indf1	equ	0xFE7
 13498                           postinc1	equ	0xFE6
 13499                           postdec1	equ	0xFE5
 13500                           fsr1h	equ	0xFE2
 13501                           fsr1l	equ	0xFE1
 13502                           indf2	equ	0xFDF
 13503                           postinc2	equ	0xFDE
 13504                           postdec2	equ	0xFDD
 13505                           fsr2h	equ	0xFDA
 13506                           fsr2l	equ	0xFD9
 13507                           status	equ	0xFD8
 13508                           
 13509 ;; *************** function _printf *****************
 13510 ;; Defined at:
 13511 ;;		line 464 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\doprnt.c"
 13512 ;; Parameters:    Size  Location     Type
 13513 ;;  f               2   33[COMRAM] PTR const unsigned char 
 13514 ;;		 -> STR_141(18), STR_139(5), STR_135(3), STR_134(3), 
 13515 ;;		 -> STR_133(3), STR_131(7), STR_129(7), STR_127(7), 
 13516 ;;		 -> STR_125(13), STR_123(5), STR_120(13), STR_117(13), 
 13517 ;;		 -> STR_114(13), STR_111(13), STR_110(5), STR_109(11), 
 13518 ;;		 -> STR_106(13), STR_103(13), STR_102(5), STR_99(13), 
 13519 ;;		 -> STR_98(5), STR_95(13), STR_94(5), STR_86(25), 
 13520 ;;		 -> STR_85(11), STR_83(25), STR_81(27), STR_79(27), 
 13521 ;;		 -> STR_77(10), STR_75(9), STR_71(25), STR_70(11), 
 13522 ;;		 -> STR_68(25), STR_66(27), STR_64(27), STR_62(12), 
 13523 ;;		 -> STR_58(14), STR_57(9), STR_55(11), STR_54(9), 
 13524 ;;		 -> STR_51(9), STR_49(11), STR_47(11), STR_46(12), 
 13525 ;;		 -> STR_44(12), STR_38(7), STR_34(8), STR_27(8), 
 13526 ;;		 -> STR_26(12), STR_25(12), STR_24(18), STR_23(19), 
 13527 ;;		 -> STR_22(17), STR_21(12), STR_20(12), STR_19(16), 
 13528 ;;		 -> STR_18(16), STR_17(19), STR_16(3), STR_15(5), 
 13529 ;;		 -> STR_14(16), STR_13(39), STR_12(39), STR_11(26), 
 13530 ;;		 -> STR_10(26), STR_9(26), STR_8(26), STR_7(26), 
 13531 ;;		 -> STR_6(26), STR_4(17), STR_3(18), STR_2(9), 
 13532 ;;		 -> STR_1(9), 
 13533 ;; Auto vars:     Size  Location     Type
 13534 ;;  tmpval          4    0        struct .
 13535 ;;  val             2   48[COMRAM] unsigned int 
 13536 ;;  ap              2   46[COMRAM] PTR void [1]
 13537 ;;		 -> ?_printf(2), 
 13538 ;;  cp              2   44[COMRAM] PTR const unsigned char 
 13539 ;;		 -> STR_142(7), STR_140(6), uart_str(150), STR_132(15), 
 13540 ;;		 -> STR_130(12), STR_128(12), STR_126(7), STR_124(6), 
 13541 ;;		 -> STR_121(7), STR_118(8), STR_115(6), STR_112(6), 
 13542 ;;		 -> STR_107(5), STR_104(4), STR_100(4), STR_96(6), 
 13543 ;;		 -> STR_89(7), STR_88(7), STR_87(7), STR_84(7), 
 13544 ;;		 -> STR_82(7), STR_80(7), STR_78(7), STR_76(2), 
 13545 ;;		 -> STR_74(7), STR_69(7), STR_67(7), STR_65(7), 
 13546 ;;		 -> STR_63(7), STR_61(7), STR_60(7), STR_56(7), 
 13547 ;;		 -> STR_53(7), STR_52(7), cmd_data.data(40), STR_48(2), 
 13548 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
 13549 ;;		 -> STR_37(7), STR_36(7), STR_33(7), RAM(3895), 
 13550 ;;		 -> STR_31(7), CMD(15), STR_29(7), NULL(0), 
 13551 ;;		 -> cmd_data(52), STR_5(5), 
 13552 ;;  len             2    0        unsigned int 
 13553 ;;  c               1   50[COMRAM] char 
 13554 ;;  prec            1   43[COMRAM] char 
 13555 ;;  flag            1   42[COMRAM] unsigned char 
 13556 ;; Return value:  Size  Location     Type
 13557 ;;                  2   33[COMRAM] int 
 13558 ;; Registers used:
 13559 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13560 ;; Tracked objects:
 13561 ;;		On entry : 0/0
 13562 ;;		On exit  : 0/0
 13563 ;;		Unchanged: 0/0
 13564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13565 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13566 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13567 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13568 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13569 ;;Total ram usage:       18 bytes
 13570 ;; Hardware stack levels used:    1
 13571 ;; Hardware stack levels required when called:    7
 13572 ;; This function calls:
 13573 ;;		___lwdiv
 13574 ;;		___lwmod
 13575 ;;		_putch
 13576 ;; This function is called by:
 13577 ;;		_init_clcd_cusotom_lcd
 13578 ;;		_copy_data
 13579 ;;		_conflict_check
 13580 ;;		_update_string_data
 13581 ;;		_clcd_display_string_config
 13582 ;;		_collect_row
 13583 ;;		_get_direction
 13584 ;;		_get_dis_frq
 13585 ;;		_get_over_write_data
 13586 ;;		_collect_column
 13587 ;;		_parse_cmd_str
 13588 ;;		_reply_to_host
 13589 ;;		_cmd_consol_task
 13590 ;;		_main
 13591 ;;		_conflict
 13592 ;;		_copy_display_struct
 13593 ;;		_set_string_data
 13594 ;;		_display_string
 13595 ;; This function uses a non-reentrant model
 13596 ;;
 13597                           
 13598                           	psect	text58
 13599  002436                     __ptext58:
 13600                           	opt stack 0
 13601  002436                     _printf:
 13602                           	opt stack 23
 13603                           
 13604                           ;doprnt.c: 466: va_list ap;
 13605                           ;doprnt.c: 499: signed char c;
 13606                           ;doprnt.c: 506: signed char prec;
 13607                           ;doprnt.c: 508: unsigned char flag;
 13608                           ;doprnt.c: 523: union {
 13609                           ;doprnt.c: 524: unsigned long vd;
 13610                           ;doprnt.c: 525: double integ;
 13611                           ;doprnt.c: 526: } tmpval;
 13612                           ;doprnt.c: 528: unsigned int val;
 13613                           ;doprnt.c: 529: unsigned len;
 13614                           ;doprnt.c: 530: const char * cp;
 13615                           ;doprnt.c: 533: *ap = __va_start();
 13616                           
 13617                           ;incstack = 0
 13618  002436  0E24               	movlw	low (?_printf+2)
 13619  002438  6E2F               	movwf	printf@ap,c
 13620  00243A  0E00               	movlw	high (?_printf+2)
 13621  00243C  6E30               	movwf	printf@ap+1,c
 13622                           
 13623                           ;doprnt.c: 536: while(c = *f++) {
 13624  00243E  D0D9               	goto	u6290
 13625  002440                     
 13626                           ;doprnt.c: 538: if(c != '%')
 13627  002440  0E25               	movlw	37
 13628  002442  1833               	xorwf	printf@c,w,c
 13629  002444  B4D8               	btfsc	status,2,c
 13630  002446  D004               	goto	l1076
 13631                           
 13632                           ;doprnt.c: 540: {
 13633                           ;doprnt.c: 541: (putch(c) );
 13634  002448  5033               	movf	printf@c,w,c
 13635  00244A  EC3D  F01E         	call	_putch
 13636                           
 13637                           ;doprnt.c: 542: continue;
 13638  00244E  D0D1               	goto	u6290
 13639  002450                     l1076:
 13640                           
 13641                           ;doprnt.c: 543: }
 13642                           ;doprnt.c: 548: flag = 0;
 13643  002450  0E00               	movlw	0
 13644  002452  6E2B               	movwf	printf@flag,c
 13645                           
 13646                           ;doprnt.c: 635: switch(c = *f++) {
 13647  002454  D04D               	goto	l1077
 13648  002456                     
 13649                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13650  002456  C02F  FFD9         	movff	printf@ap,fsr2l
 13651  00245A  C030  FFDA         	movff	printf@ap+1,fsr2h
 13652  00245E  CFDE F02D          	movff	postinc2,printf@cp
 13653  002462  CFDD F02E          	movff	postdec2,printf@cp+1
 13654  002466  0E02               	movlw	2
 13655  002468  262F               	addwf	printf@ap,f,c
 13656  00246A  0E00               	movlw	0
 13657  00246C  2230               	addwfc	printf@ap+1,f,c
 13658                           
 13659                           ;doprnt.c: 740: if(!cp)
 13660  00246E  502D               	movf	printf@cp,w,c
 13661  002470  102E               	iorwf	printf@cp+1,w,c
 13662  002472  A4D8               	btfss	status,2,c
 13663  002474  D01A               	goto	l1085
 13664                           
 13665                           ;doprnt.c: 741: cp = "(null)";
 13666  002476  0E92               	movlw	low STR_142
 13667  002478  6E2D               	movwf	printf@cp,c
 13668  00247A  0EFF               	movlw	high STR_142
 13669  00247C  6E2E               	movwf	printf@cp+1,c
 13670                           
 13671                           ;doprnt.c: 777: while(*cp)
 13672  00247E  D015               	goto	l1085
 13673  002480                     
 13674                           ;doprnt.c: 778: (putch(*cp++) );
 13675  002480  C02D  FFF6         	movff	printf@cp,tblptrl
 13676  002484  C02E  FFF7         	movff	printf@cp+1,tblptrh
 13677  002488  0E00               	movlw	low (__mediumconst shr (0+16))
 13678  00248A  6EF8               	movwf	tblptru,c
 13679  00248C  0E0F               	movlw	(high __ramtop+-1)
 13680  00248E  64F7               	cpfsgt	tblptrh,c
 13681  002490  D003               	bra	u6217
 13682  002492  0008               	tblrd		*
 13683  002494  50F5               	movf	tablat,w,c
 13684  002496  D005               	bra	u6210
 13685  002498                     u6217:
 13686  002498  CFF6 FFE9          	movff	tblptrl,fsr0l
 13687  00249C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13688  0024A0  50EF               	movf	indf0,w,c
 13689  0024A2                     u6210:
 13690  0024A2  EC3D  F01E         	call	_putch
 13691  0024A6  4A2D               	infsnz	printf@cp,f,c
 13692  0024A8  2A2E               	incf	printf@cp+1,f,c
 13693  0024AA                     l1085:
 13694  0024AA  C02D  FFF6         	movff	printf@cp,tblptrl
 13695  0024AE  C02E  FFF7         	movff	printf@cp+1,tblptrh
 13696  0024B2  0E00               	movlw	low (__mediumconst shr (0+16))
 13697  0024B4  6EF8               	movwf	tblptru,c
 13698  0024B6  0E0F               	movlw	(high __ramtop+-1)
 13699  0024B8  64F7               	cpfsgt	tblptrh,c
 13700  0024BA  D003               	bra	u6227
 13701  0024BC  0008               	tblrd		*
 13702  0024BE  50F5               	movf	tablat,w,c
 13703  0024C0  D005               	bra	u6220
 13704  0024C2                     u6227:
 13705  0024C2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13706  0024C6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13707  0024CA  50EF               	movf	indf0,w,c
 13708  0024CC                     u6220:
 13709  0024CC  0900               	iorlw	0
 13710  0024CE  B4D8               	btfsc	status,2,c
 13711  0024D0  D090               	goto	u6290
 13712  0024D2  D7D6               	goto	l1086
 13713  0024D4                     
 13714                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 13715  0024D4  C02F  FFD9         	movff	printf@ap,fsr2l
 13716  0024D8  C030  FFDA         	movff	printf@ap+1,fsr2h
 13717  0024DC  50DF               	movf	indf2,w,c
 13718  0024DE  6E33               	movwf	printf@c,c
 13719  0024E0  0E02               	movlw	2
 13720  0024E2  262F               	addwf	printf@ap,f,c
 13721  0024E4  0E00               	movlw	0
 13722  0024E6  2230               	addwfc	printf@ap+1,f,c
 13723  0024E8                     
 13724                           ;doprnt.c: 809: (putch(c) );
 13725  0024E8  5033               	movf	printf@c,w,c
 13726  0024EA  EC3D  F01E         	call	_putch
 13727                           
 13728                           ;doprnt.c: 810: continue;
 13729  0024EE  D081               	goto	u6290
 13730  0024F0                     l1077:
 13731  0024F0  C022  FFF6         	movff	printf@f,tblptrl
 13732  0024F4  C023  FFF7         	movff	printf@f+1,tblptrh
 13733  0024F8  4A22               	infsnz	printf@f,f,c
 13734  0024FA  2A23               	incf	printf@f+1,f,c
 13735  0024FC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13736  0024FC  6AF8               	clrf	tblptru,c
 13737  0024FE                     	endif
 13738  0024FE                     	if	0	;tblptru may be non-zero
 13739  0024FE                     	endif
 13740  0024FE  0008               	tblrd		*
 13741  002500  CFF5 F033          	movff	tablat,printf@c
 13742  002504  5033               	movf	printf@c,w,c
 13743                           
 13744                           ; Switch size 1, requested type "space"
 13745                           ; Number of cases is 5, Range of values is 0 to 115
 13746                           ; switch strategies available:
 13747                           ; Name         Instructions Cycles
 13748                           ; simple_byte           16     9 (average)
 13749                           ;	Chosen strategy is simple_byte
 13750  002506  0A00               	xorlw	0	; case 0
 13751  002508  B4D8               	btfsc	status,2,c
 13752  00250A  0012               	return	
 13753  00250C  0A63               	xorlw	99	; case 99
 13754  00250E  B4D8               	btfsc	status,2,c
 13755  002510  D7E1               	goto	l1088
 13756  002512  0A07               	xorlw	7	; case 100
 13757  002514  B4D8               	btfsc	status,2,c
 13758  002516  D007               	goto	l1082
 13759  002518  0A0D               	xorlw	13	; case 105
 13760  00251A  B4D8               	btfsc	status,2,c
 13761  00251C  D004               	goto	l1082
 13762  00251E  0A1A               	xorlw	26	; case 115
 13763  002520  B4D8               	btfsc	status,2,c
 13764  002522  D799               	goto	l1083
 13765  002524  D7E1               	goto	l1089
 13766  002526                     l1082:
 13767                           
 13768                           ;doprnt.c: 1253: {
 13769                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13770  002526  C02F  FFD9         	movff	printf@ap,fsr2l
 13771  00252A  C030  FFDA         	movff	printf@ap+1,fsr2h
 13772  00252E  CFDE F031          	movff	postinc2,printf@val
 13773  002532  CFDD F032          	movff	postdec2,printf@val+1
 13774  002536  0E02               	movlw	2
 13775  002538  262F               	addwf	printf@ap,f,c
 13776  00253A  0E00               	movlw	0
 13777  00253C  2230               	addwfc	printf@ap+1,f,c
 13778                           
 13779                           ;doprnt.c: 1261: if((int)val < 0) {
 13780  00253E  AE32               	btfss	printf@val+1,7,c
 13781  002540  D006               	goto	l1090
 13782                           
 13783                           ;doprnt.c: 1262: flag |= 0x03;
 13784  002542  0E03               	movlw	3
 13785  002544  122B               	iorwf	printf@flag,f,c
 13786                           
 13787                           ;doprnt.c: 1263: val = -val;
 13788  002546  6C31               	negf	printf@val,c
 13789  002548  1E32               	comf	printf@val+1,f,c
 13790  00254A  B0D8               	btfsc	status,0,c
 13791  00254C  2A32               	incf	printf@val+1,f,c
 13792  00254E                     l1090:
 13793                           
 13794                           ;doprnt.c: 1264: }
 13795                           ;doprnt.c: 1266: }
 13796                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13797  00254E  0E01               	movlw	1
 13798  002550  6E33               	movwf	printf@c,c
 13799  002552                     l6424:
 13800  002552  0E05               	movlw	5
 13801  002554  1833               	xorwf	printf@c,w,c
 13802  002556  B4D8               	btfsc	status,2,c
 13803  002558  D015               	goto	u6270
 13804                           
 13805                           ;doprnt.c: 1306: if(val < dpowers[c])
 13806  00255A  5033               	movf	printf@c,w,c
 13807  00255C  0D02               	mullw	2
 13808  00255E  0ED7               	movlw	low _dpowers
 13809  002560  24F3               	addwf	prodl,w,c
 13810  002562  6EF6               	movwf	tblptrl,c
 13811  002564  0EFC               	movlw	high _dpowers
 13812  002566  20F4               	addwfc	prodh,w,c
 13813  002568  6EF7               	movwf	tblptrh,c
 13814  00256A                     	if	1	;There are 3 active tblptr bytes
 13815  00256A  6AF8               	clrf	tblptru,c
 13816  00256C  0E00               	movlw	low (__mediumconst shr (0+16))
 13817  00256E  22F8               	addwfc	tblptru,f,c
 13818  002570                     	endif
 13819  002570  0009               	tblrd		*+
 13820  002572  50F5               	movf	tablat,w,c
 13821  002574  5C31               	subwf	printf@val,w,c
 13822  002576  0009               	tblrd		*+
 13823  002578  50F5               	movf	tablat,w,c
 13824  00257A  5832               	subwfb	printf@val+1,w,c
 13825  00257C  A0D8               	btfss	status,0,c
 13826  00257E  D002               	goto	u6270
 13827                           
 13828                           ;doprnt.c: 1307: break;
 13829  002580  2A33               	incf	printf@c,f,c
 13830  002582  D7E7               	goto	l6424
 13831  002584                     u6270:
 13832                           
 13833                           ;doprnt.c: 1422: {
 13834                           ;doprnt.c: 1438: if(flag & 0x03)
 13835  002584  C02B  F02A         	movff	printf@flag,??_printf
 13836  002588  0E03               	movlw	3
 13837  00258A  162A               	andwf	??_printf,f,c
 13838  00258C  B4D8               	btfsc	status,2,c
 13839  00258E  D003               	goto	l1094
 13840                           
 13841                           ;doprnt.c: 1439: (putch('-') );
 13842  002590  0E2D               	movlw	45
 13843  002592  EC3D  F01E         	call	_putch
 13844  002596                     l1094:
 13845                           
 13846                           ;doprnt.c: 1469: }
 13847                           ;doprnt.c: 1472: prec = c;
 13848  002596  C033  F02C         	movff	printf@c,printf@prec
 13849                           
 13850                           ;doprnt.c: 1474: while(prec--) {
 13851  00259A  D027               	goto	l1095
 13852  00259C                     
 13853                           ;doprnt.c: 1478: {
 13854                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13855  00259C  502C               	movf	printf@prec,w,c
 13856  00259E  0D02               	mullw	2
 13857  0025A0  0ED7               	movlw	low _dpowers
 13858  0025A2  24F3               	addwf	prodl,w,c
 13859  0025A4  6EF6               	movwf	tblptrl,c
 13860  0025A6  0EFC               	movlw	high _dpowers
 13861  0025A8  20F4               	addwfc	prodh,w,c
 13862  0025AA  6EF7               	movwf	tblptrh,c
 13863  0025AC                     	if	1	;There are 3 active tblptr bytes
 13864  0025AC  6AF8               	clrf	tblptru,c
 13865  0025AE  0E00               	movlw	low (__mediumconst shr (0+16))
 13866  0025B0  22F8               	addwfc	tblptru,f,c
 13867  0025B2                     	endif
 13868  0025B2  0009               	tblrd		*+
 13869  0025B4  CFF5 F016          	movff	tablat,___lwdiv@divisor
 13870  0025B8  000A               	tblrd		*-
 13871  0025BA  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
 13872  0025BE  C031  F014         	movff	printf@val,___lwdiv@dividend
 13873  0025C2  C032  F015         	movff	printf@val+1,___lwdiv@dividend+1
 13874  0025C6  ECA8  F01A         	call	___lwdiv	;wreg free
 13875  0025CA  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
 13876  0025CE  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
 13877  0025D2  0E00               	movlw	0
 13878  0025D4  6E1E               	movwf	___lwmod@divisor+1,c
 13879  0025D6  0E0A               	movlw	10
 13880  0025D8  6E1D               	movwf	___lwmod@divisor,c
 13881  0025DA  ECF5  F01B         	call	___lwmod	;wreg free
 13882  0025DE  501B               	movf	?___lwmod,w,c
 13883  0025E0  0F30               	addlw	48
 13884  0025E2  6E33               	movwf	printf@c,c
 13885                           
 13886                           ;doprnt.c: 1523: }
 13887                           ;doprnt.c: 1524: (putch(c) );
 13888  0025E4  5033               	movf	printf@c,w,c
 13889  0025E6  EC3D  F01E         	call	_putch
 13890  0025EA                     l1095:
 13891  0025EA  062C               	decf	printf@prec,f,c
 13892  0025EC  282C               	incf	printf@prec,w,c
 13893  0025EE  A4D8               	btfss	status,2,c
 13894  0025F0  D7D5               	goto	l1096
 13895  0025F2                     u6290:
 13896  0025F2  C022  FFF6         	movff	printf@f,tblptrl
 13897  0025F6  C023  FFF7         	movff	printf@f+1,tblptrh
 13898  0025FA  4A22               	infsnz	printf@f,f,c
 13899  0025FC  2A23               	incf	printf@f+1,f,c
 13900  0025FE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13901  0025FE  6AF8               	clrf	tblptru,c
 13902  002600                     	endif
 13903  002600                     	if	0	;tblptru may be non-zero
 13904  002600                     	endif
 13905  002600  0008               	tblrd		*
 13906  002602  CFF5 F033          	movff	tablat,printf@c
 13907  002606  5033               	movf	printf@c,w,c
 13908  002608  B4D8               	btfsc	status,2,c
 13909  00260A  0012               	return	
 13910  00260C  D719               	goto	l1075
 13911  00260E                     __end_of_printf:
 13912                           	opt stack 0
 13913                           tblptru	equ	0xFF8
 13914                           tblptrh	equ	0xFF7
 13915                           tblptrl	equ	0xFF6
 13916                           tablat	equ	0xFF5
 13917                           prodh	equ	0xFF4
 13918                           prodl	equ	0xFF3
 13919                           intcon	equ	0xFF2
 13920                           indf0	equ	0xFEF
 13921                           postinc0	equ	0xFEE
 13922                           fsr0h	equ	0xFEA
 13923                           fsr0l	equ	0xFE9
 13924                           wreg	equ	0xFE8
 13925                           indf1	equ	0xFE7
 13926                           postinc1	equ	0xFE6
 13927                           postdec1	equ	0xFE5
 13928                           fsr1h	equ	0xFE2
 13929                           fsr1l	equ	0xFE1
 13930                           indf2	equ	0xFDF
 13931                           postinc2	equ	0xFDE
 13932                           postdec2	equ	0xFDD
 13933                           fsr2h	equ	0xFDA
 13934                           fsr2l	equ	0xFD9
 13935                           status	equ	0xFD8
 13936                           
 13937 ;; *************** function _putch *****************
 13938 ;; Defined at:
 13939 ;;		line 160 in file "mcc_generated_files/eusart1.c"
 13940 ;; Parameters:    Size  Location     Type
 13941 ;;  txData          1    wreg     unsigned char 
 13942 ;; Auto vars:     Size  Location     Type
 13943 ;;  txData          1   20[COMRAM] unsigned char 
 13944 ;; Return value:  Size  Location     Type
 13945 ;;                  1    wreg      void 
 13946 ;; Registers used:
 13947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13948 ;; Tracked objects:
 13949 ;;		On entry : 0/0
 13950 ;;		On exit  : 0/0
 13951 ;;		Unchanged: 0/0
 13952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13957 ;;Total ram usage:        1 bytes
 13958 ;; Hardware stack levels used:    1
 13959 ;; Hardware stack levels required when called:    6
 13960 ;; This function calls:
 13961 ;;		_EUSART1_Write
 13962 ;; This function is called by:
 13963 ;;		_printf
 13964 ;;		_puts
 13965 ;;		_cputs
 13966 ;; This function uses a non-reentrant model
 13967 ;;
 13968                           
 13969                           	psect	text59
 13970  003C7A                     __ptext59:
 13971                           	opt stack 0
 13972  003C7A                     _putch:
 13973                           	opt stack 23
 13974                           
 13975                           ;incstack = 0
 13976                           ;putch@txData stored from wreg
 13977  003C7A  6E15               	movwf	putch@txData,c
 13978                           
 13979                           ;eusart1.c: 162: EUSART1_Write(txData);
 13980  003C7C  5015               	movf	putch@txData,w,c
 13981  003C7E  EC37  F01C         	call	_EUSART1_Write
 13982  003C82  0012               	return		;funcret
 13983  003C84                     __end_of_putch:
 13984                           	opt stack 0
 13985                           tblptru	equ	0xFF8
 13986                           tblptrh	equ	0xFF7
 13987                           tblptrl	equ	0xFF6
 13988                           tablat	equ	0xFF5
 13989                           prodh	equ	0xFF4
 13990                           prodl	equ	0xFF3
 13991                           intcon	equ	0xFF2
 13992                           indf0	equ	0xFEF
 13993                           postinc0	equ	0xFEE
 13994                           fsr0h	equ	0xFEA
 13995                           fsr0l	equ	0xFE9
 13996                           wreg	equ	0xFE8
 13997                           indf1	equ	0xFE7
 13998                           postinc1	equ	0xFE6
 13999                           postdec1	equ	0xFE5
 14000                           fsr1h	equ	0xFE2
 14001                           fsr1l	equ	0xFE1
 14002                           indf2	equ	0xFDF
 14003                           postinc2	equ	0xFDE
 14004                           postdec2	equ	0xFDD
 14005                           fsr2h	equ	0xFDA
 14006                           fsr2l	equ	0xFD9
 14007                           status	equ	0xFD8
 14008                           
 14009 ;; *************** function _EUSART1_Write *****************
 14010 ;; Defined at:
 14011 ;;		line 132 in file "mcc_generated_files/eusart1.c"
 14012 ;; Parameters:    Size  Location     Type
 14013 ;;  txData          1    wreg     unsigned char 
 14014 ;; Auto vars:     Size  Location     Type
 14015 ;;  txData          1   19[COMRAM] unsigned char 
 14016 ;; Return value:  Size  Location     Type
 14017 ;;                  1    wreg      void 
 14018 ;; Registers used:
 14019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14020 ;; Tracked objects:
 14021 ;;		On entry : 0/0
 14022 ;;		On exit  : 0/0
 14023 ;;		Unchanged: 0/0
 14024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14026 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14028 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14029 ;;Total ram usage:        1 bytes
 14030 ;; Hardware stack levels used:    1
 14031 ;; Hardware stack levels required when called:    5
 14032 ;; This function calls:
 14033 ;;		Nothing
 14034 ;; This function is called by:
 14035 ;;		_putch
 14036 ;; This function uses a non-reentrant model
 14037 ;;
 14038                           
 14039                           	psect	text60
 14040  00386E                     __ptext60:
 14041                           	opt stack 0
 14042  00386E                     _EUSART1_Write:
 14043                           	opt stack 23
 14044                           
 14045                           ;incstack = 0
 14046                           ;EUSART1_Write@txData stored from wreg
 14047  00386E  6E14               	movwf	EUSART1_Write@txData,c
 14048  003870                     
 14049                           ;eusart1.c: 135: {
 14050                           
 14051                           ;eusart1.c: 134: while(0 == eusart1TxBufferRemaining)
 14052  003870  0100               	movlb	0	; () banked
 14053  003872  51FC               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 14054  003874  B4D8               	btfsc	status,2,c
 14055  003876  D7FC               	goto	l6322
 14056                           
 14057                           ; BSR set to: 0
 14058                           ;eusart1.c: 136: }
 14059                           ;eusart1.c: 138: if(0 == PIE1bits.TX1IE)
 14060  003878  B89D               	btfsc	3997,4,c	;volatile
 14061  00387A  D003               	goto	l195
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;eusart1.c: 139: {
 14065                           ;eusart1.c: 140: TXREG1 = txData;
 14066  00387C  C014  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 14067                           
 14068                           ;eusart1.c: 141: }
 14069  003880  D012               	goto	l196
 14070  003882                     l195:
 14071                           
 14072                           ; BSR set to: 0
 14073                           ;eusart1.c: 142: else
 14074                           ;eusart1.c: 143: {
 14075                           ;eusart1.c: 144: PIE1bits.TX1IE = 0;
 14076  003882  989D               	bcf	3997,4,c	;volatile
 14077                           
 14078                           ; BSR set to: 0
 14079                           ;eusart1.c: 145: eusart1TxBuffer[eusart1TxHead++] = txData;
 14080  003884  5043               	movf	_eusart1TxHead,w,c	;volatile
 14081  003886  0D01               	mullw	1
 14082  003888  0E68               	movlw	low _eusart1TxBuffer
 14083  00388A  24F3               	addwf	prodl,w,c
 14084  00388C  6ED9               	movwf	fsr2l,c
 14085  00388E  0E00               	movlw	high _eusart1TxBuffer
 14086  003890  20F4               	addwfc	prodh,w,c
 14087  003892  6EDA               	movwf	fsr2h,c
 14088  003894  C014  FFDF         	movff	EUSART1_Write@txData,indf2
 14089                           
 14090                           ; BSR set to: 0
 14091  003898  2A43               	incf	_eusart1TxHead,f,c	;volatile
 14092                           
 14093                           ; BSR set to: 0
 14094                           ;eusart1.c: 146: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 14095  00389A  0E07               	movlw	7
 14096  00389C  6443               	cpfsgt	_eusart1TxHead,c	;volatile
 14097  00389E  D002               	goto	l197
 14098                           
 14099                           ; BSR set to: 0
 14100                           ;eusart1.c: 147: {
 14101                           ;eusart1.c: 148: eusart1TxHead = 0;
 14102  0038A0  0E00               	movlw	0
 14103  0038A2  6E43               	movwf	_eusart1TxHead,c	;volatile
 14104  0038A4                     l197:
 14105                           
 14106                           ; BSR set to: 0
 14107                           ;eusart1.c: 149: }
 14108                           ;eusart1.c: 150: eusart1TxBufferRemaining--;
 14109                           
 14110                           ; BSR set to: 0
 14111  0038A4  07FC               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 14112  0038A6                     l196:
 14113                           
 14114                           ; BSR set to: 0
 14115                           ;eusart1.c: 151: }
 14116                           ;eusart1.c: 152: PIE1bits.TX1IE = 1;
 14117                           
 14118                           ; BSR set to: 0
 14119  0038A6  889D               	bsf	3997,4,c	;volatile
 14120                           
 14121                           ; BSR set to: 0
 14122  0038A8  0012               	return		;funcret
 14123  0038AA                     __end_of_EUSART1_Write:
 14124                           	opt stack 0
 14125                           tblptru	equ	0xFF8
 14126                           tblptrh	equ	0xFF7
 14127                           tblptrl	equ	0xFF6
 14128                           tablat	equ	0xFF5
 14129                           prodh	equ	0xFF4
 14130                           prodl	equ	0xFF3
 14131                           intcon	equ	0xFF2
 14132                           indf0	equ	0xFEF
 14133                           postinc0	equ	0xFEE
 14134                           fsr0h	equ	0xFEA
 14135                           fsr0l	equ	0xFE9
 14136                           wreg	equ	0xFE8
 14137                           indf1	equ	0xFE7
 14138                           postinc1	equ	0xFE6
 14139                           postdec1	equ	0xFE5
 14140                           fsr1h	equ	0xFE2
 14141                           fsr1l	equ	0xFE1
 14142                           indf2	equ	0xFDF
 14143                           postinc2	equ	0xFDE
 14144                           postdec2	equ	0xFDD
 14145                           fsr2h	equ	0xFDA
 14146                           fsr2l	equ	0xFD9
 14147                           status	equ	0xFD8
 14148                           
 14149 ;; *************** function ___lwmod *****************
 14150 ;; Defined at:
 14151 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwmod.c"
 14152 ;; Parameters:    Size  Location     Type
 14153 ;;  dividend        2   26[COMRAM] unsigned int 
 14154 ;;  divisor         2   28[COMRAM] unsigned int 
 14155 ;; Auto vars:     Size  Location     Type
 14156 ;;  counter         1   30[COMRAM] unsigned char 
 14157 ;; Return value:  Size  Location     Type
 14158 ;;                  2   26[COMRAM] unsigned int 
 14159 ;; Registers used:
 14160 ;;		wreg, status,2, status,0
 14161 ;; Tracked objects:
 14162 ;;		On entry : 0/0
 14163 ;;		On exit  : 0/0
 14164 ;;		Unchanged: 0/0
 14165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14166 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14167 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14169 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14170 ;;Total ram usage:        5 bytes
 14171 ;; Hardware stack levels used:    1
 14172 ;; Hardware stack levels required when called:    5
 14173 ;; This function calls:
 14174 ;;		Nothing
 14175 ;; This function is called by:
 14176 ;;		_printf
 14177 ;; This function uses a non-reentrant model
 14178 ;;
 14179                           
 14180                           	psect	text61
 14181  0037EA                     __ptext61:
 14182                           	opt stack 0
 14183  0037EA                     ___lwmod:
 14184                           	opt stack 24
 14185                           
 14186                           ; BSR set to: 0
 14187                           ;incstack = 0
 14188  0037EA  501D               	movf	___lwmod@divisor,w,c
 14189  0037EC  101E               	iorwf	___lwmod@divisor+1,w,c
 14190  0037EE  B4D8               	btfsc	status,2,c
 14191  0037F0  D018               	goto	l1538
 14192  0037F2  0E01               	movlw	1
 14193  0037F4  6E1F               	movwf	___lwmod@counter,c
 14194  0037F6  D004               	goto	l1533
 14195  0037F8  90D8               	bcf	status,0,c
 14196  0037FA  361D               	rlcf	___lwmod@divisor,f,c
 14197  0037FC  361E               	rlcf	___lwmod@divisor+1,f,c
 14198  0037FE  2A1F               	incf	___lwmod@counter,f,c
 14199  003800                     l1533:
 14200  003800  AE1E               	btfss	___lwmod@divisor+1,7,c
 14201  003802  D7FA               	goto	l1534
 14202  003804                     u6170:
 14203  003804  501D               	movf	___lwmod@divisor,w,c
 14204  003806  5C1B               	subwf	___lwmod@dividend,w,c
 14205  003808  501E               	movf	___lwmod@divisor+1,w,c
 14206  00380A  581C               	subwfb	___lwmod@dividend+1,w,c
 14207  00380C  A0D8               	btfss	status,0,c
 14208  00380E  D004               	goto	l1537
 14209  003810  501D               	movf	___lwmod@divisor,w,c
 14210  003812  5E1B               	subwf	___lwmod@dividend,f,c
 14211  003814  501E               	movf	___lwmod@divisor+1,w,c
 14212  003816  5A1C               	subwfb	___lwmod@dividend+1,f,c
 14213  003818                     l1537:
 14214  003818  90D8               	bcf	status,0,c
 14215  00381A  321E               	rrcf	___lwmod@divisor+1,f,c
 14216  00381C  321D               	rrcf	___lwmod@divisor,f,c
 14217  00381E  2E1F               	decfsz	___lwmod@counter,f,c
 14218  003820  D7F1               	goto	u6170
 14219  003822                     l1538:
 14220  003822  C01B  F01B         	movff	___lwmod@dividend,?___lwmod
 14221  003826  C01C  F01C         	movff	___lwmod@dividend+1,?___lwmod+1
 14222  00382A  0012               	return		;funcret
 14223  00382C                     __end_of___lwmod:
 14224                           	opt stack 0
 14225                           tblptru	equ	0xFF8
 14226                           tblptrh	equ	0xFF7
 14227                           tblptrl	equ	0xFF6
 14228                           tablat	equ	0xFF5
 14229                           prodh	equ	0xFF4
 14230                           prodl	equ	0xFF3
 14231                           intcon	equ	0xFF2
 14232                           indf0	equ	0xFEF
 14233                           postinc0	equ	0xFEE
 14234                           fsr0h	equ	0xFEA
 14235                           fsr0l	equ	0xFE9
 14236                           wreg	equ	0xFE8
 14237                           indf1	equ	0xFE7
 14238                           postinc1	equ	0xFE6
 14239                           postdec1	equ	0xFE5
 14240                           fsr1h	equ	0xFE2
 14241                           fsr1l	equ	0xFE1
 14242                           indf2	equ	0xFDF
 14243                           postinc2	equ	0xFDE
 14244                           postdec2	equ	0xFDD
 14245                           fsr2h	equ	0xFDA
 14246                           fsr2l	equ	0xFD9
 14247                           status	equ	0xFD8
 14248                           
 14249 ;; *************** function ___lwdiv *****************
 14250 ;; Defined at:
 14251 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 14252 ;; Parameters:    Size  Location     Type
 14253 ;;  dividend        2   19[COMRAM] unsigned int 
 14254 ;;  divisor         2   21[COMRAM] unsigned int 
 14255 ;; Auto vars:     Size  Location     Type
 14256 ;;  quotient        2   24[COMRAM] unsigned int 
 14257 ;;  counter         1   23[COMRAM] unsigned char 
 14258 ;; Return value:  Size  Location     Type
 14259 ;;                  2   19[COMRAM] unsigned int 
 14260 ;; Registers used:
 14261 ;;		wreg, status,2, status,0
 14262 ;; Tracked objects:
 14263 ;;		On entry : 0/0
 14264 ;;		On exit  : 0/0
 14265 ;;		Unchanged: 0/0
 14266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14267 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14268 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14270 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14271 ;;Total ram usage:        7 bytes
 14272 ;; Hardware stack levels used:    1
 14273 ;; Hardware stack levels required when called:    5
 14274 ;; This function calls:
 14275 ;;		Nothing
 14276 ;; This function is called by:
 14277 ;;		_printf
 14278 ;; This function uses a non-reentrant model
 14279 ;;
 14280                           
 14281                           	psect	text62
 14282  003550                     __ptext62:
 14283                           	opt stack 0
 14284  003550                     ___lwdiv:
 14285                           	opt stack 24
 14286                           
 14287                           ;incstack = 0
 14288  003550  0E00               	movlw	0
 14289  003552  6E1A               	movwf	___lwdiv@quotient+1,c
 14290  003554  0E00               	movlw	0
 14291  003556  6E19               	movwf	___lwdiv@quotient,c
 14292  003558  5016               	movf	___lwdiv@divisor,w,c
 14293  00355A  1017               	iorwf	___lwdiv@divisor+1,w,c
 14294  00355C  B4D8               	btfsc	status,2,c
 14295  00355E  D01C               	goto	l1528
 14296  003560  0E01               	movlw	1
 14297  003562  6E18               	movwf	___lwdiv@counter,c
 14298  003564  D004               	goto	l1523
 14299  003566  90D8               	bcf	status,0,c
 14300  003568  3616               	rlcf	___lwdiv@divisor,f,c
 14301  00356A  3617               	rlcf	___lwdiv@divisor+1,f,c
 14302  00356C  2A18               	incf	___lwdiv@counter,f,c
 14303  00356E                     l1523:
 14304  00356E  AE17               	btfss	___lwdiv@divisor+1,7,c
 14305  003570  D7FA               	goto	l1524
 14306  003572                     u6140:
 14307  003572  90D8               	bcf	status,0,c
 14308  003574  3619               	rlcf	___lwdiv@quotient,f,c
 14309  003576  361A               	rlcf	___lwdiv@quotient+1,f,c
 14310  003578  5016               	movf	___lwdiv@divisor,w,c
 14311  00357A  5C14               	subwf	___lwdiv@dividend,w,c
 14312  00357C  5017               	movf	___lwdiv@divisor+1,w,c
 14313  00357E  5815               	subwfb	___lwdiv@dividend+1,w,c
 14314  003580  A0D8               	btfss	status,0,c
 14315  003582  D005               	goto	l1527
 14316  003584  5016               	movf	___lwdiv@divisor,w,c
 14317  003586  5E14               	subwf	___lwdiv@dividend,f,c
 14318  003588  5017               	movf	___lwdiv@divisor+1,w,c
 14319  00358A  5A15               	subwfb	___lwdiv@dividend+1,f,c
 14320  00358C  8019               	bsf	___lwdiv@quotient,0,c
 14321  00358E                     l1527:
 14322  00358E  90D8               	bcf	status,0,c
 14323  003590  3217               	rrcf	___lwdiv@divisor+1,f,c
 14324  003592  3216               	rrcf	___lwdiv@divisor,f,c
 14325  003594  2E18               	decfsz	___lwdiv@counter,f,c
 14326  003596  D7ED               	goto	u6140
 14327  003598                     l1528:
 14328  003598  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
 14329  00359C  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14330  0035A0  0012               	return		;funcret
 14331  0035A2                     __end_of___lwdiv:
 14332                           	opt stack 0
 14333                           tblptru	equ	0xFF8
 14334                           tblptrh	equ	0xFF7
 14335                           tblptrl	equ	0xFF6
 14336                           tablat	equ	0xFF5
 14337                           prodh	equ	0xFF4
 14338                           prodl	equ	0xFF3
 14339                           intcon	equ	0xFF2
 14340                           indf0	equ	0xFEF
 14341                           postinc0	equ	0xFEE
 14342                           fsr0h	equ	0xFEA
 14343                           fsr0l	equ	0xFE9
 14344                           wreg	equ	0xFE8
 14345                           indf1	equ	0xFE7
 14346                           postinc1	equ	0xFE6
 14347                           postdec1	equ	0xFE5
 14348                           fsr1h	equ	0xFE2
 14349                           fsr1l	equ	0xFE1
 14350                           indf2	equ	0xFDF
 14351                           postinc2	equ	0xFDE
 14352                           postdec2	equ	0xFDD
 14353                           fsr2h	equ	0xFDA
 14354                           fsr2l	equ	0xFD9
 14355                           status	equ	0xFD8
 14356                           
 14357 ;; *************** function _atoi *****************
 14358 ;; Defined at:
 14359 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\atoi.c"
 14360 ;; Parameters:    Size  Location     Type
 14361 ;;  s               2   33[COMRAM] PTR const unsigned char 
 14362 ;;		 -> uart_str(150), STR_89(7), STR_88(7), STR_87(7), 
 14363 ;;		 -> STR_84(7), STR_82(7), STR_80(7), STR_78(7), 
 14364 ;;		 -> STR_76(2), STR_74(7), STR_69(7), STR_67(7), 
 14365 ;;		 -> STR_65(7), STR_63(7), STR_61(7), STR_60(7), 
 14366 ;;		 -> STR_56(7), STR_53(7), STR_52(7), STR_48(2), 
 14367 ;;		 -> STR_45(7), STR_43(7), STR_41(7), STR_39(7), 
 14368 ;;		 -> STR_37(7), STR_36(7), STR_33(7), RAM(3895), 
 14369 ;;		 -> STR_31(7), STR_29(7), NULL(0), 
 14370 ;; Auto vars:     Size  Location     Type
 14371 ;;  a               2   38[COMRAM] int 
 14372 ;;  sign            1   37[COMRAM] unsigned char 
 14373 ;; Return value:  Size  Location     Type
 14374 ;;                  2   33[COMRAM] int 
 14375 ;; Registers used:
 14376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14377 ;; Tracked objects:
 14378 ;;		On entry : 0/0
 14379 ;;		On exit  : 0/0
 14380 ;;		Unchanged: 0/0
 14381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14382 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14383 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14384 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14385 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14386 ;;Total ram usage:        7 bytes
 14387 ;; Hardware stack levels used:    1
 14388 ;; Hardware stack levels required when called:    6
 14389 ;; This function calls:
 14390 ;;		___wmul
 14391 ;;		_isdigit
 14392 ;; This function is called by:
 14393 ;;		_parse_cmd_str
 14394 ;; This function uses a non-reentrant model
 14395 ;;
 14396                           
 14397                           	psect	text63
 14398  00260E                     __ptext63:
 14399                           	opt stack 0
 14400  00260E                     _atoi:
 14401                           	opt stack 22
 14402                           
 14403                           ;incstack = 0
 14404  00260E  D002               	goto	l1263
 14405  002610  4A22               	infsnz	atoi@s,f,c
 14406  002612  2A23               	incf	atoi@s+1,f,c
 14407  002614                     l1263:
 14408  002614  C022  FFF6         	movff	atoi@s,tblptrl
 14409  002618  C023  FFF7         	movff	atoi@s+1,tblptrh
 14410  00261C  0E00               	movlw	low (__mediumconst shr (0+16))
 14411  00261E  6EF8               	movwf	tblptru,c
 14412  002620  0E0F               	movlw	(high __ramtop+-1)
 14413  002622  64F7               	cpfsgt	tblptrh,c
 14414  002624  D003               	bra	u7107
 14415  002626  0008               	tblrd		*
 14416  002628  50F5               	movf	tablat,w,c
 14417  00262A  D005               	bra	u7100
 14418  00262C                     u7107:
 14419  00262C  CFF6 FFE9          	movff	tblptrl,fsr0l
 14420  002630  CFF7 FFEA          	movff	tblptrh,fsr0h
 14421  002634  50EF               	movf	indf0,w,c
 14422  002636                     u7100:
 14423  002636  0A20               	xorlw	32
 14424  002638  B4D8               	btfsc	status,2,c
 14425  00263A  D7EA               	goto	l1264
 14426  00263C  C022  FFF6         	movff	atoi@s,tblptrl
 14427  002640  C023  FFF7         	movff	atoi@s+1,tblptrh
 14428  002644  0E00               	movlw	low (__mediumconst shr (0+16))
 14429  002646  6EF8               	movwf	tblptru,c
 14430  002648  0E0F               	movlw	(high __ramtop+-1)
 14431  00264A  64F7               	cpfsgt	tblptrh,c
 14432  00264C  D003               	bra	u7127
 14433  00264E  0008               	tblrd		*
 14434  002650  50F5               	movf	tablat,w,c
 14435  002652  D005               	bra	u7120
 14436  002654                     u7127:
 14437  002654  CFF6 FFE9          	movff	tblptrl,fsr0l
 14438  002658  CFF7 FFEA          	movff	tblptrh,fsr0h
 14439  00265C  50EF               	movf	indf0,w,c
 14440  00265E                     u7120:
 14441  00265E  0A09               	xorlw	9
 14442  002660  B4D8               	btfsc	status,2,c
 14443  002662  D7D6               	goto	l1264
 14444  002664  0E00               	movlw	0
 14445  002666  6E28               	movwf	atoi@a+1,c
 14446  002668  0E00               	movlw	0
 14447  00266A  6E27               	movwf	atoi@a,c
 14448  00266C  0E00               	movlw	0
 14449  00266E  6E26               	movwf	atoi@sign,c
 14450  002670  C022  FFF6         	movff	atoi@s,tblptrl
 14451  002674  C023  FFF7         	movff	atoi@s+1,tblptrh
 14452  002678  0E00               	movlw	low (__mediumconst shr (0+16))
 14453  00267A  6EF8               	movwf	tblptru,c
 14454  00267C  0E0F               	movlw	(high __ramtop+-1)
 14455  00267E  64F7               	cpfsgt	tblptrh,c
 14456  002680  D003               	bra	u7147
 14457  002682  0008               	tblrd		*
 14458  002684  50F5               	movf	tablat,w,c
 14459  002686  D005               	bra	u7140
 14460  002688                     u7147:
 14461  002688  CFF6 FFE9          	movff	tblptrl,fsr0l
 14462  00268C  CFF7 FFEA          	movff	tblptrh,fsr0h
 14463  002690  50EF               	movf	indf0,w,c
 14464  002692                     u7140:
 14465  002692  0A2D               	xorlw	45
 14466  002694  A4D8               	btfss	status,2,c
 14467  002696  D002               	goto	l1266
 14468  002698  2A26               	incf	atoi@sign,f,c
 14469  00269A  D03C               	goto	l7030
 14470  00269C                     l1266:
 14471  00269C  C022  FFF6         	movff	atoi@s,tblptrl
 14472  0026A0  C023  FFF7         	movff	atoi@s+1,tblptrh
 14473  0026A4  0E00               	movlw	low (__mediumconst shr (0+16))
 14474  0026A6  6EF8               	movwf	tblptru,c
 14475  0026A8  0E0F               	movlw	(high __ramtop+-1)
 14476  0026AA  64F7               	cpfsgt	tblptrh,c
 14477  0026AC  D003               	bra	u7167
 14478  0026AE  0008               	tblrd		*
 14479  0026B0  50F5               	movf	tablat,w,c
 14480  0026B2  D005               	bra	u7160
 14481  0026B4                     u7167:
 14482  0026B4  CFF6 FFE9          	movff	tblptrl,fsr0l
 14483  0026B8  CFF7 FFEA          	movff	tblptrh,fsr0h
 14484  0026BC  50EF               	movf	indf0,w,c
 14485  0026BE                     u7160:
 14486  0026BE  0A2B               	xorlw	43
 14487  0026C0  A4D8               	btfss	status,2,c
 14488  0026C2  D02A               	goto	l1269
 14489  0026C4  D027               	goto	l7030
 14490  0026C6  C027  F01C         	movff	atoi@a,___wmul@multiplier
 14491  0026CA  C028  F01D         	movff	atoi@a+1,___wmul@multiplier+1
 14492  0026CE  0E00               	movlw	0
 14493  0026D0  6E1F               	movwf	___wmul@multiplicand+1,c
 14494  0026D2  0E0A               	movlw	10
 14495  0026D4  6E1E               	movwf	___wmul@multiplicand,c
 14496  0026D6  EC1D  F01D         	call	___wmul	;wreg free
 14497  0026DA  C022  FFF6         	movff	atoi@s,tblptrl
 14498  0026DE  C023  FFF7         	movff	atoi@s+1,tblptrh
 14499  0026E2  0E00               	movlw	low (__mediumconst shr (0+16))
 14500  0026E4  6EF8               	movwf	tblptru,c
 14501  0026E6  0E0F               	movlw	(high __ramtop+-1)
 14502  0026E8  64F7               	cpfsgt	tblptrh,c
 14503  0026EA  D003               	bra	u7187
 14504  0026EC  0008               	tblrd		*
 14505  0026EE  50F5               	movf	tablat,w,c
 14506  0026F0  D005               	bra	u7180
 14507  0026F2                     u7187:
 14508  0026F2  CFF6 FFE9          	movff	tblptrl,fsr0l
 14509  0026F6  CFF7 FFEA          	movff	tblptrh,fsr0h
 14510  0026FA  50EF               	movf	indf0,w,c
 14511  0026FC                     u7180:
 14512  0026FC  6E24               	movwf	??_atoi& (0+255),c
 14513  0026FE  6A25               	clrf	(??_atoi+1)& (0+255),c
 14514  002700  501C               	movf	?___wmul,w,c
 14515  002702  2624               	addwf	??_atoi,f,c
 14516  002704  501D               	movf	?___wmul+1,w,c
 14517  002706  2225               	addwfc	??_atoi+1,f,c
 14518  002708  0ED0               	movlw	208
 14519  00270A  2424               	addwf	??_atoi,w,c
 14520  00270C  6E27               	movwf	atoi@a,c
 14521  00270E  0EFF               	movlw	255
 14522  002710  2025               	addwfc	??_atoi+1,w,c
 14523  002712  6E28               	movwf	atoi@a+1,c
 14524  002714                     l7030:
 14525  002714  4A22               	infsnz	atoi@s,f,c
 14526  002716  2A23               	incf	atoi@s+1,f,c
 14527  002718                     l1269:
 14528  002718  C022  FFF6         	movff	atoi@s,tblptrl
 14529  00271C  C023  FFF7         	movff	atoi@s+1,tblptrh
 14530  002720  0E00               	movlw	low (__mediumconst shr (0+16))
 14531  002722  6EF8               	movwf	tblptru,c
 14532  002724  0E0F               	movlw	(high __ramtop+-1)
 14533  002726  64F7               	cpfsgt	tblptrh,c
 14534  002728  D003               	bra	u7197
 14535  00272A  0008               	tblrd		*
 14536  00272C  50F5               	movf	tablat,w,c
 14537  00272E  D005               	bra	u7190
 14538  002730                     u7197:
 14539  002730  CFF6 FFE9          	movff	tblptrl,fsr0l
 14540  002734  CFF7 FFEA          	movff	tblptrh,fsr0h
 14541  002738  50EF               	movf	indf0,w,c
 14542  00273A                     u7190:
 14543  00273A  EC80  F01D         	call	_isdigit
 14544  00273E  B0D8               	btfsc	status,0,c
 14545  002740  D7C2               	goto	l1270
 14546  002742  5026               	movf	atoi@sign,w,c
 14547  002744  B4D8               	btfsc	status,2,c
 14548  002746  D00D               	goto	l1272
 14549  002748  C027  F024         	movff	atoi@a,??_atoi
 14550  00274C  C028  F025         	movff	atoi@a+1,??_atoi+1
 14551  002750  1E24               	comf	??_atoi,f,c
 14552  002752  1E25               	comf	??_atoi+1,f,c
 14553  002754  4A24               	infsnz	??_atoi,f,c
 14554  002756  2A25               	incf	??_atoi+1,f,c
 14555  002758  C024  F022         	movff	??_atoi,?_atoi
 14556  00275C  C025  F023         	movff	??_atoi+1,?_atoi+1
 14557  002760  0012               	return	
 14558  002762                     l1272:
 14559  002762  C027  F022         	movff	atoi@a,?_atoi
 14560  002766  C028  F023         	movff	atoi@a+1,?_atoi+1
 14561  00276A  0012               	return		;funcret
 14562  00276C                     __end_of_atoi:
 14563                           	opt stack 0
 14564                           tblptru	equ	0xFF8
 14565                           tblptrh	equ	0xFF7
 14566                           tblptrl	equ	0xFF6
 14567                           tablat	equ	0xFF5
 14568                           prodh	equ	0xFF4
 14569                           prodl	equ	0xFF3
 14570                           intcon	equ	0xFF2
 14571                           indf0	equ	0xFEF
 14572                           postinc0	equ	0xFEE
 14573                           fsr0h	equ	0xFEA
 14574                           fsr0l	equ	0xFE9
 14575                           wreg	equ	0xFE8
 14576                           indf1	equ	0xFE7
 14577                           postinc1	equ	0xFE6
 14578                           postdec1	equ	0xFE5
 14579                           fsr1h	equ	0xFE2
 14580                           fsr1l	equ	0xFE1
 14581                           indf2	equ	0xFDF
 14582                           postinc2	equ	0xFDE
 14583                           postdec2	equ	0xFDD
 14584                           fsr2h	equ	0xFDA
 14585                           fsr2l	equ	0xFD9
 14586                           status	equ	0xFD8
 14587                           
 14588 ;; *************** function _isdigit *****************
 14589 ;; Defined at:
 14590 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\isdigit.c"
 14591 ;; Parameters:    Size  Location     Type
 14592 ;;  c               1    wreg     unsigned char 
 14593 ;; Auto vars:     Size  Location     Type
 14594 ;;  c               1   21[COMRAM] unsigned char 
 14595 ;; Return value:  Size  Location     Type
 14596 ;;		None               void
 14597 ;; Registers used:
 14598 ;;		wreg, status,2, status,0
 14599 ;; Tracked objects:
 14600 ;;		On entry : 0/0
 14601 ;;		On exit  : 0/0
 14602 ;;		Unchanged: 0/0
 14603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14606 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14607 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14608 ;;Total ram usage:        3 bytes
 14609 ;; Hardware stack levels used:    1
 14610 ;; Hardware stack levels required when called:    5
 14611 ;; This function calls:
 14612 ;;		Nothing
 14613 ;; This function is called by:
 14614 ;;		_collect_row
 14615 ;;		_get_direction
 14616 ;;		_get_dis_frq
 14617 ;;		_get_over_write_data
 14618 ;;		_collect_column
 14619 ;;		_parse_cmd_str
 14620 ;;		_atoi
 14621 ;; This function uses a non-reentrant model
 14622 ;;
 14623                           
 14624                           	psect	text64
 14625  003B00                     __ptext64:
 14626                           	opt stack 0
 14627  003B00                     _isdigit:
 14628                           	opt stack 23
 14629                           
 14630                           ;incstack = 0
 14631                           ;isdigit@c stored from wreg
 14632  003B00  6E16               	movwf	isdigit@c,c
 14633  003B02  0E00               	movlw	0
 14634  003B04  6E15               	movwf	_isdigit$2314,c
 14635  003B06  0E3A               	movlw	58
 14636  003B08  6016               	cpfslt	isdigit@c,c
 14637  003B0A  D005               	goto	l1444
 14638  003B0C  0E2F               	movlw	47
 14639  003B0E  6416               	cpfsgt	isdigit@c,c
 14640  003B10  D002               	goto	l1444
 14641  003B12  0E01               	movlw	1
 14642  003B14  6E15               	movwf	_isdigit$2314,c
 14643  003B16                     l1444:
 14644  003B16  C015  F014         	movff	_isdigit$2314,??_isdigit
 14645  003B1A  3014               	rrcf	??_isdigit,w,c
 14646  003B1C  0012               	return	
 14647  003B1E                     __end_of_isdigit:
 14648                           	opt stack 0
 14649                           tblptru	equ	0xFF8
 14650                           tblptrh	equ	0xFF7
 14651                           tblptrl	equ	0xFF6
 14652                           tablat	equ	0xFF5
 14653                           prodh	equ	0xFF4
 14654                           prodl	equ	0xFF3
 14655                           intcon	equ	0xFF2
 14656                           indf0	equ	0xFEF
 14657                           postinc0	equ	0xFEE
 14658                           fsr0h	equ	0xFEA
 14659                           fsr0l	equ	0xFE9
 14660                           wreg	equ	0xFE8
 14661                           indf1	equ	0xFE7
 14662                           postinc1	equ	0xFE6
 14663                           postdec1	equ	0xFE5
 14664                           fsr1h	equ	0xFE2
 14665                           fsr1l	equ	0xFE1
 14666                           indf2	equ	0xFDF
 14667                           postinc2	equ	0xFDE
 14668                           postdec2	equ	0xFDD
 14669                           fsr2h	equ	0xFDA
 14670                           fsr2l	equ	0xFD9
 14671                           status	equ	0xFD8
 14672                           
 14673 ;; *************** function ___wmul *****************
 14674 ;; Defined at:
 14675 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul16.c"
 14676 ;; Parameters:    Size  Location     Type
 14677 ;;  multiplier      2   27[COMRAM] unsigned int 
 14678 ;;  multiplicand    2   29[COMRAM] unsigned int 
 14679 ;; Auto vars:     Size  Location     Type
 14680 ;;  product         2   31[COMRAM] unsigned int 
 14681 ;; Return value:  Size  Location     Type
 14682 ;;                  2   27[COMRAM] unsigned int 
 14683 ;; Registers used:
 14684 ;;		wreg, status,2, status,0, prodl, prodh
 14685 ;; Tracked objects:
 14686 ;;		On entry : 0/0
 14687 ;;		On exit  : 0/0
 14688 ;;		Unchanged: 0/0
 14689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14690 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14691 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14693 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14694 ;;Total ram usage:        6 bytes
 14695 ;; Hardware stack levels used:    1
 14696 ;; Hardware stack levels required when called:    5
 14697 ;; This function calls:
 14698 ;;		Nothing
 14699 ;; This function is called by:
 14700 ;;		_init_clcd_cusotom_lcd
 14701 ;;		_conflict_check
 14702 ;;		_update_string_data
 14703 ;;		_make_display
 14704 ;;		_atoi
 14705 ;;		_conflict
 14706 ;;		_get_new_uid
 14707 ;; This function uses a non-reentrant model
 14708 ;;
 14709                           
 14710                           	psect	text65
 14711  003A3A                     __ptext65:
 14712                           	opt stack 0
 14713  003A3A                     ___wmul:
 14714                           	opt stack 24
 14715                           
 14716                           ;incstack = 0
 14717  003A3A  501C               	movf	___wmul@multiplier,w,c
 14718  003A3C  021E               	mulwf	___wmul@multiplicand,c
 14719  003A3E  CFF3 F020          	movff	prodl,___wmul@product
 14720  003A42  CFF4 F021          	movff	prodh,___wmul@product+1
 14721  003A46  501C               	movf	___wmul@multiplier,w,c
 14722  003A48  021F               	mulwf	___wmul@multiplicand+1,c
 14723  003A4A  50F3               	movf	prodl,w,c
 14724  003A4C  2621               	addwf	___wmul@product+1,f,c
 14725  003A4E  501D               	movf	___wmul@multiplier+1,w,c
 14726  003A50  021E               	mulwf	___wmul@multiplicand,c
 14727  003A52  50F3               	movf	prodl,w,c
 14728  003A54  2621               	addwf	___wmul@product+1,f,c
 14729  003A56  C020  F01C         	movff	___wmul@product,?___wmul
 14730  003A5A  C021  F01D         	movff	___wmul@product+1,?___wmul+1
 14731  003A5E  0012               	return	
 14732  003A60                     __end_of___wmul:
 14733                           	opt stack 0
 14734                           tblptru	equ	0xFF8
 14735                           tblptrh	equ	0xFF7
 14736                           tblptrl	equ	0xFF6
 14737                           tablat	equ	0xFF5
 14738                           prodh	equ	0xFF4
 14739                           prodl	equ	0xFF3
 14740                           intcon	equ	0xFF2
 14741                           indf0	equ	0xFEF
 14742                           postinc0	equ	0xFEE
 14743                           fsr0h	equ	0xFEA
 14744                           fsr0l	equ	0xFE9
 14745                           wreg	equ	0xFE8
 14746                           indf1	equ	0xFE7
 14747                           postinc1	equ	0xFE6
 14748                           postdec1	equ	0xFE5
 14749                           fsr1h	equ	0xFE2
 14750                           fsr1l	equ	0xFE1
 14751                           indf2	equ	0xFDF
 14752                           postinc2	equ	0xFDE
 14753                           postdec2	equ	0xFDD
 14754                           fsr2h	equ	0xFDA
 14755                           fsr2l	equ	0xFD9
 14756                           status	equ	0xFD8
 14757                           
 14758 ;; *************** function _getch *****************
 14759 ;; Defined at:
 14760 ;;		line 155 in file "mcc_generated_files/eusart1.c"
 14761 ;; Parameters:    Size  Location     Type
 14762 ;;		None
 14763 ;; Auto vars:     Size  Location     Type
 14764 ;;		None
 14765 ;; Return value:  Size  Location     Type
 14766 ;;                  1    wreg      unsigned char 
 14767 ;; Registers used:
 14768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14769 ;; Tracked objects:
 14770 ;;		On entry : 0/0
 14771 ;;		On exit  : 0/0
 14772 ;;		Unchanged: 0/0
 14773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14778 ;;Total ram usage:        0 bytes
 14779 ;; Hardware stack levels used:    1
 14780 ;; Hardware stack levels required when called:    6
 14781 ;; This function calls:
 14782 ;;		_EUSART1_Read
 14783 ;; This function is called by:
 14784 ;;		_cmd_consol_task
 14785 ;; This function uses a non-reentrant model
 14786 ;;
 14787                           
 14788                           	psect	text66
 14789  003C96                     __ptext66:
 14790                           	opt stack 0
 14791  003C96                     _getch:
 14792                           	opt stack 23
 14793                           
 14794                           ;eusart1.c: 157: return EUSART1_Read();
 14795                           
 14796                           ;incstack = 0
 14797  003C96  ECA9  F01C         	call	_EUSART1_Read	;wreg free
 14798  003C9A  0012               	return	
 14799  003C9C                     __end_of_getch:
 14800                           	opt stack 0
 14801                           tblptru	equ	0xFF8
 14802                           tblptrh	equ	0xFF7
 14803                           tblptrl	equ	0xFF6
 14804                           tablat	equ	0xFF5
 14805                           prodh	equ	0xFF4
 14806                           prodl	equ	0xFF3
 14807                           intcon	equ	0xFF2
 14808                           indf0	equ	0xFEF
 14809                           postinc0	equ	0xFEE
 14810                           fsr0h	equ	0xFEA
 14811                           fsr0l	equ	0xFE9
 14812                           wreg	equ	0xFE8
 14813                           indf1	equ	0xFE7
 14814                           postinc1	equ	0xFE6
 14815                           postdec1	equ	0xFE5
 14816                           fsr1h	equ	0xFE2
 14817                           fsr1l	equ	0xFE1
 14818                           indf2	equ	0xFDF
 14819                           postinc2	equ	0xFDE
 14820                           postdec2	equ	0xFDD
 14821                           fsr2h	equ	0xFDA
 14822                           fsr2l	equ	0xFD9
 14823                           status	equ	0xFD8
 14824                           
 14825 ;; *************** function _EUSART1_Read *****************
 14826 ;; Defined at:
 14827 ;;		line 112 in file "mcc_generated_files/eusart1.c"
 14828 ;; Parameters:    Size  Location     Type
 14829 ;;		None
 14830 ;; Auto vars:     Size  Location     Type
 14831 ;;  readValue       1   19[COMRAM] unsigned char 
 14832 ;; Return value:  Size  Location     Type
 14833 ;;                  1    wreg      unsigned char 
 14834 ;; Registers used:
 14835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14836 ;; Tracked objects:
 14837 ;;		On entry : 0/0
 14838 ;;		On exit  : 0/0
 14839 ;;		Unchanged: 0/0
 14840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14844 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14845 ;;Total ram usage:        1 bytes
 14846 ;; Hardware stack levels used:    1
 14847 ;; Hardware stack levels required when called:    5
 14848 ;; This function calls:
 14849 ;;		Nothing
 14850 ;; This function is called by:
 14851 ;;		_getch
 14852 ;; This function uses a non-reentrant model
 14853 ;;
 14854                           
 14855                           	psect	text67
 14856  003952                     __ptext67:
 14857                           	opt stack 0
 14858  003952                     _EUSART1_Read:
 14859                           	opt stack 23
 14860                           
 14861                           ;eusart1.c: 114: uint8_t readValue = 0;
 14862                           
 14863                           ;incstack = 0
 14864  003952  0E00               	movlw	0
 14865  003954  6E14               	movwf	EUSART1_Read@readValue,c
 14866  003956                     
 14867                           ;eusart1.c: 117: {
 14868  003956  503F               	movf	_eusart1RxCount,w,c	;volatile
 14869  003958  B4D8               	btfsc	status,2,c
 14870  00395A  D7FD               	goto	l186
 14871                           
 14872                           ;eusart1.c: 118: }
 14873                           ;eusart1.c: 120: readValue = eusart1RxBuffer[eusart1RxTail++];
 14874  00395C  5040               	movf	_eusart1RxTail,w,c	;volatile
 14875  00395E  0D01               	mullw	1
 14876  003960  0E60               	movlw	low _eusart1RxBuffer
 14877  003962  24F3               	addwf	prodl,w,c
 14878  003964  6ED9               	movwf	fsr2l,c
 14879  003966  0E00               	movlw	high _eusart1RxBuffer
 14880  003968  20F4               	addwfc	prodh,w,c
 14881  00396A  6EDA               	movwf	fsr2h,c
 14882  00396C  50DF               	movf	indf2,w,c
 14883  00396E  6E14               	movwf	EUSART1_Read@readValue,c
 14884  003970  2A40               	incf	_eusart1RxTail,f,c	;volatile
 14885                           
 14886                           ;eusart1.c: 121: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 14887  003972  0E07               	movlw	7
 14888  003974  6440               	cpfsgt	_eusart1RxTail,c	;volatile
 14889  003976  D002               	goto	l188
 14890                           
 14891                           ;eusart1.c: 122: {
 14892                           ;eusart1.c: 123: eusart1RxTail = 0;
 14893  003978  0E00               	movlw	0
 14894  00397A  6E40               	movwf	_eusart1RxTail,c	;volatile
 14895  00397C                     l188:
 14896                           
 14897                           ;eusart1.c: 124: }
 14898                           ;eusart1.c: 125: PIE1bits.RC1IE = 0;
 14899  00397C  9A9D               	bcf	3997,5,c	;volatile
 14900                           
 14901                           ;eusart1.c: 126: eusart1RxCount--;
 14902  00397E  063F               	decf	_eusart1RxCount,f,c	;volatile
 14903                           
 14904                           ;eusart1.c: 127: PIE1bits.RC1IE = 1;
 14905  003980  8A9D               	bsf	3997,5,c	;volatile
 14906                           
 14907                           ;eusart1.c: 129: return readValue;
 14908  003982  5014               	movf	EUSART1_Read@readValue,w,c
 14909  003984  0012               	return	
 14910  003986                     __end_of_EUSART1_Read:
 14911                           	opt stack 0
 14912                           tblptru	equ	0xFF8
 14913                           tblptrh	equ	0xFF7
 14914                           tblptrl	equ	0xFF6
 14915                           tablat	equ	0xFF5
 14916                           prodh	equ	0xFF4
 14917                           prodl	equ	0xFF3
 14918                           intcon	equ	0xFF2
 14919                           indf0	equ	0xFEF
 14920                           postinc0	equ	0xFEE
 14921                           fsr0h	equ	0xFEA
 14922                           fsr0l	equ	0xFE9
 14923                           wreg	equ	0xFE8
 14924                           indf1	equ	0xFE7
 14925                           postinc1	equ	0xFE6
 14926                           postdec1	equ	0xFE5
 14927                           fsr1h	equ	0xFE2
 14928                           fsr1l	equ	0xFE1
 14929                           indf2	equ	0xFDF
 14930                           postinc2	equ	0xFDE
 14931                           postdec2	equ	0xFDD
 14932                           fsr2h	equ	0xFDA
 14933                           fsr2l	equ	0xFD9
 14934                           status	equ	0xFD8
 14935                           
 14936 ;; *************** function _TMR5_StopTimer *****************
 14937 ;; Defined at:
 14938 ;;		line 94 in file "mcc_generated_files/tmr5.c"
 14939 ;; Parameters:    Size  Location     Type
 14940 ;;		None
 14941 ;; Auto vars:     Size  Location     Type
 14942 ;;		None
 14943 ;; Return value:  Size  Location     Type
 14944 ;;                  1    wreg      void 
 14945 ;; Registers used:
 14946 ;;		None
 14947 ;; Tracked objects:
 14948 ;;		On entry : 0/0
 14949 ;;		On exit  : 0/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14956 ;;Total ram usage:        0 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; Hardware stack levels required when called:    5
 14959 ;; This function calls:
 14960 ;;		Nothing
 14961 ;; This function is called by:
 14962 ;;		_main
 14963 ;;		__delay_10uS
 14964 ;; This function uses a non-reentrant model
 14965 ;;
 14966                           
 14967                           	psect	text68
 14968  003C9C                     __ptext68:
 14969                           	opt stack 0
 14970  003C9C                     _TMR5_StopTimer:
 14971                           	opt stack 25
 14972                           
 14973                           ;tmr5.c: 97: T5CONbits.TMR5ON = 0;
 14974                           
 14975                           ;incstack = 0
 14976  003C9C  010F               	movlb	15	; () banked
 14977  003C9E  914E               	bcf	78,0,b	;volatile
 14978                           
 14979                           ; BSR set to: 15
 14980  003CA0  0012               	return		;funcret
 14981  003CA2                     __end_of_TMR5_StopTimer:
 14982                           	opt stack 0
 14983                           tblptru	equ	0xFF8
 14984                           tblptrh	equ	0xFF7
 14985                           tblptrl	equ	0xFF6
 14986                           tablat	equ	0xFF5
 14987                           prodh	equ	0xFF4
 14988                           prodl	equ	0xFF3
 14989                           intcon	equ	0xFF2
 14990                           indf0	equ	0xFEF
 14991                           postinc0	equ	0xFEE
 14992                           fsr0h	equ	0xFEA
 14993                           fsr0l	equ	0xFE9
 14994                           wreg	equ	0xFE8
 14995                           indf1	equ	0xFE7
 14996                           postinc1	equ	0xFE6
 14997                           postdec1	equ	0xFE5
 14998                           fsr1h	equ	0xFE2
 14999                           fsr1l	equ	0xFE1
 15000                           indf2	equ	0xFDF
 15001                           postinc2	equ	0xFDE
 15002                           postdec2	equ	0xFDD
 15003                           fsr2h	equ	0xFDA
 15004                           fsr2l	equ	0xFD9
 15005                           status	equ	0xFD8
 15006                           
 15007 ;; *************** function _TMR0_StopTimer *****************
 15008 ;; Defined at:
 15009 ;;		line 101 in file "mcc_generated_files/tmr0.c"
 15010 ;; Parameters:    Size  Location     Type
 15011 ;;		None
 15012 ;; Auto vars:     Size  Location     Type
 15013 ;;		None
 15014 ;; Return value:  Size  Location     Type
 15015 ;;                  1    wreg      void 
 15016 ;; Registers used:
 15017 ;;		None
 15018 ;; Tracked objects:
 15019 ;;		On entry : 0/0
 15020 ;;		On exit  : 0/0
 15021 ;;		Unchanged: 0/0
 15022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15027 ;;Total ram usage:        0 bytes
 15028 ;; Hardware stack levels used:    1
 15029 ;; Hardware stack levels required when called:    5
 15030 ;; This function calls:
 15031 ;;		Nothing
 15032 ;; This function is called by:
 15033 ;;		_main
 15034 ;; This function uses a non-reentrant model
 15035 ;;
 15036                           
 15037                           	psect	text69
 15038  003CAC                     __ptext69:
 15039                           	opt stack 0
 15040  003CAC                     _TMR0_StopTimer:
 15041                           	opt stack 25
 15042                           
 15043                           ;tmr0.c: 104: T0CONbits.TMR0ON = 0;
 15044                           
 15045                           ; BSR set to: 15
 15046                           ;incstack = 0
 15047  003CAC  9ED5               	bcf	4053,7,c	;volatile
 15048  003CAE  0012               	return		;funcret
 15049  003CB0                     __end_of_TMR0_StopTimer:
 15050                           	opt stack 0
 15051                           tblptru	equ	0xFF8
 15052                           tblptrh	equ	0xFF7
 15053                           tblptrl	equ	0xFF6
 15054                           tablat	equ	0xFF5
 15055                           prodh	equ	0xFF4
 15056                           prodl	equ	0xFF3
 15057                           intcon	equ	0xFF2
 15058                           indf0	equ	0xFEF
 15059                           postinc0	equ	0xFEE
 15060                           fsr0h	equ	0xFEA
 15061                           fsr0l	equ	0xFE9
 15062                           wreg	equ	0xFE8
 15063                           indf1	equ	0xFE7
 15064                           postinc1	equ	0xFE6
 15065                           postdec1	equ	0xFE5
 15066                           fsr1h	equ	0xFE2
 15067                           fsr1l	equ	0xFE1
 15068                           indf2	equ	0xFDF
 15069                           postinc2	equ	0xFDE
 15070                           postdec2	equ	0xFDD
 15071                           fsr2h	equ	0xFDA
 15072                           fsr2l	equ	0xFD9
 15073                           status	equ	0xFD8
 15074                           
 15075 ;; *************** function _SYSTEM_Initialize *****************
 15076 ;; Defined at:
 15077 ;;		line 111 in file "mcc_generated_files/mcc.c"
 15078 ;; Parameters:    Size  Location     Type
 15079 ;;		None
 15080 ;; Auto vars:     Size  Location     Type
 15081 ;;		None
 15082 ;; Return value:  Size  Location     Type
 15083 ;;                  1    wreg      void 
 15084 ;; Registers used:
 15085 ;;		wreg, status,2, status,0, cstack
 15086 ;; Tracked objects:
 15087 ;;		On entry : 0/0
 15088 ;;		On exit  : 0/0
 15089 ;;		Unchanged: 0/0
 15090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15095 ;;Total ram usage:        0 bytes
 15096 ;; Hardware stack levels used:    1
 15097 ;; Hardware stack levels required when called:    7
 15098 ;; This function calls:
 15099 ;;		_EUSART1_Initialize
 15100 ;;		_INTERRUPT_Initialize
 15101 ;;		_OSCILLATOR_Initialize
 15102 ;;		_PIN_MANAGER_Initialize
 15103 ;;		_TMR0_Initialize
 15104 ;;		_TMR1_Initialize
 15105 ;;		_TMR5_Initialize
 15106 ;; This function is called by:
 15107 ;;		_main
 15108 ;; This function uses a non-reentrant model
 15109 ;;
 15110                           
 15111                           	psect	text70
 15112  003B1E                     __ptext70:
 15113                           	opt stack 0
 15114  003B1E                     _SYSTEM_Initialize:
 15115                           	opt stack 23
 15116                           
 15117                           ;mcc.c: 114: INTERRUPT_Initialize();
 15118                           
 15119                           ;incstack = 0
 15120  003B1E  EC5C  F01E         	call	_INTERRUPT_Initialize	;wreg free
 15121                           
 15122                           ;mcc.c: 115: PIN_MANAGER_Initialize();
 15123  003B22  EC16  F01C         	call	_PIN_MANAGER_Initialize	;wreg free
 15124                           
 15125                           ;mcc.c: 116: OSCILLATOR_Initialize();
 15126  003B26  EC1A  F01E         	call	_OSCILLATOR_Initialize	;wreg free
 15127                           
 15128                           ;mcc.c: 117: TMR5_Initialize();
 15129  003B2A  EC41  F01D         	call	_TMR5_Initialize	;wreg free
 15130                           
 15131                           ;mcc.c: 118: TMR1_Initialize();
 15132  003B2E  EC51  F01D         	call	_TMR1_Initialize	;wreg free
 15133                           
 15134                           ;mcc.c: 119: TMR0_Initialize();
 15135  003B32  EC72  F01C         	call	_TMR0_Initialize	;wreg free
 15136                           
 15137                           ;mcc.c: 120: EUSART1_Initialize();
 15138  003B36  EC8E  F01C         	call	_EUSART1_Initialize	;wreg free
 15139  003B3A  0012               	return		;funcret
 15140  003B3C                     __end_of_SYSTEM_Initialize:
 15141                           	opt stack 0
 15142                           tblptru	equ	0xFF8
 15143                           tblptrh	equ	0xFF7
 15144                           tblptrl	equ	0xFF6
 15145                           tablat	equ	0xFF5
 15146                           prodh	equ	0xFF4
 15147                           prodl	equ	0xFF3
 15148                           intcon	equ	0xFF2
 15149                           indf0	equ	0xFEF
 15150                           postinc0	equ	0xFEE
 15151                           fsr0h	equ	0xFEA
 15152                           fsr0l	equ	0xFE9
 15153                           wreg	equ	0xFE8
 15154                           indf1	equ	0xFE7
 15155                           postinc1	equ	0xFE6
 15156                           postdec1	equ	0xFE5
 15157                           fsr1h	equ	0xFE2
 15158                           fsr1l	equ	0xFE1
 15159                           indf2	equ	0xFDF
 15160                           postinc2	equ	0xFDE
 15161                           postdec2	equ	0xFDD
 15162                           fsr2h	equ	0xFDA
 15163                           fsr2l	equ	0xFD9
 15164                           status	equ	0xFD8
 15165                           
 15166 ;; *************** function _TMR5_Initialize *****************
 15167 ;; Defined at:
 15168 ;;		line 62 in file "mcc_generated_files/tmr5.c"
 15169 ;; Parameters:    Size  Location     Type
 15170 ;;		None
 15171 ;; Auto vars:     Size  Location     Type
 15172 ;;		None
 15173 ;; Return value:  Size  Location     Type
 15174 ;;                  1    wreg      void 
 15175 ;; Registers used:
 15176 ;;		wreg, status,2, cstack
 15177 ;; Tracked objects:
 15178 ;;		On entry : 0/0
 15179 ;;		On exit  : 0/0
 15180 ;;		Unchanged: 0/0
 15181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15186 ;;Total ram usage:        0 bytes
 15187 ;; Hardware stack levels used:    1
 15188 ;; Hardware stack levels required when called:    6
 15189 ;; This function calls:
 15190 ;;		_TMR5_StartTimer
 15191 ;; This function is called by:
 15192 ;;		_SYSTEM_Initialize
 15193 ;; This function uses a non-reentrant model
 15194 ;;
 15195                           
 15196                           	psect	text71
 15197  003A82                     __ptext71:
 15198                           	opt stack 0
 15199  003A82                     _TMR5_Initialize:
 15200                           	opt stack 23
 15201                           
 15202                           ;tmr5.c: 67: T5CON = 0x12;
 15203                           
 15204                           ;incstack = 0
 15205  003A82  0E12               	movlw	18
 15206  003A84  010F               	movlb	15	; () banked
 15207  003A86  6F4E               	movwf	78,b	;volatile
 15208                           
 15209                           ;tmr5.c: 70: T5GCON = 0x00;
 15210  003A88  0E00               	movlw	0
 15211  003A8A  6F4D               	movwf	77,b	;volatile
 15212                           
 15213                           ; BSR set to: 15
 15214                           ;tmr5.c: 73: TMR5H = 0xFF;
 15215  003A8C  6950               	setf	80,b	;volatile
 15216                           
 15217                           ;tmr5.c: 76: TMR5L = 0xEC;
 15218  003A8E  0EEC               	movlw	236
 15219  003A90  6F4F               	movwf	79,b	;volatile
 15220                           
 15221                           ; BSR set to: 15
 15222                           ;tmr5.c: 79: timer5ReloadVal=TMR5;
 15223  003A92  CF4F F0FA          	movff	3919,_timer5ReloadVal	;volatile
 15224  003A96  CF50 F0FB          	movff	3920,_timer5ReloadVal+1	;volatile
 15225                           
 15226                           ; BSR set to: 15
 15227                           ;tmr5.c: 82: PIR5bits.TMR5IF = 0;
 15228  003A9A  927E               	bcf	3966,1,c	;volatile
 15229                           
 15230                           ; BSR set to: 15
 15231                           ;tmr5.c: 85: TMR5_StartTimer();
 15232  003A9C  EC51  F01E         	call	_TMR5_StartTimer	;wreg free
 15233  003AA0  0012               	return		;funcret
 15234  003AA2                     __end_of_TMR5_Initialize:
 15235                           	opt stack 0
 15236                           tblptru	equ	0xFF8
 15237                           tblptrh	equ	0xFF7
 15238                           tblptrl	equ	0xFF6
 15239                           tablat	equ	0xFF5
 15240                           prodh	equ	0xFF4
 15241                           prodl	equ	0xFF3
 15242                           intcon	equ	0xFF2
 15243                           indf0	equ	0xFEF
 15244                           postinc0	equ	0xFEE
 15245                           fsr0h	equ	0xFEA
 15246                           fsr0l	equ	0xFE9
 15247                           wreg	equ	0xFE8
 15248                           indf1	equ	0xFE7
 15249                           postinc1	equ	0xFE6
 15250                           postdec1	equ	0xFE5
 15251                           fsr1h	equ	0xFE2
 15252                           fsr1l	equ	0xFE1
 15253                           indf2	equ	0xFDF
 15254                           postinc2	equ	0xFDE
 15255                           postdec2	equ	0xFDD
 15256                           fsr2h	equ	0xFDA
 15257                           fsr2l	equ	0xFD9
 15258                           status	equ	0xFD8
 15259                           
 15260 ;; *************** function _TMR5_StartTimer *****************
 15261 ;; Defined at:
 15262 ;;		line 88 in file "mcc_generated_files/tmr5.c"
 15263 ;; Parameters:    Size  Location     Type
 15264 ;;		None
 15265 ;; Auto vars:     Size  Location     Type
 15266 ;;		None
 15267 ;; Return value:  Size  Location     Type
 15268 ;;                  1    wreg      void 
 15269 ;; Registers used:
 15270 ;;		None
 15271 ;; Tracked objects:
 15272 ;;		On entry : 0/0
 15273 ;;		On exit  : 0/0
 15274 ;;		Unchanged: 0/0
 15275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15280 ;;Total ram usage:        0 bytes
 15281 ;; Hardware stack levels used:    1
 15282 ;; Hardware stack levels required when called:    5
 15283 ;; This function calls:
 15284 ;;		Nothing
 15285 ;; This function is called by:
 15286 ;;		_TMR5_Initialize
 15287 ;;		__delay_10uS
 15288 ;; This function uses a non-reentrant model
 15289 ;;
 15290                           
 15291                           	psect	text72
 15292  003CA2                     __ptext72:
 15293                           	opt stack 0
 15294  003CA2                     _TMR5_StartTimer:
 15295                           	opt stack 23
 15296                           
 15297                           ;tmr5.c: 91: T5CONbits.TMR5ON = 1;
 15298                           
 15299                           ;incstack = 0
 15300  003CA2  010F               	movlb	15	; () banked
 15301  003CA4  814E               	bsf	78,0,b	;volatile
 15302                           
 15303                           ; BSR set to: 15
 15304  003CA6  0012               	return		;funcret
 15305  003CA8                     __end_of_TMR5_StartTimer:
 15306                           	opt stack 0
 15307                           tblptru	equ	0xFF8
 15308                           tblptrh	equ	0xFF7
 15309                           tblptrl	equ	0xFF6
 15310                           tablat	equ	0xFF5
 15311                           prodh	equ	0xFF4
 15312                           prodl	equ	0xFF3
 15313                           intcon	equ	0xFF2
 15314                           indf0	equ	0xFEF
 15315                           postinc0	equ	0xFEE
 15316                           fsr0h	equ	0xFEA
 15317                           fsr0l	equ	0xFE9
 15318                           wreg	equ	0xFE8
 15319                           indf1	equ	0xFE7
 15320                           postinc1	equ	0xFE6
 15321                           postdec1	equ	0xFE5
 15322                           fsr1h	equ	0xFE2
 15323                           fsr1l	equ	0xFE1
 15324                           indf2	equ	0xFDF
 15325                           postinc2	equ	0xFDE
 15326                           postdec2	equ	0xFDD
 15327                           fsr2h	equ	0xFDA
 15328                           fsr2l	equ	0xFD9
 15329                           status	equ	0xFD8
 15330                           
 15331 ;; *************** function _TMR1_Initialize *****************
 15332 ;; Defined at:
 15333 ;;		line 62 in file "mcc_generated_files/tmr1.c"
 15334 ;; Parameters:    Size  Location     Type
 15335 ;;		None
 15336 ;; Auto vars:     Size  Location     Type
 15337 ;;		None
 15338 ;; Return value:  Size  Location     Type
 15339 ;;                  1    wreg      void 
 15340 ;; Registers used:
 15341 ;;		wreg, status,2, cstack
 15342 ;; Tracked objects:
 15343 ;;		On entry : 0/0
 15344 ;;		On exit  : 0/0
 15345 ;;		Unchanged: 0/0
 15346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15351 ;;Total ram usage:        0 bytes
 15352 ;; Hardware stack levels used:    1
 15353 ;; Hardware stack levels required when called:    6
 15354 ;; This function calls:
 15355 ;;		_TMR1_StartTimer
 15356 ;; This function is called by:
 15357 ;;		_SYSTEM_Initialize
 15358 ;; This function uses a non-reentrant model
 15359 ;;
 15360                           
 15361                           	psect	text73
 15362  003AA2                     __ptext73:
 15363                           	opt stack 0
 15364  003AA2                     _TMR1_Initialize:
 15365                           	opt stack 23
 15366                           
 15367                           ;tmr1.c: 67: T1CON = 0x32;
 15368                           
 15369                           ; BSR set to: 15
 15370                           ;incstack = 0
 15371  003AA2  0E32               	movlw	50
 15372  003AA4  6ECD               	movwf	4045,c	;volatile
 15373                           
 15374                           ;tmr1.c: 70: T1GCON = 0x00;
 15375  003AA6  0E00               	movlw	0
 15376  003AA8  6ECC               	movwf	4044,c	;volatile
 15377                           
 15378                           ;tmr1.c: 73: TMR1H = 0xFE;
 15379  003AAA  0EFE               	movlw	254
 15380  003AAC  6ECF               	movwf	4047,c	;volatile
 15381                           
 15382                           ;tmr1.c: 76: TMR1L = 0x0C;
 15383  003AAE  0E0C               	movlw	12
 15384  003AB0  6ECE               	movwf	4046,c	;volatile
 15385                           
 15386                           ;tmr1.c: 79: timer1ReloadVal=TMR1;
 15387  003AB2  CFCE F0F8          	movff	4046,_timer1ReloadVal	;volatile
 15388  003AB6  CFCF F0F9          	movff	4047,_timer1ReloadVal+1	;volatile
 15389                           
 15390                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
 15391  003ABA  909E               	bcf	3998,0,c	;volatile
 15392                           
 15393                           ;tmr1.c: 85: TMR1_StartTimer();
 15394  003ABC  EC58  F01E         	call	_TMR1_StartTimer	;wreg free
 15395  003AC0  0012               	return		;funcret
 15396  003AC2                     __end_of_TMR1_Initialize:
 15397                           	opt stack 0
 15398                           tblptru	equ	0xFF8
 15399                           tblptrh	equ	0xFF7
 15400                           tblptrl	equ	0xFF6
 15401                           tablat	equ	0xFF5
 15402                           prodh	equ	0xFF4
 15403                           prodl	equ	0xFF3
 15404                           intcon	equ	0xFF2
 15405                           indf0	equ	0xFEF
 15406                           postinc0	equ	0xFEE
 15407                           fsr0h	equ	0xFEA
 15408                           fsr0l	equ	0xFE9
 15409                           wreg	equ	0xFE8
 15410                           indf1	equ	0xFE7
 15411                           postinc1	equ	0xFE6
 15412                           postdec1	equ	0xFE5
 15413                           fsr1h	equ	0xFE2
 15414                           fsr1l	equ	0xFE1
 15415                           indf2	equ	0xFDF
 15416                           postinc2	equ	0xFDE
 15417                           postdec2	equ	0xFDD
 15418                           fsr2h	equ	0xFDA
 15419                           fsr2l	equ	0xFD9
 15420                           status	equ	0xFD8
 15421                           
 15422 ;; *************** function _TMR1_StartTimer *****************
 15423 ;; Defined at:
 15424 ;;		line 88 in file "mcc_generated_files/tmr1.c"
 15425 ;; Parameters:    Size  Location     Type
 15426 ;;		None
 15427 ;; Auto vars:     Size  Location     Type
 15428 ;;		None
 15429 ;; Return value:  Size  Location     Type
 15430 ;;                  1    wreg      void 
 15431 ;; Registers used:
 15432 ;;		None
 15433 ;; Tracked objects:
 15434 ;;		On entry : 0/0
 15435 ;;		On exit  : 0/0
 15436 ;;		Unchanged: 0/0
 15437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15442 ;;Total ram usage:        0 bytes
 15443 ;; Hardware stack levels used:    1
 15444 ;; Hardware stack levels required when called:    5
 15445 ;; This function calls:
 15446 ;;		Nothing
 15447 ;; This function is called by:
 15448 ;;		_TMR1_Initialize
 15449 ;;		__delay_MS
 15450 ;; This function uses a non-reentrant model
 15451 ;;
 15452                           
 15453                           	psect	text74
 15454  003CB0                     __ptext74:
 15455                           	opt stack 0
 15456  003CB0                     _TMR1_StartTimer:
 15457                           	opt stack 20
 15458                           
 15459                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
 15460                           
 15461                           ;incstack = 0
 15462  003CB0  80CD               	bsf	4045,0,c	;volatile
 15463  003CB2  0012               	return		;funcret
 15464  003CB4                     __end_of_TMR1_StartTimer:
 15465                           	opt stack 0
 15466                           tblptru	equ	0xFF8
 15467                           tblptrh	equ	0xFF7
 15468                           tblptrl	equ	0xFF6
 15469                           tablat	equ	0xFF5
 15470                           prodh	equ	0xFF4
 15471                           prodl	equ	0xFF3
 15472                           intcon	equ	0xFF2
 15473                           indf0	equ	0xFEF
 15474                           postinc0	equ	0xFEE
 15475                           fsr0h	equ	0xFEA
 15476                           fsr0l	equ	0xFE9
 15477                           wreg	equ	0xFE8
 15478                           indf1	equ	0xFE7
 15479                           postinc1	equ	0xFE6
 15480                           postdec1	equ	0xFE5
 15481                           fsr1h	equ	0xFE2
 15482                           fsr1l	equ	0xFE1
 15483                           indf2	equ	0xFDF
 15484                           postinc2	equ	0xFDE
 15485                           postdec2	equ	0xFDD
 15486                           fsr2h	equ	0xFDA
 15487                           fsr2l	equ	0xFD9
 15488                           status	equ	0xFD8
 15489                           
 15490 ;; *************** function _TMR0_Initialize *****************
 15491 ;; Defined at:
 15492 ;;		line 66 in file "mcc_generated_files/tmr0.c"
 15493 ;; Parameters:    Size  Location     Type
 15494 ;;		None
 15495 ;; Auto vars:     Size  Location     Type
 15496 ;;		None
 15497 ;; Return value:  Size  Location     Type
 15498 ;;                  1    wreg      void 
 15499 ;; Registers used:
 15500 ;;		wreg, status,2, status,0, cstack
 15501 ;; Tracked objects:
 15502 ;;		On entry : 0/0
 15503 ;;		On exit  : 0/0
 15504 ;;		Unchanged: 0/0
 15505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15508 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15509 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15510 ;;Total ram usage:        2 bytes
 15511 ;; Hardware stack levels used:    1
 15512 ;; Hardware stack levels required when called:    6
 15513 ;; This function calls:
 15514 ;;		_TMR0_SetInterruptHandler
 15515 ;;		_TMR0_StartTimer
 15516 ;; This function is called by:
 15517 ;;		_SYSTEM_Initialize
 15518 ;; This function uses a non-reentrant model
 15519 ;;
 15520                           
 15521                           	psect	text75
 15522  0038E4                     __ptext75:
 15523                           	opt stack 0
 15524  0038E4                     _TMR0_Initialize:
 15525                           	opt stack 23
 15526                           
 15527                           ;tmr0.c: 71: T0CON = 0x17;
 15528                           
 15529                           ;incstack = 0
 15530  0038E4  0E17               	movlw	23
 15531  0038E6  6ED5               	movwf	4053,c	;volatile
 15532                           
 15533                           ;tmr0.c: 74: TMR0H = 0xC2;
 15534  0038E8  0EC2               	movlw	194
 15535  0038EA  6ED7               	movwf	4055,c	;volatile
 15536                           
 15537                           ;tmr0.c: 77: TMR0L = 0xF6;
 15538  0038EC  0EF6               	movlw	246
 15539  0038EE  6ED6               	movwf	4054,c	;volatile
 15540                           
 15541                           ;tmr0.c: 80: timer0ReloadVal = (TMR0H << 8) | TMR0L;
 15542  0038F0  50D6               	movf	4054,w,c	;volatile
 15543  0038F2  CFD7 F016          	movff	4055,??_TMR0_Initialize	;volatile
 15544  0038F6  6A17               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 15545  0038F8  C016  F017         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 15546  0038FC  6A16               	clrf	??_TMR0_Initialize,c
 15547  0038FE  1016               	iorwf	??_TMR0_Initialize,w,c
 15548  003900  6E49               	movwf	_timer0ReloadVal,c	;volatile
 15549  003902  5017               	movf	??_TMR0_Initialize+1,w,c
 15550  003904  6E4A               	movwf	_timer0ReloadVal+1,c	;volatile
 15551                           
 15552                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
 15553  003906  94F2               	bcf	intcon,2,c	;volatile
 15554                           
 15555                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
 15556  003908  8AF2               	bsf	intcon,5,c	;volatile
 15557                           
 15558                           ;tmr0.c: 89: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 15559  00390A  0EBC               	movlw	low _TMR0_DefaultInterruptHandler
 15560  00390C  6E14               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
 15561  00390E  0E3C               	movlw	high _TMR0_DefaultInterruptHandler
 15562  003910  6E15               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
 15563  003912  EC42  F01E         	call	_TMR0_SetInterruptHandler	;wreg free
 15564                           
 15565                           ;tmr0.c: 92: TMR0_StartTimer();
 15566  003916  EC5A  F01E         	call	_TMR0_StartTimer	;wreg free
 15567  00391A  0012               	return		;funcret
 15568  00391C                     __end_of_TMR0_Initialize:
 15569                           	opt stack 0
 15570                           tblptru	equ	0xFF8
 15571                           tblptrh	equ	0xFF7
 15572                           tblptrl	equ	0xFF6
 15573                           tablat	equ	0xFF5
 15574                           prodh	equ	0xFF4
 15575                           prodl	equ	0xFF3
 15576                           intcon	equ	0xFF2
 15577                           indf0	equ	0xFEF
 15578                           postinc0	equ	0xFEE
 15579                           fsr0h	equ	0xFEA
 15580                           fsr0l	equ	0xFE9
 15581                           wreg	equ	0xFE8
 15582                           indf1	equ	0xFE7
 15583                           postinc1	equ	0xFE6
 15584                           postdec1	equ	0xFE5
 15585                           fsr1h	equ	0xFE2
 15586                           fsr1l	equ	0xFE1
 15587                           indf2	equ	0xFDF
 15588                           postinc2	equ	0xFDE
 15589                           postdec2	equ	0xFDD
 15590                           fsr2h	equ	0xFDA
 15591                           fsr2l	equ	0xFD9
 15592                           status	equ	0xFD8
 15593                           
 15594 ;; *************** function _TMR0_StartTimer *****************
 15595 ;; Defined at:
 15596 ;;		line 95 in file "mcc_generated_files/tmr0.c"
 15597 ;; Parameters:    Size  Location     Type
 15598 ;;		None
 15599 ;; Auto vars:     Size  Location     Type
 15600 ;;		None
 15601 ;; Return value:  Size  Location     Type
 15602 ;;                  1    wreg      void 
 15603 ;; Registers used:
 15604 ;;		None
 15605 ;; Tracked objects:
 15606 ;;		On entry : 0/0
 15607 ;;		On exit  : 0/0
 15608 ;;		Unchanged: 0/0
 15609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15614 ;;Total ram usage:        0 bytes
 15615 ;; Hardware stack levels used:    1
 15616 ;; Hardware stack levels required when called:    5
 15617 ;; This function calls:
 15618 ;;		Nothing
 15619 ;; This function is called by:
 15620 ;;		_TMR0_Initialize
 15621 ;;		_main
 15622 ;; This function uses a non-reentrant model
 15623 ;;
 15624                           
 15625                           	psect	text76
 15626  003CB4                     __ptext76:
 15627                           	opt stack 0
 15628  003CB4                     _TMR0_StartTimer:
 15629                           	opt stack 25
 15630                           
 15631                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
 15632                           
 15633                           ;incstack = 0
 15634  003CB4  8ED5               	bsf	4053,7,c	;volatile
 15635  003CB6  0012               	return		;funcret
 15636  003CB8                     __end_of_TMR0_StartTimer:
 15637                           	opt stack 0
 15638                           tblptru	equ	0xFF8
 15639                           tblptrh	equ	0xFF7
 15640                           tblptrl	equ	0xFF6
 15641                           tablat	equ	0xFF5
 15642                           prodh	equ	0xFF4
 15643                           prodl	equ	0xFF3
 15644                           intcon	equ	0xFF2
 15645                           indf0	equ	0xFEF
 15646                           postinc0	equ	0xFEE
 15647                           fsr0h	equ	0xFEA
 15648                           fsr0l	equ	0xFE9
 15649                           wreg	equ	0xFE8
 15650                           indf1	equ	0xFE7
 15651                           postinc1	equ	0xFE6
 15652                           postdec1	equ	0xFE5
 15653                           fsr1h	equ	0xFE2
 15654                           fsr1l	equ	0xFE1
 15655                           indf2	equ	0xFDF
 15656                           postinc2	equ	0xFDE
 15657                           postdec2	equ	0xFDD
 15658                           fsr2h	equ	0xFDA
 15659                           fsr2l	equ	0xFD9
 15660                           status	equ	0xFD8
 15661                           
 15662 ;; *************** function _TMR0_SetInterruptHandler *****************
 15663 ;; Defined at:
 15664 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 15665 ;; Parameters:    Size  Location     Type
 15666 ;;  InterruptHan    2   19[COMRAM] PTR void 
 15667 ;;		 -> make_array(1), TMR0_DefaultInterruptHandler(1), 
 15668 ;; Auto vars:     Size  Location     Type
 15669 ;;		None
 15670 ;; Return value:  Size  Location     Type
 15671 ;;                  1    wreg      void 
 15672 ;; Registers used:
 15673 ;;		wreg, status,2, status,0
 15674 ;; Tracked objects:
 15675 ;;		On entry : 0/0
 15676 ;;		On exit  : 0/0
 15677 ;;		Unchanged: 0/0
 15678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15679 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15682 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15683 ;;Total ram usage:        2 bytes
 15684 ;; Hardware stack levels used:    1
 15685 ;; Hardware stack levels required when called:    5
 15686 ;; This function calls:
 15687 ;;		Nothing
 15688 ;; This function is called by:
 15689 ;;		_TMR0_Initialize
 15690 ;;		_main
 15691 ;; This function uses a non-reentrant model
 15692 ;;
 15693                           
 15694                           	psect	text77
 15695  003C84                     __ptext77:
 15696                           	opt stack 0
 15697  003C84                     _TMR0_SetInterruptHandler:
 15698                           	opt stack 25
 15699                           
 15700                           ;tmr0.c: 163: TMR0_InterruptHandler = InterruptHandler;
 15701                           
 15702                           ;incstack = 0
 15703  003C84  C014  F0F6         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
 15704  003C88  C015  F0F7         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
 15705  003C8C  0012               	return		;funcret
 15706  003C8E                     __end_of_TMR0_SetInterruptHandler:
 15707                           	opt stack 0
 15708                           tblptru	equ	0xFF8
 15709                           tblptrh	equ	0xFF7
 15710                           tblptrl	equ	0xFF6
 15711                           tablat	equ	0xFF5
 15712                           prodh	equ	0xFF4
 15713                           prodl	equ	0xFF3
 15714                           intcon	equ	0xFF2
 15715                           indf0	equ	0xFEF
 15716                           postinc0	equ	0xFEE
 15717                           fsr0h	equ	0xFEA
 15718                           fsr0l	equ	0xFE9
 15719                           wreg	equ	0xFE8
 15720                           indf1	equ	0xFE7
 15721                           postinc1	equ	0xFE6
 15722                           postdec1	equ	0xFE5
 15723                           fsr1h	equ	0xFE2
 15724                           fsr1l	equ	0xFE1
 15725                           indf2	equ	0xFDF
 15726                           postinc2	equ	0xFDE
 15727                           postdec2	equ	0xFDD
 15728                           fsr2h	equ	0xFDA
 15729                           fsr2l	equ	0xFD9
 15730                           status	equ	0xFD8
 15731                           
 15732 ;; *************** function _PIN_MANAGER_Initialize *****************
 15733 ;; Defined at:
 15734 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 15735 ;; Parameters:    Size  Location     Type
 15736 ;;		None
 15737 ;; Auto vars:     Size  Location     Type
 15738 ;;		None
 15739 ;; Return value:  Size  Location     Type
 15740 ;;                  1    wreg      void 
 15741 ;; Registers used:
 15742 ;;		wreg, status,2
 15743 ;; Tracked objects:
 15744 ;;		On entry : 0/0
 15745 ;;		On exit  : 0/0
 15746 ;;		Unchanged: 0/0
 15747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15752 ;;Total ram usage:        0 bytes
 15753 ;; Hardware stack levels used:    1
 15754 ;; Hardware stack levels required when called:    5
 15755 ;; This function calls:
 15756 ;;		Nothing
 15757 ;; This function is called by:
 15758 ;;		_SYSTEM_Initialize
 15759 ;; This function uses a non-reentrant model
 15760 ;;
 15761                           
 15762                           	psect	text78
 15763  00382C                     __ptext78:
 15764                           	opt stack 0
 15765  00382C                     _PIN_MANAGER_Initialize:
 15766                           	opt stack 24
 15767                           
 15768                           ;pin_manager.c: 56: LATE = 0x00;
 15769                           
 15770                           ;incstack = 0
 15771  00382C  0E00               	movlw	0
 15772  00382E  6E8D               	movwf	3981,c	;volatile
 15773                           
 15774                           ;pin_manager.c: 57: LATD = 0x00;
 15775  003830  0E00               	movlw	0
 15776  003832  6E8C               	movwf	3980,c	;volatile
 15777                           
 15778                           ;pin_manager.c: 58: LATA = 0x00;
 15779  003834  0E00               	movlw	0
 15780  003836  6E89               	movwf	3977,c	;volatile
 15781                           
 15782                           ;pin_manager.c: 59: LATB = 0x00;
 15783  003838  0E00               	movlw	0
 15784  00383A  6E8A               	movwf	3978,c	;volatile
 15785                           
 15786                           ;pin_manager.c: 60: LATC = 0x00;
 15787  00383C  0E00               	movlw	0
 15788  00383E  6E8B               	movwf	3979,c	;volatile
 15789                           
 15790                           ;pin_manager.c: 65: TRISE = 0x03;
 15791  003840  0E03               	movlw	3
 15792  003842  6E96               	movwf	3990,c	;volatile
 15793                           
 15794                           ;pin_manager.c: 66: TRISA = 0xF8;
 15795  003844  0EF8               	movlw	248
 15796  003846  6E92               	movwf	3986,c	;volatile
 15797                           
 15798                           ;pin_manager.c: 67: TRISB = 0xFF;
 15799  003848  6893               	setf	3987,c	;volatile
 15800                           
 15801                           ;pin_manager.c: 68: TRISC = 0xBF;
 15802  00384A  0EBF               	movlw	191
 15803  00384C  6E94               	movwf	3988,c	;volatile
 15804                           
 15805                           ;pin_manager.c: 69: TRISD = 0x00;
 15806  00384E  0E00               	movlw	0
 15807  003850  6E95               	movwf	3989,c	;volatile
 15808                           
 15809                           ;pin_manager.c: 74: ANSELC = 0x3C;
 15810  003852  0E3C               	movlw	60
 15811  003854  010F               	movlb	15	; () banked
 15812  003856  6F3A               	movwf	58,b	;volatile
 15813                           
 15814                           ;pin_manager.c: 75: ANSELB = 0x3F;
 15815  003858  0E3F               	movlw	63
 15816  00385A  6F39               	movwf	57,b	;volatile
 15817                           
 15818                           ;pin_manager.c: 76: ANSELD = 0x00;
 15819  00385C  0E00               	movlw	0
 15820  00385E  6F3B               	movwf	59,b	;volatile
 15821                           
 15822                           ;pin_manager.c: 77: ANSELE = 0x03;
 15823  003860  0E03               	movlw	3
 15824  003862  6F3C               	movwf	60,b	;volatile
 15825                           
 15826                           ;pin_manager.c: 78: ANSELA = 0x28;
 15827  003864  0E28               	movlw	40
 15828  003866  6F38               	movwf	56,b	;volatile
 15829                           
 15830                           ; BSR set to: 15
 15831                           ;pin_manager.c: 83: WPUB = 0xFF;
 15832  003868  6861               	setf	3937,c	;volatile
 15833                           
 15834                           ; BSR set to: 15
 15835                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
 15836  00386A  9EF1               	bcf	intcon2,7,c	;volatile
 15837                           
 15838                           ; BSR set to: 15
 15839  00386C  0012               	return		;funcret
 15840  00386E                     __end_of_PIN_MANAGER_Initialize:
 15841                           	opt stack 0
 15842                           tblptru	equ	0xFF8
 15843                           tblptrh	equ	0xFF7
 15844                           tblptrl	equ	0xFF6
 15845                           tablat	equ	0xFF5
 15846                           prodh	equ	0xFF4
 15847                           prodl	equ	0xFF3
 15848                           intcon	equ	0xFF2
 15849                           intcon2	equ	0xFF1
 15850                           indf0	equ	0xFEF
 15851                           postinc0	equ	0xFEE
 15852                           fsr0h	equ	0xFEA
 15853                           fsr0l	equ	0xFE9
 15854                           wreg	equ	0xFE8
 15855                           indf1	equ	0xFE7
 15856                           postinc1	equ	0xFE6
 15857                           postdec1	equ	0xFE5
 15858                           fsr1h	equ	0xFE2
 15859                           fsr1l	equ	0xFE1
 15860                           indf2	equ	0xFDF
 15861                           postinc2	equ	0xFDE
 15862                           postdec2	equ	0xFDD
 15863                           fsr2h	equ	0xFDA
 15864                           fsr2l	equ	0xFD9
 15865                           status	equ	0xFD8
 15866                           
 15867 ;; *************** function _OSCILLATOR_Initialize *****************
 15868 ;; Defined at:
 15869 ;;		line 123 in file "mcc_generated_files/mcc.c"
 15870 ;; Parameters:    Size  Location     Type
 15871 ;;		None
 15872 ;; Auto vars:     Size  Location     Type
 15873 ;;		None
 15874 ;; Return value:  Size  Location     Type
 15875 ;;                  1    wreg      void 
 15876 ;; Registers used:
 15877 ;;		wreg, status,2
 15878 ;; Tracked objects:
 15879 ;;		On entry : 0/0
 15880 ;;		On exit  : 0/0
 15881 ;;		Unchanged: 0/0
 15882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15887 ;;Total ram usage:        0 bytes
 15888 ;; Hardware stack levels used:    1
 15889 ;; Hardware stack levels required when called:    5
 15890 ;; This function calls:
 15891 ;;		Nothing
 15892 ;; This function is called by:
 15893 ;;		_SYSTEM_Initialize
 15894 ;; This function uses a non-reentrant model
 15895 ;;
 15896                           
 15897                           	psect	text79
 15898  003C34                     __ptext79:
 15899                           	opt stack 0
 15900  003C34                     _OSCILLATOR_Initialize:
 15901                           	opt stack 24
 15902                           
 15903                           ;mcc.c: 126: OSCCON = 0x70;
 15904                           
 15905                           ; BSR set to: 15
 15906                           ;incstack = 0
 15907  003C34  0E70               	movlw	112
 15908  003C36  6ED3               	movwf	4051,c	;volatile
 15909                           
 15910                           ;mcc.c: 128: OSCCON2 = 0x04;
 15911  003C38  0E04               	movlw	4
 15912  003C3A  6ED2               	movwf	4050,c	;volatile
 15913                           
 15914                           ;mcc.c: 130: OSCTUNE = 0x80;
 15915  003C3C  0E80               	movlw	128
 15916  003C3E  6E9B               	movwf	3995,c	;volatile
 15917  003C40  0012               	return		;funcret
 15918  003C42                     __end_of_OSCILLATOR_Initialize:
 15919                           	opt stack 0
 15920                           tblptru	equ	0xFF8
 15921                           tblptrh	equ	0xFF7
 15922                           tblptrl	equ	0xFF6
 15923                           tablat	equ	0xFF5
 15924                           prodh	equ	0xFF4
 15925                           prodl	equ	0xFF3
 15926                           intcon	equ	0xFF2
 15927                           intcon2	equ	0xFF1
 15928                           indf0	equ	0xFEF
 15929                           postinc0	equ	0xFEE
 15930                           fsr0h	equ	0xFEA
 15931                           fsr0l	equ	0xFE9
 15932                           wreg	equ	0xFE8
 15933                           indf1	equ	0xFE7
 15934                           postinc1	equ	0xFE6
 15935                           postdec1	equ	0xFE5
 15936                           fsr1h	equ	0xFE2
 15937                           fsr1l	equ	0xFE1
 15938                           indf2	equ	0xFDF
 15939                           postinc2	equ	0xFDE
 15940                           postdec2	equ	0xFDD
 15941                           fsr2h	equ	0xFDA
 15942                           fsr2l	equ	0xFD9
 15943                           status	equ	0xFD8
 15944                           
 15945 ;; *************** function _INTERRUPT_Initialize *****************
 15946 ;; Defined at:
 15947 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 15948 ;; Parameters:    Size  Location     Type
 15949 ;;		None
 15950 ;; Auto vars:     Size  Location     Type
 15951 ;;		None
 15952 ;; Return value:  Size  Location     Type
 15953 ;;                  1    wreg      void 
 15954 ;; Registers used:
 15955 ;;		None
 15956 ;; Tracked objects:
 15957 ;;		On entry : 0/0
 15958 ;;		On exit  : 0/0
 15959 ;;		Unchanged: 0/0
 15960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15965 ;;Total ram usage:        0 bytes
 15966 ;; Hardware stack levels used:    1
 15967 ;; Hardware stack levels required when called:    5
 15968 ;; This function calls:
 15969 ;;		Nothing
 15970 ;; This function is called by:
 15971 ;;		_SYSTEM_Initialize
 15972 ;; This function uses a non-reentrant model
 15973 ;;
 15974                           
 15975                           	psect	text80
 15976  003CB8                     __ptext80:
 15977                           	opt stack 0
 15978  003CB8                     _INTERRUPT_Initialize:
 15979                           	opt stack 24
 15980                           
 15981                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
 15982                           
 15983                           ;incstack = 0
 15984  003CB8  9ED0               	bcf	4048,7,c	;volatile
 15985  003CBA  0012               	return		;funcret
 15986  003CBC                     __end_of_INTERRUPT_Initialize:
 15987                           	opt stack 0
 15988                           tblptru	equ	0xFF8
 15989                           tblptrh	equ	0xFF7
 15990                           tblptrl	equ	0xFF6
 15991                           tablat	equ	0xFF5
 15992                           prodh	equ	0xFF4
 15993                           prodl	equ	0xFF3
 15994                           intcon	equ	0xFF2
 15995                           intcon2	equ	0xFF1
 15996                           indf0	equ	0xFEF
 15997                           postinc0	equ	0xFEE
 15998                           fsr0h	equ	0xFEA
 15999                           fsr0l	equ	0xFE9
 16000                           wreg	equ	0xFE8
 16001                           indf1	equ	0xFE7
 16002                           postinc1	equ	0xFE6
 16003                           postdec1	equ	0xFE5
 16004                           fsr1h	equ	0xFE2
 16005                           fsr1l	equ	0xFE1
 16006                           indf2	equ	0xFDF
 16007                           postinc2	equ	0xFDE
 16008                           postdec2	equ	0xFDD
 16009                           fsr2h	equ	0xFDA
 16010                           fsr2l	equ	0xFD9
 16011                           status	equ	0xFD8
 16012                           
 16013 ;; *************** function _EUSART1_Initialize *****************
 16014 ;; Defined at:
 16015 ;;		line 75 in file "mcc_generated_files/eusart1.c"
 16016 ;; Parameters:    Size  Location     Type
 16017 ;;		None
 16018 ;; Auto vars:     Size  Location     Type
 16019 ;;		None
 16020 ;; Return value:  Size  Location     Type
 16021 ;;                  1    wreg      void 
 16022 ;; Registers used:
 16023 ;;		wreg, status,2
 16024 ;; Tracked objects:
 16025 ;;		On entry : 0/0
 16026 ;;		On exit  : 0/0
 16027 ;;		Unchanged: 0/0
 16028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16033 ;;Total ram usage:        0 bytes
 16034 ;; Hardware stack levels used:    1
 16035 ;; Hardware stack levels required when called:    5
 16036 ;; This function calls:
 16037 ;;		Nothing
 16038 ;; This function is called by:
 16039 ;;		_SYSTEM_Initialize
 16040 ;; This function uses a non-reentrant model
 16041 ;;
 16042                           
 16043                           	psect	text81
 16044  00391C                     __ptext81:
 16045                           	opt stack 0
 16046  00391C                     _EUSART1_Initialize:
 16047                           	opt stack 24
 16048                           
 16049                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
 16050                           
 16051                           ;incstack = 0
 16052  00391C  9A9D               	bcf	3997,5,c	;volatile
 16053                           
 16054                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
 16055  00391E  989D               	bcf	3997,4,c	;volatile
 16056                           
 16057                           ;eusart1.c: 84: BAUDCON1 = 0x08;
 16058  003920  0E08               	movlw	8
 16059  003922  6EB8               	movwf	4024,c	;volatile
 16060                           
 16061                           ;eusart1.c: 87: RCSTA1 = 0x90;
 16062  003924  0E90               	movlw	144
 16063  003926  6EAB               	movwf	4011,c	;volatile
 16064                           
 16065                           ;eusart1.c: 90: TXSTA1 = 0x24;
 16066  003928  0E24               	movlw	36
 16067  00392A  6EAC               	movwf	4012,c	;volatile
 16068                           
 16069                           ;eusart1.c: 93: SPBRG1 = 0xA0;
 16070  00392C  0EA0               	movlw	160
 16071  00392E  6EAF               	movwf	4015,c	;volatile
 16072                           
 16073                           ;eusart1.c: 96: SPBRGH1 = 0x01;
 16074  003930  0E01               	movlw	1
 16075  003932  6EB0               	movwf	4016,c	;volatile
 16076                           
 16077                           ;eusart1.c: 100: eusart1TxHead = 0;
 16078  003934  0E00               	movlw	0
 16079  003936  6E43               	movwf	_eusart1TxHead,c	;volatile
 16080                           
 16081                           ;eusart1.c: 101: eusart1TxTail = 0;
 16082  003938  0E00               	movlw	0
 16083  00393A  6E42               	movwf	_eusart1TxTail,c	;volatile
 16084                           
 16085                           ;eusart1.c: 102: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 16086  00393C  0E08               	movlw	8
 16087  00393E  0100               	movlb	0	; () banked
 16088  003940  6FFC               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
 16089                           
 16090                           ;eusart1.c: 104: eusart1RxHead = 0;
 16091  003942  0E00               	movlw	0
 16092  003944  6E41               	movwf	_eusart1RxHead,c	;volatile
 16093                           
 16094                           ;eusart1.c: 105: eusart1RxTail = 0;
 16095  003946  0E00               	movlw	0
 16096  003948  6E40               	movwf	_eusart1RxTail,c	;volatile
 16097                           
 16098                           ;eusart1.c: 106: eusart1RxCount = 0;
 16099  00394A  0E00               	movlw	0
 16100  00394C  6E3F               	movwf	_eusart1RxCount,c	;volatile
 16101                           
 16102                           ; BSR set to: 0
 16103                           ;eusart1.c: 109: PIE1bits.RC1IE = 1;
 16104  00394E  8A9D               	bsf	3997,5,c	;volatile
 16105                           
 16106                           ; BSR set to: 0
 16107  003950  0012               	return		;funcret
 16108  003952                     __end_of_EUSART1_Initialize:
 16109                           	opt stack 0
 16110                           tblptru	equ	0xFF8
 16111                           tblptrh	equ	0xFF7
 16112                           tblptrl	equ	0xFF6
 16113                           tablat	equ	0xFF5
 16114                           prodh	equ	0xFF4
 16115                           prodl	equ	0xFF3
 16116                           intcon	equ	0xFF2
 16117                           intcon2	equ	0xFF1
 16118                           indf0	equ	0xFEF
 16119                           postinc0	equ	0xFEE
 16120                           fsr0h	equ	0xFEA
 16121                           fsr0l	equ	0xFE9
 16122                           wreg	equ	0xFE8
 16123                           indf1	equ	0xFE7
 16124                           postinc1	equ	0xFE6
 16125                           postdec1	equ	0xFE5
 16126                           fsr1h	equ	0xFE2
 16127                           fsr1l	equ	0xFE1
 16128                           indf2	equ	0xFDF
 16129                           postinc2	equ	0xFDE
 16130                           postdec2	equ	0xFDD
 16131                           fsr2h	equ	0xFDA
 16132                           fsr2l	equ	0xFD9
 16133                           status	equ	0xFD8
 16134                           
 16135 ;; *************** function _INTERRUPT_InterruptManager *****************
 16136 ;; Defined at:
 16137 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16138 ;; Parameters:    Size  Location     Type
 16139 ;;		None
 16140 ;; Auto vars:     Size  Location     Type
 16141 ;;		None
 16142 ;; Return value:  Size  Location     Type
 16143 ;;                  1    wreg      void 
 16144 ;; Registers used:
 16145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 16146 ;; Tracked objects:
 16147 ;;		On entry : 0/0
 16148 ;;		On exit  : 0/0
 16149 ;;		Unchanged: 0/0
 16150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16153 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16154 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16155 ;;Total ram usage:       18 bytes
 16156 ;; Hardware stack levels used:    1
 16157 ;; Hardware stack levels required when called:    4
 16158 ;; This function calls:
 16159 ;;		_EUSART1_Receive_ISR
 16160 ;;		_EUSART1_Transmit_ISR
 16161 ;;		_TMR0_ISR
 16162 ;; This function is called by:
 16163 ;;		Interrupt level 2
 16164 ;; This function uses a non-reentrant model
 16165 ;;
 16166                           
 16167                           	psect	intcode
 16168  000008                     __pintcode:
 16169                           	opt stack 0
 16170  000008                     _INTERRUPT_InterruptManager:
 16171                           	opt stack 17
 16172                           
 16173                           ; BSR set to: 0
 16174                           ;incstack = 0
 16175  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16176  00000A  CFFA F002          	movff	pclath,??_INTERRUPT_InterruptManager
 16177  00000E  CFFB F003          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16178  000012  CFE9 F004          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16179  000016  CFEA F005          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16180  00001A  CFE1 F006          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16181  00001E  CFE2 F007          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16182  000022  CFD9 F008          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16183  000026  CFDA F009          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16184  00002A  CFF3 F00A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16185  00002E  CFF4 F00B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16186  000032  CFF6 F00C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16187  000036  CFF7 F00D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16188  00003A  CFF8 F00E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16189  00003E  CFF5 F00F          	movff	tablat,??_INTERRUPT_InterruptManager+13
 16190  000042  C04C  F010         	movff	btemp,??_INTERRUPT_InterruptManager+14
 16191  000046  C04D  F011         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16192  00004A  C04E  F012         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16193  00004E  C04F  F013         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16194                           
 16195                           ;interrupt_manager.c: 60: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16196  000052  BAF2               	btfsc	intcon,5,c	;volatile
 16197  000054  A4F2               	btfss	intcon,2,c	;volatile
 16198  000056  D003               	goto	i2l62
 16199                           
 16200                           ;interrupt_manager.c: 61: {
 16201                           ;interrupt_manager.c: 62: TMR0_ISR();
 16202  000058  ECEF  F01D         	call	_TMR0_ISR	;wreg free
 16203                           
 16204                           ;interrupt_manager.c: 63: }
 16205  00005C  D00E               	goto	i2l66
 16206  00005E                     i2l62:
 16207                           
 16208                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 16209  00005E  BCF2               	btfsc	intcon,6,c	;volatile
 16210  000060  A89D               	btfss	3997,4,c	;volatile
 16211  000062  D005               	goto	i2l64
 16212  000064  A89E               	btfss	3998,4,c	;volatile
 16213  000066  D003               	goto	i2l64
 16214                           
 16215                           ;interrupt_manager.c: 65: {
 16216                           ;interrupt_manager.c: 66: EUSART1_Transmit_ISR();
 16217  000068  ECC3  F01C         	call	_EUSART1_Transmit_ISR	;wreg free
 16218                           
 16219                           ;interrupt_manager.c: 67: }
 16220  00006C  D006               	goto	i2l66
 16221  00006E                     i2l64:
 16222                           
 16223                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 16224  00006E  BCF2               	btfsc	intcon,6,c	;volatile
 16225  000070  AA9D               	btfss	3997,5,c	;volatile
 16226  000072  D003               	goto	i2l66
 16227  000074  BA9E               	btfsc	3998,5,c	;volatile
 16228                           
 16229                           ;interrupt_manager.c: 69: {
 16230                           ;interrupt_manager.c: 70: EUSART1_Receive_ISR();
 16231  000076  ECF2  F01C         	call	_EUSART1_Receive_ISR	;wreg free
 16232  00007A                     i2l66:
 16233                           
 16234                           ;interrupt_manager.c: 72: else
 16235                           ;interrupt_manager.c: 73: {
 16236  00007A  C013  F04F         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 16237  00007E  C012  F04E         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 16238  000082  C011  F04D         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 16239  000086  C010  F04C         	movff	??_INTERRUPT_InterruptManager+14,btemp
 16240  00008A  C00F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 16241  00008E  C00E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 16242  000092  C00D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 16243  000096  C00C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 16244  00009A  C00B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16245  00009E  C00A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16246  0000A2  C009  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16247  0000A6  C008  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16248  0000AA  C007  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16249  0000AE  C006  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16250  0000B2  C005  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16251  0000B6  C004  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16252  0000BA  C003  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16253  0000BE  C002  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16254  0000C2  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16255  0000C4  0011               	retfie		f
 16256  0000C6                     __end_of_INTERRUPT_InterruptManager:
 16257                           	opt stack 0
 16258                           pclatu	equ	0xFFB
 16259                           pclath	equ	0xFFA
 16260                           tblptru	equ	0xFF8
 16261                           tblptrh	equ	0xFF7
 16262                           tblptrl	equ	0xFF6
 16263                           tablat	equ	0xFF5
 16264                           prodh	equ	0xFF4
 16265                           prodl	equ	0xFF3
 16266                           intcon	equ	0xFF2
 16267                           intcon2	equ	0xFF1
 16268                           indf0	equ	0xFEF
 16269                           postinc0	equ	0xFEE
 16270                           fsr0h	equ	0xFEA
 16271                           fsr0l	equ	0xFE9
 16272                           wreg	equ	0xFE8
 16273                           indf1	equ	0xFE7
 16274                           postinc1	equ	0xFE6
 16275                           postdec1	equ	0xFE5
 16276                           fsr1h	equ	0xFE2
 16277                           fsr1l	equ	0xFE1
 16278                           indf2	equ	0xFDF
 16279                           postinc2	equ	0xFDE
 16280                           postdec2	equ	0xFDD
 16281                           fsr2h	equ	0xFDA
 16282                           fsr2l	equ	0xFD9
 16283                           status	equ	0xFD8
 16284                           
 16285 ;; *************** function _TMR0_ISR *****************
 16286 ;; Defined at:
 16287 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 16288 ;; Parameters:    Size  Location     Type
 16289 ;;		None
 16290 ;; Auto vars:     Size  Location     Type
 16291 ;;		None
 16292 ;; Return value:  Size  Location     Type
 16293 ;;                  1    wreg      void 
 16294 ;; Registers used:
 16295 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 16296 ;; Tracked objects:
 16297 ;;		On entry : 0/0
 16298 ;;		On exit  : 0/0
 16299 ;;		Unchanged: 0/0
 16300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16305 ;;Total ram usage:        0 bytes
 16306 ;; Hardware stack levels used:    1
 16307 ;; Hardware stack levels required when called:    3
 16308 ;; This function calls:
 16309 ;;		_TMR0_CallBack
 16310 ;; This function is called by:
 16311 ;;		_INTERRUPT_InterruptManager
 16312 ;; This function uses a non-reentrant model
 16313 ;;
 16314                           
 16315                           	psect	text83
 16316  003BDE                     __ptext83:
 16317                           	opt stack 0
 16318  003BDE                     _TMR0_ISR:
 16319                           	opt stack 17
 16320                           
 16321                           ;tmr0.c: 138: INTCONbits.TMR0IF = 0;
 16322                           
 16323                           ;incstack = 0
 16324  003BDE  94F2               	bcf	intcon,2,c	;volatile
 16325                           
 16326                           ;tmr0.c: 142: TMR0H = timer0ReloadVal >> 8;
 16327  003BE0  504A               	movf	_timer0ReloadVal+1,w,c	;volatile
 16328  003BE2  6ED7               	movwf	4055,c	;volatile
 16329                           
 16330                           ;tmr0.c: 143: TMR0L = (uint8_t) timer0ReloadVal;
 16331  003BE4  C049  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 16332                           
 16333                           ;tmr0.c: 147: TMR0_CallBack();
 16334  003BE8  EC61  F01D         	call	_TMR0_CallBack	;wreg free
 16335  003BEC  0012               	return		;funcret
 16336  003BEE                     __end_of_TMR0_ISR:
 16337                           	opt stack 0
 16338                           pclatu	equ	0xFFB
 16339                           pclath	equ	0xFFA
 16340                           tblptru	equ	0xFF8
 16341                           tblptrh	equ	0xFF7
 16342                           tblptrl	equ	0xFF6
 16343                           tablat	equ	0xFF5
 16344                           prodh	equ	0xFF4
 16345                           prodl	equ	0xFF3
 16346                           intcon	equ	0xFF2
 16347                           intcon2	equ	0xFF1
 16348                           indf0	equ	0xFEF
 16349                           postinc0	equ	0xFEE
 16350                           fsr0h	equ	0xFEA
 16351                           fsr0l	equ	0xFE9
 16352                           wreg	equ	0xFE8
 16353                           indf1	equ	0xFE7
 16354                           postinc1	equ	0xFE6
 16355                           postdec1	equ	0xFE5
 16356                           fsr1h	equ	0xFE2
 16357                           fsr1l	equ	0xFE1
 16358                           indf2	equ	0xFDF
 16359                           postinc2	equ	0xFDE
 16360                           postdec2	equ	0xFDD
 16361                           fsr2h	equ	0xFDA
 16362                           fsr2l	equ	0xFD9
 16363                           status	equ	0xFD8
 16364                           
 16365 ;; *************** function _TMR0_CallBack *****************
 16366 ;; Defined at:
 16367 ;;		line 152 in file "mcc_generated_files/tmr0.c"
 16368 ;; Parameters:    Size  Location     Type
 16369 ;;		None
 16370 ;; Auto vars:     Size  Location     Type
 16371 ;;		None
 16372 ;; Return value:  Size  Location     Type
 16373 ;;                  1    wreg      void 
 16374 ;; Registers used:
 16375 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 16376 ;; Tracked objects:
 16377 ;;		On entry : 0/0
 16378 ;;		On exit  : 0/0
 16379 ;;		Unchanged: 0/0
 16380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16385 ;;Total ram usage:        0 bytes
 16386 ;; Hardware stack levels used:    1
 16387 ;; Hardware stack levels required when called:    2
 16388 ;; This function calls:
 16389 ;;		Absolute function
 16390 ;;		_TMR0_DefaultInterruptHandler
 16391 ;;		_make_array
 16392 ;; This function is called by:
 16393 ;;		_TMR0_ISR
 16394 ;; This function uses a non-reentrant model
 16395 ;;
 16396                           
 16397                           	psect	text84
 16398  003AC2                     __ptext84:
 16399                           	opt stack 0
 16400  003AC2                     _TMR0_CallBack:
 16401                           	opt stack 17
 16402                           
 16403                           ;tmr0.c: 156: if(TMR0_InterruptHandler)
 16404                           
 16405                           ;incstack = 0
 16406  003AC2  0100               	movlb	0	; () banked
 16407  003AC4  51F6               	movf	_TMR0_InterruptHandler& (0+255),w,b
 16408  003AC6  11F7               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 16409  003AC8  B4D8               	btfsc	status,2,c
 16410  003ACA  0012               	return	
 16411                           
 16412                           ; BSR set to: 0
 16413                           ;tmr0.c: 157: {
 16414                           ;tmr0.c: 158: TMR0_InterruptHandler();
 16415  003ACC  D801               	call	i2u470_48
 16416  003ACE  0012               	return	
 16417  003AD0                     i2u470_48:
 16418  003AD0  0005               	push	
 16419  003AD2  6EFA               	movwf	pclath,c
 16420  003AD4  51F6               	movf	_TMR0_InterruptHandler& (0+255),w,b
 16421  003AD6  6EFD               	movwf	tosl,c
 16422  003AD8  51F7               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 16423  003ADA  6EFE               	movwf	tosh,c
 16424  003ADC  6AFF               	clrf	tosu,c
 16425  003ADE  50FA               	movf	pclath,w,c
 16426  003AE0  0012               	return		;indir
 16427  003AE2                     __end_of_TMR0_CallBack:
 16428                           	opt stack 0
 16429                           tosu	equ	0xFFF
 16430                           tosh	equ	0xFFE
 16431                           tosl	equ	0xFFD
 16432                           pclatu	equ	0xFFB
 16433                           pclath	equ	0xFFA
 16434                           tblptru	equ	0xFF8
 16435                           tblptrh	equ	0xFF7
 16436                           tblptrl	equ	0xFF6
 16437                           tablat	equ	0xFF5
 16438                           prodh	equ	0xFF4
 16439                           prodl	equ	0xFF3
 16440                           intcon	equ	0xFF2
 16441                           intcon2	equ	0xFF1
 16442                           indf0	equ	0xFEF
 16443                           postinc0	equ	0xFEE
 16444                           fsr0h	equ	0xFEA
 16445                           fsr0l	equ	0xFE9
 16446                           wreg	equ	0xFE8
 16447                           indf1	equ	0xFE7
 16448                           postinc1	equ	0xFE6
 16449                           postdec1	equ	0xFE5
 16450                           fsr1h	equ	0xFE2
 16451                           fsr1l	equ	0xFE1
 16452                           indf2	equ	0xFDF
 16453                           postinc2	equ	0xFDE
 16454                           postdec2	equ	0xFDD
 16455                           fsr2h	equ	0xFDA
 16456                           fsr2l	equ	0xFD9
 16457                           status	equ	0xFD8
 16458                           
 16459 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 16460 ;; Defined at:
 16461 ;;		line 166 in file "mcc_generated_files/tmr0.c"
 16462 ;; Parameters:    Size  Location     Type
 16463 ;;		None
 16464 ;; Auto vars:     Size  Location     Type
 16465 ;;		None
 16466 ;; Return value:  Size  Location     Type
 16467 ;;                  1    wreg      void 
 16468 ;; Registers used:
 16469 ;;		None
 16470 ;; Tracked objects:
 16471 ;;		On entry : 0/0
 16472 ;;		On exit  : 0/0
 16473 ;;		Unchanged: 0/0
 16474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16479 ;;Total ram usage:        0 bytes
 16480 ;; Hardware stack levels used:    1
 16481 ;; This function calls:
 16482 ;;		Nothing
 16483 ;; This function is called by:
 16484 ;;		_TMR0_Initialize
 16485 ;;		_TMR0_CallBack
 16486 ;; This function uses a non-reentrant model
 16487 ;;
 16488                           
 16489                           	psect	text85
 16490  003CBC                     __ptext85:
 16491                           	opt stack 0
 16492  003CBC                     _TMR0_DefaultInterruptHandler:
 16493                           	opt stack 18
 16494                           
 16495                           ;incstack = 0
 16496  003CBC  0012               	return		;funcret
 16497  003CBE                     __end_of_TMR0_DefaultInterruptHandler:
 16498                           	opt stack 0
 16499                           tosu	equ	0xFFF
 16500                           tosh	equ	0xFFE
 16501                           tosl	equ	0xFFD
 16502                           pclatu	equ	0xFFB
 16503                           pclath	equ	0xFFA
 16504                           tblptru	equ	0xFF8
 16505                           tblptrh	equ	0xFF7
 16506                           tblptrl	equ	0xFF6
 16507                           tablat	equ	0xFF5
 16508                           prodh	equ	0xFF4
 16509                           prodl	equ	0xFF3
 16510                           intcon	equ	0xFF2
 16511                           intcon2	equ	0xFF1
 16512                           indf0	equ	0xFEF
 16513                           postinc0	equ	0xFEE
 16514                           fsr0h	equ	0xFEA
 16515                           fsr0l	equ	0xFE9
 16516                           wreg	equ	0xFE8
 16517                           indf1	equ	0xFE7
 16518                           postinc1	equ	0xFE6
 16519                           postdec1	equ	0xFE5
 16520                           fsr1h	equ	0xFE2
 16521                           fsr1l	equ	0xFE1
 16522                           indf2	equ	0xFDF
 16523                           postinc2	equ	0xFDE
 16524                           postdec2	equ	0xFDD
 16525                           fsr2h	equ	0xFDA
 16526                           fsr2l	equ	0xFD9
 16527                           status	equ	0xFD8
 16528                           
 16529 ;; *************** function _make_array *****************
 16530 ;; Defined at:
 16531 ;;		line 59 in file "main.c"
 16532 ;; Parameters:    Size  Location     Type
 16533 ;;		None
 16534 ;; Auto vars:     Size  Location     Type
 16535 ;;		None
 16536 ;; Return value:  Size  Location     Type
 16537 ;;                  1    wreg      void 
 16538 ;; Registers used:
 16539 ;;		wreg, status,2, status,0, cstack
 16540 ;; Tracked objects:
 16541 ;;		On entry : 0/0
 16542 ;;		On exit  : 0/0
 16543 ;;		Unchanged: 0/0
 16544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16549 ;;Total ram usage:        0 bytes
 16550 ;; Hardware stack levels used:    1
 16551 ;; Hardware stack levels required when called:    1
 16552 ;; This function calls:
 16553 ;;		_heart_beat
 16554 ;; This function is called by:
 16555 ;;		_main
 16556 ;;		_TMR0_CallBack
 16557 ;; This function uses a non-reentrant model
 16558 ;;
 16559                           
 16560                           	psect	text86
 16561  003C5A                     __ptext86:
 16562                           	opt stack 0
 16563  003C5A                     _make_array:
 16564                           	opt stack 17
 16565                           
 16566                           ;main.c: 61: static char i=0;
 16567                           ;main.c: 62: heart_beat();
 16568                           
 16569                           ;incstack = 0
 16570  003C5A  EC9E  F01D         	call	_heart_beat	;wreg free
 16571                           
 16572                           ;main.c: 65: display = 1;
 16573  003C5E  0E01               	movlw	1
 16574  003C60  0100               	movlb	0	; () banked
 16575  003C62  6F7D               	movwf	_display& (0+255),b
 16576                           
 16577                           ; BSR set to: 0
 16578  003C64  0012               	return		;funcret
 16579  003C66                     __end_of_make_array:
 16580                           	opt stack 0
 16581                           tosu	equ	0xFFF
 16582                           tosh	equ	0xFFE
 16583                           tosl	equ	0xFFD
 16584                           pclatu	equ	0xFFB
 16585                           pclath	equ	0xFFA
 16586                           tblptru	equ	0xFF8
 16587                           tblptrh	equ	0xFF7
 16588                           tblptrl	equ	0xFF6
 16589                           tablat	equ	0xFF5
 16590                           prodh	equ	0xFF4
 16591                           prodl	equ	0xFF3
 16592                           intcon	equ	0xFF2
 16593                           intcon2	equ	0xFF1
 16594                           indf0	equ	0xFEF
 16595                           postinc0	equ	0xFEE
 16596                           fsr0h	equ	0xFEA
 16597                           fsr0l	equ	0xFE9
 16598                           wreg	equ	0xFE8
 16599                           indf1	equ	0xFE7
 16600                           postinc1	equ	0xFE6
 16601                           postdec1	equ	0xFE5
 16602                           fsr1h	equ	0xFE2
 16603                           fsr1l	equ	0xFE1
 16604                           indf2	equ	0xFDF
 16605                           postinc2	equ	0xFDE
 16606                           postdec2	equ	0xFDD
 16607                           fsr2h	equ	0xFDA
 16608                           fsr2l	equ	0xFD9
 16609                           status	equ	0xFD8
 16610                           
 16611 ;; *************** function _heart_beat *****************
 16612 ;; Defined at:
 16613 ;;		line 54 in file "main.c"
 16614 ;; Parameters:    Size  Location     Type
 16615 ;;		None
 16616 ;; Auto vars:     Size  Location     Type
 16617 ;;		None
 16618 ;; Return value:  Size  Location     Type
 16619 ;;                  1    wreg      void 
 16620 ;; Registers used:
 16621 ;;		wreg, status,2, status,0
 16622 ;; Tracked objects:
 16623 ;;		On entry : 0/0
 16624 ;;		On exit  : 0/0
 16625 ;;		Unchanged: 0/0
 16626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16629 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16630 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16631 ;;Total ram usage:        1 bytes
 16632 ;; Hardware stack levels used:    1
 16633 ;; This function calls:
 16634 ;;		Nothing
 16635 ;; This function is called by:
 16636 ;;		_make_array
 16637 ;; This function uses a non-reentrant model
 16638 ;;
 16639                           
 16640                           	psect	text87
 16641  003B3C                     __ptext87:
 16642                           	opt stack 0
 16643  003B3C                     _heart_beat:
 16644                           	opt stack 17
 16645                           
 16646                           ; BSR set to: 0
 16647                           ;incstack = 0
 16648                           ;main.c: 56: do { LATEbits.LATE2 = ~LATEbits.LATE2; } while(0);
 16649  003B3C  A48D               	btfss	3981,2,c	;volatile
 16650  003B3E  D002               	goto	i2u393_40
 16651  003B40  0E01               	movlw	1
 16652  003B42  D001               	goto	i2u393_46
 16653  003B44                     i2u393_40:
 16654  003B44  0E00               	movlw	0
 16655  003B46                     i2u393_46:
 16656  003B46  0AFF               	xorlw	255
 16657  003B48  6E01               	movwf	??_heart_beat& (0+255),c
 16658  003B4A  4601               	rlncf	??_heart_beat,f,c
 16659  003B4C  4601               	rlncf	??_heart_beat,f,c
 16660  003B4E  508D               	movf	3981,w,c	;volatile
 16661  003B50  1801               	xorwf	??_heart_beat,w,c
 16662  003B52  0BFB               	andlw	-5
 16663  003B54  1801               	xorwf	??_heart_beat,w,c
 16664  003B56  6E8D               	movwf	3981,c	;volatile
 16665  003B58  0012               	return	
 16666  003B5A                     __end_of_heart_beat:
 16667                           	opt stack 0
 16668                           tosu	equ	0xFFF
 16669                           tosh	equ	0xFFE
 16670                           tosl	equ	0xFFD
 16671                           pclatu	equ	0xFFB
 16672                           pclath	equ	0xFFA
 16673                           tblptru	equ	0xFF8
 16674                           tblptrh	equ	0xFF7
 16675                           tblptrl	equ	0xFF6
 16676                           tablat	equ	0xFF5
 16677                           prodh	equ	0xFF4
 16678                           prodl	equ	0xFF3
 16679                           intcon	equ	0xFF2
 16680                           intcon2	equ	0xFF1
 16681                           indf0	equ	0xFEF
 16682                           postinc0	equ	0xFEE
 16683                           fsr0h	equ	0xFEA
 16684                           fsr0l	equ	0xFE9
 16685                           wreg	equ	0xFE8
 16686                           indf1	equ	0xFE7
 16687                           postinc1	equ	0xFE6
 16688                           postdec1	equ	0xFE5
 16689                           fsr1h	equ	0xFE2
 16690                           fsr1l	equ	0xFE1
 16691                           indf2	equ	0xFDF
 16692                           postinc2	equ	0xFDE
 16693                           postdec2	equ	0xFDD
 16694                           fsr2h	equ	0xFDA
 16695                           fsr2l	equ	0xFD9
 16696                           status	equ	0xFD8
 16697                           
 16698 ;; *************** function _EUSART1_Transmit_ISR *****************
 16699 ;; Defined at:
 16700 ;;		line 165 in file "mcc_generated_files/eusart1.c"
 16701 ;; Parameters:    Size  Location     Type
 16702 ;;		None
 16703 ;; Auto vars:     Size  Location     Type
 16704 ;;		None
 16705 ;; Return value:  Size  Location     Type
 16706 ;;                  1    wreg      void 
 16707 ;; Registers used:
 16708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16709 ;; Tracked objects:
 16710 ;;		On entry : 0/0
 16711 ;;		On exit  : 0/0
 16712 ;;		Unchanged: 0/0
 16713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16718 ;;Total ram usage:        0 bytes
 16719 ;; Hardware stack levels used:    1
 16720 ;; This function calls:
 16721 ;;		Nothing
 16722 ;; This function is called by:
 16723 ;;		_INTERRUPT_InterruptManager
 16724 ;; This function uses a non-reentrant model
 16725 ;;
 16726                           
 16727                           	psect	text88
 16728  003986                     __ptext88:
 16729                           	opt stack 0
 16730  003986                     _EUSART1_Transmit_ISR:
 16731                           	opt stack 20
 16732                           
 16733                           ;eusart1.c: 169: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 16734                           
 16735                           ;incstack = 0
 16736  003986  0E08               	movlw	8
 16737  003988  0100               	movlb	0	; () banked
 16738  00398A  61FC               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 16739  00398C  D012               	goto	i2l207
 16740                           
 16741                           ; BSR set to: 0
 16742                           ;eusart1.c: 170: {
 16743                           ;eusart1.c: 171: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 16744  00398E  5042               	movf	_eusart1TxTail,w,c	;volatile
 16745  003990  0D01               	mullw	1
 16746  003992  0E68               	movlw	low _eusart1TxBuffer
 16747  003994  24F3               	addwf	prodl,w,c
 16748  003996  6ED9               	movwf	fsr2l,c
 16749  003998  0E00               	movlw	high _eusart1TxBuffer
 16750  00399A  20F4               	addwfc	prodh,w,c
 16751  00399C  6EDA               	movwf	fsr2h,c
 16752  00399E  50DF               	movf	indf2,w,c
 16753  0039A0  6EAD               	movwf	4013,c	;volatile
 16754                           
 16755                           ; BSR set to: 0
 16756  0039A2  2A42               	incf	_eusart1TxTail,f,c	;volatile
 16757                           
 16758                           ; BSR set to: 0
 16759                           ;eusart1.c: 172: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 16760  0039A4  0E07               	movlw	7
 16761  0039A6  6442               	cpfsgt	_eusart1TxTail,c	;volatile
 16762  0039A8  D002               	goto	i2l208
 16763                           
 16764                           ; BSR set to: 0
 16765                           ;eusart1.c: 173: {
 16766                           ;eusart1.c: 174: eusart1TxTail = 0;
 16767  0039AA  0E00               	movlw	0
 16768  0039AC  6E42               	movwf	_eusart1TxTail,c	;volatile
 16769  0039AE                     i2l208:
 16770                           
 16771                           ; BSR set to: 0
 16772                           ;eusart1.c: 175: }
 16773                           ;eusart1.c: 176: eusart1TxBufferRemaining++;
 16774                           
 16775                           ; BSR set to: 0
 16776  0039AE  2BFC               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 16777                           
 16778                           ;eusart1.c: 177: }
 16779  0039B0  0012               	return	
 16780  0039B2                     i2l207:
 16781                           
 16782                           ; BSR set to: 0
 16783                           ;eusart1.c: 178: else
 16784                           ;eusart1.c: 179: {
 16785                           ;eusart1.c: 180: PIE1bits.TX1IE = 0;
 16786  0039B2  989D               	bcf	3997,4,c	;volatile
 16787  0039B4  0012               	return	
 16788  0039B6                     __end_of_EUSART1_Transmit_ISR:
 16789                           	opt stack 0
 16790                           tosu	equ	0xFFF
 16791                           tosh	equ	0xFFE
 16792                           tosl	equ	0xFFD
 16793                           pclatu	equ	0xFFB
 16794                           pclath	equ	0xFFA
 16795                           tblptru	equ	0xFF8
 16796                           tblptrh	equ	0xFF7
 16797                           tblptrl	equ	0xFF6
 16798                           tablat	equ	0xFF5
 16799                           prodh	equ	0xFF4
 16800                           prodl	equ	0xFF3
 16801                           intcon	equ	0xFF2
 16802                           intcon2	equ	0xFF1
 16803                           indf0	equ	0xFEF
 16804                           postinc0	equ	0xFEE
 16805                           fsr0h	equ	0xFEA
 16806                           fsr0l	equ	0xFE9
 16807                           wreg	equ	0xFE8
 16808                           indf1	equ	0xFE7
 16809                           postinc1	equ	0xFE6
 16810                           postdec1	equ	0xFE5
 16811                           fsr1h	equ	0xFE2
 16812                           fsr1l	equ	0xFE1
 16813                           indf2	equ	0xFDF
 16814                           postinc2	equ	0xFDE
 16815                           postdec2	equ	0xFDD
 16816                           fsr2h	equ	0xFDA
 16817                           fsr2l	equ	0xFD9
 16818                           status	equ	0xFD8
 16819                           
 16820 ;; *************** function _EUSART1_Receive_ISR *****************
 16821 ;; Defined at:
 16822 ;;		line 184 in file "mcc_generated_files/eusart1.c"
 16823 ;; Parameters:    Size  Location     Type
 16824 ;;		None
 16825 ;; Auto vars:     Size  Location     Type
 16826 ;;		None
 16827 ;; Return value:  Size  Location     Type
 16828 ;;                  1    wreg      void 
 16829 ;; Registers used:
 16830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16831 ;; Tracked objects:
 16832 ;;		On entry : 0/0
 16833 ;;		On exit  : 0/0
 16834 ;;		Unchanged: 0/0
 16835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16840 ;;Total ram usage:        0 bytes
 16841 ;; Hardware stack levels used:    1
 16842 ;; This function calls:
 16843 ;;		Nothing
 16844 ;; This function is called by:
 16845 ;;		_INTERRUPT_InterruptManager
 16846 ;; This function uses a non-reentrant model
 16847 ;;
 16848                           
 16849                           	psect	text89
 16850  0039E4                     __ptext89:
 16851                           	opt stack 0
 16852  0039E4                     _EUSART1_Receive_ISR:
 16853                           	opt stack 20
 16854                           
 16855                           ;eusart1.c: 187: if(1 == RCSTA1bits.OERR)
 16856                           
 16857                           ; BSR set to: 0
 16858                           ;incstack = 0
 16859  0039E4  A2AB               	btfss	4011,1,c	;volatile
 16860  0039E6  D002               	goto	i2l213
 16861                           
 16862                           ;eusart1.c: 188: {
 16863                           ;eusart1.c: 191: RCSTA1bits.CREN = 0;
 16864  0039E8  98AB               	bcf	4011,4,c	;volatile
 16865                           
 16866                           ;eusart1.c: 192: RCSTA1bits.CREN = 1;
 16867  0039EA  88AB               	bsf	4011,4,c	;volatile
 16868  0039EC                     i2l213:
 16869                           
 16870                           ;eusart1.c: 193: }
 16871                           ;eusart1.c: 196: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 16872  0039EC  5041               	movf	_eusart1RxHead,w,c	;volatile
 16873  0039EE  0D01               	mullw	1
 16874  0039F0  0E60               	movlw	low _eusart1RxBuffer
 16875  0039F2  24F3               	addwf	prodl,w,c
 16876  0039F4  6ED9               	movwf	fsr2l,c
 16877  0039F6  0E00               	movlw	high _eusart1RxBuffer
 16878  0039F8  20F4               	addwfc	prodh,w,c
 16879  0039FA  6EDA               	movwf	fsr2h,c
 16880  0039FC  CFAE FFDF          	movff	4014,indf2	;volatile
 16881  003A00  2A41               	incf	_eusart1RxHead,f,c	;volatile
 16882                           
 16883                           ;eusart1.c: 197: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 16884  003A02  0E07               	movlw	7
 16885  003A04  6441               	cpfsgt	_eusart1RxHead,c	;volatile
 16886  003A06  D002               	goto	i2l214
 16887                           
 16888                           ;eusart1.c: 198: {
 16889                           ;eusart1.c: 199: eusart1RxHead = 0;
 16890  003A08  0E00               	movlw	0
 16891  003A0A  6E41               	movwf	_eusart1RxHead,c	;volatile
 16892  003A0C                     i2l214:
 16893                           
 16894                           ;eusart1.c: 200: }
 16895                           ;eusart1.c: 201: eusart1RxCount++;
 16896  003A0C  2A3F               	incf	_eusart1RxCount,f,c	;volatile
 16897  003A0E  0012               	return		;funcret
 16898  003A10                     __end_of_EUSART1_Receive_ISR:
 16899                           	opt stack 0
 16900                           tosu	equ	0xFFF
 16901                           tosh	equ	0xFFE
 16902                           tosl	equ	0xFFD
 16903                           pclatu	equ	0xFFB
 16904                           pclath	equ	0xFFA
 16905                           tblptru	equ	0xFF8
 16906                           tblptrh	equ	0xFF7
 16907                           tblptrl	equ	0xFF6
 16908                           tablat	equ	0xFF5
 16909                           prodh	equ	0xFF4
 16910                           prodl	equ	0xFF3
 16911                           intcon	equ	0xFF2
 16912                           intcon2	equ	0xFF1
 16913                           indf0	equ	0xFEF
 16914                           postinc0	equ	0xFEE
 16915                           fsr0h	equ	0xFEA
 16916                           fsr0l	equ	0xFE9
 16917                           wreg	equ	0xFE8
 16918                           indf1	equ	0xFE7
 16919                           postinc1	equ	0xFE6
 16920                           postdec1	equ	0xFE5
 16921                           fsr1h	equ	0xFE2
 16922                           fsr1l	equ	0xFE1
 16923                           indf2	equ	0xFDF
 16924                           postinc2	equ	0xFDE
 16925                           postdec2	equ	0xFDD
 16926                           fsr2h	equ	0xFDA
 16927                           fsr2l	equ	0xFD9
 16928                           status	equ	0xFD8
 16929                           tosu	equ	0xFFF
 16930                           tosh	equ	0xFFE
 16931                           tosl	equ	0xFFD
 16932                           pclatu	equ	0xFFB
 16933                           pclath	equ	0xFFA
 16934                           tblptru	equ	0xFF8
 16935                           tblptrh	equ	0xFF7
 16936                           tblptrl	equ	0xFF6
 16937                           tablat	equ	0xFF5
 16938                           prodh	equ	0xFF4
 16939                           prodl	equ	0xFF3
 16940                           intcon	equ	0xFF2
 16941                           intcon2	equ	0xFF1
 16942                           indf0	equ	0xFEF
 16943                           postinc0	equ	0xFEE
 16944                           fsr0h	equ	0xFEA
 16945                           fsr0l	equ	0xFE9
 16946                           wreg	equ	0xFE8
 16947                           indf1	equ	0xFE7
 16948                           postinc1	equ	0xFE6
 16949                           postdec1	equ	0xFE5
 16950                           fsr1h	equ	0xFE2
 16951                           fsr1l	equ	0xFE1
 16952                           indf2	equ	0xFDF
 16953                           postinc2	equ	0xFDE
 16954                           postdec2	equ	0xFDD
 16955                           fsr2h	equ	0xFDA
 16956                           fsr2l	equ	0xFD9
 16957                           status	equ	0xFD8
 16958                           
 16959                           	psect	text90
 16960  000000                     __ptext90:
 16961                           	opt stack 0
 16962                           tosu	equ	0xFFF
 16963                           tosh	equ	0xFFE
 16964                           tosl	equ	0xFFD
 16965                           pclatu	equ	0xFFB
 16966                           pclath	equ	0xFFA
 16967                           tblptru	equ	0xFF8
 16968                           tblptrh	equ	0xFF7
 16969                           tblptrl	equ	0xFF6
 16970                           tablat	equ	0xFF5
 16971                           prodh	equ	0xFF4
 16972                           prodl	equ	0xFF3
 16973                           intcon	equ	0xFF2
 16974                           intcon2	equ	0xFF1
 16975                           indf0	equ	0xFEF
 16976                           postinc0	equ	0xFEE
 16977                           fsr0h	equ	0xFEA
 16978                           fsr0l	equ	0xFE9
 16979                           wreg	equ	0xFE8
 16980                           indf1	equ	0xFE7
 16981                           postinc1	equ	0xFE6
 16982                           postdec1	equ	0xFE5
 16983                           fsr1h	equ	0xFE2
 16984                           fsr1l	equ	0xFE1
 16985                           indf2	equ	0xFDF
 16986                           postinc2	equ	0xFDE
 16987                           postdec2	equ	0xFDD
 16988                           fsr2h	equ	0xFDA
 16989                           fsr2l	equ	0xFD9
 16990                           status	equ	0xFD8
 16991                           
 16992                           	psect	rparam
 16993  0000                     tosu	equ	0xFFF
 16994                           tosh	equ	0xFFE
 16995                           tosl	equ	0xFFD
 16996                           pclatu	equ	0xFFB
 16997                           pclath	equ	0xFFA
 16998                           tblptru	equ	0xFF8
 16999                           tblptrh	equ	0xFF7
 17000                           tblptrl	equ	0xFF6
 17001                           tablat	equ	0xFF5
 17002                           prodh	equ	0xFF4
 17003                           prodl	equ	0xFF3
 17004                           intcon	equ	0xFF2
 17005                           intcon2	equ	0xFF1
 17006                           indf0	equ	0xFEF
 17007                           postinc0	equ	0xFEE
 17008                           fsr0h	equ	0xFEA
 17009                           fsr0l	equ	0xFE9
 17010                           wreg	equ	0xFE8
 17011                           indf1	equ	0xFE7
 17012                           postinc1	equ	0xFE6
 17013                           postdec1	equ	0xFE5
 17014                           fsr1h	equ	0xFE2
 17015                           fsr1l	equ	0xFE1
 17016                           indf2	equ	0xFDF
 17017                           postinc2	equ	0xFDE
 17018                           postdec2	equ	0xFDD
 17019                           fsr2h	equ	0xFDA
 17020                           fsr2l	equ	0xFD9
 17021                           status	equ	0xFD8
 17022                           
 17023                           	psect	temp
 17024  00004C                     btemp:
 17025                           	opt stack 0
 17026  00004C                     	ds	1
 17027  0000                     int$flags	set	btemp
 17028  0000                     wtemp6	set	btemp+1
 17029                           tosu	equ	0xFFF
 17030                           tosh	equ	0xFFE
 17031                           tosl	equ	0xFFD
 17032                           pclatu	equ	0xFFB
 17033                           pclath	equ	0xFFA
 17034                           tblptru	equ	0xFF8
 17035                           tblptrh	equ	0xFF7
 17036                           tblptrl	equ	0xFF6
 17037                           tablat	equ	0xFF5
 17038                           prodh	equ	0xFF4
 17039                           prodl	equ	0xFF3
 17040                           intcon	equ	0xFF2
 17041                           intcon2	equ	0xFF1
 17042                           indf0	equ	0xFEF
 17043                           postinc0	equ	0xFEE
 17044                           fsr0h	equ	0xFEA
 17045                           fsr0l	equ	0xFE9
 17046                           wreg	equ	0xFE8
 17047                           indf1	equ	0xFE7
 17048                           postinc1	equ	0xFE6
 17049                           postdec1	equ	0xFE5
 17050                           fsr1h	equ	0xFE2
 17051                           fsr1l	equ	0xFE1
 17052                           indf2	equ	0xFDF
 17053                           postinc2	equ	0xFDE
 17054                           postdec2	equ	0xFDD
 17055                           fsr2h	equ	0xFDA
 17056                           fsr2l	equ	0xFD9
 17057                           status	equ	0xFD8


Data Sizes:
    Strings     797
    Constant    10
    Data        18
    BSS         1528
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      75
    BANK0           160     31     157
    BANK1           256      0     160
    BANK2           256      0     150
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), STR_84(CODE[7]), 
		 -> STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), STR_76(CODE[2]), 
		 -> STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), STR_56(CODE[7]), 
		 -> STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), STR_45(CODE[7]), 
		 -> STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_36(CODE[7]), STR_33(CODE[7]), STR_31(CODE[7]), STR_29(CODE[7]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_90(CODE[4]), STR_73(CODE[5]), STR_72(CODE[7]), STR_59(CODE[7]), 
		 -> STR_50(CODE[8]), STR_42(CODE[6]), STR_40(CODE[6]), STR_35(CODE[5]), 
		 -> STR_32(CODE[6]), STR_30(CODE[4]), STR_28(CODE[4]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), STR_31(CODE[7]), 
		 -> STR_29(CODE[7]), NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), STR_84(CODE[7]), 
		 -> STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), STR_76(CODE[2]), 
		 -> STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), STR_56(CODE[7]), 
		 -> STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), STR_45(CODE[7]), 
		 -> STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_36(CODE[7]), STR_33(CODE[7]), STR_31(CODE[7]), STR_29(CODE[7]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), STR_31(CODE[7]), 
		 -> STR_29(CODE[7]), NULL(NULL[0]), 

    cputs@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_138(CODE[12]), STR_137(CODE[12]), STR_92(CODE[5]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), STR_84(CODE[7]), 
		 -> STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), STR_76(CODE[2]), 
		 -> STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), STR_56(CODE[7]), 
		 -> STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), STR_45(CODE[7]), 
		 -> STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_36(CODE[7]), STR_33(CODE[7]), STR_31(CODE[7]), STR_29(CODE[7]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), STR_31(CODE[7]), 
		 -> STR_29(CODE[7]), NULL(NULL[0]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_90(CODE[4]), STR_73(CODE[5]), STR_72(CODE[7]), STR_59(CODE[7]), 
		 -> STR_50(CODE[8]), STR_42(CODE[6]), STR_40(CODE[6]), STR_35(CODE[5]), 
		 -> STR_32(CODE[6]), STR_30(CODE[4]), STR_28(CODE[4]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), STR_31(CODE[7]), 
		 -> STR_29(CODE[7]), NULL(NULL[0]), 

    strncpy@from	PTR const unsigned char  size(2) Largest target is 1100
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1100]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_90(CODE[4]), STR_89(CODE[7]), STR_88(CODE[7]), 
		 -> STR_87(CODE[7]), STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), 
		 -> STR_78(CODE[7]), STR_76(CODE[2]), STR_74(CODE[7]), STR_73(CODE[5]), 
		 -> STR_72(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), STR_59(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_50(CODE[8]), 
		 -> STR_48(CODE[2]), STR_45(CODE[7]), STR_43(CODE[7]), STR_42(CODE[6]), 
		 -> STR_41(CODE[7]), STR_40(CODE[6]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_36(CODE[7]), STR_35(CODE[5]), STR_33(CODE[7]), RAM(DATA[3895]), 
		 -> STR_32(CODE[6]), STR_31(CODE[7]), STR_30(CODE[4]), STR_29(CODE[7]), 
		 -> NULL(NULL[0]), STR_28(CODE[4]), clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1100]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_90(CODE[4]), STR_89(CODE[7]), STR_88(CODE[7]), 
		 -> STR_87(CODE[7]), STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), 
		 -> STR_78(CODE[7]), STR_76(CODE[2]), STR_74(CODE[7]), STR_73(CODE[5]), 
		 -> STR_72(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), STR_59(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_50(CODE[8]), 
		 -> STR_48(CODE[2]), STR_45(CODE[7]), STR_43(CODE[7]), STR_42(CODE[6]), 
		 -> STR_41(CODE[7]), STR_40(CODE[6]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_36(CODE[7]), STR_35(CODE[5]), STR_33(CODE[7]), RAM(DATA[3895]), 
		 -> STR_32(CODE[6]), STR_31(CODE[7]), STR_30(CODE[4]), STR_29(CODE[7]), 
		 -> NULL(NULL[0]), STR_28(CODE[4]), clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1100]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), cmd_data.data(BANK0[40]), 
		 -> STR_48(CODE[2]), STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), 
		 -> STR_39(CODE[7]), STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), 
		 -> RAM(DATA[3895]), STR_31(CODE[7]), STR_29(CODE[7]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[52]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 1100
		 -> CMD(BANK0[15]), cmd_data(BANK0[52]), clcd_display_string_details(BIGRAM[1100]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 1100
		 -> CMD(BANK0[15]), cmd_data(BANK0[52]), clcd_display_string_details(BIGRAM[1100]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_136(CODE[5]), STR_122(CODE[7]), STR_119(CODE[7]), STR_116(CODE[8]), 
		 -> STR_113(CODE[6]), STR_108(CODE[6]), STR_105(CODE[5]), STR_101(CODE[4]), 
		 -> STR_97(CODE[4]), STR_93(CODE[6]), STR_91(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), CMD(BANK0[15]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_138(CODE[12]), STR_137(CODE[12]), STR_92(CODE[5]), 

    memset@p1	PTR void  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), STR_89(CODE[7]), STR_88(CODE[7]), 
		 -> STR_87(CODE[7]), STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), 
		 -> STR_78(CODE[7]), STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), 
		 -> STR_67(CODE[7]), STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), 
		 -> STR_60(CODE[7]), STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), 
		 -> STR_48(CODE[2]), STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), 
		 -> STR_39(CODE[7]), STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), 
		 -> RAM(DATA[3895]), STR_31(CODE[7]), CMD(BANK0[15]), STR_29(CODE[7]), 
		 -> NULL(NULL[0]), cmd_data(BANK0[52]), conflict_arr(BANK1[40]), clcd_display_string_details(BIGRAM[1100]), 
		 -> lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    memset@p	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), STR_89(CODE[7]), STR_88(CODE[7]), 
		 -> STR_87(CODE[7]), STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), 
		 -> STR_78(CODE[7]), STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), 
		 -> STR_67(CODE[7]), STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), 
		 -> STR_60(CODE[7]), STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), 
		 -> STR_48(CODE[2]), STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), 
		 -> STR_39(CODE[7]), STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), 
		 -> RAM(DATA[3895]), STR_31(CODE[7]), CMD(BANK0[15]), STR_29(CODE[7]), 
		 -> NULL(NULL[0]), cmd_data(BANK0[52]), conflict_arr(BANK1[40]), clcd_display_string_details(BIGRAM[1100]), 
		 -> lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 1100
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1100]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 1100
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1100]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), RAM(DATA[3895]), 
		 -> STR_31(CODE[7]), STR_29(CODE[7]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_141(CODE[18]), STR_139(CODE[5]), STR_135(CODE[3]), STR_134(CODE[3]), 
		 -> STR_133(CODE[3]), STR_131(CODE[7]), STR_129(CODE[7]), STR_127(CODE[7]), 
		 -> STR_125(CODE[13]), STR_123(CODE[5]), STR_120(CODE[13]), STR_117(CODE[13]), 
		 -> STR_114(CODE[13]), STR_111(CODE[13]), STR_110(CODE[5]), STR_109(CODE[11]), 
		 -> STR_106(CODE[13]), STR_103(CODE[13]), STR_102(CODE[5]), STR_99(CODE[13]), 
		 -> STR_98(CODE[5]), STR_95(CODE[13]), STR_94(CODE[5]), STR_86(CODE[25]), 
		 -> STR_85(CODE[11]), STR_83(CODE[25]), STR_81(CODE[27]), STR_79(CODE[27]), 
		 -> STR_77(CODE[10]), STR_75(CODE[9]), STR_71(CODE[25]), STR_70(CODE[11]), 
		 -> STR_68(CODE[25]), STR_66(CODE[27]), STR_64(CODE[27]), STR_62(CODE[12]), 
		 -> STR_58(CODE[14]), STR_57(CODE[9]), STR_55(CODE[11]), STR_54(CODE[9]), 
		 -> STR_51(CODE[9]), STR_49(CODE[11]), STR_47(CODE[11]), STR_46(CODE[12]), 
		 -> STR_44(CODE[12]), STR_38(CODE[7]), STR_34(CODE[8]), STR_27(CODE[8]), 
		 -> STR_26(CODE[12]), STR_25(CODE[12]), STR_24(CODE[18]), STR_23(CODE[19]), 
		 -> STR_22(CODE[17]), STR_21(CODE[12]), STR_20(CODE[12]), STR_19(CODE[16]), 
		 -> STR_18(CODE[16]), STR_17(CODE[19]), STR_16(CODE[3]), STR_15(CODE[5]), 
		 -> STR_14(CODE[16]), STR_13(CODE[39]), STR_12(CODE[39]), STR_11(CODE[26]), 
		 -> STR_10(CODE[26]), STR_9(CODE[26]), STR_8(CODE[26]), STR_7(CODE[26]), 
		 -> STR_6(CODE[26]), STR_4(CODE[17]), STR_3(CODE[18]), STR_2(CODE[9]), 
		 -> STR_1(CODE[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 3895
		 -> STR_142(CODE[7]), STR_140(CODE[6]), uart_str(BANK2[150]), STR_132(CODE[15]), 
		 -> STR_130(CODE[12]), STR_128(CODE[12]), STR_126(CODE[7]), STR_124(CODE[6]), 
		 -> STR_121(CODE[7]), STR_118(CODE[8]), STR_115(CODE[6]), STR_112(CODE[6]), 
		 -> STR_107(CODE[5]), STR_104(CODE[4]), STR_100(CODE[4]), STR_96(CODE[6]), 
		 -> STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), STR_84(CODE[7]), 
		 -> STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), STR_76(CODE[2]), 
		 -> STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), STR_56(CODE[7]), 
		 -> STR_53(CODE[7]), STR_52(CODE[7]), cmd_data.data(BANK0[40]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), RAM(DATA[3895]), 
		 -> STR_31(CODE[7]), CMD(BANK0[15]), STR_29(CODE[7]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[52]), STR_5(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), STR_31(CODE[7]), 
		 -> STR_29(CODE[7]), NULL(NULL[0]), 

    parse_cmd_str@temp	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), RAM(DATA[3895]), 
		 -> STR_31(CODE[7]), STR_29(CODE[7]), NULL(NULL[0]), 

    parse_cmd_str@ptr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    parse_cmd_str@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    collect_column@data_column	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    collect_column@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), RAM(DATA[3895]), 
		 -> STR_31(CODE[7]), STR_29(CODE[7]), NULL(NULL[0]), 

    get_over_write_data@over_write_data	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    get_over_write_data@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), RAM(DATA[3895]), 
		 -> STR_31(CODE[7]), STR_29(CODE[7]), NULL(NULL[0]), 

    get_dis_frq@data_frq	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    get_dis_frq@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), RAM(DATA[3895]), 
		 -> STR_31(CODE[7]), STR_29(CODE[7]), NULL(NULL[0]), 

    get_direction@data_direction	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    get_direction@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), RAM(DATA[3895]), 
		 -> STR_31(CODE[7]), STR_29(CODE[7]), NULL(NULL[0]), 

    get_str@data_str	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    get_str@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), RAM(DATA[3895]), 
		 -> STR_31(CODE[7]), STR_29(CODE[7]), NULL(NULL[0]), 

    collect_row@data_row	PTR unsigned char  size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    collect_row@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_89(CODE[7]), STR_88(CODE[7]), STR_87(CODE[7]), 
		 -> STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), STR_78(CODE[7]), 
		 -> STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), STR_67(CODE[7]), 
		 -> STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), STR_60(CODE[7]), 
		 -> STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), STR_48(CODE[2]), 
		 -> STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), RAM(DATA[3895]), 
		 -> STR_31(CODE[7]), STR_29(CODE[7]), NULL(NULL[0]), 

    scroll_off@clcd_display_string_details	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    scroll_right_to_left@clcd_display_string_details	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    scroll_left_to_right@clcd_display_string_details	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    write_str@str	PTR const unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    update_string_data@data	PTR struct . size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 1100
		 -> CMD(BANK0[15]), cmd_data(BANK0[52]), clcd_display_string_details(BIGRAM[1100]), 

    copy_data@data	PTR struct . size(2) Largest target is 52
		 -> cmd_data(BANK0[52]), 

    copy_data@clcd_str_data	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    sp__max_display_support	PTR unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), 

    sp__memset	PTR void  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), STR_89(CODE[7]), STR_88(CODE[7]), 
		 -> STR_87(CODE[7]), STR_84(CODE[7]), STR_82(CODE[7]), STR_80(CODE[7]), 
		 -> STR_78(CODE[7]), STR_76(CODE[2]), STR_74(CODE[7]), STR_69(CODE[7]), 
		 -> STR_67(CODE[7]), STR_65(CODE[7]), STR_63(CODE[7]), STR_61(CODE[7]), 
		 -> STR_60(CODE[7]), STR_56(CODE[7]), STR_53(CODE[7]), STR_52(CODE[7]), 
		 -> STR_48(CODE[2]), STR_45(CODE[7]), STR_43(CODE[7]), STR_41(CODE[7]), 
		 -> STR_39(CODE[7]), STR_37(CODE[7]), STR_36(CODE[7]), STR_33(CODE[7]), 
		 -> RAM(DATA[3895]), STR_31(CODE[7]), CMD(BANK0[15]), STR_29(CODE[7]), 
		 -> NULL(NULL[0]), cmd_data(BANK0[52]), conflict_arr(BANK1[40]), clcd_display_string_details(BIGRAM[1100]), 
		 -> lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> make_array(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> make_array(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_make_display
    _console_init->_memset
    _clear_cmd_data->_memset
    _update_string_data->_conflict_check
    _update_string_data->_make_display
    _make_display->_scroll_off
    _scroll_right_to_left->_memset
    _scroll_off->_strlen
    _scroll_left_to_right->_memset
    _display_text->_write_str
    _set_cursor->_write_lcd_cmd
    _char_enter_mode_left_to_right->_write_lcd_cmd
    _copy_data->_printf
    _conflict_check->_printf
    _puts->_cputs
    _cputs->_putch
    _init_clcd_cusotom_lcd->_printf
    _write_lcd_cmd->_delay
    _clear_display_array->_memset
    _clear_display_structure->_memset
    _clcd_display_string_config->_printf
    _write_str->_write_lcd_data
    _write_lcd_data->_delay
    _parse_cmd_str->_collect_column
    _parse_cmd_str->_collect_row
    _parse_cmd_str->_get_direction
    _parse_cmd_str->_get_dis_frq
    _parse_cmd_str->_get_over_write_data
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _strstr->_strncmp
    _strncmp->_strlen
    _get_str->_memset
    _memset->_strlen
    _get_over_write_data->_printf
    _get_dis_frq->_printf
    _get_direction->_printf
    _collect_row->_printf
    _collect_column->_printf
    _strlen->___wmul
    _printf->___wmul
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    ___wmul->___awdiv
    _getch->_EUSART1_Read
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _make_array->_heart_beat

Critical Paths under _main in BANK0

    _main->_cmd_consol_task
    _cmd_consol_task->_reply_to_host
    _reply_to_host->_update_string_data
    _update_string_data->_make_display
    _make_display->_scroll_right_to_left
    _parse_cmd_str->_collect_column
    _parse_cmd_str->_collect_row
    _parse_cmd_str->_get_direction
    _parse_cmd_str->_get_dis_frq
    _parse_cmd_str->_get_over_write_data

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  373431
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                     _TMR1_StopTimer
                     _TMR5_StopTimer
                          __delay_MS
                    _cmd_consol_task
                       _console_init
                       _make_display
                             _printf
 ---------------------------------------------------------------------------------
 (1) _console_init                                         0     0      0   15696
                     _clear_cmd_data
                             _memset
 ---------------------------------------------------------------------------------
 (2) _clear_cmd_data                                       0     0      0    7848
                             _memset
 ---------------------------------------------------------------------------------
 (1) _cmd_consol_task                                      2     2      0  312392
                                             29 BANK0      2     2      0
                              _getch
                             _memset
                      _parse_cmd_str
                             _printf
                               _puts
                      _reply_to_host
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _reply_to_host                                        4     4      0  175161
                                             25 BANK0      4     4      0
                       _clcd_max_col
                       _clcd_max_row
              _init_clcd_cusotom_lcd
                    _max_display_str
                _max_display_support
                      _max_uid_range
                      _min_uid_range
                             _printf
                               _puts
                             _strcmp
                 _update_string_data
 ---------------------------------------------------------------------------------
 (3) _update_string_data                                  11     9      2   90118
                                             14 BANK0     11     9      2
                             ___wmul
                     _conflict_check
                          _copy_data
                       _make_display
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (1) _make_display                                         5     5      0   36077
                                             54 COMRAM     2     2      0
                                             11 BANK0      3     3      0
                             ___wmul
                       _display_text
               _scroll_left_to_right
                         _scroll_off
               _scroll_right_to_left
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_right_to_left                                14    12      2   10400
                                             47 COMRAM     3     1      2
                                              0 BANK0     11    11      0
                             ___wmul (ARG)
                             _memcpy
                             _memset
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              8     2      6     369
                                             19 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _scroll_off                                          15    13      2    3517
                                             39 COMRAM    15    13      2
                             ___wmul (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_left_to_right                                11     9      2   10031
                                             47 COMRAM     3     1      2
                                              0 BANK0      8     8      0
                             ___wmul (ARG)
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _display_text                                         0     0      0    2268
      _char_enter_mode_left_to_right
                         _set_cursor
                      _write_lcd_cmd
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _set_cursor                                           2     1      1     714
                                             27 COMRAM     2     1      1
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _char_enter_mode_left_to_right                        0     0      0     343
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (4) _copy_data                                           10     6      4   14434
                                             51 COMRAM     4     0      4
                                              0 BANK0      2     2      0
                             _printf
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _conflict_check                                       9     7      2   15985
                                             51 COMRAM     5     3      2
                                              0 BANK0      4     4      0
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    1763
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _puts                                                 2     0      2     642
                                             23 COMRAM     2     0      2
                              _cputs
                              _putch
 ---------------------------------------------------------------------------------
 (4) _cputs                                                2     0      2     248
                                             21 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _min_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_display_support                                  2     0      2       0
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _max_display_str                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_clcd_cusotom_lcd                                2     1      1   74341
                                             51 COMRAM     2     1      1
                            ___awdiv
                             ___wmul
                   _init_CLCD_config
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (4) _init_CLCD_config                                     0     0      0   50424
                          __delay_MS
         _clcd_display_string_config
                             _memset
                         _reset_clcd
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _write_lcd_cmd                                        1     1      0     343
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _reset_clcd                                           0     0      0   23544
                _clear_display_array
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _clear_display_array                                  0     0      0   15696
                             _memset
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _reset_display_structure_count                        0     0      0    7848
            _clear_display_structure
 ---------------------------------------------------------------------------------
 (7) _clear_display_structure                              0     0      0    7848
                             _memset
 ---------------------------------------------------------------------------------
 (5) _clcd_display_string_config                           0     0      0   18034
                             _memcpy
                             _memset
                             _printf
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _write_str                                            3     1      2     868
                                             27 COMRAM     3     1      2
                     _write_lcd_data
 ---------------------------------------------------------------------------------
 (4) _write_lcd_data                                       1     1      0     343
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                7     5      2     321
                                             19 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    1055
                                             19 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (5) __delay_MS                                            5     3      2     655
                                             19 COMRAM     5     3      2
            _TMR1_HasOverflowOccured
                        _TMR1_Reload
                    _TMR1_StartTimer
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     756
                                             19 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _clcd_max_row                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clcd_max_col                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parse_cmd_str                                       18    16      2  118530
                                              6 BANK0     18    16      2
                               _atoi
                     _collect_column
                        _collect_row
                      _get_direction
                        _get_dis_frq
                _get_over_write_data
                            _get_str
                            _isdigit
                             _memset
                             _printf
                             _strcpy
                             _strlen
                             _strstr
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _strtok                                               4     0      4    6030
                                             32 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (4) _strspn                                               7     3      4     787
                                             25 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strcspn                                              7     3      4     787
                                             25 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    5967
                                             48 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     362
                                             39 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) _strchr                                               6     2      4     544
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _get_str                                              4     0      4   13368
                                             47 COMRAM     4     0      4
                             _memset
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    2355
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6    7848
                                             39 COMRAM     8     2      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _get_over_write_data                                 10     6      4   11728
                                             51 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _get_dis_frq                                         10     6      4   11728
                                             51 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _get_direction                                       10     6      4   11759
                                             51 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_row                                         10     6      4   12330
                                             51 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_column                                      10     6      4   12330
                                             51 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2    2830
                                             33 COMRAM     6     4      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _printf                                              24    16      8    8263
                                             33 COMRAM    18    10      8
                            ___awdiv (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                       _clcd_max_col (ARG)
                       _clcd_max_row (ARG)
                    _max_display_str (ARG)
                _max_display_support (ARG)
                      _max_uid_range (ARG)
                      _min_uid_range (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             20 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             26 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    7325
                                             33 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    6712
                                             27 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getch                                                0     0      0      24
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         1     1      0      24
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     174
                                             21 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         18    18      0       0
                                              1 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                         _make_array *
 ---------------------------------------------------------------------------------
 (13) _make_array                                          0     0      0       0
                         _heart_beat
 ---------------------------------------------------------------------------------
 (14) _heart_beat                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_SetInterruptHandler
   _TMR0_StartTimer
   _TMR0_StopTimer
   _TMR1_StopTimer
   _TMR5_StopTimer
   __delay_MS
     _TMR1_HasOverflowOccured
     _TMR1_Reload
     _TMR1_StartTimer
     _TMR1_StopTimer
   _cmd_consol_task
     _getch
       _EUSART1_Read
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _parse_cmd_str
       _atoi
         ___wmul
           ___awdiv (ARG)
         _isdigit
       _collect_column
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _collect_row
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_direction
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_dis_frq
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_over_write_data
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_str
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strcpy
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _isdigit
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
       _strcpy
       _strlen
         ___wmul (ARG)
           ___awdiv (ARG)
       _strstr
         _strchr
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
         _strncmp
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _clcd_max_col (ARG)
       _clcd_max_row (ARG)
       _max_display_str (ARG)
       _max_display_support (ARG)
       _max_uid_range (ARG)
       _min_uid_range (ARG)
       _putch (ARG)
         _EUSART1_Write
     _puts
       _cputs
         _putch
           _EUSART1_Write
       _putch
         _EUSART1_Write
     _reply_to_host
       _clcd_max_col
       _clcd_max_row
       _init_clcd_cusotom_lcd
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _init_CLCD_config
           __delay_MS
             _TMR1_HasOverflowOccured
             _TMR1_Reload
             _TMR1_StartTimer
             _TMR1_StopTimer
           _clcd_display_string_config
             _memcpy
             _memset
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _printf
               ___awdiv (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _clcd_max_col (ARG)
               _clcd_max_row (ARG)
               _max_display_str (ARG)
               _max_display_support (ARG)
               _max_uid_range (ARG)
               _min_uid_range (ARG)
               _putch (ARG)
                 _EUSART1_Write
             _write_str
               _write_lcd_data
                 _delay
           _memset
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _reset_clcd
             _clear_display_array
               _memset
                 _strlen (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
               _reset_display_structure_count
                 _clear_display_structure
                   _memset
                     _strlen (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
             _reset_display_structure_count
               _clear_display_structure
                 _memset
                   _strlen (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
           _write_lcd_cmd
             _delay
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
       _max_display_str
       _max_display_support
       _max_uid_range
       _min_uid_range
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
       _puts
         _cputs
           _putch
             _EUSART1_Write
         _putch
           _EUSART1_Write
       _strcmp
       _update_string_data
         ___wmul
           ___awdiv (ARG)
         _conflict_check
           ___wmul
             ___awdiv (ARG)
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
         _copy_data
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
           _strcpy
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _make_display
           ___wmul
             ___awdiv (ARG)
           _display_text
             _char_enter_mode_left_to_right
               _write_lcd_cmd
                 _delay
             _set_cursor
               _write_lcd_cmd
                 _delay
             _write_lcd_cmd
               _delay
             _write_str
               _write_lcd_data
                 _delay
           _scroll_left_to_right
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
           _scroll_off
             ___wmul (ARG)
               ___awdiv (ARG)
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _scroll_right_to_left
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _strncpy (ARG)
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
     _strcmp
   _console_init
     _clear_cmd_data
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _make_display
     ___wmul
       ___awdiv (ARG)
     _display_text
       _char_enter_mode_left_to_right
         _write_lcd_cmd
           _delay
       _set_cursor
         _write_lcd_cmd
           _delay
       _write_lcd_cmd
         _delay
       _write_str
         _write_lcd_data
           _delay
     _scroll_left_to_right
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _scroll_off
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _scroll_right_to_left
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strncpy (ARG)
     _strlen
       ___wmul (ARG)
         ___awdiv (ARG)
   _printf
     ___awdiv (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
     _clcd_max_col (ARG)
     _clcd_max_row (ARG)
     _max_display_str (ARG)
     _max_display_support (ARG)
     _max_uid_range (ARG)
     _min_uid_range (ARG)
     _putch (ARG)
       _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _make_array *
         _heart_beat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     44C      37       28.2%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A0       7       62.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1F      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4B       1       79.8%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     21E      12        0.0%
DATA                 0      0     66A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Oct 30 05:14:00 2017

                       _eusart1TxBufferRemaining 00FC                            __end_of_parse_cmd_str 0F86  
                                   ___awdiv@sign 0019                            _init_clcd_cusotom_lcd 2D6C  
                            ___wmul@multiplicand 001E                                  _timer0ReloadVal 0049  
                                   __CFG_CP0$OFF 000000                                     __CFG_CP1$OFF 000000  
                                   __CFG_CP2$OFF 000000                                     __CFG_CP3$OFF 000000  
                                    __CFG_LVP$ON 000000                                              l500 1D80  
                                            l501 1DC2                                              l424 3BF8  
                                            l512 3B9E                                              l601 0FA2  
                                            l186 3956                                              l442 3C30  
                                            l610 1240                                              l195 3882  
                                            l419 3C14                                              l451 1986  
                                            l603 0FBC                                              l188 397C  
                                            l196 38A6                                              l620 27F6  
                                            l604 0FD6                                              l197 38A4  
                                            l437 3C22                                              l429 3C06  
                                            l453 1A80                                              l605 0FF0  
                                            l550 38B0                                              l454 1BEE  
                                            l606 1140                                              l630 2266  
                                            l551 38D2                                              l455 1B3A  
                                            l631 22F2                                              l552 38D8  
                                            l456 1BE8                                              l640 321A  
                                            l624 28AC                                              l608 11EC  
                                            l801 0630                                              l633 237E  
                                            l722 296E                                              l723 28F4  
                                            l619 286E                                              l635 2408  
                                            l740 2AD0                                              l812 082E  
                                            l492 1E58                                              l741 2B48  
                                            l821 0B3A                                              l805 08A6  
                                            l813 079E                                              l549 38DA  
                                            l629 240C                                              l493 1DF8  
                                            l901 194C                                              l742 2B4C  
                                            l750 2CA2                                              l830 0B2E  
                                            l814 0826                                              l590 1484  
                                            l494 1CC2                                              l751 2D1A  
                                            l735 33E8                                              l815 082A  
                                            l495 1D52                                              l728 29B2  
                                            l752 2D2A                                              l760 2C48  
                                            l832 0B2A                                              l920 20CE  
                                            l745 2B98                                              l841 0BA6  
                                            l825 0B36                                              l809 08A2  
                                            l817 089E                                              l593 1534  
                                            l585 1304                                              l913 214C  
                                            l834 0B26                                              l594 1582  
                                            l498 1DF2                                              l922 2146  
                                            l914 2068                                              l771 2AAA  
                                            l739 2B52                                              l843 0EEE  
                                            l851 0EE2                                              l587 131E  
                                            l499 1DC8                                              l931 220E  
                                            l915 209A                                              l828 0B32  
                                            l588 1338                                              l924 223C  
                                            l765 2A66                                              l749 2D30  
                                            l757 2C4E                                              l853 0EDE  
                                            l861 0ECE                                              l589 1352  
                                            l933 2224                                              l925 217C  
                                            l766 29EC                                              l758 2BC0  
                                            l782 02B4                                              l934 2236  
                                            l759 2C38                                              l871 0F5A  
                                            l847 0EEA                                              l855 0EDA  
                                            l775 017A                                              l927 21CE  
                                            l792 047E                                              l960 36B6  
                                            l880 173C                                              l849 0EE6  
                                            l857 0ED6                                              l785 03EC  
                                            l890 186C                                              l882 177A  
                                            l874 165A                                              _CMD 00B7  
                                            l859 0ED2                                              l795 0638  
                                            l779 020C                                              l892 189E  
                                            l884 1808                                              l876 16A4  
                                            l885 17D8                                              l958 36C0  
                                            l886 17F2                                              l878 16F0  
                                            l799 0634                                              l975 37D4  
                                            l959 369E                                              l895 1910  
                                            l976 37B8                                              l896 18FA  
                                            l888 183A                                              l978 37C0  
                                            l899 192E                                     __CFG_CPB$OFF 000000  
                                   __CFG_CPD$OFF 000000                                  ?_conflict_check 0034  
                                  ?_display_text 0001                                  _timer1ReloadVal 00F8  
                                            _str 00E9                        collect_column@data_column 0036  
                                            prod 000FF3                                 _LCD_16x2_DISPLAY 003E  
                                            tosl 000FFD                                              wreg 000FE8  
                                   get_dis_frq@i 00CA                                             l1090 254E  
                                           l1082 2526                                             l1083 2456  
                                           l1075 2440                                             l1059 34E4  
                                           l1076 2450                                             l1077 24F0  
                                           l1085 24AA                                             l1270 26C6  
                                           l1094 2596                                             l1086 2480  
                                           l1263 2614                                             l1095 25EA  
                                           l1272 2762                                             l1264 2610  
                                           l1096 259C                                             l1088 24D4  
                                           l1089 24E8                                             l1266 269C  
                                           l1290 318A                                             l1282 3132  
                                           l1523 356E                                             l1291 3198  
                                           l1283 3142                                             l1444 3B16  
                                           l1524 3566                                             l1269 2718  
                                           l1533 3800                                             l1285 3160  
                                           l1534 37F8                                             l1702 36E8  
                                           l1286 3158                                             l1527 358E  
                                           l1703 36E0                                             l1528 3598  
                                           l1537 3818                                             l1553 3750  
                                           l1289 3180                                             l1538 3822  
                                           l1554 3726                                             l1730 30E4  
                                           l1731 3080                                             l1547 3794  
                                           l1715 33F6                                             l1708 350A  
                                           l1732 30BA                                             l1548 3774  
                                           l1716 341E                                             l1709 3506  
                                           l4126 3726                                             l1750 3074  
                                           l1718 3438                                             l1807 35B4  
                                           l1719 3428                                             l1808 35AC  
                                           l1745 2FDE                                             l1746 2FF0  
                                           l4330 3774                                             l4154 36A6  
                                           l1748 302C                                             l1781 3348  
                                           l1749 306C                                             l1774 39CE  
                                           l1694 364C                                             l1775 39B8  
                                           l1695 3644                                             l1796 2F00  
                                           l1788 3604                                             l4372 3428  
                                           l1797 2E4C                                             l1789 35FC  
                                           l7030 2714                                             l1798 2EF8  
                                           l6322 3870                                             l6424 2552  
                                           l7208 0630                                             l7058 0176  
                                           l4776 2E4C                                             l6810 1D52  
                                           l6686 1B34                                             l6696 1BE0  
                                           l6884 33E8                 __size_of_clear_display_structure 001E  
                                           STR_1 FF71                                             STR_2 FF68  
                                           STR_3 FE08                                             STR_4 FE2B  
                                           STR_5 FFE8                                             STR_6 FD3E  
                                           STR_7 FD72                                             STR_8 FD58  
                                           _LATA 000F89                                             _LATB 000F8A  
                                           _LATC 000F8B                                             u3200 3C56  
                                           u3120 36BC                                             _LATD 000F8C  
                                           _LATE 000F8D                                             u4010 2E6E  
                                           u3060 374C                                             u4030 2EAC  
                                           u4040 2EE8                                             u4017 2E64  
                                           u3067 3740                                             u4035 2EA6  
                                           u4037 2E9C                                             u4070 35E8  
                                           u4047 2EDE                                             u3440 3712  
                                           u4090 3638                                             u3710 3338  
                                           u3447 3708                                             u6210 24A2  
                                           u7010 2A1A                                             u3730 3376  
                                           u7100 2636                                             u6140 3572  
                                           u6220 24CC                                             u3717 332E  
                                           u6310 352C                                             u7030 2A52  
                                           u7120 265E                                             u6217 2498  
                                           u7017 2A10                                             u3737 336C  
                                           u6170 3804                                             u7107 262C  
                                           u6227 24C2                                             u7140 2692  
                                           u6317 3522                                             u7037 2A48  
                                           u6270 2584                                             u7127 2654  
                                           u7160 26BE                                             u7080 310E  
                                           u4680 3680                                             u6290 25F2  
                                           u7090 3114                                             u3970 3164  
                                           u7147 2688                                             u7180 26FC  
                                           u7420 056C                                             u7260 022C  
                                           u6540 2888                                             u8300 2080  
                                           i2l62 005E                                             u7190 273A  
                                           u7510 072A                                             u7270 022E  
                                           u7167 26B4                                             u7087 3104  
                                           i2l64 006E                                             i2l66 007A  
                                           u6570 199A                                             u8330 2152  
                        _TMR1_HasOverflowOccured 3C4E                                             u7187 26F2  
                                           u7427 0562                                             u6820 2922  
                                           u6900 2B36                                             u8340 2164  
                                           u7197 2730                                             u7517 0720  
                                           u6840 295A                                             u7560 07D4  
                                           u6930 2CD0                                             u7650 0960  
                                           u6827 2918                                             u6907 2B2C  
                                           u7580 0814                                             u6950 2D08  
                                           u6790 1D9C                                             u6847 2950  
                                           u7567 07CA                                             u6880 2AFE  
                                           u6937 2CC6                                             u7657 0956  
                                           u6970 2BEE                                             u7587 080A  
                                           u6957 2CFE                                             u6990 2C26  
                                           u6887 2AF4                                             u6977 2BE4  
                                           u6997 2C1C                                             _TMR1 000FCE  
                                           _TMR5 000F4F                                             _WPUB 000F61  
                                  _EUSART1_Write 386E                                    ?_make_display 0001  
                                           _atoi 260E                                             _main 34A4  
                                  ?_EUSART1_Read 0001                                  _TMR0_StartTimer 3CB4  
                                           fsr0h 000FEA                                             fsr1h 000FE2  
                                           indf0 000FEF                                             fsr2h 000FDA  
                                           fsr0l 000FE9                                             indf1 000FE7  
                                           indf2 000FDF                                             fsr1l 000FE1  
                                           fsr2l 000FD9                                             btemp 004C  
                                           _puts 3BA8                                    __CFG_BORV$190 000000  
                          ??_get_over_write_data 00C6                                             prodh 000FF4  
                                           prodl 000FF3                                             start 00C6  
                                _timer5ReloadVal 00FA                                    __CFG_IESO$OFF 000000  
                           __end_of_clcd_max_col 3C34                             __end_of_clcd_max_row 3C26  
                                  ?_console_init 0001                                     ___param_bank 000000  
                                   collect_row@i 00C9                          __end_of_TMR0_Initialize 391C  
                 ??_TMR0_DefaultInterruptHandler 0001                   __size_of_OSCILLATOR_Initialize 000E  
                  __end_of_OSCILLATOR_Initialize 3C42                                      make_array@i 007C  
                                          ?_atoi 0022                                            ?_main 0001  
                                __end_of___awdiv 31A2                                   ??_display_text 001F  
                                          STR_20 FED2                                            STR_12 FCE1  
                                          STR_13 FCE1                                            STR_21 FEAE  
                                          STR_30 FFF1                                            STR_14 FE5C  
                                          STR_22 FE1A                                            STR_31 FFA7  
                                          STR_15 FFE3                                            STR_23 FDBE  
                                          STR_16 FE9F                                            STR_40 FFC2  
                                          STR_32 FFBC                                            STR_24 FDF6  
                                          STR_41 FFA7                                            STR_33 FFA7  
                                          STR_25 FEC6                                            STR_17 FDD1  
                                          STR_42 FFCE                                            STR_50 FF8A  
                                          STR_34 FF7A                                            STR_26 FEA2  
                                          STR_18 FE4C                                            STR_43 FFA7  
                                          STR_35 FFDE                                            STR_27 FF82  
                                          STR_51 FF44                                            STR_19 FE3C  
                                          STR_60 FFA7                                            STR_52 FFA7  
                                          STR_36 FFA7                                            STR_28 FFED  
                                          STR_44 FEDE                                            STR_61 FFA7  
                                          STR_53 FFA7                                            STR_45 FFA7  
                                          STR_37 FFA7                                            STR_29 FFA7  
                                          STR_46 FEDE                                            STR_38 FF99  
                                          STR_54 FF4D                                            STR_70 FF19  
                                          STR_62 FE96                                            STR_55 FF2F  
                                          STR_63 FFA7                                            STR_39 FFA7  
                                          STR_47 FF2F                                            STR_71 FD8C  
                                          STR_80 FFA7                                            STR_56 FFA7  
                                          STR_48 FFFC                                            STR_72 FFB5  
                                          STR_64 FD23                                            STR_81 FD08  
                                          STR_65 FFA7                                            STR_73 FFD9  
                                          STR_57 FF56                                            STR_49 FF24  
                                          STR_82 FFA7                                            STR_74 FFA7  
                                          STR_90 FFF5                                            STR_58 FE7B  
                                          STR_66 FD08                                            STR_83 FDA5  
                                          STR_67 FFA7                                            STR_91 FFF5  
                                          STR_59 FFAE                                            STR_75 FF5F  
                                          STR_92 FE91                                            STR_76 FFFC  
                                          STR_84 FFA7                                            STR_68 FDA5  
                                          STR_85 FF19                                            STR_69 FFA7  
                                          STR_93 FFBC                                            STR_77 FF3A  
                                          STR_86 FD8C                                            STR_94 FFA2  
                                          STR_78 FFA7                                            STR_79 FD23  
                                          STR_87 FFA7                                            STR_95 FE89  
                                          STR_88 FFA7                                            STR_96 FFBC  
                                          STR_89 FFA7                                            STR_97 FFED  
                                          STR_98 FDDF                                            STR_99 FE89  
                                _TMR1_StartTimer 3CB0                                            ?_puts 0018  
                                          _T0CON 000FD5                                  ___awdiv@divisor 0016  
                                          _T1CON 000FCD                                            _T5CON 000F4E  
                                 __CFG_DEBUG$OFF 000000                                  __end_of___lwdiv 35A2  
                                ??_get_direction 00C6                                  __end_of___lwmod 382C  
                                          i2l213 39EC                                            i2l214 3A0C  
                                          i2l207 39B2                                            i2l208 39AE  
                                ___awdiv@counter 0018                                            _TMR0H 000FD7  
                                          _TMR1H 000FCF                                            _TMR0L 000FD6  
                                          _TMR1L 000FCE                                            _TMR5H 000F50  
                                          _TMR5L 000F4F                                            _PORTD 000F83  
                                          _TRISA 000F92                                            _TRISB 000F93  
                                          _TRISC 000F94                                            _TRISD 000F95  
                                          _TRISE 000F96                        __size_of_init_CLCD_config 00B4  
              __size_of_TMR0_SetInterruptHandler 000A                                    __CFG_WRT0$OFF 000000  
                                  __CFG_WRT1$OFF 000000                                    __CFG_WRT2$OFF 000000  
                      ?_TMR0_SetInterruptHandler 0014                                    __CFG_WRT3$OFF 000000  
                           _EUSART1_Transmit_ISR 3986                                   __CFG_EBTR0$OFF 000000  
                                 __CFG_FCMEN$OFF 000000                                   __CFG_EBTR1$OFF 000000  
                                 __CFG_EBTR2$OFF 000000                                   __CFG_EBTR3$OFF 000000  
                               __end_of_TMR0_ISR 3BEE                                    __CFG_WRTB$OFF 000000  
                                  __CFG_WRTC$OFF 000000                                  __end_of_get_str 33EC  
                                  __CFG_WRTD$OFF 000000                                            _check 007F  
                                 __CFG_EBTRB$OFF 000000                                            _delay 368C  
                                          _getch 3C96                                  __end_of_dpowers FCE1  
                        __end_of_max_display_str 3C18                                            _cputs 39B6  
                                __end_of_isdigit 3B1E                                            _randx 00E5  
                             __CFG_MCLRE$EXTMCLR 000000                                            atoi@a 0027  
                                          atoi@s 0022                                            _putch 3C7A  
                        __size_of_clear_cmd_data 002A                                   ?_EUSART1_Write 0001  
                        __end_of_TMR1_Initialize 3AC2                                            pclath 000FFA  
                                 ??_make_display 00D1                                            tablat 000FF5  
                                 ??_EUSART1_Read 0014                                            puts@s 0018  
                                          status 000FD8                                            wtemp6 004D  
                                 __CFG_HFOFST$ON 000000                                  __end_of_strcspn 3642  
                                __end_of_strncmp 2F1A                                  __end_of_strncpy 344A  
                           _scroll_right_to_left 0F86                                   __CFG_PBADEN$ON 000000  
                       scroll_right_to_left@line 0032                                  _TMR5_Initialize 3A82  
                                 ??_console_init 0030                                  __initialization 3224  
                                 get_dis_frq@frq 00C9                                   get_dis_frq@str 0034  
                                   __end_of_atoi 276C                       __end_of_EUSART1_Initialize 3952  
                                   __end_of_main 34FC                                     __end_of_puts 3BBC  
                         ?_init_clcd_cusotom_lcd 0034                                   get_direction@i 00C9  
                    ?_INTERRUPT_InterruptManager 0001                    __size_of_scroll_left_to_right 0348  
                               _cmd_consol_state 007E                                           ??_atoi 0024  
                                         ??_main 0039                                           ??_puts 001A  
                               ??_write_lcd_data 001B                                    __activetblptr 000003  
                                 __CFG_PLLCFG$ON 000000                              collect_row@data_row 0036  
                                  __delay_MS@val 0017                            ?_EUSART1_Transmit_ISR 0001  
                      ??_TMR1_HasOverflowOccured 0014                                  reply_to_host@ch 00E2  
                                         ?_delay 0014                          __end_of_TMR0_StartTimer 3CB8  
                                         ?_getch 0001                                           ?_cputs 0016  
                                         STR_100 FFED                                           STR_101 FFF1  
                                         STR_110 FDDF                                           STR_102 FDDF  
                                         STR_111 FE89                                           STR_103 FE89  
                                         STR_120 FE89                                           STR_104 FFF1  
                                         STR_112 FFC2                                           STR_121 FFAE  
                                         STR_113 FFCE                                           STR_105 FFDE  
                                         STR_114 FE89                                           STR_106 FE89  
                                         STR_122 FFB5                                           STR_130 FEEA  
                                         STR_123 FFA2                                           STR_131 FFA0  
                                         STR_115 FFCE                                           STR_107 FFDE  
                                         STR_108 FFC2                                           STR_116 FF8A  
                                         STR_140 FFC8                                           STR_124 FFC8  
                                         STR_132 FE6C                                           STR_133 FE9F  
                                         STR_125 FE89                                           STR_117 FE89  
                                         STR_109 FF0E                                           STR_141 FDE4  
                                         STR_126 FFB5                                           STR_118 FF8A  
                                         STR_134 FFF9                                           STR_142 FF92  
                                         STR_119 FFAE                                           STR_135 FFF9  
                                         STR_127 FFA0                                           STR_136 FFD4  
                                         STR_128 FF02                                           STR_129 FFA0  
                                         STR_137 FEF6                                           STR_138 FEBA  
                                         STR_139 FFA2                                 ___awdiv@dividend 0014  
                                         _ANSELA 000F38                                           ?_putch 0001  
                                         _ANSELB 000F39                                           _ANSELC 000F3A  
                                         _ANSELD 000F3B                                           _ANSELE 000F3C  
                                         _T1GCON 000FCC                                           _T5GCON 000F4D  
                       __size_of_cmd_consol_task 01FA                                   __CFG_WDTEN$OFF 000000  
                                         _RCREG1 000FAE                                           _RCSTA1 000FAB  
                                         _OSCCON 000FD3                                           _SPBRG1 000FAF  
                                         _TXREG1 000FAD                            ?_scroll_right_to_left 0030  
                                         _TXSTA1 000FAC                           __size_of_max_uid_range 000E  
                            _clear_display_array 3A60                                   __CFG_XINST$OFF 000000  
                              collect_column@str 0034                             __size_of_get_dis_frq 00E2  
                        __end_of_TMR1_StartTimer 3CB4                                     ?_TMR1_Reload 0001  
                                         ___wmul 3A3A                                        ??___awdiv 0018  
                                 __CFG_STVREN$ON 000000                                        ??___lwdiv 0018  
                           __size_of_collect_row 00F8                                        ??___lwmod 001F  
                                         _memcpy 3762                                 ?_TMR0_Initialize 0001  
                                         _memset 371C                                           delay@i 0019  
                                         clear_0 325E                                           clear_1 3270  
                                         clear_2 327C                                           clear_3 3288  
                                         clear_4 3294                                 ___awdiv@quotient 001A  
                                         _printf 2436                                           _strchr 3316  
                                         _strcmp 3642                     scroll_off@display_char_count 0031  
                                         _strcpy 36D6                                           _strlen 34FC  
                                      ??_get_str 0034                                           _strtok 2FCE  
                                         _strspn 35A2                                           _strstr 307E  
                                _TMR5_StartTimer 3CA2                                           cputs@s 0016  
                                   __pdataCOMRAM 004B                                        ??_isdigit 0014  
                           ?_clear_display_array 0001                                     __mediumconst FCD6  
                                         tblptrh 000FF7                                           tblptrl 000FF6  
                                         tblptru 000FF8                            __end_of_TMR0_CallBack 3AE2  
                                ??_EUSART1_Write 0014                          _clear_display_structure 3AE2  
       TMR0_SetInterruptHandler@InterruptHandler 0014                                 ?_max_display_str 0001  
                                      ??_strcspn 001E                                  _eusart1RxBuffer 0060  
                    __end_of_max_display_support 3C70                                        ??_strncmp 002E  
                                      ??_strncpy 001A                    __size_of_INTERRUPT_Initialize 0004  
                               ??_collect_column 00C6                                  _eusart1TxBuffer 0068  
                               ?_TMR1_Initialize 0001                          __end_of_TMR5_Initialize 3AA2  
                ??_reset_display_structure_count 0030                                _SYSTEM_Initialize 3B1E  
                          __size_of_clcd_max_col 000E                                       __accesstop 0060  
                          __size_of_clcd_max_row 000E                          __end_of__initialization 329A  
                             __size_of__delay_MS 0044  scroll_left_to_right@clcd_display_string_details 0030  
                             ?_SYSTEM_Initialize 0001                             __end_of_display_text 3224  
                                  ___rparam_used 000001              __size_of_clcd_display_string_config 005A  
                                 __pcstackCOMRAM 0001                                     __pidataBANK0 3BBC  
                            ??_SYSTEM_Initialize 0018                                        ?_TMR0_ISR 0001  
                                  __end_of_delay 36D6                                    __end_of_getch 3C9C  
                               ??_conflict_check 0036                                    __end_of_cputs 39E4  
                           _display_struct_count 0074                             cmd_consol_task@_1900 0070  
                                  __end_of_putch 3C84                              get_dis_frq@data_frq 0036  
                           __end_of_make_display 2436                             __end_of_EUSART1_Read 3986  
                                 collect_row@row 00CB                                   collect_row@str 0034  
                     __end_of_update_string_data 1E5C                           __size_of_write_lcd_cmd 001C  
                         ??_EUSART1_Transmit_ISR 0001                            __end_of_reply_to_host 196A  
                          ??_clear_display_array 0030                  update_string_data@exist_uid_idx 00DA  
                               _init_CLCD_config 2F1A                                    _max_uid_range 3BFC  
                         __size_of_min_uid_range 000E                      __end_of_EUSART1_Receive_ISR 3A10  
                                   _clcd_max_col 3C26                                     _clcd_max_row 3C18  
                           __end_of_console_init 3316                                          ??_delay 0016  
                                        ??_getch 0015                                 ?_TMR0_StartTimer 0001  
                                        ??_cputs 0018                        __end_of_SYSTEM_Initialize 3B3C  
                                 _clear_cmd_data 3A10                                          ??_putch 0015  
                                  _eusart1RxHead 0041                                    _eusart1TxHead 0043  
                             __size_of_copy_data 01FE                                    _eusart1RxTail 0040  
                                     __pbssBANK0 0060                                       __pbssBANK1 0100  
                                     __pbssBANK2 0200                                    _eusart1TxTail 0042  
                         ??_scroll_right_to_left 00C6                                       _data_count 003C  
                                     __pnvCOMRAM 0049            scroll_off@clcd_display_string_details 0028  
                              ??_cmd_consol_task 00E3                               __CFG_CCP2MX$PORTC1 000000  
               __end_of_TMR0_SetInterruptHandler 3C8E                          __size_of_TMR0_StopTimer 0004  
                                        ?___wmul 001C                                 ?_TMR1_StartTimer 0001  
                                     ??_TMR0_ISR 0002                          __end_of_TMR5_StartTimer 3CA8  
                             __CFG_CCP3MX$PORTB5 000000                  ??_char_enter_mode_left_to_right 001C  
                                        ?_memcpy 0014                                          ?_memset 0028  
                    get_direction@data_direction 0036                                          ?_printf 0022  
                                        ?_strchr 0014                                          ?_strcmp 0014  
                                        ?_strcpy 0014                                          ?_strlen 0022  
                                     _heart_beat 3B3C                          __size_of_TMR1_StopTimer 0004  
                                        ?_strtok 0021                                          ?_strspn 001A  
                                        ?_strstr 0031                                __end_of__delay_MS 37EA  
                                 ?_max_uid_range 0001                        ??_clear_display_structure 0030  
                                        _OSCCON2 000FD2                           __end_of_clear_cmd_data 3A3A  
                                        _OSCTUNE 000F9B                                          _SPBRGH1 000FB0  
                         copy_data@clcd_str_data 0034                                 write_lcd_cmd@cmd 001B  
                    __end_of_get_over_write_data 2C8A                                 _print_data_ready 0076  
                                     _make_array 3C5A                           __size_of_parse_cmd_str 0EBC  
                               ?_TMR5_Initialize 0001                                    _write_lcd_cmd 3B5A  
                                __CFG_PWRTEN$OFF 000000                               __size_of_write_str 003A  
          __end_of_reset_display_structure_count 3BDE           __size_of_reset_display_structure_count 0010  
                  _reset_display_structure_count 3BCE                                          __Hparam 0000  
                        ??_init_clcd_cusotom_lcd 0035                                    _min_uid_range 3BEE  
                                        __Lparam 0000  scroll_right_to_left@clcd_display_string_details 0030  
                                        ___awdiv 311E                                  __size_of___wmul 0026  
                                        ___lwdiv 3550                                          ___lwmod 37EA  
             __end_of_clcd_display_string_config 34A4                       _clcd_display_string_config 344A  
                                  copy_data@data 0036                                __end_of_copy_data 205A  
                           __size_of_TMR1_Reload 000C                                          __pcinit 3224  
                                __size_of_memcpy 0044                                  __size_of_memset 0046  
                                        __ramtop 1000                                          __ptext0 34A4  
                                        __ptext1 32A4                                          __ptext2 3A10  
                                        __ptext3 205A                                          __ptext4 1630  
                                        __ptext5 1C0C                                          __ptext6 2254  
                                        __ptext7 0F86                                          __ptext8 33EC  
                                        __ptext9 276C                                  __size_of_printf 01D8  
                           get_over_write_data@i 00CA                                          _display 007D  
                                        _get_str 3386                                        _T0CONbits 000FD5  
                        __size_of_TMR5_StopTimer 0006                                  __size_of_strchr 0070  
                                __size_of_strcmp 004A                                  __size_of_strcpy 0046  
                                __size_of_strlen 0054                                        _T1CONbits 000FCD  
                                __size_of_strtok 00B0                                  __size_of_strspn 0050  
                                __size_of_strstr 00A0                                          _dpowers FCD7  
                          _OSCILLATOR_Initialize 3C34                                       delay@delay 0014  
                                        _isdigit 3B00                            __end_of_get_direction 2BA8  
                             _EUSART1_Initialize 391C                         ??_PIN_MANAGER_Initialize 0014  
                                      _T5CONbits 000F4E                                  ?_clear_cmd_data 0001  
                     __size_of_SYSTEM_Initialize 001E                                          _strcspn 35F2  
                                        _strncmp 2E4A                                          _strncpy 33EC  
                          __size_of_display_text 0082                             end_of_initialization 329A  
                   __end_of_scroll_left_to_right 1630                              ?_EUSART1_Initialize 0001  
                                        memcpy@d 001A                                          memcpy@n 0018  
                                        memcpy@s 001C                                   ?_write_lcd_cmd 0001  
                                    scroll_off@i 0035                                      scroll_off@j 0033  
                                    scroll_off@k 002E                                          memset@c 002A  
                                        memset@n 002C                                          memset@p 002E  
                               cmd_consol_task@i 0072                                   ?_min_uid_range 0001  
                __end_of_clear_display_structure 3B00                                   parse_cmd_str@i 00D1  
                                     _reset_clcd 3C70                                       _set_cursor 3B92  
                                        printf@c 0033                                          printf@f 0022  
                          __size_of_make_display 01E2                                       _scroll_off 276C  
                                        postdec1 000FE5                                          postdec2 000FDD  
                                        postinc0 000FEE                                          postinc1 000FE6  
                                        postinc2 000FDE                            __size_of_EUSART1_Read 0034  
                                   _conflict_arr 0150                                 ?_TMR5_StartTimer 0001  
                           ??_EUSART1_Initialize 0014                                          strcmp@r 0019  
                                  _parse_cmd_str 00CA                                          strlen@s 0022  
                                ??_max_uid_range 0014                                          strspn@i 001F  
                       _TMR0_SetInterruptHandler 3C84                                        _PORTAbits 000F80  
                                      _PORTDbits 000F83                            __size_of_console_init 0072  
                                    ?_heart_beat 0001                            _TMR5_InterruptHandler 007A  
          __end_of_char_enter_mode_left_to_right 3C96           __size_of_char_enter_mode_left_to_right 0008  
                  _char_enter_mode_left_to_right 3C8E                                     _display_text 31A2  
                              __end_of_write_str 38E4               init_clcd_cusotom_lcd@clcd_init_col 0034  
                             write_lcd_data@data 001B               init_clcd_cusotom_lcd@clcd_init_row 0035  
                            EUSART1_Write@txData 0014                                      ?_make_array 0001  
                                   _make_display 2254                                    ??_get_dis_frq 00C6  
                                   _EUSART1_Read 3952                                       get_str@str 0030  
                       __end_of_init_CLCD_config 2FCE                                    ??_collect_row 00C6  
                              _lcd_display_array 0100                                   _TMR0_StopTimer 3CAC  
                                   _console_init 32A4                                make_display@count 0037  
                   __end_of_INTERRUPT_Initialize 3CBC                                     write_str@str 001C  
                                 ?_parse_cmd_str 00CC                   ?_reset_display_structure_count 0001  
                                 __end_of___wmul 3A60                                    __pidataCOMRAM 3CBE  
                                collect_column@i 00C9                                __size_of_TMR0_ISR 0010  
                                 _TMR1_StopTimer 3CA8                                   __end_of_memcpy 37A6  
                         ?_OSCILLATOR_Initialize 0001                                   __end_of_memset 3762  
                       ?_TMR1_HasOverflowOccured 0001                                   __end_of_printf 260E  
                         conflict_check@conflict 00C7                                   __end_of_strchr 3386  
                                 __end_of_strcmp 368C                                   __end_of_strcpy 371C  
                                 __end_of_strlen 3550                                   __end_of_strtok 307E  
                                 __end_of_strspn 35F2                                   __end_of_strstr 311E  
                            start_initialization 3224                             set_cursor@col_number 001C  
                       __size_of_TMR0_Initialize 0038                  __size_of_PIN_MANAGER_Initialize 0042  
                                _cmd_consol_task 205A                                 get_direction@str 0034  
                                    putch@txData 0015                                  ??_write_lcd_cmd 001B  
                          __end_of_EUSART1_Write 38AA                          __size_of_write_lcd_data 001C  
                           collect_column@column 00CB                               _update_string_data 1C0C  
                                ??_min_uid_range 0014                              __size_of_heart_beat 001E  
                         __end_of_TMR0_StopTimer 3CB0                     __size_of_max_display_support 000A  
                       __size_of_max_display_str 000E                                      ?_reset_clcd 0001  
                            ?_update_string_data 00D4                                    _clcd_init_col 0080  
                       __size_of_TMR1_Initialize 0020                                      ?_set_cursor 001C  
                                  _clcd_init_row 0081                                      ?_scroll_off 0028  
                                       ??___wmul 0020                              __end_of_get_dis_frq 2D6C  
                         __size_of_TMR0_CallBack 0020                           __end_of_TMR1_StopTimer 3CAC  
                                    __pdataBANK0 00E5                      __end_of_clear_display_array 3A82  
                                       ??_memcpy 001A                                         ??_memset 002E  
                            update_string_data@i 00DD                             _scroll_left_to_right 12E8  
                                 scroll_off@line 0030                              __end_of_collect_row 29C0  
                            __size_of_make_array 000C                                         ??_printf 002A  
                                 _TMR5_StopTimer 3C9C                                         ??_strchr 0018  
                                       ??_strcmp 0018                                         ??_strcpy 0018  
                                       ??_strlen 0024                                         ??_strtok 0025  
                                       ??_strspn 001E                                   _eusart1RxCount 003F  
                                       ??_strstr 0035                     ??_clcd_display_string_config 0034  
                                    __pbssBIGRAM 0296                                      __pbssCOMRAM 0039  
                           ??_update_string_data 00D6                    __size_of_EUSART1_Transmit_ISR 0030  
                                  __pcstackBANK0 00C6                                  __delay_MS@delay 0014  
                                      __delay_MS 37A6                   ?_char_enter_mode_left_to_right 0001  
                                   _isdigit$2314 0015                     __size_of_EUSART1_Receive_ISR 002C  
                          _TMR0_InterruptHandler 00F6                                        __pnvBANK0 00F6  
                  __size_of_scroll_right_to_left 0362                         __size_of_TMR0_StartTimer 0004  
                                ?_TMR0_StopTimer 0001                           __size_of_reply_to_host 033A  
                               ___lwdiv@dividend 0014                           _PIN_MANAGER_Initialize 382C  
                                conflict_check@i 00C8                                  ??_parse_cmd_str 00CE  
                 __size_of_init_clcd_cusotom_lcd 00DE                                        __pintcode 0008  
                        __size_of_collect_column 00F8                    __end_of_init_clcd_cusotom_lcd 2E4A  
                                  __pmediumconst FCD6                                         ?___awdiv 0014  
                                       ?___lwdiv 0014                                         ?___lwmod 001B  
                __end_of_TMR1_HasOverflowOccured 3C5A                                  ?_TMR1_StopTimer 0001  
                         __end_of_TMR5_StopTimer 3CA2                      update_string_data@end_point 00DC  
                          ?_scroll_left_to_right 0030                      ?_clcd_display_string_config 0001  
             get_over_write_data@over_write_data 0036                     ??_INTERRUPT_InterruptManager 0002  
                               __CFG_PRICLKEN$ON 000000                           get_over_write_data@str 0034  
                               ??_clear_cmd_data 0030                                parse_cmd_str@temp 00DC  
                                       ?_get_str 0030                          __end_of_cmd_consol_task 2254  
                                      _copy_data 1E5C                                         _BAUDCON1 000FB8  
                       __size_of_TMR1_StartTimer 0004                                         ?_isdigit 0001  
                        __size_of_conflict_check 02A2                              __size_of_reset_clcd 000A  
                                     ?__delay_MS 0014                                 ___lwdiv@quotient 0019  
                               _clcd_config_data 0044                                   __size_of_delay 004A  
                            __size_of_set_cursor 0016                                   __size_of_getch 0006  
                                 __size_of_cputs 002E                                    _TMR0_CallBack 3AC2  
                                       ?_strcspn 001A                                         ?_strncmp 0028  
                            __size_of_scroll_off 015C                                         ?_strncpy 0014  
                                 __size_of_putch 000A                             _INTERRUPT_Initialize 3CB8  
                  conflict_check@new_start_point 0034                             set_cursor@row_number 001D  
                              ??_TMR0_Initialize 0016                              _conflict_data_count 003B  
                                 ___wmul@product 0020                                         _LATEbits 000F8D  
                            parse_cmd_str@i_1801 00D2                              parse_cmd_str@i_1792 00D5  
                                    strncpy@from 0016                                      _get_dis_frq 2C8A  
                                       _PIE1bits 000F9D                                      strncpy@size 0018  
                   __size_of_get_over_write_data 00E2              __size_of_INTERRUPT_InterruptManager 00BE  
                                      _valid_cmd 0082                       ??_TMR0_SetInterruptHandler 0016  
                                       _PIR1bits 000F9E                                         i2u470_48 3AD0  
                                       i2u393_40 3B44                                        _uid_count 004B  
                                       _PIR5bits 000F7E                                         i2u393_46 3B46  
                                    _collect_row 28C8                         __size_of_TMR5_Initialize 0020  
                                       _RCONbits 000FD0                                    ??_TMR1_Reload 0014  
                               __CFG_WDTPS$32768 000000                              parse_cmd_str@column 00D4  
                                       _TMR0_ISR 3BDE                                ??_max_display_str 0014  
                            parse_cmd_str@scroll 00D7                                  ?_TMR5_StopTimer 0001  
                       ?_clear_display_structure 0001                                ??_TMR1_Initialize 0014  
                                   ??_heart_beat 0001                                ___wmul@multiplier 001C  
                                     printf@flag 002B                                       ?_copy_data 0034  
                                     printf@prec 002C                                    _reply_to_host 1630  
                                 ?_TMR0_CallBack 0001                                      _INTCON2bits 000FF1  
                                      copy_data0 3238                                        _write_str 38AA  
                          ?_INTERRUPT_Initialize 0001                                   _write_lcd_data 3B76  
                                   ??_make_array 0002                            EUSART1_Read@readValue 0014  
                         get_direction@direction 00CB                               __end_of_heart_beat 3B5A  
                                       __Hrparam 0000                         scroll_left_to_right@line 0032  
                              ?_init_CLCD_config 0001                    update_string_data@start_point 00DB  
                                      memcpy@tmp 001E                                         __Lrparam 0000  
                             __CFG_BOREN$SBORDIS 000000                           __size_of_get_direction 00F0  
                             ??_init_CLCD_config 0034                                __CFG_P2BMX$PORTD2 000000  
                         ??_scroll_left_to_right 00C6                          ??_OSCILLATOR_Initialize 0014  
                              ??_TMR0_StartTimer 0014                                  get_str@data_str 0032  
                               __size_of___awdiv 0084                      __size_of_EUSART1_Initialize 0036  
                               __size_of___lwdiv 0052                                 __size_of___lwmod 0042  
                    _clcd_display_string_details 0296                               __end_of_make_array 3C66  
                            __end_of_TMR1_Reload 3C4E                            _TMR1_InterruptHandler 0078  
                          __end_of_max_uid_range 3C0A                                   ?_reply_to_host 0001  
                               ?_cmd_consol_task 0001                                 __size_of_get_str 0066  
                            _max_display_support 3C66                         __size_of_TMR5_StartTimer 0006  
                                  ?_clcd_max_col 0001                                         _cmd_data 0083  
                                  ?_clcd_max_row 0001                                 __size_of_isdigit 001E  
                                ___lwdiv@divisor 0016                                      ??__delay_MS 0016  
                         __end_of_write_lcd_data 3B92                                  ___lwdiv@counter 0018  
                                       __ptext10 12E8                                         __ptext11 31A2  
                                       __ptext20 3BFC                                         __ptext12 3B92  
                                       __ptext21 3C66                                         __ptext13 3C8E  
                                     _T1GCONbits 000FCC                                         __ptext30 344A  
                                       __ptext22 3C0A                                         __ptext14 1E5C  
                                       __ptext31 38AA                                         __ptext23 2D6C  
                                       __ptext15 196A                                         __ptext40 3C18  
                                       __ptext32 3B76                                         __ptext24 2F1A  
                                       __ptext16 3642                                         __ptext41 3C26  
                                       __ptext33 368C                                         __ptext25 3B5A  
                                       __ptext17 3BA8                                         __ptext50 36D6  
                                       __ptext42 00CA                                         __ptext34 3762  
                                       __ptext26 3C70                                         __ptext18 39B6  
                                       __ptext51 371C                                         __ptext43 2FCE  
                                       __ptext35 37A6                                         __ptext27 3A60  
                                       __ptext19 3BEE                                         __ptext60 386E  
                                       __ptext52 2BA8                                         __ptext44 35A2  
                                       __ptext36 3CA8                                         __ptext28 3BCE  
                                       __ptext61 37EA                                         __ptext53 2C8A  
                                       __ptext45 35F2                                         __ptext37 3C42  
                                       __ptext29 3AE2                                         __ptext70 3B1E  
                                       __ptext62 3550                                         __ptext54 2AB8  
                                       __ptext46 307E                                         __ptext38 3C4E  
                                       __ptext71 3A82                                         __ptext63 260E  
                                       __ptext55 28C8                                         __ptext47 2E4A  
                                       __ptext39 311E                                         __ptext80 3CB8  
                                       __ptext72 3CA2                                         __ptext64 3B00  
                                       __ptext56 29C0                                         __ptext48 3316  
                                       __ptext81 391C                                         __ptext73 3AA2  
                                       __ptext65 3A3A                                         __ptext57 34FC  
                                       __ptext49 3386                                         __ptext90 0000  
                                       __ptext74 3CB0                                         __ptext66 3C96  
                                       __ptext58 2436                                         __ptext83 3BDE  
                                       __ptext75 38E4                                         __ptext67 3952  
                                       __ptext59 3C7A                                         __ptext84 3AC2  
                                       __ptext76 3CB4                                         __ptext68 3C9C  
                                       __ptext85 3CBC                                         __ptext77 3C84  
                                       __ptext69 3CAC                                         __ptext86 3C5A  
                                       __ptext78 382C                                         __ptext87 3B3C  
                                       __ptext79 3C34                                         __ptext88 3986  
                                       __ptext89 39E4                                       ?_write_str 001C  
                               parse_cmd_str@uid 00D6                                 parse_cmd_str@ptr 00DA  
                               parse_cmd_str@row 00D3                                 parse_cmd_str@str 00CC  
                              ??_TMR1_StartTimer 0014                                 __size_of_strcspn 0050  
                               __size_of_strncmp 00D0                                 __size_of_strncpy 005E  
                                     strcpy@from 0016                 __size_of_TMR1_HasOverflowOccured 000C  
                                  __size_of_atoi 015E                                    __size_of_main 0058  
                                     _T5GCONbits 000F4D                                    __size_of_puts 0014  
                                       delay@val 0017                                       strncmp@len 002C  
           __end_of_TMR0_DefaultInterruptHandler 3CBE            __size_of_TMR0_DefaultInterruptHandler 0002  
                   _TMR0_DefaultInterruptHandler 3CBC                             ?_max_display_support 0014  
                                   ??_reset_clcd 0030                                     ??_set_cursor 001D  
                                 _collect_column 29C0                                     ??_scroll_off 002A  
                                       _uart_str 0200                                         int$flags 004C  
                                       atoi@sign 0026               __end_of_INTERRUPT_InterruptManager 00C6  
                     _INTERRUPT_InterruptManager 0008                                        printf@val 0031  
                                       _str_data 0178                              _EUSART1_Receive_ISR 39E4  
                                     write_str@i 001E                                ??_TMR5_Initialize 0014  
                                    ??_copy_data 00C6                                   ??_clcd_max_col 0014  
                                     _INTCONbits 000FF2                                   ??_clcd_max_row 0014  
                                ??_TMR0_CallBack 0002                                   _conflict_check 196A  
                                       memcpy@d1 0014                                         memcpy@s1 0016  
                                  _get_direction 2AB8                                         isdigit@c 0016  
                                ?_write_lcd_data 0001                           ??_INTERRUPT_Initialize 0014  
                                       memset@p1 0028                               __end_of_reset_clcd 3C7A  
                             __end_of_set_cursor 3BA8                           update_string_data@data 00D4  
                              cmd_consol_task@ch 00E4                                         intlevel2 0000  
                             __end_of_scroll_off 28C8                                 ??_TMR0_StopTimer 0014  
                           ?_EUSART1_Receive_ISR 0001                                        strchr@chr 0016  
                          __end_of_write_lcd_cmd 3B76                                 ___lwmod@dividend 001B  
                                      strchr@ptr 0014                          ?_PIN_MANAGER_Initialize 0001  
                          ??_max_display_support 0016                                       _RCSTA1bits 000FAB  
                                      strcspn@s1 001A                                        strcspn@s2 001C  
                          __end_of_min_uid_range 3BFC                           __end_of_collect_column 2AB8  
                   __end_of_EUSART1_Transmit_ISR 39B6                                        strncmp@s1 0028  
                                      strncmp@s2 002A                                 ??_TMR1_StopTimer 0014  
                                      strncpy@cp 001A                                        strncpy@to 0014  
                  ?_TMR0_DefaultInterruptHandler 0001                                      _TMR1_Reload 3C42  
                                       printf@ap 002F                                         printf@cp 002D  
                  get_over_write_data@over_write 00C9                                scroll_off@str_len 0032  
                         __size_of_EUSART1_Write 003C                                  ??_reply_to_host 00DF  
                    conflict_check@new_end_point 0035                     __end_of_scroll_right_to_left 12E8  
                         __end_of_conflict_check 1C0C                                         strcmp@s1 0014  
                                       strcmp@s2 0016                                  ___lwmod@divisor 001D  
                                _TMR0_Initialize 38E4                                         strcpy@cp 0018  
                                       strlen@cp 0026                                         strcpy@to 0014  
                                ___lwmod@counter 001F                              _get_over_write_data 2BA8  
                                       strcspn@i 001F                     __size_of_clear_display_array 0022  
                                 ?_get_direction 0034                            parse_cmd_str@uid_1800 00D9  
                          parse_cmd_str@uid_1789 00D8                      __size_of_update_string_data 0250  
                              __CFG_T3CMX$PORTC0 000000                      conflict_check@exist_uid_idx 00C6  
                                       strtok@s1 0021                                         strtok@s2 0023  
                                       strspn@s1 001A                                         strspn@s2 001C  
                                       strtok@sp 0039                                         strstr@s1 0031  
                                       strstr@s2 0033                                 _LCD_20x4_DISPLAY 003D  
                                    ??_write_str 001E                                ??_TMR5_StartTimer 0014  
                          ??_EUSART1_Receive_ISR 0001                   __end_of_PIN_MANAGER_Initialize 386E  
                              __CFG_FOSC$INTIO67 000000                                  _max_display_str 3C0A  
                                   ?_get_dis_frq 0034                                  ?_collect_column 0034  
                           ?_get_over_write_data 0034                                  _TMR1_Initialize 3AA2  
                               ??_TMR5_StopTimer 0014                                     ?_collect_row 0034  

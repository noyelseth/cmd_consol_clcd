

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Nov 02 20:45:12 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1
   121                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   122                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   123  0000                     
   124                           ; Version 1.40
   125                           ; Generated 01/12/2016 GMT
   126                           ; 
   127                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   128                           ; All rights reserved.
   129                           ; 
   130                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   131                           ; 
   132                           ; Redistribution and use in source and binary forms, with or without modification, are
   133                           ; permitted provided that the following conditions are met:
   134                           ; 
   135                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   136                           ;        conditions and the following disclaimer.
   137                           ; 
   138                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   139                           ;        of conditions and the following disclaimer in the documentation and/or other
   140                           ;        materials provided with the distribution.
   141                           ; 
   142                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   143                           ;        software without specific prior written permission.
   144                           ; 
   145                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   146                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   147                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   148                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   149                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   150                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   151                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   152                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   153                           ; 
   154                           ; 
   155                           ; Code-generator required, PIC18F46K22 Definitions
   156                           ; 
   157                           ; SFR Addresses
   158  0000                     
   159                           	psect	idataBANK0
   160  004252                     __pidataBANK0:
   161                           	opt stack 0
   162                           
   163                           ;initializer for _randx
   164  004252  0001               	dw	1
   165  004254  0000               	dw	0
   166                           
   167                           ;initializer for _uid_count
   168  004256  41                 	db	65
   169                           
   170                           	psect	idataBANK1
   171  0041DE                     __pidataBANK1:
   172                           	opt stack 0
   173                           
   174                           ;initializer for _str
   175  0041DE  49                 	db	73
   176  0041DF  4E                 	db	78
   177  0041E0  49                 	db	73
   178  0041E1  54                 	db	84
   179  0041E2  5F                 	db	95
   180  0041E3  53                 	db	83
   181  0041E4  55                 	db	85
   182  0041E5  43                 	db	67
   183  0041E6  43                 	db	67
   184  0041E7  45                 	db	69
   185  0041E8  53                 	db	83
   186  0041E9  53                 	db	83
   187  0041EA  00                 	db	0
   188                           
   189                           	psect	mediumconst
   190  00FC78                     __pmediumconst:
   191                           	opt stack 0
   192  00FC78  00                 	db	0
   193  00FC79                     _dpowers:
   194                           	opt stack 0
   195  00FC79  0001               	dw	1
   196  00FC7B  000A               	dw	10
   197  00FC7D  0064               	dw	100
   198  00FC7F  03E8               	dw	1000
   199  00FC81  2710               	dw	10000
   200  00FC83                     __end_of_dpowers:
   201                           	opt stack 0
   202  00FC83                     STR_17:
   203  00FC83  55                 	db	85	;'U'
   204  00FC84  49                 	db	73	;'I'
   205  00FC85  44                 	db	68	;'D'
   206  00FC86  20                 	db	32
   207  00FC87  3D                 	db	61	;'='
   208  00FC88  20                 	db	32
   209  00FC89  25                 	db	37
   210  00FC8A  63                 	db	99	;'c'
   211  00FC8B  2C                 	db	44
   212  00FC8C  20                 	db	32
   213  00FC8D  73                 	db	115	;'s'
   214  00FC8E  74                 	db	116	;'t'
   215  00FC8F  61                 	db	97	;'a'
   216  00FC90  72                 	db	114	;'r'
   217  00FC91  74                 	db	116	;'t'
   218  00FC92  5F                 	db	95	;'_'
   219  00FC93  70                 	db	112	;'p'
   220  00FC94  74                 	db	116	;'t'
   221  00FC95  20                 	db	32
   222  00FC96  3D                 	db	61	;'='
   223  00FC97  20                 	db	32
   224  00FC98  25                 	db	37
   225  00FC99  64                 	db	100	;'d'
   226  00FC9A  2C                 	db	44
   227  00FC9B  20                 	db	32
   228  00FC9C  65                 	db	101	;'e'
   229  00FC9D  6E                 	db	110	;'n'
   230  00FC9E  64                 	db	100	;'d'
   231  00FC9F  5F                 	db	95	;'_'
   232  00FCA0  70                 	db	112	;'p'
   233  00FCA1  74                 	db	116	;'t'
   234  00FCA2  20                 	db	32
   235  00FCA3  3D                 	db	61	;'='
   236  00FCA4  20                 	db	32
   237  00FCA5  25                 	db	37
   238  00FCA6  64                 	db	100	;'d'
   239  00FCA7  0D                 	db	13
   240  00FCA8  0A                 	db	10
   241  00FCA9  00                 	db	0
   242  00FCAA                     STR_14:
   243  00FCAA  55                 	db	85	;'U'
   244  00FCAB  49                 	db	73	;'I'
   245  00FCAC  44                 	db	68	;'D'
   246  00FCAD  20                 	db	32
   247  00FCAE  3D                 	db	61	;'='
   248  00FCAF  20                 	db	32
   249  00FCB0  25                 	db	37
   250  00FCB1  64                 	db	100	;'d'
   251  00FCB2  2C                 	db	44
   252  00FCB3  20                 	db	32
   253  00FCB4  73                 	db	115	;'s'
   254  00FCB5  74                 	db	116	;'t'
   255  00FCB6  61                 	db	97	;'a'
   256  00FCB7  72                 	db	114	;'r'
   257  00FCB8  74                 	db	116	;'t'
   258  00FCB9  5F                 	db	95	;'_'
   259  00FCBA  70                 	db	112	;'p'
   260  00FCBB  74                 	db	116	;'t'
   261  00FCBC  20                 	db	32
   262  00FCBD  3D                 	db	61	;'='
   263  00FCBE  20                 	db	32
   264  00FCBF  25                 	db	37
   265  00FCC0  64                 	db	100	;'d'
   266  00FCC1  2C                 	db	44
   267  00FCC2  20                 	db	32
   268  00FCC3  65                 	db	101	;'e'
   269  00FCC4  6E                 	db	110	;'n'
   270  00FCC5  64                 	db	100	;'d'
   271  00FCC6  5F                 	db	95	;'_'
   272  00FCC7  70                 	db	112	;'p'
   273  00FCC8  74                 	db	116	;'t'
   274  00FCC9  20                 	db	32
   275  00FCCA  3D                 	db	61	;'='
   276  00FCCB  20                 	db	32
   277  00FCCC  25                 	db	37
   278  00FCCD  64                 	db	100	;'d'
   279  00FCCE  0D                 	db	13
   280  00FCCF  0A                 	db	10
   281  00FCD0  00                 	db	0
   282  00FCD1                     STR_16:
   283  00FCD1  25                 	db	37
   284  00FCD2  64                 	db	100	;'d'
   285  00FCD3  2E                 	db	46
   286  00FCD4  2E                 	db	46
   287  00FCD5  6A                 	db	106	;'j'
   288  00FCD6  3D                 	db	61	;'='
   289  00FCD7  25                 	db	37
   290  00FCD8  64                 	db	100	;'d'
   291  00FCD9  2C                 	db	44
   292  00FCDA  63                 	db	99	;'c'
   293  00FCDB  6F                 	db	111	;'o'
   294  00FCDC  6E                 	db	110	;'n'
   295  00FCDD  66                 	db	102	;'f'
   296  00FCDE  6C                 	db	108	;'l'
   297  00FCDF  69                 	db	105	;'i'
   298  00FCE0  63                 	db	99	;'c'
   299  00FCE1  74                 	db	116	;'t'
   300  00FCE2  5F                 	db	95	;'_'
   301  00FCE3  63                 	db	99	;'c'
   302  00FCE4  6F                 	db	111	;'o'
   303  00FCE5  75                 	db	117	;'u'
   304  00FCE6  6E                 	db	110	;'n'
   305  00FCE7  74                 	db	116	;'t'
   306  00FCE8  3D                 	db	61	;'='
   307  00FCE9  25                 	db	37
   308  00FCEA  64                 	db	100	;'d'
   309  00FCEB  20                 	db	32
   310  00FCEC  0D                 	db	13
   311  00FCED  0A                 	db	10
   312  00FCEE  00                 	db	0
   313  00FCEF                     STR_59:
   314  00FCEF  63                 	db	99	;'c'
   315  00FCF0  6D                 	db	109	;'m'
   316  00FCF1  64                 	db	100	;'d'
   317  00FCF2  5F                 	db	95	;'_'
   318  00FCF3  64                 	db	100	;'d'
   319  00FCF4  61                 	db	97	;'a'
   320  00FCF5  74                 	db	116	;'t'
   321  00FCF6  61                 	db	97	;'a'
   322  00FCF7  2E                 	db	46
   323  00FCF8  73                 	db	115	;'s'
   324  00FCF9  74                 	db	116	;'t'
   325  00FCFA  61                 	db	97	;'a'
   326  00FCFB  72                 	db	114	;'r'
   327  00FCFC  74                 	db	116	;'t'
   328  00FCFD  5F                 	db	95	;'_'
   329  00FCFE  63                 	db	99	;'c'
   330  00FCFF  6F                 	db	111	;'o'
   331  00FD00  6C                 	db	108	;'l'
   332  00FD01  20                 	db	32
   333  00FD02  3D                 	db	61	;'='
   334  00FD03  20                 	db	32
   335  00FD04  25                 	db	37
   336  00FD05  64                 	db	100	;'d'
   337  00FD06  2C                 	db	44
   338  00FD07  0D                 	db	13
   339  00FD08  0A                 	db	10
   340  00FD09  00                 	db	0
   341  00FD0A                     STR_57:
   342  00FD0A  63                 	db	99	;'c'
   343  00FD0B  6D                 	db	109	;'m'
   344  00FD0C  64                 	db	100	;'d'
   345  00FD0D  5F                 	db	95	;'_'
   346  00FD0E  64                 	db	100	;'d'
   347  00FD0F  61                 	db	97	;'a'
   348  00FD10  74                 	db	116	;'t'
   349  00FD11  61                 	db	97	;'a'
   350  00FD12  2E                 	db	46
   351  00FD13  73                 	db	115	;'s'
   352  00FD14  74                 	db	116	;'t'
   353  00FD15  61                 	db	97	;'a'
   354  00FD16  72                 	db	114	;'r'
   355  00FD17  74                 	db	116	;'t'
   356  00FD18  5F                 	db	95	;'_'
   357  00FD19  72                 	db	114	;'r'
   358  00FD1A  6F                 	db	111	;'o'
   359  00FD1B  77                 	db	119	;'w'
   360  00FD1C  20                 	db	32
   361  00FD1D  3D                 	db	61	;'='
   362  00FD1E  20                 	db	32
   363  00FD1F  25                 	db	37
   364  00FD20  64                 	db	100	;'d'
   365  00FD21  2C                 	db	44
   366  00FD22  0D                 	db	13
   367  00FD23  0A                 	db	10
   368  00FD24  00                 	db	0
   369  00FD25                     STR_6:
   370  00FD25  64                 	db	100	;'d'
   371  00FD26  69                 	db	105	;'i'
   372  00FD27  73                 	db	115	;'s'
   373  00FD28  70                 	db	112	;'p'
   374  00FD29  6C                 	db	108	;'l'
   375  00FD2A  61                 	db	97	;'a'
   376  00FD2B  79                 	db	121	;'y'
   377  00FD2C  5F                 	db	95	;'_'
   378  00FD2D  63                 	db	99	;'c'
   379  00FD2E  68                 	db	104	;'h'
   380  00FD2F  61                 	db	97	;'a'
   381  00FD30  72                 	db	114	;'r'
   382  00FD31  5F                 	db	95	;'_'
   383  00FD32  63                 	db	99	;'c'
   384  00FD33  6F                 	db	111	;'o'
   385  00FD34  75                 	db	117	;'u'
   386  00FD35  6E                 	db	110	;'n'
   387  00FD36  74                 	db	116	;'t'
   388  00FD37  20                 	db	32
   389  00FD38  3D                 	db	61	;'='
   390  00FD39  20                 	db	32
   391  00FD3A  25                 	db	37
   392  00FD3B  64                 	db	100	;'d'
   393  00FD3C  0D                 	db	13
   394  00FD3D  0A                 	db	10
   395  00FD3E  00                 	db	0
   396  00FD3F                     STR_8:
   397  00FD3F  65                 	db	101	;'e'
   398  00FD40  78                 	db	120	;'x'
   399  00FD41  5F                 	db	95	;'_'
   400  00FD42  73                 	db	115	;'s'
   401  00FD43  70                 	db	112	;'p'
   402  00FD44  20                 	db	32
   403  00FD45  3C                 	db	60	;'<'
   404  00FD46  3D                 	db	61	;'='
   405  00FD47  20                 	db	32
   406  00FD48  6E                 	db	110	;'n'
   407  00FD49  65                 	db	101	;'e'
   408  00FD4A  77                 	db	119	;'w'
   409  00FD4B  5F                 	db	95	;'_'
   410  00FD4C  65                 	db	101	;'e'
   411  00FD4D  70                 	db	112	;'p'
   412  00FD4E  20                 	db	32
   413  00FD4F  3C                 	db	60	;'<'
   414  00FD50  3D                 	db	61	;'='
   415  00FD51  65                 	db	101	;'e'
   416  00FD52  78                 	db	120	;'x'
   417  00FD53  5F                 	db	95	;'_'
   418  00FD54  65                 	db	101	;'e'
   419  00FD55  70                 	db	112	;'p'
   420  00FD56  0D                 	db	13
   421  00FD57  0A                 	db	10
   422  00FD58  00                 	db	0
   423  00FD59                     STR_7:
   424  00FD59  65                 	db	101	;'e'
   425  00FD5A  78                 	db	120	;'x'
   426  00FD5B  5F                 	db	95	;'_'
   427  00FD5C  73                 	db	115	;'s'
   428  00FD5D  70                 	db	112	;'p'
   429  00FD5E  20                 	db	32
   430  00FD5F  3C                 	db	60	;'<'
   431  00FD60  3D                 	db	61	;'='
   432  00FD61  20                 	db	32
   433  00FD62  6E                 	db	110	;'n'
   434  00FD63  65                 	db	101	;'e'
   435  00FD64  77                 	db	119	;'w'
   436  00FD65  5F                 	db	95	;'_'
   437  00FD66  73                 	db	115	;'s'
   438  00FD67  70                 	db	112	;'p'
   439  00FD68  20                 	db	32
   440  00FD69  3C                 	db	60	;'<'
   441  00FD6A  3D                 	db	61	;'='
   442  00FD6B  65                 	db	101	;'e'
   443  00FD6C  78                 	db	120	;'x'
   444  00FD6D  5F                 	db	95	;'_'
   445  00FD6E  65                 	db	101	;'e'
   446  00FD6F  70                 	db	112	;'p'
   447  00FD70  0D                 	db	13
   448  00FD71  0A                 	db	10
   449  00FD72  00                 	db	0
   450  00FD73                     STR_64:
   451  00FD73  63                 	db	99	;'c'
   452  00FD74  6D                 	db	109	;'m'
   453  00FD75  64                 	db	100	;'d'
   454  00FD76  5F                 	db	95	;'_'
   455  00FD77  64                 	db	100	;'d'
   456  00FD78  61                 	db	97	;'a'
   457  00FD79  74                 	db	116	;'t'
   458  00FD7A  61                 	db	97	;'a'
   459  00FD7B  2E                 	db	46
   460  00FD7C  65                 	db	101	;'e'
   461  00FD7D  6E                 	db	110	;'n'
   462  00FD7E  64                 	db	100	;'d'
   463  00FD7F  5F                 	db	95	;'_'
   464  00FD80  63                 	db	99	;'c'
   465  00FD81  6F                 	db	111	;'o'
   466  00FD82  6C                 	db	108	;'l'
   467  00FD83  20                 	db	32
   468  00FD84  3D                 	db	61	;'='
   469  00FD85  20                 	db	32
   470  00FD86  25                 	db	37
   471  00FD87  64                 	db	100	;'d'
   472  00FD88  2C                 	db	44
   473  00FD89  0D                 	db	13
   474  00FD8A  0A                 	db	10
   475  00FD8B  00                 	db	0
   476  00FD8C                     STR_61:
   477  00FD8C  63                 	db	99	;'c'
   478  00FD8D  6D                 	db	109	;'m'
   479  00FD8E  64                 	db	100	;'d'
   480  00FD8F  5F                 	db	95	;'_'
   481  00FD90  64                 	db	100	;'d'
   482  00FD91  61                 	db	97	;'a'
   483  00FD92  74                 	db	116	;'t'
   484  00FD93  61                 	db	97	;'a'
   485  00FD94  2E                 	db	46
   486  00FD95  65                 	db	101	;'e'
   487  00FD96  6E                 	db	110	;'n'
   488  00FD97  64                 	db	100	;'d'
   489  00FD98  5F                 	db	95	;'_'
   490  00FD99  72                 	db	114	;'r'
   491  00FD9A  6F                 	db	111	;'o'
   492  00FD9B  77                 	db	119	;'w'
   493  00FD9C  20                 	db	32
   494  00FD9D  3D                 	db	61	;'='
   495  00FD9E  20                 	db	32
   496  00FD9F  25                 	db	37
   497  00FDA0  64                 	db	100	;'d'
   498  00FDA1  2C                 	db	44
   499  00FDA2  0D                 	db	13
   500  00FDA3  0A                 	db	10
   501  00FDA4  00                 	db	0
   502  00FDA5                     STR_27:
   503  00FDA5  64                 	db	100	;'d'
   504  00FDA6  69                 	db	105	;'i'
   505  00FDA7  73                 	db	115	;'s'
   506  00FDA8  70                 	db	112	;'p'
   507  00FDA9  6C                 	db	108	;'l'
   508  00FDAA  61                 	db	97	;'a'
   509  00FDAB  79                 	db	121	;'y'
   510  00FDAC  5F                 	db	95	;'_'
   511  00FDAD  66                 	db	102	;'f'
   512  00FDAE  72                 	db	114	;'r'
   513  00FDAF  71                 	db	113	;'q'
   514  00FDB0  20                 	db	32
   515  00FDB1  3D                 	db	61	;'='
   516  00FDB2  20                 	db	32
   517  00FDB3  25                 	db	37
   518  00FDB4  64                 	db	100	;'d'
   519  00FDB5  0D                 	db	13
   520  00FDB6  0A                 	db	10
   521  00FDB7  00                 	db	0
   522  00FDB8                     STR_21:
   523  00FDB8  73                 	db	115	;'s'
   524  00FDB9  69                 	db	105	;'i'
   525  00FDBA  7A                 	db	122	;'z'
   526  00FDBB  65                 	db	101	;'e'
   527  00FDBC  6F                 	db	111	;'o'
   528  00FDBD  66                 	db	102	;'f'
   529  00FDBE  28                 	db	40
   530  00FDBF  73                 	db	115	;'s'
   531  00FDC0  74                 	db	116	;'t'
   532  00FDC1  72                 	db	114	;'r'
   533  00FDC2  29                 	db	41
   534  00FDC3  20                 	db	32
   535  00FDC4  3D                 	db	61	;'='
   536  00FDC5  20                 	db	32
   537  00FDC6  25                 	db	37
   538  00FDC7  64                 	db	100	;'d'
   539  00FDC8  0D                 	db	13
   540  00FDC9  0A                 	db	10
   541  00FDCA  00                 	db	0
   542  00FDCB                     STR_137:
   543  00FDCB  49                 	db	73	;'I'
   544  00FDCC  6E                 	db	110	;'n'
   545  00FDCD  69                 	db	105	;'i'
   546  00FDCE  74                 	db	116	;'t'
   547  00FDCF  5F                 	db	95	;'_'
   548  00FDD0  63                 	db	99	;'c'
   549  00FDD1  6F                 	db	111	;'o'
   550  00FDD2  6D                 	db	109	;'m'
   551  00FDD3  70                 	db	112	;'p'
   552  00FDD4  6C                 	db	108	;'l'
   553  00FDD5  65                 	db	101	;'e'
   554  00FDD6  74                 	db	116	;'t'
   555  00FDD7  65                 	db	101	;'e'
   556  00FDD8  2E                 	db	46
   557  00FDD9  2E                 	db	46
   558  00FDDA  0D                 	db	13
   559  00FDDB  0A                 	db	10
   560  00FDDC  00                 	db	0
   561  00FDDD                     STR_28:
   562  00FDDD  6F                 	db	111	;'o'
   563  00FDDE  76                 	db	118	;'v'
   564  00FDDF  65                 	db	101	;'e'
   565  00FDE0  72                 	db	114	;'r'
   566  00FDE1  5F                 	db	95	;'_'
   567  00FDE2  77                 	db	119	;'w'
   568  00FDE3  72                 	db	114	;'r'
   569  00FDE4  69                 	db	105	;'i'
   570  00FDE5  74                 	db	116	;'t'
   571  00FDE6  65                 	db	101	;'e'
   572  00FDE7  20                 	db	32
   573  00FDE8  3D                 	db	61	;'='
   574  00FDE9  20                 	db	32
   575  00FDEA  25                 	db	37
   576  00FDEB  64                 	db	100	;'d'
   577  00FDEC  0D                 	db	13
   578  00FDED  0A                 	db	10
   579  00FDEE  00                 	db	0
   580  00FDEF                     STR_3:
   581  00FDEF  73                 	db	115	;'s'
   582  00FDF0  74                 	db	116	;'t'
   583  00FDF1  72                 	db	114	;'r'
   584  00FDF2  69                 	db	105	;'i'
   585  00FDF3  6E                 	db	110	;'n'
   586  00FDF4  67                 	db	103	;'g'
   587  00FDF5  5F                 	db	95	;'_'
   588  00FDF6  63                 	db	99	;'c'
   589  00FDF7  6F                 	db	111	;'o'
   590  00FDF8  75                 	db	117	;'u'
   591  00FDF9  6E                 	db	110	;'n'
   592  00FDFA  74                 	db	116	;'t'
   593  00FDFB  20                 	db	32
   594  00FDFC  3D                 	db	61	;'='
   595  00FDFD  20                 	db	32
   596  00FDFE  25                 	db	37
   597  00FDFF  64                 	db	100	;'d'
   598  00FE00  00                 	db	0
   599  00FE01                     STR_26:
   600  00FE01  64                 	db	100	;'d'
   601  00FE02  69                 	db	105	;'i'
   602  00FE03  72                 	db	114	;'r'
   603  00FE04  65                 	db	101	;'e'
   604  00FE05  63                 	db	99	;'c'
   605  00FE06  74                 	db	116	;'t'
   606  00FE07  69                 	db	105	;'i'
   607  00FE08  6F                 	db	111	;'o'
   608  00FE09  6E                 	db	110	;'n'
   609  00FE0A  20                 	db	32
   610  00FE0B  3D                 	db	61	;'='
   611  00FE0C  20                 	db	32
   612  00FE0D  25                 	db	37
   613  00FE0E  64                 	db	100	;'d'
   614  00FE0F  0D                 	db	13
   615  00FE10  0A                 	db	10
   616  00FE11  00                 	db	0
   617  00FE12                     STR_4:
   618  00FE12  75                 	db	117	;'u'
   619  00FE13  69                 	db	105	;'i'
   620  00FE14  64                 	db	100	;'d'
   621  00FE15  5F                 	db	95	;'_'
   622  00FE16  72                 	db	114	;'r'
   623  00FE17  61                 	db	97	;'a'
   624  00FE18  6E                 	db	110	;'n'
   625  00FE19  67                 	db	103	;'g'
   626  00FE1A  65                 	db	101	;'e'
   627  00FE1B  20                 	db	32
   628  00FE1C  3D                 	db	61	;'='
   629  00FE1D  20                 	db	32
   630  00FE1E  25                 	db	37
   631  00FE1F  64                 	db	100	;'d'
   632  00FE20  0D                 	db	13
   633  00FE21  0A                 	db	10
   634  00FE22  00                 	db	0
   635  00FE23  6D                 	db	109	;'m'
   636  00FE24  69                 	db	105	;'i'
   637  00FE25  64                 	db	100	;'d'
   638  00FE26  5F                 	db	95	;'_'
   639  00FE27  63                 	db	99	;'c'
   640  00FE28  68                 	db	104	;'h'
   641  00FE29  61                 	db	97	;'a'
   642  00FE2A  72                 	db	114	;'r'
   643  00FE2B  20                 	db	32
   644  00FE2C  3D                 	db	61	;'='
   645  00FE2D  20                 	db	32
   646  00FE2E  25                 	db	37
   647  00FE2F  64                 	db	100	;'d'
   648  00FE30  0D                 	db	13
   649  00FE31  0A                 	db	10
   650  00FE32  00                 	db	0
   651  00FE33  25                 	db	37
   652  00FE34  73                 	db	115	;'s'
   653  00FE35  2C                 	db	44
   654  00FE36  20                 	db	32
   655  00FE37  73                 	db	115	;'s'
   656  00FE38  74                 	db	116	;'t'
   657  00FE39  72                 	db	114	;'r'
   658  00FE3A  6C                 	db	108	;'l'
   659  00FE3B  65                 	db	101	;'e'
   660  00FE3C  6E                 	db	110	;'n'
   661  00FE3D  20                 	db	32
   662  00FE3E  25                 	db	37
   663  00FE3F  64                 	db	100	;'d'
   664  00FE40  0D                 	db	13
   665  00FE41  0A                 	db	10
   666  00FE42  00                 	db	0
   667  00FE43                     STR_18:
   668  00FE43  63                 	db	99	;'c'
   669  00FE44  6F                 	db	111	;'o'
   670  00FE45  6E                 	db	110	;'n'
   671  00FE46  66                 	db	102	;'f'
   672  00FE47  6C                 	db	108	;'l'
   673  00FE48  69                 	db	105	;'i'
   674  00FE49  63                 	db	99	;'c'
   675  00FE4A  74                 	db	116	;'t'
   676  00FE4B  3A                 	db	58	;':'
   677  00FE4C  20                 	db	32
   678  00FE4D  75                 	db	117	;'u'
   679  00FE4E  69                 	db	105	;'i'
   680  00FE4F  64                 	db	100	;'d'
   681  00FE50  0D                 	db	13
   682  00FE51  0A                 	db	10
   683  00FE52  00                 	db	0
   684  00FE53                     STR_121:
   685  00FE53  45                 	db	69	;'E'
   686  00FE54  52                 	db	82	;'R'
   687  00FE55  52                 	db	82	;'R'
   688  00FE56  5F                 	db	95	;'_'
   689  00FE57  53                 	db	83	;'S'
   690  00FE58  43                 	db	67	;'C'
   691  00FE59  52                 	db	82	;'R'
   692  00FE5A  4F                 	db	79	;'O'
   693  00FE5B  4C                 	db	76	;'L'
   694  00FE5C  4C                 	db	76	;'L'
   695  00FE5D  5F                 	db	95	;'_'
   696  00FE5E  53                 	db	83	;'S'
   697  00FE5F  45                 	db	69	;'E'
   698  00FE60  54                 	db	84	;'T'
   699  00FE61  00                 	db	0
   700  00FE62                     STR_15:
   701  00FE62  63                 	db	99	;'c'
   702  00FE63  6F                 	db	111	;'o'
   703  00FE64  6E                 	db	110	;'n'
   704  00FE65  66                 	db	102	;'f'
   705  00FE66  6C                 	db	108	;'l'
   706  00FE67  69                 	db	105	;'i'
   707  00FE68  63                 	db	99	;'c'
   708  00FE69  74                 	db	116	;'t'
   709  00FE6A  2E                 	db	46
   710  00FE6B  2E                 	db	46
   711  00FE6C  2E                 	db	46
   712  00FE6D  32                 	db	50	;'2'
   713  00FE6E  0D                 	db	13
   714  00FE6F  0A                 	db	10
   715  00FE70  00                 	db	0
   716  00FE71                     STR_100:
   717  00FE71  0D                 	db	13
   718  00FE72  0A                 	db	10
   719  00FE73  25                 	db	37
   720  00FE74  73                 	db	115	;'s'
   721  00FE75  2E                 	db	46
   722  00FE76  2E                 	db	46
   723  00FE77  2C                 	db	44
   724  00FE78  20                 	db	32
   725  00FE79  4F                 	db	79	;'O'
   726  00FE7A  4B                 	db	75	;'K'
   727  00FE7B  0D                 	db	13
   728  00FE7C  0A                 	db	10
   729  00FE7D  00                 	db	0
   730  00FE7E                     STR_124:
   731  00FE7E  45                 	db	69	;'E'
   732  00FE7F  52                 	db	82	;'R'
   733  00FE80  52                 	db	82	;'R'
   734  00FE81  5F                 	db	95	;'_'
   735  00FE82  43                 	db	67	;'C'
   736  00FE83  4F                 	db	79	;'O'
   737  00FE84  4E                 	db	78	;'N'
   738  00FE85  46                 	db	70	;'F'
   739  00FE86  4C                 	db	76	;'L'
   740  00FE87  49                 	db	73	;'I'
   741  00FE88  43                 	db	67	;'C'
   742  00FE89  54                 	db	84	;'T'
   743  00FE8A  00                 	db	0
   744  00FE8B                     STR_55:
   745  00FE8B  75                 	db	117	;'u'
   746  00FE8C  69                 	db	105	;'i'
   747  00FE8D  64                 	db	100	;'d'
   748  00FE8E  20                 	db	32
   749  00FE8F  3D                 	db	61	;'='
   750  00FE90  20                 	db	32
   751  00FE91  25                 	db	37
   752  00FE92  64                 	db	100	;'d'
   753  00FE93  2C                 	db	44
   754  00FE94  0D                 	db	13
   755  00FE95  0A                 	db	10
   756  00FE96  00                 	db	0
   757  00FE97                     STR_30:
   758  00FE97  43                 	db	67	;'C'
   759  00FE98  6F                 	db	111	;'o'
   760  00FE99  6C                 	db	108	;'l'
   761  00FE9A  32                 	db	50	;'2'
   762  00FE9B  20                 	db	32
   763  00FE9C  3D                 	db	61	;'='
   764  00FE9D  20                 	db	32
   765  00FE9E  25                 	db	37
   766  00FE9F  64                 	db	100	;'d'
   767  00FEA0  0D                 	db	13
   768  00FEA1  0A                 	db	10
   769  00FEA2  00                 	db	0
   770  00FEA3                     STR_25:
   771  00FEA3  72                 	db	114	;'r'
   772  00FEA4  6F                 	db	111	;'o'
   773  00FEA5  77                 	db	119	;'w'
   774  00FEA6  32                 	db	50	;'2'
   775  00FEA7  20                 	db	32
   776  00FEA8  3D                 	db	61	;'='
   777  00FEA9  20                 	db	32
   778  00FEAA  25                 	db	37
   779  00FEAB  64                 	db	100	;'d'
   780  00FEAC  0D                 	db	13
   781  00FEAD  0A                 	db	10
   782  00FEAE  00                 	db	0
   783  00FEAF                     STR_134:
   784  00FEAF  49                 	db	73	;'I'
   785  00FEB0  6E                 	db	110	;'n'
   786  00FEB1  69                 	db	105	;'i'
   787  00FEB2  74                 	db	116	;'t'
   788  00FEB3  5F                 	db	95	;'_'
   789  00FEB4  44                 	db	68	;'D'
   790  00FEB5  6F                 	db	111	;'o'
   791  00FEB6  6E                 	db	110	;'n'
   792  00FEB7  65                 	db	101	;'e'
   793  00FEB8  0D                 	db	13
   794  00FEB9  0A                 	db	10
   795  00FEBA  00                 	db	0
   796  00FEBB                     STR_29:
   797  00FEBB  63                 	db	99	;'c'
   798  00FEBC  6F                 	db	111	;'o'
   799  00FEBD  6C                 	db	108	;'l'
   800  00FEBE  31                 	db	49	;'1'
   801  00FEBF  20                 	db	32
   802  00FEC0  3D                 	db	61	;'='
   803  00FEC1  20                 	db	32
   804  00FEC2  25                 	db	37
   805  00FEC3  73                 	db	115	;'s'
   806  00FEC4  0D                 	db	13
   807  00FEC5  0A                 	db	10
   808  00FEC6  00                 	db	0
   809  00FEC7                     STR_24:
   810  00FEC7  72                 	db	114	;'r'
   811  00FEC8  6F                 	db	111	;'o'
   812  00FEC9  77                 	db	119	;'w'
   813  00FECA  31                 	db	49	;'1'
   814  00FECB  20                 	db	32
   815  00FECC  3D                 	db	61	;'='
   816  00FECD  20                 	db	32
   817  00FECE  25                 	db	37
   818  00FECF  73                 	db	115	;'s'
   819  00FED0  0D                 	db	13
   820  00FED1  0A                 	db	10
   821  00FED2  00                 	db	0
   822  00FED3                     STR_43:
   823  00FED3  74                 	db	116	;'t'
   824  00FED4  65                 	db	101	;'e'
   825  00FED5  6D                 	db	109	;'m'
   826  00FED6  70                 	db	112	;'p'
   827  00FED7  20                 	db	32
   828  00FED8  3D                 	db	61	;'='
   829  00FED9  20                 	db	32
   830  00FEDA  25                 	db	37
   831  00FEDB  73                 	db	115	;'s'
   832  00FEDC  2C                 	db	44
   833  00FEDD  20                 	db	32
   834  00FEDE  00                 	db	0
   835  00FEDF                     STR_119:
   836  00FEDF  45                 	db	69	;'E'
   837  00FEE0  52                 	db	82	;'R'
   838  00FEE1  52                 	db	82	;'R'
   839  00FEE2  5F                 	db	95	;'_'
   840  00FEE3  52                 	db	82	;'R'
   841  00FEE4  4F                 	db	79	;'O'
   842  00FEE5  57                 	db	87	;'W'
   843  00FEE6  5F                 	db	95	;'_'
   844  00FEE7  43                 	db	67	;'C'
   845  00FEE8  4F                 	db	79	;'O'
   846  00FEE9  4C                 	db	76	;'L'
   847  00FEEA  00                 	db	0
   848  00FEEB                     STR_133:
   849  00FEEB  45                 	db	69	;'E'
   850  00FEEC  52                 	db	82	;'R'
   851  00FEED  52                 	db	82	;'R'
   852  00FEEE  5F                 	db	95	;'_'
   853  00FEEF  43                 	db	67	;'C'
   854  00FEF0  4D                 	db	77	;'M'
   855  00FEF1  44                 	db	68	;'D'
   856  00FEF2  5F                 	db	95	;'_'
   857  00FEF3  4C                 	db	76	;'L'
   858  00FEF4  45                 	db	69	;'E'
   859  00FEF5  4E                 	db	78	;'N'
   860  00FEF6  00                 	db	0
   861  00FEF7                     STR_117:
   862  00FEF7  45                 	db	69	;'E'
   863  00FEF8  52                 	db	82	;'R'
   864  00FEF9  52                 	db	82	;'R'
   865  00FEFA  5F                 	db	95	;'_'
   866  00FEFB  53                 	db	83	;'S'
   867  00FEFC  54                 	db	84	;'T'
   868  00FEFD  52                 	db	82	;'R'
   869  00FEFE  5F                 	db	95	;'_'
   870  00FEFF  53                 	db	83	;'S'
   871  00FF00  45                 	db	69	;'E'
   872  00FF01  54                 	db	84	;'T'
   873  00FF02  00                 	db	0
   874  00FF03                     STR_125:
   875  00FF03  0D                 	db	13
   876  00FF04  0A                 	db	10
   877  00FF05  25                 	db	37
   878  00FF06  64                 	db	100	;'d'
   879  00FF07  0D                 	db	13
   880  00FF08  0A                 	db	10
   881  00FF09  4F                 	db	79	;'O'
   882  00FF0A  4B                 	db	75	;'K'
   883  00FF0B  0D                 	db	13
   884  00FF0C  0A                 	db	10
   885  00FF0D  00                 	db	0
   886  00FF0E                     STR_98:
   887  00FF0E  25                 	db	37
   888  00FF0F  64                 	db	100	;'d'
   889  00FF10  2C                 	db	44
   890  00FF11  25                 	db	37
   891  00FF12  63                 	db	99	;'c'
   892  00FF13  2D                 	db	45
   893  00FF14  25                 	db	37
   894  00FF15  63                 	db	99	;'c'
   895  00FF16  0D                 	db	13
   896  00FF17  0A                 	db	10
   897  00FF18  00                 	db	0
   898  00FF19                     STR_89:
   899  00FF19  0D                 	db	13
   900  00FF1A  0A                 	db	10
   901  00FF1B  25                 	db	37
   902  00FF1C  64                 	db	100	;'d'
   903  00FF1D  0D                 	db	13
   904  00FF1E  0A                 	db	10
   905  00FF1F  25                 	db	37
   906  00FF20  73                 	db	115	;'s'
   907  00FF21  0D                 	db	13
   908  00FF22  0A                 	db	10
   909  00FF23  00                 	db	0
   910  00FF24                     STR_86:
   911  00FF24  0D                 	db	13
   912  00FF25  0A                 	db	10
   913  00FF26  25                 	db	37
   914  00FF27  73                 	db	115	;'s'
   915  00FF28  0D                 	db	13
   916  00FF29  0A                 	db	10
   917  00FF2A  25                 	db	37
   918  00FF2B  73                 	db	115	;'s'
   919  00FF2C  0D                 	db	13
   920  00FF2D  0A                 	db	10
   921  00FF2E  00                 	db	0
   922  00FF2F                     STR_63:
   923  00FF2F  63                 	db	99	;'c'
   924  00FF30  6F                 	db	111	;'o'
   925  00FF31  6C                 	db	108	;'l'
   926  00FF32  20                 	db	32
   927  00FF33  3D                 	db	61	;'='
   928  00FF34  20                 	db	32
   929  00FF35  25                 	db	37
   930  00FF36  73                 	db	115	;'s'
   931  00FF37  0D                 	db	13
   932  00FF38  0A                 	db	10
   933  00FF39  00                 	db	0
   934  00FF3A                     STR_69:
   935  00FF3A  64                 	db	100	;'d'
   936  00FF3B  61                 	db	97	;'a'
   937  00FF3C  74                 	db	116	;'t'
   938  00FF3D  61                 	db	97	;'a'
   939  00FF3E  3D                 	db	61	;'='
   940  00FF3F  25                 	db	37
   941  00FF40  73                 	db	115	;'s'
   942  00FF41  0D                 	db	13
   943  00FF42  0A                 	db	10
   944  00FF43  00                 	db	0
   945  00FF44                     STR_48:
   946  00FF44  25                 	db	37
   947  00FF45  73                 	db	115	;'s'
   948  00FF46  2E                 	db	46
   949  00FF47  2E                 	db	46
   950  00FF48  2E                 	db	46
   951  00FF49  34                 	db	52	;'4'
   952  00FF4A  0D                 	db	13
   953  00FF4B  0A                 	db	10
   954  00FF4C  00                 	db	0
   955  00FF4D                     STR_50:
   956  00FF4D  25                 	db	37
   957  00FF4E  73                 	db	115	;'s'
   958  00FF4F  2E                 	db	46
   959  00FF50  2E                 	db	46
   960  00FF51  2E                 	db	46
   961  00FF52  35                 	db	53	;'5'
   962  00FF53  0D                 	db	13
   963  00FF54  0A                 	db	10
   964  00FF55  00                 	db	0
   965  00FF56                     STR_52:
   966  00FF56  25                 	db	37
   967  00FF57  73                 	db	115	;'s'
   968  00FF58  2E                 	db	46
   969  00FF59  2E                 	db	46
   970  00FF5A  2E                 	db	46
   971  00FF5B  36                 	db	54	;'6'
   972  00FF5C  0D                 	db	13
   973  00FF5D  0A                 	db	10
   974  00FF5E  00                 	db	0
   975  00FF5F                     STR_67:
   976  00FF5F  43                 	db	67	;'C'
   977  00FF60  4D                 	db	77	;'M'
   978  00FF61  44                 	db	68	;'D'
   979  00FF62  3D                 	db	61	;'='
   980  00FF63  25                 	db	37
   981  00FF64  73                 	db	115	;'s'
   982  00FF65  0D                 	db	13
   983  00FF66  0A                 	db	10
   984  00FF67  00                 	db	0
   985  00FF68                     STR_2:
   986  00FF68  63                 	db	99	;'c'
   987  00FF69  6F                 	db	111	;'o'
   988  00FF6A  6C                 	db	108	;'l'
   989  00FF6B  20                 	db	32
   990  00FF6C  3D                 	db	61	;'='
   991  00FF6D  20                 	db	32
   992  00FF6E  25                 	db	37
   993  00FF6F  64                 	db	100	;'d'
   994  00FF70  00                 	db	0
   995  00FF71                     STR_1:
   996  00FF71  72                 	db	114	;'r'
   997  00FF72  6F                 	db	111	;'o'
   998  00FF73  77                 	db	119	;'w'
   999  00FF74  20                 	db	32
  1000  00FF75  3D                 	db	61	;'='
  1001  00FF76  20                 	db	32
  1002  00FF77  25                 	db	37
  1003  00FF78  64                 	db	100	;'d'
  1004  00FF79  00                 	db	0
  1005  00FF7A                     STR_36:
  1006  00FF7A  2E                 	db	46
  1007  00FF7B  2E                 	db	46
  1008  00FF7C  2E                 	db	46
  1009  00FF7D  2E                 	db	46
  1010  00FF7E  2E                 	db	46
  1011  00FF7F  0D                 	db	13
  1012  00FF80  0A                 	db	10
  1013  00FF81  00                 	db	0
  1014  00FF82                     STR_31:
  1015  00FF82  25                 	db	37
  1016  00FF83  73                 	db	115	;'s'
  1017  00FF84  2E                 	db	46
  1018  00FF85  2E                 	db	46
  1019  00FF86  32                 	db	50	;'2'
  1020  00FF87  0D                 	db	13
  1021  00FF88  0A                 	db	10
  1022  00FF89  00                 	db	0
  1023  00FF8A                     STR_47:
  1024  00FF8A  53                 	db	83	;'S'
  1025  00FF8B  44                 	db	68	;'D'
  1026  00FF8C  53                 	db	83	;'S'
  1027  00FF8D  43                 	db	67	;'C'
  1028  00FF8E  52                 	db	82	;'R'
  1029  00FF8F  4F                 	db	79	;'O'
  1030  00FF90  4C                 	db	76	;'L'
  1031  00FF91  00                 	db	0
  1032  00FF92                     STR_138:
  1033  00FF92  28                 	db	40
  1034  00FF93  6E                 	db	110	;'n'
  1035  00FF94  75                 	db	117	;'u'
  1036  00FF95  6C                 	db	108	;'l'
  1037  00FF96  6C                 	db	108	;'l'
  1038  00FF97  29                 	db	41
  1039  00FF98  00                 	db	0
  1040  00FF99                     STR_39:
  1041  00FF99  25                 	db	37
  1042  00FF9A  73                 	db	115	;'s'
  1043  00FF9B  2E                 	db	46
  1044  00FF9C  2E                 	db	46
  1045  00FF9D  0D                 	db	13
  1046  00FF9E  0A                 	db	10
  1047  00FF9F  00                 	db	0
  1048  00FFA0                     STR_32:
  1049  00FFA0  2D                 	db	45
  1050  00FFA1  27                 	db	39
  1051  00FFA2  2C                 	db	44
  1052  00FFA3  20                 	db	32
  1053  00FFA4  2F                 	db	47
  1054  00FFA5  3D                 	db	61	;'='
  1055  00FFA6  00                 	db	0
  1056  00FFA7                     STR_53:
  1057  00FFA7  53                 	db	83	;'S'
  1058  00FFA8  44                 	db	68	;'D'
  1059  00FFA9  53                 	db	83	;'S'
  1060  00FFAA  45                 	db	69	;'E'
  1061  00FFAB  52                 	db	82	;'R'
  1062  00FFAC  43                 	db	67	;'C'
  1063  00FFAD  00                 	db	0
  1064  00FFAE                     STR_65:
  1065  00FFAE  55                 	db	85	;'U'
  1066  00FFAF  50                 	db	80	;'P'
  1067  00FFB0  44                 	db	68	;'D'
  1068  00FFB1  41                 	db	65	;'A'
  1069  00FFB2  54                 	db	84	;'T'
  1070  00FFB3  45                 	db	69	;'E'
  1071  00FFB4  00                 	db	0
  1072  00FFB5                     STR_35:
  1073  00FFB5  4C                 	db	76	;'L'
  1074  00FFB6  43                 	db	67	;'C'
  1075  00FFB7  44                 	db	68	;'D'
  1076  00FFB8  53                 	db	83	;'S'
  1077  00FFB9  3F                 	db	63	;'?'
  1078  00FFBA  00                 	db	0
  1079  00FFBB                     STR_41:
  1080  00FFBB  47                 	db	71	;'G'
  1081  00FFBC  4D                 	db	77	;'M'
  1082  00FFBD  44                 	db	68	;'D'
  1083  00FFBE  53                 	db	83	;'S'
  1084  00FFBF  3F                 	db	63	;'?'
  1085  00FFC0  00                 	db	0
  1086  00FFC1                     STR_113:
  1087  00FFC1  45                 	db	69	;'E'
  1088  00FFC2  52                 	db	82	;'R'
  1089  00FFC3  52                 	db	82	;'R'
  1090  00FFC4  4F                 	db	79	;'O'
  1091  00FFC5  52                 	db	82	;'R'
  1092  00FFC6  00                 	db	0
  1093  00FFC7                     STR_42:
  1094  00FFC7  53                 	db	83	;'S'
  1095  00FFC8  44                 	db	68	;'D'
  1096  00FFC9  53                 	db	83	;'S'
  1097  00FFCA  54                 	db	84	;'T'
  1098  00FFCB  52                 	db	82	;'R'
  1099  00FFCC  00                 	db	0
  1100  00FFCD                     STR_132:
  1101  00FFCD  4B                 	db	75	;'K'
  1102  00FFCE  4C                 	db	76	;'L'
  1103  00FFCF  4D                 	db	77	;'M'
  1104  00FFD0  2B                 	db	43
  1105  00FFD1  00                 	db	0
  1106  00FFD2                     STR_66:
  1107  00FFD2  53                 	db	83	;'S'
  1108  00FFD3  53                 	db	83	;'S'
  1109  00FFD4  54                 	db	84	;'T'
  1110  00FFD5  52                 	db	82	;'R'
  1111  00FFD6  00                 	db	0
  1112  00FFD7                     STR_37:
  1113  00FFD7  4C                 	db	76	;'L'
  1114  00FFD8  43                 	db	67	;'C'
  1115  00FFD9  44                 	db	68	;'D'
  1116  00FFDA  53                 	db	83	;'S'
  1117  00FFDB  00                 	db	0
  1118  00FFDC                     STR_19:
  1119  00FFDC  25                 	db	37
  1120  00FFDD  63                 	db	99	;'c'
  1121  00FFDE  2C                 	db	44
  1122  00FFDF  20                 	db	32
  1123  00FFE0  00                 	db	0
  1124  00FFE1                     STR_13:
  1125  00FFE1  25                 	db	37
  1126  00FFE2  64                 	db	100	;'d'
  1127  00FFE3  2C                 	db	44
  1128  00FFE4  20                 	db	32
  1129  00FFE5  00                 	db	0
  1130  00FFE6                     STR_5:
  1131  00FFE6  34                 	db	52	;'4'
  1132  00FFE7  2C                 	db	44
  1133  00FFE8  32                 	db	50	;'2'
  1134  00FFE9  30                 	db	48	;'0'
  1135  00FFEA  00                 	db	0
  1136  00FFEB                     STR_33:
  1137  00FFEB  4D                 	db	77	;'M'
  1138  00FFEC  43                 	db	67	;'C'
  1139  00FFED  3F                 	db	63	;'?'
  1140  00FFEE  00                 	db	0
  1141  00FFEF                     STR_34:
  1142  00FFEF  4D                 	db	77	;'M'
  1143  00FFF0  52                 	db	82	;'R'
  1144  00FFF1  3F                 	db	63	;'?'
  1145  00FFF2  00                 	db	0
  1146  00FFF3                     STR_82:
  1147  00FFF3  4B                 	db	75	;'K'
  1148  00FFF4  4C                 	db	76	;'L'
  1149  00FFF5  4D                 	db	77	;'M'
  1150  00FFF6  00                 	db	0
  1151  00FFF7                     STR_87:
  1152  00FFF7  4F                 	db	79	;'O'
  1153  00FFF8  4B                 	db	75	;'K'
  1154  00FFF9  00                 	db	0
  1155  00FFFA                     STR_130:
  1156  00FFFA  25                 	db	37
  1157  00FFFB  63                 	db	99	;'c'
  1158  00FFFC  00                 	db	0
  1159  00FFFD                     STR_68:
  1160  00FFFD  2C                 	db	44
  1161  00FFFE  00                 	db	0
  1162  0000                     
  1163                           ; #config settings
  1164  00FFFF  00                 	db	0	; dummy byte at the end
  1165  0000                     
  1166                           	psect	nvCOMRAM
  1167  00004E                     __pnvCOMRAM:
  1168                           	opt stack 0
  1169  00004E                     _timer0ReloadVal:
  1170                           	opt stack 0
  1171  00004E                     	ds	2
  1172                           
  1173                           	psect	nvBANK0
  1174  0000F2                     __pnvBANK0:
  1175                           	opt stack 0
  1176  0000F2                     _TMR0_InterruptHandler:
  1177                           	opt stack 0
  1178  0000F2                     	ds	2
  1179  0000F4                     _timer1ReloadVal:
  1180                           	opt stack 0
  1181  0000F4                     	ds	2
  1182  0000F6                     _timer5ReloadVal:
  1183                           	opt stack 0
  1184  0000F6                     	ds	2
  1185  0000F8                     _eusart1TxBufferRemaining:
  1186                           	opt stack 0
  1187  0000F8                     	ds	1
  1188  0000                     _TMR5	set	3919
  1189  0000                     _ANSELA	set	3896
  1190  0000                     _ANSELB	set	3897
  1191  0000                     _ANSELC	set	3898
  1192  0000                     _ANSELD	set	3899
  1193  0000                     _ANSELE	set	3900
  1194  0000                     _T5CON	set	3918
  1195  0000                     _T5CONbits	set	3918
  1196  0000                     _T5GCON	set	3917
  1197  0000                     _T5GCONbits	set	3917
  1198  0000                     _TMR5H	set	3920
  1199  0000                     _TMR5L	set	3919
  1200  0000                     _TMR1	set	4046
  1201  0000                     _BAUDCON1	set	4024
  1202  0000                     _INTCON2bits	set	4081
  1203  0000                     _INTCONbits	set	4082
  1204  0000                     _LATA	set	3977
  1205  0000                     _LATB	set	3978
  1206  0000                     _LATC	set	3979
  1207  0000                     _LATD	set	3980
  1208  0000                     _LATE	set	3981
  1209  0000                     _LATEbits	set	3981
  1210  0000                     _OSCCON	set	4051
  1211  0000                     _OSCCON2	set	4050
  1212  0000                     _OSCTUNE	set	3995
  1213  0000                     _PIE1bits	set	3997
  1214  0000                     _PIR1bits	set	3998
  1215  0000                     _PIR5bits	set	3966
  1216  0000                     _PORTAbits	set	3968
  1217  0000                     _PORTD	set	3971
  1218  0000                     _PORTDbits	set	3971
  1219  0000                     _RCONbits	set	4048
  1220  0000                     _RCREG1	set	4014
  1221  0000                     _RCSTA1	set	4011
  1222  0000                     _RCSTA1bits	set	4011
  1223  0000                     _SPBRG1	set	4015
  1224  0000                     _SPBRGH1	set	4016
  1225  0000                     _T0CON	set	4053
  1226  0000                     _T0CONbits	set	4053
  1227  0000                     _T1CON	set	4045
  1228  0000                     _T1CONbits	set	4045
  1229  0000                     _T1GCON	set	4044
  1230  0000                     _T1GCONbits	set	4044
  1231  0000                     _TMR0H	set	4055
  1232  0000                     _TMR0L	set	4054
  1233  0000                     _TMR1H	set	4047
  1234  0000                     _TMR1L	set	4046
  1235  0000                     _TRISA	set	3986
  1236  0000                     _TRISB	set	3987
  1237  0000                     _TRISC	set	3988
  1238  0000                     _TRISD	set	3989
  1239  0000                     _TRISE	set	3990
  1240  0000                     _TXREG1	set	4013
  1241  0000                     _TXSTA1	set	4012
  1242  0000                     _WPUB	set	3937
  1243                           
  1244                           	psect	cinit
  1245  0035E8                     __pcinit:
  1246                           	opt stack 0
  1247  0035E8                     start_initialization:
  1248                           	opt stack 0
  1249  0035E8                     __initialization:
  1250                           	opt stack 0
  1251                           
  1252                           ; Initialize objects allocated to BANK1 (13 bytes)
  1253                           ; load TBLPTR registers with __pidataBANK1
  1254  0035E8  0EDE               	movlw	low __pidataBANK1
  1255  0035EA  6EF6               	movwf	tblptrl,c
  1256  0035EC  0E41               	movlw	high __pidataBANK1
  1257  0035EE  6EF7               	movwf	tblptrh,c
  1258  0035F0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1259  0035F2  6EF8               	movwf	tblptru,c
  1260  0035F4  EE01  F086         	lfsr	0,__pdataBANK1
  1261  0035F8  EE10 F00D          	lfsr	1,13
  1262  0035FC                     copy_data0:
  1263  0035FC  0009               	tblrd		*+
  1264  0035FE  CFF5 FFEE          	movff	tablat,postinc0
  1265  003602  50E5               	movf	postdec1,w,c
  1266  003604  50E1               	movf	fsr1l,w,c
  1267  003606  E1FA               	bnz	copy_data0
  1268                           
  1269                           ; Initialize objects allocated to BANK0 (5 bytes)
  1270                           ; load TBLPTR registers with __pidataBANK0
  1271  003608  0E52               	movlw	low __pidataBANK0
  1272  00360A  6EF6               	movwf	tblptrl,c
  1273  00360C  0E42               	movlw	high __pidataBANK0
  1274  00360E  6EF7               	movwf	tblptrh,c
  1275  003610  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1276  003612  6EF8               	movwf	tblptru,c
  1277  003614  EE00  F0F9         	lfsr	0,__pdataBANK0
  1278  003618  EE10 F005          	lfsr	1,5
  1279  00361C                     copy_data1:
  1280  00361C  0009               	tblrd		*+
  1281  00361E  CFF5 FFEE          	movff	tablat,postinc0
  1282  003622  50E5               	movf	postdec1,w,c
  1283  003624  50E1               	movf	fsr1l,w,c
  1284  003626  E1FA               	bnz	copy_data1
  1285                           
  1286                           ; Clear objects allocated to BIGRAM (1100 bytes)
  1287  003628  EE02  F096         	lfsr	0,__pbssBIGRAM
  1288  00362C  EE14 F04C          	lfsr	1,1100
  1289  003630                     clear_0:
  1290  003630  6AEE               	clrf	postinc0,c
  1291  003632  50E5               	movf	postdec1,w,c
  1292  003634  50E1               	movf	fsr1l,w,c
  1293  003636  E1FC               	bnz	clear_0
  1294  003638  50E2               	movf	fsr1h,w,c
  1295  00363A  E1FA               	bnz	clear_0
  1296                           
  1297                           ; Clear objects allocated to BANK2 (150 bytes)
  1298  00363C  EE02  F000         	lfsr	0,__pbssBANK2
  1299  003640  0E96               	movlw	150
  1300  003642                     clear_1:
  1301  003642  6AEE               	clrf	postinc0,c
  1302  003644  06E8               	decf	wreg,f,c
  1303  003646  E1FD               	bnz	clear_1
  1304                           
  1305                           ; Clear objects allocated to BANK1 (120 bytes)
  1306  003648  EE01  F000         	lfsr	0,__pbssBANK1
  1307  00364C  0E78               	movlw	120
  1308  00364E                     clear_2:
  1309  00364E  6AEE               	clrf	postinc0,c
  1310  003650  06E8               	decf	wreg,f,c
  1311  003652  E1FD               	bnz	clear_2
  1312                           
  1313                           ; Clear objects allocated to BANK0 (146 bytes)
  1314  003654  EE00  F060         	lfsr	0,__pbssBANK0
  1315  003658  0E92               	movlw	146
  1316  00365A                     clear_3:
  1317  00365A  6AEE               	clrf	postinc0,c
  1318  00365C  06E8               	decf	wreg,f,c
  1319  00365E  E1FD               	bnz	clear_3
  1320                           
  1321                           ; Clear objects allocated to COMRAM (13 bytes)
  1322  003660  EE00  F041         	lfsr	0,__pbssCOMRAM
  1323  003664  0E0D               	movlw	13
  1324  003666                     clear_4:
  1325  003666  6AEE               	clrf	postinc0,c
  1326  003668  06E8               	decf	wreg,f,c
  1327  00366A  E1FD               	bnz	clear_4
  1328  00366C                     end_of_initialization:
  1329                           	opt stack 0
  1330  00366C                     __end_of__initialization:
  1331                           	opt stack 0
  1332  00366C  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1333  00366E  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1334  003670  0100               	movlb	0
  1335  003672  EFC3  F01C         	goto	_main	;jump to C main() function
  1336                           tblptru	equ	0xFF8
  1337                           tblptrh	equ	0xFF7
  1338                           tblptrl	equ	0xFF6
  1339                           tablat	equ	0xFF5
  1340                           postinc0	equ	0xFEE
  1341                           wreg	equ	0xFE8
  1342                           postdec1	equ	0xFE5
  1343                           fsr1h	equ	0xFE2
  1344                           fsr1l	equ	0xFE1
  1345                           
  1346                           	psect	bssCOMRAM
  1347  000041                     __pbssCOMRAM:
  1348                           	opt stack 0
  1349  000041                     _clcd_init_row:
  1350                           	opt stack 0
  1351  000041                     	ds	1
  1352  000042                     _conflict_data_count:
  1353                           	opt stack 0
  1354  000042                     	ds	1
  1355  000043                     _data_count:
  1356                           	opt stack 0
  1357  000043                     	ds	1
  1358  000044                     _eusart1RxCount:
  1359                           	opt stack 0
  1360  000044                     	ds	1
  1361  000045                     _eusart1RxHead:
  1362                           	opt stack 0
  1363  000045                     	ds	1
  1364  000046                     _eusart1RxTail:
  1365                           	opt stack 0
  1366  000046                     	ds	1
  1367  000047                     _eusart1TxHead:
  1368                           	opt stack 0
  1369  000047                     	ds	1
  1370  000048                     _eusart1TxTail:
  1371                           	opt stack 0
  1372  000048                     	ds	1
  1373  000049                     _clcd_config_data:
  1374                           	opt stack 0
  1375  000049                     	ds	5
  1376                           tblptru	equ	0xFF8
  1377                           tblptrh	equ	0xFF7
  1378                           tblptrl	equ	0xFF6
  1379                           tablat	equ	0xFF5
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           postdec1	equ	0xFE5
  1383                           fsr1h	equ	0xFE2
  1384                           fsr1l	equ	0xFE1
  1385                           
  1386                           	psect	bssBANK0
  1387  000060                     __pbssBANK0:
  1388                           	opt stack 0
  1389  000060                     _eusart1RxBuffer:
  1390                           	opt stack 0
  1391  000060                     	ds	8
  1392  000068                     _eusart1TxBuffer:
  1393                           	opt stack 0
  1394  000068                     	ds	8
  1395  000070                     _TMR1_InterruptHandler:
  1396                           	opt stack 0
  1397  000070                     	ds	2
  1398  000072                     _TMR5_InterruptHandler:
  1399                           	opt stack 0
  1400  000072                     	ds	2
  1401  000074                     _display_struct_count:
  1402                           	opt stack 0
  1403  000074                     	ds	2
  1404  000076                     _print_data_ready:
  1405                           	opt stack 0
  1406  000076                     	ds	2
  1407  000078                     	ds	2
  1408  00007A                     cmd_consol_task@i:
  1409                           	opt stack 0
  1410  00007A                     	ds	2
  1411  00007C                     strtok@sp:
  1412                           	opt stack 0
  1413  00007C                     	ds	2
  1414  00007E                     _LCD_16x2_DISPLAY:
  1415                           	opt stack 0
  1416  00007E                     	ds	1
  1417  00007F                     _LCD_20x4_DISPLAY:
  1418                           	opt stack 0
  1419  00007F                     	ds	1
  1420  000080                     _check:
  1421                           	opt stack 0
  1422  000080                     	ds	1
  1423  000081                     _clcd_init_col:
  1424                           	opt stack 0
  1425  000081                     	ds	1
  1426  000082                     _cmd_consol_state:
  1427                           	opt stack 0
  1428  000082                     	ds	1
  1429  000083                     _display:
  1430                           	opt stack 0
  1431  000083                     	ds	1
  1432  000084                     _valid_cmd:
  1433                           	opt stack 0
  1434  000084                     	ds	1
  1435  000085                     	ds	1
  1436  000086                     _cmd_data:
  1437                           	opt stack 0
  1438  000086                     	ds	53
  1439  0000BB                     _conflict_arr:
  1440                           	opt stack 0
  1441  0000BB                     	ds	40
  1442  0000E3                     _CMD:
  1443                           	opt stack 0
  1444  0000E3                     	ds	15
  1445                           tblptru	equ	0xFF8
  1446                           tblptrh	equ	0xFF7
  1447                           tblptrl	equ	0xFF6
  1448                           tablat	equ	0xFF5
  1449                           postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           postdec1	equ	0xFE5
  1452                           fsr1h	equ	0xFE2
  1453                           fsr1l	equ	0xFE1
  1454                           
  1455                           	psect	dataBANK0
  1456  0000F9                     __pdataBANK0:
  1457                           	opt stack 0
  1458  0000F9                     _randx:
  1459                           	opt stack 0
  1460  0000F9                     	ds	4
  1461  0000FD                     	ds	1
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           postdec1	equ	0xFE5
  1469                           fsr1h	equ	0xFE2
  1470                           fsr1l	equ	0xFE1
  1471                           
  1472                           	psect	bssBANK1
  1473  000100                     __pbssBANK1:
  1474                           	opt stack 0
  1475  000100                     _lcd_display_array:
  1476                           	opt stack 0
  1477  000100                     	ds	80
  1478  000150                     _str_data:
  1479                           	opt stack 0
  1480  000150                     	ds	40
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1h	equ	0xFE2
  1489                           fsr1l	equ	0xFE1
  1490                           
  1491                           	psect	dataBANK1
  1492  000186                     __pdataBANK1:
  1493                           	opt stack 0
  1494  000186                     _str:
  1495                           	opt stack 0
  1496  000186                     	ds	13
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           postinc0	equ	0xFEE
  1502                           wreg	equ	0xFE8
  1503                           postdec1	equ	0xFE5
  1504                           fsr1h	equ	0xFE2
  1505                           fsr1l	equ	0xFE1
  1506                           
  1507                           	psect	bssBANK2
  1508  000200                     __pbssBANK2:
  1509                           	opt stack 0
  1510  000200                     _uart_str:
  1511                           	opt stack 0
  1512  000200                     	ds	150
  1513                           tblptru	equ	0xFF8
  1514                           tblptrh	equ	0xFF7
  1515                           tblptrl	equ	0xFF6
  1516                           tablat	equ	0xFF5
  1517                           postinc0	equ	0xFEE
  1518                           wreg	equ	0xFE8
  1519                           postdec1	equ	0xFE5
  1520                           fsr1h	equ	0xFE2
  1521                           fsr1l	equ	0xFE1
  1522                           
  1523                           	psect	bssBIGRAM
  1524  000296                     __pbssBIGRAM:
  1525                           	opt stack 0
  1526  000296                     _clcd_display_string_details:
  1527                           	opt stack 0
  1528  000296                     	ds	1100
  1529                           tblptru	equ	0xFF8
  1530                           tblptrh	equ	0xFF7
  1531                           tblptrl	equ	0xFF6
  1532                           tablat	equ	0xFF5
  1533                           postinc0	equ	0xFEE
  1534                           wreg	equ	0xFE8
  1535                           postdec1	equ	0xFE5
  1536                           fsr1h	equ	0xFE2
  1537                           fsr1l	equ	0xFE1
  1538                           
  1539                           	psect	cstackBANK1
  1540  000178                     __pcstackBANK1:
  1541                           	opt stack 0
  1542  000178                     ??_update_string_data:
  1543  000178                     set_string_data@start_point:
  1544                           	opt stack 0
  1545                           
  1546                           ; 1 bytes @ 0x0
  1547  000178                     	ds	1
  1548  000179                     set_string_data@end_point:
  1549                           	opt stack 0
  1550                           
  1551                           ; 1 bytes @ 0x1
  1552  000179                     	ds	1
  1553  00017A                     set_string_data@uid:
  1554                           	opt stack 0
  1555                           
  1556                           ; 1 bytes @ 0x2
  1557  00017A                     	ds	1
  1558  00017B                     set_string_data@conflict_count:
  1559                           	opt stack 0
  1560                           
  1561                           ; 2 bytes @ 0x3
  1562  00017B                     	ds	1
  1563  00017C                     update_string_data@exist_uid_idx:
  1564                           	opt stack 0
  1565                           
  1566                           ; 1 bytes @ 0x4
  1567  00017C                     	ds	1
  1568  00017D                     set_string_data@i:
  1569                           	opt stack 0
  1570  00017D                     update_string_data@start_point:
  1571                           	opt stack 0
  1572                           
  1573                           ; 1 bytes @ 0x5
  1574  00017D                     	ds	1
  1575  00017E                     update_string_data@end_point:
  1576                           	opt stack 0
  1577  00017E                     set_string_data@j:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x6
  1581  00017E                     	ds	1
  1582  00017F                     update_string_data@i:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x7
  1586  00017F                     	ds	2
  1587  000181                     ??_reply_to_host:
  1588                           
  1589                           ; 1 bytes @ 0x9
  1590  000181                     	ds	3
  1591  000184                     ??_cmd_consol_task:
  1592                           
  1593                           ; 1 bytes @ 0xC
  1594  000184                     	ds	1
  1595  000185                     cmd_consol_task@ch:
  1596                           	opt stack 0
  1597                           
  1598                           ; 1 bytes @ 0xD
  1599  000185                     	ds	1
  1600                           tblptru	equ	0xFF8
  1601                           tblptrh	equ	0xFF7
  1602                           tblptrl	equ	0xFF6
  1603                           tablat	equ	0xFF5
  1604                           postinc0	equ	0xFEE
  1605                           wreg	equ	0xFE8
  1606                           postdec1	equ	0xFE5
  1607                           fsr1h	equ	0xFE2
  1608                           fsr1l	equ	0xFE1
  1609                           
  1610                           	psect	cstackBANK0
  1611  0000FE                     __pcstackBANK0:
  1612                           	opt stack 0
  1613  0000FE                     reply_to_host@ch:
  1614                           	opt stack 0
  1615                           
  1616                           ; 1 bytes @ 0x0
  1617  0000FE                     	ds	1
  1618  0000FF                     reply_to_host@ch_1876:
  1619                           	opt stack 0
  1620                           
  1621                           ; 1 bytes @ 0x1
  1622  0000FF                     	ds	1
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postdec1	equ	0xFE5
  1630                           fsr1h	equ	0xFE2
  1631                           fsr1l	equ	0xFE1
  1632                           
  1633                           	psect	cstackCOMRAM
  1634  000001                     __pcstackCOMRAM:
  1635                           	opt stack 0
  1636  000001                     ??_heart_beat:
  1637  000001                     
  1638                           ; 1 bytes @ 0x0
  1639  000001                     	ds	1
  1640  000002                     ??_INTERRUPT_InterruptManager:
  1641  000002                     
  1642                           ; 1 bytes @ 0x1
  1643  000002                     	ds	14
  1644  000010                     ??_isdigit:
  1645  000010                     ?_strcmp:
  1646                           	opt stack 0
  1647  000010                     ?_strchr:
  1648                           	opt stack 0
  1649  000010                     ?_max_display_support:
  1650                           	opt stack 0
  1651  000010                     ?___awdiv:
  1652                           	opt stack 0
  1653  000010                     ?___lwdiv:
  1654                           	opt stack 0
  1655  000010                     ?___lmul:
  1656                           	opt stack 0
  1657  000010                     EUSART1_Read@readValue:
  1658                           	opt stack 0
  1659  000010                     EUSART1_Write@txData:
  1660                           	opt stack 0
  1661  000010                     TMR0_SetInterruptHandler@InterruptHandler:
  1662                           	opt stack 0
  1663  000010                     delay@delay:
  1664                           	opt stack 0
  1665  000010                     __delay_MS@delay:
  1666                           	opt stack 0
  1667  000010                     ___awdiv@dividend:
  1668                           	opt stack 0
  1669  000010                     ___lwdiv@dividend:
  1670                           	opt stack 0
  1671  000010                     memcpy@d1:
  1672                           	opt stack 0
  1673  000010                     srand@x:
  1674                           	opt stack 0
  1675  000010                     strcmp@s1:
  1676                           	opt stack 0
  1677  000010                     strcpy@to:
  1678                           	opt stack 0
  1679  000010                     strncpy@to:
  1680                           	opt stack 0
  1681  000010                     strchr@ptr:
  1682                           	opt stack 0
  1683  000010                     ___lmul@multiplier:
  1684                           	opt stack 0
  1685                           
  1686                           ; 4 bytes @ 0xF
  1687  000010                     	ds	1
  1688  000011                     putch@txData:
  1689                           	opt stack 0
  1690  000011                     _isdigit$2306:
  1691                           	opt stack 0
  1692                           
  1693                           ; 1 bytes @ 0x10
  1694  000011                     	ds	1
  1695  000012                     ??_TMR0_Initialize:
  1696  000012                     ??__delay_MS:
  1697  000012                     ??_delay:
  1698  000012                     isdigit@c:
  1699                           	opt stack 0
  1700  000012                     ___awdiv@divisor:
  1701                           	opt stack 0
  1702  000012                     ___lwdiv@divisor:
  1703                           	opt stack 0
  1704  000012                     memcpy@s1:
  1705                           	opt stack 0
  1706  000012                     strcmp@s2:
  1707                           	opt stack 0
  1708  000012                     strcpy@from:
  1709                           	opt stack 0
  1710  000012                     strncpy@from:
  1711                           	opt stack 0
  1712  000012                     cputs@s:
  1713                           	opt stack 0
  1714  000012                     strchr@chr:
  1715                           	opt stack 0
  1716                           
  1717                           ; 2 bytes @ 0x11
  1718  000012                     	ds	1
  1719  000013                     delay@val:
  1720                           	opt stack 0
  1721  000013                     __delay_MS@val:
  1722                           	opt stack 0
  1723                           
  1724                           ; 2 bytes @ 0x12
  1725  000013                     	ds	1
  1726  000014                     ??_strcmp:
  1727  000014                     ?_strspn:
  1728                           	opt stack 0
  1729  000014                     ?_strcspn:
  1730                           	opt stack 0
  1731  000014                     ___awdiv@counter:
  1732                           	opt stack 0
  1733  000014                     ___lwdiv@counter:
  1734                           	opt stack 0
  1735  000014                     memcpy@n:
  1736                           	opt stack 0
  1737  000014                     puts@s:
  1738                           	opt stack 0
  1739  000014                     strcpy@cp:
  1740                           	opt stack 0
  1741  000014                     strncpy@size:
  1742                           	opt stack 0
  1743  000014                     strcspn@s1:
  1744                           	opt stack 0
  1745  000014                     strspn@s1:
  1746                           	opt stack 0
  1747  000014                     ___lmul@multiplicand:
  1748                           	opt stack 0
  1749                           
  1750                           ; 4 bytes @ 0x13
  1751  000014                     	ds	1
  1752  000015                     ___awdiv@sign:
  1753                           	opt stack 0
  1754  000015                     strcmp@r:
  1755                           	opt stack 0
  1756  000015                     delay@i:
  1757                           	opt stack 0
  1758  000015                     ___lwdiv@quotient:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x14
  1762  000015                     	ds	1
  1763  000016                     ___awdiv@quotient:
  1764                           	opt stack 0
  1765  000016                     memcpy@d:
  1766                           	opt stack 0
  1767  000016                     strncpy@cp:
  1768                           	opt stack 0
  1769  000016                     strcspn@s2:
  1770                           	opt stack 0
  1771  000016                     strspn@s2:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x15
  1775  000016                     	ds	1
  1776  000017                     ?___lwmod:
  1777                           	opt stack 0
  1778  000017                     write_lcd_cmd@cmd:
  1779                           	opt stack 0
  1780  000017                     write_lcd_data@data:
  1781                           	opt stack 0
  1782  000017                     ___lwmod@dividend:
  1783                           	opt stack 0
  1784                           
  1785                           ; 2 bytes @ 0x16
  1786  000017                     	ds	1
  1787  000018                     ??_strspn:
  1788  000018                     ??_strcspn:
  1789  000018                     ?___wmul:
  1790                           	opt stack 0
  1791  000018                     set_cursor@col_number:
  1792                           	opt stack 0
  1793  000018                     write_str@str:
  1794                           	opt stack 0
  1795  000018                     ___wmul@multiplier:
  1796                           	opt stack 0
  1797  000018                     memcpy@s:
  1798                           	opt stack 0
  1799  000018                     ___lmul@product:
  1800                           	opt stack 0
  1801                           
  1802                           ; 4 bytes @ 0x17
  1803  000018                     	ds	1
  1804  000019                     set_cursor@row_number:
  1805                           	opt stack 0
  1806  000019                     ___lwmod@divisor:
  1807                           	opt stack 0
  1808  000019                     strcspn@i:
  1809                           	opt stack 0
  1810  000019                     strspn@i:
  1811                           	opt stack 0
  1812                           
  1813                           ; 2 bytes @ 0x18
  1814  000019                     	ds	1
  1815  00001A                     write_str@i:
  1816                           	opt stack 0
  1817  00001A                     ___wmul@multiplicand:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x19
  1821  00001A                     	ds	1
  1822  00001B                     ?_strtok:
  1823                           	opt stack 0
  1824  00001B                     ___lwmod@counter:
  1825                           	opt stack 0
  1826  00001B                     strtok@s1:
  1827                           	opt stack 0
  1828                           
  1829                           ; 2 bytes @ 0x1A
  1830  00001B                     	ds	1
  1831  00001C                     ?_rand:
  1832                           	opt stack 0
  1833  00001C                     ___wmul@product:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0x1B
  1837  00001C                     	ds	1
  1838  00001D                     strtok@s2:
  1839                           	opt stack 0
  1840                           
  1841                           ; 2 bytes @ 0x1C
  1842  00001D                     	ds	1
  1843  00001E                     ?_printf:
  1844                           	opt stack 0
  1845  00001E                     ?_strlen:
  1846                           	opt stack 0
  1847  00001E                     ?_atoi:
  1848                           	opt stack 0
  1849  00001E                     ?___awmod:
  1850                           	opt stack 0
  1851  00001E                     printf@f:
  1852                           	opt stack 0
  1853  00001E                     atoi@s:
  1854                           	opt stack 0
  1855  00001E                     ___awmod@dividend:
  1856                           	opt stack 0
  1857  00001E                     strlen@s:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x1D
  1861  00001E                     	ds	1
  1862  00001F                     
  1863                           ; 1 bytes @ 0x1E
  1864  00001F                     	ds	1
  1865  000020                     ??_strlen:
  1866  000020                     ??_atoi:
  1867  000020                     ___awmod@divisor:
  1868                           	opt stack 0
  1869                           
  1870                           ; 2 bytes @ 0x1F
  1871  000020                     	ds	2
  1872  000022                     atoi@sign:
  1873                           	opt stack 0
  1874  000022                     ___awmod@counter:
  1875                           	opt stack 0
  1876  000022                     strlen@cp:
  1877                           	opt stack 0
  1878                           
  1879                           ; 2 bytes @ 0x21
  1880  000022                     	ds	1
  1881  000023                     ___awmod@sign:
  1882                           	opt stack 0
  1883  000023                     atoi@a:
  1884                           	opt stack 0
  1885                           
  1886                           ; 2 bytes @ 0x22
  1887  000023                     	ds	1
  1888  000024                     ?_get_new_uid:
  1889                           	opt stack 0
  1890  000024                     scroll_off@clcd_display_string_details:
  1891                           	opt stack 0
  1892  000024                     get_uid@str:
  1893                           	opt stack 0
  1894  000024                     memset@p1:
  1895                           	opt stack 0
  1896                           
  1897                           ; 2 bytes @ 0x23
  1898  000024                     	ds	2
  1899  000026                     ??_printf:
  1900  000026                     ??_get_new_uid:
  1901  000026                     ??_scroll_off:
  1902  000026                     get_uid@data_uid:
  1903                           	opt stack 0
  1904  000026                     memset@c:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x25
  1908  000026                     	ds	1
  1909  000027                     printf@flag:
  1910                           	opt stack 0
  1911                           
  1912                           ; 1 bytes @ 0x26
  1913  000027                     	ds	1
  1914  000028                     ??_get_uid:
  1915  000028                     printf@prec:
  1916                           	opt stack 0
  1917  000028                     memset@n:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x27
  1921  000028                     	ds	1
  1922  000029                     get_new_uid@uid:
  1923                           	opt stack 0
  1924  000029                     printf@cp:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x28
  1928  000029                     	ds	1
  1929  00002A                     scroll_off@k:
  1930                           	opt stack 0
  1931  00002A                     get_uid@i:
  1932                           	opt stack 0
  1933  00002A                     memset@p:
  1934                           	opt stack 0
  1935                           
  1936                           ; 2 bytes @ 0x29
  1937  00002A                     	ds	1
  1938  00002B                     get_new_uid@i:
  1939                           	opt stack 0
  1940  00002B                     printf@ap:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x2A
  1944  00002B                     	ds	1
  1945  00002C                     scroll_off@line:
  1946                           	opt stack 0
  1947  00002C                     scroll_left_to_right@clcd_display_string_details:
  1948                           	opt stack 0
  1949  00002C                     scroll_right_to_left@clcd_display_string_details:
  1950                           	opt stack 0
  1951  00002C                     get_uid@uid:
  1952                           	opt stack 0
  1953  00002C                     get_str@str:
  1954                           	opt stack 0
  1955                           
  1956                           ; 2 bytes @ 0x2B
  1957  00002C                     	ds	1
  1958  00002D                     scroll_off@display_char_count:
  1959                           	opt stack 0
  1960  00002D                     printf@val:
  1961                           	opt stack 0
  1962                           
  1963                           ; 2 bytes @ 0x2C
  1964  00002D                     	ds	1
  1965  00002E                     ??_scroll_left_to_right:
  1966  00002E                     ??_scroll_right_to_left:
  1967  00002E                     scroll_off@str_len:
  1968                           	opt stack 0
  1969  00002E                     get_str@data_str:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x2D
  1973  00002E                     	ds	1
  1974  00002F                     printf@c:
  1975                           	opt stack 0
  1976  00002F                     scroll_off@j:
  1977                           	opt stack 0
  1978                           
  1979                           ; 2 bytes @ 0x2E
  1980  00002F                     	ds	1
  1981  000030                     ??_print_conflict_ids:
  1982  000030                     init_clcd_cusotom_lcd@clcd_init_col:
  1983                           	opt stack 0
  1984  000030                     conflict_check@new_start_point:
  1985                           	opt stack 0
  1986  000030                     conflict@new_end_point:
  1987                           	opt stack 0
  1988  000030                     copy_data@clcd_str_data:
  1989                           	opt stack 0
  1990  000030                     copy_display_struct@clcd_str_data:
  1991                           	opt stack 0
  1992  000030                     collect_row@str:
  1993                           	opt stack 0
  1994  000030                     get_direction@str:
  1995                           	opt stack 0
  1996  000030                     get_dis_frq@str:
  1997                           	opt stack 0
  1998  000030                     get_over_write_data@str:
  1999                           	opt stack 0
  2000  000030                     collect_column@str:
  2001                           	opt stack 0
  2002                           
  2003                           ; 2 bytes @ 0x2F
  2004  000030                     	ds	1
  2005  000031                     ??_conflict:
  2006  000031                     init_clcd_cusotom_lcd@clcd_init_row:
  2007                           	opt stack 0
  2008  000031                     conflict_check@new_end_point:
  2009                           	opt stack 0
  2010  000031                     scroll_off@i:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x30
  2014  000031                     	ds	1
  2015  000032                     ??_conflict_check:
  2016  000032                     copy_data@data:
  2017                           	opt stack 0
  2018  000032                     copy_display_struct@data:
  2019                           	opt stack 0
  2020  000032                     collect_row@data_row:
  2021                           	opt stack 0
  2022  000032                     get_direction@data_direction:
  2023                           	opt stack 0
  2024  000032                     get_dis_frq@data_frq:
  2025                           	opt stack 0
  2026  000032                     get_over_write_data@over_write_data:
  2027                           	opt stack 0
  2028  000032                     collect_column@data_column:
  2029                           	opt stack 0
  2030                           
  2031                           ; 2 bytes @ 0x31
  2032  000032                     	ds	2
  2033  000034                     ??_copy_data:
  2034  000034                     ??_collect_row:
  2035  000034                     ??_get_direction:
  2036  000034                     ??_get_dis_frq:
  2037  000034                     ??_get_over_write_data:
  2038  000034                     ??_collect_column:
  2039  000034                     conflict@conflict:
  2040                           	opt stack 0
  2041  000034                     copy_display_struct@uid:
  2042                           	opt stack 0
  2043  000034                     print_conflict_ids@conflict_count:
  2044                           	opt stack 0
  2045                           
  2046                           ; 2 bytes @ 0x33
  2047  000034                     	ds	1
  2048  000035                     ??_copy_display_struct:
  2049  000035                     conflict_check@exist_uid_idx:
  2050                           	opt stack 0
  2051  000035                     conflict@new_start_point:
  2052                           	opt stack 0
  2053  000035                     get_dis_frq@frq:
  2054                           	opt stack 0
  2055  000035                     get_over_write_data@over_write:
  2056                           	opt stack 0
  2057  000035                     collect_row@i:
  2058                           	opt stack 0
  2059  000035                     get_direction@i:
  2060                           	opt stack 0
  2061  000035                     collect_column@i:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x34
  2065  000035                     	ds	1
  2066  000036                     conflict_check@conflict:
  2067                           	opt stack 0
  2068  000036                     scroll_left_to_right@line:
  2069                           	opt stack 0
  2070  000036                     conflict@i:
  2071                           	opt stack 0
  2072  000036                     get_dis_frq@i:
  2073                           	opt stack 0
  2074  000036                     get_over_write_data@i:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x35
  2078  000036                     	ds	1
  2079  000037                     collect_row@row:
  2080                           	opt stack 0
  2081  000037                     get_direction@direction:
  2082                           	opt stack 0
  2083  000037                     collect_column@column:
  2084                           	opt stack 0
  2085  000037                     conflict_check@i:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x36
  2089  000037                     	ds	1
  2090  000038                     set_string_data@data:
  2091                           	opt stack 0
  2092  000038                     parse_cmd_str@str:
  2093                           	opt stack 0
  2094                           
  2095                           ; 2 bytes @ 0x37
  2096  000038                     	ds	1
  2097  000039                     scroll_right_to_left@line:
  2098                           	opt stack 0
  2099                           
  2100                           ; 1 bytes @ 0x38
  2101  000039                     	ds	1
  2102  00003A                     ??_make_display:
  2103  00003A                     ??_set_string_data:
  2104  00003A                     parse_cmd_str@ptr:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x39
  2108  00003A                     	ds	2
  2109  00003C                     parse_cmd_str@row:
  2110                           	opt stack 0
  2111                           
  2112                           ; 1 bytes @ 0x3B
  2113  00003C                     	ds	1
  2114  00003D                     parse_cmd_str@column:
  2115                           	opt stack 0
  2116  00003D                     make_display@count:
  2117                           	opt stack 0
  2118                           
  2119                           ; 2 bytes @ 0x3C
  2120  00003D                     	ds	1
  2121  00003E                     parse_cmd_str@temp:
  2122                           	opt stack 0
  2123                           
  2124                           ; 2 bytes @ 0x3D
  2125  00003E                     	ds	1
  2126  00003F                     update_string_data@data:
  2127                           	opt stack 0
  2128                           
  2129                           ; 2 bytes @ 0x3E
  2130  00003F                     	ds	2
  2131  000041                     tblptru	equ	0xFF8
  2132                           tblptrh	equ	0xFF7
  2133                           tblptrl	equ	0xFF6
  2134                           tablat	equ	0xFF5
  2135                           postinc0	equ	0xFEE
  2136                           wreg	equ	0xFE8
  2137                           postdec1	equ	0xFE5
  2138                           fsr1h	equ	0xFE2
  2139                           fsr1l	equ	0xFE1
  2140                           
  2141                           ; 1 bytes @ 0x40
  2142 ;;
  2143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2144 ;;
  2145 ;; *************** function _main *****************
  2146 ;; Defined at:
  2147 ;;		line 77 in file "main.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;		None
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;		None
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2165 ;;Total ram usage:        0 bytes
  2166 ;; Hardware stack levels required when called:   14
  2167 ;; This function calls:
  2168 ;;		_SYSTEM_Initialize
  2169 ;;		_TMR0_SetInterruptHandler
  2170 ;;		_TMR0_StartTimer
  2171 ;;		_TMR0_StopTimer
  2172 ;;		_TMR1_StopTimer
  2173 ;;		_TMR5_StopTimer
  2174 ;;		__delay_MS
  2175 ;;		_cmd_consol_task
  2176 ;;		_console_init
  2177 ;;		_make_display
  2178 ;;		_printf
  2179 ;; This function is called by:
  2180 ;;		Startup code after reset
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text0
  2185  003986                     __ptext0:
  2186                           	opt stack 0
  2187  003986                     _main:
  2188                           	opt stack 17
  2189                           
  2190                           ;main.c: 80: SYSTEM_Initialize();
  2191                           
  2192                           ;incstack = 0
  2193  003986  EC5E  F020         	call	_SYSTEM_Initialize	;wreg free
  2194                           
  2195                           ;main.c: 81: TMR5_StopTimer();
  2196  00398A  EC23  F021         	call	_TMR5_StopTimer	;wreg free
  2197                           
  2198                           ;main.c: 82: TMR1_StopTimer();
  2199  00398E  EC2C  F021         	call	_TMR1_StopTimer	;wreg free
  2200                           
  2201                           ;main.c: 83: TMR0_StopTimer();
  2202  003992  EC2E  F021         	call	_TMR0_StopTimer	;wreg free
  2203                           
  2204                           ;main.c: 85: TMR0_SetInterruptHandler(make_array);
  2205  003996  0E04               	movlw	low _make_array
  2206  003998  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  2207  00399A  0E42               	movlw	high _make_array
  2208  00399C  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  2209  00399E  EC17  F021         	call	_TMR0_SetInterruptHandler	;wreg free
  2210                           
  2211                           ;main.c: 105: (INTCONbits.GIE = 1);
  2212  0039A2  8EF2               	bsf	intcon,7,c	;volatile
  2213                           
  2214                           ;main.c: 111: (INTCONbits.PEIE = 1);
  2215  0039A4  8CF2               	bsf	intcon,6,c	;volatile
  2216                           
  2217                           ;main.c: 115: console_init();
  2218  0039A6  ECC0  F01B         	call	_console_init	;wreg free
  2219                           
  2220                           ;main.c: 116: _delay_MS(1000);
  2221  0039AA  0E03               	movlw	3
  2222  0039AC  6E11               	movwf	__delay_MS@delay+1,c
  2223  0039AE  0EE8               	movlw	232
  2224  0039B0  6E10               	movwf	__delay_MS@delay,c
  2225  0039B2  EC2E  F01E         	call	__delay_MS	;wreg free
  2226                           
  2227                           ;main.c: 118: printf("Init_complete..\r\n");
  2228  0039B6  0ECB               	movlw	low STR_137
  2229  0039B8  6E1E               	movwf	printf@f,c
  2230  0039BA  0EFD               	movlw	high STR_137
  2231  0039BC  6E1F               	movwf	printf@f+1,c
  2232  0039BE  EC03  F015         	call	_printf	;wreg free
  2233                           
  2234                           ;main.c: 133: TMR0_StartTimer();
  2235  0039C2  EC32  F021         	call	_TMR0_StartTimer	;wreg free
  2236  0039C6                     l8708:
  2237                           
  2238                           ;main.c: 137: {
  2239                           ;main.c: 139: cmd_consol_task();
  2240  0039C6  EC11  F011         	call	_cmd_consol_task	;wreg free
  2241                           
  2242                           ;main.c: 140: if(display == 1){make_display();display = 0;}
  2243  0039CA  0100               	movlb	0	; () banked
  2244  0039CC  0583               	decf	_display& (0+255),w,b
  2245  0039CE  A4D8               	btfss	status,2,c
  2246  0039D0  D7FA               	goto	l8708
  2247                           
  2248                           ; BSR set to: 0
  2249  0039D2  EC12  F014         	call	_make_display	;wreg free
  2250  0039D6  0E00               	movlw	0
  2251  0039D8  0100               	movlb	0	; () banked
  2252  0039DA  6F83               	movwf	_display& (0+255),b
  2253                           
  2254                           ; BSR set to: 0
  2255                           
  2256                           ; BSR set to: 0
  2257  0039DC  D7F4               	goto	l8708
  2258  0039DE                     __end_of_main:
  2259                           	opt stack 0
  2260                           tblptru	equ	0xFF8
  2261                           tblptrh	equ	0xFF7
  2262                           tblptrl	equ	0xFF6
  2263                           tablat	equ	0xFF5
  2264                           intcon	equ	0xFF2
  2265                           postinc0	equ	0xFEE
  2266                           wreg	equ	0xFE8
  2267                           postdec1	equ	0xFE5
  2268                           fsr1h	equ	0xFE2
  2269                           fsr1l	equ	0xFE1
  2270                           status	equ	0xFD8
  2271                           
  2272 ;; *************** function _console_init *****************
  2273 ;; Defined at:
  2274 ;;		line 486 in file "cmd_consol.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;		None
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;		None
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  1    wreg      void 
  2281 ;; Registers used:
  2282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;Total ram usage:        0 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; Hardware stack levels required when called:    7
  2295 ;; This function calls:
  2296 ;;		_clear_cmd_data
  2297 ;;		_memset
  2298 ;; This function is called by:
  2299 ;;		_main
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           	psect	text1
  2304  003780                     __ptext1:
  2305                           	opt stack 0
  2306  003780                     _console_init:
  2307                           	opt stack 23
  2308                           
  2309                           ;cmd_consol.c: 487: cmd_consol_state = CMD_CONSOL_INIT;
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;incstack = 0
  2313  003780  0E00               	movlw	0
  2314  003782  0100               	movlb	0	; () banked
  2315  003784  6F82               	movwf	_cmd_consol_state& (0+255),b
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;cmd_consol.c: 488: clear_cmd_data();
  2319  003786  EC5B  F01F         	call	_clear_cmd_data	;wreg free
  2320                           
  2321                           ;cmd_consol.c: 489: valid_cmd = 0;
  2322  00378A  0E00               	movlw	0
  2323  00378C  0100               	movlb	0	; () banked
  2324  00378E  6F84               	movwf	_valid_cmd& (0+255),b
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;cmd_consol.c: 490: clcd_init_row = 0;
  2328  003790  0E00               	movlw	0
  2329  003792  6E41               	movwf	_clcd_init_row,c
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;cmd_consol.c: 491: clcd_init_col = 0;
  2333  003794  0E00               	movlw	0
  2334  003796  0100               	movlb	0	; () banked
  2335  003798  6F81               	movwf	_clcd_init_col& (0+255),b
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;cmd_consol.c: 492: check = 0;
  2339  00379A  0E00               	movlw	0
  2340  00379C  0100               	movlb	0	; () banked
  2341  00379E  6F80               	movwf	_check& (0+255),b
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;cmd_consol.c: 493: memset(CMD, 0, sizeof (CMD));
  2345  0037A0  0EE3               	movlw	low _CMD
  2346  0037A2  6E24               	movwf	memset@p1,c
  2347  0037A4  0E00               	movlw	high _CMD
  2348  0037A6  6E25               	movwf	memset@p1+1,c
  2349  0037A8  0E00               	movlw	0
  2350  0037AA  6E27               	movwf	memset@c+1,c
  2351  0037AC  0E00               	movlw	0
  2352  0037AE  6E26               	movwf	memset@c,c
  2353  0037B0  0E00               	movlw	0
  2354  0037B2  6E29               	movwf	memset@n+1,c
  2355  0037B4  0E0F               	movlw	15
  2356  0037B6  6E28               	movwf	memset@n,c
  2357  0037B8  ECBB  F01F         	call	_memset	;wreg free
  2358                           
  2359                           ;cmd_consol.c: 494: memset(str_data, 0, sizeof (str_data));
  2360  0037BC  0E50               	movlw	low _str_data
  2361  0037BE  6E24               	movwf	memset@p1,c
  2362  0037C0  0E01               	movlw	high _str_data
  2363  0037C2  6E25               	movwf	memset@p1+1,c
  2364  0037C4  0E00               	movlw	0
  2365  0037C6  6E27               	movwf	memset@c+1,c
  2366  0037C8  0E00               	movlw	0
  2367  0037CA  6E26               	movwf	memset@c,c
  2368  0037CC  0E00               	movlw	0
  2369  0037CE  6E29               	movwf	memset@n+1,c
  2370  0037D0  0E28               	movlw	40
  2371  0037D2  6E28               	movwf	memset@n,c
  2372  0037D4  ECBB  F01F         	call	_memset	;wreg free
  2373                           
  2374                           ;cmd_consol.c: 495: memset(uart_str, 0, sizeof (uart_str));
  2375  0037D8  0E00               	movlw	low _uart_str
  2376  0037DA  6E24               	movwf	memset@p1,c
  2377  0037DC  0E02               	movlw	high _uart_str
  2378  0037DE  6E25               	movwf	memset@p1+1,c
  2379  0037E0  0E00               	movlw	0
  2380  0037E2  6E27               	movwf	memset@c+1,c
  2381  0037E4  0E00               	movlw	0
  2382  0037E6  6E26               	movwf	memset@c,c
  2383  0037E8  0E00               	movlw	0
  2384  0037EA  6E29               	movwf	memset@n+1,c
  2385  0037EC  0E96               	movlw	150
  2386  0037EE  6E28               	movwf	memset@n,c
  2387  0037F0  ECBB  F01F         	call	_memset	;wreg free
  2388  0037F4  0012               	return		;funcret
  2389  0037F6                     __end_of_console_init:
  2390                           	opt stack 0
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           intcon	equ	0xFF2
  2396                           postinc0	equ	0xFEE
  2397                           wreg	equ	0xFE8
  2398                           postdec1	equ	0xFE5
  2399                           fsr1h	equ	0xFE2
  2400                           fsr1l	equ	0xFE1
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _cmd_consol_task *****************
  2404 ;; Defined at:
  2405 ;;		line 498 in file "cmd_consol.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;		None
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  ch              1   13[BANK1 ] unsigned char 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      void 
  2412 ;; Registers used:
  2413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;Total ram usage:        2 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; Hardware stack levels required when called:   13
  2426 ;; This function calls:
  2427 ;;		_getch
  2428 ;;		_memset
  2429 ;;		_parse_cmd_str
  2430 ;;		_printf
  2431 ;;		_puts
  2432 ;;		_reply_to_host
  2433 ;;		_strcmp
  2434 ;; This function is called by:
  2435 ;;		_main
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text2
  2440  002222                     __ptext2:
  2441                           	opt stack 0
  2442  002222                     _cmd_consol_task:
  2443                           	opt stack 17
  2444                           
  2445                           ;cmd_consol.c: 499: if ((eusart1RxCount) > 0) {
  2446                           
  2447                           ;incstack = 0
  2448  002222  5044               	movf	_eusart1RxCount,w,c	;volatile
  2449  002224  B4D8               	btfsc	status,2,c
  2450  002226  D0FF               	goto	l8586
  2451                           
  2452                           ;cmd_consol.c: 500: static int i = 0;
  2453                           ;cmd_consol.c: 501: unsigned char ch = 0;
  2454  002228  0E00               	movlw	0
  2455  00222A  0101               	movlb	1	; () banked
  2456  00222C  6F85               	movwf	cmd_consol_task@ch& (0+255),b
  2457                           
  2458                           ;cmd_consol.c: 502: while ((eusart1RxCount)) {
  2459  00222E  D07E               	goto	l8548
  2460  002230                     l8516:
  2461                           
  2462                           ;cmd_consol.c: 503: ch = getch();
  2463  002230  EC20  F021         	call	_getch	;wreg free
  2464  002234  0101               	movlb	1	; () banked
  2465  002236  6F85               	movwf	cmd_consol_task@ch& (0+255),b
  2466                           
  2467                           ; BSR set to: 1
  2468                           ;cmd_consol.c: 504: if (ch == '\n' || ch == '\r') {
  2469  002238  0E0A               	movlw	10
  2470  00223A  0101               	movlb	1	; () banked
  2471  00223C  1985               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2472  00223E  B4D8               	btfsc	status,2,c
  2473  002240  D005               	goto	l8522
  2474                           
  2475                           ; BSR set to: 1
  2476  002242  0E0D               	movlw	13
  2477  002244  0101               	movlb	1	; () banked
  2478  002246  1985               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2479  002248  A4D8               	btfss	status,2,c
  2480  00224A  D00F               	goto	l8528
  2481  00224C                     l8522:
  2482                           
  2483                           ; BSR set to: 1
  2484                           ;cmd_consol.c: 505: i = 0;
  2485  00224C  0E00               	movlw	0
  2486  00224E  0100               	movlb	0	; () banked
  2487  002250  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2488  002252  0E00               	movlw	0
  2489  002254  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2490                           
  2491                           ;cmd_consol.c: 506: check = 1;
  2492  002256  0E01               	movlw	1
  2493  002258  0100               	movlb	0	; () banked
  2494  00225A  6F80               	movwf	_check& (0+255),b
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;cmd_consol.c: 507: printf("\r\n");
  2498  00225C  0EEC               	movlw	low (STR_16+27)
  2499  00225E  6E1E               	movwf	printf@f,c
  2500  002260  0EFC               	movlw	high (STR_16+27)
  2501  002262  6E1F               	movwf	printf@f+1,c
  2502  002264  EC03  F015         	call	_printf	;wreg free
  2503                           
  2504                           ;cmd_consol.c: 508: break;
  2505  002268  D064               	goto	l8550
  2506  00226A                     l8528:
  2507  00226A  0E08               	movlw	8
  2508  00226C  0101               	movlb	1	; () banked
  2509  00226E  1985               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2510  002270  A4D8               	btfss	status,2,c
  2511  002272  D018               	goto	l8536
  2512                           
  2513                           ; BSR set to: 1
  2514                           ;cmd_consol.c: 510: uart_str[--i] = 0;
  2515  002274  0100               	movlb	0	; () banked
  2516  002276  077A               	decf	cmd_consol_task@i& (0+255),f,b
  2517  002278  A0D8               	btfss	status,0,c
  2518  00227A  077B               	decf	(cmd_consol_task@i+1)& (0+255),f,b
  2519  00227C  0E00               	movlw	low _uart_str
  2520  00227E  0100               	movlb	0	; () banked
  2521  002280  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2522  002282  6ED9               	movwf	fsr2l,c
  2523  002284  0E02               	movlw	high _uart_str
  2524  002286  0100               	movlb	0	; () banked
  2525  002288  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2526  00228A  6EDA               	movwf	fsr2h,c
  2527  00228C  0E00               	movlw	0
  2528  00228E  6EDF               	movwf	indf2,c
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;cmd_consol.c: 511: printf("%c", ch);
  2532  002290  0EFA               	movlw	low STR_130
  2533  002292  6E1E               	movwf	printf@f,c
  2534  002294  0EFF               	movlw	high STR_130
  2535  002296  6E1F               	movwf	printf@f+1,c
  2536  002298  C185  F020         	movff	cmd_consol_task@ch,?_printf+2
  2537  00229C  6A21               	clrf	?_printf+3,c
  2538  00229E  EC03  F015         	call	_printf	;wreg free
  2539                           
  2540                           ;cmd_consol.c: 512: continue;
  2541  0022A2  D044               	goto	l8548
  2542  0022A4                     l8536:
  2543                           
  2544                           ;cmd_consol.c: 514: uart_str[i] = ch;
  2545  0022A4  0E00               	movlw	low _uart_str
  2546  0022A6  0100               	movlb	0	; () banked
  2547  0022A8  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2548  0022AA  6ED9               	movwf	fsr2l,c
  2549  0022AC  0E02               	movlw	high _uart_str
  2550  0022AE  0100               	movlb	0	; () banked
  2551  0022B0  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2552  0022B2  6EDA               	movwf	fsr2h,c
  2553  0022B4  C185  FFDF         	movff	cmd_consol_task@ch,indf2
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;cmd_consol.c: 515: printf("%c", uart_str[i]);
  2557  0022B8  0EFA               	movlw	low STR_130
  2558  0022BA  6E1E               	movwf	printf@f,c
  2559  0022BC  0EFF               	movlw	high STR_130
  2560  0022BE  6E1F               	movwf	printf@f+1,c
  2561  0022C0  0E00               	movlw	low _uart_str
  2562  0022C2  0100               	movlb	0	; () banked
  2563  0022C4  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2564  0022C6  6ED9               	movwf	fsr2l,c
  2565  0022C8  0E02               	movlw	high _uart_str
  2566  0022CA  0100               	movlb	0	; () banked
  2567  0022CC  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2568  0022CE  6EDA               	movwf	fsr2h,c
  2569  0022D0  50DF               	movf	indf2,w,c
  2570  0022D2  0101               	movlb	1	; () banked
  2571  0022D4  6F84               	movwf	??_cmd_consol_task& (0+255),b
  2572  0022D6  0101               	movlb	1	; () banked
  2573  0022D8  5184               	movf	??_cmd_consol_task& (0+255),w,b
  2574  0022DA  6E20               	movwf	?_printf+2,c
  2575  0022DC  6A21               	clrf	?_printf+3,c
  2576  0022DE  EC03  F015         	call	_printf	;wreg free
  2577                           
  2578                           ;cmd_consol.c: 516: }
  2579                           ;cmd_consol.c: 517: if (strcmp(uart_str, "KLM+") == 0) {
  2580  0022E2  0E00               	movlw	low _uart_str
  2581  0022E4  6E10               	movwf	strcmp@s1,c
  2582  0022E6  0E02               	movlw	high _uart_str
  2583  0022E8  6E11               	movwf	strcmp@s1+1,c
  2584  0022EA  0ECD               	movlw	low STR_132
  2585  0022EC  6E12               	movwf	strcmp@s2,c
  2586  0022EE  0EFF               	movlw	high STR_132
  2587  0022F0  6E13               	movwf	strcmp@s2+1,c
  2588  0022F2  ECE4  F01D         	call	_strcmp	;wreg free
  2589  0022F6  5010               	movf	?_strcmp,w,c
  2590  0022F8  1011               	iorwf	?_strcmp+1,w,c
  2591  0022FA  A4D8               	btfss	status,2,c
  2592  0022FC  D014               	goto	l8546
  2593                           
  2594                           ;cmd_consol.c: 518: memset(uart_str, 0, sizeof (uart_str));
  2595  0022FE  0E00               	movlw	low _uart_str
  2596  002300  6E24               	movwf	memset@p1,c
  2597  002302  0E02               	movlw	high _uart_str
  2598  002304  6E25               	movwf	memset@p1+1,c
  2599  002306  0E00               	movlw	0
  2600  002308  6E27               	movwf	memset@c+1,c
  2601  00230A  0E00               	movlw	0
  2602  00230C  6E26               	movwf	memset@c,c
  2603  00230E  0E00               	movlw	0
  2604  002310  6E29               	movwf	memset@n+1,c
  2605  002312  0E96               	movlw	150
  2606  002314  6E28               	movwf	memset@n,c
  2607  002316  ECBB  F01F         	call	_memset	;wreg free
  2608                           
  2609                           ;cmd_consol.c: 519: i = 0;
  2610  00231A  0E00               	movlw	0
  2611  00231C  0100               	movlb	0	; () banked
  2612  00231E  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2613  002320  0E00               	movlw	0
  2614  002322  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2615                           
  2616                           ;cmd_consol.c: 520: continue;
  2617  002324  D003               	goto	l8548
  2618  002326                     l8546:
  2619                           
  2620                           ;cmd_consol.c: 521: }
  2621                           ;cmd_consol.c: 522: i++;
  2622  002326  0100               	movlb	0	; () banked
  2623  002328  4B7A               	infsnz	cmd_consol_task@i& (0+255),f,b
  2624  00232A  2B7B               	incf	(cmd_consol_task@i+1)& (0+255),f,b
  2625  00232C                     l8548:
  2626  00232C  5044               	movf	_eusart1RxCount,w,c	;volatile
  2627  00232E  A4D8               	btfss	status,2,c
  2628  002330  D77F               	goto	l8516
  2629  002332                     l8550:
  2630                           
  2631                           ;cmd_consol.c: 523: }
  2632                           ;cmd_consol.c: 524: if (i > 150) {
  2633  002332  0100               	movlb	0	; () banked
  2634  002334  BF7B               	btfsc	(cmd_consol_task@i+1)& (0+255),7,b
  2635  002336  D077               	goto	l8586
  2636  002338  0100               	movlb	0	; () banked
  2637  00233A  517B               	movf	(cmd_consol_task@i+1)& (0+255),w,b
  2638  00233C  E105               	bnz	u8400
  2639  00233E  0E97               	movlw	151
  2640  002340  0100               	movlb	0	; () banked
  2641  002342  5D7A               	subwf	cmd_consol_task@i& (0+255),w,b
  2642  002344  A0D8               	btfss	status,0,c
  2643  002346  D06F               	goto	l8586
  2644  002348                     u8400:
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;cmd_consol.c: 525: puts("ERR_CMD_LEN");
  2648  002348  0EEB               	movlw	low STR_133
  2649  00234A  6E14               	movwf	puts@s,c
  2650  00234C  0EFE               	movlw	high STR_133
  2651  00234E  6E15               	movwf	puts@s+1,c
  2652  002350  ECA3  F020         	call	_puts	;wreg free
  2653                           
  2654                           ;cmd_consol.c: 526: i = 0;
  2655  002354  0E00               	movlw	0
  2656  002356  0100               	movlb	0	; () banked
  2657  002358  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2658  00235A  0E00               	movlw	0
  2659  00235C  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;cmd_consol.c: 527: }
  2663                           ;cmd_consol.c: 528: }
  2664                           ;cmd_consol.c: 529: switch (cmd_consol_state) {
  2665                           
  2666                           ; BSR set to: 0
  2667  00235E  D063               	goto	l8586
  2668  002360                     l8556:
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;cmd_consol.c: 531: {
  2672                           ;cmd_consol.c: 532: memset(CMD, 0, sizeof (CMD));
  2673  002360  0EE3               	movlw	low _CMD
  2674  002362  6E24               	movwf	memset@p1,c
  2675  002364  0E00               	movlw	high _CMD
  2676  002366  6E25               	movwf	memset@p1+1,c
  2677  002368  0E00               	movlw	0
  2678  00236A  6E27               	movwf	memset@c+1,c
  2679  00236C  0E00               	movlw	0
  2680  00236E  6E26               	movwf	memset@c,c
  2681  002370  0E00               	movlw	0
  2682  002372  6E29               	movwf	memset@n+1,c
  2683  002374  0E0F               	movlw	15
  2684  002376  6E28               	movwf	memset@n,c
  2685  002378  ECBB  F01F         	call	_memset	;wreg free
  2686                           
  2687                           ;cmd_consol.c: 533: memset(uart_str, 0, sizeof (uart_str));
  2688  00237C  0E00               	movlw	low _uart_str
  2689  00237E  6E24               	movwf	memset@p1,c
  2690  002380  0E02               	movlw	high _uart_str
  2691  002382  6E25               	movwf	memset@p1+1,c
  2692  002384  0E00               	movlw	0
  2693  002386  6E27               	movwf	memset@c+1,c
  2694  002388  0E00               	movlw	0
  2695  00238A  6E26               	movwf	memset@c,c
  2696  00238C  0E00               	movlw	0
  2697  00238E  6E29               	movwf	memset@n+1,c
  2698  002390  0E96               	movlw	150
  2699  002392  6E28               	movwf	memset@n,c
  2700  002394  ECBB  F01F         	call	_memset	;wreg free
  2701                           
  2702                           ;cmd_consol.c: 534: valid_cmd = 0;
  2703  002398  0E00               	movlw	0
  2704  00239A  0100               	movlb	0	; () banked
  2705  00239C  6F84               	movwf	_valid_cmd& (0+255),b
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;cmd_consol.c: 535: puts("Init_Done\r\n");
  2709  00239E  0EAF               	movlw	low STR_134
  2710  0023A0  6E14               	movwf	puts@s,c
  2711  0023A2  0EFE               	movlw	high STR_134
  2712  0023A4  6E15               	movwf	puts@s+1,c
  2713  0023A6  ECA3  F020         	call	_puts	;wreg free
  2714                           
  2715                           ;cmd_consol.c: 536: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2716  0023AA  0E01               	movlw	1
  2717  0023AC  0100               	movlb	0	; () banked
  2718  0023AE  6F82               	movwf	_cmd_consol_state& (0+255),b
  2719                           
  2720                           ;cmd_consol.c: 537: break;
  2721  0023B0  0012               	return	
  2722  0023B2                     l8564:
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;cmd_consol.c: 540: {
  2726                           ;cmd_consol.c: 541: static int i = 0;
  2727                           ;cmd_consol.c: 543: if (check == 1) {
  2728  0023B2  0100               	movlb	0	; () banked
  2729  0023B4  0580               	decf	_check& (0+255),w,b
  2730  0023B6  A4D8               	btfss	status,2,c
  2731  0023B8  0012               	return	
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;cmd_consol.c: 544: check = 0;
  2735  0023BA  0E00               	movlw	0
  2736  0023BC  0100               	movlb	0	; () banked
  2737  0023BE  6F80               	movwf	_check& (0+255),b
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;cmd_consol.c: 545: if (parse_cmd_str(uart_str) == 0) {
  2741  0023C0  0E00               	movlw	low _uart_str
  2742  0023C2  6E38               	movwf	parse_cmd_str@str,c
  2743  0023C4  0E02               	movlw	high _uart_str
  2744  0023C6  6E39               	movwf	parse_cmd_str@str+1,c
  2745  0023C8  EC55  F000         	call	_parse_cmd_str	;wreg free
  2746  0023CC  0900               	iorlw	0
  2747  0023CE  A4D8               	btfss	status,2,c
  2748  0023D0  D012               	goto	l8574
  2749                           
  2750                           ;cmd_consol.c: 546: memset(uart_str, 0, sizeof (uart_str));
  2751  0023D2  0E00               	movlw	low _uart_str
  2752  0023D4  6E24               	movwf	memset@p1,c
  2753  0023D6  0E02               	movlw	high _uart_str
  2754  0023D8  6E25               	movwf	memset@p1+1,c
  2755  0023DA  0E00               	movlw	0
  2756  0023DC  6E27               	movwf	memset@c+1,c
  2757  0023DE  0E00               	movlw	0
  2758  0023E0  6E26               	movwf	memset@c,c
  2759  0023E2  0E00               	movlw	0
  2760  0023E4  6E29               	movwf	memset@n+1,c
  2761  0023E6  0E96               	movlw	150
  2762  0023E8  6E28               	movwf	memset@n,c
  2763  0023EA  ECBB  F01F         	call	_memset	;wreg free
  2764                           
  2765                           ;cmd_consol.c: 547: cmd_consol_state = CMD_CONSOL_REPLY_HOST;
  2766  0023EE  0E02               	movlw	2
  2767  0023F0  0100               	movlb	0	; () banked
  2768  0023F2  6F82               	movwf	_cmd_consol_state& (0+255),b
  2769                           
  2770                           ;cmd_consol.c: 548: } else {
  2771  0023F4  0012               	return	
  2772  0023F6                     l8574:
  2773                           
  2774                           ;cmd_consol.c: 549: printf("%s\r\n", "ERROR");
  2775  0023F6  0E1F               	movlw	low (STR_89+6)
  2776  0023F8  6E1E               	movwf	printf@f,c
  2777  0023FA  0EFF               	movlw	high (STR_89+6)
  2778  0023FC  6E1F               	movwf	printf@f+1,c
  2779  0023FE  0EC1               	movlw	low STR_113
  2780  002400  6E20               	movwf	?_printf+2,c
  2781  002402  0EFF               	movlw	high STR_113
  2782  002404  6E21               	movwf	?_printf+3,c
  2783  002406  EC03  F015         	call	_printf	;wreg free
  2784                           
  2785                           ;cmd_consol.c: 550: }
  2786                           ;cmd_consol.c: 551: }
  2787                           ;cmd_consol.c: 552: break;
  2788  00240A  0012               	return	
  2789  00240C                     l8576:
  2790                           
  2791                           ;cmd_consol.c: 555: {
  2792                           ;cmd_consol.c: 556: if (valid_cmd == 1) {
  2793  00240C  0100               	movlb	0	; () banked
  2794  00240E  0584               	decf	_valid_cmd& (0+255),w,b
  2795  002410  A4D8               	btfss	status,2,c
  2796  002412  D005               	goto	l8582
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;cmd_consol.c: 557: reply_to_host();
  2800  002414  EC4C  F006         	call	_reply_to_host	;wreg free
  2801                           
  2802                           ;cmd_consol.c: 558: valid_cmd = 0;
  2803  002418  0E00               	movlw	0
  2804  00241A  0100               	movlb	0	; () banked
  2805  00241C  6F84               	movwf	_valid_cmd& (0+255),b
  2806  00241E                     l8582:
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;cmd_consol.c: 560: }
  2810                           ;cmd_consol.c: 561: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2811  00241E  0E01               	movlw	1
  2812  002420  0100               	movlb	0	; () banked
  2813  002422  6F82               	movwf	_cmd_consol_state& (0+255),b
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;cmd_consol.c: 563: }
  2817                           ;cmd_consol.c: 564: }
  2818                           
  2819                           ;cmd_consol.c: 562: break;
  2820  002424  0012               	return	
  2821  002426                     l8586:
  2822  002426  0100               	movlb	0	; () banked
  2823  002428  5182               	movf	_cmd_consol_state& (0+255),w,b
  2824                           
  2825                           ; Switch size 1, requested type "space"
  2826                           ; Number of cases is 3, Range of values is 0 to 2
  2827                           ; switch strategies available:
  2828                           ; Name         Instructions Cycles
  2829                           ; simple_byte           10     6 (average)
  2830                           ;	Chosen strategy is simple_byte
  2831  00242A  0A00               	xorlw	0	; case 0
  2832  00242C  B4D8               	btfsc	status,2,c
  2833  00242E  D798               	goto	l8556
  2834  002430  0A01               	xorlw	1	; case 1
  2835  002432  B4D8               	btfsc	status,2,c
  2836  002434  D7BE               	goto	l8564
  2837  002436  0A03               	xorlw	3	; case 2
  2838  002438  A4D8               	btfss	status,2,c
  2839  00243A  0012               	return	
  2840  00243C  D7E7               	goto	l8576
  2841  00243E                     __end_of_cmd_consol_task:
  2842                           	opt stack 0
  2843                           tblptru	equ	0xFF8
  2844                           tblptrh	equ	0xFF7
  2845                           tblptrl	equ	0xFF6
  2846                           tablat	equ	0xFF5
  2847                           intcon	equ	0xFF2
  2848                           postinc0	equ	0xFEE
  2849                           wreg	equ	0xFE8
  2850                           postdec1	equ	0xFE5
  2851                           fsr1h	equ	0xFE2
  2852                           fsr1l	equ	0xFE1
  2853                           indf2	equ	0xFDF
  2854                           fsr2h	equ	0xFDA
  2855                           fsr2l	equ	0xFD9
  2856                           status	equ	0xFD8
  2857                           
  2858 ;; *************** function _reply_to_host *****************
  2859 ;; Defined at:
  2860 ;;		line 419 in file "cmd_consol.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;		None
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;  ch              1    0[BANK0 ] unsigned char 
  2865 ;;  ch              1    1[BANK0 ] unsigned char 
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  1    wreg      void 
  2868 ;; Registers used:
  2869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;      Totals:         0       2       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;Total ram usage:        5 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:   12
  2882 ;; This function calls:
  2883 ;;		_clcd_max_col
  2884 ;;		_clcd_max_row
  2885 ;;		_init_clcd_cusotom_lcd
  2886 ;;		_max_display_str
  2887 ;;		_max_display_support
  2888 ;;		_max_uid_range
  2889 ;;		_min_uid_range
  2890 ;;		_print_conflict_ids
  2891 ;;		_printf
  2892 ;;		_puts
  2893 ;;		_set_string_data
  2894 ;;		_strcmp
  2895 ;;		_update_string_data
  2896 ;; This function is called by:
  2897 ;;		_cmd_consol_task
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text3
  2902  000C98                     __ptext3:
  2903                           	opt stack 0
  2904  000C98                     _reply_to_host:
  2905                           	opt stack 17
  2906                           
  2907                           ;cmd_consol.c: 420: if (strcmp(CMD, "KLM") == 0) {
  2908                           
  2909                           ;incstack = 0
  2910  000C98  0EE3               	movlw	low _CMD
  2911  000C9A  6E10               	movwf	strcmp@s1,c
  2912  000C9C  0E00               	movlw	high _CMD
  2913  000C9E  6E11               	movwf	strcmp@s1+1,c
  2914  000CA0  0EF3               	movlw	low STR_82
  2915  000CA2  6E12               	movwf	strcmp@s2,c
  2916  000CA4  0EFF               	movlw	high STR_82
  2917  000CA6  6E13               	movwf	strcmp@s2+1,c
  2918  000CA8  ECE4  F01D         	call	_strcmp	;wreg free
  2919  000CAC  5010               	movf	?_strcmp,w,c
  2920  000CAE  1011               	iorwf	?_strcmp+1,w,c
  2921  000CB0  A4D8               	btfss	status,2,c
  2922  000CB2  D007               	goto	l8364
  2923                           
  2924                           ;cmd_consol.c: 421: puts("OK\r\n");
  2925  000CB4  0E09               	movlw	low (STR_125+6)
  2926  000CB6  6E14               	movwf	puts@s,c
  2927  000CB8  0EFF               	movlw	high (STR_125+6)
  2928  000CBA  6E15               	movwf	puts@s+1,c
  2929  000CBC  ECA3  F020         	call	_puts	;wreg free
  2930                           
  2931                           ;cmd_consol.c: 422: } else if (strcmp(CMD, "LCDS?") == 0) {
  2932  000CC0  0012               	return	
  2933  000CC2                     l8364:
  2934  000CC2  0EE3               	movlw	low _CMD
  2935  000CC4  6E10               	movwf	strcmp@s1,c
  2936  000CC6  0E00               	movlw	high _CMD
  2937  000CC8  6E11               	movwf	strcmp@s1+1,c
  2938  000CCA  0EB5               	movlw	low STR_35
  2939  000CCC  6E12               	movwf	strcmp@s2,c
  2940  000CCE  0EFF               	movlw	high STR_35
  2941  000CD0  6E13               	movwf	strcmp@s2+1,c
  2942  000CD2  ECE4  F01D         	call	_strcmp	;wreg free
  2943  000CD6  5010               	movf	?_strcmp,w,c
  2944  000CD8  1011               	iorwf	?_strcmp+1,w,c
  2945  000CDA  A4D8               	btfss	status,2,c
  2946  000CDC  D011               	goto	l8368
  2947                           
  2948                           ;cmd_consol.c: 423: printf("\r\n%s\r\n%s\r\n", max_display_support(), "OK");
  2949  000CDE  0E24               	movlw	low STR_86
  2950  000CE0  6E1E               	movwf	printf@f,c
  2951  000CE2  0EFF               	movlw	high STR_86
  2952  000CE4  6E1F               	movwf	printf@f+1,c
  2953  000CE6  EC08  F021         	call	_max_display_support	;wreg free
  2954  000CEA  C010  F020         	movff	?_max_display_support,?_printf+2
  2955  000CEE  C011  F021         	movff	?_max_display_support+1,?_printf+3
  2956  000CF2  0EF7               	movlw	low STR_87
  2957  000CF4  6E22               	movwf	?_printf+4,c
  2958  000CF6  0EFF               	movlw	high STR_87
  2959  000CF8  6E23               	movwf	?_printf+5,c
  2960  000CFA  EC03  F015         	call	_printf	;wreg free
  2961                           
  2962                           ;cmd_consol.c: 424: } else if (strcmp(CMD, "MC?") == 0) {
  2963  000CFE  0012               	return	
  2964  000D00                     l8368:
  2965  000D00  0EE3               	movlw	low _CMD
  2966  000D02  6E10               	movwf	strcmp@s1,c
  2967  000D04  0E00               	movlw	high _CMD
  2968  000D06  6E11               	movwf	strcmp@s1+1,c
  2969  000D08  0EEB               	movlw	low STR_33
  2970  000D0A  6E12               	movwf	strcmp@s2,c
  2971  000D0C  0EFF               	movlw	high STR_33
  2972  000D0E  6E13               	movwf	strcmp@s2+1,c
  2973  000D10  ECE4  F01D         	call	_strcmp	;wreg free
  2974  000D14  5010               	movf	?_strcmp,w,c
  2975  000D16  1011               	iorwf	?_strcmp+1,w,c
  2976  000D18  A4D8               	btfss	status,2,c
  2977  000D1A  D013               	goto	l8372
  2978                           
  2979                           ;cmd_consol.c: 425: printf("\r\n%d\r\n%s\r\n", clcd_max_col(), "OK");
  2980  000D1C  0E19               	movlw	low STR_89
  2981  000D1E  6E1E               	movwf	printf@f,c
  2982  000D20  0EFF               	movlw	high STR_89
  2983  000D22  6E1F               	movwf	printf@f+1,c
  2984  000D24  ECE1  F020         	call	_clcd_max_col	;wreg free
  2985  000D28  0101               	movlb	1	; () banked
  2986  000D2A  6F81               	movwf	??_reply_to_host& (0+255),b
  2987  000D2C  0101               	movlb	1	; () banked
  2988  000D2E  5181               	movf	??_reply_to_host& (0+255),w,b
  2989  000D30  6E20               	movwf	?_printf+2,c
  2990  000D32  6A21               	clrf	?_printf+3,c
  2991  000D34  0EF7               	movlw	low STR_87
  2992  000D36  6E22               	movwf	?_printf+4,c
  2993  000D38  0EFF               	movlw	high STR_87
  2994  000D3A  6E23               	movwf	?_printf+5,c
  2995  000D3C  EC03  F015         	call	_printf	;wreg free
  2996                           
  2997                           ;cmd_consol.c: 426: } else if (strcmp(CMD, "MR?") == 0) {
  2998  000D40  0012               	return	
  2999  000D42                     l8372:
  3000  000D42  0EE3               	movlw	low _CMD
  3001  000D44  6E10               	movwf	strcmp@s1,c
  3002  000D46  0E00               	movlw	high _CMD
  3003  000D48  6E11               	movwf	strcmp@s1+1,c
  3004  000D4A  0EEF               	movlw	low STR_34
  3005  000D4C  6E12               	movwf	strcmp@s2,c
  3006  000D4E  0EFF               	movlw	high STR_34
  3007  000D50  6E13               	movwf	strcmp@s2+1,c
  3008  000D52  ECE4  F01D         	call	_strcmp	;wreg free
  3009  000D56  5010               	movf	?_strcmp,w,c
  3010  000D58  1011               	iorwf	?_strcmp+1,w,c
  3011  000D5A  A4D8               	btfss	status,2,c
  3012  000D5C  D013               	goto	l8376
  3013                           
  3014                           ;cmd_consol.c: 427: printf("\r\n%d\r\n%s\r\n", clcd_max_row(), "OK");
  3015  000D5E  0E19               	movlw	low STR_89
  3016  000D60  6E1E               	movwf	printf@f,c
  3017  000D62  0EFF               	movlw	high STR_89
  3018  000D64  6E1F               	movwf	printf@f+1,c
  3019  000D66  ECDA  F020         	call	_clcd_max_row	;wreg free
  3020  000D6A  0101               	movlb	1	; () banked
  3021  000D6C  6F81               	movwf	??_reply_to_host& (0+255),b
  3022  000D6E  0101               	movlb	1	; () banked
  3023  000D70  5181               	movf	??_reply_to_host& (0+255),w,b
  3024  000D72  6E20               	movwf	?_printf+2,c
  3025  000D74  6A21               	clrf	?_printf+3,c
  3026  000D76  0EF7               	movlw	low STR_87
  3027  000D78  6E22               	movwf	?_printf+4,c
  3028  000D7A  0EFF               	movlw	high STR_87
  3029  000D7C  6E23               	movwf	?_printf+5,c
  3030  000D7E  EC03  F015         	call	_printf	;wreg free
  3031                           
  3032                           ;cmd_consol.c: 428: } else if (strcmp(CMD, "LCDS") == 0) {
  3033  000D82  0012               	return	
  3034  000D84                     l8376:
  3035  000D84  0EE3               	movlw	low _CMD
  3036  000D86  6E10               	movwf	strcmp@s1,c
  3037  000D88  0E00               	movlw	high _CMD
  3038  000D8A  6E11               	movwf	strcmp@s1+1,c
  3039  000D8C  0ED7               	movlw	low STR_37
  3040  000D8E  6E12               	movwf	strcmp@s2,c
  3041  000D90  0EFF               	movlw	high STR_37
  3042  000D92  6E13               	movwf	strcmp@s2+1,c
  3043  000D94  ECE4  F01D         	call	_strcmp	;wreg free
  3044  000D98  5010               	movf	?_strcmp,w,c
  3045  000D9A  1011               	iorwf	?_strcmp+1,w,c
  3046  000D9C  A4D8               	btfss	status,2,c
  3047  000D9E  D010               	goto	l8382
  3048                           
  3049                           ;cmd_consol.c: 429: init_clcd_cusotom_lcd(clcd_init_row, clcd_init_col);
  3050  000DA0  C081  F030         	movff	_clcd_init_col,init_clcd_cusotom_lcd@clcd_init_col
  3051  000DA4  5041               	movf	_clcd_init_row,w,c
  3052  000DA6  EC20  F017         	call	_init_clcd_cusotom_lcd
  3053                           
  3054                           ;cmd_consol.c: 430: printf("\r\n%s\r\n", "OK");
  3055  000DAA  0E1D               	movlw	low (STR_89+4)
  3056  000DAC  6E1E               	movwf	printf@f,c
  3057  000DAE  0EFF               	movlw	high (STR_89+4)
  3058  000DB0  6E1F               	movwf	printf@f+1,c
  3059  000DB2  0EF7               	movlw	low STR_87
  3060  000DB4  6E20               	movwf	?_printf+2,c
  3061  000DB6  0EFF               	movlw	high STR_87
  3062  000DB8  6E21               	movwf	?_printf+3,c
  3063  000DBA  EC03  F015         	call	_printf	;wreg free
  3064                           
  3065                           ;cmd_consol.c: 431: } else if (strcmp(CMD, "GMDS?") == 0) {
  3066  000DBE  0012               	return	
  3067  000DC0                     l8382:
  3068  000DC0  0EE3               	movlw	low _CMD
  3069  000DC2  6E10               	movwf	strcmp@s1,c
  3070  000DC4  0E00               	movlw	high _CMD
  3071  000DC6  6E11               	movwf	strcmp@s1+1,c
  3072  000DC8  0EBB               	movlw	low STR_41
  3073  000DCA  6E12               	movwf	strcmp@s2,c
  3074  000DCC  0EFF               	movlw	high STR_41
  3075  000DCE  6E13               	movwf	strcmp@s2+1,c
  3076  000DD0  ECE4  F01D         	call	_strcmp	;wreg free
  3077  000DD4  5010               	movf	?_strcmp,w,c
  3078  000DD6  1011               	iorwf	?_strcmp+1,w,c
  3079  000DD8  A4D8               	btfss	status,2,c
  3080  000DDA  D03D               	goto	l8390
  3081                           
  3082                           ;cmd_consol.c: 432: if (max_display_str() != 0) {
  3083  000DDC  ECD3  F020         	call	_max_display_str	;wreg free
  3084  000DE0  0900               	iorlw	0
  3085  000DE2  B4D8               	btfsc	status,2,c
  3086  000DE4  D01F               	goto	l8388
  3087                           
  3088                           ;cmd_consol.c: 433: printf("%d,%c-%c\r\n", max_display_str(), min_uid_range(), max_uid_r
      +                          ange());
  3089  000DE6  0E0E               	movlw	low STR_98
  3090  000DE8  6E1E               	movwf	printf@f,c
  3091  000DEA  0EFF               	movlw	high STR_98
  3092  000DEC  6E1F               	movwf	printf@f+1,c
  3093  000DEE  ECD3  F020         	call	_max_display_str	;wreg free
  3094  000DF2  0101               	movlb	1	; () banked
  3095  000DF4  6F81               	movwf	??_reply_to_host& (0+255),b
  3096  000DF6  0101               	movlb	1	; () banked
  3097  000DF8  5181               	movf	??_reply_to_host& (0+255),w,b
  3098  000DFA  6E20               	movwf	?_printf+2,c
  3099  000DFC  6A21               	clrf	?_printf+3,c
  3100  000DFE  ECC5  F020         	call	_min_uid_range	;wreg free
  3101  000E02  0101               	movlb	1	; () banked
  3102  000E04  6F82               	movwf	(??_reply_to_host+1)& (0+255),b
  3103  000E06  0101               	movlb	1	; () banked
  3104  000E08  5182               	movf	(??_reply_to_host+1)& (0+255),w,b
  3105  000E0A  6E22               	movwf	?_printf+4,c
  3106  000E0C  6A23               	clrf	?_printf+5,c
  3107  000E0E  ECCC  F020         	call	_max_uid_range	;wreg free
  3108  000E12  0101               	movlb	1	; () banked
  3109  000E14  6F83               	movwf	(??_reply_to_host+2)& (0+255),b
  3110  000E16  0101               	movlb	1	; () banked
  3111  000E18  5183               	movf	(??_reply_to_host+2)& (0+255),w,b
  3112  000E1A  6E24               	movwf	?_printf+6,c
  3113  000E1C  6A25               	clrf	?_printf+7,c
  3114  000E1E  EC03  F015         	call	_printf	;wreg free
  3115                           
  3116                           ;cmd_consol.c: 434: } else {
  3117  000E22  D00E               	goto	l915
  3118  000E24                     l8388:
  3119                           
  3120                           ;cmd_consol.c: 435: printf("%d\r\n", max_display_str());
  3121  000E24  0EC6               	movlw	low (STR_21+14)
  3122  000E26  6E1E               	movwf	printf@f,c
  3123  000E28  0EFD               	movlw	high (STR_21+14)
  3124  000E2A  6E1F               	movwf	printf@f+1,c
  3125  000E2C  ECD3  F020         	call	_max_display_str	;wreg free
  3126  000E30  0101               	movlb	1	; () banked
  3127  000E32  6F81               	movwf	??_reply_to_host& (0+255),b
  3128  000E34  0101               	movlb	1	; () banked
  3129  000E36  5181               	movf	??_reply_to_host& (0+255),w,b
  3130  000E38  6E20               	movwf	?_printf+2,c
  3131  000E3A  6A21               	clrf	?_printf+3,c
  3132  000E3C  EC03  F015         	call	_printf	;wreg free
  3133  000E40                     l915:
  3134                           
  3135                           ;cmd_consol.c: 436: }
  3136                           ;cmd_consol.c: 437: printf("\r\n%s.., OK\r\n", "GMDS?");
  3137  000E40  0E71               	movlw	low STR_100
  3138  000E42  6E1E               	movwf	printf@f,c
  3139  000E44  0EFE               	movlw	high STR_100
  3140  000E46  6E1F               	movwf	printf@f+1,c
  3141  000E48  0EBB               	movlw	low STR_41
  3142  000E4A  6E20               	movwf	?_printf+2,c
  3143  000E4C  0EFF               	movlw	high STR_41
  3144  000E4E  6E21               	movwf	?_printf+3,c
  3145  000E50  EC03  F015         	call	_printf	;wreg free
  3146                           
  3147                           ;cmd_consol.c: 438: } else if (strcmp(CMD, "SDSTR") == 0) {
  3148  000E54  0012               	return	
  3149  000E56                     l8390:
  3150  000E56  0EE3               	movlw	low _CMD
  3151  000E58  6E10               	movwf	strcmp@s1,c
  3152  000E5A  0E00               	movlw	high _CMD
  3153  000E5C  6E11               	movwf	strcmp@s1+1,c
  3154  000E5E  0EC7               	movlw	low STR_42
  3155  000E60  6E12               	movwf	strcmp@s2,c
  3156  000E62  0EFF               	movlw	high STR_42
  3157  000E64  6E13               	movwf	strcmp@s2+1,c
  3158  000E66  ECE4  F01D         	call	_strcmp	;wreg free
  3159  000E6A  5010               	movf	?_strcmp,w,c
  3160  000E6C  1011               	iorwf	?_strcmp+1,w,c
  3161  000E6E  A4D8               	btfss	status,2,c
  3162  000E70  D00B               	goto	l8394
  3163                           
  3164                           ;cmd_consol.c: 439: printf("\r\n%s.., OK\r\n", "SDSTR");
  3165  000E72  0E71               	movlw	low STR_100
  3166  000E74  6E1E               	movwf	printf@f,c
  3167  000E76  0EFE               	movlw	high STR_100
  3168  000E78  6E1F               	movwf	printf@f+1,c
  3169  000E7A  0EC7               	movlw	low STR_42
  3170  000E7C  6E20               	movwf	?_printf+2,c
  3171  000E7E  0EFF               	movlw	high STR_42
  3172  000E80  6E21               	movwf	?_printf+3,c
  3173  000E82  EC03  F015         	call	_printf	;wreg free
  3174                           
  3175                           ;cmd_consol.c: 440: } else if (strcmp(CMD, "SDSCROL") == 0) {
  3176  000E86  0012               	return	
  3177  000E88                     l8394:
  3178  000E88  0EE3               	movlw	low _CMD
  3179  000E8A  6E10               	movwf	strcmp@s1,c
  3180  000E8C  0E00               	movlw	high _CMD
  3181  000E8E  6E11               	movwf	strcmp@s1+1,c
  3182  000E90  0E8A               	movlw	low STR_47
  3183  000E92  6E12               	movwf	strcmp@s2,c
  3184  000E94  0EFF               	movlw	high STR_47
  3185  000E96  6E13               	movwf	strcmp@s2+1,c
  3186  000E98  ECE4  F01D         	call	_strcmp	;wreg free
  3187  000E9C  5010               	movf	?_strcmp,w,c
  3188  000E9E  1011               	iorwf	?_strcmp+1,w,c
  3189  000EA0  A4D8               	btfss	status,2,c
  3190  000EA2  D00B               	goto	l8398
  3191                           
  3192                           ;cmd_consol.c: 441: printf("\r\n%s.., OK\r\n", "SDSCROL");
  3193  000EA4  0E71               	movlw	low STR_100
  3194  000EA6  6E1E               	movwf	printf@f,c
  3195  000EA8  0EFE               	movlw	high STR_100
  3196  000EAA  6E1F               	movwf	printf@f+1,c
  3197  000EAC  0E8A               	movlw	low STR_47
  3198  000EAE  6E20               	movwf	?_printf+2,c
  3199  000EB0  0EFF               	movlw	high STR_47
  3200  000EB2  6E21               	movwf	?_printf+3,c
  3201  000EB4  EC03  F015         	call	_printf	;wreg free
  3202                           
  3203                           ;cmd_consol.c: 442: } else if (strcmp(CMD, "SDSERC") == 0) {
  3204  000EB8  0012               	return	
  3205  000EBA                     l8398:
  3206  000EBA  0EE3               	movlw	low _CMD
  3207  000EBC  6E10               	movwf	strcmp@s1,c
  3208  000EBE  0E00               	movlw	high _CMD
  3209  000EC0  6E11               	movwf	strcmp@s1+1,c
  3210  000EC2  0EA7               	movlw	low STR_53
  3211  000EC4  6E12               	movwf	strcmp@s2,c
  3212  000EC6  0EFF               	movlw	high STR_53
  3213  000EC8  6E13               	movwf	strcmp@s2+1,c
  3214  000ECA  ECE4  F01D         	call	_strcmp	;wreg free
  3215  000ECE  5010               	movf	?_strcmp,w,c
  3216  000ED0  1011               	iorwf	?_strcmp+1,w,c
  3217  000ED2  A4D8               	btfss	status,2,c
  3218  000ED4  D00B               	goto	l8402
  3219                           
  3220                           ;cmd_consol.c: 443: printf("\r\n%s.., OK\r\n", "SDSERC");
  3221  000ED6  0E71               	movlw	low STR_100
  3222  000ED8  6E1E               	movwf	printf@f,c
  3223  000EDA  0EFE               	movlw	high STR_100
  3224  000EDC  6E1F               	movwf	printf@f+1,c
  3225  000EDE  0EA7               	movlw	low STR_53
  3226  000EE0  6E20               	movwf	?_printf+2,c
  3227  000EE2  0EFF               	movlw	high STR_53
  3228  000EE4  6E21               	movwf	?_printf+3,c
  3229  000EE6  EC03  F015         	call	_printf	;wreg free
  3230                           
  3231                           ;cmd_consol.c: 444: } else if (strcmp(CMD, "UPDATE") == 0) {
  3232  000EEA  0012               	return	
  3233  000EEC                     l8402:
  3234  000EEC  0EE3               	movlw	low _CMD
  3235  000EEE  6E10               	movwf	strcmp@s1,c
  3236  000EF0  0E00               	movlw	high _CMD
  3237  000EF2  6E11               	movwf	strcmp@s1+1,c
  3238  000EF4  0EAE               	movlw	low STR_65
  3239  000EF6  6E12               	movwf	strcmp@s2,c
  3240  000EF8  0EFF               	movlw	high STR_65
  3241  000EFA  6E13               	movwf	strcmp@s2+1,c
  3242  000EFC  ECE4  F01D         	call	_strcmp	;wreg free
  3243  000F00  5010               	movf	?_strcmp,w,c
  3244  000F02  1011               	iorwf	?_strcmp+1,w,c
  3245  000F04  A4D8               	btfss	status,2,c
  3246  000F06  D05C               	goto	l8430
  3247                           
  3248                           ;cmd_consol.c: 445: if (cmd_data.data_set == 1 && cmd_data.row_col_set == 1 && cmd_data.
      +                          scroll_set == 1) {
  3249  000F08  0100               	movlb	0	; () banked
  3250  000F0A  05B0               	decf	(_cmd_data+42)& (0+255),w,b
  3251  000F0C  A4D8               	btfss	status,2,c
  3252  000F0E  D02B               	goto	l8418
  3253                           
  3254                           ; BSR set to: 0
  3255  000F10  0100               	movlb	0	; () banked
  3256  000F12  05B5               	decf	(_cmd_data+47)& (0+255),w,b
  3257  000F14  A4D8               	btfss	status,2,c
  3258  000F16  D027               	goto	l8418
  3259                           
  3260                           ; BSR set to: 0
  3261  000F18  0100               	movlb	0	; () banked
  3262  000F1A  05B7               	decf	(_cmd_data+49)& (0+255),w,b
  3263  000F1C  A4D8               	btfss	status,2,c
  3264  000F1E  D023               	goto	l8418
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;cmd_consol.c: 446: char ch = update_string_data(&cmd_data);
  3268  000F20  0E86               	movlw	low _cmd_data
  3269  000F22  6E3F               	movwf	update_string_data@data,c
  3270  000F24  0E00               	movlw	high _cmd_data
  3271  000F26  6E40               	movwf	update_string_data@data+1,c
  3272  000F28  ECD7  F00F         	call	_update_string_data	;wreg free
  3273  000F2C  0100               	movlb	0	; () banked
  3274  000F2E  6FFE               	movwf	reply_to_host@ch& (0+255),b
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;cmd_consol.c: 447: if (ch == 200)
  3278  000F30  0EC8               	movlw	200
  3279  000F32  0100               	movlb	0	; () banked
  3280  000F34  19FE               	xorwf	reply_to_host@ch& (0+255),w,b
  3281  000F36  A4D8               	btfss	status,2,c
  3282  000F38  D00B               	goto	l8416
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;cmd_consol.c: 448: printf("%s\r\n", "ERROR");
  3286  000F3A  0E1F               	movlw	low (STR_89+6)
  3287  000F3C  6E1E               	movwf	printf@f,c
  3288  000F3E  0EFF               	movlw	high (STR_89+6)
  3289  000F40  6E1F               	movwf	printf@f+1,c
  3290  000F42  0EC1               	movlw	low STR_113
  3291  000F44  6E20               	movwf	?_printf+2,c
  3292  000F46  0EFF               	movlw	high STR_113
  3293  000F48  6E21               	movwf	?_printf+3,c
  3294  000F4A  EC03  F015         	call	_printf	;wreg free
  3295  000F4E  0012               	return	
  3296  000F50                     l8416:
  3297                           
  3298                           ;cmd_consol.c: 449: else
  3299                           ;cmd_consol.c: 450: printf("\r\n%s.., OK\r\n", "UPDATE");
  3300  000F50  0E71               	movlw	low STR_100
  3301  000F52  6E1E               	movwf	printf@f,c
  3302  000F54  0EFE               	movlw	high STR_100
  3303  000F56  6E1F               	movwf	printf@f+1,c
  3304  000F58  0EAE               	movlw	low STR_65
  3305  000F5A  6E20               	movwf	?_printf+2,c
  3306  000F5C  0EFF               	movlw	high STR_65
  3307  000F5E  6E21               	movwf	?_printf+3,c
  3308  000F60  EC03  F015         	call	_printf	;wreg free
  3309                           
  3310                           ;cmd_consol.c: 451: } else {
  3311  000F64  0012               	return	
  3312  000F66                     l8418:
  3313                           
  3314                           ;cmd_consol.c: 452: if (cmd_data.data_set == 0) {
  3315  000F66  0100               	movlb	0	; () banked
  3316  000F68  51B0               	movf	(_cmd_data+42)& (0+255),w,b
  3317  000F6A  A4D8               	btfss	status,2,c
  3318  000F6C  D00B               	goto	l8422
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;cmd_consol.c: 453: printf("\r\n%s\r\n", "ERR_STR_SET");
  3322  000F6E  0E1D               	movlw	low (STR_89+4)
  3323  000F70  6E1E               	movwf	printf@f,c
  3324  000F72  0EFF               	movlw	high (STR_89+4)
  3325  000F74  6E1F               	movwf	printf@f+1,c
  3326  000F76  0EF7               	movlw	low STR_117
  3327  000F78  6E20               	movwf	?_printf+2,c
  3328  000F7A  0EFE               	movlw	high STR_117
  3329  000F7C  6E21               	movwf	?_printf+3,c
  3330  000F7E  EC03  F015         	call	_printf	;wreg free
  3331                           
  3332                           ;cmd_consol.c: 454: } else if (cmd_data.row_col_set == 0) {
  3333  000F82  0012               	return	
  3334  000F84                     l8422:
  3335  000F84  0100               	movlb	0	; () banked
  3336  000F86  51B5               	movf	(_cmd_data+47)& (0+255),w,b
  3337  000F88  A4D8               	btfss	status,2,c
  3338  000F8A  D00B               	goto	l8426
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;cmd_consol.c: 455: printf("\r\n%s\r\n", "ERR_ROW_COL");
  3342  000F8C  0E1D               	movlw	low (STR_89+4)
  3343  000F8E  6E1E               	movwf	printf@f,c
  3344  000F90  0EFF               	movlw	high (STR_89+4)
  3345  000F92  6E1F               	movwf	printf@f+1,c
  3346  000F94  0EDF               	movlw	low STR_119
  3347  000F96  6E20               	movwf	?_printf+2,c
  3348  000F98  0EFE               	movlw	high STR_119
  3349  000F9A  6E21               	movwf	?_printf+3,c
  3350  000F9C  EC03  F015         	call	_printf	;wreg free
  3351                           
  3352                           ;cmd_consol.c: 456: } else if (cmd_data.scroll_set == 0) {
  3353  000FA0  0012               	return	
  3354  000FA2                     l8426:
  3355  000FA2  0100               	movlb	0	; () banked
  3356  000FA4  51B7               	movf	(_cmd_data+49)& (0+255),w,b
  3357  000FA6  A4D8               	btfss	status,2,c
  3358  000FA8  0012               	return	
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;cmd_consol.c: 457: printf("\r\n%s\r\n", "ERR_SCROLL_SET");
  3362  000FAA  0E1D               	movlw	low (STR_89+4)
  3363  000FAC  6E1E               	movwf	printf@f,c
  3364  000FAE  0EFF               	movlw	high (STR_89+4)
  3365  000FB0  6E1F               	movwf	printf@f+1,c
  3366  000FB2  0E53               	movlw	low STR_121
  3367  000FB4  6E20               	movwf	?_printf+2,c
  3368  000FB6  0EFE               	movlw	high STR_121
  3369  000FB8  6E21               	movwf	?_printf+3,c
  3370  000FBA  EC03  F015         	call	_printf	;wreg free
  3371                           
  3372                           ;cmd_consol.c: 458: }
  3373                           ;cmd_consol.c: 459: }
  3374                           ;cmd_consol.c: 460: } else if (strcmp(CMD, "SSTR") == 0) {
  3375  000FBE  0012               	return	
  3376  000FC0                     l8430:
  3377  000FC0  0EE3               	movlw	low _CMD
  3378  000FC2  6E10               	movwf	strcmp@s1,c
  3379  000FC4  0E00               	movlw	high _CMD
  3380  000FC6  6E11               	movwf	strcmp@s1+1,c
  3381  000FC8  0ED2               	movlw	low STR_66
  3382  000FCA  6E12               	movwf	strcmp@s2,c
  3383  000FCC  0EFF               	movlw	high STR_66
  3384  000FCE  6E13               	movwf	strcmp@s2+1,c
  3385  000FD0  ECE4  F01D         	call	_strcmp	;wreg free
  3386  000FD4  5010               	movf	?_strcmp,w,c
  3387  000FD6  1011               	iorwf	?_strcmp+1,w,c
  3388  000FD8  A4D8               	btfss	status,2,c
  3389  000FDA  0012               	return	
  3390                           
  3391                           ;cmd_consol.c: 461: unsigned char ch = set_string_data(&cmd_data);
  3392  000FDC  0E86               	movlw	low _cmd_data
  3393  000FDE  6E38               	movwf	set_string_data@data,c
  3394  000FE0  0E00               	movlw	high _cmd_data
  3395  000FE2  6E39               	movwf	set_string_data@data+1,c
  3396  000FE4  ECE7  F00B         	call	_set_string_data	;wreg free
  3397  000FE8  0100               	movlb	0	; () banked
  3398  000FEA  6FFF               	movwf	reply_to_host@ch_1876& (0+255),b
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;cmd_consol.c: 462: if (ch == 200) {
  3402  000FEC  0EC8               	movlw	200
  3403  000FEE  0100               	movlb	0	; () banked
  3404  000FF0  19FF               	xorwf	reply_to_host@ch_1876& (0+255),w,b
  3405  000FF2  A4D8               	btfss	status,2,c
  3406  000FF4  D00D               	goto	l8438
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;cmd_consol.c: 463: printf("%s\r\n", "ERR_CONFLICT");
  3410  000FF6  0E1F               	movlw	low (STR_89+6)
  3411  000FF8  6E1E               	movwf	printf@f,c
  3412  000FFA  0EFF               	movlw	high (STR_89+6)
  3413  000FFC  6E1F               	movwf	printf@f+1,c
  3414  000FFE  0E7E               	movlw	low STR_124
  3415  001000  6E20               	movwf	?_printf+2,c
  3416  001002  0EFE               	movlw	high STR_124
  3417  001004  6E21               	movwf	?_printf+3,c
  3418  001006  EC03  F015         	call	_printf	;wreg free
  3419                           
  3420                           ;cmd_consol.c: 464: print_conflict_ids();
  3421  00100A  ECB8  F019         	call	_print_conflict_ids	;wreg free
  3422                           
  3423                           ;cmd_consol.c: 465: } else if (ch == 201) {
  3424  00100E  0012               	return	
  3425  001010                     l8438:
  3426  001010  0EC9               	movlw	201
  3427  001012  0100               	movlb	0	; () banked
  3428  001014  19FF               	xorwf	reply_to_host@ch_1876& (0+255),w,b
  3429  001016  A4D8               	btfss	status,2,c
  3430  001018  D022               	goto	l8450
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;cmd_consol.c: 466: ch = set_string_data(&cmd_data);
  3434  00101A  0E86               	movlw	low _cmd_data
  3435  00101C  6E38               	movwf	set_string_data@data,c
  3436  00101E  0E00               	movlw	high _cmd_data
  3437  001020  6E39               	movwf	set_string_data@data+1,c
  3438  001022  ECE7  F00B         	call	_set_string_data	;wreg free
  3439  001026  0100               	movlb	0	; () banked
  3440  001028  6FFF               	movwf	reply_to_host@ch_1876& (0+255),b
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;cmd_consol.c: 467: if (ch == 202) {
  3444  00102A  0ECA               	movlw	202
  3445  00102C  0100               	movlb	0	; () banked
  3446  00102E  19FF               	xorwf	reply_to_host@ch_1876& (0+255),w,b
  3447  001030  A4D8               	btfss	status,2,c
  3448  001032  0012               	return	
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;cmd_consol.c: 468: cmd_data.over_write = 0;
  3452  001034  0E00               	movlw	0
  3453  001036  0100               	movlb	0	; () banked
  3454  001038  6FBA               	movwf	(_cmd_data+52)& (0+255),b
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;cmd_consol.c: 469: ch = set_string_data(&cmd_data);
  3458  00103A  0E86               	movlw	low _cmd_data
  3459  00103C  6E38               	movwf	set_string_data@data,c
  3460  00103E  0E00               	movlw	high _cmd_data
  3461  001040  6E39               	movwf	set_string_data@data+1,c
  3462  001042  ECE7  F00B         	call	_set_string_data	;wreg free
  3463  001046  0100               	movlb	0	; () banked
  3464  001048  6FFF               	movwf	reply_to_host@ch_1876& (0+255),b
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;cmd_consol.c: 470: printf("\r\n%d\r\nOK\r\n", ch);
  3468  00104A  0E03               	movlw	low STR_125
  3469  00104C  6E1E               	movwf	printf@f,c
  3470  00104E  0EFF               	movlw	high STR_125
  3471  001050  6E1F               	movwf	printf@f+1,c
  3472  001052  C0FF  F020         	movff	reply_to_host@ch_1876,?_printf+2
  3473  001056  6A21               	clrf	?_printf+3,c
  3474  001058  EC03  F015         	call	_printf	;wreg free
  3475                           
  3476                           ;cmd_consol.c: 471: }
  3477                           ;cmd_consol.c: 472: } else if (ch == 202) {
  3478  00105C  0012               	return	
  3479  00105E                     l8450:
  3480  00105E  0ECA               	movlw	202
  3481  001060  0100               	movlb	0	; () banked
  3482  001062  19FF               	xorwf	reply_to_host@ch_1876& (0+255),w,b
  3483  001064  A4D8               	btfss	status,2,c
  3484  001066  D015               	goto	l8458
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;cmd_consol.c: 473: cmd_data.over_write = 0;
  3488  001068  0E00               	movlw	0
  3489  00106A  0100               	movlb	0	; () banked
  3490  00106C  6FBA               	movwf	(_cmd_data+52)& (0+255),b
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;cmd_consol.c: 474: ch = set_string_data(&cmd_data);
  3494  00106E  0E86               	movlw	low _cmd_data
  3495  001070  6E38               	movwf	set_string_data@data,c
  3496  001072  0E00               	movlw	high _cmd_data
  3497  001074  6E39               	movwf	set_string_data@data+1,c
  3498  001076  ECE7  F00B         	call	_set_string_data	;wreg free
  3499  00107A  0100               	movlb	0	; () banked
  3500  00107C  6FFF               	movwf	reply_to_host@ch_1876& (0+255),b
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;cmd_consol.c: 475: printf("\r\n%d\r\nOK\r\n", ch);
  3504  00107E  0E03               	movlw	low STR_125
  3505  001080  6E1E               	movwf	printf@f,c
  3506  001082  0EFF               	movlw	high STR_125
  3507  001084  6E1F               	movwf	printf@f+1,c
  3508  001086  C0FF  F020         	movff	reply_to_host@ch_1876,?_printf+2
  3509  00108A  6A21               	clrf	?_printf+3,c
  3510  00108C  EC03  F015         	call	_printf	;wreg free
  3511                           
  3512                           ;cmd_consol.c: 476: } else if (ch == 203) {
  3513  001090  0012               	return	
  3514  001092                     l8458:
  3515  001092  0ECB               	movlw	203
  3516  001094  0100               	movlb	0	; () banked
  3517  001096  19FF               	xorwf	reply_to_host@ch_1876& (0+255),w,b
  3518  001098  A4D8               	btfss	status,2,c
  3519  00109A  D015               	goto	l8466
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;cmd_consol.c: 477: cmd_data.over_write = 0;
  3523  00109C  0E00               	movlw	0
  3524  00109E  0100               	movlb	0	; () banked
  3525  0010A0  6FBA               	movwf	(_cmd_data+52)& (0+255),b
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;cmd_consol.c: 478: ch = set_string_data(&cmd_data);
  3529  0010A2  0E86               	movlw	low _cmd_data
  3530  0010A4  6E38               	movwf	set_string_data@data,c
  3531  0010A6  0E00               	movlw	high _cmd_data
  3532  0010A8  6E39               	movwf	set_string_data@data+1,c
  3533  0010AA  ECE7  F00B         	call	_set_string_data	;wreg free
  3534  0010AE  0100               	movlb	0	; () banked
  3535  0010B0  6FFF               	movwf	reply_to_host@ch_1876& (0+255),b
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;cmd_consol.c: 479: printf("\r\n%d\r\nOK\r\n", ch);
  3539  0010B2  0E03               	movlw	low STR_125
  3540  0010B4  6E1E               	movwf	printf@f,c
  3541  0010B6  0EFF               	movlw	high STR_125
  3542  0010B8  6E1F               	movwf	printf@f+1,c
  3543  0010BA  C0FF  F020         	movff	reply_to_host@ch_1876,?_printf+2
  3544  0010BE  6A21               	clrf	?_printf+3,c
  3545  0010C0  EC03  F015         	call	_printf	;wreg free
  3546                           
  3547                           ;cmd_consol.c: 480: } else {
  3548  0010C4  0012               	return	
  3549  0010C6                     l8466:
  3550                           
  3551                           ;cmd_consol.c: 481: printf("\r\n%d\r\nOK\r\n", ch);
  3552  0010C6  0E03               	movlw	low STR_125
  3553  0010C8  6E1E               	movwf	printf@f,c
  3554  0010CA  0EFF               	movlw	high STR_125
  3555  0010CC  6E1F               	movwf	printf@f+1,c
  3556  0010CE  C0FF  F020         	movff	reply_to_host@ch_1876,?_printf+2
  3557  0010D2  6A21               	clrf	?_printf+3,c
  3558  0010D4  EC03  F015         	call	_printf	;wreg free
  3559  0010D8  0012               	return	
  3560  0010DA                     __end_of_reply_to_host:
  3561                           	opt stack 0
  3562                           tblptru	equ	0xFF8
  3563                           tblptrh	equ	0xFF7
  3564                           tblptrl	equ	0xFF6
  3565                           tablat	equ	0xFF5
  3566                           intcon	equ	0xFF2
  3567                           postinc0	equ	0xFEE
  3568                           wreg	equ	0xFE8
  3569                           postdec1	equ	0xFE5
  3570                           fsr1h	equ	0xFE2
  3571                           fsr1l	equ	0xFE1
  3572                           indf2	equ	0xFDF
  3573                           fsr2h	equ	0xFDA
  3574                           fsr2l	equ	0xFD9
  3575                           status	equ	0xFD8
  3576                           
  3577 ;; *************** function _update_string_data *****************
  3578 ;; Defined at:
  3579 ;;		line 317 in file "clcd.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  data            2   62[COMRAM] PTR struct .
  3582 ;;		 -> cmd_data(53), 
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;  i               2    7[BANK1 ] int 
  3585 ;;  end_point       1    6[BANK1 ] unsigned char 
  3586 ;;  start_point     1    5[BANK1 ] unsigned char 
  3587 ;;  exist_uid_id    1    4[BANK1 ] unsigned char 
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  1    wreg      unsigned char 
  3590 ;; Registers used:
  3591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3597 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3599 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3600 ;;      Totals:         2       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3601 ;;Total ram usage:       11 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:   10
  3604 ;; This function calls:
  3605 ;;		___wmul
  3606 ;;		_conflict_check
  3607 ;;		_copy_data
  3608 ;;		_make_display
  3609 ;;		_memset
  3610 ;;		_printf
  3611 ;; This function is called by:
  3612 ;;		_reply_to_host
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text4
  3617  001FAE                     __ptext4:
  3618                           	opt stack 0
  3619  001FAE                     _update_string_data:
  3620                           	opt stack 18
  3621                           
  3622                           ;clcd.c: 318: int i = 0;
  3623                           
  3624                           ;incstack = 0
  3625  001FAE  0E00               	movlw	0
  3626  001FB0  0101               	movlb	1	; () banked
  3627  001FB2  6F80               	movwf	(update_string_data@i+1)& (0+255),b
  3628  001FB4  0E00               	movlw	0
  3629  001FB6  6F7F               	movwf	update_string_data@i& (0+255),b
  3630                           
  3631                           ; BSR set to: 1
  3632                           ;clcd.c: 319: char exist_uid_idx = -1;
  3633  001FB8  0101               	movlb	1	; () banked
  3634  001FBA  697C               	setf	update_string_data@exist_uid_idx& (0+255),b
  3635                           
  3636                           ; BSR set to: 1
  3637                           ;clcd.c: 320: char start_point, end_point;
  3638                           ;clcd.c: 321: memset(conflict_arr, -1, sizeof (conflict_arr));
  3639  001FBC  0EBB               	movlw	low _conflict_arr
  3640  001FBE  6E24               	movwf	memset@p1,c
  3641  001FC0  0E00               	movlw	high _conflict_arr
  3642  001FC2  6E25               	movwf	memset@p1+1,c
  3643  001FC4  0EFF               	movlw	255
  3644  001FC6  6E27               	movwf	memset@c+1,c
  3645  001FC8  6826               	setf	memset@c,c
  3646  001FCA  0E00               	movlw	0
  3647  001FCC  6E29               	movwf	memset@n+1,c
  3648  001FCE  0E28               	movlw	40
  3649  001FD0  6E28               	movwf	memset@n,c
  3650  001FD2  ECBB  F01F         	call	_memset	;wreg free
  3651                           
  3652                           ;clcd.c: 322: conflict_data_count = 0;
  3653  001FD6  0E00               	movlw	0
  3654  001FD8  6E42               	movwf	_conflict_data_count,c
  3655                           
  3656                           ;clcd.c: 323: start_point = (data->start_row * clcd_config_data.clcd_max_col) + data->st
      +                          art_col;
  3657  001FDA  EE20 F02C          	lfsr	2,44
  3658  001FDE  503F               	movf	update_string_data@data,w,c
  3659  001FE0  26D9               	addwf	fsr2l,f,c
  3660  001FE2  5040               	movf	update_string_data@data+1,w,c
  3661  001FE4  22DA               	addwfc	fsr2h,f,c
  3662  001FE6  50DF               	movf	indf2,w,c
  3663  001FE8  0101               	movlb	1	; () banked
  3664  001FEA  6F78               	movwf	??_update_string_data& (0+255),b
  3665  001FEC  EE20 F02B          	lfsr	2,43
  3666  001FF0  503F               	movf	update_string_data@data,w,c
  3667  001FF2  26D9               	addwf	fsr2l,f,c
  3668  001FF4  5040               	movf	update_string_data@data+1,w,c
  3669  001FF6  22DA               	addwfc	fsr2h,f,c
  3670  001FF8  50DF               	movf	indf2,w,c
  3671  001FFA  024B               	mulwf	_clcd_config_data+2,c
  3672  001FFC  50F3               	movf	prodl,w,c
  3673  001FFE  0101               	movlb	1	; () banked
  3674  002000  2578               	addwf	??_update_string_data& (0+255),w,b
  3675  002002  0101               	movlb	1	; () banked
  3676  002004  6F7D               	movwf	update_string_data@start_point& (0+255),b
  3677                           
  3678                           ; BSR set to: 1
  3679                           ;clcd.c: 324: end_point = (data->end_row * clcd_config_data.clcd_max_col) + data->end_co
      +                          l;
  3680  002006  EE20 F02E          	lfsr	2,46
  3681  00200A  503F               	movf	update_string_data@data,w,c
  3682  00200C  26D9               	addwf	fsr2l,f,c
  3683  00200E  5040               	movf	update_string_data@data+1,w,c
  3684  002010  22DA               	addwfc	fsr2h,f,c
  3685  002012  50DF               	movf	indf2,w,c
  3686  002014  0101               	movlb	1	; () banked
  3687  002016  6F78               	movwf	??_update_string_data& (0+255),b
  3688  002018  EE20 F02D          	lfsr	2,45
  3689  00201C  503F               	movf	update_string_data@data,w,c
  3690  00201E  26D9               	addwf	fsr2l,f,c
  3691  002020  5040               	movf	update_string_data@data+1,w,c
  3692  002022  22DA               	addwfc	fsr2h,f,c
  3693  002024  50DF               	movf	indf2,w,c
  3694  002026  024B               	mulwf	_clcd_config_data+2,c
  3695  002028  50F3               	movf	prodl,w,c
  3696  00202A  0101               	movlb	1	; () banked
  3697  00202C  2578               	addwf	??_update_string_data& (0+255),w,b
  3698  00202E  0101               	movlb	1	; () banked
  3699  002030  6F7E               	movwf	update_string_data@end_point& (0+255),b
  3700                           
  3701                           ; BSR set to: 1
  3702                           ;clcd.c: 326: printf("UID = %c, start_pt = %d, end_pt = %d\r\n", data->uid, start_point,
      +                           end_point);
  3703  002032  0E83               	movlw	low STR_17
  3704  002034  6E1E               	movwf	printf@f,c
  3705  002036  0EFC               	movlw	high STR_17
  3706  002038  6E1F               	movwf	printf@f+1,c
  3707  00203A  C03F  FFD9         	movff	update_string_data@data,fsr2l
  3708  00203E  C040  FFDA         	movff	update_string_data@data+1,fsr2h
  3709  002042  CFDE F020          	movff	postinc2,?_printf+2
  3710  002046  CFDD F021          	movff	postdec2,?_printf+3
  3711  00204A  C17D  F022         	movff	update_string_data@start_point,?_printf+4
  3712  00204E  6A23               	clrf	?_printf+5,c
  3713  002050  C17E  F024         	movff	update_string_data@end_point,?_printf+6
  3714  002054  6A25               	clrf	?_printf+7,c
  3715  002056  EC03  F015         	call	_printf	;wreg free
  3716                           
  3717                           ;clcd.c: 328: if (data_count < clcd_config_data.clcd_max_display_string) {
  3718  00205A  504D               	movf	_clcd_config_data+4,w,c
  3719  00205C  5C43               	subwf	_data_count,w,c
  3720  00205E  B0D8               	btfsc	status,0,c
  3721  002060  D0DE               	goto	l7654
  3722                           
  3723                           ;clcd.c: 329: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3724  002062  0E00               	movlw	0
  3725  002064  0101               	movlb	1	; () banked
  3726  002066  6F80               	movwf	(update_string_data@i+1)& (0+255),b
  3727  002068  0E00               	movlw	0
  3728  00206A  6F7F               	movwf	update_string_data@i& (0+255),b
  3729  00206C  D0A1               	goto	l7644
  3730  00206E                     l7606:
  3731                           
  3732                           ; BSR set to: 1
  3733                           ;clcd.c: 330: if (clcd_display_string_details[i].uid == data->uid) {
  3734  00206E  C03F  FFD9         	movff	update_string_data@data,fsr2l
  3735  002072  C040  FFDA         	movff	update_string_data@data+1,fsr2h
  3736  002076  C17F  F018         	movff	update_string_data@i,___wmul@multiplier
  3737  00207A  C180  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  3738  00207E  0E00               	movlw	0
  3739  002080  6E1B               	movwf	___wmul@multiplicand+1,c
  3740  002082  0E37               	movlw	55
  3741  002084  6E1A               	movwf	___wmul@multiplicand,c
  3742  002086  ECE7  F01F         	call	___wmul	;wreg free
  3743  00208A  0E96               	movlw	low _clcd_display_string_details
  3744  00208C  2418               	addwf	?___wmul,w,c
  3745  00208E  6EE1               	movwf	fsr1l,c
  3746  002090  0E02               	movlw	high _clcd_display_string_details
  3747  002092  2019               	addwfc	?___wmul+1,w,c
  3748  002094  6EE2               	movwf	fsr1h,c
  3749  002096  50DE               	movf	postinc2,w,c
  3750  002098  18E6               	xorwf	postinc1,w,c
  3751  00209A  E12D               	bnz	l7622
  3752  00209C  50DE               	movf	postinc2,w,c
  3753  00209E  18E6               	xorwf	postinc1,w,c
  3754  0020A0  A4D8               	btfss	status,2,c
  3755  0020A2  D029               	goto	l7622
  3756                           
  3757                           ;clcd.c: 331: exist_uid_idx = i;
  3758  0020A4  C17F  F17C         	movff	update_string_data@i,update_string_data@exist_uid_idx
  3759                           
  3760                           ;clcd.c: 332: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  3761  0020A8  C17F  F018         	movff	update_string_data@i,___wmul@multiplier
  3762  0020AC  C180  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  3763  0020B0  0E00               	movlw	0
  3764  0020B2  6E1B               	movwf	___wmul@multiplicand+1,c
  3765  0020B4  0E37               	movlw	55
  3766  0020B6  6E1A               	movwf	___wmul@multiplicand,c
  3767  0020B8  ECE7  F01F         	call	___wmul	;wreg free
  3768  0020BC  0E96               	movlw	low _clcd_display_string_details
  3769  0020BE  2418               	addwf	?___wmul,w,c
  3770  0020C0  6ED9               	movwf	fsr2l,c
  3771  0020C2  0E02               	movlw	high _clcd_display_string_details
  3772  0020C4  2019               	addwfc	?___wmul+1,w,c
  3773  0020C6  6EDA               	movwf	fsr2h,c
  3774  0020C8  5042               	movf	_conflict_data_count,w,c
  3775  0020CA  0D02               	mullw	2
  3776  0020CC  0EBB               	movlw	low _conflict_arr
  3777  0020CE  24F3               	addwf	prodl,w,c
  3778  0020D0  6EE1               	movwf	fsr1l,c
  3779  0020D2  0E00               	movlw	high _conflict_arr
  3780  0020D4  20F4               	addwfc	prodh,w,c
  3781  0020D6  6EE2               	movwf	fsr1h,c
  3782  0020D8  CFDE FFE6          	movff	postinc2,postinc1
  3783  0020DC  CFDD FFE5          	movff	postdec2,postdec1
  3784  0020E0  2A42               	incf	_conflict_data_count,f,c
  3785                           
  3786                           ;clcd.c: 333: conflict_check(exist_uid_idx, start_point, end_point);
  3787  0020E2  C17D  F030         	movff	update_string_data@start_point,conflict_check@new_start_point
  3788  0020E6  C17E  F031         	movff	update_string_data@end_point,conflict_check@new_end_point
  3789  0020EA  0101               	movlb	1	; () banked
  3790  0020EC  517C               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3791  0020EE  EC4D  F00D         	call	_conflict_check
  3792  0020F2                     l7616:
  3793                           
  3794                           ;clcd.c: 334: return 200;
  3795  0020F2  0EC8               	movlw	200
  3796  0020F4  0012               	return	
  3797  0020F6                     l7622:
  3798                           
  3799                           ;clcd.c: 336: if (conflict_check(exist_uid_idx, start_point, end_point) == 1) {
  3800  0020F6  C17D  F030         	movff	update_string_data@start_point,conflict_check@new_start_point
  3801  0020FA  C17E  F031         	movff	update_string_data@end_point,conflict_check@new_end_point
  3802  0020FE  0101               	movlb	1	; () banked
  3803  002100  517C               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3804  002102  EC4D  F00D         	call	_conflict_check
  3805  002106  06E8               	decf	wreg,f,c
  3806  002108  A4D8               	btfss	status,2,c
  3807  00210A  D04F               	goto	l7642
  3808                           
  3809                           ;clcd.c: 337: printf("conflict: uid\r\n");
  3810  00210C  0E43               	movlw	low STR_18
  3811  00210E  6E1E               	movwf	printf@f,c
  3812  002110  0EFE               	movlw	high STR_18
  3813  002112  6E1F               	movwf	printf@f+1,c
  3814  002114  EC03  F015         	call	_printf	;wreg free
  3815                           
  3816                           ;clcd.c: 338: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3817  002118  0E00               	movlw	0
  3818  00211A  0101               	movlb	1	; () banked
  3819  00211C  6F80               	movwf	(update_string_data@i+1)& (0+255),b
  3820  00211E  0E00               	movlw	0
  3821  002120  6F7F               	movwf	update_string_data@i& (0+255),b
  3822  002122  D028               	goto	l7634
  3823  002124                     l7628:
  3824                           
  3825                           ; BSR set to: 1
  3826                           ;clcd.c: 339: if (conflict_arr[i] != -1)
  3827  002124  90D8               	bcf	status,0,c
  3828  002126  0101               	movlb	1	; () banked
  3829  002128  357F               	rlcf	update_string_data@i& (0+255),w,b
  3830  00212A  6ED9               	movwf	fsr2l,c
  3831  00212C  0101               	movlb	1	; () banked
  3832  00212E  3580               	rlcf	(update_string_data@i+1)& (0+255),w,b
  3833  002130  6EDA               	movwf	fsr2h,c
  3834  002132  0EBB               	movlw	low _conflict_arr
  3835  002134  26D9               	addwf	fsr2l,f,c
  3836  002136  0E00               	movlw	high _conflict_arr
  3837  002138  22DA               	addwfc	fsr2h,f,c
  3838  00213A  28DE               	incf	postinc2,w,c
  3839  00213C  E103               	bnz	u7130
  3840  00213E  28DE               	incf	postinc2,w,c
  3841  002140  B4D8               	btfsc	status,2,c
  3842  002142  D015               	goto	l7632
  3843  002144                     u7130:
  3844                           
  3845                           ; BSR set to: 1
  3846                           ;clcd.c: 340: printf("%c, ", conflict_arr[i]);
  3847  002144  0EDC               	movlw	low STR_19
  3848  002146  6E1E               	movwf	printf@f,c
  3849  002148  0EFF               	movlw	high STR_19
  3850  00214A  6E1F               	movwf	printf@f+1,c
  3851  00214C  90D8               	bcf	status,0,c
  3852  00214E  0101               	movlb	1	; () banked
  3853  002150  357F               	rlcf	update_string_data@i& (0+255),w,b
  3854  002152  6ED9               	movwf	fsr2l,c
  3855  002154  0101               	movlb	1	; () banked
  3856  002156  3580               	rlcf	(update_string_data@i+1)& (0+255),w,b
  3857  002158  6EDA               	movwf	fsr2h,c
  3858  00215A  0EBB               	movlw	low _conflict_arr
  3859  00215C  26D9               	addwf	fsr2l,f,c
  3860  00215E  0E00               	movlw	high _conflict_arr
  3861  002160  22DA               	addwfc	fsr2h,f,c
  3862  002162  CFDE F020          	movff	postinc2,?_printf+2
  3863  002166  CFDD F021          	movff	postdec2,?_printf+3
  3864  00216A  EC03  F015         	call	_printf	;wreg free
  3865  00216E                     l7632:
  3866  00216E  0101               	movlb	1	; () banked
  3867  002170  4B7F               	infsnz	update_string_data@i& (0+255),f,b
  3868  002172  2B80               	incf	(update_string_data@i+1)& (0+255),f,b
  3869  002174                     l7634:
  3870                           
  3871                           ; BSR set to: 1
  3872  002174  504D               	movf	_clcd_config_data+4,w,c
  3873  002176  0101               	movlb	1	; () banked
  3874  002178  6F78               	movwf	??_update_string_data& (0+255),b
  3875  00217A  6B79               	clrf	(??_update_string_data+1)& (0+255),b
  3876  00217C  0101               	movlb	1	; () banked
  3877  00217E  5178               	movf	??_update_string_data& (0+255),w,b
  3878  002180  0101               	movlb	1	; () banked
  3879  002182  5D7F               	subwf	update_string_data@i& (0+255),w,b
  3880  002184  0101               	movlb	1	; () banked
  3881  002186  5180               	movf	(update_string_data@i+1)& (0+255),w,b
  3882  002188  0A80               	xorlw	128
  3883  00218A  0101               	movlb	1	; () banked
  3884  00218C  6F7A               	movwf	(??_update_string_data+2)& (0+255),b
  3885  00218E  0101               	movlb	1	; () banked
  3886  002190  5179               	movf	(??_update_string_data+1)& (0+255),w,b
  3887  002192  0A80               	xorlw	128
  3888  002194  0101               	movlb	1	; () banked
  3889  002196  597A               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3890  002198  A0D8               	btfss	status,0,c
  3891  00219A  D7C4               	goto	l7628
  3892                           
  3893                           ; BSR set to: 1
  3894                           ;clcd.c: 341: }
  3895                           ;clcd.c: 342: printf("\r\n");
  3896                           
  3897                           ; BSR set to: 1
  3898  00219C  0EEC               	movlw	low (STR_16+27)
  3899  00219E  6E1E               	movwf	printf@f,c
  3900  0021A0  0EFC               	movlw	high (STR_16+27)
  3901  0021A2  6E1F               	movwf	printf@f+1,c
  3902  0021A4  EC03  F015         	call	_printf	;wreg free
  3903  0021A8  D7A4               	goto	l7616
  3904  0021AA                     l7642:
  3905  0021AA  0101               	movlb	1	; () banked
  3906  0021AC  4B7F               	infsnz	update_string_data@i& (0+255),f,b
  3907  0021AE  2B80               	incf	(update_string_data@i+1)& (0+255),f,b
  3908  0021B0                     l7644:
  3909                           
  3910                           ; BSR set to: 1
  3911  0021B0  504D               	movf	_clcd_config_data+4,w,c
  3912  0021B2  0101               	movlb	1	; () banked
  3913  0021B4  6F78               	movwf	??_update_string_data& (0+255),b
  3914  0021B6  6B79               	clrf	(??_update_string_data+1)& (0+255),b
  3915  0021B8  0101               	movlb	1	; () banked
  3916  0021BA  5178               	movf	??_update_string_data& (0+255),w,b
  3917  0021BC  0101               	movlb	1	; () banked
  3918  0021BE  5D7F               	subwf	update_string_data@i& (0+255),w,b
  3919  0021C0  0101               	movlb	1	; () banked
  3920  0021C2  5180               	movf	(update_string_data@i+1)& (0+255),w,b
  3921  0021C4  0A80               	xorlw	128
  3922  0021C6  0101               	movlb	1	; () banked
  3923  0021C8  6F7A               	movwf	(??_update_string_data+2)& (0+255),b
  3924  0021CA  0101               	movlb	1	; () banked
  3925  0021CC  5179               	movf	(??_update_string_data+1)& (0+255),w,b
  3926  0021CE  0A80               	xorlw	128
  3927  0021D0  0101               	movlb	1	; () banked
  3928  0021D2  597A               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3929  0021D4  A0D8               	btfss	status,0,c
  3930  0021D6  D74B               	goto	l7606
  3931                           
  3932                           ; BSR set to: 1
  3933                           ;clcd.c: 344: }
  3934                           ;clcd.c: 345: }
  3935                           ;clcd.c: 346: }
  3936                           ;clcd.c: 347: memset(&clcd_display_string_details[data_count], 0, sizeof (CLCD_STRING_DI
      +                          SPLAY_DETAILS));
  3937                           
  3938                           ; BSR set to: 1
  3939  0021D8  5043               	movf	_data_count,w,c
  3940  0021DA  0D37               	mullw	55
  3941  0021DC  0E96               	movlw	low _clcd_display_string_details
  3942  0021DE  24F3               	addwf	prodl,w,c
  3943  0021E0  6E24               	movwf	memset@p1,c
  3944  0021E2  0E02               	movlw	high _clcd_display_string_details
  3945  0021E4  20F4               	addwfc	prodh,w,c
  3946  0021E6  6E25               	movwf	memset@p1+1,c
  3947  0021E8  0E00               	movlw	0
  3948  0021EA  6E27               	movwf	memset@c+1,c
  3949  0021EC  0E00               	movlw	0
  3950  0021EE  6E26               	movwf	memset@c,c
  3951  0021F0  0E00               	movlw	0
  3952  0021F2  6E29               	movwf	memset@n+1,c
  3953  0021F4  0E37               	movlw	55
  3954  0021F6  6E28               	movwf	memset@n,c
  3955  0021F8  ECBB  F01F         	call	_memset	;wreg free
  3956                           
  3957                           ;clcd.c: 348: copy_data(&clcd_display_string_details[data_count], data);
  3958  0021FC  5043               	movf	_data_count,w,c
  3959  0021FE  0D37               	mullw	55
  3960  002200  0E96               	movlw	low _clcd_display_string_details
  3961  002202  24F3               	addwf	prodl,w,c
  3962  002204  6E30               	movwf	copy_data@clcd_str_data,c
  3963  002206  0E02               	movlw	high _clcd_display_string_details
  3964  002208  20F4               	addwfc	prodh,w,c
  3965  00220A  6E31               	movwf	copy_data@clcd_str_data+1,c
  3966  00220C  C03F  F032         	movff	update_string_data@data,copy_data@data
  3967  002210  C040  F033         	movff	update_string_data@data+1,copy_data@data+1
  3968  002214  EC1F  F012         	call	_copy_data	;wreg free
  3969                           
  3970                           ;clcd.c: 349: data_count++;
  3971  002218  2A43               	incf	_data_count,f,c
  3972                           
  3973                           ;clcd.c: 350: make_display();
  3974  00221A  EC12  F014         	call	_make_display	;wreg free
  3975  00221E                     l7654:
  3976                           
  3977                           ;clcd.c: 353: }
  3978                           ;clcd.c: 354: return 0;
  3979  00221E  0E00               	movlw	0
  3980  002220  0012               	return	
  3981  002222                     __end_of_update_string_data:
  3982                           	opt stack 0
  3983                           tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           prodh	equ	0xFF4
  3988                           prodl	equ	0xFF3
  3989                           intcon	equ	0xFF2
  3990                           postinc0	equ	0xFEE
  3991                           wreg	equ	0xFE8
  3992                           postinc1	equ	0xFE6
  3993                           postdec1	equ	0xFE5
  3994                           fsr1h	equ	0xFE2
  3995                           fsr1l	equ	0xFE1
  3996                           indf2	equ	0xFDF
  3997                           postinc2	equ	0xFDE
  3998                           postdec2	equ	0xFDD
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function _make_display *****************
  4004 ;; Defined at:
  4005 ;;		line 708 in file "clcd.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  count           2   60[COMRAM] int 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      void 
  4012 ;; Registers used:
  4013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;Total ram usage:        5 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    9
  4026 ;; This function calls:
  4027 ;;		___wmul
  4028 ;;		_display_text
  4029 ;;		_scroll_left_to_right
  4030 ;;		_scroll_off
  4031 ;;		_scroll_right_to_left
  4032 ;;		_strlen
  4033 ;; This function is called by:
  4034 ;;		_update_string_data
  4035 ;;		_main
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text5
  4040  002824                     __ptext5:
  4041                           	opt stack 0
  4042  002824                     _make_display:
  4043                           	opt stack 21
  4044                           
  4045                           ;clcd.c: 709: int count = 0;
  4046                           
  4047                           ;incstack = 0
  4048  002824  0E00               	movlw	0
  4049  002826  6E3E               	movwf	make_display@count+1,c
  4050  002828  0E00               	movlw	0
  4051  00282A  6E3D               	movwf	make_display@count,c
  4052                           
  4053                           ;clcd.c: 710: for (count = 0; count < clcd_config_data.clcd_max_display_string; count++)
      +                           {
  4054  00282C  0E00               	movlw	0
  4055  00282E  6E3E               	movwf	make_display@count+1,c
  4056  002830  0E00               	movlw	0
  4057  002832  6E3D               	movwf	make_display@count,c
  4058  002834  D0D3               	goto	l7288
  4059  002836                     l7268:
  4060                           
  4061                           ;clcd.c: 711: if (strlen(clcd_display_string_details[count].string) != 0 && clcd_display
      +                          _string_details[count].direction == 2) {
  4062  002836  C03D  F018         	movff	make_display@count,___wmul@multiplier
  4063  00283A  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  4064  00283E  0E00               	movlw	0
  4065  002840  6E1B               	movwf	___wmul@multiplicand+1,c
  4066  002842  0E37               	movlw	55
  4067  002844  6E1A               	movwf	___wmul@multiplicand,c
  4068  002846  ECE7  F01F         	call	___wmul	;wreg free
  4069  00284A  0E02               	movlw	2
  4070  00284C  2618               	addwf	?___wmul,f,c
  4071  00284E  0E00               	movlw	0
  4072  002850  2219               	addwfc	?___wmul+1,f,c
  4073  002852  0E96               	movlw	low _clcd_display_string_details
  4074  002854  2418               	addwf	?___wmul,w,c
  4075  002856  6E1E               	movwf	strlen@s,c
  4076  002858  0E02               	movlw	high _clcd_display_string_details
  4077  00285A  2019               	addwfc	?___wmul+1,w,c
  4078  00285C  6E1F               	movwf	strlen@s+1,c
  4079  00285E  ECED  F01E         	call	_strlen	;wreg free
  4080  002862  501E               	movf	?_strlen,w,c
  4081  002864  101F               	iorwf	?_strlen+1,w,c
  4082  002866  B4D8               	btfsc	status,2,c
  4083  002868  D02C               	goto	l7274
  4084  00286A  C03D  F018         	movff	make_display@count,___wmul@multiplier
  4085  00286E  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  4086  002872  0E00               	movlw	0
  4087  002874  6E1B               	movwf	___wmul@multiplicand+1,c
  4088  002876  0E37               	movlw	55
  4089  002878  6E1A               	movwf	___wmul@multiplicand,c
  4090  00287A  ECE7  F01F         	call	___wmul	;wreg free
  4091  00287E  0E31               	movlw	49
  4092  002880  2618               	addwf	?___wmul,f,c
  4093  002882  0E00               	movlw	0
  4094  002884  2219               	addwfc	?___wmul+1,f,c
  4095  002886  0E96               	movlw	low _clcd_display_string_details
  4096  002888  2418               	addwf	?___wmul,w,c
  4097  00288A  6ED9               	movwf	fsr2l,c
  4098  00288C  0E02               	movlw	high _clcd_display_string_details
  4099  00288E  2019               	addwfc	?___wmul+1,w,c
  4100  002890  6EDA               	movwf	fsr2h,c
  4101  002892  50DF               	movf	223,w,c
  4102  002894  0B07               	andlw	7
  4103  002896  0A02               	xorlw	2
  4104  002898  A4D8               	btfss	status,2,c
  4105  00289A  D013               	goto	l7274
  4106                           
  4107                           ;clcd.c: 712: scroll_left_to_right(&clcd_display_string_details[count]);
  4108  00289C  C03D  F018         	movff	make_display@count,___wmul@multiplier
  4109  0028A0  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  4110  0028A4  0E00               	movlw	0
  4111  0028A6  6E1B               	movwf	___wmul@multiplicand+1,c
  4112  0028A8  0E37               	movlw	55
  4113  0028AA  6E1A               	movwf	___wmul@multiplicand,c
  4114  0028AC  ECE7  F01F         	call	___wmul	;wreg free
  4115  0028B0  0E96               	movlw	low _clcd_display_string_details
  4116  0028B2  2418               	addwf	?___wmul,w,c
  4117  0028B4  6E2C               	movwf	scroll_left_to_right@clcd_display_string_details,c
  4118  0028B6  0E02               	movlw	high _clcd_display_string_details
  4119  0028B8  2019               	addwfc	?___wmul+1,w,c
  4120  0028BA  6E2D               	movwf	scroll_left_to_right@clcd_display_string_details+1,c
  4121  0028BC  EC47  F00A         	call	_scroll_left_to_right	;wreg free
  4122                           
  4123                           ;clcd.c: 713: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 1) {
  4124  0028C0  D08B               	goto	l7286
  4125  0028C2                     l7274:
  4126  0028C2  C03D  F018         	movff	make_display@count,___wmul@multiplier
  4127  0028C6  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  4128  0028CA  0E00               	movlw	0
  4129  0028CC  6E1B               	movwf	___wmul@multiplicand+1,c
  4130  0028CE  0E37               	movlw	55
  4131  0028D0  6E1A               	movwf	___wmul@multiplicand,c
  4132  0028D2  ECE7  F01F         	call	___wmul	;wreg free
  4133  0028D6  0E02               	movlw	2
  4134  0028D8  2618               	addwf	?___wmul,f,c
  4135  0028DA  0E00               	movlw	0
  4136  0028DC  2219               	addwfc	?___wmul+1,f,c
  4137  0028DE  0E96               	movlw	low _clcd_display_string_details
  4138  0028E0  2418               	addwf	?___wmul,w,c
  4139  0028E2  6E1E               	movwf	strlen@s,c
  4140  0028E4  0E02               	movlw	high _clcd_display_string_details
  4141  0028E6  2019               	addwfc	?___wmul+1,w,c
  4142  0028E8  6E1F               	movwf	strlen@s+1,c
  4143  0028EA  ECED  F01E         	call	_strlen	;wreg free
  4144  0028EE  501E               	movf	?_strlen,w,c
  4145  0028F0  101F               	iorwf	?_strlen+1,w,c
  4146  0028F2  B4D8               	btfsc	status,2,c
  4147  0028F4  D02C               	goto	l7280
  4148  0028F6  C03D  F018         	movff	make_display@count,___wmul@multiplier
  4149  0028FA  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  4150  0028FE  0E00               	movlw	0
  4151  002900  6E1B               	movwf	___wmul@multiplicand+1,c
  4152  002902  0E37               	movlw	55
  4153  002904  6E1A               	movwf	___wmul@multiplicand,c
  4154  002906  ECE7  F01F         	call	___wmul	;wreg free
  4155  00290A  0E31               	movlw	49
  4156  00290C  2618               	addwf	?___wmul,f,c
  4157  00290E  0E00               	movlw	0
  4158  002910  2219               	addwfc	?___wmul+1,f,c
  4159  002912  0E96               	movlw	low _clcd_display_string_details
  4160  002914  2418               	addwf	?___wmul,w,c
  4161  002916  6ED9               	movwf	fsr2l,c
  4162  002918  0E02               	movlw	high _clcd_display_string_details
  4163  00291A  2019               	addwfc	?___wmul+1,w,c
  4164  00291C  6EDA               	movwf	fsr2h,c
  4165  00291E  50DF               	movf	223,w,c
  4166  002920  0B07               	andlw	7
  4167  002922  06E8               	decf	wreg,f,c
  4168  002924  A4D8               	btfss	status,2,c
  4169  002926  D013               	goto	l7280
  4170                           
  4171                           ;clcd.c: 714: scroll_right_to_left(&clcd_display_string_details[count]);
  4172  002928  C03D  F018         	movff	make_display@count,___wmul@multiplier
  4173  00292C  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  4174  002930  0E00               	movlw	0
  4175  002932  6E1B               	movwf	___wmul@multiplicand+1,c
  4176  002934  0E37               	movlw	55
  4177  002936  6E1A               	movwf	___wmul@multiplicand,c
  4178  002938  ECE7  F01F         	call	___wmul	;wreg free
  4179  00293C  0E96               	movlw	low _clcd_display_string_details
  4180  00293E  2418               	addwf	?___wmul,w,c
  4181  002940  6E2C               	movwf	scroll_right_to_left@clcd_display_string_details,c
  4182  002942  0E02               	movlw	high _clcd_display_string_details
  4183  002944  2019               	addwfc	?___wmul+1,w,c
  4184  002946  6E2D               	movwf	scroll_right_to_left@clcd_display_string_details+1,c
  4185  002948  EC6D  F008         	call	_scroll_right_to_left	;wreg free
  4186                           
  4187                           ;clcd.c: 715: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 0) {
  4188  00294C  D045               	goto	l7286
  4189  00294E                     l7280:
  4190  00294E  C03D  F018         	movff	make_display@count,___wmul@multiplier
  4191  002952  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  4192  002956  0E00               	movlw	0
  4193  002958  6E1B               	movwf	___wmul@multiplicand+1,c
  4194  00295A  0E37               	movlw	55
  4195  00295C  6E1A               	movwf	___wmul@multiplicand,c
  4196  00295E  ECE7  F01F         	call	___wmul	;wreg free
  4197  002962  0E02               	movlw	2
  4198  002964  2618               	addwf	?___wmul,f,c
  4199  002966  0E00               	movlw	0
  4200  002968  2219               	addwfc	?___wmul+1,f,c
  4201  00296A  0E96               	movlw	low _clcd_display_string_details
  4202  00296C  2418               	addwf	?___wmul,w,c
  4203  00296E  6E1E               	movwf	strlen@s,c
  4204  002970  0E02               	movlw	high _clcd_display_string_details
  4205  002972  2019               	addwfc	?___wmul+1,w,c
  4206  002974  6E1F               	movwf	strlen@s+1,c
  4207  002976  ECED  F01E         	call	_strlen	;wreg free
  4208  00297A  501E               	movf	?_strlen,w,c
  4209  00297C  101F               	iorwf	?_strlen+1,w,c
  4210  00297E  B4D8               	btfsc	status,2,c
  4211  002980  D02B               	goto	l7286
  4212  002982  C03D  F018         	movff	make_display@count,___wmul@multiplier
  4213  002986  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  4214  00298A  0E00               	movlw	0
  4215  00298C  6E1B               	movwf	___wmul@multiplicand+1,c
  4216  00298E  0E37               	movlw	55
  4217  002990  6E1A               	movwf	___wmul@multiplicand,c
  4218  002992  ECE7  F01F         	call	___wmul	;wreg free
  4219  002996  0E31               	movlw	49
  4220  002998  2618               	addwf	?___wmul,f,c
  4221  00299A  0E00               	movlw	0
  4222  00299C  2219               	addwfc	?___wmul+1,f,c
  4223  00299E  0E96               	movlw	low _clcd_display_string_details
  4224  0029A0  2418               	addwf	?___wmul,w,c
  4225  0029A2  6ED9               	movwf	fsr2l,c
  4226  0029A4  0E02               	movlw	high _clcd_display_string_details
  4227  0029A6  2019               	addwfc	?___wmul+1,w,c
  4228  0029A8  6EDA               	movwf	fsr2h,c
  4229  0029AA  50DF               	movf	223,w,c
  4230  0029AC  0B07               	andlw	7
  4231  0029AE  0900               	iorlw	0
  4232  0029B0  A4D8               	btfss	status,2,c
  4233  0029B2  D012               	goto	l7286
  4234                           
  4235                           ;clcd.c: 716: scroll_off(&clcd_display_string_details[count]);
  4236  0029B4  C03D  F018         	movff	make_display@count,___wmul@multiplier
  4237  0029B8  C03E  F019         	movff	make_display@count+1,___wmul@multiplier+1
  4238  0029BC  0E00               	movlw	0
  4239  0029BE  6E1B               	movwf	___wmul@multiplicand+1,c
  4240  0029C0  0E37               	movlw	55
  4241  0029C2  6E1A               	movwf	___wmul@multiplicand,c
  4242  0029C4  ECE7  F01F         	call	___wmul	;wreg free
  4243  0029C8  0E96               	movlw	low _clcd_display_string_details
  4244  0029CA  2418               	addwf	?___wmul,w,c
  4245  0029CC  6E24               	movwf	scroll_off@clcd_display_string_details,c
  4246  0029CE  0E02               	movlw	high _clcd_display_string_details
  4247  0029D0  2019               	addwfc	?___wmul+1,w,c
  4248  0029D2  6E25               	movwf	scroll_off@clcd_display_string_details+1,c
  4249  0029D4  ECEF  F015         	call	_scroll_off	;wreg free
  4250  0029D8                     l7286:
  4251  0029D8  4A3D               	infsnz	make_display@count,f,c
  4252  0029DA  2A3E               	incf	make_display@count+1,f,c
  4253  0029DC                     l7288:
  4254  0029DC  504D               	movf	_clcd_config_data+4,w,c
  4255  0029DE  6E3A               	movwf	??_make_display& (0+255),c
  4256  0029E0  6A3B               	clrf	(??_make_display+1)& (0+255),c
  4257  0029E2  503A               	movf	??_make_display,w,c
  4258  0029E4  5C3D               	subwf	make_display@count,w,c
  4259  0029E6  503E               	movf	make_display@count+1,w,c
  4260  0029E8  0A80               	xorlw	128
  4261  0029EA  6E3C               	movwf	(??_make_display+2)& (0+255),c
  4262  0029EC  503B               	movf	??_make_display+1,w,c
  4263  0029EE  0A80               	xorlw	128
  4264  0029F0  583C               	subwfb	(??_make_display+2)& (0+255),w,c
  4265  0029F2  A0D8               	btfss	status,0,c
  4266  0029F4  D720               	goto	l7268
  4267                           
  4268                           ;clcd.c: 717: }
  4269                           ;clcd.c: 718: }
  4270                           ;clcd.c: 719: print_data_ready = 1;
  4271  0029F6  0E00               	movlw	0
  4272  0029F8  0100               	movlb	0	; () banked
  4273  0029FA  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  4274  0029FC  0E01               	movlw	1
  4275  0029FE  6F76               	movwf	_print_data_ready& (0+255),b
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;clcd.c: 720: display_text();
  4279  002A00  EC3B  F01B         	call	_display_text	;wreg free
  4280  002A04  0012               	return		;funcret
  4281  002A06                     __end_of_make_display:
  4282                           	opt stack 0
  4283                           tblptru	equ	0xFF8
  4284                           tblptrh	equ	0xFF7
  4285                           tblptrl	equ	0xFF6
  4286                           tablat	equ	0xFF5
  4287                           prodh	equ	0xFF4
  4288                           prodl	equ	0xFF3
  4289                           intcon	equ	0xFF2
  4290                           postinc0	equ	0xFEE
  4291                           wreg	equ	0xFE8
  4292                           postinc1	equ	0xFE6
  4293                           postdec1	equ	0xFE5
  4294                           fsr1h	equ	0xFE2
  4295                           fsr1l	equ	0xFE1
  4296                           indf2	equ	0xFDF
  4297                           postinc2	equ	0xFDE
  4298                           postdec2	equ	0xFDD
  4299                           fsr2h	equ	0xFDA
  4300                           fsr2l	equ	0xFD9
  4301                           status	equ	0xFD8
  4302                           
  4303 ;; *************** function _scroll_right_to_left *****************
  4304 ;; Defined at:
  4305 ;;		line 592 in file "clcd.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;  clcd_display    2   43[COMRAM] PTR struct .
  4308 ;;		 -> clcd_display_string_details(1100), 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  line            1   56[COMRAM] unsigned char 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Temps:         11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;Total ram usage:       14 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    6
  4327 ;; This function calls:
  4328 ;;		_memset
  4329 ;;		_strncpy
  4330 ;; This function is called by:
  4331 ;;		_make_display
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text6
  4336  0010DA                     __ptext6:
  4337                           	opt stack 0
  4338  0010DA                     _scroll_right_to_left:
  4339                           	opt stack 23
  4340                           
  4341                           ;clcd.c: 594: char line = -1;
  4342                           
  4343                           ;incstack = 0
  4344  0010DA  6839               	setf	scroll_right_to_left@line,c
  4345                           
  4346                           ;clcd.c: 595: if (clcd_display_string_details->start_row == 0)
  4347  0010DC  EE20 F02B          	lfsr	2,43
  4348  0010E0  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4349  0010E2  26D9               	addwf	fsr2l,f,c
  4350  0010E4  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4351  0010E6  22DA               	addwfc	fsr2h,f,c
  4352  0010E8  50DF               	movf	indf2,w,c
  4353  0010EA  0B7F               	andlw	127
  4354  0010EC  0900               	iorlw	0
  4355  0010EE  A4D8               	btfss	status,2,c
  4356  0010F0  D002               	goto	l6900
  4357                           
  4358                           ;clcd.c: 596: line = 0;
  4359  0010F2  0E00               	movlw	0
  4360  0010F4  D00C               	goto	L1
  4361  0010F6                     l6900:
  4362                           
  4363                           ;clcd.c: 597: else if (clcd_display_string_details->start_row == 1)
  4364  0010F6  EE20 F02B          	lfsr	2,43
  4365  0010FA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4366  0010FC  26D9               	addwf	fsr2l,f,c
  4367  0010FE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4368  001100  22DA               	addwfc	fsr2h,f,c
  4369  001102  50DF               	movf	indf2,w,c
  4370  001104  0B7F               	andlw	127
  4371  001106  06E8               	decf	wreg,f,c
  4372  001108  A4D8               	btfss	status,2,c
  4373  00110A  D002               	goto	l6904
  4374                           
  4375                           ;clcd.c: 598: line = 1;
  4376  00110C  0E01               	movlw	1
  4377  00110E                     L1:
  4378  00110E  6E39               	movwf	scroll_right_to_left@line,c
  4379  001110                     l6904:
  4380                           
  4381                           ;clcd.c: 599: if (clcd_display_string_details->start_row == 2)
  4382  001110  EE20 F02B          	lfsr	2,43
  4383  001114  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4384  001116  26D9               	addwf	fsr2l,f,c
  4385  001118  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4386  00111A  22DA               	addwfc	fsr2h,f,c
  4387  00111C  50DF               	movf	indf2,w,c
  4388  00111E  0B7F               	andlw	127
  4389  001120  0A02               	xorlw	2
  4390  001122  A4D8               	btfss	status,2,c
  4391  001124  D002               	goto	l6908
  4392                           
  4393                           ;clcd.c: 600: line = 2;
  4394  001126  0E02               	movlw	2
  4395  001128  6E39               	movwf	scroll_right_to_left@line,c
  4396  00112A                     l6908:
  4397                           
  4398                           ;clcd.c: 601: if (clcd_display_string_details->start_row == 3)
  4399  00112A  EE20 F02B          	lfsr	2,43
  4400  00112E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4401  001130  26D9               	addwf	fsr2l,f,c
  4402  001132  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4403  001134  22DA               	addwfc	fsr2h,f,c
  4404  001136  50DF               	movf	indf2,w,c
  4405  001138  0B7F               	andlw	127
  4406  00113A  0A03               	xorlw	3
  4407  00113C  A4D8               	btfss	status,2,c
  4408  00113E  D002               	goto	l6912
  4409                           
  4410                           ;clcd.c: 602: line = 3;
  4411  001140  0E03               	movlw	3
  4412  001142  6E39               	movwf	scroll_right_to_left@line,c
  4413  001144                     l6912:
  4414                           
  4415                           ;clcd.c: 604: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  4416                           ;clcd.c: 605: ' ', clcd_display_string_details->display_char_count);
  4417  001144  5039               	movf	scroll_right_to_left@line,w,c
  4418  001146  0D14               	mullw	20
  4419  001148  0E00               	movlw	low _lcd_display_array
  4420  00114A  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4421  00114C  0E01               	movlw	high _lcd_display_array
  4422  00114E  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4423  001150  50F3               	movf	prodl,w,c
  4424  001152  262E               	addwf	??_scroll_right_to_left,f,c
  4425  001154  50F4               	movf	prodh,w,c
  4426  001156  222F               	addwfc	??_scroll_right_to_left+1,f,c
  4427  001158  EE20 F02C          	lfsr	2,44
  4428  00115C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4429  00115E  26D9               	addwf	fsr2l,f,c
  4430  001160  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4431  001162  22DA               	addwfc	fsr2h,f,c
  4432  001164  50DF               	movf	indf2,w,c
  4433  001166  0B7F               	andlw	127
  4434  001168  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4435  00116A  5030               	movf	??_scroll_right_to_left+2,w,c
  4436  00116C  0D01               	mullw	1
  4437  00116E  50F3               	movf	prodl,w,c
  4438  001170  242E               	addwf	??_scroll_right_to_left,w,c
  4439  001172  6E24               	movwf	memset@p1,c
  4440  001174  50F4               	movf	prodh,w,c
  4441  001176  202F               	addwfc	??_scroll_right_to_left+1,w,c
  4442  001178  6E25               	movwf	memset@p1+1,c
  4443  00117A  0E00               	movlw	0
  4444  00117C  6E27               	movwf	memset@c+1,c
  4445  00117E  0E20               	movlw	32
  4446  001180  6E26               	movwf	memset@c,c
  4447  001182  EE20 F032          	lfsr	2,50
  4448  001186  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4449  001188  26D9               	addwf	fsr2l,f,c
  4450  00118A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4451  00118C  22DA               	addwfc	fsr2h,f,c
  4452  00118E  50DF               	movf	indf2,w,c
  4453  001190  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  4454  001192  5031               	movf	??_scroll_right_to_left+3,w,c
  4455  001194  6E28               	movwf	memset@n,c
  4456  001196  6A29               	clrf	memset@n+1,c
  4457  001198  ECBB  F01F         	call	_memset	;wreg free
  4458                           
  4459                           ;clcd.c: 606: if (clcd_display_string_details->length_count_for_left_scroll > clcd_displ
      +                          ay_string_details->strlen) {
  4460  00119C  EE20 F02A          	lfsr	2,42
  4461  0011A0  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4462  0011A2  26D9               	addwf	fsr2l,f,c
  4463  0011A4  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4464  0011A6  22DA               	addwfc	fsr2h,f,c
  4465  0011A8  50DF               	movf	indf2,w,c
  4466  0011AA  0B7F               	andlw	127
  4467  0011AC  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4468  0011AE  EE20 F035          	lfsr	2,53
  4469  0011B2  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4470  0011B4  26D9               	addwf	fsr2l,f,c
  4471  0011B6  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4472  0011B8  22DA               	addwfc	fsr2h,f,c
  4473  0011BA  50DF               	movf	indf2,w,c
  4474  0011BC  0B7F               	andlw	127
  4475  0011BE  5C2E               	subwf	??_scroll_right_to_left,w,c
  4476  0011C0  B0D8               	btfsc	status,0,c
  4477  0011C2  D066               	goto	l6918
  4478                           
  4479                           ;clcd.c: 608: strncpy(lcd_display_array[line]+(clcd_display_string_details->end_col - cl
      +                          cd_display_string_details->length_decount_for_left_scroll),
  4480                           ;clcd.c: 609: clcd_display_string_details->string, (clcd_display_string_details->display
      +                          _char_count -
  4481                           ;clcd.c: 610: (clcd_display_string_details->display_char_count - (clcd_display_string_de
      +                          tails->length_decount_for_left_scroll + 1))));
  4482  0011C4  5039               	movf	scroll_right_to_left@line,w,c
  4483  0011C6  0D14               	mullw	20
  4484  0011C8  EE20 F036          	lfsr	2,54
  4485  0011CC  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4486  0011CE  26D9               	addwf	fsr2l,f,c
  4487  0011D0  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4488  0011D2  22DA               	addwfc	fsr2h,f,c
  4489  0011D4  50DF               	movf	indf2,w,c
  4490  0011D6  0B7F               	andlw	127
  4491  0011D8  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4492  0011DA  6A2F               	clrf	(??_scroll_right_to_left+1)& (0+255),c
  4493  0011DC  1E2E               	comf	??_scroll_right_to_left,f,c
  4494  0011DE  1E2F               	comf	??_scroll_right_to_left+1,f,c
  4495  0011E0  4A2E               	infsnz	??_scroll_right_to_left,f,c
  4496  0011E2  2A2F               	incf	??_scroll_right_to_left+1,f,c
  4497  0011E4  EE20 F02F          	lfsr	2,47
  4498  0011E8  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4499  0011EA  26D9               	addwf	fsr2l,f,c
  4500  0011EC  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4501  0011EE  22DA               	addwfc	fsr2h,f,c
  4502  0011F0  50DF               	movf	indf2,w,c
  4503  0011F2  0B7F               	andlw	127
  4504  0011F4  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4505  0011F6  6A31               	clrf	(??_scroll_right_to_left+3)& (0+255),c
  4506  0011F8  502E               	movf	??_scroll_right_to_left,w,c
  4507  0011FA  2630               	addwf	??_scroll_right_to_left+2,f,c
  4508  0011FC  502F               	movf	??_scroll_right_to_left+1,w,c
  4509  0011FE  2231               	addwfc	??_scroll_right_to_left+3,f,c
  4510  001200  0E00               	movlw	low _lcd_display_array
  4511  001202  6E32               	movwf	(??_scroll_right_to_left+4)& (0+255),c
  4512  001204  0E01               	movlw	high _lcd_display_array
  4513  001206  6E33               	movwf	(??_scroll_right_to_left+5)& (0+255),c
  4514  001208  5030               	movf	??_scroll_right_to_left+2,w,c
  4515  00120A  2632               	addwf	??_scroll_right_to_left+4,f,c
  4516  00120C  5031               	movf	??_scroll_right_to_left+3,w,c
  4517  00120E  2233               	addwfc	??_scroll_right_to_left+5,f,c
  4518  001210  50F3               	movf	prodl,w,c
  4519  001212  2432               	addwf	??_scroll_right_to_left+4,w,c
  4520  001214  6E10               	movwf	strncpy@to,c
  4521  001216  50F4               	movf	prodh,w,c
  4522  001218  2033               	addwfc	??_scroll_right_to_left+5,w,c
  4523  00121A  6E11               	movwf	strncpy@to+1,c
  4524  00121C  0E02               	movlw	2
  4525  00121E  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4526  001220  6E12               	movwf	strncpy@from,c
  4527  001222  0E00               	movlw	0
  4528  001224  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4529  001226  6E13               	movwf	strncpy@from+1,c
  4530  001228  EE20 F036          	lfsr	2,54
  4531  00122C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4532  00122E  26D9               	addwf	fsr2l,f,c
  4533  001230  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4534  001232  22DA               	addwfc	fsr2h,f,c
  4535  001234  50DF               	movf	indf2,w,c
  4536  001236  0B7F               	andlw	127
  4537  001238  6E34               	movwf	(??_scroll_right_to_left+6)& (0+255),c
  4538  00123A  6A35               	clrf	(??_scroll_right_to_left+7)& (0+255),c
  4539  00123C  0E01               	movlw	1
  4540  00123E  2634               	addwf	??_scroll_right_to_left+6,f,c
  4541  001240  0E00               	movlw	0
  4542  001242  2235               	addwfc	??_scroll_right_to_left+7,f,c
  4543  001244  1E34               	comf	??_scroll_right_to_left+6,f,c
  4544  001246  1E35               	comf	??_scroll_right_to_left+7,f,c
  4545  001248  4A34               	infsnz	??_scroll_right_to_left+6,f,c
  4546  00124A  2A35               	incf	??_scroll_right_to_left+7,f,c
  4547  00124C  EE20 F032          	lfsr	2,50
  4548  001250  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4549  001252  26D9               	addwf	fsr2l,f,c
  4550  001254  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4551  001256  22DA               	addwfc	fsr2h,f,c
  4552  001258  50DF               	movf	indf2,w,c
  4553  00125A  6E36               	movwf	(??_scroll_right_to_left+8)& (0+255),c
  4554  00125C  6A37               	clrf	(??_scroll_right_to_left+9)& (0+255),c
  4555  00125E  5034               	movf	??_scroll_right_to_left+6,w,c
  4556  001260  2636               	addwf	??_scroll_right_to_left+8,f,c
  4557  001262  5035               	movf	??_scroll_right_to_left+7,w,c
  4558  001264  2237               	addwfc	??_scroll_right_to_left+9,f,c
  4559  001266  1E36               	comf	??_scroll_right_to_left+8,f,c
  4560  001268  1E37               	comf	??_scroll_right_to_left+9,f,c
  4561  00126A  4A36               	infsnz	??_scroll_right_to_left+8,f,c
  4562  00126C  2A37               	incf	??_scroll_right_to_left+9,f,c
  4563  00126E  EE20 F032          	lfsr	2,50
  4564  001272  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4565  001274  26D9               	addwf	fsr2l,f,c
  4566  001276  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4567  001278  22DA               	addwfc	fsr2h,f,c
  4568  00127A  50DF               	movf	indf2,w,c
  4569  00127C  6E38               	movwf	(??_scroll_right_to_left+10)& (0+255),c
  4570  00127E  5038               	movf	??_scroll_right_to_left+10,w,c
  4571  001280  2436               	addwf	??_scroll_right_to_left+8,w,c
  4572  001282  6E14               	movwf	strncpy@size,c
  4573  001284  0E00               	movlw	0
  4574  001286  2037               	addwfc	??_scroll_right_to_left+9,w,c
  4575  001288  6E15               	movwf	strncpy@size+1,c
  4576  00128A  EC67  F01C         	call	_strncpy	;wreg free
  4577                           
  4578                           ;clcd.c: 611: } else {
  4579  00128E  D082               	goto	l6924
  4580  001290                     l6918:
  4581                           
  4582                           ;clcd.c: 612: if (clcd_display_string_details->string[clcd_display_string_details->lengt
      +                          h_count_for_left_scroll] != (0)) {
  4583  001290  EE20 F035          	lfsr	2,53
  4584  001294  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4585  001296  26D9               	addwf	fsr2l,f,c
  4586  001298  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4587  00129A  22DA               	addwfc	fsr2h,f,c
  4588  00129C  50DF               	movf	indf2,w,c
  4589  00129E  0B7F               	andlw	127
  4590  0012A0  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4591  0012A2  502E               	movf	??_scroll_right_to_left,w,c
  4592  0012A4  0D01               	mullw	1
  4593  0012A6  0E02               	movlw	2
  4594  0012A8  26F3               	addwf	prodl,f,c
  4595  0012AA  0E00               	movlw	0
  4596  0012AC  22F4               	addwfc	prodh,f,c
  4597  0012AE  50F3               	movf	prodl,w,c
  4598  0012B0  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4599  0012B2  6ED9               	movwf	fsr2l,c
  4600  0012B4  50F4               	movf	prodh,w,c
  4601  0012B6  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4602  0012B8  6EDA               	movwf	fsr2h,c
  4603  0012BA  50DF               	movf	indf2,w,c
  4604  0012BC  B4D8               	btfsc	status,2,c
  4605  0012BE  D03E               	goto	l6922
  4606                           
  4607                           ;clcd.c: 613: strncpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  4608                           ;clcd.c: 614: clcd_display_string_details->string + clcd_display_string_details->length_
      +                          count_for_left_scroll,
  4609                           ;clcd.c: 615: clcd_display_string_details->display_char_count);
  4610  0012C0  5039               	movf	scroll_right_to_left@line,w,c
  4611  0012C2  0D14               	mullw	20
  4612  0012C4  0E00               	movlw	low _lcd_display_array
  4613  0012C6  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4614  0012C8  0E01               	movlw	high _lcd_display_array
  4615  0012CA  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4616  0012CC  50F3               	movf	prodl,w,c
  4617  0012CE  262E               	addwf	??_scroll_right_to_left,f,c
  4618  0012D0  50F4               	movf	prodh,w,c
  4619  0012D2  222F               	addwfc	??_scroll_right_to_left+1,f,c
  4620  0012D4  EE20 F02C          	lfsr	2,44
  4621  0012D8  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4622  0012DA  26D9               	addwf	fsr2l,f,c
  4623  0012DC  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4624  0012DE  22DA               	addwfc	fsr2h,f,c
  4625  0012E0  50DF               	movf	indf2,w,c
  4626  0012E2  0B7F               	andlw	127
  4627  0012E4  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4628  0012E6  5030               	movf	??_scroll_right_to_left+2,w,c
  4629  0012E8  0D01               	mullw	1
  4630  0012EA  50F3               	movf	prodl,w,c
  4631  0012EC  242E               	addwf	??_scroll_right_to_left,w,c
  4632  0012EE  6E10               	movwf	strncpy@to,c
  4633  0012F0  50F4               	movf	prodh,w,c
  4634  0012F2  202F               	addwfc	??_scroll_right_to_left+1,w,c
  4635  0012F4  6E11               	movwf	strncpy@to+1,c
  4636  0012F6  EE20 F035          	lfsr	2,53
  4637  0012FA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4638  0012FC  26D9               	addwf	fsr2l,f,c
  4639  0012FE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4640  001300  22DA               	addwfc	fsr2h,f,c
  4641  001302  50DF               	movf	indf2,w,c
  4642  001304  0B7F               	andlw	127
  4643  001306  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  4644  001308  5031               	movf	??_scroll_right_to_left+3,w,c
  4645  00130A  0D01               	mullw	1
  4646  00130C  0E02               	movlw	2
  4647  00130E  26F3               	addwf	prodl,f,c
  4648  001310  0E00               	movlw	0
  4649  001312  22F4               	addwfc	prodh,f,c
  4650  001314  50F3               	movf	prodl,w,c
  4651  001316  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4652  001318  6E12               	movwf	strncpy@from,c
  4653  00131A  50F4               	movf	prodh,w,c
  4654  00131C  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4655  00131E  6E13               	movwf	strncpy@from+1,c
  4656  001320  EE20 F032          	lfsr	2,50
  4657  001324  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4658  001326  26D9               	addwf	fsr2l,f,c
  4659  001328  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4660  00132A  22DA               	addwfc	fsr2h,f,c
  4661  00132C  50DF               	movf	indf2,w,c
  4662  00132E  6E32               	movwf	(??_scroll_right_to_left+4)& (0+255),c
  4663  001330  5032               	movf	??_scroll_right_to_left+4,w,c
  4664  001332  6E14               	movwf	strncpy@size,c
  4665  001334  6A15               	clrf	strncpy@size+1,c
  4666  001336  EC67  F01C         	call	_strncpy	;wreg free
  4667                           
  4668                           ;clcd.c: 616: } else {
  4669  00133A  D02C               	goto	l6924
  4670  00133C                     l6922:
  4671                           
  4672                           ;clcd.c: 617: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  4673                           ;clcd.c: 618: ' ', clcd_display_string_details->display_char_count);
  4674  00133C  5039               	movf	scroll_right_to_left@line,w,c
  4675  00133E  0D14               	mullw	20
  4676  001340  0E00               	movlw	low _lcd_display_array
  4677  001342  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4678  001344  0E01               	movlw	high _lcd_display_array
  4679  001346  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4680  001348  50F3               	movf	prodl,w,c
  4681  00134A  262E               	addwf	??_scroll_right_to_left,f,c
  4682  00134C  50F4               	movf	prodh,w,c
  4683  00134E  222F               	addwfc	??_scroll_right_to_left+1,f,c
  4684  001350  EE20 F02C          	lfsr	2,44
  4685  001354  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4686  001356  26D9               	addwf	fsr2l,f,c
  4687  001358  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4688  00135A  22DA               	addwfc	fsr2h,f,c
  4689  00135C  50DF               	movf	indf2,w,c
  4690  00135E  0B7F               	andlw	127
  4691  001360  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4692  001362  5030               	movf	??_scroll_right_to_left+2,w,c
  4693  001364  0D01               	mullw	1
  4694  001366  50F3               	movf	prodl,w,c
  4695  001368  242E               	addwf	??_scroll_right_to_left,w,c
  4696  00136A  6E24               	movwf	memset@p1,c
  4697  00136C  50F4               	movf	prodh,w,c
  4698  00136E  202F               	addwfc	??_scroll_right_to_left+1,w,c
  4699  001370  6E25               	movwf	memset@p1+1,c
  4700  001372  0E00               	movlw	0
  4701  001374  6E27               	movwf	memset@c+1,c
  4702  001376  0E20               	movlw	32
  4703  001378  6E26               	movwf	memset@c,c
  4704  00137A  EE20 F032          	lfsr	2,50
  4705  00137E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4706  001380  26D9               	addwf	fsr2l,f,c
  4707  001382  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4708  001384  22DA               	addwfc	fsr2h,f,c
  4709  001386  50DF               	movf	indf2,w,c
  4710  001388  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  4711  00138A  5031               	movf	??_scroll_right_to_left+3,w,c
  4712  00138C  6E28               	movwf	memset@n,c
  4713  00138E  6A29               	clrf	memset@n+1,c
  4714  001390  ECBB  F01F         	call	_memset	;wreg free
  4715  001394                     l6924:
  4716                           
  4717                           ;clcd.c: 619: }
  4718                           ;clcd.c: 620: }
  4719                           ;clcd.c: 622: if (clcd_display_string_details->length_count_for_left_scroll <= clcd_disp
      +                          lay_string_details->strlen)
  4720  001394  EE20 F035          	lfsr	2,53
  4721  001398  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4722  00139A  26D9               	addwf	fsr2l,f,c
  4723  00139C  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4724  00139E  22DA               	addwfc	fsr2h,f,c
  4725  0013A0  50DF               	movf	indf2,w,c
  4726  0013A2  0B7F               	andlw	127
  4727  0013A4  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4728  0013A6  EE20 F02A          	lfsr	2,42
  4729  0013AA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4730  0013AC  26D9               	addwf	fsr2l,f,c
  4731  0013AE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4732  0013B0  22DA               	addwfc	fsr2h,f,c
  4733  0013B2  50DF               	movf	indf2,w,c
  4734  0013B4  0B7F               	andlw	127
  4735  0013B6  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4736  0013B8  502E               	movf	??_scroll_right_to_left,w,c
  4737  0013BA  5C2F               	subwf	??_scroll_right_to_left+1,w,c
  4738  0013BC  A0D8               	btfss	status,0,c
  4739  0013BE  D013               	goto	l6928
  4740                           
  4741                           ;clcd.c: 623: {
  4742                           ;clcd.c: 624: clcd_display_string_details->length_count_for_left_scroll++;
  4743  0013C0  0E01               	movlw	1
  4744  0013C2  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4745  0013C4  EE20 F035          	lfsr	2,53
  4746  0013C8  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4747  0013CA  26D9               	addwf	fsr2l,f,c
  4748  0013CC  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4749  0013CE  22DA               	addwfc	fsr2h,f,c
  4750  0013D0  50DF               	movf	indf2,w,c
  4751  0013D2  0B7F               	andlw	127
  4752  0013D4  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4753  0013D6  502E               	movf	??_scroll_right_to_left,w,c
  4754  0013D8  262F               	addwf	??_scroll_right_to_left+1,f,c
  4755  0013DA  50DF               	movf	indf2,w,c
  4756  0013DC  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4757  0013DE  0B80               	andlw	-128
  4758  0013E0  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4759  0013E2  6EDF               	movwf	indf2,c
  4760                           
  4761                           ;clcd.c: 625: } else if (clcd_display_string_details->length_count_for_left_scroll > clc
      +                          d_display_string_details->strlen)
  4762  0013E4  0012               	return	
  4763  0013E6                     l6928:
  4764  0013E6  EE20 F02A          	lfsr	2,42
  4765  0013EA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4766  0013EC  26D9               	addwf	fsr2l,f,c
  4767  0013EE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4768  0013F0  22DA               	addwfc	fsr2h,f,c
  4769  0013F2  50DF               	movf	indf2,w,c
  4770  0013F4  0B7F               	andlw	127
  4771  0013F6  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4772  0013F8  EE20 F035          	lfsr	2,53
  4773  0013FC  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4774  0013FE  26D9               	addwf	fsr2l,f,c
  4775  001400  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4776  001402  22DA               	addwfc	fsr2h,f,c
  4777  001404  50DF               	movf	indf2,w,c
  4778  001406  0B7F               	andlw	127
  4779  001408  5C2E               	subwf	??_scroll_right_to_left,w,c
  4780  00140A  B0D8               	btfsc	status,0,c
  4781  00140C  0012               	return	
  4782                           
  4783                           ;clcd.c: 626: {
  4784                           ;clcd.c: 627: clcd_display_string_details->length_decount_for_left_scroll++;
  4785  00140E  0E01               	movlw	1
  4786  001410  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4787  001412  EE20 F036          	lfsr	2,54
  4788  001416  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4789  001418  26D9               	addwf	fsr2l,f,c
  4790  00141A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4791  00141C  22DA               	addwfc	fsr2h,f,c
  4792  00141E  50DF               	movf	indf2,w,c
  4793  001420  0B7F               	andlw	127
  4794  001422  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4795  001424  502E               	movf	??_scroll_right_to_left,w,c
  4796  001426  262F               	addwf	??_scroll_right_to_left+1,f,c
  4797  001428  50DF               	movf	indf2,w,c
  4798  00142A  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4799  00142C  0B80               	andlw	-128
  4800  00142E  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4801  001430  6EDF               	movwf	indf2,c
  4802                           
  4803                           ;clcd.c: 628: if (clcd_display_string_details->length_decount_for_left_scroll == clcd_di
      +                          splay_string_details->display_char_count) {
  4804  001432  EE20 F032          	lfsr	2,50
  4805  001436  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4806  001438  26D9               	addwf	fsr2l,f,c
  4807  00143A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4808  00143C  22DA               	addwfc	fsr2h,f,c
  4809  00143E  EE10 F036          	lfsr	1,54
  4810  001442  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4811  001444  26E1               	addwf	fsr1l,f,c
  4812  001446  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4813  001448  22E2               	addwfc	fsr1h,f,c
  4814  00144A  50E7               	movf	indf1,w,c
  4815  00144C  0B7F               	andlw	127
  4816  00144E  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4817  001450  50DE               	movf	postinc2,w,c
  4818  001452  182F               	xorwf	??_scroll_right_to_left+1,w,c
  4819  001454  A4D8               	btfss	status,2,c
  4820  001456  0012               	return	
  4821                           
  4822                           ;clcd.c: 629: clcd_display_string_details->length_decount_for_left_scroll = 0;
  4823  001458  EE20 F036          	lfsr	2,54
  4824  00145C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4825  00145E  26D9               	addwf	fsr2l,f,c
  4826  001460  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4827  001462  22DA               	addwfc	fsr2h,f,c
  4828  001464  90DF               	bcf	indf2,0,c
  4829  001466  92DF               	bcf	indf2,1,c
  4830  001468  94DF               	bcf	indf2,2,c
  4831  00146A  96DF               	bcf	indf2,3,c
  4832  00146C  98DF               	bcf	indf2,4,c
  4833  00146E  9ADF               	bcf	indf2,5,c
  4834  001470  9CDF               	bcf	indf2,6,c
  4835                           
  4836                           ;clcd.c: 630: clcd_display_string_details->length_count_for_left_scroll = 0;
  4837  001472  EE20 F035          	lfsr	2,53
  4838  001476  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4839  001478  26D9               	addwf	fsr2l,f,c
  4840  00147A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4841  00147C  22DA               	addwfc	fsr2h,f,c
  4842  00147E  90DF               	bcf	indf2,0,c
  4843  001480  92DF               	bcf	indf2,1,c
  4844  001482  94DF               	bcf	indf2,2,c
  4845  001484  96DF               	bcf	indf2,3,c
  4846  001486  98DF               	bcf	indf2,4,c
  4847  001488  9ADF               	bcf	indf2,5,c
  4848  00148A  9CDF               	bcf	indf2,6,c
  4849  00148C  0012               	return	
  4850  00148E                     __end_of_scroll_right_to_left:
  4851                           	opt stack 0
  4852                           tblptru	equ	0xFF8
  4853                           tblptrh	equ	0xFF7
  4854                           tblptrl	equ	0xFF6
  4855                           tablat	equ	0xFF5
  4856                           prodh	equ	0xFF4
  4857                           prodl	equ	0xFF3
  4858                           intcon	equ	0xFF2
  4859                           postinc0	equ	0xFEE
  4860                           wreg	equ	0xFE8
  4861                           indf1	equ	0xFE7
  4862                           postinc1	equ	0xFE6
  4863                           postdec1	equ	0xFE5
  4864                           fsr1h	equ	0xFE2
  4865                           fsr1l	equ	0xFE1
  4866                           indf2	equ	0xFDF
  4867                           postinc2	equ	0xFDE
  4868                           postdec2	equ	0xFDD
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873 ;; *************** function _scroll_off *****************
  4874 ;; Defined at:
  4875 ;;		line 637 in file "clcd.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;  clcd_display    2   35[COMRAM] PTR struct .
  4878 ;;		 -> clcd_display_string_details(1100), 
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;  i               2   48[COMRAM] int 
  4881 ;;  j               2   46[COMRAM] int 
  4882 ;;  k               2   41[COMRAM] int 
  4883 ;;  str_len         1   45[COMRAM] unsigned char 
  4884 ;;  display_char    1   44[COMRAM] unsigned char 
  4885 ;;  line            1   43[COMRAM] unsigned char 
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  1    wreg      void 
  4888 ;; Registers used:
  4889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4895 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;Total ram usage:       15 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    6
  4902 ;; This function calls:
  4903 ;;		_strlen
  4904 ;; This function is called by:
  4905 ;;		_make_display
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           	psect	text7
  4910  002BDE                     __ptext7:
  4911                           	opt stack 0
  4912  002BDE                     _scroll_off:
  4913                           	opt stack 23
  4914                           
  4915                           ;clcd.c: 638: char line = -1;
  4916                           
  4917                           ;incstack = 0
  4918  002BDE  682C               	setf	scroll_off@line,c
  4919                           
  4920                           ;clcd.c: 640: int i = 0;
  4921  002BE0  0E00               	movlw	0
  4922  002BE2  6E32               	movwf	scroll_off@i+1,c
  4923  002BE4  0E00               	movlw	0
  4924  002BE6  6E31               	movwf	scroll_off@i,c
  4925                           
  4926                           ;clcd.c: 641: int j = 0, k = 0;
  4927  002BE8  0E00               	movlw	0
  4928  002BEA  6E30               	movwf	scroll_off@j+1,c
  4929  002BEC  0E00               	movlw	0
  4930  002BEE  6E2F               	movwf	scroll_off@j,c
  4931  002BF0  0E00               	movlw	0
  4932  002BF2  6E2B               	movwf	scroll_off@k+1,c
  4933  002BF4  0E00               	movlw	0
  4934  002BF6  6E2A               	movwf	scroll_off@k,c
  4935                           
  4936                           ;clcd.c: 642: char display_char_count = clcd_display_string_details->end_point - clcd_di
      +                          splay_string_details->start_point;
  4937  002BF8  EE20 F030          	lfsr	2,48
  4938  002BFC  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4939  002BFE  26D9               	addwf	fsr2l,f,c
  4940  002C00  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4941  002C02  22DA               	addwfc	fsr2h,f,c
  4942  002C04  50DF               	movf	indf2,w,c
  4943  002C06  0B7F               	andlw	127
  4944  002C08  6E26               	movwf	??_scroll_off& (0+255),c
  4945  002C0A  EE20 F02D          	lfsr	2,45
  4946  002C0E  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4947  002C10  26D9               	addwf	fsr2l,f,c
  4948  002C12  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4949  002C14  22DA               	addwfc	fsr2h,f,c
  4950  002C16  50DF               	movf	indf2,w,c
  4951  002C18  0B7F               	andlw	127
  4952  002C1A  0800               	sublw	0
  4953  002C1C  2426               	addwf	??_scroll_off,w,c
  4954  002C1E  6E2D               	movwf	scroll_off@display_char_count,c
  4955                           
  4956                           ;clcd.c: 643: char str_len = strlen(clcd_display_string_details->string);
  4957  002C20  0E02               	movlw	2
  4958  002C22  2424               	addwf	scroll_off@clcd_display_string_details,w,c
  4959  002C24  6E1E               	movwf	strlen@s,c
  4960  002C26  0E00               	movlw	0
  4961  002C28  2025               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4962  002C2A  6E1F               	movwf	strlen@s+1,c
  4963  002C2C  ECED  F01E         	call	_strlen	;wreg free
  4964  002C30  501E               	movf	?_strlen,w,c
  4965  002C32  6E2E               	movwf	scroll_off@str_len,c
  4966                           
  4967                           ;clcd.c: 644: line = clcd_display_string_details->start_row;
  4968  002C34  EE20 F02B          	lfsr	2,43
  4969  002C38  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4970  002C3A  26D9               	addwf	fsr2l,f,c
  4971  002C3C  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4972  002C3E  22DA               	addwfc	fsr2h,f,c
  4973  002C40  50DF               	movf	indf2,w,c
  4974  002C42  0B7F               	andlw	127
  4975  002C44  6E2C               	movwf	scroll_off@line,c
  4976                           
  4977                           ;clcd.c: 645: j = clcd_display_string_details->start_col;
  4978  002C46  EE20 F02C          	lfsr	2,44
  4979  002C4A  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4980  002C4C  26D9               	addwf	fsr2l,f,c
  4981  002C4E  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4982  002C50  22DA               	addwfc	fsr2h,f,c
  4983  002C52  50DF               	movf	indf2,w,c
  4984  002C54  0B7F               	andlw	127
  4985  002C56  6E26               	movwf	??_scroll_off& (0+255),c
  4986  002C58  5026               	movf	??_scroll_off,w,c
  4987  002C5A  6E2F               	movwf	scroll_off@j,c
  4988  002C5C  6A30               	clrf	scroll_off@j+1,c
  4989                           
  4990                           ;clcd.c: 646: for (i = 0; i < str_len;) {
  4991  002C5E  0E00               	movlw	0
  4992  002C60  6E32               	movwf	scroll_off@i+1,c
  4993  002C62  0E00               	movlw	0
  4994  002C64  6E31               	movwf	scroll_off@i,c
  4995  002C66  D05B               	goto	l6974
  4996  002C68                     l6950:
  4997                           
  4998                           ;clcd.c: 648: lcd_display_array[line][j] = clcd_display_string_details->string[i++];
  4999  002C68  0E02               	movlw	2
  5000  002C6A  2431               	addwf	scroll_off@i,w,c
  5001  002C6C  6E26               	movwf	??_scroll_off& (0+255),c
  5002  002C6E  0E00               	movlw	0
  5003  002C70  2032               	addwfc	scroll_off@i+1,w,c
  5004  002C72  6E27               	movwf	(??_scroll_off+1)& (0+255),c
  5005  002C74  5026               	movf	??_scroll_off,w,c
  5006  002C76  2424               	addwf	scroll_off@clcd_display_string_details,w,c
  5007  002C78  6ED9               	movwf	fsr2l,c
  5008  002C7A  5027               	movf	??_scroll_off+1,w,c
  5009  002C7C  2025               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  5010  002C7E  6EDA               	movwf	fsr2h,c
  5011  002C80  502C               	movf	scroll_off@line,w,c
  5012  002C82  0D14               	mullw	20
  5013  002C84  0E00               	movlw	low _lcd_display_array
  5014  002C86  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  5015  002C88  0E01               	movlw	high _lcd_display_array
  5016  002C8A  6E29               	movwf	(??_scroll_off+3)& (0+255),c
  5017  002C8C  50F3               	movf	prodl,w,c
  5018  002C8E  2628               	addwf	??_scroll_off+2,f,c
  5019  002C90  50F4               	movf	prodh,w,c
  5020  002C92  2229               	addwfc	??_scroll_off+3,f,c
  5021  002C94  502F               	movf	scroll_off@j,w,c
  5022  002C96  2428               	addwf	??_scroll_off+2,w,c
  5023  002C98  6EE1               	movwf	fsr1l,c
  5024  002C9A  5030               	movf	scroll_off@j+1,w,c
  5025  002C9C  2029               	addwfc	??_scroll_off+3,w,c
  5026  002C9E  6EE2               	movwf	fsr1h,c
  5027  002CA0  CFDF FFE7          	movff	indf2,indf1
  5028  002CA4  4A31               	infsnz	scroll_off@i,f,c
  5029  002CA6  2A32               	incf	scroll_off@i+1,f,c
  5030                           
  5031                           ;clcd.c: 649: if (i >= str_len)break;
  5032  002CA8  502E               	movf	scroll_off@str_len,w,c
  5033  002CAA  6E26               	movwf	??_scroll_off& (0+255),c
  5034  002CAC  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  5035  002CAE  5026               	movf	??_scroll_off,w,c
  5036  002CB0  5C31               	subwf	scroll_off@i,w,c
  5037  002CB2  5032               	movf	scroll_off@i+1,w,c
  5038  002CB4  0A80               	xorlw	128
  5039  002CB6  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  5040  002CB8  5027               	movf	??_scroll_off+1,w,c
  5041  002CBA  0A80               	xorlw	128
  5042  002CBC  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  5043  002CBE  B0D8               	btfsc	status,0,c
  5044  002CC0  D01C               	goto	l6966
  5045                           
  5046                           ;clcd.c: 650: if (i >= display_char_count)break;
  5047  002CC2  502D               	movf	scroll_off@display_char_count,w,c
  5048  002CC4  6E26               	movwf	??_scroll_off& (0+255),c
  5049  002CC6  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  5050  002CC8  5026               	movf	??_scroll_off,w,c
  5051  002CCA  5C31               	subwf	scroll_off@i,w,c
  5052  002CCC  5032               	movf	scroll_off@i+1,w,c
  5053  002CCE  0A80               	xorlw	128
  5054  002CD0  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  5055  002CD2  5027               	movf	??_scroll_off+1,w,c
  5056  002CD4  0A80               	xorlw	128
  5057  002CD6  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  5058  002CD8  B0D8               	btfsc	status,0,c
  5059  002CDA  D00F               	goto	l6966
  5060  002CDC  4A2F               	infsnz	scroll_off@j,f,c
  5061  002CDE  2A30               	incf	scroll_off@j+1,f,c
  5062  002CE0                     l6964:
  5063  002CE0  504B               	movf	_clcd_config_data+2,w,c
  5064  002CE2  6E26               	movwf	??_scroll_off& (0+255),c
  5065  002CE4  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  5066  002CE6  5026               	movf	??_scroll_off,w,c
  5067  002CE8  5C2F               	subwf	scroll_off@j,w,c
  5068  002CEA  5030               	movf	scroll_off@j+1,w,c
  5069  002CEC  0A80               	xorlw	128
  5070  002CEE  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  5071  002CF0  5027               	movf	??_scroll_off+1,w,c
  5072  002CF2  0A80               	xorlw	128
  5073  002CF4  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  5074  002CF6  A0D8               	btfss	status,0,c
  5075  002CF8  D7B7               	goto	l6950
  5076  002CFA                     l6966:
  5077                           
  5078                           ;clcd.c: 651: }
  5079                           ;clcd.c: 653: j = 0;
  5080  002CFA  0E00               	movlw	0
  5081  002CFC  6E30               	movwf	scroll_off@j+1,c
  5082  002CFE  0E00               	movlw	0
  5083  002D00  6E2F               	movwf	scroll_off@j,c
  5084                           
  5085                           ;clcd.c: 654: line++;
  5086  002D02  2A2C               	incf	scroll_off@line,f,c
  5087                           
  5088                           ;clcd.c: 655: if (i >= display_char_count)break;
  5089  002D04  502D               	movf	scroll_off@display_char_count,w,c
  5090  002D06  6E26               	movwf	??_scroll_off& (0+255),c
  5091  002D08  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  5092  002D0A  5026               	movf	??_scroll_off,w,c
  5093  002D0C  5C31               	subwf	scroll_off@i,w,c
  5094  002D0E  5032               	movf	scroll_off@i+1,w,c
  5095  002D10  0A80               	xorlw	128
  5096  002D12  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  5097  002D14  5027               	movf	??_scroll_off+1,w,c
  5098  002D16  0A80               	xorlw	128
  5099  002D18  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  5100  002D1A  B0D8               	btfsc	status,0,c
  5101  002D1C  0012               	return	
  5102  002D1E                     l6974:
  5103  002D1E  502E               	movf	scroll_off@str_len,w,c
  5104  002D20  6E26               	movwf	??_scroll_off& (0+255),c
  5105  002D22  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  5106  002D24  5026               	movf	??_scroll_off,w,c
  5107  002D26  5C31               	subwf	scroll_off@i,w,c
  5108  002D28  5032               	movf	scroll_off@i+1,w,c
  5109  002D2A  0A80               	xorlw	128
  5110  002D2C  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  5111  002D2E  5027               	movf	??_scroll_off+1,w,c
  5112  002D30  0A80               	xorlw	128
  5113  002D32  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  5114  002D34  B0D8               	btfsc	status,0,c
  5115  002D36  0012               	return	
  5116  002D38  D7D3               	goto	l6964
  5117  002D3A                     __end_of_scroll_off:
  5118                           	opt stack 0
  5119                           tblptru	equ	0xFF8
  5120                           tblptrh	equ	0xFF7
  5121                           tblptrl	equ	0xFF6
  5122                           tablat	equ	0xFF5
  5123                           prodh	equ	0xFF4
  5124                           prodl	equ	0xFF3
  5125                           intcon	equ	0xFF2
  5126                           postinc0	equ	0xFEE
  5127                           wreg	equ	0xFE8
  5128                           indf1	equ	0xFE7
  5129                           postinc1	equ	0xFE6
  5130                           postdec1	equ	0xFE5
  5131                           fsr1h	equ	0xFE2
  5132                           fsr1l	equ	0xFE1
  5133                           indf2	equ	0xFDF
  5134                           postinc2	equ	0xFDE
  5135                           postdec2	equ	0xFDD
  5136                           fsr2h	equ	0xFDA
  5137                           fsr2l	equ	0xFD9
  5138                           status	equ	0xFD8
  5139                           
  5140 ;; *************** function _scroll_left_to_right *****************
  5141 ;; Defined at:
  5142 ;;		line 552 in file "clcd.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  clcd_display    2   43[COMRAM] PTR struct .
  5145 ;;		 -> clcd_display_string_details(1100), 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  line            1   53[COMRAM] unsigned char 
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  1    wreg      void 
  5150 ;; Registers used:
  5151 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5157 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;Total ram usage:       11 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    6
  5164 ;; This function calls:
  5165 ;;		_memset
  5166 ;;		_strncpy
  5167 ;; This function is called by:
  5168 ;;		_make_display
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text8
  5173  00148E                     __ptext8:
  5174                           	opt stack 0
  5175  00148E                     _scroll_left_to_right:
  5176                           	opt stack 23
  5177                           
  5178                           ;clcd.c: 553: char line = -1;
  5179                           
  5180                           ;incstack = 0
  5181  00148E  6836               	setf	scroll_left_to_right@line,c
  5182                           
  5183                           ;clcd.c: 554: if (clcd_display_string_details->start_row == 0)
  5184  001490  EE20 F02B          	lfsr	2,43
  5185  001494  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5186  001496  26D9               	addwf	fsr2l,f,c
  5187  001498  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5188  00149A  22DA               	addwfc	fsr2h,f,c
  5189  00149C  50DF               	movf	indf2,w,c
  5190  00149E  0B7F               	andlw	127
  5191  0014A0  0900               	iorlw	0
  5192  0014A2  A4D8               	btfss	status,2,c
  5193  0014A4  D002               	goto	l6860
  5194                           
  5195                           ;clcd.c: 555: line = 0;
  5196  0014A6  0E00               	movlw	0
  5197  0014A8  D00C               	goto	L2
  5198  0014AA                     l6860:
  5199                           
  5200                           ;clcd.c: 556: else if (clcd_display_string_details->start_row == 1)
  5201  0014AA  EE20 F02B          	lfsr	2,43
  5202  0014AE  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5203  0014B0  26D9               	addwf	fsr2l,f,c
  5204  0014B2  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5205  0014B4  22DA               	addwfc	fsr2h,f,c
  5206  0014B6  50DF               	movf	indf2,w,c
  5207  0014B8  0B7F               	andlw	127
  5208  0014BA  06E8               	decf	wreg,f,c
  5209  0014BC  A4D8               	btfss	status,2,c
  5210  0014BE  D002               	goto	l6864
  5211                           
  5212                           ;clcd.c: 557: line = 1;
  5213  0014C0  0E01               	movlw	1
  5214  0014C2                     L2:
  5215  0014C2  6E36               	movwf	scroll_left_to_right@line,c
  5216  0014C4                     l6864:
  5217                           
  5218                           ;clcd.c: 558: if (clcd_display_string_details->start_row == 2)
  5219  0014C4  EE20 F02B          	lfsr	2,43
  5220  0014C8  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5221  0014CA  26D9               	addwf	fsr2l,f,c
  5222  0014CC  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5223  0014CE  22DA               	addwfc	fsr2h,f,c
  5224  0014D0  50DF               	movf	indf2,w,c
  5225  0014D2  0B7F               	andlw	127
  5226  0014D4  0A02               	xorlw	2
  5227  0014D6  A4D8               	btfss	status,2,c
  5228  0014D8  D002               	goto	l6868
  5229                           
  5230                           ;clcd.c: 559: line = 2;
  5231  0014DA  0E02               	movlw	2
  5232  0014DC  6E36               	movwf	scroll_left_to_right@line,c
  5233  0014DE                     l6868:
  5234                           
  5235                           ;clcd.c: 560: if (clcd_display_string_details->start_row == 3)
  5236  0014DE  EE20 F02B          	lfsr	2,43
  5237  0014E2  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5238  0014E4  26D9               	addwf	fsr2l,f,c
  5239  0014E6  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5240  0014E8  22DA               	addwfc	fsr2h,f,c
  5241  0014EA  50DF               	movf	indf2,w,c
  5242  0014EC  0B7F               	andlw	127
  5243  0014EE  0A03               	xorlw	3
  5244  0014F0  A4D8               	btfss	status,2,c
  5245  0014F2  D002               	goto	l6872
  5246                           
  5247                           ;clcd.c: 561: line = 3;
  5248  0014F4  0E03               	movlw	3
  5249  0014F6  6E36               	movwf	scroll_left_to_right@line,c
  5250  0014F8                     l6872:
  5251                           
  5252                           ;clcd.c: 563: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  5253                           ;clcd.c: 564: ' ', clcd_display_string_details->display_char_count);
  5254  0014F8  5036               	movf	scroll_left_to_right@line,w,c
  5255  0014FA  0D14               	mullw	20
  5256  0014FC  0E00               	movlw	low _lcd_display_array
  5257  0014FE  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5258  001500  0E01               	movlw	high _lcd_display_array
  5259  001502  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5260  001504  50F3               	movf	prodl,w,c
  5261  001506  262E               	addwf	??_scroll_left_to_right,f,c
  5262  001508  50F4               	movf	prodh,w,c
  5263  00150A  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5264  00150C  EE20 F02C          	lfsr	2,44
  5265  001510  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5266  001512  26D9               	addwf	fsr2l,f,c
  5267  001514  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5268  001516  22DA               	addwfc	fsr2h,f,c
  5269  001518  50DF               	movf	indf2,w,c
  5270  00151A  0B7F               	andlw	127
  5271  00151C  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5272  00151E  5030               	movf	??_scroll_left_to_right+2,w,c
  5273  001520  0D01               	mullw	1
  5274  001522  50F3               	movf	prodl,w,c
  5275  001524  242E               	addwf	??_scroll_left_to_right,w,c
  5276  001526  6E24               	movwf	memset@p1,c
  5277  001528  50F4               	movf	prodh,w,c
  5278  00152A  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5279  00152C  6E25               	movwf	memset@p1+1,c
  5280  00152E  0E00               	movlw	0
  5281  001530  6E27               	movwf	memset@c+1,c
  5282  001532  0E20               	movlw	32
  5283  001534  6E26               	movwf	memset@c,c
  5284  001536  EE20 F032          	lfsr	2,50
  5285  00153A  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5286  00153C  26D9               	addwf	fsr2l,f,c
  5287  00153E  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5288  001540  22DA               	addwfc	fsr2h,f,c
  5289  001542  50DF               	movf	indf2,w,c
  5290  001544  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5291  001546  5031               	movf	??_scroll_left_to_right+3,w,c
  5292  001548  6E28               	movwf	memset@n,c
  5293  00154A  6A29               	clrf	memset@n+1,c
  5294  00154C  ECBB  F01F         	call	_memset	;wreg free
  5295                           
  5296                           ;clcd.c: 566: if (clcd_display_string_details->length_count_for_right_scroll > clcd_disp
      +                          lay_string_details->display_char_count) {
  5297  001550  EE20 F032          	lfsr	2,50
  5298  001554  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5299  001556  26D9               	addwf	fsr2l,f,c
  5300  001558  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5301  00155A  22DA               	addwfc	fsr2h,f,c
  5302  00155C  50DF               	movf	indf2,w,c
  5303  00155E  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5304  001560  EE20 F033          	lfsr	2,51
  5305  001564  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5306  001566  26D9               	addwf	fsr2l,f,c
  5307  001568  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5308  00156A  22DA               	addwfc	fsr2h,f,c
  5309  00156C  50DF               	movf	indf2,w,c
  5310  00156E  0B7F               	andlw	127
  5311  001570  5C2E               	subwf	??_scroll_left_to_right,w,c
  5312  001572  B0D8               	btfsc	status,0,c
  5313  001574  D058               	goto	l6880
  5314                           
  5315                           ;clcd.c: 567: if (clcd_display_string_details->string[0] != (0)) {
  5316  001576  EE20 F002          	lfsr	2,2
  5317  00157A  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5318  00157C  26D9               	addwf	fsr2l,f,c
  5319  00157E  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5320  001580  22DA               	addwfc	fsr2h,f,c
  5321  001582  50DF               	movf	indf2,w,c
  5322  001584  B4D8               	btfsc	status,2,c
  5323  001586  D0A6               	goto	l6884
  5324                           
  5325                           ;clcd.c: 568: strncpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  5326                           ;clcd.c: 569: clcd_display_string_details->string +
  5327                           ;clcd.c: 570: ((clcd_display_string_details->strlen - 1) - clcd_display_string_details->
      +                          length_decount_for_right_scroll),
  5328                           ;clcd.c: 571: clcd_display_string_details->display_char_count);
  5329  001588  5036               	movf	scroll_left_to_right@line,w,c
  5330  00158A  0D14               	mullw	20
  5331  00158C  0E00               	movlw	low _lcd_display_array
  5332  00158E  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5333  001590  0E01               	movlw	high _lcd_display_array
  5334  001592  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5335  001594  50F3               	movf	prodl,w,c
  5336  001596  262E               	addwf	??_scroll_left_to_right,f,c
  5337  001598  50F4               	movf	prodh,w,c
  5338  00159A  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5339  00159C  EE20 F02C          	lfsr	2,44
  5340  0015A0  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5341  0015A2  26D9               	addwf	fsr2l,f,c
  5342  0015A4  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5343  0015A6  22DA               	addwfc	fsr2h,f,c
  5344  0015A8  50DF               	movf	indf2,w,c
  5345  0015AA  0B7F               	andlw	127
  5346  0015AC  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5347  0015AE  5030               	movf	??_scroll_left_to_right+2,w,c
  5348  0015B0  0D01               	mullw	1
  5349  0015B2  50F3               	movf	prodl,w,c
  5350  0015B4  242E               	addwf	??_scroll_left_to_right,w,c
  5351  0015B6  6E10               	movwf	strncpy@to,c
  5352  0015B8  50F4               	movf	prodh,w,c
  5353  0015BA  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5354  0015BC  6E11               	movwf	strncpy@to+1,c
  5355  0015BE  EE20 F034          	lfsr	2,52
  5356  0015C2  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5357  0015C4  26D9               	addwf	fsr2l,f,c
  5358  0015C6  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5359  0015C8  22DA               	addwfc	fsr2h,f,c
  5360  0015CA  50DF               	movf	indf2,w,c
  5361  0015CC  0B7F               	andlw	127
  5362  0015CE  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5363  0015D0  6A32               	clrf	(??_scroll_left_to_right+4)& (0+255),c
  5364  0015D2  1E31               	comf	??_scroll_left_to_right+3,f,c
  5365  0015D4  1E32               	comf	??_scroll_left_to_right+4,f,c
  5366  0015D6  4A31               	infsnz	??_scroll_left_to_right+3,f,c
  5367  0015D8  2A32               	incf	??_scroll_left_to_right+4,f,c
  5368  0015DA  EE20 F02A          	lfsr	2,42
  5369  0015DE  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5370  0015E0  26D9               	addwf	fsr2l,f,c
  5371  0015E2  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5372  0015E4  22DA               	addwfc	fsr2h,f,c
  5373  0015E6  50DF               	movf	indf2,w,c
  5374  0015E8  0B7F               	andlw	127
  5375  0015EA  6E33               	movwf	(??_scroll_left_to_right+5)& (0+255),c
  5376  0015EC  6A34               	clrf	(??_scroll_left_to_right+6)& (0+255),c
  5377  0015EE  5031               	movf	??_scroll_left_to_right+3,w,c
  5378  0015F0  2633               	addwf	??_scroll_left_to_right+5,f,c
  5379  0015F2  5032               	movf	??_scroll_left_to_right+4,w,c
  5380  0015F4  2234               	addwfc	??_scroll_left_to_right+6,f,c
  5381  0015F6  0E01               	movlw	1
  5382  0015F8  2633               	addwf	??_scroll_left_to_right+5,f,c
  5383  0015FA  0E00               	movlw	0
  5384  0015FC  2234               	addwfc	??_scroll_left_to_right+6,f,c
  5385  0015FE  5033               	movf	??_scroll_left_to_right+5,w,c
  5386  001600  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5387  001602  6E12               	movwf	strncpy@from,c
  5388  001604  5034               	movf	??_scroll_left_to_right+6,w,c
  5389  001606  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5390  001608  6E13               	movwf	strncpy@from+1,c
  5391  00160A  EE20 F032          	lfsr	2,50
  5392  00160E  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5393  001610  26D9               	addwf	fsr2l,f,c
  5394  001612  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5395  001614  22DA               	addwfc	fsr2h,f,c
  5396  001616  50DF               	movf	indf2,w,c
  5397  001618  6E35               	movwf	(??_scroll_left_to_right+7)& (0+255),c
  5398  00161A  5035               	movf	??_scroll_left_to_right+7,w,c
  5399  00161C  6E14               	movwf	strncpy@size,c
  5400  00161E  6A15               	clrf	strncpy@size+1,c
  5401  001620  EC67  F01C         	call	_strncpy	;wreg free
  5402                           
  5403                           ;clcd.c: 572: }
  5404                           ;clcd.c: 573: } else {
  5405  001624  D057               	goto	l6884
  5406  001626                     l6880:
  5407                           
  5408                           ;clcd.c: 574: if (clcd_display_string_details->string[0] != (0)) {
  5409  001626  EE20 F002          	lfsr	2,2
  5410  00162A  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5411  00162C  26D9               	addwf	fsr2l,f,c
  5412  00162E  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5413  001630  22DA               	addwfc	fsr2h,f,c
  5414  001632  50DF               	movf	indf2,w,c
  5415  001634  B4D8               	btfsc	status,2,c
  5416  001636  D04E               	goto	l6884
  5417                           
  5418                           ;clcd.c: 575: strncpy(lcd_display_array[line] + clcd_display_string_details->start_col +
  5419                           ;clcd.c: 576: clcd_display_string_details->length_count_for_right_scroll,
  5420                           ;clcd.c: 577: clcd_display_string_details->string,
  5421                           ;clcd.c: 578: clcd_display_string_details->display_char_count - clcd_display_string_deta
      +                          ils->length_count_for_right_scroll);
  5422  001638  5036               	movf	scroll_left_to_right@line,w,c
  5423  00163A  0D14               	mullw	20
  5424  00163C  0E00               	movlw	low _lcd_display_array
  5425  00163E  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5426  001640  0E01               	movlw	high _lcd_display_array
  5427  001642  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5428  001644  50F3               	movf	prodl,w,c
  5429  001646  262E               	addwf	??_scroll_left_to_right,f,c
  5430  001648  50F4               	movf	prodh,w,c
  5431  00164A  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5432  00164C  EE20 F02C          	lfsr	2,44
  5433  001650  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5434  001652  26D9               	addwf	fsr2l,f,c
  5435  001654  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5436  001656  22DA               	addwfc	fsr2h,f,c
  5437  001658  50DF               	movf	indf2,w,c
  5438  00165A  0B7F               	andlw	127
  5439  00165C  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5440  00165E  5030               	movf	??_scroll_left_to_right+2,w,c
  5441  001660  0D01               	mullw	1
  5442  001662  50F3               	movf	prodl,w,c
  5443  001664  262E               	addwf	??_scroll_left_to_right,f,c
  5444  001666  50F4               	movf	prodh,w,c
  5445  001668  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5446  00166A  EE20 F033          	lfsr	2,51
  5447  00166E  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5448  001670  26D9               	addwf	fsr2l,f,c
  5449  001672  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5450  001674  22DA               	addwfc	fsr2h,f,c
  5451  001676  50DF               	movf	indf2,w,c
  5452  001678  0B7F               	andlw	127
  5453  00167A  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5454  00167C  5031               	movf	??_scroll_left_to_right+3,w,c
  5455  00167E  0D01               	mullw	1
  5456  001680  50F3               	movf	prodl,w,c
  5457  001682  242E               	addwf	??_scroll_left_to_right,w,c
  5458  001684  6E10               	movwf	strncpy@to,c
  5459  001686  50F4               	movf	prodh,w,c
  5460  001688  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5461  00168A  6E11               	movwf	strncpy@to+1,c
  5462  00168C  0E02               	movlw	2
  5463  00168E  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5464  001690  6E12               	movwf	strncpy@from,c
  5465  001692  0E00               	movlw	0
  5466  001694  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5467  001696  6E13               	movwf	strncpy@from+1,c
  5468  001698  EE20 F033          	lfsr	2,51
  5469  00169C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5470  00169E  26D9               	addwf	fsr2l,f,c
  5471  0016A0  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5472  0016A2  22DA               	addwfc	fsr2h,f,c
  5473  0016A4  50DF               	movf	indf2,w,c
  5474  0016A6  0B7F               	andlw	127
  5475  0016A8  6E32               	movwf	(??_scroll_left_to_right+4)& (0+255),c
  5476  0016AA  6A33               	clrf	(??_scroll_left_to_right+5)& (0+255),c
  5477  0016AC  1E32               	comf	??_scroll_left_to_right+4,f,c
  5478  0016AE  1E33               	comf	??_scroll_left_to_right+5,f,c
  5479  0016B0  4A32               	infsnz	??_scroll_left_to_right+4,f,c
  5480  0016B2  2A33               	incf	??_scroll_left_to_right+5,f,c
  5481  0016B4  EE20 F032          	lfsr	2,50
  5482  0016B8  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5483  0016BA  26D9               	addwf	fsr2l,f,c
  5484  0016BC  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5485  0016BE  22DA               	addwfc	fsr2h,f,c
  5486  0016C0  50DF               	movf	indf2,w,c
  5487  0016C2  6E34               	movwf	(??_scroll_left_to_right+6)& (0+255),c
  5488  0016C4  5034               	movf	??_scroll_left_to_right+6,w,c
  5489  0016C6  2432               	addwf	??_scroll_left_to_right+4,w,c
  5490  0016C8  6E14               	movwf	strncpy@size,c
  5491  0016CA  0E00               	movlw	0
  5492  0016CC  2033               	addwfc	??_scroll_left_to_right+5,w,c
  5493  0016CE  6E15               	movwf	strncpy@size+1,c
  5494  0016D0  EC67  F01C         	call	_strncpy	;wreg free
  5495  0016D4                     l6884:
  5496                           
  5497                           ;clcd.c: 579: }
  5498                           ;clcd.c: 580: }
  5499                           ;clcd.c: 581: if (clcd_display_string_details->length_count_for_right_scroll <= clcd_dis
      +                          play_string_details->display_char_count) {
  5500  0016D4  EE20 F033          	lfsr	2,51
  5501  0016D8  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5502  0016DA  26D9               	addwf	fsr2l,f,c
  5503  0016DC  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5504  0016DE  22DA               	addwfc	fsr2h,f,c
  5505  0016E0  50DF               	movf	indf2,w,c
  5506  0016E2  0B7F               	andlw	127
  5507  0016E4  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5508  0016E6  EE20 F032          	lfsr	2,50
  5509  0016EA  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5510  0016EC  26D9               	addwf	fsr2l,f,c
  5511  0016EE  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5512  0016F0  22DA               	addwfc	fsr2h,f,c
  5513  0016F2  502E               	movf	??_scroll_left_to_right,w,c
  5514  0016F4  5CDE               	subwf	postinc2,w,c
  5515  0016F6  A0D8               	btfss	status,0,c
  5516  0016F8  D013               	goto	l6888
  5517                           
  5518                           ;clcd.c: 582: clcd_display_string_details->length_count_for_right_scroll++;
  5519  0016FA  0E01               	movlw	1
  5520  0016FC  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5521  0016FE  EE20 F033          	lfsr	2,51
  5522  001702  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5523  001704  26D9               	addwf	fsr2l,f,c
  5524  001706  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5525  001708  22DA               	addwfc	fsr2h,f,c
  5526  00170A  50DF               	movf	indf2,w,c
  5527  00170C  0B7F               	andlw	127
  5528  00170E  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5529  001710  502E               	movf	??_scroll_left_to_right,w,c
  5530  001712  262F               	addwf	??_scroll_left_to_right+1,f,c
  5531  001714  50DF               	movf	indf2,w,c
  5532  001716  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5533  001718  0B80               	andlw	-128
  5534  00171A  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5535  00171C  6EDF               	movwf	indf2,c
  5536                           
  5537                           ;clcd.c: 583: } else if (clcd_display_string_details->length_decount_for_right_scroll < 
      +                          clcd_display_string_details->strlen) {
  5538  00171E  0012               	return	
  5539  001720                     l6888:
  5540  001720  EE20 F034          	lfsr	2,52
  5541  001724  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5542  001726  26D9               	addwf	fsr2l,f,c
  5543  001728  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5544  00172A  22DA               	addwfc	fsr2h,f,c
  5545  00172C  50DF               	movf	indf2,w,c
  5546  00172E  0B7F               	andlw	127
  5547  001730  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5548  001732  EE20 F02A          	lfsr	2,42
  5549  001736  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5550  001738  26D9               	addwf	fsr2l,f,c
  5551  00173A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5552  00173C  22DA               	addwfc	fsr2h,f,c
  5553  00173E  50DF               	movf	indf2,w,c
  5554  001740  0B7F               	andlw	127
  5555  001742  5C2E               	subwf	??_scroll_left_to_right,w,c
  5556  001744  B0D8               	btfsc	status,0,c
  5557  001746  0012               	return	
  5558                           
  5559                           ;clcd.c: 584: clcd_display_string_details->length_decount_for_right_scroll++;
  5560  001748  0E01               	movlw	1
  5561  00174A  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5562  00174C  EE20 F034          	lfsr	2,52
  5563  001750  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5564  001752  26D9               	addwf	fsr2l,f,c
  5565  001754  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5566  001756  22DA               	addwfc	fsr2h,f,c
  5567  001758  50DF               	movf	indf2,w,c
  5568  00175A  0B7F               	andlw	127
  5569  00175C  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5570  00175E  502E               	movf	??_scroll_left_to_right,w,c
  5571  001760  262F               	addwf	??_scroll_left_to_right+1,f,c
  5572  001762  50DF               	movf	indf2,w,c
  5573  001764  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5574  001766  0B80               	andlw	-128
  5575  001768  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5576  00176A  6EDF               	movwf	indf2,c
  5577                           
  5578                           ;clcd.c: 585: if (clcd_display_string_details->length_decount_for_right_scroll >= clcd_d
      +                          isplay_string_details->strlen) {
  5579  00176C  EE20 F02A          	lfsr	2,42
  5580  001770  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5581  001772  26D9               	addwf	fsr2l,f,c
  5582  001774  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5583  001776  22DA               	addwfc	fsr2h,f,c
  5584  001778  50DF               	movf	indf2,w,c
  5585  00177A  0B7F               	andlw	127
  5586  00177C  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5587  00177E  EE20 F034          	lfsr	2,52
  5588  001782  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5589  001784  26D9               	addwf	fsr2l,f,c
  5590  001786  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5591  001788  22DA               	addwfc	fsr2h,f,c
  5592  00178A  50DF               	movf	indf2,w,c
  5593  00178C  0B7F               	andlw	127
  5594  00178E  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5595  001790  502E               	movf	??_scroll_left_to_right,w,c
  5596  001792  5C2F               	subwf	??_scroll_left_to_right+1,w,c
  5597  001794  A0D8               	btfss	status,0,c
  5598  001796  0012               	return	
  5599                           
  5600                           ;clcd.c: 586: clcd_display_string_details->length_count_for_right_scroll = 0;
  5601  001798  EE20 F033          	lfsr	2,51
  5602  00179C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5603  00179E  26D9               	addwf	fsr2l,f,c
  5604  0017A0  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5605  0017A2  22DA               	addwfc	fsr2h,f,c
  5606  0017A4  90DF               	bcf	indf2,0,c
  5607  0017A6  92DF               	bcf	indf2,1,c
  5608  0017A8  94DF               	bcf	indf2,2,c
  5609  0017AA  96DF               	bcf	indf2,3,c
  5610  0017AC  98DF               	bcf	indf2,4,c
  5611  0017AE  9ADF               	bcf	indf2,5,c
  5612  0017B0  9CDF               	bcf	indf2,6,c
  5613                           
  5614                           ;clcd.c: 587: clcd_display_string_details->length_decount_for_right_scroll = 0;
  5615  0017B2  EE20 F034          	lfsr	2,52
  5616  0017B6  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5617  0017B8  26D9               	addwf	fsr2l,f,c
  5618  0017BA  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5619  0017BC  22DA               	addwfc	fsr2h,f,c
  5620  0017BE  90DF               	bcf	indf2,0,c
  5621  0017C0  92DF               	bcf	indf2,1,c
  5622  0017C2  94DF               	bcf	indf2,2,c
  5623  0017C4  96DF               	bcf	indf2,3,c
  5624  0017C6  98DF               	bcf	indf2,4,c
  5625  0017C8  9ADF               	bcf	indf2,5,c
  5626  0017CA  9CDF               	bcf	indf2,6,c
  5627  0017CC  0012               	return	
  5628  0017CE                     __end_of_scroll_left_to_right:
  5629                           	opt stack 0
  5630                           tblptru	equ	0xFF8
  5631                           tblptrh	equ	0xFF7
  5632                           tblptrl	equ	0xFF6
  5633                           tablat	equ	0xFF5
  5634                           prodh	equ	0xFF4
  5635                           prodl	equ	0xFF3
  5636                           intcon	equ	0xFF2
  5637                           postinc0	equ	0xFEE
  5638                           wreg	equ	0xFE8
  5639                           indf1	equ	0xFE7
  5640                           postinc1	equ	0xFE6
  5641                           postdec1	equ	0xFE5
  5642                           fsr1h	equ	0xFE2
  5643                           fsr1l	equ	0xFE1
  5644                           indf2	equ	0xFDF
  5645                           postinc2	equ	0xFDE
  5646                           postdec2	equ	0xFDD
  5647                           fsr2h	equ	0xFDA
  5648                           fsr2l	equ	0xFD9
  5649                           status	equ	0xFD8
  5650                           
  5651 ;; *************** function _strncpy *****************
  5652 ;; Defined at:
  5653 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncpy.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  to              2   15[COMRAM] PTR unsigned char 
  5656 ;;		 -> lcd_display_array(80), 
  5657 ;;  from            2   17[COMRAM] PTR const unsigned char 
  5658 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1100), 
  5659 ;;  size            2   19[COMRAM] unsigned int 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  cp              2   21[COMRAM] PTR unsigned char 
  5662 ;;		 -> lcd_display_array(80), 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  2   15[COMRAM] PTR unsigned char 
  5665 ;; Registers used:
  5666 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5672 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5676 ;;Total ram usage:        8 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    5
  5679 ;; This function calls:
  5680 ;;		Nothing
  5681 ;; This function is called by:
  5682 ;;		_scroll_left_to_right
  5683 ;;		_scroll_right_to_left
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           	psect	text9
  5688  0038CE                     __ptext9:
  5689                           	opt stack 0
  5690  0038CE                     _strncpy:
  5691                           	opt stack 23
  5692                           
  5693                           ;incstack = 0
  5694  0038CE  C010  F016         	movff	strncpy@to,strncpy@cp
  5695  0038D2  C011  F017         	movff	strncpy@to+1,strncpy@cp+1
  5696  0038D6  D014               	goto	l6794
  5697  0038D8                     l6788:
  5698  0038D8  0614               	decf	strncpy@size,f,c
  5699  0038DA  A0D8               	btfss	status,0,c
  5700  0038DC  0615               	decf	strncpy@size+1,f,c
  5701  0038DE  C012  FFD9         	movff	strncpy@from,fsr2l
  5702  0038E2  C013  FFDA         	movff	strncpy@from+1,fsr2h
  5703  0038E6  4A12               	infsnz	strncpy@from,f,c
  5704  0038E8  2A13               	incf	strncpy@from+1,f,c
  5705  0038EA  C016  FFE1         	movff	strncpy@cp,fsr1l
  5706  0038EE  C017  FFE2         	movff	strncpy@cp+1,fsr1h
  5707  0038F2  4A16               	infsnz	strncpy@cp,f,c
  5708  0038F4  2A17               	incf	strncpy@cp+1,f,c
  5709  0038F6  CFDF FFE7          	movff	indf2,indf1
  5710  0038FA  50E7               	movf	indf1,w,c
  5711  0038FC  B4D8               	btfsc	status,2,c
  5712  0038FE  D00D               	goto	l6800
  5713  003900                     l6794:
  5714  003900  5014               	movf	strncpy@size,w,c
  5715  003902  1015               	iorwf	strncpy@size+1,w,c
  5716  003904  B4D8               	btfsc	status,2,c
  5717  003906  D009               	goto	l6800
  5718  003908  D7E7               	goto	l6788
  5719  00390A                     l6796:
  5720  00390A  C016  FFD9         	movff	strncpy@cp,fsr2l
  5721  00390E  C017  FFDA         	movff	strncpy@cp+1,fsr2h
  5722  003912  0E00               	movlw	0
  5723  003914  6EDF               	movwf	indf2,c
  5724  003916  4A16               	infsnz	strncpy@cp,f,c
  5725  003918  2A17               	incf	strncpy@cp+1,f,c
  5726  00391A                     l6800:
  5727  00391A  0614               	decf	strncpy@size,f,c
  5728  00391C  A0D8               	btfss	status,0,c
  5729  00391E  0615               	decf	strncpy@size+1,f,c
  5730  003920  2814               	incf	strncpy@size,w,c
  5731  003922  E1F3               	bnz	l6796
  5732  003924  2815               	incf	strncpy@size+1,w,c
  5733  003926  B4D8               	btfsc	status,2,c
  5734  003928  0012               	return	
  5735  00392A  D7EF               	goto	l6796
  5736  00392C                     __end_of_strncpy:
  5737                           	opt stack 0
  5738                           tblptru	equ	0xFF8
  5739                           tblptrh	equ	0xFF7
  5740                           tblptrl	equ	0xFF6
  5741                           tablat	equ	0xFF5
  5742                           prodh	equ	0xFF4
  5743                           prodl	equ	0xFF3
  5744                           intcon	equ	0xFF2
  5745                           postinc0	equ	0xFEE
  5746                           wreg	equ	0xFE8
  5747                           indf1	equ	0xFE7
  5748                           postinc1	equ	0xFE6
  5749                           postdec1	equ	0xFE5
  5750                           fsr1h	equ	0xFE2
  5751                           fsr1l	equ	0xFE1
  5752                           indf2	equ	0xFDF
  5753                           postinc2	equ	0xFDE
  5754                           postdec2	equ	0xFDD
  5755                           fsr2h	equ	0xFDA
  5756                           fsr2l	equ	0xFD9
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function _display_text *****************
  5760 ;; Defined at:
  5761 ;;		line 723 in file "clcd.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;		None
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;		None
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  1    wreg      void 
  5768 ;; Registers used:
  5769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5779 ;;Total ram usage:        0 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    8
  5782 ;; This function calls:
  5783 ;;		_char_enter_mode_left_to_right
  5784 ;;		_set_cursor
  5785 ;;		_write_lcd_cmd
  5786 ;;		_write_str
  5787 ;; This function is called by:
  5788 ;;		_make_display
  5789 ;;		_display_screen
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text10
  5794  003676                     __ptext10:
  5795                           	opt stack 0
  5796  003676                     _display_text:
  5797                           	opt stack 21
  5798                           
  5799                           ;clcd.c: 724: if (print_data_ready == 1) {
  5800                           
  5801                           ;incstack = 0
  5802  003676  0100               	movlb	0	; () banked
  5803  003678  0576               	decf	_print_data_ready& (0+255),w,b
  5804  00367A  0100               	movlb	0	; () banked
  5805  00367C  1177               	iorwf	(_print_data_ready+1)& (0+255),w,b
  5806  00367E  A4D8               	btfss	status,2,c
  5807  003680  D037               	goto	l6992
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;clcd.c: 725: write_lcd_cmd(0x01);;
  5811  003682  0E01               	movlw	1
  5812  003684  EC7C  F020         	call	_write_lcd_cmd
  5813                           
  5814                           ;clcd.c: 726: char_enter_mode_left_to_right();
  5815  003688  EC1C  F021         	call	_char_enter_mode_left_to_right	;wreg free
  5816                           
  5817                           ;clcd.c: 727: set_cursor(0x80, 0);
  5818  00368C  0E00               	movlw	0
  5819  00368E  6E18               	movwf	set_cursor@col_number,c
  5820  003690  0E80               	movlw	128
  5821  003692  EC98  F020         	call	_set_cursor
  5822                           
  5823                           ;clcd.c: 728: write_str(lcd_display_array[0]);
  5824  003696  0E00               	movlw	low _lcd_display_array
  5825  003698  6E18               	movwf	write_str@str,c
  5826  00369A  0E01               	movlw	high _lcd_display_array
  5827  00369C  6E19               	movwf	write_str@str+1,c
  5828  00369E  ECD0  F01E         	call	_write_str	;wreg free
  5829                           
  5830                           ;clcd.c: 729: set_cursor(0xC0, 0);
  5831  0036A2  0E00               	movlw	0
  5832  0036A4  6E18               	movwf	set_cursor@col_number,c
  5833  0036A6  0EC0               	movlw	192
  5834  0036A8  EC98  F020         	call	_set_cursor
  5835                           
  5836                           ;clcd.c: 730: write_str(lcd_display_array[1]);
  5837  0036AC  0E14               	movlw	low (_lcd_display_array+20)
  5838  0036AE  6E18               	movwf	write_str@str,c
  5839  0036B0  0E01               	movlw	high (_lcd_display_array+20)
  5840  0036B2  6E19               	movwf	write_str@str+1,c
  5841  0036B4  ECD0  F01E         	call	_write_str	;wreg free
  5842                           
  5843                           ;clcd.c: 731: set_cursor(0x94, 0);
  5844  0036B8  0E00               	movlw	0
  5845  0036BA  6E18               	movwf	set_cursor@col_number,c
  5846  0036BC  0E94               	movlw	148
  5847  0036BE  EC98  F020         	call	_set_cursor
  5848                           
  5849                           ;clcd.c: 732: write_str(lcd_display_array[2]);
  5850  0036C2  0E28               	movlw	low (_lcd_display_array+40)
  5851  0036C4  6E18               	movwf	write_str@str,c
  5852  0036C6  0E01               	movlw	high (_lcd_display_array+40)
  5853  0036C8  6E19               	movwf	write_str@str+1,c
  5854  0036CA  ECD0  F01E         	call	_write_str	;wreg free
  5855                           
  5856                           ;clcd.c: 733: set_cursor(0xD4, 0);
  5857  0036CE  0E00               	movlw	0
  5858  0036D0  6E18               	movwf	set_cursor@col_number,c
  5859  0036D2  0ED4               	movlw	212
  5860  0036D4  EC98  F020         	call	_set_cursor
  5861                           
  5862                           ;clcd.c: 734: write_str(lcd_display_array[3]);
  5863  0036D8  0E3C               	movlw	low (_lcd_display_array+60)
  5864  0036DA  6E18               	movwf	write_str@str,c
  5865  0036DC  0E01               	movlw	high (_lcd_display_array+60)
  5866  0036DE  6E19               	movwf	write_str@str+1,c
  5867  0036E0  ECD0  F01E         	call	_write_str	;wreg free
  5868                           
  5869                           ;clcd.c: 735: print_data_ready = 0;
  5870  0036E4  0E00               	movlw	0
  5871  0036E6  0100               	movlb	0	; () banked
  5872  0036E8  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5873  0036EA  0E00               	movlw	0
  5874  0036EC  6F76               	movwf	_print_data_ready& (0+255),b
  5875                           
  5876                           ;clcd.c: 736: } else {
  5877  0036EE  0012               	return	
  5878  0036F0                     l6992:
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;clcd.c: 737: print_data_ready = 0;
  5882  0036F0  0E00               	movlw	0
  5883  0036F2  0100               	movlb	0	; () banked
  5884  0036F4  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5885  0036F6  0E00               	movlw	0
  5886  0036F8  6F76               	movwf	_print_data_ready& (0+255),b
  5887  0036FA  0012               	return	
  5888  0036FC                     __end_of_display_text:
  5889                           	opt stack 0
  5890                           tblptru	equ	0xFF8
  5891                           tblptrh	equ	0xFF7
  5892                           tblptrl	equ	0xFF6
  5893                           tablat	equ	0xFF5
  5894                           prodh	equ	0xFF4
  5895                           prodl	equ	0xFF3
  5896                           intcon	equ	0xFF2
  5897                           postinc0	equ	0xFEE
  5898                           wreg	equ	0xFE8
  5899                           indf1	equ	0xFE7
  5900                           postinc1	equ	0xFE6
  5901                           postdec1	equ	0xFE5
  5902                           fsr1h	equ	0xFE2
  5903                           fsr1l	equ	0xFE1
  5904                           indf2	equ	0xFDF
  5905                           postinc2	equ	0xFDE
  5906                           postdec2	equ	0xFDD
  5907                           fsr2h	equ	0xFDA
  5908                           fsr2l	equ	0xFD9
  5909                           status	equ	0xFD8
  5910                           
  5911 ;; *************** function _set_cursor *****************
  5912 ;; Defined at:
  5913 ;;		line 366 in file "clcd.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;  row_number      1    wreg     unsigned char 
  5916 ;;  col_number      1   23[COMRAM] unsigned char 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;  row_number      1   24[COMRAM] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      void 
  5921 ;; Registers used:
  5922 ;;		wreg, status,2, status,0, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5928 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;Total ram usage:        2 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    7
  5935 ;; This function calls:
  5936 ;;		_write_lcd_cmd
  5937 ;; This function is called by:
  5938 ;;		_display_text
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           	psect	text11
  5943  004130                     __ptext11:
  5944                           	opt stack 0
  5945  004130                     _set_cursor:
  5946                           	opt stack 21
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;incstack = 0
  5950                           ;set_cursor@row_number stored from wreg
  5951  004130  6E19               	movwf	set_cursor@row_number,c
  5952                           
  5953                           ;clcd.c: 367: if (col_number > 20) {
  5954  004132  0E14               	movlw	20
  5955  004134  6418               	cpfsgt	set_cursor@col_number,c
  5956  004136  D002               	goto	l6782
  5957                           
  5958                           ;clcd.c: 368: col_number = 0;
  5959  004138  0E00               	movlw	0
  5960  00413A  6E18               	movwf	set_cursor@col_number,c
  5961  00413C                     l6782:
  5962                           
  5963                           ;clcd.c: 369: }
  5964                           ;clcd.c: 370: write_lcd_cmd(col_number + row_number);
  5965  00413C  5018               	movf	set_cursor@col_number,w,c
  5966  00413E  2419               	addwf	set_cursor@row_number,w,c
  5967  004140  EC7C  F020         	call	_write_lcd_cmd
  5968  004144  0012               	return		;funcret
  5969  004146                     __end_of_set_cursor:
  5970                           	opt stack 0
  5971                           tblptru	equ	0xFF8
  5972                           tblptrh	equ	0xFF7
  5973                           tblptrl	equ	0xFF6
  5974                           tablat	equ	0xFF5
  5975                           prodh	equ	0xFF4
  5976                           prodl	equ	0xFF3
  5977                           intcon	equ	0xFF2
  5978                           postinc0	equ	0xFEE
  5979                           wreg	equ	0xFE8
  5980                           indf1	equ	0xFE7
  5981                           postinc1	equ	0xFE6
  5982                           postdec1	equ	0xFE5
  5983                           fsr1h	equ	0xFE2
  5984                           fsr1l	equ	0xFE1
  5985                           indf2	equ	0xFDF
  5986                           postinc2	equ	0xFDE
  5987                           postdec2	equ	0xFDD
  5988                           fsr2h	equ	0xFDA
  5989                           fsr2l	equ	0xFD9
  5990                           status	equ	0xFD8
  5991                           
  5992 ;; *************** function _char_enter_mode_left_to_right *****************
  5993 ;; Defined at:
  5994 ;;		line 407 in file "clcd.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;		None
  5997 ;; Auto vars:     Size  Location     Type
  5998 ;;		None
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  1    wreg      void 
  6001 ;; Registers used:
  6002 ;;		wreg, status,2, status,0, cstack
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6012 ;;Total ram usage:        0 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    7
  6015 ;; This function calls:
  6016 ;;		_write_lcd_cmd
  6017 ;; This function is called by:
  6018 ;;		_display_text
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           	psect	text12
  6023  004238                     __ptext12:
  6024                           	opt stack 0
  6025  004238                     _char_enter_mode_left_to_right:
  6026                           	opt stack 21
  6027                           
  6028                           ;clcd.c: 411: write_lcd_cmd(0x06);
  6029                           
  6030                           ;incstack = 0
  6031  004238  0E06               	movlw	6
  6032  00423A  EC7C  F020         	call	_write_lcd_cmd
  6033  00423E  0012               	return		;funcret
  6034  004240                     __end_of_char_enter_mode_left_to_right:
  6035                           	opt stack 0
  6036                           tblptru	equ	0xFF8
  6037                           tblptrh	equ	0xFF7
  6038                           tblptrl	equ	0xFF6
  6039                           tablat	equ	0xFF5
  6040                           prodh	equ	0xFF4
  6041                           prodl	equ	0xFF3
  6042                           intcon	equ	0xFF2
  6043                           postinc0	equ	0xFEE
  6044                           wreg	equ	0xFE8
  6045                           indf1	equ	0xFE7
  6046                           postinc1	equ	0xFE6
  6047                           postdec1	equ	0xFE5
  6048                           fsr1h	equ	0xFE2
  6049                           fsr1l	equ	0xFE1
  6050                           indf2	equ	0xFDF
  6051                           postinc2	equ	0xFDE
  6052                           postdec2	equ	0xFDD
  6053                           fsr2h	equ	0xFDA
  6054                           fsr2l	equ	0xFD9
  6055                           status	equ	0xFD8
  6056                           
  6057 ;; *************** function _copy_data *****************
  6058 ;; Defined at:
  6059 ;;		line 121 in file "clcd.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  clcd_str_dat    2   47[COMRAM] PTR struct .
  6062 ;;		 -> clcd_display_string_details(1100), 
  6063 ;;  data            2   49[COMRAM] PTR struct .
  6064 ;;		 -> cmd_data(53), 
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;  col2            1    0        unsigned char 
  6067 ;;  row2            1    0        unsigned char 
  6068 ;;  col1            1    0        unsigned char 
  6069 ;;  row1            1    0        unsigned char 
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  1    wreg      void 
  6072 ;; Registers used:
  6073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6079 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;Total ram usage:        6 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; Hardware stack levels required when called:    8
  6086 ;; This function calls:
  6087 ;;		_printf
  6088 ;;		_strcpy
  6089 ;;		_strlen
  6090 ;; This function is called by:
  6091 ;;		_update_string_data
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text13
  6096  00243E                     __ptext13:
  6097                           	opt stack 0
  6098  00243E                     _copy_data:
  6099                           	opt stack 19
  6100                           
  6101                           ;clcd.c: 122: char row1, col1, row2, col2;
  6102                           ;clcd.c: 123: clcd_str_data->uid = data->uid;
  6103                           
  6104                           ;incstack = 0
  6105  00243E  C032  FFD9         	movff	copy_data@data,fsr2l
  6106  002442  C033  FFDA         	movff	copy_data@data+1,fsr2h
  6107  002446  C030  FFE1         	movff	copy_data@clcd_str_data,fsr1l
  6108  00244A  C031  FFE2         	movff	copy_data@clcd_str_data+1,fsr1h
  6109  00244E  CFDE FFE6          	movff	postinc2,postinc1
  6110  002452  CFDD FFE5          	movff	postdec2,postdec1
  6111                           
  6112                           ;clcd.c: 124: strcpy(clcd_str_data->string, data->data);
  6113  002456  0E02               	movlw	2
  6114  002458  2430               	addwf	copy_data@clcd_str_data,w,c
  6115  00245A  6E10               	movwf	strcpy@to,c
  6116  00245C  0E00               	movlw	0
  6117  00245E  2031               	addwfc	copy_data@clcd_str_data+1,w,c
  6118  002460  6E11               	movwf	strcpy@to+1,c
  6119  002462  0E02               	movlw	2
  6120  002464  2432               	addwf	copy_data@data,w,c
  6121  002466  6E12               	movwf	strcpy@from,c
  6122  002468  0E00               	movlw	0
  6123  00246A  2033               	addwfc	copy_data@data+1,w,c
  6124  00246C  6E13               	movwf	strcpy@from+1,c
  6125  00246E  ECA4  F01F         	call	_strcpy	;wreg free
  6126                           
  6127                           ;clcd.c: 125: clcd_str_data->strlen = strlen(clcd_str_data->string);
  6128  002472  0E02               	movlw	2
  6129  002474  2430               	addwf	copy_data@clcd_str_data,w,c
  6130  002476  6E1E               	movwf	strlen@s,c
  6131  002478  0E00               	movlw	0
  6132  00247A  2031               	addwfc	copy_data@clcd_str_data+1,w,c
  6133  00247C  6E1F               	movwf	strlen@s+1,c
  6134  00247E  ECED  F01E         	call	_strlen	;wreg free
  6135  002482  EE20 F02A          	lfsr	2,42
  6136  002486  5030               	movf	copy_data@clcd_str_data,w,c
  6137  002488  26D9               	addwf	fsr2l,f,c
  6138  00248A  5031               	movf	copy_data@clcd_str_data+1,w,c
  6139  00248C  22DA               	addwfc	fsr2h,f,c
  6140  00248E  50DF               	movf	indf2,w,c
  6141  002490  181E               	xorwf	?_strlen,w,c
  6142  002492  0B80               	andlw	-128
  6143  002494  181E               	xorwf	?_strlen,w,c
  6144  002496  6EDF               	movwf	indf2,c
  6145                           
  6146                           ;clcd.c: 126: clcd_str_data->start_row = data->start_row;
  6147  002498  EE20 F02B          	lfsr	2,43
  6148  00249C  5032               	movf	copy_data@data,w,c
  6149  00249E  26D9               	addwf	fsr2l,f,c
  6150  0024A0  5033               	movf	copy_data@data+1,w,c
  6151  0024A2  22DA               	addwfc	fsr2h,f,c
  6152  0024A4  50DF               	movf	indf2,w,c
  6153  0024A6  6E34               	movwf	??_copy_data& (0+255),c
  6154  0024A8  EE20 F02B          	lfsr	2,43
  6155  0024AC  5030               	movf	copy_data@clcd_str_data,w,c
  6156  0024AE  26D9               	addwf	fsr2l,f,c
  6157  0024B0  5031               	movf	copy_data@clcd_str_data+1,w,c
  6158  0024B2  22DA               	addwfc	fsr2h,f,c
  6159  0024B4  50DF               	movf	indf2,w,c
  6160  0024B6  1834               	xorwf	??_copy_data,w,c
  6161  0024B8  0B80               	andlw	-128
  6162  0024BA  1834               	xorwf	??_copy_data,w,c
  6163  0024BC  6EDF               	movwf	indf2,c
  6164                           
  6165                           ;clcd.c: 127: clcd_str_data->start_col = data->start_col;
  6166  0024BE  EE20 F02C          	lfsr	2,44
  6167  0024C2  5032               	movf	copy_data@data,w,c
  6168  0024C4  26D9               	addwf	fsr2l,f,c
  6169  0024C6  5033               	movf	copy_data@data+1,w,c
  6170  0024C8  22DA               	addwfc	fsr2h,f,c
  6171  0024CA  50DF               	movf	indf2,w,c
  6172  0024CC  6E34               	movwf	??_copy_data& (0+255),c
  6173  0024CE  EE20 F02C          	lfsr	2,44
  6174  0024D2  5030               	movf	copy_data@clcd_str_data,w,c
  6175  0024D4  26D9               	addwf	fsr2l,f,c
  6176  0024D6  5031               	movf	copy_data@clcd_str_data+1,w,c
  6177  0024D8  22DA               	addwfc	fsr2h,f,c
  6178  0024DA  50DF               	movf	indf2,w,c
  6179  0024DC  1834               	xorwf	??_copy_data,w,c
  6180  0024DE  0B80               	andlw	-128
  6181  0024E0  1834               	xorwf	??_copy_data,w,c
  6182  0024E2  6EDF               	movwf	indf2,c
  6183                           
  6184                           ;clcd.c: 128: clcd_str_data->end_row = data->end_row;
  6185  0024E4  EE20 F02D          	lfsr	2,45
  6186  0024E8  5032               	movf	copy_data@data,w,c
  6187  0024EA  26D9               	addwf	fsr2l,f,c
  6188  0024EC  5033               	movf	copy_data@data+1,w,c
  6189  0024EE  22DA               	addwfc	fsr2h,f,c
  6190  0024F0  50DF               	movf	indf2,w,c
  6191  0024F2  6E34               	movwf	??_copy_data& (0+255),c
  6192  0024F4  EE20 F02E          	lfsr	2,46
  6193  0024F8  5030               	movf	copy_data@clcd_str_data,w,c
  6194  0024FA  26D9               	addwf	fsr2l,f,c
  6195  0024FC  5031               	movf	copy_data@clcd_str_data+1,w,c
  6196  0024FE  22DA               	addwfc	fsr2h,f,c
  6197  002500  50DF               	movf	indf2,w,c
  6198  002502  1834               	xorwf	??_copy_data,w,c
  6199  002504  0B80               	andlw	-128
  6200  002506  1834               	xorwf	??_copy_data,w,c
  6201  002508  6EDF               	movwf	indf2,c
  6202                           
  6203                           ;clcd.c: 129: clcd_str_data->end_col = data->end_col;
  6204  00250A  EE20 F02E          	lfsr	2,46
  6205  00250E  5032               	movf	copy_data@data,w,c
  6206  002510  26D9               	addwf	fsr2l,f,c
  6207  002512  5033               	movf	copy_data@data+1,w,c
  6208  002514  22DA               	addwfc	fsr2h,f,c
  6209  002516  50DF               	movf	indf2,w,c
  6210  002518  6E34               	movwf	??_copy_data& (0+255),c
  6211  00251A  EE20 F02F          	lfsr	2,47
  6212  00251E  5030               	movf	copy_data@clcd_str_data,w,c
  6213  002520  26D9               	addwf	fsr2l,f,c
  6214  002522  5031               	movf	copy_data@clcd_str_data+1,w,c
  6215  002524  22DA               	addwfc	fsr2h,f,c
  6216  002526  50DF               	movf	indf2,w,c
  6217  002528  1834               	xorwf	??_copy_data,w,c
  6218  00252A  0B80               	andlw	-128
  6219  00252C  1834               	xorwf	??_copy_data,w,c
  6220  00252E  6EDF               	movwf	indf2,c
  6221                           
  6222                           ;clcd.c: 130: clcd_str_data->start_point = (clcd_str_data->start_row * clcd_config_data.
      +                          clcd_max_col) + clcd_str_data->start_col;
  6223  002530  EE20 F02C          	lfsr	2,44
  6224  002534  5030               	movf	copy_data@clcd_str_data,w,c
  6225  002536  26D9               	addwf	fsr2l,f,c
  6226  002538  5031               	movf	copy_data@clcd_str_data+1,w,c
  6227  00253A  22DA               	addwfc	fsr2h,f,c
  6228  00253C  50DF               	movf	indf2,w,c
  6229  00253E  0B7F               	andlw	127
  6230  002540  6E34               	movwf	??_copy_data& (0+255),c
  6231  002542  EE20 F02B          	lfsr	2,43
  6232  002546  5030               	movf	copy_data@clcd_str_data,w,c
  6233  002548  26D9               	addwf	fsr2l,f,c
  6234  00254A  5031               	movf	copy_data@clcd_str_data+1,w,c
  6235  00254C  22DA               	addwfc	fsr2h,f,c
  6236  00254E  50DF               	movf	indf2,w,c
  6237  002550  0B7F               	andlw	127
  6238  002552  024B               	mulwf	_clcd_config_data+2,c
  6239  002554  50F3               	movf	prodl,w,c
  6240  002556  2434               	addwf	??_copy_data,w,c
  6241  002558  6E35               	movwf	(??_copy_data+1)& (0+255),c
  6242  00255A  EE20 F02D          	lfsr	2,45
  6243  00255E  5030               	movf	copy_data@clcd_str_data,w,c
  6244  002560  26D9               	addwf	fsr2l,f,c
  6245  002562  5031               	movf	copy_data@clcd_str_data+1,w,c
  6246  002564  22DA               	addwfc	fsr2h,f,c
  6247  002566  50DF               	movf	indf2,w,c
  6248  002568  1835               	xorwf	??_copy_data+1,w,c
  6249  00256A  0B80               	andlw	-128
  6250  00256C  1835               	xorwf	??_copy_data+1,w,c
  6251  00256E  6EDF               	movwf	indf2,c
  6252                           
  6253                           ;clcd.c: 131: clcd_str_data->end_point = (clcd_str_data->end_row * clcd_config_data.clcd
      +                          _max_col) + clcd_str_data->end_col;
  6254  002570  EE20 F02F          	lfsr	2,47
  6255  002574  5030               	movf	copy_data@clcd_str_data,w,c
  6256  002576  26D9               	addwf	fsr2l,f,c
  6257  002578  5031               	movf	copy_data@clcd_str_data+1,w,c
  6258  00257A  22DA               	addwfc	fsr2h,f,c
  6259  00257C  50DF               	movf	indf2,w,c
  6260  00257E  0B7F               	andlw	127
  6261  002580  6E34               	movwf	??_copy_data& (0+255),c
  6262  002582  EE20 F02E          	lfsr	2,46
  6263  002586  5030               	movf	copy_data@clcd_str_data,w,c
  6264  002588  26D9               	addwf	fsr2l,f,c
  6265  00258A  5031               	movf	copy_data@clcd_str_data+1,w,c
  6266  00258C  22DA               	addwfc	fsr2h,f,c
  6267  00258E  50DF               	movf	indf2,w,c
  6268  002590  0B7F               	andlw	127
  6269  002592  024B               	mulwf	_clcd_config_data+2,c
  6270  002594  50F3               	movf	prodl,w,c
  6271  002596  2434               	addwf	??_copy_data,w,c
  6272  002598  6E35               	movwf	(??_copy_data+1)& (0+255),c
  6273  00259A  EE20 F030          	lfsr	2,48
  6274  00259E  5030               	movf	copy_data@clcd_str_data,w,c
  6275  0025A0  26D9               	addwf	fsr2l,f,c
  6276  0025A2  5031               	movf	copy_data@clcd_str_data+1,w,c
  6277  0025A4  22DA               	addwfc	fsr2h,f,c
  6278  0025A6  50DF               	movf	indf2,w,c
  6279  0025A8  1835               	xorwf	??_copy_data+1,w,c
  6280  0025AA  0B80               	andlw	-128
  6281  0025AC  1835               	xorwf	??_copy_data+1,w,c
  6282  0025AE  6EDF               	movwf	indf2,c
  6283                           
  6284                           ;clcd.c: 132: clcd_str_data->direction = data->scroll;
  6285  0025B0  EE20 F030          	lfsr	2,48
  6286  0025B4  5032               	movf	copy_data@data,w,c
  6287  0025B6  26D9               	addwf	fsr2l,f,c
  6288  0025B8  5033               	movf	copy_data@data+1,w,c
  6289  0025BA  22DA               	addwfc	fsr2h,f,c
  6290  0025BC  50DF               	movf	indf2,w,c
  6291  0025BE  6E34               	movwf	??_copy_data& (0+255),c
  6292  0025C0  EE20 F031          	lfsr	2,49
  6293  0025C4  5030               	movf	copy_data@clcd_str_data,w,c
  6294  0025C6  26D9               	addwf	fsr2l,f,c
  6295  0025C8  5031               	movf	copy_data@clcd_str_data+1,w,c
  6296  0025CA  22DA               	addwfc	fsr2h,f,c
  6297  0025CC  50DF               	movf	indf2,w,c
  6298  0025CE  1834               	xorwf	??_copy_data,w,c
  6299  0025D0  0BF8               	andlw	-8
  6300  0025D2  1834               	xorwf	??_copy_data,w,c
  6301  0025D4  6EDF               	movwf	indf2,c
  6302                           
  6303                           ;clcd.c: 133: clcd_str_data->display_char_count = (clcd_str_data->end_point - clcd_str_d
      +                          ata->start_point) + 1;
  6304  0025D6  EE20 F032          	lfsr	2,50
  6305  0025DA  5030               	movf	copy_data@clcd_str_data,w,c
  6306  0025DC  26D9               	addwf	fsr2l,f,c
  6307  0025DE  5031               	movf	copy_data@clcd_str_data+1,w,c
  6308  0025E0  22DA               	addwfc	fsr2h,f,c
  6309  0025E2  EE10 F030          	lfsr	1,48
  6310  0025E6  5030               	movf	copy_data@clcd_str_data,w,c
  6311  0025E8  26E1               	addwf	fsr1l,f,c
  6312  0025EA  5031               	movf	copy_data@clcd_str_data+1,w,c
  6313  0025EC  22E2               	addwfc	fsr1h,f,c
  6314  0025EE  50E7               	movf	indf1,w,c
  6315  0025F0  0B7F               	andlw	127
  6316  0025F2  6E34               	movwf	??_copy_data& (0+255),c
  6317  0025F4  EE10 F02D          	lfsr	1,45
  6318  0025F8  5030               	movf	copy_data@clcd_str_data,w,c
  6319  0025FA  26E1               	addwf	fsr1l,f,c
  6320  0025FC  5031               	movf	copy_data@clcd_str_data+1,w,c
  6321  0025FE  22E2               	addwfc	fsr1h,f,c
  6322  002600  50E7               	movf	indf1,w,c
  6323  002602  0B7F               	andlw	127
  6324  002604  0800               	sublw	0
  6325  002606  2434               	addwf	??_copy_data,w,c
  6326  002608  6E35               	movwf	(??_copy_data+1)& (0+255),c
  6327  00260A  2835               	incf	??_copy_data+1,w,c
  6328  00260C  6EDF               	movwf	indf2,c
  6329                           
  6330                           ;clcd.c: 134: printf("display_char_count = %d\r\n", clcd_str_data->display_char_count);
  6331  00260E  0E25               	movlw	low STR_6
  6332  002610  6E1E               	movwf	printf@f,c
  6333  002612  0EFD               	movlw	high STR_6
  6334  002614  6E1F               	movwf	printf@f+1,c
  6335  002616  EE20 F032          	lfsr	2,50
  6336  00261A  5030               	movf	copy_data@clcd_str_data,w,c
  6337  00261C  26D9               	addwf	fsr2l,f,c
  6338  00261E  5031               	movf	copy_data@clcd_str_data+1,w,c
  6339  002620  22DA               	addwfc	fsr2h,f,c
  6340  002622  50DF               	movf	indf2,w,c
  6341  002624  6E34               	movwf	??_copy_data& (0+255),c
  6342  002626  5034               	movf	??_copy_data,w,c
  6343  002628  6E20               	movwf	?_printf+2,c
  6344  00262A  6A21               	clrf	?_printf+3,c
  6345  00262C  EC03  F015         	call	_printf	;wreg free
  6346  002630  0012               	return		;funcret
  6347  002632                     __end_of_copy_data:
  6348                           	opt stack 0
  6349                           tblptru	equ	0xFF8
  6350                           tblptrh	equ	0xFF7
  6351                           tblptrl	equ	0xFF6
  6352                           tablat	equ	0xFF5
  6353                           prodh	equ	0xFF4
  6354                           prodl	equ	0xFF3
  6355                           intcon	equ	0xFF2
  6356                           postinc0	equ	0xFEE
  6357                           wreg	equ	0xFE8
  6358                           indf1	equ	0xFE7
  6359                           postinc1	equ	0xFE6
  6360                           postdec1	equ	0xFE5
  6361                           fsr1h	equ	0xFE2
  6362                           fsr1l	equ	0xFE1
  6363                           indf2	equ	0xFDF
  6364                           postinc2	equ	0xFDE
  6365                           postdec2	equ	0xFDD
  6366                           fsr2h	equ	0xFDA
  6367                           fsr2l	equ	0xFD9
  6368                           status	equ	0xFD8
  6369                           
  6370 ;; *************** function _conflict_check *****************
  6371 ;; Defined at:
  6372 ;;		line 137 in file "clcd.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;  exist_uid_id    1    wreg     unsigned char 
  6375 ;;  new_start_po    1   47[COMRAM] unsigned char 
  6376 ;;  new_end_poin    1   48[COMRAM] unsigned char 
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  exist_uid_id    1   52[COMRAM] unsigned char 
  6379 ;;  i               2   54[COMRAM] int 
  6380 ;;  conflict        1   53[COMRAM] unsigned char 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  1    wreg      unsigned char 
  6383 ;; Registers used:
  6384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;Total ram usage:        9 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    8
  6397 ;; This function calls:
  6398 ;;		___wmul
  6399 ;;		_printf
  6400 ;; This function is called by:
  6401 ;;		_update_string_data
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           	psect	text14
  6406  001A9A                     __ptext14:
  6407                           	opt stack 0
  6408  001A9A                     _conflict_check:
  6409                           	opt stack 19
  6410                           
  6411                           ;incstack = 0
  6412                           ;conflict_check@exist_uid_idx stored from wreg
  6413  001A9A  6E35               	movwf	conflict_check@exist_uid_idx,c
  6414                           
  6415                           ;clcd.c: 138: int i = 0;
  6416  001A9C  0E00               	movlw	0
  6417  001A9E  6E38               	movwf	conflict_check@i+1,c
  6418  001AA0  0E00               	movlw	0
  6419  001AA2  6E37               	movwf	conflict_check@i,c
  6420                           
  6421                           ;clcd.c: 139: bool conflict = 0;
  6422  001AA4  0E00               	movlw	0
  6423  001AA6  6E36               	movwf	conflict_check@conflict,c
  6424                           
  6425                           ;clcd.c: 141: for (i = 0; i < clcd_config_data.clcd_max_display_string;) {
  6426  001AA8  0E00               	movlw	0
  6427  001AAA  6E38               	movwf	conflict_check@i+1,c
  6428  001AAC  0E00               	movlw	0
  6429  001AAE  6E37               	movwf	conflict_check@i,c
  6430  001AB0  D12F               	goto	l7156
  6431  001AB2                     l7110:
  6432                           
  6433                           ;clcd.c: 142: if (exist_uid_idx != i && clcd_display_string_details[i].uid != 0) {
  6434  001AB2  5035               	movf	conflict_check@exist_uid_idx,w,c
  6435  001AB4  6E32               	movwf	??_conflict_check& (0+255),c
  6436  001AB6  6A33               	clrf	(??_conflict_check+1)& (0+255),c
  6437  001AB8  5037               	movf	conflict_check@i,w,c
  6438  001ABA  1832               	xorwf	??_conflict_check,w,c
  6439  001ABC  E104               	bnz	u6500
  6440  001ABE  5038               	movf	conflict_check@i+1,w,c
  6441  001AC0  1833               	xorwf	??_conflict_check+1,w,c
  6442  001AC2  B4D8               	btfsc	status,2,c
  6443  001AC4  D123               	goto	l7154
  6444  001AC6                     u6500:
  6445  001AC6  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6446  001ACA  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6447  001ACE  0E00               	movlw	0
  6448  001AD0  6E1B               	movwf	___wmul@multiplicand+1,c
  6449  001AD2  0E37               	movlw	55
  6450  001AD4  6E1A               	movwf	___wmul@multiplicand,c
  6451  001AD6  ECE7  F01F         	call	___wmul	;wreg free
  6452  001ADA  0E96               	movlw	low _clcd_display_string_details
  6453  001ADC  2418               	addwf	?___wmul,w,c
  6454  001ADE  6ED9               	movwf	fsr2l,c
  6455  001AE0  0E02               	movlw	high _clcd_display_string_details
  6456  001AE2  2019               	addwfc	?___wmul+1,w,c
  6457  001AE4  6EDA               	movwf	fsr2h,c
  6458  001AE6  50DE               	movf	postinc2,w,c
  6459  001AE8  10DE               	iorwf	postinc2,w,c
  6460  001AEA  B4D8               	btfsc	status,2,c
  6461  001AEC  D10F               	goto	l7154
  6462                           
  6463                           ;clcd.c: 143: if (new_start_point >= clcd_display_string_details[i].start_point && new_s
      +                          tart_point <= clcd_display_string_details[i].end_point) {
  6464  001AEE  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6465  001AF2  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6466  001AF6  0E00               	movlw	0
  6467  001AF8  6E1B               	movwf	___wmul@multiplicand+1,c
  6468  001AFA  0E37               	movlw	55
  6469  001AFC  6E1A               	movwf	___wmul@multiplicand,c
  6470  001AFE  ECE7  F01F         	call	___wmul	;wreg free
  6471  001B02  0E2D               	movlw	45
  6472  001B04  2618               	addwf	?___wmul,f,c
  6473  001B06  0E00               	movlw	0
  6474  001B08  2219               	addwfc	?___wmul+1,f,c
  6475  001B0A  0E96               	movlw	low _clcd_display_string_details
  6476  001B0C  2418               	addwf	?___wmul,w,c
  6477  001B0E  6ED9               	movwf	fsr2l,c
  6478  001B10  0E02               	movlw	high _clcd_display_string_details
  6479  001B12  2019               	addwfc	?___wmul+1,w,c
  6480  001B14  6EDA               	movwf	fsr2h,c
  6481  001B16  50DF               	movf	223,w,c
  6482  001B18  0B7F               	andlw	127
  6483  001B1A  6E32               	movwf	??_conflict_check& (0+255),c
  6484  001B1C  5032               	movf	??_conflict_check,w,c
  6485  001B1E  5C30               	subwf	conflict_check@new_start_point,w,c
  6486  001B20  A0D8               	btfss	status,0,c
  6487  001B22  D041               	goto	l7128
  6488  001B24  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6489  001B28  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6490  001B2C  0E00               	movlw	0
  6491  001B2E  6E1B               	movwf	___wmul@multiplicand+1,c
  6492  001B30  0E37               	movlw	55
  6493  001B32  6E1A               	movwf	___wmul@multiplicand,c
  6494  001B34  ECE7  F01F         	call	___wmul	;wreg free
  6495  001B38  0E30               	movlw	48
  6496  001B3A  2618               	addwf	?___wmul,f,c
  6497  001B3C  0E00               	movlw	0
  6498  001B3E  2219               	addwfc	?___wmul+1,f,c
  6499  001B40  0E96               	movlw	low _clcd_display_string_details
  6500  001B42  2418               	addwf	?___wmul,w,c
  6501  001B44  6ED9               	movwf	fsr2l,c
  6502  001B46  0E02               	movlw	high _clcd_display_string_details
  6503  001B48  2019               	addwfc	?___wmul+1,w,c
  6504  001B4A  6EDA               	movwf	fsr2h,c
  6505  001B4C  50DF               	movf	223,w,c
  6506  001B4E  0B7F               	andlw	127
  6507  001B50  6E32               	movwf	??_conflict_check& (0+255),c
  6508  001B52  5030               	movf	conflict_check@new_start_point,w,c
  6509  001B54  5C32               	subwf	??_conflict_check,w,c
  6510  001B56  A0D8               	btfss	status,0,c
  6511  001B58  D026               	goto	l7128
  6512                           
  6513                           ;clcd.c: 144: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6514  001B5A  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6515  001B5E  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6516  001B62  0E00               	movlw	0
  6517  001B64  6E1B               	movwf	___wmul@multiplicand+1,c
  6518  001B66  0E37               	movlw	55
  6519  001B68  6E1A               	movwf	___wmul@multiplicand,c
  6520  001B6A  ECE7  F01F         	call	___wmul	;wreg free
  6521  001B6E  0E96               	movlw	low _clcd_display_string_details
  6522  001B70  2418               	addwf	?___wmul,w,c
  6523  001B72  6ED9               	movwf	fsr2l,c
  6524  001B74  0E02               	movlw	high _clcd_display_string_details
  6525  001B76  2019               	addwfc	?___wmul+1,w,c
  6526  001B78  6EDA               	movwf	fsr2h,c
  6527  001B7A  5042               	movf	_conflict_data_count,w,c
  6528  001B7C  0D02               	mullw	2
  6529  001B7E  0EBB               	movlw	low _conflict_arr
  6530  001B80  24F3               	addwf	prodl,w,c
  6531  001B82  6EE1               	movwf	fsr1l,c
  6532  001B84  0E00               	movlw	high _conflict_arr
  6533  001B86  20F4               	addwfc	prodh,w,c
  6534  001B88  6EE2               	movwf	fsr1h,c
  6535  001B8A  CFDE FFE6          	movff	postinc2,postinc1
  6536  001B8E  CFDD FFE5          	movff	postdec2,postdec1
  6537  001B92  2A42               	incf	_conflict_data_count,f,c
  6538                           
  6539                           ;clcd.c: 145: i++;
  6540  001B94  4A37               	infsnz	conflict_check@i,f,c
  6541  001B96  2A38               	incf	conflict_check@i+1,f,c
  6542                           
  6543                           ;clcd.c: 146: printf("ex_sp <= new_sp <=ex_ep\r\n");
  6544  001B98  0E59               	movlw	low STR_7
  6545  001B9A  6E1E               	movwf	printf@f,c
  6546  001B9C  0EFD               	movlw	high STR_7
  6547  001B9E  6E1F               	movwf	printf@f+1,c
  6548  001BA0  EC03  F015         	call	_printf	;wreg free
  6549  001BA4  D05A               	goto	l7140
  6550  001BA6                     l7128:
  6551                           
  6552                           ;clcd.c: 149: }
  6553                           ;clcd.c: 150: if (new_end_point >= clcd_display_string_details[i].start_point && new_end
      +                          _point <= clcd_display_string_details[i].end_point) {
  6554  001BA6  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6555  001BAA  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6556  001BAE  0E00               	movlw	0
  6557  001BB0  6E1B               	movwf	___wmul@multiplicand+1,c
  6558  001BB2  0E37               	movlw	55
  6559  001BB4  6E1A               	movwf	___wmul@multiplicand,c
  6560  001BB6  ECE7  F01F         	call	___wmul	;wreg free
  6561  001BBA  0E2D               	movlw	45
  6562  001BBC  2618               	addwf	?___wmul,f,c
  6563  001BBE  0E00               	movlw	0
  6564  001BC0  2219               	addwfc	?___wmul+1,f,c
  6565  001BC2  0E96               	movlw	low _clcd_display_string_details
  6566  001BC4  2418               	addwf	?___wmul,w,c
  6567  001BC6  6ED9               	movwf	fsr2l,c
  6568  001BC8  0E02               	movlw	high _clcd_display_string_details
  6569  001BCA  2019               	addwfc	?___wmul+1,w,c
  6570  001BCC  6EDA               	movwf	fsr2h,c
  6571  001BCE  50DF               	movf	223,w,c
  6572  001BD0  0B7F               	andlw	127
  6573  001BD2  6E32               	movwf	??_conflict_check& (0+255),c
  6574  001BD4  5032               	movf	??_conflict_check,w,c
  6575  001BD6  5C31               	subwf	conflict_check@new_end_point,w,c
  6576  001BD8  A0D8               	btfss	status,0,c
  6577  001BDA  D042               	goto	l7142
  6578  001BDC  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6579  001BE0  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6580  001BE4  0E00               	movlw	0
  6581  001BE6  6E1B               	movwf	___wmul@multiplicand+1,c
  6582  001BE8  0E37               	movlw	55
  6583  001BEA  6E1A               	movwf	___wmul@multiplicand,c
  6584  001BEC  ECE7  F01F         	call	___wmul	;wreg free
  6585  001BF0  0E30               	movlw	48
  6586  001BF2  2618               	addwf	?___wmul,f,c
  6587  001BF4  0E00               	movlw	0
  6588  001BF6  2219               	addwfc	?___wmul+1,f,c
  6589  001BF8  0E96               	movlw	low _clcd_display_string_details
  6590  001BFA  2418               	addwf	?___wmul,w,c
  6591  001BFC  6ED9               	movwf	fsr2l,c
  6592  001BFE  0E02               	movlw	high _clcd_display_string_details
  6593  001C00  2019               	addwfc	?___wmul+1,w,c
  6594  001C02  6EDA               	movwf	fsr2h,c
  6595  001C04  50DF               	movf	223,w,c
  6596  001C06  0B7F               	andlw	127
  6597  001C08  6E32               	movwf	??_conflict_check& (0+255),c
  6598  001C0A  5031               	movf	conflict_check@new_end_point,w,c
  6599  001C0C  5C32               	subwf	??_conflict_check,w,c
  6600  001C0E  A0D8               	btfss	status,0,c
  6601  001C10  D027               	goto	l7142
  6602                           
  6603                           ;clcd.c: 151: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6604  001C12  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6605  001C16  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6606  001C1A  0E00               	movlw	0
  6607  001C1C  6E1B               	movwf	___wmul@multiplicand+1,c
  6608  001C1E  0E37               	movlw	55
  6609  001C20  6E1A               	movwf	___wmul@multiplicand,c
  6610  001C22  ECE7  F01F         	call	___wmul	;wreg free
  6611  001C26  0E96               	movlw	low _clcd_display_string_details
  6612  001C28  2418               	addwf	?___wmul,w,c
  6613  001C2A  6ED9               	movwf	fsr2l,c
  6614  001C2C  0E02               	movlw	high _clcd_display_string_details
  6615  001C2E  2019               	addwfc	?___wmul+1,w,c
  6616  001C30  6EDA               	movwf	fsr2h,c
  6617  001C32  5042               	movf	_conflict_data_count,w,c
  6618  001C34  0D02               	mullw	2
  6619  001C36  0EBB               	movlw	low _conflict_arr
  6620  001C38  24F3               	addwf	prodl,w,c
  6621  001C3A  6EE1               	movwf	fsr1l,c
  6622  001C3C  0E00               	movlw	high _conflict_arr
  6623  001C3E  20F4               	addwfc	prodh,w,c
  6624  001C40  6EE2               	movwf	fsr1h,c
  6625  001C42  CFDE FFE6          	movff	postinc2,postinc1
  6626  001C46  CFDD FFE5          	movff	postdec2,postdec1
  6627  001C4A  2A42               	incf	_conflict_data_count,f,c
  6628                           
  6629                           ;clcd.c: 152: printf("ex_sp <= new_ep <=ex_ep\r\n");
  6630  001C4C  0E3F               	movlw	low STR_8
  6631  001C4E  6E1E               	movwf	printf@f,c
  6632  001C50  0EFD               	movlw	high STR_8
  6633  001C52  6E1F               	movwf	printf@f+1,c
  6634  001C54  EC03  F015         	call	_printf	;wreg free
  6635  001C58  D056               	goto	l7150
  6636  001C5A                     l7140:
  6637                           
  6638                           ;clcd.c: 154: conflict = 1;
  6639  001C5A  0E01               	movlw	1
  6640  001C5C  6E36               	movwf	conflict_check@conflict,c
  6641                           
  6642                           ;clcd.c: 155: continue;
  6643  001C5E  D058               	goto	l7156
  6644  001C60                     l7142:
  6645                           
  6646                           ;clcd.c: 156: }
  6647                           ;clcd.c: 157: if (new_start_point <= clcd_display_string_details[i].start_point && new_e
      +                          nd_point >= clcd_display_string_details[i].end_point) {
  6648  001C60  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6649  001C64  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6650  001C68  0E00               	movlw	0
  6651  001C6A  6E1B               	movwf	___wmul@multiplicand+1,c
  6652  001C6C  0E37               	movlw	55
  6653  001C6E  6E1A               	movwf	___wmul@multiplicand,c
  6654  001C70  ECE7  F01F         	call	___wmul	;wreg free
  6655  001C74  0E2D               	movlw	45
  6656  001C76  2618               	addwf	?___wmul,f,c
  6657  001C78  0E00               	movlw	0
  6658  001C7A  2219               	addwfc	?___wmul+1,f,c
  6659  001C7C  0E96               	movlw	low _clcd_display_string_details
  6660  001C7E  2418               	addwf	?___wmul,w,c
  6661  001C80  6ED9               	movwf	fsr2l,c
  6662  001C82  0E02               	movlw	high _clcd_display_string_details
  6663  001C84  2019               	addwfc	?___wmul+1,w,c
  6664  001C86  6EDA               	movwf	fsr2h,c
  6665  001C88  50DF               	movf	223,w,c
  6666  001C8A  0B7F               	andlw	127
  6667  001C8C  6E32               	movwf	??_conflict_check& (0+255),c
  6668  001C8E  5030               	movf	conflict_check@new_start_point,w,c
  6669  001C90  5C32               	subwf	??_conflict_check,w,c
  6670  001C92  A0D8               	btfss	status,0,c
  6671  001C94  D03B               	goto	l7154
  6672  001C96  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6673  001C9A  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6674  001C9E  0E00               	movlw	0
  6675  001CA0  6E1B               	movwf	___wmul@multiplicand+1,c
  6676  001CA2  0E37               	movlw	55
  6677  001CA4  6E1A               	movwf	___wmul@multiplicand,c
  6678  001CA6  ECE7  F01F         	call	___wmul	;wreg free
  6679  001CAA  0E30               	movlw	48
  6680  001CAC  2618               	addwf	?___wmul,f,c
  6681  001CAE  0E00               	movlw	0
  6682  001CB0  2219               	addwfc	?___wmul+1,f,c
  6683  001CB2  0E96               	movlw	low _clcd_display_string_details
  6684  001CB4  2418               	addwf	?___wmul,w,c
  6685  001CB6  6ED9               	movwf	fsr2l,c
  6686  001CB8  0E02               	movlw	high _clcd_display_string_details
  6687  001CBA  2019               	addwfc	?___wmul+1,w,c
  6688  001CBC  6EDA               	movwf	fsr2h,c
  6689  001CBE  50DF               	movf	223,w,c
  6690  001CC0  0B7F               	andlw	127
  6691  001CC2  6E32               	movwf	??_conflict_check& (0+255),c
  6692  001CC4  5032               	movf	??_conflict_check,w,c
  6693  001CC6  5C31               	subwf	conflict_check@new_end_point,w,c
  6694  001CC8  A0D8               	btfss	status,0,c
  6695  001CCA  D020               	goto	l7154
  6696                           
  6697                           ;clcd.c: 158: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6698  001CCC  C037  F018         	movff	conflict_check@i,___wmul@multiplier
  6699  001CD0  C038  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6700  001CD4  0E00               	movlw	0
  6701  001CD6  6E1B               	movwf	___wmul@multiplicand+1,c
  6702  001CD8  0E37               	movlw	55
  6703  001CDA  6E1A               	movwf	___wmul@multiplicand,c
  6704  001CDC  ECE7  F01F         	call	___wmul	;wreg free
  6705  001CE0  0E96               	movlw	low _clcd_display_string_details
  6706  001CE2  2418               	addwf	?___wmul,w,c
  6707  001CE4  6ED9               	movwf	fsr2l,c
  6708  001CE6  0E02               	movlw	high _clcd_display_string_details
  6709  001CE8  2019               	addwfc	?___wmul+1,w,c
  6710  001CEA  6EDA               	movwf	fsr2h,c
  6711  001CEC  5042               	movf	_conflict_data_count,w,c
  6712  001CEE  0D02               	mullw	2
  6713  001CF0  0EBB               	movlw	low _conflict_arr
  6714  001CF2  24F3               	addwf	prodl,w,c
  6715  001CF4  6EE1               	movwf	fsr1l,c
  6716  001CF6  0E00               	movlw	high _conflict_arr
  6717  001CF8  20F4               	addwfc	prodh,w,c
  6718  001CFA  6EE2               	movwf	fsr1h,c
  6719  001CFC  CFDE FFE6          	movff	postinc2,postinc1
  6720  001D00  CFDD FFE5          	movff	postdec2,postdec1
  6721  001D04  2A42               	incf	_conflict_data_count,f,c
  6722  001D06                     l7150:
  6723                           
  6724                           ;clcd.c: 159: i++;
  6725  001D06  4A37               	infsnz	conflict_check@i,f,c
  6726  001D08  2A38               	incf	conflict_check@i+1,f,c
  6727  001D0A  D7A7               	goto	l7140
  6728  001D0C                     l7154:
  6729                           
  6730                           ;clcd.c: 162: }
  6731                           ;clcd.c: 163: }
  6732                           ;clcd.c: 164: i++;
  6733  001D0C  4A37               	infsnz	conflict_check@i,f,c
  6734  001D0E  2A38               	incf	conflict_check@i+1,f,c
  6735  001D10                     l7156:
  6736  001D10  504D               	movf	_clcd_config_data+4,w,c
  6737  001D12  6E32               	movwf	??_conflict_check& (0+255),c
  6738  001D14  6A33               	clrf	(??_conflict_check+1)& (0+255),c
  6739  001D16  5032               	movf	??_conflict_check,w,c
  6740  001D18  5C37               	subwf	conflict_check@i,w,c
  6741  001D1A  5038               	movf	conflict_check@i+1,w,c
  6742  001D1C  0A80               	xorlw	128
  6743  001D1E  6E34               	movwf	(??_conflict_check+2)& (0+255),c
  6744  001D20  5033               	movf	??_conflict_check+1,w,c
  6745  001D22  0A80               	xorlw	128
  6746  001D24  5834               	subwfb	(??_conflict_check+2)& (0+255),w,c
  6747  001D26  A0D8               	btfss	status,0,c
  6748  001D28  D6C4               	goto	l7110
  6749                           
  6750                           ;clcd.c: 165: }
  6751                           ;clcd.c: 173: return conflict;
  6752  001D2A  5036               	movf	conflict_check@conflict,w,c
  6753  001D2C  0012               	return	
  6754  001D2E                     __end_of_conflict_check:
  6755                           	opt stack 0
  6756                           tblptru	equ	0xFF8
  6757                           tblptrh	equ	0xFF7
  6758                           tblptrl	equ	0xFF6
  6759                           tablat	equ	0xFF5
  6760                           prodh	equ	0xFF4
  6761                           prodl	equ	0xFF3
  6762                           intcon	equ	0xFF2
  6763                           postinc0	equ	0xFEE
  6764                           wreg	equ	0xFE8
  6765                           indf1	equ	0xFE7
  6766                           postinc1	equ	0xFE6
  6767                           postdec1	equ	0xFE5
  6768                           fsr1h	equ	0xFE2
  6769                           fsr1l	equ	0xFE1
  6770                           indf2	equ	0xFDF
  6771                           postinc2	equ	0xFDE
  6772                           postdec2	equ	0xFDD
  6773                           fsr2h	equ	0xFDA
  6774                           fsr2l	equ	0xFD9
  6775                           status	equ	0xFD8
  6776                           
  6777 ;; *************** function _set_string_data *****************
  6778 ;; Defined at:
  6779 ;;		line 260 in file "clcd.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;  data            2   55[COMRAM] PTR struct .
  6782 ;;		 -> cmd_data(53), 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  j               2    6[BANK1 ] int 
  6785 ;;  conflict_cou    2    3[BANK1 ] int 
  6786 ;;  i               1    5[BANK1 ] unsigned char 
  6787 ;;  uid             1    2[BANK1 ] unsigned char 
  6788 ;;  end_point       1    1[BANK1 ] unsigned char 
  6789 ;;  start_point     1    0[BANK1 ] unsigned char 
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  1    wreg      unsigned char 
  6792 ;; Registers used:
  6793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6799 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6802 ;;      Totals:         6       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6803 ;;Total ram usage:       14 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:    9
  6806 ;; This function calls:
  6807 ;;		___wmul
  6808 ;;		_conflict
  6809 ;;		_copy_display_struct
  6810 ;;		_get_new_uid
  6811 ;;		_memset
  6812 ;;		_printf
  6813 ;; This function is called by:
  6814 ;;		_reply_to_host
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818                           	psect	text15
  6819  0017CE                     __ptext15:
  6820                           	opt stack 0
  6821  0017CE                     _set_string_data:
  6822                           	opt stack 19
  6823                           
  6824                           ;clcd.c: 261: char i = 0;
  6825                           
  6826                           ;incstack = 0
  6827  0017CE  0E00               	movlw	0
  6828  0017D0  0101               	movlb	1	; () banked
  6829  0017D2  6F7D               	movwf	set_string_data@i& (0+255),b
  6830                           
  6831                           ;clcd.c: 262: char uid = 0;
  6832  0017D4  0E00               	movlw	0
  6833  0017D6  0101               	movlb	1	; () banked
  6834  0017D8  6F7A               	movwf	set_string_data@uid& (0+255),b
  6835                           
  6836                           ; BSR set to: 1
  6837                           ;clcd.c: 263: char start_point, end_point;
  6838                           ;clcd.c: 266: start_point = (data->start_row * clcd_config_data.clcd_max_col) + data->st
      +                          art_col;
  6839  0017DA  EE20 F02C          	lfsr	2,44
  6840  0017DE  5038               	movf	set_string_data@data,w,c
  6841  0017E0  26D9               	addwf	fsr2l,f,c
  6842  0017E2  5039               	movf	set_string_data@data+1,w,c
  6843  0017E4  22DA               	addwfc	fsr2h,f,c
  6844  0017E6  50DF               	movf	indf2,w,c
  6845  0017E8  6E3A               	movwf	??_set_string_data& (0+255),c
  6846  0017EA  EE20 F02B          	lfsr	2,43
  6847  0017EE  5038               	movf	set_string_data@data,w,c
  6848  0017F0  26D9               	addwf	fsr2l,f,c
  6849  0017F2  5039               	movf	set_string_data@data+1,w,c
  6850  0017F4  22DA               	addwfc	fsr2h,f,c
  6851  0017F6  50DF               	movf	indf2,w,c
  6852  0017F8  024B               	mulwf	_clcd_config_data+2,c
  6853  0017FA  50F3               	movf	prodl,w,c
  6854  0017FC  243A               	addwf	??_set_string_data,w,c
  6855  0017FE  0101               	movlb	1	; () banked
  6856  001800  6F78               	movwf	set_string_data@start_point& (0+255),b
  6857                           
  6858                           ; BSR set to: 1
  6859                           ;clcd.c: 267: end_point = (data->end_row * clcd_config_data.clcd_max_col) + data->end_co
      +                          l;
  6860  001802  EE20 F02E          	lfsr	2,46
  6861  001806  5038               	movf	set_string_data@data,w,c
  6862  001808  26D9               	addwf	fsr2l,f,c
  6863  00180A  5039               	movf	set_string_data@data+1,w,c
  6864  00180C  22DA               	addwfc	fsr2h,f,c
  6865  00180E  50DF               	movf	indf2,w,c
  6866  001810  6E3A               	movwf	??_set_string_data& (0+255),c
  6867  001812  EE20 F02D          	lfsr	2,45
  6868  001816  5038               	movf	set_string_data@data,w,c
  6869  001818  26D9               	addwf	fsr2l,f,c
  6870  00181A  5039               	movf	set_string_data@data+1,w,c
  6871  00181C  22DA               	addwfc	fsr2h,f,c
  6872  00181E  50DF               	movf	indf2,w,c
  6873  001820  024B               	mulwf	_clcd_config_data+2,c
  6874  001822  50F3               	movf	prodl,w,c
  6875  001824  243A               	addwf	??_set_string_data,w,c
  6876  001826  0101               	movlb	1	; () banked
  6877  001828  6F79               	movwf	set_string_data@end_point& (0+255),b
  6878                           
  6879                           ; BSR set to: 1
  6880                           ;clcd.c: 268: uid = get_new_uid();
  6881  00182A  EC9D  F016         	call	_get_new_uid	;wreg free
  6882  00182E  5024               	movf	?_get_new_uid,w,c
  6883  001830  0101               	movlb	1	; () banked
  6884  001832  6F7A               	movwf	set_string_data@uid& (0+255),b
  6885                           
  6886                           ; BSR set to: 1
  6887                           ;clcd.c: 269: printf("UID = %d, start_pt = %d, end_pt = %d\r\n", uid, start_point, end_p
      +                          oint);
  6888  001834  0EAA               	movlw	low STR_14
  6889  001836  6E1E               	movwf	printf@f,c
  6890  001838  0EFC               	movlw	high STR_14
  6891  00183A  6E1F               	movwf	printf@f+1,c
  6892  00183C  C17A  F020         	movff	set_string_data@uid,?_printf+2
  6893  001840  6A21               	clrf	?_printf+3,c
  6894  001842  C178  F022         	movff	set_string_data@start_point,?_printf+4
  6895  001846  6A23               	clrf	?_printf+5,c
  6896  001848  C179  F024         	movff	set_string_data@end_point,?_printf+6
  6897  00184C  6A25               	clrf	?_printf+7,c
  6898  00184E  EC03  F015         	call	_printf	;wreg free
  6899                           
  6900                           ;clcd.c: 270: if (data->over_write != 1) {
  6901  001852  EE20 F034          	lfsr	2,52
  6902  001856  5038               	movf	set_string_data@data,w,c
  6903  001858  26D9               	addwf	fsr2l,f,c
  6904  00185A  5039               	movf	set_string_data@data+1,w,c
  6905  00185C  22DA               	addwfc	fsr2h,f,c
  6906  00185E  04DE               	decf	postinc2,w,c
  6907  001860  B4D8               	btfsc	status,2,c
  6908  001862  D05F               	goto	l7540
  6909                           
  6910                           ;clcd.c: 271: memset(conflict_arr, -1, sizeof (conflict_arr));
  6911  001864  0EBB               	movlw	low _conflict_arr
  6912  001866  6E24               	movwf	memset@p1,c
  6913  001868  0E00               	movlw	high _conflict_arr
  6914  00186A  6E25               	movwf	memset@p1+1,c
  6915  00186C  0EFF               	movlw	255
  6916  00186E  6E27               	movwf	memset@c+1,c
  6917  001870  6826               	setf	memset@c,c
  6918  001872  0E00               	movlw	0
  6919  001874  6E29               	movwf	memset@n+1,c
  6920  001876  0E28               	movlw	40
  6921  001878  6E28               	movwf	memset@n,c
  6922  00187A  ECBB  F01F         	call	_memset	;wreg free
  6923                           
  6924                           ;clcd.c: 272: conflict_data_count = 0;
  6925  00187E  0E00               	movlw	0
  6926  001880  6E42               	movwf	_conflict_data_count,c
  6927                           
  6928                           ;clcd.c: 273: if (conflict(start_point, end_point) != 1) {
  6929  001882  C179  F030         	movff	set_string_data@end_point,conflict@new_end_point
  6930  001886  0101               	movlb	1	; () banked
  6931  001888  5178               	movf	set_string_data@start_point& (0+255),w,b
  6932  00188A  EC97  F00E         	call	_conflict
  6933  00188E  06E8               	decf	wreg,f,c
  6934  001890  B4D8               	btfsc	status,2,c
  6935  001892  D045               	goto	l7536
  6936                           
  6937                           ;clcd.c: 274: if (data_count < clcd_config_data.clcd_max_display_string) {
  6938  001894  504D               	movf	_clcd_config_data+4,w,c
  6939  001896  5C43               	subwf	_data_count,w,c
  6940  001898  B0D8               	btfsc	status,0,c
  6941  00189A  0012               	return	
  6942                           
  6943                           ;clcd.c: 275: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  6944  00189C  0E00               	movlw	0
  6945  00189E  0101               	movlb	1	; () banked
  6946  0018A0  6F7D               	movwf	set_string_data@i& (0+255),b
  6947  0018A2  D037               	goto	l7534
  6948  0018A4                     l7520:
  6949                           
  6950                           ; BSR set to: 1
  6951                           ;clcd.c: 276: if (clcd_display_string_details[i].uid == 0) {
  6952  0018A4  0101               	movlb	1	; () banked
  6953  0018A6  517D               	movf	set_string_data@i& (0+255),w,b
  6954  0018A8  0D37               	mullw	55
  6955  0018AA  0E96               	movlw	low _clcd_display_string_details
  6956  0018AC  24F3               	addwf	prodl,w,c
  6957  0018AE  6ED9               	movwf	fsr2l,c
  6958  0018B0  0E02               	movlw	high _clcd_display_string_details
  6959  0018B2  20F4               	addwfc	prodh,w,c
  6960  0018B4  6EDA               	movwf	fsr2h,c
  6961  0018B6  50DE               	movf	postinc2,w,c
  6962  0018B8  10DE               	iorwf	postinc2,w,c
  6963  0018BA  A4D8               	btfss	status,2,c
  6964  0018BC  D028               	goto	l7532
  6965                           
  6966                           ; BSR set to: 1
  6967                           ;clcd.c: 277: memset(&clcd_display_string_details[i], 0, sizeof (CLCD_STRING_DISPLAY_DET
      +                          AILS));
  6968  0018BE  0101               	movlb	1	; () banked
  6969  0018C0  517D               	movf	set_string_data@i& (0+255),w,b
  6970  0018C2  0D37               	mullw	55
  6971  0018C4  0E96               	movlw	low _clcd_display_string_details
  6972  0018C6  24F3               	addwf	prodl,w,c
  6973  0018C8  6E24               	movwf	memset@p1,c
  6974  0018CA  0E02               	movlw	high _clcd_display_string_details
  6975  0018CC  20F4               	addwfc	prodh,w,c
  6976  0018CE  6E25               	movwf	memset@p1+1,c
  6977  0018D0  0E00               	movlw	0
  6978  0018D2  6E27               	movwf	memset@c+1,c
  6979  0018D4  0E00               	movlw	0
  6980  0018D6  6E26               	movwf	memset@c,c
  6981  0018D8  0E00               	movlw	0
  6982  0018DA  6E29               	movwf	memset@n+1,c
  6983  0018DC  0E37               	movlw	55
  6984  0018DE  6E28               	movwf	memset@n,c
  6985  0018E0  ECBB  F01F         	call	_memset	;wreg free
  6986                           
  6987                           ;clcd.c: 278: copy_display_struct(&clcd_display_string_details[i], data, uid);
  6988  0018E4  0101               	movlb	1	; () banked
  6989  0018E6  517D               	movf	set_string_data@i& (0+255),w,b
  6990  0018E8  0D37               	mullw	55
  6991  0018EA  0E96               	movlw	low _clcd_display_string_details
  6992  0018EC  24F3               	addwf	prodl,w,c
  6993  0018EE  6E30               	movwf	copy_display_struct@clcd_str_data,c
  6994  0018F0  0E02               	movlw	high _clcd_display_string_details
  6995  0018F2  20F4               	addwfc	prodh,w,c
  6996  0018F4  6E31               	movwf	copy_display_struct@clcd_str_data+1,c
  6997  0018F6  C038  F032         	movff	set_string_data@data,copy_display_struct@data
  6998  0018FA  C039  F033         	movff	set_string_data@data+1,copy_display_struct@data+1
  6999  0018FE  C17A  F034         	movff	set_string_data@uid,copy_display_struct@uid
  7000  001902  EC19  F013         	call	_copy_display_struct	;wreg free
  7001                           
  7002                           ;clcd.c: 279: data_count++;
  7003  001906  2A43               	incf	_data_count,f,c
  7004                           
  7005                           ;clcd.c: 280: return uid;
  7006  001908  0101               	movlb	1	; () banked
  7007  00190A  517A               	movf	set_string_data@uid& (0+255),w,b
  7008                           
  7009                           ; BSR set to: 1
  7010  00190C  0012               	return	
  7011  00190E                     l7532:
  7012                           
  7013                           ; BSR set to: 1
  7014  00190E  0101               	movlb	1	; () banked
  7015  001910  2B7D               	incf	set_string_data@i& (0+255),f,b
  7016  001912                     l7534:
  7017                           
  7018                           ; BSR set to: 1
  7019  001912  504D               	movf	_clcd_config_data+4,w,c
  7020  001914  0101               	movlb	1	; () banked
  7021  001916  5D7D               	subwf	set_string_data@i& (0+255),w,b
  7022  001918  B0D8               	btfsc	status,0,c
  7023  00191A  0012               	return	
  7024  00191C  D7C3               	goto	l7520
  7025  00191E                     l7536:
  7026                           
  7027                           ;clcd.c: 287: return 200;
  7028  00191E  0EC8               	movlw	200
  7029                           
  7030                           ;clcd.c: 288: }
  7031                           ;clcd.c: 289: } else {
  7032  001920  0012               	return	
  7033  001922                     l7540:
  7034                           
  7035                           ;clcd.c: 290: if (conflict_data_count != 0) {
  7036  001922  5042               	movf	_conflict_data_count,w,c
  7037  001924  B4D8               	btfsc	status,2,c
  7038  001926  D0AC               	goto	l7576
  7039                           
  7040                           ;clcd.c: 291: printf("conflict...2\r\n");
  7041  001928  0E62               	movlw	low STR_15
  7042  00192A  6E1E               	movwf	printf@f,c
  7043  00192C  0EFE               	movlw	high STR_15
  7044  00192E  6E1F               	movwf	printf@f+1,c
  7045  001930  EC03  F015         	call	_printf	;wreg free
  7046                           
  7047                           ;clcd.c: 292: int conflict_count = 0, j;
  7048  001934  0E00               	movlw	0
  7049  001936  0101               	movlb	1	; () banked
  7050  001938  6F7C               	movwf	(set_string_data@conflict_count+1)& (0+255),b
  7051  00193A  0E00               	movlw	0
  7052  00193C  6F7B               	movwf	set_string_data@conflict_count& (0+255),b
  7053                           
  7054                           ; BSR set to: 1
  7055                           ;clcd.c: 293: for (conflict_count = 0; conflict_count < conflict_data_count; conflict_co
      +                          unt++) {
  7056  00193E  0E00               	movlw	0
  7057  001940  0101               	movlb	1	; () banked
  7058  001942  6F7C               	movwf	(set_string_data@conflict_count+1)& (0+255),b
  7059  001944  0E00               	movlw	0
  7060  001946  6F7B               	movwf	set_string_data@conflict_count& (0+255),b
  7061  001948  D07B               	goto	l7564
  7062  00194A                     l7548:
  7063                           
  7064                           ; BSR set to: 1
  7065                           ;clcd.c: 294: for (j = 0; j < clcd_config_data.clcd_max_display_string; j++) {
  7066  00194A  0E00               	movlw	0
  7067  00194C  0101               	movlb	1	; () banked
  7068  00194E  6F7F               	movwf	(set_string_data@j+1)& (0+255),b
  7069  001950  0E00               	movlw	0
  7070  001952  6F7E               	movwf	set_string_data@j& (0+255),b
  7071  001954  D063               	goto	l7560
  7072  001956                     l7550:
  7073                           
  7074                           ; BSR set to: 1
  7075                           ;clcd.c: 295: if (clcd_display_string_details[j].uid == conflict_arr[conflict_count]) {
  7076  001956  90D8               	bcf	status,0,c
  7077  001958  0101               	movlb	1	; () banked
  7078  00195A  357B               	rlcf	set_string_data@conflict_count& (0+255),w,b
  7079  00195C  6ED9               	movwf	fsr2l,c
  7080  00195E  0101               	movlb	1	; () banked
  7081  001960  357C               	rlcf	(set_string_data@conflict_count+1)& (0+255),w,b
  7082  001962  6EDA               	movwf	fsr2h,c
  7083  001964  0EBB               	movlw	low _conflict_arr
  7084  001966  26D9               	addwf	fsr2l,f,c
  7085  001968  0E00               	movlw	high _conflict_arr
  7086  00196A  22DA               	addwfc	fsr2h,f,c
  7087  00196C  C17E  F018         	movff	set_string_data@j,___wmul@multiplier
  7088  001970  C17F  F019         	movff	set_string_data@j+1,___wmul@multiplier+1
  7089  001974  0E00               	movlw	0
  7090  001976  6E1B               	movwf	___wmul@multiplicand+1,c
  7091  001978  0E37               	movlw	55
  7092  00197A  6E1A               	movwf	___wmul@multiplicand,c
  7093  00197C  ECE7  F01F         	call	___wmul	;wreg free
  7094  001980  0E96               	movlw	low _clcd_display_string_details
  7095  001982  2418               	addwf	?___wmul,w,c
  7096  001984  6EE1               	movwf	fsr1l,c
  7097  001986  0E02               	movlw	high _clcd_display_string_details
  7098  001988  2019               	addwfc	?___wmul+1,w,c
  7099  00198A  6EE2               	movwf	fsr1h,c
  7100  00198C  50DE               	movf	postinc2,w,c
  7101  00198E  18E6               	xorwf	postinc1,w,c
  7102  001990  E142               	bnz	l7558
  7103  001992  50DE               	movf	postinc2,w,c
  7104  001994  18E6               	xorwf	postinc1,w,c
  7105  001996  A4D8               	btfss	status,2,c
  7106  001998  D03E               	goto	l7558
  7107                           
  7108                           ;clcd.c: 296: printf("%d..j=%d,conflict_count=%d \r\n", clcd_display_string_details[j].u
      +                          id, j, conflict_count);
  7109  00199A  0ED1               	movlw	low STR_16
  7110  00199C  6E1E               	movwf	printf@f,c
  7111  00199E  0EFC               	movlw	high STR_16
  7112  0019A0  6E1F               	movwf	printf@f+1,c
  7113  0019A2  C17E  F018         	movff	set_string_data@j,___wmul@multiplier
  7114  0019A6  C17F  F019         	movff	set_string_data@j+1,___wmul@multiplier+1
  7115  0019AA  0E00               	movlw	0
  7116  0019AC  6E1B               	movwf	___wmul@multiplicand+1,c
  7117  0019AE  0E37               	movlw	55
  7118  0019B0  6E1A               	movwf	___wmul@multiplicand,c
  7119  0019B2  ECE7  F01F         	call	___wmul	;wreg free
  7120  0019B6  0E96               	movlw	low _clcd_display_string_details
  7121  0019B8  2418               	addwf	?___wmul,w,c
  7122  0019BA  6ED9               	movwf	fsr2l,c
  7123  0019BC  0E02               	movlw	high _clcd_display_string_details
  7124  0019BE  2019               	addwfc	?___wmul+1,w,c
  7125  0019C0  6EDA               	movwf	fsr2h,c
  7126  0019C2  CFDE F020          	movff	postinc2,?_printf+2
  7127  0019C6  CFDD F021          	movff	postdec2,?_printf+3
  7128  0019CA  C17E  F022         	movff	set_string_data@j,?_printf+4
  7129  0019CE  C17F  F023         	movff	set_string_data@j+1,?_printf+5
  7130  0019D2  C17B  F024         	movff	set_string_data@conflict_count,?_printf+6
  7131  0019D6  C17C  F025         	movff	set_string_data@conflict_count+1,?_printf+7
  7132  0019DA  EC03  F015         	call	_printf	;wreg free
  7133                           
  7134                           ;clcd.c: 297: memset(&clcd_display_string_details[j], 0, sizeof (CLCD_STRING_DISPLAY_DET
      +                          AILS));
  7135  0019DE  C17E  F018         	movff	set_string_data@j,___wmul@multiplier
  7136  0019E2  C17F  F019         	movff	set_string_data@j+1,___wmul@multiplier+1
  7137  0019E6  0E00               	movlw	0
  7138  0019E8  6E1B               	movwf	___wmul@multiplicand+1,c
  7139  0019EA  0E37               	movlw	55
  7140  0019EC  6E1A               	movwf	___wmul@multiplicand,c
  7141  0019EE  ECE7  F01F         	call	___wmul	;wreg free
  7142  0019F2  0E96               	movlw	low _clcd_display_string_details
  7143  0019F4  2418               	addwf	?___wmul,w,c
  7144  0019F6  6E24               	movwf	memset@p1,c
  7145  0019F8  0E02               	movlw	high _clcd_display_string_details
  7146  0019FA  2019               	addwfc	?___wmul+1,w,c
  7147  0019FC  6E25               	movwf	memset@p1+1,c
  7148  0019FE  0E00               	movlw	0
  7149  001A00  6E27               	movwf	memset@c+1,c
  7150  001A02  0E00               	movlw	0
  7151  001A04  6E26               	movwf	memset@c,c
  7152  001A06  0E00               	movlw	0
  7153  001A08  6E29               	movwf	memset@n+1,c
  7154  001A0A  0E37               	movlw	55
  7155  001A0C  6E28               	movwf	memset@n,c
  7156  001A0E  ECBB  F01F         	call	_memset	;wreg free
  7157                           
  7158                           ;clcd.c: 298: data_count--;
  7159  001A12  0643               	decf	_data_count,f,c
  7160                           
  7161                           ;clcd.c: 299: break;
  7162  001A14  D012               	goto	l7562
  7163  001A16                     l7558:
  7164  001A16  0101               	movlb	1	; () banked
  7165  001A18  4B7E               	infsnz	set_string_data@j& (0+255),f,b
  7166  001A1A  2B7F               	incf	(set_string_data@j+1)& (0+255),f,b
  7167  001A1C                     l7560:
  7168                           
  7169                           ; BSR set to: 1
  7170  001A1C  504D               	movf	_clcd_config_data+4,w,c
  7171  001A1E  6E3A               	movwf	??_set_string_data& (0+255),c
  7172  001A20  6A3B               	clrf	(??_set_string_data+1)& (0+255),c
  7173  001A22  503A               	movf	??_set_string_data,w,c
  7174  001A24  0101               	movlb	1	; () banked
  7175  001A26  5D7E               	subwf	set_string_data@j& (0+255),w,b
  7176  001A28  0101               	movlb	1	; () banked
  7177  001A2A  517F               	movf	(set_string_data@j+1)& (0+255),w,b
  7178  001A2C  0A80               	xorlw	128
  7179  001A2E  6E3C               	movwf	(??_set_string_data+2)& (0+255),c
  7180  001A30  503B               	movf	??_set_string_data+1,w,c
  7181  001A32  0A80               	xorlw	128
  7182  001A34  583C               	subwfb	(??_set_string_data+2)& (0+255),w,c
  7183  001A36  A0D8               	btfss	status,0,c
  7184  001A38  D78E               	goto	l7550
  7185  001A3A                     l7562:
  7186  001A3A  0101               	movlb	1	; () banked
  7187  001A3C  4B7B               	infsnz	set_string_data@conflict_count& (0+255),f,b
  7188  001A3E  2B7C               	incf	(set_string_data@conflict_count+1)& (0+255),f,b
  7189  001A40                     l7564:
  7190                           
  7191                           ; BSR set to: 1
  7192  001A40  5042               	movf	_conflict_data_count,w,c
  7193  001A42  6E3A               	movwf	??_set_string_data& (0+255),c
  7194  001A44  6A3B               	clrf	(??_set_string_data+1)& (0+255),c
  7195  001A46  503A               	movf	??_set_string_data,w,c
  7196  001A48  0101               	movlb	1	; () banked
  7197  001A4A  5D7B               	subwf	set_string_data@conflict_count& (0+255),w,b
  7198  001A4C  0101               	movlb	1	; () banked
  7199  001A4E  517C               	movf	(set_string_data@conflict_count+1)& (0+255),w,b
  7200  001A50  0A80               	xorlw	128
  7201  001A52  6E3C               	movwf	(??_set_string_data+2)& (0+255),c
  7202  001A54  503B               	movf	??_set_string_data+1,w,c
  7203  001A56  0A80               	xorlw	128
  7204  001A58  583C               	subwfb	(??_set_string_data+2)& (0+255),w,c
  7205  001A5A  A0D8               	btfss	status,0,c
  7206  001A5C  D776               	goto	l7548
  7207                           
  7208                           ; BSR set to: 1
  7209                           ;clcd.c: 300: }
  7210                           ;clcd.c: 301: }
  7211                           ;clcd.c: 302: }
  7212                           ;clcd.c: 303: memset(conflict_arr, -1, sizeof (conflict_arr));
  7213                           
  7214                           ; BSR set to: 1
  7215  001A5E  0EBB               	movlw	low _conflict_arr
  7216  001A60  6E24               	movwf	memset@p1,c
  7217  001A62  0E00               	movlw	high _conflict_arr
  7218  001A64  6E25               	movwf	memset@p1+1,c
  7219  001A66  0EFF               	movlw	255
  7220  001A68  6E27               	movwf	memset@c+1,c
  7221  001A6A  6826               	setf	memset@c,c
  7222  001A6C  0E00               	movlw	0
  7223  001A6E  6E29               	movwf	memset@n+1,c
  7224  001A70  0E28               	movlw	40
  7225  001A72  6E28               	movwf	memset@n,c
  7226  001A74  ECBB  F01F         	call	_memset	;wreg free
  7227                           
  7228                           ;clcd.c: 304: conflict_data_count = 0;
  7229  001A78  0E00               	movlw	0
  7230  001A7A  6E42               	movwf	_conflict_data_count,c
  7231                           
  7232                           ;clcd.c: 305: return 202;
  7233  001A7C  0ECA               	movlw	202
  7234                           
  7235                           ;clcd.c: 306: } else {
  7236  001A7E  0012               	return	
  7237  001A80                     l7576:
  7238                           
  7239                           ;clcd.c: 307: if (conflict(start_point, end_point) == 1) {
  7240  001A80  C179  F030         	movff	set_string_data@end_point,conflict@new_end_point
  7241  001A84  0101               	movlb	1	; () banked
  7242  001A86  5178               	movf	set_string_data@start_point& (0+255),w,b
  7243  001A88  EC97  F00E         	call	_conflict
  7244  001A8C  06E8               	decf	wreg,f,c
  7245  001A8E  A4D8               	btfss	status,2,c
  7246  001A90  D002               	goto	l7584
  7247                           
  7248                           ;clcd.c: 309: return 201;
  7249  001A92  0EC9               	movlw	201
  7250                           
  7251                           ;clcd.c: 310: }else{
  7252  001A94  0012               	return	
  7253  001A96                     l7584:
  7254                           
  7255                           ;clcd.c: 311: return 203;
  7256  001A96  0ECB               	movlw	203
  7257  001A98  0012               	return	
  7258  001A9A                     __end_of_set_string_data:
  7259                           	opt stack 0
  7260                           tblptru	equ	0xFF8
  7261                           tblptrh	equ	0xFF7
  7262                           tblptrl	equ	0xFF6
  7263                           tablat	equ	0xFF5
  7264                           prodh	equ	0xFF4
  7265                           prodl	equ	0xFF3
  7266                           intcon	equ	0xFF2
  7267                           postinc0	equ	0xFEE
  7268                           wreg	equ	0xFE8
  7269                           indf1	equ	0xFE7
  7270                           postinc1	equ	0xFE6
  7271                           postdec1	equ	0xFE5
  7272                           fsr1h	equ	0xFE2
  7273                           fsr1l	equ	0xFE1
  7274                           indf2	equ	0xFDF
  7275                           postinc2	equ	0xFDE
  7276                           postdec2	equ	0xFDD
  7277                           fsr2h	equ	0xFDA
  7278                           fsr2l	equ	0xFD9
  7279                           status	equ	0xFD8
  7280                           
  7281 ;; *************** function _get_new_uid *****************
  7282 ;; Defined at:
  7283 ;;		line 230 in file "clcd.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;		None
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;  i               2   42[COMRAM] int 
  7288 ;;  uid             2   40[COMRAM] int 
  7289 ;; Return value:  Size  Location     Type
  7290 ;;                  2   35[COMRAM] int 
  7291 ;; Registers used:
  7292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;Total ram usage:        9 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    7
  7305 ;; This function calls:
  7306 ;;		___awmod
  7307 ;;		___wmul
  7308 ;;		_rand
  7309 ;;		_srand
  7310 ;; This function is called by:
  7311 ;;		_set_string_data
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           	psect	text16
  7316  002D3A                     __ptext16:
  7317                           	opt stack 0
  7318  002D3A                     _get_new_uid:
  7319                           	opt stack 20
  7320                           
  7321                           ;clcd.c: 231: int i = 1;
  7322                           
  7323                           ;incstack = 0
  7324  002D3A  0E00               	movlw	0
  7325  002D3C  6E2C               	movwf	get_new_uid@i+1,c
  7326  002D3E  0E01               	movlw	1
  7327  002D40  6E2B               	movwf	get_new_uid@i,c
  7328                           
  7329                           ;clcd.c: 232: srand(i);
  7330  002D42  C02B  F010         	movff	get_new_uid@i,srand@x
  7331  002D46  C02C  F011         	movff	get_new_uid@i+1,srand@x+1
  7332  002D4A  ECAD  F020         	call	_srand	;wreg free
  7333                           
  7334                           ;clcd.c: 233: int uid = (rand() % 100) + 1;
  7335  002D4E  ECEF  F01C         	call	_rand	;wreg free
  7336  002D52  C01C  F01E         	movff	?_rand,___awmod@dividend
  7337  002D56  C01D  F01F         	movff	?_rand+1,___awmod@dividend+1
  7338  002D5A  0E00               	movlw	0
  7339  002D5C  6E21               	movwf	___awmod@divisor+1,c
  7340  002D5E  0E64               	movlw	100
  7341  002D60  6E20               	movwf	___awmod@divisor,c
  7342  002D62  ECFB  F01B         	call	___awmod	;wreg free
  7343  002D66  D053               	goto	L3
  7344  002D68                     l7244:
  7345                           
  7346                           ;clcd.c: 234: for (i = 0; i < clcd_config_data.clcd_max_display_string;) {
  7347  002D68  0E00               	movlw	0
  7348  002D6A  6E2C               	movwf	get_new_uid@i+1,c
  7349  002D6C  0E00               	movlw	0
  7350  002D6E  6E2B               	movwf	get_new_uid@i,c
  7351  002D70  D055               	goto	l7264
  7352  002D72                     l7246:
  7353                           
  7354                           ;clcd.c: 235: if (clcd_display_string_details[i].uid != 0 && clcd_display_string_details
      +                          [i].uid != uid) {
  7355  002D72  C02B  F018         	movff	get_new_uid@i,___wmul@multiplier
  7356  002D76  C02C  F019         	movff	get_new_uid@i+1,___wmul@multiplier+1
  7357  002D7A  0E00               	movlw	0
  7358  002D7C  6E1B               	movwf	___wmul@multiplicand+1,c
  7359  002D7E  0E37               	movlw	55
  7360  002D80  6E1A               	movwf	___wmul@multiplicand,c
  7361  002D82  ECE7  F01F         	call	___wmul	;wreg free
  7362  002D86  0E96               	movlw	low _clcd_display_string_details
  7363  002D88  2418               	addwf	?___wmul,w,c
  7364  002D8A  6ED9               	movwf	fsr2l,c
  7365  002D8C  0E02               	movlw	high _clcd_display_string_details
  7366  002D8E  2019               	addwfc	?___wmul+1,w,c
  7367  002D90  6EDA               	movwf	fsr2h,c
  7368  002D92  50DE               	movf	postinc2,w,c
  7369  002D94  10DE               	iorwf	postinc2,w,c
  7370  002D96  B4D8               	btfsc	status,2,c
  7371  002D98  D017               	goto	l7254
  7372  002D9A  C02B  F018         	movff	get_new_uid@i,___wmul@multiplier
  7373  002D9E  C02C  F019         	movff	get_new_uid@i+1,___wmul@multiplier+1
  7374  002DA2  0E00               	movlw	0
  7375  002DA4  6E1B               	movwf	___wmul@multiplicand+1,c
  7376  002DA6  0E37               	movlw	55
  7377  002DA8  6E1A               	movwf	___wmul@multiplicand,c
  7378  002DAA  ECE7  F01F         	call	___wmul	;wreg free
  7379  002DAE  0E96               	movlw	low _clcd_display_string_details
  7380  002DB0  2418               	addwf	?___wmul,w,c
  7381  002DB2  6ED9               	movwf	fsr2l,c
  7382  002DB4  0E02               	movlw	high _clcd_display_string_details
  7383  002DB6  2019               	addwfc	?___wmul+1,w,c
  7384  002DB8  6EDA               	movwf	fsr2h,c
  7385  002DBA  5029               	movf	get_new_uid@uid,w,c
  7386  002DBC  18DE               	xorwf	postinc2,w,c
  7387  002DBE  E118               	bnz	l7256
  7388  002DC0  502A               	movf	get_new_uid@uid+1,w,c
  7389  002DC2  18DE               	xorwf	postinc2,w,c
  7390  002DC4  A4D8               	btfss	status,2,c
  7391  002DC6  D014               	goto	l7256
  7392  002DC8                     l7254:
  7393  002DC8  C02B  F018         	movff	get_new_uid@i,___wmul@multiplier
  7394  002DCC  C02C  F019         	movff	get_new_uid@i+1,___wmul@multiplier+1
  7395  002DD0  0E00               	movlw	0
  7396  002DD2  6E1B               	movwf	___wmul@multiplicand+1,c
  7397  002DD4  0E37               	movlw	55
  7398  002DD6  6E1A               	movwf	___wmul@multiplicand,c
  7399  002DD8  ECE7  F01F         	call	___wmul	;wreg free
  7400  002DDC  0E96               	movlw	low _clcd_display_string_details
  7401  002DDE  2418               	addwf	?___wmul,w,c
  7402  002DE0  6ED9               	movwf	fsr2l,c
  7403  002DE2  0E02               	movlw	high _clcd_display_string_details
  7404  002DE4  2019               	addwfc	?___wmul+1,w,c
  7405  002DE6  6EDA               	movwf	fsr2h,c
  7406  002DE8  50DE               	movf	postinc2,w,c
  7407  002DEA  10DE               	iorwf	postinc2,w,c
  7408  002DEC  A4D8               	btfss	status,2,c
  7409  002DEE  D003               	goto	l7260
  7410  002DF0                     l7256:
  7411                           
  7412                           ;clcd.c: 239: i++;
  7413  002DF0  4A2B               	infsnz	get_new_uid@i,f,c
  7414  002DF2  2A2C               	incf	get_new_uid@i+1,f,c
  7415                           
  7416                           ;clcd.c: 241: } else {
  7417                           
  7418                           ;clcd.c: 240: continue;
  7419  002DF4  D013               	goto	l7264
  7420  002DF6                     l7260:
  7421                           
  7422                           ;clcd.c: 242: uid = (rand() % 100) + 1;
  7423  002DF6  ECEF  F01C         	call	_rand	;wreg free
  7424  002DFA  C01C  F01E         	movff	?_rand,___awmod@dividend
  7425  002DFE  C01D  F01F         	movff	?_rand+1,___awmod@dividend+1
  7426  002E02  0E00               	movlw	0
  7427  002E04  6E21               	movwf	___awmod@divisor+1,c
  7428  002E06  0E64               	movlw	100
  7429  002E08  6E20               	movwf	___awmod@divisor,c
  7430  002E0A  ECFB  F01B         	call	___awmod	;wreg free
  7431  002E0E                     L3:
  7432  002E0E  0E01               	movlw	1
  7433  002E10  241E               	addwf	?___awmod,w,c
  7434  002E12  6E29               	movwf	get_new_uid@uid,c
  7435  002E14  0E00               	movlw	0
  7436  002E16  201F               	addwfc	?___awmod+1,w,c
  7437  002E18  6E2A               	movwf	get_new_uid@uid+1,c
  7438  002E1A  D7A6               	goto	l7244
  7439  002E1C                     l7264:
  7440  002E1C  504D               	movf	_clcd_config_data+4,w,c
  7441  002E1E  6E26               	movwf	??_get_new_uid& (0+255),c
  7442  002E20  6A27               	clrf	(??_get_new_uid+1)& (0+255),c
  7443  002E22  5026               	movf	??_get_new_uid,w,c
  7444  002E24  5C2B               	subwf	get_new_uid@i,w,c
  7445  002E26  502C               	movf	get_new_uid@i+1,w,c
  7446  002E28  0A80               	xorlw	128
  7447  002E2A  6E28               	movwf	(??_get_new_uid+2)& (0+255),c
  7448  002E2C  5027               	movf	??_get_new_uid+1,w,c
  7449  002E2E  0A80               	xorlw	128
  7450  002E30  5828               	subwfb	(??_get_new_uid+2)& (0+255),w,c
  7451  002E32  A0D8               	btfss	status,0,c
  7452  002E34  D79E               	goto	l7246
  7453                           
  7454                           ;clcd.c: 245: }
  7455                           ;clcd.c: 246: }
  7456                           ;clcd.c: 247: return uid;
  7457  002E36  C029  F024         	movff	get_new_uid@uid,?_get_new_uid
  7458  002E3A  C02A  F025         	movff	get_new_uid@uid+1,?_get_new_uid+1
  7459  002E3E  0012               	return		;funcret
  7460  002E40                     __end_of_get_new_uid:
  7461                           	opt stack 0
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           prodh	equ	0xFF4
  7467                           prodl	equ	0xFF3
  7468                           intcon	equ	0xFF2
  7469                           postinc0	equ	0xFEE
  7470                           wreg	equ	0xFE8
  7471                           indf1	equ	0xFE7
  7472                           postinc1	equ	0xFE6
  7473                           postdec1	equ	0xFE5
  7474                           fsr1h	equ	0xFE2
  7475                           fsr1l	equ	0xFE1
  7476                           indf2	equ	0xFDF
  7477                           postinc2	equ	0xFDE
  7478                           postdec2	equ	0xFDD
  7479                           fsr2h	equ	0xFDA
  7480                           fsr2l	equ	0xFD9
  7481                           status	equ	0xFD8
  7482                           
  7483 ;; *************** function _srand *****************
  7484 ;; Defined at:
  7485 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\rand.c"
  7486 ;; Parameters:    Size  Location     Type
  7487 ;;  x               2   15[COMRAM] unsigned int 
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;		None
  7490 ;; Return value:  Size  Location     Type
  7491 ;;                  1    wreg      void 
  7492 ;; Registers used:
  7493 ;;		status,2
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7499 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7503 ;;Total ram usage:        2 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; Hardware stack levels required when called:    5
  7506 ;; This function calls:
  7507 ;;		Nothing
  7508 ;; This function is called by:
  7509 ;;		_get_new_uid
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           	psect	text17
  7514  00415A                     __ptext17:
  7515                           	opt stack 0
  7516  00415A                     _srand:
  7517                           	opt stack 21
  7518                           
  7519                           ;incstack = 0
  7520  00415A  C010  F0F9         	movff	srand@x,_randx
  7521  00415E  C011  F0FA         	movff	srand@x+1,_randx+1
  7522  004162  0100               	movlb	0	; () banked
  7523  004164  6BFB               	clrf	(_randx+2)& (0+255),b
  7524  004166  6BFC               	clrf	(_randx+3)& (0+255),b
  7525                           
  7526                           ; BSR set to: 0
  7527  004168  0012               	return		;funcret
  7528  00416A                     __end_of_srand:
  7529                           	opt stack 0
  7530                           tblptru	equ	0xFF8
  7531                           tblptrh	equ	0xFF7
  7532                           tblptrl	equ	0xFF6
  7533                           tablat	equ	0xFF5
  7534                           prodh	equ	0xFF4
  7535                           prodl	equ	0xFF3
  7536                           intcon	equ	0xFF2
  7537                           postinc0	equ	0xFEE
  7538                           wreg	equ	0xFE8
  7539                           indf1	equ	0xFE7
  7540                           postinc1	equ	0xFE6
  7541                           postdec1	equ	0xFE5
  7542                           fsr1h	equ	0xFE2
  7543                           fsr1l	equ	0xFE1
  7544                           indf2	equ	0xFDF
  7545                           postinc2	equ	0xFDE
  7546                           postdec2	equ	0xFDD
  7547                           fsr2h	equ	0xFDA
  7548                           fsr2l	equ	0xFD9
  7549                           status	equ	0xFD8
  7550                           
  7551 ;; *************** function _rand *****************
  7552 ;; Defined at:
  7553 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\rand.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;		None
  7556 ;; Auto vars:     Size  Location     Type
  7557 ;;		None
  7558 ;; Return value:  Size  Location     Type
  7559 ;;                  2   27[COMRAM] int 
  7560 ;; Registers used:
  7561 ;;		wreg, status,2, status,0, cstack
  7562 ;; Tracked objects:
  7563 ;;		On entry : 0/0
  7564 ;;		On exit  : 0/0
  7565 ;;		Unchanged: 0/0
  7566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7567 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7570 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7571 ;;Total ram usage:        2 bytes
  7572 ;; Hardware stack levels used:    1
  7573 ;; Hardware stack levels required when called:    6
  7574 ;; This function calls:
  7575 ;;		___lmul
  7576 ;; This function is called by:
  7577 ;;		_get_new_uid
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           	psect	text18
  7582  0039DE                     __ptext18:
  7583                           	opt stack 0
  7584  0039DE                     _rand:
  7585                           	opt stack 20
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;incstack = 0
  7589  0039DE  C0F9  F010         	movff	_randx,___lmul@multiplier
  7590  0039E2  C0FA  F011         	movff	_randx+1,___lmul@multiplier+1
  7591  0039E6  C0FB  F012         	movff	_randx+2,___lmul@multiplier+2
  7592  0039EA  C0FC  F013         	movff	_randx+3,___lmul@multiplier+3
  7593  0039EE  0E6D               	movlw	109
  7594  0039F0  6E14               	movwf	___lmul@multiplicand,c
  7595  0039F2  0E4E               	movlw	78
  7596  0039F4  6E15               	movwf	___lmul@multiplicand+1,c
  7597  0039F6  0EC6               	movlw	198
  7598  0039F8  6E16               	movwf	___lmul@multiplicand+2,c
  7599  0039FA  0E41               	movlw	65
  7600  0039FC  6E17               	movwf	___lmul@multiplicand+3,c
  7601  0039FE  EC1B  F01D         	call	___lmul	;wreg free
  7602  003A02  C010  F0F9         	movff	?___lmul,_randx
  7603  003A06  C011  F0FA         	movff	?___lmul+1,_randx+1
  7604  003A0A  C012  F0FB         	movff	?___lmul+2,_randx+2
  7605  003A0E  C013  F0FC         	movff	?___lmul+3,_randx+3
  7606  003A12  0E39               	movlw	57
  7607  003A14  0100               	movlb	0	; () banked
  7608  003A16  27F9               	addwf	_randx& (0+255),f,b
  7609  003A18  0E30               	movlw	48
  7610  003A1A  23FA               	addwfc	(_randx+1)& (0+255),f,b
  7611  003A1C  0E00               	movlw	0
  7612  003A1E  23FB               	addwfc	(_randx+2)& (0+255),f,b
  7613  003A20  0E00               	movlw	0
  7614  003A22  23FC               	addwfc	(_randx+3)& (0+255),f,b
  7615                           
  7616                           ; BSR set to: 0
  7617  003A24  0EFF               	movlw	255
  7618  003A26  0100               	movlb	0	; () banked
  7619  003A28  15FB               	andwf	(_randx+2)& (0+255),w,b
  7620  003A2A  6E1C               	movwf	?_rand,c
  7621  003A2C  0E7F               	movlw	127
  7622  003A2E  0100               	movlb	0	; () banked
  7623  003A30  15FC               	andwf	(_randx+3)& (0+255),w,b
  7624  003A32  6E1D               	movwf	?_rand+1,c
  7625  003A34  0012               	return	
  7626  003A36                     __end_of_rand:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           intcon	equ	0xFF2
  7635                           postinc0	equ	0xFEE
  7636                           wreg	equ	0xFE8
  7637                           indf1	equ	0xFE7
  7638                           postinc1	equ	0xFE6
  7639                           postdec1	equ	0xFE5
  7640                           fsr1h	equ	0xFE2
  7641                           fsr1l	equ	0xFE1
  7642                           indf2	equ	0xFDF
  7643                           postinc2	equ	0xFDE
  7644                           postdec2	equ	0xFDD
  7645                           fsr2h	equ	0xFDA
  7646                           fsr2l	equ	0xFD9
  7647                           status	equ	0xFD8
  7648                           
  7649 ;; *************** function ___lmul *****************
  7650 ;; Defined at:
  7651 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul32.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  multiplier      4   15[COMRAM] unsigned long 
  7654 ;;  multiplicand    4   19[COMRAM] unsigned long 
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;  product         4   23[COMRAM] unsigned long 
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  4   15[COMRAM] unsigned long 
  7659 ;; Registers used:
  7660 ;;		wreg, status,2, status,0
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7666 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7669 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7670 ;;Total ram usage:       12 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    5
  7673 ;; This function calls:
  7674 ;;		Nothing
  7675 ;; This function is called by:
  7676 ;;		_rand
  7677 ;; This function uses a non-reentrant model
  7678 ;;
  7679                           
  7680                           	psect	text19
  7681  003A36                     __ptext19:
  7682                           	opt stack 0
  7683  003A36                     ___lmul:
  7684                           	opt stack 20
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;incstack = 0
  7688  003A36  0E00               	movlw	0
  7689  003A38  6E18               	movwf	___lmul@product,c
  7690  003A3A  0E00               	movlw	0
  7691  003A3C  6E19               	movwf	___lmul@product+1,c
  7692  003A3E  0E00               	movlw	0
  7693  003A40  6E1A               	movwf	___lmul@product+2,c
  7694  003A42  0E00               	movlw	0
  7695  003A44  6E1B               	movwf	___lmul@product+3,c
  7696  003A46                     l6804:
  7697  003A46  A010               	btfss	___lmul@multiplier,0,c
  7698  003A48  D008               	goto	l6808
  7699  003A4A  5014               	movf	___lmul@multiplicand,w,c
  7700  003A4C  2618               	addwf	___lmul@product,f,c
  7701  003A4E  5015               	movf	___lmul@multiplicand+1,w,c
  7702  003A50  2219               	addwfc	___lmul@product+1,f,c
  7703  003A52  5016               	movf	___lmul@multiplicand+2,w,c
  7704  003A54  221A               	addwfc	___lmul@product+2,f,c
  7705  003A56  5017               	movf	___lmul@multiplicand+3,w,c
  7706  003A58  221B               	addwfc	___lmul@product+3,f,c
  7707  003A5A                     l6808:
  7708  003A5A  90D8               	bcf	status,0,c
  7709  003A5C  3614               	rlcf	___lmul@multiplicand,f,c
  7710  003A5E  3615               	rlcf	___lmul@multiplicand+1,f,c
  7711  003A60  3616               	rlcf	___lmul@multiplicand+2,f,c
  7712  003A62  3617               	rlcf	___lmul@multiplicand+3,f,c
  7713  003A64  90D8               	bcf	status,0,c
  7714  003A66  3213               	rrcf	___lmul@multiplier+3,f,c
  7715  003A68  3212               	rrcf	___lmul@multiplier+2,f,c
  7716  003A6A  3211               	rrcf	___lmul@multiplier+1,f,c
  7717  003A6C  3210               	rrcf	___lmul@multiplier,f,c
  7718  003A6E  5010               	movf	___lmul@multiplier,w,c
  7719  003A70  1011               	iorwf	___lmul@multiplier+1,w,c
  7720  003A72  1012               	iorwf	___lmul@multiplier+2,w,c
  7721  003A74  1013               	iorwf	___lmul@multiplier+3,w,c
  7722  003A76  A4D8               	btfss	status,2,c
  7723  003A78  D7E6               	goto	l6804
  7724  003A7A  C018  F010         	movff	___lmul@product,?___lmul
  7725  003A7E  C019  F011         	movff	___lmul@product+1,?___lmul+1
  7726  003A82  C01A  F012         	movff	___lmul@product+2,?___lmul+2
  7727  003A86  C01B  F013         	movff	___lmul@product+3,?___lmul+3
  7728  003A8A  0012               	return		;funcret
  7729  003A8C                     __end_of___lmul:
  7730                           	opt stack 0
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           prodh	equ	0xFF4
  7736                           prodl	equ	0xFF3
  7737                           intcon	equ	0xFF2
  7738                           postinc0	equ	0xFEE
  7739                           wreg	equ	0xFE8
  7740                           indf1	equ	0xFE7
  7741                           postinc1	equ	0xFE6
  7742                           postdec1	equ	0xFE5
  7743                           fsr1h	equ	0xFE2
  7744                           fsr1l	equ	0xFE1
  7745                           indf2	equ	0xFDF
  7746                           postinc2	equ	0xFDE
  7747                           postdec2	equ	0xFDD
  7748                           fsr2h	equ	0xFDA
  7749                           fsr2l	equ	0xFD9
  7750                           status	equ	0xFD8
  7751                           
  7752 ;; *************** function ___awmod *****************
  7753 ;; Defined at:
  7754 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  dividend        2   29[COMRAM] int 
  7757 ;;  divisor         2   31[COMRAM] int 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  sign            1   34[COMRAM] unsigned char 
  7760 ;;  counter         1   33[COMRAM] unsigned char 
  7761 ;; Return value:  Size  Location     Type
  7762 ;;                  2   29[COMRAM] int 
  7763 ;; Registers used:
  7764 ;;		wreg, status,2, status,0
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7770 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;Total ram usage:        6 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    5
  7777 ;; This function calls:
  7778 ;;		Nothing
  7779 ;; This function is called by:
  7780 ;;		_get_new_uid
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           	psect	text20
  7785  0037F6                     __ptext20:
  7786                           	opt stack 0
  7787  0037F6                     ___awmod:
  7788                           	opt stack 21
  7789                           
  7790                           ;incstack = 0
  7791  0037F6  0E00               	movlw	0
  7792  0037F8  6E23               	movwf	___awmod@sign,c
  7793  0037FA  AE1F               	btfss	___awmod@dividend+1,7,c
  7794  0037FC  D006               	goto	l7008
  7795  0037FE  6C1E               	negf	___awmod@dividend,c
  7796  003800  1E1F               	comf	___awmod@dividend+1,f,c
  7797  003802  B0D8               	btfsc	status,0,c
  7798  003804  2A1F               	incf	___awmod@dividend+1,f,c
  7799  003806  0E01               	movlw	1
  7800  003808  6E23               	movwf	___awmod@sign,c
  7801  00380A                     l7008:
  7802  00380A  AE21               	btfss	___awmod@divisor+1,7,c
  7803  00380C  D004               	goto	l7012
  7804  00380E  6C20               	negf	___awmod@divisor,c
  7805  003810  1E21               	comf	___awmod@divisor+1,f,c
  7806  003812  B0D8               	btfsc	status,0,c
  7807  003814  2A21               	incf	___awmod@divisor+1,f,c
  7808  003816                     l7012:
  7809  003816  5020               	movf	___awmod@divisor,w,c
  7810  003818  1021               	iorwf	___awmod@divisor+1,w,c
  7811  00381A  B4D8               	btfsc	status,2,c
  7812  00381C  D018               	goto	l7028
  7813  00381E  0E01               	movlw	1
  7814  003820  6E22               	movwf	___awmod@counter,c
  7815  003822  D004               	goto	l7018
  7816  003824                     l7016:
  7817  003824  90D8               	bcf	status,0,c
  7818  003826  3620               	rlcf	___awmod@divisor,f,c
  7819  003828  3621               	rlcf	___awmod@divisor+1,f,c
  7820  00382A  2A22               	incf	___awmod@counter,f,c
  7821  00382C                     l7018:
  7822  00382C  AE21               	btfss	___awmod@divisor+1,7,c
  7823  00382E  D7FA               	goto	l7016
  7824  003830                     l7020:
  7825  003830  5020               	movf	___awmod@divisor,w,c
  7826  003832  5C1E               	subwf	___awmod@dividend,w,c
  7827  003834  5021               	movf	___awmod@divisor+1,w,c
  7828  003836  581F               	subwfb	___awmod@dividend+1,w,c
  7829  003838  A0D8               	btfss	status,0,c
  7830  00383A  D004               	goto	l7024
  7831  00383C  5020               	movf	___awmod@divisor,w,c
  7832  00383E  5E1E               	subwf	___awmod@dividend,f,c
  7833  003840  5021               	movf	___awmod@divisor+1,w,c
  7834  003842  5A1F               	subwfb	___awmod@dividend+1,f,c
  7835  003844                     l7024:
  7836  003844  90D8               	bcf	status,0,c
  7837  003846  3221               	rrcf	___awmod@divisor+1,f,c
  7838  003848  3220               	rrcf	___awmod@divisor,f,c
  7839  00384A  2E22               	decfsz	___awmod@counter,f,c
  7840  00384C  D7F1               	goto	l7020
  7841  00384E                     l7028:
  7842  00384E  5023               	movf	___awmod@sign,w,c
  7843  003850  B4D8               	btfsc	status,2,c
  7844  003852  D004               	goto	l7032
  7845  003854  6C1E               	negf	___awmod@dividend,c
  7846  003856  1E1F               	comf	___awmod@dividend+1,f,c
  7847  003858  B0D8               	btfsc	status,0,c
  7848  00385A  2A1F               	incf	___awmod@dividend+1,f,c
  7849  00385C                     l7032:
  7850  00385C  C01E  F01E         	movff	___awmod@dividend,?___awmod
  7851  003860  C01F  F01F         	movff	___awmod@dividend+1,?___awmod+1
  7852  003864  0012               	return	
  7853  003866                     __end_of___awmod:
  7854                           	opt stack 0
  7855                           tblptru	equ	0xFF8
  7856                           tblptrh	equ	0xFF7
  7857                           tblptrl	equ	0xFF6
  7858                           tablat	equ	0xFF5
  7859                           prodh	equ	0xFF4
  7860                           prodl	equ	0xFF3
  7861                           intcon	equ	0xFF2
  7862                           postinc0	equ	0xFEE
  7863                           wreg	equ	0xFE8
  7864                           indf1	equ	0xFE7
  7865                           postinc1	equ	0xFE6
  7866                           postdec1	equ	0xFE5
  7867                           fsr1h	equ	0xFE2
  7868                           fsr1l	equ	0xFE1
  7869                           indf2	equ	0xFDF
  7870                           postinc2	equ	0xFDE
  7871                           postdec2	equ	0xFDD
  7872                           fsr2h	equ	0xFDA
  7873                           fsr2l	equ	0xFD9
  7874                           status	equ	0xFD8
  7875                           
  7876 ;; *************** function _copy_display_struct *****************
  7877 ;; Defined at:
  7878 ;;		line 215 in file "clcd.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  clcd_str_dat    2   47[COMRAM] PTR struct .
  7881 ;;		 -> clcd_display_string_details(1100), 
  7882 ;;  data            2   49[COMRAM] PTR struct .
  7883 ;;		 -> cmd_data(53), 
  7884 ;;  uid             1   51[COMRAM] unsigned char 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;		None
  7887 ;; Return value:  Size  Location     Type
  7888 ;;                  1    wreg      void 
  7889 ;; Registers used:
  7890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7896 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7898 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7899 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;Total ram usage:        7 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:    8
  7903 ;; This function calls:
  7904 ;;		_printf
  7905 ;;		_strcpy
  7906 ;;		_strlen
  7907 ;; This function is called by:
  7908 ;;		_set_string_data
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text21
  7913  002632                     __ptext21:
  7914                           	opt stack 0
  7915  002632                     _copy_display_struct:
  7916                           	opt stack 19
  7917                           
  7918                           ;clcd.c: 216: clcd_str_data->uid = uid;
  7919                           
  7920                           ;incstack = 0
  7921  002632  5034               	movf	copy_display_struct@uid,w,c
  7922  002634  6E35               	movwf	??_copy_display_struct& (0+255),c
  7923  002636  6A36               	clrf	(??_copy_display_struct+1)& (0+255),c
  7924  002638  C030  FFD9         	movff	copy_display_struct@clcd_str_data,fsr2l
  7925  00263C  C031  FFDA         	movff	copy_display_struct@clcd_str_data+1,fsr2h
  7926  002640  C035  FFDE         	movff	??_copy_display_struct,postinc2
  7927  002644  C036  FFDD         	movff	??_copy_display_struct+1,postdec2
  7928                           
  7929                           ;clcd.c: 217: strcpy(clcd_str_data->string, data->data);
  7930  002648  0E02               	movlw	2
  7931  00264A  2430               	addwf	copy_display_struct@clcd_str_data,w,c
  7932  00264C  6E10               	movwf	strcpy@to,c
  7933  00264E  0E00               	movlw	0
  7934  002650  2031               	addwfc	copy_display_struct@clcd_str_data+1,w,c
  7935  002652  6E11               	movwf	strcpy@to+1,c
  7936  002654  0E02               	movlw	2
  7937  002656  2432               	addwf	copy_display_struct@data,w,c
  7938  002658  6E12               	movwf	strcpy@from,c
  7939  00265A  0E00               	movlw	0
  7940  00265C  2033               	addwfc	copy_display_struct@data+1,w,c
  7941  00265E  6E13               	movwf	strcpy@from+1,c
  7942  002660  ECA4  F01F         	call	_strcpy	;wreg free
  7943                           
  7944                           ;clcd.c: 218: clcd_str_data->strlen = strlen(clcd_str_data->string);
  7945  002664  0E02               	movlw	2
  7946  002666  2430               	addwf	copy_display_struct@clcd_str_data,w,c
  7947  002668  6E1E               	movwf	strlen@s,c
  7948  00266A  0E00               	movlw	0
  7949  00266C  2031               	addwfc	copy_display_struct@clcd_str_data+1,w,c
  7950  00266E  6E1F               	movwf	strlen@s+1,c
  7951  002670  ECED  F01E         	call	_strlen	;wreg free
  7952  002674  EE20 F02A          	lfsr	2,42
  7953  002678  5030               	movf	copy_display_struct@clcd_str_data,w,c
  7954  00267A  26D9               	addwf	fsr2l,f,c
  7955  00267C  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  7956  00267E  22DA               	addwfc	fsr2h,f,c
  7957  002680  50DF               	movf	indf2,w,c
  7958  002682  181E               	xorwf	?_strlen,w,c
  7959  002684  0B80               	andlw	-128
  7960  002686  181E               	xorwf	?_strlen,w,c
  7961  002688  6EDF               	movwf	indf2,c
  7962                           
  7963                           ;clcd.c: 219: clcd_str_data->start_row = data->start_row;
  7964  00268A  EE20 F02B          	lfsr	2,43
  7965  00268E  5032               	movf	copy_display_struct@data,w,c
  7966  002690  26D9               	addwf	fsr2l,f,c
  7967  002692  5033               	movf	copy_display_struct@data+1,w,c
  7968  002694  22DA               	addwfc	fsr2h,f,c
  7969  002696  50DF               	movf	indf2,w,c
  7970  002698  6E35               	movwf	??_copy_display_struct& (0+255),c
  7971  00269A  EE20 F02B          	lfsr	2,43
  7972  00269E  5030               	movf	copy_display_struct@clcd_str_data,w,c
  7973  0026A0  26D9               	addwf	fsr2l,f,c
  7974  0026A2  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  7975  0026A4  22DA               	addwfc	fsr2h,f,c
  7976  0026A6  50DF               	movf	indf2,w,c
  7977  0026A8  1835               	xorwf	??_copy_display_struct,w,c
  7978  0026AA  0B80               	andlw	-128
  7979  0026AC  1835               	xorwf	??_copy_display_struct,w,c
  7980  0026AE  6EDF               	movwf	indf2,c
  7981                           
  7982                           ;clcd.c: 220: clcd_str_data->start_col = data->start_col;
  7983  0026B0  EE20 F02C          	lfsr	2,44
  7984  0026B4  5032               	movf	copy_display_struct@data,w,c
  7985  0026B6  26D9               	addwf	fsr2l,f,c
  7986  0026B8  5033               	movf	copy_display_struct@data+1,w,c
  7987  0026BA  22DA               	addwfc	fsr2h,f,c
  7988  0026BC  50DF               	movf	indf2,w,c
  7989  0026BE  6E35               	movwf	??_copy_display_struct& (0+255),c
  7990  0026C0  EE20 F02C          	lfsr	2,44
  7991  0026C4  5030               	movf	copy_display_struct@clcd_str_data,w,c
  7992  0026C6  26D9               	addwf	fsr2l,f,c
  7993  0026C8  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  7994  0026CA  22DA               	addwfc	fsr2h,f,c
  7995  0026CC  50DF               	movf	indf2,w,c
  7996  0026CE  1835               	xorwf	??_copy_display_struct,w,c
  7997  0026D0  0B80               	andlw	-128
  7998  0026D2  1835               	xorwf	??_copy_display_struct,w,c
  7999  0026D4  6EDF               	movwf	indf2,c
  8000                           
  8001                           ;clcd.c: 221: clcd_str_data->end_row = data->end_row;
  8002  0026D6  EE20 F02D          	lfsr	2,45
  8003  0026DA  5032               	movf	copy_display_struct@data,w,c
  8004  0026DC  26D9               	addwf	fsr2l,f,c
  8005  0026DE  5033               	movf	copy_display_struct@data+1,w,c
  8006  0026E0  22DA               	addwfc	fsr2h,f,c
  8007  0026E2  50DF               	movf	indf2,w,c
  8008  0026E4  6E35               	movwf	??_copy_display_struct& (0+255),c
  8009  0026E6  EE20 F02E          	lfsr	2,46
  8010  0026EA  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8011  0026EC  26D9               	addwf	fsr2l,f,c
  8012  0026EE  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8013  0026F0  22DA               	addwfc	fsr2h,f,c
  8014  0026F2  50DF               	movf	indf2,w,c
  8015  0026F4  1835               	xorwf	??_copy_display_struct,w,c
  8016  0026F6  0B80               	andlw	-128
  8017  0026F8  1835               	xorwf	??_copy_display_struct,w,c
  8018  0026FA  6EDF               	movwf	indf2,c
  8019                           
  8020                           ;clcd.c: 222: clcd_str_data->end_col = data->end_col;
  8021  0026FC  EE20 F02E          	lfsr	2,46
  8022  002700  5032               	movf	copy_display_struct@data,w,c
  8023  002702  26D9               	addwf	fsr2l,f,c
  8024  002704  5033               	movf	copy_display_struct@data+1,w,c
  8025  002706  22DA               	addwfc	fsr2h,f,c
  8026  002708  50DF               	movf	indf2,w,c
  8027  00270A  6E35               	movwf	??_copy_display_struct& (0+255),c
  8028  00270C  EE20 F02F          	lfsr	2,47
  8029  002710  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8030  002712  26D9               	addwf	fsr2l,f,c
  8031  002714  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8032  002716  22DA               	addwfc	fsr2h,f,c
  8033  002718  50DF               	movf	indf2,w,c
  8034  00271A  1835               	xorwf	??_copy_display_struct,w,c
  8035  00271C  0B80               	andlw	-128
  8036  00271E  1835               	xorwf	??_copy_display_struct,w,c
  8037  002720  6EDF               	movwf	indf2,c
  8038                           
  8039                           ;clcd.c: 223: clcd_str_data->start_point = (clcd_str_data->start_row * clcd_config_data.
      +                          clcd_max_col) + clcd_str_data->start_col;
  8040  002722  EE20 F02C          	lfsr	2,44
  8041  002726  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8042  002728  26D9               	addwf	fsr2l,f,c
  8043  00272A  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8044  00272C  22DA               	addwfc	fsr2h,f,c
  8045  00272E  50DF               	movf	indf2,w,c
  8046  002730  0B7F               	andlw	127
  8047  002732  6E35               	movwf	??_copy_display_struct& (0+255),c
  8048  002734  EE20 F02B          	lfsr	2,43
  8049  002738  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8050  00273A  26D9               	addwf	fsr2l,f,c
  8051  00273C  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8052  00273E  22DA               	addwfc	fsr2h,f,c
  8053  002740  50DF               	movf	indf2,w,c
  8054  002742  0B7F               	andlw	127
  8055  002744  024B               	mulwf	_clcd_config_data+2,c
  8056  002746  50F3               	movf	prodl,w,c
  8057  002748  2435               	addwf	??_copy_display_struct,w,c
  8058  00274A  6E36               	movwf	(??_copy_display_struct+1)& (0+255),c
  8059  00274C  EE20 F02D          	lfsr	2,45
  8060  002750  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8061  002752  26D9               	addwf	fsr2l,f,c
  8062  002754  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8063  002756  22DA               	addwfc	fsr2h,f,c
  8064  002758  50DF               	movf	indf2,w,c
  8065  00275A  1836               	xorwf	??_copy_display_struct+1,w,c
  8066  00275C  0B80               	andlw	-128
  8067  00275E  1836               	xorwf	??_copy_display_struct+1,w,c
  8068  002760  6EDF               	movwf	indf2,c
  8069                           
  8070                           ;clcd.c: 224: clcd_str_data->end_point = (clcd_str_data->end_row * clcd_config_data.clcd
      +                          _max_col) + clcd_str_data->end_col;
  8071  002762  EE20 F02F          	lfsr	2,47
  8072  002766  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8073  002768  26D9               	addwf	fsr2l,f,c
  8074  00276A  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8075  00276C  22DA               	addwfc	fsr2h,f,c
  8076  00276E  50DF               	movf	indf2,w,c
  8077  002770  0B7F               	andlw	127
  8078  002772  6E35               	movwf	??_copy_display_struct& (0+255),c
  8079  002774  EE20 F02E          	lfsr	2,46
  8080  002778  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8081  00277A  26D9               	addwf	fsr2l,f,c
  8082  00277C  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8083  00277E  22DA               	addwfc	fsr2h,f,c
  8084  002780  50DF               	movf	indf2,w,c
  8085  002782  0B7F               	andlw	127
  8086  002784  024B               	mulwf	_clcd_config_data+2,c
  8087  002786  50F3               	movf	prodl,w,c
  8088  002788  2435               	addwf	??_copy_display_struct,w,c
  8089  00278A  6E36               	movwf	(??_copy_display_struct+1)& (0+255),c
  8090  00278C  EE20 F030          	lfsr	2,48
  8091  002790  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8092  002792  26D9               	addwf	fsr2l,f,c
  8093  002794  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8094  002796  22DA               	addwfc	fsr2h,f,c
  8095  002798  50DF               	movf	indf2,w,c
  8096  00279A  1836               	xorwf	??_copy_display_struct+1,w,c
  8097  00279C  0B80               	andlw	-128
  8098  00279E  1836               	xorwf	??_copy_display_struct+1,w,c
  8099  0027A0  6EDF               	movwf	indf2,c
  8100                           
  8101                           ;clcd.c: 225: clcd_str_data->direction = data->scroll;
  8102  0027A2  EE20 F030          	lfsr	2,48
  8103  0027A6  5032               	movf	copy_display_struct@data,w,c
  8104  0027A8  26D9               	addwf	fsr2l,f,c
  8105  0027AA  5033               	movf	copy_display_struct@data+1,w,c
  8106  0027AC  22DA               	addwfc	fsr2h,f,c
  8107  0027AE  50DF               	movf	indf2,w,c
  8108  0027B0  6E35               	movwf	??_copy_display_struct& (0+255),c
  8109  0027B2  EE20 F031          	lfsr	2,49
  8110  0027B6  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8111  0027B8  26D9               	addwf	fsr2l,f,c
  8112  0027BA  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8113  0027BC  22DA               	addwfc	fsr2h,f,c
  8114  0027BE  50DF               	movf	indf2,w,c
  8115  0027C0  1835               	xorwf	??_copy_display_struct,w,c
  8116  0027C2  0BF8               	andlw	-8
  8117  0027C4  1835               	xorwf	??_copy_display_struct,w,c
  8118  0027C6  6EDF               	movwf	indf2,c
  8119                           
  8120                           ;clcd.c: 226: clcd_str_data->display_char_count = (clcd_str_data->end_point - clcd_str_d
      +                          ata->start_point) + 1;
  8121  0027C8  EE20 F032          	lfsr	2,50
  8122  0027CC  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8123  0027CE  26D9               	addwf	fsr2l,f,c
  8124  0027D0  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8125  0027D2  22DA               	addwfc	fsr2h,f,c
  8126  0027D4  EE10 F030          	lfsr	1,48
  8127  0027D8  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8128  0027DA  26E1               	addwf	fsr1l,f,c
  8129  0027DC  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8130  0027DE  22E2               	addwfc	fsr1h,f,c
  8131  0027E0  50E7               	movf	indf1,w,c
  8132  0027E2  0B7F               	andlw	127
  8133  0027E4  6E35               	movwf	??_copy_display_struct& (0+255),c
  8134  0027E6  EE10 F02D          	lfsr	1,45
  8135  0027EA  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8136  0027EC  26E1               	addwf	fsr1l,f,c
  8137  0027EE  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8138  0027F0  22E2               	addwfc	fsr1h,f,c
  8139  0027F2  50E7               	movf	indf1,w,c
  8140  0027F4  0B7F               	andlw	127
  8141  0027F6  0800               	sublw	0
  8142  0027F8  2435               	addwf	??_copy_display_struct,w,c
  8143  0027FA  6E36               	movwf	(??_copy_display_struct+1)& (0+255),c
  8144  0027FC  2836               	incf	??_copy_display_struct+1,w,c
  8145  0027FE  6EDF               	movwf	indf2,c
  8146                           
  8147                           ;clcd.c: 227: printf("display_char_count = %d\r\n", clcd_str_data->display_char_count);
  8148  002800  0E25               	movlw	low STR_6
  8149  002802  6E1E               	movwf	printf@f,c
  8150  002804  0EFD               	movlw	high STR_6
  8151  002806  6E1F               	movwf	printf@f+1,c
  8152  002808  EE20 F032          	lfsr	2,50
  8153  00280C  5030               	movf	copy_display_struct@clcd_str_data,w,c
  8154  00280E  26D9               	addwf	fsr2l,f,c
  8155  002810  5031               	movf	copy_display_struct@clcd_str_data+1,w,c
  8156  002812  22DA               	addwfc	fsr2h,f,c
  8157  002814  50DF               	movf	indf2,w,c
  8158  002816  6E35               	movwf	??_copy_display_struct& (0+255),c
  8159  002818  5035               	movf	??_copy_display_struct,w,c
  8160  00281A  6E20               	movwf	?_printf+2,c
  8161  00281C  6A21               	clrf	?_printf+3,c
  8162  00281E  EC03  F015         	call	_printf	;wreg free
  8163  002822  0012               	return		;funcret
  8164  002824                     __end_of_copy_display_struct:
  8165                           	opt stack 0
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           prodh	equ	0xFF4
  8171                           prodl	equ	0xFF3
  8172                           intcon	equ	0xFF2
  8173                           postinc0	equ	0xFEE
  8174                           wreg	equ	0xFE8
  8175                           indf1	equ	0xFE7
  8176                           postinc1	equ	0xFE6
  8177                           postdec1	equ	0xFE5
  8178                           fsr1h	equ	0xFE2
  8179                           fsr1l	equ	0xFE1
  8180                           indf2	equ	0xFDF
  8181                           postinc2	equ	0xFDE
  8182                           postdec2	equ	0xFDD
  8183                           fsr2h	equ	0xFDA
  8184                           fsr2l	equ	0xFD9
  8185                           status	equ	0xFD8
  8186                           
  8187 ;; *************** function _conflict *****************
  8188 ;; Defined at:
  8189 ;;		line 176 in file "clcd.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;  new_start_po    1    wreg     unsigned char 
  8192 ;;  new_end_poin    1   47[COMRAM] unsigned char 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;  new_start_po    1   52[COMRAM] unsigned char 
  8195 ;;  i               2   53[COMRAM] int 
  8196 ;;  conflict        1   51[COMRAM] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      unsigned char 
  8199 ;; Registers used:
  8200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8206 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;Total ram usage:        8 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    8
  8213 ;; This function calls:
  8214 ;;		___wmul
  8215 ;;		_printf
  8216 ;; This function is called by:
  8217 ;;		_set_string_data
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text22
  8222  001D2E                     __ptext22:
  8223                           	opt stack 0
  8224  001D2E                     _conflict:
  8225                           	opt stack 19
  8226                           
  8227                           ;incstack = 0
  8228                           ;conflict@new_start_point stored from wreg
  8229  001D2E  6E35               	movwf	conflict@new_start_point,c
  8230                           
  8231                           ;clcd.c: 177: int i = 0;
  8232  001D30  0E00               	movlw	0
  8233  001D32  6E37               	movwf	conflict@i+1,c
  8234  001D34  0E00               	movlw	0
  8235  001D36  6E36               	movwf	conflict@i,c
  8236                           
  8237                           ;clcd.c: 178: bool conflict = 0;
  8238  001D38  0E00               	movlw	0
  8239  001D3A  6E34               	movwf	conflict@conflict,c
  8240                           
  8241                           ;clcd.c: 180: for (i = 0; i < clcd_config_data.clcd_max_display_string;) {
  8242  001D3C  0E00               	movlw	0
  8243  001D3E  6E37               	movwf	conflict@i+1,c
  8244  001D40  0E00               	movlw	0
  8245  001D42  6E36               	movwf	conflict@i,c
  8246  001D44  D125               	goto	l7208
  8247  001D46                     l7164:
  8248                           
  8249                           ;clcd.c: 181: if (clcd_display_string_details[i].uid != 0) {
  8250  001D46  C036  F018         	movff	conflict@i,___wmul@multiplier
  8251  001D4A  C037  F019         	movff	conflict@i+1,___wmul@multiplier+1
  8252  001D4E  0E00               	movlw	0
  8253  001D50  6E1B               	movwf	___wmul@multiplicand+1,c
  8254  001D52  0E37               	movlw	55
  8255  001D54  6E1A               	movwf	___wmul@multiplicand,c
  8256  001D56  ECE7  F01F         	call	___wmul	;wreg free
  8257  001D5A  0E96               	movlw	low _clcd_display_string_details
  8258  001D5C  2418               	addwf	?___wmul,w,c
  8259  001D5E  6ED9               	movwf	fsr2l,c
  8260  001D60  0E02               	movlw	high _clcd_display_string_details
  8261  001D62  2019               	addwfc	?___wmul+1,w,c
  8262  001D64  6EDA               	movwf	fsr2h,c
  8263  001D66  50DE               	movf	postinc2,w,c
  8264  001D68  10DE               	iorwf	postinc2,w,c
  8265  001D6A  B4D8               	btfsc	status,2,c
  8266  001D6C  D10F               	goto	l7206
  8267                           
  8268                           ;clcd.c: 182: if (new_start_point >= clcd_display_string_details[i].start_point && new_s
      +                          tart_point <= clcd_display_string_details[i].end_point) {
  8269  001D6E  C036  F018         	movff	conflict@i,___wmul@multiplier
  8270  001D72  C037  F019         	movff	conflict@i+1,___wmul@multiplier+1
  8271  001D76  0E00               	movlw	0
  8272  001D78  6E1B               	movwf	___wmul@multiplicand+1,c
  8273  001D7A  0E37               	movlw	55
  8274  001D7C  6E1A               	movwf	___wmul@multiplicand,c
  8275  001D7E  ECE7  F01F         	call	___wmul	;wreg free
  8276  001D82  0E2D               	movlw	45
  8277  001D84  2618               	addwf	?___wmul,f,c
  8278  001D86  0E00               	movlw	0
  8279  001D88  2219               	addwfc	?___wmul+1,f,c
  8280  001D8A  0E96               	movlw	low _clcd_display_string_details
  8281  001D8C  2418               	addwf	?___wmul,w,c
  8282  001D8E  6ED9               	movwf	fsr2l,c
  8283  001D90  0E02               	movlw	high _clcd_display_string_details
  8284  001D92  2019               	addwfc	?___wmul+1,w,c
  8285  001D94  6EDA               	movwf	fsr2h,c
  8286  001D96  50DF               	movf	223,w,c
  8287  001D98  0B7F               	andlw	127
  8288  001D9A  6E31               	movwf	??_conflict& (0+255),c
  8289  001D9C  5031               	movf	??_conflict,w,c
  8290  001D9E  5C35               	subwf	conflict@new_start_point,w,c
  8291  001DA0  A0D8               	btfss	status,0,c
  8292  001DA2  D041               	goto	l7180
  8293  001DA4  C036  F018         	movff	conflict@i,___wmul@multiplier
  8294  001DA8  C037  F019         	movff	conflict@i+1,___wmul@multiplier+1
  8295  001DAC  0E00               	movlw	0
  8296  001DAE  6E1B               	movwf	___wmul@multiplicand+1,c
  8297  001DB0  0E37               	movlw	55
  8298  001DB2  6E1A               	movwf	___wmul@multiplicand,c
  8299  001DB4  ECE7  F01F         	call	___wmul	;wreg free
  8300  001DB8  0E30               	movlw	48
  8301  001DBA  2618               	addwf	?___wmul,f,c
  8302  001DBC  0E00               	movlw	0
  8303  001DBE  2219               	addwfc	?___wmul+1,f,c
  8304  001DC0  0E96               	movlw	low _clcd_display_string_details
  8305  001DC2  2418               	addwf	?___wmul,w,c
  8306  001DC4  6ED9               	movwf	fsr2l,c
  8307  001DC6  0E02               	movlw	high _clcd_display_string_details
  8308  001DC8  2019               	addwfc	?___wmul+1,w,c
  8309  001DCA  6EDA               	movwf	fsr2h,c
  8310  001DCC  50DF               	movf	223,w,c
  8311  001DCE  0B7F               	andlw	127
  8312  001DD0  6E31               	movwf	??_conflict& (0+255),c
  8313  001DD2  5035               	movf	conflict@new_start_point,w,c
  8314  001DD4  5C31               	subwf	??_conflict,w,c
  8315  001DD6  A0D8               	btfss	status,0,c
  8316  001DD8  D026               	goto	l7180
  8317                           
  8318                           ;clcd.c: 183: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  8319  001DDA  C036  F018         	movff	conflict@i,___wmul@multiplier
  8320  001DDE  C037  F019         	movff	conflict@i+1,___wmul@multiplier+1
  8321  001DE2  0E00               	movlw	0
  8322  001DE4  6E1B               	movwf	___wmul@multiplicand+1,c
  8323  001DE6  0E37               	movlw	55
  8324  001DE8  6E1A               	movwf	___wmul@multiplicand,c
  8325  001DEA  ECE7  F01F         	call	___wmul	;wreg free
  8326  001DEE  0E96               	movlw	low _clcd_display_string_details
  8327  001DF0  2418               	addwf	?___wmul,w,c
  8328  001DF2  6ED9               	movwf	fsr2l,c
  8329  001DF4  0E02               	movlw	high _clcd_display_string_details
  8330  001DF6  2019               	addwfc	?___wmul+1,w,c
  8331  001DF8  6EDA               	movwf	fsr2h,c
  8332  001DFA  5042               	movf	_conflict_data_count,w,c
  8333  001DFC  0D02               	mullw	2
  8334  001DFE  0EBB               	movlw	low _conflict_arr
  8335  001E00  24F3               	addwf	prodl,w,c
  8336  001E02  6EE1               	movwf	fsr1l,c
  8337  001E04  0E00               	movlw	high _conflict_arr
  8338  001E06  20F4               	addwfc	prodh,w,c
  8339  001E08  6EE2               	movwf	fsr1h,c
  8340  001E0A  CFDE FFE6          	movff	postinc2,postinc1
  8341  001E0E  CFDD FFE5          	movff	postdec2,postdec1
  8342  001E12  2A42               	incf	_conflict_data_count,f,c
  8343                           
  8344                           ;clcd.c: 184: i++;
  8345  001E14  4A36               	infsnz	conflict@i,f,c
  8346  001E16  2A37               	incf	conflict@i+1,f,c
  8347                           
  8348                           ;clcd.c: 185: printf("ex_sp <= new_sp <=ex_ep\r\n");
  8349  001E18  0E59               	movlw	low STR_7
  8350  001E1A  6E1E               	movwf	printf@f,c
  8351  001E1C  0EFD               	movlw	high STR_7
  8352  001E1E  6E1F               	movwf	printf@f+1,c
  8353  001E20  EC03  F015         	call	_printf	;wreg free
  8354  001E24  D05A               	goto	l7192
  8355  001E26                     l7180:
  8356                           
  8357                           ;clcd.c: 188: }
  8358                           ;clcd.c: 189: if (new_end_point >= clcd_display_string_details[i].start_point && new_end
      +                          _point <= clcd_display_string_details[i].end_point) {
  8359  001E26  C036  F018         	movff	conflict@i,___wmul@multiplier
  8360  001E2A  C037  F019         	movff	conflict@i+1,___wmul@multiplier+1
  8361  001E2E  0E00               	movlw	0
  8362  001E30  6E1B               	movwf	___wmul@multiplicand+1,c
  8363  001E32  0E37               	movlw	55
  8364  001E34  6E1A               	movwf	___wmul@multiplicand,c
  8365  001E36  ECE7  F01F         	call	___wmul	;wreg free
  8366  001E3A  0E2D               	movlw	45
  8367  001E3C  2618               	addwf	?___wmul,f,c
  8368  001E3E  0E00               	movlw	0
  8369  001E40  2219               	addwfc	?___wmul+1,f,c
  8370  001E42  0E96               	movlw	low _clcd_display_string_details
  8371  001E44  2418               	addwf	?___wmul,w,c
  8372  001E46  6ED9               	movwf	fsr2l,c
  8373  001E48  0E02               	movlw	high _clcd_display_string_details
  8374  001E4A  2019               	addwfc	?___wmul+1,w,c
  8375  001E4C  6EDA               	movwf	fsr2h,c
  8376  001E4E  50DF               	movf	223,w,c
  8377  001E50  0B7F               	andlw	127
  8378  001E52  6E31               	movwf	??_conflict& (0+255),c
  8379  001E54  5031               	movf	??_conflict,w,c
  8380  001E56  5C30               	subwf	conflict@new_end_point,w,c
  8381  001E58  A0D8               	btfss	status,0,c
  8382  001E5A  D042               	goto	l7194
  8383  001E5C  C036  F018         	movff	conflict@i,___wmul@multiplier
  8384  001E60  C037  F019         	movff	conflict@i+1,___wmul@multiplier+1
  8385  001E64  0E00               	movlw	0
  8386  001E66  6E1B               	movwf	___wmul@multiplicand+1,c
  8387  001E68  0E37               	movlw	55
  8388  001E6A  6E1A               	movwf	___wmul@multiplicand,c
  8389  001E6C  ECE7  F01F         	call	___wmul	;wreg free
  8390  001E70  0E30               	movlw	48
  8391  001E72  2618               	addwf	?___wmul,f,c
  8392  001E74  0E00               	movlw	0
  8393  001E76  2219               	addwfc	?___wmul+1,f,c
  8394  001E78  0E96               	movlw	low _clcd_display_string_details
  8395  001E7A  2418               	addwf	?___wmul,w,c
  8396  001E7C  6ED9               	movwf	fsr2l,c
  8397  001E7E  0E02               	movlw	high _clcd_display_string_details
  8398  001E80  2019               	addwfc	?___wmul+1,w,c
  8399  001E82  6EDA               	movwf	fsr2h,c
  8400  001E84  50DF               	movf	223,w,c
  8401  001E86  0B7F               	andlw	127
  8402  001E88  6E31               	movwf	??_conflict& (0+255),c
  8403  001E8A  5030               	movf	conflict@new_end_point,w,c
  8404  001E8C  5C31               	subwf	??_conflict,w,c
  8405  001E8E  A0D8               	btfss	status,0,c
  8406  001E90  D027               	goto	l7194
  8407                           
  8408                           ;clcd.c: 190: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  8409  001E92  C036  F018         	movff	conflict@i,___wmul@multiplier
  8410  001E96  C037  F019         	movff	conflict@i+1,___wmul@multiplier+1
  8411  001E9A  0E00               	movlw	0
  8412  001E9C  6E1B               	movwf	___wmul@multiplicand+1,c
  8413  001E9E  0E37               	movlw	55
  8414  001EA0  6E1A               	movwf	___wmul@multiplicand,c
  8415  001EA2  ECE7  F01F         	call	___wmul	;wreg free
  8416  001EA6  0E96               	movlw	low _clcd_display_string_details
  8417  001EA8  2418               	addwf	?___wmul,w,c
  8418  001EAA  6ED9               	movwf	fsr2l,c
  8419  001EAC  0E02               	movlw	high _clcd_display_string_details
  8420  001EAE  2019               	addwfc	?___wmul+1,w,c
  8421  001EB0  6EDA               	movwf	fsr2h,c
  8422  001EB2  5042               	movf	_conflict_data_count,w,c
  8423  001EB4  0D02               	mullw	2
  8424  001EB6  0EBB               	movlw	low _conflict_arr
  8425  001EB8  24F3               	addwf	prodl,w,c
  8426  001EBA  6EE1               	movwf	fsr1l,c
  8427  001EBC  0E00               	movlw	high _conflict_arr
  8428  001EBE  20F4               	addwfc	prodh,w,c
  8429  001EC0  6EE2               	movwf	fsr1h,c
  8430  001EC2  CFDE FFE6          	movff	postinc2,postinc1
  8431  001EC6  CFDD FFE5          	movff	postdec2,postdec1
  8432  001ECA  2A42               	incf	_conflict_data_count,f,c
  8433                           
  8434                           ;clcd.c: 191: printf("ex_sp <= new_ep <=ex_ep\r\n");
  8435  001ECC  0E3F               	movlw	low STR_8
  8436  001ECE  6E1E               	movwf	printf@f,c
  8437  001ED0  0EFD               	movlw	high STR_8
  8438  001ED2  6E1F               	movwf	printf@f+1,c
  8439  001ED4  EC03  F015         	call	_printf	;wreg free
  8440  001ED8  D056               	goto	l7202
  8441  001EDA                     l7192:
  8442                           
  8443                           ;clcd.c: 193: conflict = 1;
  8444  001EDA  0E01               	movlw	1
  8445  001EDC  6E34               	movwf	conflict@conflict,c
  8446                           
  8447                           ;clcd.c: 194: continue;
  8448  001EDE  D058               	goto	l7208
  8449  001EE0                     l7194:
  8450                           
  8451                           ;clcd.c: 195: }
  8452                           ;clcd.c: 196: if (new_start_point <= clcd_display_string_details[i].start_point && new_e
      +                          nd_point >= clcd_display_string_details[i].end_point) {
  8453  001EE0  C036  F018         	movff	conflict@i,___wmul@multiplier
  8454  001EE4  C037  F019         	movff	conflict@i+1,___wmul@multiplier+1
  8455  001EE8  0E00               	movlw	0
  8456  001EEA  6E1B               	movwf	___wmul@multiplicand+1,c
  8457  001EEC  0E37               	movlw	55
  8458  001EEE  6E1A               	movwf	___wmul@multiplicand,c
  8459  001EF0  ECE7  F01F         	call	___wmul	;wreg free
  8460  001EF4  0E2D               	movlw	45
  8461  001EF6  2618               	addwf	?___wmul,f,c
  8462  001EF8  0E00               	movlw	0
  8463  001EFA  2219               	addwfc	?___wmul+1,f,c
  8464  001EFC  0E96               	movlw	low _clcd_display_string_details
  8465  001EFE  2418               	addwf	?___wmul,w,c
  8466  001F00  6ED9               	movwf	fsr2l,c
  8467  001F02  0E02               	movlw	high _clcd_display_string_details
  8468  001F04  2019               	addwfc	?___wmul+1,w,c
  8469  001F06  6EDA               	movwf	fsr2h,c
  8470  001F08  50DF               	movf	223,w,c
  8471  001F0A  0B7F               	andlw	127
  8472  001F0C  6E31               	movwf	??_conflict& (0+255),c
  8473  001F0E  5035               	movf	conflict@new_start_point,w,c
  8474  001F10  5C31               	subwf	??_conflict,w,c
  8475  001F12  A0D8               	btfss	status,0,c
  8476  001F14  D03B               	goto	l7206
  8477  001F16  C036  F018         	movff	conflict@i,___wmul@multiplier
  8478  001F1A  C037  F019         	movff	conflict@i+1,___wmul@multiplier+1
  8479  001F1E  0E00               	movlw	0
  8480  001F20  6E1B               	movwf	___wmul@multiplicand+1,c
  8481  001F22  0E37               	movlw	55
  8482  001F24  6E1A               	movwf	___wmul@multiplicand,c
  8483  001F26  ECE7  F01F         	call	___wmul	;wreg free
  8484  001F2A  0E30               	movlw	48
  8485  001F2C  2618               	addwf	?___wmul,f,c
  8486  001F2E  0E00               	movlw	0
  8487  001F30  2219               	addwfc	?___wmul+1,f,c
  8488  001F32  0E96               	movlw	low _clcd_display_string_details
  8489  001F34  2418               	addwf	?___wmul,w,c
  8490  001F36  6ED9               	movwf	fsr2l,c
  8491  001F38  0E02               	movlw	high _clcd_display_string_details
  8492  001F3A  2019               	addwfc	?___wmul+1,w,c
  8493  001F3C  6EDA               	movwf	fsr2h,c
  8494  001F3E  50DF               	movf	223,w,c
  8495  001F40  0B7F               	andlw	127
  8496  001F42  6E31               	movwf	??_conflict& (0+255),c
  8497  001F44  5031               	movf	??_conflict,w,c
  8498  001F46  5C30               	subwf	conflict@new_end_point,w,c
  8499  001F48  A0D8               	btfss	status,0,c
  8500  001F4A  D020               	goto	l7206
  8501                           
  8502                           ;clcd.c: 197: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  8503  001F4C  C036  F018         	movff	conflict@i,___wmul@multiplier
  8504  001F50  C037  F019         	movff	conflict@i+1,___wmul@multiplier+1
  8505  001F54  0E00               	movlw	0
  8506  001F56  6E1B               	movwf	___wmul@multiplicand+1,c
  8507  001F58  0E37               	movlw	55
  8508  001F5A  6E1A               	movwf	___wmul@multiplicand,c
  8509  001F5C  ECE7  F01F         	call	___wmul	;wreg free
  8510  001F60  0E96               	movlw	low _clcd_display_string_details
  8511  001F62  2418               	addwf	?___wmul,w,c
  8512  001F64  6ED9               	movwf	fsr2l,c
  8513  001F66  0E02               	movlw	high _clcd_display_string_details
  8514  001F68  2019               	addwfc	?___wmul+1,w,c
  8515  001F6A  6EDA               	movwf	fsr2h,c
  8516  001F6C  5042               	movf	_conflict_data_count,w,c
  8517  001F6E  0D02               	mullw	2
  8518  001F70  0EBB               	movlw	low _conflict_arr
  8519  001F72  24F3               	addwf	prodl,w,c
  8520  001F74  6EE1               	movwf	fsr1l,c
  8521  001F76  0E00               	movlw	high _conflict_arr
  8522  001F78  20F4               	addwfc	prodh,w,c
  8523  001F7A  6EE2               	movwf	fsr1h,c
  8524  001F7C  CFDE FFE6          	movff	postinc2,postinc1
  8525  001F80  CFDD FFE5          	movff	postdec2,postdec1
  8526  001F84  2A42               	incf	_conflict_data_count,f,c
  8527  001F86                     l7202:
  8528                           
  8529                           ;clcd.c: 198: i++;
  8530  001F86  4A36               	infsnz	conflict@i,f,c
  8531  001F88  2A37               	incf	conflict@i+1,f,c
  8532  001F8A  D7A7               	goto	l7192
  8533  001F8C                     l7206:
  8534                           
  8535                           ;clcd.c: 201: }
  8536                           ;clcd.c: 202: }
  8537                           ;clcd.c: 203: i++;
  8538  001F8C  4A36               	infsnz	conflict@i,f,c
  8539  001F8E  2A37               	incf	conflict@i+1,f,c
  8540  001F90                     l7208:
  8541  001F90  504D               	movf	_clcd_config_data+4,w,c
  8542  001F92  6E31               	movwf	??_conflict& (0+255),c
  8543  001F94  6A32               	clrf	(??_conflict+1)& (0+255),c
  8544  001F96  5031               	movf	??_conflict,w,c
  8545  001F98  5C36               	subwf	conflict@i,w,c
  8546  001F9A  5037               	movf	conflict@i+1,w,c
  8547  001F9C  0A80               	xorlw	128
  8548  001F9E  6E33               	movwf	(??_conflict+2)& (0+255),c
  8549  001FA0  5032               	movf	??_conflict+1,w,c
  8550  001FA2  0A80               	xorlw	128
  8551  001FA4  5833               	subwfb	(??_conflict+2)& (0+255),w,c
  8552  001FA6  A0D8               	btfss	status,0,c
  8553  001FA8  D6CE               	goto	l7164
  8554                           
  8555                           ;clcd.c: 204: }
  8556                           ;clcd.c: 212: return conflict;
  8557  001FAA  5034               	movf	conflict@conflict,w,c
  8558  001FAC  0012               	return	
  8559  001FAE                     __end_of_conflict:
  8560                           	opt stack 0
  8561                           tblptru	equ	0xFF8
  8562                           tblptrh	equ	0xFF7
  8563                           tblptrl	equ	0xFF6
  8564                           tablat	equ	0xFF5
  8565                           prodh	equ	0xFF4
  8566                           prodl	equ	0xFF3
  8567                           intcon	equ	0xFF2
  8568                           postinc0	equ	0xFEE
  8569                           wreg	equ	0xFE8
  8570                           indf1	equ	0xFE7
  8571                           postinc1	equ	0xFE6
  8572                           postdec1	equ	0xFE5
  8573                           fsr1h	equ	0xFE2
  8574                           fsr1l	equ	0xFE1
  8575                           indf2	equ	0xFDF
  8576                           postinc2	equ	0xFDE
  8577                           postdec2	equ	0xFDD
  8578                           fsr2h	equ	0xFDA
  8579                           fsr2l	equ	0xFD9
  8580                           status	equ	0xFD8
  8581                           
  8582 ;; *************** function _puts *****************
  8583 ;; Defined at:
  8584 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\puts.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  s               2   19[COMRAM] PTR const unsigned char 
  8587 ;;		 -> STR_134(12), STR_133(12), STR_84(5), 
  8588 ;; Auto vars:     Size  Location     Type
  8589 ;;		None
  8590 ;; Return value:  Size  Location     Type
  8591 ;;                  2   19[COMRAM] int 
  8592 ;; Registers used:
  8593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8594 ;; Tracked objects:
  8595 ;;		On entry : 0/0
  8596 ;;		On exit  : 0/0
  8597 ;;		Unchanged: 0/0
  8598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8599 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8603 ;;Total ram usage:        2 bytes
  8604 ;; Hardware stack levels used:    1
  8605 ;; Hardware stack levels required when called:    8
  8606 ;; This function calls:
  8607 ;;		_cputs
  8608 ;;		_putch
  8609 ;; This function is called by:
  8610 ;;		_reply_to_host
  8611 ;;		_cmd_consol_task
  8612 ;; This function uses a non-reentrant model
  8613 ;;
  8614                           
  8615                           	psect	text23
  8616  004146                     __ptext23:
  8617                           	opt stack 0
  8618  004146                     _puts:
  8619                           	opt stack 20
  8620                           
  8621                           ;incstack = 0
  8622  004146  C014  F012         	movff	puts@s,cputs@s
  8623  00414A  C015  F013         	movff	puts@s+1,cputs@s+1
  8624  00414E  EC8D  F01F         	call	_cputs	;wreg free
  8625  004152  0E0A               	movlw	10
  8626  004154  EC12  F021         	call	_putch
  8627  004158  0012               	return		;funcret
  8628  00415A                     __end_of_puts:
  8629                           	opt stack 0
  8630                           tblptru	equ	0xFF8
  8631                           tblptrh	equ	0xFF7
  8632                           tblptrl	equ	0xFF6
  8633                           tablat	equ	0xFF5
  8634                           prodh	equ	0xFF4
  8635                           prodl	equ	0xFF3
  8636                           intcon	equ	0xFF2
  8637                           postinc0	equ	0xFEE
  8638                           wreg	equ	0xFE8
  8639                           indf1	equ	0xFE7
  8640                           postinc1	equ	0xFE6
  8641                           postdec1	equ	0xFE5
  8642                           fsr1h	equ	0xFE2
  8643                           fsr1l	equ	0xFE1
  8644                           indf2	equ	0xFDF
  8645                           postinc2	equ	0xFDE
  8646                           postdec2	equ	0xFDD
  8647                           fsr2h	equ	0xFDA
  8648                           fsr2l	equ	0xFD9
  8649                           status	equ	0xFD8
  8650                           
  8651 ;; *************** function _cputs *****************
  8652 ;; Defined at:
  8653 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\cputs.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;  s               2   17[COMRAM] PTR const unsigned char 
  8656 ;;		 -> STR_134(12), STR_133(12), STR_84(5), 
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;		None
  8659 ;; Return value:  Size  Location     Type
  8660 ;;                  1    wreg      void 
  8661 ;; Registers used:
  8662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8663 ;; Tracked objects:
  8664 ;;		On entry : 0/0
  8665 ;;		On exit  : 0/0
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8668 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8672 ;;Total ram usage:        2 bytes
  8673 ;; Hardware stack levels used:    1
  8674 ;; Hardware stack levels required when called:    7
  8675 ;; This function calls:
  8676 ;;		_putch
  8677 ;; This function is called by:
  8678 ;;		_puts
  8679 ;; This function uses a non-reentrant model
  8680 ;;
  8681                           
  8682                           	psect	text24
  8683  003F1A                     __ptext24:
  8684                           	opt stack 0
  8685  003F1A                     _cputs:
  8686                           	opt stack 20
  8687                           
  8688                           ;incstack = 0
  8689  003F1A  D00B               	goto	l7356
  8690  003F1C                     l7352:
  8691  003F1C  C012  FFF6         	movff	cputs@s,tblptrl
  8692  003F20  C013  FFF7         	movff	cputs@s+1,tblptrh
  8693  003F24                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8694  003F24  6AF8               	clrf	tblptru,c
  8695  003F26                     	endif
  8696  003F26                     	if	0	;tblptru may be non-zero
  8697  003F26                     	endif
  8698  003F26  0008               	tblrd		*
  8699  003F28  50F5               	movf	tablat,w,c
  8700  003F2A  EC12  F021         	call	_putch
  8701  003F2E  4A12               	infsnz	cputs@s,f,c
  8702  003F30  2A13               	incf	cputs@s+1,f,c
  8703  003F32                     l7356:
  8704  003F32  C012  FFF6         	movff	cputs@s,tblptrl
  8705  003F36  C013  FFF7         	movff	cputs@s+1,tblptrh
  8706  003F3A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8707  003F3A  6AF8               	clrf	tblptru,c
  8708  003F3C                     	endif
  8709  003F3C                     	if	0	;tblptru may be non-zero
  8710  003F3C                     	endif
  8711  003F3C  0008               	tblrd		*
  8712  003F3E  50F5               	movf	tablat,w,c
  8713  003F40  0900               	iorlw	0
  8714  003F42  B4D8               	btfsc	status,2,c
  8715  003F44  0012               	return	
  8716  003F46  D7EA               	goto	l7352
  8717  003F48                     __end_of_cputs:
  8718                           	opt stack 0
  8719                           tblptru	equ	0xFF8
  8720                           tblptrh	equ	0xFF7
  8721                           tblptrl	equ	0xFF6
  8722                           tablat	equ	0xFF5
  8723                           prodh	equ	0xFF4
  8724                           prodl	equ	0xFF3
  8725                           intcon	equ	0xFF2
  8726                           postinc0	equ	0xFEE
  8727                           wreg	equ	0xFE8
  8728                           indf1	equ	0xFE7
  8729                           postinc1	equ	0xFE6
  8730                           postdec1	equ	0xFE5
  8731                           fsr1h	equ	0xFE2
  8732                           fsr1l	equ	0xFE1
  8733                           indf2	equ	0xFDF
  8734                           postinc2	equ	0xFDE
  8735                           postdec2	equ	0xFDD
  8736                           fsr2h	equ	0xFDA
  8737                           fsr2l	equ	0xFD9
  8738                           status	equ	0xFD8
  8739                           
  8740 ;; *************** function _print_conflict_ids *****************
  8741 ;; Defined at:
  8742 ;;		line 250 in file "clcd.c"
  8743 ;; Parameters:    Size  Location     Type
  8744 ;;		None
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;  conflict_cou    2   51[COMRAM] int 
  8747 ;;  j               2    0        int 
  8748 ;; Return value:  Size  Location     Type
  8749 ;;                  1    wreg      void 
  8750 ;; Registers used:
  8751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8752 ;; Tracked objects:
  8753 ;;		On entry : 0/0
  8754 ;;		On exit  : 0/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8758 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8761 ;;Total ram usage:        6 bytes
  8762 ;; Hardware stack levels used:    1
  8763 ;; Hardware stack levels required when called:    8
  8764 ;; This function calls:
  8765 ;;		_printf
  8766 ;; This function is called by:
  8767 ;;		_reply_to_host
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           	psect	text25
  8772  003370                     __ptext25:
  8773                           	opt stack 0
  8774  003370                     _print_conflict_ids:
  8775                           	opt stack 20
  8776                           
  8777                           ;clcd.c: 251: int conflict_count = 0, j;
  8778                           
  8779                           ;incstack = 0
  8780  003370  0E00               	movlw	0
  8781  003372  6E35               	movwf	print_conflict_ids@conflict_count+1,c
  8782  003374  0E00               	movlw	0
  8783  003376  6E34               	movwf	print_conflict_ids@conflict_count,c
  8784                           
  8785                           ;clcd.c: 252: for (conflict_count = 0; conflict_count < conflict_data_count; conflict_co
      +                          unt++) {
  8786  003378  0E00               	movlw	0
  8787  00337A  6E35               	movwf	print_conflict_ids@conflict_count+1,c
  8788  00337C  0E00               	movlw	0
  8789  00337E  6E34               	movwf	print_conflict_ids@conflict_count,c
  8790  003380  D03B               	goto	l7496
  8791  003382                     l7488:
  8792                           
  8793                           ;clcd.c: 253: if (conflict_count == conflict_data_count - 1)
  8794  003382  0EFF               	movlw	255
  8795  003384  6E30               	movwf	??_print_conflict_ids& (0+255),c
  8796  003386  0EFF               	movlw	255
  8797  003388  6E31               	movwf	(??_print_conflict_ids+1)& (0+255),c
  8798  00338A  5042               	movf	_conflict_data_count,w,c
  8799  00338C  6E32               	movwf	(??_print_conflict_ids+2)& (0+255),c
  8800  00338E  6A33               	clrf	(??_print_conflict_ids+3)& (0+255),c
  8801  003390  5030               	movf	??_print_conflict_ids,w,c
  8802  003392  2632               	addwf	??_print_conflict_ids+2,f,c
  8803  003394  5031               	movf	??_print_conflict_ids+1,w,c
  8804  003396  2233               	addwfc	??_print_conflict_ids+3,f,c
  8805  003398  5034               	movf	print_conflict_ids@conflict_count,w,c
  8806  00339A  1832               	xorwf	??_print_conflict_ids+2,w,c
  8807  00339C  E118               	bnz	l7492
  8808  00339E  5035               	movf	print_conflict_ids@conflict_count+1,w,c
  8809  0033A0  1833               	xorwf	??_print_conflict_ids+3,w,c
  8810  0033A2  A4D8               	btfss	status,2,c
  8811  0033A4  D014               	goto	l7492
  8812                           
  8813                           ;clcd.c: 254: printf("%d\r\n", conflict_arr[conflict_count]);
  8814  0033A6  0EC6               	movlw	low (STR_21+14)
  8815  0033A8  6E1E               	movwf	printf@f,c
  8816  0033AA  0EFD               	movlw	high (STR_21+14)
  8817  0033AC  6E1F               	movwf	printf@f+1,c
  8818  0033AE  90D8               	bcf	status,0,c
  8819  0033B0  3434               	rlcf	print_conflict_ids@conflict_count,w,c
  8820  0033B2  6ED9               	movwf	fsr2l,c
  8821  0033B4  3435               	rlcf	print_conflict_ids@conflict_count+1,w,c
  8822  0033B6  6EDA               	movwf	fsr2h,c
  8823  0033B8  0EBB               	movlw	low _conflict_arr
  8824  0033BA  26D9               	addwf	fsr2l,f,c
  8825  0033BC  0E00               	movlw	high _conflict_arr
  8826  0033BE  22DA               	addwfc	fsr2h,f,c
  8827  0033C0  CFDE F020          	movff	postinc2,?_printf+2
  8828  0033C4  CFDD F021          	movff	postdec2,?_printf+3
  8829  0033C8  EC03  F015         	call	_printf	;wreg free
  8830  0033CC  D013               	goto	l7494
  8831  0033CE                     l7492:
  8832                           
  8833                           ;clcd.c: 255: else
  8834                           ;clcd.c: 256: printf("%d, ", conflict_arr[conflict_count]);
  8835  0033CE  0EE1               	movlw	low STR_13
  8836  0033D0  6E1E               	movwf	printf@f,c
  8837  0033D2  0EFF               	movlw	high STR_13
  8838  0033D4  6E1F               	movwf	printf@f+1,c
  8839  0033D6  90D8               	bcf	status,0,c
  8840  0033D8  3434               	rlcf	print_conflict_ids@conflict_count,w,c
  8841  0033DA  6ED9               	movwf	fsr2l,c
  8842  0033DC  3435               	rlcf	print_conflict_ids@conflict_count+1,w,c
  8843  0033DE  6EDA               	movwf	fsr2h,c
  8844  0033E0  0EBB               	movlw	low _conflict_arr
  8845  0033E2  26D9               	addwf	fsr2l,f,c
  8846  0033E4  0E00               	movlw	high _conflict_arr
  8847  0033E6  22DA               	addwfc	fsr2h,f,c
  8848  0033E8  CFDE F020          	movff	postinc2,?_printf+2
  8849  0033EC  CFDD F021          	movff	postdec2,?_printf+3
  8850  0033F0  EC03  F015         	call	_printf	;wreg free
  8851  0033F4                     l7494:
  8852  0033F4  4A34               	infsnz	print_conflict_ids@conflict_count,f,c
  8853  0033F6  2A35               	incf	print_conflict_ids@conflict_count+1,f,c
  8854  0033F8                     l7496:
  8855  0033F8  5042               	movf	_conflict_data_count,w,c
  8856  0033FA  6E30               	movwf	??_print_conflict_ids& (0+255),c
  8857  0033FC  6A31               	clrf	(??_print_conflict_ids+1)& (0+255),c
  8858  0033FE  5030               	movf	??_print_conflict_ids,w,c
  8859  003400  5C34               	subwf	print_conflict_ids@conflict_count,w,c
  8860  003402  5035               	movf	print_conflict_ids@conflict_count+1,w,c
  8861  003404  0A80               	xorlw	128
  8862  003406  6E32               	movwf	(??_print_conflict_ids+2)& (0+255),c
  8863  003408  5031               	movf	??_print_conflict_ids+1,w,c
  8864  00340A  0A80               	xorlw	128
  8865  00340C  5832               	subwfb	(??_print_conflict_ids+2)& (0+255),w,c
  8866  00340E  B0D8               	btfsc	status,0,c
  8867  003410  0012               	return	
  8868  003412  D7B7               	goto	l7488
  8869  003414                     __end_of_print_conflict_ids:
  8870                           	opt stack 0
  8871                           tblptru	equ	0xFF8
  8872                           tblptrh	equ	0xFF7
  8873                           tblptrl	equ	0xFF6
  8874                           tablat	equ	0xFF5
  8875                           prodh	equ	0xFF4
  8876                           prodl	equ	0xFF3
  8877                           intcon	equ	0xFF2
  8878                           postinc0	equ	0xFEE
  8879                           wreg	equ	0xFE8
  8880                           indf1	equ	0xFE7
  8881                           postinc1	equ	0xFE6
  8882                           postdec1	equ	0xFE5
  8883                           fsr1h	equ	0xFE2
  8884                           fsr1l	equ	0xFE1
  8885                           indf2	equ	0xFDF
  8886                           postinc2	equ	0xFDE
  8887                           postdec2	equ	0xFDD
  8888                           fsr2h	equ	0xFDA
  8889                           fsr2l	equ	0xFD9
  8890                           status	equ	0xFD8
  8891                           
  8892 ;; *************** function _min_uid_range *****************
  8893 ;; Defined at:
  8894 ;;		line 89 in file "clcd.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;		None
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;		None
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      unsigned char 
  8901 ;; Registers used:
  8902 ;;		wreg, status,2
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;Total ram usage:        0 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; Hardware stack levels required when called:    5
  8915 ;; This function calls:
  8916 ;;		Nothing
  8917 ;; This function is called by:
  8918 ;;		_reply_to_host
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           	psect	text26
  8923  00418A                     __ptext26:
  8924                           	opt stack 0
  8925  00418A                     _min_uid_range:
  8926                           	opt stack 23
  8927                           
  8928                           ;clcd.c: 90: if (clcd_config_data.init_done == 0)
  8929                           
  8930                           ;incstack = 0
  8931  00418A  5049               	movf	_clcd_config_data,w,c
  8932  00418C  A4D8               	btfss	status,2,c
  8933  00418E  D002               	goto	l7442
  8934                           
  8935                           ;clcd.c: 91: return 0;
  8936  004190  0E00               	movlw	0
  8937  004192  0012               	return	
  8938  004194                     l7442:
  8939                           
  8940                           ;clcd.c: 92: else
  8941                           ;clcd.c: 93: return 'A';
  8942  004194  0E41               	movlw	65
  8943  004196  0012               	return	
  8944  004198                     __end_of_min_uid_range:
  8945                           	opt stack 0
  8946                           tblptru	equ	0xFF8
  8947                           tblptrh	equ	0xFF7
  8948                           tblptrl	equ	0xFF6
  8949                           tablat	equ	0xFF5
  8950                           prodh	equ	0xFF4
  8951                           prodl	equ	0xFF3
  8952                           intcon	equ	0xFF2
  8953                           postinc0	equ	0xFEE
  8954                           wreg	equ	0xFE8
  8955                           indf1	equ	0xFE7
  8956                           postinc1	equ	0xFE6
  8957                           postdec1	equ	0xFE5
  8958                           fsr1h	equ	0xFE2
  8959                           fsr1l	equ	0xFE1
  8960                           indf2	equ	0xFDF
  8961                           postinc2	equ	0xFDE
  8962                           postdec2	equ	0xFDD
  8963                           fsr2h	equ	0xFDA
  8964                           fsr2l	equ	0xFD9
  8965                           status	equ	0xFD8
  8966                           
  8967 ;; *************** function _max_uid_range *****************
  8968 ;; Defined at:
  8969 ;;		line 96 in file "clcd.c"
  8970 ;; Parameters:    Size  Location     Type
  8971 ;;		None
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;		None
  8974 ;; Return value:  Size  Location     Type
  8975 ;;                  1    wreg      unsigned char 
  8976 ;; Registers used:
  8977 ;;		wreg, status,2, status,0
  8978 ;; Tracked objects:
  8979 ;;		On entry : 0/0
  8980 ;;		On exit  : 0/0
  8981 ;;		Unchanged: 0/0
  8982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8987 ;;Total ram usage:        0 bytes
  8988 ;; Hardware stack levels used:    1
  8989 ;; Hardware stack levels required when called:    5
  8990 ;; This function calls:
  8991 ;;		Nothing
  8992 ;; This function is called by:
  8993 ;;		_reply_to_host
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           	psect	text27
  8998  004198                     __ptext27:
  8999                           	opt stack 0
  9000  004198                     _max_uid_range:
  9001                           	opt stack 23
  9002                           
  9003                           ;clcd.c: 97: if (clcd_config_data.init_done == 0)
  9004                           
  9005                           ;incstack = 0
  9006  004198  5049               	movf	_clcd_config_data,w,c
  9007  00419A  A4D8               	btfss	status,2,c
  9008  00419C  D002               	goto	l7454
  9009                           
  9010                           ;clcd.c: 98: return 0;
  9011  00419E  0E00               	movlw	0
  9012  0041A0  0012               	return	
  9013  0041A2                     l7454:
  9014                           
  9015                           ;clcd.c: 99: else
  9016                           ;clcd.c: 100: return clcd_config_data.uid_range - 1;
  9017  0041A2  044C               	decf	_clcd_config_data+3,w,c
  9018  0041A4  0012               	return	
  9019  0041A6                     __end_of_max_uid_range:
  9020                           	opt stack 0
  9021                           tblptru	equ	0xFF8
  9022                           tblptrh	equ	0xFF7
  9023                           tblptrl	equ	0xFF6
  9024                           tablat	equ	0xFF5
  9025                           prodh	equ	0xFF4
  9026                           prodl	equ	0xFF3
  9027                           intcon	equ	0xFF2
  9028                           postinc0	equ	0xFEE
  9029                           wreg	equ	0xFE8
  9030                           indf1	equ	0xFE7
  9031                           postinc1	equ	0xFE6
  9032                           postdec1	equ	0xFE5
  9033                           fsr1h	equ	0xFE2
  9034                           fsr1l	equ	0xFE1
  9035                           indf2	equ	0xFDF
  9036                           postinc2	equ	0xFDE
  9037                           postdec2	equ	0xFDD
  9038                           fsr2h	equ	0xFDA
  9039                           fsr2l	equ	0xFD9
  9040                           status	equ	0xFD8
  9041                           
  9042 ;; *************** function _max_display_support *****************
  9043 ;; Defined at:
  9044 ;;		line 103 in file "clcd.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;		None
  9049 ;; Return value:  Size  Location     Type
  9050 ;;                  2   15[COMRAM] PTR unsigned char 
  9051 ;; Registers used:
  9052 ;;		wreg, status,2, status,0
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9058 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9061 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9062 ;;Total ram usage:        2 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    5
  9065 ;; This function calls:
  9066 ;;		Nothing
  9067 ;; This function is called by:
  9068 ;;		_reply_to_host
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           	psect	text28
  9073  004210                     __ptext28:
  9074                           	opt stack 0
  9075  004210                     _max_display_support:
  9076                           	opt stack 23
  9077                           
  9078                           ;clcd.c: 104: return "4,20";
  9079                           
  9080                           ;incstack = 0
  9081  004210  0EE6               	movlw	low STR_5
  9082  004212  6E10               	movwf	?_max_display_support,c
  9083  004214  0EFF               	movlw	high STR_5
  9084  004216  6E11               	movwf	?_max_display_support+1,c
  9085  004218  0012               	return	
  9086  00421A                     __end_of_max_display_support:
  9087                           	opt stack 0
  9088                           tblptru	equ	0xFF8
  9089                           tblptrh	equ	0xFF7
  9090                           tblptrl	equ	0xFF6
  9091                           tablat	equ	0xFF5
  9092                           prodh	equ	0xFF4
  9093                           prodl	equ	0xFF3
  9094                           intcon	equ	0xFF2
  9095                           postinc0	equ	0xFEE
  9096                           wreg	equ	0xFE8
  9097                           indf1	equ	0xFE7
  9098                           postinc1	equ	0xFE6
  9099                           postdec1	equ	0xFE5
  9100                           fsr1h	equ	0xFE2
  9101                           fsr1l	equ	0xFE1
  9102                           indf2	equ	0xFDF
  9103                           postinc2	equ	0xFDE
  9104                           postdec2	equ	0xFDD
  9105                           fsr2h	equ	0xFDA
  9106                           fsr2l	equ	0xFD9
  9107                           status	equ	0xFD8
  9108                           
  9109 ;; *************** function _max_display_str *****************
  9110 ;; Defined at:
  9111 ;;		line 82 in file "clcd.c"
  9112 ;; Parameters:    Size  Location     Type
  9113 ;;		None
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;		None
  9116 ;; Return value:  Size  Location     Type
  9117 ;;                  1    wreg      unsigned char 
  9118 ;; Registers used:
  9119 ;;		wreg, status,2
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9129 ;;Total ram usage:        0 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; Hardware stack levels required when called:    5
  9132 ;; This function calls:
  9133 ;;		Nothing
  9134 ;; This function is called by:
  9135 ;;		_reply_to_host
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           	psect	text29
  9140  0041A6                     __ptext29:
  9141                           	opt stack 0
  9142  0041A6                     _max_display_str:
  9143                           	opt stack 23
  9144                           
  9145                           ;clcd.c: 83: if (clcd_config_data.init_done == 0)
  9146                           
  9147                           ;incstack = 0
  9148  0041A6  5049               	movf	_clcd_config_data,w,c
  9149  0041A8  A4D8               	btfss	status,2,c
  9150  0041AA  D002               	goto	l7430
  9151                           
  9152                           ;clcd.c: 84: return 0;
  9153  0041AC  0E00               	movlw	0
  9154  0041AE  0012               	return	
  9155  0041B0                     l7430:
  9156                           
  9157                           ;clcd.c: 85: else
  9158                           ;clcd.c: 86: return clcd_config_data.clcd_max_display_string;
  9159  0041B0  504D               	movf	_clcd_config_data+4,w,c
  9160  0041B2  0012               	return	
  9161  0041B4                     __end_of_max_display_str:
  9162                           	opt stack 0
  9163                           tblptru	equ	0xFF8
  9164                           tblptrh	equ	0xFF7
  9165                           tblptrl	equ	0xFF6
  9166                           tablat	equ	0xFF5
  9167                           prodh	equ	0xFF4
  9168                           prodl	equ	0xFF3
  9169                           intcon	equ	0xFF2
  9170                           postinc0	equ	0xFEE
  9171                           wreg	equ	0xFE8
  9172                           indf1	equ	0xFE7
  9173                           postinc1	equ	0xFE6
  9174                           postdec1	equ	0xFE5
  9175                           fsr1h	equ	0xFE2
  9176                           fsr1l	equ	0xFE1
  9177                           indf2	equ	0xFDF
  9178                           postinc2	equ	0xFDE
  9179                           postdec2	equ	0xFDD
  9180                           fsr2h	equ	0xFDA
  9181                           fsr2l	equ	0xFD9
  9182                           status	equ	0xFD8
  9183                           
  9184 ;; *************** function _init_clcd_cusotom_lcd *****************
  9185 ;; Defined at:
  9186 ;;		line 50 in file "clcd.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;  clcd_init_ro    1    wreg     unsigned char 
  9189 ;;  clcd_init_co    1   47[COMRAM] unsigned char 
  9190 ;; Auto vars:     Size  Location     Type
  9191 ;;  clcd_init_ro    1   48[COMRAM] unsigned char 
  9192 ;; Return value:  Size  Location     Type
  9193 ;;                  1    wreg      void 
  9194 ;; Registers used:
  9195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9196 ;; Tracked objects:
  9197 ;;		On entry : 0/0
  9198 ;;		On exit  : 0/0
  9199 ;;		Unchanged: 0/0
  9200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9201 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9202 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9204 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;Total ram usage:        2 bytes
  9206 ;; Hardware stack levels used:    1
  9207 ;; Hardware stack levels required when called:   11
  9208 ;; This function calls:
  9209 ;;		___awdiv
  9210 ;;		___wmul
  9211 ;;		_init_CLCD_config
  9212 ;;		_memset
  9213 ;;		_printf
  9214 ;; This function is called by:
  9215 ;;		_reply_to_host
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           	psect	text30
  9220  002E40                     __ptext30:
  9221                           	opt stack 0
  9222  002E40                     _init_clcd_cusotom_lcd:
  9223                           	opt stack 17
  9224                           
  9225                           ;incstack = 0
  9226                           ;init_clcd_cusotom_lcd@clcd_init_row stored from wreg
  9227  002E40  6E31               	movwf	init_clcd_cusotom_lcd@clcd_init_row,c
  9228                           
  9229                           ;clcd.c: 51: init_CLCD_config();
  9230  002E42  ECB0  F018         	call	_init_CLCD_config	;wreg free
  9231                           
  9232                           ;clcd.c: 52: data_count = 0;
  9233  002E46  0E00               	movlw	0
  9234  002E48  6E43               	movwf	_data_count,c
  9235                           
  9236                           ;clcd.c: 53: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details)
      +                          );
  9237  002E4A  0E96               	movlw	low _clcd_display_string_details
  9238  002E4C  6E24               	movwf	memset@p1,c
  9239  002E4E  0E02               	movlw	high _clcd_display_string_details
  9240  002E50  6E25               	movwf	memset@p1+1,c
  9241  002E52  0E00               	movlw	0
  9242  002E54  6E27               	movwf	memset@c+1,c
  9243  002E56  0E00               	movlw	0
  9244  002E58  6E26               	movwf	memset@c,c
  9245  002E5A  0E04               	movlw	4
  9246  002E5C  6E29               	movwf	memset@n+1,c
  9247  002E5E  0E4C               	movlw	76
  9248  002E60  6E28               	movwf	memset@n,c
  9249  002E62  ECBB  F01F         	call	_memset	;wreg free
  9250                           
  9251                           ;clcd.c: 54: memset(conflict_arr, 0, sizeof (conflict_arr));
  9252  002E66  0EBB               	movlw	low _conflict_arr
  9253  002E68  6E24               	movwf	memset@p1,c
  9254  002E6A  0E00               	movlw	high _conflict_arr
  9255  002E6C  6E25               	movwf	memset@p1+1,c
  9256  002E6E  0E00               	movlw	0
  9257  002E70  6E27               	movwf	memset@c+1,c
  9258  002E72  0E00               	movlw	0
  9259  002E74  6E26               	movwf	memset@c,c
  9260  002E76  0E00               	movlw	0
  9261  002E78  6E29               	movwf	memset@n+1,c
  9262  002E7A  0E28               	movlw	40
  9263  002E7C  6E28               	movwf	memset@n,c
  9264  002E7E  ECBB  F01F         	call	_memset	;wreg free
  9265                           
  9266                           ;clcd.c: 55: clcd_config_data.init_done = 1;
  9267  002E82  0E01               	movlw	1
  9268  002E84  6E49               	movwf	_clcd_config_data,c
  9269                           
  9270                           ;clcd.c: 56: printf("row = %d", clcd_init_row);
  9271  002E86  0E71               	movlw	low STR_1
  9272  002E88  6E1E               	movwf	printf@f,c
  9273  002E8A  0EFF               	movlw	high STR_1
  9274  002E8C  6E1F               	movwf	printf@f+1,c
  9275  002E8E  C031  F020         	movff	init_clcd_cusotom_lcd@clcd_init_row,?_printf+2
  9276  002E92  6A21               	clrf	?_printf+3,c
  9277  002E94  EC03  F015         	call	_printf	;wreg free
  9278                           
  9279                           ;clcd.c: 57: clcd_config_data.clcd_max_row = clcd_init_row;
  9280  002E98  C031  F04A         	movff	init_clcd_cusotom_lcd@clcd_init_row,_clcd_config_data+1
  9281                           
  9282                           ;clcd.c: 58: printf("col = %d", clcd_init_col);
  9283  002E9C  0E68               	movlw	low STR_2
  9284  002E9E  6E1E               	movwf	printf@f,c
  9285  002EA0  0EFF               	movlw	high STR_2
  9286  002EA2  6E1F               	movwf	printf@f+1,c
  9287  002EA4  C030  F020         	movff	init_clcd_cusotom_lcd@clcd_init_col,?_printf+2
  9288  002EA8  6A21               	clrf	?_printf+3,c
  9289  002EAA  EC03  F015         	call	_printf	;wreg free
  9290                           
  9291                           ;clcd.c: 59: clcd_config_data.clcd_max_col = clcd_init_col;
  9292  002EAE  C030  F04B         	movff	init_clcd_cusotom_lcd@clcd_init_col,_clcd_config_data+2
  9293                           
  9294                           ;clcd.c: 60: printf("string_count = %d", (clcd_init_col / 4) * clcd_init_row);
  9295  002EB2  0EEF               	movlw	low STR_3
  9296  002EB4  6E1E               	movwf	printf@f,c
  9297  002EB6  0EFD               	movlw	high STR_3
  9298  002EB8  6E1F               	movwf	printf@f+1,c
  9299  002EBA  0E00               	movlw	0
  9300  002EBC  6E13               	movwf	___awdiv@divisor+1,c
  9301  002EBE  0E04               	movlw	4
  9302  002EC0  6E12               	movwf	___awdiv@divisor,c
  9303  002EC2  C030  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  9304  002EC6  6A11               	clrf	___awdiv@dividend+1,c
  9305  002EC8  EC7E  F01B         	call	___awdiv	;wreg free
  9306  002ECC  C010  F018         	movff	?___awdiv,___wmul@multiplier
  9307  002ED0  C011  F019         	movff	?___awdiv+1,___wmul@multiplier+1
  9308  002ED4  C031  F01A         	movff	init_clcd_cusotom_lcd@clcd_init_row,___wmul@multiplicand
  9309  002ED8  6A1B               	clrf	___wmul@multiplicand+1,c
  9310  002EDA  ECE7  F01F         	call	___wmul	;wreg free
  9311  002EDE  C018  F020         	movff	?___wmul,?_printf+2
  9312  002EE2  C019  F021         	movff	?___wmul+1,?_printf+3
  9313  002EE6  EC03  F015         	call	_printf	;wreg free
  9314                           
  9315                           ;clcd.c: 61: clcd_config_data.clcd_max_display_string = (clcd_init_col / 4) * clcd_init_
      +                          row;
  9316  002EEA  C030  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  9317  002EEE  6A11               	clrf	___awdiv@dividend+1,c
  9318  002EF0  0E00               	movlw	0
  9319  002EF2  6E13               	movwf	___awdiv@divisor+1,c
  9320  002EF4  0E04               	movlw	4
  9321  002EF6  6E12               	movwf	___awdiv@divisor,c
  9322  002EF8  EC7E  F01B         	call	___awdiv	;wreg free
  9323  002EFC  5010               	movf	?___awdiv,w,c
  9324  002EFE  0231               	mulwf	init_clcd_cusotom_lcd@clcd_init_row,c
  9325  002F00  CFF3 F04D          	movff	prodl,_clcd_config_data+4
  9326                           
  9327                           ;clcd.c: 62: clcd_config_data.uid_range = 'A' + clcd_config_data.clcd_max_display_string
      +                          ;
  9328  002F04  504D               	movf	_clcd_config_data+4,w,c
  9329  002F06  0F41               	addlw	65
  9330  002F08  6E4C               	movwf	_clcd_config_data+3,c
  9331                           
  9332                           ;clcd.c: 63: printf("uid_range = %d\r\n", clcd_config_data.uid_range);
  9333  002F0A  0E12               	movlw	low STR_4
  9334  002F0C  6E1E               	movwf	printf@f,c
  9335  002F0E  0EFE               	movlw	high STR_4
  9336  002F10  6E1F               	movwf	printf@f+1,c
  9337  002F12  C04C  F020         	movff	_clcd_config_data+3,?_printf+2
  9338  002F16  6A21               	clrf	?_printf+3,c
  9339  002F18  EC03  F015         	call	_printf	;wreg free
  9340  002F1C  0012               	return		;funcret
  9341  002F1E                     __end_of_init_clcd_cusotom_lcd:
  9342                           	opt stack 0
  9343                           tblptru	equ	0xFF8
  9344                           tblptrh	equ	0xFF7
  9345                           tblptrl	equ	0xFF6
  9346                           tablat	equ	0xFF5
  9347                           prodh	equ	0xFF4
  9348                           prodl	equ	0xFF3
  9349                           intcon	equ	0xFF2
  9350                           postinc0	equ	0xFEE
  9351                           wreg	equ	0xFE8
  9352                           indf1	equ	0xFE7
  9353                           postinc1	equ	0xFE6
  9354                           postdec1	equ	0xFE5
  9355                           fsr1h	equ	0xFE2
  9356                           fsr1l	equ	0xFE1
  9357                           indf2	equ	0xFDF
  9358                           postinc2	equ	0xFDE
  9359                           postdec2	equ	0xFDD
  9360                           fsr2h	equ	0xFDA
  9361                           fsr2l	equ	0xFD9
  9362                           status	equ	0xFD8
  9363                           
  9364 ;; *************** function _init_CLCD_config *****************
  9365 ;; Defined at:
  9366 ;;		line 16 in file "clcd.c"
  9367 ;; Parameters:    Size  Location     Type
  9368 ;;		None
  9369 ;; Auto vars:     Size  Location     Type
  9370 ;;		None
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  1    wreg      void 
  9373 ;; Registers used:
  9374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;Total ram usage:        0 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:   10
  9387 ;; This function calls:
  9388 ;;		__delay_MS
  9389 ;;		_clcd_display_string_config
  9390 ;;		_memset
  9391 ;;		_reset_clcd
  9392 ;;		_write_lcd_cmd
  9393 ;; This function is called by:
  9394 ;;		_init_clcd_cusotom_lcd
  9395 ;;		_init_clcd_lcd_16x2
  9396 ;;		_init_clcd_lcd_20x4
  9397 ;; This function uses a non-reentrant model
  9398 ;;
  9399                           
  9400                           	psect	text31
  9401  003160                     __ptext31:
  9402                           	opt stack 0
  9403  003160                     _init_CLCD_config:
  9404                           	opt stack 17
  9405                           
  9406                           ;clcd.c: 17: memset(&clcd_config_data, 0, sizeof (CLCD_CONFIG_DATA));
  9407                           
  9408                           ;incstack = 0
  9409  003160  0E49               	movlw	low _clcd_config_data
  9410  003162  6E24               	movwf	memset@p1,c
  9411  003164  0E00               	movlw	high _clcd_config_data
  9412  003166  6E25               	movwf	memset@p1+1,c
  9413  003168  0E00               	movlw	0
  9414  00316A  6E27               	movwf	memset@c+1,c
  9415  00316C  0E00               	movlw	0
  9416  00316E  6E26               	movwf	memset@c,c
  9417  003170  0E00               	movlw	0
  9418  003172  6E29               	movwf	memset@n+1,c
  9419  003174  0E05               	movlw	5
  9420  003176  6E28               	movwf	memset@n,c
  9421  003178  ECBB  F01F         	call	_memset	;wreg free
  9422                           
  9423                           ;clcd.c: 19: TRISD = 0x00;
  9424  00317C  0E00               	movlw	0
  9425  00317E  6E95               	movwf	3989,c	;volatile
  9426                           
  9427                           ;clcd.c: 22: TRISA = (unsigned char) (TRISA | 0xF0);
  9428  003180  5092               	movf	3986,w,c	;volatile
  9429  003182  09F0               	iorlw	240
  9430  003184  6E92               	movwf	3986,c	;volatile
  9431                           
  9432                           ;clcd.c: 24: PORTAbits.RA0 = 0;
  9433  003186  9080               	bcf	3968,0,c	;volatile
  9434                           
  9435                           ;clcd.c: 25: _delay_MS(250);
  9436  003188  0E00               	movlw	0
  9437  00318A  6E11               	movwf	__delay_MS@delay+1,c
  9438  00318C  0EFA               	movlw	250
  9439  00318E  6E10               	movwf	__delay_MS@delay,c
  9440  003190  EC2E  F01E         	call	__delay_MS	;wreg free
  9441                           
  9442                           ;clcd.c: 28: write_lcd_cmd(0X38);
  9443  003194  0E38               	movlw	56
  9444  003196  EC7C  F020         	call	_write_lcd_cmd
  9445                           
  9446                           ;clcd.c: 29: _delay_MS(250);
  9447  00319A  0E00               	movlw	0
  9448  00319C  6E11               	movwf	__delay_MS@delay+1,c
  9449  00319E  0EFA               	movlw	250
  9450  0031A0  6E10               	movwf	__delay_MS@delay,c
  9451  0031A2  EC2E  F01E         	call	__delay_MS	;wreg free
  9452                           
  9453                           ;clcd.c: 31: write_lcd_cmd(0x0E);;
  9454  0031A6  0E0E               	movlw	14
  9455  0031A8  EC7C  F020         	call	_write_lcd_cmd
  9456                           
  9457                           ;clcd.c: 32: _delay_MS(250);
  9458  0031AC  0E00               	movlw	0
  9459  0031AE  6E11               	movwf	__delay_MS@delay+1,c
  9460  0031B0  0EFA               	movlw	250
  9461  0031B2  6E10               	movwf	__delay_MS@delay,c
  9462  0031B4  EC2E  F01E         	call	__delay_MS	;wreg free
  9463                           
  9464                           ;clcd.c: 34: write_lcd_cmd(0x01);;
  9465  0031B8  0E01               	movlw	1
  9466  0031BA  EC7C  F020         	call	_write_lcd_cmd
  9467                           
  9468                           ;clcd.c: 35: _delay_MS(250);
  9469  0031BE  0E00               	movlw	0
  9470  0031C0  6E11               	movwf	__delay_MS@delay+1,c
  9471  0031C2  0EFA               	movlw	250
  9472  0031C4  6E10               	movwf	__delay_MS@delay,c
  9473  0031C6  EC2E  F01E         	call	__delay_MS	;wreg free
  9474                           
  9475                           ;clcd.c: 37: write_lcd_cmd(0x06);;
  9476  0031CA  0E06               	movlw	6
  9477  0031CC  EC7C  F020         	call	_write_lcd_cmd
  9478                           
  9479                           ;clcd.c: 38: _delay_MS(250);
  9480  0031D0  0E00               	movlw	0
  9481  0031D2  6E11               	movwf	__delay_MS@delay+1,c
  9482  0031D4  0EFA               	movlw	250
  9483  0031D6  6E10               	movwf	__delay_MS@delay,c
  9484  0031D8  EC2E  F01E         	call	__delay_MS	;wreg free
  9485                           
  9486                           ;clcd.c: 40: write_lcd_cmd(0x0F);
  9487  0031DC  0E0F               	movlw	15
  9488  0031DE  EC7C  F020         	call	_write_lcd_cmd
  9489                           
  9490                           ;clcd.c: 41: _delay_MS(250);
  9491  0031E2  0E00               	movlw	0
  9492  0031E4  6E11               	movwf	__delay_MS@delay+1,c
  9493  0031E6  0EFA               	movlw	250
  9494  0031E8  6E10               	movwf	__delay_MS@delay,c
  9495  0031EA  EC2E  F01E         	call	__delay_MS	;wreg free
  9496                           
  9497                           ;clcd.c: 43: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  9498  0031EE  0E00               	movlw	low _lcd_display_array
  9499  0031F0  6E24               	movwf	memset@p1,c
  9500  0031F2  0E01               	movlw	high _lcd_display_array
  9501  0031F4  6E25               	movwf	memset@p1+1,c
  9502  0031F6  0E00               	movlw	0
  9503  0031F8  6E27               	movwf	memset@c+1,c
  9504  0031FA  0E20               	movlw	32
  9505  0031FC  6E26               	movwf	memset@c,c
  9506  0031FE  0E00               	movlw	0
  9507  003200  6E29               	movwf	memset@n+1,c
  9508  003202  0E50               	movlw	80
  9509  003204  6E28               	movwf	memset@n,c
  9510  003206  ECBB  F01F         	call	_memset	;wreg free
  9511                           
  9512                           ;clcd.c: 45: clcd_display_string_config();
  9513  00320A  EC96  F01C         	call	_clcd_display_string_config	;wreg free
  9514                           
  9515                           ;clcd.c: 47: reset_clcd();
  9516  00320E  EC0D  F021         	call	_reset_clcd	;wreg free
  9517  003212  0012               	return		;funcret
  9518  003214                     __end_of_init_CLCD_config:
  9519                           	opt stack 0
  9520                           tblptru	equ	0xFF8
  9521                           tblptrh	equ	0xFF7
  9522                           tblptrl	equ	0xFF6
  9523                           tablat	equ	0xFF5
  9524                           prodh	equ	0xFF4
  9525                           prodl	equ	0xFF3
  9526                           intcon	equ	0xFF2
  9527                           postinc0	equ	0xFEE
  9528                           wreg	equ	0xFE8
  9529                           indf1	equ	0xFE7
  9530                           postinc1	equ	0xFE6
  9531                           postdec1	equ	0xFE5
  9532                           fsr1h	equ	0xFE2
  9533                           fsr1l	equ	0xFE1
  9534                           indf2	equ	0xFDF
  9535                           postinc2	equ	0xFDE
  9536                           postdec2	equ	0xFDD
  9537                           fsr2h	equ	0xFDA
  9538                           fsr2l	equ	0xFD9
  9539                           status	equ	0xFD8
  9540                           
  9541 ;; *************** function _write_lcd_cmd *****************
  9542 ;; Defined at:
  9543 ;;		line 441 in file "clcd.c"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;  cmd             1    wreg     unsigned char 
  9546 ;; Auto vars:     Size  Location     Type
  9547 ;;  cmd             1   22[COMRAM] unsigned char 
  9548 ;; Return value:  Size  Location     Type
  9549 ;;                  1    wreg      void 
  9550 ;; Registers used:
  9551 ;;		wreg, status,2, status,0, cstack
  9552 ;; Tracked objects:
  9553 ;;		On entry : 0/0
  9554 ;;		On exit  : 0/0
  9555 ;;		Unchanged: 0/0
  9556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9558 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;Total ram usage:        1 bytes
  9562 ;; Hardware stack levels used:    1
  9563 ;; Hardware stack levels required when called:    6
  9564 ;; This function calls:
  9565 ;;		_delay
  9566 ;; This function is called by:
  9567 ;;		_init_CLCD_config
  9568 ;;		_set_cursor
  9569 ;;		_char_enter_mode_left_to_right
  9570 ;;		_display_text
  9571 ;;		_set_cursor_at_home
  9572 ;;		_display_and_cursor_control
  9573 ;;		_scroll_display_right
  9574 ;;		_scroll_display_left
  9575 ;;		_put_string
  9576 ;;		_put_char
  9577 ;; This function uses a non-reentrant model
  9578 ;;
  9579                           
  9580                           	psect	text32
  9581  0040F8                     __ptext32:
  9582                           	opt stack 0
  9583  0040F8                     _write_lcd_cmd:
  9584                           	opt stack 22
  9585                           
  9586                           ;incstack = 0
  9587                           ;write_lcd_cmd@cmd stored from wreg
  9588  0040F8  6E17               	movwf	write_lcd_cmd@cmd,c
  9589                           
  9590                           ;clcd.c: 442: PORTD = cmd;
  9591  0040FA  C017  FF83         	movff	write_lcd_cmd@cmd,3971	;volatile
  9592                           
  9593                           ;clcd.c: 443: PORTAbits.RA2 = 0;
  9594  0040FE  9480               	bcf	3968,2,c	;volatile
  9595                           
  9596                           ;clcd.c: 444: PORTAbits.RA1 = 0;
  9597  004100  9280               	bcf	3968,1,c	;volatile
  9598                           
  9599                           ;clcd.c: 445: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  9600  004102  8080               	bsf	3968,0,c	;volatile
  9601  004104  0E00               	movlw	0
  9602  004106  6E11               	movwf	delay@delay+1,c
  9603  004108  0E01               	movlw	1
  9604  00410A  6E10               	movwf	delay@delay,c
  9605  00410C  ECBF  F01D         	call	_delay	;wreg free
  9606  004110  9080               	bcf	3968,0,c	;volatile
  9607  004112  0012               	return		;funcret
  9608  004114                     __end_of_write_lcd_cmd:
  9609                           	opt stack 0
  9610                           tblptru	equ	0xFF8
  9611                           tblptrh	equ	0xFF7
  9612                           tblptrl	equ	0xFF6
  9613                           tablat	equ	0xFF5
  9614                           prodh	equ	0xFF4
  9615                           prodl	equ	0xFF3
  9616                           intcon	equ	0xFF2
  9617                           postinc0	equ	0xFEE
  9618                           wreg	equ	0xFE8
  9619                           indf1	equ	0xFE7
  9620                           postinc1	equ	0xFE6
  9621                           postdec1	equ	0xFE5
  9622                           fsr1h	equ	0xFE2
  9623                           fsr1l	equ	0xFE1
  9624                           indf2	equ	0xFDF
  9625                           postinc2	equ	0xFDE
  9626                           postdec2	equ	0xFDD
  9627                           fsr2h	equ	0xFDA
  9628                           fsr2l	equ	0xFD9
  9629                           status	equ	0xFD8
  9630                           
  9631 ;; *************** function _reset_clcd *****************
  9632 ;; Defined at:
  9633 ;;		line 11 in file "clcd.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;		None
  9636 ;; Auto vars:     Size  Location     Type
  9637 ;;		None
  9638 ;; Return value:  Size  Location     Type
  9639 ;;                  1    wreg      void 
  9640 ;; Registers used:
  9641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;Total ram usage:        0 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    9
  9654 ;; This function calls:
  9655 ;;		_clear_display_array
  9656 ;;		_reset_display_structure_count
  9657 ;; This function is called by:
  9658 ;;		_init_CLCD_config
  9659 ;; This function uses a non-reentrant model
  9660 ;;
  9661                           
  9662                           	psect	text33
  9663  00421A                     __ptext33:
  9664                           	opt stack 0
  9665  00421A                     _reset_clcd:
  9666                           	opt stack 17
  9667                           
  9668                           ;clcd.c: 12: clear_display_array();
  9669                           
  9670                           ;incstack = 0
  9671  00421A  EC1F  F020         	call	_clear_display_array	;wreg free
  9672                           
  9673                           ;clcd.c: 13: reset_display_structure_count();
  9674  00421E  ECB5  F020         	call	_reset_display_structure_count	;wreg free
  9675  004222  0012               	return		;funcret
  9676  004224                     __end_of_reset_clcd:
  9677                           	opt stack 0
  9678                           tblptru	equ	0xFF8
  9679                           tblptrh	equ	0xFF7
  9680                           tblptrl	equ	0xFF6
  9681                           tablat	equ	0xFF5
  9682                           prodh	equ	0xFF4
  9683                           prodl	equ	0xFF3
  9684                           intcon	equ	0xFF2
  9685                           postinc0	equ	0xFEE
  9686                           wreg	equ	0xFE8
  9687                           indf1	equ	0xFE7
  9688                           postinc1	equ	0xFE6
  9689                           postdec1	equ	0xFE5
  9690                           fsr1h	equ	0xFE2
  9691                           fsr1l	equ	0xFE1
  9692                           indf2	equ	0xFDF
  9693                           postinc2	equ	0xFDE
  9694                           postdec2	equ	0xFDD
  9695                           fsr2h	equ	0xFDA
  9696                           fsr2l	equ	0xFD9
  9697                           status	equ	0xFD8
  9698                           
  9699 ;; *************** function _clear_display_array *****************
  9700 ;; Defined at:
  9701 ;;		line 547 in file "clcd.c"
  9702 ;; Parameters:    Size  Location     Type
  9703 ;;		None
  9704 ;; Auto vars:     Size  Location     Type
  9705 ;;		None
  9706 ;; Return value:  Size  Location     Type
  9707 ;;                  1    wreg      void 
  9708 ;; Registers used:
  9709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9710 ;; Tracked objects:
  9711 ;;		On entry : 0/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9719 ;;Total ram usage:        0 bytes
  9720 ;; Hardware stack levels used:    1
  9721 ;; Hardware stack levels required when called:    8
  9722 ;; This function calls:
  9723 ;;		_memset
  9724 ;;		_reset_display_structure_count
  9725 ;; This function is called by:
  9726 ;;		_reset_clcd
  9727 ;; This function uses a non-reentrant model
  9728 ;;
  9729                           
  9730                           	psect	text34
  9731  00403E                     __ptext34:
  9732                           	opt stack 0
  9733  00403E                     _clear_display_array:
  9734                           	opt stack 17
  9735                           
  9736                           ;clcd.c: 548: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  9737                           
  9738                           ;incstack = 0
  9739  00403E  0E00               	movlw	low _lcd_display_array
  9740  004040  6E24               	movwf	memset@p1,c
  9741  004042  0E01               	movlw	high _lcd_display_array
  9742  004044  6E25               	movwf	memset@p1+1,c
  9743  004046  0E00               	movlw	0
  9744  004048  6E27               	movwf	memset@c+1,c
  9745  00404A  0E20               	movlw	32
  9746  00404C  6E26               	movwf	memset@c,c
  9747  00404E  0E00               	movlw	0
  9748  004050  6E29               	movwf	memset@n+1,c
  9749  004052  0E50               	movlw	80
  9750  004054  6E28               	movwf	memset@n,c
  9751  004056  ECBB  F01F         	call	_memset	;wreg free
  9752                           
  9753                           ;clcd.c: 549: reset_display_structure_count();
  9754  00405A  ECB5  F020         	call	_reset_display_structure_count	;wreg free
  9755  00405E  0012               	return		;funcret
  9756  004060                     __end_of_clear_display_array:
  9757                           	opt stack 0
  9758                           tblptru	equ	0xFF8
  9759                           tblptrh	equ	0xFF7
  9760                           tblptrl	equ	0xFF6
  9761                           tablat	equ	0xFF5
  9762                           prodh	equ	0xFF4
  9763                           prodl	equ	0xFF3
  9764                           intcon	equ	0xFF2
  9765                           postinc0	equ	0xFEE
  9766                           wreg	equ	0xFE8
  9767                           indf1	equ	0xFE7
  9768                           postinc1	equ	0xFE6
  9769                           postdec1	equ	0xFE5
  9770                           fsr1h	equ	0xFE2
  9771                           fsr1l	equ	0xFE1
  9772                           indf2	equ	0xFDF
  9773                           postinc2	equ	0xFDE
  9774                           postdec2	equ	0xFDD
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function _reset_display_structure_count *****************
  9780 ;; Defined at:
  9781 ;;		line 542 in file "clcd.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;		None
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;		None
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  1    wreg      void 
  9788 ;; Registers used:
  9789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;Total ram usage:        0 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    7
  9802 ;; This function calls:
  9803 ;;		_clear_display_structure
  9804 ;; This function is called by:
  9805 ;;		_reset_clcd
  9806 ;;		_clear_display_array
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text35
  9811  00416A                     __ptext35:
  9812                           	opt stack 0
  9813  00416A                     _reset_display_structure_count:
  9814                           	opt stack 18
  9815                           
  9816                           ;clcd.c: 543: display_struct_count = 0;
  9817                           
  9818                           ;incstack = 0
  9819  00416A  0E00               	movlw	0
  9820  00416C  0100               	movlb	0	; () banked
  9821  00416E  6F75               	movwf	(_display_struct_count+1)& (0+255),b
  9822  004170  0E00               	movlw	0
  9823  004172  6F74               	movwf	_display_struct_count& (0+255),b
  9824                           
  9825                           ; BSR set to: 0
  9826                           ;clcd.c: 544: clear_display_structure();
  9827  004174  EC40  F020         	call	_clear_display_structure	;wreg free
  9828  004178  0012               	return		;funcret
  9829  00417A                     __end_of_reset_display_structure_count:
  9830                           	opt stack 0
  9831                           tblptru	equ	0xFF8
  9832                           tblptrh	equ	0xFF7
  9833                           tblptrl	equ	0xFF6
  9834                           tablat	equ	0xFF5
  9835                           prodh	equ	0xFF4
  9836                           prodl	equ	0xFF3
  9837                           intcon	equ	0xFF2
  9838                           postinc0	equ	0xFEE
  9839                           wreg	equ	0xFE8
  9840                           indf1	equ	0xFE7
  9841                           postinc1	equ	0xFE6
  9842                           postdec1	equ	0xFE5
  9843                           fsr1h	equ	0xFE2
  9844                           fsr1l	equ	0xFE1
  9845                           indf2	equ	0xFDF
  9846                           postinc2	equ	0xFDE
  9847                           postdec2	equ	0xFDD
  9848                           fsr2h	equ	0xFDA
  9849                           fsr2l	equ	0xFD9
  9850                           status	equ	0xFD8
  9851                           
  9852 ;; *************** function _clear_display_structure *****************
  9853 ;; Defined at:
  9854 ;;		line 538 in file "clcd.c"
  9855 ;; Parameters:    Size  Location     Type
  9856 ;;		None
  9857 ;; Auto vars:     Size  Location     Type
  9858 ;;		None
  9859 ;; Return value:  Size  Location     Type
  9860 ;;                  1    wreg      void 
  9861 ;; Registers used:
  9862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9863 ;; Tracked objects:
  9864 ;;		On entry : 0/0
  9865 ;;		On exit  : 0/0
  9866 ;;		Unchanged: 0/0
  9867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9872 ;;Total ram usage:        0 bytes
  9873 ;; Hardware stack levels used:    1
  9874 ;; Hardware stack levels required when called:    6
  9875 ;; This function calls:
  9876 ;;		_memset
  9877 ;; This function is called by:
  9878 ;;		_reset_display_structure_count
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882                           	psect	text36
  9883  004080                     __ptext36:
  9884                           	opt stack 0
  9885  004080                     _clear_display_structure:
  9886                           	opt stack 18
  9887                           
  9888                           ;clcd.c: 539: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details
      +                          ));
  9889                           
  9890                           ;incstack = 0
  9891  004080  0E96               	movlw	low _clcd_display_string_details
  9892  004082  6E24               	movwf	memset@p1,c
  9893  004084  0E02               	movlw	high _clcd_display_string_details
  9894  004086  6E25               	movwf	memset@p1+1,c
  9895  004088  0E00               	movlw	0
  9896  00408A  6E27               	movwf	memset@c+1,c
  9897  00408C  0E00               	movlw	0
  9898  00408E  6E26               	movwf	memset@c,c
  9899  004090  0E04               	movlw	4
  9900  004092  6E29               	movwf	memset@n+1,c
  9901  004094  0E4C               	movlw	76
  9902  004096  6E28               	movwf	memset@n,c
  9903  004098  ECBB  F01F         	call	_memset	;wreg free
  9904  00409C  0012               	return		;funcret
  9905  00409E                     __end_of_clear_display_structure:
  9906                           	opt stack 0
  9907                           tblptru	equ	0xFF8
  9908                           tblptrh	equ	0xFF7
  9909                           tblptrl	equ	0xFF6
  9910                           tablat	equ	0xFF5
  9911                           prodh	equ	0xFF4
  9912                           prodl	equ	0xFF3
  9913                           intcon	equ	0xFF2
  9914                           postinc0	equ	0xFEE
  9915                           wreg	equ	0xFE8
  9916                           indf1	equ	0xFE7
  9917                           postinc1	equ	0xFE6
  9918                           postdec1	equ	0xFE5
  9919                           fsr1h	equ	0xFE2
  9920                           fsr1l	equ	0xFE1
  9921                           indf2	equ	0xFDF
  9922                           postinc2	equ	0xFDE
  9923                           postdec2	equ	0xFDD
  9924                           fsr2h	equ	0xFDA
  9925                           fsr2l	equ	0xFD9
  9926                           status	equ	0xFD8
  9927                           
  9928 ;; *************** function _clcd_display_string_config *****************
  9929 ;; Defined at:
  9930 ;;		line 359 in file "clcd.c"
  9931 ;; Parameters:    Size  Location     Type
  9932 ;;		None
  9933 ;; Auto vars:     Size  Location     Type
  9934 ;;		None
  9935 ;; Return value:  Size  Location     Type
  9936 ;;                  1    wreg      void 
  9937 ;; Registers used:
  9938 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9939 ;; Tracked objects:
  9940 ;;		On entry : 0/0
  9941 ;;		On exit  : 0/0
  9942 ;;		Unchanged: 0/0
  9943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9948 ;;Total ram usage:        0 bytes
  9949 ;; Hardware stack levels used:    1
  9950 ;; Hardware stack levels required when called:    8
  9951 ;; This function calls:
  9952 ;;		_memcpy
  9953 ;;		_memset
  9954 ;;		_printf
  9955 ;;		_write_str
  9956 ;; This function is called by:
  9957 ;;		_init_CLCD_config
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           	psect	text37
  9962  00392C                     __ptext37:
  9963                           	opt stack 0
  9964  00392C                     _clcd_display_string_config:
  9965                           	opt stack 18
  9966                           
  9967                           ;clcd.c: 360: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  9968                           
  9969                           ;incstack = 0
  9970  00392C  0E00               	movlw	low _lcd_display_array
  9971  00392E  6E24               	movwf	memset@p1,c
  9972  003930  0E01               	movlw	high _lcd_display_array
  9973  003932  6E25               	movwf	memset@p1+1,c
  9974  003934  0E00               	movlw	0
  9975  003936  6E27               	movwf	memset@c+1,c
  9976  003938  0E20               	movlw	32
  9977  00393A  6E26               	movwf	memset@c,c
  9978  00393C  0E00               	movlw	0
  9979  00393E  6E29               	movwf	memset@n+1,c
  9980  003940  0E50               	movlw	80
  9981  003942  6E28               	movwf	memset@n,c
  9982  003944  ECBB  F01F         	call	_memset	;wreg free
  9983                           
  9984                           ;clcd.c: 361: printf("sizeof(str) = %d\r\n", sizeof (str));
  9985  003948  0EB8               	movlw	low STR_21
  9986  00394A  6E1E               	movwf	printf@f,c
  9987  00394C  0EFD               	movlw	high STR_21
  9988  00394E  6E1F               	movwf	printf@f+1,c
  9989  003950  0E00               	movlw	0
  9990  003952  6E21               	movwf	?_printf+3,c
  9991  003954  0E0D               	movlw	13
  9992  003956  6E20               	movwf	?_printf+2,c
  9993  003958  EC03  F015         	call	_printf	;wreg free
  9994                           
  9995                           ;clcd.c: 362: memcpy(lcd_display_array[0], str, sizeof (str));
  9996  00395C  0E00               	movlw	low _lcd_display_array
  9997  00395E  6E10               	movwf	memcpy@d1,c
  9998  003960  0E01               	movlw	high _lcd_display_array
  9999  003962  6E11               	movwf	memcpy@d1+1,c
 10000  003964  0E86               	movlw	low _str
 10001  003966  6E12               	movwf	memcpy@s1,c
 10002  003968  0E01               	movlw	high _str
 10003  00396A  6E13               	movwf	memcpy@s1+1,c
 10004  00396C  0E00               	movlw	0
 10005  00396E  6E15               	movwf	memcpy@n+1,c
 10006  003970  0E0D               	movlw	13
 10007  003972  6E14               	movwf	memcpy@n,c
 10008  003974  EC71  F01E         	call	_memcpy	;wreg free
 10009                           
 10010                           ;clcd.c: 363: write_str(lcd_display_array[0]);
 10011  003978  0E00               	movlw	low _lcd_display_array
 10012  00397A  6E18               	movwf	write_str@str,c
 10013  00397C  0E01               	movlw	high _lcd_display_array
 10014  00397E  6E19               	movwf	write_str@str+1,c
 10015  003980  ECD0  F01E         	call	_write_str	;wreg free
 10016  003984  0012               	return		;funcret
 10017  003986                     __end_of_clcd_display_string_config:
 10018                           	opt stack 0
 10019                           tblptru	equ	0xFF8
 10020                           tblptrh	equ	0xFF7
 10021                           tblptrl	equ	0xFF6
 10022                           tablat	equ	0xFF5
 10023                           prodh	equ	0xFF4
 10024                           prodl	equ	0xFF3
 10025                           intcon	equ	0xFF2
 10026                           postinc0	equ	0xFEE
 10027                           wreg	equ	0xFE8
 10028                           indf1	equ	0xFE7
 10029                           postinc1	equ	0xFE6
 10030                           postdec1	equ	0xFE5
 10031                           fsr1h	equ	0xFE2
 10032                           fsr1l	equ	0xFE1
 10033                           indf2	equ	0xFDF
 10034                           postinc2	equ	0xFDE
 10035                           postdec2	equ	0xFDD
 10036                           fsr2h	equ	0xFDA
 10037                           fsr2l	equ	0xFD9
 10038                           status	equ	0xFD8
 10039                           
 10040 ;; *************** function _write_str *****************
 10041 ;; Defined at:
 10042 ;;		line 455 in file "clcd.c"
 10043 ;; Parameters:    Size  Location     Type
 10044 ;;  str             2   23[COMRAM] PTR const unsigned char 
 10045 ;;		 -> lcd_display_array(80), 
 10046 ;; Auto vars:     Size  Location     Type
 10047 ;;  i               1   25[COMRAM] unsigned char 
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  1    wreg      void 
 10050 ;; Registers used:
 10051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10060 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;Total ram usage:        3 bytes
 10062 ;; Hardware stack levels used:    1
 10063 ;; Hardware stack levels required when called:    7
 10064 ;; This function calls:
 10065 ;;		_write_lcd_data
 10066 ;; This function is called by:
 10067 ;;		_clcd_display_string_config
 10068 ;;		_display_text
 10069 ;;		_put_string
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073                           	psect	text38
 10074  003DA0                     __ptext38:
 10075                           	opt stack 0
 10076  003DA0                     _write_str:
 10077                           	opt stack 21
 10078                           
 10079                           ;clcd.c: 457: unsigned char i = 0;
 10080                           
 10081                           ;incstack = 0
 10082  003DA0  0E00               	movlw	0
 10083  003DA2  6E1A               	movwf	write_str@i,c
 10084                           
 10085                           ;clcd.c: 458: while (i < clcd_config_data.clcd_max_col) {
 10086  003DA4  D015               	goto	l6776
 10087  003DA6                     l6764:
 10088                           
 10089                           ;clcd.c: 459: if (*str != (0))
 10090  003DA6  C018  FFD9         	movff	write_str@str,fsr2l
 10091  003DAA  C019  FFDA         	movff	write_str@str+1,fsr2h
 10092  003DAE  50DF               	movf	indf2,w,c
 10093  003DB0  B4D8               	btfsc	status,2,c
 10094  003DB2  D008               	goto	l6770
 10095                           
 10096                           ;clcd.c: 460: {
 10097                           ;clcd.c: 461: write_lcd_data(*str++);
 10098  003DB4  C018  FFD9         	movff	write_str@str,fsr2l
 10099  003DB8  C019  FFDA         	movff	write_str@str+1,fsr2h
 10100  003DBC  50DF               	movf	indf2,w,c
 10101  003DBE  EC8A  F020         	call	_write_lcd_data
 10102  003DC2  D003               	goto	l6772
 10103  003DC4                     l6770:
 10104                           
 10105                           ;clcd.c: 463: else
 10106                           ;clcd.c: 464: {
 10107                           ;clcd.c: 465: write_lcd_data(' ');
 10108  003DC4  0E20               	movlw	32
 10109  003DC6  EC8A  F020         	call	_write_lcd_data
 10110  003DCA                     l6772:
 10111                           
 10112                           ;clcd.c: 466: str++;
 10113  003DCA  4A18               	infsnz	write_str@str,f,c
 10114  003DCC  2A19               	incf	write_str@str+1,f,c
 10115                           
 10116                           ;clcd.c: 467: }
 10117                           ;clcd.c: 469: i++;
 10118  003DCE  2A1A               	incf	write_str@i,f,c
 10119  003DD0                     l6776:
 10120  003DD0  504B               	movf	_clcd_config_data+2,w,c
 10121  003DD2  5C1A               	subwf	write_str@i,w,c
 10122  003DD4  B0D8               	btfsc	status,0,c
 10123  003DD6  0012               	return	
 10124  003DD8  D7E6               	goto	l6764
 10125  003DDA                     __end_of_write_str:
 10126                           	opt stack 0
 10127                           tblptru	equ	0xFF8
 10128                           tblptrh	equ	0xFF7
 10129                           tblptrl	equ	0xFF6
 10130                           tablat	equ	0xFF5
 10131                           prodh	equ	0xFF4
 10132                           prodl	equ	0xFF3
 10133                           intcon	equ	0xFF2
 10134                           postinc0	equ	0xFEE
 10135                           wreg	equ	0xFE8
 10136                           indf1	equ	0xFE7
 10137                           postinc1	equ	0xFE6
 10138                           postdec1	equ	0xFE5
 10139                           fsr1h	equ	0xFE2
 10140                           fsr1l	equ	0xFE1
 10141                           indf2	equ	0xFDF
 10142                           postinc2	equ	0xFDE
 10143                           postdec2	equ	0xFDD
 10144                           fsr2h	equ	0xFDA
 10145                           fsr2l	equ	0xFD9
 10146                           status	equ	0xFD8
 10147                           
 10148 ;; *************** function _write_lcd_data *****************
 10149 ;; Defined at:
 10150 ;;		line 448 in file "clcd.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;  data            1    wreg     unsigned char 
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;  data            1   22[COMRAM] unsigned char 
 10155 ;; Return value:  Size  Location     Type
 10156 ;;                  1    wreg      void 
 10157 ;; Registers used:
 10158 ;;		wreg, status,2, status,0, cstack
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10167 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10168 ;;Total ram usage:        1 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; Hardware stack levels required when called:    6
 10171 ;; This function calls:
 10172 ;;		_delay
 10173 ;; This function is called by:
 10174 ;;		_write_str
 10175 ;;		_put_char
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           	psect	text39
 10180  004114                     __ptext39:
 10181                           	opt stack 0
 10182  004114                     _write_lcd_data:
 10183                           	opt stack 21
 10184                           
 10185                           ;incstack = 0
 10186                           ;write_lcd_data@data stored from wreg
 10187  004114  6E17               	movwf	write_lcd_data@data,c
 10188                           
 10189                           ;clcd.c: 449: PORTAbits.RA2 = 1;
 10190  004116  8480               	bsf	3968,2,c	;volatile
 10191                           
 10192                           ;clcd.c: 450: PORTAbits.RA1 = 0;
 10193  004118  9280               	bcf	3968,1,c	;volatile
 10194                           
 10195                           ;clcd.c: 451: PORTD = data;
 10196  00411A  C017  FF83         	movff	write_lcd_data@data,3971	;volatile
 10197                           
 10198                           ;clcd.c: 452: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
 10199  00411E  8080               	bsf	3968,0,c	;volatile
 10200  004120  0E00               	movlw	0
 10201  004122  6E11               	movwf	delay@delay+1,c
 10202  004124  0E01               	movlw	1
 10203  004126  6E10               	movwf	delay@delay,c
 10204  004128  ECBF  F01D         	call	_delay	;wreg free
 10205  00412C  9080               	bcf	3968,0,c	;volatile
 10206  00412E  0012               	return		;funcret
 10207  004130                     __end_of_write_lcd_data:
 10208                           	opt stack 0
 10209                           tblptru	equ	0xFF8
 10210                           tblptrh	equ	0xFF7
 10211                           tblptrl	equ	0xFF6
 10212                           tablat	equ	0xFF5
 10213                           prodh	equ	0xFF4
 10214                           prodl	equ	0xFF3
 10215                           intcon	equ	0xFF2
 10216                           postinc0	equ	0xFEE
 10217                           wreg	equ	0xFE8
 10218                           indf1	equ	0xFE7
 10219                           postinc1	equ	0xFE6
 10220                           postdec1	equ	0xFE5
 10221                           fsr1h	equ	0xFE2
 10222                           fsr1l	equ	0xFE1
 10223                           indf2	equ	0xFDF
 10224                           postinc2	equ	0xFDE
 10225                           postdec2	equ	0xFDD
 10226                           fsr2h	equ	0xFDA
 10227                           fsr2l	equ	0xFD9
 10228                           status	equ	0xFD8
 10229                           
 10230 ;; *************** function _delay *****************
 10231 ;; Defined at:
 10232 ;;		line 5 in file "delay.c"
 10233 ;; Parameters:    Size  Location     Type
 10234 ;;  delay           2   15[COMRAM] int 
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;  i               2   20[COMRAM] int 
 10237 ;;  val             2   18[COMRAM] int 
 10238 ;; Return value:  Size  Location     Type
 10239 ;;                  1    wreg      void 
 10240 ;; Registers used:
 10241 ;;		wreg, status,2, status,0
 10242 ;; Tracked objects:
 10243 ;;		On entry : 0/0
 10244 ;;		On exit  : 0/0
 10245 ;;		Unchanged: 0/0
 10246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10247 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10248 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10249 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10250 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10251 ;;Total ram usage:        7 bytes
 10252 ;; Hardware stack levels used:    1
 10253 ;; Hardware stack levels required when called:    5
 10254 ;; This function calls:
 10255 ;;		Nothing
 10256 ;; This function is called by:
 10257 ;;		_write_lcd_cmd
 10258 ;;		_write_lcd_data
 10259 ;;		_is_busy
 10260 ;; This function uses a non-reentrant model
 10261 ;;
 10262                           
 10263                           	psect	text40
 10264  003B7E                     __ptext40:
 10265                           	opt stack 0
 10266  003B7E                     _delay:
 10267                           	opt stack 21
 10268                           
 10269                           ;delay.c: 7: int val = 0, i;
 10270                           
 10271                           ;incstack = 0
 10272  003B7E  0E00               	movlw	0
 10273  003B80  6E14               	movwf	delay@val+1,c
 10274  003B82  0E00               	movlw	0
 10275  003B84  6E13               	movwf	delay@val,c
 10276                           
 10277                           ;delay.c: 8: for (val = 0; val < delay; val++) {
 10278  003B86  0E00               	movlw	0
 10279  003B88  6E14               	movwf	delay@val+1,c
 10280  003B8A  0E00               	movlw	0
 10281  003B8C  6E13               	movwf	delay@val,c
 10282  003B8E  D011               	goto	l6588
 10283  003B90                     l6576:
 10284                           
 10285                           ;delay.c: 9: for(i=0; i<350; i++)
 10286  003B90  0E00               	movlw	0
 10287  003B92  6E16               	movwf	delay@i+1,c
 10288  003B94  0E00               	movlw	0
 10289  003B96  6E15               	movwf	delay@i,c
 10290  003B98                     l6578:
 10291  003B98  BE16               	btfsc	delay@i+1,7,c
 10292  003B9A  D006               	goto	l6582
 10293  003B9C  0E5E               	movlw	94
 10294  003B9E  5C15               	subwf	delay@i,w,c
 10295  003BA0  0E01               	movlw	1
 10296  003BA2  5816               	subwfb	delay@i+1,w,c
 10297  003BA4  B0D8               	btfsc	status,0,c
 10298  003BA6  D003               	goto	l6586
 10299  003BA8                     l6582:
 10300                           
 10301                           ;delay.c: 10: {
 10302  003BA8  4A15               	infsnz	delay@i,f,c
 10303  003BAA  2A16               	incf	delay@i+1,f,c
 10304  003BAC  D7F5               	goto	l6578
 10305  003BAE                     l6586:
 10306  003BAE  4A13               	infsnz	delay@val,f,c
 10307  003BB0  2A14               	incf	delay@val+1,f,c
 10308  003BB2                     l6588:
 10309  003BB2  5010               	movf	delay@delay,w,c
 10310  003BB4  5C13               	subwf	delay@val,w,c
 10311  003BB6  5014               	movf	delay@val+1,w,c
 10312  003BB8  0A80               	xorlw	128
 10313  003BBA  6E12               	movwf	??_delay& (0+255),c
 10314  003BBC  5011               	movf	delay@delay+1,w,c
 10315  003BBE  0A80               	xorlw	128
 10316  003BC0  5812               	subwfb	??_delay& (0+255),w,c
 10317  003BC2  B0D8               	btfsc	status,0,c
 10318  003BC4  0012               	return	
 10319  003BC6  D7E4               	goto	l6576
 10320  003BC8                     __end_of_delay:
 10321                           	opt stack 0
 10322                           tblptru	equ	0xFF8
 10323                           tblptrh	equ	0xFF7
 10324                           tblptrl	equ	0xFF6
 10325                           tablat	equ	0xFF5
 10326                           prodh	equ	0xFF4
 10327                           prodl	equ	0xFF3
 10328                           intcon	equ	0xFF2
 10329                           postinc0	equ	0xFEE
 10330                           wreg	equ	0xFE8
 10331                           indf1	equ	0xFE7
 10332                           postinc1	equ	0xFE6
 10333                           postdec1	equ	0xFE5
 10334                           fsr1h	equ	0xFE2
 10335                           fsr1l	equ	0xFE1
 10336                           indf2	equ	0xFDF
 10337                           postinc2	equ	0xFDE
 10338                           postdec2	equ	0xFDD
 10339                           fsr2h	equ	0xFDA
 10340                           fsr2l	equ	0xFD9
 10341                           status	equ	0xFD8
 10342                           
 10343 ;; *************** function _memcpy *****************
 10344 ;; Defined at:
 10345 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memcpy.c"
 10346 ;; Parameters:    Size  Location     Type
 10347 ;;  d1              2   15[COMRAM] PTR void 
 10348 ;;		 -> lcd_display_array(80), 
 10349 ;;  s1              2   17[COMRAM] PTR const void 
 10350 ;;		 -> str(13), 
 10351 ;;  n               2   19[COMRAM] unsigned int 
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;  s               2   23[COMRAM] PTR const unsigned char 
 10354 ;;		 -> str(13), 
 10355 ;;  d               2   21[COMRAM] PTR unsigned char 
 10356 ;;		 -> lcd_display_array(80), 
 10357 ;; Return value:  Size  Location     Type
 10358 ;;                  2   15[COMRAM] PTR void 
 10359 ;; Registers used:
 10360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10361 ;; Tracked objects:
 10362 ;;		On entry : 0/0
 10363 ;;		On exit  : 0/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10366 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10367 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10369 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10370 ;;Total ram usage:       10 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; Hardware stack levels required when called:    5
 10373 ;; This function calls:
 10374 ;;		Nothing
 10375 ;; This function is called by:
 10376 ;;		_clcd_display_string_config
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380                           	psect	text41
 10381  003CE2                     __ptext41:
 10382                           	opt stack 0
 10383  003CE2                     _memcpy:
 10384                           	opt stack 20
 10385                           
 10386                           ;incstack = 0
 10387  003CE2  C012  F018         	movff	memcpy@s1,memcpy@s
 10388  003CE6  C013  F019         	movff	memcpy@s1+1,memcpy@s+1
 10389  003CEA  C010  F016         	movff	memcpy@d1,memcpy@d
 10390  003CEE  C011  F017         	movff	memcpy@d1+1,memcpy@d+1
 10391  003CF2  D00E               	goto	l6760
 10392  003CF4                     l6754:
 10393  003CF4  C018  FFD9         	movff	memcpy@s,fsr2l
 10394  003CF8  C019  FFDA         	movff	memcpy@s+1,fsr2h
 10395  003CFC  C016  FFE1         	movff	memcpy@d,fsr1l
 10396  003D00  C017  FFE2         	movff	memcpy@d+1,fsr1h
 10397  003D04  CFDF FFE7          	movff	indf2,indf1
 10398  003D08  4A18               	infsnz	memcpy@s,f,c
 10399  003D0A  2A19               	incf	memcpy@s+1,f,c
 10400  003D0C  4A16               	infsnz	memcpy@d,f,c
 10401  003D0E  2A17               	incf	memcpy@d+1,f,c
 10402  003D10                     l6760:
 10403  003D10  0614               	decf	memcpy@n,f,c
 10404  003D12  A0D8               	btfss	status,0,c
 10405  003D14  0615               	decf	memcpy@n+1,f,c
 10406  003D16  2814               	incf	memcpy@n,w,c
 10407  003D18  E1ED               	bnz	l6754
 10408  003D1A  2815               	incf	memcpy@n+1,w,c
 10409  003D1C  B4D8               	btfsc	status,2,c
 10410  003D1E  0012               	return	
 10411  003D20  D7E9               	goto	l6754
 10412  003D22                     __end_of_memcpy:
 10413                           	opt stack 0
 10414                           tblptru	equ	0xFF8
 10415                           tblptrh	equ	0xFF7
 10416                           tblptrl	equ	0xFF6
 10417                           tablat	equ	0xFF5
 10418                           prodh	equ	0xFF4
 10419                           prodl	equ	0xFF3
 10420                           intcon	equ	0xFF2
 10421                           postinc0	equ	0xFEE
 10422                           wreg	equ	0xFE8
 10423                           indf1	equ	0xFE7
 10424                           postinc1	equ	0xFE6
 10425                           postdec1	equ	0xFE5
 10426                           fsr1h	equ	0xFE2
 10427                           fsr1l	equ	0xFE1
 10428                           indf2	equ	0xFDF
 10429                           postinc2	equ	0xFDE
 10430                           postdec2	equ	0xFDD
 10431                           fsr2h	equ	0xFDA
 10432                           fsr2l	equ	0xFD9
 10433                           status	equ	0xFD8
 10434                           
 10435 ;; *************** function __delay_MS *****************
 10436 ;; Defined at:
 10437 ;;		line 29 in file "delay.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;  delay           2   15[COMRAM] int 
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;  val             2   18[COMRAM] int 
 10442 ;; Return value:  Size  Location     Type
 10443 ;;                  1    wreg      void 
 10444 ;; Registers used:
 10445 ;;		wreg, status,2, status,0, cstack
 10446 ;; Tracked objects:
 10447 ;;		On entry : 0/0
 10448 ;;		On exit  : 0/0
 10449 ;;		Unchanged: 0/0
 10450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10451 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10452 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;Total ram usage:        5 bytes
 10456 ;; Hardware stack levels used:    1
 10457 ;; Hardware stack levels required when called:    6
 10458 ;; This function calls:
 10459 ;;		_TMR1_HasOverflowOccured
 10460 ;;		_TMR1_Reload
 10461 ;;		_TMR1_StartTimer
 10462 ;;		_TMR1_StopTimer
 10463 ;; This function is called by:
 10464 ;;		_init_CLCD_config
 10465 ;;		_main
 10466 ;;		_put_char
 10467 ;; This function uses a non-reentrant model
 10468 ;;
 10469                           
 10470                           	psect	text42
 10471  003C5C                     __ptext42:
 10472                           	opt stack 0
 10473  003C5C                     __delay_MS:
 10474                           	opt stack 20
 10475                           
 10476                           ;delay.c: 30: int val = 0;
 10477                           
 10478                           ;incstack = 0
 10479  003C5C  0E00               	movlw	0
 10480  003C5E  6E14               	movwf	__delay_MS@val+1,c
 10481  003C60  0E00               	movlw	0
 10482  003C62  6E13               	movwf	__delay_MS@val,c
 10483                           
 10484                           ;delay.c: 31: for (val = 0; val < delay; val++) {
 10485  003C64  0E00               	movlw	0
 10486  003C66  6E14               	movwf	__delay_MS@val+1,c
 10487  003C68  0E00               	movlw	0
 10488  003C6A  6E13               	movwf	__delay_MS@val,c
 10489  003C6C  D00E               	goto	l6828
 10490  003C6E                     l6816:
 10491                           
 10492                           ;delay.c: 32: TMR1_Reload();
 10493  003C6E  ECF6  F020         	call	_TMR1_Reload	;wreg free
 10494                           
 10495                           ;delay.c: 33: TMR1_StartTimer();
 10496  003C72  EC30  F021         	call	_TMR1_StartTimer	;wreg free
 10497  003C76                     l6820:
 10498  003C76  ECFC  F020         	call	_TMR1_HasOverflowOccured	;wreg free
 10499  003C7A  0900               	iorlw	0
 10500  003C7C  B4D8               	btfsc	status,2,c
 10501  003C7E  D7FB               	goto	l6820
 10502                           
 10503                           ;delay.c: 35: TMR1_StopTimer();
 10504  003C80  EC2C  F021         	call	_TMR1_StopTimer	;wreg free
 10505                           
 10506                           ;delay.c: 36: PIR1bits.TMR1IF = 0;
 10507  003C84  909E               	bcf	3998,0,c	;volatile
 10508  003C86  4A13               	infsnz	__delay_MS@val,f,c
 10509  003C88  2A14               	incf	__delay_MS@val+1,f,c
 10510  003C8A                     l6828:
 10511  003C8A  5010               	movf	__delay_MS@delay,w,c
 10512  003C8C  5C13               	subwf	__delay_MS@val,w,c
 10513  003C8E  5014               	movf	__delay_MS@val+1,w,c
 10514  003C90  0A80               	xorlw	128
 10515  003C92  6E12               	movwf	??__delay_MS& (0+255),c
 10516  003C94  5011               	movf	__delay_MS@delay+1,w,c
 10517  003C96  0A80               	xorlw	128
 10518  003C98  5812               	subwfb	??__delay_MS& (0+255),w,c
 10519  003C9A  B0D8               	btfsc	status,0,c
 10520  003C9C  0012               	return	
 10521  003C9E  D7E7               	goto	l6816
 10522  003CA0                     __end_of__delay_MS:
 10523                           	opt stack 0
 10524                           tblptru	equ	0xFF8
 10525                           tblptrh	equ	0xFF7
 10526                           tblptrl	equ	0xFF6
 10527                           tablat	equ	0xFF5
 10528                           prodh	equ	0xFF4
 10529                           prodl	equ	0xFF3
 10530                           intcon	equ	0xFF2
 10531                           postinc0	equ	0xFEE
 10532                           wreg	equ	0xFE8
 10533                           indf1	equ	0xFE7
 10534                           postinc1	equ	0xFE6
 10535                           postdec1	equ	0xFE5
 10536                           fsr1h	equ	0xFE2
 10537                           fsr1l	equ	0xFE1
 10538                           indf2	equ	0xFDF
 10539                           postinc2	equ	0xFDE
 10540                           postdec2	equ	0xFDD
 10541                           fsr2h	equ	0xFDA
 10542                           fsr2l	equ	0xFD9
 10543                           status	equ	0xFD8
 10544                           
 10545 ;; *************** function _TMR1_StopTimer *****************
 10546 ;; Defined at:
 10547 ;;		line 94 in file "mcc_generated_files/tmr1.c"
 10548 ;; Parameters:    Size  Location     Type
 10549 ;;		None
 10550 ;; Auto vars:     Size  Location     Type
 10551 ;;		None
 10552 ;; Return value:  Size  Location     Type
 10553 ;;                  1    wreg      void 
 10554 ;; Registers used:
 10555 ;;		None
 10556 ;; Tracked objects:
 10557 ;;		On entry : 0/0
 10558 ;;		On exit  : 0/0
 10559 ;;		Unchanged: 0/0
 10560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10565 ;;Total ram usage:        0 bytes
 10566 ;; Hardware stack levels used:    1
 10567 ;; Hardware stack levels required when called:    5
 10568 ;; This function calls:
 10569 ;;		Nothing
 10570 ;; This function is called by:
 10571 ;;		__delay_MS
 10572 ;;		_main
 10573 ;; This function uses a non-reentrant model
 10574 ;;
 10575                           
 10576                           	psect	text43
 10577  004258                     __ptext43:
 10578                           	opt stack 0
 10579  004258                     _TMR1_StopTimer:
 10580                           	opt stack 20
 10581                           
 10582                           ;tmr1.c: 97: T1CONbits.TMR1ON = 0;
 10583                           
 10584                           ;incstack = 0
 10585  004258  90CD               	bcf	4045,0,c	;volatile
 10586  00425A  0012               	return		;funcret
 10587  00425C                     __end_of_TMR1_StopTimer:
 10588                           	opt stack 0
 10589                           tblptru	equ	0xFF8
 10590                           tblptrh	equ	0xFF7
 10591                           tblptrl	equ	0xFF6
 10592                           tablat	equ	0xFF5
 10593                           prodh	equ	0xFF4
 10594                           prodl	equ	0xFF3
 10595                           intcon	equ	0xFF2
 10596                           postinc0	equ	0xFEE
 10597                           wreg	equ	0xFE8
 10598                           indf1	equ	0xFE7
 10599                           postinc1	equ	0xFE6
 10600                           postdec1	equ	0xFE5
 10601                           fsr1h	equ	0xFE2
 10602                           fsr1l	equ	0xFE1
 10603                           indf2	equ	0xFDF
 10604                           postinc2	equ	0xFDE
 10605                           postdec2	equ	0xFDD
 10606                           fsr2h	equ	0xFDA
 10607                           fsr2l	equ	0xFD9
 10608                           status	equ	0xFD8
 10609                           
 10610 ;; *************** function _TMR1_Reload *****************
 10611 ;; Defined at:
 10612 ;;		line 136 in file "mcc_generated_files/tmr1.c"
 10613 ;; Parameters:    Size  Location     Type
 10614 ;;		None
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;		None
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  1    wreg      void 
 10619 ;; Registers used:
 10620 ;;		wreg, status,2
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10630 ;;Total ram usage:        0 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; Hardware stack levels required when called:    5
 10633 ;; This function calls:
 10634 ;;		Nothing
 10635 ;; This function is called by:
 10636 ;;		__delay_MS
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           	psect	text44
 10641  0041EC                     __ptext44:
 10642                           	opt stack 0
 10643  0041EC                     _TMR1_Reload:
 10644                           	opt stack 20
 10645                           
 10646                           ;tmr1.c: 139: TMR1H = (timer1ReloadVal >> 8);
 10647                           
 10648                           ;incstack = 0
 10649  0041EC  0100               	movlb	0	; () banked
 10650  0041EE  51F5               	movf	(_timer1ReloadVal+1)& (0+255),w,b	;volatile
 10651  0041F0  6ECF               	movwf	4047,c	;volatile
 10652                           
 10653                           ; BSR set to: 0
 10654                           ;tmr1.c: 140: TMR1L = (uint8_t) timer1ReloadVal;
 10655  0041F2  C0F4  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 10656                           
 10657                           ; BSR set to: 0
 10658  0041F6  0012               	return		;funcret
 10659  0041F8                     __end_of_TMR1_Reload:
 10660                           	opt stack 0
 10661                           tblptru	equ	0xFF8
 10662                           tblptrh	equ	0xFF7
 10663                           tblptrl	equ	0xFF6
 10664                           tablat	equ	0xFF5
 10665                           prodh	equ	0xFF4
 10666                           prodl	equ	0xFF3
 10667                           intcon	equ	0xFF2
 10668                           postinc0	equ	0xFEE
 10669                           wreg	equ	0xFE8
 10670                           indf1	equ	0xFE7
 10671                           postinc1	equ	0xFE6
 10672                           postdec1	equ	0xFE5
 10673                           fsr1h	equ	0xFE2
 10674                           fsr1l	equ	0xFE1
 10675                           indf2	equ	0xFDF
 10676                           postinc2	equ	0xFDE
 10677                           postdec2	equ	0xFDD
 10678                           fsr2h	equ	0xFDA
 10679                           fsr2l	equ	0xFD9
 10680                           status	equ	0xFD8
 10681                           
 10682 ;; *************** function _TMR1_HasOverflowOccured *****************
 10683 ;; Defined at:
 10684 ;;		line 153 in file "mcc_generated_files/tmr1.c"
 10685 ;; Parameters:    Size  Location     Type
 10686 ;;		None
 10687 ;; Auto vars:     Size  Location     Type
 10688 ;;		None
 10689 ;; Return value:  Size  Location     Type
 10690 ;;                  1    wreg      unsigned char 
 10691 ;; Registers used:
 10692 ;;		wreg
 10693 ;; Tracked objects:
 10694 ;;		On entry : 0/0
 10695 ;;		On exit  : 0/0
 10696 ;;		Unchanged: 0/0
 10697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10702 ;;Total ram usage:        0 bytes
 10703 ;; Hardware stack levels used:    1
 10704 ;; Hardware stack levels required when called:    5
 10705 ;; This function calls:
 10706 ;;		Nothing
 10707 ;; This function is called by:
 10708 ;;		__delay_MS
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712                           	psect	text45
 10713  0041F8                     __ptext45:
 10714                           	opt stack 0
 10715  0041F8                     _TMR1_HasOverflowOccured:
 10716                           	opt stack 20
 10717                           
 10718                           ;tmr1.c: 156: return(PIR1bits.TMR1IF);
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;incstack = 0
 10722  0041F8  A09E               	btfss	3998,0,c	;volatile
 10723  0041FA  D002               	goto	u5910
 10724  0041FC  0E01               	movlw	1
 10725  0041FE  0012               	return	
 10726  004200                     u5910:
 10727  004200  0E00               	movlw	0
 10728  004202  0012               	return	
 10729  004204                     __end_of_TMR1_HasOverflowOccured:
 10730                           	opt stack 0
 10731                           tblptru	equ	0xFF8
 10732                           tblptrh	equ	0xFF7
 10733                           tblptrl	equ	0xFF6
 10734                           tablat	equ	0xFF5
 10735                           prodh	equ	0xFF4
 10736                           prodl	equ	0xFF3
 10737                           intcon	equ	0xFF2
 10738                           postinc0	equ	0xFEE
 10739                           wreg	equ	0xFE8
 10740                           indf1	equ	0xFE7
 10741                           postinc1	equ	0xFE6
 10742                           postdec1	equ	0xFE5
 10743                           fsr1h	equ	0xFE2
 10744                           fsr1l	equ	0xFE1
 10745                           indf2	equ	0xFDF
 10746                           postinc2	equ	0xFDE
 10747                           postdec2	equ	0xFDD
 10748                           fsr2h	equ	0xFDA
 10749                           fsr2l	equ	0xFD9
 10750                           status	equ	0xFD8
 10751                           
 10752 ;; *************** function ___awdiv *****************
 10753 ;; Defined at:
 10754 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10755 ;; Parameters:    Size  Location     Type
 10756 ;;  dividend        2   15[COMRAM] int 
 10757 ;;  divisor         2   17[COMRAM] int 
 10758 ;; Auto vars:     Size  Location     Type
 10759 ;;  quotient        2   21[COMRAM] int 
 10760 ;;  sign            1   20[COMRAM] unsigned char 
 10761 ;;  counter         1   19[COMRAM] unsigned char 
 10762 ;; Return value:  Size  Location     Type
 10763 ;;                  2   15[COMRAM] int 
 10764 ;; Registers used:
 10765 ;;		wreg, status,2, status,0
 10766 ;; Tracked objects:
 10767 ;;		On entry : 0/0
 10768 ;;		On exit  : 0/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10771 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10772 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;Total ram usage:        8 bytes
 10776 ;; Hardware stack levels used:    1
 10777 ;; Hardware stack levels required when called:    5
 10778 ;; This function calls:
 10779 ;;		Nothing
 10780 ;; This function is called by:
 10781 ;;		_init_clcd_cusotom_lcd
 10782 ;;		_display_string
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           	psect	text46
 10787  0036FC                     __ptext46:
 10788                           	opt stack 0
 10789  0036FC                     ___awdiv:
 10790                           	opt stack 22
 10791                           
 10792                           ;incstack = 0
 10793  0036FC  0E00               	movlw	0
 10794  0036FE  6E15               	movwf	___awdiv@sign,c
 10795  003700  AE13               	btfss	___awdiv@divisor+1,7,c
 10796  003702  D006               	goto	l7314
 10797  003704  6C12               	negf	___awdiv@divisor,c
 10798  003706  1E13               	comf	___awdiv@divisor+1,f,c
 10799  003708  B0D8               	btfsc	status,0,c
 10800  00370A  2A13               	incf	___awdiv@divisor+1,f,c
 10801  00370C  0E01               	movlw	1
 10802  00370E  6E15               	movwf	___awdiv@sign,c
 10803  003710                     l7314:
 10804  003710  AE11               	btfss	___awdiv@dividend+1,7,c
 10805  003712  D006               	goto	l7320
 10806  003714  6C10               	negf	___awdiv@dividend,c
 10807  003716  1E11               	comf	___awdiv@dividend+1,f,c
 10808  003718  B0D8               	btfsc	status,0,c
 10809  00371A  2A11               	incf	___awdiv@dividend+1,f,c
 10810  00371C  0E01               	movlw	1
 10811  00371E  1A15               	xorwf	___awdiv@sign,f,c
 10812  003720                     l7320:
 10813  003720  0E00               	movlw	0
 10814  003722  6E17               	movwf	___awdiv@quotient+1,c
 10815  003724  0E00               	movlw	0
 10816  003726  6E16               	movwf	___awdiv@quotient,c
 10817  003728  5012               	movf	___awdiv@divisor,w,c
 10818  00372A  1013               	iorwf	___awdiv@divisor+1,w,c
 10819  00372C  B4D8               	btfsc	status,2,c
 10820  00372E  D01C               	goto	l7342
 10821  003730  0E01               	movlw	1
 10822  003732  6E14               	movwf	___awdiv@counter,c
 10823  003734  D004               	goto	l7328
 10824  003736                     l7326:
 10825  003736  90D8               	bcf	status,0,c
 10826  003738  3612               	rlcf	___awdiv@divisor,f,c
 10827  00373A  3613               	rlcf	___awdiv@divisor+1,f,c
 10828  00373C  2A14               	incf	___awdiv@counter,f,c
 10829  00373E                     l7328:
 10830  00373E  AE13               	btfss	___awdiv@divisor+1,7,c
 10831  003740  D7FA               	goto	l7326
 10832  003742                     l7330:
 10833  003742  90D8               	bcf	status,0,c
 10834  003744  3616               	rlcf	___awdiv@quotient,f,c
 10835  003746  3617               	rlcf	___awdiv@quotient+1,f,c
 10836  003748  5012               	movf	___awdiv@divisor,w,c
 10837  00374A  5C10               	subwf	___awdiv@dividend,w,c
 10838  00374C  5013               	movf	___awdiv@divisor+1,w,c
 10839  00374E  5811               	subwfb	___awdiv@dividend+1,w,c
 10840  003750  A0D8               	btfss	status,0,c
 10841  003752  D005               	goto	l7338
 10842  003754  5012               	movf	___awdiv@divisor,w,c
 10843  003756  5E10               	subwf	___awdiv@dividend,f,c
 10844  003758  5013               	movf	___awdiv@divisor+1,w,c
 10845  00375A  5A11               	subwfb	___awdiv@dividend+1,f,c
 10846  00375C  8016               	bsf	___awdiv@quotient,0,c
 10847  00375E                     l7338:
 10848  00375E  90D8               	bcf	status,0,c
 10849  003760  3213               	rrcf	___awdiv@divisor+1,f,c
 10850  003762  3212               	rrcf	___awdiv@divisor,f,c
 10851  003764  2E14               	decfsz	___awdiv@counter,f,c
 10852  003766  D7ED               	goto	l7330
 10853  003768                     l7342:
 10854  003768  5015               	movf	___awdiv@sign,w,c
 10855  00376A  B4D8               	btfsc	status,2,c
 10856  00376C  D004               	goto	l7346
 10857  00376E  6C16               	negf	___awdiv@quotient,c
 10858  003770  1E17               	comf	___awdiv@quotient+1,f,c
 10859  003772  B0D8               	btfsc	status,0,c
 10860  003774  2A17               	incf	___awdiv@quotient+1,f,c
 10861  003776                     l7346:
 10862  003776  C016  F010         	movff	___awdiv@quotient,?___awdiv
 10863  00377A  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
 10864  00377E  0012               	return	
 10865  003780                     __end_of___awdiv:
 10866                           	opt stack 0
 10867                           tblptru	equ	0xFF8
 10868                           tblptrh	equ	0xFF7
 10869                           tblptrl	equ	0xFF6
 10870                           tablat	equ	0xFF5
 10871                           prodh	equ	0xFF4
 10872                           prodl	equ	0xFF3
 10873                           intcon	equ	0xFF2
 10874                           postinc0	equ	0xFEE
 10875                           wreg	equ	0xFE8
 10876                           indf1	equ	0xFE7
 10877                           postinc1	equ	0xFE6
 10878                           postdec1	equ	0xFE5
 10879                           fsr1h	equ	0xFE2
 10880                           fsr1l	equ	0xFE1
 10881                           indf2	equ	0xFDF
 10882                           postinc2	equ	0xFDE
 10883                           postdec2	equ	0xFDD
 10884                           fsr2h	equ	0xFDA
 10885                           fsr2l	equ	0xFD9
 10886                           status	equ	0xFD8
 10887                           
 10888 ;; *************** function _clcd_max_row *****************
 10889 ;; Defined at:
 10890 ;;		line 107 in file "clcd.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;		None
 10893 ;; Auto vars:     Size  Location     Type
 10894 ;;		None
 10895 ;; Return value:  Size  Location     Type
 10896 ;;                  1    wreg      unsigned char 
 10897 ;; Registers used:
 10898 ;;		wreg, status,2
 10899 ;; Tracked objects:
 10900 ;;		On entry : 0/0
 10901 ;;		On exit  : 0/0
 10902 ;;		Unchanged: 0/0
 10903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;Total ram usage:        0 bytes
 10909 ;; Hardware stack levels used:    1
 10910 ;; Hardware stack levels required when called:    5
 10911 ;; This function calls:
 10912 ;;		Nothing
 10913 ;; This function is called by:
 10914 ;;		_reply_to_host
 10915 ;; This function uses a non-reentrant model
 10916 ;;
 10917                           
 10918                           	psect	text47
 10919  0041B4                     __ptext47:
 10920                           	opt stack 0
 10921  0041B4                     _clcd_max_row:
 10922                           	opt stack 23
 10923                           
 10924                           ;clcd.c: 108: if (clcd_config_data.init_done == 0)
 10925                           
 10926                           ;incstack = 0
 10927  0041B4  5049               	movf	_clcd_config_data,w,c
 10928  0041B6  A4D8               	btfss	status,2,c
 10929  0041B8  D002               	goto	l7470
 10930                           
 10931                           ;clcd.c: 109: return 0;
 10932  0041BA  0E00               	movlw	0
 10933  0041BC  0012               	return	
 10934  0041BE                     l7470:
 10935                           
 10936                           ;clcd.c: 110: else
 10937                           ;clcd.c: 111: return clcd_config_data.clcd_max_row;
 10938  0041BE  504A               	movf	_clcd_config_data+1,w,c
 10939  0041C0  0012               	return	
 10940  0041C2                     __end_of_clcd_max_row:
 10941                           	opt stack 0
 10942                           tblptru	equ	0xFF8
 10943                           tblptrh	equ	0xFF7
 10944                           tblptrl	equ	0xFF6
 10945                           tablat	equ	0xFF5
 10946                           prodh	equ	0xFF4
 10947                           prodl	equ	0xFF3
 10948                           intcon	equ	0xFF2
 10949                           postinc0	equ	0xFEE
 10950                           wreg	equ	0xFE8
 10951                           indf1	equ	0xFE7
 10952                           postinc1	equ	0xFE6
 10953                           postdec1	equ	0xFE5
 10954                           fsr1h	equ	0xFE2
 10955                           fsr1l	equ	0xFE1
 10956                           indf2	equ	0xFDF
 10957                           postinc2	equ	0xFDE
 10958                           postdec2	equ	0xFDD
 10959                           fsr2h	equ	0xFDA
 10960                           fsr2l	equ	0xFD9
 10961                           status	equ	0xFD8
 10962                           
 10963 ;; *************** function _clcd_max_col *****************
 10964 ;; Defined at:
 10965 ;;		line 114 in file "clcd.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;		None
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;		None
 10970 ;; Return value:  Size  Location     Type
 10971 ;;                  1    wreg      unsigned char 
 10972 ;; Registers used:
 10973 ;;		wreg, status,2
 10974 ;; Tracked objects:
 10975 ;;		On entry : 0/0
 10976 ;;		On exit  : 0/0
 10977 ;;		Unchanged: 0/0
 10978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;Total ram usage:        0 bytes
 10984 ;; Hardware stack levels used:    1
 10985 ;; Hardware stack levels required when called:    5
 10986 ;; This function calls:
 10987 ;;		Nothing
 10988 ;; This function is called by:
 10989 ;;		_reply_to_host
 10990 ;; This function uses a non-reentrant model
 10991 ;;
 10992                           
 10993                           	psect	text48
 10994  0041C2                     __ptext48:
 10995                           	opt stack 0
 10996  0041C2                     _clcd_max_col:
 10997                           	opt stack 23
 10998                           
 10999                           ;clcd.c: 115: if (clcd_config_data.init_done == 0)
 11000                           
 11001                           ;incstack = 0
 11002  0041C2  5049               	movf	_clcd_config_data,w,c
 11003  0041C4  A4D8               	btfss	status,2,c
 11004  0041C6  D002               	goto	l7482
 11005                           
 11006                           ;clcd.c: 116: return 0;
 11007  0041C8  0E00               	movlw	0
 11008  0041CA  0012               	return	
 11009  0041CC                     l7482:
 11010                           
 11011                           ;clcd.c: 117: else
 11012                           ;clcd.c: 118: return clcd_config_data.clcd_max_col;
 11013  0041CC  504B               	movf	_clcd_config_data+2,w,c
 11014  0041CE  0012               	return	
 11015  0041D0                     __end_of_clcd_max_col:
 11016                           	opt stack 0
 11017                           tblptru	equ	0xFF8
 11018                           tblptrh	equ	0xFF7
 11019                           tblptrl	equ	0xFF6
 11020                           tablat	equ	0xFF5
 11021                           prodh	equ	0xFF4
 11022                           prodl	equ	0xFF3
 11023                           intcon	equ	0xFF2
 11024                           postinc0	equ	0xFEE
 11025                           wreg	equ	0xFE8
 11026                           indf1	equ	0xFE7
 11027                           postinc1	equ	0xFE6
 11028                           postdec1	equ	0xFE5
 11029                           fsr1h	equ	0xFE2
 11030                           fsr1l	equ	0xFE1
 11031                           indf2	equ	0xFDF
 11032                           postinc2	equ	0xFDE
 11033                           postdec2	equ	0xFDD
 11034                           fsr2h	equ	0xFDA
 11035                           fsr2l	equ	0xFD9
 11036                           status	equ	0xFD8
 11037                           
 11038 ;; *************** function _parse_cmd_str *****************
 11039 ;; Defined at:
 11040 ;;		line 137 in file "cmd_consol.c"
 11041 ;; Parameters:    Size  Location     Type
 11042 ;;  str             2   55[COMRAM] PTR unsigned char 
 11043 ;;		 -> uart_str(150), 
 11044 ;; Auto vars:     Size  Location     Type
 11045 ;;  column          1   60[COMRAM] unsigned char 
 11046 ;;  row             1   59[COMRAM] unsigned char 
 11047 ;;  temp            2   61[COMRAM] PTR unsigned char 
 11048 ;;		 -> uart_str(150), NULL(0), 
 11049 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 11050 ;;		 -> uart_str(150), 
 11051 ;; Return value:  Size  Location     Type
 11052 ;;                  1    wreg      unsigned char 
 11053 ;; Registers used:
 11054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11055 ;; Tracked objects:
 11056 ;;		On entry : 0/0
 11057 ;;		On exit  : 0/0
 11058 ;;		Unchanged: 0/0
 11059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11060 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11061 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;Total ram usage:        8 bytes
 11065 ;; Hardware stack levels used:    1
 11066 ;; Hardware stack levels required when called:    9
 11067 ;; This function calls:
 11068 ;;		_atoi
 11069 ;;		_clear_cmd_data
 11070 ;;		_collect_column
 11071 ;;		_collect_row
 11072 ;;		_get_direction
 11073 ;;		_get_dis_frq
 11074 ;;		_get_over_write_data
 11075 ;;		_get_str
 11076 ;;		_get_uid
 11077 ;;		_memset
 11078 ;;		_printf
 11079 ;;		_strcmp
 11080 ;;		_strcpy
 11081 ;;		_strlen
 11082 ;;		_strtok
 11083 ;; This function is called by:
 11084 ;;		_cmd_consol_task
 11085 ;; This function uses a non-reentrant model
 11086 ;;
 11087                           
 11088                           	psect	text49
 11089  0000AA                     __ptext49:
 11090                           	opt stack 0
 11091  0000AA                     _parse_cmd_str:
 11092                           	opt stack 20
 11093                           
 11094                           ;cmd_consol.c: 138: printf("%s..2\r\n", str);
 11095                           
 11096                           ;incstack = 0
 11097  0000AA  0E82               	movlw	low STR_31
 11098  0000AC  6E1E               	movwf	printf@f,c
 11099  0000AE  0EFF               	movlw	high STR_31
 11100  0000B0  6E1F               	movwf	printf@f+1,c
 11101  0000B2  C038  F020         	movff	parse_cmd_str@str,?_printf+2
 11102  0000B6  C039  F021         	movff	parse_cmd_str@str+1,?_printf+3
 11103  0000BA  EC03  F015         	call	_printf	;wreg free
 11104                           
 11105                           ;cmd_consol.c: 139: char *temp;
 11106                           ;cmd_consol.c: 140: char *ptr = str;
 11107  0000BE  C038  F03A         	movff	parse_cmd_str@str,parse_cmd_str@ptr
 11108  0000C2  C039  F03B         	movff	parse_cmd_str@str+1,parse_cmd_str@ptr+1
 11109                           
 11110                           ;cmd_consol.c: 141: temp = strtok(ptr, "-', /=");
 11111  0000C6  C03A  F01B         	movff	parse_cmd_str@ptr,strtok@s1
 11112  0000CA  C03B  F01C         	movff	parse_cmd_str@ptr+1,strtok@s1+1
 11113  0000CE  0EA0               	movlw	low STR_32
 11114  0000D0  6E1D               	movwf	strtok@s2,c
 11115  0000D2  0EFF               	movlw	high STR_32
 11116  0000D4  6E1E               	movwf	strtok@s2+1,c
 11117  0000D6  ECF6  F017         	call	_strtok	;wreg free
 11118  0000DA  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 11119  0000DE  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 11120                           
 11121                           ;cmd_consol.c: 142: if (temp != (0)) {
 11122  0000E2  503E               	movf	parse_cmd_str@temp,w,c
 11123  0000E4  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11124  0000E6  B4D8               	btfsc	status,2,c
 11125  0000E8  EF36  F006         	goto	l8354
 11126                           
 11127                           ;cmd_consol.c: 143: if (strcmp(temp, "MC?") == 0) {
 11128  0000EC  C03E  F010         	movff	parse_cmd_str@temp,strcmp@s1
 11129  0000F0  C03F  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 11130  0000F4  0EEB               	movlw	low STR_33
 11131  0000F6  6E12               	movwf	strcmp@s2,c
 11132  0000F8  0EFF               	movlw	high STR_33
 11133  0000FA  6E13               	movwf	strcmp@s2+1,c
 11134  0000FC  ECE4  F01D         	call	_strcmp	;wreg free
 11135  000100  5010               	movf	?_strcmp,w,c
 11136  000102  1011               	iorwf	?_strcmp+1,w,c
 11137  000104  A4D8               	btfss	status,2,c
 11138  000106  D028               	goto	l7948
 11139                           
 11140                           ;cmd_consol.c: 145: if (temp != (0)) {
 11141  000108  503E               	movf	parse_cmd_str@temp,w,c
 11142  00010A  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11143  00010C  B4D8               	btfsc	status,2,c
 11144  00010E  EF20  F006         	goto	l8348
 11145                           
 11146                           ;cmd_consol.c: 146: strcpy(CMD, temp);
 11147  000112  0EE3               	movlw	low _CMD
 11148  000114  6E10               	movwf	strcpy@to,c
 11149  000116  0E00               	movlw	high _CMD
 11150  000118  6E11               	movwf	strcpy@to+1,c
 11151  00011A  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 11152  00011E  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 11153  000122  ECA4  F01F         	call	_strcpy	;wreg free
 11154                           
 11155                           ;cmd_consol.c: 147: valid_cmd = 1;
 11156  000126  0E01               	movlw	1
 11157  000128  0100               	movlb	0	; () banked
 11158  00012A  6F84               	movwf	_valid_cmd& (0+255),b
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;cmd_consol.c: 148: memset(str, 0, strlen(str));
 11162  00012C  C038  F024         	movff	parse_cmd_str@str,memset@p1
 11163  000130  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 11164  000134  0E00               	movlw	0
 11165  000136  6E27               	movwf	memset@c+1,c
 11166  000138  0E00               	movlw	0
 11167  00013A  6E26               	movwf	memset@c,c
 11168  00013C  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 11169  000140  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 11170  000144  ECED  F01E         	call	_strlen	;wreg free
 11171  000148  C01E  F028         	movff	?_strlen,memset@n
 11172  00014C  C01F  F029         	movff	?_strlen+1,memset@n+1
 11173  000150  ECBB  F01F         	call	_memset	;wreg free
 11174  000154                     l7944:
 11175                           
 11176                           ;cmd_consol.c: 149: return 0;
 11177  000154  0E00               	movlw	0
 11178  000156  0012               	return	
 11179  000158                     l7948:
 11180  000158  C03E  F010         	movff	parse_cmd_str@temp,strcmp@s1
 11181  00015C  C03F  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 11182  000160  0EEF               	movlw	low STR_34
 11183  000162  6E12               	movwf	strcmp@s2,c
 11184  000164  0EFF               	movlw	high STR_34
 11185  000166  6E13               	movwf	strcmp@s2+1,c
 11186  000168  ECE4  F01D         	call	_strcmp	;wreg free
 11187  00016C  5010               	movf	?_strcmp,w,c
 11188  00016E  1011               	iorwf	?_strcmp+1,w,c
 11189  000170  A4D8               	btfss	status,2,c
 11190  000172  D027               	goto	l7962
 11191                           
 11192                           ;cmd_consol.c: 153: if (temp != (0)) {
 11193  000174  503E               	movf	parse_cmd_str@temp,w,c
 11194  000176  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11195  000178  B4D8               	btfsc	status,2,c
 11196  00017A  EF20  F006         	goto	l8348
 11197                           
 11198                           ;cmd_consol.c: 154: strcpy(CMD, temp);
 11199  00017E  0EE3               	movlw	low _CMD
 11200  000180  6E10               	movwf	strcpy@to,c
 11201  000182  0E00               	movlw	high _CMD
 11202  000184  6E11               	movwf	strcpy@to+1,c
 11203  000186  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 11204  00018A  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 11205  00018E  ECA4  F01F         	call	_strcpy	;wreg free
 11206                           
 11207                           ;cmd_consol.c: 155: valid_cmd = 1;
 11208  000192  0E01               	movlw	1
 11209  000194  0100               	movlb	0	; () banked
 11210  000196  6F84               	movwf	_valid_cmd& (0+255),b
 11211                           
 11212                           ; BSR set to: 0
 11213                           ;cmd_consol.c: 156: memset(str, 0, strlen(str));
 11214  000198  C038  F024         	movff	parse_cmd_str@str,memset@p1
 11215  00019C  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 11216  0001A0  0E00               	movlw	0
 11217  0001A2  6E27               	movwf	memset@c+1,c
 11218  0001A4  0E00               	movlw	0
 11219  0001A6  6E26               	movwf	memset@c,c
 11220  0001A8  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 11221  0001AC  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 11222  0001B0  ECED  F01E         	call	_strlen	;wreg free
 11223  0001B4  C01E  F028         	movff	?_strlen,memset@n
 11224  0001B8  C01F  F029         	movff	?_strlen+1,memset@n+1
 11225  0001BC  ECBB  F01F         	call	_memset	;wreg free
 11226  0001C0  D7C9               	goto	l7944
 11227  0001C2                     l7962:
 11228  0001C2  C03E  F010         	movff	parse_cmd_str@temp,strcmp@s1
 11229  0001C6  C03F  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 11230  0001CA  0EB5               	movlw	low STR_35
 11231  0001CC  6E12               	movwf	strcmp@s2,c
 11232  0001CE  0EFF               	movlw	high STR_35
 11233  0001D0  6E13               	movwf	strcmp@s2+1,c
 11234  0001D2  ECE4  F01D         	call	_strcmp	;wreg free
 11235  0001D6  5010               	movf	?_strcmp,w,c
 11236  0001D8  1011               	iorwf	?_strcmp+1,w,c
 11237  0001DA  A4D8               	btfss	status,2,c
 11238  0001DC  D02D               	goto	l7978
 11239                           
 11240                           ;cmd_consol.c: 161: if (temp != (0)) {
 11241  0001DE  503E               	movf	parse_cmd_str@temp,w,c
 11242  0001E0  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11243  0001E2  B4D8               	btfsc	status,2,c
 11244  0001E4  EF20  F006         	goto	l8348
 11245                           
 11246                           ;cmd_consol.c: 162: strcpy(CMD, temp);
 11247  0001E8  0EE3               	movlw	low _CMD
 11248  0001EA  6E10               	movwf	strcpy@to,c
 11249  0001EC  0E00               	movlw	high _CMD
 11250  0001EE  6E11               	movwf	strcpy@to+1,c
 11251  0001F0  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 11252  0001F4  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 11253  0001F8  ECA4  F01F         	call	_strcpy	;wreg free
 11254                           
 11255                           ;cmd_consol.c: 163: valid_cmd = 1;
 11256  0001FC  0E01               	movlw	1
 11257  0001FE  0100               	movlb	0	; () banked
 11258  000200  6F84               	movwf	_valid_cmd& (0+255),b
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;cmd_consol.c: 164: memset(str, 0, strlen(str));
 11262  000202  C038  F024         	movff	parse_cmd_str@str,memset@p1
 11263  000206  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 11264  00020A  0E00               	movlw	0
 11265  00020C  6E27               	movwf	memset@c+1,c
 11266  00020E  0E00               	movlw	0
 11267  000210  6E26               	movwf	memset@c,c
 11268  000212  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 11269  000216  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 11270  00021A  ECED  F01E         	call	_strlen	;wreg free
 11271  00021E  C01E  F028         	movff	?_strlen,memset@n
 11272  000222  C01F  F029         	movff	?_strlen+1,memset@n+1
 11273  000226  ECBB  F01F         	call	_memset	;wreg free
 11274                           
 11275                           ;cmd_consol.c: 165: printf(".....\r\n");
 11276  00022A  0E7A               	movlw	low STR_36
 11277  00022C  6E1E               	movwf	printf@f,c
 11278  00022E  0EFF               	movlw	high STR_36
 11279  000230  6E1F               	movwf	printf@f+1,c
 11280  000232  EC03  F015         	call	_printf	;wreg free
 11281  000236  D78E               	goto	l7944
 11282  000238                     l7978:
 11283  000238  C03E  F010         	movff	parse_cmd_str@temp,strcmp@s1
 11284  00023C  C03F  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 11285  000240  0ED7               	movlw	low STR_37
 11286  000242  6E12               	movwf	strcmp@s2,c
 11287  000244  0EFF               	movlw	high STR_37
 11288  000246  6E13               	movwf	strcmp@s2+1,c
 11289  000248  ECE4  F01D         	call	_strcmp	;wreg free
 11290  00024C  5010               	movf	?_strcmp,w,c
 11291  00024E  1011               	iorwf	?_strcmp+1,w,c
 11292  000250  A4D8               	btfss	status,2,c
 11293  000252  D077               	goto	l8016
 11294                           
 11295                           ;cmd_consol.c: 170: if (temp != (0)) {
 11296  000254  503E               	movf	parse_cmd_str@temp,w,c
 11297  000256  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11298  000258  B4D8               	btfsc	status,2,c
 11299  00025A  EF20  F006         	goto	l8348
 11300                           
 11301                           ;cmd_consol.c: 171: strcpy(CMD, temp);
 11302  00025E  0EE3               	movlw	low _CMD
 11303  000260  6E10               	movwf	strcpy@to,c
 11304  000262  0E00               	movlw	high _CMD
 11305  000264  6E11               	movwf	strcpy@to+1,c
 11306  000266  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 11307  00026A  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 11308  00026E  ECA4  F01F         	call	_strcpy	;wreg free
 11309                           
 11310                           ;cmd_consol.c: 172: temp = strtok((0), "-', /=");
 11311  000272  0E00               	movlw	0
 11312  000274  6E1B               	movwf	strtok@s1,c
 11313  000276  0E00               	movlw	0
 11314  000278  6E1C               	movwf	strtok@s1+1,c
 11315  00027A  0EA0               	movlw	low STR_32
 11316  00027C  6E1D               	movwf	strtok@s2,c
 11317  00027E  0EFF               	movlw	high STR_32
 11318  000280  6E1E               	movwf	strtok@s2+1,c
 11319  000282  ECF6  F017         	call	_strtok	;wreg free
 11320  000286  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 11321  00028A  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 11322                           
 11323                           ;cmd_consol.c: 173: printf("%s..\r\n", temp);
 11324  00028E  0E99               	movlw	low STR_39
 11325  000290  6E1E               	movwf	printf@f,c
 11326  000292  0EFF               	movlw	high STR_39
 11327  000294  6E1F               	movwf	printf@f+1,c
 11328  000296  C03E  F020         	movff	parse_cmd_str@temp,?_printf+2
 11329  00029A  C03F  F021         	movff	parse_cmd_str@temp+1,?_printf+3
 11330  00029E  EC03  F015         	call	_printf	;wreg free
 11331                           
 11332                           ;cmd_consol.c: 174: char row = 0, column = 0;
 11333  0002A2  0E00               	movlw	0
 11334  0002A4  6E3C               	movwf	parse_cmd_str@row,c
 11335  0002A6  0E00               	movlw	0
 11336  0002A8  6E3D               	movwf	parse_cmd_str@column,c
 11337                           
 11338                           ;cmd_consol.c: 175: if (temp != (0)) {
 11339  0002AA  503E               	movf	parse_cmd_str@temp,w,c
 11340  0002AC  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11341  0002AE  B4D8               	btfsc	status,2,c
 11342  0002B0  EF20  F006         	goto	l8348
 11343                           
 11344                           ;cmd_consol.c: 176: row = atoi(temp);
 11345  0002B4  C03E  F01E         	movff	parse_cmd_str@temp,atoi@s
 11346  0002B8  C03F  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
 11347  0002BC  EC8F  F017         	call	_atoi	;wreg free
 11348  0002C0  501E               	movf	?_atoi,w,c
 11349  0002C2  6E3C               	movwf	parse_cmd_str@row,c
 11350                           
 11351                           ;cmd_consol.c: 177: if (row > 0) {
 11352  0002C4  503C               	movf	parse_cmd_str@row,w,c
 11353  0002C6  B4D8               	btfsc	status,2,c
 11354  0002C8  EF20  F006         	goto	l8348
 11355                           
 11356                           ;cmd_consol.c: 178: temp = strtok((0), "-', /=");
 11357  0002CC  0E00               	movlw	0
 11358  0002CE  6E1B               	movwf	strtok@s1,c
 11359  0002D0  0E00               	movlw	0
 11360  0002D2  6E1C               	movwf	strtok@s1+1,c
 11361  0002D4  0EA0               	movlw	low STR_32
 11362  0002D6  6E1D               	movwf	strtok@s2,c
 11363  0002D8  0EFF               	movlw	high STR_32
 11364  0002DA  6E1E               	movwf	strtok@s2+1,c
 11365  0002DC  ECF6  F017         	call	_strtok	;wreg free
 11366  0002E0  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 11367  0002E4  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 11368                           
 11369                           ;cmd_consol.c: 179: if (temp != (0)) {
 11370  0002E8  503E               	movf	parse_cmd_str@temp,w,c
 11371  0002EA  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11372  0002EC  B4D8               	btfsc	status,2,c
 11373  0002EE  EF20  F006         	goto	l8348
 11374                           
 11375                           ;cmd_consol.c: 180: column = atoi(temp);
 11376  0002F2  C03E  F01E         	movff	parse_cmd_str@temp,atoi@s
 11377  0002F6  C03F  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
 11378  0002FA  EC8F  F017         	call	_atoi	;wreg free
 11379  0002FE  501E               	movf	?_atoi,w,c
 11380  000300  6E3D               	movwf	parse_cmd_str@column,c
 11381                           
 11382                           ;cmd_consol.c: 181: if (column > 0) {
 11383  000302  503D               	movf	parse_cmd_str@column,w,c
 11384  000304  B4D8               	btfsc	status,2,c
 11385  000306  EF20  F006         	goto	l8348
 11386                           
 11387                           ;cmd_consol.c: 182: clcd_init_col = column;
 11388  00030A  C03D  F081         	movff	parse_cmd_str@column,_clcd_init_col
 11389                           
 11390                           ;cmd_consol.c: 183: clcd_init_row = row;
 11391  00030E  C03C  F041         	movff	parse_cmd_str@row,_clcd_init_row
 11392                           
 11393                           ;cmd_consol.c: 184: valid_cmd = 1;
 11394  000312  0E01               	movlw	1
 11395  000314  0100               	movlb	0	; () banked
 11396  000316  6F84               	movwf	_valid_cmd& (0+255),b
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;cmd_consol.c: 185: memset(str, 0, strlen(str));
 11400  000318  C038  F024         	movff	parse_cmd_str@str,memset@p1
 11401  00031C  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 11402  000320  0E00               	movlw	0
 11403  000322  6E27               	movwf	memset@c+1,c
 11404  000324  0E00               	movlw	0
 11405  000326  6E26               	movwf	memset@c,c
 11406  000328  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 11407  00032C  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 11408  000330  ECED  F01E         	call	_strlen	;wreg free
 11409  000334  C01E  F028         	movff	?_strlen,memset@n
 11410  000338  C01F  F029         	movff	?_strlen+1,memset@n+1
 11411  00033C  ECBB  F01F         	call	_memset	;wreg free
 11412  000340  D709               	goto	l7944
 11413  000342                     l8016:
 11414  000342  C03E  F010         	movff	parse_cmd_str@temp,strcmp@s1
 11415  000346  C03F  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 11416  00034A  0EBB               	movlw	low STR_41
 11417  00034C  6E12               	movwf	strcmp@s2,c
 11418  00034E  0EFF               	movlw	high STR_41
 11419  000350  6E13               	movwf	strcmp@s2+1,c
 11420  000352  ECE4  F01D         	call	_strcmp	;wreg free
 11421  000356  5010               	movf	?_strcmp,w,c
 11422  000358  1011               	iorwf	?_strcmp+1,w,c
 11423  00035A  A4D8               	btfss	status,2,c
 11424  00035C  D027               	goto	l8030
 11425                           
 11426                           ;cmd_consol.c: 196: if (temp != (0)) {
 11427  00035E  503E               	movf	parse_cmd_str@temp,w,c
 11428  000360  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11429  000362  B4D8               	btfsc	status,2,c
 11430  000364  EF20  F006         	goto	l8348
 11431                           
 11432                           ;cmd_consol.c: 197: strcpy(CMD, temp);
 11433  000368  0EE3               	movlw	low _CMD
 11434  00036A  6E10               	movwf	strcpy@to,c
 11435  00036C  0E00               	movlw	high _CMD
 11436  00036E  6E11               	movwf	strcpy@to+1,c
 11437  000370  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 11438  000374  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 11439  000378  ECA4  F01F         	call	_strcpy	;wreg free
 11440                           
 11441                           ;cmd_consol.c: 198: valid_cmd = 1;
 11442  00037C  0E01               	movlw	1
 11443  00037E  0100               	movlb	0	; () banked
 11444  000380  6F84               	movwf	_valid_cmd& (0+255),b
 11445                           
 11446                           ; BSR set to: 0
 11447                           ;cmd_consol.c: 199: memset(str, 0, strlen(str));
 11448  000382  C038  F024         	movff	parse_cmd_str@str,memset@p1
 11449  000386  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 11450  00038A  0E00               	movlw	0
 11451  00038C  6E27               	movwf	memset@c+1,c
 11452  00038E  0E00               	movlw	0
 11453  000390  6E26               	movwf	memset@c,c
 11454  000392  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 11455  000396  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 11456  00039A  ECED  F01E         	call	_strlen	;wreg free
 11457  00039E  C01E  F028         	movff	?_strlen,memset@n
 11458  0003A2  C01F  F029         	movff	?_strlen+1,memset@n+1
 11459  0003A6  ECBB  F01F         	call	_memset	;wreg free
 11460  0003AA  D6D4               	goto	l7944
 11461  0003AC                     l8030:
 11462  0003AC  C03E  F010         	movff	parse_cmd_str@temp,strcmp@s1
 11463  0003B0  C03F  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 11464  0003B4  0EC7               	movlw	low STR_42
 11465  0003B6  6E12               	movwf	strcmp@s2,c
 11466  0003B8  0EFF               	movlw	high STR_42
 11467  0003BA  6E13               	movwf	strcmp@s2+1,c
 11468  0003BC  ECE4  F01D         	call	_strcmp	;wreg free
 11469  0003C0  5010               	movf	?_strcmp,w,c
 11470  0003C2  1011               	iorwf	?_strcmp+1,w,c
 11471  0003C4  A4D8               	btfss	status,2,c
 11472  0003C6  D093               	goto	l8080
 11473                           
 11474                           ;cmd_consol.c: 204: if (clcd_config_data.init_done == 1) {
 11475  0003C8  0449               	decf	_clcd_config_data,w,c
 11476  0003CA  A4D8               	btfss	status,2,c
 11477  0003CC  EF20  F006         	goto	l8348
 11478                           
 11479                           ;cmd_consol.c: 205: clear_cmd_data();
 11480  0003D0  EC5B  F01F         	call	_clear_cmd_data	;wreg free
 11481                           
 11482                           ;cmd_consol.c: 207: if (temp != (0)) {
 11483  0003D4  503E               	movf	parse_cmd_str@temp,w,c
 11484  0003D6  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11485  0003D8  B4D8               	btfsc	status,2,c
 11486  0003DA  EF20  F006         	goto	l8348
 11487                           
 11488                           ;cmd_consol.c: 208: printf("temp = %s, ", temp);
 11489  0003DE  0ED3               	movlw	low STR_43
 11490  0003E0  6E1E               	movwf	printf@f,c
 11491  0003E2  0EFE               	movlw	high STR_43
 11492  0003E4  6E1F               	movwf	printf@f+1,c
 11493  0003E6  C03E  F020         	movff	parse_cmd_str@temp,?_printf+2
 11494  0003EA  C03F  F021         	movff	parse_cmd_str@temp+1,?_printf+3
 11495  0003EE  EC03  F015         	call	_printf	;wreg free
 11496                           
 11497                           ;cmd_consol.c: 209: strcpy(CMD, temp);
 11498  0003F2  0EE3               	movlw	low _CMD
 11499  0003F4  6E10               	movwf	strcpy@to,c
 11500  0003F6  0E00               	movlw	high _CMD
 11501  0003F8  6E11               	movwf	strcpy@to+1,c
 11502  0003FA  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 11503  0003FE  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 11504  000402  ECA4  F01F         	call	_strcpy	;wreg free
 11505                           
 11506                           ;cmd_consol.c: 210: temp = strtok((0), "-', /=");
 11507  000406  0E00               	movlw	0
 11508  000408  6E1B               	movwf	strtok@s1,c
 11509  00040A  0E00               	movlw	0
 11510  00040C  6E1C               	movwf	strtok@s1+1,c
 11511  00040E  0EA0               	movlw	low STR_32
 11512  000410  6E1D               	movwf	strtok@s2,c
 11513  000412  0EFF               	movlw	high STR_32
 11514  000414  6E1E               	movwf	strtok@s2+1,c
 11515  000416  ECF6  F017         	call	_strtok	;wreg free
 11516  00041A  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 11517  00041E  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 11518                           
 11519                           ;cmd_consol.c: 211: if (temp != (0)) {
 11520  000422  503E               	movf	parse_cmd_str@temp,w,c
 11521  000424  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11522  000426  B4D8               	btfsc	status,2,c
 11523  000428  EF20  F006         	goto	l8348
 11524                           
 11525                           ;cmd_consol.c: 212: printf("temp = %s, ", temp);
 11526  00042C  0ED3               	movlw	low STR_43
 11527  00042E  6E1E               	movwf	printf@f,c
 11528  000430  0EFE               	movlw	high STR_43
 11529  000432  6E1F               	movwf	printf@f+1,c
 11530  000434  C03E  F020         	movff	parse_cmd_str@temp,?_printf+2
 11531  000438  C03F  F021         	movff	parse_cmd_str@temp+1,?_printf+3
 11532  00043C  EC03  F015         	call	_printf	;wreg free
 11533                           
 11534                           ;cmd_consol.c: 213: get_uid(temp, &cmd_data.uid);
 11535  000440  C03E  F024         	movff	parse_cmd_str@temp,get_uid@str
 11536  000444  C03F  F025         	movff	parse_cmd_str@temp+1,get_uid@str+1
 11537  000448  0E86               	movlw	low _cmd_data
 11538  00044A  6E26               	movwf	get_uid@data_uid,c
 11539  00044C  0E00               	movlw	high _cmd_data
 11540  00044E  6E27               	movwf	get_uid@data_uid+1,c
 11541  000450  EC55  F018         	call	_get_uid	;wreg free
 11542                           
 11543                           ;cmd_consol.c: 214: if (cmd_data.uid != 0) {
 11544  000454  0100               	movlb	0	; () banked
 11545  000456  5186               	movf	_cmd_data& (0+255),w,b
 11546  000458  0100               	movlb	0	; () banked
 11547  00045A  1187               	iorwf	(_cmd_data+1)& (0+255),w,b
 11548  00045C  B4D8               	btfsc	status,2,c
 11549  00045E  D045               	goto	l8076
 11550                           
 11551                           ; BSR set to: 0
 11552                           ;cmd_consol.c: 215: temp = strtok((0), "-', /=");
 11553  000460  0E00               	movlw	0
 11554  000462  6E1B               	movwf	strtok@s1,c
 11555  000464  0E00               	movlw	0
 11556  000466  6E1C               	movwf	strtok@s1+1,c
 11557  000468  0EA0               	movlw	low STR_32
 11558  00046A  6E1D               	movwf	strtok@s2,c
 11559  00046C  0EFF               	movlw	high STR_32
 11560  00046E  6E1E               	movwf	strtok@s2+1,c
 11561  000470  ECF6  F017         	call	_strtok	;wreg free
 11562  000474  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 11563  000478  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 11564                           
 11565                           ;cmd_consol.c: 216: if (temp != (0)) {
 11566  00047C  503E               	movf	parse_cmd_str@temp,w,c
 11567  00047E  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11568  000480  B4D8               	btfsc	status,2,c
 11569  000482  D3DE               	goto	l8348
 11570                           
 11571                           ;cmd_consol.c: 217: if (strlen(temp) < 40) {
 11572  000484  C03E  F01E         	movff	parse_cmd_str@temp,strlen@s
 11573  000488  C03F  F01F         	movff	parse_cmd_str@temp+1,strlen@s+1
 11574  00048C  ECED  F01E         	call	_strlen	;wreg free
 11575  000490  501F               	movf	?_strlen+1,w,c
 11576  000492  E129               	bnz	l8072
 11577  000494  0E28               	movlw	40
 11578  000496  5C1E               	subwf	?_strlen,w,c
 11579  000498  B0D8               	btfsc	status,0,c
 11580  00049A  D025               	goto	l8072
 11581                           
 11582                           ;cmd_consol.c: 218: strcpy(cmd_data.data, temp);
 11583  00049C  0E88               	movlw	low (_cmd_data+2)
 11584  00049E  6E10               	movwf	strcpy@to,c
 11585  0004A0  0E00               	movlw	high (_cmd_data+2)
 11586  0004A2  6E11               	movwf	strcpy@to+1,c
 11587  0004A4  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 11588  0004A8  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 11589  0004AC  ECA4  F01F         	call	_strcpy	;wreg free
 11590                           
 11591                           ;cmd_consol.c: 219: valid_cmd = 1;
 11592  0004B0  0E01               	movlw	1
 11593  0004B2  0100               	movlb	0	; () banked
 11594  0004B4  6F84               	movwf	_valid_cmd& (0+255),b
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;cmd_consol.c: 220: cmd_data.data_set = 1;
 11598  0004B6  0E01               	movlw	1
 11599  0004B8  0100               	movlb	0	; () banked
 11600  0004BA  6FB0               	movwf	(_cmd_data+42)& (0+255),b
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;cmd_consol.c: 221: memset(str, 0, strlen(str));
 11604  0004BC  C038  F024         	movff	parse_cmd_str@str,memset@p1
 11605  0004C0  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 11606  0004C4  0E00               	movlw	0
 11607  0004C6  6E27               	movwf	memset@c+1,c
 11608  0004C8  0E00               	movlw	0
 11609  0004CA  6E26               	movwf	memset@c,c
 11610  0004CC  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 11611  0004D0  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 11612  0004D4  ECED  F01E         	call	_strlen	;wreg free
 11613  0004D8  C01E  F028         	movff	?_strlen,memset@n
 11614  0004DC  C01F  F029         	movff	?_strlen+1,memset@n+1
 11615  0004E0  ECBB  F01F         	call	_memset	;wreg free
 11616  0004E4  D637               	goto	l7944
 11617  0004E6                     l8072:
 11618                           
 11619                           ;cmd_consol.c: 224: return 2;
 11620  0004E6  0E02               	movlw	2
 11621  0004E8  0012               	return	
 11622  0004EA                     l8076:
 11623                           
 11624                           ;cmd_consol.c: 228: return 8;
 11625  0004EA  0E08               	movlw	8
 11626  0004EC  0012               	return	
 11627  0004EE                     l8080:
 11628  0004EE  C03E  F010         	movff	parse_cmd_str@temp,strcmp@s1
 11629  0004F2  C03F  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 11630  0004F6  0E8A               	movlw	low STR_47
 11631  0004F8  6E12               	movwf	strcmp@s2,c
 11632  0004FA  0EFF               	movlw	high STR_47
 11633  0004FC  6E13               	movwf	strcmp@s2+1,c
 11634  0004FE  ECE4  F01D         	call	_strcmp	;wreg free
 11635  000502  5010               	movf	?_strcmp,w,c
 11636  000504  1011               	iorwf	?_strcmp+1,w,c
 11637  000506  A4D8               	btfss	status,2,c
 11638  000508  D092               	goto	l8128
 11639                           
 11640                           ;cmd_consol.c: 234: printf("%s...4\r\n", temp);
 11641  00050A  0E44               	movlw	low STR_48
 11642  00050C  6E1E               	movwf	printf@f,c
 11643  00050E  0EFF               	movlw	high STR_48
 11644  000510  6E1F               	movwf	printf@f+1,c
 11645  000512  C03E  F020         	movff	parse_cmd_str@temp,?_printf+2
 11646  000516  C03F  F021         	movff	parse_cmd_str@temp+1,?_printf+3
 11647  00051A  EC03  F015         	call	_printf	;wreg free
 11648                           
 11649                           ;cmd_consol.c: 235: if (clcd_config_data.init_done == 1) {
 11650  00051E  0449               	decf	_clcd_config_data,w,c
 11651  000520  A4D8               	btfss	status,2,c
 11652  000522  D38E               	goto	l8348
 11653                           
 11654                           ;cmd_consol.c: 236: clear_cmd_data();
 11655  000524  EC5B  F01F         	call	_clear_cmd_data	;wreg free
 11656                           
 11657                           ;cmd_consol.c: 238: if (temp != (0)) {
 11658  000528  503E               	movf	parse_cmd_str@temp,w,c
 11659  00052A  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11660  00052C  B4D8               	btfsc	status,2,c
 11661  00052E  D388               	goto	l8348
 11662                           
 11663                           ;cmd_consol.c: 239: strcpy(CMD, temp);
 11664  000530  0EE3               	movlw	low _CMD
 11665  000532  6E10               	movwf	strcpy@to,c
 11666  000534  0E00               	movlw	high _CMD
 11667  000536  6E11               	movwf	strcpy@to+1,c
 11668  000538  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 11669  00053C  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 11670  000540  ECA4  F01F         	call	_strcpy	;wreg free
 11671                           
 11672                           ;cmd_consol.c: 240: temp = strtok((0), "-', /=");
 11673  000544  0E00               	movlw	0
 11674  000546  6E1B               	movwf	strtok@s1,c
 11675  000548  0E00               	movlw	0
 11676  00054A  6E1C               	movwf	strtok@s1+1,c
 11677  00054C  0EA0               	movlw	low STR_32
 11678  00054E  6E1D               	movwf	strtok@s2,c
 11679  000550  0EFF               	movlw	high STR_32
 11680  000552  6E1E               	movwf	strtok@s2+1,c
 11681  000554  ECF6  F017         	call	_strtok	;wreg free
 11682  000558  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 11683  00055C  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 11684                           
 11685                           ;cmd_consol.c: 241: if (temp != (0)) {
 11686  000560  503E               	movf	parse_cmd_str@temp,w,c
 11687  000562  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11688  000564  B4D8               	btfsc	status,2,c
 11689  000566  D36C               	goto	l8348
 11690                           
 11691                           ;cmd_consol.c: 242: printf("%s...5\r\n", temp);
 11692  000568  0E4D               	movlw	low STR_50
 11693  00056A  6E1E               	movwf	printf@f,c
 11694  00056C  0EFF               	movlw	high STR_50
 11695  00056E  6E1F               	movwf	printf@f+1,c
 11696  000570  C03E  F020         	movff	parse_cmd_str@temp,?_printf+2
 11697  000574  C03F  F021         	movff	parse_cmd_str@temp+1,?_printf+3
 11698  000578  EC03  F015         	call	_printf	;wreg free
 11699                           
 11700                           ;cmd_consol.c: 243: get_uid(temp, &cmd_data.uid);
 11701  00057C  C03E  F024         	movff	parse_cmd_str@temp,get_uid@str
 11702  000580  C03F  F025         	movff	parse_cmd_str@temp+1,get_uid@str+1
 11703  000584  0E86               	movlw	low _cmd_data
 11704  000586  6E26               	movwf	get_uid@data_uid,c
 11705  000588  0E00               	movlw	high _cmd_data
 11706  00058A  6E27               	movwf	get_uid@data_uid+1,c
 11707  00058C  EC55  F018         	call	_get_uid	;wreg free
 11708                           
 11709                           ;cmd_consol.c: 244: if (cmd_data.uid != 0) {
 11710  000590  0100               	movlb	0	; () banked
 11711  000592  5186               	movf	_cmd_data& (0+255),w,b
 11712  000594  0100               	movlb	0	; () banked
 11713  000596  1187               	iorwf	(_cmd_data+1)& (0+255),w,b
 11714  000598  B4D8               	btfsc	status,2,c
 11715  00059A  D047               	goto	l8124
 11716                           
 11717                           ; BSR set to: 0
 11718                           ;cmd_consol.c: 245: temp = strtok((0), "-', /=");
 11719  00059C  0E00               	movlw	0
 11720  00059E  6E1B               	movwf	strtok@s1,c
 11721  0005A0  0E00               	movlw	0
 11722  0005A2  6E1C               	movwf	strtok@s1+1,c
 11723  0005A4  0EA0               	movlw	low STR_32
 11724  0005A6  6E1D               	movwf	strtok@s2,c
 11725  0005A8  0EFF               	movlw	high STR_32
 11726  0005AA  6E1E               	movwf	strtok@s2+1,c
 11727  0005AC  ECF6  F017         	call	_strtok	;wreg free
 11728  0005B0  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 11729  0005B4  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 11730                           
 11731                           ;cmd_consol.c: 246: if (temp != (0)) {
 11732  0005B8  503E               	movf	parse_cmd_str@temp,w,c
 11733  0005BA  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11734  0005BC  B4D8               	btfsc	status,2,c
 11735  0005BE  D340               	goto	l8348
 11736                           
 11737                           ;cmd_consol.c: 247: printf("%s...6\r\n", temp);
 11738  0005C0  0E56               	movlw	low STR_52
 11739  0005C2  6E1E               	movwf	printf@f,c
 11740  0005C4  0EFF               	movlw	high STR_52
 11741  0005C6  6E1F               	movwf	printf@f+1,c
 11742  0005C8  C03E  F020         	movff	parse_cmd_str@temp,?_printf+2
 11743  0005CC  C03F  F021         	movff	parse_cmd_str@temp+1,?_printf+3
 11744  0005D0  EC03  F015         	call	_printf	;wreg free
 11745                           
 11746                           ;cmd_consol.c: 248: get_direction(temp, &cmd_data.scroll);
 11747  0005D4  C03E  F030         	movff	parse_cmd_str@temp,get_direction@str
 11748  0005D8  C03F  F031         	movff	parse_cmd_str@temp+1,get_direction@str+1
 11749  0005DC  0EB6               	movlw	low (_cmd_data+48)
 11750  0005DE  6E32               	movwf	get_direction@data_direction,c
 11751  0005E0  0E00               	movlw	high (_cmd_data+48)
 11752  0005E2  6E33               	movwf	get_direction@data_direction+1,c
 11753  0005E4  EC0A  F01A         	call	_get_direction	;wreg free
 11754                           
 11755                           ;cmd_consol.c: 249: if (cmd_data.scroll < 3 && cmd_data.scroll != -1) {
 11756  0005E8  0E03               	movlw	3
 11757  0005EA  0100               	movlb	0	; () banked
 11758  0005EC  61B6               	cpfslt	(_cmd_data+48)& (0+255),b
 11759  0005EE  D01B               	goto	l8120
 11760                           
 11761                           ; BSR set to: 0
 11762                           ;cmd_consol.c: 250: cmd_data.scroll_set = 1;
 11763  0005F0  0E01               	movlw	1
 11764  0005F2  0100               	movlb	0	; () banked
 11765  0005F4  6FB7               	movwf	(_cmd_data+49)& (0+255),b
 11766                           
 11767                           ;cmd_consol.c: 251: valid_cmd = 1;
 11768  0005F6  0E01               	movlw	1
 11769  0005F8  0100               	movlb	0	; () banked
 11770  0005FA  6F84               	movwf	_valid_cmd& (0+255),b
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;cmd_consol.c: 252: memset(str, 0, strlen(str));
 11774  0005FC  C038  F024         	movff	parse_cmd_str@str,memset@p1
 11775  000600  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 11776  000604  0E00               	movlw	0
 11777  000606  6E27               	movwf	memset@c+1,c
 11778  000608  0E00               	movlw	0
 11779  00060A  6E26               	movwf	memset@c,c
 11780  00060C  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 11781  000610  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 11782  000614  ECED  F01E         	call	_strlen	;wreg free
 11783  000618  C01E  F028         	movff	?_strlen,memset@n
 11784  00061C  C01F  F029         	movff	?_strlen+1,memset@n+1
 11785  000620  ECBB  F01F         	call	_memset	;wreg free
 11786  000624  D597               	goto	l7944
 11787  000626                     l8120:
 11788                           
 11789                           ;cmd_consol.c: 255: return 4;
 11790  000626  0E04               	movlw	4
 11791  000628  0012               	return	
 11792  00062A                     l8124:
 11793                           
 11794                           ;cmd_consol.c: 259: return 8;
 11795  00062A  0E08               	movlw	8
 11796  00062C  0012               	return	
 11797  00062E                     l8128:
 11798  00062E  C03E  F010         	movff	parse_cmd_str@temp,strcmp@s1
 11799  000632  C03F  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 11800  000636  0EA7               	movlw	low STR_53
 11801  000638  6E12               	movwf	strcmp@s2,c
 11802  00063A  0EFF               	movlw	high STR_53
 11803  00063C  6E13               	movwf	strcmp@s2+1,c
 11804  00063E  ECE4  F01D         	call	_strcmp	;wreg free
 11805  000642  5010               	movf	?_strcmp,w,c
 11806  000644  1011               	iorwf	?_strcmp+1,w,c
 11807  000646  A4D8               	btfss	status,2,c
 11808  000648  D112               	goto	l8210
 11809                           
 11810                           ;cmd_consol.c: 265: if (clcd_config_data.init_done == 1) {
 11811  00064A  0449               	decf	_clcd_config_data,w,c
 11812  00064C  A4D8               	btfss	status,2,c
 11813  00064E  D2F8               	goto	l8348
 11814                           
 11815                           ;cmd_consol.c: 266: clear_cmd_data();
 11816  000650  EC5B  F01F         	call	_clear_cmd_data	;wreg free
 11817                           
 11818                           ;cmd_consol.c: 268: if (temp != (0)) {
 11819  000654  503E               	movf	parse_cmd_str@temp,w,c
 11820  000656  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11821  000658  B4D8               	btfsc	status,2,c
 11822  00065A  D2F2               	goto	l8348
 11823                           
 11824                           ;cmd_consol.c: 269: strcpy(CMD, temp);
 11825  00065C  0EE3               	movlw	low _CMD
 11826  00065E  6E10               	movwf	strcpy@to,c
 11827  000660  0E00               	movlw	high _CMD
 11828  000662  6E11               	movwf	strcpy@to+1,c
 11829  000664  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 11830  000668  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 11831  00066C  ECA4  F01F         	call	_strcpy	;wreg free
 11832                           
 11833                           ;cmd_consol.c: 270: temp = strtok((0), "-', /=");
 11834  000670  0E00               	movlw	0
 11835  000672  6E1B               	movwf	strtok@s1,c
 11836  000674  0E00               	movlw	0
 11837  000676  6E1C               	movwf	strtok@s1+1,c
 11838  000678  0EA0               	movlw	low STR_32
 11839  00067A  6E1D               	movwf	strtok@s2,c
 11840  00067C  0EFF               	movlw	high STR_32
 11841  00067E  6E1E               	movwf	strtok@s2+1,c
 11842  000680  ECF6  F017         	call	_strtok	;wreg free
 11843  000684  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 11844  000688  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 11845                           
 11846                           ;cmd_consol.c: 271: if (temp != (0)) {
 11847  00068C  503E               	movf	parse_cmd_str@temp,w,c
 11848  00068E  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11849  000690  B4D8               	btfsc	status,2,c
 11850  000692  D2D6               	goto	l8348
 11851                           
 11852                           ;cmd_consol.c: 272: get_uid(temp, &cmd_data.uid);
 11853  000694  C03E  F024         	movff	parse_cmd_str@temp,get_uid@str
 11854  000698  C03F  F025         	movff	parse_cmd_str@temp+1,get_uid@str+1
 11855  00069C  0E86               	movlw	low _cmd_data
 11856  00069E  6E26               	movwf	get_uid@data_uid,c
 11857  0006A0  0E00               	movlw	high _cmd_data
 11858  0006A2  6E27               	movwf	get_uid@data_uid+1,c
 11859  0006A4  EC55  F018         	call	_get_uid	;wreg free
 11860                           
 11861                           ;cmd_consol.c: 273: if (cmd_data.uid != 0) {
 11862  0006A8  0100               	movlb	0	; () banked
 11863  0006AA  5186               	movf	_cmd_data& (0+255),w,b
 11864  0006AC  0100               	movlb	0	; () banked
 11865  0006AE  1187               	iorwf	(_cmd_data+1)& (0+255),w,b
 11866  0006B0  B4D8               	btfsc	status,2,c
 11867  0006B2  D0DB               	goto	l8206
 11868                           
 11869                           ; BSR set to: 0
 11870                           ;cmd_consol.c: 274: printf("uid = %d,\r\n", cmd_data.uid);
 11871  0006B4  0E8B               	movlw	low STR_55
 11872  0006B6  6E1E               	movwf	printf@f,c
 11873  0006B8  0EFE               	movlw	high STR_55
 11874  0006BA  6E1F               	movwf	printf@f+1,c
 11875  0006BC  C086  F020         	movff	_cmd_data,?_printf+2
 11876  0006C0  C087  F021         	movff	_cmd_data+1,?_printf+3
 11877  0006C4  EC03  F015         	call	_printf	;wreg free
 11878                           
 11879                           ;cmd_consol.c: 275: temp = strtok((0), "-', /=");
 11880  0006C8  0E00               	movlw	0
 11881  0006CA  6E1B               	movwf	strtok@s1,c
 11882  0006CC  0E00               	movlw	0
 11883  0006CE  6E1C               	movwf	strtok@s1+1,c
 11884  0006D0  0EA0               	movlw	low STR_32
 11885  0006D2  6E1D               	movwf	strtok@s2,c
 11886  0006D4  0EFF               	movlw	high STR_32
 11887  0006D6  6E1E               	movwf	strtok@s2+1,c
 11888  0006D8  ECF6  F017         	call	_strtok	;wreg free
 11889  0006DC  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 11890  0006E0  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 11891                           
 11892                           ;cmd_consol.c: 276: if (temp != (0)) {
 11893  0006E4  503E               	movf	parse_cmd_str@temp,w,c
 11894  0006E6  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11895  0006E8  B4D8               	btfsc	status,2,c
 11896  0006EA  D2AA               	goto	l8348
 11897                           
 11898                           ;cmd_consol.c: 277: collect_row(temp, &cmd_data.start_row);
 11899  0006EC  C03E  F030         	movff	parse_cmd_str@temp,collect_row@str
 11900  0006F0  C03F  F031         	movff	parse_cmd_str@temp+1,collect_row@str+1
 11901  0006F4  0EB1               	movlw	low (_cmd_data+43)
 11902  0006F6  6E32               	movwf	collect_row@data_row,c
 11903  0006F8  0E00               	movlw	high (_cmd_data+43)
 11904  0006FA  6E33               	movwf	collect_row@data_row+1,c
 11905  0006FC  EC0A  F019         	call	_collect_row	;wreg free
 11906                           
 11907                           ;cmd_consol.c: 278: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 11908  000700  0E0A               	movlw	low STR_57
 11909  000702  6E1E               	movwf	printf@f,c
 11910  000704  0EFD               	movlw	high STR_57
 11911  000706  6E1F               	movwf	printf@f+1,c
 11912  000708  C0B1  F020         	movff	_cmd_data+43,?_printf+2
 11913  00070C  6A21               	clrf	?_printf+3,c
 11914  00070E  EC03  F015         	call	_printf	;wreg free
 11915                           
 11916                           ;cmd_consol.c: 279: if (cmd_data.start_row != 255) {
 11917  000712  0100               	movlb	0	; () banked
 11918  000714  29B1               	incf	(_cmd_data+43)& (0+255),w,b
 11919  000716  B4D8               	btfsc	status,2,c
 11920  000718  D0A6               	goto	l8202
 11921                           
 11922                           ; BSR set to: 0
 11923                           ;cmd_consol.c: 280: temp = strtok((0), "-', /=");
 11924  00071A  0E00               	movlw	0
 11925  00071C  6E1B               	movwf	strtok@s1,c
 11926  00071E  0E00               	movlw	0
 11927  000720  6E1C               	movwf	strtok@s1+1,c
 11928  000722  0EA0               	movlw	low STR_32
 11929  000724  6E1D               	movwf	strtok@s2,c
 11930  000726  0EFF               	movlw	high STR_32
 11931  000728  6E1E               	movwf	strtok@s2+1,c
 11932  00072A  ECF6  F017         	call	_strtok	;wreg free
 11933  00072E  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 11934  000732  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 11935                           
 11936                           ;cmd_consol.c: 281: if (temp != (0)) {
 11937  000736  503E               	movf	parse_cmd_str@temp,w,c
 11938  000738  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11939  00073A  B4D8               	btfsc	status,2,c
 11940  00073C  D281               	goto	l8348
 11941                           
 11942                           ;cmd_consol.c: 282: collect_column(temp, &cmd_data.start_col);
 11943  00073E  C03E  F030         	movff	parse_cmd_str@temp,collect_column@str
 11944  000742  C03F  F031         	movff	parse_cmd_str@temp+1,collect_column@str+1
 11945  000746  0EB2               	movlw	low (_cmd_data+44)
 11946  000748  6E32               	movwf	collect_column@data_column,c
 11947  00074A  0E00               	movlw	high (_cmd_data+44)
 11948  00074C  6E33               	movwf	collect_column@data_column+1,c
 11949  00074E  EC61  F019         	call	_collect_column	;wreg free
 11950                           
 11951                           ;cmd_consol.c: 283: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 11952  000752  0EEF               	movlw	low STR_59
 11953  000754  6E1E               	movwf	printf@f,c
 11954  000756  0EFC               	movlw	high STR_59
 11955  000758  6E1F               	movwf	printf@f+1,c
 11956  00075A  C0B2  F020         	movff	_cmd_data+44,?_printf+2
 11957  00075E  6A21               	clrf	?_printf+3,c
 11958  000760  EC03  F015         	call	_printf	;wreg free
 11959                           
 11960                           ;cmd_consol.c: 284: if (cmd_data.start_row != 255) {
 11961  000764  0100               	movlb	0	; () banked
 11962  000766  29B1               	incf	(_cmd_data+43)& (0+255),w,b
 11963  000768  B4D8               	btfsc	status,2,c
 11964  00076A  D07B               	goto	l8198
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;cmd_consol.c: 285: temp = strtok((0), "-', /=");
 11968  00076C  0E00               	movlw	0
 11969  00076E  6E1B               	movwf	strtok@s1,c
 11970  000770  0E00               	movlw	0
 11971  000772  6E1C               	movwf	strtok@s1+1,c
 11972  000774  0EA0               	movlw	low STR_32
 11973  000776  6E1D               	movwf	strtok@s2,c
 11974  000778  0EFF               	movlw	high STR_32
 11975  00077A  6E1E               	movwf	strtok@s2+1,c
 11976  00077C  ECF6  F017         	call	_strtok	;wreg free
 11977  000780  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 11978  000784  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 11979                           
 11980                           ;cmd_consol.c: 286: if (temp != (0)) {
 11981  000788  503E               	movf	parse_cmd_str@temp,w,c
 11982  00078A  103F               	iorwf	parse_cmd_str@temp+1,w,c
 11983  00078C  B4D8               	btfsc	status,2,c
 11984  00078E  D258               	goto	l8348
 11985                           
 11986                           ;cmd_consol.c: 287: collect_row(temp, &cmd_data.end_row);
 11987  000790  C03E  F030         	movff	parse_cmd_str@temp,collect_row@str
 11988  000794  C03F  F031         	movff	parse_cmd_str@temp+1,collect_row@str+1
 11989  000798  0EB3               	movlw	low (_cmd_data+45)
 11990  00079A  6E32               	movwf	collect_row@data_row,c
 11991  00079C  0E00               	movlw	high (_cmd_data+45)
 11992  00079E  6E33               	movwf	collect_row@data_row+1,c
 11993  0007A0  EC0A  F019         	call	_collect_row	;wreg free
 11994                           
 11995                           ;cmd_consol.c: 288: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 11996  0007A4  0E8C               	movlw	low STR_61
 11997  0007A6  6E1E               	movwf	printf@f,c
 11998  0007A8  0EFD               	movlw	high STR_61
 11999  0007AA  6E1F               	movwf	printf@f+1,c
 12000  0007AC  C0B3  F020         	movff	_cmd_data+45,?_printf+2
 12001  0007B0  6A21               	clrf	?_printf+3,c
 12002  0007B2  EC03  F015         	call	_printf	;wreg free
 12003                           
 12004                           ;cmd_consol.c: 289: if (cmd_data.end_row != 255) {
 12005  0007B6  0100               	movlb	0	; () banked
 12006  0007B8  29B3               	incf	(_cmd_data+45)& (0+255),w,b
 12007  0007BA  B4D8               	btfsc	status,2,c
 12008  0007BC  D050               	goto	l8194
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;cmd_consol.c: 290: temp = strtok((0), "-', /=");
 12012  0007BE  0E00               	movlw	0
 12013  0007C0  6E1B               	movwf	strtok@s1,c
 12014  0007C2  0E00               	movlw	0
 12015  0007C4  6E1C               	movwf	strtok@s1+1,c
 12016  0007C6  0EA0               	movlw	low STR_32
 12017  0007C8  6E1D               	movwf	strtok@s2,c
 12018  0007CA  0EFF               	movlw	high STR_32
 12019  0007CC  6E1E               	movwf	strtok@s2+1,c
 12020  0007CE  ECF6  F017         	call	_strtok	;wreg free
 12021  0007D2  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 12022  0007D6  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 12023                           
 12024                           ;cmd_consol.c: 291: if (temp != (0)) {
 12025  0007DA  503E               	movf	parse_cmd_str@temp,w,c
 12026  0007DC  103F               	iorwf	parse_cmd_str@temp+1,w,c
 12027  0007DE  B4D8               	btfsc	status,2,c
 12028  0007E0  D22F               	goto	l8348
 12029                           
 12030                           ;cmd_consol.c: 292: printf("col = %s\r\n", temp);
 12031  0007E2  0E2F               	movlw	low STR_63
 12032  0007E4  6E1E               	movwf	printf@f,c
 12033  0007E6  0EFF               	movlw	high STR_63
 12034  0007E8  6E1F               	movwf	printf@f+1,c
 12035  0007EA  C03E  F020         	movff	parse_cmd_str@temp,?_printf+2
 12036  0007EE  C03F  F021         	movff	parse_cmd_str@temp+1,?_printf+3
 12037  0007F2  EC03  F015         	call	_printf	;wreg free
 12038                           
 12039                           ;cmd_consol.c: 293: collect_column(temp, &cmd_data.end_col);
 12040  0007F6  C03E  F030         	movff	parse_cmd_str@temp,collect_column@str
 12041  0007FA  C03F  F031         	movff	parse_cmd_str@temp+1,collect_column@str+1
 12042  0007FE  0EB4               	movlw	low (_cmd_data+46)
 12043  000800  6E32               	movwf	collect_column@data_column,c
 12044  000802  0E00               	movlw	high (_cmd_data+46)
 12045  000804  6E33               	movwf	collect_column@data_column+1,c
 12046  000806  EC61  F019         	call	_collect_column	;wreg free
 12047                           
 12048                           ;cmd_consol.c: 294: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 12049  00080A  0E73               	movlw	low STR_64
 12050  00080C  6E1E               	movwf	printf@f,c
 12051  00080E  0EFD               	movlw	high STR_64
 12052  000810  6E1F               	movwf	printf@f+1,c
 12053  000812  C0B4  F020         	movff	_cmd_data+46,?_printf+2
 12054  000816  6A21               	clrf	?_printf+3,c
 12055  000818  EC03  F015         	call	_printf	;wreg free
 12056                           
 12057                           ;cmd_consol.c: 295: if (cmd_data.end_row != 255) {
 12058  00081C  0100               	movlb	0	; () banked
 12059  00081E  29B3               	incf	(_cmd_data+45)& (0+255),w,b
 12060  000820  B4D8               	btfsc	status,2,c
 12061  000822  D01B               	goto	l8190
 12062                           
 12063                           ; BSR set to: 0
 12064                           ;cmd_consol.c: 296: cmd_data.row_col_set = 1;
 12065  000824  0E01               	movlw	1
 12066  000826  0100               	movlb	0	; () banked
 12067  000828  6FB5               	movwf	(_cmd_data+47)& (0+255),b
 12068                           
 12069                           ;cmd_consol.c: 297: valid_cmd = 1;
 12070  00082A  0E01               	movlw	1
 12071  00082C  0100               	movlb	0	; () banked
 12072  00082E  6F84               	movwf	_valid_cmd& (0+255),b
 12073                           
 12074                           ; BSR set to: 0
 12075                           ;cmd_consol.c: 298: memset(str, 0, strlen(str));
 12076  000830  C038  F024         	movff	parse_cmd_str@str,memset@p1
 12077  000834  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 12078  000838  0E00               	movlw	0
 12079  00083A  6E27               	movwf	memset@c+1,c
 12080  00083C  0E00               	movlw	0
 12081  00083E  6E26               	movwf	memset@c,c
 12082  000840  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 12083  000844  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 12084  000848  ECED  F01E         	call	_strlen	;wreg free
 12085  00084C  C01E  F028         	movff	?_strlen,memset@n
 12086  000850  C01F  F029         	movff	?_strlen+1,memset@n+1
 12087  000854  ECBB  F01F         	call	_memset	;wreg free
 12088  000858  D47D               	goto	l7944
 12089  00085A                     l8190:
 12090                           
 12091                           ;cmd_consol.c: 301: return 3;
 12092  00085A  0E03               	movlw	3
 12093  00085C  0012               	return	
 12094  00085E                     l8194:
 12095                           
 12096                           ;cmd_consol.c: 305: return 3;
 12097  00085E  0E03               	movlw	3
 12098  000860  0012               	return	
 12099  000862                     l8198:
 12100                           
 12101                           ;cmd_consol.c: 309: return 3;
 12102  000862  0E03               	movlw	3
 12103  000864  0012               	return	
 12104  000866                     l8202:
 12105                           
 12106                           ;cmd_consol.c: 313: return 3;
 12107  000866  0E03               	movlw	3
 12108  000868  0012               	return	
 12109  00086A                     l8206:
 12110                           
 12111                           ;cmd_consol.c: 317: return 8;
 12112  00086A  0E08               	movlw	8
 12113  00086C  0012               	return	
 12114  00086E                     l8210:
 12115  00086E  C03E  F010         	movff	parse_cmd_str@temp,strcmp@s1
 12116  000872  C03F  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 12117  000876  0EAE               	movlw	low STR_65
 12118  000878  6E12               	movwf	strcmp@s2,c
 12119  00087A  0EFF               	movlw	high STR_65
 12120  00087C  6E13               	movwf	strcmp@s2+1,c
 12121  00087E  ECE4  F01D         	call	_strcmp	;wreg free
 12122  000882  5010               	movf	?_strcmp,w,c
 12123  000884  1011               	iorwf	?_strcmp+1,w,c
 12124  000886  A4D8               	btfss	status,2,c
 12125  000888  D01F               	goto	l8224
 12126                           
 12127                           ;cmd_consol.c: 323: strcpy(CMD, temp);
 12128  00088A  0EE3               	movlw	low _CMD
 12129  00088C  6E10               	movwf	strcpy@to,c
 12130  00088E  0E00               	movlw	high _CMD
 12131  000890  6E11               	movwf	strcpy@to+1,c
 12132  000892  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 12133  000896  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 12134  00089A  ECA4  F01F         	call	_strcpy	;wreg free
 12135                           
 12136                           ;cmd_consol.c: 324: memset(str, 0, strlen(str));
 12137  00089E  C038  F024         	movff	parse_cmd_str@str,memset@p1
 12138  0008A2  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 12139  0008A6  0E00               	movlw	0
 12140  0008A8  6E27               	movwf	memset@c+1,c
 12141  0008AA  0E00               	movlw	0
 12142  0008AC  6E26               	movwf	memset@c,c
 12143  0008AE  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 12144  0008B2  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 12145  0008B6  ECED  F01E         	call	_strlen	;wreg free
 12146  0008BA  C01E  F028         	movff	?_strlen,memset@n
 12147  0008BE  C01F  F029         	movff	?_strlen+1,memset@n+1
 12148  0008C2  ECBB  F01F         	call	_memset	;wreg free
 12149  0008C6  D1B7               	goto	l8342
 12150  0008C8                     l8224:
 12151  0008C8  C03E  F010         	movff	parse_cmd_str@temp,strcmp@s1
 12152  0008CC  C03F  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 12153  0008D0  0ED2               	movlw	low STR_66
 12154  0008D2  6E12               	movwf	strcmp@s2,c
 12155  0008D4  0EFF               	movlw	high STR_66
 12156  0008D6  6E13               	movwf	strcmp@s2+1,c
 12157  0008D8  ECE4  F01D         	call	_strcmp	;wreg free
 12158  0008DC  5010               	movf	?_strcmp,w,c
 12159  0008DE  1011               	iorwf	?_strcmp+1,w,c
 12160  0008E0  A4D8               	btfss	status,2,c
 12161  0008E2  D17D               	goto	l8336
 12162                           
 12163                           ;cmd_consol.c: 328: if (clcd_config_data.init_done == 1) {
 12164  0008E4  0449               	decf	_clcd_config_data,w,c
 12165  0008E6  A4D8               	btfss	status,2,c
 12166  0008E8  D1AB               	goto	l8348
 12167                           
 12168                           ;cmd_consol.c: 329: clear_cmd_data();
 12169  0008EA  EC5B  F01F         	call	_clear_cmd_data	;wreg free
 12170                           
 12171                           ;cmd_consol.c: 331: if (temp != (0)) {
 12172  0008EE  503E               	movf	parse_cmd_str@temp,w,c
 12173  0008F0  103F               	iorwf	parse_cmd_str@temp+1,w,c
 12174  0008F2  B4D8               	btfsc	status,2,c
 12175  0008F4  D1A5               	goto	l8348
 12176                           
 12177                           ;cmd_consol.c: 332: strcpy(CMD, temp);
 12178  0008F6  0EE3               	movlw	low _CMD
 12179  0008F8  6E10               	movwf	strcpy@to,c
 12180  0008FA  0E00               	movlw	high _CMD
 12181  0008FC  6E11               	movwf	strcpy@to+1,c
 12182  0008FE  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 12183  000902  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 12184  000906  ECA4  F01F         	call	_strcpy	;wreg free
 12185                           
 12186                           ;cmd_consol.c: 333: printf("CMD=%s\r\n", CMD);
 12187  00090A  0E5F               	movlw	low STR_67
 12188  00090C  6E1E               	movwf	printf@f,c
 12189  00090E  0EFF               	movlw	high STR_67
 12190  000910  6E1F               	movwf	printf@f+1,c
 12191  000912  0EE3               	movlw	low _CMD
 12192  000914  6E20               	movwf	?_printf+2,c
 12193  000916  0E00               	movlw	high _CMD
 12194  000918  6E21               	movwf	?_printf+3,c
 12195  00091A  EC03  F015         	call	_printf	;wreg free
 12196                           
 12197                           ;cmd_consol.c: 334: temp = strtok((0), ",");
 12198  00091E  0E00               	movlw	0
 12199  000920  6E1B               	movwf	strtok@s1,c
 12200  000922  0E00               	movlw	0
 12201  000924  6E1C               	movwf	strtok@s1+1,c
 12202  000926  0EFD               	movlw	low STR_68
 12203  000928  6E1D               	movwf	strtok@s2,c
 12204  00092A  0EFF               	movlw	high STR_68
 12205  00092C  6E1E               	movwf	strtok@s2+1,c
 12206  00092E  ECF6  F017         	call	_strtok	;wreg free
 12207  000932  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 12208  000936  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 12209                           
 12210                           ;cmd_consol.c: 335: if (temp != (0)) {
 12211  00093A  503E               	movf	parse_cmd_str@temp,w,c
 12212  00093C  103F               	iorwf	parse_cmd_str@temp+1,w,c
 12213  00093E  B4D8               	btfsc	status,2,c
 12214  000940  D17F               	goto	l8348
 12215                           
 12216                           ;cmd_consol.c: 336: if (get_str(temp, cmd_data.data) == 1) {
 12217  000942  C03E  F02C         	movff	parse_cmd_str@temp,get_str@str
 12218  000946  C03F  F02D         	movff	parse_cmd_str@temp+1,get_str@str+1
 12219  00094A  0E88               	movlw	low (_cmd_data+2)
 12220  00094C  6E2E               	movwf	get_str@data_str,c
 12221  00094E  0E00               	movlw	high (_cmd_data+2)
 12222  000950  6E2F               	movwf	get_str@data_str+1,c
 12223  000952  EC33  F01C         	call	_get_str	;wreg free
 12224  000956  06E8               	decf	wreg,f,c
 12225  000958  A4D8               	btfss	status,2,c
 12226  00095A  D13F               	goto	l8332
 12227                           
 12228                           ;cmd_consol.c: 337: printf("data=%s\r\n", cmd_data.data);
 12229  00095C  0E3A               	movlw	low STR_69
 12230  00095E  6E1E               	movwf	printf@f,c
 12231  000960  0EFF               	movlw	high STR_69
 12232  000962  6E1F               	movwf	printf@f+1,c
 12233  000964  0E88               	movlw	low (_cmd_data+2)
 12234  000966  6E20               	movwf	?_printf+2,c
 12235  000968  0E00               	movlw	high (_cmd_data+2)
 12236  00096A  6E21               	movwf	?_printf+3,c
 12237  00096C  EC03  F015         	call	_printf	;wreg free
 12238                           
 12239                           ;cmd_consol.c: 338: temp = strtok((0), "-', /=");
 12240  000970  0E00               	movlw	0
 12241  000972  6E1B               	movwf	strtok@s1,c
 12242  000974  0E00               	movlw	0
 12243  000976  6E1C               	movwf	strtok@s1+1,c
 12244  000978  0EA0               	movlw	low STR_32
 12245  00097A  6E1D               	movwf	strtok@s2,c
 12246  00097C  0EFF               	movlw	high STR_32
 12247  00097E  6E1E               	movwf	strtok@s2+1,c
 12248  000980  ECF6  F017         	call	_strtok	;wreg free
 12249  000984  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 12250  000988  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 12251                           
 12252                           ;cmd_consol.c: 339: if (temp != (0)) {
 12253  00098C  503E               	movf	parse_cmd_str@temp,w,c
 12254  00098E  103F               	iorwf	parse_cmd_str@temp+1,w,c
 12255  000990  B4D8               	btfsc	status,2,c
 12256  000992  D156               	goto	l8348
 12257                           
 12258                           ;cmd_consol.c: 340: collect_row(temp, &cmd_data.start_row);
 12259  000994  C03E  F030         	movff	parse_cmd_str@temp,collect_row@str
 12260  000998  C03F  F031         	movff	parse_cmd_str@temp+1,collect_row@str+1
 12261  00099C  0EB1               	movlw	low (_cmd_data+43)
 12262  00099E  6E32               	movwf	collect_row@data_row,c
 12263  0009A0  0E00               	movlw	high (_cmd_data+43)
 12264  0009A2  6E33               	movwf	collect_row@data_row+1,c
 12265  0009A4  EC0A  F019         	call	_collect_row	;wreg free
 12266                           
 12267                           ;cmd_consol.c: 341: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 12268  0009A8  0E0A               	movlw	low STR_57
 12269  0009AA  6E1E               	movwf	printf@f,c
 12270  0009AC  0EFD               	movlw	high STR_57
 12271  0009AE  6E1F               	movwf	printf@f+1,c
 12272  0009B0  C0B1  F020         	movff	_cmd_data+43,?_printf+2
 12273  0009B4  6A21               	clrf	?_printf+3,c
 12274  0009B6  EC03  F015         	call	_printf	;wreg free
 12275                           
 12276                           ;cmd_consol.c: 342: if (cmd_data.start_row != 255) {
 12277  0009BA  0100               	movlb	0	; () banked
 12278  0009BC  29B1               	incf	(_cmd_data+43)& (0+255),w,b
 12279  0009BE  B4D8               	btfsc	status,2,c
 12280  0009C0  D10A               	goto	l8328
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;cmd_consol.c: 343: temp = strtok((0), "-', /=");
 12284  0009C2  0E00               	movlw	0
 12285  0009C4  6E1B               	movwf	strtok@s1,c
 12286  0009C6  0E00               	movlw	0
 12287  0009C8  6E1C               	movwf	strtok@s1+1,c
 12288  0009CA  0EA0               	movlw	low STR_32
 12289  0009CC  6E1D               	movwf	strtok@s2,c
 12290  0009CE  0EFF               	movlw	high STR_32
 12291  0009D0  6E1E               	movwf	strtok@s2+1,c
 12292  0009D2  ECF6  F017         	call	_strtok	;wreg free
 12293  0009D6  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 12294  0009DA  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 12295                           
 12296                           ;cmd_consol.c: 344: if (temp != (0)) {
 12297  0009DE  503E               	movf	parse_cmd_str@temp,w,c
 12298  0009E0  103F               	iorwf	parse_cmd_str@temp+1,w,c
 12299  0009E2  B4D8               	btfsc	status,2,c
 12300  0009E4  D12D               	goto	l8348
 12301                           
 12302                           ;cmd_consol.c: 345: collect_column(temp, &cmd_data.start_col);
 12303  0009E6  C03E  F030         	movff	parse_cmd_str@temp,collect_column@str
 12304  0009EA  C03F  F031         	movff	parse_cmd_str@temp+1,collect_column@str+1
 12305  0009EE  0EB2               	movlw	low (_cmd_data+44)
 12306  0009F0  6E32               	movwf	collect_column@data_column,c
 12307  0009F2  0E00               	movlw	high (_cmd_data+44)
 12308  0009F4  6E33               	movwf	collect_column@data_column+1,c
 12309  0009F6  EC61  F019         	call	_collect_column	;wreg free
 12310                           
 12311                           ;cmd_consol.c: 346: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 12312  0009FA  0EEF               	movlw	low STR_59
 12313  0009FC  6E1E               	movwf	printf@f,c
 12314  0009FE  0EFC               	movlw	high STR_59
 12315  000A00  6E1F               	movwf	printf@f+1,c
 12316  000A02  C0B2  F020         	movff	_cmd_data+44,?_printf+2
 12317  000A06  6A21               	clrf	?_printf+3,c
 12318  000A08  EC03  F015         	call	_printf	;wreg free
 12319                           
 12320                           ;cmd_consol.c: 347: if (cmd_data.start_row != 255) {
 12321  000A0C  0100               	movlb	0	; () banked
 12322  000A0E  29B1               	incf	(_cmd_data+43)& (0+255),w,b
 12323  000A10  B4D8               	btfsc	status,2,c
 12324  000A12  D0DF               	goto	l8324
 12325                           
 12326                           ; BSR set to: 0
 12327                           ;cmd_consol.c: 348: temp = strtok((0), "-', /=");
 12328  000A14  0E00               	movlw	0
 12329  000A16  6E1B               	movwf	strtok@s1,c
 12330  000A18  0E00               	movlw	0
 12331  000A1A  6E1C               	movwf	strtok@s1+1,c
 12332  000A1C  0EA0               	movlw	low STR_32
 12333  000A1E  6E1D               	movwf	strtok@s2,c
 12334  000A20  0EFF               	movlw	high STR_32
 12335  000A22  6E1E               	movwf	strtok@s2+1,c
 12336  000A24  ECF6  F017         	call	_strtok	;wreg free
 12337  000A28  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 12338  000A2C  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 12339                           
 12340                           ;cmd_consol.c: 349: if (temp != (0)) {
 12341  000A30  503E               	movf	parse_cmd_str@temp,w,c
 12342  000A32  103F               	iorwf	parse_cmd_str@temp+1,w,c
 12343  000A34  B4D8               	btfsc	status,2,c
 12344  000A36  D104               	goto	l8348
 12345                           
 12346                           ;cmd_consol.c: 350: collect_row(temp, &cmd_data.end_row);
 12347  000A38  C03E  F030         	movff	parse_cmd_str@temp,collect_row@str
 12348  000A3C  C03F  F031         	movff	parse_cmd_str@temp+1,collect_row@str+1
 12349  000A40  0EB3               	movlw	low (_cmd_data+45)
 12350  000A42  6E32               	movwf	collect_row@data_row,c
 12351  000A44  0E00               	movlw	high (_cmd_data+45)
 12352  000A46  6E33               	movwf	collect_row@data_row+1,c
 12353  000A48  EC0A  F019         	call	_collect_row	;wreg free
 12354                           
 12355                           ;cmd_consol.c: 351: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 12356  000A4C  0E8C               	movlw	low STR_61
 12357  000A4E  6E1E               	movwf	printf@f,c
 12358  000A50  0EFD               	movlw	high STR_61
 12359  000A52  6E1F               	movwf	printf@f+1,c
 12360  000A54  C0B3  F020         	movff	_cmd_data+45,?_printf+2
 12361  000A58  6A21               	clrf	?_printf+3,c
 12362  000A5A  EC03  F015         	call	_printf	;wreg free
 12363                           
 12364                           ;cmd_consol.c: 352: if (cmd_data.end_row != 255) {
 12365  000A5E  0100               	movlb	0	; () banked
 12366  000A60  29B3               	incf	(_cmd_data+45)& (0+255),w,b
 12367  000A62  B4D8               	btfsc	status,2,c
 12368  000A64  D0B4               	goto	l8320
 12369                           
 12370                           ; BSR set to: 0
 12371                           ;cmd_consol.c: 353: temp = strtok((0), "-', /=");
 12372  000A66  0E00               	movlw	0
 12373  000A68  6E1B               	movwf	strtok@s1,c
 12374  000A6A  0E00               	movlw	0
 12375  000A6C  6E1C               	movwf	strtok@s1+1,c
 12376  000A6E  0EA0               	movlw	low STR_32
 12377  000A70  6E1D               	movwf	strtok@s2,c
 12378  000A72  0EFF               	movlw	high STR_32
 12379  000A74  6E1E               	movwf	strtok@s2+1,c
 12380  000A76  ECF6  F017         	call	_strtok	;wreg free
 12381  000A7A  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 12382  000A7E  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 12383                           
 12384                           ;cmd_consol.c: 354: if (temp != (0)) {
 12385  000A82  503E               	movf	parse_cmd_str@temp,w,c
 12386  000A84  103F               	iorwf	parse_cmd_str@temp+1,w,c
 12387  000A86  B4D8               	btfsc	status,2,c
 12388  000A88  D0DB               	goto	l8348
 12389                           
 12390                           ;cmd_consol.c: 355: printf("col = %s\r\n", temp);
 12391  000A8A  0E2F               	movlw	low STR_63
 12392  000A8C  6E1E               	movwf	printf@f,c
 12393  000A8E  0EFF               	movlw	high STR_63
 12394  000A90  6E1F               	movwf	printf@f+1,c
 12395  000A92  C03E  F020         	movff	parse_cmd_str@temp,?_printf+2
 12396  000A96  C03F  F021         	movff	parse_cmd_str@temp+1,?_printf+3
 12397  000A9A  EC03  F015         	call	_printf	;wreg free
 12398                           
 12399                           ;cmd_consol.c: 356: collect_column(temp, &cmd_data.end_col);
 12400  000A9E  C03E  F030         	movff	parse_cmd_str@temp,collect_column@str
 12401  000AA2  C03F  F031         	movff	parse_cmd_str@temp+1,collect_column@str+1
 12402  000AA6  0EB4               	movlw	low (_cmd_data+46)
 12403  000AA8  6E32               	movwf	collect_column@data_column,c
 12404  000AAA  0E00               	movlw	high (_cmd_data+46)
 12405  000AAC  6E33               	movwf	collect_column@data_column+1,c
 12406  000AAE  EC61  F019         	call	_collect_column	;wreg free
 12407                           
 12408                           ;cmd_consol.c: 357: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 12409  000AB2  0E73               	movlw	low STR_64
 12410  000AB4  6E1E               	movwf	printf@f,c
 12411  000AB6  0EFD               	movlw	high STR_64
 12412  000AB8  6E1F               	movwf	printf@f+1,c
 12413  000ABA  C0B4  F020         	movff	_cmd_data+46,?_printf+2
 12414  000ABE  6A21               	clrf	?_printf+3,c
 12415  000AC0  EC03  F015         	call	_printf	;wreg free
 12416                           
 12417                           ;cmd_consol.c: 358: if (cmd_data.end_row != 255) {
 12418  000AC4  0100               	movlb	0	; () banked
 12419  000AC6  29B3               	incf	(_cmd_data+45)& (0+255),w,b
 12420  000AC8  B4D8               	btfsc	status,2,c
 12421  000ACA  D07F               	goto	l8316
 12422                           
 12423                           ; BSR set to: 0
 12424                           ;cmd_consol.c: 359: temp = strtok((0), "-', /=");
 12425  000ACC  0E00               	movlw	0
 12426  000ACE  6E1B               	movwf	strtok@s1,c
 12427  000AD0  0E00               	movlw	0
 12428  000AD2  6E1C               	movwf	strtok@s1+1,c
 12429  000AD4  0EA0               	movlw	low STR_32
 12430  000AD6  6E1D               	movwf	strtok@s2,c
 12431  000AD8  0EFF               	movlw	high STR_32
 12432  000ADA  6E1E               	movwf	strtok@s2+1,c
 12433  000ADC  ECF6  F017         	call	_strtok	;wreg free
 12434  000AE0  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 12435  000AE4  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 12436                           
 12437                           ;cmd_consol.c: 360: if (temp != (0)) {
 12438  000AE8  503E               	movf	parse_cmd_str@temp,w,c
 12439  000AEA  103F               	iorwf	parse_cmd_str@temp+1,w,c
 12440  000AEC  B4D8               	btfsc	status,2,c
 12441  000AEE  D0A8               	goto	l8348
 12442                           
 12443                           ;cmd_consol.c: 361: if (get_direction(temp, &cmd_data.scroll) == 1) {
 12444  000AF0  C03E  F030         	movff	parse_cmd_str@temp,get_direction@str
 12445  000AF4  C03F  F031         	movff	parse_cmd_str@temp+1,get_direction@str+1
 12446  000AF8  0EB6               	movlw	low (_cmd_data+48)
 12447  000AFA  6E32               	movwf	get_direction@data_direction,c
 12448  000AFC  0E00               	movlw	high (_cmd_data+48)
 12449  000AFE  6E33               	movwf	get_direction@data_direction+1,c
 12450  000B00  EC0A  F01A         	call	_get_direction	;wreg free
 12451  000B04  06E8               	decf	wreg,f,c
 12452  000B06  A4D8               	btfss	status,2,c
 12453  000B08  D05E               	goto	l8312
 12454                           
 12455                           ;cmd_consol.c: 362: temp = strtok((0), "-', /=");
 12456  000B0A  0E00               	movlw	0
 12457  000B0C  6E1B               	movwf	strtok@s1,c
 12458  000B0E  0E00               	movlw	0
 12459  000B10  6E1C               	movwf	strtok@s1+1,c
 12460  000B12  0EA0               	movlw	low STR_32
 12461  000B14  6E1D               	movwf	strtok@s2,c
 12462  000B16  0EFF               	movlw	high STR_32
 12463  000B18  6E1E               	movwf	strtok@s2+1,c
 12464  000B1A  ECF6  F017         	call	_strtok	;wreg free
 12465  000B1E  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 12466  000B22  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 12467                           
 12468                           ;cmd_consol.c: 363: if (temp != (0)) {
 12469  000B26  503E               	movf	parse_cmd_str@temp,w,c
 12470  000B28  103F               	iorwf	parse_cmd_str@temp+1,w,c
 12471  000B2A  B4D8               	btfsc	status,2,c
 12472  000B2C  D089               	goto	l8348
 12473                           
 12474                           ;cmd_consol.c: 364: if (get_dis_frq(temp, &cmd_data.dis_frq) == 1) {
 12475  000B2E  C03E  F030         	movff	parse_cmd_str@temp,get_dis_frq@str
 12476  000B32  C03F  F031         	movff	parse_cmd_str@temp+1,get_dis_frq@str+1
 12477  000B36  0EB8               	movlw	low (_cmd_data+50)
 12478  000B38  6E32               	movwf	get_dis_frq@data_frq,c
 12479  000B3A  0E00               	movlw	high (_cmd_data+50)
 12480  000B3C  6E33               	movwf	get_dis_frq@data_frq+1,c
 12481  000B3E  ECA8  F01A         	call	_get_dis_frq	;wreg free
 12482  000B42  06E8               	decf	wreg,f,c
 12483  000B44  A4D8               	btfss	status,2,c
 12484  000B46  D03D               	goto	l8308
 12485                           
 12486                           ;cmd_consol.c: 365: temp = strtok((0), "-', /=");
 12487  000B48  0E00               	movlw	0
 12488  000B4A  6E1B               	movwf	strtok@s1,c
 12489  000B4C  0E00               	movlw	0
 12490  000B4E  6E1C               	movwf	strtok@s1+1,c
 12491  000B50  0EA0               	movlw	low STR_32
 12492  000B52  6E1D               	movwf	strtok@s2,c
 12493  000B54  0EFF               	movlw	high STR_32
 12494  000B56  6E1E               	movwf	strtok@s2+1,c
 12495  000B58  ECF6  F017         	call	_strtok	;wreg free
 12496  000B5C  C01B  F03E         	movff	?_strtok,parse_cmd_str@temp
 12497  000B60  C01C  F03F         	movff	?_strtok+1,parse_cmd_str@temp+1
 12498                           
 12499                           ;cmd_consol.c: 366: if (temp != (0)) {
 12500  000B64  503E               	movf	parse_cmd_str@temp,w,c
 12501  000B66  103F               	iorwf	parse_cmd_str@temp+1,w,c
 12502  000B68  B4D8               	btfsc	status,2,c
 12503  000B6A  D06A               	goto	l8348
 12504                           
 12505                           ;cmd_consol.c: 367: if (get_over_write_data(temp, &cmd_data.over_write) == 1) {
 12506  000B6C  C03E  F030         	movff	parse_cmd_str@temp,get_over_write_data@str
 12507  000B70  C03F  F031         	movff	parse_cmd_str@temp+1,get_over_write_data@str+1
 12508  000B74  0EBA               	movlw	low (_cmd_data+52)
 12509  000B76  6E32               	movwf	get_over_write_data@over_write_data,c
 12510  000B78  0E00               	movlw	high (_cmd_data+52)
 12511  000B7A  6E33               	movwf	get_over_write_data@over_write_data+1,c
 12512  000B7C  EC5C  F01A         	call	_get_over_write_data	;wreg free
 12513  000B80  06E8               	decf	wreg,f,c
 12514  000B82  A4D8               	btfss	status,2,c
 12515  000B84  D01C               	goto	l8304
 12516                           
 12517                           ;cmd_consol.c: 368: cmd_data.row_col_set = 1;
 12518  000B86  0E01               	movlw	1
 12519  000B88  0100               	movlb	0	; () banked
 12520  000B8A  6FB5               	movwf	(_cmd_data+47)& (0+255),b
 12521                           
 12522                           ;cmd_consol.c: 369: valid_cmd = 1;
 12523  000B8C  0E01               	movlw	1
 12524  000B8E  0100               	movlb	0	; () banked
 12525  000B90  6F84               	movwf	_valid_cmd& (0+255),b
 12526                           
 12527                           ; BSR set to: 0
 12528                           ;cmd_consol.c: 370: memset(str, 0, strlen(str));
 12529  000B92  C038  F024         	movff	parse_cmd_str@str,memset@p1
 12530  000B96  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 12531  000B9A  0E00               	movlw	0
 12532  000B9C  6E27               	movwf	memset@c+1,c
 12533  000B9E  0E00               	movlw	0
 12534  000BA0  6E26               	movwf	memset@c,c
 12535  000BA2  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 12536  000BA6  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 12537  000BAA  ECED  F01E         	call	_strlen	;wreg free
 12538  000BAE  C01E  F028         	movff	?_strlen,memset@n
 12539  000BB2  C01F  F029         	movff	?_strlen+1,memset@n+1
 12540  000BB6  ECBB  F01F         	call	_memset	;wreg free
 12541  000BBA  EFAA  F000         	goto	l7944
 12542  000BBE                     l8304:
 12543                           
 12544                           ;cmd_consol.c: 373: return 6;
 12545  000BBE  0E06               	movlw	6
 12546  000BC0  0012               	return	
 12547  000BC2                     l8308:
 12548                           
 12549                           ;cmd_consol.c: 377: return 5;
 12550  000BC2  0E05               	movlw	5
 12551  000BC4  0012               	return	
 12552  000BC6                     l8312:
 12553                           
 12554                           ;cmd_consol.c: 381: return 4;
 12555  000BC6  0E04               	movlw	4
 12556  000BC8  0012               	return	
 12557  000BCA                     l8316:
 12558                           
 12559                           ;cmd_consol.c: 385: return 3;
 12560  000BCA  0E03               	movlw	3
 12561  000BCC  0012               	return	
 12562  000BCE                     l8320:
 12563                           
 12564                           ;cmd_consol.c: 389: return 3;
 12565  000BCE  0E03               	movlw	3
 12566  000BD0  0012               	return	
 12567  000BD2                     l8324:
 12568                           
 12569                           ;cmd_consol.c: 393: return 3;
 12570  000BD2  0E03               	movlw	3
 12571  000BD4  0012               	return	
 12572  000BD6                     l8328:
 12573                           
 12574                           ;cmd_consol.c: 397: return 3;
 12575  000BD6  0E03               	movlw	3
 12576  000BD8  0012               	return	
 12577  000BDA                     l8332:
 12578                           
 12579                           ;cmd_consol.c: 401: return 2;
 12580  000BDA  0E02               	movlw	2
 12581  000BDC  0012               	return	
 12582  000BDE                     l8336:
 12583  000BDE  C03E  F010         	movff	parse_cmd_str@temp,strcmp@s1
 12584  000BE2  C03F  F011         	movff	parse_cmd_str@temp+1,strcmp@s1+1
 12585  000BE6  0EF3               	movlw	low STR_82
 12586  000BE8  6E12               	movwf	strcmp@s2,c
 12587  000BEA  0EFF               	movlw	high STR_82
 12588  000BEC  6E13               	movwf	strcmp@s2+1,c
 12589  000BEE  ECE4  F01D         	call	_strcmp	;wreg free
 12590  000BF2  5010               	movf	?_strcmp,w,c
 12591  000BF4  1011               	iorwf	?_strcmp+1,w,c
 12592  000BF6  A4D8               	btfss	status,2,c
 12593  000BF8  D023               	goto	l8348
 12594                           
 12595                           ;cmd_consol.c: 407: strcpy(CMD, temp);
 12596  000BFA  0EE3               	movlw	low _CMD
 12597  000BFC  6E10               	movwf	strcpy@to,c
 12598  000BFE  0E00               	movlw	high _CMD
 12599  000C00  6E11               	movwf	strcpy@to+1,c
 12600  000C02  C03E  F012         	movff	parse_cmd_str@temp,strcpy@from
 12601  000C06  C03F  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 12602  000C0A  ECA4  F01F         	call	_strcpy	;wreg free
 12603                           
 12604                           ;cmd_consol.c: 408: memset(str, 0, strlen(str));
 12605  000C0E  C038  F024         	movff	parse_cmd_str@str,memset@p1
 12606  000C12  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 12607  000C16  0E00               	movlw	0
 12608  000C18  6E27               	movwf	memset@c+1,c
 12609  000C1A  0E00               	movlw	0
 12610  000C1C  6E26               	movwf	memset@c,c
 12611  000C1E  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 12612  000C22  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 12613  000C26  ECED  F01E         	call	_strlen	;wreg free
 12614  000C2A  C01E  F028         	movff	?_strlen,memset@n
 12615  000C2E  C01F  F029         	movff	?_strlen+1,memset@n+1
 12616  000C32  ECBB  F01F         	call	_memset	;wreg free
 12617  000C36                     l8342:
 12618                           
 12619                           ;cmd_consol.c: 409: valid_cmd = 1;
 12620  000C36  0E01               	movlw	1
 12621  000C38  0100               	movlb	0	; () banked
 12622  000C3A  6F84               	movwf	_valid_cmd& (0+255),b
 12623  000C3C  EFAA  F000         	goto	l7944
 12624  000C40                     l8348:
 12625                           
 12626                           ;cmd_consol.c: 411: }
 12627                           ;cmd_consol.c: 412: memset(str, 0, strlen(str));
 12628  000C40  C038  F024         	movff	parse_cmd_str@str,memset@p1
 12629  000C44  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 12630  000C48  0E00               	movlw	0
 12631  000C4A  6E27               	movwf	memset@c+1,c
 12632  000C4C  0E00               	movlw	0
 12633  000C4E  6E26               	movwf	memset@c,c
 12634  000C50  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 12635  000C54  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 12636  000C58  ECED  F01E         	call	_strlen	;wreg free
 12637  000C5C  C01E  F028         	movff	?_strlen,memset@n
 12638  000C60  C01F  F029         	movff	?_strlen+1,memset@n+1
 12639  000C64  ECBB  F01F         	call	_memset	;wreg free
 12640                           
 12641                           ;cmd_consol.c: 413: return 1;
 12642  000C68  0E01               	movlw	1
 12643  000C6A  0012               	return	
 12644  000C6C                     l8354:
 12645                           
 12646                           ;cmd_consol.c: 414: }
 12647                           ;cmd_consol.c: 415: memset(str, 0, strlen(str));
 12648  000C6C  C038  F024         	movff	parse_cmd_str@str,memset@p1
 12649  000C70  C039  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 12650  000C74  0E00               	movlw	0
 12651  000C76  6E27               	movwf	memset@c+1,c
 12652  000C78  0E00               	movlw	0
 12653  000C7A  6E26               	movwf	memset@c,c
 12654  000C7C  C038  F01E         	movff	parse_cmd_str@str,strlen@s
 12655  000C80  C039  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 12656  000C84  ECED  F01E         	call	_strlen	;wreg free
 12657  000C88  C01E  F028         	movff	?_strlen,memset@n
 12658  000C8C  C01F  F029         	movff	?_strlen+1,memset@n+1
 12659  000C90  ECBB  F01F         	call	_memset	;wreg free
 12660                           
 12661                           ;cmd_consol.c: 416: return 1;
 12662  000C94  0E01               	movlw	1
 12663  000C96  0012               	return	
 12664  000C98                     __end_of_parse_cmd_str:
 12665                           	opt stack 0
 12666                           tblptru	equ	0xFF8
 12667                           tblptrh	equ	0xFF7
 12668                           tblptrl	equ	0xFF6
 12669                           tablat	equ	0xFF5
 12670                           prodh	equ	0xFF4
 12671                           prodl	equ	0xFF3
 12672                           intcon	equ	0xFF2
 12673                           postinc0	equ	0xFEE
 12674                           wreg	equ	0xFE8
 12675                           indf1	equ	0xFE7
 12676                           postinc1	equ	0xFE6
 12677                           postdec1	equ	0xFE5
 12678                           fsr1h	equ	0xFE2
 12679                           fsr1l	equ	0xFE1
 12680                           indf2	equ	0xFDF
 12681                           postinc2	equ	0xFDE
 12682                           postdec2	equ	0xFDD
 12683                           fsr2h	equ	0xFDA
 12684                           fsr2l	equ	0xFD9
 12685                           status	equ	0xFD8
 12686                           
 12687 ;; *************** function _strtok *****************
 12688 ;; Defined at:
 12689 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strtok.c"
 12690 ;; Parameters:    Size  Location     Type
 12691 ;;  s1              2   26[COMRAM] PTR unsigned char 
 12692 ;;		 -> uart_str(150), NULL(0), 
 12693 ;;  s2              2   28[COMRAM] PTR const unsigned char 
 12694 ;;		 -> STR_81(7), STR_80(7), STR_79(7), STR_76(7), 
 12695 ;;		 -> STR_74(7), STR_72(7), STR_70(7), STR_68(2), 
 12696 ;;		 -> STR_62(7), STR_60(7), STR_58(7), STR_56(7), 
 12697 ;;		 -> STR_54(7), STR_51(7), STR_49(7), STR_46(7), 
 12698 ;;		 -> STR_44(7), STR_40(7), STR_38(7), STR_32(7), 
 12699 ;; Auto vars:     Size  Location     Type
 12700 ;;		None
 12701 ;; Return value:  Size  Location     Type
 12702 ;;                  2   26[COMRAM] PTR unsigned char 
 12703 ;; Registers used:
 12704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12705 ;; Tracked objects:
 12706 ;;		On entry : 0/0
 12707 ;;		On exit  : 0/0
 12708 ;;		Unchanged: 0/0
 12709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12710 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12713 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12714 ;;Total ram usage:        4 bytes
 12715 ;; Hardware stack levels used:    1
 12716 ;; Hardware stack levels required when called:    7
 12717 ;; This function calls:
 12718 ;;		_strcspn
 12719 ;;		_strspn
 12720 ;; This function is called by:
 12721 ;;		_parse_cmd_str
 12722 ;; This function uses a non-reentrant model
 12723 ;;
 12724                           
 12725                           	psect	text50
 12726  002FEC                     __ptext50:
 12727                           	opt stack 0
 12728  002FEC                     _strtok:
 12729                           	opt stack 21
 12730                           
 12731                           ;incstack = 0
 12732  002FEC  501B               	movf	strtok@s1,w,c
 12733  002FEE  101C               	iorwf	strtok@s1+1,w,c
 12734  002FF0  A4D8               	btfss	status,2,c
 12735  002FF2  D004               	goto	l1768
 12736  002FF4  C07C  F01B         	movff	strtok@sp,strtok@s1
 12737  002FF8  C07D  F01C         	movff	strtok@sp+1,strtok@s1+1
 12738  002FFC                     l1768:
 12739  002FFC  501B               	movf	strtok@s1,w,c
 12740  002FFE  101C               	iorwf	strtok@s1+1,w,c
 12741  003000  A4D8               	btfss	status,2,c
 12742  003002  D005               	goto	l7838
 12743  003004  0E00               	movlw	0
 12744  003006  6E1B               	movwf	?_strtok,c
 12745  003008  0E00               	movlw	0
 12746  00300A  6E1C               	movwf	?_strtok+1,c
 12747  00300C  0012               	return	
 12748  00300E                     l7838:
 12749  00300E  C01B  F014         	movff	strtok@s1,strspn@s1
 12750  003012  C01C  F015         	movff	strtok@s1+1,strspn@s1+1
 12751  003016  C01D  F016         	movff	strtok@s2,strspn@s2
 12752  00301A  C01E  F017         	movff	strtok@s2+1,strspn@s2+1
 12753  00301E  EC6F  F01D         	call	_strspn	;wreg free
 12754  003022  5014               	movf	?_strspn,w,c
 12755  003024  261B               	addwf	strtok@s1,f,c
 12756  003026  5015               	movf	?_strspn+1,w,c
 12757  003028  221C               	addwfc	strtok@s1+1,f,c
 12758  00302A  C01B  FFD9         	movff	strtok@s1,fsr2l
 12759  00302E  C01C  FFDA         	movff	strtok@s1+1,fsr2h
 12760  003032  50DF               	movf	indf2,w,c
 12761  003034  A4D8               	btfss	status,2,c
 12762  003036  D00B               	goto	l7846
 12763  003038  0E00               	movlw	0
 12764  00303A  0100               	movlb	0	; () banked
 12765  00303C  6F7C               	movwf	strtok@sp& (0+255),b
 12766  00303E  0E00               	movlw	0
 12767  003040  0100               	movlb	0	; () banked
 12768  003042  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 12769  003044  C07C  F01B         	movff	strtok@sp,?_strtok
 12770  003048  C07D  F01C         	movff	strtok@sp+1,?_strtok+1
 12771                           
 12772                           ; BSR set to: 0
 12773  00304C  0012               	return	
 12774  00304E                     l7846:
 12775  00304E  C01B  F014         	movff	strtok@s1,strcspn@s1
 12776  003052  C01C  F015         	movff	strtok@s1+1,strcspn@s1+1
 12777  003056  C01D  F016         	movff	strtok@s2,strcspn@s2
 12778  00305A  C01E  F017         	movff	strtok@s2+1,strcspn@s2+1
 12779  00305E  EC97  F01D         	call	_strcspn	;wreg free
 12780  003062  5014               	movf	?_strcspn,w,c
 12781  003064  241B               	addwf	strtok@s1,w,c
 12782  003066  0100               	movlb	0	; () banked
 12783  003068  6F7C               	movwf	strtok@sp& (0+255),b
 12784  00306A  5015               	movf	?_strcspn+1,w,c
 12785  00306C  201C               	addwfc	strtok@s1+1,w,c
 12786  00306E  0100               	movlb	0	; () banked
 12787  003070  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 12788                           
 12789                           ; BSR set to: 0
 12790  003072  C07C  FFD9         	movff	strtok@sp,fsr2l
 12791  003076  C07D  FFDA         	movff	strtok@sp+1,fsr2h
 12792  00307A  50DF               	movf	indf2,w,c
 12793  00307C  B4D8               	btfsc	status,2,c
 12794  00307E  D00A               	goto	l7854
 12795                           
 12796                           ; BSR set to: 0
 12797  003080  C07C  FFD9         	movff	strtok@sp,fsr2l
 12798  003084  C07D  FFDA         	movff	strtok@sp+1,fsr2h
 12799  003088  0E00               	movlw	0
 12800  00308A  6EDF               	movwf	indf2,c
 12801                           
 12802                           ; BSR set to: 0
 12803  00308C  0100               	movlb	0	; () banked
 12804  00308E  4B7C               	infsnz	strtok@sp& (0+255),f,b
 12805  003090  2B7D               	incf	(strtok@sp+1)& (0+255),f,b
 12806  003092  D006               	goto	l1773
 12807  003094                     l7854:
 12808                           
 12809                           ; BSR set to: 0
 12810  003094  0E00               	movlw	0
 12811  003096  0100               	movlb	0	; () banked
 12812  003098  6F7C               	movwf	strtok@sp& (0+255),b
 12813  00309A  0E00               	movlw	0
 12814  00309C  0100               	movlb	0	; () banked
 12815  00309E  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 12816  0030A0                     l1773:
 12817                           
 12818                           ; BSR set to: 0
 12819  0030A0  C01B  F01B         	movff	strtok@s1,?_strtok
 12820  0030A4  C01C  F01C         	movff	strtok@s1+1,?_strtok+1
 12821  0030A8  0012               	return	
 12822  0030AA                     __end_of_strtok:
 12823                           	opt stack 0
 12824                           tblptru	equ	0xFF8
 12825                           tblptrh	equ	0xFF7
 12826                           tblptrl	equ	0xFF6
 12827                           tablat	equ	0xFF5
 12828                           prodh	equ	0xFF4
 12829                           prodl	equ	0xFF3
 12830                           intcon	equ	0xFF2
 12831                           postinc0	equ	0xFEE
 12832                           wreg	equ	0xFE8
 12833                           indf1	equ	0xFE7
 12834                           postinc1	equ	0xFE6
 12835                           postdec1	equ	0xFE5
 12836                           fsr1h	equ	0xFE2
 12837                           fsr1l	equ	0xFE1
 12838                           indf2	equ	0xFDF
 12839                           postinc2	equ	0xFDE
 12840                           postdec2	equ	0xFDD
 12841                           fsr2h	equ	0xFDA
 12842                           fsr2l	equ	0xFD9
 12843                           status	equ	0xFD8
 12844                           
 12845 ;; *************** function _strspn *****************
 12846 ;; Defined at:
 12847 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strspn.c"
 12848 ;; Parameters:    Size  Location     Type
 12849 ;;  s1              2   19[COMRAM] PTR const unsigned char 
 12850 ;;		 -> uart_str(150), NULL(0), 
 12851 ;;  s2              2   21[COMRAM] PTR const unsigned char 
 12852 ;;		 -> STR_81(7), STR_80(7), STR_79(7), STR_76(7), 
 12853 ;;		 -> STR_74(7), STR_72(7), STR_70(7), STR_68(2), 
 12854 ;;		 -> STR_62(7), STR_60(7), STR_58(7), STR_56(7), 
 12855 ;;		 -> STR_54(7), STR_51(7), STR_49(7), STR_46(7), 
 12856 ;;		 -> STR_44(7), STR_40(7), STR_38(7), STR_32(7), 
 12857 ;; Auto vars:     Size  Location     Type
 12858 ;;  i               2   24[COMRAM] unsigned int 
 12859 ;; Return value:  Size  Location     Type
 12860 ;;                  2   19[COMRAM] unsigned int 
 12861 ;; Registers used:
 12862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12863 ;; Tracked objects:
 12864 ;;		On entry : 0/0
 12865 ;;		On exit  : 0/0
 12866 ;;		Unchanged: 0/0
 12867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12868 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12869 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12870 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12871 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12872 ;;Total ram usage:        7 bytes
 12873 ;; Hardware stack levels used:    1
 12874 ;; Hardware stack levels required when called:    6
 12875 ;; This function calls:
 12876 ;;		_strchr
 12877 ;; This function is called by:
 12878 ;;		_strtok
 12879 ;; This function uses a non-reentrant model
 12880 ;;
 12881                           
 12882                           	psect	text51
 12883  003ADE                     __ptext51:
 12884                           	opt stack 0
 12885  003ADE                     _strspn:
 12886                           	opt stack 21
 12887                           
 12888                           ;incstack = 0
 12889  003ADE  0E00               	movlw	0
 12890  003AE0  6E1A               	movwf	strspn@i+1,c
 12891  003AE2  0E00               	movlw	0
 12892  003AE4  6E19               	movwf	strspn@i,c
 12893  003AE6  D004               	goto	l7362
 12894  003AE8                     l7360:
 12895  003AE8  4A14               	infsnz	strspn@s1,f,c
 12896  003AEA  2A15               	incf	strspn@s1+1,f,c
 12897  003AEC  4A19               	infsnz	strspn@i,f,c
 12898  003AEE  2A1A               	incf	strspn@i+1,f,c
 12899  003AF0                     l7362:
 12900  003AF0  C014  FFD9         	movff	strspn@s1,fsr2l
 12901  003AF4  C015  FFDA         	movff	strspn@s1+1,fsr2h
 12902  003AF8  50DF               	movf	indf2,w,c
 12903  003AFA  B4D8               	btfsc	status,2,c
 12904  003AFC  D013               	goto	l1819
 12905  003AFE  C016  F010         	movff	strspn@s2,strchr@ptr
 12906  003B02  C017  F011         	movff	strspn@s2+1,strchr@ptr+1
 12907  003B06  C014  FFD9         	movff	strspn@s1,fsr2l
 12908  003B0A  C015  FFDA         	movff	strspn@s1+1,fsr2h
 12909  003B0E  50DF               	movf	indf2,w,c
 12910  003B10  6E18               	movwf	??_strspn& (0+255),c
 12911  003B12  5018               	movf	??_strspn,w,c
 12912  003B14  6E12               	movwf	strchr@chr,c
 12913  003B16  6A13               	clrf	strchr@chr+1,c
 12914  003B18  EC91  F01E         	call	_strchr	;wreg free
 12915  003B1C  5010               	movf	?_strchr,w,c
 12916  003B1E  1011               	iorwf	?_strchr+1,w,c
 12917  003B20  A4D8               	btfss	status,2,c
 12918  003B22  D7E2               	goto	l7360
 12919  003B24                     l1819:
 12920  003B24  C019  F014         	movff	strspn@i,?_strspn
 12921  003B28  C01A  F015         	movff	strspn@i+1,?_strspn+1
 12922  003B2C  0012               	return		;funcret
 12923  003B2E                     __end_of_strspn:
 12924                           	opt stack 0
 12925                           tblptru	equ	0xFF8
 12926                           tblptrh	equ	0xFF7
 12927                           tblptrl	equ	0xFF6
 12928                           tablat	equ	0xFF5
 12929                           prodh	equ	0xFF4
 12930                           prodl	equ	0xFF3
 12931                           intcon	equ	0xFF2
 12932                           postinc0	equ	0xFEE
 12933                           wreg	equ	0xFE8
 12934                           indf1	equ	0xFE7
 12935                           postinc1	equ	0xFE6
 12936                           postdec1	equ	0xFE5
 12937                           fsr1h	equ	0xFE2
 12938                           fsr1l	equ	0xFE1
 12939                           indf2	equ	0xFDF
 12940                           postinc2	equ	0xFDE
 12941                           postdec2	equ	0xFDD
 12942                           fsr2h	equ	0xFDA
 12943                           fsr2l	equ	0xFD9
 12944                           status	equ	0xFD8
 12945                           
 12946 ;; *************** function _strcspn *****************
 12947 ;; Defined at:
 12948 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcspn.c"
 12949 ;; Parameters:    Size  Location     Type
 12950 ;;  s1              2   19[COMRAM] PTR const unsigned char 
 12951 ;;		 -> uart_str(150), NULL(0), 
 12952 ;;  s2              2   21[COMRAM] PTR const unsigned char 
 12953 ;;		 -> STR_81(7), STR_80(7), STR_79(7), STR_76(7), 
 12954 ;;		 -> STR_74(7), STR_72(7), STR_70(7), STR_68(2), 
 12955 ;;		 -> STR_62(7), STR_60(7), STR_58(7), STR_56(7), 
 12956 ;;		 -> STR_54(7), STR_51(7), STR_49(7), STR_46(7), 
 12957 ;;		 -> STR_44(7), STR_40(7), STR_38(7), STR_32(7), 
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;  i               2   24[COMRAM] unsigned int 
 12960 ;; Return value:  Size  Location     Type
 12961 ;;                  2   19[COMRAM] unsigned int 
 12962 ;; Registers used:
 12963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12964 ;; Tracked objects:
 12965 ;;		On entry : 0/0
 12966 ;;		On exit  : 0/0
 12967 ;;		Unchanged: 0/0
 12968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12969 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12970 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12972 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12973 ;;Total ram usage:        7 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; Hardware stack levels required when called:    6
 12976 ;; This function calls:
 12977 ;;		_strchr
 12978 ;; This function is called by:
 12979 ;;		_strtok
 12980 ;; This function uses a non-reentrant model
 12981 ;;
 12982                           
 12983                           	psect	text52
 12984  003B2E                     __ptext52:
 12985                           	opt stack 0
 12986  003B2E                     _strcspn:
 12987                           	opt stack 21
 12988                           
 12989                           ;incstack = 0
 12990  003B2E  0E00               	movlw	0
 12991  003B30  6E1A               	movwf	strcspn@i+1,c
 12992  003B32  0E00               	movlw	0
 12993  003B34  6E19               	movwf	strcspn@i,c
 12994  003B36  D004               	goto	l7370
 12995  003B38                     l7368:
 12996  003B38  4A14               	infsnz	strcspn@s1,f,c
 12997  003B3A  2A15               	incf	strcspn@s1+1,f,c
 12998  003B3C  4A19               	infsnz	strcspn@i,f,c
 12999  003B3E  2A1A               	incf	strcspn@i+1,f,c
 13000  003B40                     l7370:
 13001  003B40  C014  FFD9         	movff	strcspn@s1,fsr2l
 13002  003B44  C015  FFDA         	movff	strcspn@s1+1,fsr2h
 13003  003B48  50DF               	movf	indf2,w,c
 13004  003B4A  B4D8               	btfsc	status,2,c
 13005  003B4C  D013               	goto	l1809
 13006  003B4E  C016  F010         	movff	strcspn@s2,strchr@ptr
 13007  003B52  C017  F011         	movff	strcspn@s2+1,strchr@ptr+1
 13008  003B56  C014  FFD9         	movff	strcspn@s1,fsr2l
 13009  003B5A  C015  FFDA         	movff	strcspn@s1+1,fsr2h
 13010  003B5E  50DF               	movf	indf2,w,c
 13011  003B60  6E18               	movwf	??_strcspn& (0+255),c
 13012  003B62  5018               	movf	??_strcspn,w,c
 13013  003B64  6E12               	movwf	strchr@chr,c
 13014  003B66  6A13               	clrf	strchr@chr+1,c
 13015  003B68  EC91  F01E         	call	_strchr	;wreg free
 13016  003B6C  5010               	movf	?_strchr,w,c
 13017  003B6E  1011               	iorwf	?_strchr+1,w,c
 13018  003B70  B4D8               	btfsc	status,2,c
 13019  003B72  D7E2               	goto	l7368
 13020  003B74                     l1809:
 13021  003B74  C019  F014         	movff	strcspn@i,?_strcspn
 13022  003B78  C01A  F015         	movff	strcspn@i+1,?_strcspn+1
 13023  003B7C  0012               	return		;funcret
 13024  003B7E                     __end_of_strcspn:
 13025                           	opt stack 0
 13026                           tblptru	equ	0xFF8
 13027                           tblptrh	equ	0xFF7
 13028                           tblptrl	equ	0xFF6
 13029                           tablat	equ	0xFF5
 13030                           prodh	equ	0xFF4
 13031                           prodl	equ	0xFF3
 13032                           intcon	equ	0xFF2
 13033                           postinc0	equ	0xFEE
 13034                           wreg	equ	0xFE8
 13035                           indf1	equ	0xFE7
 13036                           postinc1	equ	0xFE6
 13037                           postdec1	equ	0xFE5
 13038                           fsr1h	equ	0xFE2
 13039                           fsr1l	equ	0xFE1
 13040                           indf2	equ	0xFDF
 13041                           postinc2	equ	0xFDE
 13042                           postdec2	equ	0xFDD
 13043                           fsr2h	equ	0xFDA
 13044                           fsr2l	equ	0xFD9
 13045                           status	equ	0xFD8
 13046                           
 13047 ;; *************** function _strchr *****************
 13048 ;; Defined at:
 13049 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strchr.c"
 13050 ;; Parameters:    Size  Location     Type
 13051 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
 13052 ;;		 -> STR_81(7), STR_80(7), STR_79(7), STR_76(7), 
 13053 ;;		 -> STR_74(7), STR_72(7), STR_70(7), STR_68(2), 
 13054 ;;		 -> STR_62(7), STR_60(7), STR_58(7), STR_56(7), 
 13055 ;;		 -> STR_54(7), STR_51(7), STR_49(7), STR_46(7), 
 13056 ;;		 -> STR_44(7), STR_40(7), STR_38(7), STR_32(7), 
 13057 ;;  chr             2   17[COMRAM] int 
 13058 ;; Auto vars:     Size  Location     Type
 13059 ;;		None
 13060 ;; Return value:  Size  Location     Type
 13061 ;;                  2   15[COMRAM] PTR unsigned char 
 13062 ;; Registers used:
 13063 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13064 ;; Tracked objects:
 13065 ;;		On entry : 0/0
 13066 ;;		On exit  : 0/0
 13067 ;;		Unchanged: 0/0
 13068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13069 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13072 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13073 ;;Total ram usage:        4 bytes
 13074 ;; Hardware stack levels used:    1
 13075 ;; Hardware stack levels required when called:    5
 13076 ;; This function calls:
 13077 ;;		Nothing
 13078 ;; This function is called by:
 13079 ;;		_strcspn
 13080 ;;		_strspn
 13081 ;; This function uses a non-reentrant model
 13082 ;;
 13083                           
 13084                           	psect	text53
 13085  003D22                     __ptext53:
 13086                           	opt stack 0
 13087  003D22                     _strchr:
 13088                           	opt stack 21
 13089  003D22  C010  FFF6         	movff	strchr@ptr,tblptrl
 13090  003D26  C011  FFF7         	movff	strchr@ptr+1,tblptrh
 13091  003D2A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13092  003D2A  6AF8               	clrf	tblptru,c
 13093  003D2C                     	endif
 13094  003D2C                     	if	0	;tblptru may be non-zero
 13095  003D2C                     	endif
 13096  003D2C  0008               	tblrd		*
 13097  003D2E  50F5               	movf	tablat,w,c
 13098  003D30  1812               	xorwf	strchr@chr,w,c
 13099  003D32  A4D8               	btfss	status,2,c
 13100  003D34  D005               	goto	l7042
 13101  003D36  C010  F010         	movff	strchr@ptr,?_strchr
 13102  003D3A  C011  F011         	movff	strchr@ptr+1,?_strchr+1
 13103  003D3E  0012               	return	
 13104  003D40                     l7042:
 13105  003D40  C010  FFF6         	movff	strchr@ptr,tblptrl
 13106  003D44  C011  FFF7         	movff	strchr@ptr+1,tblptrh
 13107  003D48  4A10               	infsnz	strchr@ptr,f,c
 13108  003D4A  2A11               	incf	strchr@ptr+1,f,c
 13109  003D4C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13110  003D4C  6AF8               	clrf	tblptru,c
 13111  003D4E                     	endif
 13112  003D4E                     	if	0	;tblptru may be non-zero
 13113  003D4E                     	endif
 13114  003D4E  0008               	tblrd		*
 13115  003D50  50F5               	movf	tablat,w,c
 13116  003D52  0900               	iorlw	0
 13117  003D54  A4D8               	btfss	status,2,c
 13118  003D56  D7E5               	goto	l7036
 13119  003D58  0E00               	movlw	0
 13120  003D5A  6E10               	movwf	?_strchr,c
 13121  003D5C  0E00               	movlw	0
 13122  003D5E  6E11               	movwf	?_strchr+1,c
 13123  003D60  0012               	return	
 13124  003D62                     __end_of_strchr:
 13125                           	opt stack 0
 13126                           tblptru	equ	0xFF8
 13127                           tblptrh	equ	0xFF7
 13128                           tblptrl	equ	0xFF6
 13129                           tablat	equ	0xFF5
 13130                           prodh	equ	0xFF4
 13131                           prodl	equ	0xFF3
 13132                           intcon	equ	0xFF2
 13133                           postinc0	equ	0xFEE
 13134                           wreg	equ	0xFE8
 13135                           indf1	equ	0xFE7
 13136                           postinc1	equ	0xFE6
 13137                           postdec1	equ	0xFE5
 13138                           fsr1h	equ	0xFE2
 13139                           fsr1l	equ	0xFE1
 13140                           indf2	equ	0xFDF
 13141                           postinc2	equ	0xFDE
 13142                           postdec2	equ	0xFDD
 13143                           fsr2h	equ	0xFDA
 13144                           fsr2l	equ	0xFD9
 13145                           status	equ	0xFD8
 13146                           
 13147 ;; *************** function _strcmp *****************
 13148 ;; Defined at:
 13149 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
 13150 ;; Parameters:    Size  Location     Type
 13151 ;;  s1              2   15[COMRAM] PTR const unsigned char 
 13152 ;;		 -> uart_str(150), CMD(15), NULL(0), 
 13153 ;;  s2              2   17[COMRAM] PTR const unsigned char 
 13154 ;;		 -> STR_132(5), STR_122(5), STR_111(7), STR_108(7), 
 13155 ;;		 -> STR_105(8), STR_102(6), STR_97(6), STR_94(5), 
 13156 ;;		 -> STR_91(4), STR_88(4), STR_85(6), STR_83(4), 
 13157 ;;		 -> STR_82(4), STR_66(5), STR_65(7), STR_53(7), 
 13158 ;;		 -> STR_47(8), STR_42(6), STR_41(6), STR_37(5), 
 13159 ;;		 -> STR_35(6), STR_34(4), STR_33(4), 
 13160 ;; Auto vars:     Size  Location     Type
 13161 ;;  r               1   20[COMRAM] char 
 13162 ;; Return value:  Size  Location     Type
 13163 ;;                  2   15[COMRAM] int 
 13164 ;; Registers used:
 13165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13173 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13174 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13175 ;;Total ram usage:        6 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; Hardware stack levels required when called:    5
 13178 ;; This function calls:
 13179 ;;		Nothing
 13180 ;; This function is called by:
 13181 ;;		_parse_cmd_str
 13182 ;;		_reply_to_host
 13183 ;;		_cmd_consol_task
 13184 ;; This function uses a non-reentrant model
 13185 ;;
 13186                           
 13187                           	psect	text54
 13188  003BC8                     __ptext54:
 13189                           	opt stack 0
 13190  003BC8                     _strcmp:
 13191                           	opt stack 24
 13192                           
 13193                           ;incstack = 0
 13194  003BC8  D004               	goto	l7862
 13195  003BCA                     l7860:
 13196  003BCA  4A10               	infsnz	strcmp@s1,f,c
 13197  003BCC  2A11               	incf	strcmp@s1+1,f,c
 13198  003BCE  4A12               	infsnz	strcmp@s2,f,c
 13199  003BD0  2A13               	incf	strcmp@s2+1,f,c
 13200  003BD2                     l7862:
 13201  003BD2  C010  FFD9         	movff	strcmp@s1,fsr2l
 13202  003BD6  C011  FFDA         	movff	strcmp@s1+1,fsr2h
 13203  003BDA  50DF               	movf	indf2,w,c
 13204  003BDC  6E14               	movwf	??_strcmp& (0+255),c
 13205  003BDE  C012  FFF6         	movff	strcmp@s2,tblptrl
 13206  003BE2  C013  FFF7         	movff	strcmp@s2+1,tblptrh
 13207  003BE6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13208  003BE6  6AF8               	clrf	tblptru,c
 13209  003BE8                     	endif
 13210  003BE8                     	if	0	;tblptru may be non-zero
 13211  003BE8                     	endif
 13212  003BE8  0008               	tblrd		*
 13213  003BEA  50F5               	movf	tablat,w,c
 13214  003BEC  0800               	sublw	0
 13215  003BEE  2414               	addwf	??_strcmp,w,c
 13216  003BF0  6E15               	movwf	strcmp@r,c
 13217  003BF2  5015               	movf	strcmp@r,w,c
 13218  003BF4  A4D8               	btfss	status,2,c
 13219  003BF6  D007               	goto	l7866
 13220  003BF8  C010  FFD9         	movff	strcmp@s1,fsr2l
 13221  003BFC  C011  FFDA         	movff	strcmp@s1+1,fsr2h
 13222  003C00  50DF               	movf	indf2,w,c
 13223  003C02  A4D8               	btfss	status,2,c
 13224  003C04  D7E2               	goto	l7860
 13225  003C06                     l7866:
 13226  003C06  5015               	movf	strcmp@r,w,c
 13227  003C08  6E10               	movwf	?_strcmp,c
 13228  003C0A  6A11               	clrf	?_strcmp+1,c
 13229  003C0C  BE10               	btfsc	?_strcmp,7,c
 13230  003C0E  0611               	decf	?_strcmp+1,f,c
 13231  003C10  0012               	return	
 13232  003C12                     __end_of_strcmp:
 13233                           	opt stack 0
 13234                           tblptru	equ	0xFF8
 13235                           tblptrh	equ	0xFF7
 13236                           tblptrl	equ	0xFF6
 13237                           tablat	equ	0xFF5
 13238                           prodh	equ	0xFF4
 13239                           prodl	equ	0xFF3
 13240                           intcon	equ	0xFF2
 13241                           postinc0	equ	0xFEE
 13242                           wreg	equ	0xFE8
 13243                           indf1	equ	0xFE7
 13244                           postinc1	equ	0xFE6
 13245                           postdec1	equ	0xFE5
 13246                           fsr1h	equ	0xFE2
 13247                           fsr1l	equ	0xFE1
 13248                           indf2	equ	0xFDF
 13249                           postinc2	equ	0xFDE
 13250                           postdec2	equ	0xFDD
 13251                           fsr2h	equ	0xFDA
 13252                           fsr2l	equ	0xFD9
 13253                           status	equ	0xFD8
 13254                           
 13255 ;; *************** function _get_uid *****************
 13256 ;; Defined at:
 13257 ;;		line 34 in file "cmd_consol.c"
 13258 ;; Parameters:    Size  Location     Type
 13259 ;;  str             2   35[COMRAM] PTR unsigned char 
 13260 ;;		 -> uart_str(150), NULL(0), 
 13261 ;;  data_uid        2   37[COMRAM] PTR unsigned int 
 13262 ;;		 -> cmd_data(53), 
 13263 ;; Auto vars:     Size  Location     Type
 13264 ;;  uid             2   43[COMRAM] unsigned int 
 13265 ;;  i               2   41[COMRAM] unsigned int 
 13266 ;; Return value:  Size  Location     Type
 13267 ;;                  1    wreg      unsigned char 
 13268 ;; Registers used:
 13269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13270 ;; Tracked objects:
 13271 ;;		On entry : 0/0
 13272 ;;		On exit  : 0/0
 13273 ;;		Unchanged: 0/0
 13274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13276 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13277 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13278 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13279 ;;Total ram usage:       10 bytes
 13280 ;; Hardware stack levels used:    1
 13281 ;; Hardware stack levels required when called:    6
 13282 ;; This function calls:
 13283 ;;		___wmul
 13284 ;;		_isdigit
 13285 ;;		_strlen
 13286 ;; This function is called by:
 13287 ;;		_parse_cmd_str
 13288 ;; This function uses a non-reentrant model
 13289 ;;
 13290                           
 13291                           	psect	text55
 13292  0030AA                     __ptext55:
 13293                           	opt stack 0
 13294  0030AA                     _get_uid:
 13295                           	opt stack 22
 13296                           
 13297                           ;cmd_consol.c: 35: unsigned int uid;
 13298                           ;cmd_consol.c: 36: unsigned int i = 0;
 13299                           
 13300                           ;incstack = 0
 13301  0030AA  0E00               	movlw	0
 13302  0030AC  6E2B               	movwf	get_uid@i+1,c
 13303  0030AE  0E00               	movlw	0
 13304  0030B0  6E2A               	movwf	get_uid@i,c
 13305                           
 13306                           ;cmd_consol.c: 37: for (i = 0; i < strlen(str); i++) {
 13307  0030B2  0E00               	movlw	0
 13308  0030B4  6E2B               	movwf	get_uid@i+1,c
 13309  0030B6  0E00               	movlw	0
 13310  0030B8  6E2A               	movwf	get_uid@i,c
 13311  0030BA  D02A               	goto	l7698
 13312  0030BC                     l7692:
 13313                           
 13314                           ;cmd_consol.c: 38: if (isdigit(str[i]) == 1)
 13315  0030BC  502A               	movf	get_uid@i,w,c
 13316  0030BE  2424               	addwf	get_uid@str,w,c
 13317  0030C0  6ED9               	movwf	fsr2l,c
 13318  0030C2  502B               	movf	get_uid@i+1,w,c
 13319  0030C4  2025               	addwfc	get_uid@str+1,w,c
 13320  0030C6  6EDA               	movwf	fsr2h,c
 13321  0030C8  50DF               	movf	indf2,w,c
 13322  0030CA  EC4F  F020         	call	_isdigit
 13323  0030CE  A0D8               	btfss	status,0,c
 13324  0030D0  0012               	return	
 13325                           
 13326                           ;cmd_consol.c: 39: uid = uid * 10 + (str[i] - '0');
 13327  0030D2  C02C  F018         	movff	get_uid@uid,___wmul@multiplier
 13328  0030D6  C02D  F019         	movff	get_uid@uid+1,___wmul@multiplier+1
 13329  0030DA  0E00               	movlw	0
 13330  0030DC  6E1B               	movwf	___wmul@multiplicand+1,c
 13331  0030DE  0E0A               	movlw	10
 13332  0030E0  6E1A               	movwf	___wmul@multiplicand,c
 13333  0030E2  ECE7  F01F         	call	___wmul	;wreg free
 13334  0030E6  502A               	movf	get_uid@i,w,c
 13335  0030E8  2424               	addwf	get_uid@str,w,c
 13336  0030EA  6ED9               	movwf	fsr2l,c
 13337  0030EC  502B               	movf	get_uid@i+1,w,c
 13338  0030EE  2025               	addwfc	get_uid@str+1,w,c
 13339  0030F0  6EDA               	movwf	fsr2h,c
 13340  0030F2  50DF               	movf	indf2,w,c
 13341  0030F4  6E28               	movwf	??_get_uid& (0+255),c
 13342  0030F6  6A29               	clrf	(??_get_uid+1)& (0+255),c
 13343  0030F8  5018               	movf	?___wmul,w,c
 13344  0030FA  2628               	addwf	??_get_uid,f,c
 13345  0030FC  5019               	movf	?___wmul+1,w,c
 13346  0030FE  2229               	addwfc	??_get_uid+1,f,c
 13347  003100  0ED0               	movlw	208
 13348  003102  2428               	addwf	??_get_uid,w,c
 13349  003104  6E2C               	movwf	get_uid@uid,c
 13350  003106  0EFF               	movlw	255
 13351  003108  2029               	addwfc	??_get_uid+1,w,c
 13352  00310A  6E2D               	movwf	get_uid@uid+1,c
 13353                           
 13354                           ;cmd_consol.c: 40: else
 13355                           ;cmd_consol.c: 41: return;
 13356  00310C  4A2A               	infsnz	get_uid@i,f,c
 13357  00310E  2A2B               	incf	get_uid@i+1,f,c
 13358  003110                     l7698:
 13359  003110  C024  F01E         	movff	get_uid@str,strlen@s
 13360  003114  C025  F01F         	movff	get_uid@str+1,strlen@s+1
 13361  003118  ECED  F01E         	call	_strlen	;wreg free
 13362  00311C  501E               	movf	?_strlen,w,c
 13363  00311E  5C2A               	subwf	get_uid@i,w,c
 13364  003120  501F               	movf	?_strlen+1,w,c
 13365  003122  582B               	subwfb	get_uid@i+1,w,c
 13366  003124  A0D8               	btfss	status,0,c
 13367  003126  D7CA               	goto	l7692
 13368                           
 13369                           ;cmd_consol.c: 42: }
 13370                           ;cmd_consol.c: 43: if (uid >= 1 && uid <= 100) {
 13371  003128  502C               	movf	get_uid@uid,w,c
 13372  00312A  102D               	iorwf	get_uid@uid+1,w,c
 13373  00312C  B4D8               	btfsc	status,2,c
 13374  00312E  D00F               	goto	l7706
 13375  003130  502D               	movf	get_uid@uid+1,w,c
 13376  003132  E10D               	bnz	l7706
 13377  003134  0E65               	movlw	101
 13378  003136  5C2C               	subwf	get_uid@uid,w,c
 13379  003138  B0D8               	btfsc	status,0,c
 13380  00313A  D009               	goto	l7706
 13381                           
 13382                           ;cmd_consol.c: 44: *data_uid = 0;
 13383  00313C  C026  FFD9         	movff	get_uid@data_uid,fsr2l
 13384  003140  C027  FFDA         	movff	get_uid@data_uid+1,fsr2h
 13385  003144  0E00               	movlw	0
 13386  003146  6EDE               	movwf	postinc2,c
 13387  003148  0E00               	movlw	0
 13388  00314A  6EDD               	movwf	postdec2,c
 13389                           
 13390                           ;cmd_consol.c: 45: } else {
 13391  00314C  0012               	return	
 13392  00314E                     l7706:
 13393                           
 13394                           ;cmd_consol.c: 46: *data_uid = uid;
 13395  00314E  C026  FFD9         	movff	get_uid@data_uid,fsr2l
 13396  003152  C027  FFDA         	movff	get_uid@data_uid+1,fsr2h
 13397  003156  C02C  FFDE         	movff	get_uid@uid,postinc2
 13398  00315A  C02D  FFDD         	movff	get_uid@uid+1,postdec2
 13399  00315E  0012               	return	
 13400  003160                     __end_of_get_uid:
 13401                           	opt stack 0
 13402                           tblptru	equ	0xFF8
 13403                           tblptrh	equ	0xFF7
 13404                           tblptrl	equ	0xFF6
 13405                           tablat	equ	0xFF5
 13406                           prodh	equ	0xFF4
 13407                           prodl	equ	0xFF3
 13408                           intcon	equ	0xFF2
 13409                           postinc0	equ	0xFEE
 13410                           wreg	equ	0xFE8
 13411                           indf1	equ	0xFE7
 13412                           postinc1	equ	0xFE6
 13413                           postdec1	equ	0xFE5
 13414                           fsr1h	equ	0xFE2
 13415                           fsr1l	equ	0xFE1
 13416                           indf2	equ	0xFDF
 13417                           postinc2	equ	0xFDE
 13418                           postdec2	equ	0xFDD
 13419                           fsr2h	equ	0xFDA
 13420                           fsr2l	equ	0xFD9
 13421                           status	equ	0xFD8
 13422                           
 13423 ;; *************** function _get_str *****************
 13424 ;; Defined at:
 13425 ;;		line 50 in file "cmd_consol.c"
 13426 ;; Parameters:    Size  Location     Type
 13427 ;;  str             2   43[COMRAM] PTR unsigned char 
 13428 ;;		 -> uart_str(150), NULL(0), 
 13429 ;;  data_str        2   45[COMRAM] PTR unsigned char 
 13430 ;;		 -> cmd_data(53), 
 13431 ;; Auto vars:     Size  Location     Type
 13432 ;;		None
 13433 ;; Return value:  Size  Location     Type
 13434 ;;                  1    wreg      unsigned char 
 13435 ;; Registers used:
 13436 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13437 ;; Tracked objects:
 13438 ;;		On entry : 0/0
 13439 ;;		On exit  : 0/0
 13440 ;;		Unchanged: 0/0
 13441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13442 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13445 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13446 ;;Total ram usage:        4 bytes
 13447 ;; Hardware stack levels used:    1
 13448 ;; Hardware stack levels required when called:    6
 13449 ;; This function calls:
 13450 ;;		_memset
 13451 ;;		_strcpy
 13452 ;;		_strlen
 13453 ;; This function is called by:
 13454 ;;		_parse_cmd_str
 13455 ;; This function uses a non-reentrant model
 13456 ;;
 13457                           
 13458                           	psect	text56
 13459  003866                     __ptext56:
 13460                           	opt stack 0
 13461  003866                     _get_str:
 13462                           	opt stack 22
 13463                           
 13464                           ;cmd_consol.c: 51: if (strlen(str) < 40) {
 13465                           
 13466                           ;incstack = 0
 13467  003866  C02C  F01E         	movff	get_str@str,strlen@s
 13468  00386A  C02D  F01F         	movff	get_str@str+1,strlen@s+1
 13469  00386E  ECED  F01E         	call	_strlen	;wreg free
 13470  003872  501F               	movf	?_strlen+1,w,c
 13471  003874  E12A               	bnz	l7722
 13472  003876  0E28               	movlw	40
 13473  003878  5C1E               	subwf	?_strlen,w,c
 13474  00387A  B0D8               	btfsc	status,0,c
 13475  00387C  D026               	goto	l7722
 13476                           
 13477                           ;cmd_consol.c: 52: strcpy(data_str, str);
 13478  00387E  C02E  F010         	movff	get_str@data_str,strcpy@to
 13479  003882  C02F  F011         	movff	get_str@data_str+1,strcpy@to+1
 13480  003886  C02C  F012         	movff	get_str@str,strcpy@from
 13481  00388A  C02D  F013         	movff	get_str@str+1,strcpy@from+1
 13482  00388E  ECA4  F01F         	call	_strcpy	;wreg free
 13483                           
 13484                           ;cmd_consol.c: 53: valid_cmd = 1;
 13485  003892  0E01               	movlw	1
 13486  003894  0100               	movlb	0	; () banked
 13487  003896  6F84               	movwf	_valid_cmd& (0+255),b
 13488                           
 13489                           ; BSR set to: 0
 13490                           ;cmd_consol.c: 54: cmd_data.data_set = 1;
 13491  003898  0E01               	movlw	1
 13492  00389A  0100               	movlb	0	; () banked
 13493  00389C  6FB0               	movwf	(_cmd_data+42)& (0+255),b
 13494                           
 13495                           ; BSR set to: 0
 13496                           ;cmd_consol.c: 55: memset(str, 0, strlen(str));
 13497  00389E  C02C  F024         	movff	get_str@str,memset@p1
 13498  0038A2  C02D  F025         	movff	get_str@str+1,memset@p1+1
 13499  0038A6  0E00               	movlw	0
 13500  0038A8  6E27               	movwf	memset@c+1,c
 13501  0038AA  0E00               	movlw	0
 13502  0038AC  6E26               	movwf	memset@c,c
 13503  0038AE  C02C  F01E         	movff	get_str@str,strlen@s
 13504  0038B2  C02D  F01F         	movff	get_str@str+1,strlen@s+1
 13505  0038B6  ECED  F01E         	call	_strlen	;wreg free
 13506  0038BA  C01E  F028         	movff	?_strlen,memset@n
 13507  0038BE  C01F  F029         	movff	?_strlen+1,memset@n+1
 13508  0038C2  ECBB  F01F         	call	_memset	;wreg free
 13509                           
 13510                           ;cmd_consol.c: 56: return 1;
 13511  0038C6  0E01               	movlw	1
 13512  0038C8  0012               	return	
 13513  0038CA                     l7722:
 13514                           
 13515                           ;cmd_consol.c: 57: }
 13516                           ;cmd_consol.c: 58: return 0;
 13517  0038CA  0E00               	movlw	0
 13518  0038CC  0012               	return	
 13519  0038CE                     __end_of_get_str:
 13520                           	opt stack 0
 13521                           tblptru	equ	0xFF8
 13522                           tblptrh	equ	0xFF7
 13523                           tblptrl	equ	0xFF6
 13524                           tablat	equ	0xFF5
 13525                           prodh	equ	0xFF4
 13526                           prodl	equ	0xFF3
 13527                           intcon	equ	0xFF2
 13528                           postinc0	equ	0xFEE
 13529                           wreg	equ	0xFE8
 13530                           indf1	equ	0xFE7
 13531                           postinc1	equ	0xFE6
 13532                           postdec1	equ	0xFE5
 13533                           fsr1h	equ	0xFE2
 13534                           fsr1l	equ	0xFE1
 13535                           indf2	equ	0xFDF
 13536                           postinc2	equ	0xFDE
 13537                           postdec2	equ	0xFDD
 13538                           fsr2h	equ	0xFDA
 13539                           fsr2l	equ	0xFD9
 13540                           status	equ	0xFD8
 13541                           
 13542 ;; *************** function _strcpy *****************
 13543 ;; Defined at:
 13544 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 13545 ;; Parameters:    Size  Location     Type
 13546 ;;  to              2   15[COMRAM] PTR unsigned char 
 13547 ;;		 -> CMD(15), cmd_data(53), clcd_display_string_details(1100), 
 13548 ;;  from            2   17[COMRAM] PTR const unsigned char 
 13549 ;;		 -> uart_str(150), cmd_data.data(40), NULL(0), cmd_data(53), 
 13550 ;; Auto vars:     Size  Location     Type
 13551 ;;  cp              2   19[COMRAM] PTR unsigned char 
 13552 ;;		 -> CMD(15), cmd_data(53), clcd_display_string_details(1100), 
 13553 ;; Return value:  Size  Location     Type
 13554 ;;                  2   15[COMRAM] PTR unsigned char 
 13555 ;; Registers used:
 13556 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13557 ;; Tracked objects:
 13558 ;;		On entry : 0/0
 13559 ;;		On exit  : 0/0
 13560 ;;		Unchanged: 0/0
 13561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13562 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13563 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13565 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13566 ;;Total ram usage:        6 bytes
 13567 ;; Hardware stack levels used:    1
 13568 ;; Hardware stack levels required when called:    5
 13569 ;; This function calls:
 13570 ;;		Nothing
 13571 ;; This function is called by:
 13572 ;;		_copy_data
 13573 ;;		_copy_display_struct
 13574 ;;		_get_str
 13575 ;;		_parse_cmd_str
 13576 ;; This function uses a non-reentrant model
 13577 ;;
 13578                           
 13579                           	psect	text57
 13580  003F48                     __ptext57:
 13581                           	opt stack 0
 13582  003F48                     _strcpy:
 13583                           	opt stack 21
 13584                           
 13585                           ;incstack = 0
 13586  003F48  C010  F014         	movff	strcpy@to,strcpy@cp
 13587  003F4C  C011  F015         	movff	strcpy@to+1,strcpy@cp+1
 13588  003F50  D004               	goto	l6842
 13589  003F52                     l6840:
 13590  003F52  4A14               	infsnz	strcpy@cp,f,c
 13591  003F54  2A15               	incf	strcpy@cp+1,f,c
 13592  003F56  4A12               	infsnz	strcpy@from,f,c
 13593  003F58  2A13               	incf	strcpy@from+1,f,c
 13594  003F5A                     l6842:
 13595  003F5A  C012  FFD9         	movff	strcpy@from,fsr2l
 13596  003F5E  C013  FFDA         	movff	strcpy@from+1,fsr2h
 13597  003F62  C014  FFE1         	movff	strcpy@cp,fsr1l
 13598  003F66  C015  FFE2         	movff	strcpy@cp+1,fsr1h
 13599  003F6A  CFDF FFE7          	movff	indf2,indf1
 13600  003F6E  50E7               	movf	indf1,w,c
 13601  003F70  B4D8               	btfsc	status,2,c
 13602  003F72  0012               	return	
 13603  003F74  D7EE               	goto	l6840
 13604  003F76                     __end_of_strcpy:
 13605                           	opt stack 0
 13606                           tblptru	equ	0xFF8
 13607                           tblptrh	equ	0xFF7
 13608                           tblptrl	equ	0xFF6
 13609                           tablat	equ	0xFF5
 13610                           prodh	equ	0xFF4
 13611                           prodl	equ	0xFF3
 13612                           intcon	equ	0xFF2
 13613                           postinc0	equ	0xFEE
 13614                           wreg	equ	0xFE8
 13615                           indf1	equ	0xFE7
 13616                           postinc1	equ	0xFE6
 13617                           postdec1	equ	0xFE5
 13618                           fsr1h	equ	0xFE2
 13619                           fsr1l	equ	0xFE1
 13620                           indf2	equ	0xFDF
 13621                           postinc2	equ	0xFDE
 13622                           postdec2	equ	0xFDD
 13623                           fsr2h	equ	0xFDA
 13624                           fsr2l	equ	0xFD9
 13625                           status	equ	0xFD8
 13626                           
 13627 ;; *************** function _get_over_write_data *****************
 13628 ;; Defined at:
 13629 ;;		line 97 in file "cmd_consol.c"
 13630 ;; Parameters:    Size  Location     Type
 13631 ;;  str             2   47[COMRAM] PTR unsigned char 
 13632 ;;		 -> uart_str(150), NULL(0), 
 13633 ;;  over_write_d    2   49[COMRAM] PTR unsigned char 
 13634 ;;		 -> cmd_data(53), 
 13635 ;; Auto vars:     Size  Location     Type
 13636 ;;  i               2   53[COMRAM] int 
 13637 ;;  over_write      1   52[COMRAM] unsigned char 
 13638 ;; Return value:  Size  Location     Type
 13639 ;;                  1    wreg      unsigned char 
 13640 ;; Registers used:
 13641 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13642 ;; Tracked objects:
 13643 ;;		On entry : 0/0
 13644 ;;		On exit  : 0/0
 13645 ;;		Unchanged: 0/0
 13646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13648 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13649 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13650 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13651 ;;Total ram usage:        8 bytes
 13652 ;; Hardware stack levels used:    1
 13653 ;; Hardware stack levels required when called:    8
 13654 ;; This function calls:
 13655 ;;		_isdigit
 13656 ;;		_printf
 13657 ;;		_strlen
 13658 ;; This function is called by:
 13659 ;;		_parse_cmd_str
 13660 ;; This function uses a non-reentrant model
 13661 ;;
 13662                           
 13663                           	psect	text58
 13664  0034B8                     __ptext58:
 13665                           	opt stack 0
 13666  0034B8                     _get_over_write_data:
 13667                           	opt stack 20
 13668                           
 13669                           ;cmd_consol.c: 98: char over_write = 0;
 13670                           
 13671                           ;incstack = 0
 13672  0034B8  0E00               	movlw	0
 13673  0034BA  6E35               	movwf	get_over_write_data@over_write,c
 13674                           
 13675                           ;cmd_consol.c: 99: int i = 0;
 13676  0034BC  0E00               	movlw	0
 13677  0034BE  6E37               	movwf	get_over_write_data@i+1,c
 13678  0034C0  0E00               	movlw	0
 13679  0034C2  6E36               	movwf	get_over_write_data@i,c
 13680                           
 13681                           ;cmd_consol.c: 100: for (i = 0; i < strlen(str); i++) {
 13682  0034C4  0E00               	movlw	0
 13683  0034C6  6E37               	movwf	get_over_write_data@i+1,c
 13684  0034C8  0E00               	movlw	0
 13685  0034CA  6E36               	movwf	get_over_write_data@i,c
 13686  0034CC  D024               	goto	l7796
 13687  0034CE                     l7784:
 13688                           
 13689                           ;cmd_consol.c: 101: if (isdigit(str[i]) == 1) {
 13690  0034CE  5036               	movf	get_over_write_data@i,w,c
 13691  0034D0  2430               	addwf	get_over_write_data@str,w,c
 13692  0034D2  6ED9               	movwf	fsr2l,c
 13693  0034D4  5037               	movf	get_over_write_data@i+1,w,c
 13694  0034D6  2031               	addwfc	get_over_write_data@str+1,w,c
 13695  0034D8  6EDA               	movwf	fsr2h,c
 13696  0034DA  50DF               	movf	indf2,w,c
 13697  0034DC  EC4F  F020         	call	_isdigit
 13698  0034E0  A0D8               	btfss	status,0,c
 13699  0034E2  D00F               	goto	l7788
 13700                           
 13701                           ;cmd_consol.c: 102: over_write = over_write * 10 + (str[i] - '0');
 13702  0034E4  5036               	movf	get_over_write_data@i,w,c
 13703  0034E6  2430               	addwf	get_over_write_data@str,w,c
 13704  0034E8  6ED9               	movwf	fsr2l,c
 13705  0034EA  5037               	movf	get_over_write_data@i+1,w,c
 13706  0034EC  2031               	addwfc	get_over_write_data@str+1,w,c
 13707  0034EE  6EDA               	movwf	fsr2h,c
 13708  0034F0  50DF               	movf	indf2,w,c
 13709  0034F2  6E34               	movwf	??_get_over_write_data& (0+255),c
 13710  0034F4  5035               	movf	get_over_write_data@over_write,w,c
 13711  0034F6  0D0A               	mullw	10
 13712  0034F8  50F3               	movf	prodl,w,c
 13713  0034FA  2434               	addwf	??_get_over_write_data,w,c
 13714  0034FC  0FD0               	addlw	208
 13715  0034FE  6E35               	movwf	get_over_write_data@over_write,c
 13716                           
 13717                           ;cmd_consol.c: 103: } else {
 13718  003500  D008               	goto	l7794
 13719  003502                     l7788:
 13720                           
 13721                           ;cmd_consol.c: 104: *over_write_data = 0;
 13722  003502  C032  FFD9         	movff	get_over_write_data@over_write_data,fsr2l
 13723  003506  C033  FFDA         	movff	get_over_write_data@over_write_data+1,fsr2h
 13724  00350A  0E00               	movlw	0
 13725  00350C  6EDF               	movwf	indf2,c
 13726                           
 13727                           ;cmd_consol.c: 105: return 0;
 13728  00350E  0E00               	movlw	0
 13729  003510  0012               	return	
 13730  003512                     l7794:
 13731  003512  4A36               	infsnz	get_over_write_data@i,f,c
 13732  003514  2A37               	incf	get_over_write_data@i+1,f,c
 13733  003516                     l7796:
 13734  003516  C030  F01E         	movff	get_over_write_data@str,strlen@s
 13735  00351A  C031  F01F         	movff	get_over_write_data@str+1,strlen@s+1
 13736  00351E  ECED  F01E         	call	_strlen	;wreg free
 13737  003522  501E               	movf	?_strlen,w,c
 13738  003524  5C36               	subwf	get_over_write_data@i,w,c
 13739  003526  501F               	movf	?_strlen+1,w,c
 13740  003528  5837               	subwfb	get_over_write_data@i+1,w,c
 13741  00352A  A0D8               	btfss	status,0,c
 13742  00352C  D7D0               	goto	l7784
 13743                           
 13744                           ;cmd_consol.c: 106: }
 13745                           ;cmd_consol.c: 107: }
 13746                           ;cmd_consol.c: 108: printf("over_write = %d\r\n", over_write);
 13747  00352E  0EDD               	movlw	low STR_28
 13748  003530  6E1E               	movwf	printf@f,c
 13749  003532  0EFD               	movlw	high STR_28
 13750  003534  6E1F               	movwf	printf@f+1,c
 13751  003536  C035  F020         	movff	get_over_write_data@over_write,?_printf+2
 13752  00353A  6A21               	clrf	?_printf+3,c
 13753  00353C  EC03  F015         	call	_printf	;wreg free
 13754                           
 13755                           ;cmd_consol.c: 109: *over_write_data = over_write;
 13756  003540  C032  FFD9         	movff	get_over_write_data@over_write_data,fsr2l
 13757  003544  C033  FFDA         	movff	get_over_write_data@over_write_data+1,fsr2h
 13758  003548  C035  FFDF         	movff	get_over_write_data@over_write,indf2
 13759                           
 13760                           ;cmd_consol.c: 110: return 1;
 13761  00354C  0E01               	movlw	1
 13762  00354E  0012               	return	
 13763  003550                     __end_of_get_over_write_data:
 13764                           	opt stack 0
 13765                           tblptru	equ	0xFF8
 13766                           tblptrh	equ	0xFF7
 13767                           tblptrl	equ	0xFF6
 13768                           tablat	equ	0xFF5
 13769                           prodh	equ	0xFF4
 13770                           prodl	equ	0xFF3
 13771                           intcon	equ	0xFF2
 13772                           postinc0	equ	0xFEE
 13773                           wreg	equ	0xFE8
 13774                           indf1	equ	0xFE7
 13775                           postinc1	equ	0xFE6
 13776                           postdec1	equ	0xFE5
 13777                           fsr1h	equ	0xFE2
 13778                           fsr1l	equ	0xFE1
 13779                           indf2	equ	0xFDF
 13780                           postinc2	equ	0xFDE
 13781                           postdec2	equ	0xFDD
 13782                           fsr2h	equ	0xFDA
 13783                           fsr2l	equ	0xFD9
 13784                           status	equ	0xFD8
 13785                           
 13786 ;; *************** function _get_dis_frq *****************
 13787 ;; Defined at:
 13788 ;;		line 80 in file "cmd_consol.c"
 13789 ;; Parameters:    Size  Location     Type
 13790 ;;  str             2   47[COMRAM] PTR unsigned char 
 13791 ;;		 -> uart_str(150), NULL(0), 
 13792 ;;  data_frq        2   49[COMRAM] PTR unsigned char 
 13793 ;;		 -> cmd_data(53), 
 13794 ;; Auto vars:     Size  Location     Type
 13795 ;;  i               2   53[COMRAM] int 
 13796 ;;  frq             1   52[COMRAM] unsigned char 
 13797 ;; Return value:  Size  Location     Type
 13798 ;;                  1    wreg      unsigned char 
 13799 ;; Registers used:
 13800 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13801 ;; Tracked objects:
 13802 ;;		On entry : 0/0
 13803 ;;		On exit  : 0/0
 13804 ;;		Unchanged: 0/0
 13805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13806 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13807 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13808 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13809 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13810 ;;Total ram usage:        8 bytes
 13811 ;; Hardware stack levels used:    1
 13812 ;; Hardware stack levels required when called:    8
 13813 ;; This function calls:
 13814 ;;		_isdigit
 13815 ;;		_printf
 13816 ;;		_strlen
 13817 ;; This function is called by:
 13818 ;;		_parse_cmd_str
 13819 ;; This function uses a non-reentrant model
 13820 ;;
 13821                           
 13822                           	psect	text59
 13823  003550                     __ptext59:
 13824                           	opt stack 0
 13825  003550                     _get_dis_frq:
 13826                           	opt stack 20
 13827                           
 13828                           ;cmd_consol.c: 81: char frq = 0;
 13829                           
 13830                           ;incstack = 0
 13831  003550  0E00               	movlw	0
 13832  003552  6E35               	movwf	get_dis_frq@frq,c
 13833                           
 13834                           ;cmd_consol.c: 82: int i = 0;
 13835  003554  0E00               	movlw	0
 13836  003556  6E37               	movwf	get_dis_frq@i+1,c
 13837  003558  0E00               	movlw	0
 13838  00355A  6E36               	movwf	get_dis_frq@i,c
 13839                           
 13840                           ;cmd_consol.c: 83: for (i = 0; i < strlen(str); i++) {
 13841  00355C  0E00               	movlw	0
 13842  00355E  6E37               	movwf	get_dis_frq@i+1,c
 13843  003560  0E00               	movlw	0
 13844  003562  6E36               	movwf	get_dis_frq@i,c
 13845  003564  D024               	goto	l7772
 13846  003566                     l7760:
 13847                           
 13848                           ;cmd_consol.c: 84: if (isdigit(str[i]) == 1) {
 13849  003566  5036               	movf	get_dis_frq@i,w,c
 13850  003568  2430               	addwf	get_dis_frq@str,w,c
 13851  00356A  6ED9               	movwf	fsr2l,c
 13852  00356C  5037               	movf	get_dis_frq@i+1,w,c
 13853  00356E  2031               	addwfc	get_dis_frq@str+1,w,c
 13854  003570  6EDA               	movwf	fsr2h,c
 13855  003572  50DF               	movf	indf2,w,c
 13856  003574  EC4F  F020         	call	_isdigit
 13857  003578  A0D8               	btfss	status,0,c
 13858  00357A  D00F               	goto	l7764
 13859                           
 13860                           ;cmd_consol.c: 85: frq = frq * 10 + (str[i] - '0');
 13861  00357C  5036               	movf	get_dis_frq@i,w,c
 13862  00357E  2430               	addwf	get_dis_frq@str,w,c
 13863  003580  6ED9               	movwf	fsr2l,c
 13864  003582  5037               	movf	get_dis_frq@i+1,w,c
 13865  003584  2031               	addwfc	get_dis_frq@str+1,w,c
 13866  003586  6EDA               	movwf	fsr2h,c
 13867  003588  50DF               	movf	indf2,w,c
 13868  00358A  6E34               	movwf	??_get_dis_frq& (0+255),c
 13869  00358C  5035               	movf	get_dis_frq@frq,w,c
 13870  00358E  0D0A               	mullw	10
 13871  003590  50F3               	movf	prodl,w,c
 13872  003592  2434               	addwf	??_get_dis_frq,w,c
 13873  003594  0FD0               	addlw	208
 13874  003596  6E35               	movwf	get_dis_frq@frq,c
 13875                           
 13876                           ;cmd_consol.c: 86: } else {
 13877  003598  D008               	goto	l7770
 13878  00359A                     l7764:
 13879                           
 13880                           ;cmd_consol.c: 87: *data_frq = 1;
 13881  00359A  C032  FFD9         	movff	get_dis_frq@data_frq,fsr2l
 13882  00359E  C033  FFDA         	movff	get_dis_frq@data_frq+1,fsr2h
 13883  0035A2  0E01               	movlw	1
 13884  0035A4  6EDF               	movwf	indf2,c
 13885                           
 13886                           ;cmd_consol.c: 89: return 0;
 13887  0035A6  0E00               	movlw	0
 13888  0035A8  0012               	return	
 13889  0035AA                     l7770:
 13890  0035AA  4A36               	infsnz	get_dis_frq@i,f,c
 13891  0035AC  2A37               	incf	get_dis_frq@i+1,f,c
 13892  0035AE                     l7772:
 13893  0035AE  C030  F01E         	movff	get_dis_frq@str,strlen@s
 13894  0035B2  C031  F01F         	movff	get_dis_frq@str+1,strlen@s+1
 13895  0035B6  ECED  F01E         	call	_strlen	;wreg free
 13896  0035BA  501E               	movf	?_strlen,w,c
 13897  0035BC  5C36               	subwf	get_dis_frq@i,w,c
 13898  0035BE  501F               	movf	?_strlen+1,w,c
 13899  0035C0  5837               	subwfb	get_dis_frq@i+1,w,c
 13900  0035C2  A0D8               	btfss	status,0,c
 13901  0035C4  D7D0               	goto	l7760
 13902                           
 13903                           ;cmd_consol.c: 90: }
 13904                           ;cmd_consol.c: 91: }
 13905                           ;cmd_consol.c: 92: printf("display_frq = %d\r\n", frq);
 13906  0035C6  0EA5               	movlw	low STR_27
 13907  0035C8  6E1E               	movwf	printf@f,c
 13908  0035CA  0EFD               	movlw	high STR_27
 13909  0035CC  6E1F               	movwf	printf@f+1,c
 13910  0035CE  C035  F020         	movff	get_dis_frq@frq,?_printf+2
 13911  0035D2  6A21               	clrf	?_printf+3,c
 13912  0035D4  EC03  F015         	call	_printf	;wreg free
 13913                           
 13914                           ;cmd_consol.c: 93: *data_frq = frq;
 13915  0035D8  C032  FFD9         	movff	get_dis_frq@data_frq,fsr2l
 13916  0035DC  C033  FFDA         	movff	get_dis_frq@data_frq+1,fsr2h
 13917  0035E0  C035  FFDF         	movff	get_dis_frq@frq,indf2
 13918                           
 13919                           ;cmd_consol.c: 94: return 1;
 13920  0035E4  0E01               	movlw	1
 13921  0035E6  0012               	return	
 13922  0035E8                     __end_of_get_dis_frq:
 13923                           	opt stack 0
 13924                           tblptru	equ	0xFF8
 13925                           tblptrh	equ	0xFF7
 13926                           tblptrl	equ	0xFF6
 13927                           tablat	equ	0xFF5
 13928                           prodh	equ	0xFF4
 13929                           prodl	equ	0xFF3
 13930                           intcon	equ	0xFF2
 13931                           postinc0	equ	0xFEE
 13932                           wreg	equ	0xFE8
 13933                           indf1	equ	0xFE7
 13934                           postinc1	equ	0xFE6
 13935                           postdec1	equ	0xFE5
 13936                           fsr1h	equ	0xFE2
 13937                           fsr1l	equ	0xFE1
 13938                           indf2	equ	0xFDF
 13939                           postinc2	equ	0xFDE
 13940                           postdec2	equ	0xFDD
 13941                           fsr2h	equ	0xFDA
 13942                           fsr2l	equ	0xFD9
 13943                           status	equ	0xFD8
 13944                           
 13945 ;; *************** function _get_direction *****************
 13946 ;; Defined at:
 13947 ;;		line 61 in file "cmd_consol.c"
 13948 ;; Parameters:    Size  Location     Type
 13949 ;;  str             2   47[COMRAM] PTR unsigned char 
 13950 ;;		 -> uart_str(150), NULL(0), 
 13951 ;;  data_directi    2   49[COMRAM] PTR unsigned char 
 13952 ;;		 -> cmd_data(53), 
 13953 ;; Auto vars:     Size  Location     Type
 13954 ;;  i               2   52[COMRAM] int 
 13955 ;;  direction       1   54[COMRAM] unsigned char 
 13956 ;; Return value:  Size  Location     Type
 13957 ;;                  1    wreg      unsigned char 
 13958 ;; Registers used:
 13959 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13960 ;; Tracked objects:
 13961 ;;		On entry : 0/0
 13962 ;;		On exit  : 0/0
 13963 ;;		Unchanged: 0/0
 13964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13966 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13967 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13968 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13969 ;;Total ram usage:        8 bytes
 13970 ;; Hardware stack levels used:    1
 13971 ;; Hardware stack levels required when called:    8
 13972 ;; This function calls:
 13973 ;;		_isdigit
 13974 ;;		_printf
 13975 ;;		_strlen
 13976 ;; This function is called by:
 13977 ;;		_parse_cmd_str
 13978 ;; This function uses a non-reentrant model
 13979 ;;
 13980                           
 13981                           	psect	text60
 13982  003414                     __ptext60:
 13983                           	opt stack 0
 13984  003414                     _get_direction:
 13985                           	opt stack 20
 13986                           
 13987                           ;cmd_consol.c: 62: char direction = 0;
 13988                           
 13989                           ;incstack = 0
 13990  003414  0E00               	movlw	0
 13991  003416  6E37               	movwf	get_direction@direction,c
 13992                           
 13993                           ;cmd_consol.c: 63: int i = 0;
 13994  003418  0E00               	movlw	0
 13995  00341A  6E36               	movwf	get_direction@i+1,c
 13996  00341C  0E00               	movlw	0
 13997  00341E  6E35               	movwf	get_direction@i,c
 13998                           
 13999                           ;cmd_consol.c: 64: for (i = 0; i < strlen(str); i++) {
 14000  003420  0E00               	movlw	0
 14001  003422  6E36               	movwf	get_direction@i+1,c
 14002  003424  0E00               	movlw	0
 14003  003426  6E35               	movwf	get_direction@i,c
 14004  003428  D01E               	goto	l7738
 14005  00342A                     l7728:
 14006                           
 14007                           ;cmd_consol.c: 65: if (isdigit(str[i]) == 1)
 14008  00342A  5035               	movf	get_direction@i,w,c
 14009  00342C  2430               	addwf	get_direction@str,w,c
 14010  00342E  6ED9               	movwf	fsr2l,c
 14011  003430  5036               	movf	get_direction@i+1,w,c
 14012  003432  2031               	addwfc	get_direction@str+1,w,c
 14013  003434  6EDA               	movwf	fsr2h,c
 14014  003436  50DF               	movf	indf2,w,c
 14015  003438  EC4F  F020         	call	_isdigit
 14016  00343C  A0D8               	btfss	status,0,c
 14017  00343E  D00F               	goto	l7732
 14018                           
 14019                           ;cmd_consol.c: 66: direction = direction * 10 + (str[i] - '0');
 14020  003440  5035               	movf	get_direction@i,w,c
 14021  003442  2430               	addwf	get_direction@str,w,c
 14022  003444  6ED9               	movwf	fsr2l,c
 14023  003446  5036               	movf	get_direction@i+1,w,c
 14024  003448  2031               	addwfc	get_direction@str+1,w,c
 14025  00344A  6EDA               	movwf	fsr2h,c
 14026  00344C  50DF               	movf	indf2,w,c
 14027  00344E  6E34               	movwf	??_get_direction& (0+255),c
 14028  003450  5037               	movf	get_direction@direction,w,c
 14029  003452  0D0A               	mullw	10
 14030  003454  50F3               	movf	prodl,w,c
 14031  003456  2434               	addwf	??_get_direction,w,c
 14032  003458  0FD0               	addlw	208
 14033  00345A  6E37               	movwf	get_direction@direction,c
 14034  00345C  D002               	goto	l7736
 14035  00345E                     l7732:
 14036                           
 14037                           ;cmd_consol.c: 67: else
 14038                           ;cmd_consol.c: 68: return 0;
 14039  00345E  0E00               	movlw	0
 14040  003460  0012               	return	
 14041  003462                     l7736:
 14042  003462  4A35               	infsnz	get_direction@i,f,c
 14043  003464  2A36               	incf	get_direction@i+1,f,c
 14044  003466                     l7738:
 14045  003466  C030  F01E         	movff	get_direction@str,strlen@s
 14046  00346A  C031  F01F         	movff	get_direction@str+1,strlen@s+1
 14047  00346E  ECED  F01E         	call	_strlen	;wreg free
 14048  003472  501E               	movf	?_strlen,w,c
 14049  003474  5C35               	subwf	get_direction@i,w,c
 14050  003476  501F               	movf	?_strlen+1,w,c
 14051  003478  5836               	subwfb	get_direction@i+1,w,c
 14052  00347A  A0D8               	btfss	status,0,c
 14053  00347C  D7D6               	goto	l7728
 14054                           
 14055                           ;cmd_consol.c: 69: }
 14056                           ;cmd_consol.c: 70: printf("direction = %d\r\n", direction);
 14057  00347E  0E01               	movlw	low STR_26
 14058  003480  6E1E               	movwf	printf@f,c
 14059  003482  0EFE               	movlw	high STR_26
 14060  003484  6E1F               	movwf	printf@f+1,c
 14061  003486  C037  F020         	movff	get_direction@direction,?_printf+2
 14062  00348A  6A21               	clrf	?_printf+3,c
 14063  00348C  EC03  F015         	call	_printf	;wreg free
 14064                           
 14065                           ;cmd_consol.c: 71: if (direction >= clcd_config_data.clcd_max_row) {
 14066  003490  504A               	movf	_clcd_config_data+1,w,c
 14067  003492  5C37               	subwf	get_direction@direction,w,c
 14068  003494  A0D8               	btfss	status,0,c
 14069  003496  D008               	goto	l7752
 14070                           
 14071                           ;cmd_consol.c: 72: *data_direction = -1;
 14072  003498  C032  FFD9         	movff	get_direction@data_direction,fsr2l
 14073  00349C  C033  FFDA         	movff	get_direction@data_direction+1,fsr2h
 14074  0034A0  0EFF               	movlw	255
 14075  0034A2  6EDF               	movwf	indf2,c
 14076                           
 14077                           ;cmd_consol.c: 73: return 0;
 14078  0034A4  0E00               	movlw	0
 14079                           
 14080                           ;cmd_consol.c: 74: } else {
 14081  0034A6  0012               	return	
 14082  0034A8                     l7752:
 14083                           
 14084                           ;cmd_consol.c: 75: *data_direction = direction;
 14085  0034A8  C032  FFD9         	movff	get_direction@data_direction,fsr2l
 14086  0034AC  C033  FFDA         	movff	get_direction@data_direction+1,fsr2h
 14087  0034B0  C037  FFDF         	movff	get_direction@direction,indf2
 14088                           
 14089                           ;cmd_consol.c: 76: return 1;
 14090  0034B4  0E01               	movlw	1
 14091  0034B6  0012               	return	
 14092  0034B8                     __end_of_get_direction:
 14093                           	opt stack 0
 14094                           tblptru	equ	0xFF8
 14095                           tblptrh	equ	0xFF7
 14096                           tblptrl	equ	0xFF6
 14097                           tablat	equ	0xFF5
 14098                           prodh	equ	0xFF4
 14099                           prodl	equ	0xFF3
 14100                           intcon	equ	0xFF2
 14101                           postinc0	equ	0xFEE
 14102                           wreg	equ	0xFE8
 14103                           indf1	equ	0xFE7
 14104                           postinc1	equ	0xFE6
 14105                           postdec1	equ	0xFE5
 14106                           fsr1h	equ	0xFE2
 14107                           fsr1l	equ	0xFE1
 14108                           indf2	equ	0xFDF
 14109                           postinc2	equ	0xFDE
 14110                           postdec2	equ	0xFDD
 14111                           fsr2h	equ	0xFDA
 14112                           fsr2l	equ	0xFD9
 14113                           status	equ	0xFD8
 14114                           
 14115 ;; *************** function _collect_row *****************
 14116 ;; Defined at:
 14117 ;;		line 16 in file "cmd_consol.c"
 14118 ;; Parameters:    Size  Location     Type
 14119 ;;  str             2   47[COMRAM] PTR unsigned char 
 14120 ;;		 -> uart_str(150), NULL(0), 
 14121 ;;  data_row        2   49[COMRAM] PTR unsigned char 
 14122 ;;		 -> cmd_data(53), 
 14123 ;; Auto vars:     Size  Location     Type
 14124 ;;  i               2   52[COMRAM] int 
 14125 ;;  row             1   54[COMRAM] unsigned char 
 14126 ;; Return value:  Size  Location     Type
 14127 ;;                  1    wreg      void 
 14128 ;; Registers used:
 14129 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14135 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14136 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14137 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14138 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14139 ;;Total ram usage:        8 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; Hardware stack levels required when called:    8
 14142 ;; This function calls:
 14143 ;;		_isdigit
 14144 ;;		_printf
 14145 ;;		_strlen
 14146 ;; This function is called by:
 14147 ;;		_parse_cmd_str
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           	psect	text61
 14152  003214                     __ptext61:
 14153                           	opt stack 0
 14154  003214                     _collect_row:
 14155                           	opt stack 20
 14156                           
 14157                           ;cmd_consol.c: 17: printf("row1 = %s\r\n", str);
 14158                           
 14159                           ;incstack = 0
 14160  003214  0EC7               	movlw	low STR_24
 14161  003216  6E1E               	movwf	printf@f,c
 14162  003218  0EFE               	movlw	high STR_24
 14163  00321A  6E1F               	movwf	printf@f+1,c
 14164  00321C  C030  F020         	movff	collect_row@str,?_printf+2
 14165  003220  C031  F021         	movff	collect_row@str+1,?_printf+3
 14166  003224  EC03  F015         	call	_printf	;wreg free
 14167                           
 14168                           ;cmd_consol.c: 18: char row = 0;
 14169  003228  0E00               	movlw	0
 14170  00322A  6E37               	movwf	collect_row@row,c
 14171                           
 14172                           ;cmd_consol.c: 19: int i = 0;
 14173  00322C  0E00               	movlw	0
 14174  00322E  6E36               	movwf	collect_row@i+1,c
 14175  003230  0E00               	movlw	0
 14176  003232  6E35               	movwf	collect_row@i,c
 14177                           
 14178                           ;cmd_consol.c: 20: for (i = 0; i < strlen(str); i++) {
 14179  003234  0E00               	movlw	0
 14180  003236  6E36               	movwf	collect_row@i+1,c
 14181  003238  0E00               	movlw	0
 14182  00323A  6E35               	movwf	collect_row@i,c
 14183  00323C  D01B               	goto	l7680
 14184  00323E                     l7674:
 14185                           
 14186                           ;cmd_consol.c: 21: if (isdigit(str[i]) == 1)
 14187  00323E  5035               	movf	collect_row@i,w,c
 14188  003240  2430               	addwf	collect_row@str,w,c
 14189  003242  6ED9               	movwf	fsr2l,c
 14190  003244  5036               	movf	collect_row@i+1,w,c
 14191  003246  2031               	addwfc	collect_row@str+1,w,c
 14192  003248  6EDA               	movwf	fsr2h,c
 14193  00324A  50DF               	movf	indf2,w,c
 14194  00324C  EC4F  F020         	call	_isdigit
 14195  003250  A0D8               	btfss	status,0,c
 14196  003252  0012               	return	
 14197                           
 14198                           ;cmd_consol.c: 22: row = row * 10 + (str[i] - '0');
 14199  003254  5035               	movf	collect_row@i,w,c
 14200  003256  2430               	addwf	collect_row@str,w,c
 14201  003258  6ED9               	movwf	fsr2l,c
 14202  00325A  5036               	movf	collect_row@i+1,w,c
 14203  00325C  2031               	addwfc	collect_row@str+1,w,c
 14204  00325E  6EDA               	movwf	fsr2h,c
 14205  003260  50DF               	movf	indf2,w,c
 14206  003262  6E34               	movwf	??_collect_row& (0+255),c
 14207  003264  5037               	movf	collect_row@row,w,c
 14208  003266  0D0A               	mullw	10
 14209  003268  50F3               	movf	prodl,w,c
 14210  00326A  2434               	addwf	??_collect_row,w,c
 14211  00326C  0FD0               	addlw	208
 14212  00326E  6E37               	movwf	collect_row@row,c
 14213                           
 14214                           ;cmd_consol.c: 23: else
 14215                           ;cmd_consol.c: 24: return;
 14216  003270  4A35               	infsnz	collect_row@i,f,c
 14217  003272  2A36               	incf	collect_row@i+1,f,c
 14218  003274                     l7680:
 14219  003274  C030  F01E         	movff	collect_row@str,strlen@s
 14220  003278  C031  F01F         	movff	collect_row@str+1,strlen@s+1
 14221  00327C  ECED  F01E         	call	_strlen	;wreg free
 14222  003280  501E               	movf	?_strlen,w,c
 14223  003282  5C35               	subwf	collect_row@i,w,c
 14224  003284  501F               	movf	?_strlen+1,w,c
 14225  003286  5836               	subwfb	collect_row@i+1,w,c
 14226  003288  A0D8               	btfss	status,0,c
 14227  00328A  D7D9               	goto	l7674
 14228                           
 14229                           ;cmd_consol.c: 25: }
 14230                           ;cmd_consol.c: 26: printf("row2 = %d\r\n", row);
 14231  00328C  0EA3               	movlw	low STR_25
 14232  00328E  6E1E               	movwf	printf@f,c
 14233  003290  0EFE               	movlw	high STR_25
 14234  003292  6E1F               	movwf	printf@f+1,c
 14235  003294  C037  F020         	movff	collect_row@row,?_printf+2
 14236  003298  6A21               	clrf	?_printf+3,c
 14237  00329A  EC03  F015         	call	_printf	;wreg free
 14238                           
 14239                           ;cmd_consol.c: 27: if (row >= clcd_config_data.clcd_max_row) {
 14240  00329E  504A               	movf	_clcd_config_data+1,w,c
 14241  0032A0  5C37               	subwf	collect_row@row,w,c
 14242  0032A2  A0D8               	btfss	status,0,c
 14243  0032A4  D007               	goto	l7688
 14244                           
 14245                           ;cmd_consol.c: 28: *data_row = -1;
 14246  0032A6  C032  FFD9         	movff	collect_row@data_row,fsr2l
 14247  0032AA  C033  FFDA         	movff	collect_row@data_row+1,fsr2h
 14248  0032AE  0EFF               	movlw	255
 14249  0032B0  6EDF               	movwf	indf2,c
 14250                           
 14251                           ;cmd_consol.c: 29: } else {
 14252  0032B2  0012               	return	
 14253  0032B4                     l7688:
 14254                           
 14255                           ;cmd_consol.c: 30: *data_row = row;
 14256  0032B4  C032  FFD9         	movff	collect_row@data_row,fsr2l
 14257  0032B8  C033  FFDA         	movff	collect_row@data_row+1,fsr2h
 14258  0032BC  C037  FFDF         	movff	collect_row@row,indf2
 14259  0032C0  0012               	return	
 14260  0032C2                     __end_of_collect_row:
 14261                           	opt stack 0
 14262                           tblptru	equ	0xFF8
 14263                           tblptrh	equ	0xFF7
 14264                           tblptrl	equ	0xFF6
 14265                           tablat	equ	0xFF5
 14266                           prodh	equ	0xFF4
 14267                           prodl	equ	0xFF3
 14268                           intcon	equ	0xFF2
 14269                           postinc0	equ	0xFEE
 14270                           wreg	equ	0xFE8
 14271                           indf1	equ	0xFE7
 14272                           postinc1	equ	0xFE6
 14273                           postdec1	equ	0xFE5
 14274                           fsr1h	equ	0xFE2
 14275                           fsr1l	equ	0xFE1
 14276                           indf2	equ	0xFDF
 14277                           postinc2	equ	0xFDE
 14278                           postdec2	equ	0xFDD
 14279                           fsr2h	equ	0xFDA
 14280                           fsr2l	equ	0xFD9
 14281                           status	equ	0xFD8
 14282                           
 14283 ;; *************** function _collect_column *****************
 14284 ;; Defined at:
 14285 ;;		line 113 in file "cmd_consol.c"
 14286 ;; Parameters:    Size  Location     Type
 14287 ;;  str             2   47[COMRAM] PTR unsigned char 
 14288 ;;		 -> uart_str(150), NULL(0), 
 14289 ;;  data_column     2   49[COMRAM] PTR unsigned char 
 14290 ;;		 -> cmd_data(53), 
 14291 ;; Auto vars:     Size  Location     Type
 14292 ;;  i               2   52[COMRAM] int 
 14293 ;;  column          1   54[COMRAM] unsigned char 
 14294 ;; Return value:  Size  Location     Type
 14295 ;;                  1    wreg      void 
 14296 ;; Registers used:
 14297 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14298 ;; Tracked objects:
 14299 ;;		On entry : 0/0
 14300 ;;		On exit  : 0/0
 14301 ;;		Unchanged: 0/0
 14302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14303 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14304 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14305 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14306 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14307 ;;Total ram usage:        8 bytes
 14308 ;; Hardware stack levels used:    1
 14309 ;; Hardware stack levels required when called:    8
 14310 ;; This function calls:
 14311 ;;		_isdigit
 14312 ;;		_printf
 14313 ;;		_strlen
 14314 ;; This function is called by:
 14315 ;;		_parse_cmd_str
 14316 ;; This function uses a non-reentrant model
 14317 ;;
 14318                           
 14319                           	psect	text62
 14320  0032C2                     __ptext62:
 14321                           	opt stack 0
 14322  0032C2                     _collect_column:
 14323                           	opt stack 20
 14324                           
 14325                           ;cmd_consol.c: 114: printf("col1 = %s\r\n", str);
 14326                           
 14327                           ;incstack = 0
 14328  0032C2  0EBB               	movlw	low STR_29
 14329  0032C4  6E1E               	movwf	printf@f,c
 14330  0032C6  0EFE               	movlw	high STR_29
 14331  0032C8  6E1F               	movwf	printf@f+1,c
 14332  0032CA  C030  F020         	movff	collect_column@str,?_printf+2
 14333  0032CE  C031  F021         	movff	collect_column@str+1,?_printf+3
 14334  0032D2  EC03  F015         	call	_printf	;wreg free
 14335                           
 14336                           ;cmd_consol.c: 115: int i = 0;
 14337  0032D6  0E00               	movlw	0
 14338  0032D8  6E36               	movwf	collect_column@i+1,c
 14339  0032DA  0E00               	movlw	0
 14340  0032DC  6E35               	movwf	collect_column@i,c
 14341                           
 14342                           ;cmd_consol.c: 116: char column = 0;
 14343  0032DE  0E00               	movlw	0
 14344  0032E0  6E37               	movwf	collect_column@column,c
 14345                           
 14346                           ;cmd_consol.c: 117: for (i = 0; i < strlen(str); i++) {
 14347  0032E2  0E00               	movlw	0
 14348  0032E4  6E36               	movwf	collect_column@i+1,c
 14349  0032E6  0E00               	movlw	0
 14350  0032E8  6E35               	movwf	collect_column@i,c
 14351  0032EA  D01B               	goto	l7820
 14352  0032EC                     l7814:
 14353                           
 14354                           ;cmd_consol.c: 118: if (isdigit(str[i]) == 1) {
 14355  0032EC  5035               	movf	collect_column@i,w,c
 14356  0032EE  2430               	addwf	collect_column@str,w,c
 14357  0032F0  6ED9               	movwf	fsr2l,c
 14358  0032F2  5036               	movf	collect_column@i+1,w,c
 14359  0032F4  2031               	addwfc	collect_column@str+1,w,c
 14360  0032F6  6EDA               	movwf	fsr2h,c
 14361  0032F8  50DF               	movf	indf2,w,c
 14362  0032FA  EC4F  F020         	call	_isdigit
 14363  0032FE  A0D8               	btfss	status,0,c
 14364  003300  0012               	return	
 14365                           
 14366                           ;cmd_consol.c: 119: column = column * 10 + (str[i] - '0');
 14367  003302  5035               	movf	collect_column@i,w,c
 14368  003304  2430               	addwf	collect_column@str,w,c
 14369  003306  6ED9               	movwf	fsr2l,c
 14370  003308  5036               	movf	collect_column@i+1,w,c
 14371  00330A  2031               	addwfc	collect_column@str+1,w,c
 14372  00330C  6EDA               	movwf	fsr2h,c
 14373  00330E  50DF               	movf	indf2,w,c
 14374  003310  6E34               	movwf	??_collect_column& (0+255),c
 14375  003312  5037               	movf	collect_column@column,w,c
 14376  003314  0D0A               	mullw	10
 14377  003316  50F3               	movf	prodl,w,c
 14378  003318  2434               	addwf	??_collect_column,w,c
 14379  00331A  0FD0               	addlw	208
 14380  00331C  6E37               	movwf	collect_column@column,c
 14381                           
 14382                           ;cmd_consol.c: 125: return;
 14383                           
 14384                           ;cmd_consol.c: 122: } else {
 14385  00331E  4A35               	infsnz	collect_column@i,f,c
 14386  003320  2A36               	incf	collect_column@i+1,f,c
 14387  003322                     l7820:
 14388  003322  C030  F01E         	movff	collect_column@str,strlen@s
 14389  003326  C031  F01F         	movff	collect_column@str+1,strlen@s+1
 14390  00332A  ECED  F01E         	call	_strlen	;wreg free
 14391  00332E  501E               	movf	?_strlen,w,c
 14392  003330  5C35               	subwf	collect_column@i,w,c
 14393  003332  501F               	movf	?_strlen+1,w,c
 14394  003334  5836               	subwfb	collect_column@i+1,w,c
 14395  003336  A0D8               	btfss	status,0,c
 14396  003338  D7D9               	goto	l7814
 14397                           
 14398                           ;cmd_consol.c: 126: }
 14399                           ;cmd_consol.c: 128: }
 14400                           ;cmd_consol.c: 129: printf("Col2 = %d\r\n", column);
 14401  00333A  0E97               	movlw	low STR_30
 14402  00333C  6E1E               	movwf	printf@f,c
 14403  00333E  0EFE               	movlw	high STR_30
 14404  003340  6E1F               	movwf	printf@f+1,c
 14405  003342  C037  F020         	movff	collect_column@column,?_printf+2
 14406  003346  6A21               	clrf	?_printf+3,c
 14407  003348  EC03  F015         	call	_printf	;wreg free
 14408                           
 14409                           ;cmd_consol.c: 130: if (column >= clcd_config_data.clcd_max_col) {
 14410  00334C  504B               	movf	_clcd_config_data+2,w,c
 14411  00334E  5C37               	subwf	collect_column@column,w,c
 14412  003350  A0D8               	btfss	status,0,c
 14413  003352  D007               	goto	l7828
 14414                           
 14415                           ;cmd_consol.c: 131: *data_column = -1;
 14416  003354  C032  FFD9         	movff	collect_column@data_column,fsr2l
 14417  003358  C033  FFDA         	movff	collect_column@data_column+1,fsr2h
 14418  00335C  0EFF               	movlw	255
 14419  00335E  6EDF               	movwf	indf2,c
 14420                           
 14421                           ;cmd_consol.c: 132: } else {
 14422  003360  0012               	return	
 14423  003362                     l7828:
 14424                           
 14425                           ;cmd_consol.c: 133: *data_column = column;
 14426  003362  C032  FFD9         	movff	collect_column@data_column,fsr2l
 14427  003366  C033  FFDA         	movff	collect_column@data_column+1,fsr2h
 14428  00336A  C037  FFDF         	movff	collect_column@column,indf2
 14429  00336E  0012               	return	
 14430  003370                     __end_of_collect_column:
 14431                           	opt stack 0
 14432                           tblptru	equ	0xFF8
 14433                           tblptrh	equ	0xFF7
 14434                           tblptrl	equ	0xFF6
 14435                           tablat	equ	0xFF5
 14436                           prodh	equ	0xFF4
 14437                           prodl	equ	0xFF3
 14438                           intcon	equ	0xFF2
 14439                           postinc0	equ	0xFEE
 14440                           wreg	equ	0xFE8
 14441                           indf1	equ	0xFE7
 14442                           postinc1	equ	0xFE6
 14443                           postdec1	equ	0xFE5
 14444                           fsr1h	equ	0xFE2
 14445                           fsr1l	equ	0xFE1
 14446                           indf2	equ	0xFDF
 14447                           postinc2	equ	0xFDE
 14448                           postdec2	equ	0xFDD
 14449                           fsr2h	equ	0xFDA
 14450                           fsr2l	equ	0xFD9
 14451                           status	equ	0xFD8
 14452                           
 14453 ;; *************** function _strlen *****************
 14454 ;; Defined at:
 14455 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strlen.c"
 14456 ;; Parameters:    Size  Location     Type
 14457 ;;  s               2   29[COMRAM] PTR const unsigned char 
 14458 ;;		 -> uart_str(150), NULL(0), clcd_display_string_details.string(40), clcd_display_string_details(1100), 
 14459 ;; Auto vars:     Size  Location     Type
 14460 ;;  cp              2   33[COMRAM] PTR const unsigned char 
 14461 ;;		 -> uart_str(150), NULL(0), clcd_display_string_details.string(40), clcd_display_string_details(1100), 
 14462 ;; Return value:  Size  Location     Type
 14463 ;;                  2   29[COMRAM] unsigned int 
 14464 ;; Registers used:
 14465 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14466 ;; Tracked objects:
 14467 ;;		On entry : 0/0
 14468 ;;		On exit  : 0/0
 14469 ;;		Unchanged: 0/0
 14470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14471 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14472 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14473 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14474 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14475 ;;Total ram usage:        6 bytes
 14476 ;; Hardware stack levels used:    1
 14477 ;; Hardware stack levels required when called:    5
 14478 ;; This function calls:
 14479 ;;		Nothing
 14480 ;; This function is called by:
 14481 ;;		_copy_data
 14482 ;;		_copy_display_struct
 14483 ;;		_scroll_off
 14484 ;;		_make_display
 14485 ;;		_collect_row
 14486 ;;		_get_uid
 14487 ;;		_get_str
 14488 ;;		_get_direction
 14489 ;;		_get_dis_frq
 14490 ;;		_get_over_write_data
 14491 ;;		_collect_column
 14492 ;;		_parse_cmd_str
 14493 ;;		_put_string
 14494 ;;		_display_string
 14495 ;; This function uses a non-reentrant model
 14496 ;;
 14497                           
 14498                           	psect	text63
 14499  003DDA                     __ptext63:
 14500                           	opt stack 0
 14501  003DDA                     _strlen:
 14502                           	opt stack 24
 14503                           
 14504                           ;incstack = 0
 14505  003DDA  C01E  F022         	movff	strlen@s,strlen@cp
 14506  003DDE  C01F  F023         	movff	strlen@s+1,strlen@cp+1
 14507  003DE2  D002               	goto	l6746
 14508  003DE4                     l6744:
 14509  003DE4  4A22               	infsnz	strlen@cp,f,c
 14510  003DE6  2A23               	incf	strlen@cp+1,f,c
 14511  003DE8                     l6746:
 14512  003DE8  C022  FFD9         	movff	strlen@cp,fsr2l
 14513  003DEC  C023  FFDA         	movff	strlen@cp+1,fsr2h
 14514  003DF0  50DF               	movf	indf2,w,c
 14515  003DF2  A4D8               	btfss	status,2,c
 14516  003DF4  D7F7               	goto	l6744
 14517  003DF6  C01E  F020         	movff	strlen@s,??_strlen
 14518  003DFA  C01F  F021         	movff	strlen@s+1,??_strlen+1
 14519  003DFE  1E20               	comf	??_strlen,f,c
 14520  003E00  1E21               	comf	??_strlen+1,f,c
 14521  003E02  4A20               	infsnz	??_strlen,f,c
 14522  003E04  2A21               	incf	??_strlen+1,f,c
 14523  003E06  5022               	movf	strlen@cp,w,c
 14524  003E08  2420               	addwf	??_strlen,w,c
 14525  003E0A  6E1E               	movwf	?_strlen,c
 14526  003E0C  5023               	movf	strlen@cp+1,w,c
 14527  003E0E  2021               	addwfc	??_strlen+1,w,c
 14528  003E10  6E1F               	movwf	?_strlen+1,c
 14529  003E12  0012               	return	
 14530  003E14                     __end_of_strlen:
 14531                           	opt stack 0
 14532                           tblptru	equ	0xFF8
 14533                           tblptrh	equ	0xFF7
 14534                           tblptrl	equ	0xFF6
 14535                           tablat	equ	0xFF5
 14536                           prodh	equ	0xFF4
 14537                           prodl	equ	0xFF3
 14538                           intcon	equ	0xFF2
 14539                           postinc0	equ	0xFEE
 14540                           wreg	equ	0xFE8
 14541                           indf1	equ	0xFE7
 14542                           postinc1	equ	0xFE6
 14543                           postdec1	equ	0xFE5
 14544                           fsr1h	equ	0xFE2
 14545                           fsr1l	equ	0xFE1
 14546                           indf2	equ	0xFDF
 14547                           postinc2	equ	0xFDE
 14548                           postdec2	equ	0xFDD
 14549                           fsr2h	equ	0xFDA
 14550                           fsr2l	equ	0xFD9
 14551                           status	equ	0xFD8
 14552                           
 14553 ;; *************** function _printf *****************
 14554 ;; Defined at:
 14555 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14556 ;; Parameters:    Size  Location     Type
 14557 ;;  f               2   29[COMRAM] PTR const unsigned char 
 14558 ;;		 -> STR_137(18), STR_135(5), STR_131(3), STR_130(3), 
 14559 ;;		 -> STR_129(3), STR_128(11), STR_127(11), STR_126(11), 
 14560 ;;		 -> STR_125(11), STR_123(5), STR_120(7), STR_118(7), 
 14561 ;;		 -> STR_116(7), STR_114(13), STR_112(5), STR_109(13), 
 14562 ;;		 -> STR_106(13), STR_103(13), STR_100(13), STR_99(5), 
 14563 ;;		 -> STR_98(11), STR_95(7), STR_92(11), STR_89(11), 
 14564 ;;		 -> STR_86(11), STR_78(25), STR_77(11), STR_75(25), 
 14565 ;;		 -> STR_73(27), STR_71(27), STR_69(10), STR_67(9), 
 14566 ;;		 -> STR_64(25), STR_63(11), STR_61(25), STR_59(27), 
 14567 ;;		 -> STR_57(27), STR_55(12), STR_52(9), STR_50(9), 
 14568 ;;		 -> STR_48(9), STR_45(12), STR_43(12), STR_39(7), 
 14569 ;;		 -> STR_36(8), STR_31(8), STR_30(12), STR_29(12), 
 14570 ;;		 -> STR_28(18), STR_27(19), STR_26(17), STR_25(12), 
 14571 ;;		 -> STR_24(12), STR_23(16), STR_22(16), STR_21(19), 
 14572 ;;		 -> STR_20(3), STR_19(5), STR_18(16), STR_17(39), 
 14573 ;;		 -> STR_16(30), STR_15(15), STR_14(39), STR_13(5), 
 14574 ;;		 -> STR_12(5), STR_11(26), STR_10(26), STR_9(26), 
 14575 ;;		 -> STR_8(26), STR_7(26), STR_6(26), STR_4(17), 
 14576 ;;		 -> STR_3(18), STR_2(9), STR_1(9), 
 14577 ;; Auto vars:     Size  Location     Type
 14578 ;;  tmpval          4    0        struct .
 14579 ;;  val             2   44[COMRAM] unsigned int 
 14580 ;;  ap              2   42[COMRAM] PTR void [1]
 14581 ;;		 -> ?_printf(2), 
 14582 ;;  cp              2   40[COMRAM] PTR const unsigned char 
 14583 ;;		 -> STR_138(7), STR_136(6), uart_str(150), STR_124(13), 
 14584 ;;		 -> STR_121(15), STR_119(12), STR_117(12), STR_115(7), 
 14585 ;;		 -> STR_113(6), STR_110(7), STR_107(8), STR_104(6), 
 14586 ;;		 -> STR_101(6), STR_96(3), STR_93(3), STR_90(3), 
 14587 ;;		 -> STR_87(3), cmd_data.data(40), CMD(15), NULL(0), 
 14588 ;;		 -> cmd_data(53), STR_5(5), 
 14589 ;;  len             2    0        unsigned int 
 14590 ;;  c               1   46[COMRAM] char 
 14591 ;;  prec            1   39[COMRAM] char 
 14592 ;;  flag            1   38[COMRAM] unsigned char 
 14593 ;; Return value:  Size  Location     Type
 14594 ;;                  2   29[COMRAM] int 
 14595 ;; Registers used:
 14596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14597 ;; Tracked objects:
 14598 ;;		On entry : 0/0
 14599 ;;		On exit  : 0/0
 14600 ;;		Unchanged: 0/0
 14601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14602 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14603 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14605 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14606 ;;Total ram usage:       18 bytes
 14607 ;; Hardware stack levels used:    1
 14608 ;; Hardware stack levels required when called:    7
 14609 ;; This function calls:
 14610 ;;		___lwdiv
 14611 ;;		___lwmod
 14612 ;;		_putch
 14613 ;; This function is called by:
 14614 ;;		_init_clcd_cusotom_lcd
 14615 ;;		_copy_data
 14616 ;;		_conflict_check
 14617 ;;		_conflict
 14618 ;;		_copy_display_struct
 14619 ;;		_print_conflict_ids
 14620 ;;		_set_string_data
 14621 ;;		_update_string_data
 14622 ;;		_clcd_display_string_config
 14623 ;;		_collect_row
 14624 ;;		_get_direction
 14625 ;;		_get_dis_frq
 14626 ;;		_get_over_write_data
 14627 ;;		_collect_column
 14628 ;;		_parse_cmd_str
 14629 ;;		_reply_to_host
 14630 ;;		_cmd_consol_task
 14631 ;;		_main
 14632 ;;		_display_string
 14633 ;; This function uses a non-reentrant model
 14634 ;;
 14635                           
 14636                           	psect	text64
 14637  002A06                     __ptext64:
 14638                           	opt stack 0
 14639  002A06                     _printf:
 14640                           	opt stack 23
 14641                           
 14642                           ;doprnt.c: 466: va_list ap;
 14643                           ;doprnt.c: 499: signed char c;
 14644                           ;doprnt.c: 506: signed char prec;
 14645                           ;doprnt.c: 508: unsigned char flag;
 14646                           ;doprnt.c: 523: union {
 14647                           ;doprnt.c: 524: unsigned long vd;
 14648                           ;doprnt.c: 525: double integ;
 14649                           ;doprnt.c: 526: } tmpval;
 14650                           ;doprnt.c: 528: unsigned int val;
 14651                           ;doprnt.c: 529: unsigned len;
 14652                           ;doprnt.c: 530: const char * cp;
 14653                           ;doprnt.c: 533: *ap = __va_start();
 14654                           
 14655                           ;incstack = 0
 14656  002A06  0E20               	movlw	low (?_printf+2)
 14657  002A08  6E2B               	movwf	printf@ap,c
 14658  002A0A  0E00               	movlw	high (?_printf+2)
 14659  002A0C  6E2C               	movwf	printf@ap+1,c
 14660                           
 14661                           ;doprnt.c: 536: while(c = *f++) {
 14662  002A0E  D0D9               	goto	l6740
 14663  002A10                     l6674:
 14664                           
 14665                           ;doprnt.c: 538: if(c != '%')
 14666  002A10  0E25               	movlw	37
 14667  002A12  182F               	xorwf	printf@c,w,c
 14668  002A14  B4D8               	btfsc	status,2,c
 14669  002A16  D004               	goto	l6678
 14670                           
 14671                           ;doprnt.c: 540: {
 14672                           ;doprnt.c: 541: (putch(c) );
 14673  002A18  502F               	movf	printf@c,w,c
 14674  002A1A  EC12  F021         	call	_putch
 14675                           
 14676                           ;doprnt.c: 542: continue;
 14677  002A1E  D0D1               	goto	l6740
 14678  002A20                     l6678:
 14679                           
 14680                           ;doprnt.c: 543: }
 14681                           ;doprnt.c: 548: flag = 0;
 14682  002A20  0E00               	movlw	0
 14683  002A22  6E27               	movwf	printf@flag,c
 14684                           
 14685                           ;doprnt.c: 635: switch(c = *f++) {
 14686  002A24  D04D               	goto	l6702
 14687  002A26                     l6680:
 14688                           
 14689                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14690  002A26  C02B  FFD9         	movff	printf@ap,fsr2l
 14691  002A2A  C02C  FFDA         	movff	printf@ap+1,fsr2h
 14692  002A2E  CFDE F029          	movff	postinc2,printf@cp
 14693  002A32  CFDD F02A          	movff	postdec2,printf@cp+1
 14694  002A36  0E02               	movlw	2
 14695  002A38  262B               	addwf	printf@ap,f,c
 14696  002A3A  0E00               	movlw	0
 14697  002A3C  222C               	addwfc	printf@ap+1,f,c
 14698                           
 14699                           ;doprnt.c: 740: if(!cp)
 14700  002A3E  5029               	movf	printf@cp,w,c
 14701  002A40  102A               	iorwf	printf@cp+1,w,c
 14702  002A42  A4D8               	btfss	status,2,c
 14703  002A44  D01A               	goto	l6692
 14704                           
 14705                           ;doprnt.c: 741: cp = "(null)";
 14706  002A46  0E92               	movlw	low STR_138
 14707  002A48  6E29               	movwf	printf@cp,c
 14708  002A4A  0EFF               	movlw	high STR_138
 14709  002A4C  6E2A               	movwf	printf@cp+1,c
 14710                           
 14711                           ;doprnt.c: 777: while(*cp)
 14712  002A4E  D015               	goto	l6692
 14713  002A50                     l6688:
 14714                           
 14715                           ;doprnt.c: 778: (putch(*cp++) );
 14716  002A50  C029  FFF6         	movff	printf@cp,tblptrl
 14717  002A54  C02A  FFF7         	movff	printf@cp+1,tblptrh
 14718  002A58  0E00               	movlw	low (__mediumconst shr (0+16))
 14719  002A5A  6EF8               	movwf	tblptru,c
 14720  002A5C  0E0F               	movlw	(high __ramtop+-1)
 14721  002A5E  64F7               	cpfsgt	tblptrh,c
 14722  002A60  D003               	bra	u5947
 14723  002A62  0008               	tblrd		*
 14724  002A64  50F5               	movf	tablat,w,c
 14725  002A66  D005               	bra	u5940
 14726  002A68                     u5947:
 14727  002A68  CFF6 FFE9          	movff	tblptrl,fsr0l
 14728  002A6C  CFF7 FFEA          	movff	tblptrh,fsr0h
 14729  002A70  50EF               	movf	indf0,w,c
 14730  002A72                     u5940:
 14731  002A72  EC12  F021         	call	_putch
 14732  002A76  4A29               	infsnz	printf@cp,f,c
 14733  002A78  2A2A               	incf	printf@cp+1,f,c
 14734  002A7A                     l6692:
 14735  002A7A  C029  FFF6         	movff	printf@cp,tblptrl
 14736  002A7E  C02A  FFF7         	movff	printf@cp+1,tblptrh
 14737  002A82  0E00               	movlw	low (__mediumconst shr (0+16))
 14738  002A84  6EF8               	movwf	tblptru,c
 14739  002A86  0E0F               	movlw	(high __ramtop+-1)
 14740  002A88  64F7               	cpfsgt	tblptrh,c
 14741  002A8A  D003               	bra	u5957
 14742  002A8C  0008               	tblrd		*
 14743  002A8E  50F5               	movf	tablat,w,c
 14744  002A90  D005               	bra	u5950
 14745  002A92                     u5957:
 14746  002A92  CFF6 FFE9          	movff	tblptrl,fsr0l
 14747  002A96  CFF7 FFEA          	movff	tblptrh,fsr0h
 14748  002A9A  50EF               	movf	indf0,w,c
 14749  002A9C                     u5950:
 14750  002A9C  0900               	iorlw	0
 14751  002A9E  B4D8               	btfsc	status,2,c
 14752  002AA0  D090               	goto	l6740
 14753  002AA2  D7D6               	goto	l6688
 14754  002AA4                     l6694:
 14755                           
 14756                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 14757  002AA4  C02B  FFD9         	movff	printf@ap,fsr2l
 14758  002AA8  C02C  FFDA         	movff	printf@ap+1,fsr2h
 14759  002AAC  50DF               	movf	indf2,w,c
 14760  002AAE  6E2F               	movwf	printf@c,c
 14761  002AB0  0E02               	movlw	2
 14762  002AB2  262B               	addwf	printf@ap,f,c
 14763  002AB4  0E00               	movlw	0
 14764  002AB6  222C               	addwfc	printf@ap+1,f,c
 14765  002AB8                     l6698:
 14766                           
 14767                           ;doprnt.c: 809: (putch(c) );
 14768  002AB8  502F               	movf	printf@c,w,c
 14769  002ABA  EC12  F021         	call	_putch
 14770                           
 14771                           ;doprnt.c: 810: continue;
 14772  002ABE  D081               	goto	l6740
 14773  002AC0                     l6702:
 14774  002AC0  C01E  FFF6         	movff	printf@f,tblptrl
 14775  002AC4  C01F  FFF7         	movff	printf@f+1,tblptrh
 14776  002AC8  4A1E               	infsnz	printf@f,f,c
 14777  002ACA  2A1F               	incf	printf@f+1,f,c
 14778  002ACC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14779  002ACC  6AF8               	clrf	tblptru,c
 14780  002ACE                     	endif
 14781  002ACE                     	if	0	;tblptru may be non-zero
 14782  002ACE                     	endif
 14783  002ACE  0008               	tblrd		*
 14784  002AD0  CFF5 F02F          	movff	tablat,printf@c
 14785  002AD4  502F               	movf	printf@c,w,c
 14786                           
 14787                           ; Switch size 1, requested type "space"
 14788                           ; Number of cases is 5, Range of values is 0 to 115
 14789                           ; switch strategies available:
 14790                           ; Name         Instructions Cycles
 14791                           ; simple_byte           16     9 (average)
 14792                           ;	Chosen strategy is simple_byte
 14793  002AD6  0A00               	xorlw	0	; case 0
 14794  002AD8  B4D8               	btfsc	status,2,c
 14795  002ADA  0012               	return	
 14796  002ADC  0A63               	xorlw	99	; case 99
 14797  002ADE  B4D8               	btfsc	status,2,c
 14798  002AE0  D7E1               	goto	l6694
 14799  002AE2  0A07               	xorlw	7	; case 100
 14800  002AE4  B4D8               	btfsc	status,2,c
 14801  002AE6  D007               	goto	l6704
 14802  002AE8  0A0D               	xorlw	13	; case 105
 14803  002AEA  B4D8               	btfsc	status,2,c
 14804  002AEC  D004               	goto	l6704
 14805  002AEE  0A1A               	xorlw	26	; case 115
 14806  002AF0  B4D8               	btfsc	status,2,c
 14807  002AF2  D799               	goto	l6680
 14808  002AF4  D7E1               	goto	l6698
 14809  002AF6                     l6704:
 14810                           
 14811                           ;doprnt.c: 1253: {
 14812                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14813  002AF6  C02B  FFD9         	movff	printf@ap,fsr2l
 14814  002AFA  C02C  FFDA         	movff	printf@ap+1,fsr2h
 14815  002AFE  CFDE F02D          	movff	postinc2,printf@val
 14816  002B02  CFDD F02E          	movff	postdec2,printf@val+1
 14817  002B06  0E02               	movlw	2
 14818  002B08  262B               	addwf	printf@ap,f,c
 14819  002B0A  0E00               	movlw	0
 14820  002B0C  222C               	addwfc	printf@ap+1,f,c
 14821                           
 14822                           ;doprnt.c: 1261: if((int)val < 0) {
 14823  002B0E  AE2E               	btfss	printf@val+1,7,c
 14824  002B10  D006               	goto	l6714
 14825                           
 14826                           ;doprnt.c: 1262: flag |= 0x03;
 14827  002B12  0E03               	movlw	3
 14828  002B14  1227               	iorwf	printf@flag,f,c
 14829                           
 14830                           ;doprnt.c: 1263: val = -val;
 14831  002B16  6C2D               	negf	printf@val,c
 14832  002B18  1E2E               	comf	printf@val+1,f,c
 14833  002B1A  B0D8               	btfsc	status,0,c
 14834  002B1C  2A2E               	incf	printf@val+1,f,c
 14835  002B1E                     l6714:
 14836                           
 14837                           ;doprnt.c: 1264: }
 14838                           ;doprnt.c: 1266: }
 14839                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14840  002B1E  0E01               	movlw	1
 14841  002B20  6E2F               	movwf	printf@c,c
 14842  002B22                     l6716:
 14843  002B22  0E05               	movlw	5
 14844  002B24  182F               	xorwf	printf@c,w,c
 14845  002B26  B4D8               	btfsc	status,2,c
 14846  002B28  D015               	goto	l6728
 14847                           
 14848                           ;doprnt.c: 1306: if(val < dpowers[c])
 14849  002B2A  502F               	movf	printf@c,w,c
 14850  002B2C  0D02               	mullw	2
 14851  002B2E  0E79               	movlw	low _dpowers
 14852  002B30  24F3               	addwf	prodl,w,c
 14853  002B32  6EF6               	movwf	tblptrl,c
 14854  002B34  0EFC               	movlw	high _dpowers
 14855  002B36  20F4               	addwfc	prodh,w,c
 14856  002B38  6EF7               	movwf	tblptrh,c
 14857  002B3A                     	if	1	;There are 3 active tblptr bytes
 14858  002B3A  6AF8               	clrf	tblptru,c
 14859  002B3C  0E00               	movlw	low (__mediumconst shr (0+16))
 14860  002B3E  22F8               	addwfc	tblptru,f,c
 14861  002B40                     	endif
 14862  002B40  0009               	tblrd		*+
 14863  002B42  50F5               	movf	tablat,w,c
 14864  002B44  5C2D               	subwf	printf@val,w,c
 14865  002B46  0009               	tblrd		*+
 14866  002B48  50F5               	movf	tablat,w,c
 14867  002B4A  582E               	subwfb	printf@val+1,w,c
 14868  002B4C  A0D8               	btfss	status,0,c
 14869  002B4E  D002               	goto	l6728
 14870                           
 14871                           ;doprnt.c: 1307: break;
 14872  002B50  2A2F               	incf	printf@c,f,c
 14873  002B52  D7E7               	goto	l6716
 14874  002B54                     l6728:
 14875                           
 14876                           ;doprnt.c: 1422: {
 14877                           ;doprnt.c: 1438: if(flag & 0x03)
 14878  002B54  C027  F026         	movff	printf@flag,??_printf
 14879  002B58  0E03               	movlw	3
 14880  002B5A  1626               	andwf	??_printf,f,c
 14881  002B5C  B4D8               	btfsc	status,2,c
 14882  002B5E  D003               	goto	l6732
 14883                           
 14884                           ;doprnt.c: 1439: (putch('-') );
 14885  002B60  0E2D               	movlw	45
 14886  002B62  EC12  F021         	call	_putch
 14887  002B66                     l6732:
 14888                           
 14889                           ;doprnt.c: 1469: }
 14890                           ;doprnt.c: 1472: prec = c;
 14891  002B66  C02F  F028         	movff	printf@c,printf@prec
 14892                           
 14893                           ;doprnt.c: 1474: while(prec--) {
 14894  002B6A  D027               	goto	l6738
 14895  002B6C                     l6734:
 14896                           
 14897                           ;doprnt.c: 1478: {
 14898                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14899  002B6C  5028               	movf	printf@prec,w,c
 14900  002B6E  0D02               	mullw	2
 14901  002B70  0E79               	movlw	low _dpowers
 14902  002B72  24F3               	addwf	prodl,w,c
 14903  002B74  6EF6               	movwf	tblptrl,c
 14904  002B76  0EFC               	movlw	high _dpowers
 14905  002B78  20F4               	addwfc	prodh,w,c
 14906  002B7A  6EF7               	movwf	tblptrh,c
 14907  002B7C                     	if	1	;There are 3 active tblptr bytes
 14908  002B7C  6AF8               	clrf	tblptru,c
 14909  002B7E  0E00               	movlw	low (__mediumconst shr (0+16))
 14910  002B80  22F8               	addwfc	tblptru,f,c
 14911  002B82                     	endif
 14912  002B82  0009               	tblrd		*+
 14913  002B84  CFF5 F012          	movff	tablat,___lwdiv@divisor
 14914  002B88  000A               	tblrd		*-
 14915  002B8A  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
 14916  002B8E  C02D  F010         	movff	printf@val,___lwdiv@dividend
 14917  002B92  C02E  F011         	movff	printf@val+1,___lwdiv@dividend+1
 14918  002B96  EC46  F01D         	call	___lwdiv	;wreg free
 14919  002B9A  C010  F017         	movff	?___lwdiv,___lwmod@dividend
 14920  002B9E  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
 14921  002BA2  0E00               	movlw	0
 14922  002BA4  6E1A               	movwf	___lwmod@divisor+1,c
 14923  002BA6  0E0A               	movlw	10
 14924  002BA8  6E19               	movwf	___lwmod@divisor,c
 14925  002BAA  EC50  F01E         	call	___lwmod	;wreg free
 14926  002BAE  5017               	movf	?___lwmod,w,c
 14927  002BB0  0F30               	addlw	48
 14928  002BB2  6E2F               	movwf	printf@c,c
 14929                           
 14930                           ;doprnt.c: 1523: }
 14931                           ;doprnt.c: 1524: (putch(c) );
 14932  002BB4  502F               	movf	printf@c,w,c
 14933  002BB6  EC12  F021         	call	_putch
 14934  002BBA                     l6738:
 14935  002BBA  0628               	decf	printf@prec,f,c
 14936  002BBC  2828               	incf	printf@prec,w,c
 14937  002BBE  A4D8               	btfss	status,2,c
 14938  002BC0  D7D5               	goto	l6734
 14939  002BC2                     l6740:
 14940  002BC2  C01E  FFF6         	movff	printf@f,tblptrl
 14941  002BC6  C01F  FFF7         	movff	printf@f+1,tblptrh
 14942  002BCA  4A1E               	infsnz	printf@f,f,c
 14943  002BCC  2A1F               	incf	printf@f+1,f,c
 14944  002BCE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14945  002BCE  6AF8               	clrf	tblptru,c
 14946  002BD0                     	endif
 14947  002BD0                     	if	0	;tblptru may be non-zero
 14948  002BD0                     	endif
 14949  002BD0  0008               	tblrd		*
 14950  002BD2  CFF5 F02F          	movff	tablat,printf@c
 14951  002BD6  502F               	movf	printf@c,w,c
 14952  002BD8  B4D8               	btfsc	status,2,c
 14953  002BDA  0012               	return	
 14954  002BDC  D719               	goto	l6674
 14955  002BDE                     __end_of_printf:
 14956                           	opt stack 0
 14957                           tblptru	equ	0xFF8
 14958                           tblptrh	equ	0xFF7
 14959                           tblptrl	equ	0xFF6
 14960                           tablat	equ	0xFF5
 14961                           prodh	equ	0xFF4
 14962                           prodl	equ	0xFF3
 14963                           intcon	equ	0xFF2
 14964                           indf0	equ	0xFEF
 14965                           postinc0	equ	0xFEE
 14966                           fsr0h	equ	0xFEA
 14967                           fsr0l	equ	0xFE9
 14968                           wreg	equ	0xFE8
 14969                           indf1	equ	0xFE7
 14970                           postinc1	equ	0xFE6
 14971                           postdec1	equ	0xFE5
 14972                           fsr1h	equ	0xFE2
 14973                           fsr1l	equ	0xFE1
 14974                           indf2	equ	0xFDF
 14975                           postinc2	equ	0xFDE
 14976                           postdec2	equ	0xFDD
 14977                           fsr2h	equ	0xFDA
 14978                           fsr2l	equ	0xFD9
 14979                           status	equ	0xFD8
 14980                           
 14981 ;; *************** function _putch *****************
 14982 ;; Defined at:
 14983 ;;		line 160 in file "mcc_generated_files/eusart1.c"
 14984 ;; Parameters:    Size  Location     Type
 14985 ;;  txData          1    wreg     unsigned char 
 14986 ;; Auto vars:     Size  Location     Type
 14987 ;;  txData          1   16[COMRAM] unsigned char 
 14988 ;; Return value:  Size  Location     Type
 14989 ;;                  1    wreg      void 
 14990 ;; Registers used:
 14991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14992 ;; Tracked objects:
 14993 ;;		On entry : 0/0
 14994 ;;		On exit  : 0/0
 14995 ;;		Unchanged: 0/0
 14996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14998 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15000 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15001 ;;Total ram usage:        1 bytes
 15002 ;; Hardware stack levels used:    1
 15003 ;; Hardware stack levels required when called:    6
 15004 ;; This function calls:
 15005 ;;		_EUSART1_Write
 15006 ;; This function is called by:
 15007 ;;		_printf
 15008 ;;		_puts
 15009 ;;		_cputs
 15010 ;; This function uses a non-reentrant model
 15011 ;;
 15012                           
 15013                           	psect	text65
 15014  004224                     __ptext65:
 15015                           	opt stack 0
 15016  004224                     _putch:
 15017                           	opt stack 23
 15018                           
 15019                           ;incstack = 0
 15020                           ;putch@txData stored from wreg
 15021  004224  6E11               	movwf	putch@txData,c
 15022                           
 15023                           ;eusart1.c: 162: EUSART1_Write(txData);
 15024  004226  5011               	movf	putch@txData,w,c
 15025  004228  ECB1  F01E         	call	_EUSART1_Write
 15026  00422C  0012               	return		;funcret
 15027  00422E                     __end_of_putch:
 15028                           	opt stack 0
 15029                           tblptru	equ	0xFF8
 15030                           tblptrh	equ	0xFF7
 15031                           tblptrl	equ	0xFF6
 15032                           tablat	equ	0xFF5
 15033                           prodh	equ	0xFF4
 15034                           prodl	equ	0xFF3
 15035                           intcon	equ	0xFF2
 15036                           indf0	equ	0xFEF
 15037                           postinc0	equ	0xFEE
 15038                           fsr0h	equ	0xFEA
 15039                           fsr0l	equ	0xFE9
 15040                           wreg	equ	0xFE8
 15041                           indf1	equ	0xFE7
 15042                           postinc1	equ	0xFE6
 15043                           postdec1	equ	0xFE5
 15044                           fsr1h	equ	0xFE2
 15045                           fsr1l	equ	0xFE1
 15046                           indf2	equ	0xFDF
 15047                           postinc2	equ	0xFDE
 15048                           postdec2	equ	0xFDD
 15049                           fsr2h	equ	0xFDA
 15050                           fsr2l	equ	0xFD9
 15051                           status	equ	0xFD8
 15052                           
 15053 ;; *************** function _EUSART1_Write *****************
 15054 ;; Defined at:
 15055 ;;		line 132 in file "mcc_generated_files/eusart1.c"
 15056 ;; Parameters:    Size  Location     Type
 15057 ;;  txData          1    wreg     unsigned char 
 15058 ;; Auto vars:     Size  Location     Type
 15059 ;;  txData          1   15[COMRAM] unsigned char 
 15060 ;; Return value:  Size  Location     Type
 15061 ;;                  1    wreg      void 
 15062 ;; Registers used:
 15063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15064 ;; Tracked objects:
 15065 ;;		On entry : 0/0
 15066 ;;		On exit  : 0/0
 15067 ;;		Unchanged: 0/0
 15068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15072 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15073 ;;Total ram usage:        1 bytes
 15074 ;; Hardware stack levels used:    1
 15075 ;; Hardware stack levels required when called:    5
 15076 ;; This function calls:
 15077 ;;		Nothing
 15078 ;; This function is called by:
 15079 ;;		_putch
 15080 ;; This function uses a non-reentrant model
 15081 ;;
 15082                           
 15083                           	psect	text66
 15084  003D62                     __ptext66:
 15085                           	opt stack 0
 15086  003D62                     _EUSART1_Write:
 15087                           	opt stack 23
 15088                           
 15089                           ;incstack = 0
 15090                           ;EUSART1_Write@txData stored from wreg
 15091  003D62  6E10               	movwf	EUSART1_Write@txData,c
 15092  003D64                     l6558:
 15093  003D64  0100               	movlb	0	; () banked
 15094  003D66  51F8               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 15095  003D68  B4D8               	btfsc	status,2,c
 15096  003D6A  D7FC               	goto	l6558
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;eusart1.c: 136: }
 15100                           ;eusart1.c: 138: if(0 == PIE1bits.TX1IE)
 15101  003D6C  B89D               	btfsc	3997,4,c	;volatile
 15102  003D6E  D003               	goto	l193
 15103                           
 15104                           ; BSR set to: 0
 15105                           ;eusart1.c: 139: {
 15106                           ;eusart1.c: 140: TXREG1 = txData;
 15107  003D70  C010  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 15108                           
 15109                           ;eusart1.c: 141: }
 15110  003D74  D013               	goto	l6572
 15111  003D76                     l193:
 15112                           
 15113                           ; BSR set to: 0
 15114                           ;eusart1.c: 142: else
 15115                           ;eusart1.c: 143: {
 15116                           ;eusart1.c: 144: PIE1bits.TX1IE = 0;
 15117  003D76  989D               	bcf	3997,4,c	;volatile
 15118                           
 15119                           ; BSR set to: 0
 15120                           ;eusart1.c: 145: eusart1TxBuffer[eusart1TxHead++] = txData;
 15121  003D78  5047               	movf	_eusart1TxHead,w,c	;volatile
 15122  003D7A  0D01               	mullw	1
 15123  003D7C  0E68               	movlw	low _eusart1TxBuffer
 15124  003D7E  24F3               	addwf	prodl,w,c
 15125  003D80  6ED9               	movwf	fsr2l,c
 15126  003D82  0E00               	movlw	high _eusart1TxBuffer
 15127  003D84  20F4               	addwfc	prodh,w,c
 15128  003D86  6EDA               	movwf	fsr2h,c
 15129  003D88  C010  FFDF         	movff	EUSART1_Write@txData,indf2
 15130                           
 15131                           ; BSR set to: 0
 15132  003D8C  2A47               	incf	_eusart1TxHead,f,c	;volatile
 15133                           
 15134                           ; BSR set to: 0
 15135                           ;eusart1.c: 146: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 15136  003D8E  0E07               	movlw	7
 15137  003D90  6447               	cpfsgt	_eusart1TxHead,c	;volatile
 15138  003D92  D002               	goto	l6570
 15139                           
 15140                           ; BSR set to: 0
 15141                           ;eusart1.c: 147: {
 15142                           ;eusart1.c: 148: eusart1TxHead = 0;
 15143  003D94  0E00               	movlw	0
 15144  003D96  6E47               	movwf	_eusart1TxHead,c	;volatile
 15145  003D98                     l6570:
 15146                           
 15147                           ; BSR set to: 0
 15148                           ;eusart1.c: 149: }
 15149                           ;eusart1.c: 150: eusart1TxBufferRemaining--;
 15150  003D98  0100               	movlb	0	; () banked
 15151  003D9A  07F8               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 15152  003D9C                     l6572:
 15153                           
 15154                           ; BSR set to: 0
 15155                           ;eusart1.c: 151: }
 15156                           ;eusart1.c: 152: PIE1bits.TX1IE = 1;
 15157  003D9C  889D               	bsf	3997,4,c	;volatile
 15158                           
 15159                           ; BSR set to: 0
 15160  003D9E  0012               	return		;funcret
 15161  003DA0                     __end_of_EUSART1_Write:
 15162                           	opt stack 0
 15163                           tblptru	equ	0xFF8
 15164                           tblptrh	equ	0xFF7
 15165                           tblptrl	equ	0xFF6
 15166                           tablat	equ	0xFF5
 15167                           prodh	equ	0xFF4
 15168                           prodl	equ	0xFF3
 15169                           intcon	equ	0xFF2
 15170                           indf0	equ	0xFEF
 15171                           postinc0	equ	0xFEE
 15172                           fsr0h	equ	0xFEA
 15173                           fsr0l	equ	0xFE9
 15174                           wreg	equ	0xFE8
 15175                           indf1	equ	0xFE7
 15176                           postinc1	equ	0xFE6
 15177                           postdec1	equ	0xFE5
 15178                           fsr1h	equ	0xFE2
 15179                           fsr1l	equ	0xFE1
 15180                           indf2	equ	0xFDF
 15181                           postinc2	equ	0xFDE
 15182                           postdec2	equ	0xFDD
 15183                           fsr2h	equ	0xFDA
 15184                           fsr2l	equ	0xFD9
 15185                           status	equ	0xFD8
 15186                           
 15187 ;; *************** function ___lwmod *****************
 15188 ;; Defined at:
 15189 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 15190 ;; Parameters:    Size  Location     Type
 15191 ;;  dividend        2   22[COMRAM] unsigned int 
 15192 ;;  divisor         2   24[COMRAM] unsigned int 
 15193 ;; Auto vars:     Size  Location     Type
 15194 ;;  counter         1   26[COMRAM] unsigned char 
 15195 ;; Return value:  Size  Location     Type
 15196 ;;                  2   22[COMRAM] unsigned int 
 15197 ;; Registers used:
 15198 ;;		wreg, status,2, status,0
 15199 ;; Tracked objects:
 15200 ;;		On entry : 0/0
 15201 ;;		On exit  : 0/0
 15202 ;;		Unchanged: 0/0
 15203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15204 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15205 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15207 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15208 ;;Total ram usage:        5 bytes
 15209 ;; Hardware stack levels used:    1
 15210 ;; Hardware stack levels required when called:    5
 15211 ;; This function calls:
 15212 ;;		Nothing
 15213 ;; This function is called by:
 15214 ;;		_printf
 15215 ;; This function uses a non-reentrant model
 15216 ;;
 15217                           
 15218                           	psect	text67
 15219  003CA0                     __ptext67:
 15220                           	opt stack 0
 15221  003CA0                     ___lwmod:
 15222                           	opt stack 24
 15223                           
 15224                           ; BSR set to: 0
 15225                           ;incstack = 0
 15226  003CA0  5019               	movf	___lwmod@divisor,w,c
 15227  003CA2  101A               	iorwf	___lwmod@divisor+1,w,c
 15228  003CA4  B4D8               	btfsc	status,2,c
 15229  003CA6  D018               	goto	l1570
 15230  003CA8  0E01               	movlw	1
 15231  003CAA  6E1B               	movwf	___lwmod@counter,c
 15232  003CAC  D004               	goto	l6648
 15233  003CAE                     l6646:
 15234  003CAE  90D8               	bcf	status,0,c
 15235  003CB0  3619               	rlcf	___lwmod@divisor,f,c
 15236  003CB2  361A               	rlcf	___lwmod@divisor+1,f,c
 15237  003CB4  2A1B               	incf	___lwmod@counter,f,c
 15238  003CB6                     l6648:
 15239  003CB6  AE1A               	btfss	___lwmod@divisor+1,7,c
 15240  003CB8  D7FA               	goto	l6646
 15241  003CBA                     l6650:
 15242  003CBA  5019               	movf	___lwmod@divisor,w,c
 15243  003CBC  5C17               	subwf	___lwmod@dividend,w,c
 15244  003CBE  501A               	movf	___lwmod@divisor+1,w,c
 15245  003CC0  5818               	subwfb	___lwmod@dividend+1,w,c
 15246  003CC2  A0D8               	btfss	status,0,c
 15247  003CC4  D004               	goto	l6654
 15248  003CC6  5019               	movf	___lwmod@divisor,w,c
 15249  003CC8  5E17               	subwf	___lwmod@dividend,f,c
 15250  003CCA  501A               	movf	___lwmod@divisor+1,w,c
 15251  003CCC  5A18               	subwfb	___lwmod@dividend+1,f,c
 15252  003CCE                     l6654:
 15253  003CCE  90D8               	bcf	status,0,c
 15254  003CD0  321A               	rrcf	___lwmod@divisor+1,f,c
 15255  003CD2  3219               	rrcf	___lwmod@divisor,f,c
 15256  003CD4  2E1B               	decfsz	___lwmod@counter,f,c
 15257  003CD6  D7F1               	goto	l6650
 15258  003CD8                     l1570:
 15259  003CD8  C017  F017         	movff	___lwmod@dividend,?___lwmod
 15260  003CDC  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
 15261  003CE0  0012               	return		;funcret
 15262  003CE2                     __end_of___lwmod:
 15263                           	opt stack 0
 15264                           tblptru	equ	0xFF8
 15265                           tblptrh	equ	0xFF7
 15266                           tblptrl	equ	0xFF6
 15267                           tablat	equ	0xFF5
 15268                           prodh	equ	0xFF4
 15269                           prodl	equ	0xFF3
 15270                           intcon	equ	0xFF2
 15271                           indf0	equ	0xFEF
 15272                           postinc0	equ	0xFEE
 15273                           fsr0h	equ	0xFEA
 15274                           fsr0l	equ	0xFE9
 15275                           wreg	equ	0xFE8
 15276                           indf1	equ	0xFE7
 15277                           postinc1	equ	0xFE6
 15278                           postdec1	equ	0xFE5
 15279                           fsr1h	equ	0xFE2
 15280                           fsr1l	equ	0xFE1
 15281                           indf2	equ	0xFDF
 15282                           postinc2	equ	0xFDE
 15283                           postdec2	equ	0xFDD
 15284                           fsr2h	equ	0xFDA
 15285                           fsr2l	equ	0xFD9
 15286                           status	equ	0xFD8
 15287                           
 15288 ;; *************** function ___lwdiv *****************
 15289 ;; Defined at:
 15290 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 15291 ;; Parameters:    Size  Location     Type
 15292 ;;  dividend        2   15[COMRAM] unsigned int 
 15293 ;;  divisor         2   17[COMRAM] unsigned int 
 15294 ;; Auto vars:     Size  Location     Type
 15295 ;;  quotient        2   20[COMRAM] unsigned int 
 15296 ;;  counter         1   19[COMRAM] unsigned char 
 15297 ;; Return value:  Size  Location     Type
 15298 ;;                  2   15[COMRAM] unsigned int 
 15299 ;; Registers used:
 15300 ;;		wreg, status,2, status,0
 15301 ;; Tracked objects:
 15302 ;;		On entry : 0/0
 15303 ;;		On exit  : 0/0
 15304 ;;		Unchanged: 0/0
 15305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15306 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15307 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15309 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15310 ;;Total ram usage:        7 bytes
 15311 ;; Hardware stack levels used:    1
 15312 ;; Hardware stack levels required when called:    5
 15313 ;; This function calls:
 15314 ;;		Nothing
 15315 ;; This function is called by:
 15316 ;;		_printf
 15317 ;; This function uses a non-reentrant model
 15318 ;;
 15319                           
 15320                           	psect	text68
 15321  003A8C                     __ptext68:
 15322                           	opt stack 0
 15323  003A8C                     ___lwdiv:
 15324                           	opt stack 24
 15325                           
 15326                           ;incstack = 0
 15327  003A8C  0E00               	movlw	0
 15328  003A8E  6E16               	movwf	___lwdiv@quotient+1,c
 15329  003A90  0E00               	movlw	0
 15330  003A92  6E15               	movwf	___lwdiv@quotient,c
 15331  003A94  5012               	movf	___lwdiv@divisor,w,c
 15332  003A96  1013               	iorwf	___lwdiv@divisor+1,w,c
 15333  003A98  B4D8               	btfsc	status,2,c
 15334  003A9A  D01C               	goto	l1560
 15335  003A9C  0E01               	movlw	1
 15336  003A9E  6E14               	movwf	___lwdiv@counter,c
 15337  003AA0  D004               	goto	l6628
 15338  003AA2                     l6626:
 15339  003AA2  90D8               	bcf	status,0,c
 15340  003AA4  3612               	rlcf	___lwdiv@divisor,f,c
 15341  003AA6  3613               	rlcf	___lwdiv@divisor+1,f,c
 15342  003AA8  2A14               	incf	___lwdiv@counter,f,c
 15343  003AAA                     l6628:
 15344  003AAA  AE13               	btfss	___lwdiv@divisor+1,7,c
 15345  003AAC  D7FA               	goto	l6626
 15346  003AAE                     l6630:
 15347  003AAE  90D8               	bcf	status,0,c
 15348  003AB0  3615               	rlcf	___lwdiv@quotient,f,c
 15349  003AB2  3616               	rlcf	___lwdiv@quotient+1,f,c
 15350  003AB4  5012               	movf	___lwdiv@divisor,w,c
 15351  003AB6  5C10               	subwf	___lwdiv@dividend,w,c
 15352  003AB8  5013               	movf	___lwdiv@divisor+1,w,c
 15353  003ABA  5811               	subwfb	___lwdiv@dividend+1,w,c
 15354  003ABC  A0D8               	btfss	status,0,c
 15355  003ABE  D005               	goto	l6638
 15356  003AC0  5012               	movf	___lwdiv@divisor,w,c
 15357  003AC2  5E10               	subwf	___lwdiv@dividend,f,c
 15358  003AC4  5013               	movf	___lwdiv@divisor+1,w,c
 15359  003AC6  5A11               	subwfb	___lwdiv@dividend+1,f,c
 15360  003AC8  8015               	bsf	___lwdiv@quotient,0,c
 15361  003ACA                     l6638:
 15362  003ACA  90D8               	bcf	status,0,c
 15363  003ACC  3213               	rrcf	___lwdiv@divisor+1,f,c
 15364  003ACE  3212               	rrcf	___lwdiv@divisor,f,c
 15365  003AD0  2E14               	decfsz	___lwdiv@counter,f,c
 15366  003AD2  D7ED               	goto	l6630
 15367  003AD4                     l1560:
 15368  003AD4  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
 15369  003AD8  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15370  003ADC  0012               	return		;funcret
 15371  003ADE                     __end_of___lwdiv:
 15372                           	opt stack 0
 15373                           tblptru	equ	0xFF8
 15374                           tblptrh	equ	0xFF7
 15375                           tblptrl	equ	0xFF6
 15376                           tablat	equ	0xFF5
 15377                           prodh	equ	0xFF4
 15378                           prodl	equ	0xFF3
 15379                           intcon	equ	0xFF2
 15380                           indf0	equ	0xFEF
 15381                           postinc0	equ	0xFEE
 15382                           fsr0h	equ	0xFEA
 15383                           fsr0l	equ	0xFE9
 15384                           wreg	equ	0xFE8
 15385                           indf1	equ	0xFE7
 15386                           postinc1	equ	0xFE6
 15387                           postdec1	equ	0xFE5
 15388                           fsr1h	equ	0xFE2
 15389                           fsr1l	equ	0xFE1
 15390                           indf2	equ	0xFDF
 15391                           postinc2	equ	0xFDE
 15392                           postdec2	equ	0xFDD
 15393                           fsr2h	equ	0xFDA
 15394                           fsr2l	equ	0xFD9
 15395                           status	equ	0xFD8
 15396                           
 15397 ;; *************** function _clear_cmd_data *****************
 15398 ;; Defined at:
 15399 ;;		line 8 in file "cmd_consol.c"
 15400 ;; Parameters:    Size  Location     Type
 15401 ;;		None
 15402 ;; Auto vars:     Size  Location     Type
 15403 ;;		None
 15404 ;; Return value:  Size  Location     Type
 15405 ;;                  1    wreg      void 
 15406 ;; Registers used:
 15407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15408 ;; Tracked objects:
 15409 ;;		On entry : 0/0
 15410 ;;		On exit  : 0/0
 15411 ;;		Unchanged: 0/0
 15412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15417 ;;Total ram usage:        0 bytes
 15418 ;; Hardware stack levels used:    1
 15419 ;; Hardware stack levels required when called:    6
 15420 ;; This function calls:
 15421 ;;		_memset
 15422 ;; This function is called by:
 15423 ;;		_parse_cmd_str
 15424 ;;		_console_init
 15425 ;; This function uses a non-reentrant model
 15426 ;;
 15427                           
 15428                           	psect	text69
 15429  003EB6                     __ptext69:
 15430                           	opt stack 0
 15431  003EB6                     _clear_cmd_data:
 15432                           	opt stack 23
 15433                           
 15434                           ;cmd_consol.c: 9: memset(&cmd_data, 0, sizeof (CMD_CONSOL_DATA));
 15435                           
 15436                           ;incstack = 0
 15437  003EB6  0E86               	movlw	low _cmd_data
 15438  003EB8  6E24               	movwf	memset@p1,c
 15439  003EBA  0E00               	movlw	high _cmd_data
 15440  003EBC  6E25               	movwf	memset@p1+1,c
 15441  003EBE  0E00               	movlw	0
 15442  003EC0  6E27               	movwf	memset@c+1,c
 15443  003EC2  0E00               	movlw	0
 15444  003EC4  6E26               	movwf	memset@c,c
 15445  003EC6  0E00               	movlw	0
 15446  003EC8  6E29               	movwf	memset@n+1,c
 15447  003ECA  0E35               	movlw	53
 15448  003ECC  6E28               	movwf	memset@n,c
 15449  003ECE  ECBB  F01F         	call	_memset	;wreg free
 15450                           
 15451                           ;cmd_consol.c: 11: cmd_data.scroll = -1;
 15452  003ED2  0100               	movlb	0	; () banked
 15453  003ED4  69B6               	setf	(_cmd_data+48)& (0+255),b
 15454                           
 15455                           ; BSR set to: 0
 15456                           ;cmd_consol.c: 12: cmd_data.end_col = cmd_data.start_col = -1;
 15457  003ED6  0100               	movlb	0	; () banked
 15458  003ED8  69B2               	setf	(_cmd_data+44)& (0+255),b
 15459  003EDA  0100               	movlb	0	; () banked
 15460  003EDC  69B4               	setf	(_cmd_data+46)& (0+255),b
 15461                           
 15462                           ; BSR set to: 0
 15463                           ;cmd_consol.c: 13: cmd_data.end_row = cmd_data.end_row = -1;
 15464  003EDE  0100               	movlb	0	; () banked
 15465  003EE0  69B3               	setf	(_cmd_data+45)& (0+255),b
 15466  003EE2  0100               	movlb	0	; () banked
 15467  003EE4  69B3               	setf	(_cmd_data+45)& (0+255),b
 15468                           
 15469                           ; BSR set to: 0
 15470  003EE6  0012               	return		;funcret
 15471  003EE8                     __end_of_clear_cmd_data:
 15472                           	opt stack 0
 15473                           tblptru	equ	0xFF8
 15474                           tblptrh	equ	0xFF7
 15475                           tblptrl	equ	0xFF6
 15476                           tablat	equ	0xFF5
 15477                           prodh	equ	0xFF4
 15478                           prodl	equ	0xFF3
 15479                           intcon	equ	0xFF2
 15480                           indf0	equ	0xFEF
 15481                           postinc0	equ	0xFEE
 15482                           fsr0h	equ	0xFEA
 15483                           fsr0l	equ	0xFE9
 15484                           wreg	equ	0xFE8
 15485                           indf1	equ	0xFE7
 15486                           postinc1	equ	0xFE6
 15487                           postdec1	equ	0xFE5
 15488                           fsr1h	equ	0xFE2
 15489                           fsr1l	equ	0xFE1
 15490                           indf2	equ	0xFDF
 15491                           postinc2	equ	0xFDE
 15492                           postdec2	equ	0xFDD
 15493                           fsr2h	equ	0xFDA
 15494                           fsr2l	equ	0xFD9
 15495                           status	equ	0xFD8
 15496                           
 15497 ;; *************** function _memset *****************
 15498 ;; Defined at:
 15499 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memset.c"
 15500 ;; Parameters:    Size  Location     Type
 15501 ;;  p1              2   35[COMRAM] PTR void 
 15502 ;;		 -> uart_str(150), str_data(40), CMD(15), NULL(0), 
 15503 ;;		 -> cmd_data(53), conflict_arr(40), clcd_display_string_details(1100), lcd_display_array(80), 
 15504 ;;		 -> clcd_config_data(5), 
 15505 ;;  c               2   37[COMRAM] int 
 15506 ;;  n               2   39[COMRAM] unsigned int 
 15507 ;; Auto vars:     Size  Location     Type
 15508 ;;  p               2   41[COMRAM] PTR unsigned char 
 15509 ;;		 -> uart_str(150), str_data(40), CMD(15), NULL(0), 
 15510 ;;		 -> cmd_data(53), conflict_arr(40), clcd_display_string_details(1100), lcd_display_array(80), 
 15511 ;;		 -> clcd_config_data(5), 
 15512 ;; Return value:  Size  Location     Type
 15513 ;;                  2   35[COMRAM] PTR void 
 15514 ;; Registers used:
 15515 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15516 ;; Tracked objects:
 15517 ;;		On entry : 0/0
 15518 ;;		On exit  : 0/0
 15519 ;;		Unchanged: 0/0
 15520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15521 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15522 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15524 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15525 ;;Total ram usage:        8 bytes
 15526 ;; Hardware stack levels used:    1
 15527 ;; Hardware stack levels required when called:    5
 15528 ;; This function calls:
 15529 ;;		Nothing
 15530 ;; This function is called by:
 15531 ;;		_init_CLCD_config
 15532 ;;		_init_clcd_cusotom_lcd
 15533 ;;		_set_string_data
 15534 ;;		_update_string_data
 15535 ;;		_clcd_display_string_config
 15536 ;;		_clear_display_structure
 15537 ;;		_clear_display_array
 15538 ;;		_scroll_left_to_right
 15539 ;;		_scroll_right_to_left
 15540 ;;		_clear_cmd_data
 15541 ;;		_get_str
 15542 ;;		_parse_cmd_str
 15543 ;;		_console_init
 15544 ;;		_cmd_consol_task
 15545 ;; This function uses a non-reentrant model
 15546 ;;
 15547                           
 15548                           	psect	text70
 15549  003F76                     __ptext70:
 15550                           	opt stack 0
 15551  003F76                     _memset:
 15552                           	opt stack 23
 15553                           
 15554                           ; BSR set to: 0
 15555                           ;incstack = 0
 15556  003F76  C024  F02A         	movff	memset@p1,memset@p
 15557  003F7A  C025  F02B         	movff	memset@p1+1,memset@p+1
 15558  003F7E  D008               	goto	l6554
 15559  003F80                     l6550:
 15560  003F80  C02A  FFD9         	movff	memset@p,fsr2l
 15561  003F84  C02B  FFDA         	movff	memset@p+1,fsr2h
 15562  003F88  C026  FFDF         	movff	memset@c,indf2
 15563  003F8C  4A2A               	infsnz	memset@p,f,c
 15564  003F8E  2A2B               	incf	memset@p+1,f,c
 15565  003F90                     l6554:
 15566  003F90  0628               	decf	memset@n,f,c
 15567  003F92  A0D8               	btfss	status,0,c
 15568  003F94  0629               	decf	memset@n+1,f,c
 15569  003F96  2828               	incf	memset@n,w,c
 15570  003F98  E1F3               	bnz	l6550
 15571  003F9A  2829               	incf	memset@n+1,w,c
 15572  003F9C  B4D8               	btfsc	status,2,c
 15573  003F9E  0012               	return	
 15574  003FA0  D7EF               	goto	l6550
 15575  003FA2                     __end_of_memset:
 15576                           	opt stack 0
 15577                           tblptru	equ	0xFF8
 15578                           tblptrh	equ	0xFF7
 15579                           tblptrl	equ	0xFF6
 15580                           tablat	equ	0xFF5
 15581                           prodh	equ	0xFF4
 15582                           prodl	equ	0xFF3
 15583                           intcon	equ	0xFF2
 15584                           indf0	equ	0xFEF
 15585                           postinc0	equ	0xFEE
 15586                           fsr0h	equ	0xFEA
 15587                           fsr0l	equ	0xFE9
 15588                           wreg	equ	0xFE8
 15589                           indf1	equ	0xFE7
 15590                           postinc1	equ	0xFE6
 15591                           postdec1	equ	0xFE5
 15592                           fsr1h	equ	0xFE2
 15593                           fsr1l	equ	0xFE1
 15594                           indf2	equ	0xFDF
 15595                           postinc2	equ	0xFDE
 15596                           postdec2	equ	0xFDD
 15597                           fsr2h	equ	0xFDA
 15598                           fsr2l	equ	0xFD9
 15599                           status	equ	0xFD8
 15600                           
 15601 ;; *************** function _atoi *****************
 15602 ;; Defined at:
 15603 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
 15604 ;; Parameters:    Size  Location     Type
 15605 ;;  s               2   29[COMRAM] PTR const unsigned char 
 15606 ;;		 -> uart_str(150), NULL(0), 
 15607 ;; Auto vars:     Size  Location     Type
 15608 ;;  a               2   34[COMRAM] int 
 15609 ;;  sign            1   33[COMRAM] unsigned char 
 15610 ;; Return value:  Size  Location     Type
 15611 ;;                  2   29[COMRAM] int 
 15612 ;; Registers used:
 15613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15614 ;; Tracked objects:
 15615 ;;		On entry : 0/0
 15616 ;;		On exit  : 0/0
 15617 ;;		Unchanged: 0/0
 15618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15619 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15620 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15621 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15622 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15623 ;;Total ram usage:        7 bytes
 15624 ;; Hardware stack levels used:    1
 15625 ;; Hardware stack levels required when called:    6
 15626 ;; This function calls:
 15627 ;;		___wmul
 15628 ;;		_isdigit
 15629 ;; This function is called by:
 15630 ;;		_parse_cmd_str
 15631 ;; This function uses a non-reentrant model
 15632 ;;
 15633                           
 15634                           	psect	text71
 15635  002F1E                     __ptext71:
 15636                           	opt stack 0
 15637  002F1E                     _atoi:
 15638                           	opt stack 22
 15639                           
 15640                           ;incstack = 0
 15641  002F1E  D002               	goto	l7874
 15642  002F20                     l7872:
 15643  002F20  4A1E               	infsnz	atoi@s,f,c
 15644  002F22  2A1F               	incf	atoi@s+1,f,c
 15645  002F24                     l7874:
 15646  002F24  C01E  FFD9         	movff	atoi@s,fsr2l
 15647  002F28  C01F  FFDA         	movff	atoi@s+1,fsr2h
 15648  002F2C  0E20               	movlw	32
 15649  002F2E  18DE               	xorwf	postinc2,w,c
 15650  002F30  B4D8               	btfsc	status,2,c
 15651  002F32  D7F6               	goto	l7872
 15652  002F34  C01E  FFD9         	movff	atoi@s,fsr2l
 15653  002F38  C01F  FFDA         	movff	atoi@s+1,fsr2h
 15654  002F3C  0E09               	movlw	9
 15655  002F3E  18DE               	xorwf	postinc2,w,c
 15656  002F40  B4D8               	btfsc	status,2,c
 15657  002F42  D7EE               	goto	l7872
 15658  002F44  0E00               	movlw	0
 15659  002F46  6E24               	movwf	atoi@a+1,c
 15660  002F48  0E00               	movlw	0
 15661  002F4A  6E23               	movwf	atoi@a,c
 15662  002F4C  0E00               	movlw	0
 15663  002F4E  6E22               	movwf	atoi@sign,c
 15664  002F50  C01E  FFD9         	movff	atoi@s,fsr2l
 15665  002F54  C01F  FFDA         	movff	atoi@s+1,fsr2h
 15666  002F58  0E2D               	movlw	45
 15667  002F5A  18DE               	xorwf	postinc2,w,c
 15668  002F5C  A4D8               	btfss	status,2,c
 15669  002F5E  D002               	goto	l7884
 15670  002F60  2A22               	incf	atoi@sign,f,c
 15671  002F62  D024               	goto	l7890
 15672  002F64                     l7884:
 15673  002F64  C01E  FFD9         	movff	atoi@s,fsr2l
 15674  002F68  C01F  FFDA         	movff	atoi@s+1,fsr2h
 15675  002F6C  0E2B               	movlw	43
 15676  002F6E  18DE               	xorwf	postinc2,w,c
 15677  002F70  A4D8               	btfss	status,2,c
 15678  002F72  D01E               	goto	l7892
 15679  002F74  D01B               	goto	l7890
 15680  002F76                     l7888:
 15681  002F76  C023  F018         	movff	atoi@a,___wmul@multiplier
 15682  002F7A  C024  F019         	movff	atoi@a+1,___wmul@multiplier+1
 15683  002F7E  0E00               	movlw	0
 15684  002F80  6E1B               	movwf	___wmul@multiplicand+1,c
 15685  002F82  0E0A               	movlw	10
 15686  002F84  6E1A               	movwf	___wmul@multiplicand,c
 15687  002F86  ECE7  F01F         	call	___wmul	;wreg free
 15688  002F8A  C01E  FFD9         	movff	atoi@s,fsr2l
 15689  002F8E  C01F  FFDA         	movff	atoi@s+1,fsr2h
 15690  002F92  50DF               	movf	indf2,w,c
 15691  002F94  6E20               	movwf	??_atoi& (0+255),c
 15692  002F96  6A21               	clrf	(??_atoi+1)& (0+255),c
 15693  002F98  5018               	movf	?___wmul,w,c
 15694  002F9A  2620               	addwf	??_atoi,f,c
 15695  002F9C  5019               	movf	?___wmul+1,w,c
 15696  002F9E  2221               	addwfc	??_atoi+1,f,c
 15697  002FA0  0ED0               	movlw	208
 15698  002FA2  2420               	addwf	??_atoi,w,c
 15699  002FA4  6E23               	movwf	atoi@a,c
 15700  002FA6  0EFF               	movlw	255
 15701  002FA8  2021               	addwfc	??_atoi+1,w,c
 15702  002FAA  6E24               	movwf	atoi@a+1,c
 15703  002FAC                     l7890:
 15704  002FAC  4A1E               	infsnz	atoi@s,f,c
 15705  002FAE  2A1F               	incf	atoi@s+1,f,c
 15706  002FB0                     l7892:
 15707  002FB0  C01E  FFD9         	movff	atoi@s,fsr2l
 15708  002FB4  C01F  FFDA         	movff	atoi@s+1,fsr2h
 15709  002FB8  50DF               	movf	indf2,w,c
 15710  002FBA  EC4F  F020         	call	_isdigit
 15711  002FBE  B0D8               	btfsc	status,0,c
 15712  002FC0  D7DA               	goto	l7888
 15713  002FC2  5022               	movf	atoi@sign,w,c
 15714  002FC4  B4D8               	btfsc	status,2,c
 15715  002FC6  D00D               	goto	l1310
 15716  002FC8  C023  F020         	movff	atoi@a,??_atoi
 15717  002FCC  C024  F021         	movff	atoi@a+1,??_atoi+1
 15718  002FD0  1E20               	comf	??_atoi,f,c
 15719  002FD2  1E21               	comf	??_atoi+1,f,c
 15720  002FD4  4A20               	infsnz	??_atoi,f,c
 15721  002FD6  2A21               	incf	??_atoi+1,f,c
 15722  002FD8  C020  F01E         	movff	??_atoi,?_atoi
 15723  002FDC  C021  F01F         	movff	??_atoi+1,?_atoi+1
 15724  002FE0  0012               	return	
 15725  002FE2                     l1310:
 15726  002FE2  C023  F01E         	movff	atoi@a,?_atoi
 15727  002FE6  C024  F01F         	movff	atoi@a+1,?_atoi+1
 15728  002FEA  0012               	return		;funcret
 15729  002FEC                     __end_of_atoi:
 15730                           	opt stack 0
 15731                           tblptru	equ	0xFF8
 15732                           tblptrh	equ	0xFF7
 15733                           tblptrl	equ	0xFF6
 15734                           tablat	equ	0xFF5
 15735                           prodh	equ	0xFF4
 15736                           prodl	equ	0xFF3
 15737                           intcon	equ	0xFF2
 15738                           indf0	equ	0xFEF
 15739                           postinc0	equ	0xFEE
 15740                           fsr0h	equ	0xFEA
 15741                           fsr0l	equ	0xFE9
 15742                           wreg	equ	0xFE8
 15743                           indf1	equ	0xFE7
 15744                           postinc1	equ	0xFE6
 15745                           postdec1	equ	0xFE5
 15746                           fsr1h	equ	0xFE2
 15747                           fsr1l	equ	0xFE1
 15748                           indf2	equ	0xFDF
 15749                           postinc2	equ	0xFDE
 15750                           postdec2	equ	0xFDD
 15751                           fsr2h	equ	0xFDA
 15752                           fsr2l	equ	0xFD9
 15753                           status	equ	0xFD8
 15754                           
 15755 ;; *************** function _isdigit *****************
 15756 ;; Defined at:
 15757 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 15758 ;; Parameters:    Size  Location     Type
 15759 ;;  c               1    wreg     unsigned char 
 15760 ;; Auto vars:     Size  Location     Type
 15761 ;;  c               1   17[COMRAM] unsigned char 
 15762 ;; Return value:  Size  Location     Type
 15763 ;;		None               void
 15764 ;; Registers used:
 15765 ;;		wreg, status,2, status,0
 15766 ;; Tracked objects:
 15767 ;;		On entry : 0/0
 15768 ;;		On exit  : 0/0
 15769 ;;		Unchanged: 0/0
 15770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15772 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15773 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15774 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15775 ;;Total ram usage:        3 bytes
 15776 ;; Hardware stack levels used:    1
 15777 ;; Hardware stack levels required when called:    5
 15778 ;; This function calls:
 15779 ;;		Nothing
 15780 ;; This function is called by:
 15781 ;;		_collect_row
 15782 ;;		_get_uid
 15783 ;;		_get_direction
 15784 ;;		_get_dis_frq
 15785 ;;		_get_over_write_data
 15786 ;;		_collect_column
 15787 ;;		_atoi
 15788 ;; This function uses a non-reentrant model
 15789 ;;
 15790                           
 15791                           	psect	text72
 15792  00409E                     __ptext72:
 15793                           	opt stack 0
 15794  00409E                     _isdigit:
 15795                           	opt stack 22
 15796                           
 15797                           ;incstack = 0
 15798                           ;isdigit@c stored from wreg
 15799  00409E  6E12               	movwf	isdigit@c,c
 15800  0040A0  0E00               	movlw	0
 15801  0040A2  6E11               	movwf	_isdigit$2306,c
 15802  0040A4  0E3A               	movlw	58
 15803  0040A6  6012               	cpfslt	isdigit@c,c
 15804  0040A8  D005               	goto	l7302
 15805  0040AA  0E2F               	movlw	47
 15806  0040AC  6412               	cpfsgt	isdigit@c,c
 15807  0040AE  D002               	goto	l7302
 15808  0040B0  0E01               	movlw	1
 15809  0040B2  6E11               	movwf	_isdigit$2306,c
 15810  0040B4                     l7302:
 15811  0040B4  C011  F010         	movff	_isdigit$2306,??_isdigit
 15812  0040B8  3010               	rrcf	??_isdigit,w,c
 15813  0040BA  0012               	return	
 15814  0040BC                     __end_of_isdigit:
 15815                           	opt stack 0
 15816                           tblptru	equ	0xFF8
 15817                           tblptrh	equ	0xFF7
 15818                           tblptrl	equ	0xFF6
 15819                           tablat	equ	0xFF5
 15820                           prodh	equ	0xFF4
 15821                           prodl	equ	0xFF3
 15822                           intcon	equ	0xFF2
 15823                           indf0	equ	0xFEF
 15824                           postinc0	equ	0xFEE
 15825                           fsr0h	equ	0xFEA
 15826                           fsr0l	equ	0xFE9
 15827                           wreg	equ	0xFE8
 15828                           indf1	equ	0xFE7
 15829                           postinc1	equ	0xFE6
 15830                           postdec1	equ	0xFE5
 15831                           fsr1h	equ	0xFE2
 15832                           fsr1l	equ	0xFE1
 15833                           indf2	equ	0xFDF
 15834                           postinc2	equ	0xFDE
 15835                           postdec2	equ	0xFDD
 15836                           fsr2h	equ	0xFDA
 15837                           fsr2l	equ	0xFD9
 15838                           status	equ	0xFD8
 15839                           
 15840 ;; *************** function ___wmul *****************
 15841 ;; Defined at:
 15842 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15843 ;; Parameters:    Size  Location     Type
 15844 ;;  multiplier      2   23[COMRAM] unsigned int 
 15845 ;;  multiplicand    2   25[COMRAM] unsigned int 
 15846 ;; Auto vars:     Size  Location     Type
 15847 ;;  product         2   27[COMRAM] unsigned int 
 15848 ;; Return value:  Size  Location     Type
 15849 ;;                  2   23[COMRAM] unsigned int 
 15850 ;; Registers used:
 15851 ;;		wreg, status,2, status,0, prodl, prodh
 15852 ;; Tracked objects:
 15853 ;;		On entry : 0/0
 15854 ;;		On exit  : 0/0
 15855 ;;		Unchanged: 0/0
 15856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15857 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15858 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15860 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15861 ;;Total ram usage:        6 bytes
 15862 ;; Hardware stack levels used:    1
 15863 ;; Hardware stack levels required when called:    5
 15864 ;; This function calls:
 15865 ;;		Nothing
 15866 ;; This function is called by:
 15867 ;;		_init_clcd_cusotom_lcd
 15868 ;;		_conflict_check
 15869 ;;		_conflict
 15870 ;;		_get_new_uid
 15871 ;;		_set_string_data
 15872 ;;		_update_string_data
 15873 ;;		_make_display
 15874 ;;		_get_uid
 15875 ;;		_atoi
 15876 ;; This function uses a non-reentrant model
 15877 ;;
 15878                           
 15879                           	psect	text73
 15880  003FCE                     __ptext73:
 15881                           	opt stack 0
 15882  003FCE                     ___wmul:
 15883                           	opt stack 24
 15884                           
 15885                           ;incstack = 0
 15886  003FCE  5018               	movf	___wmul@multiplier,w,c
 15887  003FD0  021A               	mulwf	___wmul@multiplicand,c
 15888  003FD2  CFF3 F01C          	movff	prodl,___wmul@product
 15889  003FD6  CFF4 F01D          	movff	prodh,___wmul@product+1
 15890  003FDA  5018               	movf	___wmul@multiplier,w,c
 15891  003FDC  021B               	mulwf	___wmul@multiplicand+1,c
 15892  003FDE  50F3               	movf	prodl,w,c
 15893  003FE0  261D               	addwf	___wmul@product+1,f,c
 15894  003FE2  5019               	movf	___wmul@multiplier+1,w,c
 15895  003FE4  021A               	mulwf	___wmul@multiplicand,c
 15896  003FE6  50F3               	movf	prodl,w,c
 15897  003FE8  261D               	addwf	___wmul@product+1,f,c
 15898  003FEA  C01C  F018         	movff	___wmul@product,?___wmul
 15899  003FEE  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 15900  003FF2  0012               	return	
 15901  003FF4                     __end_of___wmul:
 15902                           	opt stack 0
 15903                           tblptru	equ	0xFF8
 15904                           tblptrh	equ	0xFF7
 15905                           tblptrl	equ	0xFF6
 15906                           tablat	equ	0xFF5
 15907                           prodh	equ	0xFF4
 15908                           prodl	equ	0xFF3
 15909                           intcon	equ	0xFF2
 15910                           indf0	equ	0xFEF
 15911                           postinc0	equ	0xFEE
 15912                           fsr0h	equ	0xFEA
 15913                           fsr0l	equ	0xFE9
 15914                           wreg	equ	0xFE8
 15915                           indf1	equ	0xFE7
 15916                           postinc1	equ	0xFE6
 15917                           postdec1	equ	0xFE5
 15918                           fsr1h	equ	0xFE2
 15919                           fsr1l	equ	0xFE1
 15920                           indf2	equ	0xFDF
 15921                           postinc2	equ	0xFDE
 15922                           postdec2	equ	0xFDD
 15923                           fsr2h	equ	0xFDA
 15924                           fsr2l	equ	0xFD9
 15925                           status	equ	0xFD8
 15926                           
 15927 ;; *************** function _getch *****************
 15928 ;; Defined at:
 15929 ;;		line 155 in file "mcc_generated_files/eusart1.c"
 15930 ;; Parameters:    Size  Location     Type
 15931 ;;		None
 15932 ;; Auto vars:     Size  Location     Type
 15933 ;;		None
 15934 ;; Return value:  Size  Location     Type
 15935 ;;                  1    wreg      unsigned char 
 15936 ;; Registers used:
 15937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15938 ;; Tracked objects:
 15939 ;;		On entry : 0/0
 15940 ;;		On exit  : 0/0
 15941 ;;		Unchanged: 0/0
 15942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15947 ;;Total ram usage:        0 bytes
 15948 ;; Hardware stack levels used:    1
 15949 ;; Hardware stack levels required when called:    6
 15950 ;; This function calls:
 15951 ;;		_EUSART1_Read
 15952 ;; This function is called by:
 15953 ;;		_cmd_consol_task
 15954 ;; This function uses a non-reentrant model
 15955 ;;
 15956                           
 15957                           	psect	text74
 15958  004240                     __ptext74:
 15959                           	opt stack 0
 15960  004240                     _getch:
 15961                           	opt stack 23
 15962                           
 15963                           ;eusart1.c: 157: return EUSART1_Read();
 15964                           
 15965                           ;incstack = 0
 15966  004240  EC41  F01F         	call	_EUSART1_Read	;wreg free
 15967  004244  0012               	return	
 15968  004246                     __end_of_getch:
 15969                           	opt stack 0
 15970                           tblptru	equ	0xFF8
 15971                           tblptrh	equ	0xFF7
 15972                           tblptrl	equ	0xFF6
 15973                           tablat	equ	0xFF5
 15974                           prodh	equ	0xFF4
 15975                           prodl	equ	0xFF3
 15976                           intcon	equ	0xFF2
 15977                           indf0	equ	0xFEF
 15978                           postinc0	equ	0xFEE
 15979                           fsr0h	equ	0xFEA
 15980                           fsr0l	equ	0xFE9
 15981                           wreg	equ	0xFE8
 15982                           indf1	equ	0xFE7
 15983                           postinc1	equ	0xFE6
 15984                           postdec1	equ	0xFE5
 15985                           fsr1h	equ	0xFE2
 15986                           fsr1l	equ	0xFE1
 15987                           indf2	equ	0xFDF
 15988                           postinc2	equ	0xFDE
 15989                           postdec2	equ	0xFDD
 15990                           fsr2h	equ	0xFDA
 15991                           fsr2l	equ	0xFD9
 15992                           status	equ	0xFD8
 15993                           
 15994 ;; *************** function _EUSART1_Read *****************
 15995 ;; Defined at:
 15996 ;;		line 112 in file "mcc_generated_files/eusart1.c"
 15997 ;; Parameters:    Size  Location     Type
 15998 ;;		None
 15999 ;; Auto vars:     Size  Location     Type
 16000 ;;  readValue       1   15[COMRAM] unsigned char 
 16001 ;; Return value:  Size  Location     Type
 16002 ;;                  1    wreg      unsigned char 
 16003 ;; Registers used:
 16004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16005 ;; Tracked objects:
 16006 ;;		On entry : 0/0
 16007 ;;		On exit  : 0/0
 16008 ;;		Unchanged: 0/0
 16009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16011 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16013 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16014 ;;Total ram usage:        1 bytes
 16015 ;; Hardware stack levels used:    1
 16016 ;; Hardware stack levels required when called:    5
 16017 ;; This function calls:
 16018 ;;		Nothing
 16019 ;; This function is called by:
 16020 ;;		_getch
 16021 ;; This function uses a non-reentrant model
 16022 ;;
 16023                           
 16024                           	psect	text75
 16025  003E82                     __ptext75:
 16026                           	opt stack 0
 16027  003E82                     _EUSART1_Read:
 16028                           	opt stack 23
 16029                           
 16030                           ;eusart1.c: 114: uint8_t readValue = 0;
 16031                           
 16032                           ;incstack = 0
 16033  003E82  0E00               	movlw	0
 16034  003E84  6E10               	movwf	EUSART1_Read@readValue,c
 16035  003E86                     l7376:
 16036  003E86  5044               	movf	_eusart1RxCount,w,c	;volatile
 16037  003E88  B4D8               	btfsc	status,2,c
 16038  003E8A  D7FD               	goto	l7376
 16039                           
 16040                           ;eusart1.c: 118: }
 16041                           ;eusart1.c: 120: readValue = eusart1RxBuffer[eusart1RxTail++];
 16042  003E8C  5046               	movf	_eusart1RxTail,w,c	;volatile
 16043  003E8E  0D01               	mullw	1
 16044  003E90  0E60               	movlw	low _eusart1RxBuffer
 16045  003E92  24F3               	addwf	prodl,w,c
 16046  003E94  6ED9               	movwf	fsr2l,c
 16047  003E96  0E00               	movlw	high _eusart1RxBuffer
 16048  003E98  20F4               	addwfc	prodh,w,c
 16049  003E9A  6EDA               	movwf	fsr2h,c
 16050  003E9C  50DF               	movf	indf2,w,c
 16051  003E9E  6E10               	movwf	EUSART1_Read@readValue,c
 16052  003EA0  2A46               	incf	_eusart1RxTail,f,c	;volatile
 16053                           
 16054                           ;eusart1.c: 121: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 16055  003EA2  0E07               	movlw	7
 16056  003EA4  6446               	cpfsgt	_eusart1RxTail,c	;volatile
 16057  003EA6  D002               	goto	l7386
 16058                           
 16059                           ;eusart1.c: 122: {
 16060                           ;eusart1.c: 123: eusart1RxTail = 0;
 16061  003EA8  0E00               	movlw	0
 16062  003EAA  6E46               	movwf	_eusart1RxTail,c	;volatile
 16063  003EAC                     l7386:
 16064                           
 16065                           ;eusart1.c: 124: }
 16066                           ;eusart1.c: 125: PIE1bits.RC1IE = 0;
 16067  003EAC  9A9D               	bcf	3997,5,c	;volatile
 16068                           
 16069                           ;eusart1.c: 126: eusart1RxCount--;
 16070  003EAE  0644               	decf	_eusart1RxCount,f,c	;volatile
 16071                           
 16072                           ;eusart1.c: 127: PIE1bits.RC1IE = 1;
 16073  003EB0  8A9D               	bsf	3997,5,c	;volatile
 16074                           
 16075                           ;eusart1.c: 129: return readValue;
 16076  003EB2  5010               	movf	EUSART1_Read@readValue,w,c
 16077  003EB4  0012               	return	
 16078  003EB6                     __end_of_EUSART1_Read:
 16079                           	opt stack 0
 16080                           tblptru	equ	0xFF8
 16081                           tblptrh	equ	0xFF7
 16082                           tblptrl	equ	0xFF6
 16083                           tablat	equ	0xFF5
 16084                           prodh	equ	0xFF4
 16085                           prodl	equ	0xFF3
 16086                           intcon	equ	0xFF2
 16087                           indf0	equ	0xFEF
 16088                           postinc0	equ	0xFEE
 16089                           fsr0h	equ	0xFEA
 16090                           fsr0l	equ	0xFE9
 16091                           wreg	equ	0xFE8
 16092                           indf1	equ	0xFE7
 16093                           postinc1	equ	0xFE6
 16094                           postdec1	equ	0xFE5
 16095                           fsr1h	equ	0xFE2
 16096                           fsr1l	equ	0xFE1
 16097                           indf2	equ	0xFDF
 16098                           postinc2	equ	0xFDE
 16099                           postdec2	equ	0xFDD
 16100                           fsr2h	equ	0xFDA
 16101                           fsr2l	equ	0xFD9
 16102                           status	equ	0xFD8
 16103                           
 16104 ;; *************** function _TMR5_StopTimer *****************
 16105 ;; Defined at:
 16106 ;;		line 94 in file "mcc_generated_files/tmr5.c"
 16107 ;; Parameters:    Size  Location     Type
 16108 ;;		None
 16109 ;; Auto vars:     Size  Location     Type
 16110 ;;		None
 16111 ;; Return value:  Size  Location     Type
 16112 ;;                  1    wreg      void 
 16113 ;; Registers used:
 16114 ;;		None
 16115 ;; Tracked objects:
 16116 ;;		On entry : 0/0
 16117 ;;		On exit  : 0/0
 16118 ;;		Unchanged: 0/0
 16119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16124 ;;Total ram usage:        0 bytes
 16125 ;; Hardware stack levels used:    1
 16126 ;; Hardware stack levels required when called:    5
 16127 ;; This function calls:
 16128 ;;		Nothing
 16129 ;; This function is called by:
 16130 ;;		_main
 16131 ;;		__delay_10uS
 16132 ;; This function uses a non-reentrant model
 16133 ;;
 16134                           
 16135                           	psect	text76
 16136  004246                     __ptext76:
 16137                           	opt stack 0
 16138  004246                     _TMR5_StopTimer:
 16139                           	opt stack 25
 16140                           
 16141                           ;tmr5.c: 97: T5CONbits.TMR5ON = 0;
 16142                           
 16143                           ;incstack = 0
 16144  004246  010F               	movlb	15	; () banked
 16145  004248  914E               	bcf	78,0,b	;volatile
 16146                           
 16147                           ; BSR set to: 15
 16148  00424A  0012               	return		;funcret
 16149  00424C                     __end_of_TMR5_StopTimer:
 16150                           	opt stack 0
 16151                           tblptru	equ	0xFF8
 16152                           tblptrh	equ	0xFF7
 16153                           tblptrl	equ	0xFF6
 16154                           tablat	equ	0xFF5
 16155                           prodh	equ	0xFF4
 16156                           prodl	equ	0xFF3
 16157                           intcon	equ	0xFF2
 16158                           indf0	equ	0xFEF
 16159                           postinc0	equ	0xFEE
 16160                           fsr0h	equ	0xFEA
 16161                           fsr0l	equ	0xFE9
 16162                           wreg	equ	0xFE8
 16163                           indf1	equ	0xFE7
 16164                           postinc1	equ	0xFE6
 16165                           postdec1	equ	0xFE5
 16166                           fsr1h	equ	0xFE2
 16167                           fsr1l	equ	0xFE1
 16168                           indf2	equ	0xFDF
 16169                           postinc2	equ	0xFDE
 16170                           postdec2	equ	0xFDD
 16171                           fsr2h	equ	0xFDA
 16172                           fsr2l	equ	0xFD9
 16173                           status	equ	0xFD8
 16174                           
 16175 ;; *************** function _TMR0_StopTimer *****************
 16176 ;; Defined at:
 16177 ;;		line 101 in file "mcc_generated_files/tmr0.c"
 16178 ;; Parameters:    Size  Location     Type
 16179 ;;		None
 16180 ;; Auto vars:     Size  Location     Type
 16181 ;;		None
 16182 ;; Return value:  Size  Location     Type
 16183 ;;                  1    wreg      void 
 16184 ;; Registers used:
 16185 ;;		None
 16186 ;; Tracked objects:
 16187 ;;		On entry : 0/0
 16188 ;;		On exit  : 0/0
 16189 ;;		Unchanged: 0/0
 16190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16195 ;;Total ram usage:        0 bytes
 16196 ;; Hardware stack levels used:    1
 16197 ;; Hardware stack levels required when called:    5
 16198 ;; This function calls:
 16199 ;;		Nothing
 16200 ;; This function is called by:
 16201 ;;		_main
 16202 ;; This function uses a non-reentrant model
 16203 ;;
 16204                           
 16205                           	psect	text77
 16206  00425C                     __ptext77:
 16207                           	opt stack 0
 16208  00425C                     _TMR0_StopTimer:
 16209                           	opt stack 25
 16210                           
 16211                           ;tmr0.c: 104: T0CONbits.TMR0ON = 0;
 16212                           
 16213                           ; BSR set to: 15
 16214                           ;incstack = 0
 16215  00425C  9ED5               	bcf	4053,7,c	;volatile
 16216  00425E  0012               	return		;funcret
 16217  004260                     __end_of_TMR0_StopTimer:
 16218                           	opt stack 0
 16219                           tblptru	equ	0xFF8
 16220                           tblptrh	equ	0xFF7
 16221                           tblptrl	equ	0xFF6
 16222                           tablat	equ	0xFF5
 16223                           prodh	equ	0xFF4
 16224                           prodl	equ	0xFF3
 16225                           intcon	equ	0xFF2
 16226                           indf0	equ	0xFEF
 16227                           postinc0	equ	0xFEE
 16228                           fsr0h	equ	0xFEA
 16229                           fsr0l	equ	0xFE9
 16230                           wreg	equ	0xFE8
 16231                           indf1	equ	0xFE7
 16232                           postinc1	equ	0xFE6
 16233                           postdec1	equ	0xFE5
 16234                           fsr1h	equ	0xFE2
 16235                           fsr1l	equ	0xFE1
 16236                           indf2	equ	0xFDF
 16237                           postinc2	equ	0xFDE
 16238                           postdec2	equ	0xFDD
 16239                           fsr2h	equ	0xFDA
 16240                           fsr2l	equ	0xFD9
 16241                           status	equ	0xFD8
 16242                           
 16243 ;; *************** function _SYSTEM_Initialize *****************
 16244 ;; Defined at:
 16245 ;;		line 111 in file "mcc_generated_files/mcc.c"
 16246 ;; Parameters:    Size  Location     Type
 16247 ;;		None
 16248 ;; Auto vars:     Size  Location     Type
 16249 ;;		None
 16250 ;; Return value:  Size  Location     Type
 16251 ;;                  1    wreg      void 
 16252 ;; Registers used:
 16253 ;;		wreg, status,2, status,0, cstack
 16254 ;; Tracked objects:
 16255 ;;		On entry : 0/0
 16256 ;;		On exit  : 0/0
 16257 ;;		Unchanged: 0/0
 16258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16263 ;;Total ram usage:        0 bytes
 16264 ;; Hardware stack levels used:    1
 16265 ;; Hardware stack levels required when called:    7
 16266 ;; This function calls:
 16267 ;;		_EUSART1_Initialize
 16268 ;;		_INTERRUPT_Initialize
 16269 ;;		_OSCILLATOR_Initialize
 16270 ;;		_PIN_MANAGER_Initialize
 16271 ;;		_TMR0_Initialize
 16272 ;;		_TMR1_Initialize
 16273 ;;		_TMR5_Initialize
 16274 ;; This function is called by:
 16275 ;;		_main
 16276 ;; This function uses a non-reentrant model
 16277 ;;
 16278                           
 16279                           	psect	text78
 16280  0040BC                     __ptext78:
 16281                           	opt stack 0
 16282  0040BC                     _SYSTEM_Initialize:
 16283                           	opt stack 23
 16284                           
 16285                           ;mcc.c: 114: INTERRUPT_Initialize();
 16286                           
 16287                           ;incstack = 0
 16288  0040BC  EC34  F021         	call	_INTERRUPT_Initialize	;wreg free
 16289                           
 16290                           ;mcc.c: 115: PIN_MANAGER_Initialize();
 16291  0040C0  EC09  F01E         	call	_PIN_MANAGER_Initialize	;wreg free
 16292                           
 16293                           ;mcc.c: 116: OSCILLATOR_Initialize();
 16294  0040C4  ECE8  F020         	call	_OSCILLATOR_Initialize	;wreg free
 16295                           
 16296                           ;mcc.c: 117: TMR5_Initialize();
 16297  0040C8  ECFA  F01F         	call	_TMR5_Initialize	;wreg free
 16298                           
 16299                           ;mcc.c: 118: TMR1_Initialize();
 16300  0040CC  EC30  F020         	call	_TMR1_Initialize	;wreg free
 16301                           
 16302                           ;mcc.c: 119: TMR0_Initialize();
 16303  0040D0  EC0A  F01F         	call	_TMR0_Initialize	;wreg free
 16304                           
 16305                           ;mcc.c: 120: EUSART1_Initialize();
 16306  0040D4  EC26  F01F         	call	_EUSART1_Initialize	;wreg free
 16307  0040D8  0012               	return		;funcret
 16308  0040DA                     __end_of_SYSTEM_Initialize:
 16309                           	opt stack 0
 16310                           tblptru	equ	0xFF8
 16311                           tblptrh	equ	0xFF7
 16312                           tblptrl	equ	0xFF6
 16313                           tablat	equ	0xFF5
 16314                           prodh	equ	0xFF4
 16315                           prodl	equ	0xFF3
 16316                           intcon	equ	0xFF2
 16317                           indf0	equ	0xFEF
 16318                           postinc0	equ	0xFEE
 16319                           fsr0h	equ	0xFEA
 16320                           fsr0l	equ	0xFE9
 16321                           wreg	equ	0xFE8
 16322                           indf1	equ	0xFE7
 16323                           postinc1	equ	0xFE6
 16324                           postdec1	equ	0xFE5
 16325                           fsr1h	equ	0xFE2
 16326                           fsr1l	equ	0xFE1
 16327                           indf2	equ	0xFDF
 16328                           postinc2	equ	0xFDE
 16329                           postdec2	equ	0xFDD
 16330                           fsr2h	equ	0xFDA
 16331                           fsr2l	equ	0xFD9
 16332                           status	equ	0xFD8
 16333                           
 16334 ;; *************** function _TMR5_Initialize *****************
 16335 ;; Defined at:
 16336 ;;		line 62 in file "mcc_generated_files/tmr5.c"
 16337 ;; Parameters:    Size  Location     Type
 16338 ;;		None
 16339 ;; Auto vars:     Size  Location     Type
 16340 ;;		None
 16341 ;; Return value:  Size  Location     Type
 16342 ;;                  1    wreg      void 
 16343 ;; Registers used:
 16344 ;;		wreg, status,2, cstack
 16345 ;; Tracked objects:
 16346 ;;		On entry : 0/0
 16347 ;;		On exit  : 0/0
 16348 ;;		Unchanged: 0/0
 16349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16354 ;;Total ram usage:        0 bytes
 16355 ;; Hardware stack levels used:    1
 16356 ;; Hardware stack levels required when called:    6
 16357 ;; This function calls:
 16358 ;;		_TMR5_StartTimer
 16359 ;; This function is called by:
 16360 ;;		_SYSTEM_Initialize
 16361 ;; This function uses a non-reentrant model
 16362 ;;
 16363                           
 16364                           	psect	text79
 16365  003FF4                     __ptext79:
 16366                           	opt stack 0
 16367  003FF4                     _TMR5_Initialize:
 16368                           	opt stack 23
 16369                           
 16370                           ;tmr5.c: 67: T5CON = 0x12;
 16371                           
 16372                           ;incstack = 0
 16373  003FF4  0E12               	movlw	18
 16374  003FF6  010F               	movlb	15	; () banked
 16375  003FF8  6F4E               	movwf	78,b	;volatile
 16376                           
 16377                           ;tmr5.c: 70: T5GCON = 0x00;
 16378  003FFA  0E00               	movlw	0
 16379  003FFC  010F               	movlb	15	; () banked
 16380  003FFE  6F4D               	movwf	77,b	;volatile
 16381                           
 16382                           ; BSR set to: 15
 16383                           ;tmr5.c: 73: TMR5H = 0xFF;
 16384  004000  010F               	movlb	15	; () banked
 16385  004002  6950               	setf	80,b	;volatile
 16386                           
 16387                           ;tmr5.c: 76: TMR5L = 0xEC;
 16388  004004  0EEC               	movlw	236
 16389  004006  010F               	movlb	15	; () banked
 16390  004008  6F4F               	movwf	79,b	;volatile
 16391                           
 16392                           ; BSR set to: 15
 16393                           ;tmr5.c: 79: timer5ReloadVal=TMR5;
 16394  00400A  CF4F F0F6          	movff	3919,_timer5ReloadVal	;volatile
 16395  00400E  CF50 F0F7          	movff	3920,_timer5ReloadVal+1	;volatile
 16396                           
 16397                           ; BSR set to: 15
 16398                           ;tmr5.c: 82: PIR5bits.TMR5IF = 0;
 16399  004012  927E               	bcf	3966,1,c	;volatile
 16400                           
 16401                           ; BSR set to: 15
 16402                           ;tmr5.c: 85: TMR5_StartTimer();
 16403  004014  EC26  F021         	call	_TMR5_StartTimer	;wreg free
 16404  004018  0012               	return		;funcret
 16405  00401A                     __end_of_TMR5_Initialize:
 16406                           	opt stack 0
 16407                           tblptru	equ	0xFF8
 16408                           tblptrh	equ	0xFF7
 16409                           tblptrl	equ	0xFF6
 16410                           tablat	equ	0xFF5
 16411                           prodh	equ	0xFF4
 16412                           prodl	equ	0xFF3
 16413                           intcon	equ	0xFF2
 16414                           indf0	equ	0xFEF
 16415                           postinc0	equ	0xFEE
 16416                           fsr0h	equ	0xFEA
 16417                           fsr0l	equ	0xFE9
 16418                           wreg	equ	0xFE8
 16419                           indf1	equ	0xFE7
 16420                           postinc1	equ	0xFE6
 16421                           postdec1	equ	0xFE5
 16422                           fsr1h	equ	0xFE2
 16423                           fsr1l	equ	0xFE1
 16424                           indf2	equ	0xFDF
 16425                           postinc2	equ	0xFDE
 16426                           postdec2	equ	0xFDD
 16427                           fsr2h	equ	0xFDA
 16428                           fsr2l	equ	0xFD9
 16429                           status	equ	0xFD8
 16430                           
 16431 ;; *************** function _TMR5_StartTimer *****************
 16432 ;; Defined at:
 16433 ;;		line 88 in file "mcc_generated_files/tmr5.c"
 16434 ;; Parameters:    Size  Location     Type
 16435 ;;		None
 16436 ;; Auto vars:     Size  Location     Type
 16437 ;;		None
 16438 ;; Return value:  Size  Location     Type
 16439 ;;                  1    wreg      void 
 16440 ;; Registers used:
 16441 ;;		None
 16442 ;; Tracked objects:
 16443 ;;		On entry : 0/0
 16444 ;;		On exit  : 0/0
 16445 ;;		Unchanged: 0/0
 16446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16451 ;;Total ram usage:        0 bytes
 16452 ;; Hardware stack levels used:    1
 16453 ;; Hardware stack levels required when called:    5
 16454 ;; This function calls:
 16455 ;;		Nothing
 16456 ;; This function is called by:
 16457 ;;		_TMR5_Initialize
 16458 ;;		__delay_10uS
 16459 ;; This function uses a non-reentrant model
 16460 ;;
 16461                           
 16462                           	psect	text80
 16463  00424C                     __ptext80:
 16464                           	opt stack 0
 16465  00424C                     _TMR5_StartTimer:
 16466                           	opt stack 23
 16467                           
 16468                           ;tmr5.c: 91: T5CONbits.TMR5ON = 1;
 16469                           
 16470                           ;incstack = 0
 16471  00424C  010F               	movlb	15	; () banked
 16472  00424E  814E               	bsf	78,0,b	;volatile
 16473                           
 16474                           ; BSR set to: 15
 16475  004250  0012               	return		;funcret
 16476  004252                     __end_of_TMR5_StartTimer:
 16477                           	opt stack 0
 16478                           tblptru	equ	0xFF8
 16479                           tblptrh	equ	0xFF7
 16480                           tblptrl	equ	0xFF6
 16481                           tablat	equ	0xFF5
 16482                           prodh	equ	0xFF4
 16483                           prodl	equ	0xFF3
 16484                           intcon	equ	0xFF2
 16485                           indf0	equ	0xFEF
 16486                           postinc0	equ	0xFEE
 16487                           fsr0h	equ	0xFEA
 16488                           fsr0l	equ	0xFE9
 16489                           wreg	equ	0xFE8
 16490                           indf1	equ	0xFE7
 16491                           postinc1	equ	0xFE6
 16492                           postdec1	equ	0xFE5
 16493                           fsr1h	equ	0xFE2
 16494                           fsr1l	equ	0xFE1
 16495                           indf2	equ	0xFDF
 16496                           postinc2	equ	0xFDE
 16497                           postdec2	equ	0xFDD
 16498                           fsr2h	equ	0xFDA
 16499                           fsr2l	equ	0xFD9
 16500                           status	equ	0xFD8
 16501                           
 16502 ;; *************** function _TMR1_Initialize *****************
 16503 ;; Defined at:
 16504 ;;		line 62 in file "mcc_generated_files/tmr1.c"
 16505 ;; Parameters:    Size  Location     Type
 16506 ;;		None
 16507 ;; Auto vars:     Size  Location     Type
 16508 ;;		None
 16509 ;; Return value:  Size  Location     Type
 16510 ;;                  1    wreg      void 
 16511 ;; Registers used:
 16512 ;;		wreg, status,2, cstack
 16513 ;; Tracked objects:
 16514 ;;		On entry : 0/0
 16515 ;;		On exit  : 0/0
 16516 ;;		Unchanged: 0/0
 16517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16522 ;;Total ram usage:        0 bytes
 16523 ;; Hardware stack levels used:    1
 16524 ;; Hardware stack levels required when called:    6
 16525 ;; This function calls:
 16526 ;;		_TMR1_StartTimer
 16527 ;; This function is called by:
 16528 ;;		_SYSTEM_Initialize
 16529 ;; This function uses a non-reentrant model
 16530 ;;
 16531                           
 16532                           	psect	text81
 16533  004060                     __ptext81:
 16534                           	opt stack 0
 16535  004060                     _TMR1_Initialize:
 16536                           	opt stack 23
 16537                           
 16538                           ;tmr1.c: 67: T1CON = 0x32;
 16539                           
 16540                           ; BSR set to: 15
 16541                           ;incstack = 0
 16542  004060  0E32               	movlw	50
 16543  004062  6ECD               	movwf	4045,c	;volatile
 16544                           
 16545                           ;tmr1.c: 70: T1GCON = 0x00;
 16546  004064  0E00               	movlw	0
 16547  004066  6ECC               	movwf	4044,c	;volatile
 16548                           
 16549                           ;tmr1.c: 73: TMR1H = 0xFE;
 16550  004068  0EFE               	movlw	254
 16551  00406A  6ECF               	movwf	4047,c	;volatile
 16552                           
 16553                           ;tmr1.c: 76: TMR1L = 0x0C;
 16554  00406C  0E0C               	movlw	12
 16555  00406E  6ECE               	movwf	4046,c	;volatile
 16556                           
 16557                           ;tmr1.c: 79: timer1ReloadVal=TMR1;
 16558  004070  CFCE F0F4          	movff	4046,_timer1ReloadVal	;volatile
 16559  004074  CFCF F0F5          	movff	4047,_timer1ReloadVal+1	;volatile
 16560                           
 16561                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
 16562  004078  909E               	bcf	3998,0,c	;volatile
 16563                           
 16564                           ;tmr1.c: 85: TMR1_StartTimer();
 16565  00407A  EC30  F021         	call	_TMR1_StartTimer	;wreg free
 16566  00407E  0012               	return		;funcret
 16567  004080                     __end_of_TMR1_Initialize:
 16568                           	opt stack 0
 16569                           tblptru	equ	0xFF8
 16570                           tblptrh	equ	0xFF7
 16571                           tblptrl	equ	0xFF6
 16572                           tablat	equ	0xFF5
 16573                           prodh	equ	0xFF4
 16574                           prodl	equ	0xFF3
 16575                           intcon	equ	0xFF2
 16576                           indf0	equ	0xFEF
 16577                           postinc0	equ	0xFEE
 16578                           fsr0h	equ	0xFEA
 16579                           fsr0l	equ	0xFE9
 16580                           wreg	equ	0xFE8
 16581                           indf1	equ	0xFE7
 16582                           postinc1	equ	0xFE6
 16583                           postdec1	equ	0xFE5
 16584                           fsr1h	equ	0xFE2
 16585                           fsr1l	equ	0xFE1
 16586                           indf2	equ	0xFDF
 16587                           postinc2	equ	0xFDE
 16588                           postdec2	equ	0xFDD
 16589                           fsr2h	equ	0xFDA
 16590                           fsr2l	equ	0xFD9
 16591                           status	equ	0xFD8
 16592                           
 16593 ;; *************** function _TMR1_StartTimer *****************
 16594 ;; Defined at:
 16595 ;;		line 88 in file "mcc_generated_files/tmr1.c"
 16596 ;; Parameters:    Size  Location     Type
 16597 ;;		None
 16598 ;; Auto vars:     Size  Location     Type
 16599 ;;		None
 16600 ;; Return value:  Size  Location     Type
 16601 ;;                  1    wreg      void 
 16602 ;; Registers used:
 16603 ;;		None
 16604 ;; Tracked objects:
 16605 ;;		On entry : 0/0
 16606 ;;		On exit  : 0/0
 16607 ;;		Unchanged: 0/0
 16608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16613 ;;Total ram usage:        0 bytes
 16614 ;; Hardware stack levels used:    1
 16615 ;; Hardware stack levels required when called:    5
 16616 ;; This function calls:
 16617 ;;		Nothing
 16618 ;; This function is called by:
 16619 ;;		_TMR1_Initialize
 16620 ;;		__delay_MS
 16621 ;; This function uses a non-reentrant model
 16622 ;;
 16623                           
 16624                           	psect	text82
 16625  004260                     __ptext82:
 16626                           	opt stack 0
 16627  004260                     _TMR1_StartTimer:
 16628                           	opt stack 20
 16629                           
 16630                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
 16631                           
 16632                           ;incstack = 0
 16633  004260  80CD               	bsf	4045,0,c	;volatile
 16634  004262  0012               	return		;funcret
 16635  004264                     __end_of_TMR1_StartTimer:
 16636                           	opt stack 0
 16637                           tblptru	equ	0xFF8
 16638                           tblptrh	equ	0xFF7
 16639                           tblptrl	equ	0xFF6
 16640                           tablat	equ	0xFF5
 16641                           prodh	equ	0xFF4
 16642                           prodl	equ	0xFF3
 16643                           intcon	equ	0xFF2
 16644                           indf0	equ	0xFEF
 16645                           postinc0	equ	0xFEE
 16646                           fsr0h	equ	0xFEA
 16647                           fsr0l	equ	0xFE9
 16648                           wreg	equ	0xFE8
 16649                           indf1	equ	0xFE7
 16650                           postinc1	equ	0xFE6
 16651                           postdec1	equ	0xFE5
 16652                           fsr1h	equ	0xFE2
 16653                           fsr1l	equ	0xFE1
 16654                           indf2	equ	0xFDF
 16655                           postinc2	equ	0xFDE
 16656                           postdec2	equ	0xFDD
 16657                           fsr2h	equ	0xFDA
 16658                           fsr2l	equ	0xFD9
 16659                           status	equ	0xFD8
 16660                           
 16661 ;; *************** function _TMR0_Initialize *****************
 16662 ;; Defined at:
 16663 ;;		line 66 in file "mcc_generated_files/tmr0.c"
 16664 ;; Parameters:    Size  Location     Type
 16665 ;;		None
 16666 ;; Auto vars:     Size  Location     Type
 16667 ;;		None
 16668 ;; Return value:  Size  Location     Type
 16669 ;;                  1    wreg      void 
 16670 ;; Registers used:
 16671 ;;		wreg, status,2, status,0, cstack
 16672 ;; Tracked objects:
 16673 ;;		On entry : 0/0
 16674 ;;		On exit  : 0/0
 16675 ;;		Unchanged: 0/0
 16676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16679 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16680 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16681 ;;Total ram usage:        2 bytes
 16682 ;; Hardware stack levels used:    1
 16683 ;; Hardware stack levels required when called:    6
 16684 ;; This function calls:
 16685 ;;		_TMR0_SetInterruptHandler
 16686 ;;		_TMR0_StartTimer
 16687 ;; This function is called by:
 16688 ;;		_SYSTEM_Initialize
 16689 ;; This function uses a non-reentrant model
 16690 ;;
 16691                           
 16692                           	psect	text83
 16693  003E14                     __ptext83:
 16694                           	opt stack 0
 16695  003E14                     _TMR0_Initialize:
 16696                           	opt stack 23
 16697                           
 16698                           ;tmr0.c: 71: T0CON = 0x17;
 16699                           
 16700                           ;incstack = 0
 16701  003E14  0E17               	movlw	23
 16702  003E16  6ED5               	movwf	4053,c	;volatile
 16703                           
 16704                           ;tmr0.c: 74: TMR0H = 0xC2;
 16705  003E18  0EC2               	movlw	194
 16706  003E1A  6ED7               	movwf	4055,c	;volatile
 16707                           
 16708                           ;tmr0.c: 77: TMR0L = 0xF6;
 16709  003E1C  0EF6               	movlw	246
 16710  003E1E  6ED6               	movwf	4054,c	;volatile
 16711                           
 16712                           ;tmr0.c: 80: timer0ReloadVal = (TMR0H << 8) | TMR0L;
 16713  003E20  50D6               	movf	4054,w,c	;volatile
 16714  003E22  CFD7 F012          	movff	4055,??_TMR0_Initialize	;volatile
 16715  003E26  6A13               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 16716  003E28  C012  F013         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 16717  003E2C  6A12               	clrf	??_TMR0_Initialize,c
 16718  003E2E  1012               	iorwf	??_TMR0_Initialize,w,c
 16719  003E30  6E4E               	movwf	_timer0ReloadVal,c	;volatile
 16720  003E32  5013               	movf	??_TMR0_Initialize+1,w,c
 16721  003E34  6E4F               	movwf	_timer0ReloadVal+1,c	;volatile
 16722                           
 16723                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
 16724  003E36  94F2               	bcf	intcon,2,c	;volatile
 16725                           
 16726                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
 16727  003E38  8AF2               	bsf	intcon,5,c	;volatile
 16728                           
 16729                           ;tmr0.c: 89: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 16730  003E3A  0E6C               	movlw	low _TMR0_DefaultInterruptHandler
 16731  003E3C  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
 16732  003E3E  0E42               	movlw	high _TMR0_DefaultInterruptHandler
 16733  003E40  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
 16734  003E42  EC17  F021         	call	_TMR0_SetInterruptHandler	;wreg free
 16735                           
 16736                           ;tmr0.c: 92: TMR0_StartTimer();
 16737  003E46  EC32  F021         	call	_TMR0_StartTimer	;wreg free
 16738  003E4A  0012               	return		;funcret
 16739  003E4C                     __end_of_TMR0_Initialize:
 16740                           	opt stack 0
 16741                           tblptru	equ	0xFF8
 16742                           tblptrh	equ	0xFF7
 16743                           tblptrl	equ	0xFF6
 16744                           tablat	equ	0xFF5
 16745                           prodh	equ	0xFF4
 16746                           prodl	equ	0xFF3
 16747                           intcon	equ	0xFF2
 16748                           indf0	equ	0xFEF
 16749                           postinc0	equ	0xFEE
 16750                           fsr0h	equ	0xFEA
 16751                           fsr0l	equ	0xFE9
 16752                           wreg	equ	0xFE8
 16753                           indf1	equ	0xFE7
 16754                           postinc1	equ	0xFE6
 16755                           postdec1	equ	0xFE5
 16756                           fsr1h	equ	0xFE2
 16757                           fsr1l	equ	0xFE1
 16758                           indf2	equ	0xFDF
 16759                           postinc2	equ	0xFDE
 16760                           postdec2	equ	0xFDD
 16761                           fsr2h	equ	0xFDA
 16762                           fsr2l	equ	0xFD9
 16763                           status	equ	0xFD8
 16764                           
 16765 ;; *************** function _TMR0_StartTimer *****************
 16766 ;; Defined at:
 16767 ;;		line 95 in file "mcc_generated_files/tmr0.c"
 16768 ;; Parameters:    Size  Location     Type
 16769 ;;		None
 16770 ;; Auto vars:     Size  Location     Type
 16771 ;;		None
 16772 ;; Return value:  Size  Location     Type
 16773 ;;                  1    wreg      void 
 16774 ;; Registers used:
 16775 ;;		None
 16776 ;; Tracked objects:
 16777 ;;		On entry : 0/0
 16778 ;;		On exit  : 0/0
 16779 ;;		Unchanged: 0/0
 16780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16785 ;;Total ram usage:        0 bytes
 16786 ;; Hardware stack levels used:    1
 16787 ;; Hardware stack levels required when called:    5
 16788 ;; This function calls:
 16789 ;;		Nothing
 16790 ;; This function is called by:
 16791 ;;		_TMR0_Initialize
 16792 ;;		_main
 16793 ;; This function uses a non-reentrant model
 16794 ;;
 16795                           
 16796                           	psect	text84
 16797  004264                     __ptext84:
 16798                           	opt stack 0
 16799  004264                     _TMR0_StartTimer:
 16800                           	opt stack 25
 16801                           
 16802                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
 16803                           
 16804                           ;incstack = 0
 16805  004264  8ED5               	bsf	4053,7,c	;volatile
 16806  004266  0012               	return		;funcret
 16807  004268                     __end_of_TMR0_StartTimer:
 16808                           	opt stack 0
 16809                           tblptru	equ	0xFF8
 16810                           tblptrh	equ	0xFF7
 16811                           tblptrl	equ	0xFF6
 16812                           tablat	equ	0xFF5
 16813                           prodh	equ	0xFF4
 16814                           prodl	equ	0xFF3
 16815                           intcon	equ	0xFF2
 16816                           indf0	equ	0xFEF
 16817                           postinc0	equ	0xFEE
 16818                           fsr0h	equ	0xFEA
 16819                           fsr0l	equ	0xFE9
 16820                           wreg	equ	0xFE8
 16821                           indf1	equ	0xFE7
 16822                           postinc1	equ	0xFE6
 16823                           postdec1	equ	0xFE5
 16824                           fsr1h	equ	0xFE2
 16825                           fsr1l	equ	0xFE1
 16826                           indf2	equ	0xFDF
 16827                           postinc2	equ	0xFDE
 16828                           postdec2	equ	0xFDD
 16829                           fsr2h	equ	0xFDA
 16830                           fsr2l	equ	0xFD9
 16831                           status	equ	0xFD8
 16832                           
 16833 ;; *************** function _TMR0_SetInterruptHandler *****************
 16834 ;; Defined at:
 16835 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 16836 ;; Parameters:    Size  Location     Type
 16837 ;;  InterruptHan    2   15[COMRAM] PTR void 
 16838 ;;		 -> make_array(1), TMR0_DefaultInterruptHandler(1), 
 16839 ;; Auto vars:     Size  Location     Type
 16840 ;;		None
 16841 ;; Return value:  Size  Location     Type
 16842 ;;                  1    wreg      void 
 16843 ;; Registers used:
 16844 ;;		wreg, status,2, status,0
 16845 ;; Tracked objects:
 16846 ;;		On entry : 0/0
 16847 ;;		On exit  : 0/0
 16848 ;;		Unchanged: 0/0
 16849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16850 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16853 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16854 ;;Total ram usage:        2 bytes
 16855 ;; Hardware stack levels used:    1
 16856 ;; Hardware stack levels required when called:    5
 16857 ;; This function calls:
 16858 ;;		Nothing
 16859 ;; This function is called by:
 16860 ;;		_TMR0_Initialize
 16861 ;;		_main
 16862 ;; This function uses a non-reentrant model
 16863 ;;
 16864                           
 16865                           	psect	text85
 16866  00422E                     __ptext85:
 16867                           	opt stack 0
 16868  00422E                     _TMR0_SetInterruptHandler:
 16869                           	opt stack 25
 16870                           
 16871                           ;tmr0.c: 163: TMR0_InterruptHandler = InterruptHandler;
 16872                           
 16873                           ;incstack = 0
 16874  00422E  C010  F0F2         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
 16875  004232  C011  F0F3         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
 16876  004236  0012               	return		;funcret
 16877  004238                     __end_of_TMR0_SetInterruptHandler:
 16878                           	opt stack 0
 16879                           tblptru	equ	0xFF8
 16880                           tblptrh	equ	0xFF7
 16881                           tblptrl	equ	0xFF6
 16882                           tablat	equ	0xFF5
 16883                           prodh	equ	0xFF4
 16884                           prodl	equ	0xFF3
 16885                           intcon	equ	0xFF2
 16886                           indf0	equ	0xFEF
 16887                           postinc0	equ	0xFEE
 16888                           fsr0h	equ	0xFEA
 16889                           fsr0l	equ	0xFE9
 16890                           wreg	equ	0xFE8
 16891                           indf1	equ	0xFE7
 16892                           postinc1	equ	0xFE6
 16893                           postdec1	equ	0xFE5
 16894                           fsr1h	equ	0xFE2
 16895                           fsr1l	equ	0xFE1
 16896                           indf2	equ	0xFDF
 16897                           postinc2	equ	0xFDE
 16898                           postdec2	equ	0xFDD
 16899                           fsr2h	equ	0xFDA
 16900                           fsr2l	equ	0xFD9
 16901                           status	equ	0xFD8
 16902                           
 16903 ;; *************** function _PIN_MANAGER_Initialize *****************
 16904 ;; Defined at:
 16905 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 16906 ;; Parameters:    Size  Location     Type
 16907 ;;		None
 16908 ;; Auto vars:     Size  Location     Type
 16909 ;;		None
 16910 ;; Return value:  Size  Location     Type
 16911 ;;                  1    wreg      void 
 16912 ;; Registers used:
 16913 ;;		wreg, status,2
 16914 ;; Tracked objects:
 16915 ;;		On entry : 0/0
 16916 ;;		On exit  : 0/0
 16917 ;;		Unchanged: 0/0
 16918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16923 ;;Total ram usage:        0 bytes
 16924 ;; Hardware stack levels used:    1
 16925 ;; Hardware stack levels required when called:    5
 16926 ;; This function calls:
 16927 ;;		Nothing
 16928 ;; This function is called by:
 16929 ;;		_SYSTEM_Initialize
 16930 ;; This function uses a non-reentrant model
 16931 ;;
 16932                           
 16933                           	psect	text86
 16934  003C12                     __ptext86:
 16935                           	opt stack 0
 16936  003C12                     _PIN_MANAGER_Initialize:
 16937                           	opt stack 24
 16938                           
 16939                           ;pin_manager.c: 56: LATE = 0x00;
 16940                           
 16941                           ;incstack = 0
 16942  003C12  0E00               	movlw	0
 16943  003C14  6E8D               	movwf	3981,c	;volatile
 16944                           
 16945                           ;pin_manager.c: 57: LATD = 0x00;
 16946  003C16  0E00               	movlw	0
 16947  003C18  6E8C               	movwf	3980,c	;volatile
 16948                           
 16949                           ;pin_manager.c: 58: LATA = 0x00;
 16950  003C1A  0E00               	movlw	0
 16951  003C1C  6E89               	movwf	3977,c	;volatile
 16952                           
 16953                           ;pin_manager.c: 59: LATB = 0x00;
 16954  003C1E  0E00               	movlw	0
 16955  003C20  6E8A               	movwf	3978,c	;volatile
 16956                           
 16957                           ;pin_manager.c: 60: LATC = 0x00;
 16958  003C22  0E00               	movlw	0
 16959  003C24  6E8B               	movwf	3979,c	;volatile
 16960                           
 16961                           ;pin_manager.c: 65: TRISE = 0x03;
 16962  003C26  0E03               	movlw	3
 16963  003C28  6E96               	movwf	3990,c	;volatile
 16964                           
 16965                           ;pin_manager.c: 66: TRISA = 0xF8;
 16966  003C2A  0EF8               	movlw	248
 16967  003C2C  6E92               	movwf	3986,c	;volatile
 16968                           
 16969                           ;pin_manager.c: 67: TRISB = 0xFF;
 16970  003C2E  6893               	setf	3987,c	;volatile
 16971                           
 16972                           ;pin_manager.c: 68: TRISC = 0xBF;
 16973  003C30  0EBF               	movlw	191
 16974  003C32  6E94               	movwf	3988,c	;volatile
 16975                           
 16976                           ;pin_manager.c: 69: TRISD = 0x00;
 16977  003C34  0E00               	movlw	0
 16978  003C36  6E95               	movwf	3989,c	;volatile
 16979                           
 16980                           ;pin_manager.c: 74: ANSELC = 0x3C;
 16981  003C38  0E3C               	movlw	60
 16982  003C3A  010F               	movlb	15	; () banked
 16983  003C3C  6F3A               	movwf	58,b	;volatile
 16984                           
 16985                           ;pin_manager.c: 75: ANSELB = 0x3F;
 16986  003C3E  0E3F               	movlw	63
 16987  003C40  010F               	movlb	15	; () banked
 16988  003C42  6F39               	movwf	57,b	;volatile
 16989                           
 16990                           ;pin_manager.c: 76: ANSELD = 0x00;
 16991  003C44  0E00               	movlw	0
 16992  003C46  010F               	movlb	15	; () banked
 16993  003C48  6F3B               	movwf	59,b	;volatile
 16994                           
 16995                           ;pin_manager.c: 77: ANSELE = 0x03;
 16996  003C4A  0E03               	movlw	3
 16997  003C4C  010F               	movlb	15	; () banked
 16998  003C4E  6F3C               	movwf	60,b	;volatile
 16999                           
 17000                           ;pin_manager.c: 78: ANSELA = 0x28;
 17001  003C50  0E28               	movlw	40
 17002  003C52  010F               	movlb	15	; () banked
 17003  003C54  6F38               	movwf	56,b	;volatile
 17004                           
 17005                           ; BSR set to: 15
 17006                           ;pin_manager.c: 83: WPUB = 0xFF;
 17007  003C56  6861               	setf	3937,c	;volatile
 17008                           
 17009                           ; BSR set to: 15
 17010                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
 17011  003C58  9EF1               	bcf	intcon2,7,c	;volatile
 17012                           
 17013                           ; BSR set to: 15
 17014  003C5A  0012               	return		;funcret
 17015  003C5C                     __end_of_PIN_MANAGER_Initialize:
 17016                           	opt stack 0
 17017                           tblptru	equ	0xFF8
 17018                           tblptrh	equ	0xFF7
 17019                           tblptrl	equ	0xFF6
 17020                           tablat	equ	0xFF5
 17021                           prodh	equ	0xFF4
 17022                           prodl	equ	0xFF3
 17023                           intcon	equ	0xFF2
 17024                           intcon2	equ	0xFF1
 17025                           indf0	equ	0xFEF
 17026                           postinc0	equ	0xFEE
 17027                           fsr0h	equ	0xFEA
 17028                           fsr0l	equ	0xFE9
 17029                           wreg	equ	0xFE8
 17030                           indf1	equ	0xFE7
 17031                           postinc1	equ	0xFE6
 17032                           postdec1	equ	0xFE5
 17033                           fsr1h	equ	0xFE2
 17034                           fsr1l	equ	0xFE1
 17035                           indf2	equ	0xFDF
 17036                           postinc2	equ	0xFDE
 17037                           postdec2	equ	0xFDD
 17038                           fsr2h	equ	0xFDA
 17039                           fsr2l	equ	0xFD9
 17040                           status	equ	0xFD8
 17041                           
 17042 ;; *************** function _OSCILLATOR_Initialize *****************
 17043 ;; Defined at:
 17044 ;;		line 123 in file "mcc_generated_files/mcc.c"
 17045 ;; Parameters:    Size  Location     Type
 17046 ;;		None
 17047 ;; Auto vars:     Size  Location     Type
 17048 ;;		None
 17049 ;; Return value:  Size  Location     Type
 17050 ;;                  1    wreg      void 
 17051 ;; Registers used:
 17052 ;;		wreg, status,2
 17053 ;; Tracked objects:
 17054 ;;		On entry : 0/0
 17055 ;;		On exit  : 0/0
 17056 ;;		Unchanged: 0/0
 17057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17062 ;;Total ram usage:        0 bytes
 17063 ;; Hardware stack levels used:    1
 17064 ;; Hardware stack levels required when called:    5
 17065 ;; This function calls:
 17066 ;;		Nothing
 17067 ;; This function is called by:
 17068 ;;		_SYSTEM_Initialize
 17069 ;; This function uses a non-reentrant model
 17070 ;;
 17071                           
 17072                           	psect	text87
 17073  0041D0                     __ptext87:
 17074                           	opt stack 0
 17075  0041D0                     _OSCILLATOR_Initialize:
 17076                           	opt stack 24
 17077                           
 17078                           ;mcc.c: 126: OSCCON = 0x70;
 17079                           
 17080                           ; BSR set to: 15
 17081                           ;incstack = 0
 17082  0041D0  0E70               	movlw	112
 17083  0041D2  6ED3               	movwf	4051,c	;volatile
 17084                           
 17085                           ;mcc.c: 128: OSCCON2 = 0x04;
 17086  0041D4  0E04               	movlw	4
 17087  0041D6  6ED2               	movwf	4050,c	;volatile
 17088                           
 17089                           ;mcc.c: 130: OSCTUNE = 0x80;
 17090  0041D8  0E80               	movlw	128
 17091  0041DA  6E9B               	movwf	3995,c	;volatile
 17092  0041DC  0012               	return		;funcret
 17093  0041DE                     __end_of_OSCILLATOR_Initialize:
 17094                           	opt stack 0
 17095                           tblptru	equ	0xFF8
 17096                           tblptrh	equ	0xFF7
 17097                           tblptrl	equ	0xFF6
 17098                           tablat	equ	0xFF5
 17099                           prodh	equ	0xFF4
 17100                           prodl	equ	0xFF3
 17101                           intcon	equ	0xFF2
 17102                           intcon2	equ	0xFF1
 17103                           indf0	equ	0xFEF
 17104                           postinc0	equ	0xFEE
 17105                           fsr0h	equ	0xFEA
 17106                           fsr0l	equ	0xFE9
 17107                           wreg	equ	0xFE8
 17108                           indf1	equ	0xFE7
 17109                           postinc1	equ	0xFE6
 17110                           postdec1	equ	0xFE5
 17111                           fsr1h	equ	0xFE2
 17112                           fsr1l	equ	0xFE1
 17113                           indf2	equ	0xFDF
 17114                           postinc2	equ	0xFDE
 17115                           postdec2	equ	0xFDD
 17116                           fsr2h	equ	0xFDA
 17117                           fsr2l	equ	0xFD9
 17118                           status	equ	0xFD8
 17119                           
 17120 ;; *************** function _INTERRUPT_Initialize *****************
 17121 ;; Defined at:
 17122 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 17123 ;; Parameters:    Size  Location     Type
 17124 ;;		None
 17125 ;; Auto vars:     Size  Location     Type
 17126 ;;		None
 17127 ;; Return value:  Size  Location     Type
 17128 ;;                  1    wreg      void 
 17129 ;; Registers used:
 17130 ;;		None
 17131 ;; Tracked objects:
 17132 ;;		On entry : 0/0
 17133 ;;		On exit  : 0/0
 17134 ;;		Unchanged: 0/0
 17135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17140 ;;Total ram usage:        0 bytes
 17141 ;; Hardware stack levels used:    1
 17142 ;; Hardware stack levels required when called:    5
 17143 ;; This function calls:
 17144 ;;		Nothing
 17145 ;; This function is called by:
 17146 ;;		_SYSTEM_Initialize
 17147 ;; This function uses a non-reentrant model
 17148 ;;
 17149                           
 17150                           	psect	text88
 17151  004268                     __ptext88:
 17152                           	opt stack 0
 17153  004268                     _INTERRUPT_Initialize:
 17154                           	opt stack 24
 17155                           
 17156                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
 17157                           
 17158                           ;incstack = 0
 17159  004268  9ED0               	bcf	4048,7,c	;volatile
 17160  00426A  0012               	return		;funcret
 17161  00426C                     __end_of_INTERRUPT_Initialize:
 17162                           	opt stack 0
 17163                           tblptru	equ	0xFF8
 17164                           tblptrh	equ	0xFF7
 17165                           tblptrl	equ	0xFF6
 17166                           tablat	equ	0xFF5
 17167                           prodh	equ	0xFF4
 17168                           prodl	equ	0xFF3
 17169                           intcon	equ	0xFF2
 17170                           intcon2	equ	0xFF1
 17171                           indf0	equ	0xFEF
 17172                           postinc0	equ	0xFEE
 17173                           fsr0h	equ	0xFEA
 17174                           fsr0l	equ	0xFE9
 17175                           wreg	equ	0xFE8
 17176                           indf1	equ	0xFE7
 17177                           postinc1	equ	0xFE6
 17178                           postdec1	equ	0xFE5
 17179                           fsr1h	equ	0xFE2
 17180                           fsr1l	equ	0xFE1
 17181                           indf2	equ	0xFDF
 17182                           postinc2	equ	0xFDE
 17183                           postdec2	equ	0xFDD
 17184                           fsr2h	equ	0xFDA
 17185                           fsr2l	equ	0xFD9
 17186                           status	equ	0xFD8
 17187                           
 17188 ;; *************** function _EUSART1_Initialize *****************
 17189 ;; Defined at:
 17190 ;;		line 75 in file "mcc_generated_files/eusart1.c"
 17191 ;; Parameters:    Size  Location     Type
 17192 ;;		None
 17193 ;; Auto vars:     Size  Location     Type
 17194 ;;		None
 17195 ;; Return value:  Size  Location     Type
 17196 ;;                  1    wreg      void 
 17197 ;; Registers used:
 17198 ;;		wreg, status,2
 17199 ;; Tracked objects:
 17200 ;;		On entry : 0/0
 17201 ;;		On exit  : 0/0
 17202 ;;		Unchanged: 0/0
 17203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17208 ;;Total ram usage:        0 bytes
 17209 ;; Hardware stack levels used:    1
 17210 ;; Hardware stack levels required when called:    5
 17211 ;; This function calls:
 17212 ;;		Nothing
 17213 ;; This function is called by:
 17214 ;;		_SYSTEM_Initialize
 17215 ;; This function uses a non-reentrant model
 17216 ;;
 17217                           
 17218                           	psect	text89
 17219  003E4C                     __ptext89:
 17220                           	opt stack 0
 17221  003E4C                     _EUSART1_Initialize:
 17222                           	opt stack 24
 17223                           
 17224                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
 17225                           
 17226                           ;incstack = 0
 17227  003E4C  9A9D               	bcf	3997,5,c	;volatile
 17228                           
 17229                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
 17230  003E4E  989D               	bcf	3997,4,c	;volatile
 17231                           
 17232                           ;eusart1.c: 84: BAUDCON1 = 0x08;
 17233  003E50  0E08               	movlw	8
 17234  003E52  6EB8               	movwf	4024,c	;volatile
 17235                           
 17236                           ;eusart1.c: 87: RCSTA1 = 0x90;
 17237  003E54  0E90               	movlw	144
 17238  003E56  6EAB               	movwf	4011,c	;volatile
 17239                           
 17240                           ;eusart1.c: 90: TXSTA1 = 0x24;
 17241  003E58  0E24               	movlw	36
 17242  003E5A  6EAC               	movwf	4012,c	;volatile
 17243                           
 17244                           ;eusart1.c: 93: SPBRG1 = 0xA0;
 17245  003E5C  0EA0               	movlw	160
 17246  003E5E  6EAF               	movwf	4015,c	;volatile
 17247                           
 17248                           ;eusart1.c: 96: SPBRGH1 = 0x01;
 17249  003E60  0E01               	movlw	1
 17250  003E62  6EB0               	movwf	4016,c	;volatile
 17251                           
 17252                           ;eusart1.c: 100: eusart1TxHead = 0;
 17253  003E64  0E00               	movlw	0
 17254  003E66  6E47               	movwf	_eusart1TxHead,c	;volatile
 17255                           
 17256                           ;eusart1.c: 101: eusart1TxTail = 0;
 17257  003E68  0E00               	movlw	0
 17258  003E6A  6E48               	movwf	_eusart1TxTail,c	;volatile
 17259                           
 17260                           ;eusart1.c: 102: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 17261  003E6C  0E08               	movlw	8
 17262  003E6E  0100               	movlb	0	; () banked
 17263  003E70  6FF8               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
 17264                           
 17265                           ;eusart1.c: 104: eusart1RxHead = 0;
 17266  003E72  0E00               	movlw	0
 17267  003E74  6E45               	movwf	_eusart1RxHead,c	;volatile
 17268                           
 17269                           ;eusart1.c: 105: eusart1RxTail = 0;
 17270  003E76  0E00               	movlw	0
 17271  003E78  6E46               	movwf	_eusart1RxTail,c	;volatile
 17272                           
 17273                           ;eusart1.c: 106: eusart1RxCount = 0;
 17274  003E7A  0E00               	movlw	0
 17275  003E7C  6E44               	movwf	_eusart1RxCount,c	;volatile
 17276                           
 17277                           ; BSR set to: 0
 17278                           ;eusart1.c: 109: PIE1bits.RC1IE = 1;
 17279  003E7E  8A9D               	bsf	3997,5,c	;volatile
 17280                           
 17281                           ; BSR set to: 0
 17282  003E80  0012               	return		;funcret
 17283  003E82                     __end_of_EUSART1_Initialize:
 17284                           	opt stack 0
 17285                           tblptru	equ	0xFF8
 17286                           tblptrh	equ	0xFF7
 17287                           tblptrl	equ	0xFF6
 17288                           tablat	equ	0xFF5
 17289                           prodh	equ	0xFF4
 17290                           prodl	equ	0xFF3
 17291                           intcon	equ	0xFF2
 17292                           intcon2	equ	0xFF1
 17293                           indf0	equ	0xFEF
 17294                           postinc0	equ	0xFEE
 17295                           fsr0h	equ	0xFEA
 17296                           fsr0l	equ	0xFE9
 17297                           wreg	equ	0xFE8
 17298                           indf1	equ	0xFE7
 17299                           postinc1	equ	0xFE6
 17300                           postdec1	equ	0xFE5
 17301                           fsr1h	equ	0xFE2
 17302                           fsr1l	equ	0xFE1
 17303                           indf2	equ	0xFDF
 17304                           postinc2	equ	0xFDE
 17305                           postdec2	equ	0xFDD
 17306                           fsr2h	equ	0xFDA
 17307                           fsr2l	equ	0xFD9
 17308                           status	equ	0xFD8
 17309                           
 17310 ;; *************** function _INTERRUPT_InterruptManager *****************
 17311 ;; Defined at:
 17312 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 17313 ;; Parameters:    Size  Location     Type
 17314 ;;		None
 17315 ;; Auto vars:     Size  Location     Type
 17316 ;;		None
 17317 ;; Return value:  Size  Location     Type
 17318 ;;                  1    wreg      void 
 17319 ;; Registers used:
 17320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 17321 ;; Tracked objects:
 17322 ;;		On entry : 0/0
 17323 ;;		On exit  : 0/0
 17324 ;;		Unchanged: 0/0
 17325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17328 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17329 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17330 ;;Total ram usage:       14 bytes
 17331 ;; Hardware stack levels used:    1
 17332 ;; Hardware stack levels required when called:    4
 17333 ;; This function calls:
 17334 ;;		_EUSART1_Receive_ISR
 17335 ;;		_EUSART1_Transmit_ISR
 17336 ;;		_TMR0_ISR
 17337 ;; This function is called by:
 17338 ;;		Interrupt level 2
 17339 ;; This function uses a non-reentrant model
 17340 ;;
 17341                           
 17342                           	psect	intcode
 17343  000008                     __pintcode:
 17344                           	opt stack 0
 17345  000008                     _INTERRUPT_InterruptManager:
 17346                           	opt stack 17
 17347                           
 17348                           ; BSR set to: 0
 17349                           ;incstack = 0
 17350  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17351  00000A  CFFA F002          	movff	pclath,??_INTERRUPT_InterruptManager
 17352  00000E  CFFB F003          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 17353  000012  CFE9 F004          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 17354  000016  CFEA F005          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 17355  00001A  CFE1 F006          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 17356  00001E  CFE2 F007          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 17357  000022  CFD9 F008          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 17358  000026  CFDA F009          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 17359  00002A  CFF3 F00A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 17360  00002E  CFF4 F00B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 17361  000032  CFF6 F00C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 17362  000036  CFF7 F00D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 17363  00003A  CFF8 F00E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 17364  00003E  CFF5 F00F          	movff	tablat,??_INTERRUPT_InterruptManager+13
 17365                           
 17366                           ;interrupt_manager.c: 60: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 17367  000042  BAF2               	btfsc	intcon,5,c	;volatile
 17368  000044  A4F2               	btfss	intcon,2,c	;volatile
 17369  000046  D003               	goto	i2l60
 17370                           
 17371                           ;interrupt_manager.c: 61: {
 17372                           ;interrupt_manager.c: 62: TMR0_ISR();
 17373  000048  ECBD  F020         	call	_TMR0_ISR	;wreg free
 17374                           
 17375                           ;interrupt_manager.c: 63: }
 17376  00004C  D00E               	goto	i2l66
 17377  00004E                     i2l60:
 17378                           
 17379                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 17380  00004E  BCF2               	btfsc	intcon,6,c	;volatile
 17381  000050  A89D               	btfss	3997,4,c	;volatile
 17382  000052  D005               	goto	i2l62
 17383  000054  A89E               	btfss	3998,4,c	;volatile
 17384  000056  D003               	goto	i2l62
 17385                           
 17386                           ;interrupt_manager.c: 65: {
 17387                           ;interrupt_manager.c: 66: EUSART1_Transmit_ISR();
 17388  000058  EC74  F01F         	call	_EUSART1_Transmit_ISR	;wreg free
 17389                           
 17390                           ;interrupt_manager.c: 67: }
 17391  00005C  D006               	goto	i2l66
 17392  00005E                     i2l62:
 17393                           
 17394                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 17395  00005E  BCF2               	btfsc	intcon,6,c	;volatile
 17396  000060  AA9D               	btfss	3997,5,c	;volatile
 17397  000062  D003               	goto	i2l66
 17398  000064  BA9E               	btfsc	3998,5,c	;volatile
 17399                           
 17400                           ;interrupt_manager.c: 69: {
 17401                           ;interrupt_manager.c: 70: EUSART1_Receive_ISR();
 17402  000066  ECD1  F01F         	call	_EUSART1_Receive_ISR	;wreg free
 17403  00006A                     i2l66:
 17404  00006A  C00F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 17405  00006E  C00E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 17406  000072  C00D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 17407  000076  C00C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 17408  00007A  C00B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 17409  00007E  C00A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 17410  000082  C009  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 17411  000086  C008  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 17412  00008A  C007  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 17413  00008E  C006  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 17414  000092  C005  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 17415  000096  C004  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 17416  00009A  C003  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 17417  00009E  C002  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 17418  0000A2  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17419  0000A4  0011               	retfie		f
 17420  0000A6                     __end_of_INTERRUPT_InterruptManager:
 17421                           	opt stack 0
 17422                           pclatu	equ	0xFFB
 17423                           pclath	equ	0xFFA
 17424                           tblptru	equ	0xFF8
 17425                           tblptrh	equ	0xFF7
 17426                           tblptrl	equ	0xFF6
 17427                           tablat	equ	0xFF5
 17428                           prodh	equ	0xFF4
 17429                           prodl	equ	0xFF3
 17430                           intcon	equ	0xFF2
 17431                           intcon2	equ	0xFF1
 17432                           indf0	equ	0xFEF
 17433                           postinc0	equ	0xFEE
 17434                           fsr0h	equ	0xFEA
 17435                           fsr0l	equ	0xFE9
 17436                           wreg	equ	0xFE8
 17437                           indf1	equ	0xFE7
 17438                           postinc1	equ	0xFE6
 17439                           postdec1	equ	0xFE5
 17440                           fsr1h	equ	0xFE2
 17441                           fsr1l	equ	0xFE1
 17442                           indf2	equ	0xFDF
 17443                           postinc2	equ	0xFDE
 17444                           postdec2	equ	0xFDD
 17445                           fsr2h	equ	0xFDA
 17446                           fsr2l	equ	0xFD9
 17447                           status	equ	0xFD8
 17448                           
 17449 ;; *************** function _TMR0_ISR *****************
 17450 ;; Defined at:
 17451 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 17452 ;; Parameters:    Size  Location     Type
 17453 ;;		None
 17454 ;; Auto vars:     Size  Location     Type
 17455 ;;		None
 17456 ;; Return value:  Size  Location     Type
 17457 ;;                  1    wreg      void 
 17458 ;; Registers used:
 17459 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 17460 ;; Tracked objects:
 17461 ;;		On entry : 0/0
 17462 ;;		On exit  : 0/0
 17463 ;;		Unchanged: 0/0
 17464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17469 ;;Total ram usage:        0 bytes
 17470 ;; Hardware stack levels used:    1
 17471 ;; Hardware stack levels required when called:    3
 17472 ;; This function calls:
 17473 ;;		_TMR0_CallBack
 17474 ;; This function is called by:
 17475 ;;		_INTERRUPT_InterruptManager
 17476 ;; This function uses a non-reentrant model
 17477 ;;
 17478                           
 17479                           	psect	text91
 17480  00417A                     __ptext91:
 17481                           	opt stack 0
 17482  00417A                     _TMR0_ISR:
 17483                           	opt stack 17
 17484                           
 17485                           ;tmr0.c: 138: INTCONbits.TMR0IF = 0;
 17486                           
 17487                           ;incstack = 0
 17488  00417A  94F2               	bcf	intcon,2,c	;volatile
 17489                           
 17490                           ;tmr0.c: 142: TMR0H = timer0ReloadVal >> 8;
 17491  00417C  504F               	movf	_timer0ReloadVal+1,w,c	;volatile
 17492  00417E  6ED7               	movwf	4055,c	;volatile
 17493                           
 17494                           ;tmr0.c: 143: TMR0L = (uint8_t) timer0ReloadVal;
 17495  004180  C04E  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17496                           
 17497                           ;tmr0.c: 147: TMR0_CallBack();
 17498  004184  EC0D  F020         	call	_TMR0_CallBack	;wreg free
 17499  004188  0012               	return		;funcret
 17500  00418A                     __end_of_TMR0_ISR:
 17501                           	opt stack 0
 17502                           pclatu	equ	0xFFB
 17503                           pclath	equ	0xFFA
 17504                           tblptru	equ	0xFF8
 17505                           tblptrh	equ	0xFF7
 17506                           tblptrl	equ	0xFF6
 17507                           tablat	equ	0xFF5
 17508                           prodh	equ	0xFF4
 17509                           prodl	equ	0xFF3
 17510                           intcon	equ	0xFF2
 17511                           intcon2	equ	0xFF1
 17512                           indf0	equ	0xFEF
 17513                           postinc0	equ	0xFEE
 17514                           fsr0h	equ	0xFEA
 17515                           fsr0l	equ	0xFE9
 17516                           wreg	equ	0xFE8
 17517                           indf1	equ	0xFE7
 17518                           postinc1	equ	0xFE6
 17519                           postdec1	equ	0xFE5
 17520                           fsr1h	equ	0xFE2
 17521                           fsr1l	equ	0xFE1
 17522                           indf2	equ	0xFDF
 17523                           postinc2	equ	0xFDE
 17524                           postdec2	equ	0xFDD
 17525                           fsr2h	equ	0xFDA
 17526                           fsr2l	equ	0xFD9
 17527                           status	equ	0xFD8
 17528                           
 17529 ;; *************** function _TMR0_CallBack *****************
 17530 ;; Defined at:
 17531 ;;		line 152 in file "mcc_generated_files/tmr0.c"
 17532 ;; Parameters:    Size  Location     Type
 17533 ;;		None
 17534 ;; Auto vars:     Size  Location     Type
 17535 ;;		None
 17536 ;; Return value:  Size  Location     Type
 17537 ;;                  1    wreg      void 
 17538 ;; Registers used:
 17539 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 17540 ;; Tracked objects:
 17541 ;;		On entry : 0/0
 17542 ;;		On exit  : 0/0
 17543 ;;		Unchanged: 0/0
 17544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17549 ;;Total ram usage:        0 bytes
 17550 ;; Hardware stack levels used:    1
 17551 ;; Hardware stack levels required when called:    2
 17552 ;; This function calls:
 17553 ;;		Absolute function
 17554 ;;		_TMR0_DefaultInterruptHandler
 17555 ;;		_make_array
 17556 ;; This function is called by:
 17557 ;;		_TMR0_ISR
 17558 ;; This function uses a non-reentrant model
 17559 ;;
 17560                           
 17561                           	psect	text92
 17562  00401A                     __ptext92:
 17563                           	opt stack 0
 17564  00401A                     _TMR0_CallBack:
 17565                           	opt stack 17
 17566                           
 17567                           ;tmr0.c: 156: if(TMR0_InterruptHandler)
 17568                           
 17569                           ;incstack = 0
 17570  00401A  0100               	movlb	0	; () banked
 17571  00401C  51F2               	movf	_TMR0_InterruptHandler& (0+255),w,b
 17572  00401E  0100               	movlb	0	; () banked
 17573  004020  11F3               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 17574  004022  B4D8               	btfsc	status,2,c
 17575  004024  0012               	return	
 17576                           
 17577                           ; BSR set to: 0
 17578                           ;tmr0.c: 157: {
 17579                           ;tmr0.c: 158: TMR0_InterruptHandler();
 17580  004026  D801               	call	i2u461_48
 17581  004028  0012               	return	
 17582  00402A                     i2u461_48:
 17583  00402A  0005               	push	
 17584  00402C  6EFA               	movwf	pclath,c
 17585  00402E  0100               	movlb	0	; () banked
 17586  004030  51F2               	movf	_TMR0_InterruptHandler& (0+255),w,b
 17587  004032  6EFD               	movwf	tosl,c
 17588  004034  51F3               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 17589  004036  6EFE               	movwf	tosh,c
 17590  004038  6AFF               	clrf	tosu,c
 17591  00403A  50FA               	movf	pclath,w,c
 17592  00403C  0012               	return		;indir
 17593  00403E                     __end_of_TMR0_CallBack:
 17594                           	opt stack 0
 17595                           tosu	equ	0xFFF
 17596                           tosh	equ	0xFFE
 17597                           tosl	equ	0xFFD
 17598                           pclatu	equ	0xFFB
 17599                           pclath	equ	0xFFA
 17600                           tblptru	equ	0xFF8
 17601                           tblptrh	equ	0xFF7
 17602                           tblptrl	equ	0xFF6
 17603                           tablat	equ	0xFF5
 17604                           prodh	equ	0xFF4
 17605                           prodl	equ	0xFF3
 17606                           intcon	equ	0xFF2
 17607                           intcon2	equ	0xFF1
 17608                           indf0	equ	0xFEF
 17609                           postinc0	equ	0xFEE
 17610                           fsr0h	equ	0xFEA
 17611                           fsr0l	equ	0xFE9
 17612                           wreg	equ	0xFE8
 17613                           indf1	equ	0xFE7
 17614                           postinc1	equ	0xFE6
 17615                           postdec1	equ	0xFE5
 17616                           fsr1h	equ	0xFE2
 17617                           fsr1l	equ	0xFE1
 17618                           indf2	equ	0xFDF
 17619                           postinc2	equ	0xFDE
 17620                           postdec2	equ	0xFDD
 17621                           fsr2h	equ	0xFDA
 17622                           fsr2l	equ	0xFD9
 17623                           status	equ	0xFD8
 17624                           
 17625 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17626 ;; Defined at:
 17627 ;;		line 166 in file "mcc_generated_files/tmr0.c"
 17628 ;; Parameters:    Size  Location     Type
 17629 ;;		None
 17630 ;; Auto vars:     Size  Location     Type
 17631 ;;		None
 17632 ;; Return value:  Size  Location     Type
 17633 ;;                  1    wreg      void 
 17634 ;; Registers used:
 17635 ;;		None
 17636 ;; Tracked objects:
 17637 ;;		On entry : 0/0
 17638 ;;		On exit  : 0/0
 17639 ;;		Unchanged: 0/0
 17640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17645 ;;Total ram usage:        0 bytes
 17646 ;; Hardware stack levels used:    1
 17647 ;; This function calls:
 17648 ;;		Nothing
 17649 ;; This function is called by:
 17650 ;;		_TMR0_Initialize
 17651 ;;		_TMR0_CallBack
 17652 ;; This function uses a non-reentrant model
 17653 ;;
 17654                           
 17655                           	psect	text93
 17656  00426C                     __ptext93:
 17657                           	opt stack 0
 17658  00426C                     _TMR0_DefaultInterruptHandler:
 17659                           	opt stack 18
 17660                           
 17661                           ;incstack = 0
 17662  00426C  0012               	return		;funcret
 17663  00426E                     __end_of_TMR0_DefaultInterruptHandler:
 17664                           	opt stack 0
 17665                           tosu	equ	0xFFF
 17666                           tosh	equ	0xFFE
 17667                           tosl	equ	0xFFD
 17668                           pclatu	equ	0xFFB
 17669                           pclath	equ	0xFFA
 17670                           tblptru	equ	0xFF8
 17671                           tblptrh	equ	0xFF7
 17672                           tblptrl	equ	0xFF6
 17673                           tablat	equ	0xFF5
 17674                           prodh	equ	0xFF4
 17675                           prodl	equ	0xFF3
 17676                           intcon	equ	0xFF2
 17677                           intcon2	equ	0xFF1
 17678                           indf0	equ	0xFEF
 17679                           postinc0	equ	0xFEE
 17680                           fsr0h	equ	0xFEA
 17681                           fsr0l	equ	0xFE9
 17682                           wreg	equ	0xFE8
 17683                           indf1	equ	0xFE7
 17684                           postinc1	equ	0xFE6
 17685                           postdec1	equ	0xFE5
 17686                           fsr1h	equ	0xFE2
 17687                           fsr1l	equ	0xFE1
 17688                           indf2	equ	0xFDF
 17689                           postinc2	equ	0xFDE
 17690                           postdec2	equ	0xFDD
 17691                           fsr2h	equ	0xFDA
 17692                           fsr2l	equ	0xFD9
 17693                           status	equ	0xFD8
 17694                           
 17695 ;; *************** function _make_array *****************
 17696 ;; Defined at:
 17697 ;;		line 59 in file "main.c"
 17698 ;; Parameters:    Size  Location     Type
 17699 ;;		None
 17700 ;; Auto vars:     Size  Location     Type
 17701 ;;		None
 17702 ;; Return value:  Size  Location     Type
 17703 ;;                  1    wreg      void 
 17704 ;; Registers used:
 17705 ;;		wreg, status,2, status,0, cstack
 17706 ;; Tracked objects:
 17707 ;;		On entry : 0/0
 17708 ;;		On exit  : 0/0
 17709 ;;		Unchanged: 0/0
 17710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17715 ;;Total ram usage:        0 bytes
 17716 ;; Hardware stack levels used:    1
 17717 ;; Hardware stack levels required when called:    1
 17718 ;; This function calls:
 17719 ;;		_heart_beat
 17720 ;; This function is called by:
 17721 ;;		_main
 17722 ;;		_TMR0_CallBack
 17723 ;; This function uses a non-reentrant model
 17724 ;;
 17725                           
 17726                           	psect	text94
 17727  004204                     __ptext94:
 17728                           	opt stack 0
 17729  004204                     _make_array:
 17730                           	opt stack 17
 17731                           
 17732                           ;main.c: 61: static char i=0;
 17733                           ;main.c: 62: heart_beat();
 17734                           
 17735                           ;incstack = 0
 17736  004204  EC6D  F020         	call	_heart_beat	;wreg free
 17737                           
 17738                           ;main.c: 65: display = 1;
 17739  004208  0E01               	movlw	1
 17740  00420A  0100               	movlb	0	; () banked
 17741  00420C  6F83               	movwf	_display& (0+255),b
 17742                           
 17743                           ; BSR set to: 0
 17744  00420E  0012               	return		;funcret
 17745  004210                     __end_of_make_array:
 17746                           	opt stack 0
 17747                           tosu	equ	0xFFF
 17748                           tosh	equ	0xFFE
 17749                           tosl	equ	0xFFD
 17750                           pclatu	equ	0xFFB
 17751                           pclath	equ	0xFFA
 17752                           tblptru	equ	0xFF8
 17753                           tblptrh	equ	0xFF7
 17754                           tblptrl	equ	0xFF6
 17755                           tablat	equ	0xFF5
 17756                           prodh	equ	0xFF4
 17757                           prodl	equ	0xFF3
 17758                           intcon	equ	0xFF2
 17759                           intcon2	equ	0xFF1
 17760                           indf0	equ	0xFEF
 17761                           postinc0	equ	0xFEE
 17762                           fsr0h	equ	0xFEA
 17763                           fsr0l	equ	0xFE9
 17764                           wreg	equ	0xFE8
 17765                           indf1	equ	0xFE7
 17766                           postinc1	equ	0xFE6
 17767                           postdec1	equ	0xFE5
 17768                           fsr1h	equ	0xFE2
 17769                           fsr1l	equ	0xFE1
 17770                           indf2	equ	0xFDF
 17771                           postinc2	equ	0xFDE
 17772                           postdec2	equ	0xFDD
 17773                           fsr2h	equ	0xFDA
 17774                           fsr2l	equ	0xFD9
 17775                           status	equ	0xFD8
 17776                           
 17777 ;; *************** function _heart_beat *****************
 17778 ;; Defined at:
 17779 ;;		line 54 in file "main.c"
 17780 ;; Parameters:    Size  Location     Type
 17781 ;;		None
 17782 ;; Auto vars:     Size  Location     Type
 17783 ;;		None
 17784 ;; Return value:  Size  Location     Type
 17785 ;;                  1    wreg      void 
 17786 ;; Registers used:
 17787 ;;		wreg, status,2, status,0
 17788 ;; Tracked objects:
 17789 ;;		On entry : 0/0
 17790 ;;		On exit  : 0/0
 17791 ;;		Unchanged: 0/0
 17792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17795 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17796 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17797 ;;Total ram usage:        1 bytes
 17798 ;; Hardware stack levels used:    1
 17799 ;; This function calls:
 17800 ;;		Nothing
 17801 ;; This function is called by:
 17802 ;;		_make_array
 17803 ;; This function uses a non-reentrant model
 17804 ;;
 17805                           
 17806                           	psect	text95
 17807  0040DA                     __ptext95:
 17808                           	opt stack 0
 17809  0040DA                     _heart_beat:
 17810                           	opt stack 17
 17811                           
 17812                           ; BSR set to: 0
 17813                           ;incstack = 0
 17814                           ;main.c: 56: do { LATEbits.LATE2 = ~LATEbits.LATE2; } while(0);
 17815  0040DA  A48D               	btfss	3981,2,c	;volatile
 17816  0040DC  D002               	goto	i2u393_40
 17817  0040DE  0E01               	movlw	1
 17818  0040E0  D001               	goto	i2u393_46
 17819  0040E2                     i2u393_40:
 17820  0040E2  0E00               	movlw	0
 17821  0040E4                     i2u393_46:
 17822  0040E4  0AFF               	xorlw	255
 17823  0040E6  6E01               	movwf	??_heart_beat& (0+255),c
 17824  0040E8  4601               	rlncf	??_heart_beat,f,c
 17825  0040EA  4601               	rlncf	??_heart_beat,f,c
 17826  0040EC  508D               	movf	3981,w,c	;volatile
 17827  0040EE  1801               	xorwf	??_heart_beat,w,c
 17828  0040F0  0BFB               	andlw	-5
 17829  0040F2  1801               	xorwf	??_heart_beat,w,c
 17830  0040F4  6E8D               	movwf	3981,c	;volatile
 17831  0040F6  0012               	return	
 17832  0040F8                     __end_of_heart_beat:
 17833                           	opt stack 0
 17834                           tosu	equ	0xFFF
 17835                           tosh	equ	0xFFE
 17836                           tosl	equ	0xFFD
 17837                           pclatu	equ	0xFFB
 17838                           pclath	equ	0xFFA
 17839                           tblptru	equ	0xFF8
 17840                           tblptrh	equ	0xFF7
 17841                           tblptrl	equ	0xFF6
 17842                           tablat	equ	0xFF5
 17843                           prodh	equ	0xFF4
 17844                           prodl	equ	0xFF3
 17845                           intcon	equ	0xFF2
 17846                           intcon2	equ	0xFF1
 17847                           indf0	equ	0xFEF
 17848                           postinc0	equ	0xFEE
 17849                           fsr0h	equ	0xFEA
 17850                           fsr0l	equ	0xFE9
 17851                           wreg	equ	0xFE8
 17852                           indf1	equ	0xFE7
 17853                           postinc1	equ	0xFE6
 17854                           postdec1	equ	0xFE5
 17855                           fsr1h	equ	0xFE2
 17856                           fsr1l	equ	0xFE1
 17857                           indf2	equ	0xFDF
 17858                           postinc2	equ	0xFDE
 17859                           postdec2	equ	0xFDD
 17860                           fsr2h	equ	0xFDA
 17861                           fsr2l	equ	0xFD9
 17862                           status	equ	0xFD8
 17863                           
 17864 ;; *************** function _EUSART1_Transmit_ISR *****************
 17865 ;; Defined at:
 17866 ;;		line 165 in file "mcc_generated_files/eusart1.c"
 17867 ;; Parameters:    Size  Location     Type
 17868 ;;		None
 17869 ;; Auto vars:     Size  Location     Type
 17870 ;;		None
 17871 ;; Return value:  Size  Location     Type
 17872 ;;                  1    wreg      void 
 17873 ;; Registers used:
 17874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17875 ;; Tracked objects:
 17876 ;;		On entry : 0/0
 17877 ;;		On exit  : 0/0
 17878 ;;		Unchanged: 0/0
 17879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17884 ;;Total ram usage:        0 bytes
 17885 ;; Hardware stack levels used:    1
 17886 ;; This function calls:
 17887 ;;		Nothing
 17888 ;; This function is called by:
 17889 ;;		_INTERRUPT_InterruptManager
 17890 ;; This function uses a non-reentrant model
 17891 ;;
 17892                           
 17893                           	psect	text96
 17894  003EE8                     __ptext96:
 17895                           	opt stack 0
 17896  003EE8                     _EUSART1_Transmit_ISR:
 17897                           	opt stack 20
 17898                           
 17899                           ;eusart1.c: 169: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 17900                           
 17901                           ;incstack = 0
 17902  003EE8  0E08               	movlw	8
 17903  003EEA  0100               	movlb	0	; () banked
 17904  003EEC  61F8               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 17905  003EEE  D013               	goto	i2l205
 17906                           
 17907                           ; BSR set to: 0
 17908                           ;eusart1.c: 170: {
 17909                           ;eusart1.c: 171: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 17910  003EF0  5048               	movf	_eusart1TxTail,w,c	;volatile
 17911  003EF2  0D01               	mullw	1
 17912  003EF4  0E68               	movlw	low _eusart1TxBuffer
 17913  003EF6  24F3               	addwf	prodl,w,c
 17914  003EF8  6ED9               	movwf	fsr2l,c
 17915  003EFA  0E00               	movlw	high _eusart1TxBuffer
 17916  003EFC  20F4               	addwfc	prodh,w,c
 17917  003EFE  6EDA               	movwf	fsr2h,c
 17918  003F00  50DF               	movf	indf2,w,c
 17919  003F02  6EAD               	movwf	4013,c	;volatile
 17920                           
 17921                           ; BSR set to: 0
 17922  003F04  2A48               	incf	_eusart1TxTail,f,c	;volatile
 17923                           
 17924                           ; BSR set to: 0
 17925                           ;eusart1.c: 172: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 17926  003F06  0E07               	movlw	7
 17927  003F08  6448               	cpfsgt	_eusart1TxTail,c	;volatile
 17928  003F0A  D002               	goto	i2l6242
 17929                           
 17930                           ; BSR set to: 0
 17931                           ;eusart1.c: 173: {
 17932                           ;eusart1.c: 174: eusart1TxTail = 0;
 17933  003F0C  0E00               	movlw	0
 17934  003F0E  6E48               	movwf	_eusart1TxTail,c	;volatile
 17935  003F10                     i2l6242:
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;eusart1.c: 175: }
 17939                           ;eusart1.c: 176: eusart1TxBufferRemaining++;
 17940  003F10  0100               	movlb	0	; () banked
 17941  003F12  2BF8               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 17942                           
 17943                           ;eusart1.c: 177: }
 17944  003F14  0012               	return	
 17945  003F16                     i2l205:
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;eusart1.c: 178: else
 17949                           ;eusart1.c: 179: {
 17950                           ;eusart1.c: 180: PIE1bits.TX1IE = 0;
 17951  003F16  989D               	bcf	3997,4,c	;volatile
 17952  003F18  0012               	return	
 17953  003F1A                     __end_of_EUSART1_Transmit_ISR:
 17954                           	opt stack 0
 17955                           tosu	equ	0xFFF
 17956                           tosh	equ	0xFFE
 17957                           tosl	equ	0xFFD
 17958                           pclatu	equ	0xFFB
 17959                           pclath	equ	0xFFA
 17960                           tblptru	equ	0xFF8
 17961                           tblptrh	equ	0xFF7
 17962                           tblptrl	equ	0xFF6
 17963                           tablat	equ	0xFF5
 17964                           prodh	equ	0xFF4
 17965                           prodl	equ	0xFF3
 17966                           intcon	equ	0xFF2
 17967                           intcon2	equ	0xFF1
 17968                           indf0	equ	0xFEF
 17969                           postinc0	equ	0xFEE
 17970                           fsr0h	equ	0xFEA
 17971                           fsr0l	equ	0xFE9
 17972                           wreg	equ	0xFE8
 17973                           indf1	equ	0xFE7
 17974                           postinc1	equ	0xFE6
 17975                           postdec1	equ	0xFE5
 17976                           fsr1h	equ	0xFE2
 17977                           fsr1l	equ	0xFE1
 17978                           indf2	equ	0xFDF
 17979                           postinc2	equ	0xFDE
 17980                           postdec2	equ	0xFDD
 17981                           fsr2h	equ	0xFDA
 17982                           fsr2l	equ	0xFD9
 17983                           status	equ	0xFD8
 17984                           
 17985 ;; *************** function _EUSART1_Receive_ISR *****************
 17986 ;; Defined at:
 17987 ;;		line 184 in file "mcc_generated_files/eusart1.c"
 17988 ;; Parameters:    Size  Location     Type
 17989 ;;		None
 17990 ;; Auto vars:     Size  Location     Type
 17991 ;;		None
 17992 ;; Return value:  Size  Location     Type
 17993 ;;                  1    wreg      void 
 17994 ;; Registers used:
 17995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17996 ;; Tracked objects:
 17997 ;;		On entry : 0/0
 17998 ;;		On exit  : 0/0
 17999 ;;		Unchanged: 0/0
 18000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18005 ;;Total ram usage:        0 bytes
 18006 ;; Hardware stack levels used:    1
 18007 ;; This function calls:
 18008 ;;		Nothing
 18009 ;; This function is called by:
 18010 ;;		_INTERRUPT_InterruptManager
 18011 ;; This function uses a non-reentrant model
 18012 ;;
 18013                           
 18014                           	psect	text97
 18015  003FA2                     __ptext97:
 18016                           	opt stack 0
 18017  003FA2                     _EUSART1_Receive_ISR:
 18018                           	opt stack 20
 18019                           
 18020                           ;eusart1.c: 187: if(1 == RCSTA1bits.OERR)
 18021                           
 18022                           ; BSR set to: 0
 18023                           ;incstack = 0
 18024  003FA2  A2AB               	btfss	4011,1,c	;volatile
 18025  003FA4  D002               	goto	i2l6248
 18026                           
 18027                           ;eusart1.c: 188: {
 18028                           ;eusart1.c: 191: RCSTA1bits.CREN = 0;
 18029  003FA6  98AB               	bcf	4011,4,c	;volatile
 18030                           
 18031                           ;eusart1.c: 192: RCSTA1bits.CREN = 1;
 18032  003FA8  88AB               	bsf	4011,4,c	;volatile
 18033  003FAA                     i2l6248:
 18034                           
 18035                           ;eusart1.c: 193: }
 18036                           ;eusart1.c: 196: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 18037  003FAA  5045               	movf	_eusart1RxHead,w,c	;volatile
 18038  003FAC  0D01               	mullw	1
 18039  003FAE  0E60               	movlw	low _eusart1RxBuffer
 18040  003FB0  24F3               	addwf	prodl,w,c
 18041  003FB2  6ED9               	movwf	fsr2l,c
 18042  003FB4  0E00               	movlw	high _eusart1RxBuffer
 18043  003FB6  20F4               	addwfc	prodh,w,c
 18044  003FB8  6EDA               	movwf	fsr2h,c
 18045  003FBA  CFAE FFDF          	movff	4014,indf2	;volatile
 18046  003FBE  2A45               	incf	_eusart1RxHead,f,c	;volatile
 18047                           
 18048                           ;eusart1.c: 197: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 18049  003FC0  0E07               	movlw	7
 18050  003FC2  6445               	cpfsgt	_eusart1RxHead,c	;volatile
 18051  003FC4  D002               	goto	i2l6256
 18052                           
 18053                           ;eusart1.c: 198: {
 18054                           ;eusart1.c: 199: eusart1RxHead = 0;
 18055  003FC6  0E00               	movlw	0
 18056  003FC8  6E45               	movwf	_eusart1RxHead,c	;volatile
 18057  003FCA                     i2l6256:
 18058                           
 18059                           ;eusart1.c: 200: }
 18060                           ;eusart1.c: 201: eusart1RxCount++;
 18061  003FCA  2A44               	incf	_eusart1RxCount,f,c	;volatile
 18062  003FCC  0012               	return		;funcret
 18063  003FCE                     __end_of_EUSART1_Receive_ISR:
 18064                           	opt stack 0
 18065                           tosu	equ	0xFFF
 18066                           tosh	equ	0xFFE
 18067                           tosl	equ	0xFFD
 18068                           pclatu	equ	0xFFB
 18069                           pclath	equ	0xFFA
 18070                           tblptru	equ	0xFF8
 18071                           tblptrh	equ	0xFF7
 18072                           tblptrl	equ	0xFF6
 18073                           tablat	equ	0xFF5
 18074                           prodh	equ	0xFF4
 18075                           prodl	equ	0xFF3
 18076                           intcon	equ	0xFF2
 18077                           intcon2	equ	0xFF1
 18078                           indf0	equ	0xFEF
 18079                           postinc0	equ	0xFEE
 18080                           fsr0h	equ	0xFEA
 18081                           fsr0l	equ	0xFE9
 18082                           wreg	equ	0xFE8
 18083                           indf1	equ	0xFE7
 18084                           postinc1	equ	0xFE6
 18085                           postdec1	equ	0xFE5
 18086                           fsr1h	equ	0xFE2
 18087                           fsr1l	equ	0xFE1
 18088                           indf2	equ	0xFDF
 18089                           postinc2	equ	0xFDE
 18090                           postdec2	equ	0xFDD
 18091                           fsr2h	equ	0xFDA
 18092                           fsr2l	equ	0xFD9
 18093                           status	equ	0xFD8
 18094                           tosu	equ	0xFFF
 18095                           tosh	equ	0xFFE
 18096                           tosl	equ	0xFFD
 18097                           pclatu	equ	0xFFB
 18098                           pclath	equ	0xFFA
 18099                           tblptru	equ	0xFF8
 18100                           tblptrh	equ	0xFF7
 18101                           tblptrl	equ	0xFF6
 18102                           tablat	equ	0xFF5
 18103                           prodh	equ	0xFF4
 18104                           prodl	equ	0xFF3
 18105                           intcon	equ	0xFF2
 18106                           intcon2	equ	0xFF1
 18107                           indf0	equ	0xFEF
 18108                           postinc0	equ	0xFEE
 18109                           fsr0h	equ	0xFEA
 18110                           fsr0l	equ	0xFE9
 18111                           wreg	equ	0xFE8
 18112                           indf1	equ	0xFE7
 18113                           postinc1	equ	0xFE6
 18114                           postdec1	equ	0xFE5
 18115                           fsr1h	equ	0xFE2
 18116                           fsr1l	equ	0xFE1
 18117                           indf2	equ	0xFDF
 18118                           postinc2	equ	0xFDE
 18119                           postdec2	equ	0xFDD
 18120                           fsr2h	equ	0xFDA
 18121                           fsr2l	equ	0xFD9
 18122                           status	equ	0xFD8
 18123                           
 18124                           	psect	text98
 18125  000000                     __ptext98:
 18126                           	opt stack 0
 18127                           tosu	equ	0xFFF
 18128                           tosh	equ	0xFFE
 18129                           tosl	equ	0xFFD
 18130                           pclatu	equ	0xFFB
 18131                           pclath	equ	0xFFA
 18132                           tblptru	equ	0xFF8
 18133                           tblptrh	equ	0xFF7
 18134                           tblptrl	equ	0xFF6
 18135                           tablat	equ	0xFF5
 18136                           prodh	equ	0xFF4
 18137                           prodl	equ	0xFF3
 18138                           intcon	equ	0xFF2
 18139                           intcon2	equ	0xFF1
 18140                           indf0	equ	0xFEF
 18141                           postinc0	equ	0xFEE
 18142                           fsr0h	equ	0xFEA
 18143                           fsr0l	equ	0xFE9
 18144                           wreg	equ	0xFE8
 18145                           indf1	equ	0xFE7
 18146                           postinc1	equ	0xFE6
 18147                           postdec1	equ	0xFE5
 18148                           fsr1h	equ	0xFE2
 18149                           fsr1l	equ	0xFE1
 18150                           indf2	equ	0xFDF
 18151                           postinc2	equ	0xFDE
 18152                           postdec2	equ	0xFDD
 18153                           fsr2h	equ	0xFDA
 18154                           fsr2l	equ	0xFD9
 18155                           status	equ	0xFD8
 18156                           
 18157                           	psect	rparam
 18158  0000                     tosu	equ	0xFFF
 18159                           tosh	equ	0xFFE
 18160                           tosl	equ	0xFFD
 18161                           pclatu	equ	0xFFB
 18162                           pclath	equ	0xFFA
 18163                           tblptru	equ	0xFF8
 18164                           tblptrh	equ	0xFF7
 18165                           tblptrl	equ	0xFF6
 18166                           tablat	equ	0xFF5
 18167                           prodh	equ	0xFF4
 18168                           prodl	equ	0xFF3
 18169                           intcon	equ	0xFF2
 18170                           intcon2	equ	0xFF1
 18171                           indf0	equ	0xFEF
 18172                           postinc0	equ	0xFEE
 18173                           fsr0h	equ	0xFEA
 18174                           fsr0l	equ	0xFE9
 18175                           wreg	equ	0xFE8
 18176                           indf1	equ	0xFE7
 18177                           postinc1	equ	0xFE6
 18178                           postdec1	equ	0xFE5
 18179                           fsr1h	equ	0xFE2
 18180                           fsr1l	equ	0xFE1
 18181                           indf2	equ	0xFDF
 18182                           postinc2	equ	0xFDE
 18183                           postdec2	equ	0xFDD
 18184                           fsr2h	equ	0xFDA
 18185                           fsr2l	equ	0xFD9
 18186                           status	equ	0xFD8
 18187                           
 18188                           	psect	temp
 18189  000050                     btemp:
 18190                           	opt stack 0
 18191  000050                     	ds	1
 18192  0000                     int$flags	set	btemp
 18193                           tosu	equ	0xFFF
 18194                           tosh	equ	0xFFE
 18195                           tosl	equ	0xFFD
 18196                           pclatu	equ	0xFFB
 18197                           pclath	equ	0xFFA
 18198                           tblptru	equ	0xFF8
 18199                           tblptrh	equ	0xFF7
 18200                           tblptrl	equ	0xFF6
 18201                           tablat	equ	0xFF5
 18202                           prodh	equ	0xFF4
 18203                           prodl	equ	0xFF3
 18204                           intcon	equ	0xFF2
 18205                           intcon2	equ	0xFF1
 18206                           indf0	equ	0xFEF
 18207                           postinc0	equ	0xFEE
 18208                           fsr0h	equ	0xFEA
 18209                           fsr0l	equ	0xFE9
 18210                           wreg	equ	0xFE8
 18211                           indf1	equ	0xFE7
 18212                           postinc1	equ	0xFE6
 18213                           postdec1	equ	0xFE5
 18214                           fsr1h	equ	0xFE2
 18215                           fsr1l	equ	0xFE1
 18216                           indf2	equ	0xFDF
 18217                           postinc2	equ	0xFDE
 18218                           postdec2	equ	0xFDD
 18219                           fsr2h	equ	0xFDA
 18220                           fsr2l	equ	0xFD9
 18221                           status	equ	0xFD8


Data Sizes:
    Strings     892
    Constant    10
    Data        18
    BSS         1529
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      79
    BANK0           160      2     160
    BANK1           256     14     147
    BANK2           256      0     150
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[7]), STR_80(CODE[7]), STR_79(CODE[7]), STR_76(CODE[7]), 
		 -> STR_74(CODE[7]), STR_72(CODE[7]), STR_70(CODE[7]), STR_68(CODE[2]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_54(CODE[7]), STR_51(CODE[7]), STR_49(CODE[7]), STR_46(CODE[7]), 
		 -> STR_44(CODE[7]), STR_40(CODE[7]), STR_38(CODE[7]), STR_32(CODE[7]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[7]), STR_80(CODE[7]), STR_79(CODE[7]), STR_76(CODE[7]), 
		 -> STR_74(CODE[7]), STR_72(CODE[7]), STR_70(CODE[7]), STR_68(CODE[2]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_54(CODE[7]), STR_51(CODE[7]), STR_49(CODE[7]), STR_46(CODE[7]), 
		 -> STR_44(CODE[7]), STR_40(CODE[7]), STR_38(CODE[7]), STR_32(CODE[7]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[7]), STR_80(CODE[7]), STR_79(CODE[7]), STR_76(CODE[7]), 
		 -> STR_74(CODE[7]), STR_72(CODE[7]), STR_70(CODE[7]), STR_68(CODE[2]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_54(CODE[7]), STR_51(CODE[7]), STR_49(CODE[7]), STR_46(CODE[7]), 
		 -> STR_44(CODE[7]), STR_40(CODE[7]), STR_38(CODE[7]), NULL(NULL[0]), 
		 -> STR_32(CODE[7]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[7]), STR_80(CODE[7]), STR_79(CODE[7]), STR_76(CODE[7]), 
		 -> STR_74(CODE[7]), STR_72(CODE[7]), STR_70(CODE[7]), STR_68(CODE[2]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_54(CODE[7]), STR_51(CODE[7]), STR_49(CODE[7]), STR_46(CODE[7]), 
		 -> STR_44(CODE[7]), STR_40(CODE[7]), STR_38(CODE[7]), STR_32(CODE[7]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    cputs@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_134(CODE[12]), STR_133(CODE[12]), STR_84(CODE[5]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[7]), STR_80(CODE[7]), STR_79(CODE[7]), STR_76(CODE[7]), 
		 -> STR_74(CODE[7]), STR_72(CODE[7]), STR_70(CODE[7]), STR_68(CODE[2]), 
		 -> STR_62(CODE[7]), STR_60(CODE[7]), STR_58(CODE[7]), STR_56(CODE[7]), 
		 -> STR_54(CODE[7]), STR_51(CODE[7]), STR_49(CODE[7]), STR_46(CODE[7]), 
		 -> STR_44(CODE[7]), STR_40(CODE[7]), STR_38(CODE[7]), STR_32(CODE[7]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strncpy@from	PTR const unsigned char  size(2) Largest target is 1100
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1100]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 1100
		 -> uart_str(BANK2[150]), NULL(NULL[0]), clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1100]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 1100
		 -> uart_str(BANK2[150]), NULL(NULL[0]), clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1100]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), cmd_data.data(BANK0[40]), NULL(NULL[0]), cmd_data(BANK0[53]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 1100
		 -> CMD(BANK0[15]), cmd_data(BANK0[53]), clcd_display_string_details(BIGRAM[1100]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 1100
		 -> CMD(BANK0[15]), cmd_data(BANK0[53]), clcd_display_string_details(BIGRAM[1100]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_132(CODE[5]), STR_122(CODE[5]), STR_111(CODE[7]), STR_108(CODE[7]), 
		 -> STR_105(CODE[8]), STR_102(CODE[6]), STR_97(CODE[6]), STR_94(CODE[5]), 
		 -> STR_91(CODE[4]), STR_88(CODE[4]), STR_85(CODE[6]), STR_83(CODE[4]), 
		 -> STR_82(CODE[4]), STR_66(CODE[5]), STR_65(CODE[7]), STR_53(CODE[7]), 
		 -> STR_47(CODE[8]), STR_42(CODE[6]), STR_41(CODE[6]), STR_37(CODE[5]), 
		 -> STR_35(CODE[6]), STR_34(CODE[4]), STR_33(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), CMD(BANK0[15]), NULL(NULL[0]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_134(CODE[12]), STR_133(CODE[12]), STR_84(CODE[5]), 

    memset@p1	PTR void  size(2) Largest target is 1100
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[53]), conflict_arr(BANK0[40]), clcd_display_string_details(BIGRAM[1100]), lcd_display_array(BANK1[80]), 
		 -> clcd_config_data(COMRAM[5]), 

    memset@p	PTR unsigned char  size(2) Largest target is 1100
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[53]), conflict_arr(BANK0[40]), clcd_display_string_details(BIGRAM[1100]), lcd_display_array(BANK1[80]), 
		 -> clcd_config_data(COMRAM[5]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 13
		 -> str(BANK1[13]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 13
		 -> str(BANK1[13]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_137(CODE[18]), STR_135(CODE[5]), STR_131(CODE[3]), STR_130(CODE[3]), 
		 -> STR_129(CODE[3]), STR_128(CODE[11]), STR_127(CODE[11]), STR_126(CODE[11]), 
		 -> STR_125(CODE[11]), STR_123(CODE[5]), STR_120(CODE[7]), STR_118(CODE[7]), 
		 -> STR_116(CODE[7]), STR_114(CODE[13]), STR_112(CODE[5]), STR_109(CODE[13]), 
		 -> STR_106(CODE[13]), STR_103(CODE[13]), STR_100(CODE[13]), STR_99(CODE[5]), 
		 -> STR_98(CODE[11]), STR_95(CODE[7]), STR_92(CODE[11]), STR_89(CODE[11]), 
		 -> STR_86(CODE[11]), STR_78(CODE[25]), STR_77(CODE[11]), STR_75(CODE[25]), 
		 -> STR_73(CODE[27]), STR_71(CODE[27]), STR_69(CODE[10]), STR_67(CODE[9]), 
		 -> STR_64(CODE[25]), STR_63(CODE[11]), STR_61(CODE[25]), STR_59(CODE[27]), 
		 -> STR_57(CODE[27]), STR_55(CODE[12]), STR_52(CODE[9]), STR_50(CODE[9]), 
		 -> STR_48(CODE[9]), STR_45(CODE[12]), STR_43(CODE[12]), STR_39(CODE[7]), 
		 -> STR_36(CODE[8]), STR_31(CODE[8]), STR_30(CODE[12]), STR_29(CODE[12]), 
		 -> STR_28(CODE[18]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[12]), 
		 -> STR_24(CODE[12]), STR_23(CODE[16]), STR_22(CODE[16]), STR_21(CODE[19]), 
		 -> STR_20(CODE[3]), STR_19(CODE[5]), STR_18(CODE[16]), STR_17(CODE[39]), 
		 -> STR_16(CODE[30]), STR_15(CODE[15]), STR_14(CODE[39]), STR_13(CODE[5]), 
		 -> STR_12(CODE[5]), STR_11(CODE[26]), STR_10(CODE[26]), STR_9(CODE[26]), 
		 -> STR_8(CODE[26]), STR_7(CODE[26]), STR_6(CODE[26]), STR_4(CODE[17]), 
		 -> STR_3(CODE[18]), STR_2(CODE[9]), STR_1(CODE[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 150
		 -> STR_138(CODE[7]), STR_136(CODE[6]), uart_str(BANK2[150]), STR_124(CODE[13]), 
		 -> STR_121(CODE[15]), STR_119(CODE[12]), STR_117(CODE[12]), STR_115(CODE[7]), 
		 -> STR_113(CODE[6]), STR_110(CODE[7]), STR_107(CODE[8]), STR_104(CODE[6]), 
		 -> STR_101(CODE[6]), STR_96(CODE[3]), STR_93(CODE[3]), STR_90(CODE[3]), 
		 -> STR_87(CODE[3]), cmd_data.data(BANK0[40]), CMD(BANK0[15]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[53]), STR_5(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    parse_cmd_str@temp	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    parse_cmd_str@ptr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    parse_cmd_str@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    collect_column@data_column	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK0[53]), 

    collect_column@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    get_over_write_data@over_write_data	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK0[53]), 

    get_over_write_data@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    get_dis_frq@data_frq	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK0[53]), 

    get_dis_frq@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    get_direction@data_direction	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK0[53]), 

    get_direction@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    get_str@data_str	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK0[53]), 

    get_str@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    get_uid@data_uid	PTR unsigned int  size(2) Largest target is 53
		 -> cmd_data(BANK0[53]), 

    get_uid@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    collect_row@data_row	PTR unsigned char  size(2) Largest target is 53
		 -> cmd_data(BANK0[53]), 

    collect_row@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    scroll_off@clcd_display_string_details	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    scroll_right_to_left@clcd_display_string_details	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    scroll_left_to_right@clcd_display_string_details	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    write_str@str	PTR const unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    update_string_data@data	PTR struct . size(2) Largest target is 53
		 -> cmd_data(BANK0[53]), 

    set_string_data@data	PTR struct . size(2) Largest target is 53
		 -> cmd_data(BANK0[53]), 

    copy_display_struct@data	PTR struct . size(2) Largest target is 53
		 -> cmd_data(BANK0[53]), 

    copy_display_struct@clcd_str_data	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 1100
		 -> CMD(BANK0[15]), cmd_data(BANK0[53]), clcd_display_string_details(BIGRAM[1100]), 

    copy_data@data	PTR struct . size(2) Largest target is 53
		 -> cmd_data(BANK0[53]), 

    copy_data@clcd_str_data	PTR struct . size(2) Largest target is 1100
		 -> clcd_display_string_details(BIGRAM[1100]), 

    sp__max_display_support	PTR unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), 

    sp__memset	PTR void  size(2) Largest target is 1100
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), NULL(NULL[0]), 
		 -> cmd_data(BANK0[53]), conflict_arr(BANK0[40]), clcd_display_string_details(BIGRAM[1100]), lcd_display_array(BANK1[80]), 
		 -> clcd_config_data(COMRAM[5]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> make_array(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> make_array(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _console_init->_memset
    _reply_to_host->_update_string_data
    _update_string_data->_make_display
    _make_display->_scroll_right_to_left
    _scroll_right_to_left->_memset
    _scroll_off->_strlen
    _scroll_left_to_right->_memset
    _display_text->_write_str
    _set_cursor->_write_lcd_cmd
    _char_enter_mode_left_to_right->_write_lcd_cmd
    _copy_data->_printf
    _conflict_check->_printf
    _set_string_data->_conflict
    _get_new_uid->___awmod
    _rand->___lmul
    ___awmod->_rand
    _copy_display_struct->_printf
    _conflict->_printf
    _puts->_cputs
    _cputs->_putch
    _print_conflict_ids->_printf
    _init_clcd_cusotom_lcd->_printf
    _write_lcd_cmd->_delay
    _clear_display_array->_memset
    _clear_display_structure->_memset
    _clcd_display_string_config->_printf
    _write_str->_write_lcd_data
    _write_lcd_data->_delay
    _parse_cmd_str->_collect_column
    _parse_cmd_str->_collect_row
    _parse_cmd_str->_get_direction
    _parse_cmd_str->_get_dis_frq
    _parse_cmd_str->_get_over_write_data
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _get_uid->_strlen
    _get_str->_memset
    _get_over_write_data->_printf
    _get_dis_frq->_printf
    _get_direction->_printf
    _collect_row->_printf
    _collect_column->_printf
    _strlen->___wmul
    _printf->___wmul
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _clear_cmd_data->_memset
    _memset->_strlen
    _atoi->___wmul
    ___wmul->___awdiv
    _getch->_EUSART1_Read
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _make_array->_heart_beat

Critical Paths under _main in BANK0

    _cmd_consol_task->_reply_to_host

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_cmd_consol_task
    _cmd_consol_task->_reply_to_host
    _reply_to_host->_update_string_data

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  457322
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                     _TMR1_StopTimer
                     _TMR5_StopTimer
                          __delay_MS
                    _cmd_consol_task
                       _console_init
                       _make_display
                             _printf
 ---------------------------------------------------------------------------------
 (1) _console_init                                         0     0      0   17830
                     _clear_cmd_data
                             _memset
 ---------------------------------------------------------------------------------
 (1) _cmd_consol_task                                      2     2      0  393844
                                             12 BANK1      2     2      0
                              _getch
                             _memset
                      _parse_cmd_str
                             _printf
                               _puts
                      _reply_to_host
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _reply_to_host                                        5     5      0  246446
                                              0 BANK0      2     2      0
                                              9 BANK1      3     3      0
                       _clcd_max_col
                       _clcd_max_row
              _init_clcd_cusotom_lcd
                    _max_display_str
                _max_display_support
                      _max_uid_range
                      _min_uid_range
                 _print_conflict_ids
                             _printf
                               _puts
                    _set_string_data
                             _strcmp
                 _update_string_data
 ---------------------------------------------------------------------------------
 (3) _update_string_data                                  11     9      2   88755
                                             62 COMRAM     2     0      2
                                              0 BANK1      9     9      0
                             ___wmul
                     _conflict_check
                          _copy_data
                       _make_display
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (1) _make_display                                         5     5      0   37245
                                             57 COMRAM     5     5      0
                             ___wmul
                       _display_text
               _scroll_left_to_right
                         _scroll_off
               _scroll_right_to_left
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_right_to_left                                14    12      2   11249
                                             43 COMRAM    14    12      2
                             ___wmul (ARG)
                             _memset
                            _strncpy
 ---------------------------------------------------------------------------------
 (2) _scroll_off                                          15    13      2    3114
                                             35 COMRAM    15    13      2
                             ___wmul (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_left_to_right                                11     9      2   11156
                                             43 COMRAM    11     9      2
                             ___wmul (ARG)
                             _memset
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              8     2      6    1126
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _display_text                                         0     0      0    2575
      _char_enter_mode_left_to_right
                         _set_cursor
                      _write_lcd_cmd
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _set_cursor                                           2     1      1     805
                                             23 COMRAM     2     1      1
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _char_enter_mode_left_to_right                        0     0      0     401
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (4) _copy_data                                           10     6      4   13235
                                             47 COMRAM     6     2      4
                             _printf
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _conflict_check                                       9     7      2   14766
                                             47 COMRAM     9     7      2
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) _set_string_data                                     14    12      2   59726
                                             55 COMRAM     6     4      2
                                              0 BANK1      8     8      0
                             ___wmul
                           _conflict
                _copy_display_struct
                        _get_new_uid
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (4) _get_new_uid                                          9     7      2    7883
                                             35 COMRAM     9     7      2
                            ___awmod
                             ___wmul
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (5) _srand                                                2     0      2     108
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _rand                                                 2     0      2     404
                                             27 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     404
                                             15 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     741
                                             29 COMRAM     6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _copy_display_struct                                  7     2      5   13312
                                             47 COMRAM     7     2      5
                             _printf
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _conflict                                             8     7      1   14550
                                             47 COMRAM     8     7      1
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) _puts                                                 2     0      2     590
                                             19 COMRAM     2     0      2
                              _cputs
                              _putch
 ---------------------------------------------------------------------------------
 (4) _cputs                                                2     0      2     235
                                             17 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _print_conflict_ids                                   8     8      0    7549
                                             47 COMRAM     6     6      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _min_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_display_support                                  2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _max_display_str                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_clcd_cusotom_lcd                                2     1      1   78407
                                             47 COMRAM     2     1      1
                            ___awdiv
                             ___wmul
                   _init_CLCD_config
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (4) _init_CLCD_config                                     0     0      0   54452
                          __delay_MS
         _clcd_display_string_config
                             _memset
                         _reset_clcd
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _write_lcd_cmd                                        1     1      0     401
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _reset_clcd                                           0     0      0   26745
                _clear_display_array
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _clear_display_array                                  0     0      0   17830
                             _memset
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _reset_display_structure_count                        0     0      0    8915
            _clear_display_structure
 ---------------------------------------------------------------------------------
 (7) _clear_display_structure                              0     0      0    8915
                             _memset
 ---------------------------------------------------------------------------------
 (5) _clcd_display_string_config                           0     0      0   17704
                             _memcpy
                             _memset
                             _printf
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _write_str                                            3     1      2     968
                                             23 COMRAM     3     1      2
                     _write_lcd_data
 ---------------------------------------------------------------------------------
 (4) _write_lcd_data                                       1     1      0     401
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                7     5      2     370
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (6) _memcpy                                              10     4      6     405
                                             15 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) __delay_MS                                            5     3      2     687
                                             15 COMRAM     5     3      2
            _TMR1_HasOverflowOccured
                        _TMR1_Reload
                    _TMR1_StartTimer
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     907
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _clcd_max_row                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clcd_max_col                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parse_cmd_str                                        8     6      2  126604
                                             55 COMRAM     8     6      2
                               _atoi
                     _clear_cmd_data
                     _collect_column
                        _collect_row
                      _get_direction
                        _get_dis_frq
                _get_over_write_data
                            _get_str
                            _get_uid
                             _memset
                             _printf
                             _strcmp
                             _strcpy
                             _strlen
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _strtok                                               4     0      4    4803
                                             26 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (4) _strspn                                               7     3      4     719
                                             19 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strcspn                                              7     3      4     719
                                             19 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (5) _strchr                                               4     0      4     432
                                             15 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    3675
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _get_uid                                             10     6      4    9777
                                             35 COMRAM    10     6      4
                             ___wmul
                            _isdigit
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _get_str                                              4     0      4   14083
                                             43 COMRAM     4     0      4
                             _memset
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    2419
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _get_over_write_data                                  8     4      4   10465
                                             47 COMRAM     8     4      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _get_dis_frq                                          8     4      4   10465
                                             47 COMRAM     8     4      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _get_direction                                        8     4      4   10650
                                             47 COMRAM     8     4      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_row                                          8     4      4   10989
                                             47 COMRAM     8     4      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_column                                       8     4      4   10989
                                             47 COMRAM     8     4      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2    2440
                                             29 COMRAM     6     4      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _printf                                              24    16      8    7416
                                             29 COMRAM    18    10      8
                            ___awdiv (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                       _clcd_max_col (ARG)
                       _clcd_max_row (ARG)
                    _max_display_str (ARG)
                _max_display_support (ARG)
                      _max_uid_range (ARG)
                      _min_uid_range (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             16 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _clear_cmd_data                                       0     0      0    8915
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6    8915
                                             35 COMRAM     8     2      6
                             ___wmul (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    6979
                                             29 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    6392
                                             23 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getch                                                0     0      0      37
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         1     1      0      37
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     150
                                             17 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     150
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         14    14      0       0
                                              1 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                         _make_array *
 ---------------------------------------------------------------------------------
 (13) _make_array                                          0     0      0       0
                         _heart_beat
 ---------------------------------------------------------------------------------
 (14) _heart_beat                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_SetInterruptHandler
   _TMR0_StartTimer
   _TMR0_StopTimer
   _TMR1_StopTimer
   _TMR5_StopTimer
   __delay_MS
     _TMR1_HasOverflowOccured
     _TMR1_Reload
     _TMR1_StartTimer
     _TMR1_StopTimer
   _cmd_consol_task
     _getch
       _EUSART1_Read
     _memset
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _parse_cmd_str
       _atoi
         ___wmul
           ___awdiv (ARG)
         _isdigit
       _clear_cmd_data
         _memset
           ___wmul (ARG)
             ___awdiv (ARG)
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
       _collect_column
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _collect_row
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_direction
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_dis_frq
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_over_write_data
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_str
         _memset
           ___wmul (ARG)
             ___awdiv (ARG)
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strcpy
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _get_uid
         ___wmul
           ___awdiv (ARG)
         _isdigit
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _memset
         ___wmul (ARG)
           ___awdiv (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
       _strcmp
       _strcpy
       _strlen
         ___wmul (ARG)
           ___awdiv (ARG)
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _clcd_max_col (ARG)
       _clcd_max_row (ARG)
       _max_display_str (ARG)
       _max_display_support (ARG)
       _max_uid_range (ARG)
       _min_uid_range (ARG)
       _putch (ARG)
         _EUSART1_Write
     _puts
       _cputs
         _putch
           _EUSART1_Write
       _putch
         _EUSART1_Write
     _reply_to_host
       _clcd_max_col
       _clcd_max_row
       _init_clcd_cusotom_lcd
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _init_CLCD_config
           __delay_MS
             _TMR1_HasOverflowOccured
             _TMR1_Reload
             _TMR1_StartTimer
             _TMR1_StopTimer
           _clcd_display_string_config
             _memcpy
             _memset
               ___wmul (ARG)
                 ___awdiv (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _printf
               ___awdiv (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _clcd_max_col (ARG)
               _clcd_max_row (ARG)
               _max_display_str (ARG)
               _max_display_support (ARG)
               _max_uid_range (ARG)
               _min_uid_range (ARG)
               _putch (ARG)
                 _EUSART1_Write
             _write_str
               _write_lcd_data
                 _delay
           _memset
             ___wmul (ARG)
               ___awdiv (ARG)
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _reset_clcd
             _clear_display_array
               _memset
                 ___wmul (ARG)
                   ___awdiv (ARG)
                 _strlen (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
               _reset_display_structure_count
                 _clear_display_structure
                   _memset
                     ___wmul (ARG)
                       ___awdiv (ARG)
                     _strlen (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
             _reset_display_structure_count
               _clear_display_structure
                 _memset
                   ___wmul (ARG)
                     ___awdiv (ARG)
                   _strlen (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
           _write_lcd_cmd
             _delay
         _memset
           ___wmul (ARG)
             ___awdiv (ARG)
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
       _max_display_str
       _max_display_support
       _max_uid_range
       _min_uid_range
       _print_conflict_ids
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
       _puts
         _cputs
           _putch
             _EUSART1_Write
         _putch
           _EUSART1_Write
       _set_string_data
         ___wmul
           ___awdiv (ARG)
         _conflict
           ___wmul
             ___awdiv (ARG)
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
         _copy_display_struct
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
           _strcpy
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _get_new_uid
           ___awmod
             _rand (ARG)
               ___lmul
           ___wmul
             ___awdiv (ARG)
           _rand
             ___lmul
           _srand
         _memset
           ___wmul (ARG)
             ___awdiv (ARG)
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
       _strcmp
       _update_string_data
         ___wmul
           ___awdiv (ARG)
         _conflict_check
           ___wmul
             ___awdiv (ARG)
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
         _copy_data
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
           _strcpy
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _make_display
           ___wmul
             ___awdiv (ARG)
           _display_text
             _char_enter_mode_left_to_right
               _write_lcd_cmd
                 _delay
             _set_cursor
               _write_lcd_cmd
                 _delay
             _write_lcd_cmd
               _delay
             _write_str
               _write_lcd_data
                 _delay
           _scroll_left_to_right
             ___wmul (ARG)
               ___awdiv (ARG)
             _memset (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _strncpy (ARG)
           _scroll_off
             ___wmul (ARG)
               ___awdiv (ARG)
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _scroll_right_to_left
             ___wmul (ARG)
               ___awdiv (ARG)
             _memset (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _strncpy (ARG)
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _memset
           ___wmul (ARG)
             ___awdiv (ARG)
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
     _strcmp
   _console_init
     _clear_cmd_data
       _memset
         ___wmul (ARG)
           ___awdiv (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _memset
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _make_display
     ___wmul
       ___awdiv (ARG)
     _display_text
       _char_enter_mode_left_to_right
         _write_lcd_cmd
           _delay
       _set_cursor
         _write_lcd_cmd
           _delay
       _write_lcd_cmd
         _delay
       _write_str
         _write_lcd_data
           _delay
     _scroll_left_to_right
       ___wmul (ARG)
         ___awdiv (ARG)
       _memset (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strncpy (ARG)
     _scroll_off
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _scroll_right_to_left
       ___wmul (ARG)
         ___awdiv (ARG)
       _memset (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strncpy (ARG)
     _strlen
       ___wmul (ARG)
         ___awdiv (ARG)
   _printf
     ___awdiv (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
     _clcd_max_col (ARG)
     _clcd_max_row (ARG)
     _max_display_str (ARG)
     _max_display_support (ARG)
     _max_uid_range (ARG)
     _min_uid_range (ARG)
     _putch (ARG)
       _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _make_array *
         _heart_beat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     44C      37       28.2%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      E      93       7       57.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4F       1       84.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     218      12        0.0%
DATA                 0      0     664       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Nov 02 20:45:12 2017

                       _eusart1TxBufferRemaining 00F8                               set_string_data@uid 017A  
                          __end_of_parse_cmd_str 0C98                              set_string_data@data 0038  
                                   ___awdiv@sign 0015                            _init_clcd_cusotom_lcd 2E40  
                            ___wmul@multiplicand 001A                                  _timer0ReloadVal 004E  
                                   __CFG_CP0$OFF 000000                                     __CFG_CP1$OFF 000000  
                                   __CFG_CP2$OFF 000000                                     __CFG_CP3$OFF 000000  
                                    __CFG_LVP$ON 000000                                              l193 3D76  
                                            l915 0E40                                              _CMD 00E3  
                                   __CFG_CPB$OFF 000000                                     __CFG_CPD$OFF 000000  
                                ?_conflict_check 0030                                    ?_display_text 0001  
                                _timer1ReloadVal 00F4                                              _str 0186  
                      collect_column@data_column 0032                                     ___awmod@sign 0023  
                                            prod 000FF3                                 _LCD_16x2_DISPLAY 007E  
                                            tosl 000FFD                                              wreg 000FE8  
                                   get_dis_frq@i 0036                                             l1310 2FE2  
                                           l1560 3AD4                                             l1570 3CD8  
                                           l1809 3B74                                             l1819 3B24  
                                           l1773 30A0                                             l1768 2FFC  
                                           l7020 3830                                             l7012 3816  
                                           l7110 1AB2                                             l7032 385C  
                                           l7024 3844                                             l7016 3824  
                                           l7008 380A                                             l7042 3D40  
                                           l7202 1F86                                             l7018 382C  
                                           l7036 3D22                                             l7028 384E  
                                           l7140 1C5A                                             l7302 40B4  
                                           l8030 03AC                                             l7206 1F8C  
                                           l7150 1D06                                             l7142 1C60  
                                           l8120 0626                                             l8016 0342  
                                           l7320 3720                                             l7208 1F90  
                                           l7128 1BA6                                             l8202 0866  
                                           l8210 086E                                             l7330 3742  
                                           l7314 3710                                             l7154 1D0C  
                                           l8124 062A                                             l7180 1E26  
                                           l7164 1D46                                             l7260 2DF6  
                                           l7244 2D68                                             l7156 1D10  
                                           l6550 3F80                                             l6630 3AAE  
                                           l6702 2AC0                                             l8206 086A  
                                           l7326 3736                                             l7342 3768  
                                           l7430 41B0                                             l7254 2DC8  
                                           l7246 2D72                                             l6704 2AF6  
                                           l7360 3AE8                                             l8304 0BBE  
                                           l8312 0BC6                                             l8320 0BCE  
                                           l8224 08C8                                             l8128 062E  
                                           l8072 04E6                                             l8080 04EE  
                                           l7328 373E                                             l7352 3F1C  
                                           l7192 1EDA                                             l7256 2DF0  
                                           l7264 2E1C                                             l7520 18A4  
                                           l6800 391A                                             l7280 294E  
                                           l6554 3F90                                             l6626 3AA2  
                                           l6650 3CBA                                             l6570 3D98  
                                           l6714 2B1E                                             l7370 3B40  
                                           l7362 3AF0                                             l7346 3776  
                                           l7338 375E                                             l7442 4194  
                                           l7194 1EE0                                             l7274 28C2  
                                           l8402 0EEC                                             l6628 3AAA  
                                           l6572 3D9C                                             l6732 2B66  
                                           l6716 2B22                                             l6740 2BC2  
                                           l8308 0BC2                                             l8316 0BCA  
                                           l8324 0BD2                                             l8332 0BDA  
                                           l8076 04EA                                             l6820 3C76  
                                           l7356 3F32                                             l6804 3A46  
                                           l7532 190E                                             l7540 1922  
                                           l6900 10F6                                             l7268 2836  
                                           l6638 3ACA                                             l6654 3CCE  
                                           l6646 3CAE                                             l6558 3D64  
                                           l6734 2B6C                                             l8342 0C36  
                                           l8190 085A                                             l7470 41BE  
                                           l6582 3BA8                                             l7454 41A2  
                                           l7550 1956                                             l7534 1912  
                                           l7286 29D8                                             l7622 20F6  
                                           l7606 206E                                             l8422 0F84  
                                           l8430 0FC0                                             l7376 3E86  
                                           l6648 3CB6                                             l6728 2B54  
                                           l6680 2A26                                             l6744 3DE4  
                                           l6840 3F52                                             l7368 3B38  
                                           l8328 0BD6                                             l8336 0BDE  
                                           l6816 3C6E                                             l6760 3D10  
                                           l6576 3B90                                             l6808 3A5A  
                                           l7560 1A1C                                             l7536 191E  
                                           l6912 1144                                             l6904 1110  
                                           l7288 29DC                                             l7632 216E  
                                           l7616 20F2                                             l8416 0F50  
                                           l7386 3EAC                                             l6738 2BBA  
                                           l6674 2A10                                             l6746 3DE8  
                                           l6842 3F5A                                             l7722 38CA  
                                           l7706 314E                                             l8194 085E  
                                           l8354 0C6C                                             l7482 41CC  
                                           l6754 3CF4                                             l6586 3BAE  
                                           l6578 3B98                                             l6770 3DC4  
                                           l7562 1A3A                                             l6922 133C  
                                           l7634 2174                                             l7642 21AA  
                                           l8450 105E                                             l8426 0FA2  
                                           l8418 0F66                                             l8522 224C  
                                           l6692 2A7A                                             l7820 3322  
                                           l7732 345E                                             l8348 0C40  
                                           l6828 3C8A                                             l6588 3BB2  
                                           l6772 3DCA                                             l6764 3DA6  
                                           l7492 33CE                                             l7548 194A  
                                           l7564 1A40                                             l6860 14AA  
                                           l6924 1394                                             l6908 112A  
                                           l7628 2124                                             l7644 21B0  
                                           l8372 0D42                                             l8364 0CC2  
                                           l8516 2230                                             l6694 2AA4  
                                           l6678 2A20                                             l7814 32EC  
                                           l8198 0862                                             l7494 33F4  
                                           l7558 1A16                                             l6782 413C  
                                           l6950 2C68                                             l6918 1290  
                                           l7654 221E                                             l8438 1010  
                                           l8390 0E56                                             l8382 0DC0  
                                           l8550 2332                                             l6688 2A50  
                                           l7680 3274                                             l7752 34A8  
                                           l7736 3462                                             l7728 342A  
                                           l7760 3566                                             l6776 3DD0  
                                           l7488 3382                                             l7496 33F8  
                                           l7584 1A96                                             l7576 1A80  
                                           l6880 1626                                             l6872 14F8  
                                           l6864 14C4                                             l6928 13E6  
                                           l8376 0D84                                             l8368 0D00  
                                           l8536 22A4                                             l8528 226A  
                                           l6698 2AB8                                             l7674 323E  
                                           l7738 3466                                             l7770 35AA  
                                           l6794 3900                                             l8466 10C6  
                                           l8458 1092                                             l8394 0E88  
                                           l8546 2326                                             l7828 3362  
                                           l7764 359A                                             l7772 35AE  
                                           l7692 30BC                                             l7860 3BCA  
                                           l6796 390A                                             l6788 38D8  
                                           l6884 16D4                                             l6868 14DE  
                                           l6964 2CE0                                             l8388 0E24  
                                           l8564 23B2                                             l8556 2360  
                                           l8548 232C                                             l8708 39C6  
                                           l7862 3BD2                                             l7854 3094  
                                           l7846 304E                                             l7838 300E  
                                           l6966 2CFA                                             l6974 2D1E  
                                           l8398 0EBA                                             l8582 241E  
                                           l8574 23F6                                             l7872 2F20  
                                           l7688 32B4                                             l7784 34CE  
                                           l7944 0154                                             l6992 36F0  
                                           l6888 1720                                             l8576 240C  
                                           l7890 2FAC                                             l7874 2F24  
                                           l7794 3512                                             l7698 3110  
                                           l7866 3C06                                             l7962 01C2  
                                           l8586 2426                                             l7892 2FB0  
                                           l7884 2F64                                             l7788 3502  
                                           l7796 3516                                             l7948 0158  
                                           l7888 2F76                                             l7978 0238  
               __size_of_clear_display_structure 001E                                             STR_1 FF71  
                                           STR_2 FF68                                             STR_3 FDEF  
                                           STR_4 FE12                                             STR_5 FFE6  
                                           STR_6 FD25                                             STR_7 FD59  
                                           STR_8 FD3F                                             STR_9 FD59  
                                           _LATA 000F89                                             _LATB 000F8A  
                                           _LATC 000F8B                                             _LATD 000F8C  
                                           _LATE 000F8D                                             u7130 2144  
                                           u6500 1AC6                                             i2l60 004E  
                                           i2l62 005E                                             u5910 4200  
                                           u8400 2348                                             i2l66 006A  
                        _TMR1_HasOverflowOccured 41F8                                             u5940 2A72  
                                           u5950 2A9C                                             u5947 2A68  
                                           u5957 2A92                                             _TMR1 000FCE  
                                           _TMR5 000F4F                                             _WPUB 000F61  
                                  _EUSART1_Write 3D62                                    ?_make_display 0001  
                                           _atoi 2F1E                                             _main 3986  
                                           _rand 39DE                                    ?_EUSART1_Read 0001  
                                _TMR0_StartTimer 4264                                             fsr0h 000FEA  
                                           fsr1h 000FE2                                             indf0 000FEF  
                                           fsr2h 000FDA                                             fsr0l 000FE9  
                                           indf1 000FE7                                             indf2 000FDF  
                                           fsr1l 000FE1                                             fsr2l 000FD9  
                                           btemp 0050                                             _puts 4146  
                                  __CFG_BORV$190 000000                            ??_get_over_write_data 0034  
                                           prodh 000FF4                                             prodl 000FF3  
                                           start 00A6                                  _timer5ReloadVal 00F6  
                                  __CFG_IESO$OFF 000000                             __end_of_clcd_max_col 41D0  
                           __end_of_clcd_max_row 41C2                                    ?_console_init 0001  
                                   ___param_bank 000000                                     collect_row@i 0035  
                                   get_new_uid@i 002B                    set_string_data@conflict_count 017B  
                        __end_of_TMR0_Initialize 3E4C                   ??_TMR0_DefaultInterruptHandler 0001  
                 __size_of_OSCILLATOR_Initialize 000E                    __end_of_OSCILLATOR_Initialize 41DE  
                                    make_array@i 0085                                            ?_atoi 001E  
                                          ?_main 0001                                            ?_rand 001C  
                                __end_of___awdiv 3780                                   ??_display_text 001B  
                                          STR_10 FD3F                                            STR_11 FD25  
                                          STR_20 FCEC                                            STR_12 FDC6  
                                          STR_13 FFE1                                            STR_21 FDB8  
                                          STR_30 FE97                                            STR_22 FE33  
                                          STR_14 FCAA                                            STR_31 FF82  
                                          STR_15 FE62                                            STR_23 FE23  
                                          STR_40 FFA0                                            STR_32 FFA0  
                                          STR_24 FEC7                                            STR_16 FCD1  
                                          STR_33 FFEB                                            STR_41 FFBB  
                                          STR_25 FEA3                                            STR_17 FC83  
                                          STR_34 FFEF                                            STR_42 FFC7  
                                          STR_50 FF4D                                            STR_18 FE43  
                                          STR_26 FE01                                            STR_51 FFA0  
                                          STR_19 FFDC                                            STR_35 FFB5  
                                          STR_43 FED3                                            STR_27 FDA5  
                                          STR_60 FFA0                                            STR_44 FFA0  
                                          STR_36 FF7A                                            STR_52 FF56  
                                          STR_28 FDDD                                  __end_of___awmod 3866  
                                          STR_45 FED3                                            STR_37 FFD7  
                                          STR_53 FFA7                                            STR_29 FEBB  
                                          STR_61 FD8C                                            STR_70 FFA0  
                                          STR_62 FFA0                                            STR_54 FFA0  
                                          STR_46 FFA0                                            STR_38 FFA0  
                                          STR_71 FD0A                                            STR_39 FF99  
                                          STR_47 FF8A                                            STR_63 FF2F  
                                          STR_55 FE8B                                            STR_80 FFA0  
                                          STR_72 FFA0                                            STR_56 FFA0  
                                          STR_48 FF44                                            STR_64 FD73  
                                          STR_73 FCEF                                            STR_81 FFA0  
                                          STR_49 FFA0                                            STR_65 FFAE  
                                          STR_57 FD0A                                            STR_74 FFA0  
                                          STR_58 FFA0                                            STR_90 FFF7  
                                          STR_82 FFF3                                            STR_66 FFD2  
                                          STR_75 FD8C                                            STR_91 FFEF  
                                          STR_83 FFF3                                            STR_67 FF5F  
                                          STR_59 FCEF                                            STR_84 FF09  
                                          STR_92 FF19                                            STR_76 FFA0  
                                          STR_68 FFFD                                            STR_77 FF2F  
                                          STR_85 FFB5                                            STR_93 FFF7  
                                          STR_69 FF3A                                            STR_78 FD73  
                                          STR_94 FFD7                                            STR_86 FF24  
                                          STR_95 FF1D                                            STR_79 FFA0  
                                          STR_87 FFF7                                            STR_88 FFEB  
                                          STR_96 FFF7                                            STR_97 FFBB  
                                          STR_89 FF19                                            STR_98 FF0E  
                                          STR_99 FDC6                                  _TMR1_StartTimer 4260  
                                          ?_puts 0014                                            _T0CON 000FD5  
                                ___awdiv@divisor 0012                                            _T1CON 000FCD  
                                          _T5CON 000F4E                                   __CFG_DEBUG$OFF 000000  
                                __end_of___lwdiv 3ADE                                  ??_get_direction 0034  
                                __end_of___lwmod 3CE2                                            i2l205 3F16  
                                ___awdiv@counter 0014                      __size_of_print_conflict_ids 00A4  
                                          _TMR0H 000FD7                                            _TMR1H 000FCF  
                                          _TMR0L 000FD6                                            _TMR1L 000FCE  
                                          _TMR5H 000F50                                            _TMR5L 000F4F  
                                          _PORTD 000F83                                            _TRISA 000F92  
                                          _TRISB 000F93                                            _TRISC 000F94  
                                          _TRISD 000F95                                            _TRISE 000F96  
                      __size_of_init_CLCD_config 00B4                __size_of_TMR0_SetInterruptHandler 000A  
                                  __CFG_WRT0$OFF 000000                                    __CFG_WRT1$OFF 000000  
                                  __CFG_WRT2$OFF 000000                              ___lmul@multiplicand 0014  
                      ?_TMR0_SetInterruptHandler 0010                                    __CFG_WRT3$OFF 000000  
                           _EUSART1_Transmit_ISR 3EE8                                   __CFG_EBTR0$OFF 000000  
                                 __CFG_FCMEN$OFF 000000                                   __CFG_EBTR1$OFF 000000  
                                 __CFG_EBTR2$OFF 000000                                   __CFG_EBTR3$OFF 000000  
                               __end_of_TMR0_ISR 418A                                  __end_of_get_uid 3160  
                                  __CFG_WRTB$OFF 000000                                    __CFG_WRTC$OFF 000000  
                                __end_of_get_str 38CE                                    __CFG_WRTD$OFF 000000  
                                          _check 0080                                   __CFG_EBTRB$OFF 000000  
                                          _delay 3B7E                                            _getch 4240  
                                __end_of_dpowers FC83                          __end_of_max_display_str 41B4  
                                          _cputs 3F1A                                  __end_of_isdigit 40BC  
                                          _randx 00F9                               __CFG_MCLRE$EXTMCLR 000000  
                                          atoi@a 0023                                            _srand 415A  
                                          atoi@s 001E                                            _putch 4224  
                        __size_of_clear_cmd_data 0032                                   ?_EUSART1_Write 0001  
                        __end_of_TMR1_Initialize 4080                                            pclath 000FFA  
                                 ??_make_display 003A                                            tablat 000FF5  
                                 ??_EUSART1_Read 0010                                            puts@s 0014  
                                          status 000FD8                                   __CFG_HFOFST$ON 000000  
                                __end_of_strcspn 3B7E                                  __end_of_strncpy 392C  
                           _scroll_right_to_left 10DA                                   __CFG_PBADEN$ON 000000  
                       scroll_right_to_left@line 0039                                  _TMR5_Initialize 3FF4  
                                 ??_console_init 002C                                  __initialization 35E8  
                                 get_dis_frq@frq 0035                                   get_dis_frq@str 0030  
                                   __end_of_atoi 2FEC                       __end_of_EUSART1_Initialize 3E82  
                                   __end_of_main 39DE                                     __end_of_rand 3A36  
                                   __end_of_puts 415A                           ?_init_clcd_cusotom_lcd 0030  
                                 get_direction@i 0035                      __end_of_copy_display_struct 2824  
                    ?_INTERRUPT_InterruptManager 0001                    __size_of_scroll_left_to_right 0340  
                               _cmd_consol_state 0082                                           ??_atoi 0020  
                                         ??_main 0041                                           ??_rand 001E  
                                         ??_puts 0016                                 ??_write_lcd_data 0017  
                                  __activetblptr 000003                                   __CFG_PLLCFG$ON 000000  
                            collect_row@data_row 0032                                    __delay_MS@val 0013  
                          ?_EUSART1_Transmit_ISR 0001                        ??_TMR1_HasOverflowOccured 0010  
                                reply_to_host@ch 00FE                                           ?_delay 0010  
                        __end_of_TMR0_StartTimer 4268                                           ?_getch 0001  
                                         ?_cputs 0012                                           STR_100 FE71  
                                         STR_101 FFBB                                           STR_110 FFA7  
                                         STR_102 FFC7                                           STR_103 FE71  
                                         STR_111 FFAE                                           STR_112 FF1F  
                                         STR_120 FF1D                                           STR_104 FFC7  
                                         STR_105 FF8A                                           STR_113 FFC1  
                                         STR_121 FE53                                           STR_114 FE71  
                                         STR_106 FE71                                           STR_122 FFD2  
                                         STR_130 FFFA                                           STR_123 FF1F  
                                         STR_115 FFAE                                           STR_107 FF8A  
                                         STR_131 FFFA                                           STR_116 FF1D  
                                         STR_108 FFA7                                           STR_132 FFCD  
                                         STR_124 FE7E                                           STR_109 FE71  
                                         STR_125 FF03                                           STR_117 FEF7  
                                         STR_133 FEEB                                           STR_126 FF03  
                                         STR_118 FF1D                                           STR_134 FEAF  
                                         STR_127 FF03                                           STR_135 FF1F  
                                         STR_119 FEDF                                           STR_128 FF03  
                                         STR_136 FFC1                                           STR_129 FCEC  
                                         STR_137 FDCB                                           STR_138 FF92  
                               ___awdiv@dividend 0010                                           ?_srand 0010  
                                         _ANSELA 000F38                                           ?_putch 0001  
                                         _ANSELB 000F39                                           _ANSELC 000F3A  
                                         _ANSELD 000F3B                                           _ANSELE 000F3C  
                                         _T1GCON 000FCC                                           _T5GCON 000F4D  
                       __size_of_cmd_consol_task 021C                                   __CFG_WDTEN$OFF 000000  
                                         i2l6242 3F10                                           i2l6256 3FCA  
                                         i2l6248 3FAA                                           _RCREG1 000FAE  
                                         _RCSTA1 000FAB                                           _OSCCON 000FD3  
                                         _SPBRG1 000FAF                                           _TXREG1 000FAD  
                          ?_scroll_right_to_left 002C                                           _TXSTA1 000FAC  
                         __size_of_max_uid_range 000E                              _clear_display_array 403E  
                                 __CFG_XINST$OFF 000000                                collect_column@str 0030  
                           __size_of_get_dis_frq 0098                                 __end_of_conflict 1FAE  
                                         ___lmul 3A36                          __end_of_TMR1_StartTimer 4264  
                                   ?_TMR1_Reload 0001                                           ___wmul 3FCE  
                                      ??___awdiv 0014                                   __CFG_STVREN$ON 000000  
                                      ??___awmod 0022                                        ??___lwdiv 0014  
                           __size_of_collect_row 00AE                                        ??___lwmod 001B  
                           __size_of_get_new_uid 0106                                  _set_string_data 17CE  
                                         _memcpy 3CE2                                 ?_TMR0_Initialize 0001  
                                         _memset 3F76                                           delay@i 0015  
                                         clear_0 3630                                           clear_1 3642  
                                         clear_2 364E                                           clear_3 365A  
                                         clear_4 3666                                 ___awdiv@quotient 0016  
                                ___awmod@divisor 0020                                  ___awmod@counter 0022  
                                         _printf 2A06                                           _strchr 3D22  
                                         _strcmp 3BC8                     scroll_off@display_char_count 002D  
                                      ??_get_uid 0028                                           _strcpy 3F48  
                                         _strlen 3DDA                                 conflict@conflict 0034  
                                      ??_get_str 0030                                           _strtok 2FEC  
                                         _strspn 3ADE                                  _TMR5_StartTimer 424C  
                                         cputs@s 0012                                        ??_isdigit 0010  
                           ?_clear_display_array 0001                                     __mediumconst FC78  
                                         tblptrh 000FF7                                           tblptrl 000FF6  
                                         tblptru 000FF8                                           srand@x 0010  
                          __end_of_TMR0_CallBack 403E                                  ??_EUSART1_Write 0010  
                        _clear_display_structure 4080         TMR0_SetInterruptHandler@InterruptHandler 0010  
                               ?_max_display_str 0001                                        ??_strcspn 0018  
                                _eusart1RxBuffer 0060                      __end_of_max_display_support 421A  
                                      ??_strncpy 0016                    __size_of_INTERRUPT_Initialize 0004  
                               ??_collect_column 0034                                  _eusart1TxBuffer 0068  
                               ?_TMR1_Initialize 0001                          __end_of_TMR5_Initialize 401A  
                ??_reset_display_structure_count 002C                                _SYSTEM_Initialize 40BC  
                          __size_of_clcd_max_col 000E                                       __accesstop 0060  
                          __size_of_clcd_max_row 000E                          __end_of__initialization 366C  
                             __size_of__delay_MS 0044  scroll_left_to_right@clcd_display_string_details 002C  
                             ?_SYSTEM_Initialize 0001                             __end_of_display_text 36FC  
                                  ___rparam_used 000001              __size_of_clcd_display_string_config 005A  
                                 __pcstackCOMRAM 0001                                     __pidataBANK0 4252  
                                   __pidataBANK1 41DE                              ??_SYSTEM_Initialize 0014  
                                      ?_TMR0_ISR 0001                                    __end_of_delay 3BC8  
                                  __end_of_getch 4246                                 ??_conflict_check 0032  
                                  __end_of_cputs 3F48                             _display_struct_count 0074  
                           cmd_consol_task@_1896 0078                                    __end_of_srand 416A  
                                  __end_of_putch 422E                              get_dis_frq@data_frq 0032  
                           __end_of_make_display 2A06                             __end_of_EUSART1_Read 3EB6  
                                 collect_row@row 0037                                   collect_row@str 0030  
                     __end_of_update_string_data 2222                           __size_of_write_lcd_cmd 001C  
                         ??_EUSART1_Transmit_ISR 0001                            __end_of_reply_to_host 10DA  
                          ??_clear_display_array 002C                  update_string_data@exist_uid_idx 017C  
                               _init_CLCD_config 3160                                   get_new_uid@uid 0029  
                                  _max_uid_range 4198                           __size_of_min_uid_range 000E  
                    __end_of_EUSART1_Receive_ISR 3FCE                                     _clcd_max_col 41C2  
                                   _clcd_max_row 41B4                             __end_of_console_init 37F6  
                                        ??_delay 0012                                          ??_getch 0011  
                               ?_TMR0_StartTimer 0001                                          ??_cputs 0014  
                      __end_of_SYSTEM_Initialize 40DA                                   _clear_cmd_data 3EB6  
                                        ??_srand 0012                                          ??_putch 0011  
                                  _eusart1RxHead 0045                                    _eusart1TxHead 0047  
                             __size_of_copy_data 01F4                                    _eusart1RxTail 0046  
                                     __pbssBANK0 0060                                       __pbssBANK1 0100  
                                     __pbssBANK2 0200                                    _eusart1TxTail 0048  
                         ??_scroll_right_to_left 002E                                       _data_count 0043  
                                     __pnvCOMRAM 004E                          __end_of_set_string_data 1A9A  
          scroll_off@clcd_display_string_details 0024                                ??_cmd_consol_task 0184  
                             __CFG_CCP2MX$PORTC1 000000                 __end_of_TMR0_SetInterruptHandler 4238  
                        __size_of_TMR0_StopTimer 0004                                          ?___lmul 0010  
                                        ?___wmul 0018                                 ?_TMR1_StartTimer 0001  
                                     ??_TMR0_ISR 0002                          __end_of_TMR5_StartTimer 4252  
                             __CFG_CCP3MX$PORTB5 000000                  ??_char_enter_mode_left_to_right 0018  
                                        ?_memcpy 0010                                          ?_memset 0024  
                                 ___lmul@product 0018                      get_direction@data_direction 0032  
                                        ?_printf 001E                                          ?_strchr 0010  
                                        ?_strcmp 0010                                          ?_strcpy 0010  
                                        ?_strlen 001E                                       _heart_beat 40DA  
                        __size_of_TMR1_StopTimer 0004                                          ?_strtok 001B  
                                        ?_strspn 0014                                __end_of__delay_MS 3CA0  
                                 ?_max_uid_range 0001                        ??_clear_display_structure 002C  
                                        _OSCCON2 000FD2                           __end_of_clear_cmd_data 3EE8  
                                        _OSCTUNE 000F9B                                          _SPBRGH1 000FB0  
                         copy_data@clcd_str_data 0030                                        ?_conflict 0030  
                               write_lcd_cmd@cmd 0017                      __end_of_get_over_write_data 3550  
                               _print_data_ready 0076                                       _make_array 4204  
                         __size_of_parse_cmd_str 0BEE                                 ?_TMR5_Initialize 0001  
                                  _write_lcd_cmd 40F8                                  __CFG_PWRTEN$OFF 000000  
                             __size_of_write_str 003A            __end_of_reset_display_structure_count 417A  
         __size_of_reset_display_structure_count 0010                    _reset_display_structure_count 416A  
                                        __Hparam 0000                          ??_init_clcd_cusotom_lcd 0031  
                                  _min_uid_range 418A                                          __Lparam 0000  
                           reply_to_host@ch_1876 00FF  scroll_right_to_left@clcd_display_string_details 002C  
                       set_string_data@end_point 0179                                          ___awdiv 36FC  
                                __size_of___lmul 0056                                          ___awmod 37F6  
                                __size_of___wmul 0026                                          ___lwdiv 3A8C  
                                        ___lwmod 3CA0               __end_of_clcd_display_string_config 3986  
                     _clcd_display_string_config 392C                                    copy_data@data 0032  
                              __end_of_copy_data 2632                             __size_of_TMR1_Reload 000C  
                                        __pcinit 35E8                                  __size_of_memcpy 0040  
                     __end_of_print_conflict_ids 3414                                  __size_of_memset 002C  
                                        __ramtop 1000                                          __ptext0 3986  
                                        __ptext1 3780                                          __ptext2 2222  
                                        __ptext3 0C98                                          __ptext4 1FAE  
                                        __ptext5 2824                                          __ptext6 10DA  
                                        __ptext7 2BDE                                          __ptext8 148E  
                                        __ptext9 38CE                                  __size_of_printf 01D8  
                           get_over_write_data@i 0036                                          _get_uid 30AA  
                                        _display 0083                                          _get_str 3866  
                                      _T0CONbits 000FD5                          __size_of_TMR5_StopTimer 0006  
                                __size_of_strchr 0040                                  __size_of_strcmp 004A  
                                __size_of_strcpy 002E                                  __size_of_strlen 003A  
                                      _T1CONbits 000FCD                                  __size_of_strtok 00BE  
                                __size_of_strspn 0050                                          _dpowers FC79  
                          _OSCILLATOR_Initialize 41D0                                       delay@delay 0010  
                                        _isdigit 409E                                 ___awmod@dividend 001E  
                          __end_of_get_direction 34B8                               _EUSART1_Initialize 3E4C  
                       ??_PIN_MANAGER_Initialize 0010                                        _T5CONbits 000F4E  
                                ?_clear_cmd_data 0001                       __size_of_SYSTEM_Initialize 001E  
                                     ??_conflict 0031                                          _strcspn 3B2E  
                                        _strncpy 38CE                            __size_of_display_text 0086  
                           end_of_initialization 366C                     __end_of_scroll_left_to_right 17CE  
                            ?_EUSART1_Initialize 0001                                          memcpy@d 0016  
                                        memcpy@n 0014                                          memcpy@s 0018  
                                 ?_write_lcd_cmd 0001                                      scroll_off@i 0031  
                                    scroll_off@j 002F                                      scroll_off@k 002A  
                                        memset@c 0026                                          memset@n 0028  
                                        memset@p 002A                                 cmd_consol_task@i 007A  
                                 ?_min_uid_range 0001                  __end_of_clear_display_structure 409E  
                               ?_set_string_data 0038                                       _reset_clcd 421A  
                                     _set_cursor 4130                                          printf@c 002F  
                                        printf@f 001E                            __size_of_make_display 01E2  
                                     _scroll_off 2BDE                                          postdec1 000FE5  
                                        postdec2 000FDD                                          postinc0 000FEE  
                                        postinc1 000FE6                                          postinc2 000FDE  
                          __size_of_EUSART1_Read 0034                                     _conflict_arr 00BB  
                               ?_TMR5_StartTimer 0001                             ??_EUSART1_Initialize 0010  
                                        strcmp@r 0015                                    _parse_cmd_str 00AA  
                                        strlen@s 001E                                  ??_max_uid_range 0010  
                                        strspn@i 0019                         _TMR0_SetInterruptHandler 422E  
                                      _PORTAbits 000F80                                        _PORTDbits 000F83  
                          __size_of_console_init 0076                                      ?_heart_beat 0001  
                          _TMR5_InterruptHandler 0072            __end_of_char_enter_mode_left_to_right 4240  
         __size_of_char_enter_mode_left_to_right 0008                    _char_enter_mode_left_to_right 4238  
                                   _display_text 3676                                __end_of_write_str 3DDA  
                   __size_of_copy_display_struct 01F2               init_clcd_cusotom_lcd@clcd_init_col 0030  
                             write_lcd_data@data 0017               init_clcd_cusotom_lcd@clcd_init_row 0031  
                            EUSART1_Write@txData 0010                                      ?_make_array 0001  
                                     get_uid@uid 002C                                     _make_display 2824  
                                     get_uid@str 0024                                    ??_get_dis_frq 0034  
                                   _EUSART1_Read 3E82                                       get_str@str 002C  
                       __end_of_init_CLCD_config 3214                                    ??_collect_row 0034  
                                  ??_get_new_uid 0026                                _lcd_display_array 0100  
                                 _TMR0_StopTimer 425C                                     _console_init 3780  
                              make_display@count 003D                     __end_of_INTERRUPT_Initialize 426C  
                                   write_str@str 0018                                   ?_parse_cmd_str 0038  
                 ?_reset_display_structure_count 0001                                   __end_of___lmul 3A8C  
                                 __end_of___wmul 3FF4                                  collect_column@i 0035  
                              __size_of_TMR0_ISR 0010                                   _TMR1_StopTimer 4258  
                                 __end_of_memcpy 3D22                           ?_OSCILLATOR_Initialize 0001  
                                 __end_of_memset 3FA2                         ?_TMR1_HasOverflowOccured 0001  
                                 __end_of_printf 2BDE                           conflict_check@conflict 0036  
                                 __end_of_strchr 3D62                                   __end_of_strcmp 3C12  
                                 __end_of_strcpy 3F76                                   __end_of_strlen 3E14  
                                 __end_of_strtok 30AA                                   __end_of_strspn 3B2E  
                          conflict@new_end_point 0030                              start_initialization 35E8  
                           set_cursor@col_number 0018                          conflict@new_start_point 0035  
                       __size_of_TMR0_Initialize 0038                  __size_of_PIN_MANAGER_Initialize 004A  
                                get_uid@data_uid 0026                                  _cmd_consol_task 2222  
                               get_direction@str 0030                                      putch@txData 0011  
                                ??_write_lcd_cmd 0017                            __end_of_EUSART1_Write 3DA0  
                        __size_of_write_lcd_data 001C                             collect_column@column 0037  
                             _update_string_data 1FAE                                  ??_min_uid_range 0010  
                            __size_of_heart_beat 001E                           __end_of_TMR0_StopTimer 4260  
                   __size_of_max_display_support 000A                         __size_of_max_display_str 000E  
                                    ?_reset_clcd 0001                              ?_update_string_data 003F  
                                  _clcd_init_col 0081                         __size_of_TMR1_Initialize 0020  
                                    ?_set_cursor 0018                                    _clcd_init_row 0041  
                                    ?_scroll_off 0024                                         ??___lmul 0018  
                                       ??___wmul 001C                              __end_of_get_dis_frq 35E8  
                         __size_of_TMR0_CallBack 0024                           __end_of_TMR1_StopTimer 425C  
                                    __pdataBANK0 00F9                                      __pdataBANK1 0186  
                    __end_of_clear_display_array 4060                                         ??_memcpy 0016  
                                       ??_memset 002A                              update_string_data@i 017F  
                           _scroll_left_to_right 148E                                   scroll_off@line 002C  
                            __end_of_collect_row 32C2                              __end_of_get_new_uid 2E40  
                            __size_of_make_array 000C                                         ??_printf 0026  
                                 _TMR5_StopTimer 4246                                         ??_strchr 0014  
                                       ??_strcmp 0014                                         ??_strcpy 0014  
                                       ??_strlen 0020                                         ??_strtok 001F  
                                       ??_strspn 0018                                   _eusart1RxCount 0044  
                   ??_clcd_display_string_config 0030                                      __pbssBIGRAM 0296  
                                    __pbssCOMRAM 0041                             ??_update_string_data 0178  
                  __size_of_EUSART1_Transmit_ISR 0032                                    __pcstackBANK0 00FE  
                                  __pcstackBANK1 0178                                  __delay_MS@delay 0010  
                                      __delay_MS 3C5C                   ?_char_enter_mode_left_to_right 0001  
                                   _isdigit$2306 0011                     __size_of_EUSART1_Receive_ISR 002C  
                              __size_of_conflict 0280                            _TMR0_InterruptHandler 00F2  
                                      __pnvBANK0 00F2                    __size_of_scroll_right_to_left 03B4  
                       __size_of_TMR0_StartTimer 0004                                  ?_TMR0_StopTimer 0001  
                         __size_of_reply_to_host 0442                                 ___lwdiv@dividend 0010  
                         _PIN_MANAGER_Initialize 3C12                                  conflict_check@i 0037  
                                ??_parse_cmd_str 003A                   __size_of_init_clcd_cusotom_lcd 00DE  
                                      __pintcode 0008                          __size_of_collect_column 00AE  
                  __end_of_init_clcd_cusotom_lcd 2F1E                                    __pmediumconst FC78  
                                       ?___awdiv 0010                                         ?___awmod 001E  
                                       ?___lwdiv 0010                                         ?___lwmod 0017  
                __end_of_TMR1_HasOverflowOccured 4204                                  ?_TMR1_StopTimer 0001  
                         __end_of_TMR5_StopTimer 424C                      update_string_data@end_point 017E  
                          ?_scroll_left_to_right 002C                      ?_clcd_display_string_config 0001  
             get_over_write_data@over_write_data 0032                     ??_INTERRUPT_InterruptManager 0002  
                               __CFG_PRICLKEN$ON 000000                           get_over_write_data@str 0030  
                               ??_clear_cmd_data 002C                                parse_cmd_str@temp 003E  
                                       ?_get_uid 0024                                         ?_get_str 002C  
                        __end_of_cmd_consol_task 243E                                        _copy_data 243E  
                                       _BAUDCON1 000FB8                         __size_of_TMR1_StartTimer 0004  
                                       ?_isdigit 0001                          __size_of_conflict_check 0294  
                            __size_of_reset_clcd 000A                                       ?__delay_MS 0010  
                     set_string_data@start_point 0178                                 ___lwdiv@quotient 0015  
                               _clcd_config_data 0049                                   __size_of_delay 004A  
                            __size_of_set_cursor 0016                                   __size_of_getch 0006  
                                 __size_of_cputs 002E                                    _TMR0_CallBack 401A  
                                       ?_strcspn 0014                               _print_conflict_ids 3370  
                            __size_of_scroll_off 015C                                         ?_strncpy 0010  
                                 __size_of_srand 0010                                   __size_of_putch 000A  
                           _INTERRUPT_Initialize 4268                    conflict_check@new_start_point 0030  
                           set_cursor@row_number 0019                                ??_TMR0_Initialize 0012  
                            _conflict_data_count 0042                 copy_display_struct@clcd_str_data 0030  
                                 ___wmul@product 001C                                         _LATEbits 000F8D  
                                    strncpy@from 0012                              ?_print_conflict_ids 0001  
                                    _get_dis_frq 3550                                         _PIE1bits 000F9D  
                                    strncpy@size 0014                     __size_of_get_over_write_data 0098  
                            _copy_display_struct 2632              __size_of_INTERRUPT_InterruptManager 009E  
                                      _valid_cmd 0084                       ??_TMR0_SetInterruptHandler 0012  
                                       _PIR1bits 000F9E                                         i2u461_48 402A  
                                       i2u393_40 40E2                                        _uid_count 00FD  
                                       _PIR5bits 000F7E                                         i2u393_46 40E4  
                                    _collect_row 3214                                      _get_new_uid 2D3A  
                       __size_of_TMR5_Initialize 0026                                         _RCONbits 000FD0  
                                  ??_TMR1_Reload 0010                                 __CFG_WDTPS$32768 000000  
                            parse_cmd_str@column 003D                                         _TMR0_ISR 417A  
                              ??_max_display_str 0010                                  ?_TMR5_StopTimer 0001  
                       ?_clear_display_structure 0001                                ??_TMR1_Initialize 0010  
                                   ??_heart_beat 0001                                ___wmul@multiplier 0018  
                           ??_print_conflict_ids 0030                                       printf@flag 0027  
                                     ?_copy_data 0030                                        conflict@i 0036  
                                     printf@prec 0028                                    _reply_to_host 0C98  
                           ?_copy_display_struct 0030                                   ?_TMR0_CallBack 0001  
                              ___lmul@multiplier 0010                                      _INTCON2bits 000FF1  
                                      copy_data0 35FC                                        copy_data1 361C  
                                      _write_str 3DA0                            ?_INTERRUPT_Initialize 0001  
                                 _write_lcd_data 4114                                     ??_make_array 0002  
                          EUSART1_Read@readValue 0010                           get_direction@direction 0037  
                             __end_of_heart_beat 40F8                                         __Hrparam 0000  
                       scroll_left_to_right@line 0036                                ?_init_CLCD_config 0001  
                  update_string_data@start_point 017D                                         __Lrparam 0000  
                             __CFG_BOREN$SBORDIS 000000                           __size_of_get_direction 00A4  
                             ??_init_CLCD_config 0030                                __CFG_P2BMX$PORTD2 000000  
                         ??_scroll_left_to_right 002E                          ??_OSCILLATOR_Initialize 0010  
                              ??_TMR0_StartTimer 0010                                  get_str@data_str 002E  
                               __size_of___awdiv 0084                                 __size_of___awmod 0070  
                    __size_of_EUSART1_Initialize 0036                                 __size_of___lwdiv 0052  
                               __size_of___lwmod 0042                         __size_of_set_string_data 02CC  
                    _clcd_display_string_details 0296                               __end_of_make_array 4210  
                            __end_of_TMR1_Reload 41F8                            _TMR1_InterruptHandler 0070  
                          __end_of_max_uid_range 41A6                                   ?_reply_to_host 0001  
                               __size_of_get_uid 00B6                                 ?_cmd_consol_task 0001  
                               __size_of_get_str 0068                            ??_copy_display_struct 0035  
                            _max_display_support 4210                         __size_of_TMR5_StartTimer 0006  
                                  ?_clcd_max_col 0001                                         _cmd_data 0086  
                                  ?_clcd_max_row 0001                                 __size_of_isdigit 001E  
                                ___lwdiv@divisor 0012                                      ??__delay_MS 0012  
                         __end_of_write_lcd_data 4130                                  ___lwdiv@counter 0014  
                                       __ptext10 3676                                         __ptext11 4130  
                                       __ptext20 37F6                                         __ptext12 4238  
                                       __ptext21 2632                                         __ptext13 243E  
                                     _T1GCONbits 000FCC                                         __ptext30 2E40  
                                       __ptext22 1D2E                                         __ptext14 1A9A  
                                       __ptext31 3160                                         __ptext23 4146  
                                       __ptext15 17CE                                         __ptext40 3B7E  
                                       __ptext32 40F8                                         __ptext24 3F1A  
                                       __ptext16 2D3A                                         __ptext41 3CE2  
                                       __ptext33 421A                                         __ptext25 3370  
                                       __ptext17 415A                                         __ptext50 2FEC  
                                       __ptext42 3C5C                                         __ptext34 403E  
                                       __ptext26 418A                                         __ptext18 39DE  
                                       __ptext51 3ADE                                         __ptext43 4258  
                                       __ptext35 416A                                         __ptext27 4198  
                                       __ptext19 3A36                                         __ptext60 3414  
                                       __ptext52 3B2E                                         __ptext44 41EC  
                                       __ptext36 4080                                         __ptext28 4210  
                                       __ptext61 3214                                         __ptext53 3D22  
                                       __ptext45 41F8                                         __ptext37 392C  
                                       __ptext29 41A6                                         __ptext70 3F76  
                                       __ptext62 32C2                                         __ptext54 3BC8  
                                       __ptext46 36FC                                         __ptext38 3DA0  
                                       __ptext71 2F1E                                         __ptext63 3DDA  
                                       __ptext55 30AA                                         __ptext47 41B4  
                                       __ptext39 4114                                         __ptext80 424C  
                                       __ptext72 409E                                         __ptext64 2A06  
                                       __ptext56 3866                                         __ptext48 41C2  
                                       __ptext81 4060                                         __ptext73 3FCE  
                                       __ptext65 4224                                         __ptext57 3F48  
                                       __ptext49 00AA                                         __ptext82 4260  
                                       __ptext74 4240                                         __ptext66 3D62  
                                       __ptext58 34B8                                         __ptext91 417A  
                                       __ptext83 3E14                                         __ptext75 3E82  
                                       __ptext67 3CA0                                         __ptext59 3550  
                                       __ptext92 401A                                         __ptext84 4264  
                                       __ptext76 4246                                         __ptext68 3A8C  
                                       __ptext93 426C                                         __ptext85 422E  
                                       __ptext77 425C                                         __ptext69 3EB6  
                                       __ptext94 4204                                         __ptext86 3C12  
                                       __ptext78 40BC                                         __ptext95 40DA  
                                       __ptext87 41D0                                         __ptext79 3FF4  
                                       __ptext96 3EE8                                         __ptext88 4268  
                                       __ptext97 3FA2                                         __ptext89 3E4C  
                                       __ptext98 0000                                       ?_write_str 0018  
                                       _conflict 1D2E                                 parse_cmd_str@ptr 003A  
                               parse_cmd_str@row 003C                                 parse_cmd_str@str 0038  
                              ??_TMR1_StartTimer 0010                                 __size_of_strcspn 0050  
                               __size_of_strncpy 005E                                       strcpy@from 0012  
               __size_of_TMR1_HasOverflowOccured 000C                                    __size_of_atoi 00CE  
                                  __size_of_main 0058                                    __size_of_rand 0058  
                                     _T5GCONbits 000F4D                                    __size_of_puts 0014  
                                       delay@val 0013             __end_of_TMR0_DefaultInterruptHandler 426E  
          __size_of_TMR0_DefaultInterruptHandler 0002                     _TMR0_DefaultInterruptHandler 426C  
                           ?_max_display_support 0010                                     ??_reset_clcd 002C  
                                   ??_set_cursor 0019                                   _collect_column 32C2  
                                   ??_scroll_off 0026                                         _uart_str 0200  
                                       int$flags 0050                                         atoi@sign 0022  
             __end_of_INTERRUPT_InterruptManager 00A6                       _INTERRUPT_InterruptManager 0008  
                                       get_uid@i 002A                                        printf@val 002D  
                                       _str_data 0150                              _EUSART1_Receive_ISR 3FA2  
                                     write_str@i 001A                                ??_TMR5_Initialize 0010  
                                    ??_copy_data 0034                                   ??_clcd_max_col 0010  
                                     _INTCONbits 000FF2                                   ??_clcd_max_row 0010  
                                ??_TMR0_CallBack 0002                                   _conflict_check 1A9A  
                                       memcpy@d1 0010                                         memcpy@s1 0012  
                                  _get_direction 3414                                         isdigit@c 0012  
                                ?_write_lcd_data 0001                           ??_INTERRUPT_Initialize 0010  
                                       memset@p1 0024                               __end_of_reset_clcd 4224  
                             __end_of_set_cursor 4146                           update_string_data@data 003F  
                              cmd_consol_task@ch 0185                                         intlevel2 0000  
                             __end_of_scroll_off 2D3A                                 ??_TMR0_StopTimer 0010  
                           ?_EUSART1_Receive_ISR 0001                                        strchr@chr 0012  
                          __end_of_write_lcd_cmd 4114                                 ___lwmod@dividend 0017  
                                      strchr@ptr 0010                          ?_PIN_MANAGER_Initialize 0001  
                          ??_max_display_support 0012                                       _RCSTA1bits 000FAB  
                                      strcspn@s1 0014                                        strcspn@s2 0016  
                          __end_of_min_uid_range 4198                           __end_of_collect_column 3370  
                   __end_of_EUSART1_Transmit_ISR 3F1A                                 ??_TMR1_StopTimer 0010  
                                      strncpy@cp 0016                          copy_display_struct@data 0032  
                                      strncpy@to 0010                    ?_TMR0_DefaultInterruptHandler 0001  
               print_conflict_ids@conflict_count 0034                                      _TMR1_Reload 41EC  
                                       printf@ap 002B                                         printf@cp 0029  
                  get_over_write_data@over_write 0035                                scroll_off@str_len 002E  
                         __size_of_EUSART1_Write 003E                                  ??_reply_to_host 0181  
                    conflict_check@new_end_point 0031                     __end_of_scroll_right_to_left 148E  
                         __end_of_conflict_check 1D2E                                         strcmp@s1 0010  
                                       strcmp@s2 0012                                  ___lwmod@divisor 0019  
                                _TMR0_Initialize 3E14                                         strcpy@cp 0014  
                                       strlen@cp 0022                                         strcpy@to 0010  
                                ___lwmod@counter 001B                              _get_over_write_data 34B8  
                                       strcspn@i 0019                     __size_of_clear_display_array 0022  
                                 ?_get_direction 0030                      __size_of_update_string_data 0274  
                              ??_set_string_data 003A                                __CFG_T3CMX$PORTC0 000000  
                         copy_display_struct@uid 0034                      conflict_check@exist_uid_idx 0035  
                                       strtok@s1 001B                                         strtok@s2 001D  
                                       strspn@s1 0014                                         strspn@s2 0016  
                                       strtok@sp 007C                                 _LCD_20x4_DISPLAY 007F  
                                    ??_write_str 001A                                ??_TMR5_StartTimer 0010  
                          ??_EUSART1_Receive_ISR 0001                   __end_of_PIN_MANAGER_Initialize 3C5C  
                              __CFG_FOSC$INTIO67 000000                                  _max_display_str 41A6  
                                   ?_get_dis_frq 0030                                  ?_collect_column 0030  
                           ?_get_over_write_data 0030                                  _TMR1_Initialize 4060  
                               ??_TMR5_StopTimer 0010                                     ?_collect_row 0030  
                                   ?_get_new_uid 0024                                 set_string_data@i 017D  
                               set_string_data@j 017E  



Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Oct 28 19:32:22 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F46K22 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK0
   146  0037A2                     __pidataBANK0:
   147                           	opt stack 0
   148                           
   149                           ;initializer for _str
   150  0037A2  49                 	db	73
   151  0037A3  4E                 	db	78
   152  0037A4  49                 	db	73
   153  0037A5  54                 	db	84
   154  0037A6  5F                 	db	95
   155  0037A7  53                 	db	83
   156  0037A8  55                 	db	85
   157  0037A9  43                 	db	67
   158  0037AA  43                 	db	67
   159  0037AB  45                 	db	69
   160  0037AC  53                 	db	83
   161  0037AD  53                 	db	83
   162  0037AE  00                 	db	0
   163                           
   164                           	psect	mediumconst
   165  00FCC4                     __pmediumconst:
   166                           	opt stack 0
   167  00FCC4  00                 	db	0
   168  00FCC5                     _dpowers:
   169                           	opt stack 0
   170  00FCC5  0001               	dw	1
   171  00FCC7  000A               	dw	10
   172  00FCC9  0064               	dw	100
   173  00FCCB  03E8               	dw	1000
   174  00FCCD  2710               	dw	10000
   175  00FCCF                     __end_of_dpowers:
   176                           	opt stack 0
   177  00FCCF                     STR_9:
   178  00FCCF  55                 	db	85	;'U'
   179  00FCD0  49                 	db	73	;'I'
   180  00FCD1  44                 	db	68	;'D'
   181  00FCD2  20                 	db	32
   182  00FCD3  3D                 	db	61	;'='
   183  00FCD4  20                 	db	32
   184  00FCD5  25                 	db	37
   185  00FCD6  63                 	db	99	;'c'
   186  00FCD7  2C                 	db	44
   187  00FCD8  20                 	db	32
   188  00FCD9  73                 	db	115	;'s'
   189  00FCDA  74                 	db	116	;'t'
   190  00FCDB  61                 	db	97	;'a'
   191  00FCDC  72                 	db	114	;'r'
   192  00FCDD  74                 	db	116	;'t'
   193  00FCDE  5F                 	db	95	;'_'
   194  00FCDF  70                 	db	112	;'p'
   195  00FCE0  74                 	db	116	;'t'
   196  00FCE1  20                 	db	32
   197  00FCE2  3D                 	db	61	;'='
   198  00FCE3  20                 	db	32
   199  00FCE4  25                 	db	37
   200  00FCE5  64                 	db	100	;'d'
   201  00FCE6  2C                 	db	44
   202  00FCE7  20                 	db	32
   203  00FCE8  65                 	db	101	;'e'
   204  00FCE9  6E                 	db	110	;'n'
   205  00FCEA  64                 	db	100	;'d'
   206  00FCEB  5F                 	db	95	;'_'
   207  00FCEC  70                 	db	112	;'p'
   208  00FCED  74                 	db	116	;'t'
   209  00FCEE  20                 	db	32
   210  00FCEF  3D                 	db	61	;'='
   211  00FCF0  20                 	db	32
   212  00FCF1  25                 	db	37
   213  00FCF2  64                 	db	100	;'d'
   214  00FCF3  0D                 	db	13
   215  00FCF4  0A                 	db	10
   216  00FCF5  00                 	db	0
   217  00FCF6                     STR_18:
   218  00FCF6  73                 	db	115	;'s'
   219  00FCF7  74                 	db	116	;'t'
   220  00FCF8  72                 	db	114	;'r'
   221  00FCF9  6C                 	db	108	;'l'
   222  00FCFA  65                 	db	101	;'e'
   223  00FCFB  6E                 	db	110	;'n'
   224  00FCFC  20                 	db	32
   225  00FCFD  3D                 	db	61	;'='
   226  00FCFE  20                 	db	32
   227  00FCFF  25                 	db	37
   228  00FD00  64                 	db	100	;'d'
   229  00FD01  2C                 	db	44
   230  00FD02  20                 	db	32
   231  00FD03  69                 	db	105	;'i'
   232  00FD04  3D                 	db	61	;'='
   233  00FD05  25                 	db	37
   234  00FD06  64                 	db	100	;'d'
   235  00FD07  2C                 	db	44
   236  00FD08  20                 	db	32
   237  00FD09  63                 	db	99	;'c'
   238  00FD0A  6F                 	db	111	;'o'
   239  00FD0B  6C                 	db	108	;'l'
   240  00FD0C  2E                 	db	46
   241  00FD0D  2E                 	db	46
   242  00FD0E  20                 	db	32
   243  00FD0F  3D                 	db	61	;'='
   244  00FD10  20                 	db	32
   245  00FD11  25                 	db	37
   246  00FD12  64                 	db	100	;'d'
   247  00FD13  0D                 	db	13
   248  00FD14  0A                 	db	10
   249  00FD15  00                 	db	0
   250  00FD16                     STR_62:
   251  00FD16  63                 	db	99	;'c'
   252  00FD17  6D                 	db	109	;'m'
   253  00FD18  64                 	db	100	;'d'
   254  00FD19  5F                 	db	95	;'_'
   255  00FD1A  64                 	db	100	;'d'
   256  00FD1B  61                 	db	97	;'a'
   257  00FD1C  74                 	db	116	;'t'
   258  00FD1D  61                 	db	97	;'a'
   259  00FD1E  2E                 	db	46
   260  00FD1F  73                 	db	115	;'s'
   261  00FD20  74                 	db	116	;'t'
   262  00FD21  61                 	db	97	;'a'
   263  00FD22  72                 	db	114	;'r'
   264  00FD23  74                 	db	116	;'t'
   265  00FD24  5F                 	db	95	;'_'
   266  00FD25  63                 	db	99	;'c'
   267  00FD26  6F                 	db	111	;'o'
   268  00FD27  6C                 	db	108	;'l'
   269  00FD28  20                 	db	32
   270  00FD29  3D                 	db	61	;'='
   271  00FD2A  20                 	db	32
   272  00FD2B  25                 	db	37
   273  00FD2C  64                 	db	100	;'d'
   274  00FD2D  2C                 	db	44
   275  00FD2E  0D                 	db	13
   276  00FD2F  0A                 	db	10
   277  00FD30  00                 	db	0
   278  00FD31                     STR_60:
   279  00FD31  63                 	db	99	;'c'
   280  00FD32  6D                 	db	109	;'m'
   281  00FD33  64                 	db	100	;'d'
   282  00FD34  5F                 	db	95	;'_'
   283  00FD35  64                 	db	100	;'d'
   284  00FD36  61                 	db	97	;'a'
   285  00FD37  74                 	db	116	;'t'
   286  00FD38  61                 	db	97	;'a'
   287  00FD39  2E                 	db	46
   288  00FD3A  73                 	db	115	;'s'
   289  00FD3B  74                 	db	116	;'t'
   290  00FD3C  61                 	db	97	;'a'
   291  00FD3D  72                 	db	114	;'r'
   292  00FD3E  74                 	db	116	;'t'
   293  00FD3F  5F                 	db	95	;'_'
   294  00FD40  72                 	db	114	;'r'
   295  00FD41  6F                 	db	111	;'o'
   296  00FD42  77                 	db	119	;'w'
   297  00FD43  20                 	db	32
   298  00FD44  3D                 	db	61	;'='
   299  00FD45  20                 	db	32
   300  00FD46  25                 	db	37
   301  00FD47  64                 	db	100	;'d'
   302  00FD48  2C                 	db	44
   303  00FD49  0D                 	db	13
   304  00FD4A  0A                 	db	10
   305  00FD4B  00                 	db	0
   306  00FD4C                     STR_6:
   307  00FD4C  64                 	db	100	;'d'
   308  00FD4D  69                 	db	105	;'i'
   309  00FD4E  73                 	db	115	;'s'
   310  00FD4F  70                 	db	112	;'p'
   311  00FD50  6C                 	db	108	;'l'
   312  00FD51  61                 	db	97	;'a'
   313  00FD52  79                 	db	121	;'y'
   314  00FD53  5F                 	db	95	;'_'
   315  00FD54  63                 	db	99	;'c'
   316  00FD55  68                 	db	104	;'h'
   317  00FD56  61                 	db	97	;'a'
   318  00FD57  72                 	db	114	;'r'
   319  00FD58  5F                 	db	95	;'_'
   320  00FD59  63                 	db	99	;'c'
   321  00FD5A  6F                 	db	111	;'o'
   322  00FD5B  75                 	db	117	;'u'
   323  00FD5C  6E                 	db	110	;'n'
   324  00FD5D  74                 	db	116	;'t'
   325  00FD5E  20                 	db	32
   326  00FD5F  3D                 	db	61	;'='
   327  00FD60  20                 	db	32
   328  00FD61  25                 	db	37
   329  00FD62  64                 	db	100	;'d'
   330  00FD63  0D                 	db	13
   331  00FD64  0A                 	db	10
   332  00FD65  00                 	db	0
   333  00FD66                     STR_8:
   334  00FD66  65                 	db	101	;'e'
   335  00FD67  78                 	db	120	;'x'
   336  00FD68  5F                 	db	95	;'_'
   337  00FD69  73                 	db	115	;'s'
   338  00FD6A  70                 	db	112	;'p'
   339  00FD6B  20                 	db	32
   340  00FD6C  3C                 	db	60	;'<'
   341  00FD6D  3D                 	db	61	;'='
   342  00FD6E  20                 	db	32
   343  00FD6F  6E                 	db	110	;'n'
   344  00FD70  65                 	db	101	;'e'
   345  00FD71  77                 	db	119	;'w'
   346  00FD72  5F                 	db	95	;'_'
   347  00FD73  65                 	db	101	;'e'
   348  00FD74  70                 	db	112	;'p'
   349  00FD75  20                 	db	32
   350  00FD76  3C                 	db	60	;'<'
   351  00FD77  3D                 	db	61	;'='
   352  00FD78  65                 	db	101	;'e'
   353  00FD79  78                 	db	120	;'x'
   354  00FD7A  5F                 	db	95	;'_'
   355  00FD7B  65                 	db	101	;'e'
   356  00FD7C  70                 	db	112	;'p'
   357  00FD7D  0D                 	db	13
   358  00FD7E  0A                 	db	10
   359  00FD7F  00                 	db	0
   360  00FD80                     STR_7:
   361  00FD80  65                 	db	101	;'e'
   362  00FD81  78                 	db	120	;'x'
   363  00FD82  5F                 	db	95	;'_'
   364  00FD83  73                 	db	115	;'s'
   365  00FD84  70                 	db	112	;'p'
   366  00FD85  20                 	db	32
   367  00FD86  3C                 	db	60	;'<'
   368  00FD87  3D                 	db	61	;'='
   369  00FD88  20                 	db	32
   370  00FD89  6E                 	db	110	;'n'
   371  00FD8A  65                 	db	101	;'e'
   372  00FD8B  77                 	db	119	;'w'
   373  00FD8C  5F                 	db	95	;'_'
   374  00FD8D  73                 	db	115	;'s'
   375  00FD8E  70                 	db	112	;'p'
   376  00FD8F  20                 	db	32
   377  00FD90  3C                 	db	60	;'<'
   378  00FD91  3D                 	db	61	;'='
   379  00FD92  65                 	db	101	;'e'
   380  00FD93  78                 	db	120	;'x'
   381  00FD94  5F                 	db	95	;'_'
   382  00FD95  65                 	db	101	;'e'
   383  00FD96  70                 	db	112	;'p'
   384  00FD97  0D                 	db	13
   385  00FD98  0A                 	db	10
   386  00FD99  00                 	db	0
   387  00FD9A                     STR_67:
   388  00FD9A  63                 	db	99	;'c'
   389  00FD9B  6D                 	db	109	;'m'
   390  00FD9C  64                 	db	100	;'d'
   391  00FD9D  5F                 	db	95	;'_'
   392  00FD9E  64                 	db	100	;'d'
   393  00FD9F  61                 	db	97	;'a'
   394  00FDA0  74                 	db	116	;'t'
   395  00FDA1  61                 	db	97	;'a'
   396  00FDA2  2E                 	db	46
   397  00FDA3  65                 	db	101	;'e'
   398  00FDA4  6E                 	db	110	;'n'
   399  00FDA5  64                 	db	100	;'d'
   400  00FDA6  5F                 	db	95	;'_'
   401  00FDA7  63                 	db	99	;'c'
   402  00FDA8  6F                 	db	111	;'o'
   403  00FDA9  6C                 	db	108	;'l'
   404  00FDAA  20                 	db	32
   405  00FDAB  3D                 	db	61	;'='
   406  00FDAC  20                 	db	32
   407  00FDAD  25                 	db	37
   408  00FDAE  64                 	db	100	;'d'
   409  00FDAF  2C                 	db	44
   410  00FDB0  0D                 	db	13
   411  00FDB1  0A                 	db	10
   412  00FDB2  00                 	db	0
   413  00FDB3                     STR_64:
   414  00FDB3  63                 	db	99	;'c'
   415  00FDB4  6D                 	db	109	;'m'
   416  00FDB5  64                 	db	100	;'d'
   417  00FDB6  5F                 	db	95	;'_'
   418  00FDB7  64                 	db	100	;'d'
   419  00FDB8  61                 	db	97	;'a'
   420  00FDB9  74                 	db	116	;'t'
   421  00FDBA  61                 	db	97	;'a'
   422  00FDBB  2E                 	db	46
   423  00FDBC  65                 	db	101	;'e'
   424  00FDBD  6E                 	db	110	;'n'
   425  00FDBE  64                 	db	100	;'d'
   426  00FDBF  5F                 	db	95	;'_'
   427  00FDC0  72                 	db	114	;'r'
   428  00FDC1  6F                 	db	111	;'o'
   429  00FDC2  77                 	db	119	;'w'
   430  00FDC3  20                 	db	32
   431  00FDC4  3D                 	db	61	;'='
   432  00FDC5  20                 	db	32
   433  00FDC6  25                 	db	37
   434  00FDC7  64                 	db	100	;'d'
   435  00FDC8  2C                 	db	44
   436  00FDC9  0D                 	db	13
   437  00FDCA  0A                 	db	10
   438  00FDCB  00                 	db	0
   439  00FDCC                     STR_20:
   440  00FDCC  69                 	db	105	;'i'
   441  00FDCD  20                 	db	32
   442  00FDCE  3D                 	db	61	;'='
   443  00FDCF  20                 	db	32
   444  00FDD0  25                 	db	37
   445  00FDD1  64                 	db	100	;'d'
   446  00FDD2  2C                 	db	44
   447  00FDD3  20                 	db	32
   448  00FDD4  63                 	db	99	;'c'
   449  00FDD5  6F                 	db	111	;'o'
   450  00FDD6  6C                 	db	108	;'l'
   451  00FDD7  2E                 	db	46
   452  00FDD8  2E                 	db	46
   453  00FDD9  32                 	db	50	;'2'
   454  00FDDA  20                 	db	32
   455  00FDDB  3D                 	db	61	;'='
   456  00FDDC  20                 	db	32
   457  00FDDD  25                 	db	37
   458  00FDDE  73                 	db	115	;'s'
   459  00FDDF  0D                 	db	13
   460  00FDE0  0A                 	db	10
   461  00FDE1  00                 	db	0
   462  00FDE2                     STR_13:
   463  00FDE2  73                 	db	115	;'s'
   464  00FDE3  69                 	db	105	;'i'
   465  00FDE4  7A                 	db	122	;'z'
   466  00FDE5  65                 	db	101	;'e'
   467  00FDE6  6F                 	db	111	;'o'
   468  00FDE7  66                 	db	102	;'f'
   469  00FDE8  28                 	db	40
   470  00FDE9  73                 	db	115	;'s'
   471  00FDEA  74                 	db	116	;'t'
   472  00FDEB  72                 	db	114	;'r'
   473  00FDEC  29                 	db	41
   474  00FDED  20                 	db	32
   475  00FDEE  3D                 	db	61	;'='
   476  00FDEF  20                 	db	32
   477  00FDF0  25                 	db	37
   478  00FDF1  64                 	db	100	;'d'
   479  00FDF2  0D                 	db	13
   480  00FDF3  0A                 	db	10
   481  00FDF4  00                 	db	0
   482  00FDF5                     STR_122:
   483  00FDF5  49                 	db	73	;'I'
   484  00FDF6  6E                 	db	110	;'n'
   485  00FDF7  69                 	db	105	;'i'
   486  00FDF8  74                 	db	116	;'t'
   487  00FDF9  5F                 	db	95	;'_'
   488  00FDFA  63                 	db	99	;'c'
   489  00FDFB  6F                 	db	111	;'o'
   490  00FDFC  6D                 	db	109	;'m'
   491  00FDFD  70                 	db	112	;'p'
   492  00FDFE  6C                 	db	108	;'l'
   493  00FDFF  65                 	db	101	;'e'
   494  00FE00  74                 	db	116	;'t'
   495  00FE01  65                 	db	101	;'e'
   496  00FE02  2E                 	db	46
   497  00FE03  2E                 	db	46
   498  00FE04  0D                 	db	13
   499  00FE05  0A                 	db	10
   500  00FE06  00                 	db	0
   501  00FE07                     STR_3:
   502  00FE07  73                 	db	115	;'s'
   503  00FE08  74                 	db	116	;'t'
   504  00FE09  72                 	db	114	;'r'
   505  00FE0A  69                 	db	105	;'i'
   506  00FE0B  6E                 	db	110	;'n'
   507  00FE0C  67                 	db	103	;'g'
   508  00FE0D  5F                 	db	95	;'_'
   509  00FE0E  63                 	db	99	;'c'
   510  00FE0F  6F                 	db	111	;'o'
   511  00FE10  75                 	db	117	;'u'
   512  00FE11  6E                 	db	110	;'n'
   513  00FE12  74                 	db	116	;'t'
   514  00FE13  20                 	db	32
   515  00FE14  3D                 	db	61	;'='
   516  00FE15  20                 	db	32
   517  00FE16  25                 	db	37
   518  00FE17  64                 	db	100	;'d'
   519  00FE18  00                 	db	0
   520  00FE19                     STR_4:
   521  00FE19  75                 	db	117	;'u'
   522  00FE1A  69                 	db	105	;'i'
   523  00FE1B  64                 	db	100	;'d'
   524  00FE1C  5F                 	db	95	;'_'
   525  00FE1D  72                 	db	114	;'r'
   526  00FE1E  61                 	db	97	;'a'
   527  00FE1F  6E                 	db	110	;'n'
   528  00FE20  67                 	db	103	;'g'
   529  00FE21  65                 	db	101	;'e'
   530  00FE22  20                 	db	32
   531  00FE23  3D                 	db	61	;'='
   532  00FE24  20                 	db	32
   533  00FE25  25                 	db	37
   534  00FE26  64                 	db	100	;'d'
   535  00FE27  0D                 	db	13
   536  00FE28  0A                 	db	10
   537  00FE29  00                 	db	0
   538  00FE2A  6D                 	db	109	;'m'
   539  00FE2B  69                 	db	105	;'i'
   540  00FE2C  64                 	db	100	;'d'
   541  00FE2D  5F                 	db	95	;'_'
   542  00FE2E  63                 	db	99	;'c'
   543  00FE2F  68                 	db	104	;'h'
   544  00FE30  61                 	db	97	;'a'
   545  00FE31  72                 	db	114	;'r'
   546  00FE32  20                 	db	32
   547  00FE33  3D                 	db	61	;'='
   548  00FE34  20                 	db	32
   549  00FE35  25                 	db	37
   550  00FE36  64                 	db	100	;'d'
   551  00FE37  0D                 	db	13
   552  00FE38  0A                 	db	10
   553  00FE39  00                 	db	0
   554  00FE3A  25                 	db	37
   555  00FE3B  73                 	db	115	;'s'
   556  00FE3C  2C                 	db	44
   557  00FE3D  20                 	db	32
   558  00FE3E  73                 	db	115	;'s'
   559  00FE3F  74                 	db	116	;'t'
   560  00FE40  72                 	db	114	;'r'
   561  00FE41  6C                 	db	108	;'l'
   562  00FE42  65                 	db	101	;'e'
   563  00FE43  6E                 	db	110	;'n'
   564  00FE44  20                 	db	32
   565  00FE45  25                 	db	37
   566  00FE46  64                 	db	100	;'d'
   567  00FE47  0D                 	db	13
   568  00FE48  0A                 	db	10
   569  00FE49  00                 	db	0
   570  00FE4A                     STR_10:
   571  00FE4A  63                 	db	99	;'c'
   572  00FE4B  6F                 	db	111	;'o'
   573  00FE4C  6E                 	db	110	;'n'
   574  00FE4D  66                 	db	102	;'f'
   575  00FE4E  6C                 	db	108	;'l'
   576  00FE4F  69                 	db	105	;'i'
   577  00FE50  63                 	db	99	;'c'
   578  00FE51  74                 	db	116	;'t'
   579  00FE52  3A                 	db	58	;':'
   580  00FE53  20                 	db	32
   581  00FE54  75                 	db	117	;'u'
   582  00FE55  69                 	db	105	;'i'
   583  00FE56  64                 	db	100	;'d'
   584  00FE57  0D                 	db	13
   585  00FE58  0A                 	db	10
   586  00FE59  00                 	db	0
   587  00FE5A                     STR_19:
   588  00FE5A  73                 	db	115	;'s'
   589  00FE5B  74                 	db	116	;'t'
   590  00FE5C  72                 	db	114	;'r'
   591  00FE5D  5B                 	db	91	;'['
   592  00FE5E  25                 	db	37
   593  00FE5F  64                 	db	100	;'d'
   594  00FE60  5D                 	db	93	;']'
   595  00FE61  20                 	db	32
   596  00FE62  3D                 	db	61	;'='
   597  00FE63  20                 	db	32
   598  00FE64  25                 	db	37
   599  00FE65  64                 	db	100	;'d'
   600  00FE66  0D                 	db	13
   601  00FE67  0A                 	db	10
   602  00FE68  00                 	db	0
   603  00FE69                     STR_114:
   604  00FE69  45                 	db	69	;'E'
   605  00FE6A  52                 	db	82	;'R'
   606  00FE6B  52                 	db	82	;'R'
   607  00FE6C  5F                 	db	95	;'_'
   608  00FE6D  53                 	db	83	;'S'
   609  00FE6E  43                 	db	67	;'C'
   610  00FE6F  52                 	db	82	;'R'
   611  00FE70  4F                 	db	79	;'O'
   612  00FE71  4C                 	db	76	;'L'
   613  00FE72  4C                 	db	76	;'L'
   614  00FE73  5F                 	db	95	;'_'
   615  00FE74  53                 	db	83	;'S'
   616  00FE75  45                 	db	69	;'E'
   617  00FE76  54                 	db	84	;'T'
   618  00FE77  00                 	db	0
   619  00FE78                     STR_17:
   620  00FE78  63                 	db	99	;'c'
   621  00FE79  6F                 	db	111	;'o'
   622  00FE7A  6C                 	db	108	;'l'
   623  00FE7B  2E                 	db	46
   624  00FE7C  2E                 	db	46
   625  00FE7D  31                 	db	49	;'1'
   626  00FE7E  20                 	db	32
   627  00FE7F  3D                 	db	61	;'='
   628  00FE80  20                 	db	32
   629  00FE81  25                 	db	37
   630  00FE82  73                 	db	115	;'s'
   631  00FE83  0D                 	db	13
   632  00FE84  0A                 	db	10
   633  00FE85  00                 	db	0
   634  00FE86                     STR_54:
   635  00FE86  73                 	db	115	;'s'
   636  00FE87  63                 	db	99	;'c'
   637  00FE88  72                 	db	114	;'r'
   638  00FE89  6F                 	db	111	;'o'
   639  00FE8A  6C                 	db	108	;'l'
   640  00FE8B  6C                 	db	108	;'l'
   641  00FE8C  20                 	db	32
   642  00FE8D  3D                 	db	61	;'='
   643  00FE8E  20                 	db	32
   644  00FE8F  25                 	db	37
   645  00FE90  64                 	db	100	;'d'
   646  00FE91  2C                 	db	44
   647  00FE92  20                 	db	32
   648  00FE93  00                 	db	0
   649  00FE94                     STR_77:
   650  00FE94  0D                 	db	13
   651  00FE95  0A                 	db	10
   652  00FE96  25                 	db	37
   653  00FE97  73                 	db	115	;'s'
   654  00FE98  2E                 	db	46
   655  00FE99  2E                 	db	46
   656  00FE9A  2C                 	db	44
   657  00FE9B  20                 	db	32
   658  00FE9C  4F                 	db	79	;'O'
   659  00FE9D  4B                 	db	75	;'K'
   660  00FE9E  0D                 	db	13
   661  00FE9F  0A                 	db	10
   662  00FEA0  00                 	db	0
   663  00FEA1                     STR_58:
   664  00FEA1  75                 	db	117	;'u'
   665  00FEA2  69                 	db	105	;'i'
   666  00FEA3  64                 	db	100	;'d'
   667  00FEA4  20                 	db	32
   668  00FEA5  3D                 	db	61	;'='
   669  00FEA6  20                 	db	32
   670  00FEA7  25                 	db	37
   671  00FEA8  64                 	db	100	;'d'
   672  00FEA9  2C                 	db	44
   673  00FEAA  0D                 	db	13
   674  00FEAB  0A                 	db	10
   675  00FEAC  00                 	db	0
   676  00FEAD                     STR_119:
   677  00FEAD  49                 	db	73	;'I'
   678  00FEAE  6E                 	db	110	;'n'
   679  00FEAF  69                 	db	105	;'i'
   680  00FEB0  74                 	db	116	;'t'
   681  00FEB1  5F                 	db	95	;'_'
   682  00FEB2  44                 	db	68	;'D'
   683  00FEB3  6F                 	db	111	;'o'
   684  00FEB4  6E                 	db	110	;'n'
   685  00FEB5  65                 	db	101	;'e'
   686  00FEB6  0D                 	db	13
   687  00FEB7  0A                 	db	10
   688  00FEB8  00                 	db	0
   689  00FEB9                     STR_40:
   690  00FEB9  74                 	db	116	;'t'
   691  00FEBA  65                 	db	101	;'e'
   692  00FEBB  6D                 	db	109	;'m'
   693  00FEBC  70                 	db	112	;'p'
   694  00FEBD  20                 	db	32
   695  00FEBE  3D                 	db	61	;'='
   696  00FEBF  20                 	db	32
   697  00FEC0  25                 	db	37
   698  00FEC1  73                 	db	115	;'s'
   699  00FEC2  2C                 	db	44
   700  00FEC3  20                 	db	32
   701  00FEC4  00                 	db	0
   702  00FEC5                     STR_112:
   703  00FEC5  45                 	db	69	;'E'
   704  00FEC6  52                 	db	82	;'R'
   705  00FEC7  52                 	db	82	;'R'
   706  00FEC8  5F                 	db	95	;'_'
   707  00FEC9  52                 	db	82	;'R'
   708  00FECA  4F                 	db	79	;'O'
   709  00FECB  57                 	db	87	;'W'
   710  00FECC  5F                 	db	95	;'_'
   711  00FECD  43                 	db	67	;'C'
   712  00FECE  4F                 	db	79	;'O'
   713  00FECF  4C                 	db	76	;'L'
   714  00FED0  00                 	db	0
   715  00FED1                     STR_46:
   716  00FED1  4B                 	db	75	;'K'
   717  00FED2  4C                 	db	76	;'L'
   718  00FED3  4D                 	db	77	;'M'
   719  00FED4  2B                 	db	43
   720  00FED5  53                 	db	83	;'S'
   721  00FED6  44                 	db	68	;'D'
   722  00FED7  53                 	db	83	;'S'
   723  00FED8  43                 	db	67	;'C'
   724  00FED9  52                 	db	82	;'R'
   725  00FEDA  4F                 	db	79	;'O'
   726  00FEDB  4C                 	db	76	;'L'
   727  00FEDC  00                 	db	0
   728  00FEDD                     STR_118:
   729  00FEDD  45                 	db	69	;'E'
   730  00FEDE  52                 	db	82	;'R'
   731  00FEDF  52                 	db	82	;'R'
   732  00FEE0  5F                 	db	95	;'_'
   733  00FEE1  43                 	db	67	;'C'
   734  00FEE2  4D                 	db	77	;'M'
   735  00FEE3  44                 	db	68	;'D'
   736  00FEE4  5F                 	db	95	;'_'
   737  00FEE5  4C                 	db	76	;'L'
   738  00FEE6  45                 	db	69	;'E'
   739  00FEE7  4E                 	db	78	;'N'
   740  00FEE8  00                 	db	0
   741  00FEE9                     STR_110:
   742  00FEE9  45                 	db	69	;'E'
   743  00FEEA  52                 	db	82	;'R'
   744  00FEEB  52                 	db	82	;'R'
   745  00FEEC  5F                 	db	95	;'_'
   746  00FEED  53                 	db	83	;'S'
   747  00FEEE  54                 	db	84	;'T'
   748  00FEEF  52                 	db	82	;'R'
   749  00FEF0  5F                 	db	95	;'_'
   750  00FEF1  53                 	db	83	;'S'
   751  00FEF2  45                 	db	69	;'E'
   752  00FEF3  54                 	db	84	;'T'
   753  00FEF4  00                 	db	0
   754  00FEF5                     STR_91:
   755  00FEF5  25                 	db	37
   756  00FEF6  64                 	db	100	;'d'
   757  00FEF7  2C                 	db	44
   758  00FEF8  25                 	db	37
   759  00FEF9  63                 	db	99	;'c'
   760  00FEFA  2D                 	db	45
   761  00FEFB  25                 	db	37
   762  00FEFC  63                 	db	99	;'c'
   763  00FEFD  0D                 	db	13
   764  00FEFE  0A                 	db	10
   765  00FEFF  00                 	db	0
   766  00FF00                     STR_22:
   767  00FF00  43                 	db	67	;'C'
   768  00FF01  6F                 	db	111	;'o'
   769  00FF02  6C                 	db	108	;'l'
   770  00FF03  20                 	db	32
   771  00FF04  3D                 	db	61	;'='
   772  00FF05  20                 	db	32
   773  00FF06  25                 	db	37
   774  00FF07  64                 	db	100	;'d'
   775  00FF08  0D                 	db	13
   776  00FF09  0A                 	db	10
   777  00FF0A  00                 	db	0
   778  00FF0B                     STR_16:
   779  00FF0B  72                 	db	114	;'r'
   780  00FF0C  6F                 	db	111	;'o'
   781  00FF0D  77                 	db	119	;'w'
   782  00FF0E  20                 	db	32
   783  00FF0F  3D                 	db	61	;'='
   784  00FF10  20                 	db	32
   785  00FF11  25                 	db	37
   786  00FF12  64                 	db	100	;'d'
   787  00FF13  0D                 	db	13
   788  00FF14  0A                 	db	10
   789  00FF15  00                 	db	0
   790  00FF16                     STR_66:
   791  00FF16  63                 	db	99	;'c'
   792  00FF17  6F                 	db	111	;'o'
   793  00FF18  6C                 	db	108	;'l'
   794  00FF19  20                 	db	32
   795  00FF1A  3D                 	db	61	;'='
   796  00FF1B  20                 	db	32
   797  00FF1C  25                 	db	37
   798  00FF1D  73                 	db	115	;'s'
   799  00FF1E  0D                 	db	13
   800  00FF1F  0A                 	db	10
   801  00FF20  00                 	db	0
   802  00FF21                     STR_45:
   803  00FF21  73                 	db	115	;'s'
   804  00FF22  74                 	db	116	;'t'
   805  00FF23  72                 	db	114	;'r'
   806  00FF24  20                 	db	32
   807  00FF25  3D                 	db	61	;'='
   808  00FF26  20                 	db	32
   809  00FF27  25                 	db	37
   810  00FF28  73                 	db	115	;'s'
   811  00FF29  0D                 	db	13
   812  00FF2A  0A                 	db	10
   813  00FF2B  00                 	db	0
   814  00FF2C                     STR_43:
   815  00FF2C  75                 	db	117	;'u'
   816  00FF2D  69                 	db	105	;'i'
   817  00FF2E  64                 	db	100	;'d'
   818  00FF2F  20                 	db	32
   819  00FF30  3D                 	db	61	;'='
   820  00FF31  20                 	db	32
   821  00FF32  25                 	db	37
   822  00FF33  64                 	db	100	;'d'
   823  00FF34  2C                 	db	44
   824  00FF35  20                 	db	32
   825  00FF36  00                 	db	0
   826  00FF37                     STR_55:
   827  00FF37  4B                 	db	75	;'K'
   828  00FF38  4C                 	db	76	;'L'
   829  00FF39  4D                 	db	77	;'M'
   830  00FF3A  2B                 	db	43
   831  00FF3B  53                 	db	83	;'S'
   832  00FF3C  44                 	db	68	;'D'
   833  00FF3D  53                 	db	83	;'S'
   834  00FF3E  45                 	db	69	;'E'
   835  00FF3F  52                 	db	82	;'R'
   836  00FF40  43                 	db	67	;'C'
   837  00FF41  00                 	db	0
   838  00FF42                     STR_68:
   839  00FF42  4B                 	db	75	;'K'
   840  00FF43  4C                 	db	76	;'L'
   841  00FF44  4D                 	db	77	;'M'
   842  00FF45  2B                 	db	43
   843  00FF46  55                 	db	85	;'U'
   844  00FF47  50                 	db	80	;'P'
   845  00FF48  44                 	db	68	;'D'
   846  00FF49  41                 	db	65	;'A'
   847  00FF4A  54                 	db	84	;'T'
   848  00FF4B  45                 	db	69	;'E'
   849  00FF4C  00                 	db	0
   850  00FF4D                     STR_28:
   851  00FF4D  4B                 	db	75	;'K'
   852  00FF4E  4C                 	db	76	;'L'
   853  00FF4F  4D                 	db	77	;'M'
   854  00FF50  2B                 	db	43
   855  00FF51  4C                 	db	76	;'L'
   856  00FF52  43                 	db	67	;'C'
   857  00FF53  44                 	db	68	;'D'
   858  00FF54  53                 	db	83	;'S'
   859  00FF55  3F                 	db	63	;'?'
   860  00FF56  00                 	db	0
   861  00FF57                     STR_36:
   862  00FF57  4B                 	db	75	;'K'
   863  00FF58  4C                 	db	76	;'L'
   864  00FF59  4D                 	db	77	;'M'
   865  00FF5A  2B                 	db	43
   866  00FF5B  47                 	db	71	;'G'
   867  00FF5C  4D                 	db	77	;'M'
   868  00FF5D  44                 	db	68	;'D'
   869  00FF5E  53                 	db	83	;'S'
   870  00FF5F  3F                 	db	63	;'?'
   871  00FF60  00                 	db	0
   872  00FF61                     STR_38:
   873  00FF61  4B                 	db	75	;'K'
   874  00FF62  4C                 	db	76	;'L'
   875  00FF63  4D                 	db	77	;'M'
   876  00FF64  2B                 	db	43
   877  00FF65  53                 	db	83	;'S'
   878  00FF66  44                 	db	68	;'D'
   879  00FF67  53                 	db	83	;'S'
   880  00FF68  54                 	db	84	;'T'
   881  00FF69  52                 	db	82	;'R'
   882  00FF6A  00                 	db	0
   883  00FF6B                     STR_47:
   884  00FF6B  25                 	db	37
   885  00FF6C  73                 	db	115	;'s'
   886  00FF6D  2E                 	db	46
   887  00FF6E  2E                 	db	46
   888  00FF6F  2E                 	db	46
   889  00FF70  34                 	db	52	;'4'
   890  00FF71  0D                 	db	13
   891  00FF72  0A                 	db	10
   892  00FF73  00                 	db	0
   893  00FF74                     STR_50:
   894  00FF74  25                 	db	37
   895  00FF75  73                 	db	115	;'s'
   896  00FF76  2E                 	db	46
   897  00FF77  2E                 	db	46
   898  00FF78  2E                 	db	46
   899  00FF79  35                 	db	53	;'5'
   900  00FF7A  0D                 	db	13
   901  00FF7B  0A                 	db	10
   902  00FF7C  00                 	db	0
   903  00FF7D                     STR_53:
   904  00FF7D  25                 	db	37
   905  00FF7E  73                 	db	115	;'s'
   906  00FF7F  2E                 	db	46
   907  00FF80  2E                 	db	46
   908  00FF81  2E                 	db	46
   909  00FF82  36                 	db	54	;'6'
   910  00FF83  0D                 	db	13
   911  00FF84  0A                 	db	10
   912  00FF85  00                 	db	0
   913  00FF86                     STR_69:
   914  00FF86  4B                 	db	75	;'K'
   915  00FF87  4C                 	db	76	;'L'
   916  00FF88  4D                 	db	77	;'M'
   917  00FF89  2B                 	db	43
   918  00FF8A  53                 	db	83	;'S'
   919  00FF8B  53                 	db	83	;'S'
   920  00FF8C  54                 	db	84	;'T'
   921  00FF8D  52                 	db	82	;'R'
   922  00FF8E  00                 	db	0
   923  00FF8F                     STR_31:
   924  00FF8F  4B                 	db	75	;'K'
   925  00FF90  4C                 	db	76	;'L'
   926  00FF91  4D                 	db	77	;'M'
   927  00FF92  2B                 	db	43
   928  00FF93  4C                 	db	76	;'L'
   929  00FF94  43                 	db	67	;'C'
   930  00FF95  44                 	db	68	;'D'
   931  00FF96  53                 	db	83	;'S'
   932  00FF97  00                 	db	0
   933  00FF98                     STR_2:
   934  00FF98  63                 	db	99	;'c'
   935  00FF99  6F                 	db	111	;'o'
   936  00FF9A  6C                 	db	108	;'l'
   937  00FF9B  20                 	db	32
   938  00FF9C  3D                 	db	61	;'='
   939  00FF9D  20                 	db	32
   940  00FF9E  25                 	db	37
   941  00FF9F  64                 	db	100	;'d'
   942  00FFA0  00                 	db	0
   943  00FFA1                     STR_1:
   944  00FFA1  72                 	db	114	;'r'
   945  00FFA2  6F                 	db	111	;'o'
   946  00FFA3  77                 	db	119	;'w'
   947  00FFA4  20                 	db	32
   948  00FFA5  3D                 	db	61	;'='
   949  00FFA6  20                 	db	32
   950  00FFA7  25                 	db	37
   951  00FFA8  64                 	db	100	;'d'
   952  00FFA9  00                 	db	0
   953  00FFAA                     STR_30:
   954  00FFAA  2E                 	db	46
   955  00FFAB  2E                 	db	46
   956  00FFAC  2E                 	db	46
   957  00FFAD  2E                 	db	46
   958  00FFAE  2E                 	db	46
   959  00FFAF  0D                 	db	13
   960  00FFB0  0A                 	db	10
   961  00FFB1  00                 	db	0
   962  00FFB2                     STR_23:
   963  00FFB2  25                 	db	37
   964  00FFB3  73                 	db	115	;'s'
   965  00FFB4  2E                 	db	46
   966  00FFB5  2E                 	db	46
   967  00FFB6  32                 	db	50	;'2'
   968  00FFB7  0D                 	db	13
   969  00FFB8  0A                 	db	10
   970  00FFB9  00                 	db	0
   971  00FFBA                     STR_24:
   972  00FFBA  4B                 	db	75	;'K'
   973  00FFBB  4C                 	db	76	;'L'
   974  00FFBC  4D                 	db	77	;'M'
   975  00FFBD  2B                 	db	43
   976  00FFBE  4D                 	db	77	;'M'
   977  00FFBF  43                 	db	67	;'C'
   978  00FFC0  3F                 	db	63	;'?'
   979  00FFC1  00                 	db	0
   980  00FFC2                     STR_26:
   981  00FFC2  4B                 	db	75	;'K'
   982  00FFC3  4C                 	db	76	;'L'
   983  00FFC4  4D                 	db	77	;'M'
   984  00FFC5  2B                 	db	43
   985  00FFC6  4D                 	db	77	;'M'
   986  00FFC7  52                 	db	82	;'R'
   987  00FFC8  3F                 	db	63	;'?'
   988  00FFC9  00                 	db	0
   989  00FFCA                     STR_123:
   990  00FFCA  28                 	db	40
   991  00FFCB  6E                 	db	110	;'n'
   992  00FFCC  75                 	db	117	;'u'
   993  00FFCD  6C                 	db	108	;'l'
   994  00FFCE  6C                 	db	108	;'l'
   995  00FFCF  29                 	db	41
   996  00FFD0  00                 	db	0
   997  00FFD1                     STR_34:
   998  00FFD1  25                 	db	37
   999  00FFD2  73                 	db	115	;'s'
  1000  00FFD3  2E                 	db	46
  1001  00FFD4  2E                 	db	46
  1002  00FFD5  0D                 	db	13
  1003  00FFD6  0A                 	db	10
  1004  00FFD7  00                 	db	0
  1005  00FFD8                     STR_109:
  1006  00FFD8  0D                 	db	13
  1007  00FFD9  0A                 	db	10
  1008  00FFDA  25                 	db	37
  1009  00FFDB  73                 	db	115	;'s'
  1010  00FFDC  0D                 	db	13
  1011  00FFDD  0A                 	db	10
  1012  00FFDE  00                 	db	0
  1013  00FFDF                     STR_25:
  1014  00FFDF  2D                 	db	45
  1015  00FFE0  27                 	db	39
  1016  00FFE1  2C                 	db	44
  1017  00FFE2  20                 	db	32
  1018  00FFE3  2F                 	db	47
  1019  00FFE4  3D                 	db	61	;'='
  1020  00FFE5  00                 	db	0
  1021  00FFE6                     STR_106:
  1022  00FFE6  45                 	db	69	;'E'
  1023  00FFE7  52                 	db	82	;'R'
  1024  00FFE8  52                 	db	82	;'R'
  1025  00FFE9  4F                 	db	79	;'O'
  1026  00FFEA  52                 	db	82	;'R'
  1027  00FFEB  00                 	db	0
  1028  00FFEC                     STR_11:
  1029  00FFEC  25                 	db	37
  1030  00FFED  63                 	db	99	;'c'
  1031  00FFEE  2C                 	db	44
  1032  00FFEF  20                 	db	32
  1033  00FFF0  00                 	db	0
  1034  00FFF1                     STR_5:
  1035  00FFF1  34                 	db	52	;'4'
  1036  00FFF2  2C                 	db	44
  1037  00FFF3  32                 	db	50	;'2'
  1038  00FFF4  30                 	db	48	;'0'
  1039  00FFF5  00                 	db	0
  1040  00FFF6                     STR_72:
  1041  00FFF6  4B                 	db	75	;'K'
  1042  00FFF7  4C                 	db	76	;'L'
  1043  00FFF8  4D                 	db	77	;'M'
  1044  00FFF9  00                 	db	0
  1045  00FFFA                     STR_116:
  1046  00FFFA  25                 	db	37
  1047  00FFFB  63                 	db	99	;'c'
  1048  00FFFC  00                 	db	0
  1049  00FFFD                     STR_44:
  1050  00FFFD  2C                 	db	44
  1051  00FFFE  00                 	db	0
  1052  0000                     
  1053                           ; #config settings
  1054  00FFFF  00                 	db	0	; dummy byte at the end
  1055  0000                     
  1056                           	psect	nvCOMRAM
  1057  00004E                     __pnvCOMRAM:
  1058                           	opt stack 0
  1059  00004E                     _timer0ReloadVal:
  1060                           	opt stack 0
  1061  00004E                     	ds	2
  1062                           
  1063                           	psect	nvBANK0
  1064  0000F7                     __pnvBANK0:
  1065                           	opt stack 0
  1066  0000F7                     _TMR0_InterruptHandler:
  1067                           	opt stack 0
  1068  0000F7                     	ds	2
  1069  0000F9                     _timer1ReloadVal:
  1070                           	opt stack 0
  1071  0000F9                     	ds	2
  1072  0000FB                     _timer5ReloadVal:
  1073                           	opt stack 0
  1074  0000FB                     	ds	2
  1075  0000FD                     _eusart1TxBufferRemaining:
  1076                           	opt stack 0
  1077  0000FD                     	ds	1
  1078  0000                     _TMR5	set	3919
  1079  0000                     _ANSELA	set	3896
  1080  0000                     _ANSELB	set	3897
  1081  0000                     _ANSELC	set	3898
  1082  0000                     _ANSELD	set	3899
  1083  0000                     _ANSELE	set	3900
  1084  0000                     _T5CON	set	3918
  1085  0000                     _T5CONbits	set	3918
  1086  0000                     _T5GCON	set	3917
  1087  0000                     _T5GCONbits	set	3917
  1088  0000                     _TMR5H	set	3920
  1089  0000                     _TMR5L	set	3919
  1090  0000                     _TMR1	set	4046
  1091  0000                     _BAUDCON1	set	4024
  1092  0000                     _INTCON2bits	set	4081
  1093  0000                     _INTCONbits	set	4082
  1094  0000                     _LATA	set	3977
  1095  0000                     _LATB	set	3978
  1096  0000                     _LATC	set	3979
  1097  0000                     _LATD	set	3980
  1098  0000                     _LATE	set	3981
  1099  0000                     _LATEbits	set	3981
  1100  0000                     _OSCCON	set	4051
  1101  0000                     _OSCCON2	set	4050
  1102  0000                     _OSCTUNE	set	3995
  1103  0000                     _PIE1bits	set	3997
  1104  0000                     _PIR1bits	set	3998
  1105  0000                     _PIR5bits	set	3966
  1106  0000                     _PORTAbits	set	3968
  1107  0000                     _PORTD	set	3971
  1108  0000                     _PORTDbits	set	3971
  1109  0000                     _RCONbits	set	4048
  1110  0000                     _RCREG1	set	4014
  1111  0000                     _RCSTA1	set	4011
  1112  0000                     _RCSTA1bits	set	4011
  1113  0000                     _SPBRG1	set	4015
  1114  0000                     _SPBRGH1	set	4016
  1115  0000                     _T0CON	set	4053
  1116  0000                     _T0CONbits	set	4053
  1117  0000                     _T1CON	set	4045
  1118  0000                     _T1CONbits	set	4045
  1119  0000                     _T1GCON	set	4044
  1120  0000                     _T1GCONbits	set	4044
  1121  0000                     _TMR0H	set	4055
  1122  0000                     _TMR0L	set	4054
  1123  0000                     _TMR1H	set	4047
  1124  0000                     _TMR1L	set	4046
  1125  0000                     _TRISA	set	3986
  1126  0000                     _TRISB	set	3987
  1127  0000                     _TRISC	set	3988
  1128  0000                     _TRISD	set	3989
  1129  0000                     _TRISE	set	3990
  1130  0000                     _TXREG1	set	4013
  1131  0000                     _TXSTA1	set	4012
  1132  0000                     _WPUB	set	3937
  1133                           
  1134                           	psect	cinit
  1135  002EF0                     __pcinit:
  1136                           	opt stack 0
  1137  002EF0                     start_initialization:
  1138                           	opt stack 0
  1139  002EF0                     __initialization:
  1140                           	opt stack 0
  1141                           
  1142                           ; Initialize objects allocated to BANK0 (13 bytes)
  1143                           ; load TBLPTR registers with __pidataBANK0
  1144  002EF0  0EA2               	movlw	low __pidataBANK0
  1145  002EF2  6EF6               	movwf	tblptrl,c
  1146  002EF4  0E37               	movlw	high __pidataBANK0
  1147  002EF6  6EF7               	movwf	tblptrh,c
  1148  002EF8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1149  002EFA  6EF8               	movwf	tblptru,c
  1150  002EFC  EE00  F0EA         	lfsr	0,__pdataBANK0
  1151  002F00  EE10 F00D          	lfsr	1,13
  1152  002F04                     copy_data0:
  1153  002F04  0009               	tblrd		*+
  1154  002F06  CFF5 FFEE          	movff	tablat,postinc0
  1155  002F0A  50E5               	movf	postdec1,w,c
  1156  002F0C  50E1               	movf	fsr1l,w,c
  1157  002F0E  E1FA               	bnz	copy_data0
  1158                           
  1159                           ; Clear objects allocated to BIGRAM (1080 bytes)
  1160  002F10  EE02  F096         	lfsr	0,__pbssBIGRAM
  1161  002F14  EE14 F038          	lfsr	1,1080
  1162  002F18                     clear_0:
  1163  002F18  6AEE               	clrf	postinc0,c
  1164  002F1A  50E5               	movf	postdec1,w,c
  1165  002F1C  50E1               	movf	fsr1l,w,c
  1166  002F1E  E1FC               	bnz	clear_0
  1167  002F20  50E2               	movf	fsr1h,w,c
  1168  002F22  E1FA               	bnz	clear_0
  1169                           
  1170                           ; Clear objects allocated to BANK2 (150 bytes)
  1171  002F24  EE02  F000         	lfsr	0,__pbssBANK2
  1172  002F28  0E96               	movlw	150
  1173  002F2A                     clear_1:
  1174  002F2A  6AEE               	clrf	postinc0,c
  1175  002F2C  06E8               	decf	wreg,f,c
  1176  002F2E  E1FD               	bnz	clear_1
  1177                           
  1178                           ; Clear objects allocated to BANK1 (120 bytes)
  1179  002F30  EE01  F000         	lfsr	0,__pbssBANK1
  1180  002F34  0E78               	movlw	120
  1181  002F36                     clear_2:
  1182  002F36  6AEE               	clrf	postinc0,c
  1183  002F38  06E8               	decf	wreg,f,c
  1184  002F3A  E1FD               	bnz	clear_2
  1185                           
  1186                           ; Clear objects allocated to BANK0 (122 bytes)
  1187  002F3C  EE00  F060         	lfsr	0,__pbssBANK0
  1188  002F40  0E7A               	movlw	122
  1189  002F42                     clear_3:
  1190  002F42  6AEE               	clrf	postinc0,c
  1191  002F44  06E8               	decf	wreg,f,c
  1192  002F46  E1FD               	bnz	clear_3
  1193                           
  1194                           ; Clear objects allocated to COMRAM (13 bytes)
  1195  002F48  EE00  F041         	lfsr	0,__pbssCOMRAM
  1196  002F4C  0E0D               	movlw	13
  1197  002F4E                     clear_4:
  1198  002F4E  6AEE               	clrf	postinc0,c
  1199  002F50  06E8               	decf	wreg,f,c
  1200  002F52  E1FD               	bnz	clear_4
  1201  002F54                     end_of_initialization:
  1202                           	opt stack 0
  1203  002F54                     __end_of__initialization:
  1204                           	opt stack 0
  1205  002F54  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1206  002F56  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1207  002F58  0100               	movlb	0
  1208  002F5A  EF0B  F018         	goto	_main	;jump to C main() function
  1209                           tblptru	equ	0xFF8
  1210                           tblptrh	equ	0xFF7
  1211                           tblptrl	equ	0xFF6
  1212                           tablat	equ	0xFF5
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           postdec1	equ	0xFE5
  1216                           fsr1h	equ	0xFE2
  1217                           fsr1l	equ	0xFE1
  1218                           
  1219                           	psect	bssCOMRAM
  1220  000041                     __pbssCOMRAM:
  1221                           	opt stack 0
  1222  000041                     _clcd_init_row:
  1223                           	opt stack 0
  1224  000041                     	ds	1
  1225  000042                     _conflict_data_count:
  1226                           	opt stack 0
  1227  000042                     	ds	1
  1228  000043                     _data_count:
  1229                           	opt stack 0
  1230  000043                     	ds	1
  1231  000044                     _eusart1RxCount:
  1232                           	opt stack 0
  1233  000044                     	ds	1
  1234  000045                     _eusart1RxHead:
  1235                           	opt stack 0
  1236  000045                     	ds	1
  1237  000046                     _eusart1RxTail:
  1238                           	opt stack 0
  1239  000046                     	ds	1
  1240  000047                     _eusart1TxHead:
  1241                           	opt stack 0
  1242  000047                     	ds	1
  1243  000048                     _eusart1TxTail:
  1244                           	opt stack 0
  1245  000048                     	ds	1
  1246  000049                     _clcd_config_data:
  1247                           	opt stack 0
  1248  000049                     	ds	5
  1249                           tblptru	equ	0xFF8
  1250                           tblptrh	equ	0xFF7
  1251                           tblptrl	equ	0xFF6
  1252                           tablat	equ	0xFF5
  1253                           postinc0	equ	0xFEE
  1254                           wreg	equ	0xFE8
  1255                           postdec1	equ	0xFE5
  1256                           fsr1h	equ	0xFE2
  1257                           fsr1l	equ	0xFE1
  1258                           
  1259                           	psect	bssBANK0
  1260  000060                     __pbssBANK0:
  1261                           	opt stack 0
  1262  000060                     _eusart1RxBuffer:
  1263                           	opt stack 0
  1264  000060                     	ds	8
  1265  000068                     _eusart1TxBuffer:
  1266                           	opt stack 0
  1267  000068                     	ds	8
  1268  000070                     _TMR1_InterruptHandler:
  1269                           	opt stack 0
  1270  000070                     	ds	2
  1271  000072                     _TMR5_InterruptHandler:
  1272                           	opt stack 0
  1273  000072                     	ds	2
  1274  000074                     _display_struct_count:
  1275                           	opt stack 0
  1276  000074                     	ds	2
  1277  000076                     _print_data_ready:
  1278                           	opt stack 0
  1279  000076                     	ds	2
  1280  000078                     	ds	2
  1281  00007A                     cmd_consol_task@i:
  1282                           	opt stack 0
  1283  00007A                     	ds	2
  1284  00007C                     strtok@sp:
  1285                           	opt stack 0
  1286  00007C                     	ds	2
  1287  00007E                     _LCD_16x2_DISPLAY:
  1288                           	opt stack 0
  1289  00007E                     	ds	1
  1290  00007F                     _LCD_20x4_DISPLAY:
  1291                           	opt stack 0
  1292  00007F                     	ds	1
  1293  000080                     _check:
  1294                           	opt stack 0
  1295  000080                     	ds	1
  1296  000081                     _clcd_init_col:
  1297                           	opt stack 0
  1298  000081                     	ds	1
  1299  000082                     _cmd_consol_state:
  1300                           	opt stack 0
  1301  000082                     	ds	1
  1302  000083                     _display:
  1303                           	opt stack 0
  1304  000083                     	ds	1
  1305  000084                     _valid_cmd:
  1306                           	opt stack 0
  1307  000084                     	ds	1
  1308  000085                     	ds	1
  1309  000086                     _cmd_data:
  1310                           	opt stack 0
  1311  000086                     	ds	49
  1312  0000B7                     _conflict_arr:
  1313                           	opt stack 0
  1314  0000B7                     	ds	20
  1315  0000CB                     _CMD:
  1316                           	opt stack 0
  1317  0000CB                     	ds	15
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           postinc0	equ	0xFEE
  1323                           wreg	equ	0xFE8
  1324                           postdec1	equ	0xFE5
  1325                           fsr1h	equ	0xFE2
  1326                           fsr1l	equ	0xFE1
  1327                           
  1328                           	psect	dataBANK0
  1329  0000EA                     __pdataBANK0:
  1330                           	opt stack 0
  1331  0000EA                     _str:
  1332                           	opt stack 0
  1333  0000EA                     	ds	13
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           postinc0	equ	0xFEE
  1339                           wreg	equ	0xFE8
  1340                           postdec1	equ	0xFE5
  1341                           fsr1h	equ	0xFE2
  1342                           fsr1l	equ	0xFE1
  1343                           
  1344                           	psect	bssBANK1
  1345  000100                     __pbssBANK1:
  1346                           	opt stack 0
  1347  000100                     _lcd_display_array:
  1348                           	opt stack 0
  1349  000100                     	ds	80
  1350  000150                     _str_data:
  1351                           	opt stack 0
  1352  000150                     	ds	40
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postdec1	equ	0xFE5
  1360                           fsr1h	equ	0xFE2
  1361                           fsr1l	equ	0xFE1
  1362                           
  1363                           	psect	bssBANK2
  1364  000200                     __pbssBANK2:
  1365                           	opt stack 0
  1366  000200                     _uart_str:
  1367                           	opt stack 0
  1368  000200                     	ds	150
  1369                           tblptru	equ	0xFF8
  1370                           tblptrh	equ	0xFF7
  1371                           tblptrl	equ	0xFF6
  1372                           tablat	equ	0xFF5
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           postdec1	equ	0xFE5
  1376                           fsr1h	equ	0xFE2
  1377                           fsr1l	equ	0xFE1
  1378                           
  1379                           	psect	bssBIGRAM
  1380  000296                     __pbssBIGRAM:
  1381                           	opt stack 0
  1382  000296                     _clcd_display_string_details:
  1383                           	opt stack 0
  1384  000296                     	ds	1080
  1385                           tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postdec1	equ	0xFE5
  1392                           fsr1h	equ	0xFE2
  1393                           fsr1l	equ	0xFE1
  1394                           
  1395                           	psect	cstackBANK1
  1396  000178                     __pcstackBANK1:
  1397                           	opt stack 0
  1398  000178                     parse_cmd_str@i:
  1399                           	opt stack 0
  1400                           
  1401                           ; 1 bytes @ 0x0
  1402  000178                     	ds	1
  1403  000179                     parse_cmd_str@i_1697:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x1
  1407  000179                     	ds	1
  1408  00017A                     parse_cmd_str@row:
  1409                           	opt stack 0
  1410                           
  1411                           ; 1 bytes @ 0x2
  1412  00017A                     	ds	1
  1413  00017B                     parse_cmd_str@column:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x3
  1417  00017B                     	ds	1
  1418  00017C                     parse_cmd_str@uid_1713:
  1419                           	opt stack 0
  1420                           
  1421                           ; 1 bytes @ 0x4
  1422  00017C                     	ds	1
  1423  00017D                     parse_cmd_str@i_1688:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0x5
  1427  00017D                     	ds	1
  1428  00017E                     parse_cmd_str@uid:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x6
  1432  00017E                     	ds	1
  1433  00017F                     parse_cmd_str@scroll:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x7
  1437  00017F                     	ds	1
  1438  000180                     parse_cmd_str@uid_1685:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x8
  1442  000180                     	ds	1
  1443  000181                     parse_cmd_str@uid_1696:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x9
  1447  000181                     	ds	1
  1448  000182                     parse_cmd_str@ptr:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0xA
  1452  000182                     	ds	2
  1453  000184                     parse_cmd_str@temp:
  1454                           	opt stack 0
  1455                           
  1456                           ; 2 bytes @ 0xC
  1457  000184                     	ds	2
  1458                           tblptru	equ	0xFF8
  1459                           tblptrh	equ	0xFF7
  1460                           tblptrl	equ	0xFF6
  1461                           tablat	equ	0xFF5
  1462                           postinc0	equ	0xFEE
  1463                           wreg	equ	0xFE8
  1464                           postdec1	equ	0xFE5
  1465                           fsr1h	equ	0xFE2
  1466                           fsr1l	equ	0xFE1
  1467                           
  1468                           	psect	cstackBANK0
  1469  0000DA                     __pcstackBANK0:
  1470                           	opt stack 0
  1471  0000DA                     update_string_data@data:
  1472                           	opt stack 0
  1473  0000DA                     parse_cmd_str@str:
  1474                           	opt stack 0
  1475                           
  1476                           ; 2 bytes @ 0x0
  1477  0000DA                     	ds	2
  1478  0000DC                     ??_update_string_data:
  1479  0000DC                     ??_parse_cmd_str:
  1480                           
  1481                           ; 1 bytes @ 0x2
  1482  0000DC                     	ds	3
  1483  0000DF                     update_string_data@exist_uid_idx:
  1484                           	opt stack 0
  1485                           
  1486                           ; 1 bytes @ 0x5
  1487  0000DF                     	ds	1
  1488  0000E0                     update_string_data@start_point:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x6
  1492  0000E0                     	ds	1
  1493  0000E1                     update_string_data@end_point:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x7
  1497  0000E1                     	ds	1
  1498  0000E2                     update_string_data@i:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x8
  1502  0000E2                     	ds	2
  1503  0000E4                     ??_reply_to_host:
  1504                           
  1505                           ; 1 bytes @ 0xA
  1506  0000E4                     	ds	3
  1507  0000E7                     reply_to_host@ch:
  1508                           	opt stack 0
  1509                           
  1510                           ; 1 bytes @ 0xD
  1511  0000E7                     	ds	1
  1512  0000E8                     ??_cmd_consol_task:
  1513                           
  1514                           ; 1 bytes @ 0xE
  1515  0000E8                     	ds	1
  1516  0000E9                     cmd_consol_task@ch:
  1517                           	opt stack 0
  1518                           
  1519                           ; 1 bytes @ 0xF
  1520  0000E9                     	ds	1
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           postdec1	equ	0xFE5
  1528                           fsr1h	equ	0xFE2
  1529                           fsr1l	equ	0xFE1
  1530                           
  1531                           	psect	cstackCOMRAM
  1532  000001                     __pcstackCOMRAM:
  1533                           	opt stack 0
  1534  000001                     ??_heart_beat:
  1535  000001                     
  1536                           ; 1 bytes @ 0x0
  1537  000001                     	ds	1
  1538  000002                     ??_INTERRUPT_InterruptManager:
  1539  000002                     
  1540                           ; 1 bytes @ 0x1
  1541  000002                     	ds	14
  1542  000010                     ??_isdigit:
  1543  000010                     ?_strcmp:
  1544                           	opt stack 0
  1545  000010                     ?_strchr:
  1546                           	opt stack 0
  1547  000010                     ?_max_display_support:
  1548                           	opt stack 0
  1549  000010                     ?___awdiv:
  1550                           	opt stack 0
  1551  000010                     ?___lwdiv:
  1552                           	opt stack 0
  1553  000010                     EUSART1_Read@readValue:
  1554                           	opt stack 0
  1555  000010                     EUSART1_Write@txData:
  1556                           	opt stack 0
  1557  000010                     TMR0_SetInterruptHandler@InterruptHandler:
  1558                           	opt stack 0
  1559  000010                     delay@delay:
  1560                           	opt stack 0
  1561  000010                     __delay_MS@delay:
  1562                           	opt stack 0
  1563  000010                     ___awdiv@dividend:
  1564                           	opt stack 0
  1565  000010                     ___lwdiv@dividend:
  1566                           	opt stack 0
  1567  000010                     memcpy@d1:
  1568                           	opt stack 0
  1569  000010                     strcmp@s1:
  1570                           	opt stack 0
  1571  000010                     strcpy@to:
  1572                           	opt stack 0
  1573  000010                     strncpy@to:
  1574                           	opt stack 0
  1575  000010                     strchr@ptr:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0xF
  1579  000010                     	ds	1
  1580  000011                     putch@txData:
  1581                           	opt stack 0
  1582  000011                     _isdigit$2188:
  1583                           	opt stack 0
  1584                           
  1585                           ; 1 bytes @ 0x10
  1586  000011                     	ds	1
  1587  000012                     ??_TMR0_Initialize:
  1588  000012                     ??__delay_MS:
  1589  000012                     ??_delay:
  1590  000012                     isdigit@c:
  1591                           	opt stack 0
  1592  000012                     ___awdiv@divisor:
  1593                           	opt stack 0
  1594  000012                     ___lwdiv@divisor:
  1595                           	opt stack 0
  1596  000012                     memcpy@s1:
  1597                           	opt stack 0
  1598  000012                     strcmp@s2:
  1599                           	opt stack 0
  1600  000012                     strcpy@from:
  1601                           	opt stack 0
  1602  000012                     strncpy@from:
  1603                           	opt stack 0
  1604  000012                     cputs@s:
  1605                           	opt stack 0
  1606  000012                     strchr@chr:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x11
  1610  000012                     	ds	1
  1611  000013                     delay@val:
  1612                           	opt stack 0
  1613  000013                     __delay_MS@val:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x12
  1617  000013                     	ds	1
  1618  000014                     ??_strcmp:
  1619  000014                     ??_strchr:
  1620  000014                     ___awdiv@counter:
  1621                           	opt stack 0
  1622  000014                     ___lwdiv@counter:
  1623                           	opt stack 0
  1624  000014                     memcpy@n:
  1625                           	opt stack 0
  1626  000014                     puts@s:
  1627                           	opt stack 0
  1628  000014                     strcpy@cp:
  1629                           	opt stack 0
  1630  000014                     strncpy@size:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x13
  1634  000014                     	ds	1
  1635  000015                     ___awdiv@sign:
  1636                           	opt stack 0
  1637  000015                     strcmp@r:
  1638                           	opt stack 0
  1639  000015                     delay@i:
  1640                           	opt stack 0
  1641  000015                     ___lwdiv@quotient:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x14
  1645  000015                     	ds	1
  1646  000016                     ?_strspn:
  1647                           	opt stack 0
  1648  000016                     ?_strcspn:
  1649                           	opt stack 0
  1650  000016                     ___awdiv@quotient:
  1651                           	opt stack 0
  1652  000016                     memcpy@d:
  1653                           	opt stack 0
  1654  000016                     strncpy@cp:
  1655                           	opt stack 0
  1656  000016                     strcspn@s1:
  1657                           	opt stack 0
  1658  000016                     strspn@s1:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x15
  1662  000016                     	ds	1
  1663  000017                     ?___lwmod:
  1664                           	opt stack 0
  1665  000017                     write_lcd_cmd@cmd:
  1666                           	opt stack 0
  1667  000017                     write_lcd_data@data:
  1668                           	opt stack 0
  1669  000017                     ___lwmod@dividend:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x16
  1673  000017                     	ds	1
  1674  000018                     ?___wmul:
  1675                           	opt stack 0
  1676  000018                     set_cursor@col_number:
  1677                           	opt stack 0
  1678  000018                     write_str@str:
  1679                           	opt stack 0
  1680  000018                     ___wmul@multiplier:
  1681                           	opt stack 0
  1682  000018                     memcpy@s:
  1683                           	opt stack 0
  1684  000018                     strcspn@s2:
  1685                           	opt stack 0
  1686  000018                     strspn@s2:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x17
  1690  000018                     	ds	1
  1691  000019                     set_cursor@row_number:
  1692                           	opt stack 0
  1693  000019                     ___lwmod@divisor:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x18
  1697  000019                     	ds	1
  1698  00001A                     ??_strspn:
  1699  00001A                     ??_strcspn:
  1700  00001A                     write_str@i:
  1701                           	opt stack 0
  1702  00001A                     ___wmul@multiplicand:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x19
  1706  00001A                     	ds	1
  1707  00001B                     ___lwmod@counter:
  1708                           	opt stack 0
  1709  00001B                     strcspn@i:
  1710                           	opt stack 0
  1711  00001B                     strspn@i:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0x1A
  1715  00001B                     	ds	1
  1716  00001C                     ___wmul@product:
  1717                           	opt stack 0
  1718                           
  1719                           ; 2 bytes @ 0x1B
  1720  00001C                     	ds	1
  1721  00001D                     ?_strtok:
  1722                           	opt stack 0
  1723  00001D                     strtok@s1:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x1C
  1727  00001D                     	ds	1
  1728  00001E                     ?_strlen:
  1729                           	opt stack 0
  1730  00001E                     ?_atoi:
  1731                           	opt stack 0
  1732  00001E                     atoi@s:
  1733                           	opt stack 0
  1734  00001E                     strlen@s:
  1735                           	opt stack 0
  1736                           
  1737                           ; 2 bytes @ 0x1D
  1738  00001E                     	ds	1
  1739  00001F                     strtok@s2:
  1740                           	opt stack 0
  1741                           
  1742                           ; 2 bytes @ 0x1E
  1743  00001F                     	ds	1
  1744  000020                     ??_strlen:
  1745  000020                     ??_atoi:
  1746                           
  1747                           ; 1 bytes @ 0x1F
  1748  000020                     	ds	1
  1749  000021                     
  1750                           ; 1 bytes @ 0x20
  1751  000021                     	ds	1
  1752  000022                     atoi@sign:
  1753                           	opt stack 0
  1754  000022                     strlen@cp:
  1755                           	opt stack 0
  1756                           
  1757                           ; 2 bytes @ 0x21
  1758  000022                     	ds	1
  1759  000023                     atoi@a:
  1760                           	opt stack 0
  1761                           
  1762                           ; 2 bytes @ 0x22
  1763  000023                     	ds	1
  1764  000024                     ?_printf:
  1765                           	opt stack 0
  1766  000024                     ?_strncmp:
  1767                           	opt stack 0
  1768  000024                     scroll_off@clcd_display_string_details:
  1769                           	opt stack 0
  1770  000024                     printf@f:
  1771                           	opt stack 0
  1772  000024                     memset@p1:
  1773                           	opt stack 0
  1774  000024                     strncmp@s1:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0x23
  1778  000024                     	ds	2
  1779  000026                     ??_scroll_off:
  1780  000026                     memset@c:
  1781                           	opt stack 0
  1782  000026                     strncmp@s2:
  1783                           	opt stack 0
  1784                           
  1785                           ; 2 bytes @ 0x25
  1786  000026                     	ds	2
  1787  000028                     memset@n:
  1788                           	opt stack 0
  1789  000028                     strncmp@len:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x27
  1793  000028                     	ds	2
  1794  00002A                     ??_strncmp:
  1795  00002A                     scroll_off@k:
  1796                           	opt stack 0
  1797  00002A                     memset@p:
  1798                           	opt stack 0
  1799                           
  1800                           ; 2 bytes @ 0x29
  1801  00002A                     	ds	2
  1802  00002C                     ??_printf:
  1803  00002C                     scroll_off@line:
  1804                           	opt stack 0
  1805  00002C                     scroll_left_to_right@clcd_display_string_details:
  1806                           	opt stack 0
  1807  00002C                     scroll_right_to_left@clcd_display_string_details:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0x2B
  1811  00002C                     	ds	1
  1812  00002D                     ?_strstr:
  1813                           	opt stack 0
  1814  00002D                     scroll_off@display_char_count:
  1815                           	opt stack 0
  1816  00002D                     printf@flag:
  1817                           	opt stack 0
  1818  00002D                     strstr@s1:
  1819                           	opt stack 0
  1820                           
  1821                           ; 2 bytes @ 0x2C
  1822  00002D                     	ds	1
  1823  00002E                     ??_scroll_left_to_right:
  1824  00002E                     ??_scroll_right_to_left:
  1825  00002E                     scroll_off@str_len:
  1826                           	opt stack 0
  1827  00002E                     printf@prec:
  1828                           	opt stack 0
  1829                           
  1830                           ; 1 bytes @ 0x2D
  1831  00002E                     	ds	1
  1832  00002F                     scroll_off@j:
  1833                           	opt stack 0
  1834  00002F                     printf@cp:
  1835                           	opt stack 0
  1836  00002F                     strstr@s2:
  1837                           	opt stack 0
  1838                           
  1839                           ; 2 bytes @ 0x2E
  1840  00002F                     	ds	2
  1841  000031                     scroll_off@i:
  1842                           	opt stack 0
  1843  000031                     printf@ap:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0x30
  1847  000031                     	ds	2
  1848  000033                     printf@val:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0x32
  1852  000033                     	ds	2
  1853  000035                     printf@c:
  1854                           	opt stack 0
  1855                           
  1856                           ; 1 bytes @ 0x34
  1857  000035                     	ds	1
  1858  000036                     init_clcd_cusotom_lcd@clcd_init_col:
  1859                           	opt stack 0
  1860  000036                     conflict_check@new_start_point:
  1861                           	opt stack 0
  1862  000036                     scroll_left_to_right@line:
  1863                           	opt stack 0
  1864  000036                     copy_data@clcd_str_data:
  1865                           	opt stack 0
  1866  000036                     collect_row@str:
  1867                           	opt stack 0
  1868  000036                     collect_column@str:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x35
  1872  000036                     	ds	1
  1873  000037                     init_clcd_cusotom_lcd@clcd_init_row:
  1874                           	opt stack 0
  1875  000037                     conflict_check@new_end_point:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x36
  1879  000037                     	ds	1
  1880  000038                     ??_conflict_check:
  1881  000038                     copy_data@data:
  1882                           	opt stack 0
  1883  000038                     collect_row@data_row:
  1884                           	opt stack 0
  1885  000038                     collect_column@data_column:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x37
  1889  000038                     	ds	2
  1890  00003A                     ??_copy_data:
  1891  00003A                     ??_collect_row:
  1892  00003A                     ??_collect_column:
  1893                           
  1894                           ; 1 bytes @ 0x39
  1895  00003A                     	ds	1
  1896  00003B                     conflict_check@exist_uid_idx:
  1897                           	opt stack 0
  1898  00003B                     scroll_right_to_left@line:
  1899                           	opt stack 0
  1900                           
  1901                           ; 1 bytes @ 0x3A
  1902  00003B                     	ds	1
  1903  00003C                     ??_make_display:
  1904  00003C                     conflict_check@conflict:
  1905                           	opt stack 0
  1906                           
  1907                           ; 1 bytes @ 0x3B
  1908  00003C                     	ds	1
  1909  00003D                     collect_column@column:
  1910                           	opt stack 0
  1911  00003D                     conflict_check@i:
  1912                           	opt stack 0
  1913  00003D                     collect_row@i:
  1914                           	opt stack 0
  1915                           
  1916                           ; 2 bytes @ 0x3C
  1917  00003D                     	ds	1
  1918  00003E                     collect_column@i:
  1919                           	opt stack 0
  1920                           
  1921                           ; 2 bytes @ 0x3D
  1922  00003E                     	ds	1
  1923  00003F                     collect_row@row:
  1924                           	opt stack 0
  1925  00003F                     make_display@count:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0x3E
  1929  00003F                     	ds	2
  1930  000041                     tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postdec1	equ	0xFE5
  1937                           fsr1h	equ	0xFE2
  1938                           fsr1l	equ	0xFE1
  1939                           
  1940                           ; 1 bytes @ 0x40
  1941 ;;
  1942 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1943 ;;
  1944 ;; *************** function _main *****************
  1945 ;; Defined at:
  1946 ;;		line 77 in file "main.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;		None
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;Total ram usage:        0 bytes
  1965 ;; Hardware stack levels required when called:   14
  1966 ;; This function calls:
  1967 ;;		_SYSTEM_Initialize
  1968 ;;		_TMR0_SetInterruptHandler
  1969 ;;		_TMR0_StartTimer
  1970 ;;		_TMR0_StopTimer
  1971 ;;		_TMR1_StopTimer
  1972 ;;		_TMR5_StopTimer
  1973 ;;		__delay_MS
  1974 ;;		_cmd_consol_task
  1975 ;;		_console_init
  1976 ;;		_make_display
  1977 ;;		_printf
  1978 ;; This function is called by:
  1979 ;;		Startup code after reset
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text0
  1984  003016                     __ptext0:
  1985                           	opt stack 0
  1986  003016                     _main:
  1987                           	opt stack 17
  1988                           
  1989                           ;main.c: 80: SYSTEM_Initialize();
  1990                           
  1991                           ;incstack = 0
  1992  003016  EC48  F01B         	call	_SYSTEM_Initialize	;wreg free
  1993                           
  1994                           ;main.c: 81: TMR5_StopTimer();
  1995  00301A  EC05  F01C         	call	_TMR5_StopTimer	;wreg free
  1996                           
  1997                           ;main.c: 82: TMR1_StopTimer();
  1998  00301E  EC0B  F01C         	call	_TMR1_StopTimer	;wreg free
  1999                           
  2000                           ;main.c: 83: TMR0_StopTimer();
  2001  003022  EC0D  F01C         	call	_TMR0_StopTimer	;wreg free
  2002                           
  2003                           ;main.c: 85: TMR0_SetInterruptHandler(make_array);
  2004  003026  0EC8               	movlw	low _make_array
  2005  003028  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  2006  00302A  0E37               	movlw	high _make_array
  2007  00302C  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  2008  00302E  ECF9  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  2009                           
  2010                           ;main.c: 105: (INTCONbits.GIE = 1);
  2011  003032  8EF2               	bsf	intcon,7,c	;volatile
  2012                           
  2013                           ;main.c: 111: (INTCONbits.PEIE = 1);
  2014  003034  8CF2               	bsf	intcon,6,c	;volatile
  2015                           
  2016                           ;main.c: 115: console_init();
  2017  003036  EC05  F017         	call	_console_init	;wreg free
  2018                           
  2019                           ;main.c: 116: _delay_MS(1000);
  2020  00303A  0E03               	movlw	3
  2021  00303C  6E11               	movwf	__delay_MS@delay+1,c
  2022  00303E  0EE8               	movlw	232
  2023  003040  6E10               	movwf	__delay_MS@delay,c
  2024  003042  EC6C  F019         	call	__delay_MS	;wreg free
  2025                           
  2026                           ;main.c: 118: printf("Init_complete..\r\n");
  2027  003046  0EF5               	movlw	low STR_122
  2028  003048  6E24               	movwf	printf@f,c
  2029  00304A  0EFD               	movlw	high STR_122
  2030  00304C  6E25               	movwf	printf@f+1,c
  2031  00304E  EC02  F011         	call	_printf	;wreg free
  2032                           
  2033                           ;main.c: 133: TMR0_StartTimer();
  2034  003052  EC11  F01C         	call	_TMR0_StartTimer	;wreg free
  2035  003056                     l7323:
  2036                           
  2037                           ;main.c: 137: {
  2038                           ;main.c: 139: cmd_consol_task();
  2039  003056  EC14  F010         	call	_cmd_consol_task	;wreg free
  2040                           
  2041                           ;main.c: 140: if(display == 1){make_display();display = 0;}
  2042  00305A  0100               	movlb	0	; () banked
  2043  00305C  0583               	decf	_display& (0+255),w,b
  2044  00305E  A4D8               	btfss	status,2,c
  2045  003060  D7FA               	goto	l7323
  2046                           
  2047                           ; BSR set to: 0
  2048  003062  EC23  F00F         	call	_make_display	;wreg free
  2049  003066  0E00               	movlw	0
  2050  003068  0100               	movlb	0	; () banked
  2051  00306A  6F83               	movwf	_display& (0+255),b
  2052                           
  2053                           ; BSR set to: 0
  2054                           
  2055                           ; BSR set to: 0
  2056  00306C  D7F4               	goto	l7323
  2057  00306E                     __end_of_main:
  2058                           	opt stack 0
  2059                           tblptru	equ	0xFF8
  2060                           tblptrh	equ	0xFF7
  2061                           tblptrl	equ	0xFF6
  2062                           tablat	equ	0xFF5
  2063                           intcon	equ	0xFF2
  2064                           postinc0	equ	0xFEE
  2065                           wreg	equ	0xFE8
  2066                           postdec1	equ	0xFE5
  2067                           fsr1h	equ	0xFE2
  2068                           fsr1l	equ	0xFE1
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _console_init *****************
  2072 ;; Defined at:
  2073 ;;		line 363 in file "cmd_consol.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;Total ram usage:        0 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    7
  2094 ;; This function calls:
  2095 ;;		_clear_cmd_data
  2096 ;;		_memset
  2097 ;; This function is called by:
  2098 ;;		_main
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text1
  2103  002E0A                     __ptext1:
  2104                           	opt stack 0
  2105  002E0A                     _console_init:
  2106                           	opt stack 23
  2107                           
  2108                           ;cmd_consol.c: 364: cmd_consol_state = CMD_CONSOL_INIT;
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;incstack = 0
  2112  002E0A  0E00               	movlw	0
  2113  002E0C  0100               	movlb	0	; () banked
  2114  002E0E  6F82               	movwf	_cmd_consol_state& (0+255),b
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;cmd_consol.c: 365: clear_cmd_data();
  2118  002E10  EC5C  F01A         	call	_clear_cmd_data	;wreg free
  2119                           
  2120                           ;cmd_consol.c: 366: valid_cmd = 0;
  2121  002E14  0E00               	movlw	0
  2122  002E16  0100               	movlb	0	; () banked
  2123  002E18  6F84               	movwf	_valid_cmd& (0+255),b
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;cmd_consol.c: 367: clcd_init_row = 0;
  2127  002E1A  0E00               	movlw	0
  2128  002E1C  6E41               	movwf	_clcd_init_row,c
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;cmd_consol.c: 368: clcd_init_col = 0;
  2132  002E1E  0E00               	movlw	0
  2133  002E20  0100               	movlb	0	; () banked
  2134  002E22  6F81               	movwf	_clcd_init_col& (0+255),b
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;cmd_consol.c: 369: check = 0;
  2138  002E24  0E00               	movlw	0
  2139  002E26  0100               	movlb	0	; () banked
  2140  002E28  6F80               	movwf	_check& (0+255),b
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;cmd_consol.c: 370: memset(CMD, 0, sizeof (CMD));
  2144  002E2A  0ECB               	movlw	low _CMD
  2145  002E2C  6E24               	movwf	memset@p1,c
  2146  002E2E  0E00               	movlw	high _CMD
  2147  002E30  6E25               	movwf	memset@p1+1,c
  2148  002E32  0E00               	movlw	0
  2149  002E34  6E27               	movwf	memset@c+1,c
  2150  002E36  0E00               	movlw	0
  2151  002E38  6E26               	movwf	memset@c,c
  2152  002E3A  0E00               	movlw	0
  2153  002E3C  6E29               	movwf	memset@n+1,c
  2154  002E3E  0E0F               	movlw	15
  2155  002E40  6E28               	movwf	memset@n,c
  2156  002E42  ECA5  F01A         	call	_memset	;wreg free
  2157                           
  2158                           ;cmd_consol.c: 371: memset(str_data, 0, sizeof (str_data));
  2159  002E46  0E50               	movlw	low _str_data
  2160  002E48  6E24               	movwf	memset@p1,c
  2161  002E4A  0E01               	movlw	high _str_data
  2162  002E4C  6E25               	movwf	memset@p1+1,c
  2163  002E4E  0E00               	movlw	0
  2164  002E50  6E27               	movwf	memset@c+1,c
  2165  002E52  0E00               	movlw	0
  2166  002E54  6E26               	movwf	memset@c,c
  2167  002E56  0E00               	movlw	0
  2168  002E58  6E29               	movwf	memset@n+1,c
  2169  002E5A  0E28               	movlw	40
  2170  002E5C  6E28               	movwf	memset@n,c
  2171  002E5E  ECA5  F01A         	call	_memset	;wreg free
  2172                           
  2173                           ;cmd_consol.c: 372: memset(uart_str, 0, sizeof (uart_str));
  2174  002E62  0E00               	movlw	low _uart_str
  2175  002E64  6E24               	movwf	memset@p1,c
  2176  002E66  0E02               	movlw	high _uart_str
  2177  002E68  6E25               	movwf	memset@p1+1,c
  2178  002E6A  0E00               	movlw	0
  2179  002E6C  6E27               	movwf	memset@c+1,c
  2180  002E6E  0E00               	movlw	0
  2181  002E70  6E26               	movwf	memset@c,c
  2182  002E72  0E00               	movlw	0
  2183  002E74  6E29               	movwf	memset@n+1,c
  2184  002E76  0E96               	movlw	150
  2185  002E78  6E28               	movwf	memset@n,c
  2186  002E7A  ECA5  F01A         	call	_memset	;wreg free
  2187  002E7E  0012               	return		;funcret
  2188  002E80                     __end_of_console_init:
  2189                           	opt stack 0
  2190                           tblptru	equ	0xFF8
  2191                           tblptrh	equ	0xFF7
  2192                           tblptrl	equ	0xFF6
  2193                           tablat	equ	0xFF5
  2194                           intcon	equ	0xFF2
  2195                           postinc0	equ	0xFEE
  2196                           wreg	equ	0xFE8
  2197                           postdec1	equ	0xFE5
  2198                           fsr1h	equ	0xFE2
  2199                           fsr1l	equ	0xFE1
  2200                           status	equ	0xFD8
  2201                           
  2202 ;; *************** function _clear_cmd_data *****************
  2203 ;; Defined at:
  2204 ;;		line 8 in file "cmd_consol.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;		None
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;		None
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      void 
  2211 ;; Registers used:
  2212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;Total ram usage:        0 bytes
  2223 ;; Hardware stack levels used:    1
  2224 ;; Hardware stack levels required when called:    6
  2225 ;; This function calls:
  2226 ;;		_memset
  2227 ;; This function is called by:
  2228 ;;		_console_init
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text2
  2233  0034B8                     __ptext2:
  2234                           	opt stack 0
  2235  0034B8                     _clear_cmd_data:
  2236                           	opt stack 23
  2237                           
  2238                           ;cmd_consol.c: 9: memset(&cmd_data, 0, sizeof (CMD_CONSOL_DATA));
  2239                           
  2240                           ;incstack = 0
  2241  0034B8  0E86               	movlw	low _cmd_data
  2242  0034BA  6E24               	movwf	memset@p1,c
  2243  0034BC  0E00               	movlw	high _cmd_data
  2244  0034BE  6E25               	movwf	memset@p1+1,c
  2245  0034C0  0E00               	movlw	0
  2246  0034C2  6E27               	movwf	memset@c+1,c
  2247  0034C4  0E00               	movlw	0
  2248  0034C6  6E26               	movwf	memset@c,c
  2249  0034C8  0E00               	movlw	0
  2250  0034CA  6E29               	movwf	memset@n+1,c
  2251  0034CC  0E31               	movlw	49
  2252  0034CE  6E28               	movwf	memset@n,c
  2253  0034D0  ECA5  F01A         	call	_memset	;wreg free
  2254                           
  2255                           ;cmd_consol.c: 11: cmd_data.scroll = -1;
  2256  0034D4  0100               	movlb	0	; () banked
  2257  0034D6  69B5               	setf	(_cmd_data+47)& (0+255),b
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;cmd_consol.c: 12: cmd_data.end_col = cmd_data.start_col = -1;
  2261  0034D8  0100               	movlb	0	; () banked
  2262  0034DA  69B1               	setf	(_cmd_data+43)& (0+255),b
  2263  0034DC  0100               	movlb	0	; () banked
  2264  0034DE  69B3               	setf	(_cmd_data+45)& (0+255),b
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;cmd_consol.c: 13: cmd_data.end_row = cmd_data.end_row = -1;
  2268  0034E0  0100               	movlb	0	; () banked
  2269  0034E2  69B2               	setf	(_cmd_data+44)& (0+255),b
  2270  0034E4  0100               	movlb	0	; () banked
  2271  0034E6  69B2               	setf	(_cmd_data+44)& (0+255),b
  2272                           
  2273                           ; BSR set to: 0
  2274  0034E8  0012               	return		;funcret
  2275  0034EA                     __end_of_clear_cmd_data:
  2276                           	opt stack 0
  2277                           tblptru	equ	0xFF8
  2278                           tblptrh	equ	0xFF7
  2279                           tblptrl	equ	0xFF6
  2280                           tablat	equ	0xFF5
  2281                           intcon	equ	0xFF2
  2282                           postinc0	equ	0xFEE
  2283                           wreg	equ	0xFE8
  2284                           postdec1	equ	0xFE5
  2285                           fsr1h	equ	0xFE2
  2286                           fsr1l	equ	0xFE1
  2287                           status	equ	0xFD8
  2288                           
  2289 ;; *************** function _cmd_consol_task *****************
  2290 ;; Defined at:
  2291 ;;		line 375 in file "cmd_consol.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;		None
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  ch              1   15[BANK0 ] unsigned char 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;Total ram usage:        2 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:   13
  2312 ;; This function calls:
  2313 ;;		_getch
  2314 ;;		_memset
  2315 ;;		_parse_cmd_str
  2316 ;;		_printf
  2317 ;;		_puts
  2318 ;;		_reply_to_host
  2319 ;; This function is called by:
  2320 ;;		_main
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text3
  2325  002028                     __ptext3:
  2326                           	opt stack 0
  2327  002028                     _cmd_consol_task:
  2328                           	opt stack 17
  2329                           
  2330                           ;cmd_consol.c: 376: if ((eusart1RxCount) > 0) {
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;incstack = 0
  2334  002028  5044               	movf	_eusart1RxCount,w,c	;volatile
  2335  00202A  B4D8               	btfsc	status,2,c
  2336  00202C  D0DF               	goto	l7191
  2337                           
  2338                           ;cmd_consol.c: 377: static int i = 0;
  2339                           ;cmd_consol.c: 378: unsigned char ch = 0;
  2340  00202E  0E00               	movlw	0
  2341  002030  0100               	movlb	0	; () banked
  2342  002032  6FE9               	movwf	cmd_consol_task@ch& (0+255),b
  2343                           
  2344                           ;cmd_consol.c: 379: while ((eusart1RxCount)) {
  2345  002034  D05C               	goto	l7153
  2346  002036                     l7127:
  2347                           
  2348                           ;cmd_consol.c: 380: ch = getch();
  2349  002036  EC02  F01C         	call	_getch	;wreg free
  2350  00203A  0100               	movlb	0	; () banked
  2351  00203C  6FE9               	movwf	cmd_consol_task@ch& (0+255),b
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;cmd_consol.c: 381: if (ch == '\n' || ch == '\r') {
  2355  00203E  0E0A               	movlw	10
  2356  002040  0100               	movlb	0	; () banked
  2357  002042  19E9               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2358  002044  B4D8               	btfsc	status,2,c
  2359  002046  D005               	goto	l7133
  2360                           
  2361                           ; BSR set to: 0
  2362  002048  0E0D               	movlw	13
  2363  00204A  0100               	movlb	0	; () banked
  2364  00204C  19E9               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2365  00204E  A4D8               	btfss	status,2,c
  2366  002050  D00F               	goto	l7139
  2367  002052                     l7133:
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;cmd_consol.c: 382: i = 0;
  2371  002052  0E00               	movlw	0
  2372  002054  0100               	movlb	0	; () banked
  2373  002056  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2374  002058  0E00               	movlw	0
  2375  00205A  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2376                           
  2377                           ;cmd_consol.c: 383: check = 1;
  2378  00205C  0E01               	movlw	1
  2379  00205E  0100               	movlb	0	; () banked
  2380  002060  6F80               	movwf	_check& (0+255),b
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;cmd_consol.c: 384: printf("\r\n");
  2384  002062  0EAA               	movlw	low (STR_58+9)
  2385  002064  6E24               	movwf	printf@f,c
  2386  002066  0EFE               	movlw	high (STR_58+9)
  2387  002068  6E25               	movwf	printf@f+1,c
  2388  00206A  EC02  F011         	call	_printf	;wreg free
  2389                           
  2390                           ;cmd_consol.c: 385: break;
  2391  00206E  D042               	goto	l7155
  2392  002070                     l7139:
  2393  002070  0E08               	movlw	8
  2394  002072  0100               	movlb	0	; () banked
  2395  002074  19E9               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2396  002076  A4D8               	btfss	status,2,c
  2397  002078  D018               	goto	l7147
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;cmd_consol.c: 387: uart_str[--i]=0;
  2401  00207A  0100               	movlb	0	; () banked
  2402  00207C  077A               	decf	cmd_consol_task@i& (0+255),f,b
  2403  00207E  A0D8               	btfss	status,0,c
  2404  002080  077B               	decf	(cmd_consol_task@i+1)& (0+255),f,b
  2405  002082  0E00               	movlw	low _uart_str
  2406  002084  0100               	movlb	0	; () banked
  2407  002086  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2408  002088  6ED9               	movwf	fsr2l,c
  2409  00208A  0E02               	movlw	high _uart_str
  2410  00208C  0100               	movlb	0	; () banked
  2411  00208E  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2412  002090  6EDA               	movwf	fsr2h,c
  2413  002092  0E00               	movlw	0
  2414  002094  6EDF               	movwf	indf2,c
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;cmd_consol.c: 388: printf("%c", ch);
  2418  002096  0EFA               	movlw	low STR_116
  2419  002098  6E24               	movwf	printf@f,c
  2420  00209A  0EFF               	movlw	high STR_116
  2421  00209C  6E25               	movwf	printf@f+1,c
  2422  00209E  C0E9  F026         	movff	cmd_consol_task@ch,?_printf+2
  2423  0020A2  6A27               	clrf	?_printf+3,c
  2424  0020A4  EC02  F011         	call	_printf	;wreg free
  2425                           
  2426                           ;cmd_consol.c: 389: continue;
  2427  0020A8  D022               	goto	l7153
  2428  0020AA                     l7147:
  2429                           
  2430                           ;cmd_consol.c: 391: else {
  2431                           ;cmd_consol.c: 392: uart_str[i] = ch;
  2432  0020AA  0E00               	movlw	low _uart_str
  2433  0020AC  0100               	movlb	0	; () banked
  2434  0020AE  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2435  0020B0  6ED9               	movwf	fsr2l,c
  2436  0020B2  0E02               	movlw	high _uart_str
  2437  0020B4  0100               	movlb	0	; () banked
  2438  0020B6  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2439  0020B8  6EDA               	movwf	fsr2h,c
  2440  0020BA  C0E9  FFDF         	movff	cmd_consol_task@ch,indf2
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;cmd_consol.c: 393: printf("%c", uart_str[i]);
  2444  0020BE  0EFA               	movlw	low STR_116
  2445  0020C0  6E24               	movwf	printf@f,c
  2446  0020C2  0EFF               	movlw	high STR_116
  2447  0020C4  6E25               	movwf	printf@f+1,c
  2448  0020C6  0E00               	movlw	low _uart_str
  2449  0020C8  0100               	movlb	0	; () banked
  2450  0020CA  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2451  0020CC  6ED9               	movwf	fsr2l,c
  2452  0020CE  0E02               	movlw	high _uart_str
  2453  0020D0  0100               	movlb	0	; () banked
  2454  0020D2  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2455  0020D4  6EDA               	movwf	fsr2h,c
  2456  0020D6  50DF               	movf	indf2,w,c
  2457  0020D8  0100               	movlb	0	; () banked
  2458  0020DA  6FE8               	movwf	??_cmd_consol_task& (0+255),b
  2459  0020DC  0100               	movlb	0	; () banked
  2460  0020DE  51E8               	movf	??_cmd_consol_task& (0+255),w,b
  2461  0020E0  6E26               	movwf	?_printf+2,c
  2462  0020E2  6A27               	clrf	?_printf+3,c
  2463  0020E4  EC02  F011         	call	_printf	;wreg free
  2464                           
  2465                           ;cmd_consol.c: 394: }
  2466                           ;cmd_consol.c: 395: i++;
  2467  0020E8  0100               	movlb	0	; () banked
  2468  0020EA  4B7A               	infsnz	cmd_consol_task@i& (0+255),f,b
  2469  0020EC  2B7B               	incf	(cmd_consol_task@i+1)& (0+255),f,b
  2470  0020EE                     l7153:
  2471  0020EE  5044               	movf	_eusart1RxCount,w,c	;volatile
  2472  0020F0  A4D8               	btfss	status,2,c
  2473  0020F2  D7A1               	goto	l7127
  2474  0020F4                     l7155:
  2475                           
  2476                           ;cmd_consol.c: 396: }
  2477                           ;cmd_consol.c: 397: if (i > 150) {
  2478  0020F4  0100               	movlb	0	; () banked
  2479  0020F6  BF7B               	btfsc	(cmd_consol_task@i+1)& (0+255),7,b
  2480  0020F8  D079               	goto	l7191
  2481  0020FA  0100               	movlb	0	; () banked
  2482  0020FC  517B               	movf	(cmd_consol_task@i+1)& (0+255),w,b
  2483  0020FE  E105               	bnz	u7620
  2484  002100  0E97               	movlw	151
  2485  002102  0100               	movlb	0	; () banked
  2486  002104  5D7A               	subwf	cmd_consol_task@i& (0+255),w,b
  2487  002106  A0D8               	btfss	status,0,c
  2488  002108  D071               	goto	l7191
  2489  00210A                     u7620:
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;cmd_consol.c: 398: puts("ERR_CMD_LEN");
  2493  00210A  0EDD               	movlw	low STR_118
  2494  00210C  6E14               	movwf	puts@s,c
  2495  00210E  0EFE               	movlw	high STR_118
  2496  002110  6E15               	movwf	puts@s+1,c
  2497  002112  EC8D  F01B         	call	_puts	;wreg free
  2498                           
  2499                           ;cmd_consol.c: 399: i = 0;
  2500  002116  0E00               	movlw	0
  2501  002118  0100               	movlb	0	; () banked
  2502  00211A  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2503  00211C  0E00               	movlw	0
  2504  00211E  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;cmd_consol.c: 400: }
  2508                           ;cmd_consol.c: 401: }
  2509                           ;cmd_consol.c: 402: switch (cmd_consol_state) {
  2510                           
  2511                           ; BSR set to: 0
  2512  002120  D065               	goto	l7191
  2513  002122                     l7161:
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;cmd_consol.c: 404: {
  2517                           ;cmd_consol.c: 405: memset(CMD, 0, sizeof (CMD));
  2518  002122  0ECB               	movlw	low _CMD
  2519  002124  6E24               	movwf	memset@p1,c
  2520  002126  0E00               	movlw	high _CMD
  2521  002128  6E25               	movwf	memset@p1+1,c
  2522  00212A  0E00               	movlw	0
  2523  00212C  6E27               	movwf	memset@c+1,c
  2524  00212E  0E00               	movlw	0
  2525  002130  6E26               	movwf	memset@c,c
  2526  002132  0E00               	movlw	0
  2527  002134  6E29               	movwf	memset@n+1,c
  2528  002136  0E0F               	movlw	15
  2529  002138  6E28               	movwf	memset@n,c
  2530  00213A  ECA5  F01A         	call	_memset	;wreg free
  2531                           
  2532                           ;cmd_consol.c: 406: memset(uart_str, 0, sizeof (uart_str));
  2533  00213E  0E00               	movlw	low _uart_str
  2534  002140  6E24               	movwf	memset@p1,c
  2535  002142  0E02               	movlw	high _uart_str
  2536  002144  6E25               	movwf	memset@p1+1,c
  2537  002146  0E00               	movlw	0
  2538  002148  6E27               	movwf	memset@c+1,c
  2539  00214A  0E00               	movlw	0
  2540  00214C  6E26               	movwf	memset@c,c
  2541  00214E  0E00               	movlw	0
  2542  002150  6E29               	movwf	memset@n+1,c
  2543  002152  0E96               	movlw	150
  2544  002154  6E28               	movwf	memset@n,c
  2545  002156  ECA5  F01A         	call	_memset	;wreg free
  2546                           
  2547                           ;cmd_consol.c: 407: valid_cmd = 0;
  2548  00215A  0E00               	movlw	0
  2549  00215C  0100               	movlb	0	; () banked
  2550  00215E  6F84               	movwf	_valid_cmd& (0+255),b
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;cmd_consol.c: 408: puts("Init_Done\r\n");
  2554  002160  0EAD               	movlw	low STR_119
  2555  002162  6E14               	movwf	puts@s,c
  2556  002164  0EFE               	movlw	high STR_119
  2557  002166  6E15               	movwf	puts@s+1,c
  2558  002168  EC8D  F01B         	call	_puts	;wreg free
  2559                           
  2560                           ;cmd_consol.c: 409: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2561  00216C  0E01               	movlw	1
  2562  00216E  0100               	movlb	0	; () banked
  2563  002170  6F82               	movwf	_cmd_consol_state& (0+255),b
  2564                           
  2565                           ;cmd_consol.c: 410: break;
  2566  002172  0012               	return	
  2567  002174                     l7169:
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;cmd_consol.c: 413: {
  2571                           ;cmd_consol.c: 414: static int i = 0;
  2572                           ;cmd_consol.c: 416: if (check == 1) {
  2573  002174  0100               	movlb	0	; () banked
  2574  002176  0580               	decf	_check& (0+255),w,b
  2575  002178  A4D8               	btfss	status,2,c
  2576  00217A  0012               	return	
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;cmd_consol.c: 417: check = 0;
  2580  00217C  0E00               	movlw	0
  2581  00217E  0100               	movlb	0	; () banked
  2582  002180  6F80               	movwf	_check& (0+255),b
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;cmd_consol.c: 418: if (parse_cmd_str(uart_str) == 0) {
  2586  002182  0E00               	movlw	low _uart_str
  2587  002184  0100               	movlb	0	; () banked
  2588  002186  6FDA               	movwf	parse_cmd_str@str& (0+255),b
  2589  002188  0E02               	movlw	high _uart_str
  2590  00218A  0100               	movlb	0	; () banked
  2591  00218C  6FDB               	movwf	(parse_cmd_str@str+1)& (0+255),b
  2592  00218E  EC55  F000         	call	_parse_cmd_str	;wreg free
  2593  002192  0900               	iorlw	0
  2594  002194  A4D8               	btfss	status,2,c
  2595  002196  D012               	goto	l7179
  2596                           
  2597                           ;cmd_consol.c: 419: memset(uart_str, 0, sizeof (uart_str));
  2598  002198  0E00               	movlw	low _uart_str
  2599  00219A  6E24               	movwf	memset@p1,c
  2600  00219C  0E02               	movlw	high _uart_str
  2601  00219E  6E25               	movwf	memset@p1+1,c
  2602  0021A0  0E00               	movlw	0
  2603  0021A2  6E27               	movwf	memset@c+1,c
  2604  0021A4  0E00               	movlw	0
  2605  0021A6  6E26               	movwf	memset@c,c
  2606  0021A8  0E00               	movlw	0
  2607  0021AA  6E29               	movwf	memset@n+1,c
  2608  0021AC  0E96               	movlw	150
  2609  0021AE  6E28               	movwf	memset@n,c
  2610  0021B0  ECA5  F01A         	call	_memset	;wreg free
  2611                           
  2612                           ;cmd_consol.c: 420: cmd_consol_state = CMD_CONSOL_REPLY_HOST;
  2613  0021B4  0E02               	movlw	2
  2614  0021B6  0100               	movlb	0	; () banked
  2615  0021B8  6F82               	movwf	_cmd_consol_state& (0+255),b
  2616                           
  2617                           ;cmd_consol.c: 421: } else {
  2618  0021BA  0012               	return	
  2619  0021BC                     l7179:
  2620                           
  2621                           ;cmd_consol.c: 422: printf("%s\r\n", "ERROR");
  2622  0021BC  0EDA               	movlw	low (STR_109+2)
  2623  0021BE  6E24               	movwf	printf@f,c
  2624  0021C0  0EFF               	movlw	high (STR_109+2)
  2625  0021C2  6E25               	movwf	printf@f+1,c
  2626  0021C4  0EE6               	movlw	low STR_106
  2627  0021C6  6E26               	movwf	?_printf+2,c
  2628  0021C8  0EFF               	movlw	high STR_106
  2629  0021CA  6E27               	movwf	?_printf+3,c
  2630  0021CC  EC02  F011         	call	_printf	;wreg free
  2631                           
  2632                           ;cmd_consol.c: 423: }
  2633                           ;cmd_consol.c: 424: }
  2634                           ;cmd_consol.c: 425: break;
  2635  0021D0  0012               	return	
  2636  0021D2                     l7181:
  2637                           
  2638                           ;cmd_consol.c: 428: {
  2639                           ;cmd_consol.c: 429: if (valid_cmd == 1) {
  2640  0021D2  0100               	movlb	0	; () banked
  2641  0021D4  0584               	decf	_valid_cmd& (0+255),w,b
  2642  0021D6  A4D8               	btfss	status,2,c
  2643  0021D8  D005               	goto	l7187
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;cmd_consol.c: 430: reply_to_host();
  2647  0021DA  EC69  F008         	call	_reply_to_host	;wreg free
  2648                           
  2649                           ;cmd_consol.c: 431: valid_cmd = 0;
  2650  0021DE  0E00               	movlw	0
  2651  0021E0  0100               	movlb	0	; () banked
  2652  0021E2  6F84               	movwf	_valid_cmd& (0+255),b
  2653  0021E4                     l7187:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;cmd_consol.c: 433: }
  2657                           ;cmd_consol.c: 434: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2658  0021E4  0E01               	movlw	1
  2659  0021E6  0100               	movlb	0	; () banked
  2660  0021E8  6F82               	movwf	_cmd_consol_state& (0+255),b
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;cmd_consol.c: 436: }
  2664                           ;cmd_consol.c: 437: }
  2665                           
  2666                           ;cmd_consol.c: 435: break;
  2667  0021EA  0012               	return	
  2668  0021EC                     l7191:
  2669  0021EC  0100               	movlb	0	; () banked
  2670  0021EE  5182               	movf	_cmd_consol_state& (0+255),w,b
  2671                           
  2672                           ; Switch size 1, requested type "space"
  2673                           ; Number of cases is 3, Range of values is 0 to 2
  2674                           ; switch strategies available:
  2675                           ; Name         Instructions Cycles
  2676                           ; simple_byte           10     6 (average)
  2677                           ;	Chosen strategy is simple_byte
  2678  0021F0  0A00               	xorlw	0	; case 0
  2679  0021F2  B4D8               	btfsc	status,2,c
  2680  0021F4  D796               	goto	l7161
  2681  0021F6  0A01               	xorlw	1	; case 1
  2682  0021F8  B4D8               	btfsc	status,2,c
  2683  0021FA  D7BC               	goto	l7169
  2684  0021FC  0A03               	xorlw	3	; case 2
  2685  0021FE  A4D8               	btfss	status,2,c
  2686  002200  0012               	return	
  2687  002202  D7E7               	goto	l7181
  2688  002204                     __end_of_cmd_consol_task:
  2689                           	opt stack 0
  2690                           tblptru	equ	0xFF8
  2691                           tblptrh	equ	0xFF7
  2692                           tblptrl	equ	0xFF6
  2693                           tablat	equ	0xFF5
  2694                           intcon	equ	0xFF2
  2695                           postinc0	equ	0xFEE
  2696                           wreg	equ	0xFE8
  2697                           postdec1	equ	0xFE5
  2698                           fsr1h	equ	0xFE2
  2699                           fsr1l	equ	0xFE1
  2700                           indf2	equ	0xFDF
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _reply_to_host *****************
  2706 ;; Defined at:
  2707 ;;		line 316 in file "cmd_consol.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;		None
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;  ch              1   13[BANK0 ] unsigned char 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;Total ram usage:        4 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:   12
  2728 ;; This function calls:
  2729 ;;		_clcd_max_col
  2730 ;;		_clcd_max_row
  2731 ;;		_init_clcd_cusotom_lcd
  2732 ;;		_max_display_str
  2733 ;;		_max_display_support
  2734 ;;		_max_uid_range
  2735 ;;		_min_uid_range
  2736 ;;		_printf
  2737 ;;		_puts
  2738 ;;		_strcmp
  2739 ;;		_update_string_data
  2740 ;; This function is called by:
  2741 ;;		_cmd_consol_task
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text4
  2746  0010D2                     __ptext4:
  2747                           	opt stack 0
  2748  0010D2                     _reply_to_host:
  2749                           	opt stack 17
  2750                           
  2751                           ;cmd_consol.c: 317: if (strcmp(CMD, "KLM") == 0) {
  2752                           
  2753                           ;incstack = 0
  2754  0010D2  0ECB               	movlw	low _CMD
  2755  0010D4  6E10               	movwf	strcmp@s1,c
  2756  0010D6  0E00               	movlw	high _CMD
  2757  0010D8  6E11               	movwf	strcmp@s1+1,c
  2758  0010DA  0EF6               	movlw	low STR_72
  2759  0010DC  6E12               	movwf	strcmp@s2,c
  2760  0010DE  0EFF               	movlw	high STR_72
  2761  0010E0  6E13               	movwf	strcmp@s2+1,c
  2762  0010E2  ECDA  F018         	call	_strcmp	;wreg free
  2763  0010E6  5010               	movf	?_strcmp,w,c
  2764  0010E8  1011               	iorwf	?_strcmp+1,w,c
  2765  0010EA  A4D8               	btfss	status,2,c
  2766  0010EC  D007               	goto	l7013
  2767                           
  2768                           ;cmd_consol.c: 318: puts("OK\r\n");
  2769  0010EE  0E9C               	movlw	low (STR_77+8)
  2770  0010F0  6E14               	movwf	puts@s,c
  2771  0010F2  0EFE               	movlw	high (STR_77+8)
  2772  0010F4  6E15               	movwf	puts@s+1,c
  2773  0010F6  EC8D  F01B         	call	_puts	;wreg free
  2774                           
  2775                           ;cmd_consol.c: 319: } else if (strcmp(CMD, "KLM+LCDS?") == 0) {
  2776  0010FA  0012               	return	
  2777  0010FC                     l7013:
  2778  0010FC  0ECB               	movlw	low _CMD
  2779  0010FE  6E10               	movwf	strcmp@s1,c
  2780  001100  0E00               	movlw	high _CMD
  2781  001102  6E11               	movwf	strcmp@s1+1,c
  2782  001104  0E4D               	movlw	low STR_28
  2783  001106  6E12               	movwf	strcmp@s2,c
  2784  001108  0EFF               	movlw	high STR_28
  2785  00110A  6E13               	movwf	strcmp@s2+1,c
  2786  00110C  ECDA  F018         	call	_strcmp	;wreg free
  2787  001110  5010               	movf	?_strcmp,w,c
  2788  001112  1011               	iorwf	?_strcmp+1,w,c
  2789  001114  A4D8               	btfss	status,2,c
  2790  001116  D017               	goto	l7017
  2791                           
  2792                           ;cmd_consol.c: 320: printf("%s\r\n", max_display_support());
  2793  001118  0EDA               	movlw	low (STR_109+2)
  2794  00111A  6E24               	movwf	printf@f,c
  2795  00111C  0EFF               	movlw	high (STR_109+2)
  2796  00111E  6E25               	movwf	printf@f+1,c
  2797  001120  ECEA  F01B         	call	_max_display_support	;wreg free
  2798  001124  C010  F026         	movff	?_max_display_support,?_printf+2
  2799  001128  C011  F027         	movff	?_max_display_support+1,?_printf+3
  2800  00112C  EC02  F011         	call	_printf	;wreg free
  2801                           
  2802                           ;cmd_consol.c: 321: printf("\r\n%s.., OK\r\n", "KLM+LCDS?");
  2803  001130  0E94               	movlw	low STR_77
  2804  001132  6E24               	movwf	printf@f,c
  2805  001134  0EFE               	movlw	high STR_77
  2806  001136  6E25               	movwf	printf@f+1,c
  2807  001138  0E4D               	movlw	low STR_28
  2808  00113A  6E26               	movwf	?_printf+2,c
  2809  00113C  0EFF               	movlw	high STR_28
  2810  00113E  6E27               	movwf	?_printf+3,c
  2811  001140  EC02  F011         	call	_printf	;wreg free
  2812                           
  2813                           ;cmd_consol.c: 322: } else if (strcmp(CMD, "KLM+MC?") == 0) {
  2814  001144  0012               	return	
  2815  001146                     l7017:
  2816  001146  0ECB               	movlw	low _CMD
  2817  001148  6E10               	movwf	strcmp@s1,c
  2818  00114A  0E00               	movlw	high _CMD
  2819  00114C  6E11               	movwf	strcmp@s1+1,c
  2820  00114E  0EBA               	movlw	low STR_24
  2821  001150  6E12               	movwf	strcmp@s2,c
  2822  001152  0EFF               	movlw	high STR_24
  2823  001154  6E13               	movwf	strcmp@s2+1,c
  2824  001156  ECDA  F018         	call	_strcmp	;wreg free
  2825  00115A  5010               	movf	?_strcmp,w,c
  2826  00115C  1011               	iorwf	?_strcmp+1,w,c
  2827  00115E  A4D8               	btfss	status,2,c
  2828  001160  D019               	goto	l7021
  2829                           
  2830                           ;cmd_consol.c: 323: printf("%d\r\n", clcd_max_col());
  2831  001162  0EF0               	movlw	low (STR_13+14)
  2832  001164  6E24               	movwf	printf@f,c
  2833  001166  0EFD               	movlw	high (STR_13+14)
  2834  001168  6E25               	movwf	printf@f+1,c
  2835  00116A  ECC3  F01B         	call	_clcd_max_col	;wreg free
  2836  00116E  0100               	movlb	0	; () banked
  2837  001170  6FE4               	movwf	??_reply_to_host& (0+255),b
  2838  001172  0100               	movlb	0	; () banked
  2839  001174  51E4               	movf	??_reply_to_host& (0+255),w,b
  2840  001176  6E26               	movwf	?_printf+2,c
  2841  001178  6A27               	clrf	?_printf+3,c
  2842  00117A  EC02  F011         	call	_printf	;wreg free
  2843                           
  2844                           ;cmd_consol.c: 324: printf("\r\n%s.., OK\r\n", "KLM+MC?");
  2845  00117E  0E94               	movlw	low STR_77
  2846  001180  6E24               	movwf	printf@f,c
  2847  001182  0EFE               	movlw	high STR_77
  2848  001184  6E25               	movwf	printf@f+1,c
  2849  001186  0EBA               	movlw	low STR_24
  2850  001188  6E26               	movwf	?_printf+2,c
  2851  00118A  0EFF               	movlw	high STR_24
  2852  00118C  6E27               	movwf	?_printf+3,c
  2853  00118E  EC02  F011         	call	_printf	;wreg free
  2854                           
  2855                           ;cmd_consol.c: 325: } else if (strcmp(CMD, "KLM+MR?") == 0) {
  2856  001192  0012               	return	
  2857  001194                     l7021:
  2858  001194  0ECB               	movlw	low _CMD
  2859  001196  6E10               	movwf	strcmp@s1,c
  2860  001198  0E00               	movlw	high _CMD
  2861  00119A  6E11               	movwf	strcmp@s1+1,c
  2862  00119C  0EC2               	movlw	low STR_26
  2863  00119E  6E12               	movwf	strcmp@s2,c
  2864  0011A0  0EFF               	movlw	high STR_26
  2865  0011A2  6E13               	movwf	strcmp@s2+1,c
  2866  0011A4  ECDA  F018         	call	_strcmp	;wreg free
  2867  0011A8  5010               	movf	?_strcmp,w,c
  2868  0011AA  1011               	iorwf	?_strcmp+1,w,c
  2869  0011AC  A4D8               	btfss	status,2,c
  2870  0011AE  D019               	goto	l7025
  2871                           
  2872                           ;cmd_consol.c: 326: printf("%d\r\n", clcd_max_row());
  2873  0011B0  0EF0               	movlw	low (STR_13+14)
  2874  0011B2  6E24               	movwf	printf@f,c
  2875  0011B4  0EFD               	movlw	high (STR_13+14)
  2876  0011B6  6E25               	movwf	printf@f+1,c
  2877  0011B8  ECBC  F01B         	call	_clcd_max_row	;wreg free
  2878  0011BC  0100               	movlb	0	; () banked
  2879  0011BE  6FE4               	movwf	??_reply_to_host& (0+255),b
  2880  0011C0  0100               	movlb	0	; () banked
  2881  0011C2  51E4               	movf	??_reply_to_host& (0+255),w,b
  2882  0011C4  6E26               	movwf	?_printf+2,c
  2883  0011C6  6A27               	clrf	?_printf+3,c
  2884  0011C8  EC02  F011         	call	_printf	;wreg free
  2885                           
  2886                           ;cmd_consol.c: 327: printf("\r\n%s.., OK\r\n", "KLM+MR?");
  2887  0011CC  0E94               	movlw	low STR_77
  2888  0011CE  6E24               	movwf	printf@f,c
  2889  0011D0  0EFE               	movlw	high STR_77
  2890  0011D2  6E25               	movwf	printf@f+1,c
  2891  0011D4  0EC2               	movlw	low STR_26
  2892  0011D6  6E26               	movwf	?_printf+2,c
  2893  0011D8  0EFF               	movlw	high STR_26
  2894  0011DA  6E27               	movwf	?_printf+3,c
  2895  0011DC  EC02  F011         	call	_printf	;wreg free
  2896                           
  2897                           ;cmd_consol.c: 328: } else if (strcmp(CMD, "KLM+LCDS") == 0) {
  2898  0011E0  0012               	return	
  2899  0011E2                     l7025:
  2900  0011E2  0ECB               	movlw	low _CMD
  2901  0011E4  6E10               	movwf	strcmp@s1,c
  2902  0011E6  0E00               	movlw	high _CMD
  2903  0011E8  6E11               	movwf	strcmp@s1+1,c
  2904  0011EA  0E8F               	movlw	low STR_31
  2905  0011EC  6E12               	movwf	strcmp@s2,c
  2906  0011EE  0EFF               	movlw	high STR_31
  2907  0011F0  6E13               	movwf	strcmp@s2+1,c
  2908  0011F2  ECDA  F018         	call	_strcmp	;wreg free
  2909  0011F6  5010               	movf	?_strcmp,w,c
  2910  0011F8  1011               	iorwf	?_strcmp+1,w,c
  2911  0011FA  A4D8               	btfss	status,2,c
  2912  0011FC  D010               	goto	l7031
  2913                           
  2914                           ;cmd_consol.c: 329: init_clcd_cusotom_lcd(clcd_init_row, clcd_init_col);
  2915  0011FE  C081  F036         	movff	_clcd_init_col,init_clcd_cusotom_lcd@clcd_init_col
  2916  001202  5041               	movf	_clcd_init_row,w,c
  2917  001204  EC33  F014         	call	_init_clcd_cusotom_lcd
  2918                           
  2919                           ;cmd_consol.c: 330: printf("\r\n%s.., OK\r\n", "KLM+LCDS");
  2920  001208  0E94               	movlw	low STR_77
  2921  00120A  6E24               	movwf	printf@f,c
  2922  00120C  0EFE               	movlw	high STR_77
  2923  00120E  6E25               	movwf	printf@f+1,c
  2924  001210  0E8F               	movlw	low STR_31
  2925  001212  6E26               	movwf	?_printf+2,c
  2926  001214  0EFF               	movlw	high STR_31
  2927  001216  6E27               	movwf	?_printf+3,c
  2928  001218  EC02  F011         	call	_printf	;wreg free
  2929                           
  2930                           ;cmd_consol.c: 331: } else if (strcmp(CMD, "KLM+GMDS?") == 0) {
  2931  00121C  0012               	return	
  2932  00121E                     l7031:
  2933  00121E  0ECB               	movlw	low _CMD
  2934  001220  6E10               	movwf	strcmp@s1,c
  2935  001222  0E00               	movlw	high _CMD
  2936  001224  6E11               	movwf	strcmp@s1+1,c
  2937  001226  0E57               	movlw	low STR_36
  2938  001228  6E12               	movwf	strcmp@s2,c
  2939  00122A  0EFF               	movlw	high STR_36
  2940  00122C  6E13               	movwf	strcmp@s2+1,c
  2941  00122E  ECDA  F018         	call	_strcmp	;wreg free
  2942  001232  5010               	movf	?_strcmp,w,c
  2943  001234  1011               	iorwf	?_strcmp+1,w,c
  2944  001236  A4D8               	btfss	status,2,c
  2945  001238  D03D               	goto	l7039
  2946                           
  2947                           ;cmd_consol.c: 332: if (max_display_str() != 0) {
  2948  00123A  ECB5  F01B         	call	_max_display_str	;wreg free
  2949  00123E  0900               	iorlw	0
  2950  001240  B4D8               	btfsc	status,2,c
  2951  001242  D01F               	goto	l7037
  2952                           
  2953                           ;cmd_consol.c: 333: printf("%d,%c-%c\r\n", max_display_str(), min_uid_range(), max_uid_r
      +                          ange());
  2954  001244  0EF5               	movlw	low STR_91
  2955  001246  6E24               	movwf	printf@f,c
  2956  001248  0EFE               	movlw	high STR_91
  2957  00124A  6E25               	movwf	printf@f+1,c
  2958  00124C  ECB5  F01B         	call	_max_display_str	;wreg free
  2959  001250  0100               	movlb	0	; () banked
  2960  001252  6FE4               	movwf	??_reply_to_host& (0+255),b
  2961  001254  0100               	movlb	0	; () banked
  2962  001256  51E4               	movf	??_reply_to_host& (0+255),w,b
  2963  001258  6E26               	movwf	?_printf+2,c
  2964  00125A  6A27               	clrf	?_printf+3,c
  2965  00125C  ECA7  F01B         	call	_min_uid_range	;wreg free
  2966  001260  0100               	movlb	0	; () banked
  2967  001262  6FE5               	movwf	(??_reply_to_host+1)& (0+255),b
  2968  001264  0100               	movlb	0	; () banked
  2969  001266  51E5               	movf	(??_reply_to_host+1)& (0+255),w,b
  2970  001268  6E28               	movwf	?_printf+4,c
  2971  00126A  6A29               	clrf	?_printf+5,c
  2972  00126C  ECAE  F01B         	call	_max_uid_range	;wreg free
  2973  001270  0100               	movlb	0	; () banked
  2974  001272  6FE6               	movwf	(??_reply_to_host+2)& (0+255),b
  2975  001274  0100               	movlb	0	; () banked
  2976  001276  51E6               	movf	(??_reply_to_host+2)& (0+255),w,b
  2977  001278  6E2A               	movwf	?_printf+6,c
  2978  00127A  6A2B               	clrf	?_printf+7,c
  2979  00127C  EC02  F011         	call	_printf	;wreg free
  2980                           
  2981                           ;cmd_consol.c: 334: } else {
  2982  001280  D00E               	goto	l804
  2983  001282                     l7037:
  2984                           
  2985                           ;cmd_consol.c: 335: printf("%d\r\n", max_display_str());
  2986  001282  0EF0               	movlw	low (STR_13+14)
  2987  001284  6E24               	movwf	printf@f,c
  2988  001286  0EFD               	movlw	high (STR_13+14)
  2989  001288  6E25               	movwf	printf@f+1,c
  2990  00128A  ECB5  F01B         	call	_max_display_str	;wreg free
  2991  00128E  0100               	movlb	0	; () banked
  2992  001290  6FE4               	movwf	??_reply_to_host& (0+255),b
  2993  001292  0100               	movlb	0	; () banked
  2994  001294  51E4               	movf	??_reply_to_host& (0+255),w,b
  2995  001296  6E26               	movwf	?_printf+2,c
  2996  001298  6A27               	clrf	?_printf+3,c
  2997  00129A  EC02  F011         	call	_printf	;wreg free
  2998  00129E                     l804:
  2999                           
  3000                           ;cmd_consol.c: 336: }
  3001                           ;cmd_consol.c: 337: printf("\r\n%s.., OK\r\n", "KLM+GMDS?");
  3002  00129E  0E94               	movlw	low STR_77
  3003  0012A0  6E24               	movwf	printf@f,c
  3004  0012A2  0EFE               	movlw	high STR_77
  3005  0012A4  6E25               	movwf	printf@f+1,c
  3006  0012A6  0E57               	movlw	low STR_36
  3007  0012A8  6E26               	movwf	?_printf+2,c
  3008  0012AA  0EFF               	movlw	high STR_36
  3009  0012AC  6E27               	movwf	?_printf+3,c
  3010  0012AE  EC02  F011         	call	_printf	;wreg free
  3011                           
  3012                           ;cmd_consol.c: 338: } else if (strcmp(CMD, "KLM+SDSTR") == 0) {
  3013  0012B2  0012               	return	
  3014  0012B4                     l7039:
  3015  0012B4  0ECB               	movlw	low _CMD
  3016  0012B6  6E10               	movwf	strcmp@s1,c
  3017  0012B8  0E00               	movlw	high _CMD
  3018  0012BA  6E11               	movwf	strcmp@s1+1,c
  3019  0012BC  0E61               	movlw	low STR_38
  3020  0012BE  6E12               	movwf	strcmp@s2,c
  3021  0012C0  0EFF               	movlw	high STR_38
  3022  0012C2  6E13               	movwf	strcmp@s2+1,c
  3023  0012C4  ECDA  F018         	call	_strcmp	;wreg free
  3024  0012C8  5010               	movf	?_strcmp,w,c
  3025  0012CA  1011               	iorwf	?_strcmp+1,w,c
  3026  0012CC  A4D8               	btfss	status,2,c
  3027  0012CE  D00B               	goto	l7043
  3028                           
  3029                           ;cmd_consol.c: 339: printf("\r\n%s.., OK\r\n", "KLM+SDSTR");
  3030  0012D0  0E94               	movlw	low STR_77
  3031  0012D2  6E24               	movwf	printf@f,c
  3032  0012D4  0EFE               	movlw	high STR_77
  3033  0012D6  6E25               	movwf	printf@f+1,c
  3034  0012D8  0E61               	movlw	low STR_38
  3035  0012DA  6E26               	movwf	?_printf+2,c
  3036  0012DC  0EFF               	movlw	high STR_38
  3037  0012DE  6E27               	movwf	?_printf+3,c
  3038  0012E0  EC02  F011         	call	_printf	;wreg free
  3039                           
  3040                           ;cmd_consol.c: 340: } else if (strcmp(CMD, "KLM+SDSCROL") == 0) {
  3041  0012E4  0012               	return	
  3042  0012E6                     l7043:
  3043  0012E6  0ECB               	movlw	low _CMD
  3044  0012E8  6E10               	movwf	strcmp@s1,c
  3045  0012EA  0E00               	movlw	high _CMD
  3046  0012EC  6E11               	movwf	strcmp@s1+1,c
  3047  0012EE  0ED1               	movlw	low STR_46
  3048  0012F0  6E12               	movwf	strcmp@s2,c
  3049  0012F2  0EFE               	movlw	high STR_46
  3050  0012F4  6E13               	movwf	strcmp@s2+1,c
  3051  0012F6  ECDA  F018         	call	_strcmp	;wreg free
  3052  0012FA  5010               	movf	?_strcmp,w,c
  3053  0012FC  1011               	iorwf	?_strcmp+1,w,c
  3054  0012FE  A4D8               	btfss	status,2,c
  3055  001300  D00B               	goto	l7047
  3056                           
  3057                           ;cmd_consol.c: 341: printf("\r\n%s.., OK\r\n", "KLM+SDSCROL");
  3058  001302  0E94               	movlw	low STR_77
  3059  001304  6E24               	movwf	printf@f,c
  3060  001306  0EFE               	movlw	high STR_77
  3061  001308  6E25               	movwf	printf@f+1,c
  3062  00130A  0ED1               	movlw	low STR_46
  3063  00130C  6E26               	movwf	?_printf+2,c
  3064  00130E  0EFE               	movlw	high STR_46
  3065  001310  6E27               	movwf	?_printf+3,c
  3066  001312  EC02  F011         	call	_printf	;wreg free
  3067                           
  3068                           ;cmd_consol.c: 342: } else if (strcmp(CMD, "KLM+SDSERC") == 0) {
  3069  001316  0012               	return	
  3070  001318                     l7047:
  3071  001318  0ECB               	movlw	low _CMD
  3072  00131A  6E10               	movwf	strcmp@s1,c
  3073  00131C  0E00               	movlw	high _CMD
  3074  00131E  6E11               	movwf	strcmp@s1+1,c
  3075  001320  0E37               	movlw	low STR_55
  3076  001322  6E12               	movwf	strcmp@s2,c
  3077  001324  0EFF               	movlw	high STR_55
  3078  001326  6E13               	movwf	strcmp@s2+1,c
  3079  001328  ECDA  F018         	call	_strcmp	;wreg free
  3080  00132C  5010               	movf	?_strcmp,w,c
  3081  00132E  1011               	iorwf	?_strcmp+1,w,c
  3082  001330  A4D8               	btfss	status,2,c
  3083  001332  D00B               	goto	l7051
  3084                           
  3085                           ;cmd_consol.c: 343: printf("\r\n%s.., OK\r\n", "KLM+SDSERC");
  3086  001334  0E94               	movlw	low STR_77
  3087  001336  6E24               	movwf	printf@f,c
  3088  001338  0EFE               	movlw	high STR_77
  3089  00133A  6E25               	movwf	printf@f+1,c
  3090  00133C  0E37               	movlw	low STR_55
  3091  00133E  6E26               	movwf	?_printf+2,c
  3092  001340  0EFF               	movlw	high STR_55
  3093  001342  6E27               	movwf	?_printf+3,c
  3094  001344  EC02  F011         	call	_printf	;wreg free
  3095                           
  3096                           ;cmd_consol.c: 344: } else if (strcmp(CMD, "KLM+UPDATE") == 0) {
  3097  001348  0012               	return	
  3098  00134A                     l7051:
  3099  00134A  0ECB               	movlw	low _CMD
  3100  00134C  6E10               	movwf	strcmp@s1,c
  3101  00134E  0E00               	movlw	high _CMD
  3102  001350  6E11               	movwf	strcmp@s1+1,c
  3103  001352  0E42               	movlw	low STR_68
  3104  001354  6E12               	movwf	strcmp@s2,c
  3105  001356  0EFF               	movlw	high STR_68
  3106  001358  6E13               	movwf	strcmp@s2+1,c
  3107  00135A  ECDA  F018         	call	_strcmp	;wreg free
  3108  00135E  5010               	movf	?_strcmp,w,c
  3109  001360  1011               	iorwf	?_strcmp+1,w,c
  3110  001362  A4D8               	btfss	status,2,c
  3111  001364  0012               	return	
  3112                           
  3113                           ;cmd_consol.c: 345: if (cmd_data.data_set == 1 && cmd_data.row_col_set == 1 && cmd_data.
      +                          scroll_set == 1) {
  3114  001366  0100               	movlb	0	; () banked
  3115  001368  05AF               	decf	(_cmd_data+41)& (0+255),w,b
  3116  00136A  A4D8               	btfss	status,2,c
  3117  00136C  D02C               	goto	l7067
  3118                           
  3119                           ; BSR set to: 0
  3120  00136E  0100               	movlb	0	; () banked
  3121  001370  05B4               	decf	(_cmd_data+46)& (0+255),w,b
  3122  001372  A4D8               	btfss	status,2,c
  3123  001374  D028               	goto	l7067
  3124                           
  3125                           ; BSR set to: 0
  3126  001376  0100               	movlb	0	; () banked
  3127  001378  05B6               	decf	(_cmd_data+48)& (0+255),w,b
  3128  00137A  A4D8               	btfss	status,2,c
  3129  00137C  D024               	goto	l7067
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;cmd_consol.c: 346: char ch = update_string_data(&cmd_data);
  3133  00137E  0E86               	movlw	low _cmd_data
  3134  001380  0100               	movlb	0	; () banked
  3135  001382  6FDA               	movwf	update_string_data@data& (0+255),b
  3136  001384  0E00               	movlw	high _cmd_data
  3137  001386  0100               	movlb	0	; () banked
  3138  001388  6FDB               	movwf	(update_string_data@data+1)& (0+255),b
  3139  00138A  ECF4  F00C         	call	_update_string_data	;wreg free
  3140  00138E  0100               	movlb	0	; () banked
  3141  001390  6FE7               	movwf	reply_to_host@ch& (0+255),b
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;cmd_consol.c: 347: if (ch == 1)
  3145  001392  0100               	movlb	0	; () banked
  3146  001394  05E7               	decf	reply_to_host@ch& (0+255),w,b
  3147  001396  A4D8               	btfss	status,2,c
  3148  001398  D00B               	goto	l7065
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;cmd_consol.c: 348: printf("%s\r\n", "ERROR");
  3152  00139A  0EDA               	movlw	low (STR_109+2)
  3153  00139C  6E24               	movwf	printf@f,c
  3154  00139E  0EFF               	movlw	high (STR_109+2)
  3155  0013A0  6E25               	movwf	printf@f+1,c
  3156  0013A2  0EE6               	movlw	low STR_106
  3157  0013A4  6E26               	movwf	?_printf+2,c
  3158  0013A6  0EFF               	movlw	high STR_106
  3159  0013A8  6E27               	movwf	?_printf+3,c
  3160  0013AA  EC02  F011         	call	_printf	;wreg free
  3161  0013AE  0012               	return	
  3162  0013B0                     l7065:
  3163                           
  3164                           ;cmd_consol.c: 349: else
  3165                           ;cmd_consol.c: 350: printf("\r\n%s.., OK\r\n", "KLM+UPDATE");
  3166  0013B0  0E94               	movlw	low STR_77
  3167  0013B2  6E24               	movwf	printf@f,c
  3168  0013B4  0EFE               	movlw	high STR_77
  3169  0013B6  6E25               	movwf	printf@f+1,c
  3170  0013B8  0E42               	movlw	low STR_68
  3171  0013BA  6E26               	movwf	?_printf+2,c
  3172  0013BC  0EFF               	movlw	high STR_68
  3173  0013BE  6E27               	movwf	?_printf+3,c
  3174  0013C0  EC02  F011         	call	_printf	;wreg free
  3175                           
  3176                           ;cmd_consol.c: 351: } else {
  3177  0013C4  0012               	return	
  3178  0013C6                     l7067:
  3179                           
  3180                           ;cmd_consol.c: 352: if (cmd_data.data_set == 0) {
  3181  0013C6  0100               	movlb	0	; () banked
  3182  0013C8  51AF               	movf	(_cmd_data+41)& (0+255),w,b
  3183  0013CA  A4D8               	btfss	status,2,c
  3184  0013CC  D00B               	goto	l7071
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;cmd_consol.c: 353: printf("\r\n%s\r\n", "ERR_STR_SET");
  3188  0013CE  0ED8               	movlw	low STR_109
  3189  0013D0  6E24               	movwf	printf@f,c
  3190  0013D2  0EFF               	movlw	high STR_109
  3191  0013D4  6E25               	movwf	printf@f+1,c
  3192  0013D6  0EE9               	movlw	low STR_110
  3193  0013D8  6E26               	movwf	?_printf+2,c
  3194  0013DA  0EFE               	movlw	high STR_110
  3195  0013DC  6E27               	movwf	?_printf+3,c
  3196  0013DE  EC02  F011         	call	_printf	;wreg free
  3197                           
  3198                           ;cmd_consol.c: 354: } else if (cmd_data.row_col_set == 0) {
  3199  0013E2  0012               	return	
  3200  0013E4                     l7071:
  3201  0013E4  0100               	movlb	0	; () banked
  3202  0013E6  51B4               	movf	(_cmd_data+46)& (0+255),w,b
  3203  0013E8  A4D8               	btfss	status,2,c
  3204  0013EA  D00B               	goto	l7075
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;cmd_consol.c: 355: printf("\r\n%s\r\n", "ERR_ROW_COL");
  3208  0013EC  0ED8               	movlw	low STR_109
  3209  0013EE  6E24               	movwf	printf@f,c
  3210  0013F0  0EFF               	movlw	high STR_109
  3211  0013F2  6E25               	movwf	printf@f+1,c
  3212  0013F4  0EC5               	movlw	low STR_112
  3213  0013F6  6E26               	movwf	?_printf+2,c
  3214  0013F8  0EFE               	movlw	high STR_112
  3215  0013FA  6E27               	movwf	?_printf+3,c
  3216  0013FC  EC02  F011         	call	_printf	;wreg free
  3217                           
  3218                           ;cmd_consol.c: 356: } else if (cmd_data.scroll_set == 0) {
  3219  001400  0012               	return	
  3220  001402                     l7075:
  3221  001402  0100               	movlb	0	; () banked
  3222  001404  51B6               	movf	(_cmd_data+48)& (0+255),w,b
  3223  001406  A4D8               	btfss	status,2,c
  3224  001408  0012               	return	
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;cmd_consol.c: 357: printf("\r\n%s\r\n", "ERR_SCROLL_SET");
  3228  00140A  0ED8               	movlw	low STR_109
  3229  00140C  6E24               	movwf	printf@f,c
  3230  00140E  0EFF               	movlw	high STR_109
  3231  001410  6E25               	movwf	printf@f+1,c
  3232  001412  0E69               	movlw	low STR_114
  3233  001414  6E26               	movwf	?_printf+2,c
  3234  001416  0EFE               	movlw	high STR_114
  3235  001418  6E27               	movwf	?_printf+3,c
  3236  00141A  EC02  F011         	call	_printf	;wreg free
  3237  00141E  0012               	return	
  3238  001420                     __end_of_reply_to_host:
  3239                           	opt stack 0
  3240                           tblptru	equ	0xFF8
  3241                           tblptrh	equ	0xFF7
  3242                           tblptrl	equ	0xFF6
  3243                           tablat	equ	0xFF5
  3244                           intcon	equ	0xFF2
  3245                           postinc0	equ	0xFEE
  3246                           wreg	equ	0xFE8
  3247                           postdec1	equ	0xFE5
  3248                           fsr1h	equ	0xFE2
  3249                           fsr1l	equ	0xFE1
  3250                           indf2	equ	0xFDF
  3251                           fsr2h	equ	0xFDA
  3252                           fsr2l	equ	0xFD9
  3253                           status	equ	0xFD8
  3254                           
  3255 ;; *************** function _update_string_data *****************
  3256 ;; Defined at:
  3257 ;;		line 175 in file "clcd.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;  data            2    0[BANK0 ] PTR struct .
  3260 ;;		 -> cmd_data(49), 
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  i               2    8[BANK0 ] int 
  3263 ;;  end_point       1    7[BANK0 ] unsigned char 
  3264 ;;  start_point     1    6[BANK0 ] unsigned char 
  3265 ;;  exist_uid_id    1    5[BANK0 ] unsigned char 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      unsigned char 
  3268 ;; Registers used:
  3269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3275 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;Total ram usage:       10 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:   10
  3282 ;; This function calls:
  3283 ;;		___wmul
  3284 ;;		_conflict_check
  3285 ;;		_copy_data
  3286 ;;		_make_display
  3287 ;;		_memset
  3288 ;;		_printf
  3289 ;; This function is called by:
  3290 ;;		_reply_to_host
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           	psect	text5
  3295  0019E8                     __ptext5:
  3296                           	opt stack 0
  3297  0019E8                     _update_string_data:
  3298                           	opt stack 18
  3299                           
  3300                           ;clcd.c: 176: int i = 0;
  3301                           
  3302                           ;incstack = 0
  3303  0019E8  0E00               	movlw	0
  3304  0019EA  0100               	movlb	0	; () banked
  3305  0019EC  6FE3               	movwf	(update_string_data@i+1)& (0+255),b
  3306  0019EE  0E00               	movlw	0
  3307  0019F0  6FE2               	movwf	update_string_data@i& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;clcd.c: 177: char exist_uid_idx = -1;
  3311  0019F2  0100               	movlb	0	; () banked
  3312  0019F4  69DF               	setf	update_string_data@exist_uid_idx& (0+255),b
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;clcd.c: 178: char start_point, end_point;
  3316                           ;clcd.c: 179: memset(conflict_arr, -1, sizeof (conflict_arr));
  3317  0019F6  0EB7               	movlw	low _conflict_arr
  3318  0019F8  6E24               	movwf	memset@p1,c
  3319  0019FA  0E00               	movlw	high _conflict_arr
  3320  0019FC  6E25               	movwf	memset@p1+1,c
  3321  0019FE  0EFF               	movlw	255
  3322  001A00  6E27               	movwf	memset@c+1,c
  3323  001A02  6826               	setf	memset@c,c
  3324  001A04  0E00               	movlw	0
  3325  001A06  6E29               	movwf	memset@n+1,c
  3326  001A08  0E14               	movlw	20
  3327  001A0A  6E28               	movwf	memset@n,c
  3328  001A0C  ECA5  F01A         	call	_memset	;wreg free
  3329                           
  3330                           ;clcd.c: 180: conflict_data_count = 0;
  3331  001A10  0E00               	movlw	0
  3332  001A12  6E42               	movwf	_conflict_data_count,c
  3333                           
  3334                           ;clcd.c: 181: start_point = (data->start_row * clcd_config_data.clcd_max_col) + data->st
      +                          art_col;
  3335  001A14  0100               	movlb	0	; () banked
  3336  001A16  EE20 F02B          	lfsr	2,43
  3337  001A1A  51DA               	movf	update_string_data@data& (0+255),w,b
  3338  001A1C  26D9               	addwf	fsr2l,f,c
  3339  001A1E  51DB               	movf	(update_string_data@data+1)& (0+255),w,b
  3340  001A20  22DA               	addwfc	fsr2h,f,c
  3341  001A22  50DF               	movf	indf2,w,c
  3342  001A24  0100               	movlb	0	; () banked
  3343  001A26  6FDC               	movwf	??_update_string_data& (0+255),b
  3344  001A28  0100               	movlb	0	; () banked
  3345  001A2A  EE20 F02A          	lfsr	2,42
  3346  001A2E  51DA               	movf	update_string_data@data& (0+255),w,b
  3347  001A30  26D9               	addwf	fsr2l,f,c
  3348  001A32  51DB               	movf	(update_string_data@data+1)& (0+255),w,b
  3349  001A34  22DA               	addwfc	fsr2h,f,c
  3350  001A36  50DF               	movf	indf2,w,c
  3351  001A38  024B               	mulwf	_clcd_config_data+2,c
  3352  001A3A  50F3               	movf	prodl,w,c
  3353  001A3C  0100               	movlb	0	; () banked
  3354  001A3E  25DC               	addwf	??_update_string_data& (0+255),w,b
  3355  001A40  0100               	movlb	0	; () banked
  3356  001A42  6FE0               	movwf	update_string_data@start_point& (0+255),b
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;clcd.c: 182: end_point = (data->end_row * clcd_config_data.clcd_max_col) + data->end_co
      +                          l;
  3360  001A44  0100               	movlb	0	; () banked
  3361  001A46  EE20 F02D          	lfsr	2,45
  3362  001A4A  51DA               	movf	update_string_data@data& (0+255),w,b
  3363  001A4C  26D9               	addwf	fsr2l,f,c
  3364  001A4E  51DB               	movf	(update_string_data@data+1)& (0+255),w,b
  3365  001A50  22DA               	addwfc	fsr2h,f,c
  3366  001A52  50DF               	movf	indf2,w,c
  3367  001A54  0100               	movlb	0	; () banked
  3368  001A56  6FDC               	movwf	??_update_string_data& (0+255),b
  3369  001A58  0100               	movlb	0	; () banked
  3370  001A5A  EE20 F02C          	lfsr	2,44
  3371  001A5E  51DA               	movf	update_string_data@data& (0+255),w,b
  3372  001A60  26D9               	addwf	fsr2l,f,c
  3373  001A62  51DB               	movf	(update_string_data@data+1)& (0+255),w,b
  3374  001A64  22DA               	addwfc	fsr2h,f,c
  3375  001A66  50DF               	movf	indf2,w,c
  3376  001A68  024B               	mulwf	_clcd_config_data+2,c
  3377  001A6A  50F3               	movf	prodl,w,c
  3378  001A6C  0100               	movlb	0	; () banked
  3379  001A6E  25DC               	addwf	??_update_string_data& (0+255),w,b
  3380  001A70  0100               	movlb	0	; () banked
  3381  001A72  6FE1               	movwf	update_string_data@end_point& (0+255),b
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;clcd.c: 184: printf("UID = %c, start_pt = %d, end_pt = %d\r\n", data->uid, start_point,
      +                           end_point);
  3385  001A74  0ECF               	movlw	low STR_9
  3386  001A76  6E24               	movwf	printf@f,c
  3387  001A78  0EFC               	movlw	high STR_9
  3388  001A7A  6E25               	movwf	printf@f+1,c
  3389  001A7C  C0DA  FFD9         	movff	update_string_data@data,fsr2l
  3390  001A80  C0DB  FFDA         	movff	update_string_data@data+1,fsr2h
  3391  001A84  50DF               	movf	indf2,w,c
  3392  001A86  0100               	movlb	0	; () banked
  3393  001A88  6FDC               	movwf	??_update_string_data& (0+255),b
  3394  001A8A  0100               	movlb	0	; () banked
  3395  001A8C  51DC               	movf	??_update_string_data& (0+255),w,b
  3396  001A8E  6E26               	movwf	?_printf+2,c
  3397  001A90  6A27               	clrf	?_printf+3,c
  3398  001A92  C0E0  F028         	movff	update_string_data@start_point,?_printf+4
  3399  001A96  6A29               	clrf	?_printf+5,c
  3400  001A98  C0E1  F02A         	movff	update_string_data@end_point,?_printf+6
  3401  001A9C  6A2B               	clrf	?_printf+7,c
  3402  001A9E  EC02  F011         	call	_printf	;wreg free
  3403                           
  3404                           ;clcd.c: 186: if (data_count < clcd_config_data.clcd_max_display_string) {
  3405  001AA2  504D               	movf	_clcd_config_data+4,w,c
  3406  001AA4  5C43               	subwf	_data_count,w,c
  3407  001AA6  B0D8               	btfsc	status,0,c
  3408  001AA8  D0CF               	goto	l6441
  3409                           
  3410                           ;clcd.c: 187: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3411  001AAA  0E00               	movlw	0
  3412  001AAC  0100               	movlb	0	; () banked
  3413  001AAE  6FE3               	movwf	(update_string_data@i+1)& (0+255),b
  3414  001AB0  0E00               	movlw	0
  3415  001AB2  6FE2               	movwf	update_string_data@i& (0+255),b
  3416  001AB4  D092               	goto	l6431
  3417  001AB6                     l6395:
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;clcd.c: 188: if (clcd_display_string_details[i].uid == data->uid) {
  3421  001AB6  C0DA  FFD9         	movff	update_string_data@data,fsr2l
  3422  001ABA  C0DB  FFDA         	movff	update_string_data@data+1,fsr2h
  3423  001ABE  C0E2  F018         	movff	update_string_data@i,___wmul@multiplier
  3424  001AC2  C0E3  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  3425  001AC6  0E00               	movlw	0
  3426  001AC8  6E1B               	movwf	___wmul@multiplicand+1,c
  3427  001ACA  0E36               	movlw	54
  3428  001ACC  6E1A               	movwf	___wmul@multiplicand,c
  3429  001ACE  ECD1  F01A         	call	___wmul	;wreg free
  3430  001AD2  0E96               	movlw	low _clcd_display_string_details
  3431  001AD4  2418               	addwf	?___wmul,w,c
  3432  001AD6  6EE1               	movwf	fsr1l,c
  3433  001AD8  0E02               	movlw	high _clcd_display_string_details
  3434  001ADA  2019               	addwfc	?___wmul+1,w,c
  3435  001ADC  6EE2               	movwf	fsr1h,c
  3436  001ADE  50E7               	movf	231,w,c
  3437  001AE0  0B7F               	andlw	127
  3438  001AE2  0100               	movlb	0	; () banked
  3439  001AE4  6FDD               	movwf	(??_update_string_data+1)& (0+255),b
  3440  001AE6  50DE               	movf	postinc2,w,c
  3441  001AE8  0100               	movlb	0	; () banked
  3442  001AEA  19DD               	xorwf	(??_update_string_data+1)& (0+255),w,b
  3443  001AEC  A4D8               	btfss	status,2,c
  3444  001AEE  D028               	goto	l6411
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;clcd.c: 189: exist_uid_idx = i;
  3448  001AF0  C0E2  F0DF         	movff	update_string_data@i,update_string_data@exist_uid_idx
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;clcd.c: 190: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  3452  001AF4  5042               	movf	_conflict_data_count,w,c
  3453  001AF6  0D01               	mullw	1
  3454  001AF8  0EB7               	movlw	low _conflict_arr
  3455  001AFA  24F3               	addwf	prodl,w,c
  3456  001AFC  6ED9               	movwf	fsr2l,c
  3457  001AFE  0E00               	movlw	high _conflict_arr
  3458  001B00  20F4               	addwfc	prodh,w,c
  3459  001B02  6EDA               	movwf	fsr2h,c
  3460  001B04  C0E2  F018         	movff	update_string_data@i,___wmul@multiplier
  3461  001B08  C0E3  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  3462  001B0C  0E00               	movlw	0
  3463  001B0E  6E1B               	movwf	___wmul@multiplicand+1,c
  3464  001B10  0E36               	movlw	54
  3465  001B12  6E1A               	movwf	___wmul@multiplicand,c
  3466  001B14  ECD1  F01A         	call	___wmul	;wreg free
  3467  001B18  0E96               	movlw	low _clcd_display_string_details
  3468  001B1A  2418               	addwf	?___wmul,w,c
  3469  001B1C  6EE1               	movwf	fsr1l,c
  3470  001B1E  0E02               	movlw	high _clcd_display_string_details
  3471  001B20  2019               	addwfc	?___wmul+1,w,c
  3472  001B22  6EE2               	movwf	fsr1h,c
  3473  001B24  50E7               	movf	231,w,c
  3474  001B26  0B7F               	andlw	127
  3475  001B28  6EDF               	movwf	indf2,c
  3476  001B2A  2A42               	incf	_conflict_data_count,f,c
  3477                           
  3478                           ;clcd.c: 191: conflict_check(exist_uid_idx, start_point, end_point);
  3479  001B2C  C0E0  F036         	movff	update_string_data@start_point,conflict_check@new_start_point
  3480  001B30  C0E1  F037         	movff	update_string_data@end_point,conflict_check@new_end_point
  3481  001B34  0100               	movlb	0	; () banked
  3482  001B36  51DF               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3483  001B38  ECAC  F00B         	call	_conflict_check
  3484  001B3C                     l6405:
  3485                           
  3486                           ;clcd.c: 192: return 1;
  3487  001B3C  0E01               	movlw	1
  3488  001B3E  0012               	return	
  3489  001B40                     l6411:
  3490                           
  3491                           ;clcd.c: 194: if (conflict_check(exist_uid_idx, start_point, end_point) == 1) {
  3492  001B40  C0E0  F036         	movff	update_string_data@start_point,conflict_check@new_start_point
  3493  001B44  C0E1  F037         	movff	update_string_data@end_point,conflict_check@new_end_point
  3494  001B48  0100               	movlb	0	; () banked
  3495  001B4A  51DF               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3496  001B4C  ECAC  F00B         	call	_conflict_check
  3497  001B50  06E8               	decf	wreg,f,c
  3498  001B52  A4D8               	btfss	status,2,c
  3499  001B54  D03F               	goto	l6429
  3500                           
  3501                           ;clcd.c: 195: printf("conflict: uid\r\n");
  3502  001B56  0E4A               	movlw	low STR_10
  3503  001B58  6E24               	movwf	printf@f,c
  3504  001B5A  0EFE               	movlw	high STR_10
  3505  001B5C  6E25               	movwf	printf@f+1,c
  3506  001B5E  EC02  F011         	call	_printf	;wreg free
  3507                           
  3508                           ;clcd.c: 196: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3509  001B62  0E00               	movlw	0
  3510  001B64  0100               	movlb	0	; () banked
  3511  001B66  6FE3               	movwf	(update_string_data@i+1)& (0+255),b
  3512  001B68  0E00               	movlw	0
  3513  001B6A  6FE2               	movwf	update_string_data@i& (0+255),b
  3514  001B6C  D018               	goto	l6421
  3515  001B6E                     l6417:
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;clcd.c: 198: printf("%c, ", conflict_arr[i]);
  3519  001B6E  0EEC               	movlw	low STR_11
  3520  001B70  6E24               	movwf	printf@f,c
  3521  001B72  0EFF               	movlw	high STR_11
  3522  001B74  6E25               	movwf	printf@f+1,c
  3523  001B76  0EB7               	movlw	low _conflict_arr
  3524  001B78  0100               	movlb	0	; () banked
  3525  001B7A  25E2               	addwf	update_string_data@i& (0+255),w,b
  3526  001B7C  6ED9               	movwf	fsr2l,c
  3527  001B7E  0E00               	movlw	high _conflict_arr
  3528  001B80  0100               	movlb	0	; () banked
  3529  001B82  21E3               	addwfc	(update_string_data@i+1)& (0+255),w,b
  3530  001B84  6EDA               	movwf	fsr2h,c
  3531  001B86  50DF               	movf	indf2,w,c
  3532  001B88  0100               	movlb	0	; () banked
  3533  001B8A  6FDC               	movwf	??_update_string_data& (0+255),b
  3534  001B8C  0100               	movlb	0	; () banked
  3535  001B8E  51DC               	movf	??_update_string_data& (0+255),w,b
  3536  001B90  6E26               	movwf	?_printf+2,c
  3537  001B92  6A27               	clrf	?_printf+3,c
  3538  001B94  EC02  F011         	call	_printf	;wreg free
  3539  001B98  0100               	movlb	0	; () banked
  3540  001B9A  4BE2               	infsnz	update_string_data@i& (0+255),f,b
  3541  001B9C  2BE3               	incf	(update_string_data@i+1)& (0+255),f,b
  3542  001B9E                     l6421:
  3543                           
  3544                           ; BSR set to: 0
  3545  001B9E  504D               	movf	_clcd_config_data+4,w,c
  3546  001BA0  0100               	movlb	0	; () banked
  3547  001BA2  6FDC               	movwf	??_update_string_data& (0+255),b
  3548  001BA4  6BDD               	clrf	(??_update_string_data+1)& (0+255),b
  3549  001BA6  0100               	movlb	0	; () banked
  3550  001BA8  51DC               	movf	??_update_string_data& (0+255),w,b
  3551  001BAA  0100               	movlb	0	; () banked
  3552  001BAC  5DE2               	subwf	update_string_data@i& (0+255),w,b
  3553  001BAE  0100               	movlb	0	; () banked
  3554  001BB0  51E3               	movf	(update_string_data@i+1)& (0+255),w,b
  3555  001BB2  0A80               	xorlw	128
  3556  001BB4  0100               	movlb	0	; () banked
  3557  001BB6  6FDE               	movwf	(??_update_string_data+2)& (0+255),b
  3558  001BB8  0100               	movlb	0	; () banked
  3559  001BBA  51DD               	movf	(??_update_string_data+1)& (0+255),w,b
  3560  001BBC  0A80               	xorlw	128
  3561  001BBE  0100               	movlb	0	; () banked
  3562  001BC0  59DE               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3563  001BC2  A0D8               	btfss	status,0,c
  3564  001BC4  D7D4               	goto	l6417
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;clcd.c: 199: }printf("\r\n");
  3568                           
  3569                           ; BSR set to: 0
  3570  001BC6  0EAA               	movlw	low (STR_58+9)
  3571  001BC8  6E24               	movwf	printf@f,c
  3572  001BCA  0EFE               	movlw	high (STR_58+9)
  3573  001BCC  6E25               	movwf	printf@f+1,c
  3574  001BCE  EC02  F011         	call	_printf	;wreg free
  3575  001BD2  D7B4               	goto	l6405
  3576  001BD4                     l6429:
  3577  001BD4  0100               	movlb	0	; () banked
  3578  001BD6  4BE2               	infsnz	update_string_data@i& (0+255),f,b
  3579  001BD8  2BE3               	incf	(update_string_data@i+1)& (0+255),f,b
  3580  001BDA                     l6431:
  3581                           
  3582                           ; BSR set to: 0
  3583  001BDA  504D               	movf	_clcd_config_data+4,w,c
  3584  001BDC  0100               	movlb	0	; () banked
  3585  001BDE  6FDC               	movwf	??_update_string_data& (0+255),b
  3586  001BE0  6BDD               	clrf	(??_update_string_data+1)& (0+255),b
  3587  001BE2  0100               	movlb	0	; () banked
  3588  001BE4  51DC               	movf	??_update_string_data& (0+255),w,b
  3589  001BE6  0100               	movlb	0	; () banked
  3590  001BE8  5DE2               	subwf	update_string_data@i& (0+255),w,b
  3591  001BEA  0100               	movlb	0	; () banked
  3592  001BEC  51E3               	movf	(update_string_data@i+1)& (0+255),w,b
  3593  001BEE  0A80               	xorlw	128
  3594  001BF0  0100               	movlb	0	; () banked
  3595  001BF2  6FDE               	movwf	(??_update_string_data+2)& (0+255),b
  3596  001BF4  0100               	movlb	0	; () banked
  3597  001BF6  51DD               	movf	(??_update_string_data+1)& (0+255),w,b
  3598  001BF8  0A80               	xorlw	128
  3599  001BFA  0100               	movlb	0	; () banked
  3600  001BFC  59DE               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3601  001BFE  A0D8               	btfss	status,0,c
  3602  001C00  D75A               	goto	l6395
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;clcd.c: 201: }
  3606                           ;clcd.c: 202: }
  3607                           ;clcd.c: 203: }
  3608                           ;clcd.c: 204: memset(&clcd_display_string_details[data_count], 0, sizeof (CLCD_STRING_DI
      +                          SPLAY_DETAILS));
  3609                           
  3610                           ; BSR set to: 0
  3611  001C02  5043               	movf	_data_count,w,c
  3612  001C04  0D36               	mullw	54
  3613  001C06  0E96               	movlw	low _clcd_display_string_details
  3614  001C08  24F3               	addwf	prodl,w,c
  3615  001C0A  6E24               	movwf	memset@p1,c
  3616  001C0C  0E02               	movlw	high _clcd_display_string_details
  3617  001C0E  20F4               	addwfc	prodh,w,c
  3618  001C10  6E25               	movwf	memset@p1+1,c
  3619  001C12  0E00               	movlw	0
  3620  001C14  6E27               	movwf	memset@c+1,c
  3621  001C16  0E00               	movlw	0
  3622  001C18  6E26               	movwf	memset@c,c
  3623  001C1A  0E00               	movlw	0
  3624  001C1C  6E29               	movwf	memset@n+1,c
  3625  001C1E  0E36               	movlw	54
  3626  001C20  6E28               	movwf	memset@n,c
  3627  001C22  ECA5  F01A         	call	_memset	;wreg free
  3628                           
  3629                           ;clcd.c: 205: copy_data(&clcd_display_string_details[data_count], data);
  3630  001C26  5043               	movf	_data_count,w,c
  3631  001C28  0D36               	mullw	54
  3632  001C2A  0E96               	movlw	low _clcd_display_string_details
  3633  001C2C  24F3               	addwf	prodl,w,c
  3634  001C2E  6E36               	movwf	copy_data@clcd_str_data,c
  3635  001C30  0E02               	movlw	high _clcd_display_string_details
  3636  001C32  20F4               	addwfc	prodh,w,c
  3637  001C34  6E37               	movwf	copy_data@clcd_str_data+1,c
  3638  001C36  C0DA  F038         	movff	update_string_data@data,copy_data@data
  3639  001C3A  C0DB  F039         	movff	update_string_data@data+1,copy_data@data+1
  3640  001C3E  EC26  F00E         	call	_copy_data	;wreg free
  3641                           
  3642                           ;clcd.c: 206: data_count++;
  3643  001C42  2A43               	incf	_data_count,f,c
  3644                           
  3645                           ;clcd.c: 207: make_display();
  3646  001C44  EC23  F00F         	call	_make_display	;wreg free
  3647  001C48                     l6441:
  3648                           
  3649                           ;clcd.c: 210: }
  3650                           ;clcd.c: 211: return 0;
  3651  001C48  0E00               	movlw	0
  3652  001C4A  0012               	return	
  3653  001C4C                     __end_of_update_string_data:
  3654                           	opt stack 0
  3655                           tblptru	equ	0xFF8
  3656                           tblptrh	equ	0xFF7
  3657                           tblptrl	equ	0xFF6
  3658                           tablat	equ	0xFF5
  3659                           prodh	equ	0xFF4
  3660                           prodl	equ	0xFF3
  3661                           intcon	equ	0xFF2
  3662                           postinc0	equ	0xFEE
  3663                           wreg	equ	0xFE8
  3664                           postdec1	equ	0xFE5
  3665                           fsr1h	equ	0xFE2
  3666                           fsr1l	equ	0xFE1
  3667                           indf2	equ	0xFDF
  3668                           postinc2	equ	0xFDE
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function _make_display *****************
  3674 ;; Defined at:
  3675 ;;		line 559 in file "clcd.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;		None
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;  count           2   62[COMRAM] int 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  1    wreg      void 
  3682 ;; Registers used:
  3683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;Total ram usage:        5 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    9
  3696 ;; This function calls:
  3697 ;;		___wmul
  3698 ;;		_display_text
  3699 ;;		_scroll_left_to_right
  3700 ;;		_scroll_off
  3701 ;;		_scroll_right_to_left
  3702 ;;		_strlen
  3703 ;; This function is called by:
  3704 ;;		_update_string_data
  3705 ;;		_main
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text6
  3710  001E46                     __ptext6:
  3711                           	opt stack 0
  3712  001E46                     _make_display:
  3713                           	opt stack 21
  3714                           
  3715                           ;clcd.c: 560: int count = 0;
  3716                           
  3717                           ;incstack = 0
  3718  001E46  0E00               	movlw	0
  3719  001E48  6E40               	movwf	make_display@count+1,c
  3720  001E4A  0E00               	movlw	0
  3721  001E4C  6E3F               	movwf	make_display@count,c
  3722                           
  3723                           ;clcd.c: 561: for (count = 0; count < clcd_config_data.clcd_max_display_string; count++)
      +                           {
  3724  001E4E  0E00               	movlw	0
  3725  001E50  6E40               	movwf	make_display@count+1,c
  3726  001E52  0E00               	movlw	0
  3727  001E54  6E3F               	movwf	make_display@count,c
  3728  001E56  D0D3               	goto	l6183
  3729  001E58                     l6163:
  3730                           
  3731                           ;clcd.c: 562: if (strlen(clcd_display_string_details[count].string) != 0 && clcd_display
      +                          _string_details[count].direction == 2) {
  3732  001E58  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3733  001E5C  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3734  001E60  0E00               	movlw	0
  3735  001E62  6E1B               	movwf	___wmul@multiplicand+1,c
  3736  001E64  0E36               	movlw	54
  3737  001E66  6E1A               	movwf	___wmul@multiplicand,c
  3738  001E68  ECD1  F01A         	call	___wmul	;wreg free
  3739  001E6C  0E01               	movlw	1
  3740  001E6E  2618               	addwf	?___wmul,f,c
  3741  001E70  0E00               	movlw	0
  3742  001E72  2219               	addwfc	?___wmul+1,f,c
  3743  001E74  0E96               	movlw	low _clcd_display_string_details
  3744  001E76  2418               	addwf	?___wmul,w,c
  3745  001E78  6E1E               	movwf	strlen@s,c
  3746  001E7A  0E02               	movlw	high _clcd_display_string_details
  3747  001E7C  2019               	addwfc	?___wmul+1,w,c
  3748  001E7E  6E1F               	movwf	strlen@s+1,c
  3749  001E80  EC37  F018         	call	_strlen	;wreg free
  3750  001E84  501E               	movf	?_strlen,w,c
  3751  001E86  101F               	iorwf	?_strlen+1,w,c
  3752  001E88  B4D8               	btfsc	status,2,c
  3753  001E8A  D02C               	goto	l6169
  3754  001E8C  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3755  001E90  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3756  001E94  0E00               	movlw	0
  3757  001E96  6E1B               	movwf	___wmul@multiplicand+1,c
  3758  001E98  0E36               	movlw	54
  3759  001E9A  6E1A               	movwf	___wmul@multiplicand,c
  3760  001E9C  ECD1  F01A         	call	___wmul	;wreg free
  3761  001EA0  0E30               	movlw	48
  3762  001EA2  2618               	addwf	?___wmul,f,c
  3763  001EA4  0E00               	movlw	0
  3764  001EA6  2219               	addwfc	?___wmul+1,f,c
  3765  001EA8  0E96               	movlw	low _clcd_display_string_details
  3766  001EAA  2418               	addwf	?___wmul,w,c
  3767  001EAC  6ED9               	movwf	fsr2l,c
  3768  001EAE  0E02               	movlw	high _clcd_display_string_details
  3769  001EB0  2019               	addwfc	?___wmul+1,w,c
  3770  001EB2  6EDA               	movwf	fsr2h,c
  3771  001EB4  50DF               	movf	223,w,c
  3772  001EB6  0B07               	andlw	7
  3773  001EB8  0A02               	xorlw	2
  3774  001EBA  A4D8               	btfss	status,2,c
  3775  001EBC  D013               	goto	l6169
  3776                           
  3777                           ;clcd.c: 563: scroll_left_to_right(&clcd_display_string_details[count]);
  3778  001EBE  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3779  001EC2  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3780  001EC6  0E00               	movlw	0
  3781  001EC8  6E1B               	movwf	___wmul@multiplicand+1,c
  3782  001ECA  0E36               	movlw	54
  3783  001ECC  6E1A               	movwf	___wmul@multiplicand,c
  3784  001ECE  ECD1  F01A         	call	___wmul	;wreg free
  3785  001ED2  0E96               	movlw	low _clcd_display_string_details
  3786  001ED4  2418               	addwf	?___wmul,w,c
  3787  001ED6  6E2C               	movwf	scroll_left_to_right@clcd_display_string_details,c
  3788  001ED8  0E02               	movlw	high _clcd_display_string_details
  3789  001EDA  2019               	addwfc	?___wmul+1,w,c
  3790  001EDC  6E2D               	movwf	scroll_left_to_right@clcd_display_string_details+1,c
  3791  001EDE  EC10  F00A         	call	_scroll_left_to_right	;wreg free
  3792                           
  3793                           ;clcd.c: 564: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 1) {
  3794  001EE2  D08B               	goto	l6181
  3795  001EE4                     l6169:
  3796  001EE4  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3797  001EE8  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3798  001EEC  0E00               	movlw	0
  3799  001EEE  6E1B               	movwf	___wmul@multiplicand+1,c
  3800  001EF0  0E36               	movlw	54
  3801  001EF2  6E1A               	movwf	___wmul@multiplicand,c
  3802  001EF4  ECD1  F01A         	call	___wmul	;wreg free
  3803  001EF8  0E01               	movlw	1
  3804  001EFA  2618               	addwf	?___wmul,f,c
  3805  001EFC  0E00               	movlw	0
  3806  001EFE  2219               	addwfc	?___wmul+1,f,c
  3807  001F00  0E96               	movlw	low _clcd_display_string_details
  3808  001F02  2418               	addwf	?___wmul,w,c
  3809  001F04  6E1E               	movwf	strlen@s,c
  3810  001F06  0E02               	movlw	high _clcd_display_string_details
  3811  001F08  2019               	addwfc	?___wmul+1,w,c
  3812  001F0A  6E1F               	movwf	strlen@s+1,c
  3813  001F0C  EC37  F018         	call	_strlen	;wreg free
  3814  001F10  501E               	movf	?_strlen,w,c
  3815  001F12  101F               	iorwf	?_strlen+1,w,c
  3816  001F14  B4D8               	btfsc	status,2,c
  3817  001F16  D02C               	goto	l6175
  3818  001F18  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3819  001F1C  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3820  001F20  0E00               	movlw	0
  3821  001F22  6E1B               	movwf	___wmul@multiplicand+1,c
  3822  001F24  0E36               	movlw	54
  3823  001F26  6E1A               	movwf	___wmul@multiplicand,c
  3824  001F28  ECD1  F01A         	call	___wmul	;wreg free
  3825  001F2C  0E30               	movlw	48
  3826  001F2E  2618               	addwf	?___wmul,f,c
  3827  001F30  0E00               	movlw	0
  3828  001F32  2219               	addwfc	?___wmul+1,f,c
  3829  001F34  0E96               	movlw	low _clcd_display_string_details
  3830  001F36  2418               	addwf	?___wmul,w,c
  3831  001F38  6ED9               	movwf	fsr2l,c
  3832  001F3A  0E02               	movlw	high _clcd_display_string_details
  3833  001F3C  2019               	addwfc	?___wmul+1,w,c
  3834  001F3E  6EDA               	movwf	fsr2h,c
  3835  001F40  50DF               	movf	223,w,c
  3836  001F42  0B07               	andlw	7
  3837  001F44  06E8               	decf	wreg,f,c
  3838  001F46  A4D8               	btfss	status,2,c
  3839  001F48  D013               	goto	l6175
  3840                           
  3841                           ;clcd.c: 565: scroll_right_to_left(&clcd_display_string_details[count]);
  3842  001F4A  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3843  001F4E  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3844  001F52  0E00               	movlw	0
  3845  001F54  6E1B               	movwf	___wmul@multiplicand+1,c
  3846  001F56  0E36               	movlw	54
  3847  001F58  6E1A               	movwf	___wmul@multiplicand,c
  3848  001F5A  ECD1  F01A         	call	___wmul	;wreg free
  3849  001F5E  0E96               	movlw	low _clcd_display_string_details
  3850  001F60  2418               	addwf	?___wmul,w,c
  3851  001F62  6E2C               	movwf	scroll_right_to_left@clcd_display_string_details,c
  3852  001F64  0E02               	movlw	high _clcd_display_string_details
  3853  001F66  2019               	addwfc	?___wmul+1,w,c
  3854  001F68  6E2D               	movwf	scroll_right_to_left@clcd_display_string_details+1,c
  3855  001F6A  ECB4  F006         	call	_scroll_right_to_left	;wreg free
  3856                           
  3857                           ;clcd.c: 566: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 0) {
  3858  001F6E  D045               	goto	l6181
  3859  001F70                     l6175:
  3860  001F70  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3861  001F74  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3862  001F78  0E00               	movlw	0
  3863  001F7A  6E1B               	movwf	___wmul@multiplicand+1,c
  3864  001F7C  0E36               	movlw	54
  3865  001F7E  6E1A               	movwf	___wmul@multiplicand,c
  3866  001F80  ECD1  F01A         	call	___wmul	;wreg free
  3867  001F84  0E01               	movlw	1
  3868  001F86  2618               	addwf	?___wmul,f,c
  3869  001F88  0E00               	movlw	0
  3870  001F8A  2219               	addwfc	?___wmul+1,f,c
  3871  001F8C  0E96               	movlw	low _clcd_display_string_details
  3872  001F8E  2418               	addwf	?___wmul,w,c
  3873  001F90  6E1E               	movwf	strlen@s,c
  3874  001F92  0E02               	movlw	high _clcd_display_string_details
  3875  001F94  2019               	addwfc	?___wmul+1,w,c
  3876  001F96  6E1F               	movwf	strlen@s+1,c
  3877  001F98  EC37  F018         	call	_strlen	;wreg free
  3878  001F9C  501E               	movf	?_strlen,w,c
  3879  001F9E  101F               	iorwf	?_strlen+1,w,c
  3880  001FA0  B4D8               	btfsc	status,2,c
  3881  001FA2  D02B               	goto	l6181
  3882  001FA4  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3883  001FA8  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3884  001FAC  0E00               	movlw	0
  3885  001FAE  6E1B               	movwf	___wmul@multiplicand+1,c
  3886  001FB0  0E36               	movlw	54
  3887  001FB2  6E1A               	movwf	___wmul@multiplicand,c
  3888  001FB4  ECD1  F01A         	call	___wmul	;wreg free
  3889  001FB8  0E30               	movlw	48
  3890  001FBA  2618               	addwf	?___wmul,f,c
  3891  001FBC  0E00               	movlw	0
  3892  001FBE  2219               	addwfc	?___wmul+1,f,c
  3893  001FC0  0E96               	movlw	low _clcd_display_string_details
  3894  001FC2  2418               	addwf	?___wmul,w,c
  3895  001FC4  6ED9               	movwf	fsr2l,c
  3896  001FC6  0E02               	movlw	high _clcd_display_string_details
  3897  001FC8  2019               	addwfc	?___wmul+1,w,c
  3898  001FCA  6EDA               	movwf	fsr2h,c
  3899  001FCC  50DF               	movf	223,w,c
  3900  001FCE  0B07               	andlw	7
  3901  001FD0  0900               	iorlw	0
  3902  001FD2  A4D8               	btfss	status,2,c
  3903  001FD4  D012               	goto	l6181
  3904                           
  3905                           ;clcd.c: 567: scroll_off(&clcd_display_string_details[count]);
  3906  001FD6  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3907  001FDA  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3908  001FDE  0E00               	movlw	0
  3909  001FE0  6E1B               	movwf	___wmul@multiplicand+1,c
  3910  001FE2  0E36               	movlw	54
  3911  001FE4  6E1A               	movwf	___wmul@multiplicand,c
  3912  001FE6  ECD1  F01A         	call	___wmul	;wreg free
  3913  001FEA  0E96               	movlw	low _clcd_display_string_details
  3914  001FEC  2418               	addwf	?___wmul,w,c
  3915  001FEE  6E24               	movwf	scroll_off@clcd_display_string_details,c
  3916  001FF0  0E02               	movlw	high _clcd_display_string_details
  3917  001FF2  2019               	addwfc	?___wmul+1,w,c
  3918  001FF4  6E25               	movwf	scroll_off@clcd_display_string_details+1,c
  3919  001FF6  EC85  F013         	call	_scroll_off	;wreg free
  3920  001FFA                     l6181:
  3921  001FFA  4A3F               	infsnz	make_display@count,f,c
  3922  001FFC  2A40               	incf	make_display@count+1,f,c
  3923  001FFE                     l6183:
  3924  001FFE  504D               	movf	_clcd_config_data+4,w,c
  3925  002000  6E3C               	movwf	??_make_display& (0+255),c
  3926  002002  6A3D               	clrf	(??_make_display+1)& (0+255),c
  3927  002004  503C               	movf	??_make_display,w,c
  3928  002006  5C3F               	subwf	make_display@count,w,c
  3929  002008  5040               	movf	make_display@count+1,w,c
  3930  00200A  0A80               	xorlw	128
  3931  00200C  6E3E               	movwf	(??_make_display+2)& (0+255),c
  3932  00200E  503D               	movf	??_make_display+1,w,c
  3933  002010  0A80               	xorlw	128
  3934  002012  583E               	subwfb	(??_make_display+2)& (0+255),w,c
  3935  002014  A0D8               	btfss	status,0,c
  3936  002016  D720               	goto	l6163
  3937                           
  3938                           ;clcd.c: 568: }
  3939                           ;clcd.c: 569: }
  3940                           ;clcd.c: 570: print_data_ready = 1;
  3941  002018  0E00               	movlw	0
  3942  00201A  0100               	movlb	0	; () banked
  3943  00201C  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  3944  00201E  0E01               	movlw	1
  3945  002020  6F76               	movwf	_print_data_ready& (0+255),b
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;clcd.c: 571: display_text();
  3949  002022  EC80  F016         	call	_display_text	;wreg free
  3950  002026  0012               	return		;funcret
  3951  002028                     __end_of_make_display:
  3952                           	opt stack 0
  3953                           tblptru	equ	0xFF8
  3954                           tblptrh	equ	0xFF7
  3955                           tblptrl	equ	0xFF6
  3956                           tablat	equ	0xFF5
  3957                           prodh	equ	0xFF4
  3958                           prodl	equ	0xFF3
  3959                           intcon	equ	0xFF2
  3960                           postinc0	equ	0xFEE
  3961                           wreg	equ	0xFE8
  3962                           postdec1	equ	0xFE5
  3963                           fsr1h	equ	0xFE2
  3964                           fsr1l	equ	0xFE1
  3965                           indf2	equ	0xFDF
  3966                           postinc2	equ	0xFDE
  3967                           fsr2h	equ	0xFDA
  3968                           fsr2l	equ	0xFD9
  3969                           status	equ	0xFD8
  3970                           
  3971 ;; *************** function _scroll_right_to_left *****************
  3972 ;; Defined at:
  3973 ;;		line 444 in file "clcd.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  clcd_display    2   43[COMRAM] PTR struct .
  3976 ;;		 -> clcd_display_string_details(1080), 
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;  line            1   58[COMRAM] unsigned char 
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  1    wreg      void 
  3981 ;; Registers used:
  3982 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3988 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Temps:         13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;Total ram usage:       16 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    6
  3995 ;; This function calls:
  3996 ;;		_memcpy
  3997 ;;		_memset
  3998 ;;		_strncpy
  3999 ;; This function is called by:
  4000 ;;		_make_display
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           	psect	text7
  4005  000D68                     __ptext7:
  4006                           	opt stack 0
  4007  000D68                     _scroll_right_to_left:
  4008                           	opt stack 23
  4009                           
  4010                           ;clcd.c: 446: char line = -1;
  4011                           
  4012                           ;incstack = 0
  4013  000D68  683B               	setf	scroll_right_to_left@line,c
  4014                           
  4015                           ;clcd.c: 447: if (clcd_display_string_details->start_row == 0)
  4016  000D6A  EE20 F02A          	lfsr	2,42
  4017  000D6E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4018  000D70  26D9               	addwf	fsr2l,f,c
  4019  000D72  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4020  000D74  22DA               	addwfc	fsr2h,f,c
  4021  000D76  50DF               	movf	indf2,w,c
  4022  000D78  0B7F               	andlw	127
  4023  000D7A  0900               	iorlw	0
  4024  000D7C  A4D8               	btfss	status,2,c
  4025  000D7E  D002               	goto	l5947
  4026                           
  4027                           ;clcd.c: 448: line = 0;
  4028  000D80  0E00               	movlw	0
  4029  000D82  D00C               	goto	L1
  4030  000D84                     l5947:
  4031                           
  4032                           ;clcd.c: 449: else if (clcd_display_string_details->start_row == 1)
  4033  000D84  EE20 F02A          	lfsr	2,42
  4034  000D88  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4035  000D8A  26D9               	addwf	fsr2l,f,c
  4036  000D8C  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4037  000D8E  22DA               	addwfc	fsr2h,f,c
  4038  000D90  50DF               	movf	indf2,w,c
  4039  000D92  0B7F               	andlw	127
  4040  000D94  06E8               	decf	wreg,f,c
  4041  000D96  A4D8               	btfss	status,2,c
  4042  000D98  D002               	goto	l5951
  4043                           
  4044                           ;clcd.c: 450: line = 1;
  4045  000D9A  0E01               	movlw	1
  4046  000D9C                     L1:
  4047  000D9C  6E3B               	movwf	scroll_right_to_left@line,c
  4048  000D9E                     l5951:
  4049                           
  4050                           ;clcd.c: 451: if (clcd_display_string_details->start_row == 2)
  4051  000D9E  EE20 F02A          	lfsr	2,42
  4052  000DA2  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4053  000DA4  26D9               	addwf	fsr2l,f,c
  4054  000DA6  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4055  000DA8  22DA               	addwfc	fsr2h,f,c
  4056  000DAA  50DF               	movf	indf2,w,c
  4057  000DAC  0B7F               	andlw	127
  4058  000DAE  0A02               	xorlw	2
  4059  000DB0  A4D8               	btfss	status,2,c
  4060  000DB2  D002               	goto	l5955
  4061                           
  4062                           ;clcd.c: 452: line = 2;
  4063  000DB4  0E02               	movlw	2
  4064  000DB6  6E3B               	movwf	scroll_right_to_left@line,c
  4065  000DB8                     l5955:
  4066                           
  4067                           ;clcd.c: 453: if (clcd_display_string_details->start_row == 3)
  4068  000DB8  EE20 F02A          	lfsr	2,42
  4069  000DBC  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4070  000DBE  26D9               	addwf	fsr2l,f,c
  4071  000DC0  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4072  000DC2  22DA               	addwfc	fsr2h,f,c
  4073  000DC4  50DF               	movf	indf2,w,c
  4074  000DC6  0B7F               	andlw	127
  4075  000DC8  0A03               	xorlw	3
  4076  000DCA  A4D8               	btfss	status,2,c
  4077  000DCC  D002               	goto	l5959
  4078                           
  4079                           ;clcd.c: 454: line = 3;
  4080  000DCE  0E03               	movlw	3
  4081  000DD0  6E3B               	movwf	scroll_right_to_left@line,c
  4082  000DD2                     l5959:
  4083                           
  4084                           ;clcd.c: 456: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  4085                           ;clcd.c: 457: ' ', clcd_display_string_details->display_char_count);
  4086  000DD2  503B               	movf	scroll_right_to_left@line,w,c
  4087  000DD4  0D14               	mullw	20
  4088  000DD6  0E00               	movlw	low _lcd_display_array
  4089  000DD8  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4090  000DDA  0E01               	movlw	high _lcd_display_array
  4091  000DDC  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4092  000DDE  50F3               	movf	prodl,w,c
  4093  000DE0  262E               	addwf	??_scroll_right_to_left,f,c
  4094  000DE2  50F4               	movf	prodh,w,c
  4095  000DE4  222F               	addwfc	??_scroll_right_to_left+1,f,c
  4096  000DE6  EE20 F02B          	lfsr	2,43
  4097  000DEA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4098  000DEC  26D9               	addwf	fsr2l,f,c
  4099  000DEE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4100  000DF0  22DA               	addwfc	fsr2h,f,c
  4101  000DF2  50DF               	movf	indf2,w,c
  4102  000DF4  0B7F               	andlw	127
  4103  000DF6  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4104  000DF8  5030               	movf	??_scroll_right_to_left+2,w,c
  4105  000DFA  0D01               	mullw	1
  4106  000DFC  50F3               	movf	prodl,w,c
  4107  000DFE  242E               	addwf	??_scroll_right_to_left,w,c
  4108  000E00  6E24               	movwf	memset@p1,c
  4109  000E02  50F4               	movf	prodh,w,c
  4110  000E04  202F               	addwfc	??_scroll_right_to_left+1,w,c
  4111  000E06  6E25               	movwf	memset@p1+1,c
  4112  000E08  0E00               	movlw	0
  4113  000E0A  6E27               	movwf	memset@c+1,c
  4114  000E0C  0E20               	movlw	32
  4115  000E0E  6E26               	movwf	memset@c,c
  4116  000E10  EE20 F031          	lfsr	2,49
  4117  000E14  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4118  000E16  26D9               	addwf	fsr2l,f,c
  4119  000E18  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4120  000E1A  22DA               	addwfc	fsr2h,f,c
  4121  000E1C  50DF               	movf	indf2,w,c
  4122  000E1E  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  4123  000E20  5031               	movf	??_scroll_right_to_left+3,w,c
  4124  000E22  6E28               	movwf	memset@n,c
  4125  000E24  6A29               	clrf	memset@n+1,c
  4126  000E26  ECA5  F01A         	call	_memset	;wreg free
  4127                           
  4128                           ;clcd.c: 458: if (clcd_display_string_details->length_count_for_left_scroll > clcd_displ
      +                          ay_string_details->strlen) {
  4129  000E2A  EE20 F029          	lfsr	2,41
  4130  000E2E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4131  000E30  26D9               	addwf	fsr2l,f,c
  4132  000E32  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4133  000E34  22DA               	addwfc	fsr2h,f,c
  4134  000E36  50DF               	movf	indf2,w,c
  4135  000E38  0B7F               	andlw	127
  4136  000E3A  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4137  000E3C  EE20 F034          	lfsr	2,52
  4138  000E40  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4139  000E42  26D9               	addwf	fsr2l,f,c
  4140  000E44  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4141  000E46  22DA               	addwfc	fsr2h,f,c
  4142  000E48  50DF               	movf	indf2,w,c
  4143  000E4A  0B7F               	andlw	127
  4144  000E4C  5C2E               	subwf	??_scroll_right_to_left,w,c
  4145  000E4E  B0D8               	btfsc	status,0,c
  4146  000E50  D06E               	goto	l5965
  4147                           
  4148                           ;clcd.c: 460: strncpy(lcd_display_array[line]+(clcd_display_string_details->end_col - cl
      +                          cd_display_string_details->length_decount_for_left_scroll - 1),
  4149                           ;clcd.c: 461: clcd_display_string_details->string, (clcd_display_string_details->display
      +                          _char_count -
  4150                           ;clcd.c: 462: (clcd_display_string_details->display_char_count - (clcd_display_string_de
      +                          tails->length_decount_for_left_scroll + 1))));
  4151  000E52  503B               	movf	scroll_right_to_left@line,w,c
  4152  000E54  0D14               	mullw	20
  4153  000E56  0EFF               	movlw	255
  4154  000E58  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4155  000E5A  0EFF               	movlw	255
  4156  000E5C  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4157  000E5E  EE20 F035          	lfsr	2,53
  4158  000E62  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4159  000E64  26D9               	addwf	fsr2l,f,c
  4160  000E66  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4161  000E68  22DA               	addwfc	fsr2h,f,c
  4162  000E6A  50DF               	movf	indf2,w,c
  4163  000E6C  0B7F               	andlw	127
  4164  000E6E  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4165  000E70  6A31               	clrf	(??_scroll_right_to_left+3)& (0+255),c
  4166  000E72  1E30               	comf	??_scroll_right_to_left+2,f,c
  4167  000E74  1E31               	comf	??_scroll_right_to_left+3,f,c
  4168  000E76  4A30               	infsnz	??_scroll_right_to_left+2,f,c
  4169  000E78  2A31               	incf	??_scroll_right_to_left+3,f,c
  4170  000E7A  EE20 F02E          	lfsr	2,46
  4171  000E7E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4172  000E80  26D9               	addwf	fsr2l,f,c
  4173  000E82  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4174  000E84  22DA               	addwfc	fsr2h,f,c
  4175  000E86  50DF               	movf	indf2,w,c
  4176  000E88  0B7F               	andlw	127
  4177  000E8A  6E32               	movwf	(??_scroll_right_to_left+4)& (0+255),c
  4178  000E8C  6A33               	clrf	(??_scroll_right_to_left+5)& (0+255),c
  4179  000E8E  5030               	movf	??_scroll_right_to_left+2,w,c
  4180  000E90  2632               	addwf	??_scroll_right_to_left+4,f,c
  4181  000E92  5031               	movf	??_scroll_right_to_left+3,w,c
  4182  000E94  2233               	addwfc	??_scroll_right_to_left+5,f,c
  4183  000E96  502E               	movf	??_scroll_right_to_left,w,c
  4184  000E98  2632               	addwf	??_scroll_right_to_left+4,f,c
  4185  000E9A  502F               	movf	??_scroll_right_to_left+1,w,c
  4186  000E9C  2233               	addwfc	??_scroll_right_to_left+5,f,c
  4187  000E9E  0E00               	movlw	low _lcd_display_array
  4188  000EA0  6E34               	movwf	(??_scroll_right_to_left+6)& (0+255),c
  4189  000EA2  0E01               	movlw	high _lcd_display_array
  4190  000EA4  6E35               	movwf	(??_scroll_right_to_left+7)& (0+255),c
  4191  000EA6  5032               	movf	??_scroll_right_to_left+4,w,c
  4192  000EA8  2634               	addwf	??_scroll_right_to_left+6,f,c
  4193  000EAA  5033               	movf	??_scroll_right_to_left+5,w,c
  4194  000EAC  2235               	addwfc	??_scroll_right_to_left+7,f,c
  4195  000EAE  50F3               	movf	prodl,w,c
  4196  000EB0  2434               	addwf	??_scroll_right_to_left+6,w,c
  4197  000EB2  6E10               	movwf	strncpy@to,c
  4198  000EB4  50F4               	movf	prodh,w,c
  4199  000EB6  2035               	addwfc	??_scroll_right_to_left+7,w,c
  4200  000EB8  6E11               	movwf	strncpy@to+1,c
  4201  000EBA  0E01               	movlw	1
  4202  000EBC  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4203  000EBE  6E12               	movwf	strncpy@from,c
  4204  000EC0  0E00               	movlw	0
  4205  000EC2  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4206  000EC4  6E13               	movwf	strncpy@from+1,c
  4207  000EC6  EE20 F035          	lfsr	2,53
  4208  000ECA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4209  000ECC  26D9               	addwf	fsr2l,f,c
  4210  000ECE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4211  000ED0  22DA               	addwfc	fsr2h,f,c
  4212  000ED2  50DF               	movf	indf2,w,c
  4213  000ED4  0B7F               	andlw	127
  4214  000ED6  6E36               	movwf	(??_scroll_right_to_left+8)& (0+255),c
  4215  000ED8  6A37               	clrf	(??_scroll_right_to_left+9)& (0+255),c
  4216  000EDA  0E01               	movlw	1
  4217  000EDC  2636               	addwf	??_scroll_right_to_left+8,f,c
  4218  000EDE  0E00               	movlw	0
  4219  000EE0  2237               	addwfc	??_scroll_right_to_left+9,f,c
  4220  000EE2  1E36               	comf	??_scroll_right_to_left+8,f,c
  4221  000EE4  1E37               	comf	??_scroll_right_to_left+9,f,c
  4222  000EE6  4A36               	infsnz	??_scroll_right_to_left+8,f,c
  4223  000EE8  2A37               	incf	??_scroll_right_to_left+9,f,c
  4224  000EEA  EE20 F031          	lfsr	2,49
  4225  000EEE  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4226  000EF0  26D9               	addwf	fsr2l,f,c
  4227  000EF2  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4228  000EF4  22DA               	addwfc	fsr2h,f,c
  4229  000EF6  50DF               	movf	indf2,w,c
  4230  000EF8  6E38               	movwf	(??_scroll_right_to_left+10)& (0+255),c
  4231  000EFA  6A39               	clrf	(??_scroll_right_to_left+11)& (0+255),c
  4232  000EFC  5036               	movf	??_scroll_right_to_left+8,w,c
  4233  000EFE  2638               	addwf	??_scroll_right_to_left+10,f,c
  4234  000F00  5037               	movf	??_scroll_right_to_left+9,w,c
  4235  000F02  2239               	addwfc	??_scroll_right_to_left+11,f,c
  4236  000F04  1E38               	comf	??_scroll_right_to_left+10,f,c
  4237  000F06  1E39               	comf	??_scroll_right_to_left+11,f,c
  4238  000F08  4A38               	infsnz	??_scroll_right_to_left+10,f,c
  4239  000F0A  2A39               	incf	??_scroll_right_to_left+11,f,c
  4240  000F0C  EE20 F031          	lfsr	2,49
  4241  000F10  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4242  000F12  26D9               	addwf	fsr2l,f,c
  4243  000F14  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4244  000F16  22DA               	addwfc	fsr2h,f,c
  4245  000F18  50DF               	movf	indf2,w,c
  4246  000F1A  6E3A               	movwf	(??_scroll_right_to_left+12)& (0+255),c
  4247  000F1C  503A               	movf	??_scroll_right_to_left+12,w,c
  4248  000F1E  2438               	addwf	??_scroll_right_to_left+10,w,c
  4249  000F20  6E14               	movwf	strncpy@size,c
  4250  000F22  0E00               	movlw	0
  4251  000F24  2039               	addwfc	??_scroll_right_to_left+11,w,c
  4252  000F26  6E15               	movwf	strncpy@size+1,c
  4253  000F28  ECAF  F017         	call	_strncpy	;wreg free
  4254                           
  4255                           ;clcd.c: 463: } else {
  4256  000F2C  D055               	goto	l5969
  4257  000F2E                     l5965:
  4258                           
  4259                           ;clcd.c: 464: if (clcd_display_string_details->string[clcd_display_string_details->lengt
      +                          h_count_for_left_scroll] != (0)) {
  4260  000F2E  EE20 F034          	lfsr	2,52
  4261  000F32  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4262  000F34  26D9               	addwf	fsr2l,f,c
  4263  000F36  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4264  000F38  22DA               	addwfc	fsr2h,f,c
  4265  000F3A  50DF               	movf	indf2,w,c
  4266  000F3C  0B7F               	andlw	127
  4267  000F3E  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4268  000F40  502E               	movf	??_scroll_right_to_left,w,c
  4269  000F42  0D01               	mullw	1
  4270  000F44  0E01               	movlw	1
  4271  000F46  26F3               	addwf	prodl,f,c
  4272  000F48  0E00               	movlw	0
  4273  000F4A  22F4               	addwfc	prodh,f,c
  4274  000F4C  50F3               	movf	prodl,w,c
  4275  000F4E  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4276  000F50  6ED9               	movwf	fsr2l,c
  4277  000F52  50F4               	movf	prodh,w,c
  4278  000F54  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4279  000F56  6EDA               	movwf	fsr2h,c
  4280  000F58  50DF               	movf	indf2,w,c
  4281  000F5A  B4D8               	btfsc	status,2,c
  4282  000F5C  D03D               	goto	l5969
  4283                           
  4284                           ;clcd.c: 465: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  4285                           ;clcd.c: 466: clcd_display_string_details->string + clcd_display_string_details->length_
      +                          count_for_left_scroll,
  4286                           ;clcd.c: 467: clcd_display_string_details->display_char_count);
  4287  000F5E  503B               	movf	scroll_right_to_left@line,w,c
  4288  000F60  0D14               	mullw	20
  4289  000F62  0E00               	movlw	low _lcd_display_array
  4290  000F64  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4291  000F66  0E01               	movlw	high _lcd_display_array
  4292  000F68  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4293  000F6A  50F3               	movf	prodl,w,c
  4294  000F6C  262E               	addwf	??_scroll_right_to_left,f,c
  4295  000F6E  50F4               	movf	prodh,w,c
  4296  000F70  222F               	addwfc	??_scroll_right_to_left+1,f,c
  4297  000F72  EE20 F02B          	lfsr	2,43
  4298  000F76  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4299  000F78  26D9               	addwf	fsr2l,f,c
  4300  000F7A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4301  000F7C  22DA               	addwfc	fsr2h,f,c
  4302  000F7E  50DF               	movf	indf2,w,c
  4303  000F80  0B7F               	andlw	127
  4304  000F82  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4305  000F84  5030               	movf	??_scroll_right_to_left+2,w,c
  4306  000F86  0D01               	mullw	1
  4307  000F88  50F3               	movf	prodl,w,c
  4308  000F8A  242E               	addwf	??_scroll_right_to_left,w,c
  4309  000F8C  6E10               	movwf	memcpy@d1,c
  4310  000F8E  50F4               	movf	prodh,w,c
  4311  000F90  202F               	addwfc	??_scroll_right_to_left+1,w,c
  4312  000F92  6E11               	movwf	memcpy@d1+1,c
  4313  000F94  EE20 F034          	lfsr	2,52
  4314  000F98  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4315  000F9A  26D9               	addwf	fsr2l,f,c
  4316  000F9C  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4317  000F9E  22DA               	addwfc	fsr2h,f,c
  4318  000FA0  50DF               	movf	indf2,w,c
  4319  000FA2  0B7F               	andlw	127
  4320  000FA4  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  4321  000FA6  5031               	movf	??_scroll_right_to_left+3,w,c
  4322  000FA8  0D01               	mullw	1
  4323  000FAA  0E01               	movlw	1
  4324  000FAC  26F3               	addwf	prodl,f,c
  4325  000FAE  0E00               	movlw	0
  4326  000FB0  22F4               	addwfc	prodh,f,c
  4327  000FB2  50F3               	movf	prodl,w,c
  4328  000FB4  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4329  000FB6  6E12               	movwf	memcpy@s1,c
  4330  000FB8  50F4               	movf	prodh,w,c
  4331  000FBA  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4332  000FBC  6E13               	movwf	memcpy@s1+1,c
  4333  000FBE  EE20 F031          	lfsr	2,49
  4334  000FC2  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4335  000FC4  26D9               	addwf	fsr2l,f,c
  4336  000FC6  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4337  000FC8  22DA               	addwfc	fsr2h,f,c
  4338  000FCA  50DF               	movf	indf2,w,c
  4339  000FCC  6E32               	movwf	(??_scroll_right_to_left+4)& (0+255),c
  4340  000FCE  5032               	movf	??_scroll_right_to_left+4,w,c
  4341  000FD0  6E14               	movwf	memcpy@n,c
  4342  000FD2  6A15               	clrf	memcpy@n+1,c
  4343  000FD4  ECAF  F019         	call	_memcpy	;wreg free
  4344  000FD8                     l5969:
  4345                           
  4346                           ;clcd.c: 470: }
  4347                           ;clcd.c: 471: }
  4348                           ;clcd.c: 473: if (clcd_display_string_details->length_count_for_left_scroll <= clcd_disp
      +                          lay_string_details->strlen)
  4349  000FD8  EE20 F034          	lfsr	2,52
  4350  000FDC  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4351  000FDE  26D9               	addwf	fsr2l,f,c
  4352  000FE0  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4353  000FE2  22DA               	addwfc	fsr2h,f,c
  4354  000FE4  50DF               	movf	indf2,w,c
  4355  000FE6  0B7F               	andlw	127
  4356  000FE8  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4357  000FEA  EE20 F029          	lfsr	2,41
  4358  000FEE  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4359  000FF0  26D9               	addwf	fsr2l,f,c
  4360  000FF2  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4361  000FF4  22DA               	addwfc	fsr2h,f,c
  4362  000FF6  50DF               	movf	indf2,w,c
  4363  000FF8  0B7F               	andlw	127
  4364  000FFA  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4365  000FFC  502E               	movf	??_scroll_right_to_left,w,c
  4366  000FFE  5C2F               	subwf	??_scroll_right_to_left+1,w,c
  4367  001000  A0D8               	btfss	status,0,c
  4368  001002  D013               	goto	l5973
  4369                           
  4370                           ;clcd.c: 474: {
  4371                           ;clcd.c: 475: clcd_display_string_details->length_count_for_left_scroll++;
  4372  001004  0E01               	movlw	1
  4373  001006  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4374  001008  EE20 F034          	lfsr	2,52
  4375  00100C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4376  00100E  26D9               	addwf	fsr2l,f,c
  4377  001010  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4378  001012  22DA               	addwfc	fsr2h,f,c
  4379  001014  50DF               	movf	indf2,w,c
  4380  001016  0B7F               	andlw	127
  4381  001018  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4382  00101A  502E               	movf	??_scroll_right_to_left,w,c
  4383  00101C  262F               	addwf	??_scroll_right_to_left+1,f,c
  4384  00101E  50DF               	movf	indf2,w,c
  4385  001020  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4386  001022  0B80               	andlw	-128
  4387  001024  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4388  001026  6EDF               	movwf	indf2,c
  4389                           
  4390                           ;clcd.c: 476: } else if (clcd_display_string_details->length_count_for_left_scroll > clc
      +                          d_display_string_details->strlen)
  4391  001028  0012               	return	
  4392  00102A                     l5973:
  4393  00102A  EE20 F029          	lfsr	2,41
  4394  00102E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4395  001030  26D9               	addwf	fsr2l,f,c
  4396  001032  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4397  001034  22DA               	addwfc	fsr2h,f,c
  4398  001036  50DF               	movf	indf2,w,c
  4399  001038  0B7F               	andlw	127
  4400  00103A  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4401  00103C  EE20 F034          	lfsr	2,52
  4402  001040  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4403  001042  26D9               	addwf	fsr2l,f,c
  4404  001044  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4405  001046  22DA               	addwfc	fsr2h,f,c
  4406  001048  50DF               	movf	indf2,w,c
  4407  00104A  0B7F               	andlw	127
  4408  00104C  5C2E               	subwf	??_scroll_right_to_left,w,c
  4409  00104E  B0D8               	btfsc	status,0,c
  4410  001050  0012               	return	
  4411                           
  4412                           ;clcd.c: 477: {
  4413                           ;clcd.c: 478: clcd_display_string_details->length_decount_for_left_scroll++;
  4414  001052  0E01               	movlw	1
  4415  001054  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4416  001056  EE20 F035          	lfsr	2,53
  4417  00105A  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4418  00105C  26D9               	addwf	fsr2l,f,c
  4419  00105E  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4420  001060  22DA               	addwfc	fsr2h,f,c
  4421  001062  50DF               	movf	indf2,w,c
  4422  001064  0B7F               	andlw	127
  4423  001066  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4424  001068  502E               	movf	??_scroll_right_to_left,w,c
  4425  00106A  262F               	addwf	??_scroll_right_to_left+1,f,c
  4426  00106C  50DF               	movf	indf2,w,c
  4427  00106E  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4428  001070  0B80               	andlw	-128
  4429  001072  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4430  001074  6EDF               	movwf	indf2,c
  4431                           
  4432                           ;clcd.c: 479: if (clcd_display_string_details->length_decount_for_left_scroll == clcd_di
      +                          splay_string_details->display_char_count) {
  4433  001076  EE20 F031          	lfsr	2,49
  4434  00107A  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4435  00107C  26D9               	addwf	fsr2l,f,c
  4436  00107E  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4437  001080  22DA               	addwfc	fsr2h,f,c
  4438  001082  EE10 F035          	lfsr	1,53
  4439  001086  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4440  001088  26E1               	addwf	fsr1l,f,c
  4441  00108A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4442  00108C  22E2               	addwfc	fsr1h,f,c
  4443  00108E  50E7               	movf	indf1,w,c
  4444  001090  0B7F               	andlw	127
  4445  001092  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4446  001094  50DE               	movf	postinc2,w,c
  4447  001096  182F               	xorwf	??_scroll_right_to_left+1,w,c
  4448  001098  A4D8               	btfss	status,2,c
  4449  00109A  0012               	return	
  4450                           
  4451                           ;clcd.c: 480: clcd_display_string_details->length_decount_for_left_scroll = 0;
  4452  00109C  EE20 F035          	lfsr	2,53
  4453  0010A0  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4454  0010A2  26D9               	addwf	fsr2l,f,c
  4455  0010A4  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4456  0010A6  22DA               	addwfc	fsr2h,f,c
  4457  0010A8  90DF               	bcf	indf2,0,c
  4458  0010AA  92DF               	bcf	indf2,1,c
  4459  0010AC  94DF               	bcf	indf2,2,c
  4460  0010AE  96DF               	bcf	indf2,3,c
  4461  0010B0  98DF               	bcf	indf2,4,c
  4462  0010B2  9ADF               	bcf	indf2,5,c
  4463  0010B4  9CDF               	bcf	indf2,6,c
  4464                           
  4465                           ;clcd.c: 481: clcd_display_string_details->length_count_for_left_scroll = 0;
  4466  0010B6  EE20 F034          	lfsr	2,52
  4467  0010BA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4468  0010BC  26D9               	addwf	fsr2l,f,c
  4469  0010BE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4470  0010C0  22DA               	addwfc	fsr2h,f,c
  4471  0010C2  90DF               	bcf	indf2,0,c
  4472  0010C4  92DF               	bcf	indf2,1,c
  4473  0010C6  94DF               	bcf	indf2,2,c
  4474  0010C8  96DF               	bcf	indf2,3,c
  4475  0010CA  98DF               	bcf	indf2,4,c
  4476  0010CC  9ADF               	bcf	indf2,5,c
  4477  0010CE  9CDF               	bcf	indf2,6,c
  4478  0010D0  0012               	return	
  4479  0010D2                     __end_of_scroll_right_to_left:
  4480                           	opt stack 0
  4481                           tblptru	equ	0xFF8
  4482                           tblptrh	equ	0xFF7
  4483                           tblptrl	equ	0xFF6
  4484                           tablat	equ	0xFF5
  4485                           prodh	equ	0xFF4
  4486                           prodl	equ	0xFF3
  4487                           intcon	equ	0xFF2
  4488                           postinc0	equ	0xFEE
  4489                           wreg	equ	0xFE8
  4490                           indf1	equ	0xFE7
  4491                           postdec1	equ	0xFE5
  4492                           fsr1h	equ	0xFE2
  4493                           fsr1l	equ	0xFE1
  4494                           indf2	equ	0xFDF
  4495                           postinc2	equ	0xFDE
  4496                           fsr2h	equ	0xFDA
  4497                           fsr2l	equ	0xFD9
  4498                           status	equ	0xFD8
  4499                           
  4500 ;; *************** function _strncpy *****************
  4501 ;; Defined at:
  4502 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncpy.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;  to              2   15[COMRAM] PTR unsigned char 
  4505 ;;		 -> lcd_display_array(80), 
  4506 ;;  from            2   17[COMRAM] PTR const unsigned char 
  4507 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1080), 
  4508 ;;  size            2   19[COMRAM] unsigned int 
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  cp              2   21[COMRAM] PTR unsigned char 
  4511 ;;		 -> lcd_display_array(80), 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  2   15[COMRAM] PTR unsigned char 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4521 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;Total ram usage:        8 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    5
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_scroll_right_to_left
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text8
  4536  002F5E                     __ptext8:
  4537                           	opt stack 0
  4538  002F5E                     _strncpy:
  4539                           	opt stack 23
  4540                           
  4541                           ;incstack = 0
  4542  002F5E  C010  F016         	movff	strncpy@to,strncpy@cp
  4543  002F62  C011  F017         	movff	strncpy@to+1,strncpy@cp+1
  4544  002F66  D014               	goto	l5861
  4545  002F68                     l5855:
  4546  002F68  0614               	decf	strncpy@size,f,c
  4547  002F6A  A0D8               	btfss	status,0,c
  4548  002F6C  0615               	decf	strncpy@size+1,f,c
  4549  002F6E  C012  FFD9         	movff	strncpy@from,fsr2l
  4550  002F72  C013  FFDA         	movff	strncpy@from+1,fsr2h
  4551  002F76  4A12               	infsnz	strncpy@from,f,c
  4552  002F78  2A13               	incf	strncpy@from+1,f,c
  4553  002F7A  C016  FFE1         	movff	strncpy@cp,fsr1l
  4554  002F7E  C017  FFE2         	movff	strncpy@cp+1,fsr1h
  4555  002F82  4A16               	infsnz	strncpy@cp,f,c
  4556  002F84  2A17               	incf	strncpy@cp+1,f,c
  4557  002F86  CFDF FFE7          	movff	indf2,indf1
  4558  002F8A  50E7               	movf	indf1,w,c
  4559  002F8C  B4D8               	btfsc	status,2,c
  4560  002F8E  D00D               	goto	l5867
  4561  002F90                     l5861:
  4562  002F90  5014               	movf	strncpy@size,w,c
  4563  002F92  1015               	iorwf	strncpy@size+1,w,c
  4564  002F94  B4D8               	btfsc	status,2,c
  4565  002F96  D009               	goto	l5867
  4566  002F98  D7E7               	goto	l5855
  4567  002F9A                     l5863:
  4568  002F9A  C016  FFD9         	movff	strncpy@cp,fsr2l
  4569  002F9E  C017  FFDA         	movff	strncpy@cp+1,fsr2h
  4570  002FA2  0E00               	movlw	0
  4571  002FA4  6EDF               	movwf	indf2,c
  4572  002FA6  4A16               	infsnz	strncpy@cp,f,c
  4573  002FA8  2A17               	incf	strncpy@cp+1,f,c
  4574  002FAA                     l5867:
  4575  002FAA  0614               	decf	strncpy@size,f,c
  4576  002FAC  A0D8               	btfss	status,0,c
  4577  002FAE  0615               	decf	strncpy@size+1,f,c
  4578  002FB0  2814               	incf	strncpy@size,w,c
  4579  002FB2  E1F3               	bnz	l5863
  4580  002FB4  2815               	incf	strncpy@size+1,w,c
  4581  002FB6  B4D8               	btfsc	status,2,c
  4582  002FB8  0012               	return	
  4583  002FBA  D7EF               	goto	l5863
  4584  002FBC                     __end_of_strncpy:
  4585                           	opt stack 0
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           prodh	equ	0xFF4
  4591                           prodl	equ	0xFF3
  4592                           intcon	equ	0xFF2
  4593                           postinc0	equ	0xFEE
  4594                           wreg	equ	0xFE8
  4595                           indf1	equ	0xFE7
  4596                           postdec1	equ	0xFE5
  4597                           fsr1h	equ	0xFE2
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           postinc2	equ	0xFDE
  4601                           fsr2h	equ	0xFDA
  4602                           fsr2l	equ	0xFD9
  4603                           status	equ	0xFD8
  4604                           
  4605 ;; *************** function _scroll_off *****************
  4606 ;; Defined at:
  4607 ;;		line 488 in file "clcd.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;  clcd_display    2   35[COMRAM] PTR struct .
  4610 ;;		 -> clcd_display_string_details(1080), 
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;  i               2   48[COMRAM] int 
  4613 ;;  j               2   46[COMRAM] int 
  4614 ;;  k               2   41[COMRAM] int 
  4615 ;;  str_len         1   45[COMRAM] unsigned char 
  4616 ;;  display_char    1   44[COMRAM] unsigned char 
  4617 ;;  line            1   43[COMRAM] unsigned char 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4627 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;Total ram usage:       15 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    6
  4634 ;; This function calls:
  4635 ;;		_strlen
  4636 ;; This function is called by:
  4637 ;;		_make_display
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           	psect	text9
  4642  00270A                     __ptext9:
  4643                           	opt stack 0
  4644  00270A                     _scroll_off:
  4645                           	opt stack 23
  4646                           
  4647                           ;clcd.c: 489: char line = -1;
  4648                           
  4649                           ;incstack = 0
  4650  00270A  682C               	setf	scroll_off@line,c
  4651                           
  4652                           ;clcd.c: 491: int i = 0;
  4653  00270C  0E00               	movlw	0
  4654  00270E  6E32               	movwf	scroll_off@i+1,c
  4655  002710  0E00               	movlw	0
  4656  002712  6E31               	movwf	scroll_off@i,c
  4657                           
  4658                           ;clcd.c: 492: int j = 0, k = 0;
  4659  002714  0E00               	movlw	0
  4660  002716  6E30               	movwf	scroll_off@j+1,c
  4661  002718  0E00               	movlw	0
  4662  00271A  6E2F               	movwf	scroll_off@j,c
  4663  00271C  0E00               	movlw	0
  4664  00271E  6E2B               	movwf	scroll_off@k+1,c
  4665  002720  0E00               	movlw	0
  4666  002722  6E2A               	movwf	scroll_off@k,c
  4667                           
  4668                           ;clcd.c: 493: char display_char_count = clcd_display_string_details->end_point - clcd_di
      +                          splay_string_details->start_point;
  4669  002724  EE20 F02F          	lfsr	2,47
  4670  002728  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4671  00272A  26D9               	addwf	fsr2l,f,c
  4672  00272C  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4673  00272E  22DA               	addwfc	fsr2h,f,c
  4674  002730  50DF               	movf	indf2,w,c
  4675  002732  0B7F               	andlw	127
  4676  002734  6E26               	movwf	??_scroll_off& (0+255),c
  4677  002736  EE20 F02C          	lfsr	2,44
  4678  00273A  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4679  00273C  26D9               	addwf	fsr2l,f,c
  4680  00273E  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4681  002740  22DA               	addwfc	fsr2h,f,c
  4682  002742  50DF               	movf	indf2,w,c
  4683  002744  0B7F               	andlw	127
  4684  002746  0800               	sublw	0
  4685  002748  2426               	addwf	??_scroll_off,w,c
  4686  00274A  6E2D               	movwf	scroll_off@display_char_count,c
  4687                           
  4688                           ;clcd.c: 494: char str_len = strlen(clcd_display_string_details->string);
  4689  00274C  0E01               	movlw	1
  4690  00274E  2424               	addwf	scroll_off@clcd_display_string_details,w,c
  4691  002750  6E1E               	movwf	strlen@s,c
  4692  002752  0E00               	movlw	0
  4693  002754  2025               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4694  002756  6E1F               	movwf	strlen@s+1,c
  4695  002758  EC37  F018         	call	_strlen	;wreg free
  4696  00275C  501E               	movf	?_strlen,w,c
  4697  00275E  6E2E               	movwf	scroll_off@str_len,c
  4698                           
  4699                           ;clcd.c: 495: line = clcd_display_string_details->start_row;
  4700  002760  EE20 F02A          	lfsr	2,42
  4701  002764  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4702  002766  26D9               	addwf	fsr2l,f,c
  4703  002768  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4704  00276A  22DA               	addwfc	fsr2h,f,c
  4705  00276C  50DF               	movf	indf2,w,c
  4706  00276E  0B7F               	andlw	127
  4707  002770  6E2C               	movwf	scroll_off@line,c
  4708                           
  4709                           ;clcd.c: 496: j = clcd_display_string_details->start_col;
  4710  002772  EE20 F02B          	lfsr	2,43
  4711  002776  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4712  002778  26D9               	addwf	fsr2l,f,c
  4713  00277A  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4714  00277C  22DA               	addwfc	fsr2h,f,c
  4715  00277E  50DF               	movf	indf2,w,c
  4716  002780  0B7F               	andlw	127
  4717  002782  6E26               	movwf	??_scroll_off& (0+255),c
  4718  002784  5026               	movf	??_scroll_off,w,c
  4719  002786  6E2F               	movwf	scroll_off@j,c
  4720  002788  6A30               	clrf	scroll_off@j+1,c
  4721                           
  4722                           ;clcd.c: 497: for (i = 0; i < str_len;) {
  4723  00278A  0E00               	movlw	0
  4724  00278C  6E32               	movwf	scroll_off@i+1,c
  4725  00278E  0E00               	movlw	0
  4726  002790  6E31               	movwf	scroll_off@i,c
  4727  002792  D05B               	goto	l6019
  4728  002794                     l5995:
  4729                           
  4730                           ;clcd.c: 499: lcd_display_array[line][j] = clcd_display_string_details->string[i++];
  4731  002794  0E01               	movlw	1
  4732  002796  2431               	addwf	scroll_off@i,w,c
  4733  002798  6E26               	movwf	??_scroll_off& (0+255),c
  4734  00279A  0E00               	movlw	0
  4735  00279C  2032               	addwfc	scroll_off@i+1,w,c
  4736  00279E  6E27               	movwf	(??_scroll_off+1)& (0+255),c
  4737  0027A0  5026               	movf	??_scroll_off,w,c
  4738  0027A2  2424               	addwf	scroll_off@clcd_display_string_details,w,c
  4739  0027A4  6ED9               	movwf	fsr2l,c
  4740  0027A6  5027               	movf	??_scroll_off+1,w,c
  4741  0027A8  2025               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4742  0027AA  6EDA               	movwf	fsr2h,c
  4743  0027AC  502C               	movf	scroll_off@line,w,c
  4744  0027AE  0D14               	mullw	20
  4745  0027B0  0E00               	movlw	low _lcd_display_array
  4746  0027B2  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4747  0027B4  0E01               	movlw	high _lcd_display_array
  4748  0027B6  6E29               	movwf	(??_scroll_off+3)& (0+255),c
  4749  0027B8  50F3               	movf	prodl,w,c
  4750  0027BA  2628               	addwf	??_scroll_off+2,f,c
  4751  0027BC  50F4               	movf	prodh,w,c
  4752  0027BE  2229               	addwfc	??_scroll_off+3,f,c
  4753  0027C0  502F               	movf	scroll_off@j,w,c
  4754  0027C2  2428               	addwf	??_scroll_off+2,w,c
  4755  0027C4  6EE1               	movwf	fsr1l,c
  4756  0027C6  5030               	movf	scroll_off@j+1,w,c
  4757  0027C8  2029               	addwfc	??_scroll_off+3,w,c
  4758  0027CA  6EE2               	movwf	fsr1h,c
  4759  0027CC  CFDF FFE7          	movff	indf2,indf1
  4760  0027D0  4A31               	infsnz	scroll_off@i,f,c
  4761  0027D2  2A32               	incf	scroll_off@i+1,f,c
  4762                           
  4763                           ;clcd.c: 500: if (i >= str_len)break;
  4764  0027D4  502E               	movf	scroll_off@str_len,w,c
  4765  0027D6  6E26               	movwf	??_scroll_off& (0+255),c
  4766  0027D8  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4767  0027DA  5026               	movf	??_scroll_off,w,c
  4768  0027DC  5C31               	subwf	scroll_off@i,w,c
  4769  0027DE  5032               	movf	scroll_off@i+1,w,c
  4770  0027E0  0A80               	xorlw	128
  4771  0027E2  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4772  0027E4  5027               	movf	??_scroll_off+1,w,c
  4773  0027E6  0A80               	xorlw	128
  4774  0027E8  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4775  0027EA  B0D8               	btfsc	status,0,c
  4776  0027EC  D01C               	goto	l6011
  4777                           
  4778                           ;clcd.c: 501: if (i >= display_char_count)break;
  4779  0027EE  502D               	movf	scroll_off@display_char_count,w,c
  4780  0027F0  6E26               	movwf	??_scroll_off& (0+255),c
  4781  0027F2  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4782  0027F4  5026               	movf	??_scroll_off,w,c
  4783  0027F6  5C31               	subwf	scroll_off@i,w,c
  4784  0027F8  5032               	movf	scroll_off@i+1,w,c
  4785  0027FA  0A80               	xorlw	128
  4786  0027FC  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4787  0027FE  5027               	movf	??_scroll_off+1,w,c
  4788  002800  0A80               	xorlw	128
  4789  002802  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4790  002804  B0D8               	btfsc	status,0,c
  4791  002806  D00F               	goto	l6011
  4792  002808  4A2F               	infsnz	scroll_off@j,f,c
  4793  00280A  2A30               	incf	scroll_off@j+1,f,c
  4794  00280C                     l6009:
  4795  00280C  504B               	movf	_clcd_config_data+2,w,c
  4796  00280E  6E26               	movwf	??_scroll_off& (0+255),c
  4797  002810  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4798  002812  5026               	movf	??_scroll_off,w,c
  4799  002814  5C2F               	subwf	scroll_off@j,w,c
  4800  002816  5030               	movf	scroll_off@j+1,w,c
  4801  002818  0A80               	xorlw	128
  4802  00281A  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4803  00281C  5027               	movf	??_scroll_off+1,w,c
  4804  00281E  0A80               	xorlw	128
  4805  002820  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4806  002822  A0D8               	btfss	status,0,c
  4807  002824  D7B7               	goto	l5995
  4808  002826                     l6011:
  4809                           
  4810                           ;clcd.c: 502: }
  4811                           ;clcd.c: 504: j = 0;
  4812  002826  0E00               	movlw	0
  4813  002828  6E30               	movwf	scroll_off@j+1,c
  4814  00282A  0E00               	movlw	0
  4815  00282C  6E2F               	movwf	scroll_off@j,c
  4816                           
  4817                           ;clcd.c: 505: line++;
  4818  00282E  2A2C               	incf	scroll_off@line,f,c
  4819                           
  4820                           ;clcd.c: 506: if (i >= display_char_count)break;
  4821  002830  502D               	movf	scroll_off@display_char_count,w,c
  4822  002832  6E26               	movwf	??_scroll_off& (0+255),c
  4823  002834  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4824  002836  5026               	movf	??_scroll_off,w,c
  4825  002838  5C31               	subwf	scroll_off@i,w,c
  4826  00283A  5032               	movf	scroll_off@i+1,w,c
  4827  00283C  0A80               	xorlw	128
  4828  00283E  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4829  002840  5027               	movf	??_scroll_off+1,w,c
  4830  002842  0A80               	xorlw	128
  4831  002844  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4832  002846  B0D8               	btfsc	status,0,c
  4833  002848  0012               	return	
  4834  00284A                     l6019:
  4835  00284A  502E               	movf	scroll_off@str_len,w,c
  4836  00284C  6E26               	movwf	??_scroll_off& (0+255),c
  4837  00284E  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4838  002850  5026               	movf	??_scroll_off,w,c
  4839  002852  5C31               	subwf	scroll_off@i,w,c
  4840  002854  5032               	movf	scroll_off@i+1,w,c
  4841  002856  0A80               	xorlw	128
  4842  002858  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4843  00285A  5027               	movf	??_scroll_off+1,w,c
  4844  00285C  0A80               	xorlw	128
  4845  00285E  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4846  002860  B0D8               	btfsc	status,0,c
  4847  002862  0012               	return	
  4848  002864  D7D3               	goto	l6009
  4849  002866                     __end_of_scroll_off:
  4850                           	opt stack 0
  4851                           tblptru	equ	0xFF8
  4852                           tblptrh	equ	0xFF7
  4853                           tblptrl	equ	0xFF6
  4854                           tablat	equ	0xFF5
  4855                           prodh	equ	0xFF4
  4856                           prodl	equ	0xFF3
  4857                           intcon	equ	0xFF2
  4858                           postinc0	equ	0xFEE
  4859                           wreg	equ	0xFE8
  4860                           indf1	equ	0xFE7
  4861                           postdec1	equ	0xFE5
  4862                           fsr1h	equ	0xFE2
  4863                           fsr1l	equ	0xFE1
  4864                           indf2	equ	0xFDF
  4865                           postinc2	equ	0xFDE
  4866                           fsr2h	equ	0xFDA
  4867                           fsr2l	equ	0xFD9
  4868                           status	equ	0xFD8
  4869                           
  4870 ;; *************** function _scroll_left_to_right *****************
  4871 ;; Defined at:
  4872 ;;		line 404 in file "clcd.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  clcd_display    2   43[COMRAM] PTR struct .
  4875 ;;		 -> clcd_display_string_details(1080), 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  line            1   53[COMRAM] unsigned char 
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  1    wreg      void 
  4880 ;; Registers used:
  4881 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4889 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;Total ram usage:       11 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    6
  4894 ;; This function calls:
  4895 ;;		_memcpy
  4896 ;;		_memset
  4897 ;; This function is called by:
  4898 ;;		_make_display
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           	psect	text10
  4903  001420                     __ptext10:
  4904                           	opt stack 0
  4905  001420                     _scroll_left_to_right:
  4906                           	opt stack 23
  4907                           
  4908                           ;clcd.c: 405: char line = -1;
  4909                           
  4910                           ;incstack = 0
  4911  001420  6836               	setf	scroll_left_to_right@line,c
  4912                           
  4913                           ;clcd.c: 406: if (clcd_display_string_details->start_row == 0)
  4914  001422  EE20 F02A          	lfsr	2,42
  4915  001426  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4916  001428  26D9               	addwf	fsr2l,f,c
  4917  00142A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4918  00142C  22DA               	addwfc	fsr2h,f,c
  4919  00142E  50DF               	movf	indf2,w,c
  4920  001430  0B7F               	andlw	127
  4921  001432  0900               	iorlw	0
  4922  001434  A4D8               	btfss	status,2,c
  4923  001436  D002               	goto	l5907
  4924                           
  4925                           ;clcd.c: 407: line = 0;
  4926  001438  0E00               	movlw	0
  4927  00143A  D00C               	goto	L2
  4928  00143C                     l5907:
  4929                           
  4930                           ;clcd.c: 408: else if (clcd_display_string_details->start_row == 1)
  4931  00143C  EE20 F02A          	lfsr	2,42
  4932  001440  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4933  001442  26D9               	addwf	fsr2l,f,c
  4934  001444  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4935  001446  22DA               	addwfc	fsr2h,f,c
  4936  001448  50DF               	movf	indf2,w,c
  4937  00144A  0B7F               	andlw	127
  4938  00144C  06E8               	decf	wreg,f,c
  4939  00144E  A4D8               	btfss	status,2,c
  4940  001450  D002               	goto	l5911
  4941                           
  4942                           ;clcd.c: 409: line = 1;
  4943  001452  0E01               	movlw	1
  4944  001454                     L2:
  4945  001454  6E36               	movwf	scroll_left_to_right@line,c
  4946  001456                     l5911:
  4947                           
  4948                           ;clcd.c: 410: if (clcd_display_string_details->start_row == 2)
  4949  001456  EE20 F02A          	lfsr	2,42
  4950  00145A  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4951  00145C  26D9               	addwf	fsr2l,f,c
  4952  00145E  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4953  001460  22DA               	addwfc	fsr2h,f,c
  4954  001462  50DF               	movf	indf2,w,c
  4955  001464  0B7F               	andlw	127
  4956  001466  0A02               	xorlw	2
  4957  001468  A4D8               	btfss	status,2,c
  4958  00146A  D002               	goto	l5915
  4959                           
  4960                           ;clcd.c: 411: line = 2;
  4961  00146C  0E02               	movlw	2
  4962  00146E  6E36               	movwf	scroll_left_to_right@line,c
  4963  001470                     l5915:
  4964                           
  4965                           ;clcd.c: 412: if (clcd_display_string_details->start_row == 3)
  4966  001470  EE20 F02A          	lfsr	2,42
  4967  001474  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4968  001476  26D9               	addwf	fsr2l,f,c
  4969  001478  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4970  00147A  22DA               	addwfc	fsr2h,f,c
  4971  00147C  50DF               	movf	indf2,w,c
  4972  00147E  0B7F               	andlw	127
  4973  001480  0A03               	xorlw	3
  4974  001482  A4D8               	btfss	status,2,c
  4975  001484  D002               	goto	l5919
  4976                           
  4977                           ;clcd.c: 413: line = 3;
  4978  001486  0E03               	movlw	3
  4979  001488  6E36               	movwf	scroll_left_to_right@line,c
  4980  00148A                     l5919:
  4981                           
  4982                           ;clcd.c: 415: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  4983                           ;clcd.c: 416: ' ', clcd_display_string_details->display_char_count);
  4984  00148A  5036               	movf	scroll_left_to_right@line,w,c
  4985  00148C  0D14               	mullw	20
  4986  00148E  0E00               	movlw	low _lcd_display_array
  4987  001490  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  4988  001492  0E01               	movlw	high _lcd_display_array
  4989  001494  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  4990  001496  50F3               	movf	prodl,w,c
  4991  001498  262E               	addwf	??_scroll_left_to_right,f,c
  4992  00149A  50F4               	movf	prodh,w,c
  4993  00149C  222F               	addwfc	??_scroll_left_to_right+1,f,c
  4994  00149E  EE20 F02B          	lfsr	2,43
  4995  0014A2  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4996  0014A4  26D9               	addwf	fsr2l,f,c
  4997  0014A6  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4998  0014A8  22DA               	addwfc	fsr2h,f,c
  4999  0014AA  50DF               	movf	indf2,w,c
  5000  0014AC  0B7F               	andlw	127
  5001  0014AE  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5002  0014B0  5030               	movf	??_scroll_left_to_right+2,w,c
  5003  0014B2  0D01               	mullw	1
  5004  0014B4  50F3               	movf	prodl,w,c
  5005  0014B6  242E               	addwf	??_scroll_left_to_right,w,c
  5006  0014B8  6E24               	movwf	memset@p1,c
  5007  0014BA  50F4               	movf	prodh,w,c
  5008  0014BC  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5009  0014BE  6E25               	movwf	memset@p1+1,c
  5010  0014C0  0E00               	movlw	0
  5011  0014C2  6E27               	movwf	memset@c+1,c
  5012  0014C4  0E20               	movlw	32
  5013  0014C6  6E26               	movwf	memset@c,c
  5014  0014C8  EE20 F031          	lfsr	2,49
  5015  0014CC  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5016  0014CE  26D9               	addwf	fsr2l,f,c
  5017  0014D0  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5018  0014D2  22DA               	addwfc	fsr2h,f,c
  5019  0014D4  50DF               	movf	indf2,w,c
  5020  0014D6  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5021  0014D8  5031               	movf	??_scroll_left_to_right+3,w,c
  5022  0014DA  6E28               	movwf	memset@n,c
  5023  0014DC  6A29               	clrf	memset@n+1,c
  5024  0014DE  ECA5  F01A         	call	_memset	;wreg free
  5025                           
  5026                           ;clcd.c: 418: if (clcd_display_string_details->length_count_for_right_scroll > clcd_disp
      +                          lay_string_details->display_char_count) {
  5027  0014E2  EE20 F031          	lfsr	2,49
  5028  0014E6  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5029  0014E8  26D9               	addwf	fsr2l,f,c
  5030  0014EA  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5031  0014EC  22DA               	addwfc	fsr2h,f,c
  5032  0014EE  50DF               	movf	indf2,w,c
  5033  0014F0  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5034  0014F2  EE20 F032          	lfsr	2,50
  5035  0014F6  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5036  0014F8  26D9               	addwf	fsr2l,f,c
  5037  0014FA  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5038  0014FC  22DA               	addwfc	fsr2h,f,c
  5039  0014FE  50DF               	movf	indf2,w,c
  5040  001500  0B7F               	andlw	127
  5041  001502  5C2E               	subwf	??_scroll_left_to_right,w,c
  5042  001504  B0D8               	btfsc	status,0,c
  5043  001506  D054               	goto	l5927
  5044                           
  5045                           ;clcd.c: 419: if (clcd_display_string_details->string[0] != (0)) {
  5046  001508  EE20 F001          	lfsr	2,1
  5047  00150C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5048  00150E  26D9               	addwf	fsr2l,f,c
  5049  001510  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5050  001512  22DA               	addwfc	fsr2h,f,c
  5051  001514  50DF               	movf	indf2,w,c
  5052  001516  B4D8               	btfsc	status,2,c
  5053  001518  D0A2               	goto	l5931
  5054                           
  5055                           ;clcd.c: 420: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  5056                           ;clcd.c: 421: clcd_display_string_details->string +
  5057                           ;clcd.c: 422: ((clcd_display_string_details->strlen - 1) - clcd_display_string_details->
      +                          length_decount_for_right_scroll),
  5058                           ;clcd.c: 423: clcd_display_string_details->display_char_count);
  5059  00151A  5036               	movf	scroll_left_to_right@line,w,c
  5060  00151C  0D14               	mullw	20
  5061  00151E  0E00               	movlw	low _lcd_display_array
  5062  001520  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5063  001522  0E01               	movlw	high _lcd_display_array
  5064  001524  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5065  001526  50F3               	movf	prodl,w,c
  5066  001528  262E               	addwf	??_scroll_left_to_right,f,c
  5067  00152A  50F4               	movf	prodh,w,c
  5068  00152C  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5069  00152E  EE20 F02B          	lfsr	2,43
  5070  001532  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5071  001534  26D9               	addwf	fsr2l,f,c
  5072  001536  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5073  001538  22DA               	addwfc	fsr2h,f,c
  5074  00153A  50DF               	movf	indf2,w,c
  5075  00153C  0B7F               	andlw	127
  5076  00153E  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5077  001540  5030               	movf	??_scroll_left_to_right+2,w,c
  5078  001542  0D01               	mullw	1
  5079  001544  50F3               	movf	prodl,w,c
  5080  001546  242E               	addwf	??_scroll_left_to_right,w,c
  5081  001548  6E10               	movwf	memcpy@d1,c
  5082  00154A  50F4               	movf	prodh,w,c
  5083  00154C  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5084  00154E  6E11               	movwf	memcpy@d1+1,c
  5085  001550  EE20 F033          	lfsr	2,51
  5086  001554  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5087  001556  26D9               	addwf	fsr2l,f,c
  5088  001558  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5089  00155A  22DA               	addwfc	fsr2h,f,c
  5090  00155C  50DF               	movf	indf2,w,c
  5091  00155E  0B7F               	andlw	127
  5092  001560  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5093  001562  6A32               	clrf	(??_scroll_left_to_right+4)& (0+255),c
  5094  001564  1E31               	comf	??_scroll_left_to_right+3,f,c
  5095  001566  1E32               	comf	??_scroll_left_to_right+4,f,c
  5096  001568  4A31               	infsnz	??_scroll_left_to_right+3,f,c
  5097  00156A  2A32               	incf	??_scroll_left_to_right+4,f,c
  5098  00156C  EE20 F029          	lfsr	2,41
  5099  001570  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5100  001572  26D9               	addwf	fsr2l,f,c
  5101  001574  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5102  001576  22DA               	addwfc	fsr2h,f,c
  5103  001578  50DF               	movf	indf2,w,c
  5104  00157A  0B7F               	andlw	127
  5105  00157C  6E33               	movwf	(??_scroll_left_to_right+5)& (0+255),c
  5106  00157E  6A34               	clrf	(??_scroll_left_to_right+6)& (0+255),c
  5107  001580  5031               	movf	??_scroll_left_to_right+3,w,c
  5108  001582  2633               	addwf	??_scroll_left_to_right+5,f,c
  5109  001584  5032               	movf	??_scroll_left_to_right+4,w,c
  5110  001586  2234               	addwfc	??_scroll_left_to_right+6,f,c
  5111  001588  5033               	movf	??_scroll_left_to_right+5,w,c
  5112  00158A  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5113  00158C  6E12               	movwf	memcpy@s1,c
  5114  00158E  5034               	movf	??_scroll_left_to_right+6,w,c
  5115  001590  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5116  001592  6E13               	movwf	memcpy@s1+1,c
  5117  001594  EE20 F031          	lfsr	2,49
  5118  001598  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5119  00159A  26D9               	addwf	fsr2l,f,c
  5120  00159C  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5121  00159E  22DA               	addwfc	fsr2h,f,c
  5122  0015A0  50DF               	movf	indf2,w,c
  5123  0015A2  6E35               	movwf	(??_scroll_left_to_right+7)& (0+255),c
  5124  0015A4  5035               	movf	??_scroll_left_to_right+7,w,c
  5125  0015A6  6E14               	movwf	memcpy@n,c
  5126  0015A8  6A15               	clrf	memcpy@n+1,c
  5127  0015AA  ECAF  F019         	call	_memcpy	;wreg free
  5128                           
  5129                           ;clcd.c: 424: }
  5130                           ;clcd.c: 425: } else {
  5131  0015AE  D057               	goto	l5931
  5132  0015B0                     l5927:
  5133                           
  5134                           ;clcd.c: 426: if (clcd_display_string_details->string[0] != (0)) {
  5135  0015B0  EE20 F001          	lfsr	2,1
  5136  0015B4  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5137  0015B6  26D9               	addwf	fsr2l,f,c
  5138  0015B8  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5139  0015BA  22DA               	addwfc	fsr2h,f,c
  5140  0015BC  50DF               	movf	indf2,w,c
  5141  0015BE  B4D8               	btfsc	status,2,c
  5142  0015C0  D04E               	goto	l5931
  5143                           
  5144                           ;clcd.c: 427: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col +
  5145                           ;clcd.c: 428: clcd_display_string_details->length_count_for_right_scroll,
  5146                           ;clcd.c: 429: clcd_display_string_details->string,
  5147                           ;clcd.c: 430: clcd_display_string_details->display_char_count - clcd_display_string_deta
      +                          ils->length_count_for_right_scroll);
  5148  0015C2  5036               	movf	scroll_left_to_right@line,w,c
  5149  0015C4  0D14               	mullw	20
  5150  0015C6  0E00               	movlw	low _lcd_display_array
  5151  0015C8  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5152  0015CA  0E01               	movlw	high _lcd_display_array
  5153  0015CC  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5154  0015CE  50F3               	movf	prodl,w,c
  5155  0015D0  262E               	addwf	??_scroll_left_to_right,f,c
  5156  0015D2  50F4               	movf	prodh,w,c
  5157  0015D4  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5158  0015D6  EE20 F02B          	lfsr	2,43
  5159  0015DA  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5160  0015DC  26D9               	addwf	fsr2l,f,c
  5161  0015DE  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5162  0015E0  22DA               	addwfc	fsr2h,f,c
  5163  0015E2  50DF               	movf	indf2,w,c
  5164  0015E4  0B7F               	andlw	127
  5165  0015E6  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5166  0015E8  5030               	movf	??_scroll_left_to_right+2,w,c
  5167  0015EA  0D01               	mullw	1
  5168  0015EC  50F3               	movf	prodl,w,c
  5169  0015EE  262E               	addwf	??_scroll_left_to_right,f,c
  5170  0015F0  50F4               	movf	prodh,w,c
  5171  0015F2  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5172  0015F4  EE20 F032          	lfsr	2,50
  5173  0015F8  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5174  0015FA  26D9               	addwf	fsr2l,f,c
  5175  0015FC  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5176  0015FE  22DA               	addwfc	fsr2h,f,c
  5177  001600  50DF               	movf	indf2,w,c
  5178  001602  0B7F               	andlw	127
  5179  001604  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5180  001606  5031               	movf	??_scroll_left_to_right+3,w,c
  5181  001608  0D01               	mullw	1
  5182  00160A  50F3               	movf	prodl,w,c
  5183  00160C  242E               	addwf	??_scroll_left_to_right,w,c
  5184  00160E  6E10               	movwf	memcpy@d1,c
  5185  001610  50F4               	movf	prodh,w,c
  5186  001612  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5187  001614  6E11               	movwf	memcpy@d1+1,c
  5188  001616  0E01               	movlw	1
  5189  001618  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5190  00161A  6E12               	movwf	memcpy@s1,c
  5191  00161C  0E00               	movlw	0
  5192  00161E  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5193  001620  6E13               	movwf	memcpy@s1+1,c
  5194  001622  EE20 F032          	lfsr	2,50
  5195  001626  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5196  001628  26D9               	addwf	fsr2l,f,c
  5197  00162A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5198  00162C  22DA               	addwfc	fsr2h,f,c
  5199  00162E  50DF               	movf	indf2,w,c
  5200  001630  0B7F               	andlw	127
  5201  001632  6E32               	movwf	(??_scroll_left_to_right+4)& (0+255),c
  5202  001634  6A33               	clrf	(??_scroll_left_to_right+5)& (0+255),c
  5203  001636  1E32               	comf	??_scroll_left_to_right+4,f,c
  5204  001638  1E33               	comf	??_scroll_left_to_right+5,f,c
  5205  00163A  4A32               	infsnz	??_scroll_left_to_right+4,f,c
  5206  00163C  2A33               	incf	??_scroll_left_to_right+5,f,c
  5207  00163E  EE20 F031          	lfsr	2,49
  5208  001642  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5209  001644  26D9               	addwf	fsr2l,f,c
  5210  001646  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5211  001648  22DA               	addwfc	fsr2h,f,c
  5212  00164A  50DF               	movf	indf2,w,c
  5213  00164C  6E34               	movwf	(??_scroll_left_to_right+6)& (0+255),c
  5214  00164E  5034               	movf	??_scroll_left_to_right+6,w,c
  5215  001650  2432               	addwf	??_scroll_left_to_right+4,w,c
  5216  001652  6E14               	movwf	memcpy@n,c
  5217  001654  0E00               	movlw	0
  5218  001656  2033               	addwfc	??_scroll_left_to_right+5,w,c
  5219  001658  6E15               	movwf	memcpy@n+1,c
  5220  00165A  ECAF  F019         	call	_memcpy	;wreg free
  5221  00165E                     l5931:
  5222                           
  5223                           ;clcd.c: 431: }
  5224                           ;clcd.c: 432: }
  5225                           ;clcd.c: 433: if (clcd_display_string_details->length_count_for_right_scroll <= clcd_dis
      +                          play_string_details->display_char_count) {
  5226  00165E  EE20 F032          	lfsr	2,50
  5227  001662  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5228  001664  26D9               	addwf	fsr2l,f,c
  5229  001666  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5230  001668  22DA               	addwfc	fsr2h,f,c
  5231  00166A  50DF               	movf	indf2,w,c
  5232  00166C  0B7F               	andlw	127
  5233  00166E  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5234  001670  EE20 F031          	lfsr	2,49
  5235  001674  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5236  001676  26D9               	addwf	fsr2l,f,c
  5237  001678  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5238  00167A  22DA               	addwfc	fsr2h,f,c
  5239  00167C  502E               	movf	??_scroll_left_to_right,w,c
  5240  00167E  5CDE               	subwf	postinc2,w,c
  5241  001680  A0D8               	btfss	status,0,c
  5242  001682  D013               	goto	l5935
  5243                           
  5244                           ;clcd.c: 434: clcd_display_string_details->length_count_for_right_scroll++;
  5245  001684  0E01               	movlw	1
  5246  001686  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5247  001688  EE20 F032          	lfsr	2,50
  5248  00168C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5249  00168E  26D9               	addwf	fsr2l,f,c
  5250  001690  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5251  001692  22DA               	addwfc	fsr2h,f,c
  5252  001694  50DF               	movf	indf2,w,c
  5253  001696  0B7F               	andlw	127
  5254  001698  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5255  00169A  502E               	movf	??_scroll_left_to_right,w,c
  5256  00169C  262F               	addwf	??_scroll_left_to_right+1,f,c
  5257  00169E  50DF               	movf	indf2,w,c
  5258  0016A0  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5259  0016A2  0B80               	andlw	-128
  5260  0016A4  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5261  0016A6  6EDF               	movwf	indf2,c
  5262                           
  5263                           ;clcd.c: 435: } else if (clcd_display_string_details->length_decount_for_right_scroll < 
      +                          clcd_display_string_details->strlen) {
  5264  0016A8  0012               	return	
  5265  0016AA                     l5935:
  5266  0016AA  EE20 F033          	lfsr	2,51
  5267  0016AE  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5268  0016B0  26D9               	addwf	fsr2l,f,c
  5269  0016B2  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5270  0016B4  22DA               	addwfc	fsr2h,f,c
  5271  0016B6  50DF               	movf	indf2,w,c
  5272  0016B8  0B7F               	andlw	127
  5273  0016BA  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5274  0016BC  EE20 F029          	lfsr	2,41
  5275  0016C0  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5276  0016C2  26D9               	addwf	fsr2l,f,c
  5277  0016C4  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5278  0016C6  22DA               	addwfc	fsr2h,f,c
  5279  0016C8  50DF               	movf	indf2,w,c
  5280  0016CA  0B7F               	andlw	127
  5281  0016CC  5C2E               	subwf	??_scroll_left_to_right,w,c
  5282  0016CE  B0D8               	btfsc	status,0,c
  5283  0016D0  0012               	return	
  5284                           
  5285                           ;clcd.c: 436: clcd_display_string_details->length_decount_for_right_scroll++;
  5286  0016D2  0E01               	movlw	1
  5287  0016D4  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5288  0016D6  EE20 F033          	lfsr	2,51
  5289  0016DA  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5290  0016DC  26D9               	addwf	fsr2l,f,c
  5291  0016DE  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5292  0016E0  22DA               	addwfc	fsr2h,f,c
  5293  0016E2  50DF               	movf	indf2,w,c
  5294  0016E4  0B7F               	andlw	127
  5295  0016E6  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5296  0016E8  502E               	movf	??_scroll_left_to_right,w,c
  5297  0016EA  262F               	addwf	??_scroll_left_to_right+1,f,c
  5298  0016EC  50DF               	movf	indf2,w,c
  5299  0016EE  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5300  0016F0  0B80               	andlw	-128
  5301  0016F2  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5302  0016F4  6EDF               	movwf	indf2,c
  5303                           
  5304                           ;clcd.c: 437: if (clcd_display_string_details->length_decount_for_right_scroll >= clcd_d
      +                          isplay_string_details->strlen) {
  5305  0016F6  EE20 F029          	lfsr	2,41
  5306  0016FA  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5307  0016FC  26D9               	addwf	fsr2l,f,c
  5308  0016FE  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5309  001700  22DA               	addwfc	fsr2h,f,c
  5310  001702  50DF               	movf	indf2,w,c
  5311  001704  0B7F               	andlw	127
  5312  001706  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5313  001708  EE20 F033          	lfsr	2,51
  5314  00170C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5315  00170E  26D9               	addwf	fsr2l,f,c
  5316  001710  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5317  001712  22DA               	addwfc	fsr2h,f,c
  5318  001714  50DF               	movf	indf2,w,c
  5319  001716  0B7F               	andlw	127
  5320  001718  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5321  00171A  502E               	movf	??_scroll_left_to_right,w,c
  5322  00171C  5C2F               	subwf	??_scroll_left_to_right+1,w,c
  5323  00171E  A0D8               	btfss	status,0,c
  5324  001720  0012               	return	
  5325                           
  5326                           ;clcd.c: 438: clcd_display_string_details->length_count_for_right_scroll = 0;
  5327  001722  EE20 F032          	lfsr	2,50
  5328  001726  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5329  001728  26D9               	addwf	fsr2l,f,c
  5330  00172A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5331  00172C  22DA               	addwfc	fsr2h,f,c
  5332  00172E  90DF               	bcf	indf2,0,c
  5333  001730  92DF               	bcf	indf2,1,c
  5334  001732  94DF               	bcf	indf2,2,c
  5335  001734  96DF               	bcf	indf2,3,c
  5336  001736  98DF               	bcf	indf2,4,c
  5337  001738  9ADF               	bcf	indf2,5,c
  5338  00173A  9CDF               	bcf	indf2,6,c
  5339                           
  5340                           ;clcd.c: 439: clcd_display_string_details->length_decount_for_right_scroll = 0;
  5341  00173C  EE20 F033          	lfsr	2,51
  5342  001740  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5343  001742  26D9               	addwf	fsr2l,f,c
  5344  001744  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5345  001746  22DA               	addwfc	fsr2h,f,c
  5346  001748  90DF               	bcf	indf2,0,c
  5347  00174A  92DF               	bcf	indf2,1,c
  5348  00174C  94DF               	bcf	indf2,2,c
  5349  00174E  96DF               	bcf	indf2,3,c
  5350  001750  98DF               	bcf	indf2,4,c
  5351  001752  9ADF               	bcf	indf2,5,c
  5352  001754  9CDF               	bcf	indf2,6,c
  5353  001756  0012               	return	
  5354  001758                     __end_of_scroll_left_to_right:
  5355                           	opt stack 0
  5356                           tblptru	equ	0xFF8
  5357                           tblptrh	equ	0xFF7
  5358                           tblptrl	equ	0xFF6
  5359                           tablat	equ	0xFF5
  5360                           prodh	equ	0xFF4
  5361                           prodl	equ	0xFF3
  5362                           intcon	equ	0xFF2
  5363                           postinc0	equ	0xFEE
  5364                           wreg	equ	0xFE8
  5365                           indf1	equ	0xFE7
  5366                           postdec1	equ	0xFE5
  5367                           fsr1h	equ	0xFE2
  5368                           fsr1l	equ	0xFE1
  5369                           indf2	equ	0xFDF
  5370                           postinc2	equ	0xFDE
  5371                           fsr2h	equ	0xFDA
  5372                           fsr2l	equ	0xFD9
  5373                           status	equ	0xFD8
  5374                           
  5375 ;; *************** function _display_text *****************
  5376 ;; Defined at:
  5377 ;;		line 574 in file "clcd.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;		None
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;		None
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;Total ram usage:        0 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:    8
  5398 ;; This function calls:
  5399 ;;		_char_enter_mode_left_to_right
  5400 ;;		_set_cursor
  5401 ;;		_write_lcd_cmd
  5402 ;;		_write_str
  5403 ;; This function is called by:
  5404 ;;		_make_display
  5405 ;;		_display_screen
  5406 ;; This function uses a non-reentrant model
  5407 ;;
  5408                           
  5409                           	psect	text11
  5410  002D00                     __ptext11:
  5411                           	opt stack 0
  5412  002D00                     _display_text:
  5413                           	opt stack 21
  5414                           
  5415                           ;clcd.c: 575: if (print_data_ready == 1) {
  5416                           
  5417                           ;incstack = 0
  5418  002D00  0100               	movlb	0	; () banked
  5419  002D02  0576               	decf	_print_data_ready& (0+255),w,b
  5420  002D04  0100               	movlb	0	; () banked
  5421  002D06  1177               	iorwf	(_print_data_ready+1)& (0+255),w,b
  5422  002D08  A4D8               	btfss	status,2,c
  5423  002D0A  D037               	goto	l6037
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;clcd.c: 576: write_lcd_cmd(0x01);;
  5427  002D0C  0E01               	movlw	1
  5428  002D0E  EC66  F01B         	call	_write_lcd_cmd
  5429                           
  5430                           ;clcd.c: 577: char_enter_mode_left_to_right();
  5431  002D12  ECFE  F01B         	call	_char_enter_mode_left_to_right	;wreg free
  5432                           
  5433                           ;clcd.c: 578: set_cursor(0x80, 0);
  5434  002D16  0E00               	movlw	0
  5435  002D18  6E18               	movwf	set_cursor@col_number,c
  5436  002D1A  0E80               	movlw	128
  5437  002D1C  EC82  F01B         	call	_set_cursor
  5438                           
  5439                           ;clcd.c: 579: write_str(lcd_display_array[0]);
  5440  002D20  0E00               	movlw	low _lcd_display_array
  5441  002D22  6E18               	movwf	write_str@str,c
  5442  002D24  0E01               	movlw	high _lcd_display_array
  5443  002D26  6E19               	movwf	write_str@str+1,c
  5444  002D28  ECEE  F019         	call	_write_str	;wreg free
  5445                           
  5446                           ;clcd.c: 580: set_cursor(0xC0, 0);
  5447  002D2C  0E00               	movlw	0
  5448  002D2E  6E18               	movwf	set_cursor@col_number,c
  5449  002D30  0EC0               	movlw	192
  5450  002D32  EC82  F01B         	call	_set_cursor
  5451                           
  5452                           ;clcd.c: 581: write_str(lcd_display_array[1]);
  5453  002D36  0E14               	movlw	low (_lcd_display_array+20)
  5454  002D38  6E18               	movwf	write_str@str,c
  5455  002D3A  0E01               	movlw	high (_lcd_display_array+20)
  5456  002D3C  6E19               	movwf	write_str@str+1,c
  5457  002D3E  ECEE  F019         	call	_write_str	;wreg free
  5458                           
  5459                           ;clcd.c: 582: set_cursor(0x94, 0);
  5460  002D42  0E00               	movlw	0
  5461  002D44  6E18               	movwf	set_cursor@col_number,c
  5462  002D46  0E94               	movlw	148
  5463  002D48  EC82  F01B         	call	_set_cursor
  5464                           
  5465                           ;clcd.c: 583: write_str(lcd_display_array[2]);
  5466  002D4C  0E28               	movlw	low (_lcd_display_array+40)
  5467  002D4E  6E18               	movwf	write_str@str,c
  5468  002D50  0E01               	movlw	high (_lcd_display_array+40)
  5469  002D52  6E19               	movwf	write_str@str+1,c
  5470  002D54  ECEE  F019         	call	_write_str	;wreg free
  5471                           
  5472                           ;clcd.c: 584: set_cursor(0xD4, 0);
  5473  002D58  0E00               	movlw	0
  5474  002D5A  6E18               	movwf	set_cursor@col_number,c
  5475  002D5C  0ED4               	movlw	212
  5476  002D5E  EC82  F01B         	call	_set_cursor
  5477                           
  5478                           ;clcd.c: 585: write_str(lcd_display_array[3]);
  5479  002D62  0E3C               	movlw	low (_lcd_display_array+60)
  5480  002D64  6E18               	movwf	write_str@str,c
  5481  002D66  0E01               	movlw	high (_lcd_display_array+60)
  5482  002D68  6E19               	movwf	write_str@str+1,c
  5483  002D6A  ECEE  F019         	call	_write_str	;wreg free
  5484                           
  5485                           ;clcd.c: 586: print_data_ready = 0;
  5486  002D6E  0E00               	movlw	0
  5487  002D70  0100               	movlb	0	; () banked
  5488  002D72  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5489  002D74  0E00               	movlw	0
  5490  002D76  6F76               	movwf	_print_data_ready& (0+255),b
  5491                           
  5492                           ;clcd.c: 587: } else {
  5493  002D78  0012               	return	
  5494  002D7A                     l6037:
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;clcd.c: 588: print_data_ready = 0;
  5498  002D7A  0E00               	movlw	0
  5499  002D7C  0100               	movlb	0	; () banked
  5500  002D7E  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5501  002D80  0E00               	movlw	0
  5502  002D82  6F76               	movwf	_print_data_ready& (0+255),b
  5503  002D84  0012               	return	
  5504  002D86                     __end_of_display_text:
  5505                           	opt stack 0
  5506                           tblptru	equ	0xFF8
  5507                           tblptrh	equ	0xFF7
  5508                           tblptrl	equ	0xFF6
  5509                           tablat	equ	0xFF5
  5510                           prodh	equ	0xFF4
  5511                           prodl	equ	0xFF3
  5512                           intcon	equ	0xFF2
  5513                           postinc0	equ	0xFEE
  5514                           wreg	equ	0xFE8
  5515                           indf1	equ	0xFE7
  5516                           postdec1	equ	0xFE5
  5517                           fsr1h	equ	0xFE2
  5518                           fsr1l	equ	0xFE1
  5519                           indf2	equ	0xFDF
  5520                           postinc2	equ	0xFDE
  5521                           fsr2h	equ	0xFDA
  5522                           fsr2l	equ	0xFD9
  5523                           status	equ	0xFD8
  5524                           
  5525 ;; *************** function _set_cursor *****************
  5526 ;; Defined at:
  5527 ;;		line 223 in file "clcd.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  row_number      1    wreg     unsigned char 
  5530 ;;  col_number      1   23[COMRAM] unsigned char 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  row_number      1   24[COMRAM] unsigned char 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  1    wreg      void 
  5535 ;; Registers used:
  5536 ;;		wreg, status,2, status,0, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5542 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;Total ram usage:        2 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    7
  5549 ;; This function calls:
  5550 ;;		_write_lcd_cmd
  5551 ;; This function is called by:
  5552 ;;		_display_text
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           	psect	text12
  5557  003704                     __ptext12:
  5558                           	opt stack 0
  5559  003704                     _set_cursor:
  5560                           	opt stack 21
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;incstack = 0
  5564                           ;set_cursor@row_number stored from wreg
  5565  003704  6E19               	movwf	set_cursor@row_number,c
  5566                           
  5567                           ;clcd.c: 224: if (col_number > 20) {
  5568  003706  0E14               	movlw	20
  5569  003708  6418               	cpfsgt	set_cursor@col_number,c
  5570  00370A  D002               	goto	l5849
  5571                           
  5572                           ;clcd.c: 225: col_number = 0;
  5573  00370C  0E00               	movlw	0
  5574  00370E  6E18               	movwf	set_cursor@col_number,c
  5575  003710                     l5849:
  5576                           
  5577                           ;clcd.c: 226: }
  5578                           ;clcd.c: 227: write_lcd_cmd(col_number + row_number);
  5579  003710  5018               	movf	set_cursor@col_number,w,c
  5580  003712  2419               	addwf	set_cursor@row_number,w,c
  5581  003714  EC66  F01B         	call	_write_lcd_cmd
  5582  003718  0012               	return		;funcret
  5583  00371A                     __end_of_set_cursor:
  5584                           	opt stack 0
  5585                           tblptru	equ	0xFF8
  5586                           tblptrh	equ	0xFF7
  5587                           tblptrl	equ	0xFF6
  5588                           tablat	equ	0xFF5
  5589                           prodh	equ	0xFF4
  5590                           prodl	equ	0xFF3
  5591                           intcon	equ	0xFF2
  5592                           postinc0	equ	0xFEE
  5593                           wreg	equ	0xFE8
  5594                           indf1	equ	0xFE7
  5595                           postdec1	equ	0xFE5
  5596                           fsr1h	equ	0xFE2
  5597                           fsr1l	equ	0xFE1
  5598                           indf2	equ	0xFDF
  5599                           postinc2	equ	0xFDE
  5600                           fsr2h	equ	0xFDA
  5601                           fsr2l	equ	0xFD9
  5602                           status	equ	0xFD8
  5603                           
  5604 ;; *************** function _char_enter_mode_left_to_right *****************
  5605 ;; Defined at:
  5606 ;;		line 264 in file "clcd.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;		None
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;		None
  5611 ;; Return value:  Size  Location     Type
  5612 ;;                  1    wreg      void 
  5613 ;; Registers used:
  5614 ;;		wreg, status,2, status,0, cstack
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;Total ram usage:        0 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    7
  5627 ;; This function calls:
  5628 ;;		_write_lcd_cmd
  5629 ;; This function is called by:
  5630 ;;		_display_text
  5631 ;; This function uses a non-reentrant model
  5632 ;;
  5633                           
  5634                           	psect	text13
  5635  0037FC                     __ptext13:
  5636                           	opt stack 0
  5637  0037FC                     _char_enter_mode_left_to_right:
  5638                           	opt stack 21
  5639                           
  5640                           ;clcd.c: 268: write_lcd_cmd(0x06);
  5641                           
  5642                           ;incstack = 0
  5643  0037FC  0E06               	movlw	6
  5644  0037FE  EC66  F01B         	call	_write_lcd_cmd
  5645  003802  0012               	return		;funcret
  5646  003804                     __end_of_char_enter_mode_left_to_right:
  5647                           	opt stack 0
  5648                           tblptru	equ	0xFF8
  5649                           tblptrh	equ	0xFF7
  5650                           tblptrl	equ	0xFF6
  5651                           tablat	equ	0xFF5
  5652                           prodh	equ	0xFF4
  5653                           prodl	equ	0xFF3
  5654                           intcon	equ	0xFF2
  5655                           postinc0	equ	0xFEE
  5656                           wreg	equ	0xFE8
  5657                           indf1	equ	0xFE7
  5658                           postdec1	equ	0xFE5
  5659                           fsr1h	equ	0xFE2
  5660                           fsr1l	equ	0xFE1
  5661                           indf2	equ	0xFDF
  5662                           postinc2	equ	0xFDE
  5663                           fsr2h	equ	0xFDA
  5664                           fsr2l	equ	0xFD9
  5665                           status	equ	0xFD8
  5666                           
  5667 ;; *************** function _copy_data *****************
  5668 ;; Defined at:
  5669 ;;		line 120 in file "clcd.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;  clcd_str_dat    2   53[COMRAM] PTR struct .
  5672 ;;		 -> clcd_display_string_details(1080), 
  5673 ;;  data            2   55[COMRAM] PTR struct .
  5674 ;;		 -> cmd_data(49), 
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;  col2            1    0        unsigned char 
  5677 ;;  row2            1    0        unsigned char 
  5678 ;;  col1            1    0        unsigned char 
  5679 ;;  row1            1    0        unsigned char 
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  1    wreg      void 
  5682 ;; Registers used:
  5683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5689 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;Total ram usage:        6 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:    8
  5696 ;; This function calls:
  5697 ;;		_printf
  5698 ;;		_strcpy
  5699 ;;		_strlen
  5700 ;; This function is called by:
  5701 ;;		_update_string_data
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           	psect	text14
  5706  001C4C                     __ptext14:
  5707                           	opt stack 0
  5708  001C4C                     _copy_data:
  5709                           	opt stack 19
  5710                           
  5711                           ;clcd.c: 121: char row1, col1, row2, col2;
  5712                           ;clcd.c: 122: clcd_str_data->uid = data->uid;
  5713                           
  5714                           ;incstack = 0
  5715  001C4C  C038  FFD9         	movff	copy_data@data,fsr2l
  5716  001C50  C039  FFDA         	movff	copy_data@data+1,fsr2h
  5717  001C54  50DF               	movf	indf2,w,c
  5718  001C56  6E3A               	movwf	??_copy_data& (0+255),c
  5719  001C58  C036  FFD9         	movff	copy_data@clcd_str_data,fsr2l
  5720  001C5C  C037  FFDA         	movff	copy_data@clcd_str_data+1,fsr2h
  5721  001C60  50DF               	movf	indf2,w,c
  5722  001C62  183A               	xorwf	??_copy_data,w,c
  5723  001C64  0B80               	andlw	-128
  5724  001C66  183A               	xorwf	??_copy_data,w,c
  5725  001C68  6EDF               	movwf	indf2,c
  5726                           
  5727                           ;clcd.c: 123: strcpy(clcd_str_data->string, data->data);
  5728  001C6A  0E01               	movlw	1
  5729  001C6C  2436               	addwf	copy_data@clcd_str_data,w,c
  5730  001C6E  6E10               	movwf	strcpy@to,c
  5731  001C70  0E00               	movlw	0
  5732  001C72  2037               	addwfc	copy_data@clcd_str_data+1,w,c
  5733  001C74  6E11               	movwf	strcpy@to+1,c
  5734  001C76  0E01               	movlw	1
  5735  001C78  2438               	addwf	copy_data@data,w,c
  5736  001C7A  6E12               	movwf	strcpy@from,c
  5737  001C7C  0E00               	movlw	0
  5738  001C7E  2039               	addwfc	copy_data@data+1,w,c
  5739  001C80  6E13               	movwf	strcpy@from+1,c
  5740  001C82  EC49  F019         	call	_strcpy	;wreg free
  5741                           
  5742                           ;clcd.c: 124: clcd_str_data->strlen = strlen(clcd_str_data->string);
  5743  001C86  0E01               	movlw	1
  5744  001C88  2436               	addwf	copy_data@clcd_str_data,w,c
  5745  001C8A  6E1E               	movwf	strlen@s,c
  5746  001C8C  0E00               	movlw	0
  5747  001C8E  2037               	addwfc	copy_data@clcd_str_data+1,w,c
  5748  001C90  6E1F               	movwf	strlen@s+1,c
  5749  001C92  EC37  F018         	call	_strlen	;wreg free
  5750  001C96  EE20 F029          	lfsr	2,41
  5751  001C9A  5036               	movf	copy_data@clcd_str_data,w,c
  5752  001C9C  26D9               	addwf	fsr2l,f,c
  5753  001C9E  5037               	movf	copy_data@clcd_str_data+1,w,c
  5754  001CA0  22DA               	addwfc	fsr2h,f,c
  5755  001CA2  50DF               	movf	indf2,w,c
  5756  001CA4  181E               	xorwf	?_strlen,w,c
  5757  001CA6  0B80               	andlw	-128
  5758  001CA8  181E               	xorwf	?_strlen,w,c
  5759  001CAA  6EDF               	movwf	indf2,c
  5760                           
  5761                           ;clcd.c: 125: clcd_str_data->start_row = data->start_row;
  5762  001CAC  EE20 F02A          	lfsr	2,42
  5763  001CB0  5038               	movf	copy_data@data,w,c
  5764  001CB2  26D9               	addwf	fsr2l,f,c
  5765  001CB4  5039               	movf	copy_data@data+1,w,c
  5766  001CB6  22DA               	addwfc	fsr2h,f,c
  5767  001CB8  50DF               	movf	indf2,w,c
  5768  001CBA  6E3A               	movwf	??_copy_data& (0+255),c
  5769  001CBC  EE20 F02A          	lfsr	2,42
  5770  001CC0  5036               	movf	copy_data@clcd_str_data,w,c
  5771  001CC2  26D9               	addwf	fsr2l,f,c
  5772  001CC4  5037               	movf	copy_data@clcd_str_data+1,w,c
  5773  001CC6  22DA               	addwfc	fsr2h,f,c
  5774  001CC8  50DF               	movf	indf2,w,c
  5775  001CCA  183A               	xorwf	??_copy_data,w,c
  5776  001CCC  0B80               	andlw	-128
  5777  001CCE  183A               	xorwf	??_copy_data,w,c
  5778  001CD0  6EDF               	movwf	indf2,c
  5779                           
  5780                           ;clcd.c: 126: clcd_str_data->start_col = data->start_col;
  5781  001CD2  EE20 F02B          	lfsr	2,43
  5782  001CD6  5038               	movf	copy_data@data,w,c
  5783  001CD8  26D9               	addwf	fsr2l,f,c
  5784  001CDA  5039               	movf	copy_data@data+1,w,c
  5785  001CDC  22DA               	addwfc	fsr2h,f,c
  5786  001CDE  50DF               	movf	indf2,w,c
  5787  001CE0  6E3A               	movwf	??_copy_data& (0+255),c
  5788  001CE2  EE20 F02B          	lfsr	2,43
  5789  001CE6  5036               	movf	copy_data@clcd_str_data,w,c
  5790  001CE8  26D9               	addwf	fsr2l,f,c
  5791  001CEA  5037               	movf	copy_data@clcd_str_data+1,w,c
  5792  001CEC  22DA               	addwfc	fsr2h,f,c
  5793  001CEE  50DF               	movf	indf2,w,c
  5794  001CF0  183A               	xorwf	??_copy_data,w,c
  5795  001CF2  0B80               	andlw	-128
  5796  001CF4  183A               	xorwf	??_copy_data,w,c
  5797  001CF6  6EDF               	movwf	indf2,c
  5798                           
  5799                           ;clcd.c: 127: clcd_str_data->end_row = data->end_row;
  5800  001CF8  EE20 F02C          	lfsr	2,44
  5801  001CFC  5038               	movf	copy_data@data,w,c
  5802  001CFE  26D9               	addwf	fsr2l,f,c
  5803  001D00  5039               	movf	copy_data@data+1,w,c
  5804  001D02  22DA               	addwfc	fsr2h,f,c
  5805  001D04  50DF               	movf	indf2,w,c
  5806  001D06  6E3A               	movwf	??_copy_data& (0+255),c
  5807  001D08  EE20 F02D          	lfsr	2,45
  5808  001D0C  5036               	movf	copy_data@clcd_str_data,w,c
  5809  001D0E  26D9               	addwf	fsr2l,f,c
  5810  001D10  5037               	movf	copy_data@clcd_str_data+1,w,c
  5811  001D12  22DA               	addwfc	fsr2h,f,c
  5812  001D14  50DF               	movf	indf2,w,c
  5813  001D16  183A               	xorwf	??_copy_data,w,c
  5814  001D18  0B80               	andlw	-128
  5815  001D1A  183A               	xorwf	??_copy_data,w,c
  5816  001D1C  6EDF               	movwf	indf2,c
  5817                           
  5818                           ;clcd.c: 128: clcd_str_data->end_col = data->end_col;
  5819  001D1E  EE20 F02D          	lfsr	2,45
  5820  001D22  5038               	movf	copy_data@data,w,c
  5821  001D24  26D9               	addwf	fsr2l,f,c
  5822  001D26  5039               	movf	copy_data@data+1,w,c
  5823  001D28  22DA               	addwfc	fsr2h,f,c
  5824  001D2A  50DF               	movf	indf2,w,c
  5825  001D2C  6E3A               	movwf	??_copy_data& (0+255),c
  5826  001D2E  EE20 F02E          	lfsr	2,46
  5827  001D32  5036               	movf	copy_data@clcd_str_data,w,c
  5828  001D34  26D9               	addwf	fsr2l,f,c
  5829  001D36  5037               	movf	copy_data@clcd_str_data+1,w,c
  5830  001D38  22DA               	addwfc	fsr2h,f,c
  5831  001D3A  50DF               	movf	indf2,w,c
  5832  001D3C  183A               	xorwf	??_copy_data,w,c
  5833  001D3E  0B80               	andlw	-128
  5834  001D40  183A               	xorwf	??_copy_data,w,c
  5835  001D42  6EDF               	movwf	indf2,c
  5836                           
  5837                           ;clcd.c: 129: clcd_str_data->start_point = (clcd_str_data->start_row * clcd_config_data.
      +                          clcd_max_col) + clcd_str_data->start_col;
  5838  001D44  EE20 F02B          	lfsr	2,43
  5839  001D48  5036               	movf	copy_data@clcd_str_data,w,c
  5840  001D4A  26D9               	addwf	fsr2l,f,c
  5841  001D4C  5037               	movf	copy_data@clcd_str_data+1,w,c
  5842  001D4E  22DA               	addwfc	fsr2h,f,c
  5843  001D50  50DF               	movf	indf2,w,c
  5844  001D52  0B7F               	andlw	127
  5845  001D54  6E3A               	movwf	??_copy_data& (0+255),c
  5846  001D56  EE20 F02A          	lfsr	2,42
  5847  001D5A  5036               	movf	copy_data@clcd_str_data,w,c
  5848  001D5C  26D9               	addwf	fsr2l,f,c
  5849  001D5E  5037               	movf	copy_data@clcd_str_data+1,w,c
  5850  001D60  22DA               	addwfc	fsr2h,f,c
  5851  001D62  50DF               	movf	indf2,w,c
  5852  001D64  0B7F               	andlw	127
  5853  001D66  024B               	mulwf	_clcd_config_data+2,c
  5854  001D68  50F3               	movf	prodl,w,c
  5855  001D6A  243A               	addwf	??_copy_data,w,c
  5856  001D6C  6E3B               	movwf	(??_copy_data+1)& (0+255),c
  5857  001D6E  EE20 F02C          	lfsr	2,44
  5858  001D72  5036               	movf	copy_data@clcd_str_data,w,c
  5859  001D74  26D9               	addwf	fsr2l,f,c
  5860  001D76  5037               	movf	copy_data@clcd_str_data+1,w,c
  5861  001D78  22DA               	addwfc	fsr2h,f,c
  5862  001D7A  50DF               	movf	indf2,w,c
  5863  001D7C  183B               	xorwf	??_copy_data+1,w,c
  5864  001D7E  0B80               	andlw	-128
  5865  001D80  183B               	xorwf	??_copy_data+1,w,c
  5866  001D82  6EDF               	movwf	indf2,c
  5867                           
  5868                           ;clcd.c: 130: clcd_str_data->end_point = (clcd_str_data->end_row * clcd_config_data.clcd
      +                          _max_col) + clcd_str_data->end_col;
  5869  001D84  EE20 F02E          	lfsr	2,46
  5870  001D88  5036               	movf	copy_data@clcd_str_data,w,c
  5871  001D8A  26D9               	addwf	fsr2l,f,c
  5872  001D8C  5037               	movf	copy_data@clcd_str_data+1,w,c
  5873  001D8E  22DA               	addwfc	fsr2h,f,c
  5874  001D90  50DF               	movf	indf2,w,c
  5875  001D92  0B7F               	andlw	127
  5876  001D94  6E3A               	movwf	??_copy_data& (0+255),c
  5877  001D96  EE20 F02D          	lfsr	2,45
  5878  001D9A  5036               	movf	copy_data@clcd_str_data,w,c
  5879  001D9C  26D9               	addwf	fsr2l,f,c
  5880  001D9E  5037               	movf	copy_data@clcd_str_data+1,w,c
  5881  001DA0  22DA               	addwfc	fsr2h,f,c
  5882  001DA2  50DF               	movf	indf2,w,c
  5883  001DA4  0B7F               	andlw	127
  5884  001DA6  024B               	mulwf	_clcd_config_data+2,c
  5885  001DA8  50F3               	movf	prodl,w,c
  5886  001DAA  243A               	addwf	??_copy_data,w,c
  5887  001DAC  6E3B               	movwf	(??_copy_data+1)& (0+255),c
  5888  001DAE  EE20 F02F          	lfsr	2,47
  5889  001DB2  5036               	movf	copy_data@clcd_str_data,w,c
  5890  001DB4  26D9               	addwf	fsr2l,f,c
  5891  001DB6  5037               	movf	copy_data@clcd_str_data+1,w,c
  5892  001DB8  22DA               	addwfc	fsr2h,f,c
  5893  001DBA  50DF               	movf	indf2,w,c
  5894  001DBC  183B               	xorwf	??_copy_data+1,w,c
  5895  001DBE  0B80               	andlw	-128
  5896  001DC0  183B               	xorwf	??_copy_data+1,w,c
  5897  001DC2  6EDF               	movwf	indf2,c
  5898                           
  5899                           ;clcd.c: 131: clcd_str_data->direction = data->scroll;
  5900  001DC4  EE20 F02F          	lfsr	2,47
  5901  001DC8  5038               	movf	copy_data@data,w,c
  5902  001DCA  26D9               	addwf	fsr2l,f,c
  5903  001DCC  5039               	movf	copy_data@data+1,w,c
  5904  001DCE  22DA               	addwfc	fsr2h,f,c
  5905  001DD0  50DF               	movf	indf2,w,c
  5906  001DD2  6E3A               	movwf	??_copy_data& (0+255),c
  5907  001DD4  EE20 F030          	lfsr	2,48
  5908  001DD8  5036               	movf	copy_data@clcd_str_data,w,c
  5909  001DDA  26D9               	addwf	fsr2l,f,c
  5910  001DDC  5037               	movf	copy_data@clcd_str_data+1,w,c
  5911  001DDE  22DA               	addwfc	fsr2h,f,c
  5912  001DE0  50DF               	movf	indf2,w,c
  5913  001DE2  183A               	xorwf	??_copy_data,w,c
  5914  001DE4  0BF8               	andlw	-8
  5915  001DE6  183A               	xorwf	??_copy_data,w,c
  5916  001DE8  6EDF               	movwf	indf2,c
  5917                           
  5918                           ;clcd.c: 132: clcd_str_data->display_char_count = (clcd_str_data->end_point - clcd_str_d
      +                          ata->start_point)+1;
  5919  001DEA  EE20 F031          	lfsr	2,49
  5920  001DEE  5036               	movf	copy_data@clcd_str_data,w,c
  5921  001DF0  26D9               	addwf	fsr2l,f,c
  5922  001DF2  5037               	movf	copy_data@clcd_str_data+1,w,c
  5923  001DF4  22DA               	addwfc	fsr2h,f,c
  5924  001DF6  EE10 F02F          	lfsr	1,47
  5925  001DFA  5036               	movf	copy_data@clcd_str_data,w,c
  5926  001DFC  26E1               	addwf	fsr1l,f,c
  5927  001DFE  5037               	movf	copy_data@clcd_str_data+1,w,c
  5928  001E00  22E2               	addwfc	fsr1h,f,c
  5929  001E02  50E7               	movf	indf1,w,c
  5930  001E04  0B7F               	andlw	127
  5931  001E06  6E3A               	movwf	??_copy_data& (0+255),c
  5932  001E08  EE10 F02C          	lfsr	1,44
  5933  001E0C  5036               	movf	copy_data@clcd_str_data,w,c
  5934  001E0E  26E1               	addwf	fsr1l,f,c
  5935  001E10  5037               	movf	copy_data@clcd_str_data+1,w,c
  5936  001E12  22E2               	addwfc	fsr1h,f,c
  5937  001E14  50E7               	movf	indf1,w,c
  5938  001E16  0B7F               	andlw	127
  5939  001E18  0800               	sublw	0
  5940  001E1A  243A               	addwf	??_copy_data,w,c
  5941  001E1C  6E3B               	movwf	(??_copy_data+1)& (0+255),c
  5942  001E1E  283B               	incf	??_copy_data+1,w,c
  5943  001E20  6EDF               	movwf	indf2,c
  5944                           
  5945                           ;clcd.c: 133: printf("display_char_count = %d\r\n", clcd_str_data->display_char_count);
  5946  001E22  0E4C               	movlw	low STR_6
  5947  001E24  6E24               	movwf	printf@f,c
  5948  001E26  0EFD               	movlw	high STR_6
  5949  001E28  6E25               	movwf	printf@f+1,c
  5950  001E2A  EE20 F031          	lfsr	2,49
  5951  001E2E  5036               	movf	copy_data@clcd_str_data,w,c
  5952  001E30  26D9               	addwf	fsr2l,f,c
  5953  001E32  5037               	movf	copy_data@clcd_str_data+1,w,c
  5954  001E34  22DA               	addwfc	fsr2h,f,c
  5955  001E36  50DF               	movf	indf2,w,c
  5956  001E38  6E3A               	movwf	??_copy_data& (0+255),c
  5957  001E3A  503A               	movf	??_copy_data,w,c
  5958  001E3C  6E26               	movwf	?_printf+2,c
  5959  001E3E  6A27               	clrf	?_printf+3,c
  5960  001E40  EC02  F011         	call	_printf	;wreg free
  5961  001E44  0012               	return		;funcret
  5962  001E46                     __end_of_copy_data:
  5963                           	opt stack 0
  5964                           tblptru	equ	0xFF8
  5965                           tblptrh	equ	0xFF7
  5966                           tblptrl	equ	0xFF6
  5967                           tablat	equ	0xFF5
  5968                           prodh	equ	0xFF4
  5969                           prodl	equ	0xFF3
  5970                           intcon	equ	0xFF2
  5971                           postinc0	equ	0xFEE
  5972                           wreg	equ	0xFE8
  5973                           indf1	equ	0xFE7
  5974                           postdec1	equ	0xFE5
  5975                           fsr1h	equ	0xFE2
  5976                           fsr1l	equ	0xFE1
  5977                           indf2	equ	0xFDF
  5978                           postinc2	equ	0xFDE
  5979                           fsr2h	equ	0xFDA
  5980                           fsr2l	equ	0xFD9
  5981                           status	equ	0xFD8
  5982                           
  5983 ;; *************** function _conflict_check *****************
  5984 ;; Defined at:
  5985 ;;		line 136 in file "clcd.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;  exist_uid_id    1    wreg     unsigned char 
  5988 ;;  new_start_po    1   53[COMRAM] unsigned char 
  5989 ;;  new_end_poin    1   54[COMRAM] unsigned char 
  5990 ;; Auto vars:     Size  Location     Type
  5991 ;;  exist_uid_id    1   58[COMRAM] unsigned char 
  5992 ;;  i               2   60[COMRAM] int 
  5993 ;;  conflict        1   59[COMRAM] unsigned char 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  1    wreg      unsigned char 
  5996 ;; Registers used:
  5997 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6003 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;Total ram usage:        9 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    8
  6010 ;; This function calls:
  6011 ;;		___wmul
  6012 ;;		_printf
  6013 ;; This function is called by:
  6014 ;;		_update_string_data
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           	psect	text15
  6019  001758                     __ptext15:
  6020                           	opt stack 0
  6021  001758                     _conflict_check:
  6022                           	opt stack 19
  6023                           
  6024                           ;incstack = 0
  6025                           ;conflict_check@exist_uid_idx stored from wreg
  6026  001758  6E3B               	movwf	conflict_check@exist_uid_idx,c
  6027                           
  6028                           ;clcd.c: 137: int i = 0;
  6029  00175A  0E00               	movlw	0
  6030  00175C  6E3E               	movwf	conflict_check@i+1,c
  6031  00175E  0E00               	movlw	0
  6032  001760  6E3D               	movwf	conflict_check@i,c
  6033                           
  6034                           ;clcd.c: 138: bool conflict = 0;
  6035  001762  0E00               	movlw	0
  6036  001764  6E3C               	movwf	conflict_check@conflict,c
  6037                           
  6038                           ;clcd.c: 140: for (i = 0; i < clcd_config_data.clcd_max_display_string;) {
  6039  001766  0E00               	movlw	0
  6040  001768  6E3E               	movwf	conflict_check@i+1,c
  6041  00176A  0E00               	movlw	0
  6042  00176C  6E3D               	movwf	conflict_check@i,c
  6043  00176E  D12D               	goto	l6155
  6044  001770                     l6109:
  6045                           
  6046                           ;clcd.c: 141: if (exist_uid_idx != i && clcd_display_string_details[i].uid != 0) {
  6047  001770  503B               	movf	conflict_check@exist_uid_idx,w,c
  6048  001772  6E38               	movwf	??_conflict_check& (0+255),c
  6049  001774  6A39               	clrf	(??_conflict_check+1)& (0+255),c
  6050  001776  503D               	movf	conflict_check@i,w,c
  6051  001778  1838               	xorwf	??_conflict_check,w,c
  6052  00177A  E104               	bnz	u5960
  6053  00177C  503E               	movf	conflict_check@i+1,w,c
  6054  00177E  1839               	xorwf	??_conflict_check+1,w,c
  6055  001780  B4D8               	btfsc	status,2,c
  6056  001782  D121               	goto	l6153
  6057  001784                     u5960:
  6058  001784  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6059  001788  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6060  00178C  0E00               	movlw	0
  6061  00178E  6E1B               	movwf	___wmul@multiplicand+1,c
  6062  001790  0E36               	movlw	54
  6063  001792  6E1A               	movwf	___wmul@multiplicand,c
  6064  001794  ECD1  F01A         	call	___wmul	;wreg free
  6065  001798  0E96               	movlw	low _clcd_display_string_details
  6066  00179A  2418               	addwf	?___wmul,w,c
  6067  00179C  6ED9               	movwf	fsr2l,c
  6068  00179E  0E02               	movlw	high _clcd_display_string_details
  6069  0017A0  2019               	addwfc	?___wmul+1,w,c
  6070  0017A2  6EDA               	movwf	fsr2h,c
  6071  0017A4  50DF               	movf	223,w,c
  6072  0017A6  0B7F               	andlw	127
  6073  0017A8  0900               	iorlw	0
  6074  0017AA  B4D8               	btfsc	status,2,c
  6075  0017AC  D10C               	goto	l6153
  6076                           
  6077                           ;clcd.c: 142: if (new_start_point >= clcd_display_string_details[i].start_point && new_s
      +                          tart_point <= clcd_display_string_details[i].end_point) {
  6078  0017AE  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6079  0017B2  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6080  0017B6  0E00               	movlw	0
  6081  0017B8  6E1B               	movwf	___wmul@multiplicand+1,c
  6082  0017BA  0E36               	movlw	54
  6083  0017BC  6E1A               	movwf	___wmul@multiplicand,c
  6084  0017BE  ECD1  F01A         	call	___wmul	;wreg free
  6085  0017C2  0E2C               	movlw	44
  6086  0017C4  2618               	addwf	?___wmul,f,c
  6087  0017C6  0E00               	movlw	0
  6088  0017C8  2219               	addwfc	?___wmul+1,f,c
  6089  0017CA  0E96               	movlw	low _clcd_display_string_details
  6090  0017CC  2418               	addwf	?___wmul,w,c
  6091  0017CE  6ED9               	movwf	fsr2l,c
  6092  0017D0  0E02               	movlw	high _clcd_display_string_details
  6093  0017D2  2019               	addwfc	?___wmul+1,w,c
  6094  0017D4  6EDA               	movwf	fsr2h,c
  6095  0017D6  50DF               	movf	223,w,c
  6096  0017D8  0B7F               	andlw	127
  6097  0017DA  6E38               	movwf	??_conflict_check& (0+255),c
  6098  0017DC  5038               	movf	??_conflict_check,w,c
  6099  0017DE  5C36               	subwf	conflict_check@new_start_point,w,c
  6100  0017E0  A0D8               	btfss	status,0,c
  6101  0017E2  D040               	goto	l6127
  6102  0017E4  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6103  0017E8  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6104  0017EC  0E00               	movlw	0
  6105  0017EE  6E1B               	movwf	___wmul@multiplicand+1,c
  6106  0017F0  0E36               	movlw	54
  6107  0017F2  6E1A               	movwf	___wmul@multiplicand,c
  6108  0017F4  ECD1  F01A         	call	___wmul	;wreg free
  6109  0017F8  0E2F               	movlw	47
  6110  0017FA  2618               	addwf	?___wmul,f,c
  6111  0017FC  0E00               	movlw	0
  6112  0017FE  2219               	addwfc	?___wmul+1,f,c
  6113  001800  0E96               	movlw	low _clcd_display_string_details
  6114  001802  2418               	addwf	?___wmul,w,c
  6115  001804  6ED9               	movwf	fsr2l,c
  6116  001806  0E02               	movlw	high _clcd_display_string_details
  6117  001808  2019               	addwfc	?___wmul+1,w,c
  6118  00180A  6EDA               	movwf	fsr2h,c
  6119  00180C  50DF               	movf	223,w,c
  6120  00180E  0B7F               	andlw	127
  6121  001810  6E38               	movwf	??_conflict_check& (0+255),c
  6122  001812  5036               	movf	conflict_check@new_start_point,w,c
  6123  001814  5C38               	subwf	??_conflict_check,w,c
  6124  001816  A0D8               	btfss	status,0,c
  6125  001818  D025               	goto	l6127
  6126                           
  6127                           ;clcd.c: 143: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6128  00181A  5042               	movf	_conflict_data_count,w,c
  6129  00181C  0D01               	mullw	1
  6130  00181E  0EB7               	movlw	low _conflict_arr
  6131  001820  24F3               	addwf	prodl,w,c
  6132  001822  6ED9               	movwf	fsr2l,c
  6133  001824  0E00               	movlw	high _conflict_arr
  6134  001826  20F4               	addwfc	prodh,w,c
  6135  001828  6EDA               	movwf	fsr2h,c
  6136  00182A  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6137  00182E  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6138  001832  0E00               	movlw	0
  6139  001834  6E1B               	movwf	___wmul@multiplicand+1,c
  6140  001836  0E36               	movlw	54
  6141  001838  6E1A               	movwf	___wmul@multiplicand,c
  6142  00183A  ECD1  F01A         	call	___wmul	;wreg free
  6143  00183E  0E96               	movlw	low _clcd_display_string_details
  6144  001840  2418               	addwf	?___wmul,w,c
  6145  001842  6EE1               	movwf	fsr1l,c
  6146  001844  0E02               	movlw	high _clcd_display_string_details
  6147  001846  2019               	addwfc	?___wmul+1,w,c
  6148  001848  6EE2               	movwf	fsr1h,c
  6149  00184A  50E7               	movf	231,w,c
  6150  00184C  0B7F               	andlw	127
  6151  00184E  6EDF               	movwf	indf2,c
  6152  001850  2A42               	incf	_conflict_data_count,f,c
  6153                           
  6154                           ;clcd.c: 144: i++;
  6155  001852  4A3D               	infsnz	conflict_check@i,f,c
  6156  001854  2A3E               	incf	conflict_check@i+1,f,c
  6157                           
  6158                           ;clcd.c: 145: printf("ex_sp <= new_sp <=ex_ep\r\n");
  6159  001856  0E80               	movlw	low STR_7
  6160  001858  6E24               	movwf	printf@f,c
  6161  00185A  0EFD               	movlw	high STR_7
  6162  00185C  6E25               	movwf	printf@f+1,c
  6163  00185E  EC02  F011         	call	_printf	;wreg free
  6164  001862  D059               	goto	l6139
  6165  001864                     l6127:
  6166                           
  6167                           ;clcd.c: 148: }
  6168                           ;clcd.c: 149: if (new_end_point >= clcd_display_string_details[i].start_point && new_end
      +                          _point <= clcd_display_string_details[i].end_point) {
  6169  001864  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6170  001868  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6171  00186C  0E00               	movlw	0
  6172  00186E  6E1B               	movwf	___wmul@multiplicand+1,c
  6173  001870  0E36               	movlw	54
  6174  001872  6E1A               	movwf	___wmul@multiplicand,c
  6175  001874  ECD1  F01A         	call	___wmul	;wreg free
  6176  001878  0E2C               	movlw	44
  6177  00187A  2618               	addwf	?___wmul,f,c
  6178  00187C  0E00               	movlw	0
  6179  00187E  2219               	addwfc	?___wmul+1,f,c
  6180  001880  0E96               	movlw	low _clcd_display_string_details
  6181  001882  2418               	addwf	?___wmul,w,c
  6182  001884  6ED9               	movwf	fsr2l,c
  6183  001886  0E02               	movlw	high _clcd_display_string_details
  6184  001888  2019               	addwfc	?___wmul+1,w,c
  6185  00188A  6EDA               	movwf	fsr2h,c
  6186  00188C  50DF               	movf	223,w,c
  6187  00188E  0B7F               	andlw	127
  6188  001890  6E38               	movwf	??_conflict_check& (0+255),c
  6189  001892  5038               	movf	??_conflict_check,w,c
  6190  001894  5C37               	subwf	conflict_check@new_end_point,w,c
  6191  001896  A0D8               	btfss	status,0,c
  6192  001898  D041               	goto	l6141
  6193  00189A  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6194  00189E  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6195  0018A2  0E00               	movlw	0
  6196  0018A4  6E1B               	movwf	___wmul@multiplicand+1,c
  6197  0018A6  0E36               	movlw	54
  6198  0018A8  6E1A               	movwf	___wmul@multiplicand,c
  6199  0018AA  ECD1  F01A         	call	___wmul	;wreg free
  6200  0018AE  0E2F               	movlw	47
  6201  0018B0  2618               	addwf	?___wmul,f,c
  6202  0018B2  0E00               	movlw	0
  6203  0018B4  2219               	addwfc	?___wmul+1,f,c
  6204  0018B6  0E96               	movlw	low _clcd_display_string_details
  6205  0018B8  2418               	addwf	?___wmul,w,c
  6206  0018BA  6ED9               	movwf	fsr2l,c
  6207  0018BC  0E02               	movlw	high _clcd_display_string_details
  6208  0018BE  2019               	addwfc	?___wmul+1,w,c
  6209  0018C0  6EDA               	movwf	fsr2h,c
  6210  0018C2  50DF               	movf	223,w,c
  6211  0018C4  0B7F               	andlw	127
  6212  0018C6  6E38               	movwf	??_conflict_check& (0+255),c
  6213  0018C8  5037               	movf	conflict_check@new_end_point,w,c
  6214  0018CA  5C38               	subwf	??_conflict_check,w,c
  6215  0018CC  A0D8               	btfss	status,0,c
  6216  0018CE  D026               	goto	l6141
  6217                           
  6218                           ;clcd.c: 150: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6219  0018D0  5042               	movf	_conflict_data_count,w,c
  6220  0018D2  0D01               	mullw	1
  6221  0018D4  0EB7               	movlw	low _conflict_arr
  6222  0018D6  24F3               	addwf	prodl,w,c
  6223  0018D8  6ED9               	movwf	fsr2l,c
  6224  0018DA  0E00               	movlw	high _conflict_arr
  6225  0018DC  20F4               	addwfc	prodh,w,c
  6226  0018DE  6EDA               	movwf	fsr2h,c
  6227  0018E0  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6228  0018E4  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6229  0018E8  0E00               	movlw	0
  6230  0018EA  6E1B               	movwf	___wmul@multiplicand+1,c
  6231  0018EC  0E36               	movlw	54
  6232  0018EE  6E1A               	movwf	___wmul@multiplicand,c
  6233  0018F0  ECD1  F01A         	call	___wmul	;wreg free
  6234  0018F4  0E96               	movlw	low _clcd_display_string_details
  6235  0018F6  2418               	addwf	?___wmul,w,c
  6236  0018F8  6EE1               	movwf	fsr1l,c
  6237  0018FA  0E02               	movlw	high _clcd_display_string_details
  6238  0018FC  2019               	addwfc	?___wmul+1,w,c
  6239  0018FE  6EE2               	movwf	fsr1h,c
  6240  001900  50E7               	movf	231,w,c
  6241  001902  0B7F               	andlw	127
  6242  001904  6EDF               	movwf	indf2,c
  6243  001906  2A42               	incf	_conflict_data_count,f,c
  6244                           
  6245                           ;clcd.c: 151: printf("ex_sp <= new_ep <=ex_ep\r\n");
  6246  001908  0E66               	movlw	low STR_8
  6247  00190A  6E24               	movwf	printf@f,c
  6248  00190C  0EFD               	movlw	high STR_8
  6249  00190E  6E25               	movwf	printf@f+1,c
  6250  001910  EC02  F011         	call	_printf	;wreg free
  6251  001914  D055               	goto	l6149
  6252  001916                     l6139:
  6253                           
  6254                           ;clcd.c: 153: conflict = 1;
  6255  001916  0E01               	movlw	1
  6256  001918  6E3C               	movwf	conflict_check@conflict,c
  6257                           
  6258                           ;clcd.c: 154: continue;
  6259  00191A  D057               	goto	l6155
  6260  00191C                     l6141:
  6261                           
  6262                           ;clcd.c: 155: }
  6263                           ;clcd.c: 156: if (new_start_point <= clcd_display_string_details[i].start_point && new_e
      +                          nd_point >= clcd_display_string_details[i].end_point) {
  6264  00191C  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6265  001920  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6266  001924  0E00               	movlw	0
  6267  001926  6E1B               	movwf	___wmul@multiplicand+1,c
  6268  001928  0E36               	movlw	54
  6269  00192A  6E1A               	movwf	___wmul@multiplicand,c
  6270  00192C  ECD1  F01A         	call	___wmul	;wreg free
  6271  001930  0E2C               	movlw	44
  6272  001932  2618               	addwf	?___wmul,f,c
  6273  001934  0E00               	movlw	0
  6274  001936  2219               	addwfc	?___wmul+1,f,c
  6275  001938  0E96               	movlw	low _clcd_display_string_details
  6276  00193A  2418               	addwf	?___wmul,w,c
  6277  00193C  6ED9               	movwf	fsr2l,c
  6278  00193E  0E02               	movlw	high _clcd_display_string_details
  6279  001940  2019               	addwfc	?___wmul+1,w,c
  6280  001942  6EDA               	movwf	fsr2h,c
  6281  001944  50DF               	movf	223,w,c
  6282  001946  0B7F               	andlw	127
  6283  001948  6E38               	movwf	??_conflict_check& (0+255),c
  6284  00194A  5036               	movf	conflict_check@new_start_point,w,c
  6285  00194C  5C38               	subwf	??_conflict_check,w,c
  6286  00194E  A0D8               	btfss	status,0,c
  6287  001950  D03A               	goto	l6153
  6288  001952  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6289  001956  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6290  00195A  0E00               	movlw	0
  6291  00195C  6E1B               	movwf	___wmul@multiplicand+1,c
  6292  00195E  0E36               	movlw	54
  6293  001960  6E1A               	movwf	___wmul@multiplicand,c
  6294  001962  ECD1  F01A         	call	___wmul	;wreg free
  6295  001966  0E2F               	movlw	47
  6296  001968  2618               	addwf	?___wmul,f,c
  6297  00196A  0E00               	movlw	0
  6298  00196C  2219               	addwfc	?___wmul+1,f,c
  6299  00196E  0E96               	movlw	low _clcd_display_string_details
  6300  001970  2418               	addwf	?___wmul,w,c
  6301  001972  6ED9               	movwf	fsr2l,c
  6302  001974  0E02               	movlw	high _clcd_display_string_details
  6303  001976  2019               	addwfc	?___wmul+1,w,c
  6304  001978  6EDA               	movwf	fsr2h,c
  6305  00197A  50DF               	movf	223,w,c
  6306  00197C  0B7F               	andlw	127
  6307  00197E  6E38               	movwf	??_conflict_check& (0+255),c
  6308  001980  5038               	movf	??_conflict_check,w,c
  6309  001982  5C37               	subwf	conflict_check@new_end_point,w,c
  6310  001984  A0D8               	btfss	status,0,c
  6311  001986  D01F               	goto	l6153
  6312                           
  6313                           ;clcd.c: 157: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6314  001988  5042               	movf	_conflict_data_count,w,c
  6315  00198A  0D01               	mullw	1
  6316  00198C  0EB7               	movlw	low _conflict_arr
  6317  00198E  24F3               	addwf	prodl,w,c
  6318  001990  6ED9               	movwf	fsr2l,c
  6319  001992  0E00               	movlw	high _conflict_arr
  6320  001994  20F4               	addwfc	prodh,w,c
  6321  001996  6EDA               	movwf	fsr2h,c
  6322  001998  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6323  00199C  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6324  0019A0  0E00               	movlw	0
  6325  0019A2  6E1B               	movwf	___wmul@multiplicand+1,c
  6326  0019A4  0E36               	movlw	54
  6327  0019A6  6E1A               	movwf	___wmul@multiplicand,c
  6328  0019A8  ECD1  F01A         	call	___wmul	;wreg free
  6329  0019AC  0E96               	movlw	low _clcd_display_string_details
  6330  0019AE  2418               	addwf	?___wmul,w,c
  6331  0019B0  6EE1               	movwf	fsr1l,c
  6332  0019B2  0E02               	movlw	high _clcd_display_string_details
  6333  0019B4  2019               	addwfc	?___wmul+1,w,c
  6334  0019B6  6EE2               	movwf	fsr1h,c
  6335  0019B8  50E7               	movf	231,w,c
  6336  0019BA  0B7F               	andlw	127
  6337  0019BC  6EDF               	movwf	indf2,c
  6338  0019BE  2A42               	incf	_conflict_data_count,f,c
  6339  0019C0                     l6149:
  6340                           
  6341                           ;clcd.c: 158: i++;
  6342  0019C0  4A3D               	infsnz	conflict_check@i,f,c
  6343  0019C2  2A3E               	incf	conflict_check@i+1,f,c
  6344  0019C4  D7A8               	goto	l6139
  6345  0019C6                     l6153:
  6346                           
  6347                           ;clcd.c: 161: }
  6348                           ;clcd.c: 162: }
  6349                           ;clcd.c: 163: i++;
  6350  0019C6  4A3D               	infsnz	conflict_check@i,f,c
  6351  0019C8  2A3E               	incf	conflict_check@i+1,f,c
  6352  0019CA                     l6155:
  6353  0019CA  504D               	movf	_clcd_config_data+4,w,c
  6354  0019CC  6E38               	movwf	??_conflict_check& (0+255),c
  6355  0019CE  6A39               	clrf	(??_conflict_check+1)& (0+255),c
  6356  0019D0  5038               	movf	??_conflict_check,w,c
  6357  0019D2  5C3D               	subwf	conflict_check@i,w,c
  6358  0019D4  503E               	movf	conflict_check@i+1,w,c
  6359  0019D6  0A80               	xorlw	128
  6360  0019D8  6E3A               	movwf	(??_conflict_check+2)& (0+255),c
  6361  0019DA  5039               	movf	??_conflict_check+1,w,c
  6362  0019DC  0A80               	xorlw	128
  6363  0019DE  583A               	subwfb	(??_conflict_check+2)& (0+255),w,c
  6364  0019E0  A0D8               	btfss	status,0,c
  6365  0019E2  D6C6               	goto	l6109
  6366                           
  6367                           ;clcd.c: 164: }
  6368                           ;clcd.c: 172: return conflict;
  6369  0019E4  503C               	movf	conflict_check@conflict,w,c
  6370  0019E6  0012               	return	
  6371  0019E8                     __end_of_conflict_check:
  6372                           	opt stack 0
  6373                           tblptru	equ	0xFF8
  6374                           tblptrh	equ	0xFF7
  6375                           tblptrl	equ	0xFF6
  6376                           tablat	equ	0xFF5
  6377                           prodh	equ	0xFF4
  6378                           prodl	equ	0xFF3
  6379                           intcon	equ	0xFF2
  6380                           postinc0	equ	0xFEE
  6381                           wreg	equ	0xFE8
  6382                           indf1	equ	0xFE7
  6383                           postdec1	equ	0xFE5
  6384                           fsr1h	equ	0xFE2
  6385                           fsr1l	equ	0xFE1
  6386                           indf2	equ	0xFDF
  6387                           postinc2	equ	0xFDE
  6388                           fsr2h	equ	0xFDA
  6389                           fsr2l	equ	0xFD9
  6390                           status	equ	0xFD8
  6391                           
  6392 ;; *************** function _strcmp *****************
  6393 ;; Defined at:
  6394 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;  s1              2   15[COMRAM] PTR const unsigned char 
  6397 ;;		 -> CMD(15), 
  6398 ;;  s2              2   17[COMRAM] PTR const unsigned char 
  6399 ;;		 -> STR_104(11), STR_101(11), STR_98(12), STR_95(10), 
  6400 ;;		 -> STR_90(10), STR_87(9), STR_83(8), STR_79(8), 
  6401 ;;		 -> STR_75(10), STR_73(4), 
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;  r               1   20[COMRAM] char 
  6404 ;; Return value:  Size  Location     Type
  6405 ;;                  2   15[COMRAM] int 
  6406 ;; Registers used:
  6407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 0/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6414 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6415 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;Total ram usage:        6 bytes
  6418 ;; Hardware stack levels used:    1
  6419 ;; Hardware stack levels required when called:    5
  6420 ;; This function calls:
  6421 ;;		Nothing
  6422 ;; This function is called by:
  6423 ;;		_reply_to_host
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           	psect	text16
  6428  0031B4                     __ptext16:
  6429                           	opt stack 0
  6430  0031B4                     _strcmp:
  6431                           	opt stack 23
  6432                           
  6433                           ;incstack = 0
  6434  0031B4  D004               	goto	l6573
  6435  0031B6                     l6571:
  6436  0031B6  4A10               	infsnz	strcmp@s1,f,c
  6437  0031B8  2A11               	incf	strcmp@s1+1,f,c
  6438  0031BA  4A12               	infsnz	strcmp@s2,f,c
  6439  0031BC  2A13               	incf	strcmp@s2+1,f,c
  6440  0031BE                     l6573:
  6441  0031BE  C010  FFD9         	movff	strcmp@s1,fsr2l
  6442  0031C2  C011  FFDA         	movff	strcmp@s1+1,fsr2h
  6443  0031C6  50DF               	movf	indf2,w,c
  6444  0031C8  6E14               	movwf	??_strcmp& (0+255),c
  6445  0031CA  C012  FFF6         	movff	strcmp@s2,tblptrl
  6446  0031CE  C013  FFF7         	movff	strcmp@s2+1,tblptrh
  6447  0031D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6448  0031D2  6AF8               	clrf	tblptru,c
  6449  0031D4                     	endif
  6450  0031D4                     	if	0	;tblptru may be non-zero
  6451  0031D4                     	endif
  6452  0031D4  0008               	tblrd		*
  6453  0031D6  50F5               	movf	tablat,w,c
  6454  0031D8  0800               	sublw	0
  6455  0031DA  2414               	addwf	??_strcmp,w,c
  6456  0031DC  6E15               	movwf	strcmp@r,c
  6457  0031DE  5015               	movf	strcmp@r,w,c
  6458  0031E0  A4D8               	btfss	status,2,c
  6459  0031E2  D007               	goto	l6577
  6460  0031E4  C010  FFD9         	movff	strcmp@s1,fsr2l
  6461  0031E8  C011  FFDA         	movff	strcmp@s1+1,fsr2h
  6462  0031EC  50DF               	movf	indf2,w,c
  6463  0031EE  A4D8               	btfss	status,2,c
  6464  0031F0  D7E2               	goto	l6571
  6465  0031F2                     l6577:
  6466  0031F2  5015               	movf	strcmp@r,w,c
  6467  0031F4  6E10               	movwf	?_strcmp,c
  6468  0031F6  6A11               	clrf	?_strcmp+1,c
  6469  0031F8  BE10               	btfsc	?_strcmp,7,c
  6470  0031FA  0611               	decf	?_strcmp+1,f,c
  6471  0031FC  0012               	return	
  6472  0031FE                     __end_of_strcmp:
  6473                           	opt stack 0
  6474                           tblptru	equ	0xFF8
  6475                           tblptrh	equ	0xFF7
  6476                           tblptrl	equ	0xFF6
  6477                           tablat	equ	0xFF5
  6478                           prodh	equ	0xFF4
  6479                           prodl	equ	0xFF3
  6480                           intcon	equ	0xFF2
  6481                           postinc0	equ	0xFEE
  6482                           wreg	equ	0xFE8
  6483                           indf1	equ	0xFE7
  6484                           postdec1	equ	0xFE5
  6485                           fsr1h	equ	0xFE2
  6486                           fsr1l	equ	0xFE1
  6487                           indf2	equ	0xFDF
  6488                           postinc2	equ	0xFDE
  6489                           fsr2h	equ	0xFDA
  6490                           fsr2l	equ	0xFD9
  6491                           status	equ	0xFD8
  6492                           
  6493 ;; *************** function _puts *****************
  6494 ;; Defined at:
  6495 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\puts.c"
  6496 ;; Parameters:    Size  Location     Type
  6497 ;;  s               2   19[COMRAM] PTR const unsigned char 
  6498 ;;		 -> STR_119(12), STR_118(12), STR_74(5), 
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;		None
  6501 ;; Return value:  Size  Location     Type
  6502 ;;                  2   19[COMRAM] int 
  6503 ;; Registers used:
  6504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6510 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6513 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6514 ;;Total ram usage:        2 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    8
  6517 ;; This function calls:
  6518 ;;		_cputs
  6519 ;;		_putch
  6520 ;; This function is called by:
  6521 ;;		_reply_to_host
  6522 ;;		_cmd_consol_task
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           	psect	text17
  6527  00371A                     __ptext17:
  6528                           	opt stack 0
  6529  00371A                     _puts:
  6530                           	opt stack 20
  6531                           
  6532                           ;incstack = 0
  6533  00371A  C014  F012         	movff	puts@s,cputs@s
  6534  00371E  C015  F013         	movff	puts@s+1,cputs@s+1
  6535  003722  EC8E  F01A         	call	_cputs	;wreg free
  6536  003726  0E0A               	movlw	10
  6537  003728  ECF4  F01B         	call	_putch
  6538  00372C  0012               	return		;funcret
  6539  00372E                     __end_of_puts:
  6540                           	opt stack 0
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           intcon	equ	0xFF2
  6548                           postinc0	equ	0xFEE
  6549                           wreg	equ	0xFE8
  6550                           indf1	equ	0xFE7
  6551                           postdec1	equ	0xFE5
  6552                           fsr1h	equ	0xFE2
  6553                           fsr1l	equ	0xFE1
  6554                           indf2	equ	0xFDF
  6555                           postinc2	equ	0xFDE
  6556                           fsr2h	equ	0xFDA
  6557                           fsr2l	equ	0xFD9
  6558                           status	equ	0xFD8
  6559                           
  6560 ;; *************** function _cputs *****************
  6561 ;; Defined at:
  6562 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\cputs.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;  s               2   17[COMRAM] PTR const unsigned char 
  6565 ;;		 -> STR_119(12), STR_118(12), STR_74(5), 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;		None
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  1    wreg      void 
  6570 ;; Registers used:
  6571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6577 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;Total ram usage:        2 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:    7
  6584 ;; This function calls:
  6585 ;;		_putch
  6586 ;; This function is called by:
  6587 ;;		_puts
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text18
  6592  00351C                     __ptext18:
  6593                           	opt stack 0
  6594  00351C                     _cputs:
  6595                           	opt stack 20
  6596                           
  6597                           ;incstack = 0
  6598  00351C  D00B               	goto	l6251
  6599  00351E                     l6247:
  6600  00351E  C012  FFF6         	movff	cputs@s,tblptrl
  6601  003522  C013  FFF7         	movff	cputs@s+1,tblptrh
  6602  003526                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6603  003526  6AF8               	clrf	tblptru,c
  6604  003528                     	endif
  6605  003528                     	if	0	;tblptru may be non-zero
  6606  003528                     	endif
  6607  003528  0008               	tblrd		*
  6608  00352A  50F5               	movf	tablat,w,c
  6609  00352C  ECF4  F01B         	call	_putch
  6610  003530  4A12               	infsnz	cputs@s,f,c
  6611  003532  2A13               	incf	cputs@s+1,f,c
  6612  003534                     l6251:
  6613  003534  C012  FFF6         	movff	cputs@s,tblptrl
  6614  003538  C013  FFF7         	movff	cputs@s+1,tblptrh
  6615  00353C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6616  00353C  6AF8               	clrf	tblptru,c
  6617  00353E                     	endif
  6618  00353E                     	if	0	;tblptru may be non-zero
  6619  00353E                     	endif
  6620  00353E  0008               	tblrd		*
  6621  003540  50F5               	movf	tablat,w,c
  6622  003542  0900               	iorlw	0
  6623  003544  B4D8               	btfsc	status,2,c
  6624  003546  0012               	return	
  6625  003548  D7EA               	goto	l6247
  6626  00354A                     __end_of_cputs:
  6627                           	opt stack 0
  6628                           tblptru	equ	0xFF8
  6629                           tblptrh	equ	0xFF7
  6630                           tblptrl	equ	0xFF6
  6631                           tablat	equ	0xFF5
  6632                           prodh	equ	0xFF4
  6633                           prodl	equ	0xFF3
  6634                           intcon	equ	0xFF2
  6635                           postinc0	equ	0xFEE
  6636                           wreg	equ	0xFE8
  6637                           indf1	equ	0xFE7
  6638                           postdec1	equ	0xFE5
  6639                           fsr1h	equ	0xFE2
  6640                           fsr1l	equ	0xFE1
  6641                           indf2	equ	0xFDF
  6642                           postinc2	equ	0xFDE
  6643                           fsr2h	equ	0xFDA
  6644                           fsr2l	equ	0xFD9
  6645                           status	equ	0xFD8
  6646                           
  6647 ;; *************** function _min_uid_range *****************
  6648 ;; Defined at:
  6649 ;;		line 88 in file "clcd.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;		None
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;		None
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  1    wreg      unsigned char 
  6656 ;; Registers used:
  6657 ;;		wreg, status,2
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6667 ;;Total ram usage:        0 bytes
  6668 ;; Hardware stack levels used:    1
  6669 ;; Hardware stack levels required when called:    5
  6670 ;; This function calls:
  6671 ;;		Nothing
  6672 ;; This function is called by:
  6673 ;;		_reply_to_host
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text19
  6678  00374E                     __ptext19:
  6679                           	opt stack 0
  6680  00374E                     _min_uid_range:
  6681                           	opt stack 23
  6682                           
  6683                           ;clcd.c: 89: if (clcd_config_data.init_done == 0)
  6684                           
  6685                           ;incstack = 0
  6686  00374E  5049               	movf	_clcd_config_data,w,c
  6687  003750  A4D8               	btfss	status,2,c
  6688  003752  D002               	goto	l6333
  6689                           
  6690                           ;clcd.c: 90: return 0;
  6691  003754  0E00               	movlw	0
  6692  003756  0012               	return	
  6693  003758                     l6333:
  6694                           
  6695                           ;clcd.c: 91: else
  6696                           ;clcd.c: 92: return 'A';
  6697  003758  0E41               	movlw	65
  6698  00375A  0012               	return	
  6699  00375C                     __end_of_min_uid_range:
  6700                           	opt stack 0
  6701                           tblptru	equ	0xFF8
  6702                           tblptrh	equ	0xFF7
  6703                           tblptrl	equ	0xFF6
  6704                           tablat	equ	0xFF5
  6705                           prodh	equ	0xFF4
  6706                           prodl	equ	0xFF3
  6707                           intcon	equ	0xFF2
  6708                           postinc0	equ	0xFEE
  6709                           wreg	equ	0xFE8
  6710                           indf1	equ	0xFE7
  6711                           postdec1	equ	0xFE5
  6712                           fsr1h	equ	0xFE2
  6713                           fsr1l	equ	0xFE1
  6714                           indf2	equ	0xFDF
  6715                           postinc2	equ	0xFDE
  6716                           fsr2h	equ	0xFDA
  6717                           fsr2l	equ	0xFD9
  6718                           status	equ	0xFD8
  6719                           
  6720 ;; *************** function _max_uid_range *****************
  6721 ;; Defined at:
  6722 ;;		line 95 in file "clcd.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;		None
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      unsigned char 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;Total ram usage:        0 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    5
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		_reply_to_host
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text20
  6751  00375C                     __ptext20:
  6752                           	opt stack 0
  6753  00375C                     _max_uid_range:
  6754                           	opt stack 23
  6755                           
  6756                           ;clcd.c: 96: if (clcd_config_data.init_done == 0)
  6757                           
  6758                           ;incstack = 0
  6759  00375C  5049               	movf	_clcd_config_data,w,c
  6760  00375E  A4D8               	btfss	status,2,c
  6761  003760  D002               	goto	l6345
  6762                           
  6763                           ;clcd.c: 97: return 0;
  6764  003762  0E00               	movlw	0
  6765  003764  0012               	return	
  6766  003766                     l6345:
  6767                           
  6768                           ;clcd.c: 98: else
  6769                           ;clcd.c: 99: return clcd_config_data.uid_range - 1;
  6770  003766  044C               	decf	_clcd_config_data+3,w,c
  6771  003768  0012               	return	
  6772  00376A                     __end_of_max_uid_range:
  6773                           	opt stack 0
  6774                           tblptru	equ	0xFF8
  6775                           tblptrh	equ	0xFF7
  6776                           tblptrl	equ	0xFF6
  6777                           tablat	equ	0xFF5
  6778                           prodh	equ	0xFF4
  6779                           prodl	equ	0xFF3
  6780                           intcon	equ	0xFF2
  6781                           postinc0	equ	0xFEE
  6782                           wreg	equ	0xFE8
  6783                           indf1	equ	0xFE7
  6784                           postdec1	equ	0xFE5
  6785                           fsr1h	equ	0xFE2
  6786                           fsr1l	equ	0xFE1
  6787                           indf2	equ	0xFDF
  6788                           postinc2	equ	0xFDE
  6789                           fsr2h	equ	0xFDA
  6790                           fsr2l	equ	0xFD9
  6791                           status	equ	0xFD8
  6792                           
  6793 ;; *************** function _max_display_support *****************
  6794 ;; Defined at:
  6795 ;;		line 102 in file "clcd.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;		None
  6798 ;; Auto vars:     Size  Location     Type
  6799 ;;		None
  6800 ;; Return value:  Size  Location     Type
  6801 ;;                  2   15[COMRAM] PTR unsigned char 
  6802 ;; Registers used:
  6803 ;;		wreg, status,2, status,0
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6809 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;Total ram usage:        2 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:    5
  6816 ;; This function calls:
  6817 ;;		Nothing
  6818 ;; This function is called by:
  6819 ;;		_reply_to_host
  6820 ;; This function uses a non-reentrant model
  6821 ;;
  6822                           
  6823                           	psect	text21
  6824  0037D4                     __ptext21:
  6825                           	opt stack 0
  6826  0037D4                     _max_display_support:
  6827                           	opt stack 23
  6828                           
  6829                           ;clcd.c: 103: return "4,20";
  6830                           
  6831                           ;incstack = 0
  6832  0037D4  0EF1               	movlw	low STR_5
  6833  0037D6  6E10               	movwf	?_max_display_support,c
  6834  0037D8  0EFF               	movlw	high STR_5
  6835  0037DA  6E11               	movwf	?_max_display_support+1,c
  6836  0037DC  0012               	return	
  6837  0037DE                     __end_of_max_display_support:
  6838                           	opt stack 0
  6839                           tblptru	equ	0xFF8
  6840                           tblptrh	equ	0xFF7
  6841                           tblptrl	equ	0xFF6
  6842                           tablat	equ	0xFF5
  6843                           prodh	equ	0xFF4
  6844                           prodl	equ	0xFF3
  6845                           intcon	equ	0xFF2
  6846                           postinc0	equ	0xFEE
  6847                           wreg	equ	0xFE8
  6848                           indf1	equ	0xFE7
  6849                           postdec1	equ	0xFE5
  6850                           fsr1h	equ	0xFE2
  6851                           fsr1l	equ	0xFE1
  6852                           indf2	equ	0xFDF
  6853                           postinc2	equ	0xFDE
  6854                           fsr2h	equ	0xFDA
  6855                           fsr2l	equ	0xFD9
  6856                           status	equ	0xFD8
  6857                           
  6858 ;; *************** function _max_display_str *****************
  6859 ;; Defined at:
  6860 ;;		line 81 in file "clcd.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;		None
  6863 ;; Auto vars:     Size  Location     Type
  6864 ;;		None
  6865 ;; Return value:  Size  Location     Type
  6866 ;;                  1    wreg      unsigned char 
  6867 ;; Registers used:
  6868 ;;		wreg, status,2
  6869 ;; Tracked objects:
  6870 ;;		On entry : 0/0
  6871 ;;		On exit  : 0/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;Total ram usage:        0 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; Hardware stack levels required when called:    5
  6881 ;; This function calls:
  6882 ;;		Nothing
  6883 ;; This function is called by:
  6884 ;;		_reply_to_host
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           	psect	text22
  6889  00376A                     __ptext22:
  6890                           	opt stack 0
  6891  00376A                     _max_display_str:
  6892                           	opt stack 23
  6893                           
  6894                           ;clcd.c: 82: if (clcd_config_data.init_done == 0)
  6895                           
  6896                           ;incstack = 0
  6897  00376A  5049               	movf	_clcd_config_data,w,c
  6898  00376C  A4D8               	btfss	status,2,c
  6899  00376E  D002               	goto	l6321
  6900                           
  6901                           ;clcd.c: 83: return 0;
  6902  003770  0E00               	movlw	0
  6903  003772  0012               	return	
  6904  003774                     l6321:
  6905                           
  6906                           ;clcd.c: 84: else
  6907                           ;clcd.c: 85: return clcd_config_data.clcd_max_display_string;
  6908  003774  504D               	movf	_clcd_config_data+4,w,c
  6909  003776  0012               	return	
  6910  003778                     __end_of_max_display_str:
  6911                           	opt stack 0
  6912                           tblptru	equ	0xFF8
  6913                           tblptrh	equ	0xFF7
  6914                           tblptrl	equ	0xFF6
  6915                           tablat	equ	0xFF5
  6916                           prodh	equ	0xFF4
  6917                           prodl	equ	0xFF3
  6918                           intcon	equ	0xFF2
  6919                           postinc0	equ	0xFEE
  6920                           wreg	equ	0xFE8
  6921                           indf1	equ	0xFE7
  6922                           postdec1	equ	0xFE5
  6923                           fsr1h	equ	0xFE2
  6924                           fsr1l	equ	0xFE1
  6925                           indf2	equ	0xFDF
  6926                           postinc2	equ	0xFDE
  6927                           fsr2h	equ	0xFDA
  6928                           fsr2l	equ	0xFD9
  6929                           status	equ	0xFD8
  6930                           
  6931 ;; *************** function _init_clcd_cusotom_lcd *****************
  6932 ;; Defined at:
  6933 ;;		line 49 in file "clcd.c"
  6934 ;; Parameters:    Size  Location     Type
  6935 ;;  clcd_init_ro    1    wreg     unsigned char 
  6936 ;;  clcd_init_co    1   53[COMRAM] unsigned char 
  6937 ;; Auto vars:     Size  Location     Type
  6938 ;;  clcd_init_ro    1   54[COMRAM] unsigned char 
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  1    wreg      void 
  6941 ;; Registers used:
  6942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6948 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6952 ;;Total ram usage:        2 bytes
  6953 ;; Hardware stack levels used:    1
  6954 ;; Hardware stack levels required when called:   11
  6955 ;; This function calls:
  6956 ;;		___awdiv
  6957 ;;		___wmul
  6958 ;;		_init_CLCD_config
  6959 ;;		_memset
  6960 ;;		_printf
  6961 ;; This function is called by:
  6962 ;;		_reply_to_host
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           	psect	text23
  6967  002866                     __ptext23:
  6968                           	opt stack 0
  6969  002866                     _init_clcd_cusotom_lcd:
  6970                           	opt stack 17
  6971                           
  6972                           ;incstack = 0
  6973                           ;init_clcd_cusotom_lcd@clcd_init_row stored from wreg
  6974  002866  6E37               	movwf	init_clcd_cusotom_lcd@clcd_init_row,c
  6975                           
  6976                           ;clcd.c: 50: init_CLCD_config();
  6977  002868  ECD6  F015         	call	_init_CLCD_config	;wreg free
  6978                           
  6979                           ;clcd.c: 51: data_count = 0;
  6980  00286C  0E00               	movlw	0
  6981  00286E  6E43               	movwf	_data_count,c
  6982                           
  6983                           ;clcd.c: 52: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details)
      +                          );
  6984  002870  0E96               	movlw	low _clcd_display_string_details
  6985  002872  6E24               	movwf	memset@p1,c
  6986  002874  0E02               	movlw	high _clcd_display_string_details
  6987  002876  6E25               	movwf	memset@p1+1,c
  6988  002878  0E00               	movlw	0
  6989  00287A  6E27               	movwf	memset@c+1,c
  6990  00287C  0E00               	movlw	0
  6991  00287E  6E26               	movwf	memset@c,c
  6992  002880  0E04               	movlw	4
  6993  002882  6E29               	movwf	memset@n+1,c
  6994  002884  0E38               	movlw	56
  6995  002886  6E28               	movwf	memset@n,c
  6996  002888  ECA5  F01A         	call	_memset	;wreg free
  6997                           
  6998                           ;clcd.c: 53: memset(conflict_arr, 0, sizeof (conflict_arr));
  6999  00288C  0EB7               	movlw	low _conflict_arr
  7000  00288E  6E24               	movwf	memset@p1,c
  7001  002890  0E00               	movlw	high _conflict_arr
  7002  002892  6E25               	movwf	memset@p1+1,c
  7003  002894  0E00               	movlw	0
  7004  002896  6E27               	movwf	memset@c+1,c
  7005  002898  0E00               	movlw	0
  7006  00289A  6E26               	movwf	memset@c,c
  7007  00289C  0E00               	movlw	0
  7008  00289E  6E29               	movwf	memset@n+1,c
  7009  0028A0  0E14               	movlw	20
  7010  0028A2  6E28               	movwf	memset@n,c
  7011  0028A4  ECA5  F01A         	call	_memset	;wreg free
  7012                           
  7013                           ;clcd.c: 54: clcd_config_data.init_done = 1;
  7014  0028A8  0E01               	movlw	1
  7015  0028AA  6E49               	movwf	_clcd_config_data,c
  7016                           
  7017                           ;clcd.c: 55: printf("row = %d", clcd_init_row);
  7018  0028AC  0EA1               	movlw	low STR_1
  7019  0028AE  6E24               	movwf	printf@f,c
  7020  0028B0  0EFF               	movlw	high STR_1
  7021  0028B2  6E25               	movwf	printf@f+1,c
  7022  0028B4  C037  F026         	movff	init_clcd_cusotom_lcd@clcd_init_row,?_printf+2
  7023  0028B8  6A27               	clrf	?_printf+3,c
  7024  0028BA  EC02  F011         	call	_printf	;wreg free
  7025                           
  7026                           ;clcd.c: 56: clcd_config_data.clcd_max_row = clcd_init_row;
  7027  0028BE  C037  F04A         	movff	init_clcd_cusotom_lcd@clcd_init_row,_clcd_config_data+1
  7028                           
  7029                           ;clcd.c: 57: printf("col = %d", clcd_init_col);
  7030  0028C2  0E98               	movlw	low STR_2
  7031  0028C4  6E24               	movwf	printf@f,c
  7032  0028C6  0EFF               	movlw	high STR_2
  7033  0028C8  6E25               	movwf	printf@f+1,c
  7034  0028CA  C036  F026         	movff	init_clcd_cusotom_lcd@clcd_init_col,?_printf+2
  7035  0028CE  6A27               	clrf	?_printf+3,c
  7036  0028D0  EC02  F011         	call	_printf	;wreg free
  7037                           
  7038                           ;clcd.c: 58: clcd_config_data.clcd_max_col = clcd_init_col;
  7039  0028D4  C036  F04B         	movff	init_clcd_cusotom_lcd@clcd_init_col,_clcd_config_data+2
  7040                           
  7041                           ;clcd.c: 59: printf("string_count = %d", (clcd_init_col / 4) * clcd_init_row);
  7042  0028D8  0E07               	movlw	low STR_3
  7043  0028DA  6E24               	movwf	printf@f,c
  7044  0028DC  0EFE               	movlw	high STR_3
  7045  0028DE  6E25               	movwf	printf@f+1,c
  7046  0028E0  0E00               	movlw	0
  7047  0028E2  6E13               	movwf	___awdiv@divisor+1,c
  7048  0028E4  0E04               	movlw	4
  7049  0028E6  6E12               	movwf	___awdiv@divisor,c
  7050  0028E8  C036  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7051  0028EC  6A11               	clrf	___awdiv@dividend+1,c
  7052  0028EE  ECC3  F016         	call	___awdiv	;wreg free
  7053  0028F2  C010  F018         	movff	?___awdiv,___wmul@multiplier
  7054  0028F6  C011  F019         	movff	?___awdiv+1,___wmul@multiplier+1
  7055  0028FA  C037  F01A         	movff	init_clcd_cusotom_lcd@clcd_init_row,___wmul@multiplicand
  7056  0028FE  6A1B               	clrf	___wmul@multiplicand+1,c
  7057  002900  ECD1  F01A         	call	___wmul	;wreg free
  7058  002904  C018  F026         	movff	?___wmul,?_printf+2
  7059  002908  C019  F027         	movff	?___wmul+1,?_printf+3
  7060  00290C  EC02  F011         	call	_printf	;wreg free
  7061                           
  7062                           ;clcd.c: 60: clcd_config_data.clcd_max_display_string = (clcd_init_col / 4) * clcd_init_
      +                          row;
  7063  002910  C036  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7064  002914  6A11               	clrf	___awdiv@dividend+1,c
  7065  002916  0E00               	movlw	0
  7066  002918  6E13               	movwf	___awdiv@divisor+1,c
  7067  00291A  0E04               	movlw	4
  7068  00291C  6E12               	movwf	___awdiv@divisor,c
  7069  00291E  ECC3  F016         	call	___awdiv	;wreg free
  7070  002922  5010               	movf	?___awdiv,w,c
  7071  002924  0237               	mulwf	init_clcd_cusotom_lcd@clcd_init_row,c
  7072  002926  CFF3 F04D          	movff	prodl,_clcd_config_data+4
  7073                           
  7074                           ;clcd.c: 61: clcd_config_data.uid_range = 'A' + clcd_config_data.clcd_max_display_string
      +                          ;
  7075  00292A  504D               	movf	_clcd_config_data+4,w,c
  7076  00292C  0F41               	addlw	65
  7077  00292E  6E4C               	movwf	_clcd_config_data+3,c
  7078                           
  7079                           ;clcd.c: 62: printf("uid_range = %d\r\n", clcd_config_data.uid_range);
  7080  002930  0E19               	movlw	low STR_4
  7081  002932  6E24               	movwf	printf@f,c
  7082  002934  0EFE               	movlw	high STR_4
  7083  002936  6E25               	movwf	printf@f+1,c
  7084  002938  C04C  F026         	movff	_clcd_config_data+3,?_printf+2
  7085  00293C  6A27               	clrf	?_printf+3,c
  7086  00293E  EC02  F011         	call	_printf	;wreg free
  7087  002942  0012               	return		;funcret
  7088  002944                     __end_of_init_clcd_cusotom_lcd:
  7089                           	opt stack 0
  7090                           tblptru	equ	0xFF8
  7091                           tblptrh	equ	0xFF7
  7092                           tblptrl	equ	0xFF6
  7093                           tablat	equ	0xFF5
  7094                           prodh	equ	0xFF4
  7095                           prodl	equ	0xFF3
  7096                           intcon	equ	0xFF2
  7097                           postinc0	equ	0xFEE
  7098                           wreg	equ	0xFE8
  7099                           indf1	equ	0xFE7
  7100                           postdec1	equ	0xFE5
  7101                           fsr1h	equ	0xFE2
  7102                           fsr1l	equ	0xFE1
  7103                           indf2	equ	0xFDF
  7104                           postinc2	equ	0xFDE
  7105                           fsr2h	equ	0xFDA
  7106                           fsr2l	equ	0xFD9
  7107                           status	equ	0xFD8
  7108                           
  7109 ;; *************** function _init_CLCD_config *****************
  7110 ;; Defined at:
  7111 ;;		line 15 in file "clcd.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;		None
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;		None
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  1    wreg      void 
  7118 ;; Registers used:
  7119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7129 ;;Total ram usage:        0 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; Hardware stack levels required when called:   10
  7132 ;; This function calls:
  7133 ;;		__delay_MS
  7134 ;;		_clcd_display_string_config
  7135 ;;		_memset
  7136 ;;		_reset_clcd
  7137 ;;		_write_lcd_cmd
  7138 ;; This function is called by:
  7139 ;;		_init_clcd_cusotom_lcd
  7140 ;;		_init_clcd_lcd_16x2
  7141 ;;		_init_clcd_lcd_20x4
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text24
  7146  002BAC                     __ptext24:
  7147                           	opt stack 0
  7148  002BAC                     _init_CLCD_config:
  7149                           	opt stack 17
  7150                           
  7151                           ;clcd.c: 16: memset(&clcd_config_data, 0, sizeof (CLCD_CONFIG_DATA));
  7152                           
  7153                           ;incstack = 0
  7154  002BAC  0E49               	movlw	low _clcd_config_data
  7155  002BAE  6E24               	movwf	memset@p1,c
  7156  002BB0  0E00               	movlw	high _clcd_config_data
  7157  002BB2  6E25               	movwf	memset@p1+1,c
  7158  002BB4  0E00               	movlw	0
  7159  002BB6  6E27               	movwf	memset@c+1,c
  7160  002BB8  0E00               	movlw	0
  7161  002BBA  6E26               	movwf	memset@c,c
  7162  002BBC  0E00               	movlw	0
  7163  002BBE  6E29               	movwf	memset@n+1,c
  7164  002BC0  0E05               	movlw	5
  7165  002BC2  6E28               	movwf	memset@n,c
  7166  002BC4  ECA5  F01A         	call	_memset	;wreg free
  7167                           
  7168                           ;clcd.c: 18: TRISD = 0x00;
  7169  002BC8  0E00               	movlw	0
  7170  002BCA  6E95               	movwf	3989,c	;volatile
  7171                           
  7172                           ;clcd.c: 21: TRISA = (unsigned char) (TRISA | 0xF0);
  7173  002BCC  5092               	movf	3986,w,c	;volatile
  7174  002BCE  09F0               	iorlw	240
  7175  002BD0  6E92               	movwf	3986,c	;volatile
  7176                           
  7177                           ;clcd.c: 23: PORTAbits.RA0 = 0;
  7178  002BD2  9080               	bcf	3968,0,c	;volatile
  7179                           
  7180                           ;clcd.c: 24: _delay_MS(250);
  7181  002BD4  0E00               	movlw	0
  7182  002BD6  6E11               	movwf	__delay_MS@delay+1,c
  7183  002BD8  0EFA               	movlw	250
  7184  002BDA  6E10               	movwf	__delay_MS@delay,c
  7185  002BDC  EC6C  F019         	call	__delay_MS	;wreg free
  7186                           
  7187                           ;clcd.c: 27: write_lcd_cmd(0X38);
  7188  002BE0  0E38               	movlw	56
  7189  002BE2  EC66  F01B         	call	_write_lcd_cmd
  7190                           
  7191                           ;clcd.c: 28: _delay_MS(250);
  7192  002BE6  0E00               	movlw	0
  7193  002BE8  6E11               	movwf	__delay_MS@delay+1,c
  7194  002BEA  0EFA               	movlw	250
  7195  002BEC  6E10               	movwf	__delay_MS@delay,c
  7196  002BEE  EC6C  F019         	call	__delay_MS	;wreg free
  7197                           
  7198                           ;clcd.c: 30: write_lcd_cmd(0x0E);;
  7199  002BF2  0E0E               	movlw	14
  7200  002BF4  EC66  F01B         	call	_write_lcd_cmd
  7201                           
  7202                           ;clcd.c: 31: _delay_MS(250);
  7203  002BF8  0E00               	movlw	0
  7204  002BFA  6E11               	movwf	__delay_MS@delay+1,c
  7205  002BFC  0EFA               	movlw	250
  7206  002BFE  6E10               	movwf	__delay_MS@delay,c
  7207  002C00  EC6C  F019         	call	__delay_MS	;wreg free
  7208                           
  7209                           ;clcd.c: 33: write_lcd_cmd(0x01);;
  7210  002C04  0E01               	movlw	1
  7211  002C06  EC66  F01B         	call	_write_lcd_cmd
  7212                           
  7213                           ;clcd.c: 34: _delay_MS(250);
  7214  002C0A  0E00               	movlw	0
  7215  002C0C  6E11               	movwf	__delay_MS@delay+1,c
  7216  002C0E  0EFA               	movlw	250
  7217  002C10  6E10               	movwf	__delay_MS@delay,c
  7218  002C12  EC6C  F019         	call	__delay_MS	;wreg free
  7219                           
  7220                           ;clcd.c: 36: write_lcd_cmd(0x06);;
  7221  002C16  0E06               	movlw	6
  7222  002C18  EC66  F01B         	call	_write_lcd_cmd
  7223                           
  7224                           ;clcd.c: 37: _delay_MS(250);
  7225  002C1C  0E00               	movlw	0
  7226  002C1E  6E11               	movwf	__delay_MS@delay+1,c
  7227  002C20  0EFA               	movlw	250
  7228  002C22  6E10               	movwf	__delay_MS@delay,c
  7229  002C24  EC6C  F019         	call	__delay_MS	;wreg free
  7230                           
  7231                           ;clcd.c: 39: write_lcd_cmd(0x0F);
  7232  002C28  0E0F               	movlw	15
  7233  002C2A  EC66  F01B         	call	_write_lcd_cmd
  7234                           
  7235                           ;clcd.c: 40: _delay_MS(250);
  7236  002C2E  0E00               	movlw	0
  7237  002C30  6E11               	movwf	__delay_MS@delay+1,c
  7238  002C32  0EFA               	movlw	250
  7239  002C34  6E10               	movwf	__delay_MS@delay,c
  7240  002C36  EC6C  F019         	call	__delay_MS	;wreg free
  7241                           
  7242                           ;clcd.c: 42: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7243  002C3A  0E00               	movlw	low _lcd_display_array
  7244  002C3C  6E24               	movwf	memset@p1,c
  7245  002C3E  0E01               	movlw	high _lcd_display_array
  7246  002C40  6E25               	movwf	memset@p1+1,c
  7247  002C42  0E00               	movlw	0
  7248  002C44  6E27               	movwf	memset@c+1,c
  7249  002C46  0E20               	movlw	32
  7250  002C48  6E26               	movwf	memset@c,c
  7251  002C4A  0E00               	movlw	0
  7252  002C4C  6E29               	movwf	memset@n+1,c
  7253  002C4E  0E50               	movlw	80
  7254  002C50  6E28               	movwf	memset@n,c
  7255  002C52  ECA5  F01A         	call	_memset	;wreg free
  7256                           
  7257                           ;clcd.c: 44: clcd_display_string_config();
  7258  002C56  ECDE  F017         	call	_clcd_display_string_config	;wreg free
  7259                           
  7260                           ;clcd.c: 46: reset_clcd();
  7261  002C5A  ECEF  F01B         	call	_reset_clcd	;wreg free
  7262  002C5E  0012               	return		;funcret
  7263  002C60                     __end_of_init_CLCD_config:
  7264                           	opt stack 0
  7265                           tblptru	equ	0xFF8
  7266                           tblptrh	equ	0xFF7
  7267                           tblptrl	equ	0xFF6
  7268                           tablat	equ	0xFF5
  7269                           prodh	equ	0xFF4
  7270                           prodl	equ	0xFF3
  7271                           intcon	equ	0xFF2
  7272                           postinc0	equ	0xFEE
  7273                           wreg	equ	0xFE8
  7274                           indf1	equ	0xFE7
  7275                           postdec1	equ	0xFE5
  7276                           fsr1h	equ	0xFE2
  7277                           fsr1l	equ	0xFE1
  7278                           indf2	equ	0xFDF
  7279                           postinc2	equ	0xFDE
  7280                           fsr2h	equ	0xFDA
  7281                           fsr2l	equ	0xFD9
  7282                           status	equ	0xFD8
  7283                           
  7284 ;; *************** function _write_lcd_cmd *****************
  7285 ;; Defined at:
  7286 ;;		line 298 in file "clcd.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;  cmd             1    wreg     unsigned char 
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;  cmd             1   22[COMRAM] unsigned char 
  7291 ;; Return value:  Size  Location     Type
  7292 ;;                  1    wreg      void 
  7293 ;; Registers used:
  7294 ;;		wreg, status,2, status,0, cstack
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7303 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7304 ;;Total ram usage:        1 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; Hardware stack levels required when called:    6
  7307 ;; This function calls:
  7308 ;;		_delay
  7309 ;; This function is called by:
  7310 ;;		_init_CLCD_config
  7311 ;;		_set_cursor
  7312 ;;		_char_enter_mode_left_to_right
  7313 ;;		_display_text
  7314 ;;		_set_cursor_at_home
  7315 ;;		_display_and_cursor_control
  7316 ;;		_scroll_display_right
  7317 ;;		_scroll_display_left
  7318 ;;		_put_string
  7319 ;;		_put_char
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           	psect	text25
  7324  0036CC                     __ptext25:
  7325                           	opt stack 0
  7326  0036CC                     _write_lcd_cmd:
  7327                           	opt stack 22
  7328                           
  7329                           ;incstack = 0
  7330                           ;write_lcd_cmd@cmd stored from wreg
  7331  0036CC  6E17               	movwf	write_lcd_cmd@cmd,c
  7332                           
  7333                           ;clcd.c: 299: PORTD = cmd;
  7334  0036CE  C017  FF83         	movff	write_lcd_cmd@cmd,3971	;volatile
  7335                           
  7336                           ;clcd.c: 300: PORTAbits.RA2 = 0;
  7337  0036D2  9480               	bcf	3968,2,c	;volatile
  7338                           
  7339                           ;clcd.c: 301: PORTAbits.RA1 = 0;
  7340  0036D4  9280               	bcf	3968,1,c	;volatile
  7341                           
  7342                           ;clcd.c: 302: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7343  0036D6  8080               	bsf	3968,0,c	;volatile
  7344  0036D8  0E00               	movlw	0
  7345  0036DA  6E11               	movwf	delay@delay+1,c
  7346  0036DC  0E01               	movlw	1
  7347  0036DE  6E10               	movwf	delay@delay,c
  7348  0036E0  ECFF  F018         	call	_delay	;wreg free
  7349  0036E4  9080               	bcf	3968,0,c	;volatile
  7350  0036E6  0012               	return		;funcret
  7351  0036E8                     __end_of_write_lcd_cmd:
  7352                           	opt stack 0
  7353                           tblptru	equ	0xFF8
  7354                           tblptrh	equ	0xFF7
  7355                           tblptrl	equ	0xFF6
  7356                           tablat	equ	0xFF5
  7357                           prodh	equ	0xFF4
  7358                           prodl	equ	0xFF3
  7359                           intcon	equ	0xFF2
  7360                           postinc0	equ	0xFEE
  7361                           wreg	equ	0xFE8
  7362                           indf1	equ	0xFE7
  7363                           postdec1	equ	0xFE5
  7364                           fsr1h	equ	0xFE2
  7365                           fsr1l	equ	0xFE1
  7366                           indf2	equ	0xFDF
  7367                           postinc2	equ	0xFDE
  7368                           fsr2h	equ	0xFDA
  7369                           fsr2l	equ	0xFD9
  7370                           status	equ	0xFD8
  7371                           
  7372 ;; *************** function _reset_clcd *****************
  7373 ;; Defined at:
  7374 ;;		line 10 in file "clcd.c"
  7375 ;; Parameters:    Size  Location     Type
  7376 ;;		None
  7377 ;; Auto vars:     Size  Location     Type
  7378 ;;		None
  7379 ;; Return value:  Size  Location     Type
  7380 ;;                  1    wreg      void 
  7381 ;; Registers used:
  7382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7383 ;; Tracked objects:
  7384 ;;		On entry : 0/0
  7385 ;;		On exit  : 0/0
  7386 ;;		Unchanged: 0/0
  7387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7392 ;;Total ram usage:        0 bytes
  7393 ;; Hardware stack levels used:    1
  7394 ;; Hardware stack levels required when called:    9
  7395 ;; This function calls:
  7396 ;;		_clear_display_array
  7397 ;;		_reset_display_structure_count
  7398 ;; This function is called by:
  7399 ;;		_init_CLCD_config
  7400 ;; This function uses a non-reentrant model
  7401 ;;
  7402                           
  7403                           	psect	text26
  7404  0037DE                     __ptext26:
  7405                           	opt stack 0
  7406  0037DE                     _reset_clcd:
  7407                           	opt stack 17
  7408                           
  7409                           ;clcd.c: 11: clear_display_array();
  7410                           
  7411                           ;incstack = 0
  7412  0037DE  EC09  F01B         	call	_clear_display_array	;wreg free
  7413                           
  7414                           ;clcd.c: 12: reset_display_structure_count();
  7415  0037E2  EC97  F01B         	call	_reset_display_structure_count	;wreg free
  7416  0037E6  0012               	return		;funcret
  7417  0037E8                     __end_of_reset_clcd:
  7418                           	opt stack 0
  7419                           tblptru	equ	0xFF8
  7420                           tblptrh	equ	0xFF7
  7421                           tblptrl	equ	0xFF6
  7422                           tablat	equ	0xFF5
  7423                           prodh	equ	0xFF4
  7424                           prodl	equ	0xFF3
  7425                           intcon	equ	0xFF2
  7426                           postinc0	equ	0xFEE
  7427                           wreg	equ	0xFE8
  7428                           indf1	equ	0xFE7
  7429                           postdec1	equ	0xFE5
  7430                           fsr1h	equ	0xFE2
  7431                           fsr1l	equ	0xFE1
  7432                           indf2	equ	0xFDF
  7433                           postinc2	equ	0xFDE
  7434                           fsr2h	equ	0xFDA
  7435                           fsr2l	equ	0xFD9
  7436                           status	equ	0xFD8
  7437                           
  7438 ;; *************** function _clear_display_array *****************
  7439 ;; Defined at:
  7440 ;;		line 399 in file "clcd.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;		None
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;		None
  7445 ;; Return value:  Size  Location     Type
  7446 ;;                  1    wreg      void 
  7447 ;; Registers used:
  7448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7449 ;; Tracked objects:
  7450 ;;		On entry : 0/0
  7451 ;;		On exit  : 0/0
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7458 ;;Total ram usage:        0 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; Hardware stack levels required when called:    8
  7461 ;; This function calls:
  7462 ;;		_memset
  7463 ;;		_reset_display_structure_count
  7464 ;; This function is called by:
  7465 ;;		_reset_clcd
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           	psect	text27
  7470  003612                     __ptext27:
  7471                           	opt stack 0
  7472  003612                     _clear_display_array:
  7473                           	opt stack 17
  7474                           
  7475                           ;clcd.c: 400: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7476                           
  7477                           ;incstack = 0
  7478  003612  0E00               	movlw	low _lcd_display_array
  7479  003614  6E24               	movwf	memset@p1,c
  7480  003616  0E01               	movlw	high _lcd_display_array
  7481  003618  6E25               	movwf	memset@p1+1,c
  7482  00361A  0E00               	movlw	0
  7483  00361C  6E27               	movwf	memset@c+1,c
  7484  00361E  0E20               	movlw	32
  7485  003620  6E26               	movwf	memset@c,c
  7486  003622  0E00               	movlw	0
  7487  003624  6E29               	movwf	memset@n+1,c
  7488  003626  0E50               	movlw	80
  7489  003628  6E28               	movwf	memset@n,c
  7490  00362A  ECA5  F01A         	call	_memset	;wreg free
  7491                           
  7492                           ;clcd.c: 401: reset_display_structure_count();
  7493  00362E  EC97  F01B         	call	_reset_display_structure_count	;wreg free
  7494  003632  0012               	return		;funcret
  7495  003634                     __end_of_clear_display_array:
  7496                           	opt stack 0
  7497                           tblptru	equ	0xFF8
  7498                           tblptrh	equ	0xFF7
  7499                           tblptrl	equ	0xFF6
  7500                           tablat	equ	0xFF5
  7501                           prodh	equ	0xFF4
  7502                           prodl	equ	0xFF3
  7503                           intcon	equ	0xFF2
  7504                           postinc0	equ	0xFEE
  7505                           wreg	equ	0xFE8
  7506                           indf1	equ	0xFE7
  7507                           postdec1	equ	0xFE5
  7508                           fsr1h	equ	0xFE2
  7509                           fsr1l	equ	0xFE1
  7510                           indf2	equ	0xFDF
  7511                           postinc2	equ	0xFDE
  7512                           fsr2h	equ	0xFDA
  7513                           fsr2l	equ	0xFD9
  7514                           status	equ	0xFD8
  7515                           
  7516 ;; *************** function _reset_display_structure_count *****************
  7517 ;; Defined at:
  7518 ;;		line 394 in file "clcd.c"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;		None
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;		None
  7523 ;; Return value:  Size  Location     Type
  7524 ;;                  1    wreg      void 
  7525 ;; Registers used:
  7526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7527 ;; Tracked objects:
  7528 ;;		On entry : 0/0
  7529 ;;		On exit  : 0/0
  7530 ;;		Unchanged: 0/0
  7531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;Total ram usage:        0 bytes
  7537 ;; Hardware stack levels used:    1
  7538 ;; Hardware stack levels required when called:    7
  7539 ;; This function calls:
  7540 ;;		_clear_display_structure
  7541 ;; This function is called by:
  7542 ;;		_reset_clcd
  7543 ;;		_clear_display_array
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           	psect	text28
  7548  00372E                     __ptext28:
  7549                           	opt stack 0
  7550  00372E                     _reset_display_structure_count:
  7551                           	opt stack 18
  7552                           
  7553                           ;clcd.c: 395: display_struct_count = 0;
  7554                           
  7555                           ;incstack = 0
  7556  00372E  0E00               	movlw	0
  7557  003730  0100               	movlb	0	; () banked
  7558  003732  6F75               	movwf	(_display_struct_count+1)& (0+255),b
  7559  003734  0E00               	movlw	0
  7560  003736  6F74               	movwf	_display_struct_count& (0+255),b
  7561                           
  7562                           ; BSR set to: 0
  7563                           ;clcd.c: 396: clear_display_structure();
  7564  003738  EC2A  F01B         	call	_clear_display_structure	;wreg free
  7565  00373C  0012               	return		;funcret
  7566  00373E                     __end_of_reset_display_structure_count:
  7567                           	opt stack 0
  7568                           tblptru	equ	0xFF8
  7569                           tblptrh	equ	0xFF7
  7570                           tblptrl	equ	0xFF6
  7571                           tablat	equ	0xFF5
  7572                           prodh	equ	0xFF4
  7573                           prodl	equ	0xFF3
  7574                           intcon	equ	0xFF2
  7575                           postinc0	equ	0xFEE
  7576                           wreg	equ	0xFE8
  7577                           indf1	equ	0xFE7
  7578                           postdec1	equ	0xFE5
  7579                           fsr1h	equ	0xFE2
  7580                           fsr1l	equ	0xFE1
  7581                           indf2	equ	0xFDF
  7582                           postinc2	equ	0xFDE
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _clear_display_structure *****************
  7588 ;; Defined at:
  7589 ;;		line 390 in file "clcd.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;		None
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;		None
  7594 ;; Return value:  Size  Location     Type
  7595 ;;                  1    wreg      void 
  7596 ;; Registers used:
  7597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7598 ;; Tracked objects:
  7599 ;;		On entry : 0/0
  7600 ;;		On exit  : 0/0
  7601 ;;		Unchanged: 0/0
  7602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;Total ram usage:        0 bytes
  7608 ;; Hardware stack levels used:    1
  7609 ;; Hardware stack levels required when called:    6
  7610 ;; This function calls:
  7611 ;;		_memset
  7612 ;; This function is called by:
  7613 ;;		_reset_display_structure_count
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           	psect	text29
  7618  003654                     __ptext29:
  7619                           	opt stack 0
  7620  003654                     _clear_display_structure:
  7621                           	opt stack 18
  7622                           
  7623                           ;clcd.c: 391: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details
      +                          ));
  7624                           
  7625                           ;incstack = 0
  7626  003654  0E96               	movlw	low _clcd_display_string_details
  7627  003656  6E24               	movwf	memset@p1,c
  7628  003658  0E02               	movlw	high _clcd_display_string_details
  7629  00365A  6E25               	movwf	memset@p1+1,c
  7630  00365C  0E00               	movlw	0
  7631  00365E  6E27               	movwf	memset@c+1,c
  7632  003660  0E00               	movlw	0
  7633  003662  6E26               	movwf	memset@c,c
  7634  003664  0E04               	movlw	4
  7635  003666  6E29               	movwf	memset@n+1,c
  7636  003668  0E38               	movlw	56
  7637  00366A  6E28               	movwf	memset@n,c
  7638  00366C  ECA5  F01A         	call	_memset	;wreg free
  7639  003670  0012               	return		;funcret
  7640  003672                     __end_of_clear_display_structure:
  7641                           	opt stack 0
  7642                           tblptru	equ	0xFF8
  7643                           tblptrh	equ	0xFF7
  7644                           tblptrl	equ	0xFF6
  7645                           tablat	equ	0xFF5
  7646                           prodh	equ	0xFF4
  7647                           prodl	equ	0xFF3
  7648                           intcon	equ	0xFF2
  7649                           postinc0	equ	0xFEE
  7650                           wreg	equ	0xFE8
  7651                           indf1	equ	0xFE7
  7652                           postdec1	equ	0xFE5
  7653                           fsr1h	equ	0xFE2
  7654                           fsr1l	equ	0xFE1
  7655                           indf2	equ	0xFDF
  7656                           postinc2	equ	0xFDE
  7657                           fsr2h	equ	0xFDA
  7658                           fsr2l	equ	0xFD9
  7659                           status	equ	0xFD8
  7660                           
  7661 ;; *************** function _clcd_display_string_config *****************
  7662 ;; Defined at:
  7663 ;;		line 216 in file "clcd.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;		None
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;		None
  7668 ;; Return value:  Size  Location     Type
  7669 ;;                  1    wreg      void 
  7670 ;; Registers used:
  7671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;Total ram usage:        0 bytes
  7682 ;; Hardware stack levels used:    1
  7683 ;; Hardware stack levels required when called:    8
  7684 ;; This function calls:
  7685 ;;		_memcpy
  7686 ;;		_memset
  7687 ;;		_printf
  7688 ;;		_write_str
  7689 ;; This function is called by:
  7690 ;;		_init_CLCD_config
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           	psect	text30
  7695  002FBC                     __ptext30:
  7696                           	opt stack 0
  7697  002FBC                     _clcd_display_string_config:
  7698                           	opt stack 18
  7699                           
  7700                           ;clcd.c: 217: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7701                           
  7702                           ;incstack = 0
  7703  002FBC  0E00               	movlw	low _lcd_display_array
  7704  002FBE  6E24               	movwf	memset@p1,c
  7705  002FC0  0E01               	movlw	high _lcd_display_array
  7706  002FC2  6E25               	movwf	memset@p1+1,c
  7707  002FC4  0E00               	movlw	0
  7708  002FC6  6E27               	movwf	memset@c+1,c
  7709  002FC8  0E20               	movlw	32
  7710  002FCA  6E26               	movwf	memset@c,c
  7711  002FCC  0E00               	movlw	0
  7712  002FCE  6E29               	movwf	memset@n+1,c
  7713  002FD0  0E50               	movlw	80
  7714  002FD2  6E28               	movwf	memset@n,c
  7715  002FD4  ECA5  F01A         	call	_memset	;wreg free
  7716                           
  7717                           ;clcd.c: 218: printf("sizeof(str) = %d\r\n", sizeof (str));
  7718  002FD8  0EE2               	movlw	low STR_13
  7719  002FDA  6E24               	movwf	printf@f,c
  7720  002FDC  0EFD               	movlw	high STR_13
  7721  002FDE  6E25               	movwf	printf@f+1,c
  7722  002FE0  0E00               	movlw	0
  7723  002FE2  6E27               	movwf	?_printf+3,c
  7724  002FE4  0E0D               	movlw	13
  7725  002FE6  6E26               	movwf	?_printf+2,c
  7726  002FE8  EC02  F011         	call	_printf	;wreg free
  7727                           
  7728                           ;clcd.c: 219: memcpy(lcd_display_array[0], str, sizeof (str));
  7729  002FEC  0E00               	movlw	low _lcd_display_array
  7730  002FEE  6E10               	movwf	memcpy@d1,c
  7731  002FF0  0E01               	movlw	high _lcd_display_array
  7732  002FF2  6E11               	movwf	memcpy@d1+1,c
  7733  002FF4  0EEA               	movlw	low _str
  7734  002FF6  6E12               	movwf	memcpy@s1,c
  7735  002FF8  0E00               	movlw	high _str
  7736  002FFA  6E13               	movwf	memcpy@s1+1,c
  7737  002FFC  0E00               	movlw	0
  7738  002FFE  6E15               	movwf	memcpy@n+1,c
  7739  003000  0E0D               	movlw	13
  7740  003002  6E14               	movwf	memcpy@n,c
  7741  003004  ECAF  F019         	call	_memcpy	;wreg free
  7742                           
  7743                           ;clcd.c: 220: write_str(lcd_display_array[0]);
  7744  003008  0E00               	movlw	low _lcd_display_array
  7745  00300A  6E18               	movwf	write_str@str,c
  7746  00300C  0E01               	movlw	high _lcd_display_array
  7747  00300E  6E19               	movwf	write_str@str+1,c
  7748  003010  ECEE  F019         	call	_write_str	;wreg free
  7749  003014  0012               	return		;funcret
  7750  003016                     __end_of_clcd_display_string_config:
  7751                           	opt stack 0
  7752                           tblptru	equ	0xFF8
  7753                           tblptrh	equ	0xFF7
  7754                           tblptrl	equ	0xFF6
  7755                           tablat	equ	0xFF5
  7756                           prodh	equ	0xFF4
  7757                           prodl	equ	0xFF3
  7758                           intcon	equ	0xFF2
  7759                           postinc0	equ	0xFEE
  7760                           wreg	equ	0xFE8
  7761                           indf1	equ	0xFE7
  7762                           postdec1	equ	0xFE5
  7763                           fsr1h	equ	0xFE2
  7764                           fsr1l	equ	0xFE1
  7765                           indf2	equ	0xFDF
  7766                           postinc2	equ	0xFDE
  7767                           fsr2h	equ	0xFDA
  7768                           fsr2l	equ	0xFD9
  7769                           status	equ	0xFD8
  7770                           
  7771 ;; *************** function _write_str *****************
  7772 ;; Defined at:
  7773 ;;		line 312 in file "clcd.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;  str             2   23[COMRAM] PTR const unsigned char 
  7776 ;;		 -> lcd_display_array(80), 
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;  i               1   25[COMRAM] unsigned char 
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  1    wreg      void 
  7781 ;; Registers used:
  7782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7783 ;; Tracked objects:
  7784 ;;		On entry : 0/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7791 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7792 ;;Total ram usage:        3 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; Hardware stack levels required when called:    7
  7795 ;; This function calls:
  7796 ;;		_write_lcd_data
  7797 ;; This function is called by:
  7798 ;;		_clcd_display_string_config
  7799 ;;		_display_text
  7800 ;;		_put_string
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           	psect	text31
  7805  0033DC                     __ptext31:
  7806                           	opt stack 0
  7807  0033DC                     _write_str:
  7808                           	opt stack 21
  7809                           
  7810                           ;clcd.c: 314: unsigned char i = 0;
  7811                           
  7812                           ;incstack = 0
  7813  0033DC  0E00               	movlw	0
  7814  0033DE  6E1A               	movwf	write_str@i,c
  7815                           
  7816                           ;clcd.c: 315: while (i < clcd_config_data.clcd_max_col) {
  7817  0033E0  D015               	goto	l5843
  7818  0033E2                     l5833:
  7819                           
  7820                           ;clcd.c: 316: if(*str != (0))
  7821  0033E2  C018  FFD9         	movff	write_str@str,fsr2l
  7822  0033E6  C019  FFDA         	movff	write_str@str+1,fsr2h
  7823  0033EA  50DF               	movf	indf2,w,c
  7824  0033EC  B4D8               	btfsc	status,2,c
  7825  0033EE  D00A               	goto	l5839
  7826                           
  7827                           ;clcd.c: 317: write_lcd_data(*str++);
  7828  0033F0  C018  FFD9         	movff	write_str@str,fsr2l
  7829  0033F4  C019  FFDA         	movff	write_str@str+1,fsr2h
  7830  0033F8  50DF               	movf	indf2,w,c
  7831  0033FA  EC74  F01B         	call	_write_lcd_data
  7832  0033FE  4A18               	infsnz	write_str@str,f,c
  7833  003400  2A19               	incf	write_str@str+1,f,c
  7834  003402  D003               	goto	l5841
  7835  003404                     l5839:
  7836                           
  7837                           ;clcd.c: 318: else
  7838                           ;clcd.c: 319: write_lcd_data(' ');
  7839  003404  0E20               	movlw	32
  7840  003406  EC74  F01B         	call	_write_lcd_data
  7841  00340A                     l5841:
  7842                           
  7843                           ;clcd.c: 321: i++;
  7844  00340A  2A1A               	incf	write_str@i,f,c
  7845  00340C                     l5843:
  7846  00340C  504B               	movf	_clcd_config_data+2,w,c
  7847  00340E  5C1A               	subwf	write_str@i,w,c
  7848  003410  B0D8               	btfsc	status,0,c
  7849  003412  0012               	return	
  7850  003414  D7E6               	goto	l5833
  7851  003416                     __end_of_write_str:
  7852                           	opt stack 0
  7853                           tblptru	equ	0xFF8
  7854                           tblptrh	equ	0xFF7
  7855                           tblptrl	equ	0xFF6
  7856                           tablat	equ	0xFF5
  7857                           prodh	equ	0xFF4
  7858                           prodl	equ	0xFF3
  7859                           intcon	equ	0xFF2
  7860                           postinc0	equ	0xFEE
  7861                           wreg	equ	0xFE8
  7862                           indf1	equ	0xFE7
  7863                           postdec1	equ	0xFE5
  7864                           fsr1h	equ	0xFE2
  7865                           fsr1l	equ	0xFE1
  7866                           indf2	equ	0xFDF
  7867                           postinc2	equ	0xFDE
  7868                           fsr2h	equ	0xFDA
  7869                           fsr2l	equ	0xFD9
  7870                           status	equ	0xFD8
  7871                           
  7872 ;; *************** function _write_lcd_data *****************
  7873 ;; Defined at:
  7874 ;;		line 305 in file "clcd.c"
  7875 ;; Parameters:    Size  Location     Type
  7876 ;;  data            1    wreg     unsigned char 
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;  data            1   22[COMRAM] unsigned char 
  7879 ;; Return value:  Size  Location     Type
  7880 ;;                  1    wreg      void 
  7881 ;; Registers used:
  7882 ;;		wreg, status,2, status,0, cstack
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7891 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7892 ;;Total ram usage:        1 bytes
  7893 ;; Hardware stack levels used:    1
  7894 ;; Hardware stack levels required when called:    6
  7895 ;; This function calls:
  7896 ;;		_delay
  7897 ;; This function is called by:
  7898 ;;		_write_str
  7899 ;;		_put_char
  7900 ;; This function uses a non-reentrant model
  7901 ;;
  7902                           
  7903                           	psect	text32
  7904  0036E8                     __ptext32:
  7905                           	opt stack 0
  7906  0036E8                     _write_lcd_data:
  7907                           	opt stack 21
  7908                           
  7909                           ;incstack = 0
  7910                           ;write_lcd_data@data stored from wreg
  7911  0036E8  6E17               	movwf	write_lcd_data@data,c
  7912                           
  7913                           ;clcd.c: 306: PORTAbits.RA2 = 1;
  7914  0036EA  8480               	bsf	3968,2,c	;volatile
  7915                           
  7916                           ;clcd.c: 307: PORTAbits.RA1 = 0;
  7917  0036EC  9280               	bcf	3968,1,c	;volatile
  7918                           
  7919                           ;clcd.c: 308: PORTD = data;
  7920  0036EE  C017  FF83         	movff	write_lcd_data@data,3971	;volatile
  7921                           
  7922                           ;clcd.c: 309: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7923  0036F2  8080               	bsf	3968,0,c	;volatile
  7924  0036F4  0E00               	movlw	0
  7925  0036F6  6E11               	movwf	delay@delay+1,c
  7926  0036F8  0E01               	movlw	1
  7927  0036FA  6E10               	movwf	delay@delay,c
  7928  0036FC  ECFF  F018         	call	_delay	;wreg free
  7929  003700  9080               	bcf	3968,0,c	;volatile
  7930  003702  0012               	return		;funcret
  7931  003704                     __end_of_write_lcd_data:
  7932                           	opt stack 0
  7933                           tblptru	equ	0xFF8
  7934                           tblptrh	equ	0xFF7
  7935                           tblptrl	equ	0xFF6
  7936                           tablat	equ	0xFF5
  7937                           prodh	equ	0xFF4
  7938                           prodl	equ	0xFF3
  7939                           intcon	equ	0xFF2
  7940                           postinc0	equ	0xFEE
  7941                           wreg	equ	0xFE8
  7942                           indf1	equ	0xFE7
  7943                           postdec1	equ	0xFE5
  7944                           fsr1h	equ	0xFE2
  7945                           fsr1l	equ	0xFE1
  7946                           indf2	equ	0xFDF
  7947                           postinc2	equ	0xFDE
  7948                           fsr2h	equ	0xFDA
  7949                           fsr2l	equ	0xFD9
  7950                           status	equ	0xFD8
  7951                           
  7952 ;; *************** function _delay *****************
  7953 ;; Defined at:
  7954 ;;		line 5 in file "delay.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;  delay           2   15[COMRAM] int 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;  i               2   20[COMRAM] int 
  7959 ;;  val             2   18[COMRAM] int 
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  1    wreg      void 
  7962 ;; Registers used:
  7963 ;;		wreg, status,2, status,0
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7969 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;Total ram usage:        7 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    5
  7976 ;; This function calls:
  7977 ;;		Nothing
  7978 ;; This function is called by:
  7979 ;;		_write_lcd_cmd
  7980 ;;		_write_lcd_data
  7981 ;;		_is_busy
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           	psect	text33
  7986  0031FE                     __ptext33:
  7987                           	opt stack 0
  7988  0031FE                     _delay:
  7989                           	opt stack 21
  7990                           
  7991                           ;delay.c: 7: int val = 0, i;
  7992                           
  7993                           ;incstack = 0
  7994  0031FE  0E00               	movlw	0
  7995  003200  6E14               	movwf	delay@val+1,c
  7996  003202  0E00               	movlw	0
  7997  003204  6E13               	movwf	delay@val,c
  7998                           
  7999                           ;delay.c: 8: for (val = 0; val < delay; val++) {
  8000  003206  0E00               	movlw	0
  8001  003208  6E14               	movwf	delay@val+1,c
  8002  00320A  0E00               	movlw	0
  8003  00320C  6E13               	movwf	delay@val,c
  8004  00320E  D011               	goto	l5657
  8005  003210                     l5645:
  8006                           
  8007                           ;delay.c: 9: for(i=0; i<350; i++)
  8008  003210  0E00               	movlw	0
  8009  003212  6E16               	movwf	delay@i+1,c
  8010  003214  0E00               	movlw	0
  8011  003216  6E15               	movwf	delay@i,c
  8012  003218                     l5647:
  8013  003218  BE16               	btfsc	delay@i+1,7,c
  8014  00321A  D006               	goto	l5651
  8015  00321C  0E5E               	movlw	94
  8016  00321E  5C15               	subwf	delay@i,w,c
  8017  003220  0E01               	movlw	1
  8018  003222  5816               	subwfb	delay@i+1,w,c
  8019  003224  B0D8               	btfsc	status,0,c
  8020  003226  D003               	goto	l5655
  8021  003228                     l5651:
  8022                           
  8023                           ;delay.c: 10: {
  8024  003228  4A15               	infsnz	delay@i,f,c
  8025  00322A  2A16               	incf	delay@i+1,f,c
  8026  00322C  D7F5               	goto	l5647
  8027  00322E                     l5655:
  8028  00322E  4A13               	infsnz	delay@val,f,c
  8029  003230  2A14               	incf	delay@val+1,f,c
  8030  003232                     l5657:
  8031  003232  5010               	movf	delay@delay,w,c
  8032  003234  5C13               	subwf	delay@val,w,c
  8033  003236  5014               	movf	delay@val+1,w,c
  8034  003238  0A80               	xorlw	128
  8035  00323A  6E12               	movwf	??_delay& (0+255),c
  8036  00323C  5011               	movf	delay@delay+1,w,c
  8037  00323E  0A80               	xorlw	128
  8038  003240  5812               	subwfb	??_delay& (0+255),w,c
  8039  003242  B0D8               	btfsc	status,0,c
  8040  003244  0012               	return	
  8041  003246  D7E4               	goto	l5645
  8042  003248                     __end_of_delay:
  8043                           	opt stack 0
  8044                           tblptru	equ	0xFF8
  8045                           tblptrh	equ	0xFF7
  8046                           tblptrl	equ	0xFF6
  8047                           tablat	equ	0xFF5
  8048                           prodh	equ	0xFF4
  8049                           prodl	equ	0xFF3
  8050                           intcon	equ	0xFF2
  8051                           postinc0	equ	0xFEE
  8052                           wreg	equ	0xFE8
  8053                           indf1	equ	0xFE7
  8054                           postdec1	equ	0xFE5
  8055                           fsr1h	equ	0xFE2
  8056                           fsr1l	equ	0xFE1
  8057                           indf2	equ	0xFDF
  8058                           postinc2	equ	0xFDE
  8059                           fsr2h	equ	0xFDA
  8060                           fsr2l	equ	0xFD9
  8061                           status	equ	0xFD8
  8062                           
  8063 ;; *************** function _memcpy *****************
  8064 ;; Defined at:
  8065 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memcpy.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;  d1              2   15[COMRAM] PTR void 
  8068 ;;		 -> lcd_display_array(80), 
  8069 ;;  s1              2   17[COMRAM] PTR const void 
  8070 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1080), 
  8071 ;;  n               2   19[COMRAM] unsigned int 
  8072 ;; Auto vars:     Size  Location     Type
  8073 ;;  s               2   23[COMRAM] PTR const unsigned char 
  8074 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1080), 
  8075 ;;  d               2   21[COMRAM] PTR unsigned char 
  8076 ;;		 -> lcd_display_array(80), 
  8077 ;; Return value:  Size  Location     Type
  8078 ;;                  2   15[COMRAM] PTR void 
  8079 ;; Registers used:
  8080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8081 ;; Tracked objects:
  8082 ;;		On entry : 0/0
  8083 ;;		On exit  : 0/0
  8084 ;;		Unchanged: 0/0
  8085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8086 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8089 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8090 ;;Total ram usage:       10 bytes
  8091 ;; Hardware stack levels used:    1
  8092 ;; Hardware stack levels required when called:    5
  8093 ;; This function calls:
  8094 ;;		Nothing
  8095 ;; This function is called by:
  8096 ;;		_clcd_display_string_config
  8097 ;;		_scroll_left_to_right
  8098 ;;		_scroll_right_to_left
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           	psect	text34
  8103  00335E                     __ptext34:
  8104                           	opt stack 0
  8105  00335E                     _memcpy:
  8106                           	opt stack 23
  8107                           
  8108                           ;incstack = 0
  8109  00335E  C012  F018         	movff	memcpy@s1,memcpy@s
  8110  003362  C013  F019         	movff	memcpy@s1+1,memcpy@s+1
  8111  003366  C010  F016         	movff	memcpy@d1,memcpy@d
  8112  00336A  C011  F017         	movff	memcpy@d1+1,memcpy@d+1
  8113  00336E  D00E               	goto	l5829
  8114  003370                     l5823:
  8115  003370  C018  FFD9         	movff	memcpy@s,fsr2l
  8116  003374  C019  FFDA         	movff	memcpy@s+1,fsr2h
  8117  003378  C016  FFE1         	movff	memcpy@d,fsr1l
  8118  00337C  C017  FFE2         	movff	memcpy@d+1,fsr1h
  8119  003380  CFDF FFE7          	movff	indf2,indf1
  8120  003384  4A18               	infsnz	memcpy@s,f,c
  8121  003386  2A19               	incf	memcpy@s+1,f,c
  8122  003388  4A16               	infsnz	memcpy@d,f,c
  8123  00338A  2A17               	incf	memcpy@d+1,f,c
  8124  00338C                     l5829:
  8125  00338C  0614               	decf	memcpy@n,f,c
  8126  00338E  A0D8               	btfss	status,0,c
  8127  003390  0615               	decf	memcpy@n+1,f,c
  8128  003392  2814               	incf	memcpy@n,w,c
  8129  003394  E1ED               	bnz	l5823
  8130  003396  2815               	incf	memcpy@n+1,w,c
  8131  003398  B4D8               	btfsc	status,2,c
  8132  00339A  0012               	return	
  8133  00339C  D7E9               	goto	l5823
  8134  00339E                     __end_of_memcpy:
  8135                           	opt stack 0
  8136                           tblptru	equ	0xFF8
  8137                           tblptrh	equ	0xFF7
  8138                           tblptrl	equ	0xFF6
  8139                           tablat	equ	0xFF5
  8140                           prodh	equ	0xFF4
  8141                           prodl	equ	0xFF3
  8142                           intcon	equ	0xFF2
  8143                           postinc0	equ	0xFEE
  8144                           wreg	equ	0xFE8
  8145                           indf1	equ	0xFE7
  8146                           postdec1	equ	0xFE5
  8147                           fsr1h	equ	0xFE2
  8148                           fsr1l	equ	0xFE1
  8149                           indf2	equ	0xFDF
  8150                           postinc2	equ	0xFDE
  8151                           fsr2h	equ	0xFDA
  8152                           fsr2l	equ	0xFD9
  8153                           status	equ	0xFD8
  8154                           
  8155 ;; *************** function __delay_MS *****************
  8156 ;; Defined at:
  8157 ;;		line 29 in file "delay.c"
  8158 ;; Parameters:    Size  Location     Type
  8159 ;;  delay           2   15[COMRAM] int 
  8160 ;; Auto vars:     Size  Location     Type
  8161 ;;  val             2   18[COMRAM] int 
  8162 ;; Return value:  Size  Location     Type
  8163 ;;                  1    wreg      void 
  8164 ;; Registers used:
  8165 ;;		wreg, status,2, status,0, cstack
  8166 ;; Tracked objects:
  8167 ;;		On entry : 0/0
  8168 ;;		On exit  : 0/0
  8169 ;;		Unchanged: 0/0
  8170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8171 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8172 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;Total ram usage:        5 bytes
  8176 ;; Hardware stack levels used:    1
  8177 ;; Hardware stack levels required when called:    6
  8178 ;; This function calls:
  8179 ;;		_TMR1_HasOverflowOccured
  8180 ;;		_TMR1_Reload
  8181 ;;		_TMR1_StartTimer
  8182 ;;		_TMR1_StopTimer
  8183 ;; This function is called by:
  8184 ;;		_init_CLCD_config
  8185 ;;		_main
  8186 ;;		_put_char
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           	psect	text35
  8191  0032D8                     __ptext35:
  8192                           	opt stack 0
  8193  0032D8                     __delay_MS:
  8194                           	opt stack 20
  8195                           
  8196                           ;delay.c: 30: int val = 0;
  8197                           
  8198                           ;incstack = 0
  8199  0032D8  0E00               	movlw	0
  8200  0032DA  6E14               	movwf	__delay_MS@val+1,c
  8201  0032DC  0E00               	movlw	0
  8202  0032DE  6E13               	movwf	__delay_MS@val,c
  8203                           
  8204                           ;delay.c: 31: for (val = 0; val < delay; val++) {
  8205  0032E0  0E00               	movlw	0
  8206  0032E2  6E14               	movwf	__delay_MS@val+1,c
  8207  0032E4  0E00               	movlw	0
  8208  0032E6  6E13               	movwf	__delay_MS@val,c
  8209  0032E8  D00E               	goto	l5885
  8210  0032EA                     l5873:
  8211                           
  8212                           ;delay.c: 32: TMR1_Reload();
  8213  0032EA  ECD8  F01B         	call	_TMR1_Reload	;wreg free
  8214                           
  8215                           ;delay.c: 33: TMR1_StartTimer();
  8216  0032EE  EC0F  F01C         	call	_TMR1_StartTimer	;wreg free
  8217  0032F2                     l5877:
  8218  0032F2  ECDE  F01B         	call	_TMR1_HasOverflowOccured	;wreg free
  8219  0032F6  0900               	iorlw	0
  8220  0032F8  B4D8               	btfsc	status,2,c
  8221  0032FA  D7FB               	goto	l5877
  8222                           
  8223                           ;delay.c: 35: TMR1_StopTimer();
  8224  0032FC  EC0B  F01C         	call	_TMR1_StopTimer	;wreg free
  8225                           
  8226                           ;delay.c: 36: PIR1bits.TMR1IF = 0;
  8227  003300  909E               	bcf	3998,0,c	;volatile
  8228  003302  4A13               	infsnz	__delay_MS@val,f,c
  8229  003304  2A14               	incf	__delay_MS@val+1,f,c
  8230  003306                     l5885:
  8231  003306  5010               	movf	__delay_MS@delay,w,c
  8232  003308  5C13               	subwf	__delay_MS@val,w,c
  8233  00330A  5014               	movf	__delay_MS@val+1,w,c
  8234  00330C  0A80               	xorlw	128
  8235  00330E  6E12               	movwf	??__delay_MS& (0+255),c
  8236  003310  5011               	movf	__delay_MS@delay+1,w,c
  8237  003312  0A80               	xorlw	128
  8238  003314  5812               	subwfb	??__delay_MS& (0+255),w,c
  8239  003316  B0D8               	btfsc	status,0,c
  8240  003318  0012               	return	
  8241  00331A  D7E7               	goto	l5873
  8242  00331C                     __end_of__delay_MS:
  8243                           	opt stack 0
  8244                           tblptru	equ	0xFF8
  8245                           tblptrh	equ	0xFF7
  8246                           tblptrl	equ	0xFF6
  8247                           tablat	equ	0xFF5
  8248                           prodh	equ	0xFF4
  8249                           prodl	equ	0xFF3
  8250                           intcon	equ	0xFF2
  8251                           postinc0	equ	0xFEE
  8252                           wreg	equ	0xFE8
  8253                           indf1	equ	0xFE7
  8254                           postdec1	equ	0xFE5
  8255                           fsr1h	equ	0xFE2
  8256                           fsr1l	equ	0xFE1
  8257                           indf2	equ	0xFDF
  8258                           postinc2	equ	0xFDE
  8259                           fsr2h	equ	0xFDA
  8260                           fsr2l	equ	0xFD9
  8261                           status	equ	0xFD8
  8262                           
  8263 ;; *************** function _TMR1_StopTimer *****************
  8264 ;; Defined at:
  8265 ;;		line 94 in file "mcc_generated_files/tmr1.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;		None
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;		None
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  1    wreg      void 
  8272 ;; Registers used:
  8273 ;;		None
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;Total ram usage:        0 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; Hardware stack levels required when called:    5
  8286 ;; This function calls:
  8287 ;;		Nothing
  8288 ;; This function is called by:
  8289 ;;		__delay_MS
  8290 ;;		_main
  8291 ;; This function uses a non-reentrant model
  8292 ;;
  8293                           
  8294                           	psect	text36
  8295  003816                     __ptext36:
  8296                           	opt stack 0
  8297  003816                     _TMR1_StopTimer:
  8298                           	opt stack 20
  8299                           
  8300                           ;tmr1.c: 97: T1CONbits.TMR1ON = 0;
  8301                           
  8302                           ;incstack = 0
  8303  003816  90CD               	bcf	4045,0,c	;volatile
  8304  003818  0012               	return		;funcret
  8305  00381A                     __end_of_TMR1_StopTimer:
  8306                           	opt stack 0
  8307                           tblptru	equ	0xFF8
  8308                           tblptrh	equ	0xFF7
  8309                           tblptrl	equ	0xFF6
  8310                           tablat	equ	0xFF5
  8311                           prodh	equ	0xFF4
  8312                           prodl	equ	0xFF3
  8313                           intcon	equ	0xFF2
  8314                           postinc0	equ	0xFEE
  8315                           wreg	equ	0xFE8
  8316                           indf1	equ	0xFE7
  8317                           postdec1	equ	0xFE5
  8318                           fsr1h	equ	0xFE2
  8319                           fsr1l	equ	0xFE1
  8320                           indf2	equ	0xFDF
  8321                           postinc2	equ	0xFDE
  8322                           fsr2h	equ	0xFDA
  8323                           fsr2l	equ	0xFD9
  8324                           status	equ	0xFD8
  8325                           
  8326 ;; *************** function _TMR1_Reload *****************
  8327 ;; Defined at:
  8328 ;;		line 136 in file "mcc_generated_files/tmr1.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;		None
  8331 ;; Auto vars:     Size  Location     Type
  8332 ;;		None
  8333 ;; Return value:  Size  Location     Type
  8334 ;;                  1    wreg      void 
  8335 ;; Registers used:
  8336 ;;		wreg, status,2
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;Total ram usage:        0 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    5
  8349 ;; This function calls:
  8350 ;;		Nothing
  8351 ;; This function is called by:
  8352 ;;		__delay_MS
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           	psect	text37
  8357  0037B0                     __ptext37:
  8358                           	opt stack 0
  8359  0037B0                     _TMR1_Reload:
  8360                           	opt stack 20
  8361                           
  8362                           ;tmr1.c: 139: TMR1H = (timer1ReloadVal >> 8);
  8363                           
  8364                           ;incstack = 0
  8365  0037B0  0100               	movlb	0	; () banked
  8366  0037B2  51FA               	movf	(_timer1ReloadVal+1)& (0+255),w,b	;volatile
  8367  0037B4  6ECF               	movwf	4047,c	;volatile
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;tmr1.c: 140: TMR1L = (uint8_t) timer1ReloadVal;
  8371  0037B6  C0F9  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8372                           
  8373                           ; BSR set to: 0
  8374  0037BA  0012               	return		;funcret
  8375  0037BC                     __end_of_TMR1_Reload:
  8376                           	opt stack 0
  8377                           tblptru	equ	0xFF8
  8378                           tblptrh	equ	0xFF7
  8379                           tblptrl	equ	0xFF6
  8380                           tablat	equ	0xFF5
  8381                           prodh	equ	0xFF4
  8382                           prodl	equ	0xFF3
  8383                           intcon	equ	0xFF2
  8384                           postinc0	equ	0xFEE
  8385                           wreg	equ	0xFE8
  8386                           indf1	equ	0xFE7
  8387                           postdec1	equ	0xFE5
  8388                           fsr1h	equ	0xFE2
  8389                           fsr1l	equ	0xFE1
  8390                           indf2	equ	0xFDF
  8391                           postinc2	equ	0xFDE
  8392                           fsr2h	equ	0xFDA
  8393                           fsr2l	equ	0xFD9
  8394                           status	equ	0xFD8
  8395                           
  8396 ;; *************** function _TMR1_HasOverflowOccured *****************
  8397 ;; Defined at:
  8398 ;;		line 153 in file "mcc_generated_files/tmr1.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;		None
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;		None
  8403 ;; Return value:  Size  Location     Type
  8404 ;;                  1    wreg      unsigned char 
  8405 ;; Registers used:
  8406 ;;		wreg
  8407 ;; Tracked objects:
  8408 ;;		On entry : 0/0
  8409 ;;		On exit  : 0/0
  8410 ;;		Unchanged: 0/0
  8411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;Total ram usage:        0 bytes
  8417 ;; Hardware stack levels used:    1
  8418 ;; Hardware stack levels required when called:    5
  8419 ;; This function calls:
  8420 ;;		Nothing
  8421 ;; This function is called by:
  8422 ;;		__delay_MS
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           	psect	text38
  8427  0037BC                     __ptext38:
  8428                           	opt stack 0
  8429  0037BC                     _TMR1_HasOverflowOccured:
  8430                           	opt stack 20
  8431                           
  8432                           ;tmr1.c: 156: return(PIR1bits.TMR1IF);
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;incstack = 0
  8436  0037BC  A09E               	btfss	3998,0,c	;volatile
  8437  0037BE  D002               	goto	u5410
  8438  0037C0  0E01               	movlw	1
  8439  0037C2  0012               	return	
  8440  0037C4                     u5410:
  8441  0037C4  0E00               	movlw	0
  8442  0037C6  0012               	return	
  8443  0037C8                     __end_of_TMR1_HasOverflowOccured:
  8444                           	opt stack 0
  8445                           tblptru	equ	0xFF8
  8446                           tblptrh	equ	0xFF7
  8447                           tblptrl	equ	0xFF6
  8448                           tablat	equ	0xFF5
  8449                           prodh	equ	0xFF4
  8450                           prodl	equ	0xFF3
  8451                           intcon	equ	0xFF2
  8452                           postinc0	equ	0xFEE
  8453                           wreg	equ	0xFE8
  8454                           indf1	equ	0xFE7
  8455                           postdec1	equ	0xFE5
  8456                           fsr1h	equ	0xFE2
  8457                           fsr1l	equ	0xFE1
  8458                           indf2	equ	0xFDF
  8459                           postinc2	equ	0xFDE
  8460                           fsr2h	equ	0xFDA
  8461                           fsr2l	equ	0xFD9
  8462                           status	equ	0xFD8
  8463                           
  8464 ;; *************** function ___awdiv *****************
  8465 ;; Defined at:
  8466 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;  dividend        2   15[COMRAM] int 
  8469 ;;  divisor         2   17[COMRAM] int 
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;  quotient        2   21[COMRAM] int 
  8472 ;;  sign            1   20[COMRAM] unsigned char 
  8473 ;;  counter         1   19[COMRAM] unsigned char 
  8474 ;; Return value:  Size  Location     Type
  8475 ;;                  2   15[COMRAM] int 
  8476 ;; Registers used:
  8477 ;;		wreg, status,2, status,0
  8478 ;; Tracked objects:
  8479 ;;		On entry : 0/0
  8480 ;;		On exit  : 0/0
  8481 ;;		Unchanged: 0/0
  8482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8483 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8484 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8486 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8487 ;;Total ram usage:        8 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; Hardware stack levels required when called:    5
  8490 ;; This function calls:
  8491 ;;		Nothing
  8492 ;; This function is called by:
  8493 ;;		_init_clcd_cusotom_lcd
  8494 ;;		_display_string
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           	psect	text39
  8499  002D86                     __ptext39:
  8500                           	opt stack 0
  8501  002D86                     ___awdiv:
  8502                           	opt stack 22
  8503                           
  8504                           ;incstack = 0
  8505  002D86  0E00               	movlw	0
  8506  002D88  6E15               	movwf	___awdiv@sign,c
  8507  002D8A  AE13               	btfss	___awdiv@divisor+1,7,c
  8508  002D8C  D006               	goto	l6209
  8509  002D8E  6C12               	negf	___awdiv@divisor,c
  8510  002D90  1E13               	comf	___awdiv@divisor+1,f,c
  8511  002D92  B0D8               	btfsc	status,0,c
  8512  002D94  2A13               	incf	___awdiv@divisor+1,f,c
  8513  002D96  0E01               	movlw	1
  8514  002D98  6E15               	movwf	___awdiv@sign,c
  8515  002D9A                     l6209:
  8516  002D9A  AE11               	btfss	___awdiv@dividend+1,7,c
  8517  002D9C  D006               	goto	l6215
  8518  002D9E  6C10               	negf	___awdiv@dividend,c
  8519  002DA0  1E11               	comf	___awdiv@dividend+1,f,c
  8520  002DA2  B0D8               	btfsc	status,0,c
  8521  002DA4  2A11               	incf	___awdiv@dividend+1,f,c
  8522  002DA6  0E01               	movlw	1
  8523  002DA8  1A15               	xorwf	___awdiv@sign,f,c
  8524  002DAA                     l6215:
  8525  002DAA  0E00               	movlw	0
  8526  002DAC  6E17               	movwf	___awdiv@quotient+1,c
  8527  002DAE  0E00               	movlw	0
  8528  002DB0  6E16               	movwf	___awdiv@quotient,c
  8529  002DB2  5012               	movf	___awdiv@divisor,w,c
  8530  002DB4  1013               	iorwf	___awdiv@divisor+1,w,c
  8531  002DB6  B4D8               	btfsc	status,2,c
  8532  002DB8  D01C               	goto	l6237
  8533  002DBA  0E01               	movlw	1
  8534  002DBC  6E14               	movwf	___awdiv@counter,c
  8535  002DBE  D004               	goto	l6223
  8536  002DC0                     l6221:
  8537  002DC0  90D8               	bcf	status,0,c
  8538  002DC2  3612               	rlcf	___awdiv@divisor,f,c
  8539  002DC4  3613               	rlcf	___awdiv@divisor+1,f,c
  8540  002DC6  2A14               	incf	___awdiv@counter,f,c
  8541  002DC8                     l6223:
  8542  002DC8  AE13               	btfss	___awdiv@divisor+1,7,c
  8543  002DCA  D7FA               	goto	l6221
  8544  002DCC                     l6225:
  8545  002DCC  90D8               	bcf	status,0,c
  8546  002DCE  3616               	rlcf	___awdiv@quotient,f,c
  8547  002DD0  3617               	rlcf	___awdiv@quotient+1,f,c
  8548  002DD2  5012               	movf	___awdiv@divisor,w,c
  8549  002DD4  5C10               	subwf	___awdiv@dividend,w,c
  8550  002DD6  5013               	movf	___awdiv@divisor+1,w,c
  8551  002DD8  5811               	subwfb	___awdiv@dividend+1,w,c
  8552  002DDA  A0D8               	btfss	status,0,c
  8553  002DDC  D005               	goto	l6233
  8554  002DDE  5012               	movf	___awdiv@divisor,w,c
  8555  002DE0  5E10               	subwf	___awdiv@dividend,f,c
  8556  002DE2  5013               	movf	___awdiv@divisor+1,w,c
  8557  002DE4  5A11               	subwfb	___awdiv@dividend+1,f,c
  8558  002DE6  8016               	bsf	___awdiv@quotient,0,c
  8559  002DE8                     l6233:
  8560  002DE8  90D8               	bcf	status,0,c
  8561  002DEA  3213               	rrcf	___awdiv@divisor+1,f,c
  8562  002DEC  3212               	rrcf	___awdiv@divisor,f,c
  8563  002DEE  2E14               	decfsz	___awdiv@counter,f,c
  8564  002DF0  D7ED               	goto	l6225
  8565  002DF2                     l6237:
  8566  002DF2  5015               	movf	___awdiv@sign,w,c
  8567  002DF4  B4D8               	btfsc	status,2,c
  8568  002DF6  D004               	goto	l6241
  8569  002DF8  6C16               	negf	___awdiv@quotient,c
  8570  002DFA  1E17               	comf	___awdiv@quotient+1,f,c
  8571  002DFC  B0D8               	btfsc	status,0,c
  8572  002DFE  2A17               	incf	___awdiv@quotient+1,f,c
  8573  002E00                     l6241:
  8574  002E00  C016  F010         	movff	___awdiv@quotient,?___awdiv
  8575  002E04  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
  8576  002E08  0012               	return	
  8577  002E0A                     __end_of___awdiv:
  8578                           	opt stack 0
  8579                           tblptru	equ	0xFF8
  8580                           tblptrh	equ	0xFF7
  8581                           tblptrl	equ	0xFF6
  8582                           tablat	equ	0xFF5
  8583                           prodh	equ	0xFF4
  8584                           prodl	equ	0xFF3
  8585                           intcon	equ	0xFF2
  8586                           postinc0	equ	0xFEE
  8587                           wreg	equ	0xFE8
  8588                           indf1	equ	0xFE7
  8589                           postdec1	equ	0xFE5
  8590                           fsr1h	equ	0xFE2
  8591                           fsr1l	equ	0xFE1
  8592                           indf2	equ	0xFDF
  8593                           postinc2	equ	0xFDE
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function _clcd_max_row *****************
  8599 ;; Defined at:
  8600 ;;		line 106 in file "clcd.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;		None
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;		None
  8605 ;; Return value:  Size  Location     Type
  8606 ;;                  1    wreg      unsigned char 
  8607 ;; Registers used:
  8608 ;;		wreg, status,2
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;Total ram usage:        0 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; Hardware stack levels required when called:    5
  8621 ;; This function calls:
  8622 ;;		Nothing
  8623 ;; This function is called by:
  8624 ;;		_reply_to_host
  8625 ;; This function uses a non-reentrant model
  8626 ;;
  8627                           
  8628                           	psect	text40
  8629  003778                     __ptext40:
  8630                           	opt stack 0
  8631  003778                     _clcd_max_row:
  8632                           	opt stack 23
  8633                           
  8634                           ;clcd.c: 107: if (clcd_config_data.init_done == 0)
  8635                           
  8636                           ;incstack = 0
  8637  003778  5049               	movf	_clcd_config_data,w,c
  8638  00377A  A4D8               	btfss	status,2,c
  8639  00377C  D002               	goto	l6361
  8640                           
  8641                           ;clcd.c: 108: return 0;
  8642  00377E  0E00               	movlw	0
  8643  003780  0012               	return	
  8644  003782                     l6361:
  8645                           
  8646                           ;clcd.c: 109: else
  8647                           ;clcd.c: 110: return clcd_config_data.clcd_max_row;
  8648  003782  504A               	movf	_clcd_config_data+1,w,c
  8649  003784  0012               	return	
  8650  003786                     __end_of_clcd_max_row:
  8651                           	opt stack 0
  8652                           tblptru	equ	0xFF8
  8653                           tblptrh	equ	0xFF7
  8654                           tblptrl	equ	0xFF6
  8655                           tablat	equ	0xFF5
  8656                           prodh	equ	0xFF4
  8657                           prodl	equ	0xFF3
  8658                           intcon	equ	0xFF2
  8659                           postinc0	equ	0xFEE
  8660                           wreg	equ	0xFE8
  8661                           indf1	equ	0xFE7
  8662                           postdec1	equ	0xFE5
  8663                           fsr1h	equ	0xFE2
  8664                           fsr1l	equ	0xFE1
  8665                           indf2	equ	0xFDF
  8666                           postinc2	equ	0xFDE
  8667                           fsr2h	equ	0xFDA
  8668                           fsr2l	equ	0xFD9
  8669                           status	equ	0xFD8
  8670                           
  8671 ;; *************** function _clcd_max_col *****************
  8672 ;; Defined at:
  8673 ;;		line 113 in file "clcd.c"
  8674 ;; Parameters:    Size  Location     Type
  8675 ;;		None
  8676 ;; Auto vars:     Size  Location     Type
  8677 ;;		None
  8678 ;; Return value:  Size  Location     Type
  8679 ;;                  1    wreg      unsigned char 
  8680 ;; Registers used:
  8681 ;;		wreg, status,2
  8682 ;; Tracked objects:
  8683 ;;		On entry : 0/0
  8684 ;;		On exit  : 0/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8691 ;;Total ram usage:        0 bytes
  8692 ;; Hardware stack levels used:    1
  8693 ;; Hardware stack levels required when called:    5
  8694 ;; This function calls:
  8695 ;;		Nothing
  8696 ;; This function is called by:
  8697 ;;		_reply_to_host
  8698 ;; This function uses a non-reentrant model
  8699 ;;
  8700                           
  8701                           	psect	text41
  8702  003786                     __ptext41:
  8703                           	opt stack 0
  8704  003786                     _clcd_max_col:
  8705                           	opt stack 23
  8706                           
  8707                           ;clcd.c: 114: if (clcd_config_data.init_done == 0)
  8708                           
  8709                           ;incstack = 0
  8710  003786  5049               	movf	_clcd_config_data,w,c
  8711  003788  A4D8               	btfss	status,2,c
  8712  00378A  D002               	goto	l6373
  8713                           
  8714                           ;clcd.c: 115: return 0;
  8715  00378C  0E00               	movlw	0
  8716  00378E  0012               	return	
  8717  003790                     l6373:
  8718                           
  8719                           ;clcd.c: 116: else
  8720                           ;clcd.c: 117: return clcd_config_data.clcd_max_col;
  8721  003790  504B               	movf	_clcd_config_data+2,w,c
  8722  003792  0012               	return	
  8723  003794                     __end_of_clcd_max_col:
  8724                           	opt stack 0
  8725                           tblptru	equ	0xFF8
  8726                           tblptrh	equ	0xFF7
  8727                           tblptrl	equ	0xFF6
  8728                           tablat	equ	0xFF5
  8729                           prodh	equ	0xFF4
  8730                           prodl	equ	0xFF3
  8731                           intcon	equ	0xFF2
  8732                           postinc0	equ	0xFEE
  8733                           wreg	equ	0xFE8
  8734                           indf1	equ	0xFE7
  8735                           postdec1	equ	0xFE5
  8736                           fsr1h	equ	0xFE2
  8737                           fsr1l	equ	0xFE1
  8738                           indf2	equ	0xFDF
  8739                           postinc2	equ	0xFDE
  8740                           fsr2h	equ	0xFDA
  8741                           fsr2l	equ	0xFD9
  8742                           status	equ	0xFD8
  8743                           
  8744 ;; *************** function _parse_cmd_str *****************
  8745 ;; Defined at:
  8746 ;;		line 76 in file "cmd_consol.c"
  8747 ;; Parameters:    Size  Location     Type
  8748 ;;  str             2    0[BANK0 ] PTR unsigned char 
  8749 ;;		 -> uart_str(150), 
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;  i               1    1[BANK1 ] unsigned char 
  8752 ;;  i               1    5[BANK1 ] unsigned char 
  8753 ;;  i               1    0[BANK1 ] unsigned char 
  8754 ;;  uid             1    4[BANK1 ] unsigned char 
  8755 ;;  uid             1    9[BANK1 ] unsigned char 
  8756 ;;  uid             1    8[BANK1 ] unsigned char 
  8757 ;;  scroll          1    7[BANK1 ] unsigned char 
  8758 ;;  uid             1    6[BANK1 ] unsigned char 
  8759 ;;  column          1    3[BANK1 ] unsigned char 
  8760 ;;  row             1    2[BANK1 ] unsigned char 
  8761 ;;  temp            2   12[BANK1 ] PTR unsigned char 
  8762 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
  8763 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
  8764 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
  8765 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
  8766 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
  8767 ;;		 -> RAM(3895), STR_27(7), STR_25(7), NULL(0), 
  8768 ;;  ptr             2   10[BANK1 ] PTR unsigned char 
  8769 ;;		 -> uart_str(150), 
  8770 ;; Return value:  Size  Location     Type
  8771 ;;                  1    wreg      unsigned char 
  8772 ;; Registers used:
  8773 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8774 ;; Tracked objects:
  8775 ;;		On entry : 0/0
  8776 ;;		On exit  : 0/0
  8777 ;;		Unchanged: 0/0
  8778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8779 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8780 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8781 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8782 ;;      Totals:         0       5      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8783 ;;Total ram usage:       19 bytes
  8784 ;; Hardware stack levels used:    1
  8785 ;; Hardware stack levels required when called:    9
  8786 ;; This function calls:
  8787 ;;		_atoi
  8788 ;;		_collect_column
  8789 ;;		_collect_row
  8790 ;;		_isdigit
  8791 ;;		_memset
  8792 ;;		_printf
  8793 ;;		_strcpy
  8794 ;;		_strlen
  8795 ;;		_strstr
  8796 ;;		_strtok
  8797 ;; This function is called by:
  8798 ;;		_cmd_consol_task
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           	psect	text42
  8803  0000AA                     __ptext42:
  8804                           	opt stack 0
  8805  0000AA                     _parse_cmd_str:
  8806                           	opt stack 20
  8807                           
  8808                           ;cmd_consol.c: 77: printf("%s..2\r\n", str);
  8809                           
  8810                           ;incstack = 0
  8811  0000AA  0EB2               	movlw	low STR_23
  8812  0000AC  6E24               	movwf	printf@f,c
  8813  0000AE  0EFF               	movlw	high STR_23
  8814  0000B0  6E25               	movwf	printf@f+1,c
  8815  0000B2  C0DA  F026         	movff	parse_cmd_str@str,?_printf+2
  8816  0000B6  C0DB  F027         	movff	parse_cmd_str@str+1,?_printf+3
  8817  0000BA  EC02  F011         	call	_printf	;wreg free
  8818                           
  8819                           ;cmd_consol.c: 78: char *temp;
  8820                           ;cmd_consol.c: 79: char *ptr = str;
  8821  0000BE  C0DA  F182         	movff	parse_cmd_str@str,parse_cmd_str@ptr
  8822  0000C2  C0DB  F183         	movff	parse_cmd_str@str+1,parse_cmd_str@ptr+1
  8823                           
  8824                           ;cmd_consol.c: 80: if ((temp = strstr(ptr, "KLM+MC?")) != (0)) {
  8825  0000C6  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8826  0000CA  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8827  0000CE  0EBA               	movlw	low STR_24
  8828  0000D0  6E2F               	movwf	strstr@s2,c
  8829  0000D2  0EFF               	movlw	high STR_24
  8830  0000D4  6E30               	movwf	strstr@s2+1,c
  8831  0000D6  EC30  F016         	call	_strstr	;wreg free
  8832  0000DA  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  8833  0000DE  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  8834  0000E2  0101               	movlb	1	; () banked
  8835  0000E4  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  8836  0000E6  0101               	movlb	1	; () banked
  8837  0000E8  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8838  0000EA  B4D8               	btfsc	status,2,c
  8839  0000EC  D038               	goto	l6633
  8840                           
  8841                           ; BSR set to: 1
  8842                           ;cmd_consol.c: 81: temp = strtok(ptr, "-', /=");
  8843  0000EE  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  8844  0000F2  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  8845  0000F6  0EDF               	movlw	low STR_25
  8846  0000F8  6E1F               	movwf	strtok@s2,c
  8847  0000FA  0EFF               	movlw	high STR_25
  8848  0000FC  6E20               	movwf	strtok@s2+1,c
  8849  0000FE  EC77  F015         	call	_strtok	;wreg free
  8850  000102  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  8851  000106  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  8852                           
  8853                           ;cmd_consol.c: 82: if (temp != (0)) {
  8854  00010A  0101               	movlb	1	; () banked
  8855  00010C  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  8856  00010E  0101               	movlb	1	; () banked
  8857  000110  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8858  000112  B4D8               	btfsc	status,2,c
  8859  000114  EF9E  F006         	goto	l7003
  8860                           
  8861                           ; BSR set to: 1
  8862                           ;cmd_consol.c: 83: strcpy(CMD, temp);
  8863  000118  0ECB               	movlw	low _CMD
  8864  00011A  6E10               	movwf	strcpy@to,c
  8865  00011C  0E00               	movlw	high _CMD
  8866  00011E  6E11               	movwf	strcpy@to+1,c
  8867  000120  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  8868  000124  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  8869  000128  EC49  F019         	call	_strcpy	;wreg free
  8870                           
  8871                           ;cmd_consol.c: 84: valid_cmd = 1;
  8872  00012C  0E01               	movlw	1
  8873  00012E  0100               	movlb	0	; () banked
  8874  000130  6F84               	movwf	_valid_cmd& (0+255),b
  8875                           
  8876                           ; BSR set to: 0
  8877                           ;cmd_consol.c: 85: memset(str, 0, strlen(str));
  8878  000132  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  8879  000136  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  8880  00013A  0E00               	movlw	0
  8881  00013C  6E27               	movwf	memset@c+1,c
  8882  00013E  0E00               	movlw	0
  8883  000140  6E26               	movwf	memset@c,c
  8884  000142  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  8885  000146  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  8886  00014A  EC37  F018         	call	_strlen	;wreg free
  8887  00014E  C01E  F028         	movff	?_strlen,memset@n
  8888  000152  C01F  F029         	movff	?_strlen+1,memset@n+1
  8889  000156  ECA5  F01A         	call	_memset	;wreg free
  8890  00015A                     l6629:
  8891                           
  8892                           ;cmd_consol.c: 86: return 0;
  8893  00015A  0E00               	movlw	0
  8894  00015C  0012               	return	
  8895  00015E                     l6633:
  8896  00015E  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8897  000162  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8898  000166  0EC2               	movlw	low STR_26
  8899  000168  6E2F               	movwf	strstr@s2,c
  8900  00016A  0EFF               	movlw	high STR_26
  8901  00016C  6E30               	movwf	strstr@s2+1,c
  8902  00016E  EC30  F016         	call	_strstr	;wreg free
  8903  000172  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  8904  000176  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  8905  00017A  0101               	movlb	1	; () banked
  8906  00017C  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  8907  00017E  0101               	movlb	1	; () banked
  8908  000180  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8909  000182  B4D8               	btfsc	status,2,c
  8910  000184  D037               	goto	l6649
  8911                           
  8912                           ; BSR set to: 1
  8913                           ;cmd_consol.c: 89: temp = strtok(ptr, "-', /=");
  8914  000186  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  8915  00018A  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  8916  00018E  0EDF               	movlw	low STR_25
  8917  000190  6E1F               	movwf	strtok@s2,c
  8918  000192  0EFF               	movlw	high STR_25
  8919  000194  6E20               	movwf	strtok@s2+1,c
  8920  000196  EC77  F015         	call	_strtok	;wreg free
  8921  00019A  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  8922  00019E  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  8923                           
  8924                           ;cmd_consol.c: 90: if (temp != (0)) {
  8925  0001A2  0101               	movlb	1	; () banked
  8926  0001A4  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  8927  0001A6  0101               	movlb	1	; () banked
  8928  0001A8  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8929  0001AA  B4D8               	btfsc	status,2,c
  8930  0001AC  EF9E  F006         	goto	l7003
  8931                           
  8932                           ; BSR set to: 1
  8933                           ;cmd_consol.c: 91: strcpy(CMD, temp);
  8934  0001B0  0ECB               	movlw	low _CMD
  8935  0001B2  6E10               	movwf	strcpy@to,c
  8936  0001B4  0E00               	movlw	high _CMD
  8937  0001B6  6E11               	movwf	strcpy@to+1,c
  8938  0001B8  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  8939  0001BC  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  8940  0001C0  EC49  F019         	call	_strcpy	;wreg free
  8941                           
  8942                           ;cmd_consol.c: 92: valid_cmd = 1;
  8943  0001C4  0E01               	movlw	1
  8944  0001C6  0100               	movlb	0	; () banked
  8945  0001C8  6F84               	movwf	_valid_cmd& (0+255),b
  8946                           
  8947                           ; BSR set to: 0
  8948                           ;cmd_consol.c: 93: memset(str, 0, strlen(str));
  8949  0001CA  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  8950  0001CE  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  8951  0001D2  0E00               	movlw	0
  8952  0001D4  6E27               	movwf	memset@c+1,c
  8953  0001D6  0E00               	movlw	0
  8954  0001D8  6E26               	movwf	memset@c,c
  8955  0001DA  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  8956  0001DE  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  8957  0001E2  EC37  F018         	call	_strlen	;wreg free
  8958  0001E6  C01E  F028         	movff	?_strlen,memset@n
  8959  0001EA  C01F  F029         	movff	?_strlen+1,memset@n+1
  8960  0001EE  ECA5  F01A         	call	_memset	;wreg free
  8961  0001F2  D7B3               	goto	l6629
  8962  0001F4                     l6649:
  8963  0001F4  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8964  0001F8  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8965  0001FC  0E4D               	movlw	low STR_28
  8966  0001FE  6E2F               	movwf	strstr@s2,c
  8967  000200  0EFF               	movlw	high STR_28
  8968  000202  6E30               	movwf	strstr@s2+1,c
  8969  000204  EC30  F016         	call	_strstr	;wreg free
  8970  000208  502D               	movf	?_strstr,w,c
  8971  00020A  102E               	iorwf	?_strstr+1,w,c
  8972  00020C  B4D8               	btfsc	status,2,c
  8973  00020E  D002               	goto	u6790
  8974  000210  0E01               	movlw	1
  8975  000212  D001               	goto	u6800
  8976  000214                     u6790:
  8977  000214  0E00               	movlw	0
  8978  000216                     u6800:
  8979  000216  0101               	movlb	1	; () banked
  8980  000218  6F84               	movwf	parse_cmd_str@temp& (0+255),b
  8981  00021A  6B85               	clrf	(parse_cmd_str@temp+1)& (0+255),b
  8982  00021C  0101               	movlb	1	; () banked
  8983  00021E  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  8984  000220  0101               	movlb	1	; () banked
  8985  000222  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8986  000224  B4D8               	btfsc	status,2,c
  8987  000226  D03D               	goto	l6667
  8988                           
  8989                           ; BSR set to: 1
  8990                           ;cmd_consol.c: 97: temp = strtok(ptr, "-', /=");
  8991  000228  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  8992  00022C  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  8993  000230  0EDF               	movlw	low STR_25
  8994  000232  6E1F               	movwf	strtok@s2,c
  8995  000234  0EFF               	movlw	high STR_25
  8996  000236  6E20               	movwf	strtok@s2+1,c
  8997  000238  EC77  F015         	call	_strtok	;wreg free
  8998  00023C  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  8999  000240  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9000                           
  9001                           ;cmd_consol.c: 98: if (temp != (0)) {
  9002  000244  0101               	movlb	1	; () banked
  9003  000246  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9004  000248  0101               	movlb	1	; () banked
  9005  00024A  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9006  00024C  B4D8               	btfsc	status,2,c
  9007  00024E  EF9E  F006         	goto	l7003
  9008                           
  9009                           ; BSR set to: 1
  9010                           ;cmd_consol.c: 99: strcpy(CMD, temp);
  9011  000252  0ECB               	movlw	low _CMD
  9012  000254  6E10               	movwf	strcpy@to,c
  9013  000256  0E00               	movlw	high _CMD
  9014  000258  6E11               	movwf	strcpy@to+1,c
  9015  00025A  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9016  00025E  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9017  000262  EC49  F019         	call	_strcpy	;wreg free
  9018                           
  9019                           ;cmd_consol.c: 100: valid_cmd = 1;
  9020  000266  0E01               	movlw	1
  9021  000268  0100               	movlb	0	; () banked
  9022  00026A  6F84               	movwf	_valid_cmd& (0+255),b
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;cmd_consol.c: 101: memset(str, 0, strlen(str));
  9026  00026C  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9027  000270  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9028  000274  0E00               	movlw	0
  9029  000276  6E27               	movwf	memset@c+1,c
  9030  000278  0E00               	movlw	0
  9031  00027A  6E26               	movwf	memset@c,c
  9032  00027C  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9033  000280  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9034  000284  EC37  F018         	call	_strlen	;wreg free
  9035  000288  C01E  F028         	movff	?_strlen,memset@n
  9036  00028C  C01F  F029         	movff	?_strlen+1,memset@n+1
  9037  000290  ECA5  F01A         	call	_memset	;wreg free
  9038                           
  9039                           ;cmd_consol.c: 102: printf(".....\r\n");
  9040  000294  0EAA               	movlw	low STR_30
  9041  000296  6E24               	movwf	printf@f,c
  9042  000298  0EFF               	movlw	high STR_30
  9043  00029A  6E25               	movwf	printf@f+1,c
  9044  00029C  EC02  F011         	call	_printf	;wreg free
  9045  0002A0  D75C               	goto	l6629
  9046  0002A2                     l6667:
  9047  0002A2  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9048  0002A6  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9049  0002AA  0E8F               	movlw	low STR_31
  9050  0002AC  6E2F               	movwf	strstr@s2,c
  9051  0002AE  0EFF               	movlw	high STR_31
  9052  0002B0  6E30               	movwf	strstr@s2+1,c
  9053  0002B2  EC30  F016         	call	_strstr	;wreg free
  9054  0002B6  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  9055  0002BA  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  9056  0002BE  0101               	movlb	1	; () banked
  9057  0002C0  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9058  0002C2  0101               	movlb	1	; () banked
  9059  0002C4  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9060  0002C6  B4D8               	btfsc	status,2,c
  9061  0002C8  D093               	goto	l6705
  9062                           
  9063                           ; BSR set to: 1
  9064                           ;cmd_consol.c: 106: temp = strtok(ptr, "-', /=");
  9065  0002CA  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9066  0002CE  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9067  0002D2  0EDF               	movlw	low STR_25
  9068  0002D4  6E1F               	movwf	strtok@s2,c
  9069  0002D6  0EFF               	movlw	high STR_25
  9070  0002D8  6E20               	movwf	strtok@s2+1,c
  9071  0002DA  EC77  F015         	call	_strtok	;wreg free
  9072  0002DE  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9073  0002E2  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9074                           
  9075                           ;cmd_consol.c: 107: if (temp != (0)) {
  9076  0002E6  0101               	movlb	1	; () banked
  9077  0002E8  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9078  0002EA  0101               	movlb	1	; () banked
  9079  0002EC  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9080  0002EE  B4D8               	btfsc	status,2,c
  9081  0002F0  EF9E  F006         	goto	l7003
  9082                           
  9083                           ; BSR set to: 1
  9084                           ;cmd_consol.c: 108: strcpy(CMD, temp);
  9085  0002F4  0ECB               	movlw	low _CMD
  9086  0002F6  6E10               	movwf	strcpy@to,c
  9087  0002F8  0E00               	movlw	high _CMD
  9088  0002FA  6E11               	movwf	strcpy@to+1,c
  9089  0002FC  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9090  000300  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9091  000304  EC49  F019         	call	_strcpy	;wreg free
  9092                           
  9093                           ;cmd_consol.c: 109: temp = strtok((0), "-', /=");
  9094  000308  0E00               	movlw	0
  9095  00030A  6E1D               	movwf	strtok@s1,c
  9096  00030C  0E00               	movlw	0
  9097  00030E  6E1E               	movwf	strtok@s1+1,c
  9098  000310  0EDF               	movlw	low STR_25
  9099  000312  6E1F               	movwf	strtok@s2,c
  9100  000314  0EFF               	movlw	high STR_25
  9101  000316  6E20               	movwf	strtok@s2+1,c
  9102  000318  EC77  F015         	call	_strtok	;wreg free
  9103  00031C  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9104  000320  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9105                           
  9106                           ;cmd_consol.c: 110: printf("%s..\r\n", temp);
  9107  000324  0ED1               	movlw	low STR_34
  9108  000326  6E24               	movwf	printf@f,c
  9109  000328  0EFF               	movlw	high STR_34
  9110  00032A  6E25               	movwf	printf@f+1,c
  9111  00032C  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9112  000330  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9113  000334  EC02  F011         	call	_printf	;wreg free
  9114                           
  9115                           ;cmd_consol.c: 111: char row = 0, column = 0;
  9116  000338  0E00               	movlw	0
  9117  00033A  0101               	movlb	1	; () banked
  9118  00033C  6F7A               	movwf	parse_cmd_str@row& (0+255),b
  9119                           
  9120                           ; BSR set to: 1
  9121  00033E  0E00               	movlw	0
  9122  000340  0101               	movlb	1	; () banked
  9123  000342  6F7B               	movwf	parse_cmd_str@column& (0+255),b
  9124                           
  9125                           ; BSR set to: 1
  9126                           ;cmd_consol.c: 112: if (temp != (0)) {
  9127  000344  0101               	movlb	1	; () banked
  9128  000346  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9129  000348  0101               	movlb	1	; () banked
  9130  00034A  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9131  00034C  B4D8               	btfsc	status,2,c
  9132  00034E  EF9E  F006         	goto	l7003
  9133                           
  9134                           ; BSR set to: 1
  9135                           ;cmd_consol.c: 113: row = atoi(temp);
  9136  000352  C184  F01E         	movff	parse_cmd_str@temp,atoi@s
  9137  000356  C185  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
  9138  00035A  ECD6  F012         	call	_atoi	;wreg free
  9139  00035E  501E               	movf	?_atoi,w,c
  9140  000360  0101               	movlb	1	; () banked
  9141  000362  6F7A               	movwf	parse_cmd_str@row& (0+255),b
  9142                           
  9143                           ; BSR set to: 1
  9144                           ;cmd_consol.c: 114: if (row > 0) {
  9145  000364  0101               	movlb	1	; () banked
  9146  000366  517A               	movf	parse_cmd_str@row& (0+255),w,b
  9147  000368  0101               	movlb	1	; () banked
  9148  00036A  B4D8               	btfsc	status,2,c
  9149  00036C  EF9E  F006         	goto	l7003
  9150                           
  9151                           ; BSR set to: 1
  9152                           ;cmd_consol.c: 115: temp = strtok((0), "-', /=");
  9153  000370  0E00               	movlw	0
  9154  000372  6E1D               	movwf	strtok@s1,c
  9155  000374  0E00               	movlw	0
  9156  000376  6E1E               	movwf	strtok@s1+1,c
  9157  000378  0EDF               	movlw	low STR_25
  9158  00037A  6E1F               	movwf	strtok@s2,c
  9159  00037C  0EFF               	movlw	high STR_25
  9160  00037E  6E20               	movwf	strtok@s2+1,c
  9161  000380  EC77  F015         	call	_strtok	;wreg free
  9162  000384  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9163  000388  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9164                           
  9165                           ;cmd_consol.c: 116: if (temp != (0)) {
  9166  00038C  0101               	movlb	1	; () banked
  9167  00038E  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9168  000390  0101               	movlb	1	; () banked
  9169  000392  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9170  000394  B4D8               	btfsc	status,2,c
  9171  000396  EF9E  F006         	goto	l7003
  9172                           
  9173                           ; BSR set to: 1
  9174                           ;cmd_consol.c: 117: column = atoi(temp);
  9175  00039A  C184  F01E         	movff	parse_cmd_str@temp,atoi@s
  9176  00039E  C185  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
  9177  0003A2  ECD6  F012         	call	_atoi	;wreg free
  9178  0003A6  501E               	movf	?_atoi,w,c
  9179  0003A8  0101               	movlb	1	; () banked
  9180  0003AA  6F7B               	movwf	parse_cmd_str@column& (0+255),b
  9181                           
  9182                           ; BSR set to: 1
  9183                           ;cmd_consol.c: 118: if (column > 0) {
  9184  0003AC  0101               	movlb	1	; () banked
  9185  0003AE  517B               	movf	parse_cmd_str@column& (0+255),w,b
  9186  0003B0  0101               	movlb	1	; () banked
  9187  0003B2  B4D8               	btfsc	status,2,c
  9188  0003B4  EF9E  F006         	goto	l7003
  9189                           
  9190                           ; BSR set to: 1
  9191                           ;cmd_consol.c: 119: clcd_init_col = column;
  9192  0003B8  C17B  F081         	movff	parse_cmd_str@column,_clcd_init_col
  9193                           
  9194                           ;cmd_consol.c: 120: clcd_init_row = row;
  9195  0003BC  C17A  F041         	movff	parse_cmd_str@row,_clcd_init_row
  9196                           
  9197                           ; BSR set to: 1
  9198                           ;cmd_consol.c: 121: valid_cmd = 1;
  9199  0003C0  0E01               	movlw	1
  9200  0003C2  0100               	movlb	0	; () banked
  9201  0003C4  6F84               	movwf	_valid_cmd& (0+255),b
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;cmd_consol.c: 122: memset(str, 0, strlen(str));
  9205  0003C6  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9206  0003CA  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9207  0003CE  0E00               	movlw	0
  9208  0003D0  6E27               	movwf	memset@c+1,c
  9209  0003D2  0E00               	movlw	0
  9210  0003D4  6E26               	movwf	memset@c,c
  9211  0003D6  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9212  0003DA  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9213  0003DE  EC37  F018         	call	_strlen	;wreg free
  9214  0003E2  C01E  F028         	movff	?_strlen,memset@n
  9215  0003E6  C01F  F029         	movff	?_strlen+1,memset@n+1
  9216  0003EA  ECA5  F01A         	call	_memset	;wreg free
  9217  0003EE  D6B5               	goto	l6629
  9218  0003F0                     l6705:
  9219  0003F0  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9220  0003F4  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9221  0003F8  0E57               	movlw	low STR_36
  9222  0003FA  6E2F               	movwf	strstr@s2,c
  9223  0003FC  0EFF               	movlw	high STR_36
  9224  0003FE  6E30               	movwf	strstr@s2+1,c
  9225  000400  EC30  F016         	call	_strstr	;wreg free
  9226  000404  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  9227  000408  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  9228  00040C  0101               	movlb	1	; () banked
  9229  00040E  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9230  000410  0101               	movlb	1	; () banked
  9231  000412  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9232  000414  B4D8               	btfsc	status,2,c
  9233  000416  D037               	goto	l6721
  9234                           
  9235                           ; BSR set to: 1
  9236                           ;cmd_consol.c: 132: temp = strtok(ptr, "-', /=");
  9237  000418  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9238  00041C  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9239  000420  0EDF               	movlw	low STR_25
  9240  000422  6E1F               	movwf	strtok@s2,c
  9241  000424  0EFF               	movlw	high STR_25
  9242  000426  6E20               	movwf	strtok@s2+1,c
  9243  000428  EC77  F015         	call	_strtok	;wreg free
  9244  00042C  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9245  000430  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9246                           
  9247                           ;cmd_consol.c: 133: if (temp != (0)) {
  9248  000434  0101               	movlb	1	; () banked
  9249  000436  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9250  000438  0101               	movlb	1	; () banked
  9251  00043A  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9252  00043C  B4D8               	btfsc	status,2,c
  9253  00043E  EF9E  F006         	goto	l7003
  9254                           
  9255                           ; BSR set to: 1
  9256                           ;cmd_consol.c: 134: strcpy(CMD, temp);
  9257  000442  0ECB               	movlw	low _CMD
  9258  000444  6E10               	movwf	strcpy@to,c
  9259  000446  0E00               	movlw	high _CMD
  9260  000448  6E11               	movwf	strcpy@to+1,c
  9261  00044A  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9262  00044E  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9263  000452  EC49  F019         	call	_strcpy	;wreg free
  9264                           
  9265                           ;cmd_consol.c: 135: valid_cmd = 1;
  9266  000456  0E01               	movlw	1
  9267  000458  0100               	movlb	0	; () banked
  9268  00045A  6F84               	movwf	_valid_cmd& (0+255),b
  9269                           
  9270                           ; BSR set to: 0
  9271                           ;cmd_consol.c: 136: memset(str, 0, strlen(str));
  9272  00045C  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9273  000460  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9274  000464  0E00               	movlw	0
  9275  000466  6E27               	movwf	memset@c+1,c
  9276  000468  0E00               	movlw	0
  9277  00046A  6E26               	movwf	memset@c,c
  9278  00046C  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9279  000470  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9280  000474  EC37  F018         	call	_strlen	;wreg free
  9281  000478  C01E  F028         	movff	?_strlen,memset@n
  9282  00047C  C01F  F029         	movff	?_strlen+1,memset@n+1
  9283  000480  ECA5  F01A         	call	_memset	;wreg free
  9284  000484  D66A               	goto	l6629
  9285  000486                     l6721:
  9286  000486  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9287  00048A  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9288  00048E  0E61               	movlw	low STR_38
  9289  000490  6E2F               	movwf	strstr@s2,c
  9290  000492  0EFF               	movlw	high STR_38
  9291  000494  6E30               	movwf	strstr@s2+1,c
  9292  000496  EC30  F016         	call	_strstr	;wreg free
  9293  00049A  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  9294  00049E  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  9295  0004A2  0101               	movlb	1	; () banked
  9296  0004A4  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9297  0004A6  0101               	movlb	1	; () banked
  9298  0004A8  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9299  0004AA  B4D8               	btfsc	status,2,c
  9300  0004AC  D0D0               	goto	l6785
  9301                           
  9302                           ; BSR set to: 1
  9303                           ;cmd_consol.c: 141: if (clcd_config_data.init_done == 1) {
  9304  0004AE  0449               	decf	_clcd_config_data,w,c
  9305  0004B0  A4D8               	btfss	status,2,c
  9306  0004B2  EF9E  F006         	goto	l7003
  9307                           
  9308                           ; BSR set to: 1
  9309                           ;cmd_consol.c: 142: cmd_data.data_set = 0;
  9310  0004B6  0E00               	movlw	0
  9311  0004B8  0100               	movlb	0	; () banked
  9312  0004BA  6FAF               	movwf	(_cmd_data+41)& (0+255),b
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;cmd_consol.c: 143: temp = strtok(ptr, "-', /=");
  9316  0004BC  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9317  0004C0  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9318  0004C4  0EDF               	movlw	low STR_25
  9319  0004C6  6E1F               	movwf	strtok@s2,c
  9320  0004C8  0EFF               	movlw	high STR_25
  9321  0004CA  6E20               	movwf	strtok@s2+1,c
  9322  0004CC  EC77  F015         	call	_strtok	;wreg free
  9323  0004D0  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9324  0004D4  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9325                           
  9326                           ;cmd_consol.c: 144: if (temp != (0)) {
  9327  0004D8  0101               	movlb	1	; () banked
  9328  0004DA  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9329  0004DC  0101               	movlb	1	; () banked
  9330  0004DE  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9331  0004E0  B4D8               	btfsc	status,2,c
  9332  0004E2  EF9E  F006         	goto	l7003
  9333                           
  9334                           ; BSR set to: 1
  9335                           ;cmd_consol.c: 145: printf("temp = %s, ", temp);
  9336  0004E6  0EB9               	movlw	low STR_40
  9337  0004E8  6E24               	movwf	printf@f,c
  9338  0004EA  0EFE               	movlw	high STR_40
  9339  0004EC  6E25               	movwf	printf@f+1,c
  9340  0004EE  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9341  0004F2  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9342  0004F6  EC02  F011         	call	_printf	;wreg free
  9343                           
  9344                           ;cmd_consol.c: 146: strcpy(CMD, temp);
  9345  0004FA  0ECB               	movlw	low _CMD
  9346  0004FC  6E10               	movwf	strcpy@to,c
  9347  0004FE  0E00               	movlw	high _CMD
  9348  000500  6E11               	movwf	strcpy@to+1,c
  9349  000502  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9350  000506  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9351  00050A  EC49  F019         	call	_strcpy	;wreg free
  9352                           
  9353                           ;cmd_consol.c: 147: char uid = 0;
  9354  00050E  0E00               	movlw	0
  9355  000510  0101               	movlb	1	; () banked
  9356  000512  6F7E               	movwf	parse_cmd_str@uid& (0+255),b
  9357                           
  9358                           ; BSR set to: 1
  9359                           ;cmd_consol.c: 148: cmd_data.uid = -1;
  9360  000514  0100               	movlb	0	; () banked
  9361  000516  6986               	setf	_cmd_data& (0+255),b
  9362                           
  9363                           ; BSR set to: 0
  9364                           ;cmd_consol.c: 149: temp = strtok((0), "-', /=");
  9365  000518  0E00               	movlw	0
  9366  00051A  6E1D               	movwf	strtok@s1,c
  9367  00051C  0E00               	movlw	0
  9368  00051E  6E1E               	movwf	strtok@s1+1,c
  9369  000520  0EDF               	movlw	low STR_25
  9370  000522  6E1F               	movwf	strtok@s2,c
  9371  000524  0EFF               	movlw	high STR_25
  9372  000526  6E20               	movwf	strtok@s2+1,c
  9373  000528  EC77  F015         	call	_strtok	;wreg free
  9374  00052C  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9375  000530  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9376                           
  9377                           ;cmd_consol.c: 150: if (temp != (0)) {
  9378  000534  0101               	movlb	1	; () banked
  9379  000536  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9380  000538  0101               	movlb	1	; () banked
  9381  00053A  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9382  00053C  B4D8               	btfsc	status,2,c
  9383  00053E  D3FE               	goto	l7003
  9384                           
  9385                           ; BSR set to: 1
  9386                           ;cmd_consol.c: 151: printf("temp = %s, ", temp);
  9387  000540  0EB9               	movlw	low STR_40
  9388  000542  6E24               	movwf	printf@f,c
  9389  000544  0EFE               	movlw	high STR_40
  9390  000546  6E25               	movwf	printf@f+1,c
  9391  000548  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9392  00054C  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9393  000550  EC02  F011         	call	_printf	;wreg free
  9394                           
  9395                           ;cmd_consol.c: 152: char i = 0;
  9396  000554  0E00               	movlw	0
  9397  000556  0101               	movlb	1	; () banked
  9398  000558  6F78               	movwf	parse_cmd_str@i& (0+255),b
  9399                           
  9400                           ; BSR set to: 1
  9401                           ;cmd_consol.c: 153: uid = temp[0];
  9402  00055A  C184  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9403  00055E  C185  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9404  000562  0E00               	movlw	low (__mediumconst shr (0+16))
  9405  000564  6EF8               	movwf	tblptru,c
  9406  000566  0E0F               	movlw	(high __ramtop+-1)
  9407  000568  64F7               	cpfsgt	tblptrh,c
  9408  00056A  D003               	bra	u6957
  9409  00056C  0008               	tblrd		*
  9410  00056E  50F5               	movf	tablat,w,c
  9411  000570  D005               	bra	u6950
  9412  000572                     u6957:
  9413  000572  CFF6 FFE9          	movff	tblptrl,fsr0l
  9414  000576  CFF7 FFEA          	movff	tblptrh,fsr0h
  9415  00057A  50EF               	movf	indf0,w,c
  9416  00057C                     u6950:
  9417  00057C  0101               	movlb	1	; () banked
  9418  00057E  6F7E               	movwf	parse_cmd_str@uid& (0+255),b
  9419                           
  9420                           ; BSR set to: 1
  9421                           ;cmd_consol.c: 154: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9422  000580  0E40               	movlw	64
  9423  000582  0101               	movlb	1	; () banked
  9424  000584  657E               	cpfsgt	parse_cmd_str@uid& (0+255),b
  9425  000586  D061               	goto	l6781
  9426                           
  9427                           ; BSR set to: 1
  9428  000588  504C               	movf	_clcd_config_data+3,w,c
  9429  00058A  0101               	movlb	1	; () banked
  9430  00058C  5D7E               	subwf	parse_cmd_str@uid& (0+255),w,b
  9431  00058E  B0D8               	btfsc	status,0,c
  9432  000590  D05C               	goto	l6781
  9433                           
  9434                           ; BSR set to: 1
  9435                           ;cmd_consol.c: 155: printf("uid = %d, ", uid);
  9436  000592  0E2C               	movlw	low STR_43
  9437  000594  6E24               	movwf	printf@f,c
  9438  000596  0EFF               	movlw	high STR_43
  9439  000598  6E25               	movwf	printf@f+1,c
  9440  00059A  C17E  F026         	movff	parse_cmd_str@uid,?_printf+2
  9441  00059E  6A27               	clrf	?_printf+3,c
  9442  0005A0  EC02  F011         	call	_printf	;wreg free
  9443                           
  9444                           ;cmd_consol.c: 156: cmd_data.uid = uid;
  9445  0005A4  C17E  F086         	movff	parse_cmd_str@uid,_cmd_data
  9446                           
  9447                           ;cmd_consol.c: 157: temp = strtok((0), ",");
  9448  0005A8  0E00               	movlw	0
  9449  0005AA  6E1D               	movwf	strtok@s1,c
  9450  0005AC  0E00               	movlw	0
  9451  0005AE  6E1E               	movwf	strtok@s1+1,c
  9452  0005B0  0EFD               	movlw	low STR_44
  9453  0005B2  6E1F               	movwf	strtok@s2,c
  9454  0005B4  0EFF               	movlw	high STR_44
  9455  0005B6  6E20               	movwf	strtok@s2+1,c
  9456  0005B8  EC77  F015         	call	_strtok	;wreg free
  9457  0005BC  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9458  0005C0  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9459                           
  9460                           ;cmd_consol.c: 158: if (temp != (0)) {
  9461  0005C4  0101               	movlb	1	; () banked
  9462  0005C6  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9463  0005C8  0101               	movlb	1	; () banked
  9464  0005CA  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9465  0005CC  B4D8               	btfsc	status,2,c
  9466  0005CE  D3B6               	goto	l7003
  9467                           
  9468                           ; BSR set to: 1
  9469                           ;cmd_consol.c: 159: printf("str = %s\r\n", temp);
  9470  0005D0  0E21               	movlw	low STR_45
  9471  0005D2  6E24               	movwf	printf@f,c
  9472  0005D4  0EFF               	movlw	high STR_45
  9473  0005D6  6E25               	movwf	printf@f+1,c
  9474  0005D8  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9475  0005DC  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9476  0005E0  EC02  F011         	call	_printf	;wreg free
  9477                           
  9478                           ;cmd_consol.c: 160: if (strlen(temp) < 40) {
  9479  0005E4  C184  F01E         	movff	parse_cmd_str@temp,strlen@s
  9480  0005E8  C185  F01F         	movff	parse_cmd_str@temp+1,strlen@s+1
  9481  0005EC  EC37  F018         	call	_strlen	;wreg free
  9482  0005F0  501F               	movf	?_strlen+1,w,c
  9483  0005F2  E129               	bnz	l6777
  9484  0005F4  0E28               	movlw	40
  9485  0005F6  5C1E               	subwf	?_strlen,w,c
  9486  0005F8  B0D8               	btfsc	status,0,c
  9487  0005FA  D025               	goto	l6777
  9488                           
  9489                           ;cmd_consol.c: 161: strcpy(cmd_data.data, temp);
  9490  0005FC  0E87               	movlw	low (_cmd_data+1)
  9491  0005FE  6E10               	movwf	strcpy@to,c
  9492  000600  0E00               	movlw	high (_cmd_data+1)
  9493  000602  6E11               	movwf	strcpy@to+1,c
  9494  000604  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9495  000608  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9496  00060C  EC49  F019         	call	_strcpy	;wreg free
  9497                           
  9498                           ;cmd_consol.c: 162: valid_cmd = 1;
  9499  000610  0E01               	movlw	1
  9500  000612  0100               	movlb	0	; () banked
  9501  000614  6F84               	movwf	_valid_cmd& (0+255),b
  9502                           
  9503                           ; BSR set to: 0
  9504                           ;cmd_consol.c: 163: cmd_data.data_set = 1;
  9505  000616  0E01               	movlw	1
  9506  000618  0100               	movlb	0	; () banked
  9507  00061A  6FAF               	movwf	(_cmd_data+41)& (0+255),b
  9508                           
  9509                           ;cmd_consol.c: 164: memset(str, 0, strlen(str));
  9510  00061C  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9511  000620  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9512  000624  0E00               	movlw	0
  9513  000626  6E27               	movwf	memset@c+1,c
  9514  000628  0E00               	movlw	0
  9515  00062A  6E26               	movwf	memset@c,c
  9516  00062C  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9517  000630  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9518  000634  EC37  F018         	call	_strlen	;wreg free
  9519  000638  C01E  F028         	movff	?_strlen,memset@n
  9520  00063C  C01F  F029         	movff	?_strlen+1,memset@n+1
  9521  000640  ECA5  F01A         	call	_memset	;wreg free
  9522  000644  D58A               	goto	l6629
  9523  000646                     l6777:
  9524                           
  9525                           ;cmd_consol.c: 167: return 2;
  9526  000646  0E02               	movlw	2
  9527  000648  0012               	return	
  9528  00064A                     l6781:
  9529                           
  9530                           ;cmd_consol.c: 171: return 7;
  9531  00064A  0E07               	movlw	7
  9532  00064C  0012               	return	
  9533  00064E                     l6785:
  9534  00064E  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9535  000652  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9536  000656  0ED1               	movlw	low STR_46
  9537  000658  6E2F               	movwf	strstr@s2,c
  9538  00065A  0EFE               	movlw	high STR_46
  9539  00065C  6E30               	movwf	strstr@s2+1,c
  9540  00065E  EC30  F016         	call	_strstr	;wreg free
  9541  000662  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  9542  000666  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  9543  00066A  0101               	movlb	1	; () banked
  9544  00066C  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9545  00066E  0101               	movlb	1	; () banked
  9546  000670  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9547  000672  B4D8               	btfsc	status,2,c
  9548  000674  D135               	goto	l6867
  9549                           
  9550                           ; BSR set to: 1
  9551                           ;cmd_consol.c: 177: printf("%s...4\r\n", temp);
  9552  000676  0E6B               	movlw	low STR_47
  9553  000678  6E24               	movwf	printf@f,c
  9554  00067A  0EFF               	movlw	high STR_47
  9555  00067C  6E25               	movwf	printf@f+1,c
  9556  00067E  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9557  000682  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9558  000686  EC02  F011         	call	_printf	;wreg free
  9559                           
  9560                           ;cmd_consol.c: 178: if (clcd_config_data.init_done == 1) {
  9561  00068A  0449               	decf	_clcd_config_data,w,c
  9562  00068C  A4D8               	btfss	status,2,c
  9563  00068E  D356               	goto	l7003
  9564                           
  9565                           ;cmd_consol.c: 179: cmd_data.scroll_set = 0;
  9566  000690  0E00               	movlw	0
  9567  000692  0100               	movlb	0	; () banked
  9568  000694  6FB6               	movwf	(_cmd_data+48)& (0+255),b
  9569                           
  9570                           ; BSR set to: 0
  9571                           ;cmd_consol.c: 180: temp = strtok(ptr, "-', /=");
  9572  000696  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9573  00069A  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9574  00069E  0EDF               	movlw	low STR_25
  9575  0006A0  6E1F               	movwf	strtok@s2,c
  9576  0006A2  0EFF               	movlw	high STR_25
  9577  0006A4  6E20               	movwf	strtok@s2+1,c
  9578  0006A6  EC77  F015         	call	_strtok	;wreg free
  9579  0006AA  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9580  0006AE  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9581                           
  9582                           ;cmd_consol.c: 181: if (temp != (0)) {
  9583  0006B2  0101               	movlb	1	; () banked
  9584  0006B4  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9585  0006B6  0101               	movlb	1	; () banked
  9586  0006B8  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9587  0006BA  B4D8               	btfsc	status,2,c
  9588  0006BC  D33F               	goto	l7003
  9589                           
  9590                           ; BSR set to: 1
  9591                           ;cmd_consol.c: 182: strcpy(CMD, temp);
  9592  0006BE  0ECB               	movlw	low _CMD
  9593  0006C0  6E10               	movwf	strcpy@to,c
  9594  0006C2  0E00               	movlw	high _CMD
  9595  0006C4  6E11               	movwf	strcpy@to+1,c
  9596  0006C6  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9597  0006CA  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9598  0006CE  EC49  F019         	call	_strcpy	;wreg free
  9599                           
  9600                           ;cmd_consol.c: 183: char scroll = 0;
  9601  0006D2  0E00               	movlw	0
  9602  0006D4  0101               	movlb	1	; () banked
  9603  0006D6  6F7F               	movwf	parse_cmd_str@scroll& (0+255),b
  9604                           
  9605                           ; BSR set to: 1
  9606                           ;cmd_consol.c: 184: char uid = 0;
  9607  0006D8  0E00               	movlw	0
  9608  0006DA  0101               	movlb	1	; () banked
  9609  0006DC  6F80               	movwf	parse_cmd_str@uid_1685& (0+255),b
  9610                           
  9611                           ;cmd_consol.c: 185: temp = strtok((0), "-', /=");
  9612  0006DE  0E00               	movlw	0
  9613  0006E0  6E1D               	movwf	strtok@s1,c
  9614  0006E2  0E00               	movlw	0
  9615  0006E4  6E1E               	movwf	strtok@s1+1,c
  9616  0006E6  0EDF               	movlw	low STR_25
  9617  0006E8  6E1F               	movwf	strtok@s2,c
  9618  0006EA  0EFF               	movlw	high STR_25
  9619  0006EC  6E20               	movwf	strtok@s2+1,c
  9620  0006EE  EC77  F015         	call	_strtok	;wreg free
  9621  0006F2  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9622  0006F6  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9623                           
  9624                           ;cmd_consol.c: 186: if (temp != (0)) {
  9625  0006FA  0101               	movlb	1	; () banked
  9626  0006FC  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9627  0006FE  0101               	movlb	1	; () banked
  9628  000700  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9629  000702  B4D8               	btfsc	status,2,c
  9630  000704  D31B               	goto	l7003
  9631                           
  9632                           ; BSR set to: 1
  9633                           ;cmd_consol.c: 187: printf("%s...5\r\n", temp);
  9634  000706  0E74               	movlw	low STR_50
  9635  000708  6E24               	movwf	printf@f,c
  9636  00070A  0EFF               	movlw	high STR_50
  9637  00070C  6E25               	movwf	printf@f+1,c
  9638  00070E  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9639  000712  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9640  000716  EC02  F011         	call	_printf	;wreg free
  9641                           
  9642                           ;cmd_consol.c: 188: char i = 0;
  9643  00071A  0E00               	movlw	0
  9644  00071C  0101               	movlb	1	; () banked
  9645  00071E  6F7D               	movwf	parse_cmd_str@i_1688& (0+255),b
  9646                           
  9647                           ; BSR set to: 1
  9648                           ;cmd_consol.c: 189: uid = temp[0];
  9649  000720  C184  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9650  000724  C185  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9651  000728  0E00               	movlw	low (__mediumconst shr (0+16))
  9652  00072A  6EF8               	movwf	tblptru,c
  9653  00072C  0E0F               	movlw	(high __ramtop+-1)
  9654  00072E  64F7               	cpfsgt	tblptrh,c
  9655  000730  D003               	bra	u7047
  9656  000732  0008               	tblrd		*
  9657  000734  50F5               	movf	tablat,w,c
  9658  000736  D005               	bra	u7040
  9659  000738                     u7047:
  9660  000738  CFF6 FFE9          	movff	tblptrl,fsr0l
  9661  00073C  CFF7 FFEA          	movff	tblptrh,fsr0h
  9662  000740  50EF               	movf	indf0,w,c
  9663  000742                     u7040:
  9664  000742  0101               	movlb	1	; () banked
  9665  000744  6F80               	movwf	parse_cmd_str@uid_1685& (0+255),b
  9666                           
  9667                           ; BSR set to: 1
  9668                           ;cmd_consol.c: 190: cmd_data.scroll = -1;
  9669  000746  0100               	movlb	0	; () banked
  9670  000748  69B5               	setf	(_cmd_data+47)& (0+255),b
  9671                           
  9672                           ; BSR set to: 0
  9673                           ;cmd_consol.c: 191: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9674  00074A  0E40               	movlw	64
  9675  00074C  0101               	movlb	1	; () banked
  9676  00074E  6580               	cpfsgt	parse_cmd_str@uid_1685& (0+255),b
  9677  000750  D0C5               	goto	l6863
  9678                           
  9679                           ; BSR set to: 1
  9680  000752  504C               	movf	_clcd_config_data+3,w,c
  9681  000754  0101               	movlb	1	; () banked
  9682  000756  5D80               	subwf	parse_cmd_str@uid_1685& (0+255),w,b
  9683  000758  B0D8               	btfsc	status,0,c
  9684  00075A  D0C0               	goto	l6863
  9685                           
  9686                           ; BSR set to: 1
  9687                           ;cmd_consol.c: 192: printf("uid = %d, ", uid);
  9688  00075C  0E2C               	movlw	low STR_43
  9689  00075E  6E24               	movwf	printf@f,c
  9690  000760  0EFF               	movlw	high STR_43
  9691  000762  6E25               	movwf	printf@f+1,c
  9692  000764  C180  F026         	movff	parse_cmd_str@uid_1685,?_printf+2
  9693  000768  6A27               	clrf	?_printf+3,c
  9694  00076A  EC02  F011         	call	_printf	;wreg free
  9695                           
  9696                           ;cmd_consol.c: 193: if (uid == cmd_data.uid) {
  9697  00076E  0101               	movlb	1	; () banked
  9698  000770  5180               	movf	parse_cmd_str@uid_1685& (0+255),w,b
  9699  000772  0100               	movlb	0	; () banked
  9700  000774  1986               	xorwf	_cmd_data& (0+255),w,b
  9701  000776  A4D8               	btfss	status,2,c
  9702  000778  D2E1               	goto	l7003
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;cmd_consol.c: 194: temp = strtok((0), "-', /=");
  9706  00077A  0E00               	movlw	0
  9707  00077C  6E1D               	movwf	strtok@s1,c
  9708  00077E  0E00               	movlw	0
  9709  000780  6E1E               	movwf	strtok@s1+1,c
  9710  000782  0EDF               	movlw	low STR_25
  9711  000784  6E1F               	movwf	strtok@s2,c
  9712  000786  0EFF               	movlw	high STR_25
  9713  000788  6E20               	movwf	strtok@s2+1,c
  9714  00078A  EC77  F015         	call	_strtok	;wreg free
  9715  00078E  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9716  000792  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9717                           
  9718                           ;cmd_consol.c: 195: if (temp != (0)) {
  9719  000796  0101               	movlb	1	; () banked
  9720  000798  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9721  00079A  0101               	movlb	1	; () banked
  9722  00079C  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9723  00079E  B4D8               	btfsc	status,2,c
  9724  0007A0  D2CD               	goto	l7003
  9725                           
  9726                           ; BSR set to: 1
  9727                           ;cmd_consol.c: 196: printf("%s...6\r\n", temp);
  9728  0007A2  0E7D               	movlw	low STR_53
  9729  0007A4  6E24               	movwf	printf@f,c
  9730  0007A6  0EFF               	movlw	high STR_53
  9731  0007A8  6E25               	movwf	printf@f+1,c
  9732  0007AA  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9733  0007AE  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9734  0007B2  EC02  F011         	call	_printf	;wreg free
  9735                           
  9736                           ;cmd_consol.c: 197: for (i = 0; i < strlen(temp); i++) {
  9737  0007B6  0E00               	movlw	0
  9738  0007B8  0101               	movlb	1	; () banked
  9739  0007BA  6F7D               	movwf	parse_cmd_str@i_1688& (0+255),b
  9740  0007BC  D050               	goto	l6839
  9741  0007BE                     l6829:
  9742                           
  9743                           ;cmd_consol.c: 198: if (isdigit(temp[i]) == 1) {
  9744  0007BE  0101               	movlb	1	; () banked
  9745  0007C0  517D               	movf	parse_cmd_str@i_1688& (0+255),w,b
  9746  0007C2  0D01               	mullw	1
  9747  0007C4  C184  F0DC         	movff	parse_cmd_str@temp,??_parse_cmd_str
  9748  0007C8  C185  F0DD         	movff	parse_cmd_str@temp+1,??_parse_cmd_str+1
  9749  0007CC  50F3               	movf	prodl,w,c
  9750  0007CE  0100               	movlb	0	; () banked
  9751  0007D0  27DC               	addwf	??_parse_cmd_str& (0+255),f,b
  9752  0007D2  50F4               	movf	prodh,w,c
  9753  0007D4  0100               	movlb	0	; () banked
  9754  0007D6  23DD               	addwfc	(??_parse_cmd_str+1)& (0+255),f,b
  9755  0007D8  C0DC  FFF6         	movff	??_parse_cmd_str,tblptrl
  9756  0007DC  C0DD  FFF7         	movff	??_parse_cmd_str+1,tblptrh
  9757  0007E0  0E00               	movlw	low (__mediumconst shr (0+16))
  9758  0007E2  6EF8               	movwf	tblptru,c
  9759  0007E4  0E0F               	movlw	(high __ramtop+-1)
  9760  0007E6  64F7               	cpfsgt	tblptrh,c
  9761  0007E8  D003               	bra	u7097
  9762  0007EA  0008               	tblrd		*
  9763  0007EC  50F5               	movf	tablat,w,c
  9764  0007EE  D005               	bra	u7090
  9765  0007F0                     u7097:
  9766  0007F0  CFF6 FFE9          	movff	tblptrl,fsr0l
  9767  0007F4  CFF7 FFEA          	movff	tblptrh,fsr0h
  9768  0007F8  50EF               	movf	indf0,w,c
  9769  0007FA                     u7090:
  9770  0007FA  EC39  F01B         	call	_isdigit
  9771  0007FE  A0D8               	btfss	status,0,c
  9772  000800  D02A               	goto	l6833
  9773                           
  9774                           ;cmd_consol.c: 199: scroll = scroll * 10 + (temp[i] - '0');
  9775  000802  0101               	movlb	1	; () banked
  9776  000804  517D               	movf	parse_cmd_str@i_1688& (0+255),w,b
  9777  000806  0D01               	mullw	1
  9778  000808  C184  F0DC         	movff	parse_cmd_str@temp,??_parse_cmd_str
  9779  00080C  C185  F0DD         	movff	parse_cmd_str@temp+1,??_parse_cmd_str+1
  9780  000810  50F3               	movf	prodl,w,c
  9781  000812  0100               	movlb	0	; () banked
  9782  000814  27DC               	addwf	??_parse_cmd_str& (0+255),f,b
  9783  000816  50F4               	movf	prodh,w,c
  9784  000818  0100               	movlb	0	; () banked
  9785  00081A  23DD               	addwfc	(??_parse_cmd_str+1)& (0+255),f,b
  9786  00081C  C0DC  FFF6         	movff	??_parse_cmd_str,tblptrl
  9787  000820  C0DD  FFF7         	movff	??_parse_cmd_str+1,tblptrh
  9788  000824  0E00               	movlw	low (__mediumconst shr (0+16))
  9789  000826  6EF8               	movwf	tblptru,c
  9790  000828  0E0F               	movlw	(high __ramtop+-1)
  9791  00082A  64F7               	cpfsgt	tblptrh,c
  9792  00082C  D003               	bra	u7117
  9793  00082E  0008               	tblrd		*
  9794  000830  50F5               	movf	tablat,w,c
  9795  000832  D005               	bra	u7110
  9796  000834                     u7117:
  9797  000834  CFF6 FFE9          	movff	tblptrl,fsr0l
  9798  000838  CFF7 FFEA          	movff	tblptrh,fsr0h
  9799  00083C  50EF               	movf	indf0,w,c
  9800  00083E                     u7110:
  9801  00083E  0100               	movlb	0	; () banked
  9802  000840  6FDE               	movwf	(??_parse_cmd_str+2)& (0+255),b
  9803  000842  0101               	movlb	1	; () banked
  9804  000844  517F               	movf	parse_cmd_str@scroll& (0+255),w,b
  9805  000846  0D0A               	mullw	10
  9806  000848  50F3               	movf	prodl,w,c
  9807  00084A  0100               	movlb	0	; () banked
  9808  00084C  25DE               	addwf	(??_parse_cmd_str+2)& (0+255),w,b
  9809  00084E  0FD0               	addlw	208
  9810  000850  0101               	movlb	1	; () banked
  9811  000852  6F7F               	movwf	parse_cmd_str@scroll& (0+255),b
  9812                           
  9813                           ;cmd_consol.c: 200: } else {
  9814  000854  D002               	goto	l6837
  9815  000856                     l6833:
  9816                           
  9817                           ;cmd_consol.c: 202: return 0;
  9818  000856  0E00               	movlw	0
  9819  000858  0012               	return	
  9820  00085A                     l6837:
  9821  00085A  0101               	movlb	1	; () banked
  9822  00085C  2B7D               	incf	parse_cmd_str@i_1688& (0+255),f,b
  9823  00085E                     l6839:
  9824                           
  9825                           ; BSR set to: 1
  9826  00085E  C184  F01E         	movff	parse_cmd_str@temp,strlen@s
  9827  000862  C185  F01F         	movff	parse_cmd_str@temp+1,strlen@s+1
  9828  000866  EC37  F018         	call	_strlen	;wreg free
  9829  00086A  0101               	movlb	1	; () banked
  9830  00086C  517D               	movf	parse_cmd_str@i_1688& (0+255),w,b
  9831  00086E  0100               	movlb	0	; () banked
  9832  000870  6FDC               	movwf	??_parse_cmd_str& (0+255),b
  9833  000872  6BDD               	clrf	(??_parse_cmd_str+1)& (0+255),b
  9834  000874  501E               	movf	?_strlen,w,c
  9835  000876  0100               	movlb	0	; () banked
  9836  000878  5DDC               	subwf	??_parse_cmd_str& (0+255),w,b
  9837  00087A  501F               	movf	?_strlen+1,w,c
  9838  00087C  0100               	movlb	0	; () banked
  9839  00087E  59DD               	subwfb	(??_parse_cmd_str+1)& (0+255),w,b
  9840  000880  A0D8               	btfss	status,0,c
  9841  000882  D79D               	goto	l6829
  9842                           
  9843                           ; BSR set to: 0
  9844                           ;cmd_consol.c: 203: }
  9845                           ;cmd_consol.c: 204: }
  9846                           ;cmd_consol.c: 206: if (scroll < 3) {
  9847                           
  9848                           ; BSR set to: 0
  9849  000884  0E03               	movlw	3
  9850  000886  0101               	movlb	1	; () banked
  9851  000888  617F               	cpfslt	parse_cmd_str@scroll& (0+255),b
  9852  00088A  D026               	goto	l6859
  9853                           
  9854                           ; BSR set to: 1
  9855                           ;cmd_consol.c: 207: printf("scroll = %d, ", scroll);
  9856  00088C  0E86               	movlw	low STR_54
  9857  00088E  6E24               	movwf	printf@f,c
  9858  000890  0EFE               	movlw	high STR_54
  9859  000892  6E25               	movwf	printf@f+1,c
  9860  000894  C17F  F026         	movff	parse_cmd_str@scroll,?_printf+2
  9861  000898  6A27               	clrf	?_printf+3,c
  9862  00089A  EC02  F011         	call	_printf	;wreg free
  9863                           
  9864                           ;cmd_consol.c: 208: cmd_data.scroll = scroll;
  9865  00089E  C17F  F0B5         	movff	parse_cmd_str@scroll,_cmd_data+47
  9866                           
  9867                           ;cmd_consol.c: 209: cmd_data.scroll_set = 1;
  9868  0008A2  0E01               	movlw	1
  9869  0008A4  0100               	movlb	0	; () banked
  9870  0008A6  6FB6               	movwf	(_cmd_data+48)& (0+255),b
  9871                           
  9872                           ; BSR set to: 0
  9873                           ;cmd_consol.c: 210: valid_cmd = 1;
  9874  0008A8  0E01               	movlw	1
  9875  0008AA  0100               	movlb	0	; () banked
  9876  0008AC  6F84               	movwf	_valid_cmd& (0+255),b
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;cmd_consol.c: 211: memset(str, 0, strlen(str));
  9880  0008AE  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9881  0008B2  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9882  0008B6  0E00               	movlw	0
  9883  0008B8  6E27               	movwf	memset@c+1,c
  9884  0008BA  0E00               	movlw	0
  9885  0008BC  6E26               	movwf	memset@c,c
  9886  0008BE  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9887  0008C2  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9888  0008C6  EC37  F018         	call	_strlen	;wreg free
  9889  0008CA  C01E  F028         	movff	?_strlen,memset@n
  9890  0008CE  C01F  F029         	movff	?_strlen+1,memset@n+1
  9891  0008D2  ECA5  F01A         	call	_memset	;wreg free
  9892  0008D6  D441               	goto	l6629
  9893  0008D8                     l6859:
  9894                           
  9895                           ;cmd_consol.c: 214: return 4;
  9896  0008D8  0E04               	movlw	4
  9897  0008DA  0012               	return	
  9898  0008DC                     l6863:
  9899                           
  9900                           ;cmd_consol.c: 219: return 7;
  9901  0008DC  0E07               	movlw	7
  9902  0008DE  0012               	return	
  9903  0008E0                     l6867:
  9904  0008E0  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9905  0008E4  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9906  0008E8  0E37               	movlw	low STR_55
  9907  0008EA  6E2F               	movwf	strstr@s2,c
  9908  0008EC  0EFF               	movlw	high STR_55
  9909  0008EE  6E30               	movwf	strstr@s2+1,c
  9910  0008F0  EC30  F016         	call	_strstr	;wreg free
  9911  0008F4  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  9912  0008F8  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  9913  0008FC  0101               	movlb	1	; () banked
  9914  0008FE  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9915  000900  0101               	movlb	1	; () banked
  9916  000902  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9917  000904  B4D8               	btfsc	status,2,c
  9918  000906  D145               	goto	l6957
  9919                           
  9920                           ; BSR set to: 1
  9921                           ;cmd_consol.c: 225: if (clcd_config_data.init_done == 1) {
  9922  000908  0449               	decf	_clcd_config_data,w,c
  9923  00090A  A4D8               	btfss	status,2,c
  9924  00090C  D217               	goto	l7003
  9925                           
  9926                           ; BSR set to: 1
  9927                           ;cmd_consol.c: 226: cmd_data.row_col_set = 0;
  9928  00090E  0E00               	movlw	0
  9929  000910  0100               	movlb	0	; () banked
  9930  000912  6FB4               	movwf	(_cmd_data+46)& (0+255),b
  9931                           
  9932                           ; BSR set to: 0
  9933                           ;cmd_consol.c: 227: temp = strtok(ptr, "-', /=");
  9934  000914  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9935  000918  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9936  00091C  0EDF               	movlw	low STR_25
  9937  00091E  6E1F               	movwf	strtok@s2,c
  9938  000920  0EFF               	movlw	high STR_25
  9939  000922  6E20               	movwf	strtok@s2+1,c
  9940  000924  EC77  F015         	call	_strtok	;wreg free
  9941  000928  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9942  00092C  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9943                           
  9944                           ;cmd_consol.c: 228: if (temp != (0)) {
  9945  000930  0101               	movlb	1	; () banked
  9946  000932  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9947  000934  0101               	movlb	1	; () banked
  9948  000936  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9949  000938  B4D8               	btfsc	status,2,c
  9950  00093A  D200               	goto	l7003
  9951                           
  9952                           ; BSR set to: 1
  9953                           ;cmd_consol.c: 229: strcpy(CMD, temp);
  9954  00093C  0ECB               	movlw	low _CMD
  9955  00093E  6E10               	movwf	strcpy@to,c
  9956  000940  0E00               	movlw	high _CMD
  9957  000942  6E11               	movwf	strcpy@to+1,c
  9958  000944  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9959  000948  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9960  00094C  EC49  F019         	call	_strcpy	;wreg free
  9961                           
  9962                           ;cmd_consol.c: 230: temp = strtok((0), "-', /=");
  9963  000950  0E00               	movlw	0
  9964  000952  6E1D               	movwf	strtok@s1,c
  9965  000954  0E00               	movlw	0
  9966  000956  6E1E               	movwf	strtok@s1+1,c
  9967  000958  0EDF               	movlw	low STR_25
  9968  00095A  6E1F               	movwf	strtok@s2,c
  9969  00095C  0EFF               	movlw	high STR_25
  9970  00095E  6E20               	movwf	strtok@s2+1,c
  9971  000960  EC77  F015         	call	_strtok	;wreg free
  9972  000964  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9973  000968  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9974                           
  9975                           ;cmd_consol.c: 231: char uid = 0;
  9976  00096C  0E00               	movlw	0
  9977  00096E  0101               	movlb	1	; () banked
  9978  000970  6F81               	movwf	parse_cmd_str@uid_1696& (0+255),b
  9979                           
  9980                           ; BSR set to: 1
  9981                           ;cmd_consol.c: 232: if (temp != (0)) {
  9982  000972  0101               	movlb	1	; () banked
  9983  000974  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9984  000976  0101               	movlb	1	; () banked
  9985  000978  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9986  00097A  B4D8               	btfsc	status,2,c
  9987  00097C  D1DF               	goto	l7003
  9988                           
  9989                           ; BSR set to: 1
  9990                           ;cmd_consol.c: 233: char i = 0;
  9991  00097E  0E00               	movlw	0
  9992  000980  0101               	movlb	1	; () banked
  9993  000982  6F79               	movwf	parse_cmd_str@i_1697& (0+255),b
  9994                           
  9995                           ; BSR set to: 1
  9996                           ;cmd_consol.c: 234: uid = temp[0];
  9997  000984  C184  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9998  000988  C185  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9999  00098C  0E00               	movlw	low (__mediumconst shr (0+16))
 10000  00098E  6EF8               	movwf	tblptru,c
 10001  000990  0E0F               	movlw	(high __ramtop+-1)
 10002  000992  64F7               	cpfsgt	tblptrh,c
 10003  000994  D003               	bra	u7187
 10004  000996  0008               	tblrd		*
 10005  000998  50F5               	movf	tablat,w,c
 10006  00099A  D005               	bra	u7180
 10007  00099C                     u7187:
 10008  00099C  CFF6 FFE9          	movff	tblptrl,fsr0l
 10009  0009A0  CFF7 FFEA          	movff	tblptrh,fsr0h
 10010  0009A4  50EF               	movf	indf0,w,c
 10011  0009A6                     u7180:
 10012  0009A6  0101               	movlb	1	; () banked
 10013  0009A8  6F81               	movwf	parse_cmd_str@uid_1696& (0+255),b
 10014                           
 10015                           ; BSR set to: 1
 10016                           ;cmd_consol.c: 235: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
 10017  0009AA  0E40               	movlw	64
 10018  0009AC  0101               	movlb	1	; () banked
 10019  0009AE  6581               	cpfsgt	parse_cmd_str@uid_1696& (0+255),b
 10020  0009B0  D0EE               	goto	l6953
 10021                           
 10022                           ; BSR set to: 1
 10023  0009B2  504C               	movf	_clcd_config_data+3,w,c
 10024  0009B4  0101               	movlb	1	; () banked
 10025  0009B6  5D81               	subwf	parse_cmd_str@uid_1696& (0+255),w,b
 10026  0009B8  B0D8               	btfsc	status,0,c
 10027  0009BA  D0E9               	goto	l6953
 10028                           
 10029                           ; BSR set to: 1
 10030                           ;cmd_consol.c: 236: printf("uid = %d,\r\n", uid);
 10031  0009BC  0EA1               	movlw	low STR_58
 10032  0009BE  6E24               	movwf	printf@f,c
 10033  0009C0  0EFE               	movlw	high STR_58
 10034  0009C2  6E25               	movwf	printf@f+1,c
 10035  0009C4  C181  F026         	movff	parse_cmd_str@uid_1696,?_printf+2
 10036  0009C8  6A27               	clrf	?_printf+3,c
 10037  0009CA  EC02  F011         	call	_printf	;wreg free
 10038                           
 10039                           ;cmd_consol.c: 237: if (uid == cmd_data.uid) {
 10040  0009CE  0101               	movlb	1	; () banked
 10041  0009D0  5181               	movf	parse_cmd_str@uid_1696& (0+255),w,b
 10042  0009D2  0100               	movlb	0	; () banked
 10043  0009D4  1986               	xorwf	_cmd_data& (0+255),w,b
 10044  0009D6  A4D8               	btfss	status,2,c
 10045  0009D8  D1B1               	goto	l7003
 10046                           
 10047                           ; BSR set to: 0
 10048                           ;cmd_consol.c: 238: temp = strtok((0), "-', /=");
 10049  0009DA  0E00               	movlw	0
 10050  0009DC  6E1D               	movwf	strtok@s1,c
 10051  0009DE  0E00               	movlw	0
 10052  0009E0  6E1E               	movwf	strtok@s1+1,c
 10053  0009E2  0EDF               	movlw	low STR_25
 10054  0009E4  6E1F               	movwf	strtok@s2,c
 10055  0009E6  0EFF               	movlw	high STR_25
 10056  0009E8  6E20               	movwf	strtok@s2+1,c
 10057  0009EA  EC77  F015         	call	_strtok	;wreg free
 10058  0009EE  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10059  0009F2  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10060                           
 10061                           ;cmd_consol.c: 239: if (temp != (0)) {
 10062  0009F6  0101               	movlb	1	; () banked
 10063  0009F8  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10064  0009FA  0101               	movlb	1	; () banked
 10065  0009FC  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10066  0009FE  B4D8               	btfsc	status,2,c
 10067  000A00  D19D               	goto	l7003
 10068                           
 10069                           ; BSR set to: 1
 10070                           ;cmd_consol.c: 240: collect_row(temp, &cmd_data.start_row);
 10071  000A02  C184  F036         	movff	parse_cmd_str@temp,collect_row@str
 10072  000A06  C185  F037         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10073  000A0A  0EB0               	movlw	low (_cmd_data+42)
 10074  000A0C  6E38               	movwf	collect_row@data_row,c
 10075  000A0E  0E00               	movlw	high (_cmd_data+42)
 10076  000A10  6E39               	movwf	collect_row@data_row+1,c
 10077  000A12  ECA2  F014         	call	_collect_row	;wreg free
 10078                           
 10079                           ;cmd_consol.c: 241: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 10080  000A16  0E31               	movlw	low STR_60
 10081  000A18  6E24               	movwf	printf@f,c
 10082  000A1A  0EFD               	movlw	high STR_60
 10083  000A1C  6E25               	movwf	printf@f+1,c
 10084  000A1E  C0B0  F026         	movff	_cmd_data+42,?_printf+2
 10085  000A22  6A27               	clrf	?_printf+3,c
 10086  000A24  EC02  F011         	call	_printf	;wreg free
 10087                           
 10088                           ;cmd_consol.c: 242: if (cmd_data.start_row != 255) {
 10089  000A28  0100               	movlb	0	; () banked
 10090  000A2A  29B0               	incf	(_cmd_data+42)& (0+255),w,b
 10091  000A2C  B4D8               	btfsc	status,2,c
 10092  000A2E  D0AD               	goto	l6949
 10093                           
 10094                           ; BSR set to: 0
 10095                           ;cmd_consol.c: 243: temp = strtok((0), "-', /=");
 10096  000A30  0E00               	movlw	0
 10097  000A32  6E1D               	movwf	strtok@s1,c
 10098  000A34  0E00               	movlw	0
 10099  000A36  6E1E               	movwf	strtok@s1+1,c
 10100  000A38  0EDF               	movlw	low STR_25
 10101  000A3A  6E1F               	movwf	strtok@s2,c
 10102  000A3C  0EFF               	movlw	high STR_25
 10103  000A3E  6E20               	movwf	strtok@s2+1,c
 10104  000A40  EC77  F015         	call	_strtok	;wreg free
 10105  000A44  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10106  000A48  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10107                           
 10108                           ;cmd_consol.c: 244: if (temp != (0)) {
 10109  000A4C  0101               	movlb	1	; () banked
 10110  000A4E  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10111  000A50  0101               	movlb	1	; () banked
 10112  000A52  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10113  000A54  B4D8               	btfsc	status,2,c
 10114  000A56  D172               	goto	l7003
 10115                           
 10116                           ; BSR set to: 1
 10117                           ;cmd_consol.c: 245: collect_column(temp, &cmd_data.start_col);
 10118  000A58  C184  F036         	movff	parse_cmd_str@temp,collect_column@str
 10119  000A5C  C185  F037         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10120  000A60  0EB1               	movlw	low (_cmd_data+43)
 10121  000A62  6E38               	movwf	collect_column@data_column,c
 10122  000A64  0E00               	movlw	high (_cmd_data+43)
 10123  000A66  6E39               	movwf	collect_column@data_column+1,c
 10124  000A68  ECEE  F011         	call	_collect_column	;wreg free
 10125                           
 10126                           ;cmd_consol.c: 246: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 10127  000A6C  0E16               	movlw	low STR_62
 10128  000A6E  6E24               	movwf	printf@f,c
 10129  000A70  0EFD               	movlw	high STR_62
 10130  000A72  6E25               	movwf	printf@f+1,c
 10131  000A74  C0B1  F026         	movff	_cmd_data+43,?_printf+2
 10132  000A78  6A27               	clrf	?_printf+3,c
 10133  000A7A  EC02  F011         	call	_printf	;wreg free
 10134                           
 10135                           ;cmd_consol.c: 247: if (cmd_data.start_row != 255) {
 10136  000A7E  0100               	movlb	0	; () banked
 10137  000A80  29B0               	incf	(_cmd_data+42)& (0+255),w,b
 10138  000A82  B4D8               	btfsc	status,2,c
 10139  000A84  D080               	goto	l6945
 10140                           
 10141                           ; BSR set to: 0
 10142                           ;cmd_consol.c: 248: temp = strtok((0), "-', /=");
 10143  000A86  0E00               	movlw	0
 10144  000A88  6E1D               	movwf	strtok@s1,c
 10145  000A8A  0E00               	movlw	0
 10146  000A8C  6E1E               	movwf	strtok@s1+1,c
 10147  000A8E  0EDF               	movlw	low STR_25
 10148  000A90  6E1F               	movwf	strtok@s2,c
 10149  000A92  0EFF               	movlw	high STR_25
 10150  000A94  6E20               	movwf	strtok@s2+1,c
 10151  000A96  EC77  F015         	call	_strtok	;wreg free
 10152  000A9A  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10153  000A9E  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10154                           
 10155                           ;cmd_consol.c: 249: if (temp != (0)) {
 10156  000AA2  0101               	movlb	1	; () banked
 10157  000AA4  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10158  000AA6  0101               	movlb	1	; () banked
 10159  000AA8  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10160  000AAA  B4D8               	btfsc	status,2,c
 10161  000AAC  D147               	goto	l7003
 10162                           
 10163                           ; BSR set to: 1
 10164                           ;cmd_consol.c: 250: collect_row(temp, &cmd_data.end_row);
 10165  000AAE  C184  F036         	movff	parse_cmd_str@temp,collect_row@str
 10166  000AB2  C185  F037         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10167  000AB6  0EB2               	movlw	low (_cmd_data+44)
 10168  000AB8  6E38               	movwf	collect_row@data_row,c
 10169  000ABA  0E00               	movlw	high (_cmd_data+44)
 10170  000ABC  6E39               	movwf	collect_row@data_row+1,c
 10171  000ABE  ECA2  F014         	call	_collect_row	;wreg free
 10172                           
 10173                           ;cmd_consol.c: 251: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 10174  000AC2  0EB3               	movlw	low STR_64
 10175  000AC4  6E24               	movwf	printf@f,c
 10176  000AC6  0EFD               	movlw	high STR_64
 10177  000AC8  6E25               	movwf	printf@f+1,c
 10178  000ACA  C0B2  F026         	movff	_cmd_data+44,?_printf+2
 10179  000ACE  6A27               	clrf	?_printf+3,c
 10180  000AD0  EC02  F011         	call	_printf	;wreg free
 10181                           
 10182                           ;cmd_consol.c: 252: if (cmd_data.end_row != 255) {
 10183  000AD4  0100               	movlb	0	; () banked
 10184  000AD6  29B2               	incf	(_cmd_data+44)& (0+255),w,b
 10185  000AD8  B4D8               	btfsc	status,2,c
 10186  000ADA  D053               	goto	l6941
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;cmd_consol.c: 253: temp = strtok((0), "-', /=");
 10190  000ADC  0E00               	movlw	0
 10191  000ADE  6E1D               	movwf	strtok@s1,c
 10192  000AE0  0E00               	movlw	0
 10193  000AE2  6E1E               	movwf	strtok@s1+1,c
 10194  000AE4  0EDF               	movlw	low STR_25
 10195  000AE6  6E1F               	movwf	strtok@s2,c
 10196  000AE8  0EFF               	movlw	high STR_25
 10197  000AEA  6E20               	movwf	strtok@s2+1,c
 10198  000AEC  EC77  F015         	call	_strtok	;wreg free
 10199  000AF0  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10200  000AF4  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10201                           
 10202                           ;cmd_consol.c: 254: if (temp != (0)) {
 10203  000AF8  0101               	movlb	1	; () banked
 10204  000AFA  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10205  000AFC  0101               	movlb	1	; () banked
 10206  000AFE  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10207  000B00  B4D8               	btfsc	status,2,c
 10208  000B02  D11C               	goto	l7003
 10209                           
 10210                           ; BSR set to: 1
 10211                           ;cmd_consol.c: 255: printf("col = %s\r\n", temp);
 10212  000B04  0E16               	movlw	low STR_66
 10213  000B06  6E24               	movwf	printf@f,c
 10214  000B08  0EFF               	movlw	high STR_66
 10215  000B0A  6E25               	movwf	printf@f+1,c
 10216  000B0C  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
 10217  000B10  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
 10218  000B14  EC02  F011         	call	_printf	;wreg free
 10219                           
 10220                           ;cmd_consol.c: 256: collect_column(temp, &cmd_data.end_col);
 10221  000B18  C184  F036         	movff	parse_cmd_str@temp,collect_column@str
 10222  000B1C  C185  F037         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10223  000B20  0EB3               	movlw	low (_cmd_data+45)
 10224  000B22  6E38               	movwf	collect_column@data_column,c
 10225  000B24  0E00               	movlw	high (_cmd_data+45)
 10226  000B26  6E39               	movwf	collect_column@data_column+1,c
 10227  000B28  ECEE  F011         	call	_collect_column	;wreg free
 10228                           
 10229                           ;cmd_consol.c: 257: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 10230  000B2C  0E9A               	movlw	low STR_67
 10231  000B2E  6E24               	movwf	printf@f,c
 10232  000B30  0EFD               	movlw	high STR_67
 10233  000B32  6E25               	movwf	printf@f+1,c
 10234  000B34  C0B3  F026         	movff	_cmd_data+45,?_printf+2
 10235  000B38  6A27               	clrf	?_printf+3,c
 10236  000B3A  EC02  F011         	call	_printf	;wreg free
 10237                           
 10238                           ;cmd_consol.c: 258: if (cmd_data.end_row != 255) {
 10239  000B3E  0100               	movlb	0	; () banked
 10240  000B40  29B2               	incf	(_cmd_data+44)& (0+255),w,b
 10241  000B42  B4D8               	btfsc	status,2,c
 10242  000B44  D01C               	goto	l6937
 10243                           
 10244                           ; BSR set to: 0
 10245                           ;cmd_consol.c: 259: cmd_data.row_col_set = 1;
 10246  000B46  0E01               	movlw	1
 10247  000B48  0100               	movlb	0	; () banked
 10248  000B4A  6FB4               	movwf	(_cmd_data+46)& (0+255),b
 10249                           
 10250                           ;cmd_consol.c: 260: valid_cmd = 1;
 10251  000B4C  0E01               	movlw	1
 10252  000B4E  0100               	movlb	0	; () banked
 10253  000B50  6F84               	movwf	_valid_cmd& (0+255),b
 10254                           
 10255                           ; BSR set to: 0
 10256                           ;cmd_consol.c: 261: memset(str, 0, strlen(str));
 10257  000B52  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10258  000B56  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10259  000B5A  0E00               	movlw	0
 10260  000B5C  6E27               	movwf	memset@c+1,c
 10261  000B5E  0E00               	movlw	0
 10262  000B60  6E26               	movwf	memset@c,c
 10263  000B62  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10264  000B66  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10265  000B6A  EC37  F018         	call	_strlen	;wreg free
 10266  000B6E  C01E  F028         	movff	?_strlen,memset@n
 10267  000B72  C01F  F029         	movff	?_strlen+1,memset@n+1
 10268  000B76  ECA5  F01A         	call	_memset	;wreg free
 10269  000B7A  EFAD  F000         	goto	l6629
 10270  000B7E                     l6937:
 10271                           
 10272                           ;cmd_consol.c: 264: return 3;
 10273  000B7E  0E03               	movlw	3
 10274  000B80  0012               	return	
 10275  000B82                     l6941:
 10276                           
 10277                           ;cmd_consol.c: 268: return 3;
 10278  000B82  0E03               	movlw	3
 10279  000B84  0012               	return	
 10280  000B86                     l6945:
 10281                           
 10282                           ;cmd_consol.c: 272: return 3;
 10283  000B86  0E03               	movlw	3
 10284  000B88  0012               	return	
 10285  000B8A                     l6949:
 10286                           
 10287                           ;cmd_consol.c: 276: return 3;
 10288  000B8A  0E03               	movlw	3
 10289  000B8C  0012               	return	
 10290  000B8E                     l6953:
 10291                           
 10292                           ;cmd_consol.c: 281: return 7;
 10293  000B8E  0E07               	movlw	7
 10294  000B90  0012               	return	
 10295  000B92                     l6957:
 10296  000B92  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
 10297  000B96  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10298  000B9A  0E42               	movlw	low STR_68
 10299  000B9C  6E2F               	movwf	strstr@s2,c
 10300  000B9E  0EFF               	movlw	high STR_68
 10301  000BA0  6E30               	movwf	strstr@s2+1,c
 10302  000BA2  EC30  F016         	call	_strstr	;wreg free
 10303  000BA6  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
 10304  000BAA  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
 10305  000BAE  0101               	movlb	1	; () banked
 10306  000BB0  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10307  000BB2  0101               	movlb	1	; () banked
 10308  000BB4  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10309  000BB6  B4D8               	btfsc	status,2,c
 10310  000BB8  D01F               	goto	l6969
 10311                           
 10312                           ; BSR set to: 1
 10313                           ;cmd_consol.c: 287: strcpy(CMD, temp);
 10314  000BBA  0ECB               	movlw	low _CMD
 10315  000BBC  6E10               	movwf	strcpy@to,c
 10316  000BBE  0E00               	movlw	high _CMD
 10317  000BC0  6E11               	movwf	strcpy@to+1,c
 10318  000BC2  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
 10319  000BC6  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10320  000BCA  EC49  F019         	call	_strcpy	;wreg free
 10321                           
 10322                           ;cmd_consol.c: 288: memset(str, 0, strlen(str));
 10323  000BCE  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10324  000BD2  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10325  000BD6  0E00               	movlw	0
 10326  000BD8  6E27               	movwf	memset@c+1,c
 10327  000BDA  0E00               	movlw	0
 10328  000BDC  6E26               	movwf	memset@c,c
 10329  000BDE  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10330  000BE2  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10331  000BE6  EC37  F018         	call	_strlen	;wreg free
 10332  000BEA  C01E  F028         	movff	?_strlen,memset@n
 10333  000BEE  C01F  F029         	movff	?_strlen+1,memset@n+1
 10334  000BF2  ECA5  F01A         	call	_memset	;wreg free
 10335  000BF6  D09D               	goto	l6997
 10336  000BF8                     l6969:
 10337  000BF8  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
 10338  000BFC  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10339  000C00  0E86               	movlw	low STR_69
 10340  000C02  6E2F               	movwf	strstr@s2,c
 10341  000C04  0EFF               	movlw	high STR_69
 10342  000C06  6E30               	movwf	strstr@s2+1,c
 10343  000C08  EC30  F016         	call	_strstr	;wreg free
 10344  000C0C  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
 10345  000C10  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
 10346  000C14  0101               	movlb	1	; () banked
 10347  000C16  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10348  000C18  0101               	movlb	1	; () banked
 10349  000C1A  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10350  000C1C  B4D8               	btfsc	status,2,c
 10351  000C1E  D057               	goto	l6993
 10352                           
 10353                           ; BSR set to: 1
 10354                           ;cmd_consol.c: 292: if (clcd_config_data.init_done == 1) {
 10355  000C20  0449               	decf	_clcd_config_data,w,c
 10356  000C22  A4D8               	btfss	status,2,c
 10357  000C24  D08B               	goto	l7003
 10358                           
 10359                           ; BSR set to: 1
 10360                           ;cmd_consol.c: 293: temp = strtok(ptr, "-', /=");
 10361  000C26  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
 10362  000C2A  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
 10363  000C2E  0EDF               	movlw	low STR_25
 10364  000C30  6E1F               	movwf	strtok@s2,c
 10365  000C32  0EFF               	movlw	high STR_25
 10366  000C34  6E20               	movwf	strtok@s2+1,c
 10367  000C36  EC77  F015         	call	_strtok	;wreg free
 10368  000C3A  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10369  000C3E  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10370                           
 10371                           ;cmd_consol.c: 294: if (temp != (0)) {
 10372  000C42  0101               	movlb	1	; () banked
 10373  000C44  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10374  000C46  0101               	movlb	1	; () banked
 10375  000C48  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10376  000C4A  B4D8               	btfsc	status,2,c
 10377  000C4C  D077               	goto	l7003
 10378                           
 10379                           ; BSR set to: 1
 10380                           ;cmd_consol.c: 295: strcpy(CMD, temp);
 10381  000C4E  0ECB               	movlw	low _CMD
 10382  000C50  6E10               	movwf	strcpy@to,c
 10383  000C52  0E00               	movlw	high _CMD
 10384  000C54  6E11               	movwf	strcpy@to+1,c
 10385  000C56  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
 10386  000C5A  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10387  000C5E  EC49  F019         	call	_strcpy	;wreg free
 10388                           
 10389                           ;cmd_consol.c: 296: char uid = 0;
 10390  000C62  0E00               	movlw	0
 10391  000C64  0101               	movlb	1	; () banked
 10392  000C66  6F7C               	movwf	parse_cmd_str@uid_1713& (0+255),b
 10393                           
 10394                           ; BSR set to: 1
 10395                           ;cmd_consol.c: 297: temp = strtok(ptr, "-', /=");
 10396  000C68  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
 10397  000C6C  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
 10398  000C70  0EDF               	movlw	low STR_25
 10399  000C72  6E1F               	movwf	strtok@s2,c
 10400  000C74  0EFF               	movlw	high STR_25
 10401  000C76  6E20               	movwf	strtok@s2+1,c
 10402  000C78  EC77  F015         	call	_strtok	;wreg free
 10403  000C7C  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10404  000C80  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10405                           
 10406                           ;cmd_consol.c: 298: if (temp != (0)) {
 10407  000C84  0101               	movlb	1	; () banked
 10408  000C86  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10409  000C88  0101               	movlb	1	; () banked
 10410  000C8A  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10411  000C8C  B4D8               	btfsc	status,2,c
 10412  000C8E  D056               	goto	l7003
 10413                           
 10414                           ; BSR set to: 1
 10415                           ;cmd_consol.c: 299: uid = temp[0];
 10416  000C90  C184  FFF6         	movff	parse_cmd_str@temp,tblptrl
 10417  000C94  C185  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
 10418  000C98  0E00               	movlw	low (__mediumconst shr (0+16))
 10419  000C9A  6EF8               	movwf	tblptru,c
 10420  000C9C  0E0F               	movlw	(high __ramtop+-1)
 10421  000C9E  64F7               	cpfsgt	tblptrh,c
 10422  000CA0  D003               	bra	u7357
 10423  000CA2  0008               	tblrd		*
 10424  000CA4  50F5               	movf	tablat,w,c
 10425  000CA6  D005               	bra	u7350
 10426  000CA8                     u7357:
 10427  000CA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 10428  000CAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 10429  000CB0  50EF               	movf	indf0,w,c
 10430  000CB2                     u7350:
 10431  000CB2  0101               	movlb	1	; () banked
 10432  000CB4  6F7C               	movwf	parse_cmd_str@uid_1713& (0+255),b
 10433                           
 10434                           ; BSR set to: 1
 10435                           ;cmd_consol.c: 300: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
 10436  000CB6  0E40               	movlw	64
 10437  000CB8  0101               	movlb	1	; () banked
 10438  000CBA  657C               	cpfsgt	parse_cmd_str@uid_1713& (0+255),b
 10439  000CBC  D03F               	goto	l7003
 10440                           
 10441                           ; BSR set to: 1
 10442  000CBE  504C               	movf	_clcd_config_data+3,w,c
 10443  000CC0  0101               	movlb	1	; () banked
 10444  000CC2  5D7C               	subwf	parse_cmd_str@uid_1713& (0+255),w,b
 10445  000CC4  B0D8               	btfsc	status,0,c
 10446  000CC6  D03A               	goto	l7003
 10447                           
 10448                           ; BSR set to: 1
 10449                           ;cmd_consol.c: 301: cmd_data.uid = uid;
 10450  000CC8  C17C  F086         	movff	parse_cmd_str@uid_1713,_cmd_data
 10451                           
 10452                           ; BSR set to: 1
 10453                           ;cmd_consol.c: 302: }
 10454                           ;cmd_consol.c: 303: }
 10455                           ;cmd_consol.c: 304: }
 10456                           ;cmd_consol.c: 305: }
 10457                           ;cmd_consol.c: 306: } else if ((temp = strstr(ptr, "KLM")) != (0)) {
 10458                           
 10459                           ; BSR set to: 1
 10460                           
 10461                           ; BSR set to: 1
 10462                           
 10463                           ; BSR set to: 1
 10464  000CCC  D037               	goto	l7003
 10465  000CCE                     l6993:
 10466                           
 10467                           ; BSR set to: 1
 10468  000CCE  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
 10469  000CD2  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10470  000CD6  0EF6               	movlw	low STR_72
 10471  000CD8  6E2F               	movwf	strstr@s2,c
 10472  000CDA  0EFF               	movlw	high STR_72
 10473  000CDC  6E30               	movwf	strstr@s2+1,c
 10474  000CDE  EC30  F016         	call	_strstr	;wreg free
 10475  000CE2  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
 10476  000CE6  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
 10477  000CEA  0101               	movlb	1	; () banked
 10478  000CEC  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10479  000CEE  0101               	movlb	1	; () banked
 10480  000CF0  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10481  000CF2  B4D8               	btfsc	status,2,c
 10482  000CF4  D023               	goto	l7003
 10483                           
 10484                           ; BSR set to: 1
 10485                           ;cmd_consol.c: 307: strcpy(CMD, temp);
 10486  000CF6  0ECB               	movlw	low _CMD
 10487  000CF8  6E10               	movwf	strcpy@to,c
 10488  000CFA  0E00               	movlw	high _CMD
 10489  000CFC  6E11               	movwf	strcpy@to+1,c
 10490  000CFE  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
 10491  000D02  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10492  000D06  EC49  F019         	call	_strcpy	;wreg free
 10493                           
 10494                           ;cmd_consol.c: 308: memset(str, 0, strlen(str));
 10495  000D0A  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10496  000D0E  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10497  000D12  0E00               	movlw	0
 10498  000D14  6E27               	movwf	memset@c+1,c
 10499  000D16  0E00               	movlw	0
 10500  000D18  6E26               	movwf	memset@c,c
 10501  000D1A  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10502  000D1E  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10503  000D22  EC37  F018         	call	_strlen	;wreg free
 10504  000D26  C01E  F028         	movff	?_strlen,memset@n
 10505  000D2A  C01F  F029         	movff	?_strlen+1,memset@n+1
 10506  000D2E  ECA5  F01A         	call	_memset	;wreg free
 10507  000D32                     l6997:
 10508                           
 10509                           ;cmd_consol.c: 309: valid_cmd = 1;
 10510  000D32  0E01               	movlw	1
 10511  000D34  0100               	movlb	0	; () banked
 10512  000D36  6F84               	movwf	_valid_cmd& (0+255),b
 10513  000D38  EFAD  F000         	goto	l6629
 10514  000D3C                     l7003:
 10515                           
 10516                           ;cmd_consol.c: 311: }
 10517                           ;cmd_consol.c: 312: memset(str, 0, strlen(str));
 10518  000D3C  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10519  000D40  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10520  000D44  0E00               	movlw	0
 10521  000D46  6E27               	movwf	memset@c+1,c
 10522  000D48  0E00               	movlw	0
 10523  000D4A  6E26               	movwf	memset@c,c
 10524  000D4C  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10525  000D50  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10526  000D54  EC37  F018         	call	_strlen	;wreg free
 10527  000D58  C01E  F028         	movff	?_strlen,memset@n
 10528  000D5C  C01F  F029         	movff	?_strlen+1,memset@n+1
 10529  000D60  ECA5  F01A         	call	_memset	;wreg free
 10530                           
 10531                           ;cmd_consol.c: 313: return 1;
 10532  000D64  0E01               	movlw	1
 10533  000D66  0012               	return	
 10534  000D68                     __end_of_parse_cmd_str:
 10535                           	opt stack 0
 10536                           tblptru	equ	0xFF8
 10537                           tblptrh	equ	0xFF7
 10538                           tblptrl	equ	0xFF6
 10539                           tablat	equ	0xFF5
 10540                           prodh	equ	0xFF4
 10541                           prodl	equ	0xFF3
 10542                           intcon	equ	0xFF2
 10543                           indf0	equ	0xFEF
 10544                           postinc0	equ	0xFEE
 10545                           fsr0h	equ	0xFEA
 10546                           fsr0l	equ	0xFE9
 10547                           wreg	equ	0xFE8
 10548                           indf1	equ	0xFE7
 10549                           postdec1	equ	0xFE5
 10550                           fsr1h	equ	0xFE2
 10551                           fsr1l	equ	0xFE1
 10552                           indf2	equ	0xFDF
 10553                           postinc2	equ	0xFDE
 10554                           fsr2h	equ	0xFDA
 10555                           fsr2l	equ	0xFD9
 10556                           status	equ	0xFD8
 10557                           
 10558 ;; *************** function _strtok *****************
 10559 ;; Defined at:
 10560 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strtok.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;  s1              2   28[COMRAM] PTR unsigned char 
 10563 ;;		 -> uart_str(150), NULL(0), 
 10564 ;;  s2              2   30[COMRAM] PTR const unsigned char 
 10565 ;;		 -> STR_71(7), STR_70(7), STR_65(7), STR_63(7), 
 10566 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 10567 ;;		 -> STR_52(7), STR_49(7), STR_48(7), STR_44(2), 
 10568 ;;		 -> STR_41(7), STR_39(7), STR_37(7), STR_35(7), 
 10569 ;;		 -> STR_33(7), STR_32(7), STR_29(7), STR_27(7), 
 10570 ;;		 -> STR_25(7), 
 10571 ;; Auto vars:     Size  Location     Type
 10572 ;;		None
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  2   28[COMRAM] PTR unsigned char 
 10575 ;; Registers used:
 10576 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10582 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10585 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10586 ;;Total ram usage:        4 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; Hardware stack levels required when called:    7
 10589 ;; This function calls:
 10590 ;;		_strcspn
 10591 ;;		_strspn
 10592 ;; This function is called by:
 10593 ;;		_parse_cmd_str
 10594 ;; This function uses a non-reentrant model
 10595 ;;
 10596                           
 10597                           	psect	text43
 10598  002AEE                     __ptext43:
 10599                           	opt stack 0
 10600  002AEE                     _strtok:
 10601                           	opt stack 21
 10602                           
 10603                           ;incstack = 0
 10604  002AEE  501D               	movf	strtok@s1,w,c
 10605  002AF0  101E               	iorwf	strtok@s1+1,w,c
 10606  002AF2  A4D8               	btfss	status,2,c
 10607  002AF4  D004               	goto	l1652
 10608  002AF6  C07C  F01D         	movff	strtok@sp,strtok@s1
 10609  002AFA  C07D  F01E         	movff	strtok@sp+1,strtok@s1+1
 10610  002AFE                     l1652:
 10611  002AFE  501D               	movf	strtok@s1,w,c
 10612  002B00  101E               	iorwf	strtok@s1+1,w,c
 10613  002B02  A4D8               	btfss	status,2,c
 10614  002B04  D005               	goto	l6521
 10615  002B06  0E00               	movlw	0
 10616  002B08  6E1D               	movwf	?_strtok,c
 10617  002B0A  0E00               	movlw	0
 10618  002B0C  6E1E               	movwf	?_strtok+1,c
 10619  002B0E  0012               	return	
 10620  002B10                     l6521:
 10621  002B10  C01D  F016         	movff	strtok@s1,strspn@s1
 10622  002B14  C01E  F017         	movff	strtok@s1+1,strspn@s1+1
 10623  002B18  C01F  F018         	movff	strtok@s2,strspn@s2
 10624  002B1C  C020  F019         	movff	strtok@s2+1,strspn@s2+1
 10625  002B20  EC8A  F018         	call	_strspn	;wreg free
 10626  002B24  5016               	movf	?_strspn,w,c
 10627  002B26  261D               	addwf	strtok@s1,f,c
 10628  002B28  5017               	movf	?_strspn+1,w,c
 10629  002B2A  221E               	addwfc	strtok@s1+1,f,c
 10630  002B2C  C01D  FFD9         	movff	strtok@s1,fsr2l
 10631  002B30  C01E  FFDA         	movff	strtok@s1+1,fsr2h
 10632  002B34  50DF               	movf	indf2,w,c
 10633  002B36  A4D8               	btfss	status,2,c
 10634  002B38  D00B               	goto	l6529
 10635  002B3A  0E00               	movlw	0
 10636  002B3C  0100               	movlb	0	; () banked
 10637  002B3E  6F7C               	movwf	strtok@sp& (0+255),b
 10638  002B40  0E00               	movlw	0
 10639  002B42  0100               	movlb	0	; () banked
 10640  002B44  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10641  002B46  C07C  F01D         	movff	strtok@sp,?_strtok
 10642  002B4A  C07D  F01E         	movff	strtok@sp+1,?_strtok+1
 10643                           
 10644                           ; BSR set to: 0
 10645  002B4E  0012               	return	
 10646  002B50                     l6529:
 10647  002B50  C01D  F016         	movff	strtok@s1,strcspn@s1
 10648  002B54  C01E  F017         	movff	strtok@s1+1,strcspn@s1+1
 10649  002B58  C01F  F018         	movff	strtok@s2,strcspn@s2
 10650  002B5C  C020  F019         	movff	strtok@s2+1,strcspn@s2+1
 10651  002B60  ECB2  F018         	call	_strcspn	;wreg free
 10652  002B64  5016               	movf	?_strcspn,w,c
 10653  002B66  241D               	addwf	strtok@s1,w,c
 10654  002B68  0100               	movlb	0	; () banked
 10655  002B6A  6F7C               	movwf	strtok@sp& (0+255),b
 10656  002B6C  5017               	movf	?_strcspn+1,w,c
 10657  002B6E  201E               	addwfc	strtok@s1+1,w,c
 10658  002B70  0100               	movlb	0	; () banked
 10659  002B72  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10660                           
 10661                           ; BSR set to: 0
 10662  002B74  C07C  FFD9         	movff	strtok@sp,fsr2l
 10663  002B78  C07D  FFDA         	movff	strtok@sp+1,fsr2h
 10664  002B7C  50DF               	movf	indf2,w,c
 10665  002B7E  B4D8               	btfsc	status,2,c
 10666  002B80  D00A               	goto	l6537
 10667                           
 10668                           ; BSR set to: 0
 10669  002B82  C07C  FFD9         	movff	strtok@sp,fsr2l
 10670  002B86  C07D  FFDA         	movff	strtok@sp+1,fsr2h
 10671  002B8A  0E00               	movlw	0
 10672  002B8C  6EDF               	movwf	indf2,c
 10673                           
 10674                           ; BSR set to: 0
 10675  002B8E  0100               	movlb	0	; () banked
 10676  002B90  4B7C               	infsnz	strtok@sp& (0+255),f,b
 10677  002B92  2B7D               	incf	(strtok@sp+1)& (0+255),f,b
 10678  002B94  D006               	goto	l1657
 10679  002B96                     l6537:
 10680                           
 10681                           ; BSR set to: 0
 10682  002B96  0E00               	movlw	0
 10683  002B98  0100               	movlb	0	; () banked
 10684  002B9A  6F7C               	movwf	strtok@sp& (0+255),b
 10685  002B9C  0E00               	movlw	0
 10686  002B9E  0100               	movlb	0	; () banked
 10687  002BA0  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10688  002BA2                     l1657:
 10689                           
 10690                           ; BSR set to: 0
 10691  002BA2  C01D  F01D         	movff	strtok@s1,?_strtok
 10692  002BA6  C01E  F01E         	movff	strtok@s1+1,?_strtok+1
 10693  002BAA  0012               	return	
 10694  002BAC                     __end_of_strtok:
 10695                           	opt stack 0
 10696                           tblptru	equ	0xFF8
 10697                           tblptrh	equ	0xFF7
 10698                           tblptrl	equ	0xFF6
 10699                           tablat	equ	0xFF5
 10700                           prodh	equ	0xFF4
 10701                           prodl	equ	0xFF3
 10702                           intcon	equ	0xFF2
 10703                           indf0	equ	0xFEF
 10704                           postinc0	equ	0xFEE
 10705                           fsr0h	equ	0xFEA
 10706                           fsr0l	equ	0xFE9
 10707                           wreg	equ	0xFE8
 10708                           indf1	equ	0xFE7
 10709                           postdec1	equ	0xFE5
 10710                           fsr1h	equ	0xFE2
 10711                           fsr1l	equ	0xFE1
 10712                           indf2	equ	0xFDF
 10713                           postinc2	equ	0xFDE
 10714                           fsr2h	equ	0xFDA
 10715                           fsr2l	equ	0xFD9
 10716                           status	equ	0xFD8
 10717                           
 10718 ;; *************** function _strspn *****************
 10719 ;; Defined at:
 10720 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strspn.c"
 10721 ;; Parameters:    Size  Location     Type
 10722 ;;  s1              2   21[COMRAM] PTR const unsigned char 
 10723 ;;		 -> uart_str(150), NULL(0), 
 10724 ;;  s2              2   23[COMRAM] PTR const unsigned char 
 10725 ;;		 -> STR_71(7), STR_70(7), STR_65(7), STR_63(7), 
 10726 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 10727 ;;		 -> STR_52(7), STR_49(7), STR_48(7), STR_44(2), 
 10728 ;;		 -> STR_41(7), STR_39(7), STR_37(7), STR_35(7), 
 10729 ;;		 -> STR_33(7), STR_32(7), STR_29(7), STR_27(7), 
 10730 ;;		 -> STR_25(7), 
 10731 ;; Auto vars:     Size  Location     Type
 10732 ;;  i               2   26[COMRAM] unsigned int 
 10733 ;; Return value:  Size  Location     Type
 10734 ;;                  2   21[COMRAM] unsigned int 
 10735 ;; Registers used:
 10736 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10737 ;; Tracked objects:
 10738 ;;		On entry : 0/0
 10739 ;;		On exit  : 0/0
 10740 ;;		Unchanged: 0/0
 10741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10742 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10743 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10744 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10745 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10746 ;;Total ram usage:        7 bytes
 10747 ;; Hardware stack levels used:    1
 10748 ;; Hardware stack levels required when called:    6
 10749 ;; This function calls:
 10750 ;;		_strchr
 10751 ;; This function is called by:
 10752 ;;		_strtok
 10753 ;; This function uses a non-reentrant model
 10754 ;;
 10755                           
 10756                           	psect	text44
 10757  003114                     __ptext44:
 10758                           	opt stack 0
 10759  003114                     _strspn:
 10760                           	opt stack 21
 10761                           
 10762                           ;incstack = 0
 10763  003114  0E00               	movlw	0
 10764  003116  6E1C               	movwf	strspn@i+1,c
 10765  003118  0E00               	movlw	0
 10766  00311A  6E1B               	movwf	strspn@i,c
 10767  00311C  D004               	goto	l6275
 10768  00311E                     l6273:
 10769  00311E  4A16               	infsnz	strspn@s1,f,c
 10770  003120  2A17               	incf	strspn@s1+1,f,c
 10771  003122  4A1B               	infsnz	strspn@i,f,c
 10772  003124  2A1C               	incf	strspn@i+1,f,c
 10773  003126                     l6275:
 10774  003126  C016  FFD9         	movff	strspn@s1,fsr2l
 10775  00312A  C017  FFDA         	movff	strspn@s1+1,fsr2h
 10776  00312E  50DF               	movf	indf2,w,c
 10777  003130  B4D8               	btfsc	status,2,c
 10778  003132  D013               	goto	l1718
 10779  003134  C018  F010         	movff	strspn@s2,strchr@ptr
 10780  003138  C019  F011         	movff	strspn@s2+1,strchr@ptr+1
 10781  00313C  C016  FFD9         	movff	strspn@s1,fsr2l
 10782  003140  C017  FFDA         	movff	strspn@s1+1,fsr2h
 10783  003144  50DF               	movf	indf2,w,c
 10784  003146  6E1A               	movwf	??_strspn& (0+255),c
 10785  003148  501A               	movf	??_strspn,w,c
 10786  00314A  6E12               	movwf	strchr@chr,c
 10787  00314C  6A13               	clrf	strchr@chr+1,c
 10788  00314E  EC40  F017         	call	_strchr	;wreg free
 10789  003152  5010               	movf	?_strchr,w,c
 10790  003154  1011               	iorwf	?_strchr+1,w,c
 10791  003156  A4D8               	btfss	status,2,c
 10792  003158  D7E2               	goto	l6273
 10793  00315A                     l1718:
 10794  00315A  C01B  F016         	movff	strspn@i,?_strspn
 10795  00315E  C01C  F017         	movff	strspn@i+1,?_strspn+1
 10796  003162  0012               	return		;funcret
 10797  003164                     __end_of_strspn:
 10798                           	opt stack 0
 10799                           tblptru	equ	0xFF8
 10800                           tblptrh	equ	0xFF7
 10801                           tblptrl	equ	0xFF6
 10802                           tablat	equ	0xFF5
 10803                           prodh	equ	0xFF4
 10804                           prodl	equ	0xFF3
 10805                           intcon	equ	0xFF2
 10806                           indf0	equ	0xFEF
 10807                           postinc0	equ	0xFEE
 10808                           fsr0h	equ	0xFEA
 10809                           fsr0l	equ	0xFE9
 10810                           wreg	equ	0xFE8
 10811                           indf1	equ	0xFE7
 10812                           postdec1	equ	0xFE5
 10813                           fsr1h	equ	0xFE2
 10814                           fsr1l	equ	0xFE1
 10815                           indf2	equ	0xFDF
 10816                           postinc2	equ	0xFDE
 10817                           fsr2h	equ	0xFDA
 10818                           fsr2l	equ	0xFD9
 10819                           status	equ	0xFD8
 10820                           
 10821 ;; *************** function _strcspn *****************
 10822 ;; Defined at:
 10823 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcspn.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;  s1              2   21[COMRAM] PTR const unsigned char 
 10826 ;;		 -> uart_str(150), NULL(0), 
 10827 ;;  s2              2   23[COMRAM] PTR const unsigned char 
 10828 ;;		 -> STR_71(7), STR_70(7), STR_65(7), STR_63(7), 
 10829 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 10830 ;;		 -> STR_52(7), STR_49(7), STR_48(7), STR_44(2), 
 10831 ;;		 -> STR_41(7), STR_39(7), STR_37(7), STR_35(7), 
 10832 ;;		 -> STR_33(7), STR_32(7), STR_29(7), STR_27(7), 
 10833 ;;		 -> STR_25(7), 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  i               2   26[COMRAM] unsigned int 
 10836 ;; Return value:  Size  Location     Type
 10837 ;;                  2   21[COMRAM] unsigned int 
 10838 ;; Registers used:
 10839 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10845 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10846 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10849 ;;Total ram usage:        7 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    6
 10852 ;; This function calls:
 10853 ;;		_strchr
 10854 ;; This function is called by:
 10855 ;;		_strtok
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           	psect	text45
 10860  003164                     __ptext45:
 10861                           	opt stack 0
 10862  003164                     _strcspn:
 10863                           	opt stack 21
 10864                           
 10865                           ;incstack = 0
 10866  003164  0E00               	movlw	0
 10867  003166  6E1C               	movwf	strcspn@i+1,c
 10868  003168  0E00               	movlw	0
 10869  00316A  6E1B               	movwf	strcspn@i,c
 10870  00316C  D004               	goto	l6283
 10871  00316E                     l6281:
 10872  00316E  4A16               	infsnz	strcspn@s1,f,c
 10873  003170  2A17               	incf	strcspn@s1+1,f,c
 10874  003172  4A1B               	infsnz	strcspn@i,f,c
 10875  003174  2A1C               	incf	strcspn@i+1,f,c
 10876  003176                     l6283:
 10877  003176  C016  FFD9         	movff	strcspn@s1,fsr2l
 10878  00317A  C017  FFDA         	movff	strcspn@s1+1,fsr2h
 10879  00317E  50DF               	movf	indf2,w,c
 10880  003180  B4D8               	btfsc	status,2,c
 10881  003182  D013               	goto	l1699
 10882  003184  C018  F010         	movff	strcspn@s2,strchr@ptr
 10883  003188  C019  F011         	movff	strcspn@s2+1,strchr@ptr+1
 10884  00318C  C016  FFD9         	movff	strcspn@s1,fsr2l
 10885  003190  C017  FFDA         	movff	strcspn@s1+1,fsr2h
 10886  003194  50DF               	movf	indf2,w,c
 10887  003196  6E1A               	movwf	??_strcspn& (0+255),c
 10888  003198  501A               	movf	??_strcspn,w,c
 10889  00319A  6E12               	movwf	strchr@chr,c
 10890  00319C  6A13               	clrf	strchr@chr+1,c
 10891  00319E  EC40  F017         	call	_strchr	;wreg free
 10892  0031A2  5010               	movf	?_strchr,w,c
 10893  0031A4  1011               	iorwf	?_strchr+1,w,c
 10894  0031A6  B4D8               	btfsc	status,2,c
 10895  0031A8  D7E2               	goto	l6281
 10896  0031AA                     l1699:
 10897  0031AA  C01B  F016         	movff	strcspn@i,?_strcspn
 10898  0031AE  C01C  F017         	movff	strcspn@i+1,?_strcspn+1
 10899  0031B2  0012               	return		;funcret
 10900  0031B4                     __end_of_strcspn:
 10901                           	opt stack 0
 10902                           tblptru	equ	0xFF8
 10903                           tblptrh	equ	0xFF7
 10904                           tblptrl	equ	0xFF6
 10905                           tablat	equ	0xFF5
 10906                           prodh	equ	0xFF4
 10907                           prodl	equ	0xFF3
 10908                           intcon	equ	0xFF2
 10909                           indf0	equ	0xFEF
 10910                           postinc0	equ	0xFEE
 10911                           fsr0h	equ	0xFEA
 10912                           fsr0l	equ	0xFE9
 10913                           wreg	equ	0xFE8
 10914                           indf1	equ	0xFE7
 10915                           postdec1	equ	0xFE5
 10916                           fsr1h	equ	0xFE2
 10917                           fsr1l	equ	0xFE1
 10918                           indf2	equ	0xFDF
 10919                           postinc2	equ	0xFDE
 10920                           fsr2h	equ	0xFDA
 10921                           fsr2l	equ	0xFD9
 10922                           status	equ	0xFD8
 10923                           
 10924 ;; *************** function _strstr *****************
 10925 ;; Defined at:
 10926 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strstr.c"
 10927 ;; Parameters:    Size  Location     Type
 10928 ;;  s1              2   44[COMRAM] PTR const unsigned char 
 10929 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 10930 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 10931 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 10932 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 10933 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 10934 ;;		 -> STR_27(7), STR_25(7), NULL(0), 
 10935 ;;  s2              2   46[COMRAM] PTR const unsigned char 
 10936 ;;		 -> STR_72(4), STR_69(9), STR_68(11), STR_55(11), 
 10937 ;;		 -> STR_46(12), STR_38(10), STR_36(10), STR_31(9), 
 10938 ;;		 -> STR_28(10), STR_26(8), STR_24(8), 
 10939 ;; Auto vars:     Size  Location     Type
 10940 ;;		None
 10941 ;; Return value:  Size  Location     Type
 10942 ;;                  2   44[COMRAM] PTR unsigned char 
 10943 ;; Registers used:
 10944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10945 ;; Tracked objects:
 10946 ;;		On entry : 0/0
 10947 ;;		On exit  : 0/0
 10948 ;;		Unchanged: 0/0
 10949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10950 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10953 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10954 ;;Total ram usage:        4 bytes
 10955 ;; Hardware stack levels used:    1
 10956 ;; Hardware stack levels required when called:    6
 10957 ;; This function calls:
 10958 ;;		_strchr
 10959 ;;		_strlen
 10960 ;;		_strncmp
 10961 ;; This function is called by:
 10962 ;;		_parse_cmd_str
 10963 ;; This function uses a non-reentrant model
 10964 ;;
 10965                           
 10966                           	psect	text46
 10967  002C60                     __ptext46:
 10968                           	opt stack 0
 10969  002C60                     _strstr:
 10970                           	opt stack 22
 10971                           
 10972                           ;incstack = 0
 10973  002C60  D032               	goto	l6505
 10974  002C62                     l6497:
 10975  002C62  C02D  F024         	movff	strstr@s1,strncmp@s1
 10976  002C66  C02E  F025         	movff	strstr@s1+1,strncmp@s1+1
 10977  002C6A  C02F  F026         	movff	strstr@s2,strncmp@s2
 10978  002C6E  C030  F027         	movff	strstr@s2+1,strncmp@s2+1
 10979  002C72  C02F  F01E         	movff	strstr@s2,strlen@s
 10980  002C76  C030  F01F         	movff	strstr@s2+1,strlen@s+1
 10981  002C7A  EC37  F018         	call	_strlen	;wreg free
 10982  002C7E  C01E  F028         	movff	?_strlen,strncmp@len
 10983  002C82  C01F  F029         	movff	?_strlen+1,strncmp@len+1
 10984  002C86  EC0F  F015         	call	_strncmp	;wreg free
 10985  002C8A  5024               	movf	?_strncmp,w,c
 10986  002C8C  1025               	iorwf	?_strncmp+1,w,c
 10987  002C8E  A4D8               	btfss	status,2,c
 10988  002C90  D005               	goto	l6503
 10989  002C92  C02D  F02D         	movff	strstr@s1,?_strstr
 10990  002C96  C02E  F02E         	movff	strstr@s1+1,?_strstr+1
 10991  002C9A  0012               	return	
 10992  002C9C                     l6503:
 10993  002C9C  0E01               	movlw	1
 10994  002C9E  242D               	addwf	strstr@s1,w,c
 10995  002CA0  6E10               	movwf	strchr@ptr,c
 10996  002CA2  0E00               	movlw	0
 10997  002CA4  202E               	addwfc	strstr@s1+1,w,c
 10998  002CA6  6E11               	movwf	strchr@ptr+1,c
 10999  002CA8  C02F  FFF6         	movff	strstr@s2,tblptrl
 11000  002CAC  C030  FFF7         	movff	strstr@s2+1,tblptrh
 11001  002CB0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11002  002CB0  6AF8               	clrf	tblptru,c
 11003  002CB2                     	endif
 11004  002CB2                     	if	0	;tblptru may be non-zero
 11005  002CB2                     	endif
 11006  002CB2  0008               	tblrd		*
 11007  002CB4  50F5               	movf	tablat,w,c
 11008  002CB6  6E12               	movwf	strchr@chr,c
 11009  002CB8  6A13               	clrf	strchr@chr+1,c
 11010  002CBA  EC40  F017         	call	_strchr	;wreg free
 11011  002CBE  C010  F02D         	movff	?_strchr,strstr@s1
 11012  002CC2  C011  F02E         	movff	?_strchr+1,strstr@s1+1
 11013  002CC6                     l6505:
 11014  002CC6  502D               	movf	strstr@s1,w,c
 11015  002CC8  102E               	iorwf	strstr@s1+1,w,c
 11016  002CCA  B4D8               	btfsc	status,2,c
 11017  002CCC  D014               	goto	l6509
 11018  002CCE  C02D  FFF6         	movff	strstr@s1,tblptrl
 11019  002CD2  C02E  FFF7         	movff	strstr@s1+1,tblptrh
 11020  002CD6  0E00               	movlw	low (__mediumconst shr (0+16))
 11021  002CD8  6EF8               	movwf	tblptru,c
 11022  002CDA  0E0F               	movlw	(high __ramtop+-1)
 11023  002CDC  64F7               	cpfsgt	tblptrh,c
 11024  002CDE  D003               	bra	u6547
 11025  002CE0  0008               	tblrd		*
 11026  002CE2  50F5               	movf	tablat,w,c
 11027  002CE4  D005               	bra	u6540
 11028  002CE6                     u6547:
 11029  002CE6  CFF6 FFE9          	movff	tblptrl,fsr0l
 11030  002CEA  CFF7 FFEA          	movff	tblptrh,fsr0h
 11031  002CEE  50EF               	movf	indf0,w,c
 11032  002CF0                     u6540:
 11033  002CF0  0900               	iorlw	0
 11034  002CF2  A4D8               	btfss	status,2,c
 11035  002CF4  D7B6               	goto	l6497
 11036  002CF6                     l6509:
 11037  002CF6  0E00               	movlw	0
 11038  002CF8  6E2D               	movwf	?_strstr,c
 11039  002CFA  0E00               	movlw	0
 11040  002CFC  6E2E               	movwf	?_strstr+1,c
 11041  002CFE  0012               	return	
 11042  002D00                     __end_of_strstr:
 11043                           	opt stack 0
 11044                           tblptru	equ	0xFF8
 11045                           tblptrh	equ	0xFF7
 11046                           tblptrl	equ	0xFF6
 11047                           tablat	equ	0xFF5
 11048                           prodh	equ	0xFF4
 11049                           prodl	equ	0xFF3
 11050                           intcon	equ	0xFF2
 11051                           indf0	equ	0xFEF
 11052                           postinc0	equ	0xFEE
 11053                           fsr0h	equ	0xFEA
 11054                           fsr0l	equ	0xFE9
 11055                           wreg	equ	0xFE8
 11056                           indf1	equ	0xFE7
 11057                           postdec1	equ	0xFE5
 11058                           fsr1h	equ	0xFE2
 11059                           fsr1l	equ	0xFE1
 11060                           indf2	equ	0xFDF
 11061                           postinc2	equ	0xFDE
 11062                           fsr2h	equ	0xFDA
 11063                           fsr2l	equ	0xFD9
 11064                           status	equ	0xFD8
 11065                           
 11066 ;; *************** function _strncmp *****************
 11067 ;; Defined at:
 11068 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncmp.c"
 11069 ;; Parameters:    Size  Location     Type
 11070 ;;  s1              2   35[COMRAM] PTR const unsigned char 
 11071 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 11072 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 11073 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 11074 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 11075 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 11076 ;;		 -> STR_27(7), STR_25(7), NULL(0), 
 11077 ;;  s2              2   37[COMRAM] PTR const unsigned char 
 11078 ;;		 -> STR_72(4), STR_69(9), STR_68(11), STR_55(11), 
 11079 ;;		 -> STR_46(12), STR_38(10), STR_36(10), STR_31(9), 
 11080 ;;		 -> STR_28(10), STR_26(8), STR_24(8), 
 11081 ;;  len             2   39[COMRAM] unsigned int 
 11082 ;; Auto vars:     Size  Location     Type
 11083 ;;		None
 11084 ;; Return value:  Size  Location     Type
 11085 ;;                  2   35[COMRAM] int 
 11086 ;; Registers used:
 11087 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 11088 ;; Tracked objects:
 11089 ;;		On entry : 0/0
 11090 ;;		On exit  : 0/0
 11091 ;;		Unchanged: 0/0
 11092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11093 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11096 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11097 ;;Total ram usage:        9 bytes
 11098 ;; Hardware stack levels used:    1
 11099 ;; Hardware stack levels required when called:    5
 11100 ;; This function calls:
 11101 ;;		Nothing
 11102 ;; This function is called by:
 11103 ;;		_strstr
 11104 ;; This function uses a non-reentrant model
 11105 ;;
 11106                           
 11107                           	psect	text47
 11108  002A1E                     __ptext47:
 11109                           	opt stack 0
 11110  002A1E                     _strncmp:
 11111                           	opt stack 22
 11112                           
 11113                           ;incstack = 0
 11114  002A1E  D05A               	goto	l6265
 11115  002A20                     l6255:
 11116  002A20  C024  FFF6         	movff	strncmp@s1,tblptrl
 11117  002A24  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 11118  002A28  0E00               	movlw	low (__mediumconst shr (0+16))
 11119  002A2A  6EF8               	movwf	tblptru,c
 11120  002A2C  0E0F               	movlw	(high __ramtop+-1)
 11121  002A2E  64F7               	cpfsgt	tblptrh,c
 11122  002A30  D003               	bra	u6217
 11123  002A32  0008               	tblrd		*
 11124  002A34  50F5               	movf	tablat,w,c
 11125  002A36  D005               	bra	u6210
 11126  002A38                     u6217:
 11127  002A38  CFF6 FFE9          	movff	tblptrl,fsr0l
 11128  002A3C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11129  002A40  50EF               	movf	indf0,w,c
 11130  002A42                     u6210:
 11131  002A42  0900               	iorlw	0
 11132  002A44  B4D8               	btfsc	status,2,c
 11133  002A46  D01C               	goto	l6259
 11134  002A48  C026  FFF6         	movff	strncmp@s2,tblptrl
 11135  002A4C  C027  FFF7         	movff	strncmp@s2+1,tblptrh
 11136  002A50                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11137  002A50  6AF8               	clrf	tblptru,c
 11138  002A52                     	endif
 11139  002A52                     	if	0	;tblptru may be non-zero
 11140  002A52                     	endif
 11141  002A52  0008               	tblrd		*
 11142  002A54  CFF5 F02A          	movff	tablat,??_strncmp
 11143  002A58  C024  FFF6         	movff	strncmp@s1,tblptrl
 11144  002A5C  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 11145  002A60  0E00               	movlw	low (__mediumconst shr (0+16))
 11146  002A62  6EF8               	movwf	tblptru,c
 11147  002A64  0E0F               	movlw	(high __ramtop+-1)
 11148  002A66  64F7               	cpfsgt	tblptrh,c
 11149  002A68  D003               	bra	u6237
 11150  002A6A  0008               	tblrd		*
 11151  002A6C  50F5               	movf	tablat,w,c
 11152  002A6E  D005               	bra	u6235
 11153  002A70                     u6237:
 11154  002A70  CFF6 FFE9          	movff	tblptrl,fsr0l
 11155  002A74  CFF7 FFEA          	movff	tblptrh,fsr0h
 11156  002A78  50EF               	movf	indf0,w,c
 11157  002A7A                     u6235:
 11158  002A7A  182A               	xorwf	??_strncmp,w,c
 11159  002A7C  B4D8               	btfsc	status,2,c
 11160  002A7E  D026               	goto	l6263
 11161  002A80                     l6259:
 11162  002A80  C026  FFF6         	movff	strncmp@s2,tblptrl
 11163  002A84  C027  FFF7         	movff	strncmp@s2+1,tblptrh
 11164  002A88                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11165  002A88  6AF8               	clrf	tblptru,c
 11166  002A8A                     	endif
 11167  002A8A                     	if	0	;tblptru may be non-zero
 11168  002A8A                     	endif
 11169  002A8A  0008               	tblrd		*
 11170  002A8C  50F5               	movf	tablat,w,c
 11171  002A8E  6E2A               	movwf	??_strncmp& (0+255),c
 11172  002A90  6A2B               	clrf	(??_strncmp+1)& (0+255),c
 11173  002A92  1E2A               	comf	??_strncmp,f,c
 11174  002A94  1E2B               	comf	??_strncmp+1,f,c
 11175  002A96  4A2A               	infsnz	??_strncmp,f,c
 11176  002A98  2A2B               	incf	??_strncmp+1,f,c
 11177  002A9A  C024  FFF6         	movff	strncmp@s1,tblptrl
 11178  002A9E  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 11179  002AA2  0E00               	movlw	low (__mediumconst shr (0+16))
 11180  002AA4  6EF8               	movwf	tblptru,c
 11181  002AA6  0E0F               	movlw	(high __ramtop+-1)
 11182  002AA8  64F7               	cpfsgt	tblptrh,c
 11183  002AAA  D003               	bra	u6247
 11184  002AAC  0008               	tblrd		*
 11185  002AAE  50F5               	movf	tablat,w,c
 11186  002AB0  D005               	bra	u6240
 11187  002AB2                     u6247:
 11188  002AB2  CFF6 FFE9          	movff	tblptrl,fsr0l
 11189  002AB6  CFF7 FFEA          	movff	tblptrh,fsr0h
 11190  002ABA  50EF               	movf	indf0,w,c
 11191  002ABC                     u6240:
 11192  002ABC  6E2C               	movwf	(??_strncmp+2)& (0+255),c
 11193  002ABE  502C               	movf	??_strncmp+2,w,c
 11194  002AC0  242A               	addwf	??_strncmp,w,c
 11195  002AC2  6E24               	movwf	?_strncmp,c
 11196  002AC4  0E00               	movlw	0
 11197  002AC6  202B               	addwfc	??_strncmp+1,w,c
 11198  002AC8  6E25               	movwf	?_strncmp+1,c
 11199  002ACA  0012               	return	
 11200  002ACC                     l6263:
 11201  002ACC  4A24               	infsnz	strncmp@s1,f,c
 11202  002ACE  2A25               	incf	strncmp@s1+1,f,c
 11203  002AD0  4A26               	infsnz	strncmp@s2,f,c
 11204  002AD2  2A27               	incf	strncmp@s2+1,f,c
 11205  002AD4                     l6265:
 11206  002AD4  0628               	decf	strncmp@len,f,c
 11207  002AD6  A0D8               	btfss	status,0,c
 11208  002AD8  0629               	decf	strncmp@len+1,f,c
 11209  002ADA  2828               	incf	strncmp@len,w,c
 11210  002ADC  E1A1               	bnz	l6255
 11211  002ADE  2829               	incf	strncmp@len+1,w,c
 11212  002AE0  A4D8               	btfss	status,2,c
 11213  002AE2  D79E               	goto	l6255
 11214  002AE4  0E00               	movlw	0
 11215  002AE6  6E25               	movwf	?_strncmp+1,c
 11216  002AE8  0E00               	movlw	0
 11217  002AEA  6E24               	movwf	?_strncmp,c
 11218  002AEC  0012               	return	
 11219  002AEE                     __end_of_strncmp:
 11220                           	opt stack 0
 11221                           tblptru	equ	0xFF8
 11222                           tblptrh	equ	0xFF7
 11223                           tblptrl	equ	0xFF6
 11224                           tablat	equ	0xFF5
 11225                           prodh	equ	0xFF4
 11226                           prodl	equ	0xFF3
 11227                           intcon	equ	0xFF2
 11228                           indf0	equ	0xFEF
 11229                           postinc0	equ	0xFEE
 11230                           fsr0h	equ	0xFEA
 11231                           fsr0l	equ	0xFE9
 11232                           wreg	equ	0xFE8
 11233                           indf1	equ	0xFE7
 11234                           postdec1	equ	0xFE5
 11235                           fsr1h	equ	0xFE2
 11236                           fsr1l	equ	0xFE1
 11237                           indf2	equ	0xFDF
 11238                           postinc2	equ	0xFDE
 11239                           fsr2h	equ	0xFDA
 11240                           fsr2l	equ	0xFD9
 11241                           status	equ	0xFD8
 11242                           
 11243 ;; *************** function _strchr *****************
 11244 ;; Defined at:
 11245 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strchr.c"
 11246 ;; Parameters:    Size  Location     Type
 11247 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
 11248 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 11249 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 11250 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 11251 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 11252 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 11253 ;;		 -> STR_27(7), STR_25(7), NULL(0), 
 11254 ;;  chr             2   17[COMRAM] int 
 11255 ;; Auto vars:     Size  Location     Type
 11256 ;;		None
 11257 ;; Return value:  Size  Location     Type
 11258 ;;                  2   15[COMRAM] PTR unsigned char 
 11259 ;; Registers used:
 11260 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 11261 ;; Tracked objects:
 11262 ;;		On entry : 0/0
 11263 ;;		On exit  : 0/0
 11264 ;;		Unchanged: 0/0
 11265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11266 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11268 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11270 ;;Total ram usage:        6 bytes
 11271 ;; Hardware stack levels used:    1
 11272 ;; Hardware stack levels required when called:    5
 11273 ;; This function calls:
 11274 ;;		Nothing
 11275 ;; This function is called by:
 11276 ;;		_strstr
 11277 ;;		_strcspn
 11278 ;;		_strspn
 11279 ;; This function uses a non-reentrant model
 11280 ;;
 11281                           
 11282                           	psect	text48
 11283  002E80                     __ptext48:
 11284                           	opt stack 0
 11285  002E80                     _strchr:
 11286                           	opt stack 21
 11287  002E80  C010  FFF6         	movff	strchr@ptr,tblptrl
 11288  002E84  C011  FFF7         	movff	strchr@ptr+1,tblptrh
 11289  002E88  0E00               	movlw	low (__mediumconst shr (0+16))
 11290  002E8A  6EF8               	movwf	tblptru,c
 11291  002E8C  0E0F               	movlw	(high __ramtop+-1)
 11292  002E8E  64F7               	cpfsgt	tblptrh,c
 11293  002E90  D003               	bra	u5927
 11294  002E92  0008               	tblrd		*
 11295  002E94  50F5               	movf	tablat,w,c
 11296  002E96  D005               	bra	u5920
 11297  002E98                     u5927:
 11298  002E98  CFF6 FFE9          	movff	tblptrl,fsr0l
 11299  002E9C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11300  002EA0  50EF               	movf	indf0,w,c
 11301  002EA2                     u5920:
 11302  002EA2  1812               	xorwf	strchr@chr,w,c
 11303  002EA4  A4D8               	btfss	status,2,c
 11304  002EA6  D005               	goto	l6051
 11305  002EA8  C010  F010         	movff	strchr@ptr,?_strchr
 11306  002EAC  C011  F011         	movff	strchr@ptr+1,?_strchr+1
 11307  002EB0  0012               	return	
 11308  002EB2                     l6051:
 11309  002EB2  5010               	movf	strchr@ptr,w,c
 11310  002EB4  6E14               	movwf	??_strchr& (0+255),c
 11311  002EB6  5011               	movf	strchr@ptr+1,w,c
 11312  002EB8  6E15               	movwf	(??_strchr+1)& (0+255),c
 11313  002EBA  4A10               	infsnz	strchr@ptr,f,c
 11314  002EBC  2A11               	incf	strchr@ptr+1,f,c
 11315  002EBE  C014  FFF6         	movff	??_strchr,tblptrl
 11316  002EC2  C015  FFF7         	movff	??_strchr+1,tblptrh
 11317  002EC6  0E00               	movlw	low (__mediumconst shr (0+16))
 11318  002EC8  6EF8               	movwf	tblptru,c
 11319  002ECA  0E0F               	movlw	(high __ramtop+-1)
 11320  002ECC  64F7               	cpfsgt	tblptrh,c
 11321  002ECE  D003               	bra	u5947
 11322  002ED0  0008               	tblrd		*
 11323  002ED2  50F5               	movf	tablat,w,c
 11324  002ED4  D005               	bra	u5940
 11325  002ED6                     u5947:
 11326  002ED6  CFF6 FFE9          	movff	tblptrl,fsr0l
 11327  002EDA  CFF7 FFEA          	movff	tblptrh,fsr0h
 11328  002EDE  50EF               	movf	indf0,w,c
 11329  002EE0                     u5940:
 11330  002EE0  0900               	iorlw	0
 11331  002EE2  A4D8               	btfss	status,2,c
 11332  002EE4  D7CD               	goto	l6045
 11333  002EE6  0E00               	movlw	0
 11334  002EE8  6E10               	movwf	?_strchr,c
 11335  002EEA  0E00               	movlw	0
 11336  002EEC  6E11               	movwf	?_strchr+1,c
 11337  002EEE  0012               	return	
 11338  002EF0                     __end_of_strchr:
 11339                           	opt stack 0
 11340                           tblptru	equ	0xFF8
 11341                           tblptrh	equ	0xFF7
 11342                           tblptrl	equ	0xFF6
 11343                           tablat	equ	0xFF5
 11344                           prodh	equ	0xFF4
 11345                           prodl	equ	0xFF3
 11346                           intcon	equ	0xFF2
 11347                           indf0	equ	0xFEF
 11348                           postinc0	equ	0xFEE
 11349                           fsr0h	equ	0xFEA
 11350                           fsr0l	equ	0xFE9
 11351                           wreg	equ	0xFE8
 11352                           indf1	equ	0xFE7
 11353                           postdec1	equ	0xFE5
 11354                           fsr1h	equ	0xFE2
 11355                           fsr1l	equ	0xFE1
 11356                           indf2	equ	0xFDF
 11357                           postinc2	equ	0xFDE
 11358                           fsr2h	equ	0xFDA
 11359                           fsr2l	equ	0xFD9
 11360                           status	equ	0xFD8
 11361                           
 11362 ;; *************** function _strcpy *****************
 11363 ;; Defined at:
 11364 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;  to              2   15[COMRAM] PTR unsigned char 
 11367 ;;		 -> CMD(15), cmd_data(49), clcd_display_string_details(1080), 
 11368 ;;  from            2   17[COMRAM] PTR const unsigned char 
 11369 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 11370 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 11371 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 11372 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 11373 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 11374 ;;		 -> RAM(3895), STR_27(7), STR_25(7), NULL(0), 
 11375 ;;		 -> cmd_data.data(40), cmd_data(49), 
 11376 ;; Auto vars:     Size  Location     Type
 11377 ;;  cp              2   19[COMRAM] PTR unsigned char 
 11378 ;;		 -> CMD(15), cmd_data(49), clcd_display_string_details(1080), 
 11379 ;; Return value:  Size  Location     Type
 11380 ;;                  2   15[COMRAM] PTR unsigned char 
 11381 ;; Registers used:
 11382 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11383 ;; Tracked objects:
 11384 ;;		On entry : 0/0
 11385 ;;		On exit  : 0/0
 11386 ;;		Unchanged: 0/0
 11387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11388 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11392 ;;Total ram usage:        6 bytes
 11393 ;; Hardware stack levels used:    1
 11394 ;; Hardware stack levels required when called:    5
 11395 ;; This function calls:
 11396 ;;		Nothing
 11397 ;; This function is called by:
 11398 ;;		_copy_data
 11399 ;;		_parse_cmd_str
 11400 ;;		_get_str
 11401 ;; This function uses a non-reentrant model
 11402 ;;
 11403                           
 11404                           	psect	text49
 11405  003292                     __ptext49:
 11406                           	opt stack 0
 11407  003292                     _strcpy:
 11408                           	opt stack 21
 11409                           
 11410                           ;incstack = 0
 11411  003292  C010  F014         	movff	strcpy@to,strcpy@cp
 11412  003296  C011  F015         	movff	strcpy@to+1,strcpy@cp+1
 11413  00329A  D004               	goto	l5899
 11414  00329C                     l5897:
 11415  00329C  4A14               	infsnz	strcpy@cp,f,c
 11416  00329E  2A15               	incf	strcpy@cp+1,f,c
 11417  0032A0  4A12               	infsnz	strcpy@from,f,c
 11418  0032A2  2A13               	incf	strcpy@from+1,f,c
 11419  0032A4                     l5899:
 11420  0032A4  C012  FFF6         	movff	strcpy@from,tblptrl
 11421  0032A8  C013  FFF7         	movff	strcpy@from+1,tblptrh
 11422  0032AC  0E00               	movlw	low (__mediumconst shr (0+16))
 11423  0032AE  6EF8               	movwf	tblptru,c
 11424  0032B0  C014  FFD9         	movff	strcpy@cp,fsr2l
 11425  0032B4  C015  FFDA         	movff	strcpy@cp+1,fsr2h
 11426  0032B8  0E0F               	movlw	(high __ramtop+-1)
 11427  0032BA  64F7               	cpfsgt	tblptrh,c
 11428  0032BC  D003               	bra	u5657
 11429  0032BE  0008               	tblrd		*
 11430  0032C0  50F5               	movf	tablat,w,c
 11431  0032C2  D005               	bra	u5650
 11432  0032C4                     u5657:
 11433  0032C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 11434  0032C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 11435  0032CC  50EF               	movf	indf0,w,c
 11436  0032CE                     u5650:
 11437  0032CE  6EDF               	movwf	indf2,c
 11438  0032D0  50DF               	movf	indf2,w,c
 11439  0032D2  B4D8               	btfsc	status,2,c
 11440  0032D4  0012               	return	
 11441  0032D6  D7E2               	goto	l5897
 11442  0032D8                     __end_of_strcpy:
 11443                           	opt stack 0
 11444                           tblptru	equ	0xFF8
 11445                           tblptrh	equ	0xFF7
 11446                           tblptrl	equ	0xFF6
 11447                           tablat	equ	0xFF5
 11448                           prodh	equ	0xFF4
 11449                           prodl	equ	0xFF3
 11450                           intcon	equ	0xFF2
 11451                           indf0	equ	0xFEF
 11452                           postinc0	equ	0xFEE
 11453                           fsr0h	equ	0xFEA
 11454                           fsr0l	equ	0xFE9
 11455                           wreg	equ	0xFE8
 11456                           indf1	equ	0xFE7
 11457                           postdec1	equ	0xFE5
 11458                           fsr1h	equ	0xFE2
 11459                           fsr1l	equ	0xFE1
 11460                           indf2	equ	0xFDF
 11461                           postinc2	equ	0xFDE
 11462                           fsr2h	equ	0xFDA
 11463                           fsr2l	equ	0xFD9
 11464                           status	equ	0xFD8
 11465                           
 11466 ;; *************** function _memset *****************
 11467 ;; Defined at:
 11468 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memset.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;  p1              2   35[COMRAM] PTR void 
 11471 ;;		 -> uart_str(150), str_data(40), CMD(15), cmd_data(49), 
 11472 ;;		 -> conflict_arr(20), clcd_display_string_details(1080), lcd_display_array(80), clcd_config_data(5), 
 11473 ;;  c               2   37[COMRAM] int 
 11474 ;;  n               2   39[COMRAM] unsigned int 
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;  p               2   41[COMRAM] PTR unsigned char 
 11477 ;;		 -> uart_str(150), str_data(40), CMD(15), cmd_data(49), 
 11478 ;;		 -> conflict_arr(20), clcd_display_string_details(1080), lcd_display_array(80), clcd_config_data(5), 
 11479 ;; Return value:  Size  Location     Type
 11480 ;;                  2   35[COMRAM] PTR void 
 11481 ;; Registers used:
 11482 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11483 ;; Tracked objects:
 11484 ;;		On entry : 0/0
 11485 ;;		On exit  : 0/0
 11486 ;;		Unchanged: 0/0
 11487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11488 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;Total ram usage:        8 bytes
 11493 ;; Hardware stack levels used:    1
 11494 ;; Hardware stack levels required when called:    5
 11495 ;; This function calls:
 11496 ;;		Nothing
 11497 ;; This function is called by:
 11498 ;;		_init_CLCD_config
 11499 ;;		_init_clcd_cusotom_lcd
 11500 ;;		_update_string_data
 11501 ;;		_clcd_display_string_config
 11502 ;;		_clear_display_structure
 11503 ;;		_clear_display_array
 11504 ;;		_scroll_left_to_right
 11505 ;;		_scroll_right_to_left
 11506 ;;		_clear_cmd_data
 11507 ;;		_parse_cmd_str
 11508 ;;		_console_init
 11509 ;;		_cmd_consol_task
 11510 ;;		_get_str
 11511 ;; This function uses a non-reentrant model
 11512 ;;
 11513                           
 11514                           	psect	text50
 11515  00354A                     __ptext50:
 11516                           	opt stack 0
 11517  00354A                     _memset:
 11518                           	opt stack 23
 11519                           
 11520                           ;incstack = 0
 11521  00354A  C024  F02A         	movff	memset@p1,memset@p
 11522  00354E  C025  F02B         	movff	memset@p1+1,memset@p+1
 11523  003552  D008               	goto	l5623
 11524  003554                     l5619:
 11525  003554  C02A  FFD9         	movff	memset@p,fsr2l
 11526  003558  C02B  FFDA         	movff	memset@p+1,fsr2h
 11527  00355C  C026  FFDF         	movff	memset@c,indf2
 11528  003560  4A2A               	infsnz	memset@p,f,c
 11529  003562  2A2B               	incf	memset@p+1,f,c
 11530  003564                     l5623:
 11531  003564  0628               	decf	memset@n,f,c
 11532  003566  A0D8               	btfss	status,0,c
 11533  003568  0629               	decf	memset@n+1,f,c
 11534  00356A  2828               	incf	memset@n,w,c
 11535  00356C  E1F3               	bnz	l5619
 11536  00356E  2829               	incf	memset@n+1,w,c
 11537  003570  B4D8               	btfsc	status,2,c
 11538  003572  0012               	return	
 11539  003574  D7EF               	goto	l5619
 11540  003576                     __end_of_memset:
 11541                           	opt stack 0
 11542                           tblptru	equ	0xFF8
 11543                           tblptrh	equ	0xFF7
 11544                           tblptrl	equ	0xFF6
 11545                           tablat	equ	0xFF5
 11546                           prodh	equ	0xFF4
 11547                           prodl	equ	0xFF3
 11548                           intcon	equ	0xFF2
 11549                           indf0	equ	0xFEF
 11550                           postinc0	equ	0xFEE
 11551                           fsr0h	equ	0xFEA
 11552                           fsr0l	equ	0xFE9
 11553                           wreg	equ	0xFE8
 11554                           indf1	equ	0xFE7
 11555                           postdec1	equ	0xFE5
 11556                           fsr1h	equ	0xFE2
 11557                           fsr1l	equ	0xFE1
 11558                           indf2	equ	0xFDF
 11559                           postinc2	equ	0xFDE
 11560                           fsr2h	equ	0xFDA
 11561                           fsr2l	equ	0xFD9
 11562                           status	equ	0xFD8
 11563                           
 11564 ;; *************** function _collect_row *****************
 11565 ;; Defined at:
 11566 ;;		line 16 in file "cmd_consol.c"
 11567 ;; Parameters:    Size  Location     Type
 11568 ;;  str             2   53[COMRAM] PTR unsigned char 
 11569 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 11570 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 11571 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 11572 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 11573 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 11574 ;;		 -> RAM(3895), STR_27(7), STR_25(7), NULL(0), 
 11575 ;;  data_row        2   55[COMRAM] PTR unsigned char 
 11576 ;;		 -> cmd_data(49), 
 11577 ;; Auto vars:     Size  Location     Type
 11578 ;;  i               2   60[COMRAM] int 
 11579 ;;  row             1   62[COMRAM] unsigned char 
 11580 ;; Return value:  Size  Location     Type
 11581 ;;                  1    wreg      void 
 11582 ;; Registers used:
 11583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11584 ;; Tracked objects:
 11585 ;;		On entry : 0/0
 11586 ;;		On exit  : 0/0
 11587 ;;		Unchanged: 0/0
 11588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11589 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11592 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11593 ;;Total ram usage:       10 bytes
 11594 ;; Hardware stack levels used:    1
 11595 ;; Hardware stack levels required when called:    8
 11596 ;; This function calls:
 11597 ;;		_isdigit
 11598 ;;		_printf
 11599 ;;		_strlen
 11600 ;; This function is called by:
 11601 ;;		_parse_cmd_str
 11602 ;; This function uses a non-reentrant model
 11603 ;;
 11604                           
 11605                           	psect	text51
 11606  002944                     __ptext51:
 11607                           	opt stack 0
 11608  002944                     _collect_row:
 11609                           	opt stack 20
 11610                           
 11611                           ;cmd_consol.c: 17: char row = 0;
 11612                           
 11613                           ;incstack = 0
 11614  002944  0E00               	movlw	0
 11615  002946  6E3F               	movwf	collect_row@row,c
 11616                           
 11617                           ;cmd_consol.c: 18: int i = 0;
 11618  002948  0E00               	movlw	0
 11619  00294A  6E3E               	movwf	collect_row@i+1,c
 11620  00294C  0E00               	movlw	0
 11621  00294E  6E3D               	movwf	collect_row@i,c
 11622                           
 11623                           ;cmd_consol.c: 19: for (i = 0; i < strlen(str); i++) {
 11624  002950  0E00               	movlw	0
 11625  002952  6E3E               	movwf	collect_row@i+1,c
 11626  002954  0E00               	movlw	0
 11627  002956  6E3D               	movwf	collect_row@i,c
 11628  002958  D03B               	goto	l6453
 11629  00295A                     l6447:
 11630                           
 11631                           ;cmd_consol.c: 20: if (isdigit(str[i]) == 1)
 11632  00295A  503D               	movf	collect_row@i,w,c
 11633  00295C  2436               	addwf	collect_row@str,w,c
 11634  00295E  6E3A               	movwf	??_collect_row& (0+255),c
 11635  002960  503E               	movf	collect_row@i+1,w,c
 11636  002962  2037               	addwfc	collect_row@str+1,w,c
 11637  002964  6E3B               	movwf	(??_collect_row+1)& (0+255),c
 11638  002966  C03A  FFF6         	movff	??_collect_row,tblptrl
 11639  00296A  C03B  FFF7         	movff	??_collect_row+1,tblptrh
 11640  00296E  0E00               	movlw	low (__mediumconst shr (0+16))
 11641  002970  6EF8               	movwf	tblptru,c
 11642  002972  0E0F               	movlw	(high __ramtop+-1)
 11643  002974  64F7               	cpfsgt	tblptrh,c
 11644  002976  D003               	bra	u6407
 11645  002978  0008               	tblrd		*
 11646  00297A  50F5               	movf	tablat,w,c
 11647  00297C  D005               	bra	u6400
 11648  00297E                     u6407:
 11649  00297E  CFF6 FFE9          	movff	tblptrl,fsr0l
 11650  002982  CFF7 FFEA          	movff	tblptrh,fsr0h
 11651  002986  50EF               	movf	indf0,w,c
 11652  002988                     u6400:
 11653  002988  EC39  F01B         	call	_isdigit
 11654  00298C  A0D8               	btfss	status,0,c
 11655  00298E  0012               	return	
 11656                           
 11657                           ;cmd_consol.c: 21: row = row * 10 + (str[i] - '0');
 11658  002990  503D               	movf	collect_row@i,w,c
 11659  002992  2436               	addwf	collect_row@str,w,c
 11660  002994  6E3A               	movwf	??_collect_row& (0+255),c
 11661  002996  503E               	movf	collect_row@i+1,w,c
 11662  002998  2037               	addwfc	collect_row@str+1,w,c
 11663  00299A  6E3B               	movwf	(??_collect_row+1)& (0+255),c
 11664  00299C  C03A  FFF6         	movff	??_collect_row,tblptrl
 11665  0029A0  C03B  FFF7         	movff	??_collect_row+1,tblptrh
 11666  0029A4  0E00               	movlw	low (__mediumconst shr (0+16))
 11667  0029A6  6EF8               	movwf	tblptru,c
 11668  0029A8  0E0F               	movlw	(high __ramtop+-1)
 11669  0029AA  64F7               	cpfsgt	tblptrh,c
 11670  0029AC  D003               	bra	u6427
 11671  0029AE  0008               	tblrd		*
 11672  0029B0  50F5               	movf	tablat,w,c
 11673  0029B2  D005               	bra	u6420
 11674  0029B4                     u6427:
 11675  0029B4  CFF6 FFE9          	movff	tblptrl,fsr0l
 11676  0029B8  CFF7 FFEA          	movff	tblptrh,fsr0h
 11677  0029BC  50EF               	movf	indf0,w,c
 11678  0029BE                     u6420:
 11679  0029BE  6E3C               	movwf	(??_collect_row+2)& (0+255),c
 11680  0029C0  503F               	movf	collect_row@row,w,c
 11681  0029C2  0D0A               	mullw	10
 11682  0029C4  50F3               	movf	prodl,w,c
 11683  0029C6  243C               	addwf	??_collect_row+2,w,c
 11684  0029C8  0FD0               	addlw	208
 11685  0029CA  6E3F               	movwf	collect_row@row,c
 11686                           
 11687                           ;cmd_consol.c: 22: else
 11688                           ;cmd_consol.c: 23: return;
 11689  0029CC  4A3D               	infsnz	collect_row@i,f,c
 11690  0029CE  2A3E               	incf	collect_row@i+1,f,c
 11691  0029D0                     l6453:
 11692  0029D0  C036  F01E         	movff	collect_row@str,strlen@s
 11693  0029D4  C037  F01F         	movff	collect_row@str+1,strlen@s+1
 11694  0029D8  EC37  F018         	call	_strlen	;wreg free
 11695  0029DC  501E               	movf	?_strlen,w,c
 11696  0029DE  5C3D               	subwf	collect_row@i,w,c
 11697  0029E0  501F               	movf	?_strlen+1,w,c
 11698  0029E2  583E               	subwfb	collect_row@i+1,w,c
 11699  0029E4  A0D8               	btfss	status,0,c
 11700  0029E6  D7B9               	goto	l6447
 11701                           
 11702                           ;cmd_consol.c: 24: }
 11703                           ;cmd_consol.c: 25: printf("row = %d\r\n", row);
 11704  0029E8  0E0B               	movlw	low STR_16
 11705  0029EA  6E24               	movwf	printf@f,c
 11706  0029EC  0EFF               	movlw	high STR_16
 11707  0029EE  6E25               	movwf	printf@f+1,c
 11708  0029F0  C03F  F026         	movff	collect_row@row,?_printf+2
 11709  0029F4  6A27               	clrf	?_printf+3,c
 11710  0029F6  EC02  F011         	call	_printf	;wreg free
 11711                           
 11712                           ;cmd_consol.c: 26: if (row >= clcd_config_data.clcd_max_row) {
 11713  0029FA  504A               	movf	_clcd_config_data+1,w,c
 11714  0029FC  5C3F               	subwf	collect_row@row,w,c
 11715  0029FE  A0D8               	btfss	status,0,c
 11716  002A00  D007               	goto	l6461
 11717                           
 11718                           ;cmd_consol.c: 27: *data_row = -1;
 11719  002A02  C038  FFD9         	movff	collect_row@data_row,fsr2l
 11720  002A06  C039  FFDA         	movff	collect_row@data_row+1,fsr2h
 11721  002A0A  0EFF               	movlw	255
 11722  002A0C  6EDF               	movwf	indf2,c
 11723                           
 11724                           ;cmd_consol.c: 28: } else {
 11725  002A0E  0012               	return	
 11726  002A10                     l6461:
 11727                           
 11728                           ;cmd_consol.c: 29: *data_row = row;
 11729  002A10  C038  FFD9         	movff	collect_row@data_row,fsr2l
 11730  002A14  C039  FFDA         	movff	collect_row@data_row+1,fsr2h
 11731  002A18  C03F  FFDF         	movff	collect_row@row,indf2
 11732  002A1C  0012               	return	
 11733  002A1E                     __end_of_collect_row:
 11734                           	opt stack 0
 11735                           tblptru	equ	0xFF8
 11736                           tblptrh	equ	0xFF7
 11737                           tblptrl	equ	0xFF6
 11738                           tablat	equ	0xFF5
 11739                           prodh	equ	0xFF4
 11740                           prodl	equ	0xFF3
 11741                           intcon	equ	0xFF2
 11742                           indf0	equ	0xFEF
 11743                           postinc0	equ	0xFEE
 11744                           fsr0h	equ	0xFEA
 11745                           fsr0l	equ	0xFE9
 11746                           wreg	equ	0xFE8
 11747                           indf1	equ	0xFE7
 11748                           postdec1	equ	0xFE5
 11749                           fsr1h	equ	0xFE2
 11750                           fsr1l	equ	0xFE1
 11751                           indf2	equ	0xFDF
 11752                           postinc2	equ	0xFDE
 11753                           fsr2h	equ	0xFDA
 11754                           fsr2l	equ	0xFD9
 11755                           status	equ	0xFD8
 11756                           
 11757 ;; *************** function _collect_column *****************
 11758 ;; Defined at:
 11759 ;;		line 52 in file "cmd_consol.c"
 11760 ;; Parameters:    Size  Location     Type
 11761 ;;  str             2   53[COMRAM] PTR unsigned char 
 11762 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 11763 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 11764 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 11765 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 11766 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 11767 ;;		 -> RAM(3895), STR_27(7), STR_25(7), NULL(0), 
 11768 ;;  data_column     2   55[COMRAM] PTR unsigned char 
 11769 ;;		 -> cmd_data(49), 
 11770 ;; Auto vars:     Size  Location     Type
 11771 ;;  i               2   61[COMRAM] int 
 11772 ;;  column          1   60[COMRAM] unsigned char 
 11773 ;; Return value:  Size  Location     Type
 11774 ;;                  1    wreg      void 
 11775 ;; Registers used:
 11776 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11777 ;; Tracked objects:
 11778 ;;		On entry : 0/0
 11779 ;;		On exit  : 0/0
 11780 ;;		Unchanged: 0/0
 11781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11782 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11783 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11785 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11786 ;;Total ram usage:       10 bytes
 11787 ;; Hardware stack levels used:    1
 11788 ;; Hardware stack levels required when called:    8
 11789 ;; This function calls:
 11790 ;;		_isdigit
 11791 ;;		_printf
 11792 ;;		_strlen
 11793 ;; This function is called by:
 11794 ;;		_parse_cmd_str
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           	psect	text52
 11799  0023DC                     __ptext52:
 11800                           	opt stack 0
 11801  0023DC                     _collect_column:
 11802                           	opt stack 20
 11803                           
 11804                           ;cmd_consol.c: 53: printf("col..1 = %s\r\n", str);
 11805                           
 11806                           ;incstack = 0
 11807  0023DC  0E78               	movlw	low STR_17
 11808  0023DE  6E24               	movwf	printf@f,c
 11809  0023E0  0EFE               	movlw	high STR_17
 11810  0023E2  6E25               	movwf	printf@f+1,c
 11811  0023E4  C036  F026         	movff	collect_column@str,?_printf+2
 11812  0023E8  C037  F027         	movff	collect_column@str+1,?_printf+3
 11813  0023EC  EC02  F011         	call	_printf	;wreg free
 11814                           
 11815                           ;cmd_consol.c: 54: int i = 0;
 11816  0023F0  0E00               	movlw	0
 11817  0023F2  6E3F               	movwf	collect_column@i+1,c
 11818  0023F4  0E00               	movlw	0
 11819  0023F6  6E3E               	movwf	collect_column@i,c
 11820                           
 11821                           ;cmd_consol.c: 55: char column = 0;
 11822  0023F8  0E00               	movlw	0
 11823  0023FA  6E3D               	movwf	collect_column@column,c
 11824                           
 11825                           ;cmd_consol.c: 56: for (i = 0; i < strlen(str); i++) {
 11826  0023FC  0E00               	movlw	0
 11827  0023FE  6E3F               	movwf	collect_column@i+1,c
 11828  002400  0E00               	movlw	0
 11829  002402  6E3E               	movwf	collect_column@i,c
 11830  002404  D0AC               	goto	l6485
 11831  002406                     l6471:
 11832                           
 11833                           ;cmd_consol.c: 57: if (isdigit(str[i]) == 1) {
 11834  002406  503E               	movf	collect_column@i,w,c
 11835  002408  2436               	addwf	collect_column@str,w,c
 11836  00240A  6E3A               	movwf	??_collect_column& (0+255),c
 11837  00240C  503F               	movf	collect_column@i+1,w,c
 11838  00240E  2037               	addwfc	collect_column@str+1,w,c
 11839  002410  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11840  002412  C03A  FFF6         	movff	??_collect_column,tblptrl
 11841  002416  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11842  00241A  0E00               	movlw	low (__mediumconst shr (0+16))
 11843  00241C  6EF8               	movwf	tblptru,c
 11844  00241E  0E0F               	movlw	(high __ramtop+-1)
 11845  002420  64F7               	cpfsgt	tblptrh,c
 11846  002422  D003               	bra	u6457
 11847  002424  0008               	tblrd		*
 11848  002426  50F5               	movf	tablat,w,c
 11849  002428  D005               	bra	u6450
 11850  00242A                     u6457:
 11851  00242A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11852  00242E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11853  002432  50EF               	movf	indf0,w,c
 11854  002434                     u6450:
 11855  002434  EC39  F01B         	call	_isdigit
 11856  002438  A0D8               	btfss	status,0,c
 11857  00243A  D05B               	goto	l6479
 11858                           
 11859                           ;cmd_consol.c: 58: column = column * 10 + (str[i] - '0');
 11860  00243C  503E               	movf	collect_column@i,w,c
 11861  00243E  2436               	addwf	collect_column@str,w,c
 11862  002440  6E3A               	movwf	??_collect_column& (0+255),c
 11863  002442  503F               	movf	collect_column@i+1,w,c
 11864  002444  2037               	addwfc	collect_column@str+1,w,c
 11865  002446  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11866  002448  C03A  FFF6         	movff	??_collect_column,tblptrl
 11867  00244C  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11868  002450  0E00               	movlw	low (__mediumconst shr (0+16))
 11869  002452  6EF8               	movwf	tblptru,c
 11870  002454  0E0F               	movlw	(high __ramtop+-1)
 11871  002456  64F7               	cpfsgt	tblptrh,c
 11872  002458  D003               	bra	u6477
 11873  00245A  0008               	tblrd		*
 11874  00245C  50F5               	movf	tablat,w,c
 11875  00245E  D005               	bra	u6470
 11876  002460                     u6477:
 11877  002460  CFF6 FFE9          	movff	tblptrl,fsr0l
 11878  002464  CFF7 FFEA          	movff	tblptrh,fsr0h
 11879  002468  50EF               	movf	indf0,w,c
 11880  00246A                     u6470:
 11881  00246A  6E3C               	movwf	(??_collect_column+2)& (0+255),c
 11882  00246C  503D               	movf	collect_column@column,w,c
 11883  00246E  0D0A               	mullw	10
 11884  002470  50F3               	movf	prodl,w,c
 11885  002472  243C               	addwf	??_collect_column+2,w,c
 11886  002474  0FD0               	addlw	208
 11887  002476  6E3D               	movwf	collect_column@column,c
 11888                           
 11889                           ;cmd_consol.c: 59: printf("strlen = %d, i=%d, col.. = %d\r\n", strlen(str), i, column);
 11890  002478  0EF6               	movlw	low STR_18
 11891  00247A  6E24               	movwf	printf@f,c
 11892  00247C  0EFC               	movlw	high STR_18
 11893  00247E  6E25               	movwf	printf@f+1,c
 11894  002480  C036  F01E         	movff	collect_column@str,strlen@s
 11895  002484  C037  F01F         	movff	collect_column@str+1,strlen@s+1
 11896  002488  EC37  F018         	call	_strlen	;wreg free
 11897  00248C  C01E  F026         	movff	?_strlen,?_printf+2
 11898  002490  C01F  F027         	movff	?_strlen+1,?_printf+3
 11899  002494  C03E  F028         	movff	collect_column@i,?_printf+4
 11900  002498  C03F  F029         	movff	collect_column@i+1,?_printf+5
 11901  00249C  C03D  F02A         	movff	collect_column@column,?_printf+6
 11902  0024A0  6A2B               	clrf	?_printf+7,c
 11903  0024A2  EC02  F011         	call	_printf	;wreg free
 11904                           
 11905                           ;cmd_consol.c: 60: printf("str[%d] = %d\r\n", i, str[i]);
 11906  0024A6  0E5A               	movlw	low STR_19
 11907  0024A8  6E24               	movwf	printf@f,c
 11908  0024AA  0EFE               	movlw	high STR_19
 11909  0024AC  6E25               	movwf	printf@f+1,c
 11910  0024AE  C03E  F026         	movff	collect_column@i,?_printf+2
 11911  0024B2  C03F  F027         	movff	collect_column@i+1,?_printf+3
 11912  0024B6  503E               	movf	collect_column@i,w,c
 11913  0024B8  2436               	addwf	collect_column@str,w,c
 11914  0024BA  6E3A               	movwf	??_collect_column& (0+255),c
 11915  0024BC  503F               	movf	collect_column@i+1,w,c
 11916  0024BE  2037               	addwfc	collect_column@str+1,w,c
 11917  0024C0  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11918  0024C2  C03A  FFF6         	movff	??_collect_column,tblptrl
 11919  0024C6  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11920  0024CA  0E00               	movlw	low (__mediumconst shr (0+16))
 11921  0024CC  6EF8               	movwf	tblptru,c
 11922  0024CE  0E0F               	movlw	(high __ramtop+-1)
 11923  0024D0  64F7               	cpfsgt	tblptrh,c
 11924  0024D2  D003               	bra	u6487
 11925  0024D4  0008               	tblrd		*
 11926  0024D6  50F5               	movf	tablat,w,c
 11927  0024D8  D005               	bra	u6480
 11928  0024DA                     u6487:
 11929  0024DA  CFF6 FFE9          	movff	tblptrl,fsr0l
 11930  0024DE  CFF7 FFEA          	movff	tblptrh,fsr0h
 11931  0024E2  50EF               	movf	indf0,w,c
 11932  0024E4                     u6480:
 11933  0024E4  6E3C               	movwf	(??_collect_column+2)& (0+255),c
 11934  0024E6  503C               	movf	??_collect_column+2,w,c
 11935  0024E8  6E28               	movwf	?_printf+4,c
 11936  0024EA  6A29               	clrf	?_printf+5,c
 11937  0024EC  EC02  F011         	call	_printf	;wreg free
 11938                           
 11939                           ;cmd_consol.c: 61: } else {
 11940  0024F0  D034               	goto	l6483
 11941  0024F2                     l6479:
 11942                           
 11943                           ;cmd_consol.c: 62: printf("i = %d, col..2 = %s\r\n", i, str);
 11944  0024F2  0ECC               	movlw	low STR_20
 11945  0024F4  6E24               	movwf	printf@f,c
 11946  0024F6  0EFD               	movlw	high STR_20
 11947  0024F8  6E25               	movwf	printf@f+1,c
 11948  0024FA  C03E  F026         	movff	collect_column@i,?_printf+2
 11949  0024FE  C03F  F027         	movff	collect_column@i+1,?_printf+3
 11950  002502  C036  F028         	movff	collect_column@str,?_printf+4
 11951  002506  C037  F029         	movff	collect_column@str+1,?_printf+5
 11952  00250A  EC02  F011         	call	_printf	;wreg free
 11953                           
 11954                           ;cmd_consol.c: 63: printf("str[%d] = %d\r\n", i, str[i]);
 11955  00250E  0E5A               	movlw	low STR_19
 11956  002510  6E24               	movwf	printf@f,c
 11957  002512  0EFE               	movlw	high STR_19
 11958  002514  6E25               	movwf	printf@f+1,c
 11959  002516  C03E  F026         	movff	collect_column@i,?_printf+2
 11960  00251A  C03F  F027         	movff	collect_column@i+1,?_printf+3
 11961  00251E  503E               	movf	collect_column@i,w,c
 11962  002520  2436               	addwf	collect_column@str,w,c
 11963  002522  6E3A               	movwf	??_collect_column& (0+255),c
 11964  002524  503F               	movf	collect_column@i+1,w,c
 11965  002526  2037               	addwfc	collect_column@str+1,w,c
 11966  002528  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11967  00252A  C03A  FFF6         	movff	??_collect_column,tblptrl
 11968  00252E  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11969  002532  0E00               	movlw	low (__mediumconst shr (0+16))
 11970  002534  6EF8               	movwf	tblptru,c
 11971  002536  0E0F               	movlw	(high __ramtop+-1)
 11972  002538  64F7               	cpfsgt	tblptrh,c
 11973  00253A  D003               	bra	u6497
 11974  00253C  0008               	tblrd		*
 11975  00253E  50F5               	movf	tablat,w,c
 11976  002540  D005               	bra	u6490
 11977  002542                     u6497:
 11978  002542  CFF6 FFE9          	movff	tblptrl,fsr0l
 11979  002546  CFF7 FFEA          	movff	tblptrh,fsr0h
 11980  00254A  50EF               	movf	indf0,w,c
 11981  00254C                     u6490:
 11982  00254C  6E3C               	movwf	(??_collect_column+2)& (0+255),c
 11983  00254E  503C               	movf	??_collect_column+2,w,c
 11984  002550  6E28               	movwf	?_printf+4,c
 11985  002552  6A29               	clrf	?_printf+5,c
 11986  002554  EC02  F011         	call	_printf	;wreg free
 11987                           
 11988                           ;cmd_consol.c: 64: return;
 11989  002558  0012               	return	
 11990  00255A                     l6483:
 11991  00255A  4A3E               	infsnz	collect_column@i,f,c
 11992  00255C  2A3F               	incf	collect_column@i+1,f,c
 11993  00255E                     l6485:
 11994  00255E  C036  F01E         	movff	collect_column@str,strlen@s
 11995  002562  C037  F01F         	movff	collect_column@str+1,strlen@s+1
 11996  002566  EC37  F018         	call	_strlen	;wreg free
 11997  00256A  501E               	movf	?_strlen,w,c
 11998  00256C  5C3E               	subwf	collect_column@i,w,c
 11999  00256E  501F               	movf	?_strlen+1,w,c
 12000  002570  583F               	subwfb	collect_column@i+1,w,c
 12001  002572  A0D8               	btfss	status,0,c
 12002  002574  D748               	goto	l6471
 12003                           
 12004                           ;cmd_consol.c: 65: }
 12005                           ;cmd_consol.c: 67: }
 12006                           ;cmd_consol.c: 68: printf("Col = %d\r\n", column);
 12007  002576  0E00               	movlw	low STR_22
 12008  002578  6E24               	movwf	printf@f,c
 12009  00257A  0EFF               	movlw	high STR_22
 12010  00257C  6E25               	movwf	printf@f+1,c
 12011  00257E  C03D  F026         	movff	collect_column@column,?_printf+2
 12012  002582  6A27               	clrf	?_printf+3,c
 12013  002584  EC02  F011         	call	_printf	;wreg free
 12014                           
 12015                           ;cmd_consol.c: 69: if (column >= clcd_config_data.clcd_max_col) {
 12016  002588  504B               	movf	_clcd_config_data+2,w,c
 12017  00258A  5C3D               	subwf	collect_column@column,w,c
 12018  00258C  A0D8               	btfss	status,0,c
 12019  00258E  D007               	goto	l6493
 12020                           
 12021                           ;cmd_consol.c: 70: *data_column = -1;
 12022  002590  C038  FFD9         	movff	collect_column@data_column,fsr2l
 12023  002594  C039  FFDA         	movff	collect_column@data_column+1,fsr2h
 12024  002598  0EFF               	movlw	255
 12025  00259A  6EDF               	movwf	indf2,c
 12026                           
 12027                           ;cmd_consol.c: 71: } else {
 12028  00259C  0012               	return	
 12029  00259E                     l6493:
 12030                           
 12031                           ;cmd_consol.c: 72: *data_column = column;
 12032  00259E  C038  FFD9         	movff	collect_column@data_column,fsr2l
 12033  0025A2  C039  FFDA         	movff	collect_column@data_column+1,fsr2h
 12034  0025A6  C03D  FFDF         	movff	collect_column@column,indf2
 12035  0025AA  0012               	return	
 12036  0025AC                     __end_of_collect_column:
 12037                           	opt stack 0
 12038                           tblptru	equ	0xFF8
 12039                           tblptrh	equ	0xFF7
 12040                           tblptrl	equ	0xFF6
 12041                           tablat	equ	0xFF5
 12042                           prodh	equ	0xFF4
 12043                           prodl	equ	0xFF3
 12044                           intcon	equ	0xFF2
 12045                           indf0	equ	0xFEF
 12046                           postinc0	equ	0xFEE
 12047                           fsr0h	equ	0xFEA
 12048                           fsr0l	equ	0xFE9
 12049                           wreg	equ	0xFE8
 12050                           indf1	equ	0xFE7
 12051                           postdec1	equ	0xFE5
 12052                           fsr1h	equ	0xFE2
 12053                           fsr1l	equ	0xFE1
 12054                           indf2	equ	0xFDF
 12055                           postinc2	equ	0xFDE
 12056                           fsr2h	equ	0xFDA
 12057                           fsr2l	equ	0xFD9
 12058                           status	equ	0xFD8
 12059                           
 12060 ;; *************** function _strlen *****************
 12061 ;; Defined at:
 12062 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strlen.c"
 12063 ;; Parameters:    Size  Location     Type
 12064 ;;  s               2   29[COMRAM] PTR const unsigned char 
 12065 ;;		 -> uart_str(150), STR_72(4), STR_71(7), STR_70(7), 
 12066 ;;		 -> STR_69(9), STR_68(11), STR_65(7), STR_63(7), 
 12067 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 12068 ;;		 -> STR_55(11), STR_52(7), STR_49(7), STR_48(7), 
 12069 ;;		 -> STR_46(12), STR_44(2), STR_41(7), STR_39(7), 
 12070 ;;		 -> STR_38(10), STR_37(7), STR_36(10), STR_35(7), 
 12071 ;;		 -> STR_33(7), STR_32(7), STR_31(9), STR_29(7), 
 12072 ;;		 -> RAM(3895), STR_28(10), STR_27(7), STR_26(8), 
 12073 ;;		 -> STR_25(7), STR_24(8), NULL(0), clcd_display_string_details.string(40), 
 12074 ;;		 -> clcd_display_string_details(1080), 
 12075 ;; Auto vars:     Size  Location     Type
 12076 ;;  cp              2   33[COMRAM] PTR const unsigned char 
 12077 ;;		 -> uart_str(150), STR_72(4), STR_71(7), STR_70(7), 
 12078 ;;		 -> STR_69(9), STR_68(11), STR_65(7), STR_63(7), 
 12079 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 12080 ;;		 -> STR_55(11), STR_52(7), STR_49(7), STR_48(7), 
 12081 ;;		 -> STR_46(12), STR_44(2), STR_41(7), STR_39(7), 
 12082 ;;		 -> STR_38(10), STR_37(7), STR_36(10), STR_35(7), 
 12083 ;;		 -> STR_33(7), STR_32(7), STR_31(9), STR_29(7), 
 12084 ;;		 -> RAM(3895), STR_28(10), STR_27(7), STR_26(8), 
 12085 ;;		 -> STR_25(7), STR_24(8), NULL(0), clcd_display_string_details.string(40), 
 12086 ;;		 -> clcd_display_string_details(1080), 
 12087 ;; Return value:  Size  Location     Type
 12088 ;;                  2   29[COMRAM] unsigned int 
 12089 ;; Registers used:
 12090 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 12091 ;; Tracked objects:
 12092 ;;		On entry : 0/0
 12093 ;;		On exit  : 0/0
 12094 ;;		Unchanged: 0/0
 12095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12096 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;Total ram usage:        6 bytes
 12101 ;; Hardware stack levels used:    1
 12102 ;; Hardware stack levels required when called:    5
 12103 ;; This function calls:
 12104 ;;		Nothing
 12105 ;; This function is called by:
 12106 ;;		_copy_data
 12107 ;;		_scroll_off
 12108 ;;		_make_display
 12109 ;;		_collect_row
 12110 ;;		_collect_column
 12111 ;;		_parse_cmd_str
 12112 ;;		_strstr
 12113 ;;		_put_string
 12114 ;;		_display_string
 12115 ;;		_get_str
 12116 ;; This function uses a non-reentrant model
 12117 ;;
 12118                           
 12119                           	psect	text53
 12120  00306E                     __ptext53:
 12121                           	opt stack 0
 12122  00306E                     _strlen:
 12123                           	opt stack 24
 12124                           
 12125                           ;incstack = 0
 12126  00306E  C01E  F022         	movff	strlen@s,strlen@cp
 12127  003072  C01F  F023         	movff	strlen@s+1,strlen@cp+1
 12128  003076  D002               	goto	l5815
 12129  003078                     l5813:
 12130  003078  4A22               	infsnz	strlen@cp,f,c
 12131  00307A  2A23               	incf	strlen@cp+1,f,c
 12132  00307C                     l5815:
 12133  00307C  C022  FFF6         	movff	strlen@cp,tblptrl
 12134  003080  C023  FFF7         	movff	strlen@cp+1,tblptrh
 12135  003084  0E00               	movlw	low (__mediumconst shr (0+16))
 12136  003086  6EF8               	movwf	tblptru,c
 12137  003088  0E0F               	movlw	(high __ramtop+-1)
 12138  00308A  64F7               	cpfsgt	tblptrh,c
 12139  00308C  D003               	bra	u5547
 12140  00308E  0008               	tblrd		*
 12141  003090  50F5               	movf	tablat,w,c
 12142  003092  D005               	bra	u5540
 12143  003094                     u5547:
 12144  003094  CFF6 FFE9          	movff	tblptrl,fsr0l
 12145  003098  CFF7 FFEA          	movff	tblptrh,fsr0h
 12146  00309C  50EF               	movf	indf0,w,c
 12147  00309E                     u5540:
 12148  00309E  0900               	iorlw	0
 12149  0030A0  A4D8               	btfss	status,2,c
 12150  0030A2  D7EA               	goto	l5813
 12151  0030A4  C01E  F020         	movff	strlen@s,??_strlen
 12152  0030A8  C01F  F021         	movff	strlen@s+1,??_strlen+1
 12153  0030AC  1E20               	comf	??_strlen,f,c
 12154  0030AE  1E21               	comf	??_strlen+1,f,c
 12155  0030B0  4A20               	infsnz	??_strlen,f,c
 12156  0030B2  2A21               	incf	??_strlen+1,f,c
 12157  0030B4  5022               	movf	strlen@cp,w,c
 12158  0030B6  2420               	addwf	??_strlen,w,c
 12159  0030B8  6E1E               	movwf	?_strlen,c
 12160  0030BA  5023               	movf	strlen@cp+1,w,c
 12161  0030BC  2021               	addwfc	??_strlen+1,w,c
 12162  0030BE  6E1F               	movwf	?_strlen+1,c
 12163  0030C0  0012               	return	
 12164  0030C2                     __end_of_strlen:
 12165                           	opt stack 0
 12166                           tblptru	equ	0xFF8
 12167                           tblptrh	equ	0xFF7
 12168                           tblptrl	equ	0xFF6
 12169                           tablat	equ	0xFF5
 12170                           prodh	equ	0xFF4
 12171                           prodl	equ	0xFF3
 12172                           intcon	equ	0xFF2
 12173                           indf0	equ	0xFEF
 12174                           postinc0	equ	0xFEE
 12175                           fsr0h	equ	0xFEA
 12176                           fsr0l	equ	0xFE9
 12177                           wreg	equ	0xFE8
 12178                           indf1	equ	0xFE7
 12179                           postdec1	equ	0xFE5
 12180                           fsr1h	equ	0xFE2
 12181                           fsr1l	equ	0xFE1
 12182                           indf2	equ	0xFDF
 12183                           postinc2	equ	0xFDE
 12184                           fsr2h	equ	0xFDA
 12185                           fsr2l	equ	0xFD9
 12186                           status	equ	0xFD8
 12187                           
 12188 ;; *************** function _printf *****************
 12189 ;; Defined at:
 12190 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;  f               2   35[COMRAM] PTR const unsigned char 
 12193 ;;		 -> STR_122(18), STR_120(5), STR_117(3), STR_116(3), 
 12194 ;;		 -> STR_115(3), STR_113(7), STR_111(7), STR_109(7), 
 12195 ;;		 -> STR_107(13), STR_105(5), STR_102(13), STR_99(13), 
 12196 ;;		 -> STR_96(13), STR_93(13), STR_92(5), STR_91(11), 
 12197 ;;		 -> STR_88(13), STR_85(13), STR_84(5), STR_81(13), 
 12198 ;;		 -> STR_80(5), STR_77(13), STR_76(5), STR_67(25), 
 12199 ;;		 -> STR_66(11), STR_64(25), STR_62(27), STR_60(27), 
 12200 ;;		 -> STR_58(12), STR_54(14), STR_53(9), STR_51(11), 
 12201 ;;		 -> STR_50(9), STR_47(9), STR_45(11), STR_43(11), 
 12202 ;;		 -> STR_42(12), STR_40(12), STR_34(7), STR_30(8), 
 12203 ;;		 -> STR_23(8), STR_22(11), STR_21(15), STR_20(22), 
 12204 ;;		 -> STR_19(15), STR_18(32), STR_17(14), STR_16(11), 
 12205 ;;		 -> STR_15(16), STR_14(16), STR_13(19), STR_12(3), 
 12206 ;;		 -> STR_11(5), STR_10(16), STR_9(39), STR_8(26), 
 12207 ;;		 -> STR_7(26), STR_6(26), STR_4(17), STR_3(18), 
 12208 ;;		 -> STR_2(9), STR_1(9), 
 12209 ;; Auto vars:     Size  Location     Type
 12210 ;;  tmpval          4    0        struct .
 12211 ;;  val             2   50[COMRAM] unsigned int 
 12212 ;;  ap              2   48[COMRAM] PTR void [1]
 12213 ;;		 -> ?_printf(2), 
 12214 ;;  cp              2   46[COMRAM] PTR const unsigned char 
 12215 ;;		 -> STR_123(7), STR_121(6), uart_str(150), STR_114(15), 
 12216 ;;		 -> STR_112(12), STR_110(12), STR_108(11), STR_106(6), 
 12217 ;;		 -> STR_103(11), STR_100(12), STR_97(10), STR_94(10), 
 12218 ;;		 -> STR_89(9), STR_86(8), STR_82(8), STR_78(10), 
 12219 ;;		 -> STR_71(7), STR_70(7), STR_65(7), STR_63(7), 
 12220 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 12221 ;;		 -> STR_52(7), STR_49(7), STR_48(7), STR_44(2), 
 12222 ;;		 -> STR_41(7), STR_39(7), STR_37(7), STR_35(7), 
 12223 ;;		 -> STR_33(7), STR_32(7), STR_29(7), RAM(3895), 
 12224 ;;		 -> STR_27(7), STR_25(7), NULL(0), STR_5(5), 
 12225 ;;  len             2    0        unsigned int 
 12226 ;;  c               1   52[COMRAM] char 
 12227 ;;  prec            1   45[COMRAM] char 
 12228 ;;  flag            1   44[COMRAM] unsigned char 
 12229 ;; Return value:  Size  Location     Type
 12230 ;;                  2   35[COMRAM] int 
 12231 ;; Registers used:
 12232 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12233 ;; Tracked objects:
 12234 ;;		On entry : 0/0
 12235 ;;		On exit  : 0/0
 12236 ;;		Unchanged: 0/0
 12237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12238 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12239 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12241 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12242 ;;Total ram usage:       18 bytes
 12243 ;; Hardware stack levels used:    1
 12244 ;; Hardware stack levels required when called:    7
 12245 ;; This function calls:
 12246 ;;		___lwdiv
 12247 ;;		___lwmod
 12248 ;;		_putch
 12249 ;; This function is called by:
 12250 ;;		_init_clcd_cusotom_lcd
 12251 ;;		_copy_data
 12252 ;;		_conflict_check
 12253 ;;		_update_string_data
 12254 ;;		_clcd_display_string_config
 12255 ;;		_collect_row
 12256 ;;		_collect_column
 12257 ;;		_parse_cmd_str
 12258 ;;		_reply_to_host
 12259 ;;		_cmd_consol_task
 12260 ;;		_main
 12261 ;;		_display_string
 12262 ;; This function uses a non-reentrant model
 12263 ;;
 12264                           
 12265                           	psect	text54
 12266  002204                     __ptext54:
 12267                           	opt stack 0
 12268  002204                     _printf:
 12269                           	opt stack 23
 12270                           
 12271                           ;doprnt.c: 466: va_list ap;
 12272                           ;doprnt.c: 499: signed char c;
 12273                           ;doprnt.c: 506: signed char prec;
 12274                           ;doprnt.c: 508: unsigned char flag;
 12275                           ;doprnt.c: 523: union {
 12276                           ;doprnt.c: 524: unsigned long vd;
 12277                           ;doprnt.c: 525: double integ;
 12278                           ;doprnt.c: 526: } tmpval;
 12279                           ;doprnt.c: 528: unsigned int val;
 12280                           ;doprnt.c: 529: unsigned len;
 12281                           ;doprnt.c: 530: const char * cp;
 12282                           ;doprnt.c: 533: *ap = __va_start();
 12283                           
 12284                           ;incstack = 0
 12285  002204  0E26               	movlw	low (?_printf+2)
 12286  002206  6E31               	movwf	printf@ap,c
 12287  002208  0E00               	movlw	high (?_printf+2)
 12288  00220A  6E32               	movwf	printf@ap+1,c
 12289                           
 12290                           ;doprnt.c: 536: while(c = *f++) {
 12291  00220C  D0D9               	goto	l5809
 12292  00220E                     l5743:
 12293                           
 12294                           ;doprnt.c: 538: if(c != '%')
 12295  00220E  0E25               	movlw	37
 12296  002210  1835               	xorwf	printf@c,w,c
 12297  002212  B4D8               	btfsc	status,2,c
 12298  002214  D004               	goto	l5747
 12299                           
 12300                           ;doprnt.c: 540: {
 12301                           ;doprnt.c: 541: (putch(c) );
 12302  002216  5035               	movf	printf@c,w,c
 12303  002218  ECF4  F01B         	call	_putch
 12304                           
 12305                           ;doprnt.c: 542: continue;
 12306  00221C  D0D1               	goto	l5809
 12307  00221E                     l5747:
 12308                           
 12309                           ;doprnt.c: 543: }
 12310                           ;doprnt.c: 548: flag = 0;
 12311  00221E  0E00               	movlw	0
 12312  002220  6E2D               	movwf	printf@flag,c
 12313                           
 12314                           ;doprnt.c: 635: switch(c = *f++) {
 12315  002222  D04D               	goto	l5771
 12316  002224                     l5749:
 12317                           
 12318                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12319  002224  C031  FFD9         	movff	printf@ap,fsr2l
 12320  002228  C032  FFDA         	movff	printf@ap+1,fsr2h
 12321  00222C  CFDE F02F          	movff	postinc2,printf@cp
 12322  002230  CFDD F030          	movff	postdec2,printf@cp+1
 12323  002234  0E02               	movlw	2
 12324  002236  2631               	addwf	printf@ap,f,c
 12325  002238  0E00               	movlw	0
 12326  00223A  2232               	addwfc	printf@ap+1,f,c
 12327                           
 12328                           ;doprnt.c: 740: if(!cp)
 12329  00223C  502F               	movf	printf@cp,w,c
 12330  00223E  1030               	iorwf	printf@cp+1,w,c
 12331  002240  A4D8               	btfss	status,2,c
 12332  002242  D01A               	goto	l5761
 12333                           
 12334                           ;doprnt.c: 741: cp = "(null)";
 12335  002244  0ECA               	movlw	low STR_123
 12336  002246  6E2F               	movwf	printf@cp,c
 12337  002248  0EFF               	movlw	high STR_123
 12338  00224A  6E30               	movwf	printf@cp+1,c
 12339                           
 12340                           ;doprnt.c: 777: while(*cp)
 12341  00224C  D015               	goto	l5761
 12342  00224E                     l5757:
 12343                           
 12344                           ;doprnt.c: 778: (putch(*cp++) );
 12345  00224E  C02F  FFF6         	movff	printf@cp,tblptrl
 12346  002252  C030  FFF7         	movff	printf@cp+1,tblptrh
 12347  002256  0E00               	movlw	low (__mediumconst shr (0+16))
 12348  002258  6EF8               	movwf	tblptru,c
 12349  00225A  0E0F               	movlw	(high __ramtop+-1)
 12350  00225C  64F7               	cpfsgt	tblptrh,c
 12351  00225E  D003               	bra	u5447
 12352  002260  0008               	tblrd		*
 12353  002262  50F5               	movf	tablat,w,c
 12354  002264  D005               	bra	u5440
 12355  002266                     u5447:
 12356  002266  CFF6 FFE9          	movff	tblptrl,fsr0l
 12357  00226A  CFF7 FFEA          	movff	tblptrh,fsr0h
 12358  00226E  50EF               	movf	indf0,w,c
 12359  002270                     u5440:
 12360  002270  ECF4  F01B         	call	_putch
 12361  002274  4A2F               	infsnz	printf@cp,f,c
 12362  002276  2A30               	incf	printf@cp+1,f,c
 12363  002278                     l5761:
 12364  002278  C02F  FFF6         	movff	printf@cp,tblptrl
 12365  00227C  C030  FFF7         	movff	printf@cp+1,tblptrh
 12366  002280  0E00               	movlw	low (__mediumconst shr (0+16))
 12367  002282  6EF8               	movwf	tblptru,c
 12368  002284  0E0F               	movlw	(high __ramtop+-1)
 12369  002286  64F7               	cpfsgt	tblptrh,c
 12370  002288  D003               	bra	u5457
 12371  00228A  0008               	tblrd		*
 12372  00228C  50F5               	movf	tablat,w,c
 12373  00228E  D005               	bra	u5450
 12374  002290                     u5457:
 12375  002290  CFF6 FFE9          	movff	tblptrl,fsr0l
 12376  002294  CFF7 FFEA          	movff	tblptrh,fsr0h
 12377  002298  50EF               	movf	indf0,w,c
 12378  00229A                     u5450:
 12379  00229A  0900               	iorlw	0
 12380  00229C  B4D8               	btfsc	status,2,c
 12381  00229E  D090               	goto	l5809
 12382  0022A0  D7D6               	goto	l5757
 12383  0022A2                     l5763:
 12384                           
 12385                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 12386  0022A2  C031  FFD9         	movff	printf@ap,fsr2l
 12387  0022A6  C032  FFDA         	movff	printf@ap+1,fsr2h
 12388  0022AA  50DF               	movf	indf2,w,c
 12389  0022AC  6E35               	movwf	printf@c,c
 12390  0022AE  0E02               	movlw	2
 12391  0022B0  2631               	addwf	printf@ap,f,c
 12392  0022B2  0E00               	movlw	0
 12393  0022B4  2232               	addwfc	printf@ap+1,f,c
 12394  0022B6                     l5767:
 12395                           
 12396                           ;doprnt.c: 809: (putch(c) );
 12397  0022B6  5035               	movf	printf@c,w,c
 12398  0022B8  ECF4  F01B         	call	_putch
 12399                           
 12400                           ;doprnt.c: 810: continue;
 12401  0022BC  D081               	goto	l5809
 12402  0022BE                     l5771:
 12403  0022BE  C024  FFF6         	movff	printf@f,tblptrl
 12404  0022C2  C025  FFF7         	movff	printf@f+1,tblptrh
 12405  0022C6  4A24               	infsnz	printf@f,f,c
 12406  0022C8  2A25               	incf	printf@f+1,f,c
 12407  0022CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12408  0022CA  6AF8               	clrf	tblptru,c
 12409  0022CC                     	endif
 12410  0022CC                     	if	0	;tblptru may be non-zero
 12411  0022CC                     	endif
 12412  0022CC  0008               	tblrd		*
 12413  0022CE  CFF5 F035          	movff	tablat,printf@c
 12414  0022D2  5035               	movf	printf@c,w,c
 12415                           
 12416                           ; Switch size 1, requested type "space"
 12417                           ; Number of cases is 5, Range of values is 0 to 115
 12418                           ; switch strategies available:
 12419                           ; Name         Instructions Cycles
 12420                           ; simple_byte           16     9 (average)
 12421                           ;	Chosen strategy is simple_byte
 12422  0022D4  0A00               	xorlw	0	; case 0
 12423  0022D6  B4D8               	btfsc	status,2,c
 12424  0022D8  0012               	return	
 12425  0022DA  0A63               	xorlw	99	; case 99
 12426  0022DC  B4D8               	btfsc	status,2,c
 12427  0022DE  D7E1               	goto	l5763
 12428  0022E0  0A07               	xorlw	7	; case 100
 12429  0022E2  B4D8               	btfsc	status,2,c
 12430  0022E4  D007               	goto	l5773
 12431  0022E6  0A0D               	xorlw	13	; case 105
 12432  0022E8  B4D8               	btfsc	status,2,c
 12433  0022EA  D004               	goto	l5773
 12434  0022EC  0A1A               	xorlw	26	; case 115
 12435  0022EE  B4D8               	btfsc	status,2,c
 12436  0022F0  D799               	goto	l5749
 12437  0022F2  D7E1               	goto	l5767
 12438  0022F4                     l5773:
 12439                           
 12440                           ;doprnt.c: 1253: {
 12441                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12442  0022F4  C031  FFD9         	movff	printf@ap,fsr2l
 12443  0022F8  C032  FFDA         	movff	printf@ap+1,fsr2h
 12444  0022FC  CFDE F033          	movff	postinc2,printf@val
 12445  002300  CFDD F034          	movff	postdec2,printf@val+1
 12446  002304  0E02               	movlw	2
 12447  002306  2631               	addwf	printf@ap,f,c
 12448  002308  0E00               	movlw	0
 12449  00230A  2232               	addwfc	printf@ap+1,f,c
 12450                           
 12451                           ;doprnt.c: 1261: if((int)val < 0) {
 12452  00230C  AE34               	btfss	printf@val+1,7,c
 12453  00230E  D006               	goto	l5783
 12454                           
 12455                           ;doprnt.c: 1262: flag |= 0x03;
 12456  002310  0E03               	movlw	3
 12457  002312  122D               	iorwf	printf@flag,f,c
 12458                           
 12459                           ;doprnt.c: 1263: val = -val;
 12460  002314  6C33               	negf	printf@val,c
 12461  002316  1E34               	comf	printf@val+1,f,c
 12462  002318  B0D8               	btfsc	status,0,c
 12463  00231A  2A34               	incf	printf@val+1,f,c
 12464  00231C                     l5783:
 12465                           
 12466                           ;doprnt.c: 1264: }
 12467                           ;doprnt.c: 1266: }
 12468                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12469  00231C  0E01               	movlw	1
 12470  00231E  6E35               	movwf	printf@c,c
 12471  002320                     l5785:
 12472  002320  0E05               	movlw	5
 12473  002322  1835               	xorwf	printf@c,w,c
 12474  002324  B4D8               	btfsc	status,2,c
 12475  002326  D015               	goto	l5797
 12476                           
 12477                           ;doprnt.c: 1306: if(val < dpowers[c])
 12478  002328  5035               	movf	printf@c,w,c
 12479  00232A  0D02               	mullw	2
 12480  00232C  0EC5               	movlw	low _dpowers
 12481  00232E  24F3               	addwf	prodl,w,c
 12482  002330  6EF6               	movwf	tblptrl,c
 12483  002332  0EFC               	movlw	high _dpowers
 12484  002334  20F4               	addwfc	prodh,w,c
 12485  002336  6EF7               	movwf	tblptrh,c
 12486  002338                     	if	1	;There are 3 active tblptr bytes
 12487  002338  6AF8               	clrf	tblptru,c
 12488  00233A  0E00               	movlw	low (__mediumconst shr (0+16))
 12489  00233C  22F8               	addwfc	tblptru,f,c
 12490  00233E                     	endif
 12491  00233E  0009               	tblrd		*+
 12492  002340  50F5               	movf	tablat,w,c
 12493  002342  5C33               	subwf	printf@val,w,c
 12494  002344  0009               	tblrd		*+
 12495  002346  50F5               	movf	tablat,w,c
 12496  002348  5834               	subwfb	printf@val+1,w,c
 12497  00234A  A0D8               	btfss	status,0,c
 12498  00234C  D002               	goto	l5797
 12499                           
 12500                           ;doprnt.c: 1307: break;
 12501  00234E  2A35               	incf	printf@c,f,c
 12502  002350  D7E7               	goto	l5785
 12503  002352                     l5797:
 12504                           
 12505                           ;doprnt.c: 1422: {
 12506                           ;doprnt.c: 1438: if(flag & 0x03)
 12507  002352  C02D  F02C         	movff	printf@flag,??_printf
 12508  002356  0E03               	movlw	3
 12509  002358  162C               	andwf	??_printf,f,c
 12510  00235A  B4D8               	btfsc	status,2,c
 12511  00235C  D003               	goto	l5801
 12512                           
 12513                           ;doprnt.c: 1439: (putch('-') );
 12514  00235E  0E2D               	movlw	45
 12515  002360  ECF4  F01B         	call	_putch
 12516  002364                     l5801:
 12517                           
 12518                           ;doprnt.c: 1469: }
 12519                           ;doprnt.c: 1472: prec = c;
 12520  002364  C035  F02E         	movff	printf@c,printf@prec
 12521                           
 12522                           ;doprnt.c: 1474: while(prec--) {
 12523  002368  D027               	goto	l5807
 12524  00236A                     l5803:
 12525                           
 12526                           ;doprnt.c: 1478: {
 12527                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12528  00236A  502E               	movf	printf@prec,w,c
 12529  00236C  0D02               	mullw	2
 12530  00236E  0EC5               	movlw	low _dpowers
 12531  002370  24F3               	addwf	prodl,w,c
 12532  002372  6EF6               	movwf	tblptrl,c
 12533  002374  0EFC               	movlw	high _dpowers
 12534  002376  20F4               	addwfc	prodh,w,c
 12535  002378  6EF7               	movwf	tblptrh,c
 12536  00237A                     	if	1	;There are 3 active tblptr bytes
 12537  00237A  6AF8               	clrf	tblptru,c
 12538  00237C  0E00               	movlw	low (__mediumconst shr (0+16))
 12539  00237E  22F8               	addwfc	tblptru,f,c
 12540  002380                     	endif
 12541  002380  0009               	tblrd		*+
 12542  002382  CFF5 F012          	movff	tablat,___lwdiv@divisor
 12543  002386  000A               	tblrd		*-
 12544  002388  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
 12545  00238C  C033  F010         	movff	printf@val,___lwdiv@dividend
 12546  002390  C034  F011         	movff	printf@val+1,___lwdiv@dividend+1
 12547  002394  EC61  F018         	call	___lwdiv	;wreg free
 12548  002398  C010  F017         	movff	?___lwdiv,___lwmod@dividend
 12549  00239C  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
 12550  0023A0  0E00               	movlw	0
 12551  0023A2  6E1A               	movwf	___lwmod@divisor+1,c
 12552  0023A4  0E0A               	movlw	10
 12553  0023A6  6E19               	movwf	___lwmod@divisor,c
 12554  0023A8  EC8E  F019         	call	___lwmod	;wreg free
 12555  0023AC  5017               	movf	?___lwmod,w,c
 12556  0023AE  0F30               	addlw	48
 12557  0023B0  6E35               	movwf	printf@c,c
 12558                           
 12559                           ;doprnt.c: 1523: }
 12560                           ;doprnt.c: 1524: (putch(c) );
 12561  0023B2  5035               	movf	printf@c,w,c
 12562  0023B4  ECF4  F01B         	call	_putch
 12563  0023B8                     l5807:
 12564  0023B8  062E               	decf	printf@prec,f,c
 12565  0023BA  282E               	incf	printf@prec,w,c
 12566  0023BC  A4D8               	btfss	status,2,c
 12567  0023BE  D7D5               	goto	l5803
 12568  0023C0                     l5809:
 12569  0023C0  C024  FFF6         	movff	printf@f,tblptrl
 12570  0023C4  C025  FFF7         	movff	printf@f+1,tblptrh
 12571  0023C8  4A24               	infsnz	printf@f,f,c
 12572  0023CA  2A25               	incf	printf@f+1,f,c
 12573  0023CC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12574  0023CC  6AF8               	clrf	tblptru,c
 12575  0023CE                     	endif
 12576  0023CE                     	if	0	;tblptru may be non-zero
 12577  0023CE                     	endif
 12578  0023CE  0008               	tblrd		*
 12579  0023D0  CFF5 F035          	movff	tablat,printf@c
 12580  0023D4  5035               	movf	printf@c,w,c
 12581  0023D6  B4D8               	btfsc	status,2,c
 12582  0023D8  0012               	return	
 12583  0023DA  D719               	goto	l5743
 12584  0023DC                     __end_of_printf:
 12585                           	opt stack 0
 12586                           tblptru	equ	0xFF8
 12587                           tblptrh	equ	0xFF7
 12588                           tblptrl	equ	0xFF6
 12589                           tablat	equ	0xFF5
 12590                           prodh	equ	0xFF4
 12591                           prodl	equ	0xFF3
 12592                           intcon	equ	0xFF2
 12593                           indf0	equ	0xFEF
 12594                           postinc0	equ	0xFEE
 12595                           fsr0h	equ	0xFEA
 12596                           fsr0l	equ	0xFE9
 12597                           wreg	equ	0xFE8
 12598                           indf1	equ	0xFE7
 12599                           postdec1	equ	0xFE5
 12600                           fsr1h	equ	0xFE2
 12601                           fsr1l	equ	0xFE1
 12602                           indf2	equ	0xFDF
 12603                           postinc2	equ	0xFDE
 12604                           postdec2	equ	0xFDD
 12605                           fsr2h	equ	0xFDA
 12606                           fsr2l	equ	0xFD9
 12607                           status	equ	0xFD8
 12608                           
 12609 ;; *************** function _putch *****************
 12610 ;; Defined at:
 12611 ;;		line 160 in file "mcc_generated_files/eusart1.c"
 12612 ;; Parameters:    Size  Location     Type
 12613 ;;  txData          1    wreg     unsigned char 
 12614 ;; Auto vars:     Size  Location     Type
 12615 ;;  txData          1   16[COMRAM] unsigned char 
 12616 ;; Return value:  Size  Location     Type
 12617 ;;                  1    wreg      void 
 12618 ;; Registers used:
 12619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12620 ;; Tracked objects:
 12621 ;;		On entry : 0/0
 12622 ;;		On exit  : 0/0
 12623 ;;		Unchanged: 0/0
 12624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12626 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12628 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12629 ;;Total ram usage:        1 bytes
 12630 ;; Hardware stack levels used:    1
 12631 ;; Hardware stack levels required when called:    6
 12632 ;; This function calls:
 12633 ;;		_EUSART1_Write
 12634 ;; This function is called by:
 12635 ;;		_printf
 12636 ;;		_puts
 12637 ;;		_cputs
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           	psect	text55
 12642  0037E8                     __ptext55:
 12643                           	opt stack 0
 12644  0037E8                     _putch:
 12645                           	opt stack 23
 12646                           
 12647                           ;incstack = 0
 12648                           ;putch@txData stored from wreg
 12649  0037E8  6E11               	movwf	putch@txData,c
 12650                           
 12651                           ;eusart1.c: 162: EUSART1_Write(txData);
 12652  0037EA  5011               	movf	putch@txData,w,c
 12653  0037EC  ECCF  F019         	call	_EUSART1_Write
 12654  0037F0  0012               	return		;funcret
 12655  0037F2                     __end_of_putch:
 12656                           	opt stack 0
 12657                           tblptru	equ	0xFF8
 12658                           tblptrh	equ	0xFF7
 12659                           tblptrl	equ	0xFF6
 12660                           tablat	equ	0xFF5
 12661                           prodh	equ	0xFF4
 12662                           prodl	equ	0xFF3
 12663                           intcon	equ	0xFF2
 12664                           indf0	equ	0xFEF
 12665                           postinc0	equ	0xFEE
 12666                           fsr0h	equ	0xFEA
 12667                           fsr0l	equ	0xFE9
 12668                           wreg	equ	0xFE8
 12669                           indf1	equ	0xFE7
 12670                           postdec1	equ	0xFE5
 12671                           fsr1h	equ	0xFE2
 12672                           fsr1l	equ	0xFE1
 12673                           indf2	equ	0xFDF
 12674                           postinc2	equ	0xFDE
 12675                           postdec2	equ	0xFDD
 12676                           fsr2h	equ	0xFDA
 12677                           fsr2l	equ	0xFD9
 12678                           status	equ	0xFD8
 12679                           
 12680 ;; *************** function _EUSART1_Write *****************
 12681 ;; Defined at:
 12682 ;;		line 132 in file "mcc_generated_files/eusart1.c"
 12683 ;; Parameters:    Size  Location     Type
 12684 ;;  txData          1    wreg     unsigned char 
 12685 ;; Auto vars:     Size  Location     Type
 12686 ;;  txData          1   15[COMRAM] unsigned char 
 12687 ;; Return value:  Size  Location     Type
 12688 ;;                  1    wreg      void 
 12689 ;; Registers used:
 12690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12691 ;; Tracked objects:
 12692 ;;		On entry : 0/0
 12693 ;;		On exit  : 0/0
 12694 ;;		Unchanged: 0/0
 12695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12699 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12700 ;;Total ram usage:        1 bytes
 12701 ;; Hardware stack levels used:    1
 12702 ;; Hardware stack levels required when called:    5
 12703 ;; This function calls:
 12704 ;;		Nothing
 12705 ;; This function is called by:
 12706 ;;		_putch
 12707 ;; This function uses a non-reentrant model
 12708 ;;
 12709                           
 12710                           	psect	text56
 12711  00339E                     __ptext56:
 12712                           	opt stack 0
 12713  00339E                     _EUSART1_Write:
 12714                           	opt stack 23
 12715                           
 12716                           ;incstack = 0
 12717                           ;EUSART1_Write@txData stored from wreg
 12718  00339E  6E10               	movwf	EUSART1_Write@txData,c
 12719  0033A0                     l5627:
 12720  0033A0  0100               	movlb	0	; () banked
 12721  0033A2  51FD               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 12722  0033A4  B4D8               	btfsc	status,2,c
 12723  0033A6  D7FC               	goto	l5627
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;eusart1.c: 136: }
 12727                           ;eusart1.c: 138: if(0 == PIE1bits.TX1IE)
 12728  0033A8  B89D               	btfsc	3997,4,c	;volatile
 12729  0033AA  D003               	goto	l193
 12730                           
 12731                           ; BSR set to: 0
 12732                           ;eusart1.c: 139: {
 12733                           ;eusart1.c: 140: TXREG1 = txData;
 12734  0033AC  C010  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 12735                           
 12736                           ;eusart1.c: 141: }
 12737  0033B0  D013               	goto	l5641
 12738  0033B2                     l193:
 12739                           
 12740                           ; BSR set to: 0
 12741                           ;eusart1.c: 142: else
 12742                           ;eusart1.c: 143: {
 12743                           ;eusart1.c: 144: PIE1bits.TX1IE = 0;
 12744  0033B2  989D               	bcf	3997,4,c	;volatile
 12745                           
 12746                           ; BSR set to: 0
 12747                           ;eusart1.c: 145: eusart1TxBuffer[eusart1TxHead++] = txData;
 12748  0033B4  5047               	movf	_eusart1TxHead,w,c	;volatile
 12749  0033B6  0D01               	mullw	1
 12750  0033B8  0E68               	movlw	low _eusart1TxBuffer
 12751  0033BA  24F3               	addwf	prodl,w,c
 12752  0033BC  6ED9               	movwf	fsr2l,c
 12753  0033BE  0E00               	movlw	high _eusart1TxBuffer
 12754  0033C0  20F4               	addwfc	prodh,w,c
 12755  0033C2  6EDA               	movwf	fsr2h,c
 12756  0033C4  C010  FFDF         	movff	EUSART1_Write@txData,indf2
 12757                           
 12758                           ; BSR set to: 0
 12759  0033C8  2A47               	incf	_eusart1TxHead,f,c	;volatile
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;eusart1.c: 146: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 12763  0033CA  0E07               	movlw	7
 12764  0033CC  6447               	cpfsgt	_eusart1TxHead,c	;volatile
 12765  0033CE  D002               	goto	l5639
 12766                           
 12767                           ; BSR set to: 0
 12768                           ;eusart1.c: 147: {
 12769                           ;eusart1.c: 148: eusart1TxHead = 0;
 12770  0033D0  0E00               	movlw	0
 12771  0033D2  6E47               	movwf	_eusart1TxHead,c	;volatile
 12772  0033D4                     l5639:
 12773                           
 12774                           ; BSR set to: 0
 12775                           ;eusart1.c: 149: }
 12776                           ;eusart1.c: 150: eusart1TxBufferRemaining--;
 12777  0033D4  0100               	movlb	0	; () banked
 12778  0033D6  07FD               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 12779  0033D8                     l5641:
 12780                           
 12781                           ; BSR set to: 0
 12782                           ;eusart1.c: 151: }
 12783                           ;eusart1.c: 152: PIE1bits.TX1IE = 1;
 12784  0033D8  889D               	bsf	3997,4,c	;volatile
 12785                           
 12786                           ; BSR set to: 0
 12787  0033DA  0012               	return		;funcret
 12788  0033DC                     __end_of_EUSART1_Write:
 12789                           	opt stack 0
 12790                           tblptru	equ	0xFF8
 12791                           tblptrh	equ	0xFF7
 12792                           tblptrl	equ	0xFF6
 12793                           tablat	equ	0xFF5
 12794                           prodh	equ	0xFF4
 12795                           prodl	equ	0xFF3
 12796                           intcon	equ	0xFF2
 12797                           indf0	equ	0xFEF
 12798                           postinc0	equ	0xFEE
 12799                           fsr0h	equ	0xFEA
 12800                           fsr0l	equ	0xFE9
 12801                           wreg	equ	0xFE8
 12802                           indf1	equ	0xFE7
 12803                           postdec1	equ	0xFE5
 12804                           fsr1h	equ	0xFE2
 12805                           fsr1l	equ	0xFE1
 12806                           indf2	equ	0xFDF
 12807                           postinc2	equ	0xFDE
 12808                           postdec2	equ	0xFDD
 12809                           fsr2h	equ	0xFDA
 12810                           fsr2l	equ	0xFD9
 12811                           status	equ	0xFD8
 12812                           
 12813 ;; *************** function ___lwmod *****************
 12814 ;; Defined at:
 12815 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12816 ;; Parameters:    Size  Location     Type
 12817 ;;  dividend        2   22[COMRAM] unsigned int 
 12818 ;;  divisor         2   24[COMRAM] unsigned int 
 12819 ;; Auto vars:     Size  Location     Type
 12820 ;;  counter         1   26[COMRAM] unsigned char 
 12821 ;; Return value:  Size  Location     Type
 12822 ;;                  2   22[COMRAM] unsigned int 
 12823 ;; Registers used:
 12824 ;;		wreg, status,2, status,0
 12825 ;; Tracked objects:
 12826 ;;		On entry : 0/0
 12827 ;;		On exit  : 0/0
 12828 ;;		Unchanged: 0/0
 12829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12830 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12831 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12833 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12834 ;;Total ram usage:        5 bytes
 12835 ;; Hardware stack levels used:    1
 12836 ;; Hardware stack levels required when called:    5
 12837 ;; This function calls:
 12838 ;;		Nothing
 12839 ;; This function is called by:
 12840 ;;		_printf
 12841 ;; This function uses a non-reentrant model
 12842 ;;
 12843                           
 12844                           	psect	text57
 12845  00331C                     __ptext57:
 12846                           	opt stack 0
 12847  00331C                     ___lwmod:
 12848                           	opt stack 24
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;incstack = 0
 12852  00331C  5019               	movf	___lwmod@divisor,w,c
 12853  00331E  101A               	iorwf	___lwmod@divisor+1,w,c
 12854  003320  B4D8               	btfsc	status,2,c
 12855  003322  D018               	goto	l1447
 12856  003324  0E01               	movlw	1
 12857  003326  6E1B               	movwf	___lwmod@counter,c
 12858  003328  D004               	goto	l5717
 12859  00332A                     l5715:
 12860  00332A  90D8               	bcf	status,0,c
 12861  00332C  3619               	rlcf	___lwmod@divisor,f,c
 12862  00332E  361A               	rlcf	___lwmod@divisor+1,f,c
 12863  003330  2A1B               	incf	___lwmod@counter,f,c
 12864  003332                     l5717:
 12865  003332  AE1A               	btfss	___lwmod@divisor+1,7,c
 12866  003334  D7FA               	goto	l5715
 12867  003336                     l5719:
 12868  003336  5019               	movf	___lwmod@divisor,w,c
 12869  003338  5C17               	subwf	___lwmod@dividend,w,c
 12870  00333A  501A               	movf	___lwmod@divisor+1,w,c
 12871  00333C  5818               	subwfb	___lwmod@dividend+1,w,c
 12872  00333E  A0D8               	btfss	status,0,c
 12873  003340  D004               	goto	l5723
 12874  003342  5019               	movf	___lwmod@divisor,w,c
 12875  003344  5E17               	subwf	___lwmod@dividend,f,c
 12876  003346  501A               	movf	___lwmod@divisor+1,w,c
 12877  003348  5A18               	subwfb	___lwmod@dividend+1,f,c
 12878  00334A                     l5723:
 12879  00334A  90D8               	bcf	status,0,c
 12880  00334C  321A               	rrcf	___lwmod@divisor+1,f,c
 12881  00334E  3219               	rrcf	___lwmod@divisor,f,c
 12882  003350  2E1B               	decfsz	___lwmod@counter,f,c
 12883  003352  D7F1               	goto	l5719
 12884  003354                     l1447:
 12885  003354  C017  F017         	movff	___lwmod@dividend,?___lwmod
 12886  003358  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
 12887  00335C  0012               	return		;funcret
 12888  00335E                     __end_of___lwmod:
 12889                           	opt stack 0
 12890                           tblptru	equ	0xFF8
 12891                           tblptrh	equ	0xFF7
 12892                           tblptrl	equ	0xFF6
 12893                           tablat	equ	0xFF5
 12894                           prodh	equ	0xFF4
 12895                           prodl	equ	0xFF3
 12896                           intcon	equ	0xFF2
 12897                           indf0	equ	0xFEF
 12898                           postinc0	equ	0xFEE
 12899                           fsr0h	equ	0xFEA
 12900                           fsr0l	equ	0xFE9
 12901                           wreg	equ	0xFE8
 12902                           indf1	equ	0xFE7
 12903                           postdec1	equ	0xFE5
 12904                           fsr1h	equ	0xFE2
 12905                           fsr1l	equ	0xFE1
 12906                           indf2	equ	0xFDF
 12907                           postinc2	equ	0xFDE
 12908                           postdec2	equ	0xFDD
 12909                           fsr2h	equ	0xFDA
 12910                           fsr2l	equ	0xFD9
 12911                           status	equ	0xFD8
 12912                           
 12913 ;; *************** function ___lwdiv *****************
 12914 ;; Defined at:
 12915 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12916 ;; Parameters:    Size  Location     Type
 12917 ;;  dividend        2   15[COMRAM] unsigned int 
 12918 ;;  divisor         2   17[COMRAM] unsigned int 
 12919 ;; Auto vars:     Size  Location     Type
 12920 ;;  quotient        2   20[COMRAM] unsigned int 
 12921 ;;  counter         1   19[COMRAM] unsigned char 
 12922 ;; Return value:  Size  Location     Type
 12923 ;;                  2   15[COMRAM] unsigned int 
 12924 ;; Registers used:
 12925 ;;		wreg, status,2, status,0
 12926 ;; Tracked objects:
 12927 ;;		On entry : 0/0
 12928 ;;		On exit  : 0/0
 12929 ;;		Unchanged: 0/0
 12930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12932 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12934 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12935 ;;Total ram usage:        7 bytes
 12936 ;; Hardware stack levels used:    1
 12937 ;; Hardware stack levels required when called:    5
 12938 ;; This function calls:
 12939 ;;		Nothing
 12940 ;; This function is called by:
 12941 ;;		_printf
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           	psect	text58
 12946  0030C2                     __ptext58:
 12947                           	opt stack 0
 12948  0030C2                     ___lwdiv:
 12949                           	opt stack 24
 12950                           
 12951                           ;incstack = 0
 12952  0030C2  0E00               	movlw	0
 12953  0030C4  6E16               	movwf	___lwdiv@quotient+1,c
 12954  0030C6  0E00               	movlw	0
 12955  0030C8  6E15               	movwf	___lwdiv@quotient,c
 12956  0030CA  5012               	movf	___lwdiv@divisor,w,c
 12957  0030CC  1013               	iorwf	___lwdiv@divisor+1,w,c
 12958  0030CE  B4D8               	btfsc	status,2,c
 12959  0030D0  D01C               	goto	l1437
 12960  0030D2  0E01               	movlw	1
 12961  0030D4  6E14               	movwf	___lwdiv@counter,c
 12962  0030D6  D004               	goto	l5697
 12963  0030D8                     l5695:
 12964  0030D8  90D8               	bcf	status,0,c
 12965  0030DA  3612               	rlcf	___lwdiv@divisor,f,c
 12966  0030DC  3613               	rlcf	___lwdiv@divisor+1,f,c
 12967  0030DE  2A14               	incf	___lwdiv@counter,f,c
 12968  0030E0                     l5697:
 12969  0030E0  AE13               	btfss	___lwdiv@divisor+1,7,c
 12970  0030E2  D7FA               	goto	l5695
 12971  0030E4                     l5699:
 12972  0030E4  90D8               	bcf	status,0,c
 12973  0030E6  3615               	rlcf	___lwdiv@quotient,f,c
 12974  0030E8  3616               	rlcf	___lwdiv@quotient+1,f,c
 12975  0030EA  5012               	movf	___lwdiv@divisor,w,c
 12976  0030EC  5C10               	subwf	___lwdiv@dividend,w,c
 12977  0030EE  5013               	movf	___lwdiv@divisor+1,w,c
 12978  0030F0  5811               	subwfb	___lwdiv@dividend+1,w,c
 12979  0030F2  A0D8               	btfss	status,0,c
 12980  0030F4  D005               	goto	l5707
 12981  0030F6  5012               	movf	___lwdiv@divisor,w,c
 12982  0030F8  5E10               	subwf	___lwdiv@dividend,f,c
 12983  0030FA  5013               	movf	___lwdiv@divisor+1,w,c
 12984  0030FC  5A11               	subwfb	___lwdiv@dividend+1,f,c
 12985  0030FE  8015               	bsf	___lwdiv@quotient,0,c
 12986  003100                     l5707:
 12987  003100  90D8               	bcf	status,0,c
 12988  003102  3213               	rrcf	___lwdiv@divisor+1,f,c
 12989  003104  3212               	rrcf	___lwdiv@divisor,f,c
 12990  003106  2E14               	decfsz	___lwdiv@counter,f,c
 12991  003108  D7ED               	goto	l5699
 12992  00310A                     l1437:
 12993  00310A  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
 12994  00310E  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12995  003112  0012               	return		;funcret
 12996  003114                     __end_of___lwdiv:
 12997                           	opt stack 0
 12998                           tblptru	equ	0xFF8
 12999                           tblptrh	equ	0xFF7
 13000                           tblptrl	equ	0xFF6
 13001                           tablat	equ	0xFF5
 13002                           prodh	equ	0xFF4
 13003                           prodl	equ	0xFF3
 13004                           intcon	equ	0xFF2
 13005                           indf0	equ	0xFEF
 13006                           postinc0	equ	0xFEE
 13007                           fsr0h	equ	0xFEA
 13008                           fsr0l	equ	0xFE9
 13009                           wreg	equ	0xFE8
 13010                           indf1	equ	0xFE7
 13011                           postdec1	equ	0xFE5
 13012                           fsr1h	equ	0xFE2
 13013                           fsr1l	equ	0xFE1
 13014                           indf2	equ	0xFDF
 13015                           postinc2	equ	0xFDE
 13016                           postdec2	equ	0xFDD
 13017                           fsr2h	equ	0xFDA
 13018                           fsr2l	equ	0xFD9
 13019                           status	equ	0xFD8
 13020                           
 13021 ;; *************** function _atoi *****************
 13022 ;; Defined at:
 13023 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
 13024 ;; Parameters:    Size  Location     Type
 13025 ;;  s               2   29[COMRAM] PTR const unsigned char 
 13026 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 13027 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 13028 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 13029 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 13030 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 13031 ;;		 -> RAM(3895), STR_27(7), STR_25(7), NULL(0), 
 13032 ;; Auto vars:     Size  Location     Type
 13033 ;;  a               2   34[COMRAM] int 
 13034 ;;  sign            1   33[COMRAM] unsigned char 
 13035 ;; Return value:  Size  Location     Type
 13036 ;;                  2   29[COMRAM] int 
 13037 ;; Registers used:
 13038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13039 ;; Tracked objects:
 13040 ;;		On entry : 0/0
 13041 ;;		On exit  : 0/0
 13042 ;;		Unchanged: 0/0
 13043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13045 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13046 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13047 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13048 ;;Total ram usage:        7 bytes
 13049 ;; Hardware stack levels used:    1
 13050 ;; Hardware stack levels required when called:    6
 13051 ;; This function calls:
 13052 ;;		___wmul
 13053 ;;		_isdigit
 13054 ;; This function is called by:
 13055 ;;		_parse_cmd_str
 13056 ;; This function uses a non-reentrant model
 13057 ;;
 13058                           
 13059                           	psect	text59
 13060  0025AC                     __ptext59:
 13061                           	opt stack 0
 13062  0025AC                     _atoi:
 13063                           	opt stack 22
 13064                           
 13065                           ;incstack = 0
 13066  0025AC  D002               	goto	l6545
 13067  0025AE                     l6543:
 13068  0025AE  4A1E               	infsnz	atoi@s,f,c
 13069  0025B0  2A1F               	incf	atoi@s+1,f,c
 13070  0025B2                     l6545:
 13071  0025B2  C01E  FFF6         	movff	atoi@s,tblptrl
 13072  0025B6  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13073  0025BA  0E00               	movlw	low (__mediumconst shr (0+16))
 13074  0025BC  6EF8               	movwf	tblptru,c
 13075  0025BE  0E0F               	movlw	(high __ramtop+-1)
 13076  0025C0  64F7               	cpfsgt	tblptrh,c
 13077  0025C2  D003               	bra	u6607
 13078  0025C4  0008               	tblrd		*
 13079  0025C6  50F5               	movf	tablat,w,c
 13080  0025C8  D005               	bra	u6600
 13081  0025CA                     u6607:
 13082  0025CA  CFF6 FFE9          	movff	tblptrl,fsr0l
 13083  0025CE  CFF7 FFEA          	movff	tblptrh,fsr0h
 13084  0025D2  50EF               	movf	indf0,w,c
 13085  0025D4                     u6600:
 13086  0025D4  0A20               	xorlw	32
 13087  0025D6  B4D8               	btfsc	status,2,c
 13088  0025D8  D7EA               	goto	l6543
 13089  0025DA  C01E  FFF6         	movff	atoi@s,tblptrl
 13090  0025DE  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13091  0025E2  0E00               	movlw	low (__mediumconst shr (0+16))
 13092  0025E4  6EF8               	movwf	tblptru,c
 13093  0025E6  0E0F               	movlw	(high __ramtop+-1)
 13094  0025E8  64F7               	cpfsgt	tblptrh,c
 13095  0025EA  D003               	bra	u6627
 13096  0025EC  0008               	tblrd		*
 13097  0025EE  50F5               	movf	tablat,w,c
 13098  0025F0  D005               	bra	u6620
 13099  0025F2                     u6627:
 13100  0025F2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13101  0025F6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13102  0025FA  50EF               	movf	indf0,w,c
 13103  0025FC                     u6620:
 13104  0025FC  0A09               	xorlw	9
 13105  0025FE  B4D8               	btfsc	status,2,c
 13106  002600  D7D6               	goto	l6543
 13107  002602  0E00               	movlw	0
 13108  002604  6E24               	movwf	atoi@a+1,c
 13109  002606  0E00               	movlw	0
 13110  002608  6E23               	movwf	atoi@a,c
 13111  00260A  0E00               	movlw	0
 13112  00260C  6E22               	movwf	atoi@sign,c
 13113  00260E  C01E  FFF6         	movff	atoi@s,tblptrl
 13114  002612  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13115  002616  0E00               	movlw	low (__mediumconst shr (0+16))
 13116  002618  6EF8               	movwf	tblptru,c
 13117  00261A  0E0F               	movlw	(high __ramtop+-1)
 13118  00261C  64F7               	cpfsgt	tblptrh,c
 13119  00261E  D003               	bra	u6647
 13120  002620  0008               	tblrd		*
 13121  002622  50F5               	movf	tablat,w,c
 13122  002624  D005               	bra	u6640
 13123  002626                     u6647:
 13124  002626  CFF6 FFE9          	movff	tblptrl,fsr0l
 13125  00262A  CFF7 FFEA          	movff	tblptrh,fsr0h
 13126  00262E  50EF               	movf	indf0,w,c
 13127  002630                     u6640:
 13128  002630  0A2D               	xorlw	45
 13129  002632  A4D8               	btfss	status,2,c
 13130  002634  D002               	goto	l6555
 13131  002636  2A22               	incf	atoi@sign,f,c
 13132  002638  D03C               	goto	l6561
 13133  00263A                     l6555:
 13134  00263A  C01E  FFF6         	movff	atoi@s,tblptrl
 13135  00263E  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13136  002642  0E00               	movlw	low (__mediumconst shr (0+16))
 13137  002644  6EF8               	movwf	tblptru,c
 13138  002646  0E0F               	movlw	(high __ramtop+-1)
 13139  002648  64F7               	cpfsgt	tblptrh,c
 13140  00264A  D003               	bra	u6667
 13141  00264C  0008               	tblrd		*
 13142  00264E  50F5               	movf	tablat,w,c
 13143  002650  D005               	bra	u6660
 13144  002652                     u6667:
 13145  002652  CFF6 FFE9          	movff	tblptrl,fsr0l
 13146  002656  CFF7 FFEA          	movff	tblptrh,fsr0h
 13147  00265A  50EF               	movf	indf0,w,c
 13148  00265C                     u6660:
 13149  00265C  0A2B               	xorlw	43
 13150  00265E  A4D8               	btfss	status,2,c
 13151  002660  D02A               	goto	l6563
 13152  002662  D027               	goto	l6561
 13153  002664                     l6559:
 13154  002664  C023  F018         	movff	atoi@a,___wmul@multiplier
 13155  002668  C024  F019         	movff	atoi@a+1,___wmul@multiplier+1
 13156  00266C  0E00               	movlw	0
 13157  00266E  6E1B               	movwf	___wmul@multiplicand+1,c
 13158  002670  0E0A               	movlw	10
 13159  002672  6E1A               	movwf	___wmul@multiplicand,c
 13160  002674  ECD1  F01A         	call	___wmul	;wreg free
 13161  002678  C01E  FFF6         	movff	atoi@s,tblptrl
 13162  00267C  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13163  002680  0E00               	movlw	low (__mediumconst shr (0+16))
 13164  002682  6EF8               	movwf	tblptru,c
 13165  002684  0E0F               	movlw	(high __ramtop+-1)
 13166  002686  64F7               	cpfsgt	tblptrh,c
 13167  002688  D003               	bra	u6687
 13168  00268A  0008               	tblrd		*
 13169  00268C  50F5               	movf	tablat,w,c
 13170  00268E  D005               	bra	u6680
 13171  002690                     u6687:
 13172  002690  CFF6 FFE9          	movff	tblptrl,fsr0l
 13173  002694  CFF7 FFEA          	movff	tblptrh,fsr0h
 13174  002698  50EF               	movf	indf0,w,c
 13175  00269A                     u6680:
 13176  00269A  6E20               	movwf	??_atoi& (0+255),c
 13177  00269C  6A21               	clrf	(??_atoi+1)& (0+255),c
 13178  00269E  5018               	movf	?___wmul,w,c
 13179  0026A0  2620               	addwf	??_atoi,f,c
 13180  0026A2  5019               	movf	?___wmul+1,w,c
 13181  0026A4  2221               	addwfc	??_atoi+1,f,c
 13182  0026A6  0ED0               	movlw	208
 13183  0026A8  2420               	addwf	??_atoi,w,c
 13184  0026AA  6E23               	movwf	atoi@a,c
 13185  0026AC  0EFF               	movlw	255
 13186  0026AE  2021               	addwfc	??_atoi+1,w,c
 13187  0026B0  6E24               	movwf	atoi@a+1,c
 13188  0026B2                     l6561:
 13189  0026B2  4A1E               	infsnz	atoi@s,f,c
 13190  0026B4  2A1F               	incf	atoi@s+1,f,c
 13191  0026B6                     l6563:
 13192  0026B6  C01E  FFF6         	movff	atoi@s,tblptrl
 13193  0026BA  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13194  0026BE  0E00               	movlw	low (__mediumconst shr (0+16))
 13195  0026C0  6EF8               	movwf	tblptru,c
 13196  0026C2  0E0F               	movlw	(high __ramtop+-1)
 13197  0026C4  64F7               	cpfsgt	tblptrh,c
 13198  0026C6  D003               	bra	u6697
 13199  0026C8  0008               	tblrd		*
 13200  0026CA  50F5               	movf	tablat,w,c
 13201  0026CC  D005               	bra	u6690
 13202  0026CE                     u6697:
 13203  0026CE  CFF6 FFE9          	movff	tblptrl,fsr0l
 13204  0026D2  CFF7 FFEA          	movff	tblptrh,fsr0h
 13205  0026D6  50EF               	movf	indf0,w,c
 13206  0026D8                     u6690:
 13207  0026D8  EC39  F01B         	call	_isdigit
 13208  0026DC  B0D8               	btfsc	status,0,c
 13209  0026DE  D7C2               	goto	l6559
 13210  0026E0  5022               	movf	atoi@sign,w,c
 13211  0026E2  B4D8               	btfsc	status,2,c
 13212  0026E4  D00D               	goto	l1187
 13213  0026E6  C023  F020         	movff	atoi@a,??_atoi
 13214  0026EA  C024  F021         	movff	atoi@a+1,??_atoi+1
 13215  0026EE  1E20               	comf	??_atoi,f,c
 13216  0026F0  1E21               	comf	??_atoi+1,f,c
 13217  0026F2  4A20               	infsnz	??_atoi,f,c
 13218  0026F4  2A21               	incf	??_atoi+1,f,c
 13219  0026F6  C020  F01E         	movff	??_atoi,?_atoi
 13220  0026FA  C021  F01F         	movff	??_atoi+1,?_atoi+1
 13221  0026FE  0012               	return	
 13222  002700                     l1187:
 13223  002700  C023  F01E         	movff	atoi@a,?_atoi
 13224  002704  C024  F01F         	movff	atoi@a+1,?_atoi+1
 13225  002708  0012               	return		;funcret
 13226  00270A                     __end_of_atoi:
 13227                           	opt stack 0
 13228                           tblptru	equ	0xFF8
 13229                           tblptrh	equ	0xFF7
 13230                           tblptrl	equ	0xFF6
 13231                           tablat	equ	0xFF5
 13232                           prodh	equ	0xFF4
 13233                           prodl	equ	0xFF3
 13234                           intcon	equ	0xFF2
 13235                           indf0	equ	0xFEF
 13236                           postinc0	equ	0xFEE
 13237                           fsr0h	equ	0xFEA
 13238                           fsr0l	equ	0xFE9
 13239                           wreg	equ	0xFE8
 13240                           indf1	equ	0xFE7
 13241                           postdec1	equ	0xFE5
 13242                           fsr1h	equ	0xFE2
 13243                           fsr1l	equ	0xFE1
 13244                           indf2	equ	0xFDF
 13245                           postinc2	equ	0xFDE
 13246                           postdec2	equ	0xFDD
 13247                           fsr2h	equ	0xFDA
 13248                           fsr2l	equ	0xFD9
 13249                           status	equ	0xFD8
 13250                           
 13251 ;; *************** function _isdigit *****************
 13252 ;; Defined at:
 13253 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  c               1    wreg     unsigned char 
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;  c               1   17[COMRAM] unsigned char 
 13258 ;; Return value:  Size  Location     Type
 13259 ;;		None               void
 13260 ;; Registers used:
 13261 ;;		wreg, status,2, status,0
 13262 ;; Tracked objects:
 13263 ;;		On entry : 0/0
 13264 ;;		On exit  : 0/0
 13265 ;;		Unchanged: 0/0
 13266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13268 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13271 ;;Total ram usage:        3 bytes
 13272 ;; Hardware stack levels used:    1
 13273 ;; Hardware stack levels required when called:    5
 13274 ;; This function calls:
 13275 ;;		Nothing
 13276 ;; This function is called by:
 13277 ;;		_collect_row
 13278 ;;		_collect_column
 13279 ;;		_parse_cmd_str
 13280 ;;		_atoi
 13281 ;; This function uses a non-reentrant model
 13282 ;;
 13283                           
 13284                           	psect	text60
 13285  003672                     __ptext60:
 13286                           	opt stack 0
 13287  003672                     _isdigit:
 13288                           	opt stack 23
 13289                           
 13290                           ;incstack = 0
 13291                           ;isdigit@c stored from wreg
 13292  003672  6E12               	movwf	isdigit@c,c
 13293  003674  0E00               	movlw	0
 13294  003676  6E11               	movwf	_isdigit$2188,c
 13295  003678  0E3A               	movlw	58
 13296  00367A  6012               	cpfslt	isdigit@c,c
 13297  00367C  D005               	goto	l6197
 13298  00367E  0E2F               	movlw	47
 13299  003680  6412               	cpfsgt	isdigit@c,c
 13300  003682  D002               	goto	l6197
 13301  003684  0E01               	movlw	1
 13302  003686  6E11               	movwf	_isdigit$2188,c
 13303  003688                     l6197:
 13304  003688  C011  F010         	movff	_isdigit$2188,??_isdigit
 13305  00368C  3010               	rrcf	??_isdigit,w,c
 13306  00368E  0012               	return	
 13307  003690                     __end_of_isdigit:
 13308                           	opt stack 0
 13309                           tblptru	equ	0xFF8
 13310                           tblptrh	equ	0xFF7
 13311                           tblptrl	equ	0xFF6
 13312                           tablat	equ	0xFF5
 13313                           prodh	equ	0xFF4
 13314                           prodl	equ	0xFF3
 13315                           intcon	equ	0xFF2
 13316                           indf0	equ	0xFEF
 13317                           postinc0	equ	0xFEE
 13318                           fsr0h	equ	0xFEA
 13319                           fsr0l	equ	0xFE9
 13320                           wreg	equ	0xFE8
 13321                           indf1	equ	0xFE7
 13322                           postdec1	equ	0xFE5
 13323                           fsr1h	equ	0xFE2
 13324                           fsr1l	equ	0xFE1
 13325                           indf2	equ	0xFDF
 13326                           postinc2	equ	0xFDE
 13327                           postdec2	equ	0xFDD
 13328                           fsr2h	equ	0xFDA
 13329                           fsr2l	equ	0xFD9
 13330                           status	equ	0xFD8
 13331                           
 13332 ;; *************** function ___wmul *****************
 13333 ;; Defined at:
 13334 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13335 ;; Parameters:    Size  Location     Type
 13336 ;;  multiplier      2   23[COMRAM] unsigned int 
 13337 ;;  multiplicand    2   25[COMRAM] unsigned int 
 13338 ;; Auto vars:     Size  Location     Type
 13339 ;;  product         2   27[COMRAM] unsigned int 
 13340 ;; Return value:  Size  Location     Type
 13341 ;;                  2   23[COMRAM] unsigned int 
 13342 ;; Registers used:
 13343 ;;		wreg, status,2, status,0, prodl, prodh
 13344 ;; Tracked objects:
 13345 ;;		On entry : 0/0
 13346 ;;		On exit  : 0/0
 13347 ;;		Unchanged: 0/0
 13348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13349 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13352 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13353 ;;Total ram usage:        6 bytes
 13354 ;; Hardware stack levels used:    1
 13355 ;; Hardware stack levels required when called:    5
 13356 ;; This function calls:
 13357 ;;		Nothing
 13358 ;; This function is called by:
 13359 ;;		_init_clcd_cusotom_lcd
 13360 ;;		_conflict_check
 13361 ;;		_update_string_data
 13362 ;;		_make_display
 13363 ;;		_atoi
 13364 ;; This function uses a non-reentrant model
 13365 ;;
 13366                           
 13367                           	psect	text61
 13368  0035A2                     __ptext61:
 13369                           	opt stack 0
 13370  0035A2                     ___wmul:
 13371                           	opt stack 24
 13372                           
 13373                           ;incstack = 0
 13374  0035A2  5018               	movf	___wmul@multiplier,w,c
 13375  0035A4  021A               	mulwf	___wmul@multiplicand,c
 13376  0035A6  CFF3 F01C          	movff	prodl,___wmul@product
 13377  0035AA  CFF4 F01D          	movff	prodh,___wmul@product+1
 13378  0035AE  5018               	movf	___wmul@multiplier,w,c
 13379  0035B0  021B               	mulwf	___wmul@multiplicand+1,c
 13380  0035B2  50F3               	movf	prodl,w,c
 13381  0035B4  261D               	addwf	___wmul@product+1,f,c
 13382  0035B6  5019               	movf	___wmul@multiplier+1,w,c
 13383  0035B8  021A               	mulwf	___wmul@multiplicand,c
 13384  0035BA  50F3               	movf	prodl,w,c
 13385  0035BC  261D               	addwf	___wmul@product+1,f,c
 13386  0035BE  C01C  F018         	movff	___wmul@product,?___wmul
 13387  0035C2  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 13388  0035C6  0012               	return	
 13389  0035C8                     __end_of___wmul:
 13390                           	opt stack 0
 13391                           tblptru	equ	0xFF8
 13392                           tblptrh	equ	0xFF7
 13393                           tblptrl	equ	0xFF6
 13394                           tablat	equ	0xFF5
 13395                           prodh	equ	0xFF4
 13396                           prodl	equ	0xFF3
 13397                           intcon	equ	0xFF2
 13398                           indf0	equ	0xFEF
 13399                           postinc0	equ	0xFEE
 13400                           fsr0h	equ	0xFEA
 13401                           fsr0l	equ	0xFE9
 13402                           wreg	equ	0xFE8
 13403                           indf1	equ	0xFE7
 13404                           postdec1	equ	0xFE5
 13405                           fsr1h	equ	0xFE2
 13406                           fsr1l	equ	0xFE1
 13407                           indf2	equ	0xFDF
 13408                           postinc2	equ	0xFDE
 13409                           postdec2	equ	0xFDD
 13410                           fsr2h	equ	0xFDA
 13411                           fsr2l	equ	0xFD9
 13412                           status	equ	0xFD8
 13413                           
 13414 ;; *************** function _getch *****************
 13415 ;; Defined at:
 13416 ;;		line 155 in file "mcc_generated_files/eusart1.c"
 13417 ;; Parameters:    Size  Location     Type
 13418 ;;		None
 13419 ;; Auto vars:     Size  Location     Type
 13420 ;;		None
 13421 ;; Return value:  Size  Location     Type
 13422 ;;                  1    wreg      unsigned char 
 13423 ;; Registers used:
 13424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13425 ;; Tracked objects:
 13426 ;;		On entry : 0/0
 13427 ;;		On exit  : 0/0
 13428 ;;		Unchanged: 0/0
 13429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13434 ;;Total ram usage:        0 bytes
 13435 ;; Hardware stack levels used:    1
 13436 ;; Hardware stack levels required when called:    6
 13437 ;; This function calls:
 13438 ;;		_EUSART1_Read
 13439 ;; This function is called by:
 13440 ;;		_cmd_consol_task
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           	psect	text62
 13445  003804                     __ptext62:
 13446                           	opt stack 0
 13447  003804                     _getch:
 13448                           	opt stack 23
 13449                           
 13450                           ;eusart1.c: 157: return EUSART1_Read();
 13451                           
 13452                           ;incstack = 0
 13453  003804  EC42  F01A         	call	_EUSART1_Read	;wreg free
 13454  003808  0012               	return	
 13455  00380A                     __end_of_getch:
 13456                           	opt stack 0
 13457                           tblptru	equ	0xFF8
 13458                           tblptrh	equ	0xFF7
 13459                           tblptrl	equ	0xFF6
 13460                           tablat	equ	0xFF5
 13461                           prodh	equ	0xFF4
 13462                           prodl	equ	0xFF3
 13463                           intcon	equ	0xFF2
 13464                           indf0	equ	0xFEF
 13465                           postinc0	equ	0xFEE
 13466                           fsr0h	equ	0xFEA
 13467                           fsr0l	equ	0xFE9
 13468                           wreg	equ	0xFE8
 13469                           indf1	equ	0xFE7
 13470                           postdec1	equ	0xFE5
 13471                           fsr1h	equ	0xFE2
 13472                           fsr1l	equ	0xFE1
 13473                           indf2	equ	0xFDF
 13474                           postinc2	equ	0xFDE
 13475                           postdec2	equ	0xFDD
 13476                           fsr2h	equ	0xFDA
 13477                           fsr2l	equ	0xFD9
 13478                           status	equ	0xFD8
 13479                           
 13480 ;; *************** function _EUSART1_Read *****************
 13481 ;; Defined at:
 13482 ;;		line 112 in file "mcc_generated_files/eusart1.c"
 13483 ;; Parameters:    Size  Location     Type
 13484 ;;		None
 13485 ;; Auto vars:     Size  Location     Type
 13486 ;;  readValue       1   15[COMRAM] unsigned char 
 13487 ;; Return value:  Size  Location     Type
 13488 ;;                  1    wreg      unsigned char 
 13489 ;; Registers used:
 13490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13491 ;; Tracked objects:
 13492 ;;		On entry : 0/0
 13493 ;;		On exit  : 0/0
 13494 ;;		Unchanged: 0/0
 13495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13497 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13499 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13500 ;;Total ram usage:        1 bytes
 13501 ;; Hardware stack levels used:    1
 13502 ;; Hardware stack levels required when called:    5
 13503 ;; This function calls:
 13504 ;;		Nothing
 13505 ;; This function is called by:
 13506 ;;		_getch
 13507 ;; This function uses a non-reentrant model
 13508 ;;
 13509                           
 13510                           	psect	text63
 13511  003484                     __ptext63:
 13512                           	opt stack 0
 13513  003484                     _EUSART1_Read:
 13514                           	opt stack 23
 13515                           
 13516                           ;eusart1.c: 114: uint8_t readValue = 0;
 13517                           
 13518                           ;incstack = 0
 13519  003484  0E00               	movlw	0
 13520  003486  6E10               	movwf	EUSART1_Read@readValue,c
 13521  003488                     l4421:
 13522  003488  5044               	movf	_eusart1RxCount,w,c	;volatile
 13523  00348A  B4D8               	btfsc	status,2,c
 13524  00348C  D7FD               	goto	l4421
 13525                           
 13526                           ;eusart1.c: 118: }
 13527                           ;eusart1.c: 120: readValue = eusart1RxBuffer[eusart1RxTail++];
 13528  00348E  5046               	movf	_eusart1RxTail,w,c	;volatile
 13529  003490  0D01               	mullw	1
 13530  003492  0E60               	movlw	low _eusart1RxBuffer
 13531  003494  24F3               	addwf	prodl,w,c
 13532  003496  6ED9               	movwf	fsr2l,c
 13533  003498  0E00               	movlw	high _eusart1RxBuffer
 13534  00349A  20F4               	addwfc	prodh,w,c
 13535  00349C  6EDA               	movwf	fsr2h,c
 13536  00349E  50DF               	movf	indf2,w,c
 13537  0034A0  6E10               	movwf	EUSART1_Read@readValue,c
 13538  0034A2  2A46               	incf	_eusart1RxTail,f,c	;volatile
 13539                           
 13540                           ;eusart1.c: 121: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 13541  0034A4  0E07               	movlw	7
 13542  0034A6  6446               	cpfsgt	_eusart1RxTail,c	;volatile
 13543  0034A8  D002               	goto	l4431
 13544                           
 13545                           ;eusart1.c: 122: {
 13546                           ;eusart1.c: 123: eusart1RxTail = 0;
 13547  0034AA  0E00               	movlw	0
 13548  0034AC  6E46               	movwf	_eusart1RxTail,c	;volatile
 13549  0034AE                     l4431:
 13550                           
 13551                           ;eusart1.c: 124: }
 13552                           ;eusart1.c: 125: PIE1bits.RC1IE = 0;
 13553  0034AE  9A9D               	bcf	3997,5,c	;volatile
 13554                           
 13555                           ;eusart1.c: 126: eusart1RxCount--;
 13556  0034B0  0644               	decf	_eusart1RxCount,f,c	;volatile
 13557                           
 13558                           ;eusart1.c: 127: PIE1bits.RC1IE = 1;
 13559  0034B2  8A9D               	bsf	3997,5,c	;volatile
 13560                           
 13561                           ;eusart1.c: 129: return readValue;
 13562  0034B4  5010               	movf	EUSART1_Read@readValue,w,c
 13563  0034B6  0012               	return	
 13564  0034B8                     __end_of_EUSART1_Read:
 13565                           	opt stack 0
 13566                           tblptru	equ	0xFF8
 13567                           tblptrh	equ	0xFF7
 13568                           tblptrl	equ	0xFF6
 13569                           tablat	equ	0xFF5
 13570                           prodh	equ	0xFF4
 13571                           prodl	equ	0xFF3
 13572                           intcon	equ	0xFF2
 13573                           indf0	equ	0xFEF
 13574                           postinc0	equ	0xFEE
 13575                           fsr0h	equ	0xFEA
 13576                           fsr0l	equ	0xFE9
 13577                           wreg	equ	0xFE8
 13578                           indf1	equ	0xFE7
 13579                           postdec1	equ	0xFE5
 13580                           fsr1h	equ	0xFE2
 13581                           fsr1l	equ	0xFE1
 13582                           indf2	equ	0xFDF
 13583                           postinc2	equ	0xFDE
 13584                           postdec2	equ	0xFDD
 13585                           fsr2h	equ	0xFDA
 13586                           fsr2l	equ	0xFD9
 13587                           status	equ	0xFD8
 13588                           
 13589 ;; *************** function _TMR5_StopTimer *****************
 13590 ;; Defined at:
 13591 ;;		line 94 in file "mcc_generated_files/tmr5.c"
 13592 ;; Parameters:    Size  Location     Type
 13593 ;;		None
 13594 ;; Auto vars:     Size  Location     Type
 13595 ;;		None
 13596 ;; Return value:  Size  Location     Type
 13597 ;;                  1    wreg      void 
 13598 ;; Registers used:
 13599 ;;		None
 13600 ;; Tracked objects:
 13601 ;;		On entry : 0/0
 13602 ;;		On exit  : 0/0
 13603 ;;		Unchanged: 0/0
 13604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13609 ;;Total ram usage:        0 bytes
 13610 ;; Hardware stack levels used:    1
 13611 ;; Hardware stack levels required when called:    5
 13612 ;; This function calls:
 13613 ;;		Nothing
 13614 ;; This function is called by:
 13615 ;;		_main
 13616 ;;		__delay_10uS
 13617 ;; This function uses a non-reentrant model
 13618 ;;
 13619                           
 13620                           	psect	text64
 13621  00380A                     __ptext64:
 13622                           	opt stack 0
 13623  00380A                     _TMR5_StopTimer:
 13624                           	opt stack 25
 13625                           
 13626                           ;tmr5.c: 97: T5CONbits.TMR5ON = 0;
 13627                           
 13628                           ;incstack = 0
 13629  00380A  010F               	movlb	15	; () banked
 13630  00380C  914E               	bcf	78,0,b	;volatile
 13631                           
 13632                           ; BSR set to: 15
 13633  00380E  0012               	return		;funcret
 13634  003810                     __end_of_TMR5_StopTimer:
 13635                           	opt stack 0
 13636                           tblptru	equ	0xFF8
 13637                           tblptrh	equ	0xFF7
 13638                           tblptrl	equ	0xFF6
 13639                           tablat	equ	0xFF5
 13640                           prodh	equ	0xFF4
 13641                           prodl	equ	0xFF3
 13642                           intcon	equ	0xFF2
 13643                           indf0	equ	0xFEF
 13644                           postinc0	equ	0xFEE
 13645                           fsr0h	equ	0xFEA
 13646                           fsr0l	equ	0xFE9
 13647                           wreg	equ	0xFE8
 13648                           indf1	equ	0xFE7
 13649                           postdec1	equ	0xFE5
 13650                           fsr1h	equ	0xFE2
 13651                           fsr1l	equ	0xFE1
 13652                           indf2	equ	0xFDF
 13653                           postinc2	equ	0xFDE
 13654                           postdec2	equ	0xFDD
 13655                           fsr2h	equ	0xFDA
 13656                           fsr2l	equ	0xFD9
 13657                           status	equ	0xFD8
 13658                           
 13659 ;; *************** function _TMR0_StopTimer *****************
 13660 ;; Defined at:
 13661 ;;		line 101 in file "mcc_generated_files/tmr0.c"
 13662 ;; Parameters:    Size  Location     Type
 13663 ;;		None
 13664 ;; Auto vars:     Size  Location     Type
 13665 ;;		None
 13666 ;; Return value:  Size  Location     Type
 13667 ;;                  1    wreg      void 
 13668 ;; Registers used:
 13669 ;;		None
 13670 ;; Tracked objects:
 13671 ;;		On entry : 0/0
 13672 ;;		On exit  : 0/0
 13673 ;;		Unchanged: 0/0
 13674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13679 ;;Total ram usage:        0 bytes
 13680 ;; Hardware stack levels used:    1
 13681 ;; Hardware stack levels required when called:    5
 13682 ;; This function calls:
 13683 ;;		Nothing
 13684 ;; This function is called by:
 13685 ;;		_main
 13686 ;; This function uses a non-reentrant model
 13687 ;;
 13688                           
 13689                           	psect	text65
 13690  00381A                     __ptext65:
 13691                           	opt stack 0
 13692  00381A                     _TMR0_StopTimer:
 13693                           	opt stack 25
 13694                           
 13695                           ;tmr0.c: 104: T0CONbits.TMR0ON = 0;
 13696                           
 13697                           ; BSR set to: 15
 13698                           ;incstack = 0
 13699  00381A  9ED5               	bcf	4053,7,c	;volatile
 13700  00381C  0012               	return		;funcret
 13701  00381E                     __end_of_TMR0_StopTimer:
 13702                           	opt stack 0
 13703                           tblptru	equ	0xFF8
 13704                           tblptrh	equ	0xFF7
 13705                           tblptrl	equ	0xFF6
 13706                           tablat	equ	0xFF5
 13707                           prodh	equ	0xFF4
 13708                           prodl	equ	0xFF3
 13709                           intcon	equ	0xFF2
 13710                           indf0	equ	0xFEF
 13711                           postinc0	equ	0xFEE
 13712                           fsr0h	equ	0xFEA
 13713                           fsr0l	equ	0xFE9
 13714                           wreg	equ	0xFE8
 13715                           indf1	equ	0xFE7
 13716                           postdec1	equ	0xFE5
 13717                           fsr1h	equ	0xFE2
 13718                           fsr1l	equ	0xFE1
 13719                           indf2	equ	0xFDF
 13720                           postinc2	equ	0xFDE
 13721                           postdec2	equ	0xFDD
 13722                           fsr2h	equ	0xFDA
 13723                           fsr2l	equ	0xFD9
 13724                           status	equ	0xFD8
 13725                           
 13726 ;; *************** function _SYSTEM_Initialize *****************
 13727 ;; Defined at:
 13728 ;;		line 111 in file "mcc_generated_files/mcc.c"
 13729 ;; Parameters:    Size  Location     Type
 13730 ;;		None
 13731 ;; Auto vars:     Size  Location     Type
 13732 ;;		None
 13733 ;; Return value:  Size  Location     Type
 13734 ;;                  1    wreg      void 
 13735 ;; Registers used:
 13736 ;;		wreg, status,2, status,0, cstack
 13737 ;; Tracked objects:
 13738 ;;		On entry : 0/0
 13739 ;;		On exit  : 0/0
 13740 ;;		Unchanged: 0/0
 13741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13746 ;;Total ram usage:        0 bytes
 13747 ;; Hardware stack levels used:    1
 13748 ;; Hardware stack levels required when called:    7
 13749 ;; This function calls:
 13750 ;;		_EUSART1_Initialize
 13751 ;;		_INTERRUPT_Initialize
 13752 ;;		_OSCILLATOR_Initialize
 13753 ;;		_PIN_MANAGER_Initialize
 13754 ;;		_TMR0_Initialize
 13755 ;;		_TMR1_Initialize
 13756 ;;		_TMR5_Initialize
 13757 ;; This function is called by:
 13758 ;;		_main
 13759 ;; This function uses a non-reentrant model
 13760 ;;
 13761                           
 13762                           	psect	text66
 13763  003690                     __ptext66:
 13764                           	opt stack 0
 13765  003690                     _SYSTEM_Initialize:
 13766                           	opt stack 23
 13767                           
 13768                           ;mcc.c: 114: INTERRUPT_Initialize();
 13769                           
 13770                           ;incstack = 0
 13771  003690  EC13  F01C         	call	_INTERRUPT_Initialize	;wreg free
 13772                           
 13773                           ;mcc.c: 115: PIN_MANAGER_Initialize();
 13774  003694  EC24  F019         	call	_PIN_MANAGER_Initialize	;wreg free
 13775                           
 13776                           ;mcc.c: 116: OSCILLATOR_Initialize();
 13777  003698  ECCA  F01B         	call	_OSCILLATOR_Initialize	;wreg free
 13778                           
 13779                           ;mcc.c: 117: TMR5_Initialize();
 13780  00369C  ECE4  F01A         	call	_TMR5_Initialize	;wreg free
 13781                           
 13782                           ;mcc.c: 118: TMR1_Initialize();
 13783  0036A0  EC1A  F01B         	call	_TMR1_Initialize	;wreg free
 13784                           
 13785                           ;mcc.c: 119: TMR0_Initialize();
 13786  0036A4  EC0B  F01A         	call	_TMR0_Initialize	;wreg free
 13787                           
 13788                           ;mcc.c: 120: EUSART1_Initialize();
 13789  0036A8  EC27  F01A         	call	_EUSART1_Initialize	;wreg free
 13790  0036AC  0012               	return		;funcret
 13791  0036AE                     __end_of_SYSTEM_Initialize:
 13792                           	opt stack 0
 13793                           tblptru	equ	0xFF8
 13794                           tblptrh	equ	0xFF7
 13795                           tblptrl	equ	0xFF6
 13796                           tablat	equ	0xFF5
 13797                           prodh	equ	0xFF4
 13798                           prodl	equ	0xFF3
 13799                           intcon	equ	0xFF2
 13800                           indf0	equ	0xFEF
 13801                           postinc0	equ	0xFEE
 13802                           fsr0h	equ	0xFEA
 13803                           fsr0l	equ	0xFE9
 13804                           wreg	equ	0xFE8
 13805                           indf1	equ	0xFE7
 13806                           postdec1	equ	0xFE5
 13807                           fsr1h	equ	0xFE2
 13808                           fsr1l	equ	0xFE1
 13809                           indf2	equ	0xFDF
 13810                           postinc2	equ	0xFDE
 13811                           postdec2	equ	0xFDD
 13812                           fsr2h	equ	0xFDA
 13813                           fsr2l	equ	0xFD9
 13814                           status	equ	0xFD8
 13815                           
 13816 ;; *************** function _TMR5_Initialize *****************
 13817 ;; Defined at:
 13818 ;;		line 62 in file "mcc_generated_files/tmr5.c"
 13819 ;; Parameters:    Size  Location     Type
 13820 ;;		None
 13821 ;; Auto vars:     Size  Location     Type
 13822 ;;		None
 13823 ;; Return value:  Size  Location     Type
 13824 ;;                  1    wreg      void 
 13825 ;; Registers used:
 13826 ;;		wreg, status,2, cstack
 13827 ;; Tracked objects:
 13828 ;;		On entry : 0/0
 13829 ;;		On exit  : 0/0
 13830 ;;		Unchanged: 0/0
 13831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13836 ;;Total ram usage:        0 bytes
 13837 ;; Hardware stack levels used:    1
 13838 ;; Hardware stack levels required when called:    6
 13839 ;; This function calls:
 13840 ;;		_TMR5_StartTimer
 13841 ;; This function is called by:
 13842 ;;		_SYSTEM_Initialize
 13843 ;; This function uses a non-reentrant model
 13844 ;;
 13845                           
 13846                           	psect	text67
 13847  0035C8                     __ptext67:
 13848                           	opt stack 0
 13849  0035C8                     _TMR5_Initialize:
 13850                           	opt stack 23
 13851                           
 13852                           ;tmr5.c: 67: T5CON = 0x12;
 13853                           
 13854                           ;incstack = 0
 13855  0035C8  0E12               	movlw	18
 13856  0035CA  010F               	movlb	15	; () banked
 13857  0035CC  6F4E               	movwf	78,b	;volatile
 13858                           
 13859                           ;tmr5.c: 70: T5GCON = 0x00;
 13860  0035CE  0E00               	movlw	0
 13861  0035D0  010F               	movlb	15	; () banked
 13862  0035D2  6F4D               	movwf	77,b	;volatile
 13863                           
 13864                           ; BSR set to: 15
 13865                           ;tmr5.c: 73: TMR5H = 0xFF;
 13866  0035D4  010F               	movlb	15	; () banked
 13867  0035D6  6950               	setf	80,b	;volatile
 13868                           
 13869                           ;tmr5.c: 76: TMR5L = 0xEC;
 13870  0035D8  0EEC               	movlw	236
 13871  0035DA  010F               	movlb	15	; () banked
 13872  0035DC  6F4F               	movwf	79,b	;volatile
 13873                           
 13874                           ; BSR set to: 15
 13875                           ;tmr5.c: 79: timer5ReloadVal=TMR5;
 13876  0035DE  CF4F F0FB          	movff	3919,_timer5ReloadVal	;volatile
 13877  0035E2  CF50 F0FC          	movff	3920,_timer5ReloadVal+1	;volatile
 13878                           
 13879                           ; BSR set to: 15
 13880                           ;tmr5.c: 82: PIR5bits.TMR5IF = 0;
 13881  0035E6  927E               	bcf	3966,1,c	;volatile
 13882                           
 13883                           ; BSR set to: 15
 13884                           ;tmr5.c: 85: TMR5_StartTimer();
 13885  0035E8  EC08  F01C         	call	_TMR5_StartTimer	;wreg free
 13886  0035EC  0012               	return		;funcret
 13887  0035EE                     __end_of_TMR5_Initialize:
 13888                           	opt stack 0
 13889                           tblptru	equ	0xFF8
 13890                           tblptrh	equ	0xFF7
 13891                           tblptrl	equ	0xFF6
 13892                           tablat	equ	0xFF5
 13893                           prodh	equ	0xFF4
 13894                           prodl	equ	0xFF3
 13895                           intcon	equ	0xFF2
 13896                           indf0	equ	0xFEF
 13897                           postinc0	equ	0xFEE
 13898                           fsr0h	equ	0xFEA
 13899                           fsr0l	equ	0xFE9
 13900                           wreg	equ	0xFE8
 13901                           indf1	equ	0xFE7
 13902                           postdec1	equ	0xFE5
 13903                           fsr1h	equ	0xFE2
 13904                           fsr1l	equ	0xFE1
 13905                           indf2	equ	0xFDF
 13906                           postinc2	equ	0xFDE
 13907                           postdec2	equ	0xFDD
 13908                           fsr2h	equ	0xFDA
 13909                           fsr2l	equ	0xFD9
 13910                           status	equ	0xFD8
 13911                           
 13912 ;; *************** function _TMR5_StartTimer *****************
 13913 ;; Defined at:
 13914 ;;		line 88 in file "mcc_generated_files/tmr5.c"
 13915 ;; Parameters:    Size  Location     Type
 13916 ;;		None
 13917 ;; Auto vars:     Size  Location     Type
 13918 ;;		None
 13919 ;; Return value:  Size  Location     Type
 13920 ;;                  1    wreg      void 
 13921 ;; Registers used:
 13922 ;;		None
 13923 ;; Tracked objects:
 13924 ;;		On entry : 0/0
 13925 ;;		On exit  : 0/0
 13926 ;;		Unchanged: 0/0
 13927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13932 ;;Total ram usage:        0 bytes
 13933 ;; Hardware stack levels used:    1
 13934 ;; Hardware stack levels required when called:    5
 13935 ;; This function calls:
 13936 ;;		Nothing
 13937 ;; This function is called by:
 13938 ;;		_TMR5_Initialize
 13939 ;;		__delay_10uS
 13940 ;; This function uses a non-reentrant model
 13941 ;;
 13942                           
 13943                           	psect	text68
 13944  003810                     __ptext68:
 13945                           	opt stack 0
 13946  003810                     _TMR5_StartTimer:
 13947                           	opt stack 23
 13948                           
 13949                           ;tmr5.c: 91: T5CONbits.TMR5ON = 1;
 13950                           
 13951                           ;incstack = 0
 13952  003810  010F               	movlb	15	; () banked
 13953  003812  814E               	bsf	78,0,b	;volatile
 13954                           
 13955                           ; BSR set to: 15
 13956  003814  0012               	return		;funcret
 13957  003816                     __end_of_TMR5_StartTimer:
 13958                           	opt stack 0
 13959                           tblptru	equ	0xFF8
 13960                           tblptrh	equ	0xFF7
 13961                           tblptrl	equ	0xFF6
 13962                           tablat	equ	0xFF5
 13963                           prodh	equ	0xFF4
 13964                           prodl	equ	0xFF3
 13965                           intcon	equ	0xFF2
 13966                           indf0	equ	0xFEF
 13967                           postinc0	equ	0xFEE
 13968                           fsr0h	equ	0xFEA
 13969                           fsr0l	equ	0xFE9
 13970                           wreg	equ	0xFE8
 13971                           indf1	equ	0xFE7
 13972                           postdec1	equ	0xFE5
 13973                           fsr1h	equ	0xFE2
 13974                           fsr1l	equ	0xFE1
 13975                           indf2	equ	0xFDF
 13976                           postinc2	equ	0xFDE
 13977                           postdec2	equ	0xFDD
 13978                           fsr2h	equ	0xFDA
 13979                           fsr2l	equ	0xFD9
 13980                           status	equ	0xFD8
 13981                           
 13982 ;; *************** function _TMR1_Initialize *****************
 13983 ;; Defined at:
 13984 ;;		line 62 in file "mcc_generated_files/tmr1.c"
 13985 ;; Parameters:    Size  Location     Type
 13986 ;;		None
 13987 ;; Auto vars:     Size  Location     Type
 13988 ;;		None
 13989 ;; Return value:  Size  Location     Type
 13990 ;;                  1    wreg      void 
 13991 ;; Registers used:
 13992 ;;		wreg, status,2, cstack
 13993 ;; Tracked objects:
 13994 ;;		On entry : 0/0
 13995 ;;		On exit  : 0/0
 13996 ;;		Unchanged: 0/0
 13997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14002 ;;Total ram usage:        0 bytes
 14003 ;; Hardware stack levels used:    1
 14004 ;; Hardware stack levels required when called:    6
 14005 ;; This function calls:
 14006 ;;		_TMR1_StartTimer
 14007 ;; This function is called by:
 14008 ;;		_SYSTEM_Initialize
 14009 ;; This function uses a non-reentrant model
 14010 ;;
 14011                           
 14012                           	psect	text69
 14013  003634                     __ptext69:
 14014                           	opt stack 0
 14015  003634                     _TMR1_Initialize:
 14016                           	opt stack 23
 14017                           
 14018                           ;tmr1.c: 67: T1CON = 0x32;
 14019                           
 14020                           ; BSR set to: 15
 14021                           ;incstack = 0
 14022  003634  0E32               	movlw	50
 14023  003636  6ECD               	movwf	4045,c	;volatile
 14024                           
 14025                           ;tmr1.c: 70: T1GCON = 0x00;
 14026  003638  0E00               	movlw	0
 14027  00363A  6ECC               	movwf	4044,c	;volatile
 14028                           
 14029                           ;tmr1.c: 73: TMR1H = 0xFE;
 14030  00363C  0EFE               	movlw	254
 14031  00363E  6ECF               	movwf	4047,c	;volatile
 14032                           
 14033                           ;tmr1.c: 76: TMR1L = 0x0C;
 14034  003640  0E0C               	movlw	12
 14035  003642  6ECE               	movwf	4046,c	;volatile
 14036                           
 14037                           ;tmr1.c: 79: timer1ReloadVal=TMR1;
 14038  003644  CFCE F0F9          	movff	4046,_timer1ReloadVal	;volatile
 14039  003648  CFCF F0FA          	movff	4047,_timer1ReloadVal+1	;volatile
 14040                           
 14041                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
 14042  00364C  909E               	bcf	3998,0,c	;volatile
 14043                           
 14044                           ;tmr1.c: 85: TMR1_StartTimer();
 14045  00364E  EC0F  F01C         	call	_TMR1_StartTimer	;wreg free
 14046  003652  0012               	return		;funcret
 14047  003654                     __end_of_TMR1_Initialize:
 14048                           	opt stack 0
 14049                           tblptru	equ	0xFF8
 14050                           tblptrh	equ	0xFF7
 14051                           tblptrl	equ	0xFF6
 14052                           tablat	equ	0xFF5
 14053                           prodh	equ	0xFF4
 14054                           prodl	equ	0xFF3
 14055                           intcon	equ	0xFF2
 14056                           indf0	equ	0xFEF
 14057                           postinc0	equ	0xFEE
 14058                           fsr0h	equ	0xFEA
 14059                           fsr0l	equ	0xFE9
 14060                           wreg	equ	0xFE8
 14061                           indf1	equ	0xFE7
 14062                           postdec1	equ	0xFE5
 14063                           fsr1h	equ	0xFE2
 14064                           fsr1l	equ	0xFE1
 14065                           indf2	equ	0xFDF
 14066                           postinc2	equ	0xFDE
 14067                           postdec2	equ	0xFDD
 14068                           fsr2h	equ	0xFDA
 14069                           fsr2l	equ	0xFD9
 14070                           status	equ	0xFD8
 14071                           
 14072 ;; *************** function _TMR1_StartTimer *****************
 14073 ;; Defined at:
 14074 ;;		line 88 in file "mcc_generated_files/tmr1.c"
 14075 ;; Parameters:    Size  Location     Type
 14076 ;;		None
 14077 ;; Auto vars:     Size  Location     Type
 14078 ;;		None
 14079 ;; Return value:  Size  Location     Type
 14080 ;;                  1    wreg      void 
 14081 ;; Registers used:
 14082 ;;		None
 14083 ;; Tracked objects:
 14084 ;;		On entry : 0/0
 14085 ;;		On exit  : 0/0
 14086 ;;		Unchanged: 0/0
 14087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14092 ;;Total ram usage:        0 bytes
 14093 ;; Hardware stack levels used:    1
 14094 ;; Hardware stack levels required when called:    5
 14095 ;; This function calls:
 14096 ;;		Nothing
 14097 ;; This function is called by:
 14098 ;;		_TMR1_Initialize
 14099 ;;		__delay_MS
 14100 ;; This function uses a non-reentrant model
 14101 ;;
 14102                           
 14103                           	psect	text70
 14104  00381E                     __ptext70:
 14105                           	opt stack 0
 14106  00381E                     _TMR1_StartTimer:
 14107                           	opt stack 20
 14108                           
 14109                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
 14110                           
 14111                           ;incstack = 0
 14112  00381E  80CD               	bsf	4045,0,c	;volatile
 14113  003820  0012               	return		;funcret
 14114  003822                     __end_of_TMR1_StartTimer:
 14115                           	opt stack 0
 14116                           tblptru	equ	0xFF8
 14117                           tblptrh	equ	0xFF7
 14118                           tblptrl	equ	0xFF6
 14119                           tablat	equ	0xFF5
 14120                           prodh	equ	0xFF4
 14121                           prodl	equ	0xFF3
 14122                           intcon	equ	0xFF2
 14123                           indf0	equ	0xFEF
 14124                           postinc0	equ	0xFEE
 14125                           fsr0h	equ	0xFEA
 14126                           fsr0l	equ	0xFE9
 14127                           wreg	equ	0xFE8
 14128                           indf1	equ	0xFE7
 14129                           postdec1	equ	0xFE5
 14130                           fsr1h	equ	0xFE2
 14131                           fsr1l	equ	0xFE1
 14132                           indf2	equ	0xFDF
 14133                           postinc2	equ	0xFDE
 14134                           postdec2	equ	0xFDD
 14135                           fsr2h	equ	0xFDA
 14136                           fsr2l	equ	0xFD9
 14137                           status	equ	0xFD8
 14138                           
 14139 ;; *************** function _TMR0_Initialize *****************
 14140 ;; Defined at:
 14141 ;;		line 66 in file "mcc_generated_files/tmr0.c"
 14142 ;; Parameters:    Size  Location     Type
 14143 ;;		None
 14144 ;; Auto vars:     Size  Location     Type
 14145 ;;		None
 14146 ;; Return value:  Size  Location     Type
 14147 ;;                  1    wreg      void 
 14148 ;; Registers used:
 14149 ;;		wreg, status,2, status,0, cstack
 14150 ;; Tracked objects:
 14151 ;;		On entry : 0/0
 14152 ;;		On exit  : 0/0
 14153 ;;		Unchanged: 0/0
 14154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14157 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14158 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14159 ;;Total ram usage:        2 bytes
 14160 ;; Hardware stack levels used:    1
 14161 ;; Hardware stack levels required when called:    6
 14162 ;; This function calls:
 14163 ;;		_TMR0_SetInterruptHandler
 14164 ;;		_TMR0_StartTimer
 14165 ;; This function is called by:
 14166 ;;		_SYSTEM_Initialize
 14167 ;; This function uses a non-reentrant model
 14168 ;;
 14169                           
 14170                           	psect	text71
 14171  003416                     __ptext71:
 14172                           	opt stack 0
 14173  003416                     _TMR0_Initialize:
 14174                           	opt stack 23
 14175                           
 14176                           ;tmr0.c: 71: T0CON = 0x17;
 14177                           
 14178                           ;incstack = 0
 14179  003416  0E17               	movlw	23
 14180  003418  6ED5               	movwf	4053,c	;volatile
 14181                           
 14182                           ;tmr0.c: 74: TMR0H = 0xC2;
 14183  00341A  0EC2               	movlw	194
 14184  00341C  6ED7               	movwf	4055,c	;volatile
 14185                           
 14186                           ;tmr0.c: 77: TMR0L = 0xF6;
 14187  00341E  0EF6               	movlw	246
 14188  003420  6ED6               	movwf	4054,c	;volatile
 14189                           
 14190                           ;tmr0.c: 80: timer0ReloadVal = (TMR0H << 8) | TMR0L;
 14191  003422  50D6               	movf	4054,w,c	;volatile
 14192  003424  CFD7 F012          	movff	4055,??_TMR0_Initialize	;volatile
 14193  003428  6A13               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 14194  00342A  C012  F013         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 14195  00342E  6A12               	clrf	??_TMR0_Initialize,c
 14196  003430  1012               	iorwf	??_TMR0_Initialize,w,c
 14197  003432  6E4E               	movwf	_timer0ReloadVal,c	;volatile
 14198  003434  5013               	movf	??_TMR0_Initialize+1,w,c
 14199  003436  6E4F               	movwf	_timer0ReloadVal+1,c	;volatile
 14200                           
 14201                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
 14202  003438  94F2               	bcf	intcon,2,c	;volatile
 14203                           
 14204                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
 14205  00343A  8AF2               	bsf	intcon,5,c	;volatile
 14206                           
 14207                           ;tmr0.c: 89: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 14208  00343C  0E2A               	movlw	low _TMR0_DefaultInterruptHandler
 14209  00343E  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
 14210  003440  0E38               	movlw	high _TMR0_DefaultInterruptHandler
 14211  003442  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
 14212  003444  ECF9  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
 14213                           
 14214                           ;tmr0.c: 92: TMR0_StartTimer();
 14215  003448  EC11  F01C         	call	_TMR0_StartTimer	;wreg free
 14216  00344C  0012               	return		;funcret
 14217  00344E                     __end_of_TMR0_Initialize:
 14218                           	opt stack 0
 14219                           tblptru	equ	0xFF8
 14220                           tblptrh	equ	0xFF7
 14221                           tblptrl	equ	0xFF6
 14222                           tablat	equ	0xFF5
 14223                           prodh	equ	0xFF4
 14224                           prodl	equ	0xFF3
 14225                           intcon	equ	0xFF2
 14226                           indf0	equ	0xFEF
 14227                           postinc0	equ	0xFEE
 14228                           fsr0h	equ	0xFEA
 14229                           fsr0l	equ	0xFE9
 14230                           wreg	equ	0xFE8
 14231                           indf1	equ	0xFE7
 14232                           postdec1	equ	0xFE5
 14233                           fsr1h	equ	0xFE2
 14234                           fsr1l	equ	0xFE1
 14235                           indf2	equ	0xFDF
 14236                           postinc2	equ	0xFDE
 14237                           postdec2	equ	0xFDD
 14238                           fsr2h	equ	0xFDA
 14239                           fsr2l	equ	0xFD9
 14240                           status	equ	0xFD8
 14241                           
 14242 ;; *************** function _TMR0_StartTimer *****************
 14243 ;; Defined at:
 14244 ;;		line 95 in file "mcc_generated_files/tmr0.c"
 14245 ;; Parameters:    Size  Location     Type
 14246 ;;		None
 14247 ;; Auto vars:     Size  Location     Type
 14248 ;;		None
 14249 ;; Return value:  Size  Location     Type
 14250 ;;                  1    wreg      void 
 14251 ;; Registers used:
 14252 ;;		None
 14253 ;; Tracked objects:
 14254 ;;		On entry : 0/0
 14255 ;;		On exit  : 0/0
 14256 ;;		Unchanged: 0/0
 14257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14262 ;;Total ram usage:        0 bytes
 14263 ;; Hardware stack levels used:    1
 14264 ;; Hardware stack levels required when called:    5
 14265 ;; This function calls:
 14266 ;;		Nothing
 14267 ;; This function is called by:
 14268 ;;		_TMR0_Initialize
 14269 ;;		_main
 14270 ;; This function uses a non-reentrant model
 14271 ;;
 14272                           
 14273                           	psect	text72
 14274  003822                     __ptext72:
 14275                           	opt stack 0
 14276  003822                     _TMR0_StartTimer:
 14277                           	opt stack 25
 14278                           
 14279                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
 14280                           
 14281                           ;incstack = 0
 14282  003822  8ED5               	bsf	4053,7,c	;volatile
 14283  003824  0012               	return		;funcret
 14284  003826                     __end_of_TMR0_StartTimer:
 14285                           	opt stack 0
 14286                           tblptru	equ	0xFF8
 14287                           tblptrh	equ	0xFF7
 14288                           tblptrl	equ	0xFF6
 14289                           tablat	equ	0xFF5
 14290                           prodh	equ	0xFF4
 14291                           prodl	equ	0xFF3
 14292                           intcon	equ	0xFF2
 14293                           indf0	equ	0xFEF
 14294                           postinc0	equ	0xFEE
 14295                           fsr0h	equ	0xFEA
 14296                           fsr0l	equ	0xFE9
 14297                           wreg	equ	0xFE8
 14298                           indf1	equ	0xFE7
 14299                           postdec1	equ	0xFE5
 14300                           fsr1h	equ	0xFE2
 14301                           fsr1l	equ	0xFE1
 14302                           indf2	equ	0xFDF
 14303                           postinc2	equ	0xFDE
 14304                           postdec2	equ	0xFDD
 14305                           fsr2h	equ	0xFDA
 14306                           fsr2l	equ	0xFD9
 14307                           status	equ	0xFD8
 14308                           
 14309 ;; *************** function _TMR0_SetInterruptHandler *****************
 14310 ;; Defined at:
 14311 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 14312 ;; Parameters:    Size  Location     Type
 14313 ;;  InterruptHan    2   15[COMRAM] PTR void 
 14314 ;;		 -> make_array(1), TMR0_DefaultInterruptHandler(1), 
 14315 ;; Auto vars:     Size  Location     Type
 14316 ;;		None
 14317 ;; Return value:  Size  Location     Type
 14318 ;;                  1    wreg      void 
 14319 ;; Registers used:
 14320 ;;		wreg, status,2, status,0
 14321 ;; Tracked objects:
 14322 ;;		On entry : 0/0
 14323 ;;		On exit  : 0/0
 14324 ;;		Unchanged: 0/0
 14325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14329 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14330 ;;Total ram usage:        2 bytes
 14331 ;; Hardware stack levels used:    1
 14332 ;; Hardware stack levels required when called:    5
 14333 ;; This function calls:
 14334 ;;		Nothing
 14335 ;; This function is called by:
 14336 ;;		_TMR0_Initialize
 14337 ;;		_main
 14338 ;; This function uses a non-reentrant model
 14339 ;;
 14340                           
 14341                           	psect	text73
 14342  0037F2                     __ptext73:
 14343                           	opt stack 0
 14344  0037F2                     _TMR0_SetInterruptHandler:
 14345                           	opt stack 25
 14346                           
 14347                           ;tmr0.c: 163: TMR0_InterruptHandler = InterruptHandler;
 14348                           
 14349                           ;incstack = 0
 14350  0037F2  C010  F0F7         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
 14351  0037F6  C011  F0F8         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
 14352  0037FA  0012               	return		;funcret
 14353  0037FC                     __end_of_TMR0_SetInterruptHandler:
 14354                           	opt stack 0
 14355                           tblptru	equ	0xFF8
 14356                           tblptrh	equ	0xFF7
 14357                           tblptrl	equ	0xFF6
 14358                           tablat	equ	0xFF5
 14359                           prodh	equ	0xFF4
 14360                           prodl	equ	0xFF3
 14361                           intcon	equ	0xFF2
 14362                           indf0	equ	0xFEF
 14363                           postinc0	equ	0xFEE
 14364                           fsr0h	equ	0xFEA
 14365                           fsr0l	equ	0xFE9
 14366                           wreg	equ	0xFE8
 14367                           indf1	equ	0xFE7
 14368                           postdec1	equ	0xFE5
 14369                           fsr1h	equ	0xFE2
 14370                           fsr1l	equ	0xFE1
 14371                           indf2	equ	0xFDF
 14372                           postinc2	equ	0xFDE
 14373                           postdec2	equ	0xFDD
 14374                           fsr2h	equ	0xFDA
 14375                           fsr2l	equ	0xFD9
 14376                           status	equ	0xFD8
 14377                           
 14378 ;; *************** function _PIN_MANAGER_Initialize *****************
 14379 ;; Defined at:
 14380 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14381 ;; Parameters:    Size  Location     Type
 14382 ;;		None
 14383 ;; Auto vars:     Size  Location     Type
 14384 ;;		None
 14385 ;; Return value:  Size  Location     Type
 14386 ;;                  1    wreg      void 
 14387 ;; Registers used:
 14388 ;;		wreg, status,2
 14389 ;; Tracked objects:
 14390 ;;		On entry : 0/0
 14391 ;;		On exit  : 0/0
 14392 ;;		Unchanged: 0/0
 14393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14398 ;;Total ram usage:        0 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; Hardware stack levels required when called:    5
 14401 ;; This function calls:
 14402 ;;		Nothing
 14403 ;; This function is called by:
 14404 ;;		_SYSTEM_Initialize
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           	psect	text74
 14409  003248                     __ptext74:
 14410                           	opt stack 0
 14411  003248                     _PIN_MANAGER_Initialize:
 14412                           	opt stack 24
 14413                           
 14414                           ;pin_manager.c: 56: LATE = 0x00;
 14415                           
 14416                           ;incstack = 0
 14417  003248  0E00               	movlw	0
 14418  00324A  6E8D               	movwf	3981,c	;volatile
 14419                           
 14420                           ;pin_manager.c: 57: LATD = 0x00;
 14421  00324C  0E00               	movlw	0
 14422  00324E  6E8C               	movwf	3980,c	;volatile
 14423                           
 14424                           ;pin_manager.c: 58: LATA = 0x00;
 14425  003250  0E00               	movlw	0
 14426  003252  6E89               	movwf	3977,c	;volatile
 14427                           
 14428                           ;pin_manager.c: 59: LATB = 0x00;
 14429  003254  0E00               	movlw	0
 14430  003256  6E8A               	movwf	3978,c	;volatile
 14431                           
 14432                           ;pin_manager.c: 60: LATC = 0x00;
 14433  003258  0E00               	movlw	0
 14434  00325A  6E8B               	movwf	3979,c	;volatile
 14435                           
 14436                           ;pin_manager.c: 65: TRISE = 0x03;
 14437  00325C  0E03               	movlw	3
 14438  00325E  6E96               	movwf	3990,c	;volatile
 14439                           
 14440                           ;pin_manager.c: 66: TRISA = 0xF8;
 14441  003260  0EF8               	movlw	248
 14442  003262  6E92               	movwf	3986,c	;volatile
 14443                           
 14444                           ;pin_manager.c: 67: TRISB = 0xFF;
 14445  003264  6893               	setf	3987,c	;volatile
 14446                           
 14447                           ;pin_manager.c: 68: TRISC = 0xBF;
 14448  003266  0EBF               	movlw	191
 14449  003268  6E94               	movwf	3988,c	;volatile
 14450                           
 14451                           ;pin_manager.c: 69: TRISD = 0x00;
 14452  00326A  0E00               	movlw	0
 14453  00326C  6E95               	movwf	3989,c	;volatile
 14454                           
 14455                           ;pin_manager.c: 74: ANSELC = 0x3C;
 14456  00326E  0E3C               	movlw	60
 14457  003270  010F               	movlb	15	; () banked
 14458  003272  6F3A               	movwf	58,b	;volatile
 14459                           
 14460                           ;pin_manager.c: 75: ANSELB = 0x3F;
 14461  003274  0E3F               	movlw	63
 14462  003276  010F               	movlb	15	; () banked
 14463  003278  6F39               	movwf	57,b	;volatile
 14464                           
 14465                           ;pin_manager.c: 76: ANSELD = 0x00;
 14466  00327A  0E00               	movlw	0
 14467  00327C  010F               	movlb	15	; () banked
 14468  00327E  6F3B               	movwf	59,b	;volatile
 14469                           
 14470                           ;pin_manager.c: 77: ANSELE = 0x03;
 14471  003280  0E03               	movlw	3
 14472  003282  010F               	movlb	15	; () banked
 14473  003284  6F3C               	movwf	60,b	;volatile
 14474                           
 14475                           ;pin_manager.c: 78: ANSELA = 0x28;
 14476  003286  0E28               	movlw	40
 14477  003288  010F               	movlb	15	; () banked
 14478  00328A  6F38               	movwf	56,b	;volatile
 14479                           
 14480                           ; BSR set to: 15
 14481                           ;pin_manager.c: 83: WPUB = 0xFF;
 14482  00328C  6861               	setf	3937,c	;volatile
 14483                           
 14484                           ; BSR set to: 15
 14485                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
 14486  00328E  9EF1               	bcf	intcon2,7,c	;volatile
 14487                           
 14488                           ; BSR set to: 15
 14489  003290  0012               	return		;funcret
 14490  003292                     __end_of_PIN_MANAGER_Initialize:
 14491                           	opt stack 0
 14492                           tblptru	equ	0xFF8
 14493                           tblptrh	equ	0xFF7
 14494                           tblptrl	equ	0xFF6
 14495                           tablat	equ	0xFF5
 14496                           prodh	equ	0xFF4
 14497                           prodl	equ	0xFF3
 14498                           intcon	equ	0xFF2
 14499                           intcon2	equ	0xFF1
 14500                           indf0	equ	0xFEF
 14501                           postinc0	equ	0xFEE
 14502                           fsr0h	equ	0xFEA
 14503                           fsr0l	equ	0xFE9
 14504                           wreg	equ	0xFE8
 14505                           indf1	equ	0xFE7
 14506                           postdec1	equ	0xFE5
 14507                           fsr1h	equ	0xFE2
 14508                           fsr1l	equ	0xFE1
 14509                           indf2	equ	0xFDF
 14510                           postinc2	equ	0xFDE
 14511                           postdec2	equ	0xFDD
 14512                           fsr2h	equ	0xFDA
 14513                           fsr2l	equ	0xFD9
 14514                           status	equ	0xFD8
 14515                           
 14516 ;; *************** function _OSCILLATOR_Initialize *****************
 14517 ;; Defined at:
 14518 ;;		line 123 in file "mcc_generated_files/mcc.c"
 14519 ;; Parameters:    Size  Location     Type
 14520 ;;		None
 14521 ;; Auto vars:     Size  Location     Type
 14522 ;;		None
 14523 ;; Return value:  Size  Location     Type
 14524 ;;                  1    wreg      void 
 14525 ;; Registers used:
 14526 ;;		wreg, status,2
 14527 ;; Tracked objects:
 14528 ;;		On entry : 0/0
 14529 ;;		On exit  : 0/0
 14530 ;;		Unchanged: 0/0
 14531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14536 ;;Total ram usage:        0 bytes
 14537 ;; Hardware stack levels used:    1
 14538 ;; Hardware stack levels required when called:    5
 14539 ;; This function calls:
 14540 ;;		Nothing
 14541 ;; This function is called by:
 14542 ;;		_SYSTEM_Initialize
 14543 ;; This function uses a non-reentrant model
 14544 ;;
 14545                           
 14546                           	psect	text75
 14547  003794                     __ptext75:
 14548                           	opt stack 0
 14549  003794                     _OSCILLATOR_Initialize:
 14550                           	opt stack 24
 14551                           
 14552                           ;mcc.c: 126: OSCCON = 0x70;
 14553                           
 14554                           ; BSR set to: 15
 14555                           ;incstack = 0
 14556  003794  0E70               	movlw	112
 14557  003796  6ED3               	movwf	4051,c	;volatile
 14558                           
 14559                           ;mcc.c: 128: OSCCON2 = 0x04;
 14560  003798  0E04               	movlw	4
 14561  00379A  6ED2               	movwf	4050,c	;volatile
 14562                           
 14563                           ;mcc.c: 130: OSCTUNE = 0x80;
 14564  00379C  0E80               	movlw	128
 14565  00379E  6E9B               	movwf	3995,c	;volatile
 14566  0037A0  0012               	return		;funcret
 14567  0037A2                     __end_of_OSCILLATOR_Initialize:
 14568                           	opt stack 0
 14569                           tblptru	equ	0xFF8
 14570                           tblptrh	equ	0xFF7
 14571                           tblptrl	equ	0xFF6
 14572                           tablat	equ	0xFF5
 14573                           prodh	equ	0xFF4
 14574                           prodl	equ	0xFF3
 14575                           intcon	equ	0xFF2
 14576                           intcon2	equ	0xFF1
 14577                           indf0	equ	0xFEF
 14578                           postinc0	equ	0xFEE
 14579                           fsr0h	equ	0xFEA
 14580                           fsr0l	equ	0xFE9
 14581                           wreg	equ	0xFE8
 14582                           indf1	equ	0xFE7
 14583                           postdec1	equ	0xFE5
 14584                           fsr1h	equ	0xFE2
 14585                           fsr1l	equ	0xFE1
 14586                           indf2	equ	0xFDF
 14587                           postinc2	equ	0xFDE
 14588                           postdec2	equ	0xFDD
 14589                           fsr2h	equ	0xFDA
 14590                           fsr2l	equ	0xFD9
 14591                           status	equ	0xFD8
 14592                           
 14593 ;; *************** function _INTERRUPT_Initialize *****************
 14594 ;; Defined at:
 14595 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 14596 ;; Parameters:    Size  Location     Type
 14597 ;;		None
 14598 ;; Auto vars:     Size  Location     Type
 14599 ;;		None
 14600 ;; Return value:  Size  Location     Type
 14601 ;;                  1    wreg      void 
 14602 ;; Registers used:
 14603 ;;		None
 14604 ;; Tracked objects:
 14605 ;;		On entry : 0/0
 14606 ;;		On exit  : 0/0
 14607 ;;		Unchanged: 0/0
 14608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14613 ;;Total ram usage:        0 bytes
 14614 ;; Hardware stack levels used:    1
 14615 ;; Hardware stack levels required when called:    5
 14616 ;; This function calls:
 14617 ;;		Nothing
 14618 ;; This function is called by:
 14619 ;;		_SYSTEM_Initialize
 14620 ;; This function uses a non-reentrant model
 14621 ;;
 14622                           
 14623                           	psect	text76
 14624  003826                     __ptext76:
 14625                           	opt stack 0
 14626  003826                     _INTERRUPT_Initialize:
 14627                           	opt stack 24
 14628                           
 14629                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
 14630                           
 14631                           ;incstack = 0
 14632  003826  9ED0               	bcf	4048,7,c	;volatile
 14633  003828  0012               	return		;funcret
 14634  00382A                     __end_of_INTERRUPT_Initialize:
 14635                           	opt stack 0
 14636                           tblptru	equ	0xFF8
 14637                           tblptrh	equ	0xFF7
 14638                           tblptrl	equ	0xFF6
 14639                           tablat	equ	0xFF5
 14640                           prodh	equ	0xFF4
 14641                           prodl	equ	0xFF3
 14642                           intcon	equ	0xFF2
 14643                           intcon2	equ	0xFF1
 14644                           indf0	equ	0xFEF
 14645                           postinc0	equ	0xFEE
 14646                           fsr0h	equ	0xFEA
 14647                           fsr0l	equ	0xFE9
 14648                           wreg	equ	0xFE8
 14649                           indf1	equ	0xFE7
 14650                           postdec1	equ	0xFE5
 14651                           fsr1h	equ	0xFE2
 14652                           fsr1l	equ	0xFE1
 14653                           indf2	equ	0xFDF
 14654                           postinc2	equ	0xFDE
 14655                           postdec2	equ	0xFDD
 14656                           fsr2h	equ	0xFDA
 14657                           fsr2l	equ	0xFD9
 14658                           status	equ	0xFD8
 14659                           
 14660 ;; *************** function _EUSART1_Initialize *****************
 14661 ;; Defined at:
 14662 ;;		line 75 in file "mcc_generated_files/eusart1.c"
 14663 ;; Parameters:    Size  Location     Type
 14664 ;;		None
 14665 ;; Auto vars:     Size  Location     Type
 14666 ;;		None
 14667 ;; Return value:  Size  Location     Type
 14668 ;;                  1    wreg      void 
 14669 ;; Registers used:
 14670 ;;		wreg, status,2
 14671 ;; Tracked objects:
 14672 ;;		On entry : 0/0
 14673 ;;		On exit  : 0/0
 14674 ;;		Unchanged: 0/0
 14675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14680 ;;Total ram usage:        0 bytes
 14681 ;; Hardware stack levels used:    1
 14682 ;; Hardware stack levels required when called:    5
 14683 ;; This function calls:
 14684 ;;		Nothing
 14685 ;; This function is called by:
 14686 ;;		_SYSTEM_Initialize
 14687 ;; This function uses a non-reentrant model
 14688 ;;
 14689                           
 14690                           	psect	text77
 14691  00344E                     __ptext77:
 14692                           	opt stack 0
 14693  00344E                     _EUSART1_Initialize:
 14694                           	opt stack 24
 14695                           
 14696                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
 14697                           
 14698                           ;incstack = 0
 14699  00344E  9A9D               	bcf	3997,5,c	;volatile
 14700                           
 14701                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
 14702  003450  989D               	bcf	3997,4,c	;volatile
 14703                           
 14704                           ;eusart1.c: 84: BAUDCON1 = 0x08;
 14705  003452  0E08               	movlw	8
 14706  003454  6EB8               	movwf	4024,c	;volatile
 14707                           
 14708                           ;eusart1.c: 87: RCSTA1 = 0x90;
 14709  003456  0E90               	movlw	144
 14710  003458  6EAB               	movwf	4011,c	;volatile
 14711                           
 14712                           ;eusart1.c: 90: TXSTA1 = 0x24;
 14713  00345A  0E24               	movlw	36
 14714  00345C  6EAC               	movwf	4012,c	;volatile
 14715                           
 14716                           ;eusart1.c: 93: SPBRG1 = 0xA0;
 14717  00345E  0EA0               	movlw	160
 14718  003460  6EAF               	movwf	4015,c	;volatile
 14719                           
 14720                           ;eusart1.c: 96: SPBRGH1 = 0x01;
 14721  003462  0E01               	movlw	1
 14722  003464  6EB0               	movwf	4016,c	;volatile
 14723                           
 14724                           ;eusart1.c: 100: eusart1TxHead = 0;
 14725  003466  0E00               	movlw	0
 14726  003468  6E47               	movwf	_eusart1TxHead,c	;volatile
 14727                           
 14728                           ;eusart1.c: 101: eusart1TxTail = 0;
 14729  00346A  0E00               	movlw	0
 14730  00346C  6E48               	movwf	_eusart1TxTail,c	;volatile
 14731                           
 14732                           ;eusart1.c: 102: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 14733  00346E  0E08               	movlw	8
 14734  003470  0100               	movlb	0	; () banked
 14735  003472  6FFD               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
 14736                           
 14737                           ;eusart1.c: 104: eusart1RxHead = 0;
 14738  003474  0E00               	movlw	0
 14739  003476  6E45               	movwf	_eusart1RxHead,c	;volatile
 14740                           
 14741                           ;eusart1.c: 105: eusart1RxTail = 0;
 14742  003478  0E00               	movlw	0
 14743  00347A  6E46               	movwf	_eusart1RxTail,c	;volatile
 14744                           
 14745                           ;eusart1.c: 106: eusart1RxCount = 0;
 14746  00347C  0E00               	movlw	0
 14747  00347E  6E44               	movwf	_eusart1RxCount,c	;volatile
 14748                           
 14749                           ; BSR set to: 0
 14750                           ;eusart1.c: 109: PIE1bits.RC1IE = 1;
 14751  003480  8A9D               	bsf	3997,5,c	;volatile
 14752                           
 14753                           ; BSR set to: 0
 14754  003482  0012               	return		;funcret
 14755  003484                     __end_of_EUSART1_Initialize:
 14756                           	opt stack 0
 14757                           tblptru	equ	0xFF8
 14758                           tblptrh	equ	0xFF7
 14759                           tblptrl	equ	0xFF6
 14760                           tablat	equ	0xFF5
 14761                           prodh	equ	0xFF4
 14762                           prodl	equ	0xFF3
 14763                           intcon	equ	0xFF2
 14764                           intcon2	equ	0xFF1
 14765                           indf0	equ	0xFEF
 14766                           postinc0	equ	0xFEE
 14767                           fsr0h	equ	0xFEA
 14768                           fsr0l	equ	0xFE9
 14769                           wreg	equ	0xFE8
 14770                           indf1	equ	0xFE7
 14771                           postdec1	equ	0xFE5
 14772                           fsr1h	equ	0xFE2
 14773                           fsr1l	equ	0xFE1
 14774                           indf2	equ	0xFDF
 14775                           postinc2	equ	0xFDE
 14776                           postdec2	equ	0xFDD
 14777                           fsr2h	equ	0xFDA
 14778                           fsr2l	equ	0xFD9
 14779                           status	equ	0xFD8
 14780                           
 14781 ;; *************** function _INTERRUPT_InterruptManager *****************
 14782 ;; Defined at:
 14783 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 14784 ;; Parameters:    Size  Location     Type
 14785 ;;		None
 14786 ;; Auto vars:     Size  Location     Type
 14787 ;;		None
 14788 ;; Return value:  Size  Location     Type
 14789 ;;                  1    wreg      void 
 14790 ;; Registers used:
 14791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 14792 ;; Tracked objects:
 14793 ;;		On entry : 0/0
 14794 ;;		On exit  : 0/0
 14795 ;;		Unchanged: 0/0
 14796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14799 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14800 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14801 ;;Total ram usage:       14 bytes
 14802 ;; Hardware stack levels used:    1
 14803 ;; Hardware stack levels required when called:    4
 14804 ;; This function calls:
 14805 ;;		_EUSART1_Receive_ISR
 14806 ;;		_EUSART1_Transmit_ISR
 14807 ;;		_TMR0_ISR
 14808 ;; This function is called by:
 14809 ;;		Interrupt level 2
 14810 ;; This function uses a non-reentrant model
 14811 ;;
 14812                           
 14813                           	psect	intcode
 14814  000008                     __pintcode:
 14815                           	opt stack 0
 14816  000008                     _INTERRUPT_InterruptManager:
 14817                           	opt stack 17
 14818                           
 14819                           ; BSR set to: 0
 14820                           ;incstack = 0
 14821  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14822  00000A  CFFA F002          	movff	pclath,??_INTERRUPT_InterruptManager
 14823  00000E  CFFB F003          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 14824  000012  CFE9 F004          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 14825  000016  CFEA F005          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 14826  00001A  CFE1 F006          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 14827  00001E  CFE2 F007          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 14828  000022  CFD9 F008          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 14829  000026  CFDA F009          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 14830  00002A  CFF3 F00A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 14831  00002E  CFF4 F00B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 14832  000032  CFF6 F00C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 14833  000036  CFF7 F00D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 14834  00003A  CFF8 F00E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 14835  00003E  CFF5 F00F          	movff	tablat,??_INTERRUPT_InterruptManager+13
 14836                           
 14837                           ;interrupt_manager.c: 60: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 14838  000042  BAF2               	btfsc	intcon,5,c	;volatile
 14839  000044  A4F2               	btfss	intcon,2,c	;volatile
 14840  000046  D003               	goto	i2l60
 14841                           
 14842                           ;interrupt_manager.c: 61: {
 14843                           ;interrupt_manager.c: 62: TMR0_ISR();
 14844  000048  EC9F  F01B         	call	_TMR0_ISR	;wreg free
 14845                           
 14846                           ;interrupt_manager.c: 63: }
 14847  00004C  D00E               	goto	i2l66
 14848  00004E                     i2l60:
 14849                           
 14850                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 14851  00004E  BCF2               	btfsc	intcon,6,c	;volatile
 14852  000050  A89D               	btfss	3997,4,c	;volatile
 14853  000052  D005               	goto	i2l62
 14854  000054  A89E               	btfss	3998,4,c	;volatile
 14855  000056  D003               	goto	i2l62
 14856                           
 14857                           ;interrupt_manager.c: 65: {
 14858                           ;interrupt_manager.c: 66: EUSART1_Transmit_ISR();
 14859  000058  EC75  F01A         	call	_EUSART1_Transmit_ISR	;wreg free
 14860                           
 14861                           ;interrupt_manager.c: 67: }
 14862  00005C  D006               	goto	i2l66
 14863  00005E                     i2l62:
 14864                           
 14865                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 14866  00005E  BCF2               	btfsc	intcon,6,c	;volatile
 14867  000060  AA9D               	btfss	3997,5,c	;volatile
 14868  000062  D003               	goto	i2l66
 14869  000064  BA9E               	btfsc	3998,5,c	;volatile
 14870                           
 14871                           ;interrupt_manager.c: 69: {
 14872                           ;interrupt_manager.c: 70: EUSART1_Receive_ISR();
 14873  000066  ECBB  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 14874  00006A                     i2l66:
 14875  00006A  C00F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 14876  00006E  C00E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 14877  000072  C00D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 14878  000076  C00C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 14879  00007A  C00B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 14880  00007E  C00A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 14881  000082  C009  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 14882  000086  C008  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 14883  00008A  C007  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 14884  00008E  C006  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 14885  000092  C005  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 14886  000096  C004  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 14887  00009A  C003  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 14888  00009E  C002  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 14889  0000A2  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14890  0000A4  0011               	retfie		f
 14891  0000A6                     __end_of_INTERRUPT_InterruptManager:
 14892                           	opt stack 0
 14893                           pclatu	equ	0xFFB
 14894                           pclath	equ	0xFFA
 14895                           tblptru	equ	0xFF8
 14896                           tblptrh	equ	0xFF7
 14897                           tblptrl	equ	0xFF6
 14898                           tablat	equ	0xFF5
 14899                           prodh	equ	0xFF4
 14900                           prodl	equ	0xFF3
 14901                           intcon	equ	0xFF2
 14902                           intcon2	equ	0xFF1
 14903                           indf0	equ	0xFEF
 14904                           postinc0	equ	0xFEE
 14905                           fsr0h	equ	0xFEA
 14906                           fsr0l	equ	0xFE9
 14907                           wreg	equ	0xFE8
 14908                           indf1	equ	0xFE7
 14909                           postdec1	equ	0xFE5
 14910                           fsr1h	equ	0xFE2
 14911                           fsr1l	equ	0xFE1
 14912                           indf2	equ	0xFDF
 14913                           postinc2	equ	0xFDE
 14914                           postdec2	equ	0xFDD
 14915                           fsr2h	equ	0xFDA
 14916                           fsr2l	equ	0xFD9
 14917                           status	equ	0xFD8
 14918                           
 14919 ;; *************** function _TMR0_ISR *****************
 14920 ;; Defined at:
 14921 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 14922 ;; Parameters:    Size  Location     Type
 14923 ;;		None
 14924 ;; Auto vars:     Size  Location     Type
 14925 ;;		None
 14926 ;; Return value:  Size  Location     Type
 14927 ;;                  1    wreg      void 
 14928 ;; Registers used:
 14929 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 14930 ;; Tracked objects:
 14931 ;;		On entry : 0/0
 14932 ;;		On exit  : 0/0
 14933 ;;		Unchanged: 0/0
 14934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14939 ;;Total ram usage:        0 bytes
 14940 ;; Hardware stack levels used:    1
 14941 ;; Hardware stack levels required when called:    3
 14942 ;; This function calls:
 14943 ;;		_TMR0_CallBack
 14944 ;; This function is called by:
 14945 ;;		_INTERRUPT_InterruptManager
 14946 ;; This function uses a non-reentrant model
 14947 ;;
 14948                           
 14949                           	psect	text79
 14950  00373E                     __ptext79:
 14951                           	opt stack 0
 14952  00373E                     _TMR0_ISR:
 14953                           	opt stack 17
 14954                           
 14955                           ;tmr0.c: 138: INTCONbits.TMR0IF = 0;
 14956                           
 14957                           ;incstack = 0
 14958  00373E  94F2               	bcf	intcon,2,c	;volatile
 14959                           
 14960                           ;tmr0.c: 142: TMR0H = timer0ReloadVal >> 8;
 14961  003740  504F               	movf	_timer0ReloadVal+1,w,c	;volatile
 14962  003742  6ED7               	movwf	4055,c	;volatile
 14963                           
 14964                           ;tmr0.c: 143: TMR0L = (uint8_t) timer0ReloadVal;
 14965  003744  C04E  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 14966                           
 14967                           ;tmr0.c: 147: TMR0_CallBack();
 14968  003748  ECF7  F01A         	call	_TMR0_CallBack	;wreg free
 14969  00374C  0012               	return		;funcret
 14970  00374E                     __end_of_TMR0_ISR:
 14971                           	opt stack 0
 14972                           pclatu	equ	0xFFB
 14973                           pclath	equ	0xFFA
 14974                           tblptru	equ	0xFF8
 14975                           tblptrh	equ	0xFF7
 14976                           tblptrl	equ	0xFF6
 14977                           tablat	equ	0xFF5
 14978                           prodh	equ	0xFF4
 14979                           prodl	equ	0xFF3
 14980                           intcon	equ	0xFF2
 14981                           intcon2	equ	0xFF1
 14982                           indf0	equ	0xFEF
 14983                           postinc0	equ	0xFEE
 14984                           fsr0h	equ	0xFEA
 14985                           fsr0l	equ	0xFE9
 14986                           wreg	equ	0xFE8
 14987                           indf1	equ	0xFE7
 14988                           postdec1	equ	0xFE5
 14989                           fsr1h	equ	0xFE2
 14990                           fsr1l	equ	0xFE1
 14991                           indf2	equ	0xFDF
 14992                           postinc2	equ	0xFDE
 14993                           postdec2	equ	0xFDD
 14994                           fsr2h	equ	0xFDA
 14995                           fsr2l	equ	0xFD9
 14996                           status	equ	0xFD8
 14997                           
 14998 ;; *************** function _TMR0_CallBack *****************
 14999 ;; Defined at:
 15000 ;;		line 152 in file "mcc_generated_files/tmr0.c"
 15001 ;; Parameters:    Size  Location     Type
 15002 ;;		None
 15003 ;; Auto vars:     Size  Location     Type
 15004 ;;		None
 15005 ;; Return value:  Size  Location     Type
 15006 ;;                  1    wreg      void 
 15007 ;; Registers used:
 15008 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 15009 ;; Tracked objects:
 15010 ;;		On entry : 0/0
 15011 ;;		On exit  : 0/0
 15012 ;;		Unchanged: 0/0
 15013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15018 ;;Total ram usage:        0 bytes
 15019 ;; Hardware stack levels used:    1
 15020 ;; Hardware stack levels required when called:    2
 15021 ;; This function calls:
 15022 ;;		Absolute function
 15023 ;;		_TMR0_DefaultInterruptHandler
 15024 ;;		_make_array
 15025 ;; This function is called by:
 15026 ;;		_TMR0_ISR
 15027 ;; This function uses a non-reentrant model
 15028 ;;
 15029                           
 15030                           	psect	text80
 15031  0035EE                     __ptext80:
 15032                           	opt stack 0
 15033  0035EE                     _TMR0_CallBack:
 15034                           	opt stack 17
 15035                           
 15036                           ;tmr0.c: 156: if(TMR0_InterruptHandler)
 15037                           
 15038                           ;incstack = 0
 15039  0035EE  0100               	movlb	0	; () banked
 15040  0035F0  51F7               	movf	_TMR0_InterruptHandler& (0+255),w,b
 15041  0035F2  0100               	movlb	0	; () banked
 15042  0035F4  11F8               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 15043  0035F6  B4D8               	btfsc	status,2,c
 15044  0035F8  0012               	return	
 15045                           
 15046                           ; BSR set to: 0
 15047                           ;tmr0.c: 157: {
 15048                           ;tmr0.c: 158: TMR0_InterruptHandler();
 15049  0035FA  D801               	call	i2u416_48
 15050  0035FC  0012               	return	
 15051  0035FE                     i2u416_48:
 15052  0035FE  0005               	push	
 15053  003600  6EFA               	movwf	pclath,c
 15054  003602  0100               	movlb	0	; () banked
 15055  003604  51F7               	movf	_TMR0_InterruptHandler& (0+255),w,b
 15056  003606  6EFD               	movwf	tosl,c
 15057  003608  51F8               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 15058  00360A  6EFE               	movwf	tosh,c
 15059  00360C  6AFF               	clrf	tosu,c
 15060  00360E  50FA               	movf	pclath,w,c
 15061  003610  0012               	return		;indir
 15062  003612                     __end_of_TMR0_CallBack:
 15063                           	opt stack 0
 15064                           tosu	equ	0xFFF
 15065                           tosh	equ	0xFFE
 15066                           tosl	equ	0xFFD
 15067                           pclatu	equ	0xFFB
 15068                           pclath	equ	0xFFA
 15069                           tblptru	equ	0xFF8
 15070                           tblptrh	equ	0xFF7
 15071                           tblptrl	equ	0xFF6
 15072                           tablat	equ	0xFF5
 15073                           prodh	equ	0xFF4
 15074                           prodl	equ	0xFF3
 15075                           intcon	equ	0xFF2
 15076                           intcon2	equ	0xFF1
 15077                           indf0	equ	0xFEF
 15078                           postinc0	equ	0xFEE
 15079                           fsr0h	equ	0xFEA
 15080                           fsr0l	equ	0xFE9
 15081                           wreg	equ	0xFE8
 15082                           indf1	equ	0xFE7
 15083                           postdec1	equ	0xFE5
 15084                           fsr1h	equ	0xFE2
 15085                           fsr1l	equ	0xFE1
 15086                           indf2	equ	0xFDF
 15087                           postinc2	equ	0xFDE
 15088                           postdec2	equ	0xFDD
 15089                           fsr2h	equ	0xFDA
 15090                           fsr2l	equ	0xFD9
 15091                           status	equ	0xFD8
 15092                           
 15093 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 15094 ;; Defined at:
 15095 ;;		line 166 in file "mcc_generated_files/tmr0.c"
 15096 ;; Parameters:    Size  Location     Type
 15097 ;;		None
 15098 ;; Auto vars:     Size  Location     Type
 15099 ;;		None
 15100 ;; Return value:  Size  Location     Type
 15101 ;;                  1    wreg      void 
 15102 ;; Registers used:
 15103 ;;		None
 15104 ;; Tracked objects:
 15105 ;;		On entry : 0/0
 15106 ;;		On exit  : 0/0
 15107 ;;		Unchanged: 0/0
 15108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15113 ;;Total ram usage:        0 bytes
 15114 ;; Hardware stack levels used:    1
 15115 ;; This function calls:
 15116 ;;		Nothing
 15117 ;; This function is called by:
 15118 ;;		_TMR0_Initialize
 15119 ;;		_TMR0_CallBack
 15120 ;; This function uses a non-reentrant model
 15121 ;;
 15122                           
 15123                           	psect	text81
 15124  00382A                     __ptext81:
 15125                           	opt stack 0
 15126  00382A                     _TMR0_DefaultInterruptHandler:
 15127                           	opt stack 18
 15128                           
 15129                           ;incstack = 0
 15130  00382A  0012               	return		;funcret
 15131  00382C                     __end_of_TMR0_DefaultInterruptHandler:
 15132                           	opt stack 0
 15133                           tosu	equ	0xFFF
 15134                           tosh	equ	0xFFE
 15135                           tosl	equ	0xFFD
 15136                           pclatu	equ	0xFFB
 15137                           pclath	equ	0xFFA
 15138                           tblptru	equ	0xFF8
 15139                           tblptrh	equ	0xFF7
 15140                           tblptrl	equ	0xFF6
 15141                           tablat	equ	0xFF5
 15142                           prodh	equ	0xFF4
 15143                           prodl	equ	0xFF3
 15144                           intcon	equ	0xFF2
 15145                           intcon2	equ	0xFF1
 15146                           indf0	equ	0xFEF
 15147                           postinc0	equ	0xFEE
 15148                           fsr0h	equ	0xFEA
 15149                           fsr0l	equ	0xFE9
 15150                           wreg	equ	0xFE8
 15151                           indf1	equ	0xFE7
 15152                           postdec1	equ	0xFE5
 15153                           fsr1h	equ	0xFE2
 15154                           fsr1l	equ	0xFE1
 15155                           indf2	equ	0xFDF
 15156                           postinc2	equ	0xFDE
 15157                           postdec2	equ	0xFDD
 15158                           fsr2h	equ	0xFDA
 15159                           fsr2l	equ	0xFD9
 15160                           status	equ	0xFD8
 15161                           
 15162 ;; *************** function _make_array *****************
 15163 ;; Defined at:
 15164 ;;		line 59 in file "main.c"
 15165 ;; Parameters:    Size  Location     Type
 15166 ;;		None
 15167 ;; Auto vars:     Size  Location     Type
 15168 ;;		None
 15169 ;; Return value:  Size  Location     Type
 15170 ;;                  1    wreg      void 
 15171 ;; Registers used:
 15172 ;;		wreg, status,2, status,0, cstack
 15173 ;; Tracked objects:
 15174 ;;		On entry : 0/0
 15175 ;;		On exit  : 0/0
 15176 ;;		Unchanged: 0/0
 15177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15182 ;;Total ram usage:        0 bytes
 15183 ;; Hardware stack levels used:    1
 15184 ;; Hardware stack levels required when called:    1
 15185 ;; This function calls:
 15186 ;;		_heart_beat
 15187 ;; This function is called by:
 15188 ;;		_main
 15189 ;;		_TMR0_CallBack
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193                           	psect	text82
 15194  0037C8                     __ptext82:
 15195                           	opt stack 0
 15196  0037C8                     _make_array:
 15197                           	opt stack 17
 15198                           
 15199                           ;main.c: 61: static char i=0;
 15200                           ;main.c: 62: heart_beat();
 15201                           
 15202                           ;incstack = 0
 15203  0037C8  EC57  F01B         	call	_heart_beat	;wreg free
 15204                           
 15205                           ;main.c: 65: display = 1;
 15206  0037CC  0E01               	movlw	1
 15207  0037CE  0100               	movlb	0	; () banked
 15208  0037D0  6F83               	movwf	_display& (0+255),b
 15209                           
 15210                           ; BSR set to: 0
 15211  0037D2  0012               	return		;funcret
 15212  0037D4                     __end_of_make_array:
 15213                           	opt stack 0
 15214                           tosu	equ	0xFFF
 15215                           tosh	equ	0xFFE
 15216                           tosl	equ	0xFFD
 15217                           pclatu	equ	0xFFB
 15218                           pclath	equ	0xFFA
 15219                           tblptru	equ	0xFF8
 15220                           tblptrh	equ	0xFF7
 15221                           tblptrl	equ	0xFF6
 15222                           tablat	equ	0xFF5
 15223                           prodh	equ	0xFF4
 15224                           prodl	equ	0xFF3
 15225                           intcon	equ	0xFF2
 15226                           intcon2	equ	0xFF1
 15227                           indf0	equ	0xFEF
 15228                           postinc0	equ	0xFEE
 15229                           fsr0h	equ	0xFEA
 15230                           fsr0l	equ	0xFE9
 15231                           wreg	equ	0xFE8
 15232                           indf1	equ	0xFE7
 15233                           postdec1	equ	0xFE5
 15234                           fsr1h	equ	0xFE2
 15235                           fsr1l	equ	0xFE1
 15236                           indf2	equ	0xFDF
 15237                           postinc2	equ	0xFDE
 15238                           postdec2	equ	0xFDD
 15239                           fsr2h	equ	0xFDA
 15240                           fsr2l	equ	0xFD9
 15241                           status	equ	0xFD8
 15242                           
 15243 ;; *************** function _heart_beat *****************
 15244 ;; Defined at:
 15245 ;;		line 54 in file "main.c"
 15246 ;; Parameters:    Size  Location     Type
 15247 ;;		None
 15248 ;; Auto vars:     Size  Location     Type
 15249 ;;		None
 15250 ;; Return value:  Size  Location     Type
 15251 ;;                  1    wreg      void 
 15252 ;; Registers used:
 15253 ;;		wreg, status,2, status,0
 15254 ;; Tracked objects:
 15255 ;;		On entry : 0/0
 15256 ;;		On exit  : 0/0
 15257 ;;		Unchanged: 0/0
 15258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15261 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;Total ram usage:        1 bytes
 15264 ;; Hardware stack levels used:    1
 15265 ;; This function calls:
 15266 ;;		Nothing
 15267 ;; This function is called by:
 15268 ;;		_make_array
 15269 ;; This function uses a non-reentrant model
 15270 ;;
 15271                           
 15272                           	psect	text83
 15273  0036AE                     __ptext83:
 15274                           	opt stack 0
 15275  0036AE                     _heart_beat:
 15276                           	opt stack 17
 15277                           
 15278                           ; BSR set to: 0
 15279                           ;incstack = 0
 15280                           ;main.c: 56: do { LATEbits.LATE2 = ~LATEbits.LATE2; } while(0);
 15281  0036AE  A48D               	btfss	3981,2,c	;volatile
 15282  0036B0  D002               	goto	i2u352_40
 15283  0036B2  0E01               	movlw	1
 15284  0036B4  D001               	goto	i2u352_46
 15285  0036B6                     i2u352_40:
 15286  0036B6  0E00               	movlw	0
 15287  0036B8                     i2u352_46:
 15288  0036B8  0AFF               	xorlw	255
 15289  0036BA  6E01               	movwf	??_heart_beat& (0+255),c
 15290  0036BC  4601               	rlncf	??_heart_beat,f,c
 15291  0036BE  4601               	rlncf	??_heart_beat,f,c
 15292  0036C0  508D               	movf	3981,w,c	;volatile
 15293  0036C2  1801               	xorwf	??_heart_beat,w,c
 15294  0036C4  0BFB               	andlw	-5
 15295  0036C6  1801               	xorwf	??_heart_beat,w,c
 15296  0036C8  6E8D               	movwf	3981,c	;volatile
 15297  0036CA  0012               	return	
 15298  0036CC                     __end_of_heart_beat:
 15299                           	opt stack 0
 15300                           tosu	equ	0xFFF
 15301                           tosh	equ	0xFFE
 15302                           tosl	equ	0xFFD
 15303                           pclatu	equ	0xFFB
 15304                           pclath	equ	0xFFA
 15305                           tblptru	equ	0xFF8
 15306                           tblptrh	equ	0xFF7
 15307                           tblptrl	equ	0xFF6
 15308                           tablat	equ	0xFF5
 15309                           prodh	equ	0xFF4
 15310                           prodl	equ	0xFF3
 15311                           intcon	equ	0xFF2
 15312                           intcon2	equ	0xFF1
 15313                           indf0	equ	0xFEF
 15314                           postinc0	equ	0xFEE
 15315                           fsr0h	equ	0xFEA
 15316                           fsr0l	equ	0xFE9
 15317                           wreg	equ	0xFE8
 15318                           indf1	equ	0xFE7
 15319                           postdec1	equ	0xFE5
 15320                           fsr1h	equ	0xFE2
 15321                           fsr1l	equ	0xFE1
 15322                           indf2	equ	0xFDF
 15323                           postinc2	equ	0xFDE
 15324                           postdec2	equ	0xFDD
 15325                           fsr2h	equ	0xFDA
 15326                           fsr2l	equ	0xFD9
 15327                           status	equ	0xFD8
 15328                           
 15329 ;; *************** function _EUSART1_Transmit_ISR *****************
 15330 ;; Defined at:
 15331 ;;		line 165 in file "mcc_generated_files/eusart1.c"
 15332 ;; Parameters:    Size  Location     Type
 15333 ;;		None
 15334 ;; Auto vars:     Size  Location     Type
 15335 ;;		None
 15336 ;; Return value:  Size  Location     Type
 15337 ;;                  1    wreg      void 
 15338 ;; Registers used:
 15339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15340 ;; Tracked objects:
 15341 ;;		On entry : 0/0
 15342 ;;		On exit  : 0/0
 15343 ;;		Unchanged: 0/0
 15344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15349 ;;Total ram usage:        0 bytes
 15350 ;; Hardware stack levels used:    1
 15351 ;; This function calls:
 15352 ;;		Nothing
 15353 ;; This function is called by:
 15354 ;;		_INTERRUPT_InterruptManager
 15355 ;; This function uses a non-reentrant model
 15356 ;;
 15357                           
 15358                           	psect	text84
 15359  0034EA                     __ptext84:
 15360                           	opt stack 0
 15361  0034EA                     _EUSART1_Transmit_ISR:
 15362                           	opt stack 20
 15363                           
 15364                           ;eusart1.c: 169: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 15365                           
 15366                           ;incstack = 0
 15367  0034EA  0E08               	movlw	8
 15368  0034EC  0100               	movlb	0	; () banked
 15369  0034EE  61FD               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15370  0034F0  D013               	goto	i2l205
 15371                           
 15372                           ; BSR set to: 0
 15373                           ;eusart1.c: 170: {
 15374                           ;eusart1.c: 171: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 15375  0034F2  5048               	movf	_eusart1TxTail,w,c	;volatile
 15376  0034F4  0D01               	mullw	1
 15377  0034F6  0E68               	movlw	low _eusart1TxBuffer
 15378  0034F8  24F3               	addwf	prodl,w,c
 15379  0034FA  6ED9               	movwf	fsr2l,c
 15380  0034FC  0E00               	movlw	high _eusart1TxBuffer
 15381  0034FE  20F4               	addwfc	prodh,w,c
 15382  003500  6EDA               	movwf	fsr2h,c
 15383  003502  50DF               	movf	indf2,w,c
 15384  003504  6EAD               	movwf	4013,c	;volatile
 15385                           
 15386                           ; BSR set to: 0
 15387  003506  2A48               	incf	_eusart1TxTail,f,c	;volatile
 15388                           
 15389                           ; BSR set to: 0
 15390                           ;eusart1.c: 172: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 15391  003508  0E07               	movlw	7
 15392  00350A  6448               	cpfsgt	_eusart1TxTail,c	;volatile
 15393  00350C  D002               	goto	i2l5307
 15394                           
 15395                           ; BSR set to: 0
 15396                           ;eusart1.c: 173: {
 15397                           ;eusart1.c: 174: eusart1TxTail = 0;
 15398  00350E  0E00               	movlw	0
 15399  003510  6E48               	movwf	_eusart1TxTail,c	;volatile
 15400  003512                     i2l5307:
 15401                           
 15402                           ; BSR set to: 0
 15403                           ;eusart1.c: 175: }
 15404                           ;eusart1.c: 176: eusart1TxBufferRemaining++;
 15405  003512  0100               	movlb	0	; () banked
 15406  003514  2BFD               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 15407                           
 15408                           ;eusart1.c: 177: }
 15409  003516  0012               	return	
 15410  003518                     i2l205:
 15411                           
 15412                           ; BSR set to: 0
 15413                           ;eusart1.c: 178: else
 15414                           ;eusart1.c: 179: {
 15415                           ;eusart1.c: 180: PIE1bits.TX1IE = 0;
 15416  003518  989D               	bcf	3997,4,c	;volatile
 15417  00351A  0012               	return	
 15418  00351C                     __end_of_EUSART1_Transmit_ISR:
 15419                           	opt stack 0
 15420                           tosu	equ	0xFFF
 15421                           tosh	equ	0xFFE
 15422                           tosl	equ	0xFFD
 15423                           pclatu	equ	0xFFB
 15424                           pclath	equ	0xFFA
 15425                           tblptru	equ	0xFF8
 15426                           tblptrh	equ	0xFF7
 15427                           tblptrl	equ	0xFF6
 15428                           tablat	equ	0xFF5
 15429                           prodh	equ	0xFF4
 15430                           prodl	equ	0xFF3
 15431                           intcon	equ	0xFF2
 15432                           intcon2	equ	0xFF1
 15433                           indf0	equ	0xFEF
 15434                           postinc0	equ	0xFEE
 15435                           fsr0h	equ	0xFEA
 15436                           fsr0l	equ	0xFE9
 15437                           wreg	equ	0xFE8
 15438                           indf1	equ	0xFE7
 15439                           postdec1	equ	0xFE5
 15440                           fsr1h	equ	0xFE2
 15441                           fsr1l	equ	0xFE1
 15442                           indf2	equ	0xFDF
 15443                           postinc2	equ	0xFDE
 15444                           postdec2	equ	0xFDD
 15445                           fsr2h	equ	0xFDA
 15446                           fsr2l	equ	0xFD9
 15447                           status	equ	0xFD8
 15448                           
 15449 ;; *************** function _EUSART1_Receive_ISR *****************
 15450 ;; Defined at:
 15451 ;;		line 184 in file "mcc_generated_files/eusart1.c"
 15452 ;; Parameters:    Size  Location     Type
 15453 ;;		None
 15454 ;; Auto vars:     Size  Location     Type
 15455 ;;		None
 15456 ;; Return value:  Size  Location     Type
 15457 ;;                  1    wreg      void 
 15458 ;; Registers used:
 15459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15460 ;; Tracked objects:
 15461 ;;		On entry : 0/0
 15462 ;;		On exit  : 0/0
 15463 ;;		Unchanged: 0/0
 15464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15469 ;;Total ram usage:        0 bytes
 15470 ;; Hardware stack levels used:    1
 15471 ;; This function calls:
 15472 ;;		Nothing
 15473 ;; This function is called by:
 15474 ;;		_INTERRUPT_InterruptManager
 15475 ;; This function uses a non-reentrant model
 15476 ;;
 15477                           
 15478                           	psect	text85
 15479  003576                     __ptext85:
 15480                           	opt stack 0
 15481  003576                     _EUSART1_Receive_ISR:
 15482                           	opt stack 20
 15483                           
 15484                           ;eusart1.c: 187: if(1 == RCSTA1bits.OERR)
 15485                           
 15486                           ; BSR set to: 0
 15487                           ;incstack = 0
 15488  003576  A2AB               	btfss	4011,1,c	;volatile
 15489  003578  D002               	goto	i2l5313
 15490                           
 15491                           ;eusart1.c: 188: {
 15492                           ;eusart1.c: 191: RCSTA1bits.CREN = 0;
 15493  00357A  98AB               	bcf	4011,4,c	;volatile
 15494                           
 15495                           ;eusart1.c: 192: RCSTA1bits.CREN = 1;
 15496  00357C  88AB               	bsf	4011,4,c	;volatile
 15497  00357E                     i2l5313:
 15498                           
 15499                           ;eusart1.c: 193: }
 15500                           ;eusart1.c: 196: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15501  00357E  5045               	movf	_eusart1RxHead,w,c	;volatile
 15502  003580  0D01               	mullw	1
 15503  003582  0E60               	movlw	low _eusart1RxBuffer
 15504  003584  24F3               	addwf	prodl,w,c
 15505  003586  6ED9               	movwf	fsr2l,c
 15506  003588  0E00               	movlw	high _eusart1RxBuffer
 15507  00358A  20F4               	addwfc	prodh,w,c
 15508  00358C  6EDA               	movwf	fsr2h,c
 15509  00358E  CFAE FFDF          	movff	4014,indf2	;volatile
 15510  003592  2A45               	incf	_eusart1RxHead,f,c	;volatile
 15511                           
 15512                           ;eusart1.c: 197: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 15513  003594  0E07               	movlw	7
 15514  003596  6445               	cpfsgt	_eusart1RxHead,c	;volatile
 15515  003598  D002               	goto	i2l5321
 15516                           
 15517                           ;eusart1.c: 198: {
 15518                           ;eusart1.c: 199: eusart1RxHead = 0;
 15519  00359A  0E00               	movlw	0
 15520  00359C  6E45               	movwf	_eusart1RxHead,c	;volatile
 15521  00359E                     i2l5321:
 15522                           
 15523                           ;eusart1.c: 200: }
 15524                           ;eusart1.c: 201: eusart1RxCount++;
 15525  00359E  2A44               	incf	_eusart1RxCount,f,c	;volatile
 15526  0035A0  0012               	return		;funcret
 15527  0035A2                     __end_of_EUSART1_Receive_ISR:
 15528                           	opt stack 0
 15529                           tosu	equ	0xFFF
 15530                           tosh	equ	0xFFE
 15531                           tosl	equ	0xFFD
 15532                           pclatu	equ	0xFFB
 15533                           pclath	equ	0xFFA
 15534                           tblptru	equ	0xFF8
 15535                           tblptrh	equ	0xFF7
 15536                           tblptrl	equ	0xFF6
 15537                           tablat	equ	0xFF5
 15538                           prodh	equ	0xFF4
 15539                           prodl	equ	0xFF3
 15540                           intcon	equ	0xFF2
 15541                           intcon2	equ	0xFF1
 15542                           indf0	equ	0xFEF
 15543                           postinc0	equ	0xFEE
 15544                           fsr0h	equ	0xFEA
 15545                           fsr0l	equ	0xFE9
 15546                           wreg	equ	0xFE8
 15547                           indf1	equ	0xFE7
 15548                           postdec1	equ	0xFE5
 15549                           fsr1h	equ	0xFE2
 15550                           fsr1l	equ	0xFE1
 15551                           indf2	equ	0xFDF
 15552                           postinc2	equ	0xFDE
 15553                           postdec2	equ	0xFDD
 15554                           fsr2h	equ	0xFDA
 15555                           fsr2l	equ	0xFD9
 15556                           status	equ	0xFD8
 15557                           tosu	equ	0xFFF
 15558                           tosh	equ	0xFFE
 15559                           tosl	equ	0xFFD
 15560                           pclatu	equ	0xFFB
 15561                           pclath	equ	0xFFA
 15562                           tblptru	equ	0xFF8
 15563                           tblptrh	equ	0xFF7
 15564                           tblptrl	equ	0xFF6
 15565                           tablat	equ	0xFF5
 15566                           prodh	equ	0xFF4
 15567                           prodl	equ	0xFF3
 15568                           intcon	equ	0xFF2
 15569                           intcon2	equ	0xFF1
 15570                           indf0	equ	0xFEF
 15571                           postinc0	equ	0xFEE
 15572                           fsr0h	equ	0xFEA
 15573                           fsr0l	equ	0xFE9
 15574                           wreg	equ	0xFE8
 15575                           indf1	equ	0xFE7
 15576                           postdec1	equ	0xFE5
 15577                           fsr1h	equ	0xFE2
 15578                           fsr1l	equ	0xFE1
 15579                           indf2	equ	0xFDF
 15580                           postinc2	equ	0xFDE
 15581                           postdec2	equ	0xFDD
 15582                           fsr2h	equ	0xFDA
 15583                           fsr2l	equ	0xFD9
 15584                           status	equ	0xFD8
 15585                           
 15586                           	psect	text86
 15587  000000                     __ptext86:
 15588                           	opt stack 0
 15589                           tosu	equ	0xFFF
 15590                           tosh	equ	0xFFE
 15591                           tosl	equ	0xFFD
 15592                           pclatu	equ	0xFFB
 15593                           pclath	equ	0xFFA
 15594                           tblptru	equ	0xFF8
 15595                           tblptrh	equ	0xFF7
 15596                           tblptrl	equ	0xFF6
 15597                           tablat	equ	0xFF5
 15598                           prodh	equ	0xFF4
 15599                           prodl	equ	0xFF3
 15600                           intcon	equ	0xFF2
 15601                           intcon2	equ	0xFF1
 15602                           indf0	equ	0xFEF
 15603                           postinc0	equ	0xFEE
 15604                           fsr0h	equ	0xFEA
 15605                           fsr0l	equ	0xFE9
 15606                           wreg	equ	0xFE8
 15607                           indf1	equ	0xFE7
 15608                           postdec1	equ	0xFE5
 15609                           fsr1h	equ	0xFE2
 15610                           fsr1l	equ	0xFE1
 15611                           indf2	equ	0xFDF
 15612                           postinc2	equ	0xFDE
 15613                           postdec2	equ	0xFDD
 15614                           fsr2h	equ	0xFDA
 15615                           fsr2l	equ	0xFD9
 15616                           status	equ	0xFD8
 15617                           
 15618                           	psect	rparam
 15619  0000                     tosu	equ	0xFFF
 15620                           tosh	equ	0xFFE
 15621                           tosl	equ	0xFFD
 15622                           pclatu	equ	0xFFB
 15623                           pclath	equ	0xFFA
 15624                           tblptru	equ	0xFF8
 15625                           tblptrh	equ	0xFF7
 15626                           tblptrl	equ	0xFF6
 15627                           tablat	equ	0xFF5
 15628                           prodh	equ	0xFF4
 15629                           prodl	equ	0xFF3
 15630                           intcon	equ	0xFF2
 15631                           intcon2	equ	0xFF1
 15632                           indf0	equ	0xFEF
 15633                           postinc0	equ	0xFEE
 15634                           fsr0h	equ	0xFEA
 15635                           fsr0l	equ	0xFE9
 15636                           wreg	equ	0xFE8
 15637                           indf1	equ	0xFE7
 15638                           postdec1	equ	0xFE5
 15639                           fsr1h	equ	0xFE2
 15640                           fsr1l	equ	0xFE1
 15641                           indf2	equ	0xFDF
 15642                           postinc2	equ	0xFDE
 15643                           postdec2	equ	0xFDD
 15644                           fsr2h	equ	0xFDA
 15645                           fsr2l	equ	0xFD9
 15646                           status	equ	0xFD8
 15647                           
 15648                           	psect	temp
 15649  000050                     btemp:
 15650                           	opt stack 0
 15651  000050                     	ds	1
 15652  0000                     int$flags	set	btemp
 15653                           tosu	equ	0xFFF
 15654                           tosh	equ	0xFFE
 15655                           tosl	equ	0xFFD
 15656                           pclatu	equ	0xFFB
 15657                           pclath	equ	0xFFA
 15658                           tblptru	equ	0xFF8
 15659                           tblptrh	equ	0xFF7
 15660                           tblptrl	equ	0xFF6
 15661                           tablat	equ	0xFF5
 15662                           prodh	equ	0xFF4
 15663                           prodl	equ	0xFF3
 15664                           intcon	equ	0xFF2
 15665                           intcon2	equ	0xFF1
 15666                           indf0	equ	0xFEF
 15667                           postinc0	equ	0xFEE
 15668                           fsr0h	equ	0xFEA
 15669                           fsr0l	equ	0xFE9
 15670                           wreg	equ	0xFE8
 15671                           indf1	equ	0xFE7
 15672                           postdec1	equ	0xFE5
 15673                           fsr1h	equ	0xFE2
 15674                           fsr1l	equ	0xFE1
 15675                           indf2	equ	0xFDF
 15676                           postinc2	equ	0xFDE
 15677                           postdec2	equ	0xFDD
 15678                           fsr2h	equ	0xFDA
 15679                           fsr2l	equ	0xFD9
 15680                           status	equ	0xFD8


Data Sizes:
    Strings     816
    Constant    10
    Data        13
    BSS         1485
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      79
    BANK0           160     16     158
    BANK1           256     14     134
    BANK2           256      0     150
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), STR_44(CODE[2]), 
		 -> STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), STR_27(CODE[7]), 
		 -> STR_25(CODE[7]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_72(CODE[4]), STR_69(CODE[9]), STR_68(CODE[11]), STR_55(CODE[11]), 
		 -> STR_46(CODE[12]), STR_38(CODE[10]), STR_36(CODE[10]), STR_31(CODE[9]), 
		 -> STR_28(CODE[10]), STR_26(CODE[8]), STR_24(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), STR_44(CODE[2]), 
		 -> STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), STR_27(CODE[7]), 
		 -> STR_25(CODE[7]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    cputs@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_119(CODE[12]), STR_118(CODE[12]), STR_74(CODE[5]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), STR_44(CODE[2]), 
		 -> STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), STR_27(CODE[7]), 
		 -> STR_25(CODE[7]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_72(CODE[4]), STR_69(CODE[9]), STR_68(CODE[11]), STR_55(CODE[11]), 
		 -> STR_46(CODE[12]), STR_38(CODE[10]), STR_36(CODE[10]), STR_31(CODE[9]), 
		 -> STR_28(CODE[10]), STR_26(CODE[8]), STR_24(CODE[8]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    strncpy@from	PTR const unsigned char  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1080]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_72(CODE[4]), STR_71(CODE[7]), STR_70(CODE[7]), 
		 -> STR_69(CODE[9]), STR_68(CODE[11]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_55(CODE[11]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_46(CODE[12]), STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_38(CODE[10]), STR_37(CODE[7]), STR_36(CODE[10]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_31(CODE[9]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_28(CODE[10]), STR_27(CODE[7]), STR_26(CODE[8]), 
		 -> STR_25(CODE[7]), STR_24(CODE[8]), NULL(NULL[0]), clcd_display_string_details.string(BIGRAM[40]), 
		 -> clcd_display_string_details(BIGRAM[1080]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_72(CODE[4]), STR_71(CODE[7]), STR_70(CODE[7]), 
		 -> STR_69(CODE[9]), STR_68(CODE[11]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_55(CODE[11]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_46(CODE[12]), STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_38(CODE[10]), STR_37(CODE[7]), STR_36(CODE[10]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_31(CODE[9]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_28(CODE[10]), STR_27(CODE[7]), STR_26(CODE[8]), 
		 -> STR_25(CODE[7]), STR_24(CODE[8]), NULL(NULL[0]), clcd_display_string_details.string(BIGRAM[40]), 
		 -> clcd_display_string_details(BIGRAM[1080]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 
		 -> cmd_data.data(BANK0[40]), cmd_data(BANK0[49]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[49]), clcd_display_string_details(BIGRAM[1080]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[49]), clcd_display_string_details(BIGRAM[1080]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_104(CODE[11]), STR_101(CODE[11]), STR_98(CODE[12]), STR_95(CODE[10]), 
		 -> STR_90(CODE[10]), STR_87(CODE[9]), STR_83(CODE[8]), STR_79(CODE[8]), 
		 -> STR_75(CODE[10]), STR_73(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 15
		 -> CMD(BANK0[15]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_119(CODE[12]), STR_118(CODE[12]), STR_74(CODE[5]), 

    memset@p1	PTR void  size(2) Largest target is 1080
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), cmd_data(BANK0[49]), 
		 -> conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    memset@p	PTR unsigned char  size(2) Largest target is 1080
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), cmd_data(BANK0[49]), 
		 -> conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1080]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1080]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_122(CODE[18]), STR_120(CODE[5]), STR_117(CODE[3]), STR_116(CODE[3]), 
		 -> STR_115(CODE[3]), STR_113(CODE[7]), STR_111(CODE[7]), STR_109(CODE[7]), 
		 -> STR_107(CODE[13]), STR_105(CODE[5]), STR_102(CODE[13]), STR_99(CODE[13]), 
		 -> STR_96(CODE[13]), STR_93(CODE[13]), STR_92(CODE[5]), STR_91(CODE[11]), 
		 -> STR_88(CODE[13]), STR_85(CODE[13]), STR_84(CODE[5]), STR_81(CODE[13]), 
		 -> STR_80(CODE[5]), STR_77(CODE[13]), STR_76(CODE[5]), STR_67(CODE[25]), 
		 -> STR_66(CODE[11]), STR_64(CODE[25]), STR_62(CODE[27]), STR_60(CODE[27]), 
		 -> STR_58(CODE[12]), STR_54(CODE[14]), STR_53(CODE[9]), STR_51(CODE[11]), 
		 -> STR_50(CODE[9]), STR_47(CODE[9]), STR_45(CODE[11]), STR_43(CODE[11]), 
		 -> STR_42(CODE[12]), STR_40(CODE[12]), STR_34(CODE[7]), STR_30(CODE[8]), 
		 -> STR_23(CODE[8]), STR_22(CODE[11]), STR_21(CODE[15]), STR_20(CODE[22]), 
		 -> STR_19(CODE[15]), STR_18(CODE[32]), STR_17(CODE[14]), STR_16(CODE[11]), 
		 -> STR_15(CODE[16]), STR_14(CODE[16]), STR_13(CODE[19]), STR_12(CODE[3]), 
		 -> STR_11(CODE[5]), STR_10(CODE[16]), STR_9(CODE[39]), STR_8(CODE[26]), 
		 -> STR_7(CODE[26]), STR_6(CODE[26]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[9]), STR_1(CODE[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 3895
		 -> STR_123(CODE[7]), STR_121(CODE[6]), uart_str(BANK2[150]), STR_114(CODE[15]), 
		 -> STR_112(CODE[12]), STR_110(CODE[12]), STR_108(CODE[11]), STR_106(CODE[6]), 
		 -> STR_103(CODE[11]), STR_100(CODE[12]), STR_97(CODE[10]), STR_94(CODE[10]), 
		 -> STR_89(CODE[9]), STR_86(CODE[8]), STR_82(CODE[8]), STR_78(CODE[10]), 
		 -> STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), STR_44(CODE[2]), 
		 -> STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), RAM(DATA[3895]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), STR_5(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    parse_cmd_str@temp	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    parse_cmd_str@ptr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    parse_cmd_str@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    collect_column@data_column	PTR unsigned char  size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    collect_column@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    sp__get_str	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    collect_row@data_row	PTR unsigned char  size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    collect_row@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    scroll_off@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    scroll_right_to_left@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    scroll_left_to_right@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    write_str@str	PTR const unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    update_string_data@data	PTR struct . size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[49]), clcd_display_string_details(BIGRAM[1080]), 

    copy_data@data	PTR struct . size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    copy_data@clcd_str_data	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    sp__max_display_support	PTR unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), 

    sp__memset	PTR void  size(2) Largest target is 1080
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), cmd_data(BANK0[49]), 
		 -> conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> make_array(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> make_array(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_make_display
    _console_init->_memset
    _clear_cmd_data->_memset
    _update_string_data->_make_display
    _make_display->_scroll_right_to_left
    _scroll_right_to_left->_memset
    _scroll_off->_strlen
    _scroll_left_to_right->_memset
    _display_text->_write_str
    _set_cursor->_write_lcd_cmd
    _char_enter_mode_left_to_right->_write_lcd_cmd
    _copy_data->_printf
    _conflict_check->_printf
    _puts->_cputs
    _cputs->_putch
    _init_clcd_cusotom_lcd->_printf
    _write_lcd_cmd->_delay
    _clear_display_array->_memset
    _clear_display_structure->_memset
    _clcd_display_string_config->_printf
    _write_str->_write_lcd_data
    _write_lcd_data->_delay
    _parse_cmd_str->_collect_column
    _parse_cmd_str->_collect_row
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _strstr->_strncmp
    _strncmp->_strlen
    _memset->_strlen
    _collect_row->_printf
    _collect_column->_printf
    _strlen->___wmul
    _printf->_strlen
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    ___wmul->___awdiv
    _getch->_EUSART1_Read
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _make_array->_heart_beat

Critical Paths under _main in BANK0

    _main->_cmd_consol_task
    _cmd_consol_task->_reply_to_host
    _reply_to_host->_update_string_data

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _cmd_consol_task->_parse_cmd_str

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  265899
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                     _TMR1_StopTimer
                     _TMR5_StopTimer
                          __delay_MS
                    _cmd_consol_task
                       _console_init
                       _make_display
                             _printf
 ---------------------------------------------------------------------------------
 (1) _console_init                                         0     0      0   14134
                     _clear_cmd_data
                             _memset
 ---------------------------------------------------------------------------------
 (2) _clear_cmd_data                                       0     0      0    7067
                             _memset
 ---------------------------------------------------------------------------------
 (1) _cmd_consol_task                                      2     2      0  213767
                                             14 BANK0      2     2      0
                              _getch
                             _memset
                      _parse_cmd_str
                             _printf
                               _puts
                      _reply_to_host
 ---------------------------------------------------------------------------------
 (2) _reply_to_host                                        4     4      0  143627
                                             10 BANK0      4     4      0
                       _clcd_max_col
                       _clcd_max_row
              _init_clcd_cusotom_lcd
                    _max_display_str
                _max_display_support
                      _max_uid_range
                      _min_uid_range
                             _printf
                               _puts
                             _strcmp
                 _update_string_data
 ---------------------------------------------------------------------------------
 (3) _update_string_data                                  10     8      2   71526
                                              0 BANK0     10     8      2
                             ___wmul
                     _conflict_check
                          _copy_data
                       _make_display
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (1) _make_display                                         5     5      0   30596
                                             59 COMRAM     5     5      0
                             ___wmul
                       _display_text
               _scroll_left_to_right
                         _scroll_off
               _scroll_right_to_left
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_right_to_left                                16    14      2    9713
                                             43 COMRAM    16    14      2
                             ___wmul (ARG)
                             _memcpy
                             _memset
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              8     2      6     433
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _scroll_off                                          15    13      2    2806
                                             35 COMRAM    15    13      2
                             ___wmul (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_left_to_right                                11     9      2    9280
                                             43 COMRAM    11     9      2
                             ___wmul (ARG)
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _display_text                                         0     0      0    2572
      _char_enter_mode_left_to_right
                         _set_cursor
                      _write_lcd_cmd
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _set_cursor                                           2     1      1     805
                                             23 COMRAM     2     1      1
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _char_enter_mode_left_to_right                        0     0      0     401
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (4) _copy_data                                           10     6      4   11772
                                             53 COMRAM     6     2      4
                             _printf
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _conflict_check                                       9     7      2   11147
                                             53 COMRAM     9     7      2
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               6     2      4    1673
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _puts                                                 2     0      2     590
                                             19 COMRAM     2     0      2
                              _cputs
                              _putch
 ---------------------------------------------------------------------------------
 (4) _cputs                                                2     0      2     235
                                             17 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _min_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_display_support                                  2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _max_display_str                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_clcd_cusotom_lcd                                2     1      1   63389
                                             53 COMRAM     2     1      1
                            ___awdiv
                             ___wmul
                   _init_CLCD_config
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (4) _init_CLCD_config                                     0     0      0   44901
                          __delay_MS
         _clcd_display_string_config
                             _memset
                         _reset_clcd
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _write_lcd_cmd                                        1     1      0     401
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _reset_clcd                                           0     0      0   21201
                _clear_display_array
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _clear_display_array                                  0     0      0   14134
                             _memset
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _reset_display_structure_count                        0     0      0    7067
            _clear_display_structure
 ---------------------------------------------------------------------------------
 (7) _clear_display_structure                              0     0      0    7067
                             _memset
 ---------------------------------------------------------------------------------
 (5) _clcd_display_string_config                           0     0      0   15545
                             _memcpy
                             _memset
                             _printf
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _write_str                                            3     1      2     965
                                             23 COMRAM     3     1      2
                     _write_lcd_data
 ---------------------------------------------------------------------------------
 (4) _write_lcd_data                                       1     1      0     401
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                7     5      2     370
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     4      6    1098
                                             15 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) __delay_MS                                            5     3      2     687
                                             15 COMRAM     5     3      2
            _TMR1_HasOverflowOccured
                        _TMR1_Reload
                    _TMR1_StartTimer
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     907
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _clcd_max_row                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clcd_max_col                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parse_cmd_str                                       19    17      2   55883
                                              0 BANK0      5     3      2
                                              0 BANK1     14    14      0
                               _atoi
                     _collect_column
                        _collect_row
                            _isdigit
                             _memset
                             _printf
                             _strcpy
                             _strlen
                             _strstr
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _strtok                                               4     0      4    5265
                                             28 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (4) _strspn                                               7     3      4     873
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strcspn                                              7     3      4     873
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    5086
                                             44 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     423
                                             35 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) _strchr                                               6     2      4     586
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    2265
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6    7067
                                             35 COMRAM     8     2      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _collect_row                                         10     6      4    9341
                                             53 COMRAM    10     6      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_column                                      10     6      4    9713
                                             53 COMRAM    10     6      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2    2132
                                             29 COMRAM     6     4      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _printf                                              24    16      8    6415
                                             35 COMRAM    18    10      8
                            ___awdiv (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                       _clcd_max_col (ARG)
                       _clcd_max_row (ARG)
                    _max_display_str (ARG)
                _max_display_support (ARG)
                      _max_uid_range (ARG)
                      _min_uid_range (ARG)
                              _putch
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             16 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    4361
                                             29 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3774
                                             23 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getch                                                0     0      0      24
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         1     1      0      24
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     150
                                             17 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     150
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         14    14      0       0
                                              1 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                         _make_array *
 ---------------------------------------------------------------------------------
 (13) _make_array                                          0     0      0       0
                         _heart_beat
 ---------------------------------------------------------------------------------
 (14) _heart_beat                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_SetInterruptHandler
   _TMR0_StartTimer
   _TMR0_StopTimer
   _TMR1_StopTimer
   _TMR5_StopTimer
   __delay_MS
     _TMR1_HasOverflowOccured
     _TMR1_Reload
     _TMR1_StartTimer
     _TMR1_StopTimer
   _cmd_consol_task
     _getch
       _EUSART1_Read
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _parse_cmd_str
       _atoi
         ___wmul
           ___awdiv (ARG)
         _isdigit
       _collect_column
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _collect_row
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _isdigit
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strcpy
       _strlen
         ___wmul (ARG)
           ___awdiv (ARG)
       _strstr
         _strchr
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
         _strncmp
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _clcd_max_col (ARG)
       _clcd_max_row (ARG)
       _max_display_str (ARG)
       _max_display_support (ARG)
       _max_uid_range (ARG)
       _min_uid_range (ARG)
       _putch (ARG)
         _EUSART1_Write
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _puts
       _cputs
         _putch
           _EUSART1_Write
       _putch
         _EUSART1_Write
     _reply_to_host
       _clcd_max_col
       _clcd_max_row
       _init_clcd_cusotom_lcd
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _init_CLCD_config
           __delay_MS
             _TMR1_HasOverflowOccured
             _TMR1_Reload
             _TMR1_StartTimer
             _TMR1_StopTimer
           _clcd_display_string_config
             _memcpy
             _memset
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _printf
               ___awdiv (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _clcd_max_col (ARG)
               _clcd_max_row (ARG)
               _max_display_str (ARG)
               _max_display_support (ARG)
               _max_uid_range (ARG)
               _min_uid_range (ARG)
               _putch (ARG)
                 _EUSART1_Write
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _write_str
               _write_lcd_data
                 _delay
           _memset
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _reset_clcd
             _clear_display_array
               _memset
                 _strlen (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
               _reset_display_structure_count
                 _clear_display_structure
                   _memset
                     _strlen (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
             _reset_display_structure_count
               _clear_display_structure
                 _memset
                   _strlen (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
           _write_lcd_cmd
             _delay
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
       _max_display_str
       _max_display_support
       _max_uid_range
       _min_uid_range
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _puts
         _cputs
           _putch
             _EUSART1_Write
         _putch
           _EUSART1_Write
       _strcmp
       _update_string_data
         ___wmul
           ___awdiv (ARG)
         _conflict_check
           ___wmul
             ___awdiv (ARG)
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
         _copy_data
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _strcpy
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _make_display
           ___wmul
             ___awdiv (ARG)
           _display_text
             _char_enter_mode_left_to_right
               _write_lcd_cmd
                 _delay
             _set_cursor
               _write_lcd_cmd
                 _delay
             _write_lcd_cmd
               _delay
             _write_str
               _write_lcd_data
                 _delay
           _scroll_left_to_right
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
           _scroll_off
             ___wmul (ARG)
               ___awdiv (ARG)
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _scroll_right_to_left
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _strncpy (ARG)
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
   _console_init
     _clear_cmd_data
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _make_display
     ___wmul
       ___awdiv (ARG)
     _display_text
       _char_enter_mode_left_to_right
         _write_lcd_cmd
           _delay
       _set_cursor
         _write_lcd_cmd
           _delay
       _write_lcd_cmd
         _delay
       _write_str
         _write_lcd_data
           _delay
     _scroll_left_to_right
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _scroll_off
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _scroll_right_to_left
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strncpy (ARG)
     _strlen
       ___wmul (ARG)
         ___awdiv (ARG)
   _printf
     ___awdiv (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
     _clcd_max_col (ARG)
     _clcd_max_row (ARG)
     _max_display_str (ARG)
     _max_display_support (ARG)
     _max_uid_range (ARG)
     _min_uid_range (ARG)
     _putch (ARG)
       _EUSART1_Write
     _strlen (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _make_array *
         _heart_beat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     438      37       27.7%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      E      86       7       52.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4F       1       84.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     209      12        0.0%
DATA                 0      0     641       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Oct 28 19:32:22 2017

                       _eusart1TxBufferRemaining 00FD                            __end_of_parse_cmd_str 0D68  
                                   ___awdiv@sign 0015                            _init_clcd_cusotom_lcd 2866  
                            ___wmul@multiplicand 001A                                  _timer0ReloadVal 004E  
                                   __CFG_CP0$OFF 000000                                     __CFG_CP1$OFF 000000  
                                   __CFG_CP2$OFF 000000                                     __CFG_CP3$OFF 000000  
                                    __CFG_LVP$ON 000000                                              l193 33B2  
                                            l804 129E                                              _CMD 00CB  
                                   __CFG_CPB$OFF 000000                                     __CFG_CPD$OFF 000000  
                                ?_conflict_check 0036                                    ?_display_text 0001  
                                _timer1ReloadVal 00F9                                              _str 00EA  
                      collect_column@data_column 0038                                              prod 000FF3  
                               _LCD_16x2_DISPLAY 007E                                              tosl 000FFD  
                                            wreg 000FE8                                             l1187 2700  
                                           l1437 310A                                             l1447 3354  
                                           l1652 2AFE                                             l1718 315A  
                                           l1657 2BA2                                             l6011 2826  
                                           l4421 3488                                             l4431 34AE  
                                           l6009 280C                                             l6051 2EB2  
                                           l1699 31AA                                             l7003 0D3C  
                                           l6019 284A                                             l6045 2E80  
                                           l6221 2DC0                                             l6141 191C  
                                           l6109 1770                                             l6037 2D7A  
                                           l7021 1194                                             l7013 10FC  
                                           l6223 2DC8                                             l6215 2DAA  
                                           l6127 1864                                             l7031 121E  
                                           l6241 2E00                                             l6233 2DE8  
                                           l6225 2DCC                                             l6209 2D9A  
                                           l6321 3774                                             l6153 19C6  
                                           l7025 11E2                                             l7017 1146  
                                           l6251 3534                                             l6139 1916  
                                           l6155 19CA                                             l6163 1E58  
                                           l6411 1B40                                             l7051 134A  
                                           l7043 12E6                                             l6237 2DF2  
                                           l6333 3758                                             l6149 19C0  
                                           l6181 1FFA                                             l6421 1B9E  
                                           l6405 1B3C                                             l7037 1282  
                                           l7133 2052                                             l5623 3564  
                                           l6263 2ACC                                             l6255 2A20  
                                           l6503 2C9C                                             l6247 351E  
                                           l6175 1F70                                             l6183 1FFE  
                                           l6431 1BDA                                             l7071 13E4  
                                           l7047 1318                                             l7039 12B4  
                                           l7127 2036                                             l5641 33D8  
                                           l5801 2364                                             l6265 2AD4  
                                           l6505 2CC6                                             l6281 316E  
                                           l6273 311E                                             l6521 2B10  
                                           l6361 3782                                             l6345 3766  
                                           l6169 1EE4                                             l6417 1B6E  
                                           l6441 1C48                                             l7065 13B0  
                                           l7161 2122                                             l7153 20EE  
                                           l5707 3100                                             l5723 334A  
                                           l5715 332A                                             l5627 33A0  
                                           l5803 236A                                             l5619 3554  
                                           l6259 2A80                                             l6283 3176  
                                           l6275 3126                                             l5651 3228  
                                           l7075 1402                                             l7067 13C6  
                                           l7147 20AA                                             l7155 20F4  
                                           l7139 2070                                             l7323 3056  
                                           l6197 3688                                             l5717 3332  
                                           l5813 3078                                             l6461 2A10  
                                           l6453 29D0                                             l6509 2CF6  
                                           l6373 3790                                             l5645 3210  
                                           l6429 1BD4                                             l7181 21D2  
                                           l6543 25AE                                             l5719 3336  
                                           l5639 33D4                                             l5807 23B8  
                                           l5743 220E                                             l5815 307C  
                                           l6471 2406                                             l6447 295A  
                                           l5823 3370                                             l5655 322E  
                                           l5647 3218                                             l5911 1456  
                                           l7191 21EC                                             l6561 26B2  
                                           l6545 25B2                                             l5761 2278  
                                           l5809 23C0                                             l6537 2B96  
                                           l6529 2B50                                             l6721 0486  
                                           l6705 03F0                                             l6633 015E  
                                           l5657 3232                                             l5841 340A  
                                           l5833 33E2                                             l7169 2174  
                                           l6563 26B6                                             l6555 263A  
                                           l5763 22A2                                             l5771 22BE  
                                           l5747 221E                                             l6483 255A  
                                           l5843 340C                                             l6571 31B6  
                                           l5931 165E                                             l5915 1470  
                                           l5907 143C                                             l6395 1AB6  
                                           l7187 21E4                                             l7179 21BC  
                                           l5757 224E                                             l5749 2224  
                                           l5773 22F4                                             l6493 259E  
                                           l6485 255E                                             l6629 015A  
                                           l5829 338C                                             l6573 31BE  
                                           l5861 2F90                                             l6559 2664  
                                           l5695 30D8                                             l5783 231C  
                                           l5767 22B6                                             l6479 24F2  
                                           l5839 3404                                             l5935 16AA  
                                           l5927 15B0                                             l5919 148A  
                                           l5863 2F9A                                             l5855 2F68  
                                           l5951 0D9E                                             l5697 30E0  
                                           l5785 2320                                             l6497 2C62  
                                           l6833 0856                                             l6649 01F4  
                                           l5873 32EA                                             l6577 31F2  
                                           l5849 3710                                             l5699 30E4  
                                           l6667 02A2                                             l5867 2FAA  
                                           l5955 0DB8                                             l5947 0D84  
                                           l5797 2352                                             l6941 0B82  
                                           l6837 085A                                             l6829 07BE  
                                           l6781 064A                                             l5877 32F2  
                                           l5885 3306                                             l5973 102A  
                                           l5965 0F2E                                             l6839 085E  
                                           l6863 08DC                                             l5959 0DD2  
                                           l5897 329C                                             l6937 0B7E  
                                           l6945 0B86                                             l6953 0B8E  
                                           l6777 0646                                             l6785 064E  
                                           l5969 0FD8                                             l5899 32A4  
                                           l6859 08D8                                             l6867 08E0  
                                           l5995 2794                                             l6949 0B8A  
                                           l6957 0B92                                             l6993 0CCE  
                                           l6969 0BF8                                             l6997 0D32  
               __size_of_clear_display_structure 001E                                             STR_1 FFA1  
                                           STR_2 FF98                                             STR_3 FE07  
                                           STR_4 FE19                                             STR_5 FFF1  
                                           STR_6 FD4C                                             STR_7 FD80  
                                           STR_8 FD66                                             STR_9 FCCF  
                                           _LATA 000F89                                             _LATB 000F8A  
                                           _LATC 000F8B                                             _LATD 000F8C  
                                           _LATE 000F8D                                             u6210 2A42  
                                           u5410 37C4                                             u7110 083E  
                                           u5440 2270                                             u6400 2988  
                                           u6240 2ABC                                             u7040 0742  
                                           u6217 2A38                                             u5450 229A  
                                           u6235 2A7A                                             u5540 309E  
                                           u6420 29BE                                             u6237 2A70  
                                           u7117 0834                                             u5447 2266  
                                           u6407 297E                                             u6247 2AB2  
                                           u7047 0738                                             u6600 25D4  
                                           u5457 2290                                             u6450 2434  
                                           u5650 32CE                                             u7090 07FA  
                                           u5547 3094                                             u6427 29B4  
                                           i2l60 004E                                             u6620 25FC  
                                           u6540 2CF0                                             u7180 09A6  
                                           i2l62 005E                                             u6470 246A  
                                           u7350 0CB2                                             u6607 25CA  
                                           u6640 2630                                             u6480 24E4  
                                           u5920 2EA2                                             u6800 0216  
                                           u6457 242A                                             u5657 32C4  
                                           u7097 07F0                                             i2l66 006A  
                                           u6490 254C                          _TMR1_HasOverflowOccured 37BC  
                                           u6627 25F2                                             u6547 2CE6  
                                           u7187 099C                                             u6660 265C  
                                           u5940 2EE0                                             u7620 210A  
                                           u6477 2460                                             u7357 0CA8  
                                           u6647 2626                                             u6487 24DA  
                                           u5927 2E98                                             u6680 269A  
                                           u5960 1784                                             u6497 2542  
                                           u6690 26D8                                             u6667 2652  
                                           u5947 2ED6                                             u6950 057C  
                                           u6790 0214                                             u6687 2690  
                                           u6697 26CE                                             u6957 0572  
                                           _TMR1 000FCE                                             _TMR5 000F4F  
                                           _WPUB 000F61                                    _EUSART1_Write 339E  
                                  ?_make_display 0001                                             _atoi 25AC  
                                           _main 3016                                    ?_EUSART1_Read 0001  
                                _TMR0_StartTimer 3822                                             fsr0h 000FEA  
                                           fsr1h 000FE2                                             indf0 000FEF  
                                           fsr2h 000FDA                                             fsr0l 000FE9  
                                           indf1 000FE7                                             indf2 000FDF  
                                           fsr1l 000FE1                                             fsr2l 000FD9  
                                           btemp 0050                                             _puts 371A  
                                  __CFG_BORV$190 000000                                             prodh 000FF4  
                                           prodl 000FF3                                             start 00A6  
                                _timer5ReloadVal 00FB                                    __CFG_IESO$OFF 000000  
                           __end_of_clcd_max_col 3794                             __end_of_clcd_max_row 3786  
                                  ?_console_init 0001                                     ___param_bank 000000  
                                   collect_row@i 003D                          __end_of_TMR0_Initialize 344E  
                 ??_TMR0_DefaultInterruptHandler 0001                   __size_of_OSCILLATOR_Initialize 000E  
                  __end_of_OSCILLATOR_Initialize 37A2                                      make_array@i 0085  
                                          ?_atoi 001E                                            ?_main 0001  
                                __end_of___awdiv 2E0A                                   ??_display_text 001B  
                                          STR_10 FE4A                                            STR_11 FFEC  
                                          STR_12 FEAA                                            STR_20 FDCC  
                                          STR_21 FE5A                                            STR_13 FDE2  
                                          STR_30 FFAA                                            STR_22 FF00  
                                          STR_14 FE3A                                            STR_23 FFB2  
                                          STR_31 FF8F                                            STR_15 FE2A  
                                          STR_32 FFDF                                            STR_24 FFBA  
                                          STR_16 FF0B                                            STR_40 FEB9  
                                          STR_41 FFDF                                            STR_33 FFDF  
                                          STR_25 FFDF                                            STR_17 FE78  
                                          STR_42 FEB9                                            STR_34 FFD1  
                                          STR_26 FFC2                                            STR_50 FF74  
                                          STR_18 FCF6                                            STR_51 FF2C  
                                          STR_35 FFDF                                            STR_27 FFDF  
                                          STR_43 FF2C                                            STR_19 FE5A  
                                          STR_52 FFDF                                            STR_44 FFFD  
                                          STR_36 FF57                                            STR_28 FF4D  
                                          STR_60 FD31                                            STR_61 FFDF  
                                          STR_37 FFDF                                            STR_29 FFDF  
                                          STR_53 FF7D                                            STR_45 FF21  
                                          STR_70 FFDF                                            STR_38 FF61  
                                          STR_46 FED1                                            STR_54 FE86  
                                          STR_62 FD16                                            STR_71 FFDF  
                                          STR_63 FFDF                                            STR_39 FFDF  
                                          STR_47 FF6B                                            STR_55 FF37  
                                          STR_80 FDF0                                            STR_56 FFDF  
                                          STR_48 FFDF                                            STR_72 FFF6  
                                          STR_64 FDB3                                            STR_81 FE94  
                                          STR_65 FFDF                                            STR_57 FFDF  
                                          STR_49 FFDF                                            STR_73 FFF6  
                                          STR_74 FE9C                                            STR_82 FFBA  
                                          STR_90 FF57                                            STR_66 FF16  
                                          STR_58 FEA1                                            STR_59 FFDF  
                                          STR_83 FFC2                                            STR_75 FF4D  
                                          STR_91 FEF5                                            STR_67 FD9A  
                                          STR_92 FDF0                                            STR_84 FDF0  
                                          STR_76 FFDA                                            STR_68 FF42  
                                          STR_93 FE94                                            STR_85 FE94  
                                          STR_69 FF86                                            STR_77 FE94  
                                          STR_86 FFC2                                            STR_78 FF4D  
                                          STR_94 FF57                                            STR_79 FFBA  
                                          STR_95 FF61                                            STR_87 FF8F  
                                          STR_96 FE94                                            STR_88 FE94  
                                          STR_97 FF61                                            STR_89 FF8F  
                                          STR_98 FED1                                            STR_99 FE94  
                                _TMR1_StartTimer 381E                                            ?_puts 0014  
                                          _T0CON 000FD5                                  ___awdiv@divisor 0012  
                                          _T1CON 000FCD                                            _T5CON 000F4E  
                                 __CFG_DEBUG$OFF 000000                                  __end_of___lwdiv 3114  
                                __end_of___lwmod 335E                                            i2l205 3518  
                                ___awdiv@counter 0014                                            _TMR0H 000FD7  
                                          _TMR1H 000FCF                                            _TMR0L 000FD6  
                                          _TMR1L 000FCE                                            _TMR5H 000F50  
                                          _TMR5L 000F4F                                            _PORTD 000F83  
                                          _TRISA 000F92                                            _TRISB 000F93  
                                          _TRISC 000F94                                            _TRISD 000F95  
                                          _TRISE 000F96                        __size_of_init_CLCD_config 00B4  
              __size_of_TMR0_SetInterruptHandler 000A                                    __CFG_WRT0$OFF 000000  
                                  __CFG_WRT1$OFF 000000                                    __CFG_WRT2$OFF 000000  
                      ?_TMR0_SetInterruptHandler 0010                                    __CFG_WRT3$OFF 000000  
                           _EUSART1_Transmit_ISR 34EA                                   __CFG_EBTR0$OFF 000000  
                                 __CFG_FCMEN$OFF 000000                                   __CFG_EBTR1$OFF 000000  
                                 __CFG_EBTR2$OFF 000000                                   __CFG_EBTR3$OFF 000000  
                               __end_of_TMR0_ISR 374E                                    __CFG_WRTB$OFF 000000  
                                  __CFG_WRTC$OFF 000000                                    __CFG_WRTD$OFF 000000  
                                          _check 0080                                   __CFG_EBTRB$OFF 000000  
                                          _delay 31FE                                            _getch 3804  
                                __end_of_dpowers FCCF                          __end_of_max_display_str 3778  
                                          _cputs 351C                                  __end_of_isdigit 3690  
                             __CFG_MCLRE$EXTMCLR 000000                                            atoi@a 0023  
                                          atoi@s 001E                                            _putch 37E8  
                        __size_of_clear_cmd_data 0032                                   ?_EUSART1_Write 0001  
                        __end_of_TMR1_Initialize 3654                                            pclath 000FFA  
                                 ??_make_display 003C                                            tablat 000FF5  
                                 ??_EUSART1_Read 0010                                            puts@s 0014  
                                          status 000FD8                                   __CFG_HFOFST$ON 000000  
                                __end_of_strcspn 31B4                                  __end_of_strncmp 2AEE  
                                __end_of_strncpy 2FBC                             _scroll_right_to_left 0D68  
                                 __CFG_PBADEN$ON 000000                         scroll_right_to_left@line 003B  
                                _TMR5_Initialize 35C8                                   ??_console_init 002C  
                                __initialization 2EF0                                     __end_of_atoi 270A  
                     __end_of_EUSART1_Initialize 3484                                     __end_of_main 306E  
                                   __end_of_puts 372E                           ?_init_clcd_cusotom_lcd 0036  
                    ?_INTERRUPT_InterruptManager 0001                    __size_of_scroll_left_to_right 0338  
                               _cmd_consol_state 0082                                           ??_atoi 0020  
                                         ??_main 0041                                           ??_puts 0016  
                               ??_write_lcd_data 0017                                    __activetblptr 000003  
                                 __CFG_PLLCFG$ON 000000                              collect_row@data_row 0038  
                                  __delay_MS@val 0013                            ?_EUSART1_Transmit_ISR 0001  
                      ??_TMR1_HasOverflowOccured 0010                                  reply_to_host@ch 00E7  
                                         ?_delay 0010                          __end_of_TMR0_StartTimer 3826  
                                         ?_getch 0001                                           ?_cputs 0012  
                                         STR_100 FED1                                           STR_101 FF37  
                                         STR_102 FE94                                           STR_110 FEE9  
                                         STR_111 FFD8                                           STR_103 FF37  
                                         STR_120 FFDA                                           STR_104 FF42  
                                         STR_112 FEC5                                           STR_105 FFDA  
                                         STR_113 FFD8                                           STR_121 FFE6  
                                         STR_106 FFE6                                           STR_114 FE69  
                                         STR_122 FDF5                                           STR_115 FEAA  
                                         STR_107 FE94                                           STR_123 FFCA  
                                         STR_108 FF42                                           STR_116 FFFA  
                                         STR_117 FFFA                                           STR_109 FFD8  
                                         STR_118 FEDD                                           STR_119 FEAD  
                               ___awdiv@dividend 0010                                           _ANSELA 000F38  
                                         ?_putch 0001                                           _ANSELB 000F39  
                                         _ANSELC 000F3A                                           _ANSELD 000F3B  
                                         _ANSELE 000F3C                                           _T1GCON 000FCC  
                                         _T5GCON 000F4D                         __size_of_cmd_consol_task 01DC  
                                 __CFG_WDTEN$OFF 000000                                           i2l5321 359E  
                                         i2l5313 357E                                           i2l5307 3512  
                                         _RCREG1 000FAE                                           _RCSTA1 000FAB  
                                         _OSCCON 000FD3                                           _SPBRG1 000FAF  
                                         _TXREG1 000FAD                            ?_scroll_right_to_left 002C  
                                         _TXSTA1 000FAC                           __size_of_max_uid_range 000E  
                            _clear_display_array 3612                                   __CFG_XINST$OFF 000000  
                              collect_column@str 0036                          __end_of_TMR1_StartTimer 3822  
                                   ?_TMR1_Reload 0001                                           ___wmul 35A2  
                                      ??___awdiv 0014                                   __CFG_STVREN$ON 000000  
                                      ??___lwdiv 0014                             __size_of_collect_row 00DA  
                                      ??___lwmod 001B                                           _memcpy 335E  
                               ?_TMR0_Initialize 0001                                           _memset 354A  
                                         delay@i 0015                                           clear_0 2F18  
                                         clear_1 2F2A                                           clear_2 2F36  
                                         clear_3 2F42                                           clear_4 2F4E  
                               ___awdiv@quotient 0016                                           _printf 2204  
                                         _strchr 2E80                                           _strcmp 31B4  
                   scroll_off@display_char_count 002D                                           _strcpy 3292  
                                         _strlen 306E                                           _strtok 2AEE  
                                         _strspn 3114                                           _strstr 2C60  
                                _TMR5_StartTimer 3810                                           cputs@s 0012  
                                      ??_isdigit 0010                             ?_clear_display_array 0001  
                                   __mediumconst FCC4                                           tblptrh 000FF7  
                                         tblptrl 000FF6                                           tblptru 000FF8  
                          __end_of_TMR0_CallBack 3612                                  ??_EUSART1_Write 0010  
                        _clear_display_structure 3654         TMR0_SetInterruptHandler@InterruptHandler 0010  
                               ?_max_display_str 0001                                        ??_strcspn 001A  
                                _eusart1RxBuffer 0060                      __end_of_max_display_support 37DE  
                                      ??_strncmp 002A                                        ??_strncpy 0016  
                  __size_of_INTERRUPT_Initialize 0004                                 ??_collect_column 003A  
                                _eusart1TxBuffer 0068                                 ?_TMR1_Initialize 0001  
                        __end_of_TMR5_Initialize 35EE                  ??_reset_display_structure_count 002C  
                              _SYSTEM_Initialize 3690                            __size_of_clcd_max_col 000E  
                                     __accesstop 0060                            __size_of_clcd_max_row 000E  
                        __end_of__initialization 2F54                               __size_of__delay_MS 0044  
scroll_left_to_right@clcd_display_string_details 002C                               ?_SYSTEM_Initialize 0001  
                           __end_of_display_text 2D86                                    ___rparam_used 000001  
            __size_of_clcd_display_string_config 005A                                   __pcstackCOMRAM 0001  
                                   __pidataBANK0 37A2                              ??_SYSTEM_Initialize 0014  
                                      ?_TMR0_ISR 0001                                    __end_of_delay 3248  
                                  __end_of_getch 380A                                 ??_conflict_check 0038  
                                  __end_of_cputs 354A                             _display_struct_count 0074  
                           cmd_consol_task@_1778 0078                                    __end_of_putch 37F2  
                           __end_of_make_display 2028                             __end_of_EUSART1_Read 34B8  
                                 collect_row@row 003F                                   collect_row@str 0036  
                     __end_of_update_string_data 1C4C                           __size_of_write_lcd_cmd 001C  
                         ??_EUSART1_Transmit_ISR 0001                            __end_of_reply_to_host 1420  
                          ??_clear_display_array 002C                  update_string_data@exist_uid_idx 00DF  
                               _init_CLCD_config 2BAC                                    _max_uid_range 375C  
                         __size_of_min_uid_range 000E                      __end_of_EUSART1_Receive_ISR 35A2  
                                   _clcd_max_col 3786                                     _clcd_max_row 3778  
                           __end_of_console_init 2E80                                          ??_delay 0012  
                                        ??_getch 0011                                 ?_TMR0_StartTimer 0001  
                                        ??_cputs 0014                        __end_of_SYSTEM_Initialize 36AE  
                                 _clear_cmd_data 34B8                                          ??_putch 0011  
                                  _eusart1RxHead 0045                                    _eusart1TxHead 0047  
                             __size_of_copy_data 01FA                                    _eusart1RxTail 0046  
                                     __pbssBANK0 0060                                       __pbssBANK1 0100  
                                     __pbssBANK2 0200                                    _eusart1TxTail 0048  
                         ??_scroll_right_to_left 002E                                       _data_count 0043  
                                     __pnvCOMRAM 004E            scroll_off@clcd_display_string_details 0024  
                              ??_cmd_consol_task 00E8                               __CFG_CCP2MX$PORTC1 000000  
               __end_of_TMR0_SetInterruptHandler 37FC                          __size_of_TMR0_StopTimer 0004  
                                        ?___wmul 0018                                 ?_TMR1_StartTimer 0001  
                                     ??_TMR0_ISR 0002                          __end_of_TMR5_StartTimer 3816  
                             __CFG_CCP3MX$PORTB5 000000                  ??_char_enter_mode_left_to_right 0018  
                                        ?_memcpy 0010                                          ?_memset 0024  
                                        ?_printf 0024                                          ?_strchr 0010  
                                        ?_strcmp 0010                                          ?_strcpy 0010  
                                        ?_strlen 001E                                       _heart_beat 36AE  
                        __size_of_TMR1_StopTimer 0004                                          ?_strtok 001D  
                                        ?_strspn 0016                                          ?_strstr 002D  
                              __end_of__delay_MS 331C                                   ?_max_uid_range 0001  
                      ??_clear_display_structure 002C                                          _OSCCON2 000FD2  
                         __end_of_clear_cmd_data 34EA                                          _OSCTUNE 000F9B  
                                        _SPBRGH1 000FB0                           copy_data@clcd_str_data 0036  
                               write_lcd_cmd@cmd 0017                                 _print_data_ready 0076  
                                     _make_array 37C8                           __size_of_parse_cmd_str 0CBE  
                               ?_TMR5_Initialize 0001                                    _write_lcd_cmd 36CC  
                                __CFG_PWRTEN$OFF 000000                               __size_of_write_str 003A  
          __end_of_reset_display_structure_count 373E           __size_of_reset_display_structure_count 0010  
                  _reset_display_structure_count 372E                                          __Hparam 0000  
                        ??_init_clcd_cusotom_lcd 0037                                    _min_uid_range 374E  
                                        __Lparam 0000  scroll_right_to_left@clcd_display_string_details 002C  
                                        ___awdiv 2D86                                  __size_of___wmul 0026  
                                        ___lwdiv 30C2                                          ___lwmod 331C  
             __end_of_clcd_display_string_config 3016                       _clcd_display_string_config 2FBC  
                                  copy_data@data 0038                                __end_of_copy_data 1E46  
                           __size_of_TMR1_Reload 000C                                          __pcinit 2EF0  
                                __size_of_memcpy 0040                                  __size_of_memset 002C  
                                        __ramtop 1000                                          __ptext0 3016  
                                        __ptext1 2E0A                                          __ptext2 34B8  
                                        __ptext3 2028                                          __ptext4 10D2  
                                        __ptext5 19E8                                          __ptext6 1E46  
                                        __ptext7 0D68                                          __ptext8 2F5E  
                                        __ptext9 270A                                  __size_of_printf 01D8  
                                        _display 0083                                        _T0CONbits 000FD5  
                        __size_of_TMR5_StopTimer 0006                                  __size_of_strchr 0070  
                                __size_of_strcmp 004A                                  __size_of_strcpy 0046  
                                __size_of_strlen 0054                                        _T1CONbits 000FCD  
                                __size_of_strtok 00BE                                  __size_of_strspn 0050  
                                __size_of_strstr 00A0                                          _dpowers FCC5  
                          _OSCILLATOR_Initialize 3794                                       delay@delay 0010  
                                        _isdigit 3672                               _EUSART1_Initialize 344E  
                       ??_PIN_MANAGER_Initialize 0010                                        _T5CONbits 000F4E  
                                ?_clear_cmd_data 0001                       __size_of_SYSTEM_Initialize 001E  
                                        _strcspn 3164                                          _strncmp 2A1E  
                                        _strncpy 2F5E                            __size_of_display_text 0086  
                           end_of_initialization 2F54                     __end_of_scroll_left_to_right 1758  
                            ?_EUSART1_Initialize 0001                                          memcpy@d 0016  
                                        memcpy@n 0014                                          memcpy@s 0018  
                                 ?_write_lcd_cmd 0001                                      scroll_off@i 0031  
                                    scroll_off@j 002F                                      scroll_off@k 002A  
                                        memset@c 0026                                          memset@n 0028  
                                        memset@p 002A                                 cmd_consol_task@i 007A  
                                 ?_min_uid_range 0001                  __end_of_clear_display_structure 3672  
                                 parse_cmd_str@i 0178                                       _reset_clcd 37DE  
                                     _set_cursor 3704                                          printf@c 0035  
                                        printf@f 0024                            __size_of_make_display 01E2  
                                     _scroll_off 270A                                          postdec1 000FE5  
                                        postdec2 000FDD                                          postinc0 000FEE  
                                        postinc2 000FDE                            __size_of_EUSART1_Read 0034  
                                   _conflict_arr 00B7                                 ?_TMR5_StartTimer 0001  
                           ??_EUSART1_Initialize 0010                                          strcmp@r 0015  
                                  _parse_cmd_str 00AA                                          strlen@s 001E  
                                ??_max_uid_range 0010                                          strspn@i 001B  
                       _TMR0_SetInterruptHandler 37F2                                        _PORTAbits 000F80  
                                      _PORTDbits 000F83                            __size_of_console_init 0076  
                                    ?_heart_beat 0001                            _TMR5_InterruptHandler 0072  
          __end_of_char_enter_mode_left_to_right 3804           __size_of_char_enter_mode_left_to_right 0008  
                  _char_enter_mode_left_to_right 37FC                                     _display_text 2D00  
                              __end_of_write_str 3416               init_clcd_cusotom_lcd@clcd_init_col 0036  
                             write_lcd_data@data 0017               init_clcd_cusotom_lcd@clcd_init_row 0037  
                            EUSART1_Write@txData 0010                                      ?_make_array 0001  
                                   _make_display 1E46                                     _EUSART1_Read 3484  
                       __end_of_init_CLCD_config 2C60                                    ??_collect_row 003A  
                              _lcd_display_array 0100                                   _TMR0_StopTimer 381A  
                                   _console_init 2E0A                                make_display@count 003F  
                   __end_of_INTERRUPT_Initialize 382A                                     write_str@str 0018  
                                 ?_parse_cmd_str 00DA                   ?_reset_display_structure_count 0001  
                                 __end_of___wmul 35C8                                  collect_column@i 003E  
                              __size_of_TMR0_ISR 0010                                   _TMR1_StopTimer 3816  
                                 __end_of_memcpy 339E                           ?_OSCILLATOR_Initialize 0001  
                                 __end_of_memset 3576                         ?_TMR1_HasOverflowOccured 0001  
                                 __end_of_printf 23DC                           conflict_check@conflict 003C  
                                 __end_of_strchr 2EF0                                   __end_of_strcmp 31FE  
                                 __end_of_strcpy 32D8                                   __end_of_strlen 30C2  
                                 __end_of_strtok 2BAC                                   __end_of_strspn 3164  
                                 __end_of_strstr 2D00                              start_initialization 2EF0  
                           set_cursor@col_number 0018                         __size_of_TMR0_Initialize 0038  
                __size_of_PIN_MANAGER_Initialize 004A                                  _cmd_consol_task 2028  
                                    putch@txData 0011                                  ??_write_lcd_cmd 0017  
                          __end_of_EUSART1_Write 33DC                          __size_of_write_lcd_data 001C  
                           collect_column@column 003D                               _update_string_data 19E8  
                                ??_min_uid_range 0010                              __size_of_heart_beat 001E  
                         __end_of_TMR0_StopTimer 381E                     __size_of_max_display_support 000A  
                       __size_of_max_display_str 000E                                      ?_reset_clcd 0001  
                            ?_update_string_data 00DA                                    _clcd_init_col 0081  
                       __size_of_TMR1_Initialize 0020                                      ?_set_cursor 0018  
                                  _clcd_init_row 0041                                      ?_scroll_off 0024  
                                       ??___wmul 001C                           __size_of_TMR0_CallBack 0024  
                         __end_of_TMR1_StopTimer 381A                                      __pdataBANK0 00EA  
                    __end_of_clear_display_array 3634                                         ??_memcpy 0016  
                                       ??_memset 002A                              update_string_data@i 00E2  
                           _scroll_left_to_right 1420                                   scroll_off@line 002C  
                            __end_of_collect_row 2A1E                              __size_of_make_array 000C  
                                       ??_printf 002C                                   _TMR5_StopTimer 380A  
                                       ??_strchr 0014                                         ??_strcmp 0014  
                                       ??_strcpy 0014                                         ??_strlen 0020  
                                       ??_strtok 0021                                         ??_strspn 001A  
                                 _eusart1RxCount 0044                                         ??_strstr 0031  
                   ??_clcd_display_string_config 0036                                      __pbssBIGRAM 0296  
                                    __pbssCOMRAM 0041                             ??_update_string_data 00DC  
                  __size_of_EUSART1_Transmit_ISR 0032                                    __pcstackBANK0 00DA  
                                  __pcstackBANK1 0178                                  __delay_MS@delay 0010  
                                      __delay_MS 32D8                   ?_char_enter_mode_left_to_right 0001  
                                   _isdigit$2188 0011                     __size_of_EUSART1_Receive_ISR 002C  
                          _TMR0_InterruptHandler 00F7                                        __pnvBANK0 00F7  
                  __size_of_scroll_right_to_left 036A                         __size_of_TMR0_StartTimer 0004  
                                ?_TMR0_StopTimer 0001                           __size_of_reply_to_host 034E  
                               ___lwdiv@dividend 0010                           _PIN_MANAGER_Initialize 3248  
                                conflict_check@i 003D                                  ??_parse_cmd_str 00DC  
                 __size_of_init_clcd_cusotom_lcd 00DE                                        __pintcode 0008  
                        __size_of_collect_column 01D0                    __end_of_init_clcd_cusotom_lcd 2944  
                                  __pmediumconst FCC4                                         ?___awdiv 0010  
                                       ?___lwdiv 0010                                         ?___lwmod 0017  
                __end_of_TMR1_HasOverflowOccured 37C8                                  ?_TMR1_StopTimer 0001  
                         __end_of_TMR5_StopTimer 3810                      update_string_data@end_point 00E1  
                          ?_scroll_left_to_right 002C                      ?_clcd_display_string_config 0001  
                   ??_INTERRUPT_InterruptManager 0002                                 __CFG_PRICLKEN$ON 000000  
                               ??_clear_cmd_data 002C                                parse_cmd_str@temp 0184  
                        __end_of_cmd_consol_task 2204                                        _copy_data 1C4C  
                                       _BAUDCON1 000FB8                         __size_of_TMR1_StartTimer 0004  
                                       ?_isdigit 0001                          __size_of_conflict_check 0290  
                            __size_of_reset_clcd 000A                                       ?__delay_MS 0010  
                               ___lwdiv@quotient 0015                                 _clcd_config_data 0049  
                                 __size_of_delay 004A                              __size_of_set_cursor 0016  
                                 __size_of_getch 0006                                   __size_of_cputs 002E  
                                  _TMR0_CallBack 35EE                                         ?_strcspn 0016  
                                       ?_strncmp 0024                              __size_of_scroll_off 015C  
                                       ?_strncpy 0010                                   __size_of_putch 000A  
                           _INTERRUPT_Initialize 3826                    conflict_check@new_start_point 0036  
                           set_cursor@row_number 0019                                ??_TMR0_Initialize 0012  
                            _conflict_data_count 0042                                   ___wmul@product 001C  
                                       _LATEbits 000F8D                              parse_cmd_str@i_1688 017D  
                            parse_cmd_str@i_1697 0179                                      strncpy@from 0012  
                                       _PIE1bits 000F9D                                      strncpy@size 0014  
            __size_of_INTERRUPT_InterruptManager 009E                                        _valid_cmd 0084  
                     ??_TMR0_SetInterruptHandler 0012                                         i2u352_40 36B6  
                                       i2u352_46 36B8                                         i2u416_48 35FE  
                                       _PIR1bits 000F9E                                         _PIR5bits 000F7E  
                                    _collect_row 2944                         __size_of_TMR5_Initialize 0026  
                                       _RCONbits 000FD0                                    ??_TMR1_Reload 0010  
                               __CFG_WDTPS$32768 000000                              parse_cmd_str@column 017B  
                                       _TMR0_ISR 373E                                ??_max_display_str 0010  
                            parse_cmd_str@scroll 017F                                  ?_TMR5_StopTimer 0001  
                       ?_clear_display_structure 0001                                ??_TMR1_Initialize 0010  
                                   ??_heart_beat 0001                                ___wmul@multiplier 0018  
                                     printf@flag 002D                                       ?_copy_data 0036  
                                     printf@prec 002E                                    _reply_to_host 10D2  
                                 ?_TMR0_CallBack 0001                                      _INTCON2bits 000FF1  
                                      copy_data0 2F04                                        _write_str 33DC  
                          ?_INTERRUPT_Initialize 0001                                   _write_lcd_data 36E8  
                                   ??_make_array 0002                            EUSART1_Read@readValue 0010  
                             __end_of_heart_beat 36CC                                         __Hrparam 0000  
                       scroll_left_to_right@line 0036                                ?_init_CLCD_config 0001  
                  update_string_data@start_point 00E0                                         __Lrparam 0000  
                             __CFG_BOREN$SBORDIS 000000                               ??_init_CLCD_config 0036  
                              __CFG_P2BMX$PORTD2 000000                           ??_scroll_left_to_right 002E  
                        ??_OSCILLATOR_Initialize 0010                                ??_TMR0_StartTimer 0010  
                               __size_of___awdiv 0084                      __size_of_EUSART1_Initialize 0036  
                               __size_of___lwdiv 0052                                 __size_of___lwmod 0042  
                    _clcd_display_string_details 0296                               __end_of_make_array 37D4  
                            __end_of_TMR1_Reload 37BC                            _TMR1_InterruptHandler 0070  
                          __end_of_max_uid_range 376A                                   ?_reply_to_host 0001  
                               ?_cmd_consol_task 0001                              _max_display_support 37D4  
                       __size_of_TMR5_StartTimer 0006                                    ?_clcd_max_col 0001  
                                       _cmd_data 0086                                    ?_clcd_max_row 0001  
                               __size_of_isdigit 001E                                  ___lwdiv@divisor 0012  
                                    ??__delay_MS 0012                           __end_of_write_lcd_data 3704  
                                ___lwdiv@counter 0014                                         __ptext10 1420  
                                       __ptext11 2D00                                         __ptext20 375C  
                                       __ptext12 3704                                         __ptext21 37D4  
                                       __ptext13 37FC                                       _T1GCONbits 000FCC  
                                       __ptext30 2FBC                                         __ptext22 376A  
                                       __ptext14 1C4C                                         __ptext31 33DC  
                                       __ptext23 2866                                         __ptext15 1758  
                                       __ptext40 3778                                         __ptext32 36E8  
                                       __ptext24 2BAC                                         __ptext16 31B4  
                                       __ptext41 3786                                         __ptext33 31FE  
                                       __ptext25 36CC                                         __ptext17 371A  
                                       __ptext50 354A                                         __ptext42 00AA  
                                       __ptext34 335E                                         __ptext26 37DE  
                                       __ptext18 351C                                         __ptext51 2944  
                                       __ptext43 2AEE                                         __ptext35 32D8  
                                       __ptext27 3612                                         __ptext19 374E  
                                       __ptext60 3672                                         __ptext52 23DC  
                                       __ptext44 3114                                         __ptext36 3816  
                                       __ptext28 372E                                         __ptext61 35A2  
                                       __ptext53 306E                                         __ptext45 3164  
                                       __ptext37 37B0                                         __ptext29 3654  
                                       __ptext70 381E                                         __ptext62 3804  
                                       __ptext54 2204                                         __ptext46 2C60  
                                       __ptext38 37BC                                         __ptext71 3416  
                                       __ptext63 3484                                         __ptext55 37E8  
                                       __ptext47 2A1E                                         __ptext39 2D86  
                                       __ptext80 35EE                                         __ptext72 3822  
                                       __ptext64 380A                                         __ptext56 339E  
                                       __ptext48 2E80                                         __ptext81 382A  
                                       __ptext73 37F2                                         __ptext65 381A  
                                       __ptext57 331C                                         __ptext49 3292  
                                       __ptext82 37C8                                         __ptext74 3248  
                                       __ptext66 3690                                         __ptext58 30C2  
                                       __ptext83 36AE                                         __ptext75 3794  
                                       __ptext67 35C8                                         __ptext59 25AC  
                                       __ptext84 34EA                                         __ptext76 3826  
                                       __ptext68 3810                                         __ptext85 3576  
                                       __ptext77 344E                                         __ptext69 3634  
                                       __ptext86 0000                                         __ptext79 373E  
                                     ?_write_str 0018                                 parse_cmd_str@uid 017E  
                               parse_cmd_str@ptr 0182                                 parse_cmd_str@row 017A  
                               parse_cmd_str@str 00DA                                ??_TMR1_StartTimer 0010  
                               __size_of_strcspn 0050                                 __size_of_strncmp 00D0  
                               __size_of_strncpy 005E                                       strcpy@from 0012  
               __size_of_TMR1_HasOverflowOccured 000C                                    __size_of_atoi 015E  
                                  __size_of_main 0058                                       _T5GCONbits 000F4D  
                                  __size_of_puts 0014                                         delay@val 0013  
                                     strncmp@len 0028             __end_of_TMR0_DefaultInterruptHandler 382C  
          __size_of_TMR0_DefaultInterruptHandler 0002                     _TMR0_DefaultInterruptHandler 382A  
                           ?_max_display_support 0010                                     ??_reset_clcd 002C  
                                   ??_set_cursor 0019                                   _collect_column 23DC  
                                   ??_scroll_off 0026                                         _uart_str 0200  
                                       int$flags 0050                                         atoi@sign 0022  
             __end_of_INTERRUPT_InterruptManager 00A6                       _INTERRUPT_InterruptManager 0008  
                                      printf@val 0033                                         _str_data 0150  
                            _EUSART1_Receive_ISR 3576                                       write_str@i 001A  
                              ??_TMR5_Initialize 0010                                      ??_copy_data 003A  
                                 ??_clcd_max_col 0010                                       _INTCONbits 000FF2  
                                 ??_clcd_max_row 0010                                  ??_TMR0_CallBack 0002  
                                 _conflict_check 1758                                         memcpy@d1 0010  
                                       memcpy@s1 0012                                         isdigit@c 0012  
                                ?_write_lcd_data 0001                           ??_INTERRUPT_Initialize 0010  
                                       memset@p1 0024                               __end_of_reset_clcd 37E8  
                             __end_of_set_cursor 371A                           update_string_data@data 00DA  
                              cmd_consol_task@ch 00E9                                         intlevel2 0000  
                             __end_of_scroll_off 2866                                 ??_TMR0_StopTimer 0010  
                           ?_EUSART1_Receive_ISR 0001                                        strchr@chr 0012  
                          __end_of_write_lcd_cmd 36E8                                 ___lwmod@dividend 0017  
                                      strchr@ptr 0010                          ?_PIN_MANAGER_Initialize 0001  
                          ??_max_display_support 0012                                       _RCSTA1bits 000FAB  
                                      strcspn@s1 0016                                        strcspn@s2 0018  
                          __end_of_min_uid_range 375C                           __end_of_collect_column 25AC  
                   __end_of_EUSART1_Transmit_ISR 351C                                        strncmp@s1 0024  
                                      strncmp@s2 0026                                 ??_TMR1_StopTimer 0010  
                                      strncpy@cp 0016                                        strncpy@to 0010  
                  ?_TMR0_DefaultInterruptHandler 0001                                      _TMR1_Reload 37B0  
                                       printf@ap 0031                                         printf@cp 002F  
                              scroll_off@str_len 002E                           __size_of_EUSART1_Write 003E  
                                ??_reply_to_host 00E4                      conflict_check@new_end_point 0037  
                   __end_of_scroll_right_to_left 10D2                           __end_of_conflict_check 19E8  
                                       strcmp@s1 0010                                         strcmp@s2 0012  
                                ___lwmod@divisor 0019                                  _TMR0_Initialize 3416  
                                       strcpy@cp 0014                                         strlen@cp 0022  
                                       strcpy@to 0010                                  ___lwmod@counter 001B  
                                       strcspn@i 001B                     __size_of_clear_display_array 0022  
                          parse_cmd_str@uid_1713 017C                            parse_cmd_str@uid_1685 0180  
                          parse_cmd_str@uid_1696 0181                      __size_of_update_string_data 0264  
                              __CFG_T3CMX$PORTC0 000000                      conflict_check@exist_uid_idx 003B  
                                       strtok@s1 001D                                         strtok@s2 001F  
                                       strspn@s1 0016                                         strspn@s2 0018  
                                       strtok@sp 007C                                         strstr@s1 002D  
                                       strstr@s2 002F                                 _LCD_20x4_DISPLAY 007F  
                                    ??_write_str 001A                                ??_TMR5_StartTimer 0010  
                          ??_EUSART1_Receive_ISR 0001                   __end_of_PIN_MANAGER_Initialize 3292  
                              __CFG_FOSC$INTIO67 000000                                  _max_display_str 376A  
                                ?_collect_column 0036                                  _TMR1_Initialize 3634  
                               ??_TMR5_StopTimer 0010                                     ?_collect_row 0036  



Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Oct 28 19:12:39 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F46K22 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK0
   146  0037B0                     __pidataBANK0:
   147                           	opt stack 0
   148                           
   149                           ;initializer for _str
   150  0037B0  49                 	db	73
   151  0037B1  4E                 	db	78
   152  0037B2  49                 	db	73
   153  0037B3  54                 	db	84
   154  0037B4  5F                 	db	95
   155  0037B5  53                 	db	83
   156  0037B6  55                 	db	85
   157  0037B7  43                 	db	67
   158  0037B8  43                 	db	67
   159  0037B9  45                 	db	69
   160  0037BA  53                 	db	83
   161  0037BB  53                 	db	83
   162  0037BC  00                 	db	0
   163                           
   164                           	psect	mediumconst
   165  00FCC4                     __pmediumconst:
   166                           	opt stack 0
   167  00FCC4  00                 	db	0
   168  00FCC5                     _dpowers:
   169                           	opt stack 0
   170  00FCC5  0001               	dw	1
   171  00FCC7  000A               	dw	10
   172  00FCC9  0064               	dw	100
   173  00FCCB  03E8               	dw	1000
   174  00FCCD  2710               	dw	10000
   175  00FCCF                     __end_of_dpowers:
   176                           	opt stack 0
   177  00FCCF                     STR_9:
   178  00FCCF  55                 	db	85	;'U'
   179  00FCD0  49                 	db	73	;'I'
   180  00FCD1  44                 	db	68	;'D'
   181  00FCD2  20                 	db	32
   182  00FCD3  3D                 	db	61	;'='
   183  00FCD4  20                 	db	32
   184  00FCD5  25                 	db	37
   185  00FCD6  63                 	db	99	;'c'
   186  00FCD7  2C                 	db	44
   187  00FCD8  20                 	db	32
   188  00FCD9  73                 	db	115	;'s'
   189  00FCDA  74                 	db	116	;'t'
   190  00FCDB  61                 	db	97	;'a'
   191  00FCDC  72                 	db	114	;'r'
   192  00FCDD  74                 	db	116	;'t'
   193  00FCDE  5F                 	db	95	;'_'
   194  00FCDF  70                 	db	112	;'p'
   195  00FCE0  74                 	db	116	;'t'
   196  00FCE1  20                 	db	32
   197  00FCE2  3D                 	db	61	;'='
   198  00FCE3  20                 	db	32
   199  00FCE4  25                 	db	37
   200  00FCE5  64                 	db	100	;'d'
   201  00FCE6  2C                 	db	44
   202  00FCE7  20                 	db	32
   203  00FCE8  65                 	db	101	;'e'
   204  00FCE9  6E                 	db	110	;'n'
   205  00FCEA  64                 	db	100	;'d'
   206  00FCEB  5F                 	db	95	;'_'
   207  00FCEC  70                 	db	112	;'p'
   208  00FCED  74                 	db	116	;'t'
   209  00FCEE  20                 	db	32
   210  00FCEF  3D                 	db	61	;'='
   211  00FCF0  20                 	db	32
   212  00FCF1  25                 	db	37
   213  00FCF2  64                 	db	100	;'d'
   214  00FCF3  0D                 	db	13
   215  00FCF4  0A                 	db	10
   216  00FCF5  00                 	db	0
   217  00FCF6                     STR_18:
   218  00FCF6  73                 	db	115	;'s'
   219  00FCF7  74                 	db	116	;'t'
   220  00FCF8  72                 	db	114	;'r'
   221  00FCF9  6C                 	db	108	;'l'
   222  00FCFA  65                 	db	101	;'e'
   223  00FCFB  6E                 	db	110	;'n'
   224  00FCFC  20                 	db	32
   225  00FCFD  3D                 	db	61	;'='
   226  00FCFE  20                 	db	32
   227  00FCFF  25                 	db	37
   228  00FD00  64                 	db	100	;'d'
   229  00FD01  2C                 	db	44
   230  00FD02  20                 	db	32
   231  00FD03  69                 	db	105	;'i'
   232  00FD04  3D                 	db	61	;'='
   233  00FD05  25                 	db	37
   234  00FD06  64                 	db	100	;'d'
   235  00FD07  2C                 	db	44
   236  00FD08  20                 	db	32
   237  00FD09  63                 	db	99	;'c'
   238  00FD0A  6F                 	db	111	;'o'
   239  00FD0B  6C                 	db	108	;'l'
   240  00FD0C  2E                 	db	46
   241  00FD0D  2E                 	db	46
   242  00FD0E  20                 	db	32
   243  00FD0F  3D                 	db	61	;'='
   244  00FD10  20                 	db	32
   245  00FD11  25                 	db	37
   246  00FD12  64                 	db	100	;'d'
   247  00FD13  0D                 	db	13
   248  00FD14  0A                 	db	10
   249  00FD15  00                 	db	0
   250  00FD16                     STR_62:
   251  00FD16  63                 	db	99	;'c'
   252  00FD17  6D                 	db	109	;'m'
   253  00FD18  64                 	db	100	;'d'
   254  00FD19  5F                 	db	95	;'_'
   255  00FD1A  64                 	db	100	;'d'
   256  00FD1B  61                 	db	97	;'a'
   257  00FD1C  74                 	db	116	;'t'
   258  00FD1D  61                 	db	97	;'a'
   259  00FD1E  2E                 	db	46
   260  00FD1F  73                 	db	115	;'s'
   261  00FD20  74                 	db	116	;'t'
   262  00FD21  61                 	db	97	;'a'
   263  00FD22  72                 	db	114	;'r'
   264  00FD23  74                 	db	116	;'t'
   265  00FD24  5F                 	db	95	;'_'
   266  00FD25  63                 	db	99	;'c'
   267  00FD26  6F                 	db	111	;'o'
   268  00FD27  6C                 	db	108	;'l'
   269  00FD28  20                 	db	32
   270  00FD29  3D                 	db	61	;'='
   271  00FD2A  20                 	db	32
   272  00FD2B  25                 	db	37
   273  00FD2C  64                 	db	100	;'d'
   274  00FD2D  2C                 	db	44
   275  00FD2E  0D                 	db	13
   276  00FD2F  0A                 	db	10
   277  00FD30  00                 	db	0
   278  00FD31                     STR_60:
   279  00FD31  63                 	db	99	;'c'
   280  00FD32  6D                 	db	109	;'m'
   281  00FD33  64                 	db	100	;'d'
   282  00FD34  5F                 	db	95	;'_'
   283  00FD35  64                 	db	100	;'d'
   284  00FD36  61                 	db	97	;'a'
   285  00FD37  74                 	db	116	;'t'
   286  00FD38  61                 	db	97	;'a'
   287  00FD39  2E                 	db	46
   288  00FD3A  73                 	db	115	;'s'
   289  00FD3B  74                 	db	116	;'t'
   290  00FD3C  61                 	db	97	;'a'
   291  00FD3D  72                 	db	114	;'r'
   292  00FD3E  74                 	db	116	;'t'
   293  00FD3F  5F                 	db	95	;'_'
   294  00FD40  72                 	db	114	;'r'
   295  00FD41  6F                 	db	111	;'o'
   296  00FD42  77                 	db	119	;'w'
   297  00FD43  20                 	db	32
   298  00FD44  3D                 	db	61	;'='
   299  00FD45  20                 	db	32
   300  00FD46  25                 	db	37
   301  00FD47  64                 	db	100	;'d'
   302  00FD48  2C                 	db	44
   303  00FD49  0D                 	db	13
   304  00FD4A  0A                 	db	10
   305  00FD4B  00                 	db	0
   306  00FD4C                     STR_6:
   307  00FD4C  64                 	db	100	;'d'
   308  00FD4D  69                 	db	105	;'i'
   309  00FD4E  73                 	db	115	;'s'
   310  00FD4F  70                 	db	112	;'p'
   311  00FD50  6C                 	db	108	;'l'
   312  00FD51  61                 	db	97	;'a'
   313  00FD52  79                 	db	121	;'y'
   314  00FD53  5F                 	db	95	;'_'
   315  00FD54  63                 	db	99	;'c'
   316  00FD55  68                 	db	104	;'h'
   317  00FD56  61                 	db	97	;'a'
   318  00FD57  72                 	db	114	;'r'
   319  00FD58  5F                 	db	95	;'_'
   320  00FD59  63                 	db	99	;'c'
   321  00FD5A  6F                 	db	111	;'o'
   322  00FD5B  75                 	db	117	;'u'
   323  00FD5C  6E                 	db	110	;'n'
   324  00FD5D  74                 	db	116	;'t'
   325  00FD5E  20                 	db	32
   326  00FD5F  3D                 	db	61	;'='
   327  00FD60  20                 	db	32
   328  00FD61  25                 	db	37
   329  00FD62  64                 	db	100	;'d'
   330  00FD63  0D                 	db	13
   331  00FD64  0A                 	db	10
   332  00FD65  00                 	db	0
   333  00FD66                     STR_8:
   334  00FD66  65                 	db	101	;'e'
   335  00FD67  78                 	db	120	;'x'
   336  00FD68  5F                 	db	95	;'_'
   337  00FD69  73                 	db	115	;'s'
   338  00FD6A  70                 	db	112	;'p'
   339  00FD6B  20                 	db	32
   340  00FD6C  3C                 	db	60	;'<'
   341  00FD6D  3D                 	db	61	;'='
   342  00FD6E  20                 	db	32
   343  00FD6F  6E                 	db	110	;'n'
   344  00FD70  65                 	db	101	;'e'
   345  00FD71  77                 	db	119	;'w'
   346  00FD72  5F                 	db	95	;'_'
   347  00FD73  65                 	db	101	;'e'
   348  00FD74  70                 	db	112	;'p'
   349  00FD75  20                 	db	32
   350  00FD76  3C                 	db	60	;'<'
   351  00FD77  3D                 	db	61	;'='
   352  00FD78  65                 	db	101	;'e'
   353  00FD79  78                 	db	120	;'x'
   354  00FD7A  5F                 	db	95	;'_'
   355  00FD7B  65                 	db	101	;'e'
   356  00FD7C  70                 	db	112	;'p'
   357  00FD7D  0D                 	db	13
   358  00FD7E  0A                 	db	10
   359  00FD7F  00                 	db	0
   360  00FD80                     STR_7:
   361  00FD80  65                 	db	101	;'e'
   362  00FD81  78                 	db	120	;'x'
   363  00FD82  5F                 	db	95	;'_'
   364  00FD83  73                 	db	115	;'s'
   365  00FD84  70                 	db	112	;'p'
   366  00FD85  20                 	db	32
   367  00FD86  3C                 	db	60	;'<'
   368  00FD87  3D                 	db	61	;'='
   369  00FD88  20                 	db	32
   370  00FD89  6E                 	db	110	;'n'
   371  00FD8A  65                 	db	101	;'e'
   372  00FD8B  77                 	db	119	;'w'
   373  00FD8C  5F                 	db	95	;'_'
   374  00FD8D  73                 	db	115	;'s'
   375  00FD8E  70                 	db	112	;'p'
   376  00FD8F  20                 	db	32
   377  00FD90  3C                 	db	60	;'<'
   378  00FD91  3D                 	db	61	;'='
   379  00FD92  65                 	db	101	;'e'
   380  00FD93  78                 	db	120	;'x'
   381  00FD94  5F                 	db	95	;'_'
   382  00FD95  65                 	db	101	;'e'
   383  00FD96  70                 	db	112	;'p'
   384  00FD97  0D                 	db	13
   385  00FD98  0A                 	db	10
   386  00FD99  00                 	db	0
   387  00FD9A                     STR_67:
   388  00FD9A  63                 	db	99	;'c'
   389  00FD9B  6D                 	db	109	;'m'
   390  00FD9C  64                 	db	100	;'d'
   391  00FD9D  5F                 	db	95	;'_'
   392  00FD9E  64                 	db	100	;'d'
   393  00FD9F  61                 	db	97	;'a'
   394  00FDA0  74                 	db	116	;'t'
   395  00FDA1  61                 	db	97	;'a'
   396  00FDA2  2E                 	db	46
   397  00FDA3  65                 	db	101	;'e'
   398  00FDA4  6E                 	db	110	;'n'
   399  00FDA5  64                 	db	100	;'d'
   400  00FDA6  5F                 	db	95	;'_'
   401  00FDA7  63                 	db	99	;'c'
   402  00FDA8  6F                 	db	111	;'o'
   403  00FDA9  6C                 	db	108	;'l'
   404  00FDAA  20                 	db	32
   405  00FDAB  3D                 	db	61	;'='
   406  00FDAC  20                 	db	32
   407  00FDAD  25                 	db	37
   408  00FDAE  64                 	db	100	;'d'
   409  00FDAF  2C                 	db	44
   410  00FDB0  0D                 	db	13
   411  00FDB1  0A                 	db	10
   412  00FDB2  00                 	db	0
   413  00FDB3                     STR_64:
   414  00FDB3  63                 	db	99	;'c'
   415  00FDB4  6D                 	db	109	;'m'
   416  00FDB5  64                 	db	100	;'d'
   417  00FDB6  5F                 	db	95	;'_'
   418  00FDB7  64                 	db	100	;'d'
   419  00FDB8  61                 	db	97	;'a'
   420  00FDB9  74                 	db	116	;'t'
   421  00FDBA  61                 	db	97	;'a'
   422  00FDBB  2E                 	db	46
   423  00FDBC  65                 	db	101	;'e'
   424  00FDBD  6E                 	db	110	;'n'
   425  00FDBE  64                 	db	100	;'d'
   426  00FDBF  5F                 	db	95	;'_'
   427  00FDC0  72                 	db	114	;'r'
   428  00FDC1  6F                 	db	111	;'o'
   429  00FDC2  77                 	db	119	;'w'
   430  00FDC3  20                 	db	32
   431  00FDC4  3D                 	db	61	;'='
   432  00FDC5  20                 	db	32
   433  00FDC6  25                 	db	37
   434  00FDC7  64                 	db	100	;'d'
   435  00FDC8  2C                 	db	44
   436  00FDC9  0D                 	db	13
   437  00FDCA  0A                 	db	10
   438  00FDCB  00                 	db	0
   439  00FDCC                     STR_20:
   440  00FDCC  69                 	db	105	;'i'
   441  00FDCD  20                 	db	32
   442  00FDCE  3D                 	db	61	;'='
   443  00FDCF  20                 	db	32
   444  00FDD0  25                 	db	37
   445  00FDD1  64                 	db	100	;'d'
   446  00FDD2  2C                 	db	44
   447  00FDD3  20                 	db	32
   448  00FDD4  63                 	db	99	;'c'
   449  00FDD5  6F                 	db	111	;'o'
   450  00FDD6  6C                 	db	108	;'l'
   451  00FDD7  2E                 	db	46
   452  00FDD8  2E                 	db	46
   453  00FDD9  32                 	db	50	;'2'
   454  00FDDA  20                 	db	32
   455  00FDDB  3D                 	db	61	;'='
   456  00FDDC  20                 	db	32
   457  00FDDD  25                 	db	37
   458  00FDDE  73                 	db	115	;'s'
   459  00FDDF  0D                 	db	13
   460  00FDE0  0A                 	db	10
   461  00FDE1  00                 	db	0
   462  00FDE2                     STR_13:
   463  00FDE2  73                 	db	115	;'s'
   464  00FDE3  69                 	db	105	;'i'
   465  00FDE4  7A                 	db	122	;'z'
   466  00FDE5  65                 	db	101	;'e'
   467  00FDE6  6F                 	db	111	;'o'
   468  00FDE7  66                 	db	102	;'f'
   469  00FDE8  28                 	db	40
   470  00FDE9  73                 	db	115	;'s'
   471  00FDEA  74                 	db	116	;'t'
   472  00FDEB  72                 	db	114	;'r'
   473  00FDEC  29                 	db	41
   474  00FDED  20                 	db	32
   475  00FDEE  3D                 	db	61	;'='
   476  00FDEF  20                 	db	32
   477  00FDF0  25                 	db	37
   478  00FDF1  64                 	db	100	;'d'
   479  00FDF2  0D                 	db	13
   480  00FDF3  0A                 	db	10
   481  00FDF4  00                 	db	0
   482  00FDF5                     STR_122:
   483  00FDF5  49                 	db	73	;'I'
   484  00FDF6  6E                 	db	110	;'n'
   485  00FDF7  69                 	db	105	;'i'
   486  00FDF8  74                 	db	116	;'t'
   487  00FDF9  5F                 	db	95	;'_'
   488  00FDFA  63                 	db	99	;'c'
   489  00FDFB  6F                 	db	111	;'o'
   490  00FDFC  6D                 	db	109	;'m'
   491  00FDFD  70                 	db	112	;'p'
   492  00FDFE  6C                 	db	108	;'l'
   493  00FDFF  65                 	db	101	;'e'
   494  00FE00  74                 	db	116	;'t'
   495  00FE01  65                 	db	101	;'e'
   496  00FE02  2E                 	db	46
   497  00FE03  2E                 	db	46
   498  00FE04  0D                 	db	13
   499  00FE05  0A                 	db	10
   500  00FE06  00                 	db	0
   501  00FE07                     STR_3:
   502  00FE07  73                 	db	115	;'s'
   503  00FE08  74                 	db	116	;'t'
   504  00FE09  72                 	db	114	;'r'
   505  00FE0A  69                 	db	105	;'i'
   506  00FE0B  6E                 	db	110	;'n'
   507  00FE0C  67                 	db	103	;'g'
   508  00FE0D  5F                 	db	95	;'_'
   509  00FE0E  63                 	db	99	;'c'
   510  00FE0F  6F                 	db	111	;'o'
   511  00FE10  75                 	db	117	;'u'
   512  00FE11  6E                 	db	110	;'n'
   513  00FE12  74                 	db	116	;'t'
   514  00FE13  20                 	db	32
   515  00FE14  3D                 	db	61	;'='
   516  00FE15  20                 	db	32
   517  00FE16  25                 	db	37
   518  00FE17  64                 	db	100	;'d'
   519  00FE18  00                 	db	0
   520  00FE19                     STR_4:
   521  00FE19  75                 	db	117	;'u'
   522  00FE1A  69                 	db	105	;'i'
   523  00FE1B  64                 	db	100	;'d'
   524  00FE1C  5F                 	db	95	;'_'
   525  00FE1D  72                 	db	114	;'r'
   526  00FE1E  61                 	db	97	;'a'
   527  00FE1F  6E                 	db	110	;'n'
   528  00FE20  67                 	db	103	;'g'
   529  00FE21  65                 	db	101	;'e'
   530  00FE22  20                 	db	32
   531  00FE23  3D                 	db	61	;'='
   532  00FE24  20                 	db	32
   533  00FE25  25                 	db	37
   534  00FE26  64                 	db	100	;'d'
   535  00FE27  0D                 	db	13
   536  00FE28  0A                 	db	10
   537  00FE29  00                 	db	0
   538  00FE2A  6D                 	db	109	;'m'
   539  00FE2B  69                 	db	105	;'i'
   540  00FE2C  64                 	db	100	;'d'
   541  00FE2D  5F                 	db	95	;'_'
   542  00FE2E  63                 	db	99	;'c'
   543  00FE2F  68                 	db	104	;'h'
   544  00FE30  61                 	db	97	;'a'
   545  00FE31  72                 	db	114	;'r'
   546  00FE32  20                 	db	32
   547  00FE33  3D                 	db	61	;'='
   548  00FE34  20                 	db	32
   549  00FE35  25                 	db	37
   550  00FE36  64                 	db	100	;'d'
   551  00FE37  0D                 	db	13
   552  00FE38  0A                 	db	10
   553  00FE39  00                 	db	0
   554  00FE3A  25                 	db	37
   555  00FE3B  73                 	db	115	;'s'
   556  00FE3C  2C                 	db	44
   557  00FE3D  20                 	db	32
   558  00FE3E  73                 	db	115	;'s'
   559  00FE3F  74                 	db	116	;'t'
   560  00FE40  72                 	db	114	;'r'
   561  00FE41  6C                 	db	108	;'l'
   562  00FE42  65                 	db	101	;'e'
   563  00FE43  6E                 	db	110	;'n'
   564  00FE44  20                 	db	32
   565  00FE45  25                 	db	37
   566  00FE46  64                 	db	100	;'d'
   567  00FE47  0D                 	db	13
   568  00FE48  0A                 	db	10
   569  00FE49  00                 	db	0
   570  00FE4A                     STR_10:
   571  00FE4A  63                 	db	99	;'c'
   572  00FE4B  6F                 	db	111	;'o'
   573  00FE4C  6E                 	db	110	;'n'
   574  00FE4D  66                 	db	102	;'f'
   575  00FE4E  6C                 	db	108	;'l'
   576  00FE4F  69                 	db	105	;'i'
   577  00FE50  63                 	db	99	;'c'
   578  00FE51  74                 	db	116	;'t'
   579  00FE52  3A                 	db	58	;':'
   580  00FE53  20                 	db	32
   581  00FE54  75                 	db	117	;'u'
   582  00FE55  69                 	db	105	;'i'
   583  00FE56  64                 	db	100	;'d'
   584  00FE57  0D                 	db	13
   585  00FE58  0A                 	db	10
   586  00FE59  00                 	db	0
   587  00FE5A                     STR_19:
   588  00FE5A  73                 	db	115	;'s'
   589  00FE5B  74                 	db	116	;'t'
   590  00FE5C  72                 	db	114	;'r'
   591  00FE5D  5B                 	db	91	;'['
   592  00FE5E  25                 	db	37
   593  00FE5F  64                 	db	100	;'d'
   594  00FE60  5D                 	db	93	;']'
   595  00FE61  20                 	db	32
   596  00FE62  3D                 	db	61	;'='
   597  00FE63  20                 	db	32
   598  00FE64  25                 	db	37
   599  00FE65  64                 	db	100	;'d'
   600  00FE66  0D                 	db	13
   601  00FE67  0A                 	db	10
   602  00FE68  00                 	db	0
   603  00FE69                     STR_114:
   604  00FE69  45                 	db	69	;'E'
   605  00FE6A  52                 	db	82	;'R'
   606  00FE6B  52                 	db	82	;'R'
   607  00FE6C  5F                 	db	95	;'_'
   608  00FE6D  53                 	db	83	;'S'
   609  00FE6E  43                 	db	67	;'C'
   610  00FE6F  52                 	db	82	;'R'
   611  00FE70  4F                 	db	79	;'O'
   612  00FE71  4C                 	db	76	;'L'
   613  00FE72  4C                 	db	76	;'L'
   614  00FE73  5F                 	db	95	;'_'
   615  00FE74  53                 	db	83	;'S'
   616  00FE75  45                 	db	69	;'E'
   617  00FE76  54                 	db	84	;'T'
   618  00FE77  00                 	db	0
   619  00FE78                     STR_17:
   620  00FE78  63                 	db	99	;'c'
   621  00FE79  6F                 	db	111	;'o'
   622  00FE7A  6C                 	db	108	;'l'
   623  00FE7B  2E                 	db	46
   624  00FE7C  2E                 	db	46
   625  00FE7D  31                 	db	49	;'1'
   626  00FE7E  20                 	db	32
   627  00FE7F  3D                 	db	61	;'='
   628  00FE80  20                 	db	32
   629  00FE81  25                 	db	37
   630  00FE82  73                 	db	115	;'s'
   631  00FE83  0D                 	db	13
   632  00FE84  0A                 	db	10
   633  00FE85  00                 	db	0
   634  00FE86                     STR_54:
   635  00FE86  73                 	db	115	;'s'
   636  00FE87  63                 	db	99	;'c'
   637  00FE88  72                 	db	114	;'r'
   638  00FE89  6F                 	db	111	;'o'
   639  00FE8A  6C                 	db	108	;'l'
   640  00FE8B  6C                 	db	108	;'l'
   641  00FE8C  20                 	db	32
   642  00FE8D  3D                 	db	61	;'='
   643  00FE8E  20                 	db	32
   644  00FE8F  25                 	db	37
   645  00FE90  64                 	db	100	;'d'
   646  00FE91  2C                 	db	44
   647  00FE92  20                 	db	32
   648  00FE93  00                 	db	0
   649  00FE94                     STR_77:
   650  00FE94  0D                 	db	13
   651  00FE95  0A                 	db	10
   652  00FE96  25                 	db	37
   653  00FE97  73                 	db	115	;'s'
   654  00FE98  2E                 	db	46
   655  00FE99  2E                 	db	46
   656  00FE9A  2C                 	db	44
   657  00FE9B  20                 	db	32
   658  00FE9C  4F                 	db	79	;'O'
   659  00FE9D  4B                 	db	75	;'K'
   660  00FE9E  0D                 	db	13
   661  00FE9F  0A                 	db	10
   662  00FEA0  00                 	db	0
   663  00FEA1                     STR_58:
   664  00FEA1  75                 	db	117	;'u'
   665  00FEA2  69                 	db	105	;'i'
   666  00FEA3  64                 	db	100	;'d'
   667  00FEA4  20                 	db	32
   668  00FEA5  3D                 	db	61	;'='
   669  00FEA6  20                 	db	32
   670  00FEA7  25                 	db	37
   671  00FEA8  64                 	db	100	;'d'
   672  00FEA9  2C                 	db	44
   673  00FEAA  0D                 	db	13
   674  00FEAB  0A                 	db	10
   675  00FEAC  00                 	db	0
   676  00FEAD                     STR_119:
   677  00FEAD  49                 	db	73	;'I'
   678  00FEAE  6E                 	db	110	;'n'
   679  00FEAF  69                 	db	105	;'i'
   680  00FEB0  74                 	db	116	;'t'
   681  00FEB1  5F                 	db	95	;'_'
   682  00FEB2  44                 	db	68	;'D'
   683  00FEB3  6F                 	db	111	;'o'
   684  00FEB4  6E                 	db	110	;'n'
   685  00FEB5  65                 	db	101	;'e'
   686  00FEB6  0D                 	db	13
   687  00FEB7  0A                 	db	10
   688  00FEB8  00                 	db	0
   689  00FEB9                     STR_40:
   690  00FEB9  74                 	db	116	;'t'
   691  00FEBA  65                 	db	101	;'e'
   692  00FEBB  6D                 	db	109	;'m'
   693  00FEBC  70                 	db	112	;'p'
   694  00FEBD  20                 	db	32
   695  00FEBE  3D                 	db	61	;'='
   696  00FEBF  20                 	db	32
   697  00FEC0  25                 	db	37
   698  00FEC1  73                 	db	115	;'s'
   699  00FEC2  2C                 	db	44
   700  00FEC3  20                 	db	32
   701  00FEC4  00                 	db	0
   702  00FEC5                     STR_112:
   703  00FEC5  45                 	db	69	;'E'
   704  00FEC6  52                 	db	82	;'R'
   705  00FEC7  52                 	db	82	;'R'
   706  00FEC8  5F                 	db	95	;'_'
   707  00FEC9  52                 	db	82	;'R'
   708  00FECA  4F                 	db	79	;'O'
   709  00FECB  57                 	db	87	;'W'
   710  00FECC  5F                 	db	95	;'_'
   711  00FECD  43                 	db	67	;'C'
   712  00FECE  4F                 	db	79	;'O'
   713  00FECF  4C                 	db	76	;'L'
   714  00FED0  00                 	db	0
   715  00FED1                     STR_46:
   716  00FED1  4B                 	db	75	;'K'
   717  00FED2  4C                 	db	76	;'L'
   718  00FED3  4D                 	db	77	;'M'
   719  00FED4  2B                 	db	43
   720  00FED5  53                 	db	83	;'S'
   721  00FED6  44                 	db	68	;'D'
   722  00FED7  53                 	db	83	;'S'
   723  00FED8  43                 	db	67	;'C'
   724  00FED9  52                 	db	82	;'R'
   725  00FEDA  4F                 	db	79	;'O'
   726  00FEDB  4C                 	db	76	;'L'
   727  00FEDC  00                 	db	0
   728  00FEDD                     STR_118:
   729  00FEDD  45                 	db	69	;'E'
   730  00FEDE  52                 	db	82	;'R'
   731  00FEDF  52                 	db	82	;'R'
   732  00FEE0  5F                 	db	95	;'_'
   733  00FEE1  43                 	db	67	;'C'
   734  00FEE2  4D                 	db	77	;'M'
   735  00FEE3  44                 	db	68	;'D'
   736  00FEE4  5F                 	db	95	;'_'
   737  00FEE5  4C                 	db	76	;'L'
   738  00FEE6  45                 	db	69	;'E'
   739  00FEE7  4E                 	db	78	;'N'
   740  00FEE8  00                 	db	0
   741  00FEE9                     STR_110:
   742  00FEE9  45                 	db	69	;'E'
   743  00FEEA  52                 	db	82	;'R'
   744  00FEEB  52                 	db	82	;'R'
   745  00FEEC  5F                 	db	95	;'_'
   746  00FEED  53                 	db	83	;'S'
   747  00FEEE  54                 	db	84	;'T'
   748  00FEEF  52                 	db	82	;'R'
   749  00FEF0  5F                 	db	95	;'_'
   750  00FEF1  53                 	db	83	;'S'
   751  00FEF2  45                 	db	69	;'E'
   752  00FEF3  54                 	db	84	;'T'
   753  00FEF4  00                 	db	0
   754  00FEF5                     STR_91:
   755  00FEF5  25                 	db	37
   756  00FEF6  64                 	db	100	;'d'
   757  00FEF7  2C                 	db	44
   758  00FEF8  25                 	db	37
   759  00FEF9  63                 	db	99	;'c'
   760  00FEFA  2D                 	db	45
   761  00FEFB  25                 	db	37
   762  00FEFC  63                 	db	99	;'c'
   763  00FEFD  0D                 	db	13
   764  00FEFE  0A                 	db	10
   765  00FEFF  00                 	db	0
   766  00FF00                     STR_22:
   767  00FF00  43                 	db	67	;'C'
   768  00FF01  6F                 	db	111	;'o'
   769  00FF02  6C                 	db	108	;'l'
   770  00FF03  20                 	db	32
   771  00FF04  3D                 	db	61	;'='
   772  00FF05  20                 	db	32
   773  00FF06  25                 	db	37
   774  00FF07  64                 	db	100	;'d'
   775  00FF08  0D                 	db	13
   776  00FF09  0A                 	db	10
   777  00FF0A  00                 	db	0
   778  00FF0B                     STR_16:
   779  00FF0B  72                 	db	114	;'r'
   780  00FF0C  6F                 	db	111	;'o'
   781  00FF0D  77                 	db	119	;'w'
   782  00FF0E  20                 	db	32
   783  00FF0F  3D                 	db	61	;'='
   784  00FF10  20                 	db	32
   785  00FF11  25                 	db	37
   786  00FF12  64                 	db	100	;'d'
   787  00FF13  0D                 	db	13
   788  00FF14  0A                 	db	10
   789  00FF15  00                 	db	0
   790  00FF16                     STR_66:
   791  00FF16  63                 	db	99	;'c'
   792  00FF17  6F                 	db	111	;'o'
   793  00FF18  6C                 	db	108	;'l'
   794  00FF19  20                 	db	32
   795  00FF1A  3D                 	db	61	;'='
   796  00FF1B  20                 	db	32
   797  00FF1C  25                 	db	37
   798  00FF1D  73                 	db	115	;'s'
   799  00FF1E  0D                 	db	13
   800  00FF1F  0A                 	db	10
   801  00FF20  00                 	db	0
   802  00FF21                     STR_45:
   803  00FF21  73                 	db	115	;'s'
   804  00FF22  74                 	db	116	;'t'
   805  00FF23  72                 	db	114	;'r'
   806  00FF24  20                 	db	32
   807  00FF25  3D                 	db	61	;'='
   808  00FF26  20                 	db	32
   809  00FF27  25                 	db	37
   810  00FF28  73                 	db	115	;'s'
   811  00FF29  0D                 	db	13
   812  00FF2A  0A                 	db	10
   813  00FF2B  00                 	db	0
   814  00FF2C                     STR_43:
   815  00FF2C  75                 	db	117	;'u'
   816  00FF2D  69                 	db	105	;'i'
   817  00FF2E  64                 	db	100	;'d'
   818  00FF2F  20                 	db	32
   819  00FF30  3D                 	db	61	;'='
   820  00FF31  20                 	db	32
   821  00FF32  25                 	db	37
   822  00FF33  64                 	db	100	;'d'
   823  00FF34  2C                 	db	44
   824  00FF35  20                 	db	32
   825  00FF36  00                 	db	0
   826  00FF37                     STR_55:
   827  00FF37  4B                 	db	75	;'K'
   828  00FF38  4C                 	db	76	;'L'
   829  00FF39  4D                 	db	77	;'M'
   830  00FF3A  2B                 	db	43
   831  00FF3B  53                 	db	83	;'S'
   832  00FF3C  44                 	db	68	;'D'
   833  00FF3D  53                 	db	83	;'S'
   834  00FF3E  45                 	db	69	;'E'
   835  00FF3F  52                 	db	82	;'R'
   836  00FF40  43                 	db	67	;'C'
   837  00FF41  00                 	db	0
   838  00FF42                     STR_68:
   839  00FF42  4B                 	db	75	;'K'
   840  00FF43  4C                 	db	76	;'L'
   841  00FF44  4D                 	db	77	;'M'
   842  00FF45  2B                 	db	43
   843  00FF46  55                 	db	85	;'U'
   844  00FF47  50                 	db	80	;'P'
   845  00FF48  44                 	db	68	;'D'
   846  00FF49  41                 	db	65	;'A'
   847  00FF4A  54                 	db	84	;'T'
   848  00FF4B  45                 	db	69	;'E'
   849  00FF4C  00                 	db	0
   850  00FF4D                     STR_28:
   851  00FF4D  4B                 	db	75	;'K'
   852  00FF4E  4C                 	db	76	;'L'
   853  00FF4F  4D                 	db	77	;'M'
   854  00FF50  2B                 	db	43
   855  00FF51  4C                 	db	76	;'L'
   856  00FF52  43                 	db	67	;'C'
   857  00FF53  44                 	db	68	;'D'
   858  00FF54  53                 	db	83	;'S'
   859  00FF55  3F                 	db	63	;'?'
   860  00FF56  00                 	db	0
   861  00FF57                     STR_36:
   862  00FF57  4B                 	db	75	;'K'
   863  00FF58  4C                 	db	76	;'L'
   864  00FF59  4D                 	db	77	;'M'
   865  00FF5A  2B                 	db	43
   866  00FF5B  47                 	db	71	;'G'
   867  00FF5C  4D                 	db	77	;'M'
   868  00FF5D  44                 	db	68	;'D'
   869  00FF5E  53                 	db	83	;'S'
   870  00FF5F  3F                 	db	63	;'?'
   871  00FF60  00                 	db	0
   872  00FF61                     STR_38:
   873  00FF61  4B                 	db	75	;'K'
   874  00FF62  4C                 	db	76	;'L'
   875  00FF63  4D                 	db	77	;'M'
   876  00FF64  2B                 	db	43
   877  00FF65  53                 	db	83	;'S'
   878  00FF66  44                 	db	68	;'D'
   879  00FF67  53                 	db	83	;'S'
   880  00FF68  54                 	db	84	;'T'
   881  00FF69  52                 	db	82	;'R'
   882  00FF6A  00                 	db	0
   883  00FF6B                     STR_47:
   884  00FF6B  25                 	db	37
   885  00FF6C  73                 	db	115	;'s'
   886  00FF6D  2E                 	db	46
   887  00FF6E  2E                 	db	46
   888  00FF6F  2E                 	db	46
   889  00FF70  34                 	db	52	;'4'
   890  00FF71  0D                 	db	13
   891  00FF72  0A                 	db	10
   892  00FF73  00                 	db	0
   893  00FF74                     STR_50:
   894  00FF74  25                 	db	37
   895  00FF75  73                 	db	115	;'s'
   896  00FF76  2E                 	db	46
   897  00FF77  2E                 	db	46
   898  00FF78  2E                 	db	46
   899  00FF79  35                 	db	53	;'5'
   900  00FF7A  0D                 	db	13
   901  00FF7B  0A                 	db	10
   902  00FF7C  00                 	db	0
   903  00FF7D                     STR_53:
   904  00FF7D  25                 	db	37
   905  00FF7E  73                 	db	115	;'s'
   906  00FF7F  2E                 	db	46
   907  00FF80  2E                 	db	46
   908  00FF81  2E                 	db	46
   909  00FF82  36                 	db	54	;'6'
   910  00FF83  0D                 	db	13
   911  00FF84  0A                 	db	10
   912  00FF85  00                 	db	0
   913  00FF86                     STR_69:
   914  00FF86  4B                 	db	75	;'K'
   915  00FF87  4C                 	db	76	;'L'
   916  00FF88  4D                 	db	77	;'M'
   917  00FF89  2B                 	db	43
   918  00FF8A  53                 	db	83	;'S'
   919  00FF8B  53                 	db	83	;'S'
   920  00FF8C  54                 	db	84	;'T'
   921  00FF8D  52                 	db	82	;'R'
   922  00FF8E  00                 	db	0
   923  00FF8F                     STR_31:
   924  00FF8F  4B                 	db	75	;'K'
   925  00FF90  4C                 	db	76	;'L'
   926  00FF91  4D                 	db	77	;'M'
   927  00FF92  2B                 	db	43
   928  00FF93  4C                 	db	76	;'L'
   929  00FF94  43                 	db	67	;'C'
   930  00FF95  44                 	db	68	;'D'
   931  00FF96  53                 	db	83	;'S'
   932  00FF97  00                 	db	0
   933  00FF98                     STR_2:
   934  00FF98  63                 	db	99	;'c'
   935  00FF99  6F                 	db	111	;'o'
   936  00FF9A  6C                 	db	108	;'l'
   937  00FF9B  20                 	db	32
   938  00FF9C  3D                 	db	61	;'='
   939  00FF9D  20                 	db	32
   940  00FF9E  25                 	db	37
   941  00FF9F  64                 	db	100	;'d'
   942  00FFA0  00                 	db	0
   943  00FFA1                     STR_1:
   944  00FFA1  72                 	db	114	;'r'
   945  00FFA2  6F                 	db	111	;'o'
   946  00FFA3  77                 	db	119	;'w'
   947  00FFA4  20                 	db	32
   948  00FFA5  3D                 	db	61	;'='
   949  00FFA6  20                 	db	32
   950  00FFA7  25                 	db	37
   951  00FFA8  64                 	db	100	;'d'
   952  00FFA9  00                 	db	0
   953  00FFAA                     STR_30:
   954  00FFAA  2E                 	db	46
   955  00FFAB  2E                 	db	46
   956  00FFAC  2E                 	db	46
   957  00FFAD  2E                 	db	46
   958  00FFAE  2E                 	db	46
   959  00FFAF  0D                 	db	13
   960  00FFB0  0A                 	db	10
   961  00FFB1  00                 	db	0
   962  00FFB2                     STR_23:
   963  00FFB2  25                 	db	37
   964  00FFB3  73                 	db	115	;'s'
   965  00FFB4  2E                 	db	46
   966  00FFB5  2E                 	db	46
   967  00FFB6  32                 	db	50	;'2'
   968  00FFB7  0D                 	db	13
   969  00FFB8  0A                 	db	10
   970  00FFB9  00                 	db	0
   971  00FFBA                     STR_24:
   972  00FFBA  4B                 	db	75	;'K'
   973  00FFBB  4C                 	db	76	;'L'
   974  00FFBC  4D                 	db	77	;'M'
   975  00FFBD  2B                 	db	43
   976  00FFBE  4D                 	db	77	;'M'
   977  00FFBF  43                 	db	67	;'C'
   978  00FFC0  3F                 	db	63	;'?'
   979  00FFC1  00                 	db	0
   980  00FFC2                     STR_26:
   981  00FFC2  4B                 	db	75	;'K'
   982  00FFC3  4C                 	db	76	;'L'
   983  00FFC4  4D                 	db	77	;'M'
   984  00FFC5  2B                 	db	43
   985  00FFC6  4D                 	db	77	;'M'
   986  00FFC7  52                 	db	82	;'R'
   987  00FFC8  3F                 	db	63	;'?'
   988  00FFC9  00                 	db	0
   989  00FFCA                     STR_123:
   990  00FFCA  28                 	db	40
   991  00FFCB  6E                 	db	110	;'n'
   992  00FFCC  75                 	db	117	;'u'
   993  00FFCD  6C                 	db	108	;'l'
   994  00FFCE  6C                 	db	108	;'l'
   995  00FFCF  29                 	db	41
   996  00FFD0  00                 	db	0
   997  00FFD1                     STR_34:
   998  00FFD1  25                 	db	37
   999  00FFD2  73                 	db	115	;'s'
  1000  00FFD3  2E                 	db	46
  1001  00FFD4  2E                 	db	46
  1002  00FFD5  0D                 	db	13
  1003  00FFD6  0A                 	db	10
  1004  00FFD7  00                 	db	0
  1005  00FFD8                     STR_109:
  1006  00FFD8  0D                 	db	13
  1007  00FFD9  0A                 	db	10
  1008  00FFDA  25                 	db	37
  1009  00FFDB  73                 	db	115	;'s'
  1010  00FFDC  0D                 	db	13
  1011  00FFDD  0A                 	db	10
  1012  00FFDE  00                 	db	0
  1013  00FFDF                     STR_25:
  1014  00FFDF  2D                 	db	45
  1015  00FFE0  27                 	db	39
  1016  00FFE1  2C                 	db	44
  1017  00FFE2  20                 	db	32
  1018  00FFE3  2F                 	db	47
  1019  00FFE4  3D                 	db	61	;'='
  1020  00FFE5  00                 	db	0
  1021  00FFE6                     STR_106:
  1022  00FFE6  45                 	db	69	;'E'
  1023  00FFE7  52                 	db	82	;'R'
  1024  00FFE8  52                 	db	82	;'R'
  1025  00FFE9  4F                 	db	79	;'O'
  1026  00FFEA  52                 	db	82	;'R'
  1027  00FFEB  00                 	db	0
  1028  00FFEC                     STR_11:
  1029  00FFEC  25                 	db	37
  1030  00FFED  63                 	db	99	;'c'
  1031  00FFEE  2C                 	db	44
  1032  00FFEF  20                 	db	32
  1033  00FFF0  00                 	db	0
  1034  00FFF1                     STR_5:
  1035  00FFF1  34                 	db	52	;'4'
  1036  00FFF2  2C                 	db	44
  1037  00FFF3  32                 	db	50	;'2'
  1038  00FFF4  30                 	db	48	;'0'
  1039  00FFF5  00                 	db	0
  1040  00FFF6                     STR_72:
  1041  00FFF6  4B                 	db	75	;'K'
  1042  00FFF7  4C                 	db	76	;'L'
  1043  00FFF8  4D                 	db	77	;'M'
  1044  00FFF9  00                 	db	0
  1045  00FFFA                     STR_116:
  1046  00FFFA  25                 	db	37
  1047  00FFFB  63                 	db	99	;'c'
  1048  00FFFC  00                 	db	0
  1049  00FFFD                     STR_44:
  1050  00FFFD  2C                 	db	44
  1051  00FFFE  00                 	db	0
  1052  0000                     
  1053                           ; #config settings
  1054  00FFFF  00                 	db	0	; dummy byte at the end
  1055  0000                     
  1056                           	psect	nvCOMRAM
  1057  00004E                     __pnvCOMRAM:
  1058                           	opt stack 0
  1059  00004E                     _timer0ReloadVal:
  1060                           	opt stack 0
  1061  00004E                     	ds	2
  1062                           
  1063                           	psect	nvBANK0
  1064  0000F9                     __pnvBANK0:
  1065                           	opt stack 0
  1066  0000F9                     _TMR0_InterruptHandler:
  1067                           	opt stack 0
  1068  0000F9                     	ds	2
  1069  0000FB                     _timer1ReloadVal:
  1070                           	opt stack 0
  1071  0000FB                     	ds	2
  1072  0000FD                     _timer5ReloadVal:
  1073                           	opt stack 0
  1074  0000FD                     	ds	2
  1075  0000FF                     _eusart1TxBufferRemaining:
  1076                           	opt stack 0
  1077  0000FF                     	ds	1
  1078  0000                     _TMR5	set	3919
  1079  0000                     _ANSELA	set	3896
  1080  0000                     _ANSELB	set	3897
  1081  0000                     _ANSELC	set	3898
  1082  0000                     _ANSELD	set	3899
  1083  0000                     _ANSELE	set	3900
  1084  0000                     _T5CON	set	3918
  1085  0000                     _T5CONbits	set	3918
  1086  0000                     _T5GCON	set	3917
  1087  0000                     _T5GCONbits	set	3917
  1088  0000                     _TMR5H	set	3920
  1089  0000                     _TMR5L	set	3919
  1090  0000                     _TMR1	set	4046
  1091  0000                     _BAUDCON1	set	4024
  1092  0000                     _INTCON2bits	set	4081
  1093  0000                     _INTCONbits	set	4082
  1094  0000                     _LATA	set	3977
  1095  0000                     _LATB	set	3978
  1096  0000                     _LATC	set	3979
  1097  0000                     _LATD	set	3980
  1098  0000                     _LATE	set	3981
  1099  0000                     _LATEbits	set	3981
  1100  0000                     _OSCCON	set	4051
  1101  0000                     _OSCCON2	set	4050
  1102  0000                     _OSCTUNE	set	3995
  1103  0000                     _PIE1bits	set	3997
  1104  0000                     _PIR1bits	set	3998
  1105  0000                     _PIR5bits	set	3966
  1106  0000                     _PORTAbits	set	3968
  1107  0000                     _PORTD	set	3971
  1108  0000                     _PORTDbits	set	3971
  1109  0000                     _RCONbits	set	4048
  1110  0000                     _RCREG1	set	4014
  1111  0000                     _RCSTA1	set	4011
  1112  0000                     _RCSTA1bits	set	4011
  1113  0000                     _SPBRG1	set	4015
  1114  0000                     _SPBRGH1	set	4016
  1115  0000                     _T0CON	set	4053
  1116  0000                     _T0CONbits	set	4053
  1117  0000                     _T1CON	set	4045
  1118  0000                     _T1CONbits	set	4045
  1119  0000                     _T1GCON	set	4044
  1120  0000                     _T1GCONbits	set	4044
  1121  0000                     _TMR0H	set	4055
  1122  0000                     _TMR0L	set	4054
  1123  0000                     _TMR1H	set	4047
  1124  0000                     _TMR1L	set	4046
  1125  0000                     _TRISA	set	3986
  1126  0000                     _TRISB	set	3987
  1127  0000                     _TRISC	set	3988
  1128  0000                     _TRISD	set	3989
  1129  0000                     _TRISE	set	3990
  1130  0000                     _TXREG1	set	4013
  1131  0000                     _TXSTA1	set	4012
  1132  0000                     _WPUB	set	3937
  1133                           
  1134                           	psect	cinit
  1135  002EFE                     __pcinit:
  1136                           	opt stack 0
  1137  002EFE                     start_initialization:
  1138                           	opt stack 0
  1139  002EFE                     __initialization:
  1140                           	opt stack 0
  1141                           
  1142                           ; Initialize objects allocated to BANK0 (13 bytes)
  1143                           ; load TBLPTR registers with __pidataBANK0
  1144  002EFE  0EB0               	movlw	low __pidataBANK0
  1145  002F00  6EF6               	movwf	tblptrl,c
  1146  002F02  0E37               	movlw	high __pidataBANK0
  1147  002F04  6EF7               	movwf	tblptrh,c
  1148  002F06  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1149  002F08  6EF8               	movwf	tblptru,c
  1150  002F0A  EE00  F0EC         	lfsr	0,__pdataBANK0
  1151  002F0E  EE10 F00D          	lfsr	1,13
  1152  002F12                     copy_data0:
  1153  002F12  0009               	tblrd		*+
  1154  002F14  CFF5 FFEE          	movff	tablat,postinc0
  1155  002F18  50E5               	movf	postdec1,w,c
  1156  002F1A  50E1               	movf	fsr1l,w,c
  1157  002F1C  E1FA               	bnz	copy_data0
  1158                           
  1159                           ; Clear objects allocated to BIGRAM (1080 bytes)
  1160  002F1E  EE02  F096         	lfsr	0,__pbssBIGRAM
  1161  002F22  EE14 F038          	lfsr	1,1080
  1162  002F26                     clear_0:
  1163  002F26  6AEE               	clrf	postinc0,c
  1164  002F28  50E5               	movf	postdec1,w,c
  1165  002F2A  50E1               	movf	fsr1l,w,c
  1166  002F2C  E1FC               	bnz	clear_0
  1167  002F2E  50E2               	movf	fsr1h,w,c
  1168  002F30  E1FA               	bnz	clear_0
  1169                           
  1170                           ; Clear objects allocated to BANK2 (150 bytes)
  1171  002F32  EE02  F000         	lfsr	0,__pbssBANK2
  1172  002F36  0E96               	movlw	150
  1173  002F38                     clear_1:
  1174  002F38  6AEE               	clrf	postinc0,c
  1175  002F3A  06E8               	decf	wreg,f,c
  1176  002F3C  E1FD               	bnz	clear_1
  1177                           
  1178                           ; Clear objects allocated to BANK1 (120 bytes)
  1179  002F3E  EE01  F000         	lfsr	0,__pbssBANK1
  1180  002F42  0E78               	movlw	120
  1181  002F44                     clear_2:
  1182  002F44  6AEE               	clrf	postinc0,c
  1183  002F46  06E8               	decf	wreg,f,c
  1184  002F48  E1FD               	bnz	clear_2
  1185                           
  1186                           ; Clear objects allocated to BANK0 (122 bytes)
  1187  002F4A  EE00  F060         	lfsr	0,__pbssBANK0
  1188  002F4E  0E7A               	movlw	122
  1189  002F50                     clear_3:
  1190  002F50  6AEE               	clrf	postinc0,c
  1191  002F52  06E8               	decf	wreg,f,c
  1192  002F54  E1FD               	bnz	clear_3
  1193                           
  1194                           ; Clear objects allocated to COMRAM (13 bytes)
  1195  002F56  EE00  F041         	lfsr	0,__pbssCOMRAM
  1196  002F5A  0E0D               	movlw	13
  1197  002F5C                     clear_4:
  1198  002F5C  6AEE               	clrf	postinc0,c
  1199  002F5E  06E8               	decf	wreg,f,c
  1200  002F60  E1FD               	bnz	clear_4
  1201  002F62                     end_of_initialization:
  1202                           	opt stack 0
  1203  002F62                     __end_of__initialization:
  1204                           	opt stack 0
  1205  002F62  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1206  002F64  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1207  002F66  0100               	movlb	0
  1208  002F68  EF12  F018         	goto	_main	;jump to C main() function
  1209                           tblptru	equ	0xFF8
  1210                           tblptrh	equ	0xFF7
  1211                           tblptrl	equ	0xFF6
  1212                           tablat	equ	0xFF5
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           postdec1	equ	0xFE5
  1216                           fsr1h	equ	0xFE2
  1217                           fsr1l	equ	0xFE1
  1218                           
  1219                           	psect	bssCOMRAM
  1220  000041                     __pbssCOMRAM:
  1221                           	opt stack 0
  1222  000041                     _conflict_data_count:
  1223                           	opt stack 0
  1224  000041                     	ds	1
  1225  000042                     _data_count:
  1226                           	opt stack 0
  1227  000042                     	ds	1
  1228  000043                     _eusart1RxCount:
  1229                           	opt stack 0
  1230  000043                     	ds	1
  1231  000044                     _eusart1RxHead:
  1232                           	opt stack 0
  1233  000044                     	ds	1
  1234  000045                     _eusart1RxTail:
  1235                           	opt stack 0
  1236  000045                     	ds	1
  1237  000046                     _eusart1TxHead:
  1238                           	opt stack 0
  1239  000046                     	ds	1
  1240  000047                     _eusart1TxTail:
  1241                           	opt stack 0
  1242  000047                     	ds	1
  1243  000048                     _valid_cmd:
  1244                           	opt stack 0
  1245  000048                     	ds	1
  1246  000049                     _clcd_config_data:
  1247                           	opt stack 0
  1248  000049                     	ds	5
  1249                           tblptru	equ	0xFF8
  1250                           tblptrh	equ	0xFF7
  1251                           tblptrl	equ	0xFF6
  1252                           tablat	equ	0xFF5
  1253                           postinc0	equ	0xFEE
  1254                           wreg	equ	0xFE8
  1255                           postdec1	equ	0xFE5
  1256                           fsr1h	equ	0xFE2
  1257                           fsr1l	equ	0xFE1
  1258                           
  1259                           	psect	bssBANK0
  1260  000060                     __pbssBANK0:
  1261                           	opt stack 0
  1262  000060                     _eusart1RxBuffer:
  1263                           	opt stack 0
  1264  000060                     	ds	8
  1265  000068                     _eusart1TxBuffer:
  1266                           	opt stack 0
  1267  000068                     	ds	8
  1268  000070                     _TMR1_InterruptHandler:
  1269                           	opt stack 0
  1270  000070                     	ds	2
  1271  000072                     _TMR5_InterruptHandler:
  1272                           	opt stack 0
  1273  000072                     	ds	2
  1274  000074                     _display_struct_count:
  1275                           	opt stack 0
  1276  000074                     	ds	2
  1277  000076                     _print_data_ready:
  1278                           	opt stack 0
  1279  000076                     	ds	2
  1280  000078                     	ds	2
  1281  00007A                     cmd_consol_task@i:
  1282                           	opt stack 0
  1283  00007A                     	ds	2
  1284  00007C                     strtok@sp:
  1285                           	opt stack 0
  1286  00007C                     	ds	2
  1287  00007E                     _LCD_16x2_DISPLAY:
  1288                           	opt stack 0
  1289  00007E                     	ds	1
  1290  00007F                     _LCD_20x4_DISPLAY:
  1291                           	opt stack 0
  1292  00007F                     	ds	1
  1293  000080                     _check:
  1294                           	opt stack 0
  1295  000080                     	ds	1
  1296  000081                     _clcd_init_col:
  1297                           	opt stack 0
  1298  000081                     	ds	1
  1299  000082                     _clcd_init_row:
  1300                           	opt stack 0
  1301  000082                     	ds	1
  1302  000083                     _cmd_consol_state:
  1303                           	opt stack 0
  1304  000083                     	ds	1
  1305  000084                     _display:
  1306                           	opt stack 0
  1307  000084                     	ds	1
  1308  000085                     	ds	1
  1309  000086                     _cmd_data:
  1310                           	opt stack 0
  1311  000086                     	ds	49
  1312  0000B7                     _conflict_arr:
  1313                           	opt stack 0
  1314  0000B7                     	ds	20
  1315  0000CB                     _CMD:
  1316                           	opt stack 0
  1317  0000CB                     	ds	15
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           postinc0	equ	0xFEE
  1323                           wreg	equ	0xFE8
  1324                           postdec1	equ	0xFE5
  1325                           fsr1h	equ	0xFE2
  1326                           fsr1l	equ	0xFE1
  1327                           
  1328                           	psect	dataBANK0
  1329  0000EC                     __pdataBANK0:
  1330                           	opt stack 0
  1331  0000EC                     _str:
  1332                           	opt stack 0
  1333  0000EC                     	ds	13
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           postinc0	equ	0xFEE
  1339                           wreg	equ	0xFE8
  1340                           postdec1	equ	0xFE5
  1341                           fsr1h	equ	0xFE2
  1342                           fsr1l	equ	0xFE1
  1343                           
  1344                           	psect	bssBANK1
  1345  000100                     __pbssBANK1:
  1346                           	opt stack 0
  1347  000100                     _lcd_display_array:
  1348                           	opt stack 0
  1349  000100                     	ds	80
  1350  000150                     _str_data:
  1351                           	opt stack 0
  1352  000150                     	ds	40
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postdec1	equ	0xFE5
  1360                           fsr1h	equ	0xFE2
  1361                           fsr1l	equ	0xFE1
  1362                           
  1363                           	psect	bssBANK2
  1364  000200                     __pbssBANK2:
  1365                           	opt stack 0
  1366  000200                     _uart_str:
  1367                           	opt stack 0
  1368  000200                     	ds	150
  1369                           tblptru	equ	0xFF8
  1370                           tblptrh	equ	0xFF7
  1371                           tblptrl	equ	0xFF6
  1372                           tablat	equ	0xFF5
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           postdec1	equ	0xFE5
  1376                           fsr1h	equ	0xFE2
  1377                           fsr1l	equ	0xFE1
  1378                           
  1379                           	psect	bssBIGRAM
  1380  000296                     __pbssBIGRAM:
  1381                           	opt stack 0
  1382  000296                     _clcd_display_string_details:
  1383                           	opt stack 0
  1384  000296                     	ds	1080
  1385                           tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postdec1	equ	0xFE5
  1392                           fsr1h	equ	0xFE2
  1393                           fsr1l	equ	0xFE1
  1394                           
  1395                           	psect	cstackBANK1
  1396  000178                     __pcstackBANK1:
  1397                           	opt stack 0
  1398  000178                     parse_cmd_str@i:
  1399                           	opt stack 0
  1400                           
  1401                           ; 1 bytes @ 0x0
  1402  000178                     	ds	1
  1403  000179                     parse_cmd_str@i_1697:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x1
  1407  000179                     	ds	1
  1408  00017A                     parse_cmd_str@row:
  1409                           	opt stack 0
  1410                           
  1411                           ; 1 bytes @ 0x2
  1412  00017A                     	ds	1
  1413  00017B                     parse_cmd_str@column:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x3
  1417  00017B                     	ds	1
  1418  00017C                     parse_cmd_str@uid_1713:
  1419                           	opt stack 0
  1420                           
  1421                           ; 1 bytes @ 0x4
  1422  00017C                     	ds	1
  1423  00017D                     parse_cmd_str@i_1688:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0x5
  1427  00017D                     	ds	1
  1428  00017E                     parse_cmd_str@uid:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x6
  1432  00017E                     	ds	1
  1433  00017F                     parse_cmd_str@scroll:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x7
  1437  00017F                     	ds	1
  1438  000180                     parse_cmd_str@uid_1685:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x8
  1442  000180                     	ds	1
  1443  000181                     parse_cmd_str@uid_1696:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x9
  1447  000181                     	ds	1
  1448  000182                     parse_cmd_str@ptr:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0xA
  1452  000182                     	ds	2
  1453  000184                     parse_cmd_str@temp:
  1454                           	opt stack 0
  1455                           
  1456                           ; 2 bytes @ 0xC
  1457  000184                     	ds	2
  1458  000186                     cmd_consol_task@ch:
  1459                           	opt stack 0
  1460                           
  1461                           ; 1 bytes @ 0xE
  1462  000186                     	ds	1
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           postinc0	equ	0xFEE
  1468                           wreg	equ	0xFE8
  1469                           postdec1	equ	0xFE5
  1470                           fsr1h	equ	0xFE2
  1471                           fsr1l	equ	0xFE1
  1472                           
  1473                           	psect	cstackBANK0
  1474  0000DA                     __pcstackBANK0:
  1475                           	opt stack 0
  1476  0000DA                     update_string_data@data:
  1477                           	opt stack 0
  1478  0000DA                     parse_cmd_str@str:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0x0
  1482  0000DA                     	ds	2
  1483  0000DC                     ??_update_string_data:
  1484  0000DC                     ??_parse_cmd_str:
  1485                           
  1486                           ; 1 bytes @ 0x2
  1487  0000DC                     	ds	3
  1488  0000DF                     update_string_data@exist_uid_idx:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x5
  1492  0000DF                     	ds	1
  1493  0000E0                     update_string_data@start_point:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x6
  1497  0000E0                     	ds	1
  1498  0000E1                     update_string_data@end_point:
  1499                           	opt stack 0
  1500                           
  1501                           ; 1 bytes @ 0x7
  1502  0000E1                     	ds	1
  1503  0000E2                     update_string_data@i:
  1504                           	opt stack 0
  1505                           
  1506                           ; 2 bytes @ 0x8
  1507  0000E2                     	ds	2
  1508  0000E4                     ??_reply_to_host:
  1509                           
  1510                           ; 1 bytes @ 0xA
  1511  0000E4                     	ds	3
  1512  0000E7                     reply_to_host@ch:
  1513                           	opt stack 0
  1514                           
  1515                           ; 1 bytes @ 0xD
  1516  0000E7                     	ds	1
  1517  0000E8                     ??_cmd_consol_task:
  1518                           
  1519                           ; 1 bytes @ 0xE
  1520  0000E8                     	ds	4
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           postdec1	equ	0xFE5
  1528                           fsr1h	equ	0xFE2
  1529                           fsr1l	equ	0xFE1
  1530                           
  1531                           	psect	cstackCOMRAM
  1532  000001                     __pcstackCOMRAM:
  1533                           	opt stack 0
  1534  000001                     ??_heart_beat:
  1535  000001                     
  1536                           ; 1 bytes @ 0x0
  1537  000001                     	ds	1
  1538  000002                     ??_INTERRUPT_InterruptManager:
  1539  000002                     
  1540                           ; 1 bytes @ 0x1
  1541  000002                     	ds	14
  1542  000010                     ??_isdigit:
  1543  000010                     ?_strcmp:
  1544                           	opt stack 0
  1545  000010                     ?_strchr:
  1546                           	opt stack 0
  1547  000010                     ?_max_display_support:
  1548                           	opt stack 0
  1549  000010                     ?___awdiv:
  1550                           	opt stack 0
  1551  000010                     ?___lwdiv:
  1552                           	opt stack 0
  1553  000010                     EUSART1_Read@readValue:
  1554                           	opt stack 0
  1555  000010                     EUSART1_Write@txData:
  1556                           	opt stack 0
  1557  000010                     TMR0_SetInterruptHandler@InterruptHandler:
  1558                           	opt stack 0
  1559  000010                     delay@delay:
  1560                           	opt stack 0
  1561  000010                     __delay_MS@delay:
  1562                           	opt stack 0
  1563  000010                     ___awdiv@dividend:
  1564                           	opt stack 0
  1565  000010                     ___lwdiv@dividend:
  1566                           	opt stack 0
  1567  000010                     memcpy@d1:
  1568                           	opt stack 0
  1569  000010                     strcmp@s1:
  1570                           	opt stack 0
  1571  000010                     strcpy@to:
  1572                           	opt stack 0
  1573  000010                     strncpy@to:
  1574                           	opt stack 0
  1575  000010                     strchr@ptr:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0xF
  1579  000010                     	ds	1
  1580  000011                     putch@txData:
  1581                           	opt stack 0
  1582  000011                     _isdigit$2188:
  1583                           	opt stack 0
  1584                           
  1585                           ; 1 bytes @ 0x10
  1586  000011                     	ds	1
  1587  000012                     ??_TMR0_Initialize:
  1588  000012                     ??__delay_MS:
  1589  000012                     ??_delay:
  1590  000012                     isdigit@c:
  1591                           	opt stack 0
  1592  000012                     ___awdiv@divisor:
  1593                           	opt stack 0
  1594  000012                     ___lwdiv@divisor:
  1595                           	opt stack 0
  1596  000012                     memcpy@s1:
  1597                           	opt stack 0
  1598  000012                     strcmp@s2:
  1599                           	opt stack 0
  1600  000012                     strcpy@from:
  1601                           	opt stack 0
  1602  000012                     strncpy@from:
  1603                           	opt stack 0
  1604  000012                     cputs@s:
  1605                           	opt stack 0
  1606  000012                     strchr@chr:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x11
  1610  000012                     	ds	1
  1611  000013                     delay@val:
  1612                           	opt stack 0
  1613  000013                     __delay_MS@val:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x12
  1617  000013                     	ds	1
  1618  000014                     ??_strcmp:
  1619  000014                     ??_strchr:
  1620  000014                     ___awdiv@counter:
  1621                           	opt stack 0
  1622  000014                     ___lwdiv@counter:
  1623                           	opt stack 0
  1624  000014                     memcpy@n:
  1625                           	opt stack 0
  1626  000014                     puts@s:
  1627                           	opt stack 0
  1628  000014                     strcpy@cp:
  1629                           	opt stack 0
  1630  000014                     strncpy@size:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x13
  1634  000014                     	ds	1
  1635  000015                     ___awdiv@sign:
  1636                           	opt stack 0
  1637  000015                     strcmp@r:
  1638                           	opt stack 0
  1639  000015                     delay@i:
  1640                           	opt stack 0
  1641  000015                     ___lwdiv@quotient:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x14
  1645  000015                     	ds	1
  1646  000016                     ?_strspn:
  1647                           	opt stack 0
  1648  000016                     ?_strcspn:
  1649                           	opt stack 0
  1650  000016                     ___awdiv@quotient:
  1651                           	opt stack 0
  1652  000016                     memcpy@d:
  1653                           	opt stack 0
  1654  000016                     strncpy@cp:
  1655                           	opt stack 0
  1656  000016                     strcspn@s1:
  1657                           	opt stack 0
  1658  000016                     strspn@s1:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x15
  1662  000016                     	ds	1
  1663  000017                     ?___lwmod:
  1664                           	opt stack 0
  1665  000017                     write_lcd_cmd@cmd:
  1666                           	opt stack 0
  1667  000017                     write_lcd_data@data:
  1668                           	opt stack 0
  1669  000017                     ___lwmod@dividend:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x16
  1673  000017                     	ds	1
  1674  000018                     ?___wmul:
  1675                           	opt stack 0
  1676  000018                     set_cursor@col_number:
  1677                           	opt stack 0
  1678  000018                     write_str@str:
  1679                           	opt stack 0
  1680  000018                     ___wmul@multiplier:
  1681                           	opt stack 0
  1682  000018                     memcpy@s:
  1683                           	opt stack 0
  1684  000018                     strcspn@s2:
  1685                           	opt stack 0
  1686  000018                     strspn@s2:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x17
  1690  000018                     	ds	1
  1691  000019                     set_cursor@row_number:
  1692                           	opt stack 0
  1693  000019                     ___lwmod@divisor:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x18
  1697  000019                     	ds	1
  1698  00001A                     ??_strspn:
  1699  00001A                     ??_strcspn:
  1700  00001A                     write_str@i:
  1701                           	opt stack 0
  1702  00001A                     ___wmul@multiplicand:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x19
  1706  00001A                     	ds	1
  1707  00001B                     ___lwmod@counter:
  1708                           	opt stack 0
  1709  00001B                     strcspn@i:
  1710                           	opt stack 0
  1711  00001B                     strspn@i:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0x1A
  1715  00001B                     	ds	1
  1716  00001C                     ___wmul@product:
  1717                           	opt stack 0
  1718                           
  1719                           ; 2 bytes @ 0x1B
  1720  00001C                     	ds	1
  1721  00001D                     ?_strtok:
  1722                           	opt stack 0
  1723  00001D                     strtok@s1:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x1C
  1727  00001D                     	ds	1
  1728  00001E                     ?_strlen:
  1729                           	opt stack 0
  1730  00001E                     ?_atoi:
  1731                           	opt stack 0
  1732  00001E                     atoi@s:
  1733                           	opt stack 0
  1734  00001E                     strlen@s:
  1735                           	opt stack 0
  1736                           
  1737                           ; 2 bytes @ 0x1D
  1738  00001E                     	ds	1
  1739  00001F                     strtok@s2:
  1740                           	opt stack 0
  1741                           
  1742                           ; 2 bytes @ 0x1E
  1743  00001F                     	ds	1
  1744  000020                     ??_strlen:
  1745  000020                     ??_atoi:
  1746                           
  1747                           ; 1 bytes @ 0x1F
  1748  000020                     	ds	1
  1749  000021                     
  1750                           ; 1 bytes @ 0x20
  1751  000021                     	ds	1
  1752  000022                     atoi@sign:
  1753                           	opt stack 0
  1754  000022                     strlen@cp:
  1755                           	opt stack 0
  1756                           
  1757                           ; 2 bytes @ 0x21
  1758  000022                     	ds	1
  1759  000023                     atoi@a:
  1760                           	opt stack 0
  1761                           
  1762                           ; 2 bytes @ 0x22
  1763  000023                     	ds	1
  1764  000024                     ?_printf:
  1765                           	opt stack 0
  1766  000024                     ?_strncmp:
  1767                           	opt stack 0
  1768  000024                     scroll_off@clcd_display_string_details:
  1769                           	opt stack 0
  1770  000024                     printf@f:
  1771                           	opt stack 0
  1772  000024                     memset@p1:
  1773                           	opt stack 0
  1774  000024                     strncmp@s1:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0x23
  1778  000024                     	ds	2
  1779  000026                     ??_scroll_off:
  1780  000026                     memset@c:
  1781                           	opt stack 0
  1782  000026                     strncmp@s2:
  1783                           	opt stack 0
  1784                           
  1785                           ; 2 bytes @ 0x25
  1786  000026                     	ds	2
  1787  000028                     memset@n:
  1788                           	opt stack 0
  1789  000028                     strncmp@len:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x27
  1793  000028                     	ds	2
  1794  00002A                     ??_strncmp:
  1795  00002A                     scroll_off@k:
  1796                           	opt stack 0
  1797  00002A                     memset@p:
  1798                           	opt stack 0
  1799                           
  1800                           ; 2 bytes @ 0x29
  1801  00002A                     	ds	2
  1802  00002C                     ??_printf:
  1803  00002C                     scroll_off@line:
  1804                           	opt stack 0
  1805  00002C                     scroll_left_to_right@clcd_display_string_details:
  1806                           	opt stack 0
  1807  00002C                     scroll_right_to_left@clcd_display_string_details:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0x2B
  1811  00002C                     	ds	1
  1812  00002D                     ?_strstr:
  1813                           	opt stack 0
  1814  00002D                     scroll_off@display_char_count:
  1815                           	opt stack 0
  1816  00002D                     printf@flag:
  1817                           	opt stack 0
  1818  00002D                     strstr@s1:
  1819                           	opt stack 0
  1820                           
  1821                           ; 2 bytes @ 0x2C
  1822  00002D                     	ds	1
  1823  00002E                     ??_scroll_left_to_right:
  1824  00002E                     ??_scroll_right_to_left:
  1825  00002E                     scroll_off@str_len:
  1826                           	opt stack 0
  1827  00002E                     printf@prec:
  1828                           	opt stack 0
  1829                           
  1830                           ; 1 bytes @ 0x2D
  1831  00002E                     	ds	1
  1832  00002F                     scroll_off@j:
  1833                           	opt stack 0
  1834  00002F                     printf@cp:
  1835                           	opt stack 0
  1836  00002F                     strstr@s2:
  1837                           	opt stack 0
  1838                           
  1839                           ; 2 bytes @ 0x2E
  1840  00002F                     	ds	2
  1841  000031                     scroll_off@i:
  1842                           	opt stack 0
  1843  000031                     printf@ap:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0x30
  1847  000031                     	ds	2
  1848  000033                     printf@val:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0x32
  1852  000033                     	ds	2
  1853  000035                     printf@c:
  1854                           	opt stack 0
  1855                           
  1856                           ; 1 bytes @ 0x34
  1857  000035                     	ds	1
  1858  000036                     init_clcd_cusotom_lcd@clcd_init_col:
  1859                           	opt stack 0
  1860  000036                     conflict_check@new_start_point:
  1861                           	opt stack 0
  1862  000036                     scroll_left_to_right@line:
  1863                           	opt stack 0
  1864  000036                     copy_data@clcd_str_data:
  1865                           	opt stack 0
  1866  000036                     collect_row@str:
  1867                           	opt stack 0
  1868  000036                     collect_column@str:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x35
  1872  000036                     	ds	1
  1873  000037                     init_clcd_cusotom_lcd@clcd_init_row:
  1874                           	opt stack 0
  1875  000037                     conflict_check@new_end_point:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x36
  1879  000037                     	ds	1
  1880  000038                     ??_conflict_check:
  1881  000038                     copy_data@data:
  1882                           	opt stack 0
  1883  000038                     collect_row@data_row:
  1884                           	opt stack 0
  1885  000038                     collect_column@data_column:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x37
  1889  000038                     	ds	2
  1890  00003A                     ??_copy_data:
  1891  00003A                     ??_collect_row:
  1892  00003A                     ??_collect_column:
  1893                           
  1894                           ; 1 bytes @ 0x39
  1895  00003A                     	ds	1
  1896  00003B                     conflict_check@exist_uid_idx:
  1897                           	opt stack 0
  1898  00003B                     scroll_right_to_left@line:
  1899                           	opt stack 0
  1900                           
  1901                           ; 1 bytes @ 0x3A
  1902  00003B                     	ds	1
  1903  00003C                     ??_make_display:
  1904  00003C                     conflict_check@conflict:
  1905                           	opt stack 0
  1906                           
  1907                           ; 1 bytes @ 0x3B
  1908  00003C                     	ds	1
  1909  00003D                     collect_column@column:
  1910                           	opt stack 0
  1911  00003D                     conflict_check@i:
  1912                           	opt stack 0
  1913  00003D                     collect_row@i:
  1914                           	opt stack 0
  1915                           
  1916                           ; 2 bytes @ 0x3C
  1917  00003D                     	ds	1
  1918  00003E                     collect_column@i:
  1919                           	opt stack 0
  1920                           
  1921                           ; 2 bytes @ 0x3D
  1922  00003E                     	ds	1
  1923  00003F                     collect_row@row:
  1924                           	opt stack 0
  1925  00003F                     make_display@count:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0x3E
  1929  00003F                     	ds	2
  1930  000041                     tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postdec1	equ	0xFE5
  1937                           fsr1h	equ	0xFE2
  1938                           fsr1l	equ	0xFE1
  1939                           
  1940                           ; 1 bytes @ 0x40
  1941 ;;
  1942 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1943 ;;
  1944 ;; *************** function _main *****************
  1945 ;; Defined at:
  1946 ;;		line 77 in file "main.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;		None
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;Total ram usage:        0 bytes
  1965 ;; Hardware stack levels required when called:   14
  1966 ;; This function calls:
  1967 ;;		_SYSTEM_Initialize
  1968 ;;		_TMR0_SetInterruptHandler
  1969 ;;		_TMR0_StartTimer
  1970 ;;		_TMR0_StopTimer
  1971 ;;		_TMR1_StopTimer
  1972 ;;		_TMR5_StopTimer
  1973 ;;		__delay_MS
  1974 ;;		_cmd_consol_task
  1975 ;;		_console_init
  1976 ;;		_make_display
  1977 ;;		_printf
  1978 ;; This function is called by:
  1979 ;;		Startup code after reset
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text0
  1984  003024                     __ptext0:
  1985                           	opt stack 0
  1986  003024                     _main:
  1987                           	opt stack 17
  1988                           
  1989                           ;main.c: 80: SYSTEM_Initialize();
  1990                           
  1991                           ;incstack = 0
  1992  003024  EC4F  F01B         	call	_SYSTEM_Initialize	;wreg free
  1993                           
  1994                           ;main.c: 81: TMR5_StopTimer();
  1995  003028  EC0C  F01C         	call	_TMR5_StopTimer	;wreg free
  1996                           
  1997                           ;main.c: 82: TMR1_StopTimer();
  1998  00302C  EC12  F01C         	call	_TMR1_StopTimer	;wreg free
  1999                           
  2000                           ;main.c: 83: TMR0_StopTimer();
  2001  003030  EC14  F01C         	call	_TMR0_StopTimer	;wreg free
  2002                           
  2003                           ;main.c: 85: TMR0_SetInterruptHandler(make_array);
  2004  003034  0ED6               	movlw	low _make_array
  2005  003036  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  2006  003038  0E37               	movlw	high _make_array
  2007  00303A  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  2008  00303C  EC00  F01C         	call	_TMR0_SetInterruptHandler	;wreg free
  2009                           
  2010                           ;main.c: 105: (INTCONbits.GIE = 1);
  2011  003040  8EF2               	bsf	intcon,7,c	;volatile
  2012                           
  2013                           ;main.c: 111: (INTCONbits.PEIE = 1);
  2014  003042  8CF2               	bsf	intcon,6,c	;volatile
  2015                           
  2016                           ;main.c: 115: console_init();
  2017  003044  EC0C  F017         	call	_console_init	;wreg free
  2018                           
  2019                           ;main.c: 116: _delay_MS(1000);
  2020  003048  0E03               	movlw	3
  2021  00304A  6E11               	movwf	__delay_MS@delay+1,c
  2022  00304C  0EE8               	movlw	232
  2023  00304E  6E10               	movwf	__delay_MS@delay,c
  2024  003050  EC73  F019         	call	__delay_MS	;wreg free
  2025                           
  2026                           ;main.c: 118: printf("Init_complete..\r\n");
  2027  003054  0EF5               	movlw	low STR_122
  2028  003056  6E24               	movwf	printf@f,c
  2029  003058  0EFD               	movlw	high STR_122
  2030  00305A  6E25               	movwf	printf@f+1,c
  2031  00305C  EC09  F011         	call	_printf	;wreg free
  2032                           
  2033                           ;main.c: 133: TMR0_StartTimer();
  2034  003060  EC18  F01C         	call	_TMR0_StartTimer	;wreg free
  2035  003064                     l7355:
  2036                           
  2037                           ;main.c: 137: {
  2038                           ;main.c: 139: cmd_consol_task();
  2039  003064  EC1E  F00E         	call	_cmd_consol_task	;wreg free
  2040                           
  2041                           ;main.c: 140: if(display == 1){make_display();display = 0;}
  2042  003068  0100               	movlb	0	; () banked
  2043  00306A  0584               	decf	_display& (0+255),w,b
  2044  00306C  A4D8               	btfss	status,2,c
  2045  00306E  D7FA               	goto	l7355
  2046                           
  2047                           ; BSR set to: 0
  2048  003070  EC18  F010         	call	_make_display	;wreg free
  2049  003074  0E00               	movlw	0
  2050  003076  0100               	movlb	0	; () banked
  2051  003078  6F84               	movwf	_display& (0+255),b
  2052                           
  2053                           ; BSR set to: 0
  2054                           
  2055                           ; BSR set to: 0
  2056  00307A  D7F4               	goto	l7355
  2057  00307C                     __end_of_main:
  2058                           	opt stack 0
  2059                           tblptru	equ	0xFF8
  2060                           tblptrh	equ	0xFF7
  2061                           tblptrl	equ	0xFF6
  2062                           tablat	equ	0xFF5
  2063                           intcon	equ	0xFF2
  2064                           postinc0	equ	0xFEE
  2065                           wreg	equ	0xFE8
  2066                           postdec1	equ	0xFE5
  2067                           fsr1h	equ	0xFE2
  2068                           fsr1l	equ	0xFE1
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _console_init *****************
  2072 ;; Defined at:
  2073 ;;		line 363 in file "cmd_consol.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;Total ram usage:        0 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    7
  2094 ;; This function calls:
  2095 ;;		_clear_cmd_data
  2096 ;;		_memset
  2097 ;; This function is called by:
  2098 ;;		_main
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text1
  2103  002E18                     __ptext1:
  2104                           	opt stack 0
  2105  002E18                     _console_init:
  2106                           	opt stack 23
  2107                           
  2108                           ;cmd_consol.c: 364: cmd_consol_state = CMD_CONSOL_INIT;
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;incstack = 0
  2112  002E18  0E00               	movlw	0
  2113  002E1A  0100               	movlb	0	; () banked
  2114  002E1C  6F83               	movwf	_cmd_consol_state& (0+255),b
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;cmd_consol.c: 365: clear_cmd_data();
  2118  002E1E  EC63  F01A         	call	_clear_cmd_data	;wreg free
  2119                           
  2120                           ;cmd_consol.c: 366: valid_cmd = 0;
  2121  002E22  0E00               	movlw	0
  2122  002E24  6E48               	movwf	_valid_cmd,c
  2123                           
  2124                           ;cmd_consol.c: 367: clcd_init_row = 0;
  2125  002E26  0E00               	movlw	0
  2126  002E28  0100               	movlb	0	; () banked
  2127  002E2A  6F82               	movwf	_clcd_init_row& (0+255),b
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;cmd_consol.c: 368: clcd_init_col = 0;
  2131  002E2C  0E00               	movlw	0
  2132  002E2E  0100               	movlb	0	; () banked
  2133  002E30  6F81               	movwf	_clcd_init_col& (0+255),b
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;cmd_consol.c: 369: check = 0;
  2137  002E32  0E00               	movlw	0
  2138  002E34  0100               	movlb	0	; () banked
  2139  002E36  6F80               	movwf	_check& (0+255),b
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;cmd_consol.c: 370: memset(CMD, 0, sizeof (CMD));
  2143  002E38  0ECB               	movlw	low _CMD
  2144  002E3A  6E24               	movwf	memset@p1,c
  2145  002E3C  0E00               	movlw	high _CMD
  2146  002E3E  6E25               	movwf	memset@p1+1,c
  2147  002E40  0E00               	movlw	0
  2148  002E42  6E27               	movwf	memset@c+1,c
  2149  002E44  0E00               	movlw	0
  2150  002E46  6E26               	movwf	memset@c,c
  2151  002E48  0E00               	movlw	0
  2152  002E4A  6E29               	movwf	memset@n+1,c
  2153  002E4C  0E0F               	movlw	15
  2154  002E4E  6E28               	movwf	memset@n,c
  2155  002E50  ECAC  F01A         	call	_memset	;wreg free
  2156                           
  2157                           ;cmd_consol.c: 371: memset(str_data, 0, sizeof (str_data));
  2158  002E54  0E50               	movlw	low _str_data
  2159  002E56  6E24               	movwf	memset@p1,c
  2160  002E58  0E01               	movlw	high _str_data
  2161  002E5A  6E25               	movwf	memset@p1+1,c
  2162  002E5C  0E00               	movlw	0
  2163  002E5E  6E27               	movwf	memset@c+1,c
  2164  002E60  0E00               	movlw	0
  2165  002E62  6E26               	movwf	memset@c,c
  2166  002E64  0E00               	movlw	0
  2167  002E66  6E29               	movwf	memset@n+1,c
  2168  002E68  0E28               	movlw	40
  2169  002E6A  6E28               	movwf	memset@n,c
  2170  002E6C  ECAC  F01A         	call	_memset	;wreg free
  2171                           
  2172                           ;cmd_consol.c: 372: memset(uart_str, 0, sizeof (uart_str));
  2173  002E70  0E00               	movlw	low _uart_str
  2174  002E72  6E24               	movwf	memset@p1,c
  2175  002E74  0E02               	movlw	high _uart_str
  2176  002E76  6E25               	movwf	memset@p1+1,c
  2177  002E78  0E00               	movlw	0
  2178  002E7A  6E27               	movwf	memset@c+1,c
  2179  002E7C  0E00               	movlw	0
  2180  002E7E  6E26               	movwf	memset@c,c
  2181  002E80  0E00               	movlw	0
  2182  002E82  6E29               	movwf	memset@n+1,c
  2183  002E84  0E96               	movlw	150
  2184  002E86  6E28               	movwf	memset@n,c
  2185  002E88  ECAC  F01A         	call	_memset	;wreg free
  2186  002E8C  0012               	return		;funcret
  2187  002E8E                     __end_of_console_init:
  2188                           	opt stack 0
  2189                           tblptru	equ	0xFF8
  2190                           tblptrh	equ	0xFF7
  2191                           tblptrl	equ	0xFF6
  2192                           tablat	equ	0xFF5
  2193                           intcon	equ	0xFF2
  2194                           postinc0	equ	0xFEE
  2195                           wreg	equ	0xFE8
  2196                           postdec1	equ	0xFE5
  2197                           fsr1h	equ	0xFE2
  2198                           fsr1l	equ	0xFE1
  2199                           status	equ	0xFD8
  2200                           
  2201 ;; *************** function _clear_cmd_data *****************
  2202 ;; Defined at:
  2203 ;;		line 8 in file "cmd_consol.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;		None
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;		None
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;Total ram usage:        0 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    6
  2224 ;; This function calls:
  2225 ;;		_memset
  2226 ;; This function is called by:
  2227 ;;		_console_init
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text2
  2232  0034C6                     __ptext2:
  2233                           	opt stack 0
  2234  0034C6                     _clear_cmd_data:
  2235                           	opt stack 23
  2236                           
  2237                           ;cmd_consol.c: 9: memset(&cmd_data, 0, sizeof (CMD_CONSOL_DATA));
  2238                           
  2239                           ;incstack = 0
  2240  0034C6  0E86               	movlw	low _cmd_data
  2241  0034C8  6E24               	movwf	memset@p1,c
  2242  0034CA  0E00               	movlw	high _cmd_data
  2243  0034CC  6E25               	movwf	memset@p1+1,c
  2244  0034CE  0E00               	movlw	0
  2245  0034D0  6E27               	movwf	memset@c+1,c
  2246  0034D2  0E00               	movlw	0
  2247  0034D4  6E26               	movwf	memset@c,c
  2248  0034D6  0E00               	movlw	0
  2249  0034D8  6E29               	movwf	memset@n+1,c
  2250  0034DA  0E31               	movlw	49
  2251  0034DC  6E28               	movwf	memset@n,c
  2252  0034DE  ECAC  F01A         	call	_memset	;wreg free
  2253                           
  2254                           ;cmd_consol.c: 11: cmd_data.scroll = -1;
  2255  0034E2  0100               	movlb	0	; () banked
  2256  0034E4  69B5               	setf	(_cmd_data+47)& (0+255),b
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;cmd_consol.c: 12: cmd_data.end_col = cmd_data.start_col = -1;
  2260  0034E6  0100               	movlb	0	; () banked
  2261  0034E8  69B1               	setf	(_cmd_data+43)& (0+255),b
  2262  0034EA  0100               	movlb	0	; () banked
  2263  0034EC  69B3               	setf	(_cmd_data+45)& (0+255),b
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;cmd_consol.c: 13: cmd_data.end_row = cmd_data.end_row = -1;
  2267  0034EE  0100               	movlb	0	; () banked
  2268  0034F0  69B2               	setf	(_cmd_data+44)& (0+255),b
  2269  0034F2  0100               	movlb	0	; () banked
  2270  0034F4  69B2               	setf	(_cmd_data+44)& (0+255),b
  2271                           
  2272                           ; BSR set to: 0
  2273  0034F6  0012               	return		;funcret
  2274  0034F8                     __end_of_clear_cmd_data:
  2275                           	opt stack 0
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           intcon	equ	0xFF2
  2281                           postinc0	equ	0xFEE
  2282                           wreg	equ	0xFE8
  2283                           postdec1	equ	0xFE5
  2284                           fsr1h	equ	0xFE2
  2285                           fsr1l	equ	0xFE1
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _cmd_consol_task *****************
  2289 ;; Defined at:
  2290 ;;		line 375 in file "cmd_consol.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  ch              1   14[BANK1 ] unsigned char 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Totals:         0       4       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;Total ram usage:        5 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:   13
  2311 ;; This function calls:
  2312 ;;		_getch
  2313 ;;		_memset
  2314 ;;		_parse_cmd_str
  2315 ;;		_printf
  2316 ;;		_puts
  2317 ;;		_reply_to_host
  2318 ;; This function is called by:
  2319 ;;		_main
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text3
  2324  001C3C                     __ptext3:
  2325                           	opt stack 0
  2326  001C3C                     _cmd_consol_task:
  2327                           	opt stack 17
  2328                           
  2329                           ;cmd_consol.c: 376: if ((eusart1RxCount) > 0) {
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;incstack = 0
  2333  001C3C  5043               	movf	_eusart1RxCount,w,c	;volatile
  2334  001C3E  B4D8               	btfsc	status,2,c
  2335  001C40  D0EE               	goto	l7223
  2336                           
  2337                           ;cmd_consol.c: 377: static int i = 0;
  2338                           ;cmd_consol.c: 378: unsigned char ch = 0;
  2339  001C42  0E00               	movlw	0
  2340  001C44  0101               	movlb	1	; () banked
  2341  001C46  6F86               	movwf	cmd_consol_task@ch& (0+255),b
  2342                           
  2343                           ;cmd_consol.c: 379: while ((eusart1RxCount)) {
  2344  001C48  D06E               	goto	l7185
  2345  001C4A                     l7157:
  2346                           
  2347                           ;cmd_consol.c: 380: ch = getch();
  2348  001C4A  EC09  F01C         	call	_getch	;wreg free
  2349  001C4E  0101               	movlb	1	; () banked
  2350  001C50  6F86               	movwf	cmd_consol_task@ch& (0+255),b
  2351                           
  2352                           ; BSR set to: 1
  2353                           ;cmd_consol.c: 381: if (ch == '\n' || ch == '\r') {
  2354  001C52  0E0A               	movlw	10
  2355  001C54  0101               	movlb	1	; () banked
  2356  001C56  1986               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2357  001C58  B4D8               	btfsc	status,2,c
  2358  001C5A  D005               	goto	l7163
  2359                           
  2360                           ; BSR set to: 1
  2361  001C5C  0E0D               	movlw	13
  2362  001C5E  0101               	movlb	1	; () banked
  2363  001C60  1986               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2364  001C62  A4D8               	btfss	status,2,c
  2365  001C64  D00F               	goto	l7169
  2366  001C66                     l7163:
  2367                           
  2368                           ; BSR set to: 1
  2369                           ;cmd_consol.c: 382: i = 0;
  2370  001C66  0E00               	movlw	0
  2371  001C68  0100               	movlb	0	; () banked
  2372  001C6A  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2373  001C6C  0E00               	movlw	0
  2374  001C6E  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2375                           
  2376                           ;cmd_consol.c: 383: check = 1;
  2377  001C70  0E01               	movlw	1
  2378  001C72  0100               	movlb	0	; () banked
  2379  001C74  6F80               	movwf	_check& (0+255),b
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;cmd_consol.c: 384: printf("\r\n");
  2383  001C76  0EAA               	movlw	low (STR_58+9)
  2384  001C78  6E24               	movwf	printf@f,c
  2385  001C7A  0EFE               	movlw	high (STR_58+9)
  2386  001C7C  6E25               	movwf	printf@f+1,c
  2387  001C7E  EC09  F011         	call	_printf	;wreg free
  2388                           
  2389                           ;cmd_consol.c: 385: break;
  2390  001C82  D054               	goto	l7187
  2391  001C84                     l7169:
  2392  001C84  0E08               	movlw	8
  2393  001C86  0101               	movlb	1	; () banked
  2394  001C88  1986               	xorwf	cmd_consol_task@ch& (0+255),w,b
  2395  001C8A  A4D8               	btfss	status,2,c
  2396  001C8C  D02A               	goto	l7179
  2397                           
  2398                           ; BSR set to: 1
  2399                           ;cmd_consol.c: 387: uart_str[i-1]=0;
  2400  001C8E  0EFF               	movlw	255
  2401  001C90  0100               	movlb	0	; () banked
  2402  001C92  6FE8               	movwf	??_cmd_consol_task& (0+255),b
  2403  001C94  0EFF               	movlw	255
  2404  001C96  0100               	movlb	0	; () banked
  2405  001C98  6FE9               	movwf	(??_cmd_consol_task+1)& (0+255),b
  2406  001C9A  C07A  F0EA         	movff	cmd_consol_task@i,??_cmd_consol_task+2
  2407  001C9E  C07B  F0EB         	movff	cmd_consol_task@i+1,??_cmd_consol_task+3
  2408  001CA2  0100               	movlb	0	; () banked
  2409  001CA4  51E8               	movf	??_cmd_consol_task& (0+255),w,b
  2410  001CA6  0100               	movlb	0	; () banked
  2411  001CA8  27EA               	addwf	(??_cmd_consol_task+2)& (0+255),f,b
  2412  001CAA  0100               	movlb	0	; () banked
  2413  001CAC  51E9               	movf	(??_cmd_consol_task+1)& (0+255),w,b
  2414  001CAE  0100               	movlb	0	; () banked
  2415  001CB0  23EB               	addwfc	(??_cmd_consol_task+3)& (0+255),f,b
  2416  001CB2  0E00               	movlw	low _uart_str
  2417  001CB4  0100               	movlb	0	; () banked
  2418  001CB6  25EA               	addwf	(??_cmd_consol_task+2)& (0+255),w,b
  2419  001CB8  6ED9               	movwf	fsr2l,c
  2420  001CBA  0E02               	movlw	high _uart_str
  2421  001CBC  0100               	movlb	0	; () banked
  2422  001CBE  21EB               	addwfc	(??_cmd_consol_task+3)& (0+255),w,b
  2423  001CC0  6EDA               	movwf	fsr2h,c
  2424  001CC2  0E00               	movlw	0
  2425  001CC4  6EDF               	movwf	indf2,c
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;cmd_consol.c: 388: i--;
  2429  001CC6  0100               	movlb	0	; () banked
  2430  001CC8  077A               	decf	cmd_consol_task@i& (0+255),f,b
  2431  001CCA  A0D8               	btfss	status,0,c
  2432  001CCC  077B               	decf	(cmd_consol_task@i+1)& (0+255),f,b
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;cmd_consol.c: 389: printf("%c", ch);
  2436  001CCE  0EFA               	movlw	low STR_116
  2437  001CD0  6E24               	movwf	printf@f,c
  2438  001CD2  0EFF               	movlw	high STR_116
  2439  001CD4  6E25               	movwf	printf@f+1,c
  2440  001CD6  C186  F026         	movff	cmd_consol_task@ch,?_printf+2
  2441  001CDA  6A27               	clrf	?_printf+3,c
  2442  001CDC  EC09  F011         	call	_printf	;wreg free
  2443                           
  2444                           ;cmd_consol.c: 390: continue;
  2445  001CE0  D022               	goto	l7185
  2446  001CE2                     l7179:
  2447                           
  2448                           ;cmd_consol.c: 392: else {
  2449                           ;cmd_consol.c: 393: uart_str[i] = ch;
  2450  001CE2  0E00               	movlw	low _uart_str
  2451  001CE4  0100               	movlb	0	; () banked
  2452  001CE6  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2453  001CE8  6ED9               	movwf	fsr2l,c
  2454  001CEA  0E02               	movlw	high _uart_str
  2455  001CEC  0100               	movlb	0	; () banked
  2456  001CEE  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2457  001CF0  6EDA               	movwf	fsr2h,c
  2458  001CF2  C186  FFDF         	movff	cmd_consol_task@ch,indf2
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;cmd_consol.c: 394: printf("%c", uart_str[i]);
  2462  001CF6  0EFA               	movlw	low STR_116
  2463  001CF8  6E24               	movwf	printf@f,c
  2464  001CFA  0EFF               	movlw	high STR_116
  2465  001CFC  6E25               	movwf	printf@f+1,c
  2466  001CFE  0E00               	movlw	low _uart_str
  2467  001D00  0100               	movlb	0	; () banked
  2468  001D02  257A               	addwf	cmd_consol_task@i& (0+255),w,b
  2469  001D04  6ED9               	movwf	fsr2l,c
  2470  001D06  0E02               	movlw	high _uart_str
  2471  001D08  0100               	movlb	0	; () banked
  2472  001D0A  217B               	addwfc	(cmd_consol_task@i+1)& (0+255),w,b
  2473  001D0C  6EDA               	movwf	fsr2h,c
  2474  001D0E  50DF               	movf	indf2,w,c
  2475  001D10  0100               	movlb	0	; () banked
  2476  001D12  6FE8               	movwf	??_cmd_consol_task& (0+255),b
  2477  001D14  0100               	movlb	0	; () banked
  2478  001D16  51E8               	movf	??_cmd_consol_task& (0+255),w,b
  2479  001D18  6E26               	movwf	?_printf+2,c
  2480  001D1A  6A27               	clrf	?_printf+3,c
  2481  001D1C  EC09  F011         	call	_printf	;wreg free
  2482                           
  2483                           ;cmd_consol.c: 395: }
  2484                           ;cmd_consol.c: 396: i++;
  2485  001D20  0100               	movlb	0	; () banked
  2486  001D22  4B7A               	infsnz	cmd_consol_task@i& (0+255),f,b
  2487  001D24  2B7B               	incf	(cmd_consol_task@i+1)& (0+255),f,b
  2488  001D26                     l7185:
  2489  001D26  5043               	movf	_eusart1RxCount,w,c	;volatile
  2490  001D28  A4D8               	btfss	status,2,c
  2491  001D2A  D78F               	goto	l7157
  2492  001D2C                     l7187:
  2493                           
  2494                           ;cmd_consol.c: 397: }
  2495                           ;cmd_consol.c: 398: if (i > 150) {
  2496  001D2C  0100               	movlb	0	; () banked
  2497  001D2E  BF7B               	btfsc	(cmd_consol_task@i+1)& (0+255),7,b
  2498  001D30  D076               	goto	l7223
  2499  001D32  0100               	movlb	0	; () banked
  2500  001D34  517B               	movf	(cmd_consol_task@i+1)& (0+255),w,b
  2501  001D36  E105               	bnz	u7640
  2502  001D38  0E97               	movlw	151
  2503  001D3A  0100               	movlb	0	; () banked
  2504  001D3C  5D7A               	subwf	cmd_consol_task@i& (0+255),w,b
  2505  001D3E  A0D8               	btfss	status,0,c
  2506  001D40  D06E               	goto	l7223
  2507  001D42                     u7640:
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;cmd_consol.c: 399: puts("ERR_CMD_LEN");
  2511  001D42  0EDD               	movlw	low STR_118
  2512  001D44  6E14               	movwf	puts@s,c
  2513  001D46  0EFE               	movlw	high STR_118
  2514  001D48  6E15               	movwf	puts@s+1,c
  2515  001D4A  EC94  F01B         	call	_puts	;wreg free
  2516                           
  2517                           ;cmd_consol.c: 400: i = 0;
  2518  001D4E  0E00               	movlw	0
  2519  001D50  0100               	movlb	0	; () banked
  2520  001D52  6F7B               	movwf	(cmd_consol_task@i+1)& (0+255),b
  2521  001D54  0E00               	movlw	0
  2522  001D56  6F7A               	movwf	cmd_consol_task@i& (0+255),b
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;cmd_consol.c: 401: }
  2526                           ;cmd_consol.c: 402: }
  2527                           ;cmd_consol.c: 403: switch (cmd_consol_state) {
  2528                           
  2529                           ; BSR set to: 0
  2530  001D58  D062               	goto	l7223
  2531  001D5A                     l7193:
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;cmd_consol.c: 405: {
  2535                           ;cmd_consol.c: 406: memset(CMD, 0, sizeof (CMD));
  2536  001D5A  0ECB               	movlw	low _CMD
  2537  001D5C  6E24               	movwf	memset@p1,c
  2538  001D5E  0E00               	movlw	high _CMD
  2539  001D60  6E25               	movwf	memset@p1+1,c
  2540  001D62  0E00               	movlw	0
  2541  001D64  6E27               	movwf	memset@c+1,c
  2542  001D66  0E00               	movlw	0
  2543  001D68  6E26               	movwf	memset@c,c
  2544  001D6A  0E00               	movlw	0
  2545  001D6C  6E29               	movwf	memset@n+1,c
  2546  001D6E  0E0F               	movlw	15
  2547  001D70  6E28               	movwf	memset@n,c
  2548  001D72  ECAC  F01A         	call	_memset	;wreg free
  2549                           
  2550                           ;cmd_consol.c: 407: memset(uart_str, 0, sizeof (uart_str));
  2551  001D76  0E00               	movlw	low _uart_str
  2552  001D78  6E24               	movwf	memset@p1,c
  2553  001D7A  0E02               	movlw	high _uart_str
  2554  001D7C  6E25               	movwf	memset@p1+1,c
  2555  001D7E  0E00               	movlw	0
  2556  001D80  6E27               	movwf	memset@c+1,c
  2557  001D82  0E00               	movlw	0
  2558  001D84  6E26               	movwf	memset@c,c
  2559  001D86  0E00               	movlw	0
  2560  001D88  6E29               	movwf	memset@n+1,c
  2561  001D8A  0E96               	movlw	150
  2562  001D8C  6E28               	movwf	memset@n,c
  2563  001D8E  ECAC  F01A         	call	_memset	;wreg free
  2564                           
  2565                           ;cmd_consol.c: 408: valid_cmd = 0;
  2566  001D92  0E00               	movlw	0
  2567  001D94  6E48               	movwf	_valid_cmd,c
  2568                           
  2569                           ;cmd_consol.c: 409: puts("Init_Done\r\n");
  2570  001D96  0EAD               	movlw	low STR_119
  2571  001D98  6E14               	movwf	puts@s,c
  2572  001D9A  0EFE               	movlw	high STR_119
  2573  001D9C  6E15               	movwf	puts@s+1,c
  2574  001D9E  EC94  F01B         	call	_puts	;wreg free
  2575                           
  2576                           ;cmd_consol.c: 410: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2577  001DA2  0E01               	movlw	1
  2578  001DA4  0100               	movlb	0	; () banked
  2579  001DA6  6F83               	movwf	_cmd_consol_state& (0+255),b
  2580                           
  2581                           ;cmd_consol.c: 411: break;
  2582  001DA8  0012               	return	
  2583  001DAA                     l7201:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;cmd_consol.c: 414: {
  2587                           ;cmd_consol.c: 415: static int i = 0;
  2588                           ;cmd_consol.c: 417: if (check == 1) {
  2589  001DAA  0100               	movlb	0	; () banked
  2590  001DAC  0580               	decf	_check& (0+255),w,b
  2591  001DAE  A4D8               	btfss	status,2,c
  2592  001DB0  0012               	return	
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;cmd_consol.c: 418: check = 0;
  2596  001DB2  0E00               	movlw	0
  2597  001DB4  0100               	movlb	0	; () banked
  2598  001DB6  6F80               	movwf	_check& (0+255),b
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;cmd_consol.c: 419: if (parse_cmd_str(uart_str) == 0) {
  2602  001DB8  0E00               	movlw	low _uart_str
  2603  001DBA  0100               	movlb	0	; () banked
  2604  001DBC  6FDA               	movwf	parse_cmd_str@str& (0+255),b
  2605  001DBE  0E02               	movlw	high _uart_str
  2606  001DC0  0100               	movlb	0	; () banked
  2607  001DC2  6FDB               	movwf	(parse_cmd_str@str+1)& (0+255),b
  2608  001DC4  EC55  F000         	call	_parse_cmd_str	;wreg free
  2609  001DC8  0900               	iorlw	0
  2610  001DCA  A4D8               	btfss	status,2,c
  2611  001DCC  D012               	goto	l7211
  2612                           
  2613                           ;cmd_consol.c: 420: memset(uart_str, 0, sizeof (uart_str));
  2614  001DCE  0E00               	movlw	low _uart_str
  2615  001DD0  6E24               	movwf	memset@p1,c
  2616  001DD2  0E02               	movlw	high _uart_str
  2617  001DD4  6E25               	movwf	memset@p1+1,c
  2618  001DD6  0E00               	movlw	0
  2619  001DD8  6E27               	movwf	memset@c+1,c
  2620  001DDA  0E00               	movlw	0
  2621  001DDC  6E26               	movwf	memset@c,c
  2622  001DDE  0E00               	movlw	0
  2623  001DE0  6E29               	movwf	memset@n+1,c
  2624  001DE2  0E96               	movlw	150
  2625  001DE4  6E28               	movwf	memset@n,c
  2626  001DE6  ECAC  F01A         	call	_memset	;wreg free
  2627                           
  2628                           ;cmd_consol.c: 421: cmd_consol_state = CMD_CONSOL_REPLY_HOST;
  2629  001DEA  0E02               	movlw	2
  2630  001DEC  0100               	movlb	0	; () banked
  2631  001DEE  6F83               	movwf	_cmd_consol_state& (0+255),b
  2632                           
  2633                           ;cmd_consol.c: 422: } else {
  2634  001DF0  0012               	return	
  2635  001DF2                     l7211:
  2636                           
  2637                           ;cmd_consol.c: 423: printf("%s\r\n", "ERROR");
  2638  001DF2  0EDA               	movlw	low (STR_109+2)
  2639  001DF4  6E24               	movwf	printf@f,c
  2640  001DF6  0EFF               	movlw	high (STR_109+2)
  2641  001DF8  6E25               	movwf	printf@f+1,c
  2642  001DFA  0EE6               	movlw	low STR_106
  2643  001DFC  6E26               	movwf	?_printf+2,c
  2644  001DFE  0EFF               	movlw	high STR_106
  2645  001E00  6E27               	movwf	?_printf+3,c
  2646  001E02  EC09  F011         	call	_printf	;wreg free
  2647                           
  2648                           ;cmd_consol.c: 424: }
  2649                           ;cmd_consol.c: 425: }
  2650                           ;cmd_consol.c: 426: break;
  2651  001E06  0012               	return	
  2652  001E08                     l7213:
  2653                           
  2654                           ;cmd_consol.c: 429: {
  2655                           ;cmd_consol.c: 430: if (valid_cmd == 1) {
  2656  001E08  0448               	decf	_valid_cmd,w,c
  2657  001E0A  A4D8               	btfss	status,2,c
  2658  001E0C  D004               	goto	l7219
  2659                           
  2660                           ;cmd_consol.c: 431: reply_to_host();
  2661  001E0E  EC60  F008         	call	_reply_to_host	;wreg free
  2662                           
  2663                           ;cmd_consol.c: 432: valid_cmd = 0;
  2664  001E12  0E00               	movlw	0
  2665  001E14  6E48               	movwf	_valid_cmd,c
  2666  001E16                     l7219:
  2667                           
  2668                           ;cmd_consol.c: 434: }
  2669                           ;cmd_consol.c: 435: cmd_consol_state = CMD_CONSOL_READ_CMD;
  2670  001E16  0E01               	movlw	1
  2671  001E18  0100               	movlb	0	; () banked
  2672  001E1A  6F83               	movwf	_cmd_consol_state& (0+255),b
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;cmd_consol.c: 437: }
  2676                           ;cmd_consol.c: 438: }
  2677                           
  2678                           ;cmd_consol.c: 436: break;
  2679  001E1C  0012               	return	
  2680  001E1E                     l7223:
  2681  001E1E  0100               	movlb	0	; () banked
  2682  001E20  5183               	movf	_cmd_consol_state& (0+255),w,b
  2683                           
  2684                           ; Switch size 1, requested type "space"
  2685                           ; Number of cases is 3, Range of values is 0 to 2
  2686                           ; switch strategies available:
  2687                           ; Name         Instructions Cycles
  2688                           ; simple_byte           10     6 (average)
  2689                           ;	Chosen strategy is simple_byte
  2690  001E22  0A00               	xorlw	0	; case 0
  2691  001E24  B4D8               	btfsc	status,2,c
  2692  001E26  D799               	goto	l7193
  2693  001E28  0A01               	xorlw	1	; case 1
  2694  001E2A  B4D8               	btfsc	status,2,c
  2695  001E2C  D7BE               	goto	l7201
  2696  001E2E  0A03               	xorlw	3	; case 2
  2697  001E30  A4D8               	btfss	status,2,c
  2698  001E32  0012               	return	
  2699  001E34  D7E9               	goto	l7213
  2700  001E36                     __end_of_cmd_consol_task:
  2701                           	opt stack 0
  2702                           tblptru	equ	0xFF8
  2703                           tblptrh	equ	0xFF7
  2704                           tblptrl	equ	0xFF6
  2705                           tablat	equ	0xFF5
  2706                           intcon	equ	0xFF2
  2707                           postinc0	equ	0xFEE
  2708                           wreg	equ	0xFE8
  2709                           postdec1	equ	0xFE5
  2710                           fsr1h	equ	0xFE2
  2711                           fsr1l	equ	0xFE1
  2712                           indf2	equ	0xFDF
  2713                           fsr2h	equ	0xFDA
  2714                           fsr2l	equ	0xFD9
  2715                           status	equ	0xFD8
  2716                           
  2717 ;; *************** function _reply_to_host *****************
  2718 ;; Defined at:
  2719 ;;		line 316 in file "cmd_consol.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;		None
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  ch              1   13[BANK0 ] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;Total ram usage:        4 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:   12
  2740 ;; This function calls:
  2741 ;;		_clcd_max_col
  2742 ;;		_clcd_max_row
  2743 ;;		_init_clcd_cusotom_lcd
  2744 ;;		_max_display_str
  2745 ;;		_max_display_support
  2746 ;;		_max_uid_range
  2747 ;;		_min_uid_range
  2748 ;;		_printf
  2749 ;;		_puts
  2750 ;;		_strcmp
  2751 ;;		_update_string_data
  2752 ;; This function is called by:
  2753 ;;		_cmd_consol_task
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text4
  2758  0010C0                     __ptext4:
  2759                           	opt stack 0
  2760  0010C0                     _reply_to_host:
  2761                           	opt stack 17
  2762                           
  2763                           ;cmd_consol.c: 317: if (strcmp(CMD, "KLM") == 0) {
  2764                           
  2765                           ;incstack = 0
  2766  0010C0  0ECB               	movlw	low _CMD
  2767  0010C2  6E10               	movwf	strcmp@s1,c
  2768  0010C4  0E00               	movlw	high _CMD
  2769  0010C6  6E11               	movwf	strcmp@s1+1,c
  2770  0010C8  0EF6               	movlw	low STR_72
  2771  0010CA  6E12               	movwf	strcmp@s2,c
  2772  0010CC  0EFF               	movlw	high STR_72
  2773  0010CE  6E13               	movwf	strcmp@s2+1,c
  2774  0010D0  ECE1  F018         	call	_strcmp	;wreg free
  2775  0010D4  5010               	movf	?_strcmp,w,c
  2776  0010D6  1011               	iorwf	?_strcmp+1,w,c
  2777  0010D8  A4D8               	btfss	status,2,c
  2778  0010DA  D007               	goto	l7043
  2779                           
  2780                           ;cmd_consol.c: 318: puts("OK\r\n");
  2781  0010DC  0E9C               	movlw	low (STR_77+8)
  2782  0010DE  6E14               	movwf	puts@s,c
  2783  0010E0  0EFE               	movlw	high (STR_77+8)
  2784  0010E2  6E15               	movwf	puts@s+1,c
  2785  0010E4  EC94  F01B         	call	_puts	;wreg free
  2786                           
  2787                           ;cmd_consol.c: 319: } else if (strcmp(CMD, "KLM+LCDS?") == 0) {
  2788  0010E8  0012               	return	
  2789  0010EA                     l7043:
  2790  0010EA  0ECB               	movlw	low _CMD
  2791  0010EC  6E10               	movwf	strcmp@s1,c
  2792  0010EE  0E00               	movlw	high _CMD
  2793  0010F0  6E11               	movwf	strcmp@s1+1,c
  2794  0010F2  0E4D               	movlw	low STR_28
  2795  0010F4  6E12               	movwf	strcmp@s2,c
  2796  0010F6  0EFF               	movlw	high STR_28
  2797  0010F8  6E13               	movwf	strcmp@s2+1,c
  2798  0010FA  ECE1  F018         	call	_strcmp	;wreg free
  2799  0010FE  5010               	movf	?_strcmp,w,c
  2800  001100  1011               	iorwf	?_strcmp+1,w,c
  2801  001102  A4D8               	btfss	status,2,c
  2802  001104  D017               	goto	l7047
  2803                           
  2804                           ;cmd_consol.c: 320: printf("%s\r\n", max_display_support());
  2805  001106  0EDA               	movlw	low (STR_109+2)
  2806  001108  6E24               	movwf	printf@f,c
  2807  00110A  0EFF               	movlw	high (STR_109+2)
  2808  00110C  6E25               	movwf	printf@f+1,c
  2809  00110E  ECF1  F01B         	call	_max_display_support	;wreg free
  2810  001112  C010  F026         	movff	?_max_display_support,?_printf+2
  2811  001116  C011  F027         	movff	?_max_display_support+1,?_printf+3
  2812  00111A  EC09  F011         	call	_printf	;wreg free
  2813                           
  2814                           ;cmd_consol.c: 321: printf("\r\n%s.., OK\r\n", "KLM+LCDS?");
  2815  00111E  0E94               	movlw	low STR_77
  2816  001120  6E24               	movwf	printf@f,c
  2817  001122  0EFE               	movlw	high STR_77
  2818  001124  6E25               	movwf	printf@f+1,c
  2819  001126  0E4D               	movlw	low STR_28
  2820  001128  6E26               	movwf	?_printf+2,c
  2821  00112A  0EFF               	movlw	high STR_28
  2822  00112C  6E27               	movwf	?_printf+3,c
  2823  00112E  EC09  F011         	call	_printf	;wreg free
  2824                           
  2825                           ;cmd_consol.c: 322: } else if (strcmp(CMD, "KLM+MC?") == 0) {
  2826  001132  0012               	return	
  2827  001134                     l7047:
  2828  001134  0ECB               	movlw	low _CMD
  2829  001136  6E10               	movwf	strcmp@s1,c
  2830  001138  0E00               	movlw	high _CMD
  2831  00113A  6E11               	movwf	strcmp@s1+1,c
  2832  00113C  0EBA               	movlw	low STR_24
  2833  00113E  6E12               	movwf	strcmp@s2,c
  2834  001140  0EFF               	movlw	high STR_24
  2835  001142  6E13               	movwf	strcmp@s2+1,c
  2836  001144  ECE1  F018         	call	_strcmp	;wreg free
  2837  001148  5010               	movf	?_strcmp,w,c
  2838  00114A  1011               	iorwf	?_strcmp+1,w,c
  2839  00114C  A4D8               	btfss	status,2,c
  2840  00114E  D019               	goto	l7051
  2841                           
  2842                           ;cmd_consol.c: 323: printf("%d\r\n", clcd_max_col());
  2843  001150  0EF0               	movlw	low (STR_13+14)
  2844  001152  6E24               	movwf	printf@f,c
  2845  001154  0EFD               	movlw	high (STR_13+14)
  2846  001156  6E25               	movwf	printf@f+1,c
  2847  001158  ECCA  F01B         	call	_clcd_max_col	;wreg free
  2848  00115C  0100               	movlb	0	; () banked
  2849  00115E  6FE4               	movwf	??_reply_to_host& (0+255),b
  2850  001160  0100               	movlb	0	; () banked
  2851  001162  51E4               	movf	??_reply_to_host& (0+255),w,b
  2852  001164  6E26               	movwf	?_printf+2,c
  2853  001166  6A27               	clrf	?_printf+3,c
  2854  001168  EC09  F011         	call	_printf	;wreg free
  2855                           
  2856                           ;cmd_consol.c: 324: printf("\r\n%s.., OK\r\n", "KLM+MC?");
  2857  00116C  0E94               	movlw	low STR_77
  2858  00116E  6E24               	movwf	printf@f,c
  2859  001170  0EFE               	movlw	high STR_77
  2860  001172  6E25               	movwf	printf@f+1,c
  2861  001174  0EBA               	movlw	low STR_24
  2862  001176  6E26               	movwf	?_printf+2,c
  2863  001178  0EFF               	movlw	high STR_24
  2864  00117A  6E27               	movwf	?_printf+3,c
  2865  00117C  EC09  F011         	call	_printf	;wreg free
  2866                           
  2867                           ;cmd_consol.c: 325: } else if (strcmp(CMD, "KLM+MR?") == 0) {
  2868  001180  0012               	return	
  2869  001182                     l7051:
  2870  001182  0ECB               	movlw	low _CMD
  2871  001184  6E10               	movwf	strcmp@s1,c
  2872  001186  0E00               	movlw	high _CMD
  2873  001188  6E11               	movwf	strcmp@s1+1,c
  2874  00118A  0EC2               	movlw	low STR_26
  2875  00118C  6E12               	movwf	strcmp@s2,c
  2876  00118E  0EFF               	movlw	high STR_26
  2877  001190  6E13               	movwf	strcmp@s2+1,c
  2878  001192  ECE1  F018         	call	_strcmp	;wreg free
  2879  001196  5010               	movf	?_strcmp,w,c
  2880  001198  1011               	iorwf	?_strcmp+1,w,c
  2881  00119A  A4D8               	btfss	status,2,c
  2882  00119C  D019               	goto	l7055
  2883                           
  2884                           ;cmd_consol.c: 326: printf("%d\r\n", clcd_max_row());
  2885  00119E  0EF0               	movlw	low (STR_13+14)
  2886  0011A0  6E24               	movwf	printf@f,c
  2887  0011A2  0EFD               	movlw	high (STR_13+14)
  2888  0011A4  6E25               	movwf	printf@f+1,c
  2889  0011A6  ECC3  F01B         	call	_clcd_max_row	;wreg free
  2890  0011AA  0100               	movlb	0	; () banked
  2891  0011AC  6FE4               	movwf	??_reply_to_host& (0+255),b
  2892  0011AE  0100               	movlb	0	; () banked
  2893  0011B0  51E4               	movf	??_reply_to_host& (0+255),w,b
  2894  0011B2  6E26               	movwf	?_printf+2,c
  2895  0011B4  6A27               	clrf	?_printf+3,c
  2896  0011B6  EC09  F011         	call	_printf	;wreg free
  2897                           
  2898                           ;cmd_consol.c: 327: printf("\r\n%s.., OK\r\n", "KLM+MR?");
  2899  0011BA  0E94               	movlw	low STR_77
  2900  0011BC  6E24               	movwf	printf@f,c
  2901  0011BE  0EFE               	movlw	high STR_77
  2902  0011C0  6E25               	movwf	printf@f+1,c
  2903  0011C2  0EC2               	movlw	low STR_26
  2904  0011C4  6E26               	movwf	?_printf+2,c
  2905  0011C6  0EFF               	movlw	high STR_26
  2906  0011C8  6E27               	movwf	?_printf+3,c
  2907  0011CA  EC09  F011         	call	_printf	;wreg free
  2908                           
  2909                           ;cmd_consol.c: 328: } else if (strcmp(CMD, "KLM+LCDS") == 0) {
  2910  0011CE  0012               	return	
  2911  0011D0                     l7055:
  2912  0011D0  0ECB               	movlw	low _CMD
  2913  0011D2  6E10               	movwf	strcmp@s1,c
  2914  0011D4  0E00               	movlw	high _CMD
  2915  0011D6  6E11               	movwf	strcmp@s1+1,c
  2916  0011D8  0E8F               	movlw	low STR_31
  2917  0011DA  6E12               	movwf	strcmp@s2,c
  2918  0011DC  0EFF               	movlw	high STR_31
  2919  0011DE  6E13               	movwf	strcmp@s2+1,c
  2920  0011E0  ECE1  F018         	call	_strcmp	;wreg free
  2921  0011E4  5010               	movf	?_strcmp,w,c
  2922  0011E6  1011               	iorwf	?_strcmp+1,w,c
  2923  0011E8  A4D8               	btfss	status,2,c
  2924  0011EA  D011               	goto	l7061
  2925                           
  2926                           ;cmd_consol.c: 329: init_clcd_cusotom_lcd(clcd_init_row, clcd_init_col);
  2927  0011EC  C081  F036         	movff	_clcd_init_col,init_clcd_cusotom_lcd@clcd_init_col
  2928  0011F0  0100               	movlb	0	; () banked
  2929  0011F2  5182               	movf	_clcd_init_row& (0+255),w,b
  2930  0011F4  EC3A  F014         	call	_init_clcd_cusotom_lcd
  2931                           
  2932                           ;cmd_consol.c: 330: printf("\r\n%s.., OK\r\n", "KLM+LCDS");
  2933  0011F8  0E94               	movlw	low STR_77
  2934  0011FA  6E24               	movwf	printf@f,c
  2935  0011FC  0EFE               	movlw	high STR_77
  2936  0011FE  6E25               	movwf	printf@f+1,c
  2937  001200  0E8F               	movlw	low STR_31
  2938  001202  6E26               	movwf	?_printf+2,c
  2939  001204  0EFF               	movlw	high STR_31
  2940  001206  6E27               	movwf	?_printf+3,c
  2941  001208  EC09  F011         	call	_printf	;wreg free
  2942                           
  2943                           ;cmd_consol.c: 331: } else if (strcmp(CMD, "KLM+GMDS?") == 0) {
  2944  00120C  0012               	return	
  2945  00120E                     l7061:
  2946  00120E  0ECB               	movlw	low _CMD
  2947  001210  6E10               	movwf	strcmp@s1,c
  2948  001212  0E00               	movlw	high _CMD
  2949  001214  6E11               	movwf	strcmp@s1+1,c
  2950  001216  0E57               	movlw	low STR_36
  2951  001218  6E12               	movwf	strcmp@s2,c
  2952  00121A  0EFF               	movlw	high STR_36
  2953  00121C  6E13               	movwf	strcmp@s2+1,c
  2954  00121E  ECE1  F018         	call	_strcmp	;wreg free
  2955  001222  5010               	movf	?_strcmp,w,c
  2956  001224  1011               	iorwf	?_strcmp+1,w,c
  2957  001226  A4D8               	btfss	status,2,c
  2958  001228  D03D               	goto	l7069
  2959                           
  2960                           ;cmd_consol.c: 332: if (max_display_str() != 0) {
  2961  00122A  ECBC  F01B         	call	_max_display_str	;wreg free
  2962  00122E  0900               	iorlw	0
  2963  001230  B4D8               	btfsc	status,2,c
  2964  001232  D01F               	goto	l7067
  2965                           
  2966                           ;cmd_consol.c: 333: printf("%d,%c-%c\r\n", max_display_str(), min_uid_range(), max_uid_r
      +                          ange());
  2967  001234  0EF5               	movlw	low STR_91
  2968  001236  6E24               	movwf	printf@f,c
  2969  001238  0EFE               	movlw	high STR_91
  2970  00123A  6E25               	movwf	printf@f+1,c
  2971  00123C  ECBC  F01B         	call	_max_display_str	;wreg free
  2972  001240  0100               	movlb	0	; () banked
  2973  001242  6FE4               	movwf	??_reply_to_host& (0+255),b
  2974  001244  0100               	movlb	0	; () banked
  2975  001246  51E4               	movf	??_reply_to_host& (0+255),w,b
  2976  001248  6E26               	movwf	?_printf+2,c
  2977  00124A  6A27               	clrf	?_printf+3,c
  2978  00124C  ECAE  F01B         	call	_min_uid_range	;wreg free
  2979  001250  0100               	movlb	0	; () banked
  2980  001252  6FE5               	movwf	(??_reply_to_host+1)& (0+255),b
  2981  001254  0100               	movlb	0	; () banked
  2982  001256  51E5               	movf	(??_reply_to_host+1)& (0+255),w,b
  2983  001258  6E28               	movwf	?_printf+4,c
  2984  00125A  6A29               	clrf	?_printf+5,c
  2985  00125C  ECB5  F01B         	call	_max_uid_range	;wreg free
  2986  001260  0100               	movlb	0	; () banked
  2987  001262  6FE6               	movwf	(??_reply_to_host+2)& (0+255),b
  2988  001264  0100               	movlb	0	; () banked
  2989  001266  51E6               	movf	(??_reply_to_host+2)& (0+255),w,b
  2990  001268  6E2A               	movwf	?_printf+6,c
  2991  00126A  6A2B               	clrf	?_printf+7,c
  2992  00126C  EC09  F011         	call	_printf	;wreg free
  2993                           
  2994                           ;cmd_consol.c: 334: } else {
  2995  001270  D00E               	goto	l804
  2996  001272                     l7067:
  2997                           
  2998                           ;cmd_consol.c: 335: printf("%d\r\n", max_display_str());
  2999  001272  0EF0               	movlw	low (STR_13+14)
  3000  001274  6E24               	movwf	printf@f,c
  3001  001276  0EFD               	movlw	high (STR_13+14)
  3002  001278  6E25               	movwf	printf@f+1,c
  3003  00127A  ECBC  F01B         	call	_max_display_str	;wreg free
  3004  00127E  0100               	movlb	0	; () banked
  3005  001280  6FE4               	movwf	??_reply_to_host& (0+255),b
  3006  001282  0100               	movlb	0	; () banked
  3007  001284  51E4               	movf	??_reply_to_host& (0+255),w,b
  3008  001286  6E26               	movwf	?_printf+2,c
  3009  001288  6A27               	clrf	?_printf+3,c
  3010  00128A  EC09  F011         	call	_printf	;wreg free
  3011  00128E                     l804:
  3012                           
  3013                           ;cmd_consol.c: 336: }
  3014                           ;cmd_consol.c: 337: printf("\r\n%s.., OK\r\n", "KLM+GMDS?");
  3015  00128E  0E94               	movlw	low STR_77
  3016  001290  6E24               	movwf	printf@f,c
  3017  001292  0EFE               	movlw	high STR_77
  3018  001294  6E25               	movwf	printf@f+1,c
  3019  001296  0E57               	movlw	low STR_36
  3020  001298  6E26               	movwf	?_printf+2,c
  3021  00129A  0EFF               	movlw	high STR_36
  3022  00129C  6E27               	movwf	?_printf+3,c
  3023  00129E  EC09  F011         	call	_printf	;wreg free
  3024                           
  3025                           ;cmd_consol.c: 338: } else if (strcmp(CMD, "KLM+SDSTR") == 0) {
  3026  0012A2  0012               	return	
  3027  0012A4                     l7069:
  3028  0012A4  0ECB               	movlw	low _CMD
  3029  0012A6  6E10               	movwf	strcmp@s1,c
  3030  0012A8  0E00               	movlw	high _CMD
  3031  0012AA  6E11               	movwf	strcmp@s1+1,c
  3032  0012AC  0E61               	movlw	low STR_38
  3033  0012AE  6E12               	movwf	strcmp@s2,c
  3034  0012B0  0EFF               	movlw	high STR_38
  3035  0012B2  6E13               	movwf	strcmp@s2+1,c
  3036  0012B4  ECE1  F018         	call	_strcmp	;wreg free
  3037  0012B8  5010               	movf	?_strcmp,w,c
  3038  0012BA  1011               	iorwf	?_strcmp+1,w,c
  3039  0012BC  A4D8               	btfss	status,2,c
  3040  0012BE  D00B               	goto	l7073
  3041                           
  3042                           ;cmd_consol.c: 339: printf("\r\n%s.., OK\r\n", "KLM+SDSTR");
  3043  0012C0  0E94               	movlw	low STR_77
  3044  0012C2  6E24               	movwf	printf@f,c
  3045  0012C4  0EFE               	movlw	high STR_77
  3046  0012C6  6E25               	movwf	printf@f+1,c
  3047  0012C8  0E61               	movlw	low STR_38
  3048  0012CA  6E26               	movwf	?_printf+2,c
  3049  0012CC  0EFF               	movlw	high STR_38
  3050  0012CE  6E27               	movwf	?_printf+3,c
  3051  0012D0  EC09  F011         	call	_printf	;wreg free
  3052                           
  3053                           ;cmd_consol.c: 340: } else if (strcmp(CMD, "KLM+SDSCROL") == 0) {
  3054  0012D4  0012               	return	
  3055  0012D6                     l7073:
  3056  0012D6  0ECB               	movlw	low _CMD
  3057  0012D8  6E10               	movwf	strcmp@s1,c
  3058  0012DA  0E00               	movlw	high _CMD
  3059  0012DC  6E11               	movwf	strcmp@s1+1,c
  3060  0012DE  0ED1               	movlw	low STR_46
  3061  0012E0  6E12               	movwf	strcmp@s2,c
  3062  0012E2  0EFE               	movlw	high STR_46
  3063  0012E4  6E13               	movwf	strcmp@s2+1,c
  3064  0012E6  ECE1  F018         	call	_strcmp	;wreg free
  3065  0012EA  5010               	movf	?_strcmp,w,c
  3066  0012EC  1011               	iorwf	?_strcmp+1,w,c
  3067  0012EE  A4D8               	btfss	status,2,c
  3068  0012F0  D00B               	goto	l7077
  3069                           
  3070                           ;cmd_consol.c: 341: printf("\r\n%s.., OK\r\n", "KLM+SDSCROL");
  3071  0012F2  0E94               	movlw	low STR_77
  3072  0012F4  6E24               	movwf	printf@f,c
  3073  0012F6  0EFE               	movlw	high STR_77
  3074  0012F8  6E25               	movwf	printf@f+1,c
  3075  0012FA  0ED1               	movlw	low STR_46
  3076  0012FC  6E26               	movwf	?_printf+2,c
  3077  0012FE  0EFE               	movlw	high STR_46
  3078  001300  6E27               	movwf	?_printf+3,c
  3079  001302  EC09  F011         	call	_printf	;wreg free
  3080                           
  3081                           ;cmd_consol.c: 342: } else if (strcmp(CMD, "KLM+SDSERC") == 0) {
  3082  001306  0012               	return	
  3083  001308                     l7077:
  3084  001308  0ECB               	movlw	low _CMD
  3085  00130A  6E10               	movwf	strcmp@s1,c
  3086  00130C  0E00               	movlw	high _CMD
  3087  00130E  6E11               	movwf	strcmp@s1+1,c
  3088  001310  0E37               	movlw	low STR_55
  3089  001312  6E12               	movwf	strcmp@s2,c
  3090  001314  0EFF               	movlw	high STR_55
  3091  001316  6E13               	movwf	strcmp@s2+1,c
  3092  001318  ECE1  F018         	call	_strcmp	;wreg free
  3093  00131C  5010               	movf	?_strcmp,w,c
  3094  00131E  1011               	iorwf	?_strcmp+1,w,c
  3095  001320  A4D8               	btfss	status,2,c
  3096  001322  D00B               	goto	l7081
  3097                           
  3098                           ;cmd_consol.c: 343: printf("\r\n%s.., OK\r\n", "KLM+SDSERC");
  3099  001324  0E94               	movlw	low STR_77
  3100  001326  6E24               	movwf	printf@f,c
  3101  001328  0EFE               	movlw	high STR_77
  3102  00132A  6E25               	movwf	printf@f+1,c
  3103  00132C  0E37               	movlw	low STR_55
  3104  00132E  6E26               	movwf	?_printf+2,c
  3105  001330  0EFF               	movlw	high STR_55
  3106  001332  6E27               	movwf	?_printf+3,c
  3107  001334  EC09  F011         	call	_printf	;wreg free
  3108                           
  3109                           ;cmd_consol.c: 344: } else if (strcmp(CMD, "KLM+UPDATE") == 0) {
  3110  001338  0012               	return	
  3111  00133A                     l7081:
  3112  00133A  0ECB               	movlw	low _CMD
  3113  00133C  6E10               	movwf	strcmp@s1,c
  3114  00133E  0E00               	movlw	high _CMD
  3115  001340  6E11               	movwf	strcmp@s1+1,c
  3116  001342  0E42               	movlw	low STR_68
  3117  001344  6E12               	movwf	strcmp@s2,c
  3118  001346  0EFF               	movlw	high STR_68
  3119  001348  6E13               	movwf	strcmp@s2+1,c
  3120  00134A  ECE1  F018         	call	_strcmp	;wreg free
  3121  00134E  5010               	movf	?_strcmp,w,c
  3122  001350  1011               	iorwf	?_strcmp+1,w,c
  3123  001352  A4D8               	btfss	status,2,c
  3124  001354  0012               	return	
  3125                           
  3126                           ;cmd_consol.c: 345: if (cmd_data.data_set == 1 && cmd_data.row_col_set == 1 && cmd_data.
      +                          scroll_set == 1) {
  3127  001356  0100               	movlb	0	; () banked
  3128  001358  05AF               	decf	(_cmd_data+41)& (0+255),w,b
  3129  00135A  A4D8               	btfss	status,2,c
  3130  00135C  D02C               	goto	l7097
  3131                           
  3132                           ; BSR set to: 0
  3133  00135E  0100               	movlb	0	; () banked
  3134  001360  05B4               	decf	(_cmd_data+46)& (0+255),w,b
  3135  001362  A4D8               	btfss	status,2,c
  3136  001364  D028               	goto	l7097
  3137                           
  3138                           ; BSR set to: 0
  3139  001366  0100               	movlb	0	; () banked
  3140  001368  05B6               	decf	(_cmd_data+48)& (0+255),w,b
  3141  00136A  A4D8               	btfss	status,2,c
  3142  00136C  D024               	goto	l7097
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;cmd_consol.c: 346: char ch = update_string_data(&cmd_data);
  3146  00136E  0E86               	movlw	low _cmd_data
  3147  001370  0100               	movlb	0	; () banked
  3148  001372  6FDA               	movwf	update_string_data@data& (0+255),b
  3149  001374  0E00               	movlw	high _cmd_data
  3150  001376  0100               	movlb	0	; () banked
  3151  001378  6FDB               	movwf	(update_string_data@data+1)& (0+255),b
  3152  00137A  ECEC  F00C         	call	_update_string_data	;wreg free
  3153  00137E  0100               	movlb	0	; () banked
  3154  001380  6FE7               	movwf	reply_to_host@ch& (0+255),b
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;cmd_consol.c: 347: if (ch == 1)
  3158  001382  0100               	movlb	0	; () banked
  3159  001384  05E7               	decf	reply_to_host@ch& (0+255),w,b
  3160  001386  A4D8               	btfss	status,2,c
  3161  001388  D00B               	goto	l7095
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;cmd_consol.c: 348: printf("%s\r\n", "ERROR");
  3165  00138A  0EDA               	movlw	low (STR_109+2)
  3166  00138C  6E24               	movwf	printf@f,c
  3167  00138E  0EFF               	movlw	high (STR_109+2)
  3168  001390  6E25               	movwf	printf@f+1,c
  3169  001392  0EE6               	movlw	low STR_106
  3170  001394  6E26               	movwf	?_printf+2,c
  3171  001396  0EFF               	movlw	high STR_106
  3172  001398  6E27               	movwf	?_printf+3,c
  3173  00139A  EC09  F011         	call	_printf	;wreg free
  3174  00139E  0012               	return	
  3175  0013A0                     l7095:
  3176                           
  3177                           ;cmd_consol.c: 349: else
  3178                           ;cmd_consol.c: 350: printf("\r\n%s.., OK\r\n", "KLM+UPDATE");
  3179  0013A0  0E94               	movlw	low STR_77
  3180  0013A2  6E24               	movwf	printf@f,c
  3181  0013A4  0EFE               	movlw	high STR_77
  3182  0013A6  6E25               	movwf	printf@f+1,c
  3183  0013A8  0E42               	movlw	low STR_68
  3184  0013AA  6E26               	movwf	?_printf+2,c
  3185  0013AC  0EFF               	movlw	high STR_68
  3186  0013AE  6E27               	movwf	?_printf+3,c
  3187  0013B0  EC09  F011         	call	_printf	;wreg free
  3188                           
  3189                           ;cmd_consol.c: 351: } else {
  3190  0013B4  0012               	return	
  3191  0013B6                     l7097:
  3192                           
  3193                           ;cmd_consol.c: 352: if (cmd_data.data_set == 0) {
  3194  0013B6  0100               	movlb	0	; () banked
  3195  0013B8  51AF               	movf	(_cmd_data+41)& (0+255),w,b
  3196  0013BA  A4D8               	btfss	status,2,c
  3197  0013BC  D00B               	goto	l7101
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;cmd_consol.c: 353: printf("\r\n%s\r\n", "ERR_STR_SET");
  3201  0013BE  0ED8               	movlw	low STR_109
  3202  0013C0  6E24               	movwf	printf@f,c
  3203  0013C2  0EFF               	movlw	high STR_109
  3204  0013C4  6E25               	movwf	printf@f+1,c
  3205  0013C6  0EE9               	movlw	low STR_110
  3206  0013C8  6E26               	movwf	?_printf+2,c
  3207  0013CA  0EFE               	movlw	high STR_110
  3208  0013CC  6E27               	movwf	?_printf+3,c
  3209  0013CE  EC09  F011         	call	_printf	;wreg free
  3210                           
  3211                           ;cmd_consol.c: 354: } else if (cmd_data.row_col_set == 0) {
  3212  0013D2  0012               	return	
  3213  0013D4                     l7101:
  3214  0013D4  0100               	movlb	0	; () banked
  3215  0013D6  51B4               	movf	(_cmd_data+46)& (0+255),w,b
  3216  0013D8  A4D8               	btfss	status,2,c
  3217  0013DA  D00B               	goto	l7105
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;cmd_consol.c: 355: printf("\r\n%s\r\n", "ERR_ROW_COL");
  3221  0013DC  0ED8               	movlw	low STR_109
  3222  0013DE  6E24               	movwf	printf@f,c
  3223  0013E0  0EFF               	movlw	high STR_109
  3224  0013E2  6E25               	movwf	printf@f+1,c
  3225  0013E4  0EC5               	movlw	low STR_112
  3226  0013E6  6E26               	movwf	?_printf+2,c
  3227  0013E8  0EFE               	movlw	high STR_112
  3228  0013EA  6E27               	movwf	?_printf+3,c
  3229  0013EC  EC09  F011         	call	_printf	;wreg free
  3230                           
  3231                           ;cmd_consol.c: 356: } else if (cmd_data.scroll_set == 0) {
  3232  0013F0  0012               	return	
  3233  0013F2                     l7105:
  3234  0013F2  0100               	movlb	0	; () banked
  3235  0013F4  51B6               	movf	(_cmd_data+48)& (0+255),w,b
  3236  0013F6  A4D8               	btfss	status,2,c
  3237  0013F8  0012               	return	
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;cmd_consol.c: 357: printf("\r\n%s\r\n", "ERR_SCROLL_SET");
  3241  0013FA  0ED8               	movlw	low STR_109
  3242  0013FC  6E24               	movwf	printf@f,c
  3243  0013FE  0EFF               	movlw	high STR_109
  3244  001400  6E25               	movwf	printf@f+1,c
  3245  001402  0E69               	movlw	low STR_114
  3246  001404  6E26               	movwf	?_printf+2,c
  3247  001406  0EFE               	movlw	high STR_114
  3248  001408  6E27               	movwf	?_printf+3,c
  3249  00140A  EC09  F011         	call	_printf	;wreg free
  3250  00140E  0012               	return	
  3251  001410                     __end_of_reply_to_host:
  3252                           	opt stack 0
  3253                           tblptru	equ	0xFF8
  3254                           tblptrh	equ	0xFF7
  3255                           tblptrl	equ	0xFF6
  3256                           tablat	equ	0xFF5
  3257                           intcon	equ	0xFF2
  3258                           postinc0	equ	0xFEE
  3259                           wreg	equ	0xFE8
  3260                           postdec1	equ	0xFE5
  3261                           fsr1h	equ	0xFE2
  3262                           fsr1l	equ	0xFE1
  3263                           indf2	equ	0xFDF
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function _update_string_data *****************
  3269 ;; Defined at:
  3270 ;;		line 175 in file "clcd.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  data            2    0[BANK0 ] PTR struct .
  3273 ;;		 -> cmd_data(49), 
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  i               2    8[BANK0 ] int 
  3276 ;;  end_point       1    7[BANK0 ] unsigned char 
  3277 ;;  start_point     1    6[BANK0 ] unsigned char 
  3278 ;;  exist_uid_id    1    5[BANK0 ] unsigned char 
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      unsigned char 
  3281 ;; Registers used:
  3282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3288 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;Total ram usage:       10 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:   10
  3295 ;; This function calls:
  3296 ;;		___wmul
  3297 ;;		_conflict_check
  3298 ;;		_copy_data
  3299 ;;		_make_display
  3300 ;;		_memset
  3301 ;;		_printf
  3302 ;; This function is called by:
  3303 ;;		_reply_to_host
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text5
  3308  0019D8                     __ptext5:
  3309                           	opt stack 0
  3310  0019D8                     _update_string_data:
  3311                           	opt stack 18
  3312                           
  3313                           ;clcd.c: 176: int i = 0;
  3314                           
  3315                           ;incstack = 0
  3316  0019D8  0E00               	movlw	0
  3317  0019DA  0100               	movlb	0	; () banked
  3318  0019DC  6FE3               	movwf	(update_string_data@i+1)& (0+255),b
  3319  0019DE  0E00               	movlw	0
  3320  0019E0  6FE2               	movwf	update_string_data@i& (0+255),b
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;clcd.c: 177: char exist_uid_idx = -1;
  3324  0019E2  0100               	movlb	0	; () banked
  3325  0019E4  69DF               	setf	update_string_data@exist_uid_idx& (0+255),b
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;clcd.c: 178: char start_point, end_point;
  3329                           ;clcd.c: 179: memset(conflict_arr, -1, sizeof (conflict_arr));
  3330  0019E6  0EB7               	movlw	low _conflict_arr
  3331  0019E8  6E24               	movwf	memset@p1,c
  3332  0019EA  0E00               	movlw	high _conflict_arr
  3333  0019EC  6E25               	movwf	memset@p1+1,c
  3334  0019EE  0EFF               	movlw	255
  3335  0019F0  6E27               	movwf	memset@c+1,c
  3336  0019F2  6826               	setf	memset@c,c
  3337  0019F4  0E00               	movlw	0
  3338  0019F6  6E29               	movwf	memset@n+1,c
  3339  0019F8  0E14               	movlw	20
  3340  0019FA  6E28               	movwf	memset@n,c
  3341  0019FC  ECAC  F01A         	call	_memset	;wreg free
  3342                           
  3343                           ;clcd.c: 180: conflict_data_count = 0;
  3344  001A00  0E00               	movlw	0
  3345  001A02  6E41               	movwf	_conflict_data_count,c
  3346                           
  3347                           ;clcd.c: 181: start_point = (data->start_row * clcd_config_data.clcd_max_col) + data->st
      +                          art_col;
  3348  001A04  0100               	movlb	0	; () banked
  3349  001A06  EE20 F02B          	lfsr	2,43
  3350  001A0A  51DA               	movf	update_string_data@data& (0+255),w,b
  3351  001A0C  26D9               	addwf	fsr2l,f,c
  3352  001A0E  51DB               	movf	(update_string_data@data+1)& (0+255),w,b
  3353  001A10  22DA               	addwfc	fsr2h,f,c
  3354  001A12  50DF               	movf	indf2,w,c
  3355  001A14  0100               	movlb	0	; () banked
  3356  001A16  6FDC               	movwf	??_update_string_data& (0+255),b
  3357  001A18  0100               	movlb	0	; () banked
  3358  001A1A  EE20 F02A          	lfsr	2,42
  3359  001A1E  51DA               	movf	update_string_data@data& (0+255),w,b
  3360  001A20  26D9               	addwf	fsr2l,f,c
  3361  001A22  51DB               	movf	(update_string_data@data+1)& (0+255),w,b
  3362  001A24  22DA               	addwfc	fsr2h,f,c
  3363  001A26  50DF               	movf	indf2,w,c
  3364  001A28  024B               	mulwf	_clcd_config_data+2,c
  3365  001A2A  50F3               	movf	prodl,w,c
  3366  001A2C  0100               	movlb	0	; () banked
  3367  001A2E  25DC               	addwf	??_update_string_data& (0+255),w,b
  3368  001A30  0100               	movlb	0	; () banked
  3369  001A32  6FE0               	movwf	update_string_data@start_point& (0+255),b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;clcd.c: 182: end_point = (data->end_row * clcd_config_data.clcd_max_col) + data->end_co
      +                          l;
  3373  001A34  0100               	movlb	0	; () banked
  3374  001A36  EE20 F02D          	lfsr	2,45
  3375  001A3A  51DA               	movf	update_string_data@data& (0+255),w,b
  3376  001A3C  26D9               	addwf	fsr2l,f,c
  3377  001A3E  51DB               	movf	(update_string_data@data+1)& (0+255),w,b
  3378  001A40  22DA               	addwfc	fsr2h,f,c
  3379  001A42  50DF               	movf	indf2,w,c
  3380  001A44  0100               	movlb	0	; () banked
  3381  001A46  6FDC               	movwf	??_update_string_data& (0+255),b
  3382  001A48  0100               	movlb	0	; () banked
  3383  001A4A  EE20 F02C          	lfsr	2,44
  3384  001A4E  51DA               	movf	update_string_data@data& (0+255),w,b
  3385  001A50  26D9               	addwf	fsr2l,f,c
  3386  001A52  51DB               	movf	(update_string_data@data+1)& (0+255),w,b
  3387  001A54  22DA               	addwfc	fsr2h,f,c
  3388  001A56  50DF               	movf	indf2,w,c
  3389  001A58  024B               	mulwf	_clcd_config_data+2,c
  3390  001A5A  50F3               	movf	prodl,w,c
  3391  001A5C  0100               	movlb	0	; () banked
  3392  001A5E  25DC               	addwf	??_update_string_data& (0+255),w,b
  3393  001A60  0100               	movlb	0	; () banked
  3394  001A62  6FE1               	movwf	update_string_data@end_point& (0+255),b
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;clcd.c: 184: printf("UID = %c, start_pt = %d, end_pt = %d\r\n", data->uid, start_point,
      +                           end_point);
  3398  001A64  0ECF               	movlw	low STR_9
  3399  001A66  6E24               	movwf	printf@f,c
  3400  001A68  0EFC               	movlw	high STR_9
  3401  001A6A  6E25               	movwf	printf@f+1,c
  3402  001A6C  C0DA  FFD9         	movff	update_string_data@data,fsr2l
  3403  001A70  C0DB  FFDA         	movff	update_string_data@data+1,fsr2h
  3404  001A74  50DF               	movf	indf2,w,c
  3405  001A76  0100               	movlb	0	; () banked
  3406  001A78  6FDC               	movwf	??_update_string_data& (0+255),b
  3407  001A7A  0100               	movlb	0	; () banked
  3408  001A7C  51DC               	movf	??_update_string_data& (0+255),w,b
  3409  001A7E  6E26               	movwf	?_printf+2,c
  3410  001A80  6A27               	clrf	?_printf+3,c
  3411  001A82  C0E0  F028         	movff	update_string_data@start_point,?_printf+4
  3412  001A86  6A29               	clrf	?_printf+5,c
  3413  001A88  C0E1  F02A         	movff	update_string_data@end_point,?_printf+6
  3414  001A8C  6A2B               	clrf	?_printf+7,c
  3415  001A8E  EC09  F011         	call	_printf	;wreg free
  3416                           
  3417                           ;clcd.c: 186: if (data_count < clcd_config_data.clcd_max_display_string) {
  3418  001A92  504D               	movf	_clcd_config_data+4,w,c
  3419  001A94  5C42               	subwf	_data_count,w,c
  3420  001A96  B0D8               	btfsc	status,0,c
  3421  001A98  D0CF               	goto	l6467
  3422                           
  3423                           ;clcd.c: 187: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3424  001A9A  0E00               	movlw	0
  3425  001A9C  0100               	movlb	0	; () banked
  3426  001A9E  6FE3               	movwf	(update_string_data@i+1)& (0+255),b
  3427  001AA0  0E00               	movlw	0
  3428  001AA2  6FE2               	movwf	update_string_data@i& (0+255),b
  3429  001AA4  D092               	goto	l6457
  3430  001AA6                     l6421:
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;clcd.c: 188: if (clcd_display_string_details[i].uid == data->uid) {
  3434  001AA6  C0DA  FFD9         	movff	update_string_data@data,fsr2l
  3435  001AAA  C0DB  FFDA         	movff	update_string_data@data+1,fsr2h
  3436  001AAE  C0E2  F018         	movff	update_string_data@i,___wmul@multiplier
  3437  001AB2  C0E3  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  3438  001AB6  0E00               	movlw	0
  3439  001AB8  6E1B               	movwf	___wmul@multiplicand+1,c
  3440  001ABA  0E36               	movlw	54
  3441  001ABC  6E1A               	movwf	___wmul@multiplicand,c
  3442  001ABE  ECD8  F01A         	call	___wmul	;wreg free
  3443  001AC2  0E96               	movlw	low _clcd_display_string_details
  3444  001AC4  2418               	addwf	?___wmul,w,c
  3445  001AC6  6EE1               	movwf	fsr1l,c
  3446  001AC8  0E02               	movlw	high _clcd_display_string_details
  3447  001ACA  2019               	addwfc	?___wmul+1,w,c
  3448  001ACC  6EE2               	movwf	fsr1h,c
  3449  001ACE  50E7               	movf	231,w,c
  3450  001AD0  0B7F               	andlw	127
  3451  001AD2  0100               	movlb	0	; () banked
  3452  001AD4  6FDD               	movwf	(??_update_string_data+1)& (0+255),b
  3453  001AD6  50DE               	movf	postinc2,w,c
  3454  001AD8  0100               	movlb	0	; () banked
  3455  001ADA  19DD               	xorwf	(??_update_string_data+1)& (0+255),w,b
  3456  001ADC  A4D8               	btfss	status,2,c
  3457  001ADE  D028               	goto	l6437
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;clcd.c: 189: exist_uid_idx = i;
  3461  001AE0  C0E2  F0DF         	movff	update_string_data@i,update_string_data@exist_uid_idx
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;clcd.c: 190: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  3465  001AE4  5041               	movf	_conflict_data_count,w,c
  3466  001AE6  0D01               	mullw	1
  3467  001AE8  0EB7               	movlw	low _conflict_arr
  3468  001AEA  24F3               	addwf	prodl,w,c
  3469  001AEC  6ED9               	movwf	fsr2l,c
  3470  001AEE  0E00               	movlw	high _conflict_arr
  3471  001AF0  20F4               	addwfc	prodh,w,c
  3472  001AF2  6EDA               	movwf	fsr2h,c
  3473  001AF4  C0E2  F018         	movff	update_string_data@i,___wmul@multiplier
  3474  001AF8  C0E3  F019         	movff	update_string_data@i+1,___wmul@multiplier+1
  3475  001AFC  0E00               	movlw	0
  3476  001AFE  6E1B               	movwf	___wmul@multiplicand+1,c
  3477  001B00  0E36               	movlw	54
  3478  001B02  6E1A               	movwf	___wmul@multiplicand,c
  3479  001B04  ECD8  F01A         	call	___wmul	;wreg free
  3480  001B08  0E96               	movlw	low _clcd_display_string_details
  3481  001B0A  2418               	addwf	?___wmul,w,c
  3482  001B0C  6EE1               	movwf	fsr1l,c
  3483  001B0E  0E02               	movlw	high _clcd_display_string_details
  3484  001B10  2019               	addwfc	?___wmul+1,w,c
  3485  001B12  6EE2               	movwf	fsr1h,c
  3486  001B14  50E7               	movf	231,w,c
  3487  001B16  0B7F               	andlw	127
  3488  001B18  6EDF               	movwf	indf2,c
  3489  001B1A  2A41               	incf	_conflict_data_count,f,c
  3490                           
  3491                           ;clcd.c: 191: conflict_check(exist_uid_idx, start_point, end_point);
  3492  001B1C  C0E0  F036         	movff	update_string_data@start_point,conflict_check@new_start_point
  3493  001B20  C0E1  F037         	movff	update_string_data@end_point,conflict_check@new_end_point
  3494  001B24  0100               	movlb	0	; () banked
  3495  001B26  51DF               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3496  001B28  ECA4  F00B         	call	_conflict_check
  3497  001B2C                     l6431:
  3498                           
  3499                           ;clcd.c: 192: return 1;
  3500  001B2C  0E01               	movlw	1
  3501  001B2E  0012               	return	
  3502  001B30                     l6437:
  3503                           
  3504                           ;clcd.c: 194: if (conflict_check(exist_uid_idx, start_point, end_point) == 1) {
  3505  001B30  C0E0  F036         	movff	update_string_data@start_point,conflict_check@new_start_point
  3506  001B34  C0E1  F037         	movff	update_string_data@end_point,conflict_check@new_end_point
  3507  001B38  0100               	movlb	0	; () banked
  3508  001B3A  51DF               	movf	update_string_data@exist_uid_idx& (0+255),w,b
  3509  001B3C  ECA4  F00B         	call	_conflict_check
  3510  001B40  06E8               	decf	wreg,f,c
  3511  001B42  A4D8               	btfss	status,2,c
  3512  001B44  D03F               	goto	l6455
  3513                           
  3514                           ;clcd.c: 195: printf("conflict: uid\r\n");
  3515  001B46  0E4A               	movlw	low STR_10
  3516  001B48  6E24               	movwf	printf@f,c
  3517  001B4A  0EFE               	movlw	high STR_10
  3518  001B4C  6E25               	movwf	printf@f+1,c
  3519  001B4E  EC09  F011         	call	_printf	;wreg free
  3520                           
  3521                           ;clcd.c: 196: for (i = 0; i < clcd_config_data.clcd_max_display_string; i++) {
  3522  001B52  0E00               	movlw	0
  3523  001B54  0100               	movlb	0	; () banked
  3524  001B56  6FE3               	movwf	(update_string_data@i+1)& (0+255),b
  3525  001B58  0E00               	movlw	0
  3526  001B5A  6FE2               	movwf	update_string_data@i& (0+255),b
  3527  001B5C  D018               	goto	l6447
  3528  001B5E                     l6443:
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;clcd.c: 198: printf("%c, ", conflict_arr[i]);
  3532  001B5E  0EEC               	movlw	low STR_11
  3533  001B60  6E24               	movwf	printf@f,c
  3534  001B62  0EFF               	movlw	high STR_11
  3535  001B64  6E25               	movwf	printf@f+1,c
  3536  001B66  0EB7               	movlw	low _conflict_arr
  3537  001B68  0100               	movlb	0	; () banked
  3538  001B6A  25E2               	addwf	update_string_data@i& (0+255),w,b
  3539  001B6C  6ED9               	movwf	fsr2l,c
  3540  001B6E  0E00               	movlw	high _conflict_arr
  3541  001B70  0100               	movlb	0	; () banked
  3542  001B72  21E3               	addwfc	(update_string_data@i+1)& (0+255),w,b
  3543  001B74  6EDA               	movwf	fsr2h,c
  3544  001B76  50DF               	movf	indf2,w,c
  3545  001B78  0100               	movlb	0	; () banked
  3546  001B7A  6FDC               	movwf	??_update_string_data& (0+255),b
  3547  001B7C  0100               	movlb	0	; () banked
  3548  001B7E  51DC               	movf	??_update_string_data& (0+255),w,b
  3549  001B80  6E26               	movwf	?_printf+2,c
  3550  001B82  6A27               	clrf	?_printf+3,c
  3551  001B84  EC09  F011         	call	_printf	;wreg free
  3552  001B88  0100               	movlb	0	; () banked
  3553  001B8A  4BE2               	infsnz	update_string_data@i& (0+255),f,b
  3554  001B8C  2BE3               	incf	(update_string_data@i+1)& (0+255),f,b
  3555  001B8E                     l6447:
  3556                           
  3557                           ; BSR set to: 0
  3558  001B8E  504D               	movf	_clcd_config_data+4,w,c
  3559  001B90  0100               	movlb	0	; () banked
  3560  001B92  6FDC               	movwf	??_update_string_data& (0+255),b
  3561  001B94  6BDD               	clrf	(??_update_string_data+1)& (0+255),b
  3562  001B96  0100               	movlb	0	; () banked
  3563  001B98  51DC               	movf	??_update_string_data& (0+255),w,b
  3564  001B9A  0100               	movlb	0	; () banked
  3565  001B9C  5DE2               	subwf	update_string_data@i& (0+255),w,b
  3566  001B9E  0100               	movlb	0	; () banked
  3567  001BA0  51E3               	movf	(update_string_data@i+1)& (0+255),w,b
  3568  001BA2  0A80               	xorlw	128
  3569  001BA4  0100               	movlb	0	; () banked
  3570  001BA6  6FDE               	movwf	(??_update_string_data+2)& (0+255),b
  3571  001BA8  0100               	movlb	0	; () banked
  3572  001BAA  51DD               	movf	(??_update_string_data+1)& (0+255),w,b
  3573  001BAC  0A80               	xorlw	128
  3574  001BAE  0100               	movlb	0	; () banked
  3575  001BB0  59DE               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3576  001BB2  A0D8               	btfss	status,0,c
  3577  001BB4  D7D4               	goto	l6443
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;clcd.c: 199: }printf("\r\n");
  3581                           
  3582                           ; BSR set to: 0
  3583  001BB6  0EAA               	movlw	low (STR_58+9)
  3584  001BB8  6E24               	movwf	printf@f,c
  3585  001BBA  0EFE               	movlw	high (STR_58+9)
  3586  001BBC  6E25               	movwf	printf@f+1,c
  3587  001BBE  EC09  F011         	call	_printf	;wreg free
  3588  001BC2  D7B4               	goto	l6431
  3589  001BC4                     l6455:
  3590  001BC4  0100               	movlb	0	; () banked
  3591  001BC6  4BE2               	infsnz	update_string_data@i& (0+255),f,b
  3592  001BC8  2BE3               	incf	(update_string_data@i+1)& (0+255),f,b
  3593  001BCA                     l6457:
  3594                           
  3595                           ; BSR set to: 0
  3596  001BCA  504D               	movf	_clcd_config_data+4,w,c
  3597  001BCC  0100               	movlb	0	; () banked
  3598  001BCE  6FDC               	movwf	??_update_string_data& (0+255),b
  3599  001BD0  6BDD               	clrf	(??_update_string_data+1)& (0+255),b
  3600  001BD2  0100               	movlb	0	; () banked
  3601  001BD4  51DC               	movf	??_update_string_data& (0+255),w,b
  3602  001BD6  0100               	movlb	0	; () banked
  3603  001BD8  5DE2               	subwf	update_string_data@i& (0+255),w,b
  3604  001BDA  0100               	movlb	0	; () banked
  3605  001BDC  51E3               	movf	(update_string_data@i+1)& (0+255),w,b
  3606  001BDE  0A80               	xorlw	128
  3607  001BE0  0100               	movlb	0	; () banked
  3608  001BE2  6FDE               	movwf	(??_update_string_data+2)& (0+255),b
  3609  001BE4  0100               	movlb	0	; () banked
  3610  001BE6  51DD               	movf	(??_update_string_data+1)& (0+255),w,b
  3611  001BE8  0A80               	xorlw	128
  3612  001BEA  0100               	movlb	0	; () banked
  3613  001BEC  59DE               	subwfb	(??_update_string_data+2)& (0+255),w,b
  3614  001BEE  A0D8               	btfss	status,0,c
  3615  001BF0  D75A               	goto	l6421
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;clcd.c: 201: }
  3619                           ;clcd.c: 202: }
  3620                           ;clcd.c: 203: }
  3621                           ;clcd.c: 204: memset(&clcd_display_string_details[data_count], 0, sizeof (CLCD_STRING_DI
      +                          SPLAY_DETAILS));
  3622                           
  3623                           ; BSR set to: 0
  3624  001BF2  5042               	movf	_data_count,w,c
  3625  001BF4  0D36               	mullw	54
  3626  001BF6  0E96               	movlw	low _clcd_display_string_details
  3627  001BF8  24F3               	addwf	prodl,w,c
  3628  001BFA  6E24               	movwf	memset@p1,c
  3629  001BFC  0E02               	movlw	high _clcd_display_string_details
  3630  001BFE  20F4               	addwfc	prodh,w,c
  3631  001C00  6E25               	movwf	memset@p1+1,c
  3632  001C02  0E00               	movlw	0
  3633  001C04  6E27               	movwf	memset@c+1,c
  3634  001C06  0E00               	movlw	0
  3635  001C08  6E26               	movwf	memset@c,c
  3636  001C0A  0E00               	movlw	0
  3637  001C0C  6E29               	movwf	memset@n+1,c
  3638  001C0E  0E36               	movlw	54
  3639  001C10  6E28               	movwf	memset@n,c
  3640  001C12  ECAC  F01A         	call	_memset	;wreg free
  3641                           
  3642                           ;clcd.c: 205: copy_data(&clcd_display_string_details[data_count], data);
  3643  001C16  5042               	movf	_data_count,w,c
  3644  001C18  0D36               	mullw	54
  3645  001C1A  0E96               	movlw	low _clcd_display_string_details
  3646  001C1C  24F3               	addwf	prodl,w,c
  3647  001C1E  6E36               	movwf	copy_data@clcd_str_data,c
  3648  001C20  0E02               	movlw	high _clcd_display_string_details
  3649  001C22  20F4               	addwfc	prodh,w,c
  3650  001C24  6E37               	movwf	copy_data@clcd_str_data+1,c
  3651  001C26  C0DA  F038         	movff	update_string_data@data,copy_data@data
  3652  001C2A  C0DB  F039         	movff	update_string_data@data+1,copy_data@data+1
  3653  001C2E  EC1B  F00F         	call	_copy_data	;wreg free
  3654                           
  3655                           ;clcd.c: 206: data_count++;
  3656  001C32  2A42               	incf	_data_count,f,c
  3657                           
  3658                           ;clcd.c: 207: make_display();
  3659  001C34  EC18  F010         	call	_make_display	;wreg free
  3660  001C38                     l6467:
  3661                           
  3662                           ;clcd.c: 210: }
  3663                           ;clcd.c: 211: return 0;
  3664  001C38  0E00               	movlw	0
  3665  001C3A  0012               	return	
  3666  001C3C                     __end_of_update_string_data:
  3667                           	opt stack 0
  3668                           tblptru	equ	0xFF8
  3669                           tblptrh	equ	0xFF7
  3670                           tblptrl	equ	0xFF6
  3671                           tablat	equ	0xFF5
  3672                           prodh	equ	0xFF4
  3673                           prodl	equ	0xFF3
  3674                           intcon	equ	0xFF2
  3675                           postinc0	equ	0xFEE
  3676                           wreg	equ	0xFE8
  3677                           postdec1	equ	0xFE5
  3678                           fsr1h	equ	0xFE2
  3679                           fsr1l	equ	0xFE1
  3680                           indf2	equ	0xFDF
  3681                           postinc2	equ	0xFDE
  3682                           fsr2h	equ	0xFDA
  3683                           fsr2l	equ	0xFD9
  3684                           status	equ	0xFD8
  3685                           
  3686 ;; *************** function _make_display *****************
  3687 ;; Defined at:
  3688 ;;		line 559 in file "clcd.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  count           2   62[COMRAM] int 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      void 
  3695 ;; Registers used:
  3696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;Total ram usage:        5 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    9
  3709 ;; This function calls:
  3710 ;;		___wmul
  3711 ;;		_display_text
  3712 ;;		_scroll_left_to_right
  3713 ;;		_scroll_off
  3714 ;;		_scroll_right_to_left
  3715 ;;		_strlen
  3716 ;; This function is called by:
  3717 ;;		_update_string_data
  3718 ;;		_main
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text6
  3723  002030                     __ptext6:
  3724                           	opt stack 0
  3725  002030                     _make_display:
  3726                           	opt stack 21
  3727                           
  3728                           ;clcd.c: 560: int count = 0;
  3729                           
  3730                           ;incstack = 0
  3731  002030  0E00               	movlw	0
  3732  002032  6E40               	movwf	make_display@count+1,c
  3733  002034  0E00               	movlw	0
  3734  002036  6E3F               	movwf	make_display@count,c
  3735                           
  3736                           ;clcd.c: 561: for (count = 0; count < clcd_config_data.clcd_max_display_string; count++)
      +                           {
  3737  002038  0E00               	movlw	0
  3738  00203A  6E40               	movwf	make_display@count+1,c
  3739  00203C  0E00               	movlw	0
  3740  00203E  6E3F               	movwf	make_display@count,c
  3741  002040  D0D3               	goto	l6187
  3742  002042                     l6167:
  3743                           
  3744                           ;clcd.c: 562: if (strlen(clcd_display_string_details[count].string) != 0 && clcd_display
      +                          _string_details[count].direction == 2) {
  3745  002042  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3746  002046  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3747  00204A  0E00               	movlw	0
  3748  00204C  6E1B               	movwf	___wmul@multiplicand+1,c
  3749  00204E  0E36               	movlw	54
  3750  002050  6E1A               	movwf	___wmul@multiplicand,c
  3751  002052  ECD8  F01A         	call	___wmul	;wreg free
  3752  002056  0E01               	movlw	1
  3753  002058  2618               	addwf	?___wmul,f,c
  3754  00205A  0E00               	movlw	0
  3755  00205C  2219               	addwfc	?___wmul+1,f,c
  3756  00205E  0E96               	movlw	low _clcd_display_string_details
  3757  002060  2418               	addwf	?___wmul,w,c
  3758  002062  6E1E               	movwf	strlen@s,c
  3759  002064  0E02               	movlw	high _clcd_display_string_details
  3760  002066  2019               	addwfc	?___wmul+1,w,c
  3761  002068  6E1F               	movwf	strlen@s+1,c
  3762  00206A  EC3E  F018         	call	_strlen	;wreg free
  3763  00206E  501E               	movf	?_strlen,w,c
  3764  002070  101F               	iorwf	?_strlen+1,w,c
  3765  002072  B4D8               	btfsc	status,2,c
  3766  002074  D02C               	goto	l6173
  3767  002076  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3768  00207A  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3769  00207E  0E00               	movlw	0
  3770  002080  6E1B               	movwf	___wmul@multiplicand+1,c
  3771  002082  0E36               	movlw	54
  3772  002084  6E1A               	movwf	___wmul@multiplicand,c
  3773  002086  ECD8  F01A         	call	___wmul	;wreg free
  3774  00208A  0E30               	movlw	48
  3775  00208C  2618               	addwf	?___wmul,f,c
  3776  00208E  0E00               	movlw	0
  3777  002090  2219               	addwfc	?___wmul+1,f,c
  3778  002092  0E96               	movlw	low _clcd_display_string_details
  3779  002094  2418               	addwf	?___wmul,w,c
  3780  002096  6ED9               	movwf	fsr2l,c
  3781  002098  0E02               	movlw	high _clcd_display_string_details
  3782  00209A  2019               	addwfc	?___wmul+1,w,c
  3783  00209C  6EDA               	movwf	fsr2h,c
  3784  00209E  50DF               	movf	223,w,c
  3785  0020A0  0B07               	andlw	7
  3786  0020A2  0A02               	xorlw	2
  3787  0020A4  A4D8               	btfss	status,2,c
  3788  0020A6  D013               	goto	l6173
  3789                           
  3790                           ;clcd.c: 563: scroll_left_to_right(&clcd_display_string_details[count]);
  3791  0020A8  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3792  0020AC  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3793  0020B0  0E00               	movlw	0
  3794  0020B2  6E1B               	movwf	___wmul@multiplicand+1,c
  3795  0020B4  0E36               	movlw	54
  3796  0020B6  6E1A               	movwf	___wmul@multiplicand,c
  3797  0020B8  ECD8  F01A         	call	___wmul	;wreg free
  3798  0020BC  0E96               	movlw	low _clcd_display_string_details
  3799  0020BE  2418               	addwf	?___wmul,w,c
  3800  0020C0  6E2C               	movwf	scroll_left_to_right@clcd_display_string_details,c
  3801  0020C2  0E02               	movlw	high _clcd_display_string_details
  3802  0020C4  2019               	addwfc	?___wmul+1,w,c
  3803  0020C6  6E2D               	movwf	scroll_left_to_right@clcd_display_string_details+1,c
  3804  0020C8  EC08  F00A         	call	_scroll_left_to_right	;wreg free
  3805                           
  3806                           ;clcd.c: 564: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 1) {
  3807  0020CC  D08B               	goto	l6185
  3808  0020CE                     l6173:
  3809  0020CE  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3810  0020D2  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3811  0020D6  0E00               	movlw	0
  3812  0020D8  6E1B               	movwf	___wmul@multiplicand+1,c
  3813  0020DA  0E36               	movlw	54
  3814  0020DC  6E1A               	movwf	___wmul@multiplicand,c
  3815  0020DE  ECD8  F01A         	call	___wmul	;wreg free
  3816  0020E2  0E01               	movlw	1
  3817  0020E4  2618               	addwf	?___wmul,f,c
  3818  0020E6  0E00               	movlw	0
  3819  0020E8  2219               	addwfc	?___wmul+1,f,c
  3820  0020EA  0E96               	movlw	low _clcd_display_string_details
  3821  0020EC  2418               	addwf	?___wmul,w,c
  3822  0020EE  6E1E               	movwf	strlen@s,c
  3823  0020F0  0E02               	movlw	high _clcd_display_string_details
  3824  0020F2  2019               	addwfc	?___wmul+1,w,c
  3825  0020F4  6E1F               	movwf	strlen@s+1,c
  3826  0020F6  EC3E  F018         	call	_strlen	;wreg free
  3827  0020FA  501E               	movf	?_strlen,w,c
  3828  0020FC  101F               	iorwf	?_strlen+1,w,c
  3829  0020FE  B4D8               	btfsc	status,2,c
  3830  002100  D02C               	goto	l6179
  3831  002102  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3832  002106  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3833  00210A  0E00               	movlw	0
  3834  00210C  6E1B               	movwf	___wmul@multiplicand+1,c
  3835  00210E  0E36               	movlw	54
  3836  002110  6E1A               	movwf	___wmul@multiplicand,c
  3837  002112  ECD8  F01A         	call	___wmul	;wreg free
  3838  002116  0E30               	movlw	48
  3839  002118  2618               	addwf	?___wmul,f,c
  3840  00211A  0E00               	movlw	0
  3841  00211C  2219               	addwfc	?___wmul+1,f,c
  3842  00211E  0E96               	movlw	low _clcd_display_string_details
  3843  002120  2418               	addwf	?___wmul,w,c
  3844  002122  6ED9               	movwf	fsr2l,c
  3845  002124  0E02               	movlw	high _clcd_display_string_details
  3846  002126  2019               	addwfc	?___wmul+1,w,c
  3847  002128  6EDA               	movwf	fsr2h,c
  3848  00212A  50DF               	movf	223,w,c
  3849  00212C  0B07               	andlw	7
  3850  00212E  06E8               	decf	wreg,f,c
  3851  002130  A4D8               	btfss	status,2,c
  3852  002132  D013               	goto	l6179
  3853                           
  3854                           ;clcd.c: 565: scroll_right_to_left(&clcd_display_string_details[count]);
  3855  002134  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3856  002138  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3857  00213C  0E00               	movlw	0
  3858  00213E  6E1B               	movwf	___wmul@multiplicand+1,c
  3859  002140  0E36               	movlw	54
  3860  002142  6E1A               	movwf	___wmul@multiplicand,c
  3861  002144  ECD8  F01A         	call	___wmul	;wreg free
  3862  002148  0E96               	movlw	low _clcd_display_string_details
  3863  00214A  2418               	addwf	?___wmul,w,c
  3864  00214C  6E2C               	movwf	scroll_right_to_left@clcd_display_string_details,c
  3865  00214E  0E02               	movlw	high _clcd_display_string_details
  3866  002150  2019               	addwfc	?___wmul+1,w,c
  3867  002152  6E2D               	movwf	scroll_right_to_left@clcd_display_string_details+1,c
  3868  002154  ECAB  F006         	call	_scroll_right_to_left	;wreg free
  3869                           
  3870                           ;clcd.c: 566: } else if (strlen(clcd_display_string_details[count].string) != 0 && clcd_
      +                          display_string_details[count].direction == 0) {
  3871  002158  D045               	goto	l6185
  3872  00215A                     l6179:
  3873  00215A  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3874  00215E  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3875  002162  0E00               	movlw	0
  3876  002164  6E1B               	movwf	___wmul@multiplicand+1,c
  3877  002166  0E36               	movlw	54
  3878  002168  6E1A               	movwf	___wmul@multiplicand,c
  3879  00216A  ECD8  F01A         	call	___wmul	;wreg free
  3880  00216E  0E01               	movlw	1
  3881  002170  2618               	addwf	?___wmul,f,c
  3882  002172  0E00               	movlw	0
  3883  002174  2219               	addwfc	?___wmul+1,f,c
  3884  002176  0E96               	movlw	low _clcd_display_string_details
  3885  002178  2418               	addwf	?___wmul,w,c
  3886  00217A  6E1E               	movwf	strlen@s,c
  3887  00217C  0E02               	movlw	high _clcd_display_string_details
  3888  00217E  2019               	addwfc	?___wmul+1,w,c
  3889  002180  6E1F               	movwf	strlen@s+1,c
  3890  002182  EC3E  F018         	call	_strlen	;wreg free
  3891  002186  501E               	movf	?_strlen,w,c
  3892  002188  101F               	iorwf	?_strlen+1,w,c
  3893  00218A  B4D8               	btfsc	status,2,c
  3894  00218C  D02B               	goto	l6185
  3895  00218E  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3896  002192  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3897  002196  0E00               	movlw	0
  3898  002198  6E1B               	movwf	___wmul@multiplicand+1,c
  3899  00219A  0E36               	movlw	54
  3900  00219C  6E1A               	movwf	___wmul@multiplicand,c
  3901  00219E  ECD8  F01A         	call	___wmul	;wreg free
  3902  0021A2  0E30               	movlw	48
  3903  0021A4  2618               	addwf	?___wmul,f,c
  3904  0021A6  0E00               	movlw	0
  3905  0021A8  2219               	addwfc	?___wmul+1,f,c
  3906  0021AA  0E96               	movlw	low _clcd_display_string_details
  3907  0021AC  2418               	addwf	?___wmul,w,c
  3908  0021AE  6ED9               	movwf	fsr2l,c
  3909  0021B0  0E02               	movlw	high _clcd_display_string_details
  3910  0021B2  2019               	addwfc	?___wmul+1,w,c
  3911  0021B4  6EDA               	movwf	fsr2h,c
  3912  0021B6  50DF               	movf	223,w,c
  3913  0021B8  0B07               	andlw	7
  3914  0021BA  0900               	iorlw	0
  3915  0021BC  A4D8               	btfss	status,2,c
  3916  0021BE  D012               	goto	l6185
  3917                           
  3918                           ;clcd.c: 567: scroll_off(&clcd_display_string_details[count]);
  3919  0021C0  C03F  F018         	movff	make_display@count,___wmul@multiplier
  3920  0021C4  C040  F019         	movff	make_display@count+1,___wmul@multiplier+1
  3921  0021C8  0E00               	movlw	0
  3922  0021CA  6E1B               	movwf	___wmul@multiplicand+1,c
  3923  0021CC  0E36               	movlw	54
  3924  0021CE  6E1A               	movwf	___wmul@multiplicand,c
  3925  0021D0  ECD8  F01A         	call	___wmul	;wreg free
  3926  0021D4  0E96               	movlw	low _clcd_display_string_details
  3927  0021D6  2418               	addwf	?___wmul,w,c
  3928  0021D8  6E24               	movwf	scroll_off@clcd_display_string_details,c
  3929  0021DA  0E02               	movlw	high _clcd_display_string_details
  3930  0021DC  2019               	addwfc	?___wmul+1,w,c
  3931  0021DE  6E25               	movwf	scroll_off@clcd_display_string_details+1,c
  3932  0021E0  EC8C  F013         	call	_scroll_off	;wreg free
  3933  0021E4                     l6185:
  3934  0021E4  4A3F               	infsnz	make_display@count,f,c
  3935  0021E6  2A40               	incf	make_display@count+1,f,c
  3936  0021E8                     l6187:
  3937  0021E8  504D               	movf	_clcd_config_data+4,w,c
  3938  0021EA  6E3C               	movwf	??_make_display& (0+255),c
  3939  0021EC  6A3D               	clrf	(??_make_display+1)& (0+255),c
  3940  0021EE  503C               	movf	??_make_display,w,c
  3941  0021F0  5C3F               	subwf	make_display@count,w,c
  3942  0021F2  5040               	movf	make_display@count+1,w,c
  3943  0021F4  0A80               	xorlw	128
  3944  0021F6  6E3E               	movwf	(??_make_display+2)& (0+255),c
  3945  0021F8  503D               	movf	??_make_display+1,w,c
  3946  0021FA  0A80               	xorlw	128
  3947  0021FC  583E               	subwfb	(??_make_display+2)& (0+255),w,c
  3948  0021FE  A0D8               	btfss	status,0,c
  3949  002200  D720               	goto	l6167
  3950                           
  3951                           ;clcd.c: 568: }
  3952                           ;clcd.c: 569: }
  3953                           ;clcd.c: 570: print_data_ready = 1;
  3954  002202  0E00               	movlw	0
  3955  002204  0100               	movlb	0	; () banked
  3956  002206  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  3957  002208  0E01               	movlw	1
  3958  00220A  6F76               	movwf	_print_data_ready& (0+255),b
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;clcd.c: 571: display_text();
  3962  00220C  EC87  F016         	call	_display_text	;wreg free
  3963  002210  0012               	return		;funcret
  3964  002212                     __end_of_make_display:
  3965                           	opt stack 0
  3966                           tblptru	equ	0xFF8
  3967                           tblptrh	equ	0xFF7
  3968                           tblptrl	equ	0xFF6
  3969                           tablat	equ	0xFF5
  3970                           prodh	equ	0xFF4
  3971                           prodl	equ	0xFF3
  3972                           intcon	equ	0xFF2
  3973                           postinc0	equ	0xFEE
  3974                           wreg	equ	0xFE8
  3975                           postdec1	equ	0xFE5
  3976                           fsr1h	equ	0xFE2
  3977                           fsr1l	equ	0xFE1
  3978                           indf2	equ	0xFDF
  3979                           postinc2	equ	0xFDE
  3980                           fsr2h	equ	0xFDA
  3981                           fsr2l	equ	0xFD9
  3982                           status	equ	0xFD8
  3983                           
  3984 ;; *************** function _scroll_right_to_left *****************
  3985 ;; Defined at:
  3986 ;;		line 444 in file "clcd.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;  clcd_display    2   43[COMRAM] PTR struct .
  3989 ;;		 -> clcd_display_string_details(1080), 
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;  line            1   58[COMRAM] unsigned char 
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4001 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4003 ;;      Temps:         13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;Total ram usage:       16 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    6
  4008 ;; This function calls:
  4009 ;;		_memcpy
  4010 ;;		_memset
  4011 ;;		_strncpy
  4012 ;; This function is called by:
  4013 ;;		_make_display
  4014 ;; This function uses a non-reentrant model
  4015 ;;
  4016                           
  4017                           	psect	text7
  4018  000D56                     __ptext7:
  4019                           	opt stack 0
  4020  000D56                     _scroll_right_to_left:
  4021                           	opt stack 23
  4022                           
  4023                           ;clcd.c: 446: char line = -1;
  4024                           
  4025                           ;incstack = 0
  4026  000D56  683B               	setf	scroll_right_to_left@line,c
  4027                           
  4028                           ;clcd.c: 447: if (clcd_display_string_details->start_row == 0)
  4029  000D58  EE20 F02A          	lfsr	2,42
  4030  000D5C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4031  000D5E  26D9               	addwf	fsr2l,f,c
  4032  000D60  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4033  000D62  22DA               	addwfc	fsr2h,f,c
  4034  000D64  50DF               	movf	indf2,w,c
  4035  000D66  0B7F               	andlw	127
  4036  000D68  0900               	iorlw	0
  4037  000D6A  A4D8               	btfss	status,2,c
  4038  000D6C  D002               	goto	l5951
  4039                           
  4040                           ;clcd.c: 448: line = 0;
  4041  000D6E  0E00               	movlw	0
  4042  000D70  D00C               	goto	L1
  4043  000D72                     l5951:
  4044                           
  4045                           ;clcd.c: 449: else if (clcd_display_string_details->start_row == 1)
  4046  000D72  EE20 F02A          	lfsr	2,42
  4047  000D76  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4048  000D78  26D9               	addwf	fsr2l,f,c
  4049  000D7A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4050  000D7C  22DA               	addwfc	fsr2h,f,c
  4051  000D7E  50DF               	movf	indf2,w,c
  4052  000D80  0B7F               	andlw	127
  4053  000D82  06E8               	decf	wreg,f,c
  4054  000D84  A4D8               	btfss	status,2,c
  4055  000D86  D002               	goto	l5955
  4056                           
  4057                           ;clcd.c: 450: line = 1;
  4058  000D88  0E01               	movlw	1
  4059  000D8A                     L1:
  4060  000D8A  6E3B               	movwf	scroll_right_to_left@line,c
  4061  000D8C                     l5955:
  4062                           
  4063                           ;clcd.c: 451: if (clcd_display_string_details->start_row == 2)
  4064  000D8C  EE20 F02A          	lfsr	2,42
  4065  000D90  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4066  000D92  26D9               	addwf	fsr2l,f,c
  4067  000D94  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4068  000D96  22DA               	addwfc	fsr2h,f,c
  4069  000D98  50DF               	movf	indf2,w,c
  4070  000D9A  0B7F               	andlw	127
  4071  000D9C  0A02               	xorlw	2
  4072  000D9E  A4D8               	btfss	status,2,c
  4073  000DA0  D002               	goto	l5959
  4074                           
  4075                           ;clcd.c: 452: line = 2;
  4076  000DA2  0E02               	movlw	2
  4077  000DA4  6E3B               	movwf	scroll_right_to_left@line,c
  4078  000DA6                     l5959:
  4079                           
  4080                           ;clcd.c: 453: if (clcd_display_string_details->start_row == 3)
  4081  000DA6  EE20 F02A          	lfsr	2,42
  4082  000DAA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4083  000DAC  26D9               	addwf	fsr2l,f,c
  4084  000DAE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4085  000DB0  22DA               	addwfc	fsr2h,f,c
  4086  000DB2  50DF               	movf	indf2,w,c
  4087  000DB4  0B7F               	andlw	127
  4088  000DB6  0A03               	xorlw	3
  4089  000DB8  A4D8               	btfss	status,2,c
  4090  000DBA  D002               	goto	l5963
  4091                           
  4092                           ;clcd.c: 454: line = 3;
  4093  000DBC  0E03               	movlw	3
  4094  000DBE  6E3B               	movwf	scroll_right_to_left@line,c
  4095  000DC0                     l5963:
  4096                           
  4097                           ;clcd.c: 456: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  4098                           ;clcd.c: 457: ' ', clcd_display_string_details->display_char_count);
  4099  000DC0  503B               	movf	scroll_right_to_left@line,w,c
  4100  000DC2  0D14               	mullw	20
  4101  000DC4  0E00               	movlw	low _lcd_display_array
  4102  000DC6  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4103  000DC8  0E01               	movlw	high _lcd_display_array
  4104  000DCA  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4105  000DCC  50F3               	movf	prodl,w,c
  4106  000DCE  262E               	addwf	??_scroll_right_to_left,f,c
  4107  000DD0  50F4               	movf	prodh,w,c
  4108  000DD2  222F               	addwfc	??_scroll_right_to_left+1,f,c
  4109  000DD4  EE20 F02B          	lfsr	2,43
  4110  000DD8  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4111  000DDA  26D9               	addwf	fsr2l,f,c
  4112  000DDC  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4113  000DDE  22DA               	addwfc	fsr2h,f,c
  4114  000DE0  50DF               	movf	indf2,w,c
  4115  000DE2  0B7F               	andlw	127
  4116  000DE4  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4117  000DE6  5030               	movf	??_scroll_right_to_left+2,w,c
  4118  000DE8  0D01               	mullw	1
  4119  000DEA  50F3               	movf	prodl,w,c
  4120  000DEC  242E               	addwf	??_scroll_right_to_left,w,c
  4121  000DEE  6E24               	movwf	memset@p1,c
  4122  000DF0  50F4               	movf	prodh,w,c
  4123  000DF2  202F               	addwfc	??_scroll_right_to_left+1,w,c
  4124  000DF4  6E25               	movwf	memset@p1+1,c
  4125  000DF6  0E00               	movlw	0
  4126  000DF8  6E27               	movwf	memset@c+1,c
  4127  000DFA  0E20               	movlw	32
  4128  000DFC  6E26               	movwf	memset@c,c
  4129  000DFE  EE20 F031          	lfsr	2,49
  4130  000E02  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4131  000E04  26D9               	addwf	fsr2l,f,c
  4132  000E06  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4133  000E08  22DA               	addwfc	fsr2h,f,c
  4134  000E0A  50DF               	movf	indf2,w,c
  4135  000E0C  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  4136  000E0E  5031               	movf	??_scroll_right_to_left+3,w,c
  4137  000E10  6E28               	movwf	memset@n,c
  4138  000E12  6A29               	clrf	memset@n+1,c
  4139  000E14  ECAC  F01A         	call	_memset	;wreg free
  4140                           
  4141                           ;clcd.c: 458: if (clcd_display_string_details->length_count_for_left_scroll > clcd_displ
      +                          ay_string_details->strlen) {
  4142  000E18  EE20 F029          	lfsr	2,41
  4143  000E1C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4144  000E1E  26D9               	addwf	fsr2l,f,c
  4145  000E20  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4146  000E22  22DA               	addwfc	fsr2h,f,c
  4147  000E24  50DF               	movf	indf2,w,c
  4148  000E26  0B7F               	andlw	127
  4149  000E28  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4150  000E2A  EE20 F034          	lfsr	2,52
  4151  000E2E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4152  000E30  26D9               	addwf	fsr2l,f,c
  4153  000E32  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4154  000E34  22DA               	addwfc	fsr2h,f,c
  4155  000E36  50DF               	movf	indf2,w,c
  4156  000E38  0B7F               	andlw	127
  4157  000E3A  5C2E               	subwf	??_scroll_right_to_left,w,c
  4158  000E3C  B0D8               	btfsc	status,0,c
  4159  000E3E  D06E               	goto	l5969
  4160                           
  4161                           ;clcd.c: 460: strncpy(lcd_display_array[line]+(clcd_display_string_details->end_col - cl
      +                          cd_display_string_details->length_decount_for_left_scroll - 1),
  4162                           ;clcd.c: 461: clcd_display_string_details->string, (clcd_display_string_details->display
      +                          _char_count -
  4163                           ;clcd.c: 462: (clcd_display_string_details->display_char_count - (clcd_display_string_de
      +                          tails->length_decount_for_left_scroll + 1))));
  4164  000E40  503B               	movf	scroll_right_to_left@line,w,c
  4165  000E42  0D14               	mullw	20
  4166  000E44  0EFF               	movlw	255
  4167  000E46  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4168  000E48  0EFF               	movlw	255
  4169  000E4A  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4170  000E4C  EE20 F035          	lfsr	2,53
  4171  000E50  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4172  000E52  26D9               	addwf	fsr2l,f,c
  4173  000E54  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4174  000E56  22DA               	addwfc	fsr2h,f,c
  4175  000E58  50DF               	movf	indf2,w,c
  4176  000E5A  0B7F               	andlw	127
  4177  000E5C  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4178  000E5E  6A31               	clrf	(??_scroll_right_to_left+3)& (0+255),c
  4179  000E60  1E30               	comf	??_scroll_right_to_left+2,f,c
  4180  000E62  1E31               	comf	??_scroll_right_to_left+3,f,c
  4181  000E64  4A30               	infsnz	??_scroll_right_to_left+2,f,c
  4182  000E66  2A31               	incf	??_scroll_right_to_left+3,f,c
  4183  000E68  EE20 F02E          	lfsr	2,46
  4184  000E6C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4185  000E6E  26D9               	addwf	fsr2l,f,c
  4186  000E70  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4187  000E72  22DA               	addwfc	fsr2h,f,c
  4188  000E74  50DF               	movf	indf2,w,c
  4189  000E76  0B7F               	andlw	127
  4190  000E78  6E32               	movwf	(??_scroll_right_to_left+4)& (0+255),c
  4191  000E7A  6A33               	clrf	(??_scroll_right_to_left+5)& (0+255),c
  4192  000E7C  5030               	movf	??_scroll_right_to_left+2,w,c
  4193  000E7E  2632               	addwf	??_scroll_right_to_left+4,f,c
  4194  000E80  5031               	movf	??_scroll_right_to_left+3,w,c
  4195  000E82  2233               	addwfc	??_scroll_right_to_left+5,f,c
  4196  000E84  502E               	movf	??_scroll_right_to_left,w,c
  4197  000E86  2632               	addwf	??_scroll_right_to_left+4,f,c
  4198  000E88  502F               	movf	??_scroll_right_to_left+1,w,c
  4199  000E8A  2233               	addwfc	??_scroll_right_to_left+5,f,c
  4200  000E8C  0E00               	movlw	low _lcd_display_array
  4201  000E8E  6E34               	movwf	(??_scroll_right_to_left+6)& (0+255),c
  4202  000E90  0E01               	movlw	high _lcd_display_array
  4203  000E92  6E35               	movwf	(??_scroll_right_to_left+7)& (0+255),c
  4204  000E94  5032               	movf	??_scroll_right_to_left+4,w,c
  4205  000E96  2634               	addwf	??_scroll_right_to_left+6,f,c
  4206  000E98  5033               	movf	??_scroll_right_to_left+5,w,c
  4207  000E9A  2235               	addwfc	??_scroll_right_to_left+7,f,c
  4208  000E9C  50F3               	movf	prodl,w,c
  4209  000E9E  2434               	addwf	??_scroll_right_to_left+6,w,c
  4210  000EA0  6E10               	movwf	strncpy@to,c
  4211  000EA2  50F4               	movf	prodh,w,c
  4212  000EA4  2035               	addwfc	??_scroll_right_to_left+7,w,c
  4213  000EA6  6E11               	movwf	strncpy@to+1,c
  4214  000EA8  0E01               	movlw	1
  4215  000EAA  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4216  000EAC  6E12               	movwf	strncpy@from,c
  4217  000EAE  0E00               	movlw	0
  4218  000EB0  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4219  000EB2  6E13               	movwf	strncpy@from+1,c
  4220  000EB4  EE20 F035          	lfsr	2,53
  4221  000EB8  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4222  000EBA  26D9               	addwf	fsr2l,f,c
  4223  000EBC  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4224  000EBE  22DA               	addwfc	fsr2h,f,c
  4225  000EC0  50DF               	movf	indf2,w,c
  4226  000EC2  0B7F               	andlw	127
  4227  000EC4  6E36               	movwf	(??_scroll_right_to_left+8)& (0+255),c
  4228  000EC6  6A37               	clrf	(??_scroll_right_to_left+9)& (0+255),c
  4229  000EC8  0E01               	movlw	1
  4230  000ECA  2636               	addwf	??_scroll_right_to_left+8,f,c
  4231  000ECC  0E00               	movlw	0
  4232  000ECE  2237               	addwfc	??_scroll_right_to_left+9,f,c
  4233  000ED0  1E36               	comf	??_scroll_right_to_left+8,f,c
  4234  000ED2  1E37               	comf	??_scroll_right_to_left+9,f,c
  4235  000ED4  4A36               	infsnz	??_scroll_right_to_left+8,f,c
  4236  000ED6  2A37               	incf	??_scroll_right_to_left+9,f,c
  4237  000ED8  EE20 F031          	lfsr	2,49
  4238  000EDC  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4239  000EDE  26D9               	addwf	fsr2l,f,c
  4240  000EE0  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4241  000EE2  22DA               	addwfc	fsr2h,f,c
  4242  000EE4  50DF               	movf	indf2,w,c
  4243  000EE6  6E38               	movwf	(??_scroll_right_to_left+10)& (0+255),c
  4244  000EE8  6A39               	clrf	(??_scroll_right_to_left+11)& (0+255),c
  4245  000EEA  5036               	movf	??_scroll_right_to_left+8,w,c
  4246  000EEC  2638               	addwf	??_scroll_right_to_left+10,f,c
  4247  000EEE  5037               	movf	??_scroll_right_to_left+9,w,c
  4248  000EF0  2239               	addwfc	??_scroll_right_to_left+11,f,c
  4249  000EF2  1E38               	comf	??_scroll_right_to_left+10,f,c
  4250  000EF4  1E39               	comf	??_scroll_right_to_left+11,f,c
  4251  000EF6  4A38               	infsnz	??_scroll_right_to_left+10,f,c
  4252  000EF8  2A39               	incf	??_scroll_right_to_left+11,f,c
  4253  000EFA  EE20 F031          	lfsr	2,49
  4254  000EFE  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4255  000F00  26D9               	addwf	fsr2l,f,c
  4256  000F02  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4257  000F04  22DA               	addwfc	fsr2h,f,c
  4258  000F06  50DF               	movf	indf2,w,c
  4259  000F08  6E3A               	movwf	(??_scroll_right_to_left+12)& (0+255),c
  4260  000F0A  503A               	movf	??_scroll_right_to_left+12,w,c
  4261  000F0C  2438               	addwf	??_scroll_right_to_left+10,w,c
  4262  000F0E  6E14               	movwf	strncpy@size,c
  4263  000F10  0E00               	movlw	0
  4264  000F12  2039               	addwfc	??_scroll_right_to_left+11,w,c
  4265  000F14  6E15               	movwf	strncpy@size+1,c
  4266  000F16  ECB6  F017         	call	_strncpy	;wreg free
  4267                           
  4268                           ;clcd.c: 463: } else {
  4269  000F1A  D055               	goto	l5973
  4270  000F1C                     l5969:
  4271                           
  4272                           ;clcd.c: 464: if (clcd_display_string_details->string[clcd_display_string_details->lengt
      +                          h_count_for_left_scroll] != (0)) {
  4273  000F1C  EE20 F034          	lfsr	2,52
  4274  000F20  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4275  000F22  26D9               	addwf	fsr2l,f,c
  4276  000F24  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4277  000F26  22DA               	addwfc	fsr2h,f,c
  4278  000F28  50DF               	movf	indf2,w,c
  4279  000F2A  0B7F               	andlw	127
  4280  000F2C  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4281  000F2E  502E               	movf	??_scroll_right_to_left,w,c
  4282  000F30  0D01               	mullw	1
  4283  000F32  0E01               	movlw	1
  4284  000F34  26F3               	addwf	prodl,f,c
  4285  000F36  0E00               	movlw	0
  4286  000F38  22F4               	addwfc	prodh,f,c
  4287  000F3A  50F3               	movf	prodl,w,c
  4288  000F3C  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4289  000F3E  6ED9               	movwf	fsr2l,c
  4290  000F40  50F4               	movf	prodh,w,c
  4291  000F42  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4292  000F44  6EDA               	movwf	fsr2h,c
  4293  000F46  50DF               	movf	indf2,w,c
  4294  000F48  B4D8               	btfsc	status,2,c
  4295  000F4A  D03D               	goto	l5973
  4296                           
  4297                           ;clcd.c: 465: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  4298                           ;clcd.c: 466: clcd_display_string_details->string + clcd_display_string_details->length_
      +                          count_for_left_scroll,
  4299                           ;clcd.c: 467: clcd_display_string_details->display_char_count);
  4300  000F4C  503B               	movf	scroll_right_to_left@line,w,c
  4301  000F4E  0D14               	mullw	20
  4302  000F50  0E00               	movlw	low _lcd_display_array
  4303  000F52  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4304  000F54  0E01               	movlw	high _lcd_display_array
  4305  000F56  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4306  000F58  50F3               	movf	prodl,w,c
  4307  000F5A  262E               	addwf	??_scroll_right_to_left,f,c
  4308  000F5C  50F4               	movf	prodh,w,c
  4309  000F5E  222F               	addwfc	??_scroll_right_to_left+1,f,c
  4310  000F60  EE20 F02B          	lfsr	2,43
  4311  000F64  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4312  000F66  26D9               	addwf	fsr2l,f,c
  4313  000F68  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4314  000F6A  22DA               	addwfc	fsr2h,f,c
  4315  000F6C  50DF               	movf	indf2,w,c
  4316  000F6E  0B7F               	andlw	127
  4317  000F70  6E30               	movwf	(??_scroll_right_to_left+2)& (0+255),c
  4318  000F72  5030               	movf	??_scroll_right_to_left+2,w,c
  4319  000F74  0D01               	mullw	1
  4320  000F76  50F3               	movf	prodl,w,c
  4321  000F78  242E               	addwf	??_scroll_right_to_left,w,c
  4322  000F7A  6E10               	movwf	memcpy@d1,c
  4323  000F7C  50F4               	movf	prodh,w,c
  4324  000F7E  202F               	addwfc	??_scroll_right_to_left+1,w,c
  4325  000F80  6E11               	movwf	memcpy@d1+1,c
  4326  000F82  EE20 F034          	lfsr	2,52
  4327  000F86  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4328  000F88  26D9               	addwf	fsr2l,f,c
  4329  000F8A  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4330  000F8C  22DA               	addwfc	fsr2h,f,c
  4331  000F8E  50DF               	movf	indf2,w,c
  4332  000F90  0B7F               	andlw	127
  4333  000F92  6E31               	movwf	(??_scroll_right_to_left+3)& (0+255),c
  4334  000F94  5031               	movf	??_scroll_right_to_left+3,w,c
  4335  000F96  0D01               	mullw	1
  4336  000F98  0E01               	movlw	1
  4337  000F9A  26F3               	addwf	prodl,f,c
  4338  000F9C  0E00               	movlw	0
  4339  000F9E  22F4               	addwfc	prodh,f,c
  4340  000FA0  50F3               	movf	prodl,w,c
  4341  000FA2  242C               	addwf	scroll_right_to_left@clcd_display_string_details,w,c
  4342  000FA4  6E12               	movwf	memcpy@s1,c
  4343  000FA6  50F4               	movf	prodh,w,c
  4344  000FA8  202D               	addwfc	scroll_right_to_left@clcd_display_string_details+1,w,c
  4345  000FAA  6E13               	movwf	memcpy@s1+1,c
  4346  000FAC  EE20 F031          	lfsr	2,49
  4347  000FB0  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4348  000FB2  26D9               	addwf	fsr2l,f,c
  4349  000FB4  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4350  000FB6  22DA               	addwfc	fsr2h,f,c
  4351  000FB8  50DF               	movf	indf2,w,c
  4352  000FBA  6E32               	movwf	(??_scroll_right_to_left+4)& (0+255),c
  4353  000FBC  5032               	movf	??_scroll_right_to_left+4,w,c
  4354  000FBE  6E14               	movwf	memcpy@n,c
  4355  000FC0  6A15               	clrf	memcpy@n+1,c
  4356  000FC2  ECB6  F019         	call	_memcpy	;wreg free
  4357  000FC6                     l5973:
  4358                           
  4359                           ;clcd.c: 470: }
  4360                           ;clcd.c: 471: }
  4361                           ;clcd.c: 473: if (clcd_display_string_details->length_count_for_left_scroll <= clcd_disp
      +                          lay_string_details->strlen)
  4362  000FC6  EE20 F034          	lfsr	2,52
  4363  000FCA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4364  000FCC  26D9               	addwf	fsr2l,f,c
  4365  000FCE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4366  000FD0  22DA               	addwfc	fsr2h,f,c
  4367  000FD2  50DF               	movf	indf2,w,c
  4368  000FD4  0B7F               	andlw	127
  4369  000FD6  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4370  000FD8  EE20 F029          	lfsr	2,41
  4371  000FDC  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4372  000FDE  26D9               	addwf	fsr2l,f,c
  4373  000FE0  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4374  000FE2  22DA               	addwfc	fsr2h,f,c
  4375  000FE4  50DF               	movf	indf2,w,c
  4376  000FE6  0B7F               	andlw	127
  4377  000FE8  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4378  000FEA  502E               	movf	??_scroll_right_to_left,w,c
  4379  000FEC  5C2F               	subwf	??_scroll_right_to_left+1,w,c
  4380  000FEE  A0D8               	btfss	status,0,c
  4381  000FF0  D013               	goto	l5977
  4382                           
  4383                           ;clcd.c: 474: {
  4384                           ;clcd.c: 475: clcd_display_string_details->length_count_for_left_scroll++;
  4385  000FF2  0E01               	movlw	1
  4386  000FF4  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4387  000FF6  EE20 F034          	lfsr	2,52
  4388  000FFA  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4389  000FFC  26D9               	addwf	fsr2l,f,c
  4390  000FFE  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4391  001000  22DA               	addwfc	fsr2h,f,c
  4392  001002  50DF               	movf	indf2,w,c
  4393  001004  0B7F               	andlw	127
  4394  001006  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4395  001008  502E               	movf	??_scroll_right_to_left,w,c
  4396  00100A  262F               	addwf	??_scroll_right_to_left+1,f,c
  4397  00100C  50DF               	movf	indf2,w,c
  4398  00100E  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4399  001010  0B80               	andlw	-128
  4400  001012  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4401  001014  6EDF               	movwf	indf2,c
  4402                           
  4403                           ;clcd.c: 476: } else if (clcd_display_string_details->length_count_for_left_scroll > clc
      +                          d_display_string_details->strlen)
  4404  001016  0012               	return	
  4405  001018                     l5977:
  4406  001018  EE20 F029          	lfsr	2,41
  4407  00101C  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4408  00101E  26D9               	addwf	fsr2l,f,c
  4409  001020  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4410  001022  22DA               	addwfc	fsr2h,f,c
  4411  001024  50DF               	movf	indf2,w,c
  4412  001026  0B7F               	andlw	127
  4413  001028  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4414  00102A  EE20 F034          	lfsr	2,52
  4415  00102E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4416  001030  26D9               	addwf	fsr2l,f,c
  4417  001032  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4418  001034  22DA               	addwfc	fsr2h,f,c
  4419  001036  50DF               	movf	indf2,w,c
  4420  001038  0B7F               	andlw	127
  4421  00103A  5C2E               	subwf	??_scroll_right_to_left,w,c
  4422  00103C  B0D8               	btfsc	status,0,c
  4423  00103E  0012               	return	
  4424                           
  4425                           ;clcd.c: 477: {
  4426                           ;clcd.c: 478: clcd_display_string_details->length_decount_for_left_scroll++;
  4427  001040  0E01               	movlw	1
  4428  001042  6E2E               	movwf	??_scroll_right_to_left& (0+255),c
  4429  001044  EE20 F035          	lfsr	2,53
  4430  001048  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4431  00104A  26D9               	addwf	fsr2l,f,c
  4432  00104C  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4433  00104E  22DA               	addwfc	fsr2h,f,c
  4434  001050  50DF               	movf	indf2,w,c
  4435  001052  0B7F               	andlw	127
  4436  001054  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4437  001056  502E               	movf	??_scroll_right_to_left,w,c
  4438  001058  262F               	addwf	??_scroll_right_to_left+1,f,c
  4439  00105A  50DF               	movf	indf2,w,c
  4440  00105C  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4441  00105E  0B80               	andlw	-128
  4442  001060  182F               	xorwf	(??_scroll_right_to_left+1)& (0+255),w,c
  4443  001062  6EDF               	movwf	indf2,c
  4444                           
  4445                           ;clcd.c: 479: if (clcd_display_string_details->length_decount_for_left_scroll == clcd_di
      +                          splay_string_details->display_char_count) {
  4446  001064  EE20 F031          	lfsr	2,49
  4447  001068  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4448  00106A  26D9               	addwf	fsr2l,f,c
  4449  00106C  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4450  00106E  22DA               	addwfc	fsr2h,f,c
  4451  001070  EE10 F035          	lfsr	1,53
  4452  001074  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4453  001076  26E1               	addwf	fsr1l,f,c
  4454  001078  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4455  00107A  22E2               	addwfc	fsr1h,f,c
  4456  00107C  50E7               	movf	indf1,w,c
  4457  00107E  0B7F               	andlw	127
  4458  001080  6E2F               	movwf	(??_scroll_right_to_left+1)& (0+255),c
  4459  001082  50DE               	movf	postinc2,w,c
  4460  001084  182F               	xorwf	??_scroll_right_to_left+1,w,c
  4461  001086  A4D8               	btfss	status,2,c
  4462  001088  0012               	return	
  4463                           
  4464                           ;clcd.c: 480: clcd_display_string_details->length_decount_for_left_scroll = 0;
  4465  00108A  EE20 F035          	lfsr	2,53
  4466  00108E  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4467  001090  26D9               	addwf	fsr2l,f,c
  4468  001092  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4469  001094  22DA               	addwfc	fsr2h,f,c
  4470  001096  90DF               	bcf	indf2,0,c
  4471  001098  92DF               	bcf	indf2,1,c
  4472  00109A  94DF               	bcf	indf2,2,c
  4473  00109C  96DF               	bcf	indf2,3,c
  4474  00109E  98DF               	bcf	indf2,4,c
  4475  0010A0  9ADF               	bcf	indf2,5,c
  4476  0010A2  9CDF               	bcf	indf2,6,c
  4477                           
  4478                           ;clcd.c: 481: clcd_display_string_details->length_count_for_left_scroll = 0;
  4479  0010A4  EE20 F034          	lfsr	2,52
  4480  0010A8  502C               	movf	scroll_right_to_left@clcd_display_string_details,w,c
  4481  0010AA  26D9               	addwf	fsr2l,f,c
  4482  0010AC  502D               	movf	scroll_right_to_left@clcd_display_string_details+1,w,c
  4483  0010AE  22DA               	addwfc	fsr2h,f,c
  4484  0010B0  90DF               	bcf	indf2,0,c
  4485  0010B2  92DF               	bcf	indf2,1,c
  4486  0010B4  94DF               	bcf	indf2,2,c
  4487  0010B6  96DF               	bcf	indf2,3,c
  4488  0010B8  98DF               	bcf	indf2,4,c
  4489  0010BA  9ADF               	bcf	indf2,5,c
  4490  0010BC  9CDF               	bcf	indf2,6,c
  4491  0010BE  0012               	return	
  4492  0010C0                     __end_of_scroll_right_to_left:
  4493                           	opt stack 0
  4494                           tblptru	equ	0xFF8
  4495                           tblptrh	equ	0xFF7
  4496                           tblptrl	equ	0xFF6
  4497                           tablat	equ	0xFF5
  4498                           prodh	equ	0xFF4
  4499                           prodl	equ	0xFF3
  4500                           intcon	equ	0xFF2
  4501                           postinc0	equ	0xFEE
  4502                           wreg	equ	0xFE8
  4503                           indf1	equ	0xFE7
  4504                           postdec1	equ	0xFE5
  4505                           fsr1h	equ	0xFE2
  4506                           fsr1l	equ	0xFE1
  4507                           indf2	equ	0xFDF
  4508                           postinc2	equ	0xFDE
  4509                           fsr2h	equ	0xFDA
  4510                           fsr2l	equ	0xFD9
  4511                           status	equ	0xFD8
  4512                           
  4513 ;; *************** function _strncpy *****************
  4514 ;; Defined at:
  4515 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncpy.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  to              2   15[COMRAM] PTR unsigned char 
  4518 ;;		 -> lcd_display_array(80), 
  4519 ;;  from            2   17[COMRAM] PTR const unsigned char 
  4520 ;;		 -> clcd_display_string_details.string(40), clcd_display_string_details(1080), 
  4521 ;;  size            2   19[COMRAM] unsigned int 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  cp              2   21[COMRAM] PTR unsigned char 
  4524 ;;		 -> lcd_display_array(80), 
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  2   15[COMRAM] PTR unsigned char 
  4527 ;; Registers used:
  4528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4534 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;Total ram usage:        8 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; Hardware stack levels required when called:    5
  4541 ;; This function calls:
  4542 ;;		Nothing
  4543 ;; This function is called by:
  4544 ;;		_scroll_right_to_left
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           	psect	text8
  4549  002F6C                     __ptext8:
  4550                           	opt stack 0
  4551  002F6C                     _strncpy:
  4552                           	opt stack 23
  4553                           
  4554                           ;incstack = 0
  4555  002F6C  C010  F016         	movff	strncpy@to,strncpy@cp
  4556  002F70  C011  F017         	movff	strncpy@to+1,strncpy@cp+1
  4557  002F74  D014               	goto	l5865
  4558  002F76                     l5859:
  4559  002F76  0614               	decf	strncpy@size,f,c
  4560  002F78  A0D8               	btfss	status,0,c
  4561  002F7A  0615               	decf	strncpy@size+1,f,c
  4562  002F7C  C012  FFD9         	movff	strncpy@from,fsr2l
  4563  002F80  C013  FFDA         	movff	strncpy@from+1,fsr2h
  4564  002F84  4A12               	infsnz	strncpy@from,f,c
  4565  002F86  2A13               	incf	strncpy@from+1,f,c
  4566  002F88  C016  FFE1         	movff	strncpy@cp,fsr1l
  4567  002F8C  C017  FFE2         	movff	strncpy@cp+1,fsr1h
  4568  002F90  4A16               	infsnz	strncpy@cp,f,c
  4569  002F92  2A17               	incf	strncpy@cp+1,f,c
  4570  002F94  CFDF FFE7          	movff	indf2,indf1
  4571  002F98  50E7               	movf	indf1,w,c
  4572  002F9A  B4D8               	btfsc	status,2,c
  4573  002F9C  D00D               	goto	l5871
  4574  002F9E                     l5865:
  4575  002F9E  5014               	movf	strncpy@size,w,c
  4576  002FA0  1015               	iorwf	strncpy@size+1,w,c
  4577  002FA2  B4D8               	btfsc	status,2,c
  4578  002FA4  D009               	goto	l5871
  4579  002FA6  D7E7               	goto	l5859
  4580  002FA8                     l5867:
  4581  002FA8  C016  FFD9         	movff	strncpy@cp,fsr2l
  4582  002FAC  C017  FFDA         	movff	strncpy@cp+1,fsr2h
  4583  002FB0  0E00               	movlw	0
  4584  002FB2  6EDF               	movwf	indf2,c
  4585  002FB4  4A16               	infsnz	strncpy@cp,f,c
  4586  002FB6  2A17               	incf	strncpy@cp+1,f,c
  4587  002FB8                     l5871:
  4588  002FB8  0614               	decf	strncpy@size,f,c
  4589  002FBA  A0D8               	btfss	status,0,c
  4590  002FBC  0615               	decf	strncpy@size+1,f,c
  4591  002FBE  2814               	incf	strncpy@size,w,c
  4592  002FC0  E1F3               	bnz	l5867
  4593  002FC2  2815               	incf	strncpy@size+1,w,c
  4594  002FC4  B4D8               	btfsc	status,2,c
  4595  002FC6  0012               	return	
  4596  002FC8  D7EF               	goto	l5867
  4597  002FCA                     __end_of_strncpy:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           intcon	equ	0xFF2
  4606                           postinc0	equ	0xFEE
  4607                           wreg	equ	0xFE8
  4608                           indf1	equ	0xFE7
  4609                           postdec1	equ	0xFE5
  4610                           fsr1h	equ	0xFE2
  4611                           fsr1l	equ	0xFE1
  4612                           indf2	equ	0xFDF
  4613                           postinc2	equ	0xFDE
  4614                           fsr2h	equ	0xFDA
  4615                           fsr2l	equ	0xFD9
  4616                           status	equ	0xFD8
  4617                           
  4618 ;; *************** function _scroll_off *****************
  4619 ;; Defined at:
  4620 ;;		line 488 in file "clcd.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;  clcd_display    2   35[COMRAM] PTR struct .
  4623 ;;		 -> clcd_display_string_details(1080), 
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;  i               2   48[COMRAM] int 
  4626 ;;  j               2   46[COMRAM] int 
  4627 ;;  k               2   41[COMRAM] int 
  4628 ;;  str_len         1   45[COMRAM] unsigned char 
  4629 ;;  display_char    1   44[COMRAM] unsigned char 
  4630 ;;  line            1   43[COMRAM] unsigned char 
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4641 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;Total ram usage:       15 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    6
  4647 ;; This function calls:
  4648 ;;		_strlen
  4649 ;; This function is called by:
  4650 ;;		_make_display
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           	psect	text9
  4655  002718                     __ptext9:
  4656                           	opt stack 0
  4657  002718                     _scroll_off:
  4658                           	opt stack 23
  4659                           
  4660                           ;clcd.c: 489: char line = -1;
  4661                           
  4662                           ;incstack = 0
  4663  002718  682C               	setf	scroll_off@line,c
  4664                           
  4665                           ;clcd.c: 491: int i = 0;
  4666  00271A  0E00               	movlw	0
  4667  00271C  6E32               	movwf	scroll_off@i+1,c
  4668  00271E  0E00               	movlw	0
  4669  002720  6E31               	movwf	scroll_off@i,c
  4670                           
  4671                           ;clcd.c: 492: int j = 0, k = 0;
  4672  002722  0E00               	movlw	0
  4673  002724  6E30               	movwf	scroll_off@j+1,c
  4674  002726  0E00               	movlw	0
  4675  002728  6E2F               	movwf	scroll_off@j,c
  4676  00272A  0E00               	movlw	0
  4677  00272C  6E2B               	movwf	scroll_off@k+1,c
  4678  00272E  0E00               	movlw	0
  4679  002730  6E2A               	movwf	scroll_off@k,c
  4680                           
  4681                           ;clcd.c: 493: char display_char_count = clcd_display_string_details->end_point - clcd_di
      +                          splay_string_details->start_point;
  4682  002732  EE20 F02F          	lfsr	2,47
  4683  002736  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4684  002738  26D9               	addwf	fsr2l,f,c
  4685  00273A  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4686  00273C  22DA               	addwfc	fsr2h,f,c
  4687  00273E  50DF               	movf	indf2,w,c
  4688  002740  0B7F               	andlw	127
  4689  002742  6E26               	movwf	??_scroll_off& (0+255),c
  4690  002744  EE20 F02C          	lfsr	2,44
  4691  002748  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4692  00274A  26D9               	addwf	fsr2l,f,c
  4693  00274C  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4694  00274E  22DA               	addwfc	fsr2h,f,c
  4695  002750  50DF               	movf	indf2,w,c
  4696  002752  0B7F               	andlw	127
  4697  002754  0800               	sublw	0
  4698  002756  2426               	addwf	??_scroll_off,w,c
  4699  002758  6E2D               	movwf	scroll_off@display_char_count,c
  4700                           
  4701                           ;clcd.c: 494: char str_len = strlen(clcd_display_string_details->string);
  4702  00275A  0E01               	movlw	1
  4703  00275C  2424               	addwf	scroll_off@clcd_display_string_details,w,c
  4704  00275E  6E1E               	movwf	strlen@s,c
  4705  002760  0E00               	movlw	0
  4706  002762  2025               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4707  002764  6E1F               	movwf	strlen@s+1,c
  4708  002766  EC3E  F018         	call	_strlen	;wreg free
  4709  00276A  501E               	movf	?_strlen,w,c
  4710  00276C  6E2E               	movwf	scroll_off@str_len,c
  4711                           
  4712                           ;clcd.c: 495: line = clcd_display_string_details->start_row;
  4713  00276E  EE20 F02A          	lfsr	2,42
  4714  002772  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4715  002774  26D9               	addwf	fsr2l,f,c
  4716  002776  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4717  002778  22DA               	addwfc	fsr2h,f,c
  4718  00277A  50DF               	movf	indf2,w,c
  4719  00277C  0B7F               	andlw	127
  4720  00277E  6E2C               	movwf	scroll_off@line,c
  4721                           
  4722                           ;clcd.c: 496: j = clcd_display_string_details->start_col;
  4723  002780  EE20 F02B          	lfsr	2,43
  4724  002784  5024               	movf	scroll_off@clcd_display_string_details,w,c
  4725  002786  26D9               	addwf	fsr2l,f,c
  4726  002788  5025               	movf	scroll_off@clcd_display_string_details+1,w,c
  4727  00278A  22DA               	addwfc	fsr2h,f,c
  4728  00278C  50DF               	movf	indf2,w,c
  4729  00278E  0B7F               	andlw	127
  4730  002790  6E26               	movwf	??_scroll_off& (0+255),c
  4731  002792  5026               	movf	??_scroll_off,w,c
  4732  002794  6E2F               	movwf	scroll_off@j,c
  4733  002796  6A30               	clrf	scroll_off@j+1,c
  4734                           
  4735                           ;clcd.c: 497: for (i = 0; i < str_len;) {
  4736  002798  0E00               	movlw	0
  4737  00279A  6E32               	movwf	scroll_off@i+1,c
  4738  00279C  0E00               	movlw	0
  4739  00279E  6E31               	movwf	scroll_off@i,c
  4740  0027A0  D05B               	goto	l6023
  4741  0027A2                     l5999:
  4742                           
  4743                           ;clcd.c: 499: lcd_display_array[line][j] = clcd_display_string_details->string[i++];
  4744  0027A2  0E01               	movlw	1
  4745  0027A4  2431               	addwf	scroll_off@i,w,c
  4746  0027A6  6E26               	movwf	??_scroll_off& (0+255),c
  4747  0027A8  0E00               	movlw	0
  4748  0027AA  2032               	addwfc	scroll_off@i+1,w,c
  4749  0027AC  6E27               	movwf	(??_scroll_off+1)& (0+255),c
  4750  0027AE  5026               	movf	??_scroll_off,w,c
  4751  0027B0  2424               	addwf	scroll_off@clcd_display_string_details,w,c
  4752  0027B2  6ED9               	movwf	fsr2l,c
  4753  0027B4  5027               	movf	??_scroll_off+1,w,c
  4754  0027B6  2025               	addwfc	scroll_off@clcd_display_string_details+1,w,c
  4755  0027B8  6EDA               	movwf	fsr2h,c
  4756  0027BA  502C               	movf	scroll_off@line,w,c
  4757  0027BC  0D14               	mullw	20
  4758  0027BE  0E00               	movlw	low _lcd_display_array
  4759  0027C0  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4760  0027C2  0E01               	movlw	high _lcd_display_array
  4761  0027C4  6E29               	movwf	(??_scroll_off+3)& (0+255),c
  4762  0027C6  50F3               	movf	prodl,w,c
  4763  0027C8  2628               	addwf	??_scroll_off+2,f,c
  4764  0027CA  50F4               	movf	prodh,w,c
  4765  0027CC  2229               	addwfc	??_scroll_off+3,f,c
  4766  0027CE  502F               	movf	scroll_off@j,w,c
  4767  0027D0  2428               	addwf	??_scroll_off+2,w,c
  4768  0027D2  6EE1               	movwf	fsr1l,c
  4769  0027D4  5030               	movf	scroll_off@j+1,w,c
  4770  0027D6  2029               	addwfc	??_scroll_off+3,w,c
  4771  0027D8  6EE2               	movwf	fsr1h,c
  4772  0027DA  CFDF FFE7          	movff	indf2,indf1
  4773  0027DE  4A31               	infsnz	scroll_off@i,f,c
  4774  0027E0  2A32               	incf	scroll_off@i+1,f,c
  4775                           
  4776                           ;clcd.c: 500: if (i >= str_len)break;
  4777  0027E2  502E               	movf	scroll_off@str_len,w,c
  4778  0027E4  6E26               	movwf	??_scroll_off& (0+255),c
  4779  0027E6  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4780  0027E8  5026               	movf	??_scroll_off,w,c
  4781  0027EA  5C31               	subwf	scroll_off@i,w,c
  4782  0027EC  5032               	movf	scroll_off@i+1,w,c
  4783  0027EE  0A80               	xorlw	128
  4784  0027F0  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4785  0027F2  5027               	movf	??_scroll_off+1,w,c
  4786  0027F4  0A80               	xorlw	128
  4787  0027F6  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4788  0027F8  B0D8               	btfsc	status,0,c
  4789  0027FA  D01C               	goto	l6015
  4790                           
  4791                           ;clcd.c: 501: if (i >= display_char_count)break;
  4792  0027FC  502D               	movf	scroll_off@display_char_count,w,c
  4793  0027FE  6E26               	movwf	??_scroll_off& (0+255),c
  4794  002800  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4795  002802  5026               	movf	??_scroll_off,w,c
  4796  002804  5C31               	subwf	scroll_off@i,w,c
  4797  002806  5032               	movf	scroll_off@i+1,w,c
  4798  002808  0A80               	xorlw	128
  4799  00280A  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4800  00280C  5027               	movf	??_scroll_off+1,w,c
  4801  00280E  0A80               	xorlw	128
  4802  002810  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4803  002812  B0D8               	btfsc	status,0,c
  4804  002814  D00F               	goto	l6015
  4805  002816  4A2F               	infsnz	scroll_off@j,f,c
  4806  002818  2A30               	incf	scroll_off@j+1,f,c
  4807  00281A                     l6013:
  4808  00281A  504B               	movf	_clcd_config_data+2,w,c
  4809  00281C  6E26               	movwf	??_scroll_off& (0+255),c
  4810  00281E  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4811  002820  5026               	movf	??_scroll_off,w,c
  4812  002822  5C2F               	subwf	scroll_off@j,w,c
  4813  002824  5030               	movf	scroll_off@j+1,w,c
  4814  002826  0A80               	xorlw	128
  4815  002828  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4816  00282A  5027               	movf	??_scroll_off+1,w,c
  4817  00282C  0A80               	xorlw	128
  4818  00282E  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4819  002830  A0D8               	btfss	status,0,c
  4820  002832  D7B7               	goto	l5999
  4821  002834                     l6015:
  4822                           
  4823                           ;clcd.c: 502: }
  4824                           ;clcd.c: 504: j = 0;
  4825  002834  0E00               	movlw	0
  4826  002836  6E30               	movwf	scroll_off@j+1,c
  4827  002838  0E00               	movlw	0
  4828  00283A  6E2F               	movwf	scroll_off@j,c
  4829                           
  4830                           ;clcd.c: 505: line++;
  4831  00283C  2A2C               	incf	scroll_off@line,f,c
  4832                           
  4833                           ;clcd.c: 506: if (i >= display_char_count)break;
  4834  00283E  502D               	movf	scroll_off@display_char_count,w,c
  4835  002840  6E26               	movwf	??_scroll_off& (0+255),c
  4836  002842  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4837  002844  5026               	movf	??_scroll_off,w,c
  4838  002846  5C31               	subwf	scroll_off@i,w,c
  4839  002848  5032               	movf	scroll_off@i+1,w,c
  4840  00284A  0A80               	xorlw	128
  4841  00284C  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4842  00284E  5027               	movf	??_scroll_off+1,w,c
  4843  002850  0A80               	xorlw	128
  4844  002852  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4845  002854  B0D8               	btfsc	status,0,c
  4846  002856  0012               	return	
  4847  002858                     l6023:
  4848  002858  502E               	movf	scroll_off@str_len,w,c
  4849  00285A  6E26               	movwf	??_scroll_off& (0+255),c
  4850  00285C  6A27               	clrf	(??_scroll_off+1)& (0+255),c
  4851  00285E  5026               	movf	??_scroll_off,w,c
  4852  002860  5C31               	subwf	scroll_off@i,w,c
  4853  002862  5032               	movf	scroll_off@i+1,w,c
  4854  002864  0A80               	xorlw	128
  4855  002866  6E28               	movwf	(??_scroll_off+2)& (0+255),c
  4856  002868  5027               	movf	??_scroll_off+1,w,c
  4857  00286A  0A80               	xorlw	128
  4858  00286C  5828               	subwfb	(??_scroll_off+2)& (0+255),w,c
  4859  00286E  B0D8               	btfsc	status,0,c
  4860  002870  0012               	return	
  4861  002872  D7D3               	goto	l6013
  4862  002874                     __end_of_scroll_off:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           postinc0	equ	0xFEE
  4872                           wreg	equ	0xFE8
  4873                           indf1	equ	0xFE7
  4874                           postdec1	equ	0xFE5
  4875                           fsr1h	equ	0xFE2
  4876                           fsr1l	equ	0xFE1
  4877                           indf2	equ	0xFDF
  4878                           postinc2	equ	0xFDE
  4879                           fsr2h	equ	0xFDA
  4880                           fsr2l	equ	0xFD9
  4881                           status	equ	0xFD8
  4882                           
  4883 ;; *************** function _scroll_left_to_right *****************
  4884 ;; Defined at:
  4885 ;;		line 404 in file "clcd.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;  clcd_display    2   43[COMRAM] PTR struct .
  4888 ;;		 -> clcd_display_string_details(1080), 
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;  line            1   53[COMRAM] unsigned char 
  4891 ;; Return value:  Size  Location     Type
  4892 ;;                  1    wreg      void 
  4893 ;; Registers used:
  4894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4900 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;Total ram usage:       11 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    6
  4907 ;; This function calls:
  4908 ;;		_memcpy
  4909 ;;		_memset
  4910 ;; This function is called by:
  4911 ;;		_make_display
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text10
  4916  001410                     __ptext10:
  4917                           	opt stack 0
  4918  001410                     _scroll_left_to_right:
  4919                           	opt stack 23
  4920                           
  4921                           ;clcd.c: 405: char line = -1;
  4922                           
  4923                           ;incstack = 0
  4924  001410  6836               	setf	scroll_left_to_right@line,c
  4925                           
  4926                           ;clcd.c: 406: if (clcd_display_string_details->start_row == 0)
  4927  001412  EE20 F02A          	lfsr	2,42
  4928  001416  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4929  001418  26D9               	addwf	fsr2l,f,c
  4930  00141A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4931  00141C  22DA               	addwfc	fsr2h,f,c
  4932  00141E  50DF               	movf	indf2,w,c
  4933  001420  0B7F               	andlw	127
  4934  001422  0900               	iorlw	0
  4935  001424  A4D8               	btfss	status,2,c
  4936  001426  D002               	goto	l5911
  4937                           
  4938                           ;clcd.c: 407: line = 0;
  4939  001428  0E00               	movlw	0
  4940  00142A  D00C               	goto	L2
  4941  00142C                     l5911:
  4942                           
  4943                           ;clcd.c: 408: else if (clcd_display_string_details->start_row == 1)
  4944  00142C  EE20 F02A          	lfsr	2,42
  4945  001430  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4946  001432  26D9               	addwf	fsr2l,f,c
  4947  001434  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4948  001436  22DA               	addwfc	fsr2h,f,c
  4949  001438  50DF               	movf	indf2,w,c
  4950  00143A  0B7F               	andlw	127
  4951  00143C  06E8               	decf	wreg,f,c
  4952  00143E  A4D8               	btfss	status,2,c
  4953  001440  D002               	goto	l5915
  4954                           
  4955                           ;clcd.c: 409: line = 1;
  4956  001442  0E01               	movlw	1
  4957  001444                     L2:
  4958  001444  6E36               	movwf	scroll_left_to_right@line,c
  4959  001446                     l5915:
  4960                           
  4961                           ;clcd.c: 410: if (clcd_display_string_details->start_row == 2)
  4962  001446  EE20 F02A          	lfsr	2,42
  4963  00144A  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4964  00144C  26D9               	addwf	fsr2l,f,c
  4965  00144E  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4966  001450  22DA               	addwfc	fsr2h,f,c
  4967  001452  50DF               	movf	indf2,w,c
  4968  001454  0B7F               	andlw	127
  4969  001456  0A02               	xorlw	2
  4970  001458  A4D8               	btfss	status,2,c
  4971  00145A  D002               	goto	l5919
  4972                           
  4973                           ;clcd.c: 411: line = 2;
  4974  00145C  0E02               	movlw	2
  4975  00145E  6E36               	movwf	scroll_left_to_right@line,c
  4976  001460                     l5919:
  4977                           
  4978                           ;clcd.c: 412: if (clcd_display_string_details->start_row == 3)
  4979  001460  EE20 F02A          	lfsr	2,42
  4980  001464  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  4981  001466  26D9               	addwf	fsr2l,f,c
  4982  001468  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  4983  00146A  22DA               	addwfc	fsr2h,f,c
  4984  00146C  50DF               	movf	indf2,w,c
  4985  00146E  0B7F               	andlw	127
  4986  001470  0A03               	xorlw	3
  4987  001472  A4D8               	btfss	status,2,c
  4988  001474  D002               	goto	l5923
  4989                           
  4990                           ;clcd.c: 413: line = 3;
  4991  001476  0E03               	movlw	3
  4992  001478  6E36               	movwf	scroll_left_to_right@line,c
  4993  00147A                     l5923:
  4994                           
  4995                           ;clcd.c: 415: memset(lcd_display_array[line] + clcd_display_string_details->start_col,
  4996                           ;clcd.c: 416: ' ', clcd_display_string_details->display_char_count);
  4997  00147A  5036               	movf	scroll_left_to_right@line,w,c
  4998  00147C  0D14               	mullw	20
  4999  00147E  0E00               	movlw	low _lcd_display_array
  5000  001480  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5001  001482  0E01               	movlw	high _lcd_display_array
  5002  001484  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5003  001486  50F3               	movf	prodl,w,c
  5004  001488  262E               	addwf	??_scroll_left_to_right,f,c
  5005  00148A  50F4               	movf	prodh,w,c
  5006  00148C  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5007  00148E  EE20 F02B          	lfsr	2,43
  5008  001492  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5009  001494  26D9               	addwf	fsr2l,f,c
  5010  001496  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5011  001498  22DA               	addwfc	fsr2h,f,c
  5012  00149A  50DF               	movf	indf2,w,c
  5013  00149C  0B7F               	andlw	127
  5014  00149E  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5015  0014A0  5030               	movf	??_scroll_left_to_right+2,w,c
  5016  0014A2  0D01               	mullw	1
  5017  0014A4  50F3               	movf	prodl,w,c
  5018  0014A6  242E               	addwf	??_scroll_left_to_right,w,c
  5019  0014A8  6E24               	movwf	memset@p1,c
  5020  0014AA  50F4               	movf	prodh,w,c
  5021  0014AC  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5022  0014AE  6E25               	movwf	memset@p1+1,c
  5023  0014B0  0E00               	movlw	0
  5024  0014B2  6E27               	movwf	memset@c+1,c
  5025  0014B4  0E20               	movlw	32
  5026  0014B6  6E26               	movwf	memset@c,c
  5027  0014B8  EE20 F031          	lfsr	2,49
  5028  0014BC  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5029  0014BE  26D9               	addwf	fsr2l,f,c
  5030  0014C0  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5031  0014C2  22DA               	addwfc	fsr2h,f,c
  5032  0014C4  50DF               	movf	indf2,w,c
  5033  0014C6  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5034  0014C8  5031               	movf	??_scroll_left_to_right+3,w,c
  5035  0014CA  6E28               	movwf	memset@n,c
  5036  0014CC  6A29               	clrf	memset@n+1,c
  5037  0014CE  ECAC  F01A         	call	_memset	;wreg free
  5038                           
  5039                           ;clcd.c: 418: if (clcd_display_string_details->length_count_for_right_scroll > clcd_disp
      +                          lay_string_details->display_char_count) {
  5040  0014D2  EE20 F031          	lfsr	2,49
  5041  0014D6  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5042  0014D8  26D9               	addwf	fsr2l,f,c
  5043  0014DA  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5044  0014DC  22DA               	addwfc	fsr2h,f,c
  5045  0014DE  50DF               	movf	indf2,w,c
  5046  0014E0  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5047  0014E2  EE20 F032          	lfsr	2,50
  5048  0014E6  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5049  0014E8  26D9               	addwf	fsr2l,f,c
  5050  0014EA  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5051  0014EC  22DA               	addwfc	fsr2h,f,c
  5052  0014EE  50DF               	movf	indf2,w,c
  5053  0014F0  0B7F               	andlw	127
  5054  0014F2  5C2E               	subwf	??_scroll_left_to_right,w,c
  5055  0014F4  B0D8               	btfsc	status,0,c
  5056  0014F6  D054               	goto	l5931
  5057                           
  5058                           ;clcd.c: 419: if (clcd_display_string_details->string[0] != (0)) {
  5059  0014F8  EE20 F001          	lfsr	2,1
  5060  0014FC  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5061  0014FE  26D9               	addwf	fsr2l,f,c
  5062  001500  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5063  001502  22DA               	addwfc	fsr2h,f,c
  5064  001504  50DF               	movf	indf2,w,c
  5065  001506  B4D8               	btfsc	status,2,c
  5066  001508  D0A2               	goto	l5935
  5067                           
  5068                           ;clcd.c: 420: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col,
  5069                           ;clcd.c: 421: clcd_display_string_details->string +
  5070                           ;clcd.c: 422: ((clcd_display_string_details->strlen - 1) - clcd_display_string_details->
      +                          length_decount_for_right_scroll),
  5071                           ;clcd.c: 423: clcd_display_string_details->display_char_count);
  5072  00150A  5036               	movf	scroll_left_to_right@line,w,c
  5073  00150C  0D14               	mullw	20
  5074  00150E  0E00               	movlw	low _lcd_display_array
  5075  001510  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5076  001512  0E01               	movlw	high _lcd_display_array
  5077  001514  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5078  001516  50F3               	movf	prodl,w,c
  5079  001518  262E               	addwf	??_scroll_left_to_right,f,c
  5080  00151A  50F4               	movf	prodh,w,c
  5081  00151C  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5082  00151E  EE20 F02B          	lfsr	2,43
  5083  001522  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5084  001524  26D9               	addwf	fsr2l,f,c
  5085  001526  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5086  001528  22DA               	addwfc	fsr2h,f,c
  5087  00152A  50DF               	movf	indf2,w,c
  5088  00152C  0B7F               	andlw	127
  5089  00152E  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5090  001530  5030               	movf	??_scroll_left_to_right+2,w,c
  5091  001532  0D01               	mullw	1
  5092  001534  50F3               	movf	prodl,w,c
  5093  001536  242E               	addwf	??_scroll_left_to_right,w,c
  5094  001538  6E10               	movwf	memcpy@d1,c
  5095  00153A  50F4               	movf	prodh,w,c
  5096  00153C  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5097  00153E  6E11               	movwf	memcpy@d1+1,c
  5098  001540  EE20 F033          	lfsr	2,51
  5099  001544  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5100  001546  26D9               	addwf	fsr2l,f,c
  5101  001548  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5102  00154A  22DA               	addwfc	fsr2h,f,c
  5103  00154C  50DF               	movf	indf2,w,c
  5104  00154E  0B7F               	andlw	127
  5105  001550  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5106  001552  6A32               	clrf	(??_scroll_left_to_right+4)& (0+255),c
  5107  001554  1E31               	comf	??_scroll_left_to_right+3,f,c
  5108  001556  1E32               	comf	??_scroll_left_to_right+4,f,c
  5109  001558  4A31               	infsnz	??_scroll_left_to_right+3,f,c
  5110  00155A  2A32               	incf	??_scroll_left_to_right+4,f,c
  5111  00155C  EE20 F029          	lfsr	2,41
  5112  001560  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5113  001562  26D9               	addwf	fsr2l,f,c
  5114  001564  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5115  001566  22DA               	addwfc	fsr2h,f,c
  5116  001568  50DF               	movf	indf2,w,c
  5117  00156A  0B7F               	andlw	127
  5118  00156C  6E33               	movwf	(??_scroll_left_to_right+5)& (0+255),c
  5119  00156E  6A34               	clrf	(??_scroll_left_to_right+6)& (0+255),c
  5120  001570  5031               	movf	??_scroll_left_to_right+3,w,c
  5121  001572  2633               	addwf	??_scroll_left_to_right+5,f,c
  5122  001574  5032               	movf	??_scroll_left_to_right+4,w,c
  5123  001576  2234               	addwfc	??_scroll_left_to_right+6,f,c
  5124  001578  5033               	movf	??_scroll_left_to_right+5,w,c
  5125  00157A  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5126  00157C  6E12               	movwf	memcpy@s1,c
  5127  00157E  5034               	movf	??_scroll_left_to_right+6,w,c
  5128  001580  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5129  001582  6E13               	movwf	memcpy@s1+1,c
  5130  001584  EE20 F031          	lfsr	2,49
  5131  001588  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5132  00158A  26D9               	addwf	fsr2l,f,c
  5133  00158C  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5134  00158E  22DA               	addwfc	fsr2h,f,c
  5135  001590  50DF               	movf	indf2,w,c
  5136  001592  6E35               	movwf	(??_scroll_left_to_right+7)& (0+255),c
  5137  001594  5035               	movf	??_scroll_left_to_right+7,w,c
  5138  001596  6E14               	movwf	memcpy@n,c
  5139  001598  6A15               	clrf	memcpy@n+1,c
  5140  00159A  ECB6  F019         	call	_memcpy	;wreg free
  5141                           
  5142                           ;clcd.c: 424: }
  5143                           ;clcd.c: 425: } else {
  5144  00159E  D057               	goto	l5935
  5145  0015A0                     l5931:
  5146                           
  5147                           ;clcd.c: 426: if (clcd_display_string_details->string[0] != (0)) {
  5148  0015A0  EE20 F001          	lfsr	2,1
  5149  0015A4  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5150  0015A6  26D9               	addwf	fsr2l,f,c
  5151  0015A8  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5152  0015AA  22DA               	addwfc	fsr2h,f,c
  5153  0015AC  50DF               	movf	indf2,w,c
  5154  0015AE  B4D8               	btfsc	status,2,c
  5155  0015B0  D04E               	goto	l5935
  5156                           
  5157                           ;clcd.c: 427: memcpy(lcd_display_array[line] + clcd_display_string_details->start_col +
  5158                           ;clcd.c: 428: clcd_display_string_details->length_count_for_right_scroll,
  5159                           ;clcd.c: 429: clcd_display_string_details->string,
  5160                           ;clcd.c: 430: clcd_display_string_details->display_char_count - clcd_display_string_deta
      +                          ils->length_count_for_right_scroll);
  5161  0015B2  5036               	movf	scroll_left_to_right@line,w,c
  5162  0015B4  0D14               	mullw	20
  5163  0015B6  0E00               	movlw	low _lcd_display_array
  5164  0015B8  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5165  0015BA  0E01               	movlw	high _lcd_display_array
  5166  0015BC  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5167  0015BE  50F3               	movf	prodl,w,c
  5168  0015C0  262E               	addwf	??_scroll_left_to_right,f,c
  5169  0015C2  50F4               	movf	prodh,w,c
  5170  0015C4  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5171  0015C6  EE20 F02B          	lfsr	2,43
  5172  0015CA  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5173  0015CC  26D9               	addwf	fsr2l,f,c
  5174  0015CE  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5175  0015D0  22DA               	addwfc	fsr2h,f,c
  5176  0015D2  50DF               	movf	indf2,w,c
  5177  0015D4  0B7F               	andlw	127
  5178  0015D6  6E30               	movwf	(??_scroll_left_to_right+2)& (0+255),c
  5179  0015D8  5030               	movf	??_scroll_left_to_right+2,w,c
  5180  0015DA  0D01               	mullw	1
  5181  0015DC  50F3               	movf	prodl,w,c
  5182  0015DE  262E               	addwf	??_scroll_left_to_right,f,c
  5183  0015E0  50F4               	movf	prodh,w,c
  5184  0015E2  222F               	addwfc	??_scroll_left_to_right+1,f,c
  5185  0015E4  EE20 F032          	lfsr	2,50
  5186  0015E8  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5187  0015EA  26D9               	addwf	fsr2l,f,c
  5188  0015EC  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5189  0015EE  22DA               	addwfc	fsr2h,f,c
  5190  0015F0  50DF               	movf	indf2,w,c
  5191  0015F2  0B7F               	andlw	127
  5192  0015F4  6E31               	movwf	(??_scroll_left_to_right+3)& (0+255),c
  5193  0015F6  5031               	movf	??_scroll_left_to_right+3,w,c
  5194  0015F8  0D01               	mullw	1
  5195  0015FA  50F3               	movf	prodl,w,c
  5196  0015FC  242E               	addwf	??_scroll_left_to_right,w,c
  5197  0015FE  6E10               	movwf	memcpy@d1,c
  5198  001600  50F4               	movf	prodh,w,c
  5199  001602  202F               	addwfc	??_scroll_left_to_right+1,w,c
  5200  001604  6E11               	movwf	memcpy@d1+1,c
  5201  001606  0E01               	movlw	1
  5202  001608  242C               	addwf	scroll_left_to_right@clcd_display_string_details,w,c
  5203  00160A  6E12               	movwf	memcpy@s1,c
  5204  00160C  0E00               	movlw	0
  5205  00160E  202D               	addwfc	scroll_left_to_right@clcd_display_string_details+1,w,c
  5206  001610  6E13               	movwf	memcpy@s1+1,c
  5207  001612  EE20 F032          	lfsr	2,50
  5208  001616  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5209  001618  26D9               	addwf	fsr2l,f,c
  5210  00161A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5211  00161C  22DA               	addwfc	fsr2h,f,c
  5212  00161E  50DF               	movf	indf2,w,c
  5213  001620  0B7F               	andlw	127
  5214  001622  6E32               	movwf	(??_scroll_left_to_right+4)& (0+255),c
  5215  001624  6A33               	clrf	(??_scroll_left_to_right+5)& (0+255),c
  5216  001626  1E32               	comf	??_scroll_left_to_right+4,f,c
  5217  001628  1E33               	comf	??_scroll_left_to_right+5,f,c
  5218  00162A  4A32               	infsnz	??_scroll_left_to_right+4,f,c
  5219  00162C  2A33               	incf	??_scroll_left_to_right+5,f,c
  5220  00162E  EE20 F031          	lfsr	2,49
  5221  001632  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5222  001634  26D9               	addwf	fsr2l,f,c
  5223  001636  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5224  001638  22DA               	addwfc	fsr2h,f,c
  5225  00163A  50DF               	movf	indf2,w,c
  5226  00163C  6E34               	movwf	(??_scroll_left_to_right+6)& (0+255),c
  5227  00163E  5034               	movf	??_scroll_left_to_right+6,w,c
  5228  001640  2432               	addwf	??_scroll_left_to_right+4,w,c
  5229  001642  6E14               	movwf	memcpy@n,c
  5230  001644  0E00               	movlw	0
  5231  001646  2033               	addwfc	??_scroll_left_to_right+5,w,c
  5232  001648  6E15               	movwf	memcpy@n+1,c
  5233  00164A  ECB6  F019         	call	_memcpy	;wreg free
  5234  00164E                     l5935:
  5235                           
  5236                           ;clcd.c: 431: }
  5237                           ;clcd.c: 432: }
  5238                           ;clcd.c: 433: if (clcd_display_string_details->length_count_for_right_scroll <= clcd_dis
      +                          play_string_details->display_char_count) {
  5239  00164E  EE20 F032          	lfsr	2,50
  5240  001652  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5241  001654  26D9               	addwf	fsr2l,f,c
  5242  001656  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5243  001658  22DA               	addwfc	fsr2h,f,c
  5244  00165A  50DF               	movf	indf2,w,c
  5245  00165C  0B7F               	andlw	127
  5246  00165E  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5247  001660  EE20 F031          	lfsr	2,49
  5248  001664  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5249  001666  26D9               	addwf	fsr2l,f,c
  5250  001668  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5251  00166A  22DA               	addwfc	fsr2h,f,c
  5252  00166C  502E               	movf	??_scroll_left_to_right,w,c
  5253  00166E  5CDE               	subwf	postinc2,w,c
  5254  001670  A0D8               	btfss	status,0,c
  5255  001672  D013               	goto	l5939
  5256                           
  5257                           ;clcd.c: 434: clcd_display_string_details->length_count_for_right_scroll++;
  5258  001674  0E01               	movlw	1
  5259  001676  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5260  001678  EE20 F032          	lfsr	2,50
  5261  00167C  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5262  00167E  26D9               	addwf	fsr2l,f,c
  5263  001680  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5264  001682  22DA               	addwfc	fsr2h,f,c
  5265  001684  50DF               	movf	indf2,w,c
  5266  001686  0B7F               	andlw	127
  5267  001688  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5268  00168A  502E               	movf	??_scroll_left_to_right,w,c
  5269  00168C  262F               	addwf	??_scroll_left_to_right+1,f,c
  5270  00168E  50DF               	movf	indf2,w,c
  5271  001690  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5272  001692  0B80               	andlw	-128
  5273  001694  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5274  001696  6EDF               	movwf	indf2,c
  5275                           
  5276                           ;clcd.c: 435: } else if (clcd_display_string_details->length_decount_for_right_scroll < 
      +                          clcd_display_string_details->strlen) {
  5277  001698  0012               	return	
  5278  00169A                     l5939:
  5279  00169A  EE20 F033          	lfsr	2,51
  5280  00169E  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5281  0016A0  26D9               	addwf	fsr2l,f,c
  5282  0016A2  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5283  0016A4  22DA               	addwfc	fsr2h,f,c
  5284  0016A6  50DF               	movf	indf2,w,c
  5285  0016A8  0B7F               	andlw	127
  5286  0016AA  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5287  0016AC  EE20 F029          	lfsr	2,41
  5288  0016B0  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5289  0016B2  26D9               	addwf	fsr2l,f,c
  5290  0016B4  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5291  0016B6  22DA               	addwfc	fsr2h,f,c
  5292  0016B8  50DF               	movf	indf2,w,c
  5293  0016BA  0B7F               	andlw	127
  5294  0016BC  5C2E               	subwf	??_scroll_left_to_right,w,c
  5295  0016BE  B0D8               	btfsc	status,0,c
  5296  0016C0  0012               	return	
  5297                           
  5298                           ;clcd.c: 436: clcd_display_string_details->length_decount_for_right_scroll++;
  5299  0016C2  0E01               	movlw	1
  5300  0016C4  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5301  0016C6  EE20 F033          	lfsr	2,51
  5302  0016CA  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5303  0016CC  26D9               	addwf	fsr2l,f,c
  5304  0016CE  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5305  0016D0  22DA               	addwfc	fsr2h,f,c
  5306  0016D2  50DF               	movf	indf2,w,c
  5307  0016D4  0B7F               	andlw	127
  5308  0016D6  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5309  0016D8  502E               	movf	??_scroll_left_to_right,w,c
  5310  0016DA  262F               	addwf	??_scroll_left_to_right+1,f,c
  5311  0016DC  50DF               	movf	indf2,w,c
  5312  0016DE  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5313  0016E0  0B80               	andlw	-128
  5314  0016E2  182F               	xorwf	(??_scroll_left_to_right+1)& (0+255),w,c
  5315  0016E4  6EDF               	movwf	indf2,c
  5316                           
  5317                           ;clcd.c: 437: if (clcd_display_string_details->length_decount_for_right_scroll >= clcd_d
      +                          isplay_string_details->strlen) {
  5318  0016E6  EE20 F029          	lfsr	2,41
  5319  0016EA  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5320  0016EC  26D9               	addwf	fsr2l,f,c
  5321  0016EE  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5322  0016F0  22DA               	addwfc	fsr2h,f,c
  5323  0016F2  50DF               	movf	indf2,w,c
  5324  0016F4  0B7F               	andlw	127
  5325  0016F6  6E2E               	movwf	??_scroll_left_to_right& (0+255),c
  5326  0016F8  EE20 F033          	lfsr	2,51
  5327  0016FC  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5328  0016FE  26D9               	addwf	fsr2l,f,c
  5329  001700  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5330  001702  22DA               	addwfc	fsr2h,f,c
  5331  001704  50DF               	movf	indf2,w,c
  5332  001706  0B7F               	andlw	127
  5333  001708  6E2F               	movwf	(??_scroll_left_to_right+1)& (0+255),c
  5334  00170A  502E               	movf	??_scroll_left_to_right,w,c
  5335  00170C  5C2F               	subwf	??_scroll_left_to_right+1,w,c
  5336  00170E  A0D8               	btfss	status,0,c
  5337  001710  0012               	return	
  5338                           
  5339                           ;clcd.c: 438: clcd_display_string_details->length_count_for_right_scroll = 0;
  5340  001712  EE20 F032          	lfsr	2,50
  5341  001716  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5342  001718  26D9               	addwf	fsr2l,f,c
  5343  00171A  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5344  00171C  22DA               	addwfc	fsr2h,f,c
  5345  00171E  90DF               	bcf	indf2,0,c
  5346  001720  92DF               	bcf	indf2,1,c
  5347  001722  94DF               	bcf	indf2,2,c
  5348  001724  96DF               	bcf	indf2,3,c
  5349  001726  98DF               	bcf	indf2,4,c
  5350  001728  9ADF               	bcf	indf2,5,c
  5351  00172A  9CDF               	bcf	indf2,6,c
  5352                           
  5353                           ;clcd.c: 439: clcd_display_string_details->length_decount_for_right_scroll = 0;
  5354  00172C  EE20 F033          	lfsr	2,51
  5355  001730  502C               	movf	scroll_left_to_right@clcd_display_string_details,w,c
  5356  001732  26D9               	addwf	fsr2l,f,c
  5357  001734  502D               	movf	scroll_left_to_right@clcd_display_string_details+1,w,c
  5358  001736  22DA               	addwfc	fsr2h,f,c
  5359  001738  90DF               	bcf	indf2,0,c
  5360  00173A  92DF               	bcf	indf2,1,c
  5361  00173C  94DF               	bcf	indf2,2,c
  5362  00173E  96DF               	bcf	indf2,3,c
  5363  001740  98DF               	bcf	indf2,4,c
  5364  001742  9ADF               	bcf	indf2,5,c
  5365  001744  9CDF               	bcf	indf2,6,c
  5366  001746  0012               	return	
  5367  001748                     __end_of_scroll_left_to_right:
  5368                           	opt stack 0
  5369                           tblptru	equ	0xFF8
  5370                           tblptrh	equ	0xFF7
  5371                           tblptrl	equ	0xFF6
  5372                           tablat	equ	0xFF5
  5373                           prodh	equ	0xFF4
  5374                           prodl	equ	0xFF3
  5375                           intcon	equ	0xFF2
  5376                           postinc0	equ	0xFEE
  5377                           wreg	equ	0xFE8
  5378                           indf1	equ	0xFE7
  5379                           postdec1	equ	0xFE5
  5380                           fsr1h	equ	0xFE2
  5381                           fsr1l	equ	0xFE1
  5382                           indf2	equ	0xFDF
  5383                           postinc2	equ	0xFDE
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8
  5387                           
  5388 ;; *************** function _display_text *****************
  5389 ;; Defined at:
  5390 ;;		line 574 in file "clcd.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;		None
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;		None
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  1    wreg      void 
  5397 ;; Registers used:
  5398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;Total ram usage:        0 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    8
  5411 ;; This function calls:
  5412 ;;		_char_enter_mode_left_to_right
  5413 ;;		_set_cursor
  5414 ;;		_write_lcd_cmd
  5415 ;;		_write_str
  5416 ;; This function is called by:
  5417 ;;		_make_display
  5418 ;;		_display_screen
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           	psect	text11
  5423  002D0E                     __ptext11:
  5424                           	opt stack 0
  5425  002D0E                     _display_text:
  5426                           	opt stack 21
  5427                           
  5428                           ;clcd.c: 575: if (print_data_ready == 1) {
  5429                           
  5430                           ;incstack = 0
  5431  002D0E  0100               	movlb	0	; () banked
  5432  002D10  0576               	decf	_print_data_ready& (0+255),w,b
  5433  002D12  0100               	movlb	0	; () banked
  5434  002D14  1177               	iorwf	(_print_data_ready+1)& (0+255),w,b
  5435  002D16  A4D8               	btfss	status,2,c
  5436  002D18  D037               	goto	l6041
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;clcd.c: 576: write_lcd_cmd(0x01);;
  5440  002D1A  0E01               	movlw	1
  5441  002D1C  EC6D  F01B         	call	_write_lcd_cmd
  5442                           
  5443                           ;clcd.c: 577: char_enter_mode_left_to_right();
  5444  002D20  EC05  F01C         	call	_char_enter_mode_left_to_right	;wreg free
  5445                           
  5446                           ;clcd.c: 578: set_cursor(0x80, 0);
  5447  002D24  0E00               	movlw	0
  5448  002D26  6E18               	movwf	set_cursor@col_number,c
  5449  002D28  0E80               	movlw	128
  5450  002D2A  EC89  F01B         	call	_set_cursor
  5451                           
  5452                           ;clcd.c: 579: write_str(lcd_display_array[0]);
  5453  002D2E  0E00               	movlw	low _lcd_display_array
  5454  002D30  6E18               	movwf	write_str@str,c
  5455  002D32  0E01               	movlw	high _lcd_display_array
  5456  002D34  6E19               	movwf	write_str@str+1,c
  5457  002D36  ECF5  F019         	call	_write_str	;wreg free
  5458                           
  5459                           ;clcd.c: 580: set_cursor(0xC0, 0);
  5460  002D3A  0E00               	movlw	0
  5461  002D3C  6E18               	movwf	set_cursor@col_number,c
  5462  002D3E  0EC0               	movlw	192
  5463  002D40  EC89  F01B         	call	_set_cursor
  5464                           
  5465                           ;clcd.c: 581: write_str(lcd_display_array[1]);
  5466  002D44  0E14               	movlw	low (_lcd_display_array+20)
  5467  002D46  6E18               	movwf	write_str@str,c
  5468  002D48  0E01               	movlw	high (_lcd_display_array+20)
  5469  002D4A  6E19               	movwf	write_str@str+1,c
  5470  002D4C  ECF5  F019         	call	_write_str	;wreg free
  5471                           
  5472                           ;clcd.c: 582: set_cursor(0x94, 0);
  5473  002D50  0E00               	movlw	0
  5474  002D52  6E18               	movwf	set_cursor@col_number,c
  5475  002D54  0E94               	movlw	148
  5476  002D56  EC89  F01B         	call	_set_cursor
  5477                           
  5478                           ;clcd.c: 583: write_str(lcd_display_array[2]);
  5479  002D5A  0E28               	movlw	low (_lcd_display_array+40)
  5480  002D5C  6E18               	movwf	write_str@str,c
  5481  002D5E  0E01               	movlw	high (_lcd_display_array+40)
  5482  002D60  6E19               	movwf	write_str@str+1,c
  5483  002D62  ECF5  F019         	call	_write_str	;wreg free
  5484                           
  5485                           ;clcd.c: 584: set_cursor(0xD4, 0);
  5486  002D66  0E00               	movlw	0
  5487  002D68  6E18               	movwf	set_cursor@col_number,c
  5488  002D6A  0ED4               	movlw	212
  5489  002D6C  EC89  F01B         	call	_set_cursor
  5490                           
  5491                           ;clcd.c: 585: write_str(lcd_display_array[3]);
  5492  002D70  0E3C               	movlw	low (_lcd_display_array+60)
  5493  002D72  6E18               	movwf	write_str@str,c
  5494  002D74  0E01               	movlw	high (_lcd_display_array+60)
  5495  002D76  6E19               	movwf	write_str@str+1,c
  5496  002D78  ECF5  F019         	call	_write_str	;wreg free
  5497                           
  5498                           ;clcd.c: 586: print_data_ready = 0;
  5499  002D7C  0E00               	movlw	0
  5500  002D7E  0100               	movlb	0	; () banked
  5501  002D80  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5502  002D82  0E00               	movlw	0
  5503  002D84  6F76               	movwf	_print_data_ready& (0+255),b
  5504                           
  5505                           ;clcd.c: 587: } else {
  5506  002D86  0012               	return	
  5507  002D88                     l6041:
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;clcd.c: 588: print_data_ready = 0;
  5511  002D88  0E00               	movlw	0
  5512  002D8A  0100               	movlb	0	; () banked
  5513  002D8C  6F77               	movwf	(_print_data_ready+1)& (0+255),b
  5514  002D8E  0E00               	movlw	0
  5515  002D90  6F76               	movwf	_print_data_ready& (0+255),b
  5516  002D92  0012               	return	
  5517  002D94                     __end_of_display_text:
  5518                           	opt stack 0
  5519                           tblptru	equ	0xFF8
  5520                           tblptrh	equ	0xFF7
  5521                           tblptrl	equ	0xFF6
  5522                           tablat	equ	0xFF5
  5523                           prodh	equ	0xFF4
  5524                           prodl	equ	0xFF3
  5525                           intcon	equ	0xFF2
  5526                           postinc0	equ	0xFEE
  5527                           wreg	equ	0xFE8
  5528                           indf1	equ	0xFE7
  5529                           postdec1	equ	0xFE5
  5530                           fsr1h	equ	0xFE2
  5531                           fsr1l	equ	0xFE1
  5532                           indf2	equ	0xFDF
  5533                           postinc2	equ	0xFDE
  5534                           fsr2h	equ	0xFDA
  5535                           fsr2l	equ	0xFD9
  5536                           status	equ	0xFD8
  5537                           
  5538 ;; *************** function _set_cursor *****************
  5539 ;; Defined at:
  5540 ;;		line 223 in file "clcd.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;  row_number      1    wreg     unsigned char 
  5543 ;;  col_number      1   23[COMRAM] unsigned char 
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;  row_number      1   24[COMRAM] unsigned char 
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      void 
  5548 ;; Registers used:
  5549 ;;		wreg, status,2, status,0, cstack
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5555 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;Total ram usage:        2 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:    7
  5562 ;; This function calls:
  5563 ;;		_write_lcd_cmd
  5564 ;; This function is called by:
  5565 ;;		_display_text
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text12
  5570  003712                     __ptext12:
  5571                           	opt stack 0
  5572  003712                     _set_cursor:
  5573                           	opt stack 21
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;incstack = 0
  5577                           ;set_cursor@row_number stored from wreg
  5578  003712  6E19               	movwf	set_cursor@row_number,c
  5579                           
  5580                           ;clcd.c: 224: if (col_number > 20) {
  5581  003714  0E14               	movlw	20
  5582  003716  6418               	cpfsgt	set_cursor@col_number,c
  5583  003718  D002               	goto	l5853
  5584                           
  5585                           ;clcd.c: 225: col_number = 0;
  5586  00371A  0E00               	movlw	0
  5587  00371C  6E18               	movwf	set_cursor@col_number,c
  5588  00371E                     l5853:
  5589                           
  5590                           ;clcd.c: 226: }
  5591                           ;clcd.c: 227: write_lcd_cmd(col_number + row_number);
  5592  00371E  5018               	movf	set_cursor@col_number,w,c
  5593  003720  2419               	addwf	set_cursor@row_number,w,c
  5594  003722  EC6D  F01B         	call	_write_lcd_cmd
  5595  003726  0012               	return		;funcret
  5596  003728                     __end_of_set_cursor:
  5597                           	opt stack 0
  5598                           tblptru	equ	0xFF8
  5599                           tblptrh	equ	0xFF7
  5600                           tblptrl	equ	0xFF6
  5601                           tablat	equ	0xFF5
  5602                           prodh	equ	0xFF4
  5603                           prodl	equ	0xFF3
  5604                           intcon	equ	0xFF2
  5605                           postinc0	equ	0xFEE
  5606                           wreg	equ	0xFE8
  5607                           indf1	equ	0xFE7
  5608                           postdec1	equ	0xFE5
  5609                           fsr1h	equ	0xFE2
  5610                           fsr1l	equ	0xFE1
  5611                           indf2	equ	0xFDF
  5612                           postinc2	equ	0xFDE
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function _char_enter_mode_left_to_right *****************
  5618 ;; Defined at:
  5619 ;;		line 264 in file "clcd.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;		None
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  1    wreg      void 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0, cstack
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;Total ram usage:        0 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    7
  5640 ;; This function calls:
  5641 ;;		_write_lcd_cmd
  5642 ;; This function is called by:
  5643 ;;		_display_text
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text13
  5648  00380A                     __ptext13:
  5649                           	opt stack 0
  5650  00380A                     _char_enter_mode_left_to_right:
  5651                           	opt stack 21
  5652                           
  5653                           ;clcd.c: 268: write_lcd_cmd(0x06);
  5654                           
  5655                           ;incstack = 0
  5656  00380A  0E06               	movlw	6
  5657  00380C  EC6D  F01B         	call	_write_lcd_cmd
  5658  003810  0012               	return		;funcret
  5659  003812                     __end_of_char_enter_mode_left_to_right:
  5660                           	opt stack 0
  5661                           tblptru	equ	0xFF8
  5662                           tblptrh	equ	0xFF7
  5663                           tblptrl	equ	0xFF6
  5664                           tablat	equ	0xFF5
  5665                           prodh	equ	0xFF4
  5666                           prodl	equ	0xFF3
  5667                           intcon	equ	0xFF2
  5668                           postinc0	equ	0xFEE
  5669                           wreg	equ	0xFE8
  5670                           indf1	equ	0xFE7
  5671                           postdec1	equ	0xFE5
  5672                           fsr1h	equ	0xFE2
  5673                           fsr1l	equ	0xFE1
  5674                           indf2	equ	0xFDF
  5675                           postinc2	equ	0xFDE
  5676                           fsr2h	equ	0xFDA
  5677                           fsr2l	equ	0xFD9
  5678                           status	equ	0xFD8
  5679                           
  5680 ;; *************** function _copy_data *****************
  5681 ;; Defined at:
  5682 ;;		line 120 in file "clcd.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  clcd_str_dat    2   53[COMRAM] PTR struct .
  5685 ;;		 -> clcd_display_string_details(1080), 
  5686 ;;  data            2   55[COMRAM] PTR struct .
  5687 ;;		 -> cmd_data(49), 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  col2            1    0        unsigned char 
  5690 ;;  row2            1    0        unsigned char 
  5691 ;;  col1            1    0        unsigned char 
  5692 ;;  row1            1    0        unsigned char 
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  1    wreg      void 
  5695 ;; Registers used:
  5696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5702 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5705 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;Total ram usage:        6 bytes
  5707 ;; Hardware stack levels used:    1
  5708 ;; Hardware stack levels required when called:    8
  5709 ;; This function calls:
  5710 ;;		_printf
  5711 ;;		_strcpy
  5712 ;;		_strlen
  5713 ;; This function is called by:
  5714 ;;		_update_string_data
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           	psect	text14
  5719  001E36                     __ptext14:
  5720                           	opt stack 0
  5721  001E36                     _copy_data:
  5722                           	opt stack 19
  5723                           
  5724                           ;clcd.c: 121: char row1, col1, row2, col2;
  5725                           ;clcd.c: 122: clcd_str_data->uid = data->uid;
  5726                           
  5727                           ;incstack = 0
  5728  001E36  C038  FFD9         	movff	copy_data@data,fsr2l
  5729  001E3A  C039  FFDA         	movff	copy_data@data+1,fsr2h
  5730  001E3E  50DF               	movf	indf2,w,c
  5731  001E40  6E3A               	movwf	??_copy_data& (0+255),c
  5732  001E42  C036  FFD9         	movff	copy_data@clcd_str_data,fsr2l
  5733  001E46  C037  FFDA         	movff	copy_data@clcd_str_data+1,fsr2h
  5734  001E4A  50DF               	movf	indf2,w,c
  5735  001E4C  183A               	xorwf	??_copy_data,w,c
  5736  001E4E  0B80               	andlw	-128
  5737  001E50  183A               	xorwf	??_copy_data,w,c
  5738  001E52  6EDF               	movwf	indf2,c
  5739                           
  5740                           ;clcd.c: 123: strcpy(clcd_str_data->string, data->data);
  5741  001E54  0E01               	movlw	1
  5742  001E56  2436               	addwf	copy_data@clcd_str_data,w,c
  5743  001E58  6E10               	movwf	strcpy@to,c
  5744  001E5A  0E00               	movlw	0
  5745  001E5C  2037               	addwfc	copy_data@clcd_str_data+1,w,c
  5746  001E5E  6E11               	movwf	strcpy@to+1,c
  5747  001E60  0E01               	movlw	1
  5748  001E62  2438               	addwf	copy_data@data,w,c
  5749  001E64  6E12               	movwf	strcpy@from,c
  5750  001E66  0E00               	movlw	0
  5751  001E68  2039               	addwfc	copy_data@data+1,w,c
  5752  001E6A  6E13               	movwf	strcpy@from+1,c
  5753  001E6C  EC50  F019         	call	_strcpy	;wreg free
  5754                           
  5755                           ;clcd.c: 124: clcd_str_data->strlen = strlen(clcd_str_data->string);
  5756  001E70  0E01               	movlw	1
  5757  001E72  2436               	addwf	copy_data@clcd_str_data,w,c
  5758  001E74  6E1E               	movwf	strlen@s,c
  5759  001E76  0E00               	movlw	0
  5760  001E78  2037               	addwfc	copy_data@clcd_str_data+1,w,c
  5761  001E7A  6E1F               	movwf	strlen@s+1,c
  5762  001E7C  EC3E  F018         	call	_strlen	;wreg free
  5763  001E80  EE20 F029          	lfsr	2,41
  5764  001E84  5036               	movf	copy_data@clcd_str_data,w,c
  5765  001E86  26D9               	addwf	fsr2l,f,c
  5766  001E88  5037               	movf	copy_data@clcd_str_data+1,w,c
  5767  001E8A  22DA               	addwfc	fsr2h,f,c
  5768  001E8C  50DF               	movf	indf2,w,c
  5769  001E8E  181E               	xorwf	?_strlen,w,c
  5770  001E90  0B80               	andlw	-128
  5771  001E92  181E               	xorwf	?_strlen,w,c
  5772  001E94  6EDF               	movwf	indf2,c
  5773                           
  5774                           ;clcd.c: 125: clcd_str_data->start_row = data->start_row;
  5775  001E96  EE20 F02A          	lfsr	2,42
  5776  001E9A  5038               	movf	copy_data@data,w,c
  5777  001E9C  26D9               	addwf	fsr2l,f,c
  5778  001E9E  5039               	movf	copy_data@data+1,w,c
  5779  001EA0  22DA               	addwfc	fsr2h,f,c
  5780  001EA2  50DF               	movf	indf2,w,c
  5781  001EA4  6E3A               	movwf	??_copy_data& (0+255),c
  5782  001EA6  EE20 F02A          	lfsr	2,42
  5783  001EAA  5036               	movf	copy_data@clcd_str_data,w,c
  5784  001EAC  26D9               	addwf	fsr2l,f,c
  5785  001EAE  5037               	movf	copy_data@clcd_str_data+1,w,c
  5786  001EB0  22DA               	addwfc	fsr2h,f,c
  5787  001EB2  50DF               	movf	indf2,w,c
  5788  001EB4  183A               	xorwf	??_copy_data,w,c
  5789  001EB6  0B80               	andlw	-128
  5790  001EB8  183A               	xorwf	??_copy_data,w,c
  5791  001EBA  6EDF               	movwf	indf2,c
  5792                           
  5793                           ;clcd.c: 126: clcd_str_data->start_col = data->start_col;
  5794  001EBC  EE20 F02B          	lfsr	2,43
  5795  001EC0  5038               	movf	copy_data@data,w,c
  5796  001EC2  26D9               	addwf	fsr2l,f,c
  5797  001EC4  5039               	movf	copy_data@data+1,w,c
  5798  001EC6  22DA               	addwfc	fsr2h,f,c
  5799  001EC8  50DF               	movf	indf2,w,c
  5800  001ECA  6E3A               	movwf	??_copy_data& (0+255),c
  5801  001ECC  EE20 F02B          	lfsr	2,43
  5802  001ED0  5036               	movf	copy_data@clcd_str_data,w,c
  5803  001ED2  26D9               	addwf	fsr2l,f,c
  5804  001ED4  5037               	movf	copy_data@clcd_str_data+1,w,c
  5805  001ED6  22DA               	addwfc	fsr2h,f,c
  5806  001ED8  50DF               	movf	indf2,w,c
  5807  001EDA  183A               	xorwf	??_copy_data,w,c
  5808  001EDC  0B80               	andlw	-128
  5809  001EDE  183A               	xorwf	??_copy_data,w,c
  5810  001EE0  6EDF               	movwf	indf2,c
  5811                           
  5812                           ;clcd.c: 127: clcd_str_data->end_row = data->end_row;
  5813  001EE2  EE20 F02C          	lfsr	2,44
  5814  001EE6  5038               	movf	copy_data@data,w,c
  5815  001EE8  26D9               	addwf	fsr2l,f,c
  5816  001EEA  5039               	movf	copy_data@data+1,w,c
  5817  001EEC  22DA               	addwfc	fsr2h,f,c
  5818  001EEE  50DF               	movf	indf2,w,c
  5819  001EF0  6E3A               	movwf	??_copy_data& (0+255),c
  5820  001EF2  EE20 F02D          	lfsr	2,45
  5821  001EF6  5036               	movf	copy_data@clcd_str_data,w,c
  5822  001EF8  26D9               	addwf	fsr2l,f,c
  5823  001EFA  5037               	movf	copy_data@clcd_str_data+1,w,c
  5824  001EFC  22DA               	addwfc	fsr2h,f,c
  5825  001EFE  50DF               	movf	indf2,w,c
  5826  001F00  183A               	xorwf	??_copy_data,w,c
  5827  001F02  0B80               	andlw	-128
  5828  001F04  183A               	xorwf	??_copy_data,w,c
  5829  001F06  6EDF               	movwf	indf2,c
  5830                           
  5831                           ;clcd.c: 128: clcd_str_data->end_col = data->end_col;
  5832  001F08  EE20 F02D          	lfsr	2,45
  5833  001F0C  5038               	movf	copy_data@data,w,c
  5834  001F0E  26D9               	addwf	fsr2l,f,c
  5835  001F10  5039               	movf	copy_data@data+1,w,c
  5836  001F12  22DA               	addwfc	fsr2h,f,c
  5837  001F14  50DF               	movf	indf2,w,c
  5838  001F16  6E3A               	movwf	??_copy_data& (0+255),c
  5839  001F18  EE20 F02E          	lfsr	2,46
  5840  001F1C  5036               	movf	copy_data@clcd_str_data,w,c
  5841  001F1E  26D9               	addwf	fsr2l,f,c
  5842  001F20  5037               	movf	copy_data@clcd_str_data+1,w,c
  5843  001F22  22DA               	addwfc	fsr2h,f,c
  5844  001F24  50DF               	movf	indf2,w,c
  5845  001F26  183A               	xorwf	??_copy_data,w,c
  5846  001F28  0B80               	andlw	-128
  5847  001F2A  183A               	xorwf	??_copy_data,w,c
  5848  001F2C  6EDF               	movwf	indf2,c
  5849                           
  5850                           ;clcd.c: 129: clcd_str_data->start_point = (clcd_str_data->start_row * clcd_config_data.
      +                          clcd_max_col) + clcd_str_data->start_col;
  5851  001F2E  EE20 F02B          	lfsr	2,43
  5852  001F32  5036               	movf	copy_data@clcd_str_data,w,c
  5853  001F34  26D9               	addwf	fsr2l,f,c
  5854  001F36  5037               	movf	copy_data@clcd_str_data+1,w,c
  5855  001F38  22DA               	addwfc	fsr2h,f,c
  5856  001F3A  50DF               	movf	indf2,w,c
  5857  001F3C  0B7F               	andlw	127
  5858  001F3E  6E3A               	movwf	??_copy_data& (0+255),c
  5859  001F40  EE20 F02A          	lfsr	2,42
  5860  001F44  5036               	movf	copy_data@clcd_str_data,w,c
  5861  001F46  26D9               	addwf	fsr2l,f,c
  5862  001F48  5037               	movf	copy_data@clcd_str_data+1,w,c
  5863  001F4A  22DA               	addwfc	fsr2h,f,c
  5864  001F4C  50DF               	movf	indf2,w,c
  5865  001F4E  0B7F               	andlw	127
  5866  001F50  024B               	mulwf	_clcd_config_data+2,c
  5867  001F52  50F3               	movf	prodl,w,c
  5868  001F54  243A               	addwf	??_copy_data,w,c
  5869  001F56  6E3B               	movwf	(??_copy_data+1)& (0+255),c
  5870  001F58  EE20 F02C          	lfsr	2,44
  5871  001F5C  5036               	movf	copy_data@clcd_str_data,w,c
  5872  001F5E  26D9               	addwf	fsr2l,f,c
  5873  001F60  5037               	movf	copy_data@clcd_str_data+1,w,c
  5874  001F62  22DA               	addwfc	fsr2h,f,c
  5875  001F64  50DF               	movf	indf2,w,c
  5876  001F66  183B               	xorwf	??_copy_data+1,w,c
  5877  001F68  0B80               	andlw	-128
  5878  001F6A  183B               	xorwf	??_copy_data+1,w,c
  5879  001F6C  6EDF               	movwf	indf2,c
  5880                           
  5881                           ;clcd.c: 130: clcd_str_data->end_point = (clcd_str_data->end_row * clcd_config_data.clcd
      +                          _max_col) + clcd_str_data->end_col;
  5882  001F6E  EE20 F02E          	lfsr	2,46
  5883  001F72  5036               	movf	copy_data@clcd_str_data,w,c
  5884  001F74  26D9               	addwf	fsr2l,f,c
  5885  001F76  5037               	movf	copy_data@clcd_str_data+1,w,c
  5886  001F78  22DA               	addwfc	fsr2h,f,c
  5887  001F7A  50DF               	movf	indf2,w,c
  5888  001F7C  0B7F               	andlw	127
  5889  001F7E  6E3A               	movwf	??_copy_data& (0+255),c
  5890  001F80  EE20 F02D          	lfsr	2,45
  5891  001F84  5036               	movf	copy_data@clcd_str_data,w,c
  5892  001F86  26D9               	addwf	fsr2l,f,c
  5893  001F88  5037               	movf	copy_data@clcd_str_data+1,w,c
  5894  001F8A  22DA               	addwfc	fsr2h,f,c
  5895  001F8C  50DF               	movf	indf2,w,c
  5896  001F8E  0B7F               	andlw	127
  5897  001F90  024B               	mulwf	_clcd_config_data+2,c
  5898  001F92  50F3               	movf	prodl,w,c
  5899  001F94  243A               	addwf	??_copy_data,w,c
  5900  001F96  6E3B               	movwf	(??_copy_data+1)& (0+255),c
  5901  001F98  EE20 F02F          	lfsr	2,47
  5902  001F9C  5036               	movf	copy_data@clcd_str_data,w,c
  5903  001F9E  26D9               	addwf	fsr2l,f,c
  5904  001FA0  5037               	movf	copy_data@clcd_str_data+1,w,c
  5905  001FA2  22DA               	addwfc	fsr2h,f,c
  5906  001FA4  50DF               	movf	indf2,w,c
  5907  001FA6  183B               	xorwf	??_copy_data+1,w,c
  5908  001FA8  0B80               	andlw	-128
  5909  001FAA  183B               	xorwf	??_copy_data+1,w,c
  5910  001FAC  6EDF               	movwf	indf2,c
  5911                           
  5912                           ;clcd.c: 131: clcd_str_data->direction = data->scroll;
  5913  001FAE  EE20 F02F          	lfsr	2,47
  5914  001FB2  5038               	movf	copy_data@data,w,c
  5915  001FB4  26D9               	addwf	fsr2l,f,c
  5916  001FB6  5039               	movf	copy_data@data+1,w,c
  5917  001FB8  22DA               	addwfc	fsr2h,f,c
  5918  001FBA  50DF               	movf	indf2,w,c
  5919  001FBC  6E3A               	movwf	??_copy_data& (0+255),c
  5920  001FBE  EE20 F030          	lfsr	2,48
  5921  001FC2  5036               	movf	copy_data@clcd_str_data,w,c
  5922  001FC4  26D9               	addwf	fsr2l,f,c
  5923  001FC6  5037               	movf	copy_data@clcd_str_data+1,w,c
  5924  001FC8  22DA               	addwfc	fsr2h,f,c
  5925  001FCA  50DF               	movf	indf2,w,c
  5926  001FCC  183A               	xorwf	??_copy_data,w,c
  5927  001FCE  0BF8               	andlw	-8
  5928  001FD0  183A               	xorwf	??_copy_data,w,c
  5929  001FD2  6EDF               	movwf	indf2,c
  5930                           
  5931                           ;clcd.c: 132: clcd_str_data->display_char_count = (clcd_str_data->end_point - clcd_str_d
      +                          ata->start_point)+1;
  5932  001FD4  EE20 F031          	lfsr	2,49
  5933  001FD8  5036               	movf	copy_data@clcd_str_data,w,c
  5934  001FDA  26D9               	addwf	fsr2l,f,c
  5935  001FDC  5037               	movf	copy_data@clcd_str_data+1,w,c
  5936  001FDE  22DA               	addwfc	fsr2h,f,c
  5937  001FE0  EE10 F02F          	lfsr	1,47
  5938  001FE4  5036               	movf	copy_data@clcd_str_data,w,c
  5939  001FE6  26E1               	addwf	fsr1l,f,c
  5940  001FE8  5037               	movf	copy_data@clcd_str_data+1,w,c
  5941  001FEA  22E2               	addwfc	fsr1h,f,c
  5942  001FEC  50E7               	movf	indf1,w,c
  5943  001FEE  0B7F               	andlw	127
  5944  001FF0  6E3A               	movwf	??_copy_data& (0+255),c
  5945  001FF2  EE10 F02C          	lfsr	1,44
  5946  001FF6  5036               	movf	copy_data@clcd_str_data,w,c
  5947  001FF8  26E1               	addwf	fsr1l,f,c
  5948  001FFA  5037               	movf	copy_data@clcd_str_data+1,w,c
  5949  001FFC  22E2               	addwfc	fsr1h,f,c
  5950  001FFE  50E7               	movf	indf1,w,c
  5951  002000  0B7F               	andlw	127
  5952  002002  0800               	sublw	0
  5953  002004  243A               	addwf	??_copy_data,w,c
  5954  002006  6E3B               	movwf	(??_copy_data+1)& (0+255),c
  5955  002008  283B               	incf	??_copy_data+1,w,c
  5956  00200A  6EDF               	movwf	indf2,c
  5957                           
  5958                           ;clcd.c: 133: printf("display_char_count = %d\r\n", clcd_str_data->display_char_count);
  5959  00200C  0E4C               	movlw	low STR_6
  5960  00200E  6E24               	movwf	printf@f,c
  5961  002010  0EFD               	movlw	high STR_6
  5962  002012  6E25               	movwf	printf@f+1,c
  5963  002014  EE20 F031          	lfsr	2,49
  5964  002018  5036               	movf	copy_data@clcd_str_data,w,c
  5965  00201A  26D9               	addwf	fsr2l,f,c
  5966  00201C  5037               	movf	copy_data@clcd_str_data+1,w,c
  5967  00201E  22DA               	addwfc	fsr2h,f,c
  5968  002020  50DF               	movf	indf2,w,c
  5969  002022  6E3A               	movwf	??_copy_data& (0+255),c
  5970  002024  503A               	movf	??_copy_data,w,c
  5971  002026  6E26               	movwf	?_printf+2,c
  5972  002028  6A27               	clrf	?_printf+3,c
  5973  00202A  EC09  F011         	call	_printf	;wreg free
  5974  00202E  0012               	return		;funcret
  5975  002030                     __end_of_copy_data:
  5976                           	opt stack 0
  5977                           tblptru	equ	0xFF8
  5978                           tblptrh	equ	0xFF7
  5979                           tblptrl	equ	0xFF6
  5980                           tablat	equ	0xFF5
  5981                           prodh	equ	0xFF4
  5982                           prodl	equ	0xFF3
  5983                           intcon	equ	0xFF2
  5984                           postinc0	equ	0xFEE
  5985                           wreg	equ	0xFE8
  5986                           indf1	equ	0xFE7
  5987                           postdec1	equ	0xFE5
  5988                           fsr1h	equ	0xFE2
  5989                           fsr1l	equ	0xFE1
  5990                           indf2	equ	0xFDF
  5991                           postinc2	equ	0xFDE
  5992                           fsr2h	equ	0xFDA
  5993                           fsr2l	equ	0xFD9
  5994                           status	equ	0xFD8
  5995                           
  5996 ;; *************** function _conflict_check *****************
  5997 ;; Defined at:
  5998 ;;		line 136 in file "clcd.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;  exist_uid_id    1    wreg     unsigned char 
  6001 ;;  new_start_po    1   53[COMRAM] unsigned char 
  6002 ;;  new_end_poin    1   54[COMRAM] unsigned char 
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  exist_uid_id    1   58[COMRAM] unsigned char 
  6005 ;;  i               2   60[COMRAM] int 
  6006 ;;  conflict        1   59[COMRAM] unsigned char 
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  1    wreg      unsigned char 
  6009 ;; Registers used:
  6010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6016 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6017 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;Total ram usage:        9 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; Hardware stack levels required when called:    8
  6023 ;; This function calls:
  6024 ;;		___wmul
  6025 ;;		_printf
  6026 ;; This function is called by:
  6027 ;;		_update_string_data
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text15
  6032  001748                     __ptext15:
  6033                           	opt stack 0
  6034  001748                     _conflict_check:
  6035                           	opt stack 19
  6036                           
  6037                           ;incstack = 0
  6038                           ;conflict_check@exist_uid_idx stored from wreg
  6039  001748  6E3B               	movwf	conflict_check@exist_uid_idx,c
  6040                           
  6041                           ;clcd.c: 137: int i = 0;
  6042  00174A  0E00               	movlw	0
  6043  00174C  6E3E               	movwf	conflict_check@i+1,c
  6044  00174E  0E00               	movlw	0
  6045  001750  6E3D               	movwf	conflict_check@i,c
  6046                           
  6047                           ;clcd.c: 138: bool conflict = 0;
  6048  001752  0E00               	movlw	0
  6049  001754  6E3C               	movwf	conflict_check@conflict,c
  6050                           
  6051                           ;clcd.c: 140: for (i = 0; i < clcd_config_data.clcd_max_display_string;) {
  6052  001756  0E00               	movlw	0
  6053  001758  6E3E               	movwf	conflict_check@i+1,c
  6054  00175A  0E00               	movlw	0
  6055  00175C  6E3D               	movwf	conflict_check@i,c
  6056  00175E  D12D               	goto	l6159
  6057  001760                     l6113:
  6058                           
  6059                           ;clcd.c: 141: if (exist_uid_idx != i && clcd_display_string_details[i].uid != 0) {
  6060  001760  503B               	movf	conflict_check@exist_uid_idx,w,c
  6061  001762  6E38               	movwf	??_conflict_check& (0+255),c
  6062  001764  6A39               	clrf	(??_conflict_check+1)& (0+255),c
  6063  001766  503D               	movf	conflict_check@i,w,c
  6064  001768  1838               	xorwf	??_conflict_check,w,c
  6065  00176A  E104               	bnz	u5960
  6066  00176C  503E               	movf	conflict_check@i+1,w,c
  6067  00176E  1839               	xorwf	??_conflict_check+1,w,c
  6068  001770  B4D8               	btfsc	status,2,c
  6069  001772  D121               	goto	l6157
  6070  001774                     u5960:
  6071  001774  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6072  001778  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6073  00177C  0E00               	movlw	0
  6074  00177E  6E1B               	movwf	___wmul@multiplicand+1,c
  6075  001780  0E36               	movlw	54
  6076  001782  6E1A               	movwf	___wmul@multiplicand,c
  6077  001784  ECD8  F01A         	call	___wmul	;wreg free
  6078  001788  0E96               	movlw	low _clcd_display_string_details
  6079  00178A  2418               	addwf	?___wmul,w,c
  6080  00178C  6ED9               	movwf	fsr2l,c
  6081  00178E  0E02               	movlw	high _clcd_display_string_details
  6082  001790  2019               	addwfc	?___wmul+1,w,c
  6083  001792  6EDA               	movwf	fsr2h,c
  6084  001794  50DF               	movf	223,w,c
  6085  001796  0B7F               	andlw	127
  6086  001798  0900               	iorlw	0
  6087  00179A  B4D8               	btfsc	status,2,c
  6088  00179C  D10C               	goto	l6157
  6089                           
  6090                           ;clcd.c: 142: if (new_start_point >= clcd_display_string_details[i].start_point && new_s
      +                          tart_point <= clcd_display_string_details[i].end_point) {
  6091  00179E  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6092  0017A2  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6093  0017A6  0E00               	movlw	0
  6094  0017A8  6E1B               	movwf	___wmul@multiplicand+1,c
  6095  0017AA  0E36               	movlw	54
  6096  0017AC  6E1A               	movwf	___wmul@multiplicand,c
  6097  0017AE  ECD8  F01A         	call	___wmul	;wreg free
  6098  0017B2  0E2C               	movlw	44
  6099  0017B4  2618               	addwf	?___wmul,f,c
  6100  0017B6  0E00               	movlw	0
  6101  0017B8  2219               	addwfc	?___wmul+1,f,c
  6102  0017BA  0E96               	movlw	low _clcd_display_string_details
  6103  0017BC  2418               	addwf	?___wmul,w,c
  6104  0017BE  6ED9               	movwf	fsr2l,c
  6105  0017C0  0E02               	movlw	high _clcd_display_string_details
  6106  0017C2  2019               	addwfc	?___wmul+1,w,c
  6107  0017C4  6EDA               	movwf	fsr2h,c
  6108  0017C6  50DF               	movf	223,w,c
  6109  0017C8  0B7F               	andlw	127
  6110  0017CA  6E38               	movwf	??_conflict_check& (0+255),c
  6111  0017CC  5038               	movf	??_conflict_check,w,c
  6112  0017CE  5C36               	subwf	conflict_check@new_start_point,w,c
  6113  0017D0  A0D8               	btfss	status,0,c
  6114  0017D2  D040               	goto	l6131
  6115  0017D4  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6116  0017D8  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6117  0017DC  0E00               	movlw	0
  6118  0017DE  6E1B               	movwf	___wmul@multiplicand+1,c
  6119  0017E0  0E36               	movlw	54
  6120  0017E2  6E1A               	movwf	___wmul@multiplicand,c
  6121  0017E4  ECD8  F01A         	call	___wmul	;wreg free
  6122  0017E8  0E2F               	movlw	47
  6123  0017EA  2618               	addwf	?___wmul,f,c
  6124  0017EC  0E00               	movlw	0
  6125  0017EE  2219               	addwfc	?___wmul+1,f,c
  6126  0017F0  0E96               	movlw	low _clcd_display_string_details
  6127  0017F2  2418               	addwf	?___wmul,w,c
  6128  0017F4  6ED9               	movwf	fsr2l,c
  6129  0017F6  0E02               	movlw	high _clcd_display_string_details
  6130  0017F8  2019               	addwfc	?___wmul+1,w,c
  6131  0017FA  6EDA               	movwf	fsr2h,c
  6132  0017FC  50DF               	movf	223,w,c
  6133  0017FE  0B7F               	andlw	127
  6134  001800  6E38               	movwf	??_conflict_check& (0+255),c
  6135  001802  5036               	movf	conflict_check@new_start_point,w,c
  6136  001804  5C38               	subwf	??_conflict_check,w,c
  6137  001806  A0D8               	btfss	status,0,c
  6138  001808  D025               	goto	l6131
  6139                           
  6140                           ;clcd.c: 143: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6141  00180A  5041               	movf	_conflict_data_count,w,c
  6142  00180C  0D01               	mullw	1
  6143  00180E  0EB7               	movlw	low _conflict_arr
  6144  001810  24F3               	addwf	prodl,w,c
  6145  001812  6ED9               	movwf	fsr2l,c
  6146  001814  0E00               	movlw	high _conflict_arr
  6147  001816  20F4               	addwfc	prodh,w,c
  6148  001818  6EDA               	movwf	fsr2h,c
  6149  00181A  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6150  00181E  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6151  001822  0E00               	movlw	0
  6152  001824  6E1B               	movwf	___wmul@multiplicand+1,c
  6153  001826  0E36               	movlw	54
  6154  001828  6E1A               	movwf	___wmul@multiplicand,c
  6155  00182A  ECD8  F01A         	call	___wmul	;wreg free
  6156  00182E  0E96               	movlw	low _clcd_display_string_details
  6157  001830  2418               	addwf	?___wmul,w,c
  6158  001832  6EE1               	movwf	fsr1l,c
  6159  001834  0E02               	movlw	high _clcd_display_string_details
  6160  001836  2019               	addwfc	?___wmul+1,w,c
  6161  001838  6EE2               	movwf	fsr1h,c
  6162  00183A  50E7               	movf	231,w,c
  6163  00183C  0B7F               	andlw	127
  6164  00183E  6EDF               	movwf	indf2,c
  6165  001840  2A41               	incf	_conflict_data_count,f,c
  6166                           
  6167                           ;clcd.c: 144: i++;
  6168  001842  4A3D               	infsnz	conflict_check@i,f,c
  6169  001844  2A3E               	incf	conflict_check@i+1,f,c
  6170                           
  6171                           ;clcd.c: 145: printf("ex_sp <= new_sp <=ex_ep\r\n");
  6172  001846  0E80               	movlw	low STR_7
  6173  001848  6E24               	movwf	printf@f,c
  6174  00184A  0EFD               	movlw	high STR_7
  6175  00184C  6E25               	movwf	printf@f+1,c
  6176  00184E  EC09  F011         	call	_printf	;wreg free
  6177  001852  D059               	goto	l6143
  6178  001854                     l6131:
  6179                           
  6180                           ;clcd.c: 148: }
  6181                           ;clcd.c: 149: if (new_end_point >= clcd_display_string_details[i].start_point && new_end
      +                          _point <= clcd_display_string_details[i].end_point) {
  6182  001854  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6183  001858  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6184  00185C  0E00               	movlw	0
  6185  00185E  6E1B               	movwf	___wmul@multiplicand+1,c
  6186  001860  0E36               	movlw	54
  6187  001862  6E1A               	movwf	___wmul@multiplicand,c
  6188  001864  ECD8  F01A         	call	___wmul	;wreg free
  6189  001868  0E2C               	movlw	44
  6190  00186A  2618               	addwf	?___wmul,f,c
  6191  00186C  0E00               	movlw	0
  6192  00186E  2219               	addwfc	?___wmul+1,f,c
  6193  001870  0E96               	movlw	low _clcd_display_string_details
  6194  001872  2418               	addwf	?___wmul,w,c
  6195  001874  6ED9               	movwf	fsr2l,c
  6196  001876  0E02               	movlw	high _clcd_display_string_details
  6197  001878  2019               	addwfc	?___wmul+1,w,c
  6198  00187A  6EDA               	movwf	fsr2h,c
  6199  00187C  50DF               	movf	223,w,c
  6200  00187E  0B7F               	andlw	127
  6201  001880  6E38               	movwf	??_conflict_check& (0+255),c
  6202  001882  5038               	movf	??_conflict_check,w,c
  6203  001884  5C37               	subwf	conflict_check@new_end_point,w,c
  6204  001886  A0D8               	btfss	status,0,c
  6205  001888  D041               	goto	l6145
  6206  00188A  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6207  00188E  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6208  001892  0E00               	movlw	0
  6209  001894  6E1B               	movwf	___wmul@multiplicand+1,c
  6210  001896  0E36               	movlw	54
  6211  001898  6E1A               	movwf	___wmul@multiplicand,c
  6212  00189A  ECD8  F01A         	call	___wmul	;wreg free
  6213  00189E  0E2F               	movlw	47
  6214  0018A0  2618               	addwf	?___wmul,f,c
  6215  0018A2  0E00               	movlw	0
  6216  0018A4  2219               	addwfc	?___wmul+1,f,c
  6217  0018A6  0E96               	movlw	low _clcd_display_string_details
  6218  0018A8  2418               	addwf	?___wmul,w,c
  6219  0018AA  6ED9               	movwf	fsr2l,c
  6220  0018AC  0E02               	movlw	high _clcd_display_string_details
  6221  0018AE  2019               	addwfc	?___wmul+1,w,c
  6222  0018B0  6EDA               	movwf	fsr2h,c
  6223  0018B2  50DF               	movf	223,w,c
  6224  0018B4  0B7F               	andlw	127
  6225  0018B6  6E38               	movwf	??_conflict_check& (0+255),c
  6226  0018B8  5037               	movf	conflict_check@new_end_point,w,c
  6227  0018BA  5C38               	subwf	??_conflict_check,w,c
  6228  0018BC  A0D8               	btfss	status,0,c
  6229  0018BE  D026               	goto	l6145
  6230                           
  6231                           ;clcd.c: 150: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6232  0018C0  5041               	movf	_conflict_data_count,w,c
  6233  0018C2  0D01               	mullw	1
  6234  0018C4  0EB7               	movlw	low _conflict_arr
  6235  0018C6  24F3               	addwf	prodl,w,c
  6236  0018C8  6ED9               	movwf	fsr2l,c
  6237  0018CA  0E00               	movlw	high _conflict_arr
  6238  0018CC  20F4               	addwfc	prodh,w,c
  6239  0018CE  6EDA               	movwf	fsr2h,c
  6240  0018D0  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6241  0018D4  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6242  0018D8  0E00               	movlw	0
  6243  0018DA  6E1B               	movwf	___wmul@multiplicand+1,c
  6244  0018DC  0E36               	movlw	54
  6245  0018DE  6E1A               	movwf	___wmul@multiplicand,c
  6246  0018E0  ECD8  F01A         	call	___wmul	;wreg free
  6247  0018E4  0E96               	movlw	low _clcd_display_string_details
  6248  0018E6  2418               	addwf	?___wmul,w,c
  6249  0018E8  6EE1               	movwf	fsr1l,c
  6250  0018EA  0E02               	movlw	high _clcd_display_string_details
  6251  0018EC  2019               	addwfc	?___wmul+1,w,c
  6252  0018EE  6EE2               	movwf	fsr1h,c
  6253  0018F0  50E7               	movf	231,w,c
  6254  0018F2  0B7F               	andlw	127
  6255  0018F4  6EDF               	movwf	indf2,c
  6256  0018F6  2A41               	incf	_conflict_data_count,f,c
  6257                           
  6258                           ;clcd.c: 151: printf("ex_sp <= new_ep <=ex_ep\r\n");
  6259  0018F8  0E66               	movlw	low STR_8
  6260  0018FA  6E24               	movwf	printf@f,c
  6261  0018FC  0EFD               	movlw	high STR_8
  6262  0018FE  6E25               	movwf	printf@f+1,c
  6263  001900  EC09  F011         	call	_printf	;wreg free
  6264  001904  D055               	goto	l6153
  6265  001906                     l6143:
  6266                           
  6267                           ;clcd.c: 153: conflict = 1;
  6268  001906  0E01               	movlw	1
  6269  001908  6E3C               	movwf	conflict_check@conflict,c
  6270                           
  6271                           ;clcd.c: 154: continue;
  6272  00190A  D057               	goto	l6159
  6273  00190C                     l6145:
  6274                           
  6275                           ;clcd.c: 155: }
  6276                           ;clcd.c: 156: if (new_start_point <= clcd_display_string_details[i].start_point && new_e
      +                          nd_point >= clcd_display_string_details[i].end_point) {
  6277  00190C  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6278  001910  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6279  001914  0E00               	movlw	0
  6280  001916  6E1B               	movwf	___wmul@multiplicand+1,c
  6281  001918  0E36               	movlw	54
  6282  00191A  6E1A               	movwf	___wmul@multiplicand,c
  6283  00191C  ECD8  F01A         	call	___wmul	;wreg free
  6284  001920  0E2C               	movlw	44
  6285  001922  2618               	addwf	?___wmul,f,c
  6286  001924  0E00               	movlw	0
  6287  001926  2219               	addwfc	?___wmul+1,f,c
  6288  001928  0E96               	movlw	low _clcd_display_string_details
  6289  00192A  2418               	addwf	?___wmul,w,c
  6290  00192C  6ED9               	movwf	fsr2l,c
  6291  00192E  0E02               	movlw	high _clcd_display_string_details
  6292  001930  2019               	addwfc	?___wmul+1,w,c
  6293  001932  6EDA               	movwf	fsr2h,c
  6294  001934  50DF               	movf	223,w,c
  6295  001936  0B7F               	andlw	127
  6296  001938  6E38               	movwf	??_conflict_check& (0+255),c
  6297  00193A  5036               	movf	conflict_check@new_start_point,w,c
  6298  00193C  5C38               	subwf	??_conflict_check,w,c
  6299  00193E  A0D8               	btfss	status,0,c
  6300  001940  D03A               	goto	l6157
  6301  001942  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6302  001946  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6303  00194A  0E00               	movlw	0
  6304  00194C  6E1B               	movwf	___wmul@multiplicand+1,c
  6305  00194E  0E36               	movlw	54
  6306  001950  6E1A               	movwf	___wmul@multiplicand,c
  6307  001952  ECD8  F01A         	call	___wmul	;wreg free
  6308  001956  0E2F               	movlw	47
  6309  001958  2618               	addwf	?___wmul,f,c
  6310  00195A  0E00               	movlw	0
  6311  00195C  2219               	addwfc	?___wmul+1,f,c
  6312  00195E  0E96               	movlw	low _clcd_display_string_details
  6313  001960  2418               	addwf	?___wmul,w,c
  6314  001962  6ED9               	movwf	fsr2l,c
  6315  001964  0E02               	movlw	high _clcd_display_string_details
  6316  001966  2019               	addwfc	?___wmul+1,w,c
  6317  001968  6EDA               	movwf	fsr2h,c
  6318  00196A  50DF               	movf	223,w,c
  6319  00196C  0B7F               	andlw	127
  6320  00196E  6E38               	movwf	??_conflict_check& (0+255),c
  6321  001970  5038               	movf	??_conflict_check,w,c
  6322  001972  5C37               	subwf	conflict_check@new_end_point,w,c
  6323  001974  A0D8               	btfss	status,0,c
  6324  001976  D01F               	goto	l6157
  6325                           
  6326                           ;clcd.c: 157: conflict_arr[conflict_data_count++] = clcd_display_string_details[i].uid;
  6327  001978  5041               	movf	_conflict_data_count,w,c
  6328  00197A  0D01               	mullw	1
  6329  00197C  0EB7               	movlw	low _conflict_arr
  6330  00197E  24F3               	addwf	prodl,w,c
  6331  001980  6ED9               	movwf	fsr2l,c
  6332  001982  0E00               	movlw	high _conflict_arr
  6333  001984  20F4               	addwfc	prodh,w,c
  6334  001986  6EDA               	movwf	fsr2h,c
  6335  001988  C03D  F018         	movff	conflict_check@i,___wmul@multiplier
  6336  00198C  C03E  F019         	movff	conflict_check@i+1,___wmul@multiplier+1
  6337  001990  0E00               	movlw	0
  6338  001992  6E1B               	movwf	___wmul@multiplicand+1,c
  6339  001994  0E36               	movlw	54
  6340  001996  6E1A               	movwf	___wmul@multiplicand,c
  6341  001998  ECD8  F01A         	call	___wmul	;wreg free
  6342  00199C  0E96               	movlw	low _clcd_display_string_details
  6343  00199E  2418               	addwf	?___wmul,w,c
  6344  0019A0  6EE1               	movwf	fsr1l,c
  6345  0019A2  0E02               	movlw	high _clcd_display_string_details
  6346  0019A4  2019               	addwfc	?___wmul+1,w,c
  6347  0019A6  6EE2               	movwf	fsr1h,c
  6348  0019A8  50E7               	movf	231,w,c
  6349  0019AA  0B7F               	andlw	127
  6350  0019AC  6EDF               	movwf	indf2,c
  6351  0019AE  2A41               	incf	_conflict_data_count,f,c
  6352  0019B0                     l6153:
  6353                           
  6354                           ;clcd.c: 158: i++;
  6355  0019B0  4A3D               	infsnz	conflict_check@i,f,c
  6356  0019B2  2A3E               	incf	conflict_check@i+1,f,c
  6357  0019B4  D7A8               	goto	l6143
  6358  0019B6                     l6157:
  6359                           
  6360                           ;clcd.c: 161: }
  6361                           ;clcd.c: 162: }
  6362                           ;clcd.c: 163: i++;
  6363  0019B6  4A3D               	infsnz	conflict_check@i,f,c
  6364  0019B8  2A3E               	incf	conflict_check@i+1,f,c
  6365  0019BA                     l6159:
  6366  0019BA  504D               	movf	_clcd_config_data+4,w,c
  6367  0019BC  6E38               	movwf	??_conflict_check& (0+255),c
  6368  0019BE  6A39               	clrf	(??_conflict_check+1)& (0+255),c
  6369  0019C0  5038               	movf	??_conflict_check,w,c
  6370  0019C2  5C3D               	subwf	conflict_check@i,w,c
  6371  0019C4  503E               	movf	conflict_check@i+1,w,c
  6372  0019C6  0A80               	xorlw	128
  6373  0019C8  6E3A               	movwf	(??_conflict_check+2)& (0+255),c
  6374  0019CA  5039               	movf	??_conflict_check+1,w,c
  6375  0019CC  0A80               	xorlw	128
  6376  0019CE  583A               	subwfb	(??_conflict_check+2)& (0+255),w,c
  6377  0019D0  A0D8               	btfss	status,0,c
  6378  0019D2  D6C6               	goto	l6113
  6379                           
  6380                           ;clcd.c: 164: }
  6381                           ;clcd.c: 172: return conflict;
  6382  0019D4  503C               	movf	conflict_check@conflict,w,c
  6383  0019D6  0012               	return	
  6384  0019D8                     __end_of_conflict_check:
  6385                           	opt stack 0
  6386                           tblptru	equ	0xFF8
  6387                           tblptrh	equ	0xFF7
  6388                           tblptrl	equ	0xFF6
  6389                           tablat	equ	0xFF5
  6390                           prodh	equ	0xFF4
  6391                           prodl	equ	0xFF3
  6392                           intcon	equ	0xFF2
  6393                           postinc0	equ	0xFEE
  6394                           wreg	equ	0xFE8
  6395                           indf1	equ	0xFE7
  6396                           postdec1	equ	0xFE5
  6397                           fsr1h	equ	0xFE2
  6398                           fsr1l	equ	0xFE1
  6399                           indf2	equ	0xFDF
  6400                           postinc2	equ	0xFDE
  6401                           fsr2h	equ	0xFDA
  6402                           fsr2l	equ	0xFD9
  6403                           status	equ	0xFD8
  6404                           
  6405 ;; *************** function _strcmp *****************
  6406 ;; Defined at:
  6407 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;  s1              2   15[COMRAM] PTR const unsigned char 
  6410 ;;		 -> CMD(15), 
  6411 ;;  s2              2   17[COMRAM] PTR const unsigned char 
  6412 ;;		 -> STR_104(11), STR_101(11), STR_98(12), STR_95(10), 
  6413 ;;		 -> STR_90(10), STR_87(9), STR_83(8), STR_79(8), 
  6414 ;;		 -> STR_75(10), STR_73(4), 
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;  r               1   20[COMRAM] char 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  2   15[COMRAM] int 
  6419 ;; Registers used:
  6420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6426 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;Total ram usage:        6 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    5
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		_reply_to_host
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           	psect	text16
  6441  0031C2                     __ptext16:
  6442                           	opt stack 0
  6443  0031C2                     _strcmp:
  6444                           	opt stack 23
  6445                           
  6446                           ;incstack = 0
  6447  0031C2  D004               	goto	l6599
  6448  0031C4                     l6597:
  6449  0031C4  4A10               	infsnz	strcmp@s1,f,c
  6450  0031C6  2A11               	incf	strcmp@s1+1,f,c
  6451  0031C8  4A12               	infsnz	strcmp@s2,f,c
  6452  0031CA  2A13               	incf	strcmp@s2+1,f,c
  6453  0031CC                     l6599:
  6454  0031CC  C010  FFD9         	movff	strcmp@s1,fsr2l
  6455  0031D0  C011  FFDA         	movff	strcmp@s1+1,fsr2h
  6456  0031D4  50DF               	movf	indf2,w,c
  6457  0031D6  6E14               	movwf	??_strcmp& (0+255),c
  6458  0031D8  C012  FFF6         	movff	strcmp@s2,tblptrl
  6459  0031DC  C013  FFF7         	movff	strcmp@s2+1,tblptrh
  6460  0031E0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6461  0031E0  6AF8               	clrf	tblptru,c
  6462  0031E2                     	endif
  6463  0031E2                     	if	0	;tblptru may be non-zero
  6464  0031E2                     	endif
  6465  0031E2  0008               	tblrd		*
  6466  0031E4  50F5               	movf	tablat,w,c
  6467  0031E6  0800               	sublw	0
  6468  0031E8  2414               	addwf	??_strcmp,w,c
  6469  0031EA  6E15               	movwf	strcmp@r,c
  6470  0031EC  5015               	movf	strcmp@r,w,c
  6471  0031EE  A4D8               	btfss	status,2,c
  6472  0031F0  D007               	goto	l6603
  6473  0031F2  C010  FFD9         	movff	strcmp@s1,fsr2l
  6474  0031F6  C011  FFDA         	movff	strcmp@s1+1,fsr2h
  6475  0031FA  50DF               	movf	indf2,w,c
  6476  0031FC  A4D8               	btfss	status,2,c
  6477  0031FE  D7E2               	goto	l6597
  6478  003200                     l6603:
  6479  003200  5015               	movf	strcmp@r,w,c
  6480  003202  6E10               	movwf	?_strcmp,c
  6481  003204  6A11               	clrf	?_strcmp+1,c
  6482  003206  BE10               	btfsc	?_strcmp,7,c
  6483  003208  0611               	decf	?_strcmp+1,f,c
  6484  00320A  0012               	return	
  6485  00320C                     __end_of_strcmp:
  6486                           	opt stack 0
  6487                           tblptru	equ	0xFF8
  6488                           tblptrh	equ	0xFF7
  6489                           tblptrl	equ	0xFF6
  6490                           tablat	equ	0xFF5
  6491                           prodh	equ	0xFF4
  6492                           prodl	equ	0xFF3
  6493                           intcon	equ	0xFF2
  6494                           postinc0	equ	0xFEE
  6495                           wreg	equ	0xFE8
  6496                           indf1	equ	0xFE7
  6497                           postdec1	equ	0xFE5
  6498                           fsr1h	equ	0xFE2
  6499                           fsr1l	equ	0xFE1
  6500                           indf2	equ	0xFDF
  6501                           postinc2	equ	0xFDE
  6502                           fsr2h	equ	0xFDA
  6503                           fsr2l	equ	0xFD9
  6504                           status	equ	0xFD8
  6505                           
  6506 ;; *************** function _puts *****************
  6507 ;; Defined at:
  6508 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\puts.c"
  6509 ;; Parameters:    Size  Location     Type
  6510 ;;  s               2   19[COMRAM] PTR const unsigned char 
  6511 ;;		 -> STR_119(12), STR_118(12), STR_74(5), 
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;		None
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  2   19[COMRAM] int 
  6516 ;; Registers used:
  6517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6523 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6526 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6527 ;;Total ram usage:        2 bytes
  6528 ;; Hardware stack levels used:    1
  6529 ;; Hardware stack levels required when called:    8
  6530 ;; This function calls:
  6531 ;;		_cputs
  6532 ;;		_putch
  6533 ;; This function is called by:
  6534 ;;		_reply_to_host
  6535 ;;		_cmd_consol_task
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           	psect	text17
  6540  003728                     __ptext17:
  6541                           	opt stack 0
  6542  003728                     _puts:
  6543                           	opt stack 20
  6544                           
  6545                           ;incstack = 0
  6546  003728  C014  F012         	movff	puts@s,cputs@s
  6547  00372C  C015  F013         	movff	puts@s+1,cputs@s+1
  6548  003730  EC95  F01A         	call	_cputs	;wreg free
  6549  003734  0E0A               	movlw	10
  6550  003736  ECFB  F01B         	call	_putch
  6551  00373A  0012               	return		;funcret
  6552  00373C                     __end_of_puts:
  6553                           	opt stack 0
  6554                           tblptru	equ	0xFF8
  6555                           tblptrh	equ	0xFF7
  6556                           tblptrl	equ	0xFF6
  6557                           tablat	equ	0xFF5
  6558                           prodh	equ	0xFF4
  6559                           prodl	equ	0xFF3
  6560                           intcon	equ	0xFF2
  6561                           postinc0	equ	0xFEE
  6562                           wreg	equ	0xFE8
  6563                           indf1	equ	0xFE7
  6564                           postdec1	equ	0xFE5
  6565                           fsr1h	equ	0xFE2
  6566                           fsr1l	equ	0xFE1
  6567                           indf2	equ	0xFDF
  6568                           postinc2	equ	0xFDE
  6569                           fsr2h	equ	0xFDA
  6570                           fsr2l	equ	0xFD9
  6571                           status	equ	0xFD8
  6572                           
  6573 ;; *************** function _cputs *****************
  6574 ;; Defined at:
  6575 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\cputs.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  s               2   17[COMRAM] PTR const unsigned char 
  6578 ;;		 -> STR_119(12), STR_118(12), STR_74(5), 
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;		None
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      void 
  6583 ;; Registers used:
  6584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6590 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6593 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;Total ram usage:        2 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    7
  6597 ;; This function calls:
  6598 ;;		_putch
  6599 ;; This function is called by:
  6600 ;;		_puts
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           	psect	text18
  6605  00352A                     __ptext18:
  6606                           	opt stack 0
  6607  00352A                     _cputs:
  6608                           	opt stack 20
  6609                           
  6610                           ;incstack = 0
  6611  00352A  D00B               	goto	l6255
  6612  00352C                     l6251:
  6613  00352C  C012  FFF6         	movff	cputs@s,tblptrl
  6614  003530  C013  FFF7         	movff	cputs@s+1,tblptrh
  6615  003534                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6616  003534  6AF8               	clrf	tblptru,c
  6617  003536                     	endif
  6618  003536                     	if	0	;tblptru may be non-zero
  6619  003536                     	endif
  6620  003536  0008               	tblrd		*
  6621  003538  50F5               	movf	tablat,w,c
  6622  00353A  ECFB  F01B         	call	_putch
  6623  00353E  4A12               	infsnz	cputs@s,f,c
  6624  003540  2A13               	incf	cputs@s+1,f,c
  6625  003542                     l6255:
  6626  003542  C012  FFF6         	movff	cputs@s,tblptrl
  6627  003546  C013  FFF7         	movff	cputs@s+1,tblptrh
  6628  00354A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6629  00354A  6AF8               	clrf	tblptru,c
  6630  00354C                     	endif
  6631  00354C                     	if	0	;tblptru may be non-zero
  6632  00354C                     	endif
  6633  00354C  0008               	tblrd		*
  6634  00354E  50F5               	movf	tablat,w,c
  6635  003550  0900               	iorlw	0
  6636  003552  B4D8               	btfsc	status,2,c
  6637  003554  0012               	return	
  6638  003556  D7EA               	goto	l6251
  6639  003558                     __end_of_cputs:
  6640                           	opt stack 0
  6641                           tblptru	equ	0xFF8
  6642                           tblptrh	equ	0xFF7
  6643                           tblptrl	equ	0xFF6
  6644                           tablat	equ	0xFF5
  6645                           prodh	equ	0xFF4
  6646                           prodl	equ	0xFF3
  6647                           intcon	equ	0xFF2
  6648                           postinc0	equ	0xFEE
  6649                           wreg	equ	0xFE8
  6650                           indf1	equ	0xFE7
  6651                           postdec1	equ	0xFE5
  6652                           fsr1h	equ	0xFE2
  6653                           fsr1l	equ	0xFE1
  6654                           indf2	equ	0xFDF
  6655                           postinc2	equ	0xFDE
  6656                           fsr2h	equ	0xFDA
  6657                           fsr2l	equ	0xFD9
  6658                           status	equ	0xFD8
  6659                           
  6660 ;; *************** function _min_uid_range *****************
  6661 ;; Defined at:
  6662 ;;		line 88 in file "clcd.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;		None
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;		None
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  1    wreg      unsigned char 
  6669 ;; Registers used:
  6670 ;;		wreg, status,2
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;Total ram usage:        0 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:    5
  6683 ;; This function calls:
  6684 ;;		Nothing
  6685 ;; This function is called by:
  6686 ;;		_reply_to_host
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           	psect	text19
  6691  00375C                     __ptext19:
  6692                           	opt stack 0
  6693  00375C                     _min_uid_range:
  6694                           	opt stack 23
  6695                           
  6696                           ;clcd.c: 89: if (clcd_config_data.init_done == 0)
  6697                           
  6698                           ;incstack = 0
  6699  00375C  5049               	movf	_clcd_config_data,w,c
  6700  00375E  A4D8               	btfss	status,2,c
  6701  003760  D002               	goto	l6359
  6702                           
  6703                           ;clcd.c: 90: return 0;
  6704  003762  0E00               	movlw	0
  6705  003764  0012               	return	
  6706  003766                     l6359:
  6707                           
  6708                           ;clcd.c: 91: else
  6709                           ;clcd.c: 92: return 'A';
  6710  003766  0E41               	movlw	65
  6711  003768  0012               	return	
  6712  00376A                     __end_of_min_uid_range:
  6713                           	opt stack 0
  6714                           tblptru	equ	0xFF8
  6715                           tblptrh	equ	0xFF7
  6716                           tblptrl	equ	0xFF6
  6717                           tablat	equ	0xFF5
  6718                           prodh	equ	0xFF4
  6719                           prodl	equ	0xFF3
  6720                           intcon	equ	0xFF2
  6721                           postinc0	equ	0xFEE
  6722                           wreg	equ	0xFE8
  6723                           indf1	equ	0xFE7
  6724                           postdec1	equ	0xFE5
  6725                           fsr1h	equ	0xFE2
  6726                           fsr1l	equ	0xFE1
  6727                           indf2	equ	0xFDF
  6728                           postinc2	equ	0xFDE
  6729                           fsr2h	equ	0xFDA
  6730                           fsr2l	equ	0xFD9
  6731                           status	equ	0xFD8
  6732                           
  6733 ;; *************** function _max_uid_range *****************
  6734 ;; Defined at:
  6735 ;;		line 95 in file "clcd.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;		None
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;		None
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  1    wreg      unsigned char 
  6742 ;; Registers used:
  6743 ;;		wreg, status,2, status,0
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6753 ;;Total ram usage:        0 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    5
  6756 ;; This function calls:
  6757 ;;		Nothing
  6758 ;; This function is called by:
  6759 ;;		_reply_to_host
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text20
  6764  00376A                     __ptext20:
  6765                           	opt stack 0
  6766  00376A                     _max_uid_range:
  6767                           	opt stack 23
  6768                           
  6769                           ;clcd.c: 96: if (clcd_config_data.init_done == 0)
  6770                           
  6771                           ;incstack = 0
  6772  00376A  5049               	movf	_clcd_config_data,w,c
  6773  00376C  A4D8               	btfss	status,2,c
  6774  00376E  D002               	goto	l6371
  6775                           
  6776                           ;clcd.c: 97: return 0;
  6777  003770  0E00               	movlw	0
  6778  003772  0012               	return	
  6779  003774                     l6371:
  6780                           
  6781                           ;clcd.c: 98: else
  6782                           ;clcd.c: 99: return clcd_config_data.uid_range - 1;
  6783  003774  044C               	decf	_clcd_config_data+3,w,c
  6784  003776  0012               	return	
  6785  003778                     __end_of_max_uid_range:
  6786                           	opt stack 0
  6787                           tblptru	equ	0xFF8
  6788                           tblptrh	equ	0xFF7
  6789                           tblptrl	equ	0xFF6
  6790                           tablat	equ	0xFF5
  6791                           prodh	equ	0xFF4
  6792                           prodl	equ	0xFF3
  6793                           intcon	equ	0xFF2
  6794                           postinc0	equ	0xFEE
  6795                           wreg	equ	0xFE8
  6796                           indf1	equ	0xFE7
  6797                           postdec1	equ	0xFE5
  6798                           fsr1h	equ	0xFE2
  6799                           fsr1l	equ	0xFE1
  6800                           indf2	equ	0xFDF
  6801                           postinc2	equ	0xFDE
  6802                           fsr2h	equ	0xFDA
  6803                           fsr2l	equ	0xFD9
  6804                           status	equ	0xFD8
  6805                           
  6806 ;; *************** function _max_display_support *****************
  6807 ;; Defined at:
  6808 ;;		line 102 in file "clcd.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;		None
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;		None
  6813 ;; Return value:  Size  Location     Type
  6814 ;;                  2   15[COMRAM] PTR unsigned char 
  6815 ;; Registers used:
  6816 ;;		wreg, status,2, status,0
  6817 ;; Tracked objects:
  6818 ;;		On entry : 0/0
  6819 ;;		On exit  : 0/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6822 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6825 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6826 ;;Total ram usage:        2 bytes
  6827 ;; Hardware stack levels used:    1
  6828 ;; Hardware stack levels required when called:    5
  6829 ;; This function calls:
  6830 ;;		Nothing
  6831 ;; This function is called by:
  6832 ;;		_reply_to_host
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           	psect	text21
  6837  0037E2                     __ptext21:
  6838                           	opt stack 0
  6839  0037E2                     _max_display_support:
  6840                           	opt stack 23
  6841                           
  6842                           ;clcd.c: 103: return "4,20";
  6843                           
  6844                           ;incstack = 0
  6845  0037E2  0EF1               	movlw	low STR_5
  6846  0037E4  6E10               	movwf	?_max_display_support,c
  6847  0037E6  0EFF               	movlw	high STR_5
  6848  0037E8  6E11               	movwf	?_max_display_support+1,c
  6849  0037EA  0012               	return	
  6850  0037EC                     __end_of_max_display_support:
  6851                           	opt stack 0
  6852                           tblptru	equ	0xFF8
  6853                           tblptrh	equ	0xFF7
  6854                           tblptrl	equ	0xFF6
  6855                           tablat	equ	0xFF5
  6856                           prodh	equ	0xFF4
  6857                           prodl	equ	0xFF3
  6858                           intcon	equ	0xFF2
  6859                           postinc0	equ	0xFEE
  6860                           wreg	equ	0xFE8
  6861                           indf1	equ	0xFE7
  6862                           postdec1	equ	0xFE5
  6863                           fsr1h	equ	0xFE2
  6864                           fsr1l	equ	0xFE1
  6865                           indf2	equ	0xFDF
  6866                           postinc2	equ	0xFDE
  6867                           fsr2h	equ	0xFDA
  6868                           fsr2l	equ	0xFD9
  6869                           status	equ	0xFD8
  6870                           
  6871 ;; *************** function _max_display_str *****************
  6872 ;; Defined at:
  6873 ;;		line 81 in file "clcd.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;		None
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;		None
  6878 ;; Return value:  Size  Location     Type
  6879 ;;                  1    wreg      unsigned char 
  6880 ;; Registers used:
  6881 ;;		wreg, status,2
  6882 ;; Tracked objects:
  6883 ;;		On entry : 0/0
  6884 ;;		On exit  : 0/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6891 ;;Total ram usage:        0 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:    5
  6894 ;; This function calls:
  6895 ;;		Nothing
  6896 ;; This function is called by:
  6897 ;;		_reply_to_host
  6898 ;; This function uses a non-reentrant model
  6899 ;;
  6900                           
  6901                           	psect	text22
  6902  003778                     __ptext22:
  6903                           	opt stack 0
  6904  003778                     _max_display_str:
  6905                           	opt stack 23
  6906                           
  6907                           ;clcd.c: 82: if (clcd_config_data.init_done == 0)
  6908                           
  6909                           ;incstack = 0
  6910  003778  5049               	movf	_clcd_config_data,w,c
  6911  00377A  A4D8               	btfss	status,2,c
  6912  00377C  D002               	goto	l6347
  6913                           
  6914                           ;clcd.c: 83: return 0;
  6915  00377E  0E00               	movlw	0
  6916  003780  0012               	return	
  6917  003782                     l6347:
  6918                           
  6919                           ;clcd.c: 84: else
  6920                           ;clcd.c: 85: return clcd_config_data.clcd_max_display_string;
  6921  003782  504D               	movf	_clcd_config_data+4,w,c
  6922  003784  0012               	return	
  6923  003786                     __end_of_max_display_str:
  6924                           	opt stack 0
  6925                           tblptru	equ	0xFF8
  6926                           tblptrh	equ	0xFF7
  6927                           tblptrl	equ	0xFF6
  6928                           tablat	equ	0xFF5
  6929                           prodh	equ	0xFF4
  6930                           prodl	equ	0xFF3
  6931                           intcon	equ	0xFF2
  6932                           postinc0	equ	0xFEE
  6933                           wreg	equ	0xFE8
  6934                           indf1	equ	0xFE7
  6935                           postdec1	equ	0xFE5
  6936                           fsr1h	equ	0xFE2
  6937                           fsr1l	equ	0xFE1
  6938                           indf2	equ	0xFDF
  6939                           postinc2	equ	0xFDE
  6940                           fsr2h	equ	0xFDA
  6941                           fsr2l	equ	0xFD9
  6942                           status	equ	0xFD8
  6943                           
  6944 ;; *************** function _init_clcd_cusotom_lcd *****************
  6945 ;; Defined at:
  6946 ;;		line 49 in file "clcd.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;  clcd_init_ro    1    wreg     unsigned char 
  6949 ;;  clcd_init_co    1   53[COMRAM] unsigned char 
  6950 ;; Auto vars:     Size  Location     Type
  6951 ;;  clcd_init_ro    1   54[COMRAM] unsigned char 
  6952 ;; Return value:  Size  Location     Type
  6953 ;;                  1    wreg      void 
  6954 ;; Registers used:
  6955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6956 ;; Tracked objects:
  6957 ;;		On entry : 0/0
  6958 ;;		On exit  : 0/0
  6959 ;;		Unchanged: 0/0
  6960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6961 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6964 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6965 ;;Total ram usage:        2 bytes
  6966 ;; Hardware stack levels used:    1
  6967 ;; Hardware stack levels required when called:   11
  6968 ;; This function calls:
  6969 ;;		___awdiv
  6970 ;;		___wmul
  6971 ;;		_init_CLCD_config
  6972 ;;		_memset
  6973 ;;		_printf
  6974 ;; This function is called by:
  6975 ;;		_reply_to_host
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           	psect	text23
  6980  002874                     __ptext23:
  6981                           	opt stack 0
  6982  002874                     _init_clcd_cusotom_lcd:
  6983                           	opt stack 17
  6984                           
  6985                           ;incstack = 0
  6986                           ;init_clcd_cusotom_lcd@clcd_init_row stored from wreg
  6987  002874  6E37               	movwf	init_clcd_cusotom_lcd@clcd_init_row,c
  6988                           
  6989                           ;clcd.c: 50: init_CLCD_config();
  6990  002876  ECDD  F015         	call	_init_CLCD_config	;wreg free
  6991                           
  6992                           ;clcd.c: 51: data_count = 0;
  6993  00287A  0E00               	movlw	0
  6994  00287C  6E42               	movwf	_data_count,c
  6995                           
  6996                           ;clcd.c: 52: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details)
      +                          );
  6997  00287E  0E96               	movlw	low _clcd_display_string_details
  6998  002880  6E24               	movwf	memset@p1,c
  6999  002882  0E02               	movlw	high _clcd_display_string_details
  7000  002884  6E25               	movwf	memset@p1+1,c
  7001  002886  0E00               	movlw	0
  7002  002888  6E27               	movwf	memset@c+1,c
  7003  00288A  0E00               	movlw	0
  7004  00288C  6E26               	movwf	memset@c,c
  7005  00288E  0E04               	movlw	4
  7006  002890  6E29               	movwf	memset@n+1,c
  7007  002892  0E38               	movlw	56
  7008  002894  6E28               	movwf	memset@n,c
  7009  002896  ECAC  F01A         	call	_memset	;wreg free
  7010                           
  7011                           ;clcd.c: 53: memset(conflict_arr, 0, sizeof (conflict_arr));
  7012  00289A  0EB7               	movlw	low _conflict_arr
  7013  00289C  6E24               	movwf	memset@p1,c
  7014  00289E  0E00               	movlw	high _conflict_arr
  7015  0028A0  6E25               	movwf	memset@p1+1,c
  7016  0028A2  0E00               	movlw	0
  7017  0028A4  6E27               	movwf	memset@c+1,c
  7018  0028A6  0E00               	movlw	0
  7019  0028A8  6E26               	movwf	memset@c,c
  7020  0028AA  0E00               	movlw	0
  7021  0028AC  6E29               	movwf	memset@n+1,c
  7022  0028AE  0E14               	movlw	20
  7023  0028B0  6E28               	movwf	memset@n,c
  7024  0028B2  ECAC  F01A         	call	_memset	;wreg free
  7025                           
  7026                           ;clcd.c: 54: clcd_config_data.init_done = 1;
  7027  0028B6  0E01               	movlw	1
  7028  0028B8  6E49               	movwf	_clcd_config_data,c
  7029                           
  7030                           ;clcd.c: 55: printf("row = %d", clcd_init_row);
  7031  0028BA  0EA1               	movlw	low STR_1
  7032  0028BC  6E24               	movwf	printf@f,c
  7033  0028BE  0EFF               	movlw	high STR_1
  7034  0028C0  6E25               	movwf	printf@f+1,c
  7035  0028C2  C037  F026         	movff	init_clcd_cusotom_lcd@clcd_init_row,?_printf+2
  7036  0028C6  6A27               	clrf	?_printf+3,c
  7037  0028C8  EC09  F011         	call	_printf	;wreg free
  7038                           
  7039                           ;clcd.c: 56: clcd_config_data.clcd_max_row = clcd_init_row;
  7040  0028CC  C037  F04A         	movff	init_clcd_cusotom_lcd@clcd_init_row,_clcd_config_data+1
  7041                           
  7042                           ;clcd.c: 57: printf("col = %d", clcd_init_col);
  7043  0028D0  0E98               	movlw	low STR_2
  7044  0028D2  6E24               	movwf	printf@f,c
  7045  0028D4  0EFF               	movlw	high STR_2
  7046  0028D6  6E25               	movwf	printf@f+1,c
  7047  0028D8  C036  F026         	movff	init_clcd_cusotom_lcd@clcd_init_col,?_printf+2
  7048  0028DC  6A27               	clrf	?_printf+3,c
  7049  0028DE  EC09  F011         	call	_printf	;wreg free
  7050                           
  7051                           ;clcd.c: 58: clcd_config_data.clcd_max_col = clcd_init_col;
  7052  0028E2  C036  F04B         	movff	init_clcd_cusotom_lcd@clcd_init_col,_clcd_config_data+2
  7053                           
  7054                           ;clcd.c: 59: printf("string_count = %d", (clcd_init_col / 4) * clcd_init_row);
  7055  0028E6  0E07               	movlw	low STR_3
  7056  0028E8  6E24               	movwf	printf@f,c
  7057  0028EA  0EFE               	movlw	high STR_3
  7058  0028EC  6E25               	movwf	printf@f+1,c
  7059  0028EE  0E00               	movlw	0
  7060  0028F0  6E13               	movwf	___awdiv@divisor+1,c
  7061  0028F2  0E04               	movlw	4
  7062  0028F4  6E12               	movwf	___awdiv@divisor,c
  7063  0028F6  C036  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7064  0028FA  6A11               	clrf	___awdiv@dividend+1,c
  7065  0028FC  ECCA  F016         	call	___awdiv	;wreg free
  7066  002900  C010  F018         	movff	?___awdiv,___wmul@multiplier
  7067  002904  C011  F019         	movff	?___awdiv+1,___wmul@multiplier+1
  7068  002908  C037  F01A         	movff	init_clcd_cusotom_lcd@clcd_init_row,___wmul@multiplicand
  7069  00290C  6A1B               	clrf	___wmul@multiplicand+1,c
  7070  00290E  ECD8  F01A         	call	___wmul	;wreg free
  7071  002912  C018  F026         	movff	?___wmul,?_printf+2
  7072  002916  C019  F027         	movff	?___wmul+1,?_printf+3
  7073  00291A  EC09  F011         	call	_printf	;wreg free
  7074                           
  7075                           ;clcd.c: 60: clcd_config_data.clcd_max_display_string = (clcd_init_col / 4) * clcd_init_
      +                          row;
  7076  00291E  C036  F010         	movff	init_clcd_cusotom_lcd@clcd_init_col,___awdiv@dividend
  7077  002922  6A11               	clrf	___awdiv@dividend+1,c
  7078  002924  0E00               	movlw	0
  7079  002926  6E13               	movwf	___awdiv@divisor+1,c
  7080  002928  0E04               	movlw	4
  7081  00292A  6E12               	movwf	___awdiv@divisor,c
  7082  00292C  ECCA  F016         	call	___awdiv	;wreg free
  7083  002930  5010               	movf	?___awdiv,w,c
  7084  002932  0237               	mulwf	init_clcd_cusotom_lcd@clcd_init_row,c
  7085  002934  CFF3 F04D          	movff	prodl,_clcd_config_data+4
  7086                           
  7087                           ;clcd.c: 61: clcd_config_data.uid_range = 'A' + clcd_config_data.clcd_max_display_string
      +                          ;
  7088  002938  504D               	movf	_clcd_config_data+4,w,c
  7089  00293A  0F41               	addlw	65
  7090  00293C  6E4C               	movwf	_clcd_config_data+3,c
  7091                           
  7092                           ;clcd.c: 62: printf("uid_range = %d\r\n", clcd_config_data.uid_range);
  7093  00293E  0E19               	movlw	low STR_4
  7094  002940  6E24               	movwf	printf@f,c
  7095  002942  0EFE               	movlw	high STR_4
  7096  002944  6E25               	movwf	printf@f+1,c
  7097  002946  C04C  F026         	movff	_clcd_config_data+3,?_printf+2
  7098  00294A  6A27               	clrf	?_printf+3,c
  7099  00294C  EC09  F011         	call	_printf	;wreg free
  7100  002950  0012               	return		;funcret
  7101  002952                     __end_of_init_clcd_cusotom_lcd:
  7102                           	opt stack 0
  7103                           tblptru	equ	0xFF8
  7104                           tblptrh	equ	0xFF7
  7105                           tblptrl	equ	0xFF6
  7106                           tablat	equ	0xFF5
  7107                           prodh	equ	0xFF4
  7108                           prodl	equ	0xFF3
  7109                           intcon	equ	0xFF2
  7110                           postinc0	equ	0xFEE
  7111                           wreg	equ	0xFE8
  7112                           indf1	equ	0xFE7
  7113                           postdec1	equ	0xFE5
  7114                           fsr1h	equ	0xFE2
  7115                           fsr1l	equ	0xFE1
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           fsr2h	equ	0xFDA
  7119                           fsr2l	equ	0xFD9
  7120                           status	equ	0xFD8
  7121                           
  7122 ;; *************** function _init_CLCD_config *****************
  7123 ;; Defined at:
  7124 ;;		line 15 in file "clcd.c"
  7125 ;; Parameters:    Size  Location     Type
  7126 ;;		None
  7127 ;; Auto vars:     Size  Location     Type
  7128 ;;		None
  7129 ;; Return value:  Size  Location     Type
  7130 ;;                  1    wreg      void 
  7131 ;; Registers used:
  7132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7133 ;; Tracked objects:
  7134 ;;		On entry : 0/0
  7135 ;;		On exit  : 0/0
  7136 ;;		Unchanged: 0/0
  7137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;Total ram usage:        0 bytes
  7143 ;; Hardware stack levels used:    1
  7144 ;; Hardware stack levels required when called:   10
  7145 ;; This function calls:
  7146 ;;		__delay_MS
  7147 ;;		_clcd_display_string_config
  7148 ;;		_memset
  7149 ;;		_reset_clcd
  7150 ;;		_write_lcd_cmd
  7151 ;; This function is called by:
  7152 ;;		_init_clcd_cusotom_lcd
  7153 ;;		_init_clcd_lcd_16x2
  7154 ;;		_init_clcd_lcd_20x4
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           	psect	text24
  7159  002BBA                     __ptext24:
  7160                           	opt stack 0
  7161  002BBA                     _init_CLCD_config:
  7162                           	opt stack 17
  7163                           
  7164                           ;clcd.c: 16: memset(&clcd_config_data, 0, sizeof (CLCD_CONFIG_DATA));
  7165                           
  7166                           ;incstack = 0
  7167  002BBA  0E49               	movlw	low _clcd_config_data
  7168  002BBC  6E24               	movwf	memset@p1,c
  7169  002BBE  0E00               	movlw	high _clcd_config_data
  7170  002BC0  6E25               	movwf	memset@p1+1,c
  7171  002BC2  0E00               	movlw	0
  7172  002BC4  6E27               	movwf	memset@c+1,c
  7173  002BC6  0E00               	movlw	0
  7174  002BC8  6E26               	movwf	memset@c,c
  7175  002BCA  0E00               	movlw	0
  7176  002BCC  6E29               	movwf	memset@n+1,c
  7177  002BCE  0E05               	movlw	5
  7178  002BD0  6E28               	movwf	memset@n,c
  7179  002BD2  ECAC  F01A         	call	_memset	;wreg free
  7180                           
  7181                           ;clcd.c: 18: TRISD = 0x00;
  7182  002BD6  0E00               	movlw	0
  7183  002BD8  6E95               	movwf	3989,c	;volatile
  7184                           
  7185                           ;clcd.c: 21: TRISA = (unsigned char) (TRISA | 0xF0);
  7186  002BDA  5092               	movf	3986,w,c	;volatile
  7187  002BDC  09F0               	iorlw	240
  7188  002BDE  6E92               	movwf	3986,c	;volatile
  7189                           
  7190                           ;clcd.c: 23: PORTAbits.RA0 = 0;
  7191  002BE0  9080               	bcf	3968,0,c	;volatile
  7192                           
  7193                           ;clcd.c: 24: _delay_MS(250);
  7194  002BE2  0E00               	movlw	0
  7195  002BE4  6E11               	movwf	__delay_MS@delay+1,c
  7196  002BE6  0EFA               	movlw	250
  7197  002BE8  6E10               	movwf	__delay_MS@delay,c
  7198  002BEA  EC73  F019         	call	__delay_MS	;wreg free
  7199                           
  7200                           ;clcd.c: 27: write_lcd_cmd(0X38);
  7201  002BEE  0E38               	movlw	56
  7202  002BF0  EC6D  F01B         	call	_write_lcd_cmd
  7203                           
  7204                           ;clcd.c: 28: _delay_MS(250);
  7205  002BF4  0E00               	movlw	0
  7206  002BF6  6E11               	movwf	__delay_MS@delay+1,c
  7207  002BF8  0EFA               	movlw	250
  7208  002BFA  6E10               	movwf	__delay_MS@delay,c
  7209  002BFC  EC73  F019         	call	__delay_MS	;wreg free
  7210                           
  7211                           ;clcd.c: 30: write_lcd_cmd(0x0E);;
  7212  002C00  0E0E               	movlw	14
  7213  002C02  EC6D  F01B         	call	_write_lcd_cmd
  7214                           
  7215                           ;clcd.c: 31: _delay_MS(250);
  7216  002C06  0E00               	movlw	0
  7217  002C08  6E11               	movwf	__delay_MS@delay+1,c
  7218  002C0A  0EFA               	movlw	250
  7219  002C0C  6E10               	movwf	__delay_MS@delay,c
  7220  002C0E  EC73  F019         	call	__delay_MS	;wreg free
  7221                           
  7222                           ;clcd.c: 33: write_lcd_cmd(0x01);;
  7223  002C12  0E01               	movlw	1
  7224  002C14  EC6D  F01B         	call	_write_lcd_cmd
  7225                           
  7226                           ;clcd.c: 34: _delay_MS(250);
  7227  002C18  0E00               	movlw	0
  7228  002C1A  6E11               	movwf	__delay_MS@delay+1,c
  7229  002C1C  0EFA               	movlw	250
  7230  002C1E  6E10               	movwf	__delay_MS@delay,c
  7231  002C20  EC73  F019         	call	__delay_MS	;wreg free
  7232                           
  7233                           ;clcd.c: 36: write_lcd_cmd(0x06);;
  7234  002C24  0E06               	movlw	6
  7235  002C26  EC6D  F01B         	call	_write_lcd_cmd
  7236                           
  7237                           ;clcd.c: 37: _delay_MS(250);
  7238  002C2A  0E00               	movlw	0
  7239  002C2C  6E11               	movwf	__delay_MS@delay+1,c
  7240  002C2E  0EFA               	movlw	250
  7241  002C30  6E10               	movwf	__delay_MS@delay,c
  7242  002C32  EC73  F019         	call	__delay_MS	;wreg free
  7243                           
  7244                           ;clcd.c: 39: write_lcd_cmd(0x0F);
  7245  002C36  0E0F               	movlw	15
  7246  002C38  EC6D  F01B         	call	_write_lcd_cmd
  7247                           
  7248                           ;clcd.c: 40: _delay_MS(250);
  7249  002C3C  0E00               	movlw	0
  7250  002C3E  6E11               	movwf	__delay_MS@delay+1,c
  7251  002C40  0EFA               	movlw	250
  7252  002C42  6E10               	movwf	__delay_MS@delay,c
  7253  002C44  EC73  F019         	call	__delay_MS	;wreg free
  7254                           
  7255                           ;clcd.c: 42: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7256  002C48  0E00               	movlw	low _lcd_display_array
  7257  002C4A  6E24               	movwf	memset@p1,c
  7258  002C4C  0E01               	movlw	high _lcd_display_array
  7259  002C4E  6E25               	movwf	memset@p1+1,c
  7260  002C50  0E00               	movlw	0
  7261  002C52  6E27               	movwf	memset@c+1,c
  7262  002C54  0E20               	movlw	32
  7263  002C56  6E26               	movwf	memset@c,c
  7264  002C58  0E00               	movlw	0
  7265  002C5A  6E29               	movwf	memset@n+1,c
  7266  002C5C  0E50               	movlw	80
  7267  002C5E  6E28               	movwf	memset@n,c
  7268  002C60  ECAC  F01A         	call	_memset	;wreg free
  7269                           
  7270                           ;clcd.c: 44: clcd_display_string_config();
  7271  002C64  ECE5  F017         	call	_clcd_display_string_config	;wreg free
  7272                           
  7273                           ;clcd.c: 46: reset_clcd();
  7274  002C68  ECF6  F01B         	call	_reset_clcd	;wreg free
  7275  002C6C  0012               	return		;funcret
  7276  002C6E                     __end_of_init_CLCD_config:
  7277                           	opt stack 0
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           intcon	equ	0xFF2
  7285                           postinc0	equ	0xFEE
  7286                           wreg	equ	0xFE8
  7287                           indf1	equ	0xFE7
  7288                           postdec1	equ	0xFE5
  7289                           fsr1h	equ	0xFE2
  7290                           fsr1l	equ	0xFE1
  7291                           indf2	equ	0xFDF
  7292                           postinc2	equ	0xFDE
  7293                           fsr2h	equ	0xFDA
  7294                           fsr2l	equ	0xFD9
  7295                           status	equ	0xFD8
  7296                           
  7297 ;; *************** function _write_lcd_cmd *****************
  7298 ;; Defined at:
  7299 ;;		line 298 in file "clcd.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;  cmd             1    wreg     unsigned char 
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;  cmd             1   22[COMRAM] unsigned char 
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  1    wreg      void 
  7306 ;; Registers used:
  7307 ;;		wreg, status,2, status,0, cstack
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;Total ram usage:        1 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    6
  7320 ;; This function calls:
  7321 ;;		_delay
  7322 ;; This function is called by:
  7323 ;;		_init_CLCD_config
  7324 ;;		_set_cursor
  7325 ;;		_char_enter_mode_left_to_right
  7326 ;;		_display_text
  7327 ;;		_set_cursor_at_home
  7328 ;;		_display_and_cursor_control
  7329 ;;		_scroll_display_right
  7330 ;;		_scroll_display_left
  7331 ;;		_put_string
  7332 ;;		_put_char
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text25
  7337  0036DA                     __ptext25:
  7338                           	opt stack 0
  7339  0036DA                     _write_lcd_cmd:
  7340                           	opt stack 22
  7341                           
  7342                           ;incstack = 0
  7343                           ;write_lcd_cmd@cmd stored from wreg
  7344  0036DA  6E17               	movwf	write_lcd_cmd@cmd,c
  7345                           
  7346                           ;clcd.c: 299: PORTD = cmd;
  7347  0036DC  C017  FF83         	movff	write_lcd_cmd@cmd,3971	;volatile
  7348                           
  7349                           ;clcd.c: 300: PORTAbits.RA2 = 0;
  7350  0036E0  9480               	bcf	3968,2,c	;volatile
  7351                           
  7352                           ;clcd.c: 301: PORTAbits.RA1 = 0;
  7353  0036E2  9280               	bcf	3968,1,c	;volatile
  7354                           
  7355                           ;clcd.c: 302: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7356  0036E4  8080               	bsf	3968,0,c	;volatile
  7357  0036E6  0E00               	movlw	0
  7358  0036E8  6E11               	movwf	delay@delay+1,c
  7359  0036EA  0E01               	movlw	1
  7360  0036EC  6E10               	movwf	delay@delay,c
  7361  0036EE  EC06  F019         	call	_delay	;wreg free
  7362  0036F2  9080               	bcf	3968,0,c	;volatile
  7363  0036F4  0012               	return		;funcret
  7364  0036F6                     __end_of_write_lcd_cmd:
  7365                           	opt stack 0
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           intcon	equ	0xFF2
  7373                           postinc0	equ	0xFEE
  7374                           wreg	equ	0xFE8
  7375                           indf1	equ	0xFE7
  7376                           postdec1	equ	0xFE5
  7377                           fsr1h	equ	0xFE2
  7378                           fsr1l	equ	0xFE1
  7379                           indf2	equ	0xFDF
  7380                           postinc2	equ	0xFDE
  7381                           fsr2h	equ	0xFDA
  7382                           fsr2l	equ	0xFD9
  7383                           status	equ	0xFD8
  7384                           
  7385 ;; *************** function _reset_clcd *****************
  7386 ;; Defined at:
  7387 ;;		line 10 in file "clcd.c"
  7388 ;; Parameters:    Size  Location     Type
  7389 ;;		None
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;		None
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  1    wreg      void 
  7394 ;; Registers used:
  7395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7405 ;;Total ram usage:        0 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    9
  7408 ;; This function calls:
  7409 ;;		_clear_display_array
  7410 ;;		_reset_display_structure_count
  7411 ;; This function is called by:
  7412 ;;		_init_CLCD_config
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           	psect	text26
  7417  0037EC                     __ptext26:
  7418                           	opt stack 0
  7419  0037EC                     _reset_clcd:
  7420                           	opt stack 17
  7421                           
  7422                           ;clcd.c: 11: clear_display_array();
  7423                           
  7424                           ;incstack = 0
  7425  0037EC  EC10  F01B         	call	_clear_display_array	;wreg free
  7426                           
  7427                           ;clcd.c: 12: reset_display_structure_count();
  7428  0037F0  EC9E  F01B         	call	_reset_display_structure_count	;wreg free
  7429  0037F4  0012               	return		;funcret
  7430  0037F6                     __end_of_reset_clcd:
  7431                           	opt stack 0
  7432                           tblptru	equ	0xFF8
  7433                           tblptrh	equ	0xFF7
  7434                           tblptrl	equ	0xFF6
  7435                           tablat	equ	0xFF5
  7436                           prodh	equ	0xFF4
  7437                           prodl	equ	0xFF3
  7438                           intcon	equ	0xFF2
  7439                           postinc0	equ	0xFEE
  7440                           wreg	equ	0xFE8
  7441                           indf1	equ	0xFE7
  7442                           postdec1	equ	0xFE5
  7443                           fsr1h	equ	0xFE2
  7444                           fsr1l	equ	0xFE1
  7445                           indf2	equ	0xFDF
  7446                           postinc2	equ	0xFDE
  7447                           fsr2h	equ	0xFDA
  7448                           fsr2l	equ	0xFD9
  7449                           status	equ	0xFD8
  7450                           
  7451 ;; *************** function _clear_display_array *****************
  7452 ;; Defined at:
  7453 ;;		line 399 in file "clcd.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;		None
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;		None
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  1    wreg      void 
  7460 ;; Registers used:
  7461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7471 ;;Total ram usage:        0 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    8
  7474 ;; This function calls:
  7475 ;;		_memset
  7476 ;;		_reset_display_structure_count
  7477 ;; This function is called by:
  7478 ;;		_reset_clcd
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           	psect	text27
  7483  003620                     __ptext27:
  7484                           	opt stack 0
  7485  003620                     _clear_display_array:
  7486                           	opt stack 17
  7487                           
  7488                           ;clcd.c: 400: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7489                           
  7490                           ;incstack = 0
  7491  003620  0E00               	movlw	low _lcd_display_array
  7492  003622  6E24               	movwf	memset@p1,c
  7493  003624  0E01               	movlw	high _lcd_display_array
  7494  003626  6E25               	movwf	memset@p1+1,c
  7495  003628  0E00               	movlw	0
  7496  00362A  6E27               	movwf	memset@c+1,c
  7497  00362C  0E20               	movlw	32
  7498  00362E  6E26               	movwf	memset@c,c
  7499  003630  0E00               	movlw	0
  7500  003632  6E29               	movwf	memset@n+1,c
  7501  003634  0E50               	movlw	80
  7502  003636  6E28               	movwf	memset@n,c
  7503  003638  ECAC  F01A         	call	_memset	;wreg free
  7504                           
  7505                           ;clcd.c: 401: reset_display_structure_count();
  7506  00363C  EC9E  F01B         	call	_reset_display_structure_count	;wreg free
  7507  003640  0012               	return		;funcret
  7508  003642                     __end_of_clear_display_array:
  7509                           	opt stack 0
  7510                           tblptru	equ	0xFF8
  7511                           tblptrh	equ	0xFF7
  7512                           tblptrl	equ	0xFF6
  7513                           tablat	equ	0xFF5
  7514                           prodh	equ	0xFF4
  7515                           prodl	equ	0xFF3
  7516                           intcon	equ	0xFF2
  7517                           postinc0	equ	0xFEE
  7518                           wreg	equ	0xFE8
  7519                           indf1	equ	0xFE7
  7520                           postdec1	equ	0xFE5
  7521                           fsr1h	equ	0xFE2
  7522                           fsr1l	equ	0xFE1
  7523                           indf2	equ	0xFDF
  7524                           postinc2	equ	0xFDE
  7525                           fsr2h	equ	0xFDA
  7526                           fsr2l	equ	0xFD9
  7527                           status	equ	0xFD8
  7528                           
  7529 ;; *************** function _reset_display_structure_count *****************
  7530 ;; Defined at:
  7531 ;;		line 394 in file "clcd.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;		None
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;                  1    wreg      void 
  7538 ;; Registers used:
  7539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;Total ram usage:        0 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; Hardware stack levels required when called:    7
  7552 ;; This function calls:
  7553 ;;		_clear_display_structure
  7554 ;; This function is called by:
  7555 ;;		_reset_clcd
  7556 ;;		_clear_display_array
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           	psect	text28
  7561  00373C                     __ptext28:
  7562                           	opt stack 0
  7563  00373C                     _reset_display_structure_count:
  7564                           	opt stack 18
  7565                           
  7566                           ;clcd.c: 395: display_struct_count = 0;
  7567                           
  7568                           ;incstack = 0
  7569  00373C  0E00               	movlw	0
  7570  00373E  0100               	movlb	0	; () banked
  7571  003740  6F75               	movwf	(_display_struct_count+1)& (0+255),b
  7572  003742  0E00               	movlw	0
  7573  003744  6F74               	movwf	_display_struct_count& (0+255),b
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;clcd.c: 396: clear_display_structure();
  7577  003746  EC31  F01B         	call	_clear_display_structure	;wreg free
  7578  00374A  0012               	return		;funcret
  7579  00374C                     __end_of_reset_display_structure_count:
  7580                           	opt stack 0
  7581                           tblptru	equ	0xFF8
  7582                           tblptrh	equ	0xFF7
  7583                           tblptrl	equ	0xFF6
  7584                           tablat	equ	0xFF5
  7585                           prodh	equ	0xFF4
  7586                           prodl	equ	0xFF3
  7587                           intcon	equ	0xFF2
  7588                           postinc0	equ	0xFEE
  7589                           wreg	equ	0xFE8
  7590                           indf1	equ	0xFE7
  7591                           postdec1	equ	0xFE5
  7592                           fsr1h	equ	0xFE2
  7593                           fsr1l	equ	0xFE1
  7594                           indf2	equ	0xFDF
  7595                           postinc2	equ	0xFDE
  7596                           fsr2h	equ	0xFDA
  7597                           fsr2l	equ	0xFD9
  7598                           status	equ	0xFD8
  7599                           
  7600 ;; *************** function _clear_display_structure *****************
  7601 ;; Defined at:
  7602 ;;		line 390 in file "clcd.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;		None
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;		None
  7607 ;; Return value:  Size  Location     Type
  7608 ;;                  1    wreg      void 
  7609 ;; Registers used:
  7610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;Total ram usage:        0 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:    6
  7623 ;; This function calls:
  7624 ;;		_memset
  7625 ;; This function is called by:
  7626 ;;		_reset_display_structure_count
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630                           	psect	text29
  7631  003662                     __ptext29:
  7632                           	opt stack 0
  7633  003662                     _clear_display_structure:
  7634                           	opt stack 18
  7635                           
  7636                           ;clcd.c: 391: memset(clcd_display_string_details, 0, sizeof (clcd_display_string_details
      +                          ));
  7637                           
  7638                           ;incstack = 0
  7639  003662  0E96               	movlw	low _clcd_display_string_details
  7640  003664  6E24               	movwf	memset@p1,c
  7641  003666  0E02               	movlw	high _clcd_display_string_details
  7642  003668  6E25               	movwf	memset@p1+1,c
  7643  00366A  0E00               	movlw	0
  7644  00366C  6E27               	movwf	memset@c+1,c
  7645  00366E  0E00               	movlw	0
  7646  003670  6E26               	movwf	memset@c,c
  7647  003672  0E04               	movlw	4
  7648  003674  6E29               	movwf	memset@n+1,c
  7649  003676  0E38               	movlw	56
  7650  003678  6E28               	movwf	memset@n,c
  7651  00367A  ECAC  F01A         	call	_memset	;wreg free
  7652  00367E  0012               	return		;funcret
  7653  003680                     __end_of_clear_display_structure:
  7654                           	opt stack 0
  7655                           tblptru	equ	0xFF8
  7656                           tblptrh	equ	0xFF7
  7657                           tblptrl	equ	0xFF6
  7658                           tablat	equ	0xFF5
  7659                           prodh	equ	0xFF4
  7660                           prodl	equ	0xFF3
  7661                           intcon	equ	0xFF2
  7662                           postinc0	equ	0xFEE
  7663                           wreg	equ	0xFE8
  7664                           indf1	equ	0xFE7
  7665                           postdec1	equ	0xFE5
  7666                           fsr1h	equ	0xFE2
  7667                           fsr1l	equ	0xFE1
  7668                           indf2	equ	0xFDF
  7669                           postinc2	equ	0xFDE
  7670                           fsr2h	equ	0xFDA
  7671                           fsr2l	equ	0xFD9
  7672                           status	equ	0xFD8
  7673                           
  7674 ;; *************** function _clcd_display_string_config *****************
  7675 ;; Defined at:
  7676 ;;		line 216 in file "clcd.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;		None
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;		None
  7681 ;; Return value:  Size  Location     Type
  7682 ;;                  1    wreg      void 
  7683 ;; Registers used:
  7684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7685 ;; Tracked objects:
  7686 ;;		On entry : 0/0
  7687 ;;		On exit  : 0/0
  7688 ;;		Unchanged: 0/0
  7689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7694 ;;Total ram usage:        0 bytes
  7695 ;; Hardware stack levels used:    1
  7696 ;; Hardware stack levels required when called:    8
  7697 ;; This function calls:
  7698 ;;		_memcpy
  7699 ;;		_memset
  7700 ;;		_printf
  7701 ;;		_write_str
  7702 ;; This function is called by:
  7703 ;;		_init_CLCD_config
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           	psect	text30
  7708  002FCA                     __ptext30:
  7709                           	opt stack 0
  7710  002FCA                     _clcd_display_string_config:
  7711                           	opt stack 18
  7712                           
  7713                           ;clcd.c: 217: memset(lcd_display_array, ' ', sizeof (lcd_display_array));
  7714                           
  7715                           ;incstack = 0
  7716  002FCA  0E00               	movlw	low _lcd_display_array
  7717  002FCC  6E24               	movwf	memset@p1,c
  7718  002FCE  0E01               	movlw	high _lcd_display_array
  7719  002FD0  6E25               	movwf	memset@p1+1,c
  7720  002FD2  0E00               	movlw	0
  7721  002FD4  6E27               	movwf	memset@c+1,c
  7722  002FD6  0E20               	movlw	32
  7723  002FD8  6E26               	movwf	memset@c,c
  7724  002FDA  0E00               	movlw	0
  7725  002FDC  6E29               	movwf	memset@n+1,c
  7726  002FDE  0E50               	movlw	80
  7727  002FE0  6E28               	movwf	memset@n,c
  7728  002FE2  ECAC  F01A         	call	_memset	;wreg free
  7729                           
  7730                           ;clcd.c: 218: printf("sizeof(str) = %d\r\n", sizeof (str));
  7731  002FE6  0EE2               	movlw	low STR_13
  7732  002FE8  6E24               	movwf	printf@f,c
  7733  002FEA  0EFD               	movlw	high STR_13
  7734  002FEC  6E25               	movwf	printf@f+1,c
  7735  002FEE  0E00               	movlw	0
  7736  002FF0  6E27               	movwf	?_printf+3,c
  7737  002FF2  0E0D               	movlw	13
  7738  002FF4  6E26               	movwf	?_printf+2,c
  7739  002FF6  EC09  F011         	call	_printf	;wreg free
  7740                           
  7741                           ;clcd.c: 219: memcpy(lcd_display_array[0], str, sizeof (str));
  7742  002FFA  0E00               	movlw	low _lcd_display_array
  7743  002FFC  6E10               	movwf	memcpy@d1,c
  7744  002FFE  0E01               	movlw	high _lcd_display_array
  7745  003000  6E11               	movwf	memcpy@d1+1,c
  7746  003002  0EEC               	movlw	low _str
  7747  003004  6E12               	movwf	memcpy@s1,c
  7748  003006  0E00               	movlw	high _str
  7749  003008  6E13               	movwf	memcpy@s1+1,c
  7750  00300A  0E00               	movlw	0
  7751  00300C  6E15               	movwf	memcpy@n+1,c
  7752  00300E  0E0D               	movlw	13
  7753  003010  6E14               	movwf	memcpy@n,c
  7754  003012  ECB6  F019         	call	_memcpy	;wreg free
  7755                           
  7756                           ;clcd.c: 220: write_str(lcd_display_array[0]);
  7757  003016  0E00               	movlw	low _lcd_display_array
  7758  003018  6E18               	movwf	write_str@str,c
  7759  00301A  0E01               	movlw	high _lcd_display_array
  7760  00301C  6E19               	movwf	write_str@str+1,c
  7761  00301E  ECF5  F019         	call	_write_str	;wreg free
  7762  003022  0012               	return		;funcret
  7763  003024                     __end_of_clcd_display_string_config:
  7764                           	opt stack 0
  7765                           tblptru	equ	0xFF8
  7766                           tblptrh	equ	0xFF7
  7767                           tblptrl	equ	0xFF6
  7768                           tablat	equ	0xFF5
  7769                           prodh	equ	0xFF4
  7770                           prodl	equ	0xFF3
  7771                           intcon	equ	0xFF2
  7772                           postinc0	equ	0xFEE
  7773                           wreg	equ	0xFE8
  7774                           indf1	equ	0xFE7
  7775                           postdec1	equ	0xFE5
  7776                           fsr1h	equ	0xFE2
  7777                           fsr1l	equ	0xFE1
  7778                           indf2	equ	0xFDF
  7779                           postinc2	equ	0xFDE
  7780                           fsr2h	equ	0xFDA
  7781                           fsr2l	equ	0xFD9
  7782                           status	equ	0xFD8
  7783                           
  7784 ;; *************** function _write_str *****************
  7785 ;; Defined at:
  7786 ;;		line 312 in file "clcd.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;  str             2   23[COMRAM] PTR const unsigned char 
  7789 ;;		 -> lcd_display_array(80), 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  i               1   25[COMRAM] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  1    wreg      void 
  7794 ;; Registers used:
  7795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7801 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;Total ram usage:        3 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; Hardware stack levels required when called:    7
  7808 ;; This function calls:
  7809 ;;		_write_lcd_data
  7810 ;; This function is called by:
  7811 ;;		_clcd_display_string_config
  7812 ;;		_display_text
  7813 ;;		_put_string
  7814 ;; This function uses a non-reentrant model
  7815 ;;
  7816                           
  7817                           	psect	text31
  7818  0033EA                     __ptext31:
  7819                           	opt stack 0
  7820  0033EA                     _write_str:
  7821                           	opt stack 21
  7822                           
  7823                           ;clcd.c: 314: unsigned char i = 0;
  7824                           
  7825                           ;incstack = 0
  7826  0033EA  0E00               	movlw	0
  7827  0033EC  6E1A               	movwf	write_str@i,c
  7828                           
  7829                           ;clcd.c: 315: while (i < clcd_config_data.clcd_max_col) {
  7830  0033EE  D015               	goto	l5847
  7831  0033F0                     l5837:
  7832                           
  7833                           ;clcd.c: 316: if(*str != (0))
  7834  0033F0  C018  FFD9         	movff	write_str@str,fsr2l
  7835  0033F4  C019  FFDA         	movff	write_str@str+1,fsr2h
  7836  0033F8  50DF               	movf	indf2,w,c
  7837  0033FA  B4D8               	btfsc	status,2,c
  7838  0033FC  D00A               	goto	l5843
  7839                           
  7840                           ;clcd.c: 317: write_lcd_data(*str++);
  7841  0033FE  C018  FFD9         	movff	write_str@str,fsr2l
  7842  003402  C019  FFDA         	movff	write_str@str+1,fsr2h
  7843  003406  50DF               	movf	indf2,w,c
  7844  003408  EC7B  F01B         	call	_write_lcd_data
  7845  00340C  4A18               	infsnz	write_str@str,f,c
  7846  00340E  2A19               	incf	write_str@str+1,f,c
  7847  003410  D003               	goto	l5845
  7848  003412                     l5843:
  7849                           
  7850                           ;clcd.c: 318: else
  7851                           ;clcd.c: 319: write_lcd_data(' ');
  7852  003412  0E20               	movlw	32
  7853  003414  EC7B  F01B         	call	_write_lcd_data
  7854  003418                     l5845:
  7855                           
  7856                           ;clcd.c: 321: i++;
  7857  003418  2A1A               	incf	write_str@i,f,c
  7858  00341A                     l5847:
  7859  00341A  504B               	movf	_clcd_config_data+2,w,c
  7860  00341C  5C1A               	subwf	write_str@i,w,c
  7861  00341E  B0D8               	btfsc	status,0,c
  7862  003420  0012               	return	
  7863  003422  D7E6               	goto	l5837
  7864  003424                     __end_of_write_str:
  7865                           	opt stack 0
  7866                           tblptru	equ	0xFF8
  7867                           tblptrh	equ	0xFF7
  7868                           tblptrl	equ	0xFF6
  7869                           tablat	equ	0xFF5
  7870                           prodh	equ	0xFF4
  7871                           prodl	equ	0xFF3
  7872                           intcon	equ	0xFF2
  7873                           postinc0	equ	0xFEE
  7874                           wreg	equ	0xFE8
  7875                           indf1	equ	0xFE7
  7876                           postdec1	equ	0xFE5
  7877                           fsr1h	equ	0xFE2
  7878                           fsr1l	equ	0xFE1
  7879                           indf2	equ	0xFDF
  7880                           postinc2	equ	0xFDE
  7881                           fsr2h	equ	0xFDA
  7882                           fsr2l	equ	0xFD9
  7883                           status	equ	0xFD8
  7884                           
  7885 ;; *************** function _write_lcd_data *****************
  7886 ;; Defined at:
  7887 ;;		line 305 in file "clcd.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;  data            1    wreg     unsigned char 
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;  data            1   22[COMRAM] unsigned char 
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  1    wreg      void 
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, status,0, cstack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;Total ram usage:        1 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:    6
  7908 ;; This function calls:
  7909 ;;		_delay
  7910 ;; This function is called by:
  7911 ;;		_write_str
  7912 ;;		_put_char
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text32
  7917  0036F6                     __ptext32:
  7918                           	opt stack 0
  7919  0036F6                     _write_lcd_data:
  7920                           	opt stack 21
  7921                           
  7922                           ;incstack = 0
  7923                           ;write_lcd_data@data stored from wreg
  7924  0036F6  6E17               	movwf	write_lcd_data@data,c
  7925                           
  7926                           ;clcd.c: 306: PORTAbits.RA2 = 1;
  7927  0036F8  8480               	bsf	3968,2,c	;volatile
  7928                           
  7929                           ;clcd.c: 307: PORTAbits.RA1 = 0;
  7930  0036FA  9280               	bcf	3968,1,c	;volatile
  7931                           
  7932                           ;clcd.c: 308: PORTD = data;
  7933  0036FC  C017  FF83         	movff	write_lcd_data@data,3971	;volatile
  7934                           
  7935                           ;clcd.c: 309: {PORTAbits.RA0 = 1; delay(1); PORTAbits.RA0 = 0;};
  7936  003700  8080               	bsf	3968,0,c	;volatile
  7937  003702  0E00               	movlw	0
  7938  003704  6E11               	movwf	delay@delay+1,c
  7939  003706  0E01               	movlw	1
  7940  003708  6E10               	movwf	delay@delay,c
  7941  00370A  EC06  F019         	call	_delay	;wreg free
  7942  00370E  9080               	bcf	3968,0,c	;volatile
  7943  003710  0012               	return		;funcret
  7944  003712                     __end_of_write_lcd_data:
  7945                           	opt stack 0
  7946                           tblptru	equ	0xFF8
  7947                           tblptrh	equ	0xFF7
  7948                           tblptrl	equ	0xFF6
  7949                           tablat	equ	0xFF5
  7950                           prodh	equ	0xFF4
  7951                           prodl	equ	0xFF3
  7952                           intcon	equ	0xFF2
  7953                           postinc0	equ	0xFEE
  7954                           wreg	equ	0xFE8
  7955                           indf1	equ	0xFE7
  7956                           postdec1	equ	0xFE5
  7957                           fsr1h	equ	0xFE2
  7958                           fsr1l	equ	0xFE1
  7959                           indf2	equ	0xFDF
  7960                           postinc2	equ	0xFDE
  7961                           fsr2h	equ	0xFDA
  7962                           fsr2l	equ	0xFD9
  7963                           status	equ	0xFD8
  7964                           
  7965 ;; *************** function _delay *****************
  7966 ;; Defined at:
  7967 ;;		line 5 in file "delay.c"
  7968 ;; Parameters:    Size  Location     Type
  7969 ;;  delay           2   15[COMRAM] int 
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;  i               2   20[COMRAM] int 
  7972 ;;  val             2   18[COMRAM] int 
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  1    wreg      void 
  7975 ;; Registers used:
  7976 ;;		wreg, status,2, status,0
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7983 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7985 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7986 ;;Total ram usage:        7 bytes
  7987 ;; Hardware stack levels used:    1
  7988 ;; Hardware stack levels required when called:    5
  7989 ;; This function calls:
  7990 ;;		Nothing
  7991 ;; This function is called by:
  7992 ;;		_write_lcd_cmd
  7993 ;;		_write_lcd_data
  7994 ;;		_is_busy
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           	psect	text33
  7999  00320C                     __ptext33:
  8000                           	opt stack 0
  8001  00320C                     _delay:
  8002                           	opt stack 21
  8003                           
  8004                           ;delay.c: 7: int val = 0, i;
  8005                           
  8006                           ;incstack = 0
  8007  00320C  0E00               	movlw	0
  8008  00320E  6E14               	movwf	delay@val+1,c
  8009  003210  0E00               	movlw	0
  8010  003212  6E13               	movwf	delay@val,c
  8011                           
  8012                           ;delay.c: 8: for (val = 0; val < delay; val++) {
  8013  003214  0E00               	movlw	0
  8014  003216  6E14               	movwf	delay@val+1,c
  8015  003218  0E00               	movlw	0
  8016  00321A  6E13               	movwf	delay@val,c
  8017  00321C  D011               	goto	l5661
  8018  00321E                     l5649:
  8019                           
  8020                           ;delay.c: 9: for(i=0; i<350; i++)
  8021  00321E  0E00               	movlw	0
  8022  003220  6E16               	movwf	delay@i+1,c
  8023  003222  0E00               	movlw	0
  8024  003224  6E15               	movwf	delay@i,c
  8025  003226                     l5651:
  8026  003226  BE16               	btfsc	delay@i+1,7,c
  8027  003228  D006               	goto	l5655
  8028  00322A  0E5E               	movlw	94
  8029  00322C  5C15               	subwf	delay@i,w,c
  8030  00322E  0E01               	movlw	1
  8031  003230  5816               	subwfb	delay@i+1,w,c
  8032  003232  B0D8               	btfsc	status,0,c
  8033  003234  D003               	goto	l5659
  8034  003236                     l5655:
  8035                           
  8036                           ;delay.c: 10: {
  8037  003236  4A15               	infsnz	delay@i,f,c
  8038  003238  2A16               	incf	delay@i+1,f,c
  8039  00323A  D7F5               	goto	l5651
  8040  00323C                     l5659:
  8041  00323C  4A13               	infsnz	delay@val,f,c
  8042  00323E  2A14               	incf	delay@val+1,f,c
  8043  003240                     l5661:
  8044  003240  5010               	movf	delay@delay,w,c
  8045  003242  5C13               	subwf	delay@val,w,c
  8046  003244  5014               	movf	delay@val+1,w,c
  8047  003246  0A80               	xorlw	128
  8048  003248  6E12               	movwf	??_delay& (0+255),c
  8049  00324A  5011               	movf	delay@delay+1,w,c
  8050  00324C  0A80               	xorlw	128
  8051  00324E  5812               	subwfb	??_delay& (0+255),w,c
  8052  003250  B0D8               	btfsc	status,0,c
  8053  003252  0012               	return	
  8054  003254  D7E4               	goto	l5649
  8055  003256                     __end_of_delay:
  8056                           	opt stack 0
  8057                           tblptru	equ	0xFF8
  8058                           tblptrh	equ	0xFF7
  8059                           tblptrl	equ	0xFF6
  8060                           tablat	equ	0xFF5
  8061                           prodh	equ	0xFF4
  8062                           prodl	equ	0xFF3
  8063                           intcon	equ	0xFF2
  8064                           postinc0	equ	0xFEE
  8065                           wreg	equ	0xFE8
  8066                           indf1	equ	0xFE7
  8067                           postdec1	equ	0xFE5
  8068                           fsr1h	equ	0xFE2
  8069                           fsr1l	equ	0xFE1
  8070                           indf2	equ	0xFDF
  8071                           postinc2	equ	0xFDE
  8072                           fsr2h	equ	0xFDA
  8073                           fsr2l	equ	0xFD9
  8074                           status	equ	0xFD8
  8075                           
  8076 ;; *************** function _memcpy *****************
  8077 ;; Defined at:
  8078 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memcpy.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  d1              2   15[COMRAM] PTR void 
  8081 ;;		 -> lcd_display_array(80), 
  8082 ;;  s1              2   17[COMRAM] PTR const void 
  8083 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1080), 
  8084 ;;  n               2   19[COMRAM] unsigned int 
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;  s               2   23[COMRAM] PTR const unsigned char 
  8087 ;;		 -> clcd_display_string_details.string(40), str(13), clcd_display_string_details(1080), 
  8088 ;;  d               2   21[COMRAM] PTR unsigned char 
  8089 ;;		 -> lcd_display_array(80), 
  8090 ;; Return value:  Size  Location     Type
  8091 ;;                  2   15[COMRAM] PTR void 
  8092 ;; Registers used:
  8093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8099 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8100 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8102 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8103 ;;Total ram usage:       10 bytes
  8104 ;; Hardware stack levels used:    1
  8105 ;; Hardware stack levels required when called:    5
  8106 ;; This function calls:
  8107 ;;		Nothing
  8108 ;; This function is called by:
  8109 ;;		_clcd_display_string_config
  8110 ;;		_scroll_left_to_right
  8111 ;;		_scroll_right_to_left
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           	psect	text34
  8116  00336C                     __ptext34:
  8117                           	opt stack 0
  8118  00336C                     _memcpy:
  8119                           	opt stack 23
  8120                           
  8121                           ;incstack = 0
  8122  00336C  C012  F018         	movff	memcpy@s1,memcpy@s
  8123  003370  C013  F019         	movff	memcpy@s1+1,memcpy@s+1
  8124  003374  C010  F016         	movff	memcpy@d1,memcpy@d
  8125  003378  C011  F017         	movff	memcpy@d1+1,memcpy@d+1
  8126  00337C  D00E               	goto	l5833
  8127  00337E                     l5827:
  8128  00337E  C018  FFD9         	movff	memcpy@s,fsr2l
  8129  003382  C019  FFDA         	movff	memcpy@s+1,fsr2h
  8130  003386  C016  FFE1         	movff	memcpy@d,fsr1l
  8131  00338A  C017  FFE2         	movff	memcpy@d+1,fsr1h
  8132  00338E  CFDF FFE7          	movff	indf2,indf1
  8133  003392  4A18               	infsnz	memcpy@s,f,c
  8134  003394  2A19               	incf	memcpy@s+1,f,c
  8135  003396  4A16               	infsnz	memcpy@d,f,c
  8136  003398  2A17               	incf	memcpy@d+1,f,c
  8137  00339A                     l5833:
  8138  00339A  0614               	decf	memcpy@n,f,c
  8139  00339C  A0D8               	btfss	status,0,c
  8140  00339E  0615               	decf	memcpy@n+1,f,c
  8141  0033A0  2814               	incf	memcpy@n,w,c
  8142  0033A2  E1ED               	bnz	l5827
  8143  0033A4  2815               	incf	memcpy@n+1,w,c
  8144  0033A6  B4D8               	btfsc	status,2,c
  8145  0033A8  0012               	return	
  8146  0033AA  D7E9               	goto	l5827
  8147  0033AC                     __end_of_memcpy:
  8148                           	opt stack 0
  8149                           tblptru	equ	0xFF8
  8150                           tblptrh	equ	0xFF7
  8151                           tblptrl	equ	0xFF6
  8152                           tablat	equ	0xFF5
  8153                           prodh	equ	0xFF4
  8154                           prodl	equ	0xFF3
  8155                           intcon	equ	0xFF2
  8156                           postinc0	equ	0xFEE
  8157                           wreg	equ	0xFE8
  8158                           indf1	equ	0xFE7
  8159                           postdec1	equ	0xFE5
  8160                           fsr1h	equ	0xFE2
  8161                           fsr1l	equ	0xFE1
  8162                           indf2	equ	0xFDF
  8163                           postinc2	equ	0xFDE
  8164                           fsr2h	equ	0xFDA
  8165                           fsr2l	equ	0xFD9
  8166                           status	equ	0xFD8
  8167                           
  8168 ;; *************** function __delay_MS *****************
  8169 ;; Defined at:
  8170 ;;		line 29 in file "delay.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;  delay           2   15[COMRAM] int 
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;  val             2   18[COMRAM] int 
  8175 ;; Return value:  Size  Location     Type
  8176 ;;                  1    wreg      void 
  8177 ;; Registers used:
  8178 ;;		wreg, status,2, status,0, cstack
  8179 ;; Tracked objects:
  8180 ;;		On entry : 0/0
  8181 ;;		On exit  : 0/0
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8184 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8187 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8188 ;;Total ram usage:        5 bytes
  8189 ;; Hardware stack levels used:    1
  8190 ;; Hardware stack levels required when called:    6
  8191 ;; This function calls:
  8192 ;;		_TMR1_HasOverflowOccured
  8193 ;;		_TMR1_Reload
  8194 ;;		_TMR1_StartTimer
  8195 ;;		_TMR1_StopTimer
  8196 ;; This function is called by:
  8197 ;;		_init_CLCD_config
  8198 ;;		_main
  8199 ;;		_put_char
  8200 ;; This function uses a non-reentrant model
  8201 ;;
  8202                           
  8203                           	psect	text35
  8204  0032E6                     __ptext35:
  8205                           	opt stack 0
  8206  0032E6                     __delay_MS:
  8207                           	opt stack 20
  8208                           
  8209                           ;delay.c: 30: int val = 0;
  8210                           
  8211                           ;incstack = 0
  8212  0032E6  0E00               	movlw	0
  8213  0032E8  6E14               	movwf	__delay_MS@val+1,c
  8214  0032EA  0E00               	movlw	0
  8215  0032EC  6E13               	movwf	__delay_MS@val,c
  8216                           
  8217                           ;delay.c: 31: for (val = 0; val < delay; val++) {
  8218  0032EE  0E00               	movlw	0
  8219  0032F0  6E14               	movwf	__delay_MS@val+1,c
  8220  0032F2  0E00               	movlw	0
  8221  0032F4  6E13               	movwf	__delay_MS@val,c
  8222  0032F6  D00E               	goto	l5889
  8223  0032F8                     l5877:
  8224                           
  8225                           ;delay.c: 32: TMR1_Reload();
  8226  0032F8  ECDF  F01B         	call	_TMR1_Reload	;wreg free
  8227                           
  8228                           ;delay.c: 33: TMR1_StartTimer();
  8229  0032FC  EC16  F01C         	call	_TMR1_StartTimer	;wreg free
  8230  003300                     l5881:
  8231  003300  ECE5  F01B         	call	_TMR1_HasOverflowOccured	;wreg free
  8232  003304  0900               	iorlw	0
  8233  003306  B4D8               	btfsc	status,2,c
  8234  003308  D7FB               	goto	l5881
  8235                           
  8236                           ;delay.c: 35: TMR1_StopTimer();
  8237  00330A  EC12  F01C         	call	_TMR1_StopTimer	;wreg free
  8238                           
  8239                           ;delay.c: 36: PIR1bits.TMR1IF = 0;
  8240  00330E  909E               	bcf	3998,0,c	;volatile
  8241  003310  4A13               	infsnz	__delay_MS@val,f,c
  8242  003312  2A14               	incf	__delay_MS@val+1,f,c
  8243  003314                     l5889:
  8244  003314  5010               	movf	__delay_MS@delay,w,c
  8245  003316  5C13               	subwf	__delay_MS@val,w,c
  8246  003318  5014               	movf	__delay_MS@val+1,w,c
  8247  00331A  0A80               	xorlw	128
  8248  00331C  6E12               	movwf	??__delay_MS& (0+255),c
  8249  00331E  5011               	movf	__delay_MS@delay+1,w,c
  8250  003320  0A80               	xorlw	128
  8251  003322  5812               	subwfb	??__delay_MS& (0+255),w,c
  8252  003324  B0D8               	btfsc	status,0,c
  8253  003326  0012               	return	
  8254  003328  D7E7               	goto	l5877
  8255  00332A                     __end_of__delay_MS:
  8256                           	opt stack 0
  8257                           tblptru	equ	0xFF8
  8258                           tblptrh	equ	0xFF7
  8259                           tblptrl	equ	0xFF6
  8260                           tablat	equ	0xFF5
  8261                           prodh	equ	0xFF4
  8262                           prodl	equ	0xFF3
  8263                           intcon	equ	0xFF2
  8264                           postinc0	equ	0xFEE
  8265                           wreg	equ	0xFE8
  8266                           indf1	equ	0xFE7
  8267                           postdec1	equ	0xFE5
  8268                           fsr1h	equ	0xFE2
  8269                           fsr1l	equ	0xFE1
  8270                           indf2	equ	0xFDF
  8271                           postinc2	equ	0xFDE
  8272                           fsr2h	equ	0xFDA
  8273                           fsr2l	equ	0xFD9
  8274                           status	equ	0xFD8
  8275                           
  8276 ;; *************** function _TMR1_StopTimer *****************
  8277 ;; Defined at:
  8278 ;;		line 94 in file "mcc_generated_files/tmr1.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;		None
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;		None
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  1    wreg      void 
  8285 ;; Registers used:
  8286 ;;		None
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8296 ;;Total ram usage:        0 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    5
  8299 ;; This function calls:
  8300 ;;		Nothing
  8301 ;; This function is called by:
  8302 ;;		__delay_MS
  8303 ;;		_main
  8304 ;; This function uses a non-reentrant model
  8305 ;;
  8306                           
  8307                           	psect	text36
  8308  003824                     __ptext36:
  8309                           	opt stack 0
  8310  003824                     _TMR1_StopTimer:
  8311                           	opt stack 20
  8312                           
  8313                           ;tmr1.c: 97: T1CONbits.TMR1ON = 0;
  8314                           
  8315                           ;incstack = 0
  8316  003824  90CD               	bcf	4045,0,c	;volatile
  8317  003826  0012               	return		;funcret
  8318  003828                     __end_of_TMR1_StopTimer:
  8319                           	opt stack 0
  8320                           tblptru	equ	0xFF8
  8321                           tblptrh	equ	0xFF7
  8322                           tblptrl	equ	0xFF6
  8323                           tablat	equ	0xFF5
  8324                           prodh	equ	0xFF4
  8325                           prodl	equ	0xFF3
  8326                           intcon	equ	0xFF2
  8327                           postinc0	equ	0xFEE
  8328                           wreg	equ	0xFE8
  8329                           indf1	equ	0xFE7
  8330                           postdec1	equ	0xFE5
  8331                           fsr1h	equ	0xFE2
  8332                           fsr1l	equ	0xFE1
  8333                           indf2	equ	0xFDF
  8334                           postinc2	equ	0xFDE
  8335                           fsr2h	equ	0xFDA
  8336                           fsr2l	equ	0xFD9
  8337                           status	equ	0xFD8
  8338                           
  8339 ;; *************** function _TMR1_Reload *****************
  8340 ;; Defined at:
  8341 ;;		line 136 in file "mcc_generated_files/tmr1.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;		None
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;		None
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  1    wreg      void 
  8348 ;; Registers used:
  8349 ;;		wreg, status,2
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8359 ;;Total ram usage:        0 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    5
  8362 ;; This function calls:
  8363 ;;		Nothing
  8364 ;; This function is called by:
  8365 ;;		__delay_MS
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           	psect	text37
  8370  0037BE                     __ptext37:
  8371                           	opt stack 0
  8372  0037BE                     _TMR1_Reload:
  8373                           	opt stack 20
  8374                           
  8375                           ;tmr1.c: 139: TMR1H = (timer1ReloadVal >> 8);
  8376                           
  8377                           ;incstack = 0
  8378  0037BE  0100               	movlb	0	; () banked
  8379  0037C0  51FC               	movf	(_timer1ReloadVal+1)& (0+255),w,b	;volatile
  8380  0037C2  6ECF               	movwf	4047,c	;volatile
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;tmr1.c: 140: TMR1L = (uint8_t) timer1ReloadVal;
  8384  0037C4  C0FB  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8385                           
  8386                           ; BSR set to: 0
  8387  0037C8  0012               	return		;funcret
  8388  0037CA                     __end_of_TMR1_Reload:
  8389                           	opt stack 0
  8390                           tblptru	equ	0xFF8
  8391                           tblptrh	equ	0xFF7
  8392                           tblptrl	equ	0xFF6
  8393                           tablat	equ	0xFF5
  8394                           prodh	equ	0xFF4
  8395                           prodl	equ	0xFF3
  8396                           intcon	equ	0xFF2
  8397                           postinc0	equ	0xFEE
  8398                           wreg	equ	0xFE8
  8399                           indf1	equ	0xFE7
  8400                           postdec1	equ	0xFE5
  8401                           fsr1h	equ	0xFE2
  8402                           fsr1l	equ	0xFE1
  8403                           indf2	equ	0xFDF
  8404                           postinc2	equ	0xFDE
  8405                           fsr2h	equ	0xFDA
  8406                           fsr2l	equ	0xFD9
  8407                           status	equ	0xFD8
  8408                           
  8409 ;; *************** function _TMR1_HasOverflowOccured *****************
  8410 ;; Defined at:
  8411 ;;		line 153 in file "mcc_generated_files/tmr1.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;		None
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;		None
  8416 ;; Return value:  Size  Location     Type
  8417 ;;                  1    wreg      unsigned char 
  8418 ;; Registers used:
  8419 ;;		wreg
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8429 ;;Total ram usage:        0 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    5
  8432 ;; This function calls:
  8433 ;;		Nothing
  8434 ;; This function is called by:
  8435 ;;		__delay_MS
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           	psect	text38
  8440  0037CA                     __ptext38:
  8441                           	opt stack 0
  8442  0037CA                     _TMR1_HasOverflowOccured:
  8443                           	opt stack 20
  8444                           
  8445                           ;tmr1.c: 156: return(PIR1bits.TMR1IF);
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;incstack = 0
  8449  0037CA  A09E               	btfss	3998,0,c	;volatile
  8450  0037CC  D002               	goto	u5410
  8451  0037CE  0E01               	movlw	1
  8452  0037D0  0012               	return	
  8453  0037D2                     u5410:
  8454  0037D2  0E00               	movlw	0
  8455  0037D4  0012               	return	
  8456  0037D6                     __end_of_TMR1_HasOverflowOccured:
  8457                           	opt stack 0
  8458                           tblptru	equ	0xFF8
  8459                           tblptrh	equ	0xFF7
  8460                           tblptrl	equ	0xFF6
  8461                           tablat	equ	0xFF5
  8462                           prodh	equ	0xFF4
  8463                           prodl	equ	0xFF3
  8464                           intcon	equ	0xFF2
  8465                           postinc0	equ	0xFEE
  8466                           wreg	equ	0xFE8
  8467                           indf1	equ	0xFE7
  8468                           postdec1	equ	0xFE5
  8469                           fsr1h	equ	0xFE2
  8470                           fsr1l	equ	0xFE1
  8471                           indf2	equ	0xFDF
  8472                           postinc2	equ	0xFDE
  8473                           fsr2h	equ	0xFDA
  8474                           fsr2l	equ	0xFD9
  8475                           status	equ	0xFD8
  8476                           
  8477 ;; *************** function ___awdiv *****************
  8478 ;; Defined at:
  8479 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8480 ;; Parameters:    Size  Location     Type
  8481 ;;  dividend        2   15[COMRAM] int 
  8482 ;;  divisor         2   17[COMRAM] int 
  8483 ;; Auto vars:     Size  Location     Type
  8484 ;;  quotient        2   21[COMRAM] int 
  8485 ;;  sign            1   20[COMRAM] unsigned char 
  8486 ;;  counter         1   19[COMRAM] unsigned char 
  8487 ;; Return value:  Size  Location     Type
  8488 ;;                  2   15[COMRAM] int 
  8489 ;; Registers used:
  8490 ;;		wreg, status,2, status,0
  8491 ;; Tracked objects:
  8492 ;;		On entry : 0/0
  8493 ;;		On exit  : 0/0
  8494 ;;		Unchanged: 0/0
  8495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8496 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8497 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;Total ram usage:        8 bytes
  8501 ;; Hardware stack levels used:    1
  8502 ;; Hardware stack levels required when called:    5
  8503 ;; This function calls:
  8504 ;;		Nothing
  8505 ;; This function is called by:
  8506 ;;		_init_clcd_cusotom_lcd
  8507 ;;		_display_string
  8508 ;; This function uses a non-reentrant model
  8509 ;;
  8510                           
  8511                           	psect	text39
  8512  002D94                     __ptext39:
  8513                           	opt stack 0
  8514  002D94                     ___awdiv:
  8515                           	opt stack 22
  8516                           
  8517                           ;incstack = 0
  8518  002D94  0E00               	movlw	0
  8519  002D96  6E15               	movwf	___awdiv@sign,c
  8520  002D98  AE13               	btfss	___awdiv@divisor+1,7,c
  8521  002D9A  D006               	goto	l6213
  8522  002D9C  6C12               	negf	___awdiv@divisor,c
  8523  002D9E  1E13               	comf	___awdiv@divisor+1,f,c
  8524  002DA0  B0D8               	btfsc	status,0,c
  8525  002DA2  2A13               	incf	___awdiv@divisor+1,f,c
  8526  002DA4  0E01               	movlw	1
  8527  002DA6  6E15               	movwf	___awdiv@sign,c
  8528  002DA8                     l6213:
  8529  002DA8  AE11               	btfss	___awdiv@dividend+1,7,c
  8530  002DAA  D006               	goto	l6219
  8531  002DAC  6C10               	negf	___awdiv@dividend,c
  8532  002DAE  1E11               	comf	___awdiv@dividend+1,f,c
  8533  002DB0  B0D8               	btfsc	status,0,c
  8534  002DB2  2A11               	incf	___awdiv@dividend+1,f,c
  8535  002DB4  0E01               	movlw	1
  8536  002DB6  1A15               	xorwf	___awdiv@sign,f,c
  8537  002DB8                     l6219:
  8538  002DB8  0E00               	movlw	0
  8539  002DBA  6E17               	movwf	___awdiv@quotient+1,c
  8540  002DBC  0E00               	movlw	0
  8541  002DBE  6E16               	movwf	___awdiv@quotient,c
  8542  002DC0  5012               	movf	___awdiv@divisor,w,c
  8543  002DC2  1013               	iorwf	___awdiv@divisor+1,w,c
  8544  002DC4  B4D8               	btfsc	status,2,c
  8545  002DC6  D01C               	goto	l6241
  8546  002DC8  0E01               	movlw	1
  8547  002DCA  6E14               	movwf	___awdiv@counter,c
  8548  002DCC  D004               	goto	l6227
  8549  002DCE                     l6225:
  8550  002DCE  90D8               	bcf	status,0,c
  8551  002DD0  3612               	rlcf	___awdiv@divisor,f,c
  8552  002DD2  3613               	rlcf	___awdiv@divisor+1,f,c
  8553  002DD4  2A14               	incf	___awdiv@counter,f,c
  8554  002DD6                     l6227:
  8555  002DD6  AE13               	btfss	___awdiv@divisor+1,7,c
  8556  002DD8  D7FA               	goto	l6225
  8557  002DDA                     l6229:
  8558  002DDA  90D8               	bcf	status,0,c
  8559  002DDC  3616               	rlcf	___awdiv@quotient,f,c
  8560  002DDE  3617               	rlcf	___awdiv@quotient+1,f,c
  8561  002DE0  5012               	movf	___awdiv@divisor,w,c
  8562  002DE2  5C10               	subwf	___awdiv@dividend,w,c
  8563  002DE4  5013               	movf	___awdiv@divisor+1,w,c
  8564  002DE6  5811               	subwfb	___awdiv@dividend+1,w,c
  8565  002DE8  A0D8               	btfss	status,0,c
  8566  002DEA  D005               	goto	l6237
  8567  002DEC  5012               	movf	___awdiv@divisor,w,c
  8568  002DEE  5E10               	subwf	___awdiv@dividend,f,c
  8569  002DF0  5013               	movf	___awdiv@divisor+1,w,c
  8570  002DF2  5A11               	subwfb	___awdiv@dividend+1,f,c
  8571  002DF4  8016               	bsf	___awdiv@quotient,0,c
  8572  002DF6                     l6237:
  8573  002DF6  90D8               	bcf	status,0,c
  8574  002DF8  3213               	rrcf	___awdiv@divisor+1,f,c
  8575  002DFA  3212               	rrcf	___awdiv@divisor,f,c
  8576  002DFC  2E14               	decfsz	___awdiv@counter,f,c
  8577  002DFE  D7ED               	goto	l6229
  8578  002E00                     l6241:
  8579  002E00  5015               	movf	___awdiv@sign,w,c
  8580  002E02  B4D8               	btfsc	status,2,c
  8581  002E04  D004               	goto	l6245
  8582  002E06  6C16               	negf	___awdiv@quotient,c
  8583  002E08  1E17               	comf	___awdiv@quotient+1,f,c
  8584  002E0A  B0D8               	btfsc	status,0,c
  8585  002E0C  2A17               	incf	___awdiv@quotient+1,f,c
  8586  002E0E                     l6245:
  8587  002E0E  C016  F010         	movff	___awdiv@quotient,?___awdiv
  8588  002E12  C017  F011         	movff	___awdiv@quotient+1,?___awdiv+1
  8589  002E16  0012               	return	
  8590  002E18                     __end_of___awdiv:
  8591                           	opt stack 0
  8592                           tblptru	equ	0xFF8
  8593                           tblptrh	equ	0xFF7
  8594                           tblptrl	equ	0xFF6
  8595                           tablat	equ	0xFF5
  8596                           prodh	equ	0xFF4
  8597                           prodl	equ	0xFF3
  8598                           intcon	equ	0xFF2
  8599                           postinc0	equ	0xFEE
  8600                           wreg	equ	0xFE8
  8601                           indf1	equ	0xFE7
  8602                           postdec1	equ	0xFE5
  8603                           fsr1h	equ	0xFE2
  8604                           fsr1l	equ	0xFE1
  8605                           indf2	equ	0xFDF
  8606                           postinc2	equ	0xFDE
  8607                           fsr2h	equ	0xFDA
  8608                           fsr2l	equ	0xFD9
  8609                           status	equ	0xFD8
  8610                           
  8611 ;; *************** function _clcd_max_row *****************
  8612 ;; Defined at:
  8613 ;;		line 106 in file "clcd.c"
  8614 ;; Parameters:    Size  Location     Type
  8615 ;;		None
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;		None
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  1    wreg      unsigned char 
  8620 ;; Registers used:
  8621 ;;		wreg, status,2
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8631 ;;Total ram usage:        0 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; Hardware stack levels required when called:    5
  8634 ;; This function calls:
  8635 ;;		Nothing
  8636 ;; This function is called by:
  8637 ;;		_reply_to_host
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           	psect	text40
  8642  003786                     __ptext40:
  8643                           	opt stack 0
  8644  003786                     _clcd_max_row:
  8645                           	opt stack 23
  8646                           
  8647                           ;clcd.c: 107: if (clcd_config_data.init_done == 0)
  8648                           
  8649                           ;incstack = 0
  8650  003786  5049               	movf	_clcd_config_data,w,c
  8651  003788  A4D8               	btfss	status,2,c
  8652  00378A  D002               	goto	l6387
  8653                           
  8654                           ;clcd.c: 108: return 0;
  8655  00378C  0E00               	movlw	0
  8656  00378E  0012               	return	
  8657  003790                     l6387:
  8658                           
  8659                           ;clcd.c: 109: else
  8660                           ;clcd.c: 110: return clcd_config_data.clcd_max_row;
  8661  003790  504A               	movf	_clcd_config_data+1,w,c
  8662  003792  0012               	return	
  8663  003794                     __end_of_clcd_max_row:
  8664                           	opt stack 0
  8665                           tblptru	equ	0xFF8
  8666                           tblptrh	equ	0xFF7
  8667                           tblptrl	equ	0xFF6
  8668                           tablat	equ	0xFF5
  8669                           prodh	equ	0xFF4
  8670                           prodl	equ	0xFF3
  8671                           intcon	equ	0xFF2
  8672                           postinc0	equ	0xFEE
  8673                           wreg	equ	0xFE8
  8674                           indf1	equ	0xFE7
  8675                           postdec1	equ	0xFE5
  8676                           fsr1h	equ	0xFE2
  8677                           fsr1l	equ	0xFE1
  8678                           indf2	equ	0xFDF
  8679                           postinc2	equ	0xFDE
  8680                           fsr2h	equ	0xFDA
  8681                           fsr2l	equ	0xFD9
  8682                           status	equ	0xFD8
  8683                           
  8684 ;; *************** function _clcd_max_col *****************
  8685 ;; Defined at:
  8686 ;;		line 113 in file "clcd.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;		None
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;		None
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  1    wreg      unsigned char 
  8693 ;; Registers used:
  8694 ;;		wreg, status,2
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;Total ram usage:        0 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    5
  8707 ;; This function calls:
  8708 ;;		Nothing
  8709 ;; This function is called by:
  8710 ;;		_reply_to_host
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           	psect	text41
  8715  003794                     __ptext41:
  8716                           	opt stack 0
  8717  003794                     _clcd_max_col:
  8718                           	opt stack 23
  8719                           
  8720                           ;clcd.c: 114: if (clcd_config_data.init_done == 0)
  8721                           
  8722                           ;incstack = 0
  8723  003794  5049               	movf	_clcd_config_data,w,c
  8724  003796  A4D8               	btfss	status,2,c
  8725  003798  D002               	goto	l6399
  8726                           
  8727                           ;clcd.c: 115: return 0;
  8728  00379A  0E00               	movlw	0
  8729  00379C  0012               	return	
  8730  00379E                     l6399:
  8731                           
  8732                           ;clcd.c: 116: else
  8733                           ;clcd.c: 117: return clcd_config_data.clcd_max_col;
  8734  00379E  504B               	movf	_clcd_config_data+2,w,c
  8735  0037A0  0012               	return	
  8736  0037A2                     __end_of_clcd_max_col:
  8737                           	opt stack 0
  8738                           tblptru	equ	0xFF8
  8739                           tblptrh	equ	0xFF7
  8740                           tblptrl	equ	0xFF6
  8741                           tablat	equ	0xFF5
  8742                           prodh	equ	0xFF4
  8743                           prodl	equ	0xFF3
  8744                           intcon	equ	0xFF2
  8745                           postinc0	equ	0xFEE
  8746                           wreg	equ	0xFE8
  8747                           indf1	equ	0xFE7
  8748                           postdec1	equ	0xFE5
  8749                           fsr1h	equ	0xFE2
  8750                           fsr1l	equ	0xFE1
  8751                           indf2	equ	0xFDF
  8752                           postinc2	equ	0xFDE
  8753                           fsr2h	equ	0xFDA
  8754                           fsr2l	equ	0xFD9
  8755                           status	equ	0xFD8
  8756                           
  8757 ;; *************** function _parse_cmd_str *****************
  8758 ;; Defined at:
  8759 ;;		line 76 in file "cmd_consol.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;  str             2    0[BANK0 ] PTR unsigned char 
  8762 ;;		 -> uart_str(150), 
  8763 ;; Auto vars:     Size  Location     Type
  8764 ;;  i               1    1[BANK1 ] unsigned char 
  8765 ;;  i               1    5[BANK1 ] unsigned char 
  8766 ;;  i               1    0[BANK1 ] unsigned char 
  8767 ;;  uid             1    4[BANK1 ] unsigned char 
  8768 ;;  uid             1    9[BANK1 ] unsigned char 
  8769 ;;  uid             1    8[BANK1 ] unsigned char 
  8770 ;;  scroll          1    7[BANK1 ] unsigned char 
  8771 ;;  uid             1    6[BANK1 ] unsigned char 
  8772 ;;  column          1    3[BANK1 ] unsigned char 
  8773 ;;  row             1    2[BANK1 ] unsigned char 
  8774 ;;  temp            2   12[BANK1 ] PTR unsigned char 
  8775 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
  8776 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
  8777 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
  8778 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
  8779 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
  8780 ;;		 -> RAM(3895), STR_27(7), STR_25(7), NULL(0), 
  8781 ;;  ptr             2   10[BANK1 ] PTR unsigned char 
  8782 ;;		 -> uart_str(150), 
  8783 ;; Return value:  Size  Location     Type
  8784 ;;                  1    wreg      unsigned char 
  8785 ;; Registers used:
  8786 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8787 ;; Tracked objects:
  8788 ;;		On entry : 0/0
  8789 ;;		On exit  : 0/0
  8790 ;;		Unchanged: 0/0
  8791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8792 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8793 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8794 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8795 ;;      Totals:         0       5      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8796 ;;Total ram usage:       19 bytes
  8797 ;; Hardware stack levels used:    1
  8798 ;; Hardware stack levels required when called:    9
  8799 ;; This function calls:
  8800 ;;		_atoi
  8801 ;;		_collect_column
  8802 ;;		_collect_row
  8803 ;;		_isdigit
  8804 ;;		_memset
  8805 ;;		_printf
  8806 ;;		_strcpy
  8807 ;;		_strlen
  8808 ;;		_strstr
  8809 ;;		_strtok
  8810 ;; This function is called by:
  8811 ;;		_cmd_consol_task
  8812 ;; This function uses a non-reentrant model
  8813 ;;
  8814                           
  8815                           	psect	text42
  8816  0000AA                     __ptext42:
  8817                           	opt stack 0
  8818  0000AA                     _parse_cmd_str:
  8819                           	opt stack 20
  8820                           
  8821                           ;cmd_consol.c: 77: printf("%s..2\r\n", str);
  8822                           
  8823                           ;incstack = 0
  8824  0000AA  0EB2               	movlw	low STR_23
  8825  0000AC  6E24               	movwf	printf@f,c
  8826  0000AE  0EFF               	movlw	high STR_23
  8827  0000B0  6E25               	movwf	printf@f+1,c
  8828  0000B2  C0DA  F026         	movff	parse_cmd_str@str,?_printf+2
  8829  0000B6  C0DB  F027         	movff	parse_cmd_str@str+1,?_printf+3
  8830  0000BA  EC09  F011         	call	_printf	;wreg free
  8831                           
  8832                           ;cmd_consol.c: 78: char *temp;
  8833                           ;cmd_consol.c: 79: char *ptr = str;
  8834  0000BE  C0DA  F182         	movff	parse_cmd_str@str,parse_cmd_str@ptr
  8835  0000C2  C0DB  F183         	movff	parse_cmd_str@str+1,parse_cmd_str@ptr+1
  8836                           
  8837                           ;cmd_consol.c: 80: if ((temp = strstr(ptr, "KLM+MC?")) != (0)) {
  8838  0000C6  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8839  0000CA  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8840  0000CE  0EBA               	movlw	low STR_24
  8841  0000D0  6E2F               	movwf	strstr@s2,c
  8842  0000D2  0EFF               	movlw	high STR_24
  8843  0000D4  6E30               	movwf	strstr@s2+1,c
  8844  0000D6  EC37  F016         	call	_strstr	;wreg free
  8845  0000DA  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  8846  0000DE  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  8847  0000E2  0101               	movlb	1	; () banked
  8848  0000E4  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  8849  0000E6  0101               	movlb	1	; () banked
  8850  0000E8  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8851  0000EA  B4D8               	btfsc	status,2,c
  8852  0000EC  D037               	goto	l6663
  8853                           
  8854                           ; BSR set to: 1
  8855                           ;cmd_consol.c: 81: temp = strtok(ptr, "-', /=");
  8856  0000EE  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  8857  0000F2  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  8858  0000F6  0EDF               	movlw	low STR_25
  8859  0000F8  6E1F               	movwf	strtok@s2,c
  8860  0000FA  0EFF               	movlw	high STR_25
  8861  0000FC  6E20               	movwf	strtok@s2+1,c
  8862  0000FE  EC7E  F015         	call	_strtok	;wreg free
  8863  000102  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  8864  000106  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  8865                           
  8866                           ;cmd_consol.c: 82: if (temp != (0)) {
  8867  00010A  0101               	movlb	1	; () banked
  8868  00010C  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  8869  00010E  0101               	movlb	1	; () banked
  8870  000110  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8871  000112  B4D8               	btfsc	status,2,c
  8872  000114  EF95  F006         	goto	l7033
  8873                           
  8874                           ; BSR set to: 1
  8875                           ;cmd_consol.c: 83: strcpy(CMD, temp);
  8876  000118  0ECB               	movlw	low _CMD
  8877  00011A  6E10               	movwf	strcpy@to,c
  8878  00011C  0E00               	movlw	high _CMD
  8879  00011E  6E11               	movwf	strcpy@to+1,c
  8880  000120  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  8881  000124  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  8882  000128  EC50  F019         	call	_strcpy	;wreg free
  8883                           
  8884                           ;cmd_consol.c: 84: valid_cmd = 1;
  8885  00012C  0E01               	movlw	1
  8886  00012E  6E48               	movwf	_valid_cmd,c
  8887                           
  8888                           ;cmd_consol.c: 85: memset(str, 0, strlen(str));
  8889  000130  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  8890  000134  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  8891  000138  0E00               	movlw	0
  8892  00013A  6E27               	movwf	memset@c+1,c
  8893  00013C  0E00               	movlw	0
  8894  00013E  6E26               	movwf	memset@c,c
  8895  000140  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  8896  000144  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  8897  000148  EC3E  F018         	call	_strlen	;wreg free
  8898  00014C  C01E  F028         	movff	?_strlen,memset@n
  8899  000150  C01F  F029         	movff	?_strlen+1,memset@n+1
  8900  000154  ECAC  F01A         	call	_memset	;wreg free
  8901  000158                     l6659:
  8902                           
  8903                           ;cmd_consol.c: 86: return 0;
  8904  000158  0E00               	movlw	0
  8905  00015A  0012               	return	
  8906  00015C                     l6663:
  8907  00015C  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8908  000160  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8909  000164  0EC2               	movlw	low STR_26
  8910  000166  6E2F               	movwf	strstr@s2,c
  8911  000168  0EFF               	movlw	high STR_26
  8912  00016A  6E30               	movwf	strstr@s2+1,c
  8913  00016C  EC37  F016         	call	_strstr	;wreg free
  8914  000170  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  8915  000174  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  8916  000178  0101               	movlb	1	; () banked
  8917  00017A  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  8918  00017C  0101               	movlb	1	; () banked
  8919  00017E  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8920  000180  B4D8               	btfsc	status,2,c
  8921  000182  D036               	goto	l6679
  8922                           
  8923                           ; BSR set to: 1
  8924                           ;cmd_consol.c: 89: temp = strtok(ptr, "-', /=");
  8925  000184  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  8926  000188  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  8927  00018C  0EDF               	movlw	low STR_25
  8928  00018E  6E1F               	movwf	strtok@s2,c
  8929  000190  0EFF               	movlw	high STR_25
  8930  000192  6E20               	movwf	strtok@s2+1,c
  8931  000194  EC7E  F015         	call	_strtok	;wreg free
  8932  000198  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  8933  00019C  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  8934                           
  8935                           ;cmd_consol.c: 90: if (temp != (0)) {
  8936  0001A0  0101               	movlb	1	; () banked
  8937  0001A2  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  8938  0001A4  0101               	movlb	1	; () banked
  8939  0001A6  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8940  0001A8  B4D8               	btfsc	status,2,c
  8941  0001AA  EF95  F006         	goto	l7033
  8942                           
  8943                           ; BSR set to: 1
  8944                           ;cmd_consol.c: 91: strcpy(CMD, temp);
  8945  0001AE  0ECB               	movlw	low _CMD
  8946  0001B0  6E10               	movwf	strcpy@to,c
  8947  0001B2  0E00               	movlw	high _CMD
  8948  0001B4  6E11               	movwf	strcpy@to+1,c
  8949  0001B6  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  8950  0001BA  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  8951  0001BE  EC50  F019         	call	_strcpy	;wreg free
  8952                           
  8953                           ;cmd_consol.c: 92: valid_cmd = 1;
  8954  0001C2  0E01               	movlw	1
  8955  0001C4  6E48               	movwf	_valid_cmd,c
  8956                           
  8957                           ;cmd_consol.c: 93: memset(str, 0, strlen(str));
  8958  0001C6  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  8959  0001CA  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  8960  0001CE  0E00               	movlw	0
  8961  0001D0  6E27               	movwf	memset@c+1,c
  8962  0001D2  0E00               	movlw	0
  8963  0001D4  6E26               	movwf	memset@c,c
  8964  0001D6  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  8965  0001DA  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  8966  0001DE  EC3E  F018         	call	_strlen	;wreg free
  8967  0001E2  C01E  F028         	movff	?_strlen,memset@n
  8968  0001E6  C01F  F029         	movff	?_strlen+1,memset@n+1
  8969  0001EA  ECAC  F01A         	call	_memset	;wreg free
  8970  0001EE  D7B4               	goto	l6659
  8971  0001F0                     l6679:
  8972  0001F0  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  8973  0001F4  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  8974  0001F8  0E4D               	movlw	low STR_28
  8975  0001FA  6E2F               	movwf	strstr@s2,c
  8976  0001FC  0EFF               	movlw	high STR_28
  8977  0001FE  6E30               	movwf	strstr@s2+1,c
  8978  000200  EC37  F016         	call	_strstr	;wreg free
  8979  000204  502D               	movf	?_strstr,w,c
  8980  000206  102E               	iorwf	?_strstr+1,w,c
  8981  000208  B4D8               	btfsc	status,2,c
  8982  00020A  D002               	goto	u6810
  8983  00020C  0E01               	movlw	1
  8984  00020E  D001               	goto	u6820
  8985  000210                     u6810:
  8986  000210  0E00               	movlw	0
  8987  000212                     u6820:
  8988  000212  0101               	movlb	1	; () banked
  8989  000214  6F84               	movwf	parse_cmd_str@temp& (0+255),b
  8990  000216  6B85               	clrf	(parse_cmd_str@temp+1)& (0+255),b
  8991  000218  0101               	movlb	1	; () banked
  8992  00021A  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  8993  00021C  0101               	movlb	1	; () banked
  8994  00021E  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  8995  000220  B4D8               	btfsc	status,2,c
  8996  000222  D03C               	goto	l6697
  8997                           
  8998                           ; BSR set to: 1
  8999                           ;cmd_consol.c: 97: temp = strtok(ptr, "-', /=");
  9000  000224  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9001  000228  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9002  00022C  0EDF               	movlw	low STR_25
  9003  00022E  6E1F               	movwf	strtok@s2,c
  9004  000230  0EFF               	movlw	high STR_25
  9005  000232  6E20               	movwf	strtok@s2+1,c
  9006  000234  EC7E  F015         	call	_strtok	;wreg free
  9007  000238  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9008  00023C  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9009                           
  9010                           ;cmd_consol.c: 98: if (temp != (0)) {
  9011  000240  0101               	movlb	1	; () banked
  9012  000242  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9013  000244  0101               	movlb	1	; () banked
  9014  000246  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9015  000248  B4D8               	btfsc	status,2,c
  9016  00024A  EF95  F006         	goto	l7033
  9017                           
  9018                           ; BSR set to: 1
  9019                           ;cmd_consol.c: 99: strcpy(CMD, temp);
  9020  00024E  0ECB               	movlw	low _CMD
  9021  000250  6E10               	movwf	strcpy@to,c
  9022  000252  0E00               	movlw	high _CMD
  9023  000254  6E11               	movwf	strcpy@to+1,c
  9024  000256  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9025  00025A  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9026  00025E  EC50  F019         	call	_strcpy	;wreg free
  9027                           
  9028                           ;cmd_consol.c: 100: valid_cmd = 1;
  9029  000262  0E01               	movlw	1
  9030  000264  6E48               	movwf	_valid_cmd,c
  9031                           
  9032                           ;cmd_consol.c: 101: memset(str, 0, strlen(str));
  9033  000266  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9034  00026A  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9035  00026E  0E00               	movlw	0
  9036  000270  6E27               	movwf	memset@c+1,c
  9037  000272  0E00               	movlw	0
  9038  000274  6E26               	movwf	memset@c,c
  9039  000276  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9040  00027A  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9041  00027E  EC3E  F018         	call	_strlen	;wreg free
  9042  000282  C01E  F028         	movff	?_strlen,memset@n
  9043  000286  C01F  F029         	movff	?_strlen+1,memset@n+1
  9044  00028A  ECAC  F01A         	call	_memset	;wreg free
  9045                           
  9046                           ;cmd_consol.c: 102: printf(".....\r\n");
  9047  00028E  0EAA               	movlw	low STR_30
  9048  000290  6E24               	movwf	printf@f,c
  9049  000292  0EFF               	movlw	high STR_30
  9050  000294  6E25               	movwf	printf@f+1,c
  9051  000296  EC09  F011         	call	_printf	;wreg free
  9052  00029A  D75E               	goto	l6659
  9053  00029C                     l6697:
  9054  00029C  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9055  0002A0  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9056  0002A4  0E8F               	movlw	low STR_31
  9057  0002A6  6E2F               	movwf	strstr@s2,c
  9058  0002A8  0EFF               	movlw	high STR_31
  9059  0002AA  6E30               	movwf	strstr@s2+1,c
  9060  0002AC  EC37  F016         	call	_strstr	;wreg free
  9061  0002B0  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  9062  0002B4  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  9063  0002B8  0101               	movlb	1	; () banked
  9064  0002BA  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9065  0002BC  0101               	movlb	1	; () banked
  9066  0002BE  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9067  0002C0  B4D8               	btfsc	status,2,c
  9068  0002C2  D092               	goto	l6735
  9069                           
  9070                           ; BSR set to: 1
  9071                           ;cmd_consol.c: 106: temp = strtok(ptr, "-', /=");
  9072  0002C4  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9073  0002C8  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9074  0002CC  0EDF               	movlw	low STR_25
  9075  0002CE  6E1F               	movwf	strtok@s2,c
  9076  0002D0  0EFF               	movlw	high STR_25
  9077  0002D2  6E20               	movwf	strtok@s2+1,c
  9078  0002D4  EC7E  F015         	call	_strtok	;wreg free
  9079  0002D8  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9080  0002DC  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9081                           
  9082                           ;cmd_consol.c: 107: if (temp != (0)) {
  9083  0002E0  0101               	movlb	1	; () banked
  9084  0002E2  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9085  0002E4  0101               	movlb	1	; () banked
  9086  0002E6  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9087  0002E8  B4D8               	btfsc	status,2,c
  9088  0002EA  EF95  F006         	goto	l7033
  9089                           
  9090                           ; BSR set to: 1
  9091                           ;cmd_consol.c: 108: strcpy(CMD, temp);
  9092  0002EE  0ECB               	movlw	low _CMD
  9093  0002F0  6E10               	movwf	strcpy@to,c
  9094  0002F2  0E00               	movlw	high _CMD
  9095  0002F4  6E11               	movwf	strcpy@to+1,c
  9096  0002F6  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9097  0002FA  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9098  0002FE  EC50  F019         	call	_strcpy	;wreg free
  9099                           
  9100                           ;cmd_consol.c: 109: temp = strtok((0), "-', /=");
  9101  000302  0E00               	movlw	0
  9102  000304  6E1D               	movwf	strtok@s1,c
  9103  000306  0E00               	movlw	0
  9104  000308  6E1E               	movwf	strtok@s1+1,c
  9105  00030A  0EDF               	movlw	low STR_25
  9106  00030C  6E1F               	movwf	strtok@s2,c
  9107  00030E  0EFF               	movlw	high STR_25
  9108  000310  6E20               	movwf	strtok@s2+1,c
  9109  000312  EC7E  F015         	call	_strtok	;wreg free
  9110  000316  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9111  00031A  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9112                           
  9113                           ;cmd_consol.c: 110: printf("%s..\r\n", temp);
  9114  00031E  0ED1               	movlw	low STR_34
  9115  000320  6E24               	movwf	printf@f,c
  9116  000322  0EFF               	movlw	high STR_34
  9117  000324  6E25               	movwf	printf@f+1,c
  9118  000326  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9119  00032A  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9120  00032E  EC09  F011         	call	_printf	;wreg free
  9121                           
  9122                           ;cmd_consol.c: 111: char row = 0, column = 0;
  9123  000332  0E00               	movlw	0
  9124  000334  0101               	movlb	1	; () banked
  9125  000336  6F7A               	movwf	parse_cmd_str@row& (0+255),b
  9126                           
  9127                           ; BSR set to: 1
  9128  000338  0E00               	movlw	0
  9129  00033A  0101               	movlb	1	; () banked
  9130  00033C  6F7B               	movwf	parse_cmd_str@column& (0+255),b
  9131                           
  9132                           ; BSR set to: 1
  9133                           ;cmd_consol.c: 112: if (temp != (0)) {
  9134  00033E  0101               	movlb	1	; () banked
  9135  000340  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9136  000342  0101               	movlb	1	; () banked
  9137  000344  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9138  000346  B4D8               	btfsc	status,2,c
  9139  000348  EF95  F006         	goto	l7033
  9140                           
  9141                           ; BSR set to: 1
  9142                           ;cmd_consol.c: 113: row = atoi(temp);
  9143  00034C  C184  F01E         	movff	parse_cmd_str@temp,atoi@s
  9144  000350  C185  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
  9145  000354  ECDD  F012         	call	_atoi	;wreg free
  9146  000358  501E               	movf	?_atoi,w,c
  9147  00035A  0101               	movlb	1	; () banked
  9148  00035C  6F7A               	movwf	parse_cmd_str@row& (0+255),b
  9149                           
  9150                           ; BSR set to: 1
  9151                           ;cmd_consol.c: 114: if (row > 0) {
  9152  00035E  0101               	movlb	1	; () banked
  9153  000360  517A               	movf	parse_cmd_str@row& (0+255),w,b
  9154  000362  0101               	movlb	1	; () banked
  9155  000364  B4D8               	btfsc	status,2,c
  9156  000366  EF95  F006         	goto	l7033
  9157                           
  9158                           ; BSR set to: 1
  9159                           ;cmd_consol.c: 115: temp = strtok((0), "-', /=");
  9160  00036A  0E00               	movlw	0
  9161  00036C  6E1D               	movwf	strtok@s1,c
  9162  00036E  0E00               	movlw	0
  9163  000370  6E1E               	movwf	strtok@s1+1,c
  9164  000372  0EDF               	movlw	low STR_25
  9165  000374  6E1F               	movwf	strtok@s2,c
  9166  000376  0EFF               	movlw	high STR_25
  9167  000378  6E20               	movwf	strtok@s2+1,c
  9168  00037A  EC7E  F015         	call	_strtok	;wreg free
  9169  00037E  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9170  000382  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9171                           
  9172                           ;cmd_consol.c: 116: if (temp != (0)) {
  9173  000386  0101               	movlb	1	; () banked
  9174  000388  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9175  00038A  0101               	movlb	1	; () banked
  9176  00038C  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9177  00038E  B4D8               	btfsc	status,2,c
  9178  000390  EF95  F006         	goto	l7033
  9179                           
  9180                           ; BSR set to: 1
  9181                           ;cmd_consol.c: 117: column = atoi(temp);
  9182  000394  C184  F01E         	movff	parse_cmd_str@temp,atoi@s
  9183  000398  C185  F01F         	movff	parse_cmd_str@temp+1,atoi@s+1
  9184  00039C  ECDD  F012         	call	_atoi	;wreg free
  9185  0003A0  501E               	movf	?_atoi,w,c
  9186  0003A2  0101               	movlb	1	; () banked
  9187  0003A4  6F7B               	movwf	parse_cmd_str@column& (0+255),b
  9188                           
  9189                           ; BSR set to: 1
  9190                           ;cmd_consol.c: 118: if (column > 0) {
  9191  0003A6  0101               	movlb	1	; () banked
  9192  0003A8  517B               	movf	parse_cmd_str@column& (0+255),w,b
  9193  0003AA  0101               	movlb	1	; () banked
  9194  0003AC  B4D8               	btfsc	status,2,c
  9195  0003AE  EF95  F006         	goto	l7033
  9196                           
  9197                           ; BSR set to: 1
  9198                           ;cmd_consol.c: 119: clcd_init_col = column;
  9199  0003B2  C17B  F081         	movff	parse_cmd_str@column,_clcd_init_col
  9200                           
  9201                           ;cmd_consol.c: 120: clcd_init_row = row;
  9202  0003B6  C17A  F082         	movff	parse_cmd_str@row,_clcd_init_row
  9203                           
  9204                           ; BSR set to: 1
  9205                           ;cmd_consol.c: 121: valid_cmd = 1;
  9206  0003BA  0E01               	movlw	1
  9207  0003BC  6E48               	movwf	_valid_cmd,c
  9208                           
  9209                           ; BSR set to: 1
  9210                           ;cmd_consol.c: 122: memset(str, 0, strlen(str));
  9211  0003BE  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9212  0003C2  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9213  0003C6  0E00               	movlw	0
  9214  0003C8  6E27               	movwf	memset@c+1,c
  9215  0003CA  0E00               	movlw	0
  9216  0003CC  6E26               	movwf	memset@c,c
  9217  0003CE  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9218  0003D2  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9219  0003D6  EC3E  F018         	call	_strlen	;wreg free
  9220  0003DA  C01E  F028         	movff	?_strlen,memset@n
  9221  0003DE  C01F  F029         	movff	?_strlen+1,memset@n+1
  9222  0003E2  ECAC  F01A         	call	_memset	;wreg free
  9223  0003E6  D6B8               	goto	l6659
  9224  0003E8                     l6735:
  9225  0003E8  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9226  0003EC  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9227  0003F0  0E57               	movlw	low STR_36
  9228  0003F2  6E2F               	movwf	strstr@s2,c
  9229  0003F4  0EFF               	movlw	high STR_36
  9230  0003F6  6E30               	movwf	strstr@s2+1,c
  9231  0003F8  EC37  F016         	call	_strstr	;wreg free
  9232  0003FC  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  9233  000400  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  9234  000404  0101               	movlb	1	; () banked
  9235  000406  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9236  000408  0101               	movlb	1	; () banked
  9237  00040A  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9238  00040C  B4D8               	btfsc	status,2,c
  9239  00040E  D036               	goto	l6751
  9240                           
  9241                           ; BSR set to: 1
  9242                           ;cmd_consol.c: 132: temp = strtok(ptr, "-', /=");
  9243  000410  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9244  000414  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9245  000418  0EDF               	movlw	low STR_25
  9246  00041A  6E1F               	movwf	strtok@s2,c
  9247  00041C  0EFF               	movlw	high STR_25
  9248  00041E  6E20               	movwf	strtok@s2+1,c
  9249  000420  EC7E  F015         	call	_strtok	;wreg free
  9250  000424  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9251  000428  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9252                           
  9253                           ;cmd_consol.c: 133: if (temp != (0)) {
  9254  00042C  0101               	movlb	1	; () banked
  9255  00042E  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9256  000430  0101               	movlb	1	; () banked
  9257  000432  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9258  000434  B4D8               	btfsc	status,2,c
  9259  000436  EF95  F006         	goto	l7033
  9260                           
  9261                           ; BSR set to: 1
  9262                           ;cmd_consol.c: 134: strcpy(CMD, temp);
  9263  00043A  0ECB               	movlw	low _CMD
  9264  00043C  6E10               	movwf	strcpy@to,c
  9265  00043E  0E00               	movlw	high _CMD
  9266  000440  6E11               	movwf	strcpy@to+1,c
  9267  000442  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9268  000446  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9269  00044A  EC50  F019         	call	_strcpy	;wreg free
  9270                           
  9271                           ;cmd_consol.c: 135: valid_cmd = 1;
  9272  00044E  0E01               	movlw	1
  9273  000450  6E48               	movwf	_valid_cmd,c
  9274                           
  9275                           ;cmd_consol.c: 136: memset(str, 0, strlen(str));
  9276  000452  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9277  000456  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9278  00045A  0E00               	movlw	0
  9279  00045C  6E27               	movwf	memset@c+1,c
  9280  00045E  0E00               	movlw	0
  9281  000460  6E26               	movwf	memset@c,c
  9282  000462  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9283  000466  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9284  00046A  EC3E  F018         	call	_strlen	;wreg free
  9285  00046E  C01E  F028         	movff	?_strlen,memset@n
  9286  000472  C01F  F029         	movff	?_strlen+1,memset@n+1
  9287  000476  ECAC  F01A         	call	_memset	;wreg free
  9288  00047A  D66E               	goto	l6659
  9289  00047C                     l6751:
  9290  00047C  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9291  000480  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9292  000484  0E61               	movlw	low STR_38
  9293  000486  6E2F               	movwf	strstr@s2,c
  9294  000488  0EFF               	movlw	high STR_38
  9295  00048A  6E30               	movwf	strstr@s2+1,c
  9296  00048C  EC37  F016         	call	_strstr	;wreg free
  9297  000490  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  9298  000494  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  9299  000498  0101               	movlb	1	; () banked
  9300  00049A  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9301  00049C  0101               	movlb	1	; () banked
  9302  00049E  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9303  0004A0  B4D8               	btfsc	status,2,c
  9304  0004A2  D0CF               	goto	l6815
  9305                           
  9306                           ; BSR set to: 1
  9307                           ;cmd_consol.c: 141: if (clcd_config_data.init_done == 1) {
  9308  0004A4  0449               	decf	_clcd_config_data,w,c
  9309  0004A6  A4D8               	btfss	status,2,c
  9310  0004A8  EF95  F006         	goto	l7033
  9311                           
  9312                           ; BSR set to: 1
  9313                           ;cmd_consol.c: 142: cmd_data.data_set = 0;
  9314  0004AC  0E00               	movlw	0
  9315  0004AE  0100               	movlb	0	; () banked
  9316  0004B0  6FAF               	movwf	(_cmd_data+41)& (0+255),b
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;cmd_consol.c: 143: temp = strtok(ptr, "-', /=");
  9320  0004B2  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9321  0004B6  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9322  0004BA  0EDF               	movlw	low STR_25
  9323  0004BC  6E1F               	movwf	strtok@s2,c
  9324  0004BE  0EFF               	movlw	high STR_25
  9325  0004C0  6E20               	movwf	strtok@s2+1,c
  9326  0004C2  EC7E  F015         	call	_strtok	;wreg free
  9327  0004C6  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9328  0004CA  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9329                           
  9330                           ;cmd_consol.c: 144: if (temp != (0)) {
  9331  0004CE  0101               	movlb	1	; () banked
  9332  0004D0  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9333  0004D2  0101               	movlb	1	; () banked
  9334  0004D4  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9335  0004D6  B4D8               	btfsc	status,2,c
  9336  0004D8  EF95  F006         	goto	l7033
  9337                           
  9338                           ; BSR set to: 1
  9339                           ;cmd_consol.c: 145: printf("temp = %s, ", temp);
  9340  0004DC  0EB9               	movlw	low STR_40
  9341  0004DE  6E24               	movwf	printf@f,c
  9342  0004E0  0EFE               	movlw	high STR_40
  9343  0004E2  6E25               	movwf	printf@f+1,c
  9344  0004E4  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9345  0004E8  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9346  0004EC  EC09  F011         	call	_printf	;wreg free
  9347                           
  9348                           ;cmd_consol.c: 146: strcpy(CMD, temp);
  9349  0004F0  0ECB               	movlw	low _CMD
  9350  0004F2  6E10               	movwf	strcpy@to,c
  9351  0004F4  0E00               	movlw	high _CMD
  9352  0004F6  6E11               	movwf	strcpy@to+1,c
  9353  0004F8  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9354  0004FC  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9355  000500  EC50  F019         	call	_strcpy	;wreg free
  9356                           
  9357                           ;cmd_consol.c: 147: char uid = 0;
  9358  000504  0E00               	movlw	0
  9359  000506  0101               	movlb	1	; () banked
  9360  000508  6F7E               	movwf	parse_cmd_str@uid& (0+255),b
  9361                           
  9362                           ; BSR set to: 1
  9363                           ;cmd_consol.c: 148: cmd_data.uid = -1;
  9364  00050A  0100               	movlb	0	; () banked
  9365  00050C  6986               	setf	_cmd_data& (0+255),b
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;cmd_consol.c: 149: temp = strtok((0), "-', /=");
  9369  00050E  0E00               	movlw	0
  9370  000510  6E1D               	movwf	strtok@s1,c
  9371  000512  0E00               	movlw	0
  9372  000514  6E1E               	movwf	strtok@s1+1,c
  9373  000516  0EDF               	movlw	low STR_25
  9374  000518  6E1F               	movwf	strtok@s2,c
  9375  00051A  0EFF               	movlw	high STR_25
  9376  00051C  6E20               	movwf	strtok@s2+1,c
  9377  00051E  EC7E  F015         	call	_strtok	;wreg free
  9378  000522  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9379  000526  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9380                           
  9381                           ;cmd_consol.c: 150: if (temp != (0)) {
  9382  00052A  0101               	movlb	1	; () banked
  9383  00052C  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9384  00052E  0101               	movlb	1	; () banked
  9385  000530  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9386  000532  B4D8               	btfsc	status,2,c
  9387  000534  D3FA               	goto	l7033
  9388                           
  9389                           ; BSR set to: 1
  9390                           ;cmd_consol.c: 151: printf("temp = %s, ", temp);
  9391  000536  0EB9               	movlw	low STR_40
  9392  000538  6E24               	movwf	printf@f,c
  9393  00053A  0EFE               	movlw	high STR_40
  9394  00053C  6E25               	movwf	printf@f+1,c
  9395  00053E  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9396  000542  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9397  000546  EC09  F011         	call	_printf	;wreg free
  9398                           
  9399                           ;cmd_consol.c: 152: char i = 0;
  9400  00054A  0E00               	movlw	0
  9401  00054C  0101               	movlb	1	; () banked
  9402  00054E  6F78               	movwf	parse_cmd_str@i& (0+255),b
  9403                           
  9404                           ; BSR set to: 1
  9405                           ;cmd_consol.c: 153: uid = temp[0];
  9406  000550  C184  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9407  000554  C185  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9408  000558  0E00               	movlw	low (__mediumconst shr (0+16))
  9409  00055A  6EF8               	movwf	tblptru,c
  9410  00055C  0E0F               	movlw	(high __ramtop+-1)
  9411  00055E  64F7               	cpfsgt	tblptrh,c
  9412  000560  D003               	bra	u6977
  9413  000562  0008               	tblrd		*
  9414  000564  50F5               	movf	tablat,w,c
  9415  000566  D005               	bra	u6970
  9416  000568                     u6977:
  9417  000568  CFF6 FFE9          	movff	tblptrl,fsr0l
  9418  00056C  CFF7 FFEA          	movff	tblptrh,fsr0h
  9419  000570  50EF               	movf	indf0,w,c
  9420  000572                     u6970:
  9421  000572  0101               	movlb	1	; () banked
  9422  000574  6F7E               	movwf	parse_cmd_str@uid& (0+255),b
  9423                           
  9424                           ; BSR set to: 1
  9425                           ;cmd_consol.c: 154: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9426  000576  0E40               	movlw	64
  9427  000578  0101               	movlb	1	; () banked
  9428  00057A  657E               	cpfsgt	parse_cmd_str@uid& (0+255),b
  9429  00057C  D060               	goto	l6811
  9430                           
  9431                           ; BSR set to: 1
  9432  00057E  504C               	movf	_clcd_config_data+3,w,c
  9433  000580  0101               	movlb	1	; () banked
  9434  000582  5D7E               	subwf	parse_cmd_str@uid& (0+255),w,b
  9435  000584  B0D8               	btfsc	status,0,c
  9436  000586  D05B               	goto	l6811
  9437                           
  9438                           ; BSR set to: 1
  9439                           ;cmd_consol.c: 155: printf("uid = %d, ", uid);
  9440  000588  0E2C               	movlw	low STR_43
  9441  00058A  6E24               	movwf	printf@f,c
  9442  00058C  0EFF               	movlw	high STR_43
  9443  00058E  6E25               	movwf	printf@f+1,c
  9444  000590  C17E  F026         	movff	parse_cmd_str@uid,?_printf+2
  9445  000594  6A27               	clrf	?_printf+3,c
  9446  000596  EC09  F011         	call	_printf	;wreg free
  9447                           
  9448                           ;cmd_consol.c: 156: cmd_data.uid = uid;
  9449  00059A  C17E  F086         	movff	parse_cmd_str@uid,_cmd_data
  9450                           
  9451                           ;cmd_consol.c: 157: temp = strtok((0), ",");
  9452  00059E  0E00               	movlw	0
  9453  0005A0  6E1D               	movwf	strtok@s1,c
  9454  0005A2  0E00               	movlw	0
  9455  0005A4  6E1E               	movwf	strtok@s1+1,c
  9456  0005A6  0EFD               	movlw	low STR_44
  9457  0005A8  6E1F               	movwf	strtok@s2,c
  9458  0005AA  0EFF               	movlw	high STR_44
  9459  0005AC  6E20               	movwf	strtok@s2+1,c
  9460  0005AE  EC7E  F015         	call	_strtok	;wreg free
  9461  0005B2  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9462  0005B6  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9463                           
  9464                           ;cmd_consol.c: 158: if (temp != (0)) {
  9465  0005BA  0101               	movlb	1	; () banked
  9466  0005BC  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9467  0005BE  0101               	movlb	1	; () banked
  9468  0005C0  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9469  0005C2  B4D8               	btfsc	status,2,c
  9470  0005C4  D3B2               	goto	l7033
  9471                           
  9472                           ; BSR set to: 1
  9473                           ;cmd_consol.c: 159: printf("str = %s\r\n", temp);
  9474  0005C6  0E21               	movlw	low STR_45
  9475  0005C8  6E24               	movwf	printf@f,c
  9476  0005CA  0EFF               	movlw	high STR_45
  9477  0005CC  6E25               	movwf	printf@f+1,c
  9478  0005CE  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9479  0005D2  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9480  0005D6  EC09  F011         	call	_printf	;wreg free
  9481                           
  9482                           ;cmd_consol.c: 160: if (strlen(temp) < 40) {
  9483  0005DA  C184  F01E         	movff	parse_cmd_str@temp,strlen@s
  9484  0005DE  C185  F01F         	movff	parse_cmd_str@temp+1,strlen@s+1
  9485  0005E2  EC3E  F018         	call	_strlen	;wreg free
  9486  0005E6  501F               	movf	?_strlen+1,w,c
  9487  0005E8  E128               	bnz	l6807
  9488  0005EA  0E28               	movlw	40
  9489  0005EC  5C1E               	subwf	?_strlen,w,c
  9490  0005EE  B0D8               	btfsc	status,0,c
  9491  0005F0  D024               	goto	l6807
  9492                           
  9493                           ;cmd_consol.c: 161: strcpy(cmd_data.data, temp);
  9494  0005F2  0E87               	movlw	low (_cmd_data+1)
  9495  0005F4  6E10               	movwf	strcpy@to,c
  9496  0005F6  0E00               	movlw	high (_cmd_data+1)
  9497  0005F8  6E11               	movwf	strcpy@to+1,c
  9498  0005FA  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9499  0005FE  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9500  000602  EC50  F019         	call	_strcpy	;wreg free
  9501                           
  9502                           ;cmd_consol.c: 162: valid_cmd = 1;
  9503  000606  0E01               	movlw	1
  9504  000608  6E48               	movwf	_valid_cmd,c
  9505                           
  9506                           ;cmd_consol.c: 163: cmd_data.data_set = 1;
  9507  00060A  0E01               	movlw	1
  9508  00060C  0100               	movlb	0	; () banked
  9509  00060E  6FAF               	movwf	(_cmd_data+41)& (0+255),b
  9510                           
  9511                           ;cmd_consol.c: 164: memset(str, 0, strlen(str));
  9512  000610  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9513  000614  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9514  000618  0E00               	movlw	0
  9515  00061A  6E27               	movwf	memset@c+1,c
  9516  00061C  0E00               	movlw	0
  9517  00061E  6E26               	movwf	memset@c,c
  9518  000620  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9519  000624  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9520  000628  EC3E  F018         	call	_strlen	;wreg free
  9521  00062C  C01E  F028         	movff	?_strlen,memset@n
  9522  000630  C01F  F029         	movff	?_strlen+1,memset@n+1
  9523  000634  ECAC  F01A         	call	_memset	;wreg free
  9524  000638  D58F               	goto	l6659
  9525  00063A                     l6807:
  9526                           
  9527                           ;cmd_consol.c: 167: return 2;
  9528  00063A  0E02               	movlw	2
  9529  00063C  0012               	return	
  9530  00063E                     l6811:
  9531                           
  9532                           ;cmd_consol.c: 171: return 7;
  9533  00063E  0E07               	movlw	7
  9534  000640  0012               	return	
  9535  000642                     l6815:
  9536  000642  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9537  000646  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9538  00064A  0ED1               	movlw	low STR_46
  9539  00064C  6E2F               	movwf	strstr@s2,c
  9540  00064E  0EFE               	movlw	high STR_46
  9541  000650  6E30               	movwf	strstr@s2+1,c
  9542  000652  EC37  F016         	call	_strstr	;wreg free
  9543  000656  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  9544  00065A  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  9545  00065E  0101               	movlb	1	; () banked
  9546  000660  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9547  000662  0101               	movlb	1	; () banked
  9548  000664  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9549  000666  B4D8               	btfsc	status,2,c
  9550  000668  D134               	goto	l6897
  9551                           
  9552                           ; BSR set to: 1
  9553                           ;cmd_consol.c: 177: printf("%s...4\r\n", temp);
  9554  00066A  0E6B               	movlw	low STR_47
  9555  00066C  6E24               	movwf	printf@f,c
  9556  00066E  0EFF               	movlw	high STR_47
  9557  000670  6E25               	movwf	printf@f+1,c
  9558  000672  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9559  000676  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9560  00067A  EC09  F011         	call	_printf	;wreg free
  9561                           
  9562                           ;cmd_consol.c: 178: if (clcd_config_data.init_done == 1) {
  9563  00067E  0449               	decf	_clcd_config_data,w,c
  9564  000680  A4D8               	btfss	status,2,c
  9565  000682  D353               	goto	l7033
  9566                           
  9567                           ;cmd_consol.c: 179: cmd_data.scroll_set = 0;
  9568  000684  0E00               	movlw	0
  9569  000686  0100               	movlb	0	; () banked
  9570  000688  6FB6               	movwf	(_cmd_data+48)& (0+255),b
  9571                           
  9572                           ; BSR set to: 0
  9573                           ;cmd_consol.c: 180: temp = strtok(ptr, "-', /=");
  9574  00068A  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9575  00068E  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9576  000692  0EDF               	movlw	low STR_25
  9577  000694  6E1F               	movwf	strtok@s2,c
  9578  000696  0EFF               	movlw	high STR_25
  9579  000698  6E20               	movwf	strtok@s2+1,c
  9580  00069A  EC7E  F015         	call	_strtok	;wreg free
  9581  00069E  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9582  0006A2  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9583                           
  9584                           ;cmd_consol.c: 181: if (temp != (0)) {
  9585  0006A6  0101               	movlb	1	; () banked
  9586  0006A8  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9587  0006AA  0101               	movlb	1	; () banked
  9588  0006AC  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9589  0006AE  B4D8               	btfsc	status,2,c
  9590  0006B0  D33C               	goto	l7033
  9591                           
  9592                           ; BSR set to: 1
  9593                           ;cmd_consol.c: 182: strcpy(CMD, temp);
  9594  0006B2  0ECB               	movlw	low _CMD
  9595  0006B4  6E10               	movwf	strcpy@to,c
  9596  0006B6  0E00               	movlw	high _CMD
  9597  0006B8  6E11               	movwf	strcpy@to+1,c
  9598  0006BA  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9599  0006BE  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9600  0006C2  EC50  F019         	call	_strcpy	;wreg free
  9601                           
  9602                           ;cmd_consol.c: 183: char scroll = 0;
  9603  0006C6  0E00               	movlw	0
  9604  0006C8  0101               	movlb	1	; () banked
  9605  0006CA  6F7F               	movwf	parse_cmd_str@scroll& (0+255),b
  9606                           
  9607                           ; BSR set to: 1
  9608                           ;cmd_consol.c: 184: char uid = 0;
  9609  0006CC  0E00               	movlw	0
  9610  0006CE  0101               	movlb	1	; () banked
  9611  0006D0  6F80               	movwf	parse_cmd_str@uid_1685& (0+255),b
  9612                           
  9613                           ;cmd_consol.c: 185: temp = strtok((0), "-', /=");
  9614  0006D2  0E00               	movlw	0
  9615  0006D4  6E1D               	movwf	strtok@s1,c
  9616  0006D6  0E00               	movlw	0
  9617  0006D8  6E1E               	movwf	strtok@s1+1,c
  9618  0006DA  0EDF               	movlw	low STR_25
  9619  0006DC  6E1F               	movwf	strtok@s2,c
  9620  0006DE  0EFF               	movlw	high STR_25
  9621  0006E0  6E20               	movwf	strtok@s2+1,c
  9622  0006E2  EC7E  F015         	call	_strtok	;wreg free
  9623  0006E6  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9624  0006EA  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9625                           
  9626                           ;cmd_consol.c: 186: if (temp != (0)) {
  9627  0006EE  0101               	movlb	1	; () banked
  9628  0006F0  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9629  0006F2  0101               	movlb	1	; () banked
  9630  0006F4  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9631  0006F6  B4D8               	btfsc	status,2,c
  9632  0006F8  D318               	goto	l7033
  9633                           
  9634                           ; BSR set to: 1
  9635                           ;cmd_consol.c: 187: printf("%s...5\r\n", temp);
  9636  0006FA  0E74               	movlw	low STR_50
  9637  0006FC  6E24               	movwf	printf@f,c
  9638  0006FE  0EFF               	movlw	high STR_50
  9639  000700  6E25               	movwf	printf@f+1,c
  9640  000702  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9641  000706  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9642  00070A  EC09  F011         	call	_printf	;wreg free
  9643                           
  9644                           ;cmd_consol.c: 188: char i = 0;
  9645  00070E  0E00               	movlw	0
  9646  000710  0101               	movlb	1	; () banked
  9647  000712  6F7D               	movwf	parse_cmd_str@i_1688& (0+255),b
  9648                           
  9649                           ; BSR set to: 1
  9650                           ;cmd_consol.c: 189: uid = temp[0];
  9651  000714  C184  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9652  000718  C185  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
  9653  00071C  0E00               	movlw	low (__mediumconst shr (0+16))
  9654  00071E  6EF8               	movwf	tblptru,c
  9655  000720  0E0F               	movlw	(high __ramtop+-1)
  9656  000722  64F7               	cpfsgt	tblptrh,c
  9657  000724  D003               	bra	u7067
  9658  000726  0008               	tblrd		*
  9659  000728  50F5               	movf	tablat,w,c
  9660  00072A  D005               	bra	u7060
  9661  00072C                     u7067:
  9662  00072C  CFF6 FFE9          	movff	tblptrl,fsr0l
  9663  000730  CFF7 FFEA          	movff	tblptrh,fsr0h
  9664  000734  50EF               	movf	indf0,w,c
  9665  000736                     u7060:
  9666  000736  0101               	movlb	1	; () banked
  9667  000738  6F80               	movwf	parse_cmd_str@uid_1685& (0+255),b
  9668                           
  9669                           ; BSR set to: 1
  9670                           ;cmd_consol.c: 190: cmd_data.scroll = -1;
  9671  00073A  0100               	movlb	0	; () banked
  9672  00073C  69B5               	setf	(_cmd_data+47)& (0+255),b
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;cmd_consol.c: 191: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
  9676  00073E  0E40               	movlw	64
  9677  000740  0101               	movlb	1	; () banked
  9678  000742  6580               	cpfsgt	parse_cmd_str@uid_1685& (0+255),b
  9679  000744  D0C4               	goto	l6893
  9680                           
  9681                           ; BSR set to: 1
  9682  000746  504C               	movf	_clcd_config_data+3,w,c
  9683  000748  0101               	movlb	1	; () banked
  9684  00074A  5D80               	subwf	parse_cmd_str@uid_1685& (0+255),w,b
  9685  00074C  B0D8               	btfsc	status,0,c
  9686  00074E  D0BF               	goto	l6893
  9687                           
  9688                           ; BSR set to: 1
  9689                           ;cmd_consol.c: 192: printf("uid = %d, ", uid);
  9690  000750  0E2C               	movlw	low STR_43
  9691  000752  6E24               	movwf	printf@f,c
  9692  000754  0EFF               	movlw	high STR_43
  9693  000756  6E25               	movwf	printf@f+1,c
  9694  000758  C180  F026         	movff	parse_cmd_str@uid_1685,?_printf+2
  9695  00075C  6A27               	clrf	?_printf+3,c
  9696  00075E  EC09  F011         	call	_printf	;wreg free
  9697                           
  9698                           ;cmd_consol.c: 193: if (uid == cmd_data.uid) {
  9699  000762  0101               	movlb	1	; () banked
  9700  000764  5180               	movf	parse_cmd_str@uid_1685& (0+255),w,b
  9701  000766  0100               	movlb	0	; () banked
  9702  000768  1986               	xorwf	_cmd_data& (0+255),w,b
  9703  00076A  A4D8               	btfss	status,2,c
  9704  00076C  D2DE               	goto	l7033
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;cmd_consol.c: 194: temp = strtok((0), "-', /=");
  9708  00076E  0E00               	movlw	0
  9709  000770  6E1D               	movwf	strtok@s1,c
  9710  000772  0E00               	movlw	0
  9711  000774  6E1E               	movwf	strtok@s1+1,c
  9712  000776  0EDF               	movlw	low STR_25
  9713  000778  6E1F               	movwf	strtok@s2,c
  9714  00077A  0EFF               	movlw	high STR_25
  9715  00077C  6E20               	movwf	strtok@s2+1,c
  9716  00077E  EC7E  F015         	call	_strtok	;wreg free
  9717  000782  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9718  000786  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9719                           
  9720                           ;cmd_consol.c: 195: if (temp != (0)) {
  9721  00078A  0101               	movlb	1	; () banked
  9722  00078C  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9723  00078E  0101               	movlb	1	; () banked
  9724  000790  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9725  000792  B4D8               	btfsc	status,2,c
  9726  000794  D2CA               	goto	l7033
  9727                           
  9728                           ; BSR set to: 1
  9729                           ;cmd_consol.c: 196: printf("%s...6\r\n", temp);
  9730  000796  0E7D               	movlw	low STR_53
  9731  000798  6E24               	movwf	printf@f,c
  9732  00079A  0EFF               	movlw	high STR_53
  9733  00079C  6E25               	movwf	printf@f+1,c
  9734  00079E  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
  9735  0007A2  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
  9736  0007A6  EC09  F011         	call	_printf	;wreg free
  9737                           
  9738                           ;cmd_consol.c: 197: for (i = 0; i < strlen(temp); i++) {
  9739  0007AA  0E00               	movlw	0
  9740  0007AC  0101               	movlb	1	; () banked
  9741  0007AE  6F7D               	movwf	parse_cmd_str@i_1688& (0+255),b
  9742  0007B0  D050               	goto	l6869
  9743  0007B2                     l6859:
  9744                           
  9745                           ;cmd_consol.c: 198: if (isdigit(temp[i]) == 1) {
  9746  0007B2  0101               	movlb	1	; () banked
  9747  0007B4  517D               	movf	parse_cmd_str@i_1688& (0+255),w,b
  9748  0007B6  0D01               	mullw	1
  9749  0007B8  C184  F0DC         	movff	parse_cmd_str@temp,??_parse_cmd_str
  9750  0007BC  C185  F0DD         	movff	parse_cmd_str@temp+1,??_parse_cmd_str+1
  9751  0007C0  50F3               	movf	prodl,w,c
  9752  0007C2  0100               	movlb	0	; () banked
  9753  0007C4  27DC               	addwf	??_parse_cmd_str& (0+255),f,b
  9754  0007C6  50F4               	movf	prodh,w,c
  9755  0007C8  0100               	movlb	0	; () banked
  9756  0007CA  23DD               	addwfc	(??_parse_cmd_str+1)& (0+255),f,b
  9757  0007CC  C0DC  FFF6         	movff	??_parse_cmd_str,tblptrl
  9758  0007D0  C0DD  FFF7         	movff	??_parse_cmd_str+1,tblptrh
  9759  0007D4  0E00               	movlw	low (__mediumconst shr (0+16))
  9760  0007D6  6EF8               	movwf	tblptru,c
  9761  0007D8  0E0F               	movlw	(high __ramtop+-1)
  9762  0007DA  64F7               	cpfsgt	tblptrh,c
  9763  0007DC  D003               	bra	u7117
  9764  0007DE  0008               	tblrd		*
  9765  0007E0  50F5               	movf	tablat,w,c
  9766  0007E2  D005               	bra	u7110
  9767  0007E4                     u7117:
  9768  0007E4  CFF6 FFE9          	movff	tblptrl,fsr0l
  9769  0007E8  CFF7 FFEA          	movff	tblptrh,fsr0h
  9770  0007EC  50EF               	movf	indf0,w,c
  9771  0007EE                     u7110:
  9772  0007EE  EC40  F01B         	call	_isdigit
  9773  0007F2  A0D8               	btfss	status,0,c
  9774  0007F4  D02A               	goto	l6863
  9775                           
  9776                           ;cmd_consol.c: 199: scroll = scroll * 10 + (temp[i] - '0');
  9777  0007F6  0101               	movlb	1	; () banked
  9778  0007F8  517D               	movf	parse_cmd_str@i_1688& (0+255),w,b
  9779  0007FA  0D01               	mullw	1
  9780  0007FC  C184  F0DC         	movff	parse_cmd_str@temp,??_parse_cmd_str
  9781  000800  C185  F0DD         	movff	parse_cmd_str@temp+1,??_parse_cmd_str+1
  9782  000804  50F3               	movf	prodl,w,c
  9783  000806  0100               	movlb	0	; () banked
  9784  000808  27DC               	addwf	??_parse_cmd_str& (0+255),f,b
  9785  00080A  50F4               	movf	prodh,w,c
  9786  00080C  0100               	movlb	0	; () banked
  9787  00080E  23DD               	addwfc	(??_parse_cmd_str+1)& (0+255),f,b
  9788  000810  C0DC  FFF6         	movff	??_parse_cmd_str,tblptrl
  9789  000814  C0DD  FFF7         	movff	??_parse_cmd_str+1,tblptrh
  9790  000818  0E00               	movlw	low (__mediumconst shr (0+16))
  9791  00081A  6EF8               	movwf	tblptru,c
  9792  00081C  0E0F               	movlw	(high __ramtop+-1)
  9793  00081E  64F7               	cpfsgt	tblptrh,c
  9794  000820  D003               	bra	u7137
  9795  000822  0008               	tblrd		*
  9796  000824  50F5               	movf	tablat,w,c
  9797  000826  D005               	bra	u7130
  9798  000828                     u7137:
  9799  000828  CFF6 FFE9          	movff	tblptrl,fsr0l
  9800  00082C  CFF7 FFEA          	movff	tblptrh,fsr0h
  9801  000830  50EF               	movf	indf0,w,c
  9802  000832                     u7130:
  9803  000832  0100               	movlb	0	; () banked
  9804  000834  6FDE               	movwf	(??_parse_cmd_str+2)& (0+255),b
  9805  000836  0101               	movlb	1	; () banked
  9806  000838  517F               	movf	parse_cmd_str@scroll& (0+255),w,b
  9807  00083A  0D0A               	mullw	10
  9808  00083C  50F3               	movf	prodl,w,c
  9809  00083E  0100               	movlb	0	; () banked
  9810  000840  25DE               	addwf	(??_parse_cmd_str+2)& (0+255),w,b
  9811  000842  0FD0               	addlw	208
  9812  000844  0101               	movlb	1	; () banked
  9813  000846  6F7F               	movwf	parse_cmd_str@scroll& (0+255),b
  9814                           
  9815                           ;cmd_consol.c: 200: } else {
  9816  000848  D002               	goto	l6867
  9817  00084A                     l6863:
  9818                           
  9819                           ;cmd_consol.c: 202: return 0;
  9820  00084A  0E00               	movlw	0
  9821  00084C  0012               	return	
  9822  00084E                     l6867:
  9823  00084E  0101               	movlb	1	; () banked
  9824  000850  2B7D               	incf	parse_cmd_str@i_1688& (0+255),f,b
  9825  000852                     l6869:
  9826                           
  9827                           ; BSR set to: 1
  9828  000852  C184  F01E         	movff	parse_cmd_str@temp,strlen@s
  9829  000856  C185  F01F         	movff	parse_cmd_str@temp+1,strlen@s+1
  9830  00085A  EC3E  F018         	call	_strlen	;wreg free
  9831  00085E  0101               	movlb	1	; () banked
  9832  000860  517D               	movf	parse_cmd_str@i_1688& (0+255),w,b
  9833  000862  0100               	movlb	0	; () banked
  9834  000864  6FDC               	movwf	??_parse_cmd_str& (0+255),b
  9835  000866  6BDD               	clrf	(??_parse_cmd_str+1)& (0+255),b
  9836  000868  501E               	movf	?_strlen,w,c
  9837  00086A  0100               	movlb	0	; () banked
  9838  00086C  5DDC               	subwf	??_parse_cmd_str& (0+255),w,b
  9839  00086E  501F               	movf	?_strlen+1,w,c
  9840  000870  0100               	movlb	0	; () banked
  9841  000872  59DD               	subwfb	(??_parse_cmd_str+1)& (0+255),w,b
  9842  000874  A0D8               	btfss	status,0,c
  9843  000876  D79D               	goto	l6859
  9844                           
  9845                           ; BSR set to: 0
  9846                           ;cmd_consol.c: 203: }
  9847                           ;cmd_consol.c: 204: }
  9848                           ;cmd_consol.c: 206: if (scroll < 3) {
  9849                           
  9850                           ; BSR set to: 0
  9851  000878  0E03               	movlw	3
  9852  00087A  0101               	movlb	1	; () banked
  9853  00087C  617F               	cpfslt	parse_cmd_str@scroll& (0+255),b
  9854  00087E  D025               	goto	l6889
  9855                           
  9856                           ; BSR set to: 1
  9857                           ;cmd_consol.c: 207: printf("scroll = %d, ", scroll);
  9858  000880  0E86               	movlw	low STR_54
  9859  000882  6E24               	movwf	printf@f,c
  9860  000884  0EFE               	movlw	high STR_54
  9861  000886  6E25               	movwf	printf@f+1,c
  9862  000888  C17F  F026         	movff	parse_cmd_str@scroll,?_printf+2
  9863  00088C  6A27               	clrf	?_printf+3,c
  9864  00088E  EC09  F011         	call	_printf	;wreg free
  9865                           
  9866                           ;cmd_consol.c: 208: cmd_data.scroll = scroll;
  9867  000892  C17F  F0B5         	movff	parse_cmd_str@scroll,_cmd_data+47
  9868                           
  9869                           ;cmd_consol.c: 209: cmd_data.scroll_set = 1;
  9870  000896  0E01               	movlw	1
  9871  000898  0100               	movlb	0	; () banked
  9872  00089A  6FB6               	movwf	(_cmd_data+48)& (0+255),b
  9873                           
  9874                           ; BSR set to: 0
  9875                           ;cmd_consol.c: 210: valid_cmd = 1;
  9876  00089C  0E01               	movlw	1
  9877  00089E  6E48               	movwf	_valid_cmd,c
  9878                           
  9879                           ; BSR set to: 0
  9880                           ;cmd_consol.c: 211: memset(str, 0, strlen(str));
  9881  0008A0  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
  9882  0008A4  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
  9883  0008A8  0E00               	movlw	0
  9884  0008AA  6E27               	movwf	memset@c+1,c
  9885  0008AC  0E00               	movlw	0
  9886  0008AE  6E26               	movwf	memset@c,c
  9887  0008B0  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
  9888  0008B4  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
  9889  0008B8  EC3E  F018         	call	_strlen	;wreg free
  9890  0008BC  C01E  F028         	movff	?_strlen,memset@n
  9891  0008C0  C01F  F029         	movff	?_strlen+1,memset@n+1
  9892  0008C4  ECAC  F01A         	call	_memset	;wreg free
  9893  0008C8  D447               	goto	l6659
  9894  0008CA                     l6889:
  9895                           
  9896                           ;cmd_consol.c: 214: return 4;
  9897  0008CA  0E04               	movlw	4
  9898  0008CC  0012               	return	
  9899  0008CE                     l6893:
  9900                           
  9901                           ;cmd_consol.c: 219: return 7;
  9902  0008CE  0E07               	movlw	7
  9903  0008D0  0012               	return	
  9904  0008D2                     l6897:
  9905  0008D2  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
  9906  0008D6  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
  9907  0008DA  0E37               	movlw	low STR_55
  9908  0008DC  6E2F               	movwf	strstr@s2,c
  9909  0008DE  0EFF               	movlw	high STR_55
  9910  0008E0  6E30               	movwf	strstr@s2+1,c
  9911  0008E2  EC37  F016         	call	_strstr	;wreg free
  9912  0008E6  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
  9913  0008EA  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
  9914  0008EE  0101               	movlb	1	; () banked
  9915  0008F0  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9916  0008F2  0101               	movlb	1	; () banked
  9917  0008F4  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9918  0008F6  B4D8               	btfsc	status,2,c
  9919  0008F8  D144               	goto	l6987
  9920                           
  9921                           ; BSR set to: 1
  9922                           ;cmd_consol.c: 225: if (clcd_config_data.init_done == 1) {
  9923  0008FA  0449               	decf	_clcd_config_data,w,c
  9924  0008FC  A4D8               	btfss	status,2,c
  9925  0008FE  D215               	goto	l7033
  9926                           
  9927                           ; BSR set to: 1
  9928                           ;cmd_consol.c: 226: cmd_data.row_col_set = 0;
  9929  000900  0E00               	movlw	0
  9930  000902  0100               	movlb	0	; () banked
  9931  000904  6FB4               	movwf	(_cmd_data+46)& (0+255),b
  9932                           
  9933                           ; BSR set to: 0
  9934                           ;cmd_consol.c: 227: temp = strtok(ptr, "-', /=");
  9935  000906  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
  9936  00090A  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
  9937  00090E  0EDF               	movlw	low STR_25
  9938  000910  6E1F               	movwf	strtok@s2,c
  9939  000912  0EFF               	movlw	high STR_25
  9940  000914  6E20               	movwf	strtok@s2+1,c
  9941  000916  EC7E  F015         	call	_strtok	;wreg free
  9942  00091A  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9943  00091E  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9944                           
  9945                           ;cmd_consol.c: 228: if (temp != (0)) {
  9946  000922  0101               	movlb	1	; () banked
  9947  000924  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9948  000926  0101               	movlb	1	; () banked
  9949  000928  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9950  00092A  B4D8               	btfsc	status,2,c
  9951  00092C  D1FE               	goto	l7033
  9952                           
  9953                           ; BSR set to: 1
  9954                           ;cmd_consol.c: 229: strcpy(CMD, temp);
  9955  00092E  0ECB               	movlw	low _CMD
  9956  000930  6E10               	movwf	strcpy@to,c
  9957  000932  0E00               	movlw	high _CMD
  9958  000934  6E11               	movwf	strcpy@to+1,c
  9959  000936  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
  9960  00093A  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
  9961  00093E  EC50  F019         	call	_strcpy	;wreg free
  9962                           
  9963                           ;cmd_consol.c: 230: temp = strtok((0), "-', /=");
  9964  000942  0E00               	movlw	0
  9965  000944  6E1D               	movwf	strtok@s1,c
  9966  000946  0E00               	movlw	0
  9967  000948  6E1E               	movwf	strtok@s1+1,c
  9968  00094A  0EDF               	movlw	low STR_25
  9969  00094C  6E1F               	movwf	strtok@s2,c
  9970  00094E  0EFF               	movlw	high STR_25
  9971  000950  6E20               	movwf	strtok@s2+1,c
  9972  000952  EC7E  F015         	call	_strtok	;wreg free
  9973  000956  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
  9974  00095A  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
  9975                           
  9976                           ;cmd_consol.c: 231: char uid = 0;
  9977  00095E  0E00               	movlw	0
  9978  000960  0101               	movlb	1	; () banked
  9979  000962  6F81               	movwf	parse_cmd_str@uid_1696& (0+255),b
  9980                           
  9981                           ; BSR set to: 1
  9982                           ;cmd_consol.c: 232: if (temp != (0)) {
  9983  000964  0101               	movlb	1	; () banked
  9984  000966  5184               	movf	parse_cmd_str@temp& (0+255),w,b
  9985  000968  0101               	movlb	1	; () banked
  9986  00096A  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
  9987  00096C  B4D8               	btfsc	status,2,c
  9988  00096E  D1DD               	goto	l7033
  9989                           
  9990                           ; BSR set to: 1
  9991                           ;cmd_consol.c: 233: char i = 0;
  9992  000970  0E00               	movlw	0
  9993  000972  0101               	movlb	1	; () banked
  9994  000974  6F79               	movwf	parse_cmd_str@i_1697& (0+255),b
  9995                           
  9996                           ; BSR set to: 1
  9997                           ;cmd_consol.c: 234: uid = temp[0];
  9998  000976  C184  FFF6         	movff	parse_cmd_str@temp,tblptrl
  9999  00097A  C185  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
 10000  00097E  0E00               	movlw	low (__mediumconst shr (0+16))
 10001  000980  6EF8               	movwf	tblptru,c
 10002  000982  0E0F               	movlw	(high __ramtop+-1)
 10003  000984  64F7               	cpfsgt	tblptrh,c
 10004  000986  D003               	bra	u7207
 10005  000988  0008               	tblrd		*
 10006  00098A  50F5               	movf	tablat,w,c
 10007  00098C  D005               	bra	u7200
 10008  00098E                     u7207:
 10009  00098E  CFF6 FFE9          	movff	tblptrl,fsr0l
 10010  000992  CFF7 FFEA          	movff	tblptrh,fsr0h
 10011  000996  50EF               	movf	indf0,w,c
 10012  000998                     u7200:
 10013  000998  0101               	movlb	1	; () banked
 10014  00099A  6F81               	movwf	parse_cmd_str@uid_1696& (0+255),b
 10015                           
 10016                           ; BSR set to: 1
 10017                           ;cmd_consol.c: 235: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
 10018  00099C  0E40               	movlw	64
 10019  00099E  0101               	movlb	1	; () banked
 10020  0009A0  6581               	cpfsgt	parse_cmd_str@uid_1696& (0+255),b
 10021  0009A2  D0ED               	goto	l6983
 10022                           
 10023                           ; BSR set to: 1
 10024  0009A4  504C               	movf	_clcd_config_data+3,w,c
 10025  0009A6  0101               	movlb	1	; () banked
 10026  0009A8  5D81               	subwf	parse_cmd_str@uid_1696& (0+255),w,b
 10027  0009AA  B0D8               	btfsc	status,0,c
 10028  0009AC  D0E8               	goto	l6983
 10029                           
 10030                           ; BSR set to: 1
 10031                           ;cmd_consol.c: 236: printf("uid = %d,\r\n", uid);
 10032  0009AE  0EA1               	movlw	low STR_58
 10033  0009B0  6E24               	movwf	printf@f,c
 10034  0009B2  0EFE               	movlw	high STR_58
 10035  0009B4  6E25               	movwf	printf@f+1,c
 10036  0009B6  C181  F026         	movff	parse_cmd_str@uid_1696,?_printf+2
 10037  0009BA  6A27               	clrf	?_printf+3,c
 10038  0009BC  EC09  F011         	call	_printf	;wreg free
 10039                           
 10040                           ;cmd_consol.c: 237: if (uid == cmd_data.uid) {
 10041  0009C0  0101               	movlb	1	; () banked
 10042  0009C2  5181               	movf	parse_cmd_str@uid_1696& (0+255),w,b
 10043  0009C4  0100               	movlb	0	; () banked
 10044  0009C6  1986               	xorwf	_cmd_data& (0+255),w,b
 10045  0009C8  A4D8               	btfss	status,2,c
 10046  0009CA  D1AF               	goto	l7033
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;cmd_consol.c: 238: temp = strtok((0), "-', /=");
 10050  0009CC  0E00               	movlw	0
 10051  0009CE  6E1D               	movwf	strtok@s1,c
 10052  0009D0  0E00               	movlw	0
 10053  0009D2  6E1E               	movwf	strtok@s1+1,c
 10054  0009D4  0EDF               	movlw	low STR_25
 10055  0009D6  6E1F               	movwf	strtok@s2,c
 10056  0009D8  0EFF               	movlw	high STR_25
 10057  0009DA  6E20               	movwf	strtok@s2+1,c
 10058  0009DC  EC7E  F015         	call	_strtok	;wreg free
 10059  0009E0  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10060  0009E4  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10061                           
 10062                           ;cmd_consol.c: 239: if (temp != (0)) {
 10063  0009E8  0101               	movlb	1	; () banked
 10064  0009EA  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10065  0009EC  0101               	movlb	1	; () banked
 10066  0009EE  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10067  0009F0  B4D8               	btfsc	status,2,c
 10068  0009F2  D19B               	goto	l7033
 10069                           
 10070                           ; BSR set to: 1
 10071                           ;cmd_consol.c: 240: collect_row(temp, &cmd_data.start_row);
 10072  0009F4  C184  F036         	movff	parse_cmd_str@temp,collect_row@str
 10073  0009F8  C185  F037         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10074  0009FC  0EB0               	movlw	low (_cmd_data+42)
 10075  0009FE  6E38               	movwf	collect_row@data_row,c
 10076  000A00  0E00               	movlw	high (_cmd_data+42)
 10077  000A02  6E39               	movwf	collect_row@data_row+1,c
 10078  000A04  ECA9  F014         	call	_collect_row	;wreg free
 10079                           
 10080                           ;cmd_consol.c: 241: printf("cmd_data.start_row = %d,\r\n", cmd_data.start_row);
 10081  000A08  0E31               	movlw	low STR_60
 10082  000A0A  6E24               	movwf	printf@f,c
 10083  000A0C  0EFD               	movlw	high STR_60
 10084  000A0E  6E25               	movwf	printf@f+1,c
 10085  000A10  C0B0  F026         	movff	_cmd_data+42,?_printf+2
 10086  000A14  6A27               	clrf	?_printf+3,c
 10087  000A16  EC09  F011         	call	_printf	;wreg free
 10088                           
 10089                           ;cmd_consol.c: 242: if (cmd_data.start_row != 255) {
 10090  000A1A  0100               	movlb	0	; () banked
 10091  000A1C  29B0               	incf	(_cmd_data+42)& (0+255),w,b
 10092  000A1E  B4D8               	btfsc	status,2,c
 10093  000A20  D0AC               	goto	l6979
 10094                           
 10095                           ; BSR set to: 0
 10096                           ;cmd_consol.c: 243: temp = strtok((0), "-', /=");
 10097  000A22  0E00               	movlw	0
 10098  000A24  6E1D               	movwf	strtok@s1,c
 10099  000A26  0E00               	movlw	0
 10100  000A28  6E1E               	movwf	strtok@s1+1,c
 10101  000A2A  0EDF               	movlw	low STR_25
 10102  000A2C  6E1F               	movwf	strtok@s2,c
 10103  000A2E  0EFF               	movlw	high STR_25
 10104  000A30  6E20               	movwf	strtok@s2+1,c
 10105  000A32  EC7E  F015         	call	_strtok	;wreg free
 10106  000A36  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10107  000A3A  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10108                           
 10109                           ;cmd_consol.c: 244: if (temp != (0)) {
 10110  000A3E  0101               	movlb	1	; () banked
 10111  000A40  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10112  000A42  0101               	movlb	1	; () banked
 10113  000A44  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10114  000A46  B4D8               	btfsc	status,2,c
 10115  000A48  D170               	goto	l7033
 10116                           
 10117                           ; BSR set to: 1
 10118                           ;cmd_consol.c: 245: collect_column(temp, &cmd_data.start_col);
 10119  000A4A  C184  F036         	movff	parse_cmd_str@temp,collect_column@str
 10120  000A4E  C185  F037         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10121  000A52  0EB1               	movlw	low (_cmd_data+43)
 10122  000A54  6E38               	movwf	collect_column@data_column,c
 10123  000A56  0E00               	movlw	high (_cmd_data+43)
 10124  000A58  6E39               	movwf	collect_column@data_column+1,c
 10125  000A5A  ECF5  F011         	call	_collect_column	;wreg free
 10126                           
 10127                           ;cmd_consol.c: 246: printf("cmd_data.start_col = %d,\r\n", cmd_data.start_col);
 10128  000A5E  0E16               	movlw	low STR_62
 10129  000A60  6E24               	movwf	printf@f,c
 10130  000A62  0EFD               	movlw	high STR_62
 10131  000A64  6E25               	movwf	printf@f+1,c
 10132  000A66  C0B1  F026         	movff	_cmd_data+43,?_printf+2
 10133  000A6A  6A27               	clrf	?_printf+3,c
 10134  000A6C  EC09  F011         	call	_printf	;wreg free
 10135                           
 10136                           ;cmd_consol.c: 247: if (cmd_data.start_row != 255) {
 10137  000A70  0100               	movlb	0	; () banked
 10138  000A72  29B0               	incf	(_cmd_data+42)& (0+255),w,b
 10139  000A74  B4D8               	btfsc	status,2,c
 10140  000A76  D07F               	goto	l6975
 10141                           
 10142                           ; BSR set to: 0
 10143                           ;cmd_consol.c: 248: temp = strtok((0), "-', /=");
 10144  000A78  0E00               	movlw	0
 10145  000A7A  6E1D               	movwf	strtok@s1,c
 10146  000A7C  0E00               	movlw	0
 10147  000A7E  6E1E               	movwf	strtok@s1+1,c
 10148  000A80  0EDF               	movlw	low STR_25
 10149  000A82  6E1F               	movwf	strtok@s2,c
 10150  000A84  0EFF               	movlw	high STR_25
 10151  000A86  6E20               	movwf	strtok@s2+1,c
 10152  000A88  EC7E  F015         	call	_strtok	;wreg free
 10153  000A8C  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10154  000A90  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10155                           
 10156                           ;cmd_consol.c: 249: if (temp != (0)) {
 10157  000A94  0101               	movlb	1	; () banked
 10158  000A96  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10159  000A98  0101               	movlb	1	; () banked
 10160  000A9A  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10161  000A9C  B4D8               	btfsc	status,2,c
 10162  000A9E  D145               	goto	l7033
 10163                           
 10164                           ; BSR set to: 1
 10165                           ;cmd_consol.c: 250: collect_row(temp, &cmd_data.end_row);
 10166  000AA0  C184  F036         	movff	parse_cmd_str@temp,collect_row@str
 10167  000AA4  C185  F037         	movff	parse_cmd_str@temp+1,collect_row@str+1
 10168  000AA8  0EB2               	movlw	low (_cmd_data+44)
 10169  000AAA  6E38               	movwf	collect_row@data_row,c
 10170  000AAC  0E00               	movlw	high (_cmd_data+44)
 10171  000AAE  6E39               	movwf	collect_row@data_row+1,c
 10172  000AB0  ECA9  F014         	call	_collect_row	;wreg free
 10173                           
 10174                           ;cmd_consol.c: 251: printf("cmd_data.end_row = %d,\r\n", cmd_data.end_row);
 10175  000AB4  0EB3               	movlw	low STR_64
 10176  000AB6  6E24               	movwf	printf@f,c
 10177  000AB8  0EFD               	movlw	high STR_64
 10178  000ABA  6E25               	movwf	printf@f+1,c
 10179  000ABC  C0B2  F026         	movff	_cmd_data+44,?_printf+2
 10180  000AC0  6A27               	clrf	?_printf+3,c
 10181  000AC2  EC09  F011         	call	_printf	;wreg free
 10182                           
 10183                           ;cmd_consol.c: 252: if (cmd_data.end_row != 255) {
 10184  000AC6  0100               	movlb	0	; () banked
 10185  000AC8  29B2               	incf	(_cmd_data+44)& (0+255),w,b
 10186  000ACA  B4D8               	btfsc	status,2,c
 10187  000ACC  D052               	goto	l6971
 10188                           
 10189                           ; BSR set to: 0
 10190                           ;cmd_consol.c: 253: temp = strtok((0), "-', /=");
 10191  000ACE  0E00               	movlw	0
 10192  000AD0  6E1D               	movwf	strtok@s1,c
 10193  000AD2  0E00               	movlw	0
 10194  000AD4  6E1E               	movwf	strtok@s1+1,c
 10195  000AD6  0EDF               	movlw	low STR_25
 10196  000AD8  6E1F               	movwf	strtok@s2,c
 10197  000ADA  0EFF               	movlw	high STR_25
 10198  000ADC  6E20               	movwf	strtok@s2+1,c
 10199  000ADE  EC7E  F015         	call	_strtok	;wreg free
 10200  000AE2  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10201  000AE6  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10202                           
 10203                           ;cmd_consol.c: 254: if (temp != (0)) {
 10204  000AEA  0101               	movlb	1	; () banked
 10205  000AEC  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10206  000AEE  0101               	movlb	1	; () banked
 10207  000AF0  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10208  000AF2  B4D8               	btfsc	status,2,c
 10209  000AF4  D11A               	goto	l7033
 10210                           
 10211                           ; BSR set to: 1
 10212                           ;cmd_consol.c: 255: printf("col = %s\r\n", temp);
 10213  000AF6  0E16               	movlw	low STR_66
 10214  000AF8  6E24               	movwf	printf@f,c
 10215  000AFA  0EFF               	movlw	high STR_66
 10216  000AFC  6E25               	movwf	printf@f+1,c
 10217  000AFE  C184  F026         	movff	parse_cmd_str@temp,?_printf+2
 10218  000B02  C185  F027         	movff	parse_cmd_str@temp+1,?_printf+3
 10219  000B06  EC09  F011         	call	_printf	;wreg free
 10220                           
 10221                           ;cmd_consol.c: 256: collect_column(temp, &cmd_data.end_col);
 10222  000B0A  C184  F036         	movff	parse_cmd_str@temp,collect_column@str
 10223  000B0E  C185  F037         	movff	parse_cmd_str@temp+1,collect_column@str+1
 10224  000B12  0EB3               	movlw	low (_cmd_data+45)
 10225  000B14  6E38               	movwf	collect_column@data_column,c
 10226  000B16  0E00               	movlw	high (_cmd_data+45)
 10227  000B18  6E39               	movwf	collect_column@data_column+1,c
 10228  000B1A  ECF5  F011         	call	_collect_column	;wreg free
 10229                           
 10230                           ;cmd_consol.c: 257: printf("cmd_data.end_col = %d,\r\n", cmd_data.end_col);
 10231  000B1E  0E9A               	movlw	low STR_67
 10232  000B20  6E24               	movwf	printf@f,c
 10233  000B22  0EFD               	movlw	high STR_67
 10234  000B24  6E25               	movwf	printf@f+1,c
 10235  000B26  C0B3  F026         	movff	_cmd_data+45,?_printf+2
 10236  000B2A  6A27               	clrf	?_printf+3,c
 10237  000B2C  EC09  F011         	call	_printf	;wreg free
 10238                           
 10239                           ;cmd_consol.c: 258: if (cmd_data.end_row != 255) {
 10240  000B30  0100               	movlb	0	; () banked
 10241  000B32  29B2               	incf	(_cmd_data+44)& (0+255),w,b
 10242  000B34  B4D8               	btfsc	status,2,c
 10243  000B36  D01B               	goto	l6967
 10244                           
 10245                           ; BSR set to: 0
 10246                           ;cmd_consol.c: 259: cmd_data.row_col_set = 1;
 10247  000B38  0E01               	movlw	1
 10248  000B3A  0100               	movlb	0	; () banked
 10249  000B3C  6FB4               	movwf	(_cmd_data+46)& (0+255),b
 10250                           
 10251                           ;cmd_consol.c: 260: valid_cmd = 1;
 10252  000B3E  0E01               	movlw	1
 10253  000B40  6E48               	movwf	_valid_cmd,c
 10254                           
 10255                           ; BSR set to: 0
 10256                           ;cmd_consol.c: 261: memset(str, 0, strlen(str));
 10257  000B42  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10258  000B46  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10259  000B4A  0E00               	movlw	0
 10260  000B4C  6E27               	movwf	memset@c+1,c
 10261  000B4E  0E00               	movlw	0
 10262  000B50  6E26               	movwf	memset@c,c
 10263  000B52  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10264  000B56  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10265  000B5A  EC3E  F018         	call	_strlen	;wreg free
 10266  000B5E  C01E  F028         	movff	?_strlen,memset@n
 10267  000B62  C01F  F029         	movff	?_strlen+1,memset@n+1
 10268  000B66  ECAC  F01A         	call	_memset	;wreg free
 10269  000B6A  EFAC  F000         	goto	l6659
 10270  000B6E                     l6967:
 10271                           
 10272                           ;cmd_consol.c: 264: return 3;
 10273  000B6E  0E03               	movlw	3
 10274  000B70  0012               	return	
 10275  000B72                     l6971:
 10276                           
 10277                           ;cmd_consol.c: 268: return 3;
 10278  000B72  0E03               	movlw	3
 10279  000B74  0012               	return	
 10280  000B76                     l6975:
 10281                           
 10282                           ;cmd_consol.c: 272: return 3;
 10283  000B76  0E03               	movlw	3
 10284  000B78  0012               	return	
 10285  000B7A                     l6979:
 10286                           
 10287                           ;cmd_consol.c: 276: return 3;
 10288  000B7A  0E03               	movlw	3
 10289  000B7C  0012               	return	
 10290  000B7E                     l6983:
 10291                           
 10292                           ;cmd_consol.c: 281: return 7;
 10293  000B7E  0E07               	movlw	7
 10294  000B80  0012               	return	
 10295  000B82                     l6987:
 10296  000B82  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
 10297  000B86  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10298  000B8A  0E42               	movlw	low STR_68
 10299  000B8C  6E2F               	movwf	strstr@s2,c
 10300  000B8E  0EFF               	movlw	high STR_68
 10301  000B90  6E30               	movwf	strstr@s2+1,c
 10302  000B92  EC37  F016         	call	_strstr	;wreg free
 10303  000B96  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
 10304  000B9A  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
 10305  000B9E  0101               	movlb	1	; () banked
 10306  000BA0  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10307  000BA2  0101               	movlb	1	; () banked
 10308  000BA4  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10309  000BA6  B4D8               	btfsc	status,2,c
 10310  000BA8  D01F               	goto	l6999
 10311                           
 10312                           ; BSR set to: 1
 10313                           ;cmd_consol.c: 287: strcpy(CMD, temp);
 10314  000BAA  0ECB               	movlw	low _CMD
 10315  000BAC  6E10               	movwf	strcpy@to,c
 10316  000BAE  0E00               	movlw	high _CMD
 10317  000BB0  6E11               	movwf	strcpy@to+1,c
 10318  000BB2  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
 10319  000BB6  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10320  000BBA  EC50  F019         	call	_strcpy	;wreg free
 10321                           
 10322                           ;cmd_consol.c: 288: memset(str, 0, strlen(str));
 10323  000BBE  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10324  000BC2  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10325  000BC6  0E00               	movlw	0
 10326  000BC8  6E27               	movwf	memset@c+1,c
 10327  000BCA  0E00               	movlw	0
 10328  000BCC  6E26               	movwf	memset@c,c
 10329  000BCE  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10330  000BD2  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10331  000BD6  EC3E  F018         	call	_strlen	;wreg free
 10332  000BDA  C01E  F028         	movff	?_strlen,memset@n
 10333  000BDE  C01F  F029         	movff	?_strlen+1,memset@n+1
 10334  000BE2  ECAC  F01A         	call	_memset	;wreg free
 10335  000BE6  D09D               	goto	l7027
 10336  000BE8                     l6999:
 10337  000BE8  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
 10338  000BEC  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10339  000BF0  0E86               	movlw	low STR_69
 10340  000BF2  6E2F               	movwf	strstr@s2,c
 10341  000BF4  0EFF               	movlw	high STR_69
 10342  000BF6  6E30               	movwf	strstr@s2+1,c
 10343  000BF8  EC37  F016         	call	_strstr	;wreg free
 10344  000BFC  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
 10345  000C00  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
 10346  000C04  0101               	movlb	1	; () banked
 10347  000C06  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10348  000C08  0101               	movlb	1	; () banked
 10349  000C0A  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10350  000C0C  B4D8               	btfsc	status,2,c
 10351  000C0E  D057               	goto	l7023
 10352                           
 10353                           ; BSR set to: 1
 10354                           ;cmd_consol.c: 292: if (clcd_config_data.init_done == 1) {
 10355  000C10  0449               	decf	_clcd_config_data,w,c
 10356  000C12  A4D8               	btfss	status,2,c
 10357  000C14  D08A               	goto	l7033
 10358                           
 10359                           ; BSR set to: 1
 10360                           ;cmd_consol.c: 293: temp = strtok(ptr, "-', /=");
 10361  000C16  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
 10362  000C1A  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
 10363  000C1E  0EDF               	movlw	low STR_25
 10364  000C20  6E1F               	movwf	strtok@s2,c
 10365  000C22  0EFF               	movlw	high STR_25
 10366  000C24  6E20               	movwf	strtok@s2+1,c
 10367  000C26  EC7E  F015         	call	_strtok	;wreg free
 10368  000C2A  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10369  000C2E  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10370                           
 10371                           ;cmd_consol.c: 294: if (temp != (0)) {
 10372  000C32  0101               	movlb	1	; () banked
 10373  000C34  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10374  000C36  0101               	movlb	1	; () banked
 10375  000C38  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10376  000C3A  B4D8               	btfsc	status,2,c
 10377  000C3C  D076               	goto	l7033
 10378                           
 10379                           ; BSR set to: 1
 10380                           ;cmd_consol.c: 295: strcpy(CMD, temp);
 10381  000C3E  0ECB               	movlw	low _CMD
 10382  000C40  6E10               	movwf	strcpy@to,c
 10383  000C42  0E00               	movlw	high _CMD
 10384  000C44  6E11               	movwf	strcpy@to+1,c
 10385  000C46  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
 10386  000C4A  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10387  000C4E  EC50  F019         	call	_strcpy	;wreg free
 10388                           
 10389                           ;cmd_consol.c: 296: char uid = 0;
 10390  000C52  0E00               	movlw	0
 10391  000C54  0101               	movlb	1	; () banked
 10392  000C56  6F7C               	movwf	parse_cmd_str@uid_1713& (0+255),b
 10393                           
 10394                           ; BSR set to: 1
 10395                           ;cmd_consol.c: 297: temp = strtok(ptr, "-', /=");
 10396  000C58  C182  F01D         	movff	parse_cmd_str@ptr,strtok@s1
 10397  000C5C  C183  F01E         	movff	parse_cmd_str@ptr+1,strtok@s1+1
 10398  000C60  0EDF               	movlw	low STR_25
 10399  000C62  6E1F               	movwf	strtok@s2,c
 10400  000C64  0EFF               	movlw	high STR_25
 10401  000C66  6E20               	movwf	strtok@s2+1,c
 10402  000C68  EC7E  F015         	call	_strtok	;wreg free
 10403  000C6C  C01D  F184         	movff	?_strtok,parse_cmd_str@temp
 10404  000C70  C01E  F185         	movff	?_strtok+1,parse_cmd_str@temp+1
 10405                           
 10406                           ;cmd_consol.c: 298: if (temp != (0)) {
 10407  000C74  0101               	movlb	1	; () banked
 10408  000C76  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10409  000C78  0101               	movlb	1	; () banked
 10410  000C7A  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10411  000C7C  B4D8               	btfsc	status,2,c
 10412  000C7E  D055               	goto	l7033
 10413                           
 10414                           ; BSR set to: 1
 10415                           ;cmd_consol.c: 299: uid = temp[0];
 10416  000C80  C184  FFF6         	movff	parse_cmd_str@temp,tblptrl
 10417  000C84  C185  FFF7         	movff	parse_cmd_str@temp+1,tblptrh
 10418  000C88  0E00               	movlw	low (__mediumconst shr (0+16))
 10419  000C8A  6EF8               	movwf	tblptru,c
 10420  000C8C  0E0F               	movlw	(high __ramtop+-1)
 10421  000C8E  64F7               	cpfsgt	tblptrh,c
 10422  000C90  D003               	bra	u7377
 10423  000C92  0008               	tblrd		*
 10424  000C94  50F5               	movf	tablat,w,c
 10425  000C96  D005               	bra	u7370
 10426  000C98                     u7377:
 10427  000C98  CFF6 FFE9          	movff	tblptrl,fsr0l
 10428  000C9C  CFF7 FFEA          	movff	tblptrh,fsr0h
 10429  000CA0  50EF               	movf	indf0,w,c
 10430  000CA2                     u7370:
 10431  000CA2  0101               	movlb	1	; () banked
 10432  000CA4  6F7C               	movwf	parse_cmd_str@uid_1713& (0+255),b
 10433                           
 10434                           ; BSR set to: 1
 10435                           ;cmd_consol.c: 300: if (uid >= 'A' && uid < clcd_config_data.uid_range) {
 10436  000CA6  0E40               	movlw	64
 10437  000CA8  0101               	movlb	1	; () banked
 10438  000CAA  657C               	cpfsgt	parse_cmd_str@uid_1713& (0+255),b
 10439  000CAC  D03E               	goto	l7033
 10440                           
 10441                           ; BSR set to: 1
 10442  000CAE  504C               	movf	_clcd_config_data+3,w,c
 10443  000CB0  0101               	movlb	1	; () banked
 10444  000CB2  5D7C               	subwf	parse_cmd_str@uid_1713& (0+255),w,b
 10445  000CB4  B0D8               	btfsc	status,0,c
 10446  000CB6  D039               	goto	l7033
 10447                           
 10448                           ; BSR set to: 1
 10449                           ;cmd_consol.c: 301: cmd_data.uid = uid;
 10450  000CB8  C17C  F086         	movff	parse_cmd_str@uid_1713,_cmd_data
 10451                           
 10452                           ; BSR set to: 1
 10453                           ;cmd_consol.c: 302: }
 10454                           ;cmd_consol.c: 303: }
 10455                           ;cmd_consol.c: 304: }
 10456                           ;cmd_consol.c: 305: }
 10457                           ;cmd_consol.c: 306: } else if ((temp = strstr(ptr, "KLM")) != (0)) {
 10458                           
 10459                           ; BSR set to: 1
 10460                           
 10461                           ; BSR set to: 1
 10462                           
 10463                           ; BSR set to: 1
 10464  000CBC  D036               	goto	l7033
 10465  000CBE                     l7023:
 10466                           
 10467                           ; BSR set to: 1
 10468  000CBE  C182  F02D         	movff	parse_cmd_str@ptr,strstr@s1
 10469  000CC2  C183  F02E         	movff	parse_cmd_str@ptr+1,strstr@s1+1
 10470  000CC6  0EF6               	movlw	low STR_72
 10471  000CC8  6E2F               	movwf	strstr@s2,c
 10472  000CCA  0EFF               	movlw	high STR_72
 10473  000CCC  6E30               	movwf	strstr@s2+1,c
 10474  000CCE  EC37  F016         	call	_strstr	;wreg free
 10475  000CD2  C02D  F184         	movff	?_strstr,parse_cmd_str@temp
 10476  000CD6  C02E  F185         	movff	?_strstr+1,parse_cmd_str@temp+1
 10477  000CDA  0101               	movlb	1	; () banked
 10478  000CDC  5184               	movf	parse_cmd_str@temp& (0+255),w,b
 10479  000CDE  0101               	movlb	1	; () banked
 10480  000CE0  1185               	iorwf	(parse_cmd_str@temp+1)& (0+255),w,b
 10481  000CE2  B4D8               	btfsc	status,2,c
 10482  000CE4  D022               	goto	l7033
 10483                           
 10484                           ; BSR set to: 1
 10485                           ;cmd_consol.c: 307: strcpy(CMD, temp);
 10486  000CE6  0ECB               	movlw	low _CMD
 10487  000CE8  6E10               	movwf	strcpy@to,c
 10488  000CEA  0E00               	movlw	high _CMD
 10489  000CEC  6E11               	movwf	strcpy@to+1,c
 10490  000CEE  C184  F012         	movff	parse_cmd_str@temp,strcpy@from
 10491  000CF2  C185  F013         	movff	parse_cmd_str@temp+1,strcpy@from+1
 10492  000CF6  EC50  F019         	call	_strcpy	;wreg free
 10493                           
 10494                           ;cmd_consol.c: 308: memset(str, 0, strlen(str));
 10495  000CFA  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10496  000CFE  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10497  000D02  0E00               	movlw	0
 10498  000D04  6E27               	movwf	memset@c+1,c
 10499  000D06  0E00               	movlw	0
 10500  000D08  6E26               	movwf	memset@c,c
 10501  000D0A  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10502  000D0E  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10503  000D12  EC3E  F018         	call	_strlen	;wreg free
 10504  000D16  C01E  F028         	movff	?_strlen,memset@n
 10505  000D1A  C01F  F029         	movff	?_strlen+1,memset@n+1
 10506  000D1E  ECAC  F01A         	call	_memset	;wreg free
 10507  000D22                     l7027:
 10508                           
 10509                           ;cmd_consol.c: 309: valid_cmd = 1;
 10510  000D22  0E01               	movlw	1
 10511  000D24  6E48               	movwf	_valid_cmd,c
 10512  000D26  EFAC  F000         	goto	l6659
 10513  000D2A                     l7033:
 10514                           
 10515                           ;cmd_consol.c: 311: }
 10516                           ;cmd_consol.c: 312: memset(str, 0, strlen(str));
 10517  000D2A  C0DA  F024         	movff	parse_cmd_str@str,memset@p1
 10518  000D2E  C0DB  F025         	movff	parse_cmd_str@str+1,memset@p1+1
 10519  000D32  0E00               	movlw	0
 10520  000D34  6E27               	movwf	memset@c+1,c
 10521  000D36  0E00               	movlw	0
 10522  000D38  6E26               	movwf	memset@c,c
 10523  000D3A  C0DA  F01E         	movff	parse_cmd_str@str,strlen@s
 10524  000D3E  C0DB  F01F         	movff	parse_cmd_str@str+1,strlen@s+1
 10525  000D42  EC3E  F018         	call	_strlen	;wreg free
 10526  000D46  C01E  F028         	movff	?_strlen,memset@n
 10527  000D4A  C01F  F029         	movff	?_strlen+1,memset@n+1
 10528  000D4E  ECAC  F01A         	call	_memset	;wreg free
 10529                           
 10530                           ;cmd_consol.c: 313: return 1;
 10531  000D52  0E01               	movlw	1
 10532  000D54  0012               	return	
 10533  000D56                     __end_of_parse_cmd_str:
 10534                           	opt stack 0
 10535                           tblptru	equ	0xFF8
 10536                           tblptrh	equ	0xFF7
 10537                           tblptrl	equ	0xFF6
 10538                           tablat	equ	0xFF5
 10539                           prodh	equ	0xFF4
 10540                           prodl	equ	0xFF3
 10541                           intcon	equ	0xFF2
 10542                           indf0	equ	0xFEF
 10543                           postinc0	equ	0xFEE
 10544                           fsr0h	equ	0xFEA
 10545                           fsr0l	equ	0xFE9
 10546                           wreg	equ	0xFE8
 10547                           indf1	equ	0xFE7
 10548                           postdec1	equ	0xFE5
 10549                           fsr1h	equ	0xFE2
 10550                           fsr1l	equ	0xFE1
 10551                           indf2	equ	0xFDF
 10552                           postinc2	equ	0xFDE
 10553                           fsr2h	equ	0xFDA
 10554                           fsr2l	equ	0xFD9
 10555                           status	equ	0xFD8
 10556                           
 10557 ;; *************** function _strtok *****************
 10558 ;; Defined at:
 10559 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strtok.c"
 10560 ;; Parameters:    Size  Location     Type
 10561 ;;  s1              2   28[COMRAM] PTR unsigned char 
 10562 ;;		 -> uart_str(150), NULL(0), 
 10563 ;;  s2              2   30[COMRAM] PTR const unsigned char 
 10564 ;;		 -> STR_71(7), STR_70(7), STR_65(7), STR_63(7), 
 10565 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 10566 ;;		 -> STR_52(7), STR_49(7), STR_48(7), STR_44(2), 
 10567 ;;		 -> STR_41(7), STR_39(7), STR_37(7), STR_35(7), 
 10568 ;;		 -> STR_33(7), STR_32(7), STR_29(7), STR_27(7), 
 10569 ;;		 -> STR_25(7), 
 10570 ;; Auto vars:     Size  Location     Type
 10571 ;;		None
 10572 ;; Return value:  Size  Location     Type
 10573 ;;                  2   28[COMRAM] PTR unsigned char 
 10574 ;; Registers used:
 10575 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10576 ;; Tracked objects:
 10577 ;;		On entry : 0/0
 10578 ;;		On exit  : 0/0
 10579 ;;		Unchanged: 0/0
 10580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10581 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10584 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10585 ;;Total ram usage:        4 bytes
 10586 ;; Hardware stack levels used:    1
 10587 ;; Hardware stack levels required when called:    7
 10588 ;; This function calls:
 10589 ;;		_strcspn
 10590 ;;		_strspn
 10591 ;; This function is called by:
 10592 ;;		_parse_cmd_str
 10593 ;; This function uses a non-reentrant model
 10594 ;;
 10595                           
 10596                           	psect	text43
 10597  002AFC                     __ptext43:
 10598                           	opt stack 0
 10599  002AFC                     _strtok:
 10600                           	opt stack 21
 10601                           
 10602                           ;incstack = 0
 10603  002AFC  501D               	movf	strtok@s1,w,c
 10604  002AFE  101E               	iorwf	strtok@s1+1,w,c
 10605  002B00  A4D8               	btfss	status,2,c
 10606  002B02  D004               	goto	l1652
 10607  002B04  C07C  F01D         	movff	strtok@sp,strtok@s1
 10608  002B08  C07D  F01E         	movff	strtok@sp+1,strtok@s1+1
 10609  002B0C                     l1652:
 10610  002B0C  501D               	movf	strtok@s1,w,c
 10611  002B0E  101E               	iorwf	strtok@s1+1,w,c
 10612  002B10  A4D8               	btfss	status,2,c
 10613  002B12  D005               	goto	l6547
 10614  002B14  0E00               	movlw	0
 10615  002B16  6E1D               	movwf	?_strtok,c
 10616  002B18  0E00               	movlw	0
 10617  002B1A  6E1E               	movwf	?_strtok+1,c
 10618  002B1C  0012               	return	
 10619  002B1E                     l6547:
 10620  002B1E  C01D  F016         	movff	strtok@s1,strspn@s1
 10621  002B22  C01E  F017         	movff	strtok@s1+1,strspn@s1+1
 10622  002B26  C01F  F018         	movff	strtok@s2,strspn@s2
 10623  002B2A  C020  F019         	movff	strtok@s2+1,strspn@s2+1
 10624  002B2E  EC91  F018         	call	_strspn	;wreg free
 10625  002B32  5016               	movf	?_strspn,w,c
 10626  002B34  261D               	addwf	strtok@s1,f,c
 10627  002B36  5017               	movf	?_strspn+1,w,c
 10628  002B38  221E               	addwfc	strtok@s1+1,f,c
 10629  002B3A  C01D  FFD9         	movff	strtok@s1,fsr2l
 10630  002B3E  C01E  FFDA         	movff	strtok@s1+1,fsr2h
 10631  002B42  50DF               	movf	indf2,w,c
 10632  002B44  A4D8               	btfss	status,2,c
 10633  002B46  D00B               	goto	l6555
 10634  002B48  0E00               	movlw	0
 10635  002B4A  0100               	movlb	0	; () banked
 10636  002B4C  6F7C               	movwf	strtok@sp& (0+255),b
 10637  002B4E  0E00               	movlw	0
 10638  002B50  0100               	movlb	0	; () banked
 10639  002B52  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10640  002B54  C07C  F01D         	movff	strtok@sp,?_strtok
 10641  002B58  C07D  F01E         	movff	strtok@sp+1,?_strtok+1
 10642                           
 10643                           ; BSR set to: 0
 10644  002B5C  0012               	return	
 10645  002B5E                     l6555:
 10646  002B5E  C01D  F016         	movff	strtok@s1,strcspn@s1
 10647  002B62  C01E  F017         	movff	strtok@s1+1,strcspn@s1+1
 10648  002B66  C01F  F018         	movff	strtok@s2,strcspn@s2
 10649  002B6A  C020  F019         	movff	strtok@s2+1,strcspn@s2+1
 10650  002B6E  ECB9  F018         	call	_strcspn	;wreg free
 10651  002B72  5016               	movf	?_strcspn,w,c
 10652  002B74  241D               	addwf	strtok@s1,w,c
 10653  002B76  0100               	movlb	0	; () banked
 10654  002B78  6F7C               	movwf	strtok@sp& (0+255),b
 10655  002B7A  5017               	movf	?_strcspn+1,w,c
 10656  002B7C  201E               	addwfc	strtok@s1+1,w,c
 10657  002B7E  0100               	movlb	0	; () banked
 10658  002B80  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10659                           
 10660                           ; BSR set to: 0
 10661  002B82  C07C  FFD9         	movff	strtok@sp,fsr2l
 10662  002B86  C07D  FFDA         	movff	strtok@sp+1,fsr2h
 10663  002B8A  50DF               	movf	indf2,w,c
 10664  002B8C  B4D8               	btfsc	status,2,c
 10665  002B8E  D00A               	goto	l6563
 10666                           
 10667                           ; BSR set to: 0
 10668  002B90  C07C  FFD9         	movff	strtok@sp,fsr2l
 10669  002B94  C07D  FFDA         	movff	strtok@sp+1,fsr2h
 10670  002B98  0E00               	movlw	0
 10671  002B9A  6EDF               	movwf	indf2,c
 10672                           
 10673                           ; BSR set to: 0
 10674  002B9C  0100               	movlb	0	; () banked
 10675  002B9E  4B7C               	infsnz	strtok@sp& (0+255),f,b
 10676  002BA0  2B7D               	incf	(strtok@sp+1)& (0+255),f,b
 10677  002BA2  D006               	goto	l1657
 10678  002BA4                     l6563:
 10679                           
 10680                           ; BSR set to: 0
 10681  002BA4  0E00               	movlw	0
 10682  002BA6  0100               	movlb	0	; () banked
 10683  002BA8  6F7C               	movwf	strtok@sp& (0+255),b
 10684  002BAA  0E00               	movlw	0
 10685  002BAC  0100               	movlb	0	; () banked
 10686  002BAE  6F7D               	movwf	(strtok@sp+1)& (0+255),b
 10687  002BB0                     l1657:
 10688                           
 10689                           ; BSR set to: 0
 10690  002BB0  C01D  F01D         	movff	strtok@s1,?_strtok
 10691  002BB4  C01E  F01E         	movff	strtok@s1+1,?_strtok+1
 10692  002BB8  0012               	return	
 10693  002BBA                     __end_of_strtok:
 10694                           	opt stack 0
 10695                           tblptru	equ	0xFF8
 10696                           tblptrh	equ	0xFF7
 10697                           tblptrl	equ	0xFF6
 10698                           tablat	equ	0xFF5
 10699                           prodh	equ	0xFF4
 10700                           prodl	equ	0xFF3
 10701                           intcon	equ	0xFF2
 10702                           indf0	equ	0xFEF
 10703                           postinc0	equ	0xFEE
 10704                           fsr0h	equ	0xFEA
 10705                           fsr0l	equ	0xFE9
 10706                           wreg	equ	0xFE8
 10707                           indf1	equ	0xFE7
 10708                           postdec1	equ	0xFE5
 10709                           fsr1h	equ	0xFE2
 10710                           fsr1l	equ	0xFE1
 10711                           indf2	equ	0xFDF
 10712                           postinc2	equ	0xFDE
 10713                           fsr2h	equ	0xFDA
 10714                           fsr2l	equ	0xFD9
 10715                           status	equ	0xFD8
 10716                           
 10717 ;; *************** function _strspn *****************
 10718 ;; Defined at:
 10719 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strspn.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;  s1              2   21[COMRAM] PTR const unsigned char 
 10722 ;;		 -> uart_str(150), NULL(0), 
 10723 ;;  s2              2   23[COMRAM] PTR const unsigned char 
 10724 ;;		 -> STR_71(7), STR_70(7), STR_65(7), STR_63(7), 
 10725 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 10726 ;;		 -> STR_52(7), STR_49(7), STR_48(7), STR_44(2), 
 10727 ;;		 -> STR_41(7), STR_39(7), STR_37(7), STR_35(7), 
 10728 ;;		 -> STR_33(7), STR_32(7), STR_29(7), STR_27(7), 
 10729 ;;		 -> STR_25(7), 
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;  i               2   26[COMRAM] unsigned int 
 10732 ;; Return value:  Size  Location     Type
 10733 ;;                  2   21[COMRAM] unsigned int 
 10734 ;; Registers used:
 10735 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10741 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10742 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10743 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10744 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10745 ;;Total ram usage:        7 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    6
 10748 ;; This function calls:
 10749 ;;		_strchr
 10750 ;; This function is called by:
 10751 ;;		_strtok
 10752 ;; This function uses a non-reentrant model
 10753 ;;
 10754                           
 10755                           	psect	text44
 10756  003122                     __ptext44:
 10757                           	opt stack 0
 10758  003122                     _strspn:
 10759                           	opt stack 21
 10760                           
 10761                           ;incstack = 0
 10762  003122  0E00               	movlw	0
 10763  003124  6E1C               	movwf	strspn@i+1,c
 10764  003126  0E00               	movlw	0
 10765  003128  6E1B               	movwf	strspn@i,c
 10766  00312A  D004               	goto	l6279
 10767  00312C                     l6277:
 10768  00312C  4A16               	infsnz	strspn@s1,f,c
 10769  00312E  2A17               	incf	strspn@s1+1,f,c
 10770  003130  4A1B               	infsnz	strspn@i,f,c
 10771  003132  2A1C               	incf	strspn@i+1,f,c
 10772  003134                     l6279:
 10773  003134  C016  FFD9         	movff	strspn@s1,fsr2l
 10774  003138  C017  FFDA         	movff	strspn@s1+1,fsr2h
 10775  00313C  50DF               	movf	indf2,w,c
 10776  00313E  B4D8               	btfsc	status,2,c
 10777  003140  D013               	goto	l1718
 10778  003142  C018  F010         	movff	strspn@s2,strchr@ptr
 10779  003146  C019  F011         	movff	strspn@s2+1,strchr@ptr+1
 10780  00314A  C016  FFD9         	movff	strspn@s1,fsr2l
 10781  00314E  C017  FFDA         	movff	strspn@s1+1,fsr2h
 10782  003152  50DF               	movf	indf2,w,c
 10783  003154  6E1A               	movwf	??_strspn& (0+255),c
 10784  003156  501A               	movf	??_strspn,w,c
 10785  003158  6E12               	movwf	strchr@chr,c
 10786  00315A  6A13               	clrf	strchr@chr+1,c
 10787  00315C  EC47  F017         	call	_strchr	;wreg free
 10788  003160  5010               	movf	?_strchr,w,c
 10789  003162  1011               	iorwf	?_strchr+1,w,c
 10790  003164  A4D8               	btfss	status,2,c
 10791  003166  D7E2               	goto	l6277
 10792  003168                     l1718:
 10793  003168  C01B  F016         	movff	strspn@i,?_strspn
 10794  00316C  C01C  F017         	movff	strspn@i+1,?_strspn+1
 10795  003170  0012               	return		;funcret
 10796  003172                     __end_of_strspn:
 10797                           	opt stack 0
 10798                           tblptru	equ	0xFF8
 10799                           tblptrh	equ	0xFF7
 10800                           tblptrl	equ	0xFF6
 10801                           tablat	equ	0xFF5
 10802                           prodh	equ	0xFF4
 10803                           prodl	equ	0xFF3
 10804                           intcon	equ	0xFF2
 10805                           indf0	equ	0xFEF
 10806                           postinc0	equ	0xFEE
 10807                           fsr0h	equ	0xFEA
 10808                           fsr0l	equ	0xFE9
 10809                           wreg	equ	0xFE8
 10810                           indf1	equ	0xFE7
 10811                           postdec1	equ	0xFE5
 10812                           fsr1h	equ	0xFE2
 10813                           fsr1l	equ	0xFE1
 10814                           indf2	equ	0xFDF
 10815                           postinc2	equ	0xFDE
 10816                           fsr2h	equ	0xFDA
 10817                           fsr2l	equ	0xFD9
 10818                           status	equ	0xFD8
 10819                           
 10820 ;; *************** function _strcspn *****************
 10821 ;; Defined at:
 10822 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcspn.c"
 10823 ;; Parameters:    Size  Location     Type
 10824 ;;  s1              2   21[COMRAM] PTR const unsigned char 
 10825 ;;		 -> uart_str(150), NULL(0), 
 10826 ;;  s2              2   23[COMRAM] PTR const unsigned char 
 10827 ;;		 -> STR_71(7), STR_70(7), STR_65(7), STR_63(7), 
 10828 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 10829 ;;		 -> STR_52(7), STR_49(7), STR_48(7), STR_44(2), 
 10830 ;;		 -> STR_41(7), STR_39(7), STR_37(7), STR_35(7), 
 10831 ;;		 -> STR_33(7), STR_32(7), STR_29(7), STR_27(7), 
 10832 ;;		 -> STR_25(7), 
 10833 ;; Auto vars:     Size  Location     Type
 10834 ;;  i               2   26[COMRAM] unsigned int 
 10835 ;; Return value:  Size  Location     Type
 10836 ;;                  2   21[COMRAM] unsigned int 
 10837 ;; Registers used:
 10838 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10839 ;; Tracked objects:
 10840 ;;		On entry : 0/0
 10841 ;;		On exit  : 0/0
 10842 ;;		Unchanged: 0/0
 10843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10844 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10845 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10846 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;Total ram usage:        7 bytes
 10849 ;; Hardware stack levels used:    1
 10850 ;; Hardware stack levels required when called:    6
 10851 ;; This function calls:
 10852 ;;		_strchr
 10853 ;; This function is called by:
 10854 ;;		_strtok
 10855 ;; This function uses a non-reentrant model
 10856 ;;
 10857                           
 10858                           	psect	text45
 10859  003172                     __ptext45:
 10860                           	opt stack 0
 10861  003172                     _strcspn:
 10862                           	opt stack 21
 10863                           
 10864                           ;incstack = 0
 10865  003172  0E00               	movlw	0
 10866  003174  6E1C               	movwf	strcspn@i+1,c
 10867  003176  0E00               	movlw	0
 10868  003178  6E1B               	movwf	strcspn@i,c
 10869  00317A  D004               	goto	l6287
 10870  00317C                     l6285:
 10871  00317C  4A16               	infsnz	strcspn@s1,f,c
 10872  00317E  2A17               	incf	strcspn@s1+1,f,c
 10873  003180  4A1B               	infsnz	strcspn@i,f,c
 10874  003182  2A1C               	incf	strcspn@i+1,f,c
 10875  003184                     l6287:
 10876  003184  C016  FFD9         	movff	strcspn@s1,fsr2l
 10877  003188  C017  FFDA         	movff	strcspn@s1+1,fsr2h
 10878  00318C  50DF               	movf	indf2,w,c
 10879  00318E  B4D8               	btfsc	status,2,c
 10880  003190  D013               	goto	l1699
 10881  003192  C018  F010         	movff	strcspn@s2,strchr@ptr
 10882  003196  C019  F011         	movff	strcspn@s2+1,strchr@ptr+1
 10883  00319A  C016  FFD9         	movff	strcspn@s1,fsr2l
 10884  00319E  C017  FFDA         	movff	strcspn@s1+1,fsr2h
 10885  0031A2  50DF               	movf	indf2,w,c
 10886  0031A4  6E1A               	movwf	??_strcspn& (0+255),c
 10887  0031A6  501A               	movf	??_strcspn,w,c
 10888  0031A8  6E12               	movwf	strchr@chr,c
 10889  0031AA  6A13               	clrf	strchr@chr+1,c
 10890  0031AC  EC47  F017         	call	_strchr	;wreg free
 10891  0031B0  5010               	movf	?_strchr,w,c
 10892  0031B2  1011               	iorwf	?_strchr+1,w,c
 10893  0031B4  B4D8               	btfsc	status,2,c
 10894  0031B6  D7E2               	goto	l6285
 10895  0031B8                     l1699:
 10896  0031B8  C01B  F016         	movff	strcspn@i,?_strcspn
 10897  0031BC  C01C  F017         	movff	strcspn@i+1,?_strcspn+1
 10898  0031C0  0012               	return		;funcret
 10899  0031C2                     __end_of_strcspn:
 10900                           	opt stack 0
 10901                           tblptru	equ	0xFF8
 10902                           tblptrh	equ	0xFF7
 10903                           tblptrl	equ	0xFF6
 10904                           tablat	equ	0xFF5
 10905                           prodh	equ	0xFF4
 10906                           prodl	equ	0xFF3
 10907                           intcon	equ	0xFF2
 10908                           indf0	equ	0xFEF
 10909                           postinc0	equ	0xFEE
 10910                           fsr0h	equ	0xFEA
 10911                           fsr0l	equ	0xFE9
 10912                           wreg	equ	0xFE8
 10913                           indf1	equ	0xFE7
 10914                           postdec1	equ	0xFE5
 10915                           fsr1h	equ	0xFE2
 10916                           fsr1l	equ	0xFE1
 10917                           indf2	equ	0xFDF
 10918                           postinc2	equ	0xFDE
 10919                           fsr2h	equ	0xFDA
 10920                           fsr2l	equ	0xFD9
 10921                           status	equ	0xFD8
 10922                           
 10923 ;; *************** function _strstr *****************
 10924 ;; Defined at:
 10925 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strstr.c"
 10926 ;; Parameters:    Size  Location     Type
 10927 ;;  s1              2   44[COMRAM] PTR const unsigned char 
 10928 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 10929 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 10930 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 10931 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 10932 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 10933 ;;		 -> STR_27(7), STR_25(7), NULL(0), 
 10934 ;;  s2              2   46[COMRAM] PTR const unsigned char 
 10935 ;;		 -> STR_72(4), STR_69(9), STR_68(11), STR_55(11), 
 10936 ;;		 -> STR_46(12), STR_38(10), STR_36(10), STR_31(9), 
 10937 ;;		 -> STR_28(10), STR_26(8), STR_24(8), 
 10938 ;; Auto vars:     Size  Location     Type
 10939 ;;		None
 10940 ;; Return value:  Size  Location     Type
 10941 ;;                  2   44[COMRAM] PTR unsigned char 
 10942 ;; Registers used:
 10943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10944 ;; Tracked objects:
 10945 ;;		On entry : 0/0
 10946 ;;		On exit  : 0/0
 10947 ;;		Unchanged: 0/0
 10948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10949 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10952 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10953 ;;Total ram usage:        4 bytes
 10954 ;; Hardware stack levels used:    1
 10955 ;; Hardware stack levels required when called:    6
 10956 ;; This function calls:
 10957 ;;		_strchr
 10958 ;;		_strlen
 10959 ;;		_strncmp
 10960 ;; This function is called by:
 10961 ;;		_parse_cmd_str
 10962 ;; This function uses a non-reentrant model
 10963 ;;
 10964                           
 10965                           	psect	text46
 10966  002C6E                     __ptext46:
 10967                           	opt stack 0
 10968  002C6E                     _strstr:
 10969                           	opt stack 22
 10970                           
 10971                           ;incstack = 0
 10972  002C6E  D032               	goto	l6531
 10973  002C70                     l6523:
 10974  002C70  C02D  F024         	movff	strstr@s1,strncmp@s1
 10975  002C74  C02E  F025         	movff	strstr@s1+1,strncmp@s1+1
 10976  002C78  C02F  F026         	movff	strstr@s2,strncmp@s2
 10977  002C7C  C030  F027         	movff	strstr@s2+1,strncmp@s2+1
 10978  002C80  C02F  F01E         	movff	strstr@s2,strlen@s
 10979  002C84  C030  F01F         	movff	strstr@s2+1,strlen@s+1
 10980  002C88  EC3E  F018         	call	_strlen	;wreg free
 10981  002C8C  C01E  F028         	movff	?_strlen,strncmp@len
 10982  002C90  C01F  F029         	movff	?_strlen+1,strncmp@len+1
 10983  002C94  EC16  F015         	call	_strncmp	;wreg free
 10984  002C98  5024               	movf	?_strncmp,w,c
 10985  002C9A  1025               	iorwf	?_strncmp+1,w,c
 10986  002C9C  A4D8               	btfss	status,2,c
 10987  002C9E  D005               	goto	l6529
 10988  002CA0  C02D  F02D         	movff	strstr@s1,?_strstr
 10989  002CA4  C02E  F02E         	movff	strstr@s1+1,?_strstr+1
 10990  002CA8  0012               	return	
 10991  002CAA                     l6529:
 10992  002CAA  0E01               	movlw	1
 10993  002CAC  242D               	addwf	strstr@s1,w,c
 10994  002CAE  6E10               	movwf	strchr@ptr,c
 10995  002CB0  0E00               	movlw	0
 10996  002CB2  202E               	addwfc	strstr@s1+1,w,c
 10997  002CB4  6E11               	movwf	strchr@ptr+1,c
 10998  002CB6  C02F  FFF6         	movff	strstr@s2,tblptrl
 10999  002CBA  C030  FFF7         	movff	strstr@s2+1,tblptrh
 11000  002CBE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11001  002CBE  6AF8               	clrf	tblptru,c
 11002  002CC0                     	endif
 11003  002CC0                     	if	0	;tblptru may be non-zero
 11004  002CC0                     	endif
 11005  002CC0  0008               	tblrd		*
 11006  002CC2  50F5               	movf	tablat,w,c
 11007  002CC4  6E12               	movwf	strchr@chr,c
 11008  002CC6  6A13               	clrf	strchr@chr+1,c
 11009  002CC8  EC47  F017         	call	_strchr	;wreg free
 11010  002CCC  C010  F02D         	movff	?_strchr,strstr@s1
 11011  002CD0  C011  F02E         	movff	?_strchr+1,strstr@s1+1
 11012  002CD4                     l6531:
 11013  002CD4  502D               	movf	strstr@s1,w,c
 11014  002CD6  102E               	iorwf	strstr@s1+1,w,c
 11015  002CD8  B4D8               	btfsc	status,2,c
 11016  002CDA  D014               	goto	l6535
 11017  002CDC  C02D  FFF6         	movff	strstr@s1,tblptrl
 11018  002CE0  C02E  FFF7         	movff	strstr@s1+1,tblptrh
 11019  002CE4  0E00               	movlw	low (__mediumconst shr (0+16))
 11020  002CE6  6EF8               	movwf	tblptru,c
 11021  002CE8  0E0F               	movlw	(high __ramtop+-1)
 11022  002CEA  64F7               	cpfsgt	tblptrh,c
 11023  002CEC  D003               	bra	u6567
 11024  002CEE  0008               	tblrd		*
 11025  002CF0  50F5               	movf	tablat,w,c
 11026  002CF2  D005               	bra	u6560
 11027  002CF4                     u6567:
 11028  002CF4  CFF6 FFE9          	movff	tblptrl,fsr0l
 11029  002CF8  CFF7 FFEA          	movff	tblptrh,fsr0h
 11030  002CFC  50EF               	movf	indf0,w,c
 11031  002CFE                     u6560:
 11032  002CFE  0900               	iorlw	0
 11033  002D00  A4D8               	btfss	status,2,c
 11034  002D02  D7B6               	goto	l6523
 11035  002D04                     l6535:
 11036  002D04  0E00               	movlw	0
 11037  002D06  6E2D               	movwf	?_strstr,c
 11038  002D08  0E00               	movlw	0
 11039  002D0A  6E2E               	movwf	?_strstr+1,c
 11040  002D0C  0012               	return	
 11041  002D0E                     __end_of_strstr:
 11042                           	opt stack 0
 11043                           tblptru	equ	0xFF8
 11044                           tblptrh	equ	0xFF7
 11045                           tblptrl	equ	0xFF6
 11046                           tablat	equ	0xFF5
 11047                           prodh	equ	0xFF4
 11048                           prodl	equ	0xFF3
 11049                           intcon	equ	0xFF2
 11050                           indf0	equ	0xFEF
 11051                           postinc0	equ	0xFEE
 11052                           fsr0h	equ	0xFEA
 11053                           fsr0l	equ	0xFE9
 11054                           wreg	equ	0xFE8
 11055                           indf1	equ	0xFE7
 11056                           postdec1	equ	0xFE5
 11057                           fsr1h	equ	0xFE2
 11058                           fsr1l	equ	0xFE1
 11059                           indf2	equ	0xFDF
 11060                           postinc2	equ	0xFDE
 11061                           fsr2h	equ	0xFDA
 11062                           fsr2l	equ	0xFD9
 11063                           status	equ	0xFD8
 11064                           
 11065 ;; *************** function _strncmp *****************
 11066 ;; Defined at:
 11067 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncmp.c"
 11068 ;; Parameters:    Size  Location     Type
 11069 ;;  s1              2   35[COMRAM] PTR const unsigned char 
 11070 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 11071 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 11072 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 11073 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 11074 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 11075 ;;		 -> STR_27(7), STR_25(7), NULL(0), 
 11076 ;;  s2              2   37[COMRAM] PTR const unsigned char 
 11077 ;;		 -> STR_72(4), STR_69(9), STR_68(11), STR_55(11), 
 11078 ;;		 -> STR_46(12), STR_38(10), STR_36(10), STR_31(9), 
 11079 ;;		 -> STR_28(10), STR_26(8), STR_24(8), 
 11080 ;;  len             2   39[COMRAM] unsigned int 
 11081 ;; Auto vars:     Size  Location     Type
 11082 ;;		None
 11083 ;; Return value:  Size  Location     Type
 11084 ;;                  2   35[COMRAM] int 
 11085 ;; Registers used:
 11086 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 11087 ;; Tracked objects:
 11088 ;;		On entry : 0/0
 11089 ;;		On exit  : 0/0
 11090 ;;		Unchanged: 0/0
 11091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11092 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11094 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11096 ;;Total ram usage:        9 bytes
 11097 ;; Hardware stack levels used:    1
 11098 ;; Hardware stack levels required when called:    5
 11099 ;; This function calls:
 11100 ;;		Nothing
 11101 ;; This function is called by:
 11102 ;;		_strstr
 11103 ;; This function uses a non-reentrant model
 11104 ;;
 11105                           
 11106                           	psect	text47
 11107  002A2C                     __ptext47:
 11108                           	opt stack 0
 11109  002A2C                     _strncmp:
 11110                           	opt stack 22
 11111                           
 11112                           ;incstack = 0
 11113  002A2C  D05A               	goto	l6269
 11114  002A2E                     l6259:
 11115  002A2E  C024  FFF6         	movff	strncmp@s1,tblptrl
 11116  002A32  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 11117  002A36  0E00               	movlw	low (__mediumconst shr (0+16))
 11118  002A38  6EF8               	movwf	tblptru,c
 11119  002A3A  0E0F               	movlw	(high __ramtop+-1)
 11120  002A3C  64F7               	cpfsgt	tblptrh,c
 11121  002A3E  D003               	bra	u6217
 11122  002A40  0008               	tblrd		*
 11123  002A42  50F5               	movf	tablat,w,c
 11124  002A44  D005               	bra	u6210
 11125  002A46                     u6217:
 11126  002A46  CFF6 FFE9          	movff	tblptrl,fsr0l
 11127  002A4A  CFF7 FFEA          	movff	tblptrh,fsr0h
 11128  002A4E  50EF               	movf	indf0,w,c
 11129  002A50                     u6210:
 11130  002A50  0900               	iorlw	0
 11131  002A52  B4D8               	btfsc	status,2,c
 11132  002A54  D01C               	goto	l6263
 11133  002A56  C026  FFF6         	movff	strncmp@s2,tblptrl
 11134  002A5A  C027  FFF7         	movff	strncmp@s2+1,tblptrh
 11135  002A5E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11136  002A5E  6AF8               	clrf	tblptru,c
 11137  002A60                     	endif
 11138  002A60                     	if	0	;tblptru may be non-zero
 11139  002A60                     	endif
 11140  002A60  0008               	tblrd		*
 11141  002A62  CFF5 F02A          	movff	tablat,??_strncmp
 11142  002A66  C024  FFF6         	movff	strncmp@s1,tblptrl
 11143  002A6A  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 11144  002A6E  0E00               	movlw	low (__mediumconst shr (0+16))
 11145  002A70  6EF8               	movwf	tblptru,c
 11146  002A72  0E0F               	movlw	(high __ramtop+-1)
 11147  002A74  64F7               	cpfsgt	tblptrh,c
 11148  002A76  D003               	bra	u6237
 11149  002A78  0008               	tblrd		*
 11150  002A7A  50F5               	movf	tablat,w,c
 11151  002A7C  D005               	bra	u6235
 11152  002A7E                     u6237:
 11153  002A7E  CFF6 FFE9          	movff	tblptrl,fsr0l
 11154  002A82  CFF7 FFEA          	movff	tblptrh,fsr0h
 11155  002A86  50EF               	movf	indf0,w,c
 11156  002A88                     u6235:
 11157  002A88  182A               	xorwf	??_strncmp,w,c
 11158  002A8A  B4D8               	btfsc	status,2,c
 11159  002A8C  D026               	goto	l6267
 11160  002A8E                     l6263:
 11161  002A8E  C026  FFF6         	movff	strncmp@s2,tblptrl
 11162  002A92  C027  FFF7         	movff	strncmp@s2+1,tblptrh
 11163  002A96                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11164  002A96  6AF8               	clrf	tblptru,c
 11165  002A98                     	endif
 11166  002A98                     	if	0	;tblptru may be non-zero
 11167  002A98                     	endif
 11168  002A98  0008               	tblrd		*
 11169  002A9A  50F5               	movf	tablat,w,c
 11170  002A9C  6E2A               	movwf	??_strncmp& (0+255),c
 11171  002A9E  6A2B               	clrf	(??_strncmp+1)& (0+255),c
 11172  002AA0  1E2A               	comf	??_strncmp,f,c
 11173  002AA2  1E2B               	comf	??_strncmp+1,f,c
 11174  002AA4  4A2A               	infsnz	??_strncmp,f,c
 11175  002AA6  2A2B               	incf	??_strncmp+1,f,c
 11176  002AA8  C024  FFF6         	movff	strncmp@s1,tblptrl
 11177  002AAC  C025  FFF7         	movff	strncmp@s1+1,tblptrh
 11178  002AB0  0E00               	movlw	low (__mediumconst shr (0+16))
 11179  002AB2  6EF8               	movwf	tblptru,c
 11180  002AB4  0E0F               	movlw	(high __ramtop+-1)
 11181  002AB6  64F7               	cpfsgt	tblptrh,c
 11182  002AB8  D003               	bra	u6247
 11183  002ABA  0008               	tblrd		*
 11184  002ABC  50F5               	movf	tablat,w,c
 11185  002ABE  D005               	bra	u6240
 11186  002AC0                     u6247:
 11187  002AC0  CFF6 FFE9          	movff	tblptrl,fsr0l
 11188  002AC4  CFF7 FFEA          	movff	tblptrh,fsr0h
 11189  002AC8  50EF               	movf	indf0,w,c
 11190  002ACA                     u6240:
 11191  002ACA  6E2C               	movwf	(??_strncmp+2)& (0+255),c
 11192  002ACC  502C               	movf	??_strncmp+2,w,c
 11193  002ACE  242A               	addwf	??_strncmp,w,c
 11194  002AD0  6E24               	movwf	?_strncmp,c
 11195  002AD2  0E00               	movlw	0
 11196  002AD4  202B               	addwfc	??_strncmp+1,w,c
 11197  002AD6  6E25               	movwf	?_strncmp+1,c
 11198  002AD8  0012               	return	
 11199  002ADA                     l6267:
 11200  002ADA  4A24               	infsnz	strncmp@s1,f,c
 11201  002ADC  2A25               	incf	strncmp@s1+1,f,c
 11202  002ADE  4A26               	infsnz	strncmp@s2,f,c
 11203  002AE0  2A27               	incf	strncmp@s2+1,f,c
 11204  002AE2                     l6269:
 11205  002AE2  0628               	decf	strncmp@len,f,c
 11206  002AE4  A0D8               	btfss	status,0,c
 11207  002AE6  0629               	decf	strncmp@len+1,f,c
 11208  002AE8  2828               	incf	strncmp@len,w,c
 11209  002AEA  E1A1               	bnz	l6259
 11210  002AEC  2829               	incf	strncmp@len+1,w,c
 11211  002AEE  A4D8               	btfss	status,2,c
 11212  002AF0  D79E               	goto	l6259
 11213  002AF2  0E00               	movlw	0
 11214  002AF4  6E25               	movwf	?_strncmp+1,c
 11215  002AF6  0E00               	movlw	0
 11216  002AF8  6E24               	movwf	?_strncmp,c
 11217  002AFA  0012               	return	
 11218  002AFC                     __end_of_strncmp:
 11219                           	opt stack 0
 11220                           tblptru	equ	0xFF8
 11221                           tblptrh	equ	0xFF7
 11222                           tblptrl	equ	0xFF6
 11223                           tablat	equ	0xFF5
 11224                           prodh	equ	0xFF4
 11225                           prodl	equ	0xFF3
 11226                           intcon	equ	0xFF2
 11227                           indf0	equ	0xFEF
 11228                           postinc0	equ	0xFEE
 11229                           fsr0h	equ	0xFEA
 11230                           fsr0l	equ	0xFE9
 11231                           wreg	equ	0xFE8
 11232                           indf1	equ	0xFE7
 11233                           postdec1	equ	0xFE5
 11234                           fsr1h	equ	0xFE2
 11235                           fsr1l	equ	0xFE1
 11236                           indf2	equ	0xFDF
 11237                           postinc2	equ	0xFDE
 11238                           fsr2h	equ	0xFDA
 11239                           fsr2l	equ	0xFD9
 11240                           status	equ	0xFD8
 11241                           
 11242 ;; *************** function _strchr *****************
 11243 ;; Defined at:
 11244 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strchr.c"
 11245 ;; Parameters:    Size  Location     Type
 11246 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
 11247 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 11248 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 11249 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 11250 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 11251 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 11252 ;;		 -> STR_27(7), STR_25(7), NULL(0), 
 11253 ;;  chr             2   17[COMRAM] int 
 11254 ;; Auto vars:     Size  Location     Type
 11255 ;;		None
 11256 ;; Return value:  Size  Location     Type
 11257 ;;                  2   15[COMRAM] PTR unsigned char 
 11258 ;; Registers used:
 11259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 11260 ;; Tracked objects:
 11261 ;;		On entry : 0/0
 11262 ;;		On exit  : 0/0
 11263 ;;		Unchanged: 0/0
 11264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11265 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11267 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11268 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;Total ram usage:        6 bytes
 11270 ;; Hardware stack levels used:    1
 11271 ;; Hardware stack levels required when called:    5
 11272 ;; This function calls:
 11273 ;;		Nothing
 11274 ;; This function is called by:
 11275 ;;		_strstr
 11276 ;;		_strcspn
 11277 ;;		_strspn
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           	psect	text48
 11282  002E8E                     __ptext48:
 11283                           	opt stack 0
 11284  002E8E                     _strchr:
 11285                           	opt stack 21
 11286  002E8E  C010  FFF6         	movff	strchr@ptr,tblptrl
 11287  002E92  C011  FFF7         	movff	strchr@ptr+1,tblptrh
 11288  002E96  0E00               	movlw	low (__mediumconst shr (0+16))
 11289  002E98  6EF8               	movwf	tblptru,c
 11290  002E9A  0E0F               	movlw	(high __ramtop+-1)
 11291  002E9C  64F7               	cpfsgt	tblptrh,c
 11292  002E9E  D003               	bra	u5927
 11293  002EA0  0008               	tblrd		*
 11294  002EA2  50F5               	movf	tablat,w,c
 11295  002EA4  D005               	bra	u5920
 11296  002EA6                     u5927:
 11297  002EA6  CFF6 FFE9          	movff	tblptrl,fsr0l
 11298  002EAA  CFF7 FFEA          	movff	tblptrh,fsr0h
 11299  002EAE  50EF               	movf	indf0,w,c
 11300  002EB0                     u5920:
 11301  002EB0  1812               	xorwf	strchr@chr,w,c
 11302  002EB2  A4D8               	btfss	status,2,c
 11303  002EB4  D005               	goto	l6055
 11304  002EB6  C010  F010         	movff	strchr@ptr,?_strchr
 11305  002EBA  C011  F011         	movff	strchr@ptr+1,?_strchr+1
 11306  002EBE  0012               	return	
 11307  002EC0                     l6055:
 11308  002EC0  5010               	movf	strchr@ptr,w,c
 11309  002EC2  6E14               	movwf	??_strchr& (0+255),c
 11310  002EC4  5011               	movf	strchr@ptr+1,w,c
 11311  002EC6  6E15               	movwf	(??_strchr+1)& (0+255),c
 11312  002EC8  4A10               	infsnz	strchr@ptr,f,c
 11313  002ECA  2A11               	incf	strchr@ptr+1,f,c
 11314  002ECC  C014  FFF6         	movff	??_strchr,tblptrl
 11315  002ED0  C015  FFF7         	movff	??_strchr+1,tblptrh
 11316  002ED4  0E00               	movlw	low (__mediumconst shr (0+16))
 11317  002ED6  6EF8               	movwf	tblptru,c
 11318  002ED8  0E0F               	movlw	(high __ramtop+-1)
 11319  002EDA  64F7               	cpfsgt	tblptrh,c
 11320  002EDC  D003               	bra	u5947
 11321  002EDE  0008               	tblrd		*
 11322  002EE0  50F5               	movf	tablat,w,c
 11323  002EE2  D005               	bra	u5940
 11324  002EE4                     u5947:
 11325  002EE4  CFF6 FFE9          	movff	tblptrl,fsr0l
 11326  002EE8  CFF7 FFEA          	movff	tblptrh,fsr0h
 11327  002EEC  50EF               	movf	indf0,w,c
 11328  002EEE                     u5940:
 11329  002EEE  0900               	iorlw	0
 11330  002EF0  A4D8               	btfss	status,2,c
 11331  002EF2  D7CD               	goto	l6049
 11332  002EF4  0E00               	movlw	0
 11333  002EF6  6E10               	movwf	?_strchr,c
 11334  002EF8  0E00               	movlw	0
 11335  002EFA  6E11               	movwf	?_strchr+1,c
 11336  002EFC  0012               	return	
 11337  002EFE                     __end_of_strchr:
 11338                           	opt stack 0
 11339                           tblptru	equ	0xFF8
 11340                           tblptrh	equ	0xFF7
 11341                           tblptrl	equ	0xFF6
 11342                           tablat	equ	0xFF5
 11343                           prodh	equ	0xFF4
 11344                           prodl	equ	0xFF3
 11345                           intcon	equ	0xFF2
 11346                           indf0	equ	0xFEF
 11347                           postinc0	equ	0xFEE
 11348                           fsr0h	equ	0xFEA
 11349                           fsr0l	equ	0xFE9
 11350                           wreg	equ	0xFE8
 11351                           indf1	equ	0xFE7
 11352                           postdec1	equ	0xFE5
 11353                           fsr1h	equ	0xFE2
 11354                           fsr1l	equ	0xFE1
 11355                           indf2	equ	0xFDF
 11356                           postinc2	equ	0xFDE
 11357                           fsr2h	equ	0xFDA
 11358                           fsr2l	equ	0xFD9
 11359                           status	equ	0xFD8
 11360                           
 11361 ;; *************** function _strcpy *****************
 11362 ;; Defined at:
 11363 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 11364 ;; Parameters:    Size  Location     Type
 11365 ;;  to              2   15[COMRAM] PTR unsigned char 
 11366 ;;		 -> CMD(15), cmd_data(49), clcd_display_string_details(1080), 
 11367 ;;  from            2   17[COMRAM] PTR const unsigned char 
 11368 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 11369 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 11370 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 11371 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 11372 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 11373 ;;		 -> RAM(3895), STR_27(7), STR_25(7), NULL(0), 
 11374 ;;		 -> cmd_data.data(40), cmd_data(49), 
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;  cp              2   19[COMRAM] PTR unsigned char 
 11377 ;;		 -> CMD(15), cmd_data(49), clcd_display_string_details(1080), 
 11378 ;; Return value:  Size  Location     Type
 11379 ;;                  2   15[COMRAM] PTR unsigned char 
 11380 ;; Registers used:
 11381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11382 ;; Tracked objects:
 11383 ;;		On entry : 0/0
 11384 ;;		On exit  : 0/0
 11385 ;;		Unchanged: 0/0
 11386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11387 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;Total ram usage:        6 bytes
 11392 ;; Hardware stack levels used:    1
 11393 ;; Hardware stack levels required when called:    5
 11394 ;; This function calls:
 11395 ;;		Nothing
 11396 ;; This function is called by:
 11397 ;;		_copy_data
 11398 ;;		_parse_cmd_str
 11399 ;;		_get_str
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403                           	psect	text49
 11404  0032A0                     __ptext49:
 11405                           	opt stack 0
 11406  0032A0                     _strcpy:
 11407                           	opt stack 21
 11408                           
 11409                           ;incstack = 0
 11410  0032A0  C010  F014         	movff	strcpy@to,strcpy@cp
 11411  0032A4  C011  F015         	movff	strcpy@to+1,strcpy@cp+1
 11412  0032A8  D004               	goto	l5903
 11413  0032AA                     l5901:
 11414  0032AA  4A14               	infsnz	strcpy@cp,f,c
 11415  0032AC  2A15               	incf	strcpy@cp+1,f,c
 11416  0032AE  4A12               	infsnz	strcpy@from,f,c
 11417  0032B0  2A13               	incf	strcpy@from+1,f,c
 11418  0032B2                     l5903:
 11419  0032B2  C012  FFF6         	movff	strcpy@from,tblptrl
 11420  0032B6  C013  FFF7         	movff	strcpy@from+1,tblptrh
 11421  0032BA  0E00               	movlw	low (__mediumconst shr (0+16))
 11422  0032BC  6EF8               	movwf	tblptru,c
 11423  0032BE  C014  FFD9         	movff	strcpy@cp,fsr2l
 11424  0032C2  C015  FFDA         	movff	strcpy@cp+1,fsr2h
 11425  0032C6  0E0F               	movlw	(high __ramtop+-1)
 11426  0032C8  64F7               	cpfsgt	tblptrh,c
 11427  0032CA  D003               	bra	u5657
 11428  0032CC  0008               	tblrd		*
 11429  0032CE  50F5               	movf	tablat,w,c
 11430  0032D0  D005               	bra	u5650
 11431  0032D2                     u5657:
 11432  0032D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 11433  0032D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 11434  0032DA  50EF               	movf	indf0,w,c
 11435  0032DC                     u5650:
 11436  0032DC  6EDF               	movwf	indf2,c
 11437  0032DE  50DF               	movf	indf2,w,c
 11438  0032E0  B4D8               	btfsc	status,2,c
 11439  0032E2  0012               	return	
 11440  0032E4  D7E2               	goto	l5901
 11441  0032E6                     __end_of_strcpy:
 11442                           	opt stack 0
 11443                           tblptru	equ	0xFF8
 11444                           tblptrh	equ	0xFF7
 11445                           tblptrl	equ	0xFF6
 11446                           tablat	equ	0xFF5
 11447                           prodh	equ	0xFF4
 11448                           prodl	equ	0xFF3
 11449                           intcon	equ	0xFF2
 11450                           indf0	equ	0xFEF
 11451                           postinc0	equ	0xFEE
 11452                           fsr0h	equ	0xFEA
 11453                           fsr0l	equ	0xFE9
 11454                           wreg	equ	0xFE8
 11455                           indf1	equ	0xFE7
 11456                           postdec1	equ	0xFE5
 11457                           fsr1h	equ	0xFE2
 11458                           fsr1l	equ	0xFE1
 11459                           indf2	equ	0xFDF
 11460                           postinc2	equ	0xFDE
 11461                           fsr2h	equ	0xFDA
 11462                           fsr2l	equ	0xFD9
 11463                           status	equ	0xFD8
 11464                           
 11465 ;; *************** function _memset *****************
 11466 ;; Defined at:
 11467 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memset.c"
 11468 ;; Parameters:    Size  Location     Type
 11469 ;;  p1              2   35[COMRAM] PTR void 
 11470 ;;		 -> uart_str(150), str_data(40), CMD(15), cmd_data(49), 
 11471 ;;		 -> conflict_arr(20), clcd_display_string_details(1080), lcd_display_array(80), clcd_config_data(5), 
 11472 ;;  c               2   37[COMRAM] int 
 11473 ;;  n               2   39[COMRAM] unsigned int 
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;  p               2   41[COMRAM] PTR unsigned char 
 11476 ;;		 -> uart_str(150), str_data(40), CMD(15), cmd_data(49), 
 11477 ;;		 -> conflict_arr(20), clcd_display_string_details(1080), lcd_display_array(80), clcd_config_data(5), 
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  2   35[COMRAM] PTR void 
 11480 ;; Registers used:
 11481 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11487 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11488 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;Total ram usage:        8 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; Hardware stack levels required when called:    5
 11494 ;; This function calls:
 11495 ;;		Nothing
 11496 ;; This function is called by:
 11497 ;;		_init_CLCD_config
 11498 ;;		_init_clcd_cusotom_lcd
 11499 ;;		_update_string_data
 11500 ;;		_clcd_display_string_config
 11501 ;;		_clear_display_structure
 11502 ;;		_clear_display_array
 11503 ;;		_scroll_left_to_right
 11504 ;;		_scroll_right_to_left
 11505 ;;		_clear_cmd_data
 11506 ;;		_parse_cmd_str
 11507 ;;		_console_init
 11508 ;;		_cmd_consol_task
 11509 ;;		_get_str
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           	psect	text50
 11514  003558                     __ptext50:
 11515                           	opt stack 0
 11516  003558                     _memset:
 11517                           	opt stack 23
 11518                           
 11519                           ;incstack = 0
 11520  003558  C024  F02A         	movff	memset@p1,memset@p
 11521  00355C  C025  F02B         	movff	memset@p1+1,memset@p+1
 11522  003560  D008               	goto	l5627
 11523  003562                     l5623:
 11524  003562  C02A  FFD9         	movff	memset@p,fsr2l
 11525  003566  C02B  FFDA         	movff	memset@p+1,fsr2h
 11526  00356A  C026  FFDF         	movff	memset@c,indf2
 11527  00356E  4A2A               	infsnz	memset@p,f,c
 11528  003570  2A2B               	incf	memset@p+1,f,c
 11529  003572                     l5627:
 11530  003572  0628               	decf	memset@n,f,c
 11531  003574  A0D8               	btfss	status,0,c
 11532  003576  0629               	decf	memset@n+1,f,c
 11533  003578  2828               	incf	memset@n,w,c
 11534  00357A  E1F3               	bnz	l5623
 11535  00357C  2829               	incf	memset@n+1,w,c
 11536  00357E  B4D8               	btfsc	status,2,c
 11537  003580  0012               	return	
 11538  003582  D7EF               	goto	l5623
 11539  003584                     __end_of_memset:
 11540                           	opt stack 0
 11541                           tblptru	equ	0xFF8
 11542                           tblptrh	equ	0xFF7
 11543                           tblptrl	equ	0xFF6
 11544                           tablat	equ	0xFF5
 11545                           prodh	equ	0xFF4
 11546                           prodl	equ	0xFF3
 11547                           intcon	equ	0xFF2
 11548                           indf0	equ	0xFEF
 11549                           postinc0	equ	0xFEE
 11550                           fsr0h	equ	0xFEA
 11551                           fsr0l	equ	0xFE9
 11552                           wreg	equ	0xFE8
 11553                           indf1	equ	0xFE7
 11554                           postdec1	equ	0xFE5
 11555                           fsr1h	equ	0xFE2
 11556                           fsr1l	equ	0xFE1
 11557                           indf2	equ	0xFDF
 11558                           postinc2	equ	0xFDE
 11559                           fsr2h	equ	0xFDA
 11560                           fsr2l	equ	0xFD9
 11561                           status	equ	0xFD8
 11562                           
 11563 ;; *************** function _collect_row *****************
 11564 ;; Defined at:
 11565 ;;		line 16 in file "cmd_consol.c"
 11566 ;; Parameters:    Size  Location     Type
 11567 ;;  str             2   53[COMRAM] PTR unsigned char 
 11568 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 11569 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 11570 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 11571 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 11572 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 11573 ;;		 -> RAM(3895), STR_27(7), STR_25(7), NULL(0), 
 11574 ;;  data_row        2   55[COMRAM] PTR unsigned char 
 11575 ;;		 -> cmd_data(49), 
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;  i               2   60[COMRAM] int 
 11578 ;;  row             1   62[COMRAM] unsigned char 
 11579 ;; Return value:  Size  Location     Type
 11580 ;;                  1    wreg      void 
 11581 ;; Registers used:
 11582 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11583 ;; Tracked objects:
 11584 ;;		On entry : 0/0
 11585 ;;		On exit  : 0/0
 11586 ;;		Unchanged: 0/0
 11587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11588 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11589 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11592 ;;Total ram usage:       10 bytes
 11593 ;; Hardware stack levels used:    1
 11594 ;; Hardware stack levels required when called:    8
 11595 ;; This function calls:
 11596 ;;		_isdigit
 11597 ;;		_printf
 11598 ;;		_strlen
 11599 ;; This function is called by:
 11600 ;;		_parse_cmd_str
 11601 ;; This function uses a non-reentrant model
 11602 ;;
 11603                           
 11604                           	psect	text51
 11605  002952                     __ptext51:
 11606                           	opt stack 0
 11607  002952                     _collect_row:
 11608                           	opt stack 20
 11609                           
 11610                           ;cmd_consol.c: 17: char row = 0;
 11611                           
 11612                           ;incstack = 0
 11613  002952  0E00               	movlw	0
 11614  002954  6E3F               	movwf	collect_row@row,c
 11615                           
 11616                           ;cmd_consol.c: 18: int i = 0;
 11617  002956  0E00               	movlw	0
 11618  002958  6E3E               	movwf	collect_row@i+1,c
 11619  00295A  0E00               	movlw	0
 11620  00295C  6E3D               	movwf	collect_row@i,c
 11621                           
 11622                           ;cmd_consol.c: 19: for (i = 0; i < strlen(str); i++) {
 11623  00295E  0E00               	movlw	0
 11624  002960  6E3E               	movwf	collect_row@i+1,c
 11625  002962  0E00               	movlw	0
 11626  002964  6E3D               	movwf	collect_row@i,c
 11627  002966  D03B               	goto	l6479
 11628  002968                     l6473:
 11629                           
 11630                           ;cmd_consol.c: 20: if (isdigit(str[i]) == 1)
 11631  002968  503D               	movf	collect_row@i,w,c
 11632  00296A  2436               	addwf	collect_row@str,w,c
 11633  00296C  6E3A               	movwf	??_collect_row& (0+255),c
 11634  00296E  503E               	movf	collect_row@i+1,w,c
 11635  002970  2037               	addwfc	collect_row@str+1,w,c
 11636  002972  6E3B               	movwf	(??_collect_row+1)& (0+255),c
 11637  002974  C03A  FFF6         	movff	??_collect_row,tblptrl
 11638  002978  C03B  FFF7         	movff	??_collect_row+1,tblptrh
 11639  00297C  0E00               	movlw	low (__mediumconst shr (0+16))
 11640  00297E  6EF8               	movwf	tblptru,c
 11641  002980  0E0F               	movlw	(high __ramtop+-1)
 11642  002982  64F7               	cpfsgt	tblptrh,c
 11643  002984  D003               	bra	u6427
 11644  002986  0008               	tblrd		*
 11645  002988  50F5               	movf	tablat,w,c
 11646  00298A  D005               	bra	u6420
 11647  00298C                     u6427:
 11648  00298C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11649  002990  CFF7 FFEA          	movff	tblptrh,fsr0h
 11650  002994  50EF               	movf	indf0,w,c
 11651  002996                     u6420:
 11652  002996  EC40  F01B         	call	_isdigit
 11653  00299A  A0D8               	btfss	status,0,c
 11654  00299C  0012               	return	
 11655                           
 11656                           ;cmd_consol.c: 21: row = row * 10 + (str[i] - '0');
 11657  00299E  503D               	movf	collect_row@i,w,c
 11658  0029A0  2436               	addwf	collect_row@str,w,c
 11659  0029A2  6E3A               	movwf	??_collect_row& (0+255),c
 11660  0029A4  503E               	movf	collect_row@i+1,w,c
 11661  0029A6  2037               	addwfc	collect_row@str+1,w,c
 11662  0029A8  6E3B               	movwf	(??_collect_row+1)& (0+255),c
 11663  0029AA  C03A  FFF6         	movff	??_collect_row,tblptrl
 11664  0029AE  C03B  FFF7         	movff	??_collect_row+1,tblptrh
 11665  0029B2  0E00               	movlw	low (__mediumconst shr (0+16))
 11666  0029B4  6EF8               	movwf	tblptru,c
 11667  0029B6  0E0F               	movlw	(high __ramtop+-1)
 11668  0029B8  64F7               	cpfsgt	tblptrh,c
 11669  0029BA  D003               	bra	u6447
 11670  0029BC  0008               	tblrd		*
 11671  0029BE  50F5               	movf	tablat,w,c
 11672  0029C0  D005               	bra	u6440
 11673  0029C2                     u6447:
 11674  0029C2  CFF6 FFE9          	movff	tblptrl,fsr0l
 11675  0029C6  CFF7 FFEA          	movff	tblptrh,fsr0h
 11676  0029CA  50EF               	movf	indf0,w,c
 11677  0029CC                     u6440:
 11678  0029CC  6E3C               	movwf	(??_collect_row+2)& (0+255),c
 11679  0029CE  503F               	movf	collect_row@row,w,c
 11680  0029D0  0D0A               	mullw	10
 11681  0029D2  50F3               	movf	prodl,w,c
 11682  0029D4  243C               	addwf	??_collect_row+2,w,c
 11683  0029D6  0FD0               	addlw	208
 11684  0029D8  6E3F               	movwf	collect_row@row,c
 11685                           
 11686                           ;cmd_consol.c: 22: else
 11687                           ;cmd_consol.c: 23: return;
 11688  0029DA  4A3D               	infsnz	collect_row@i,f,c
 11689  0029DC  2A3E               	incf	collect_row@i+1,f,c
 11690  0029DE                     l6479:
 11691  0029DE  C036  F01E         	movff	collect_row@str,strlen@s
 11692  0029E2  C037  F01F         	movff	collect_row@str+1,strlen@s+1
 11693  0029E6  EC3E  F018         	call	_strlen	;wreg free
 11694  0029EA  501E               	movf	?_strlen,w,c
 11695  0029EC  5C3D               	subwf	collect_row@i,w,c
 11696  0029EE  501F               	movf	?_strlen+1,w,c
 11697  0029F0  583E               	subwfb	collect_row@i+1,w,c
 11698  0029F2  A0D8               	btfss	status,0,c
 11699  0029F4  D7B9               	goto	l6473
 11700                           
 11701                           ;cmd_consol.c: 24: }
 11702                           ;cmd_consol.c: 25: printf("row = %d\r\n", row);
 11703  0029F6  0E0B               	movlw	low STR_16
 11704  0029F8  6E24               	movwf	printf@f,c
 11705  0029FA  0EFF               	movlw	high STR_16
 11706  0029FC  6E25               	movwf	printf@f+1,c
 11707  0029FE  C03F  F026         	movff	collect_row@row,?_printf+2
 11708  002A02  6A27               	clrf	?_printf+3,c
 11709  002A04  EC09  F011         	call	_printf	;wreg free
 11710                           
 11711                           ;cmd_consol.c: 26: if (row >= clcd_config_data.clcd_max_row) {
 11712  002A08  504A               	movf	_clcd_config_data+1,w,c
 11713  002A0A  5C3F               	subwf	collect_row@row,w,c
 11714  002A0C  A0D8               	btfss	status,0,c
 11715  002A0E  D007               	goto	l6487
 11716                           
 11717                           ;cmd_consol.c: 27: *data_row = -1;
 11718  002A10  C038  FFD9         	movff	collect_row@data_row,fsr2l
 11719  002A14  C039  FFDA         	movff	collect_row@data_row+1,fsr2h
 11720  002A18  0EFF               	movlw	255
 11721  002A1A  6EDF               	movwf	indf2,c
 11722                           
 11723                           ;cmd_consol.c: 28: } else {
 11724  002A1C  0012               	return	
 11725  002A1E                     l6487:
 11726                           
 11727                           ;cmd_consol.c: 29: *data_row = row;
 11728  002A1E  C038  FFD9         	movff	collect_row@data_row,fsr2l
 11729  002A22  C039  FFDA         	movff	collect_row@data_row+1,fsr2h
 11730  002A26  C03F  FFDF         	movff	collect_row@row,indf2
 11731  002A2A  0012               	return	
 11732  002A2C                     __end_of_collect_row:
 11733                           	opt stack 0
 11734                           tblptru	equ	0xFF8
 11735                           tblptrh	equ	0xFF7
 11736                           tblptrl	equ	0xFF6
 11737                           tablat	equ	0xFF5
 11738                           prodh	equ	0xFF4
 11739                           prodl	equ	0xFF3
 11740                           intcon	equ	0xFF2
 11741                           indf0	equ	0xFEF
 11742                           postinc0	equ	0xFEE
 11743                           fsr0h	equ	0xFEA
 11744                           fsr0l	equ	0xFE9
 11745                           wreg	equ	0xFE8
 11746                           indf1	equ	0xFE7
 11747                           postdec1	equ	0xFE5
 11748                           fsr1h	equ	0xFE2
 11749                           fsr1l	equ	0xFE1
 11750                           indf2	equ	0xFDF
 11751                           postinc2	equ	0xFDE
 11752                           fsr2h	equ	0xFDA
 11753                           fsr2l	equ	0xFD9
 11754                           status	equ	0xFD8
 11755                           
 11756 ;; *************** function _collect_column *****************
 11757 ;; Defined at:
 11758 ;;		line 52 in file "cmd_consol.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;  str             2   53[COMRAM] PTR unsigned char 
 11761 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 11762 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 11763 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 11764 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 11765 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 11766 ;;		 -> RAM(3895), STR_27(7), STR_25(7), NULL(0), 
 11767 ;;  data_column     2   55[COMRAM] PTR unsigned char 
 11768 ;;		 -> cmd_data(49), 
 11769 ;; Auto vars:     Size  Location     Type
 11770 ;;  i               2   61[COMRAM] int 
 11771 ;;  column          1   60[COMRAM] unsigned char 
 11772 ;; Return value:  Size  Location     Type
 11773 ;;                  1    wreg      void 
 11774 ;; Registers used:
 11775 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11776 ;; Tracked objects:
 11777 ;;		On entry : 0/0
 11778 ;;		On exit  : 0/0
 11779 ;;		Unchanged: 0/0
 11780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11781 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11782 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11783 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11785 ;;Total ram usage:       10 bytes
 11786 ;; Hardware stack levels used:    1
 11787 ;; Hardware stack levels required when called:    8
 11788 ;; This function calls:
 11789 ;;		_isdigit
 11790 ;;		_printf
 11791 ;;		_strlen
 11792 ;; This function is called by:
 11793 ;;		_parse_cmd_str
 11794 ;; This function uses a non-reentrant model
 11795 ;;
 11796                           
 11797                           	psect	text52
 11798  0023EA                     __ptext52:
 11799                           	opt stack 0
 11800  0023EA                     _collect_column:
 11801                           	opt stack 20
 11802                           
 11803                           ;cmd_consol.c: 53: printf("col..1 = %s\r\n", str);
 11804                           
 11805                           ;incstack = 0
 11806  0023EA  0E78               	movlw	low STR_17
 11807  0023EC  6E24               	movwf	printf@f,c
 11808  0023EE  0EFE               	movlw	high STR_17
 11809  0023F0  6E25               	movwf	printf@f+1,c
 11810  0023F2  C036  F026         	movff	collect_column@str,?_printf+2
 11811  0023F6  C037  F027         	movff	collect_column@str+1,?_printf+3
 11812  0023FA  EC09  F011         	call	_printf	;wreg free
 11813                           
 11814                           ;cmd_consol.c: 54: int i = 0;
 11815  0023FE  0E00               	movlw	0
 11816  002400  6E3F               	movwf	collect_column@i+1,c
 11817  002402  0E00               	movlw	0
 11818  002404  6E3E               	movwf	collect_column@i,c
 11819                           
 11820                           ;cmd_consol.c: 55: char column = 0;
 11821  002406  0E00               	movlw	0
 11822  002408  6E3D               	movwf	collect_column@column,c
 11823                           
 11824                           ;cmd_consol.c: 56: for (i = 0; i < strlen(str); i++) {
 11825  00240A  0E00               	movlw	0
 11826  00240C  6E3F               	movwf	collect_column@i+1,c
 11827  00240E  0E00               	movlw	0
 11828  002410  6E3E               	movwf	collect_column@i,c
 11829  002412  D0AC               	goto	l6511
 11830  002414                     l6497:
 11831                           
 11832                           ;cmd_consol.c: 57: if (isdigit(str[i]) == 1) {
 11833  002414  503E               	movf	collect_column@i,w,c
 11834  002416  2436               	addwf	collect_column@str,w,c
 11835  002418  6E3A               	movwf	??_collect_column& (0+255),c
 11836  00241A  503F               	movf	collect_column@i+1,w,c
 11837  00241C  2037               	addwfc	collect_column@str+1,w,c
 11838  00241E  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11839  002420  C03A  FFF6         	movff	??_collect_column,tblptrl
 11840  002424  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11841  002428  0E00               	movlw	low (__mediumconst shr (0+16))
 11842  00242A  6EF8               	movwf	tblptru,c
 11843  00242C  0E0F               	movlw	(high __ramtop+-1)
 11844  00242E  64F7               	cpfsgt	tblptrh,c
 11845  002430  D003               	bra	u6477
 11846  002432  0008               	tblrd		*
 11847  002434  50F5               	movf	tablat,w,c
 11848  002436  D005               	bra	u6470
 11849  002438                     u6477:
 11850  002438  CFF6 FFE9          	movff	tblptrl,fsr0l
 11851  00243C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11852  002440  50EF               	movf	indf0,w,c
 11853  002442                     u6470:
 11854  002442  EC40  F01B         	call	_isdigit
 11855  002446  A0D8               	btfss	status,0,c
 11856  002448  D05B               	goto	l6505
 11857                           
 11858                           ;cmd_consol.c: 58: column = column * 10 + (str[i] - '0');
 11859  00244A  503E               	movf	collect_column@i,w,c
 11860  00244C  2436               	addwf	collect_column@str,w,c
 11861  00244E  6E3A               	movwf	??_collect_column& (0+255),c
 11862  002450  503F               	movf	collect_column@i+1,w,c
 11863  002452  2037               	addwfc	collect_column@str+1,w,c
 11864  002454  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11865  002456  C03A  FFF6         	movff	??_collect_column,tblptrl
 11866  00245A  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11867  00245E  0E00               	movlw	low (__mediumconst shr (0+16))
 11868  002460  6EF8               	movwf	tblptru,c
 11869  002462  0E0F               	movlw	(high __ramtop+-1)
 11870  002464  64F7               	cpfsgt	tblptrh,c
 11871  002466  D003               	bra	u6497
 11872  002468  0008               	tblrd		*
 11873  00246A  50F5               	movf	tablat,w,c
 11874  00246C  D005               	bra	u6490
 11875  00246E                     u6497:
 11876  00246E  CFF6 FFE9          	movff	tblptrl,fsr0l
 11877  002472  CFF7 FFEA          	movff	tblptrh,fsr0h
 11878  002476  50EF               	movf	indf0,w,c
 11879  002478                     u6490:
 11880  002478  6E3C               	movwf	(??_collect_column+2)& (0+255),c
 11881  00247A  503D               	movf	collect_column@column,w,c
 11882  00247C  0D0A               	mullw	10
 11883  00247E  50F3               	movf	prodl,w,c
 11884  002480  243C               	addwf	??_collect_column+2,w,c
 11885  002482  0FD0               	addlw	208
 11886  002484  6E3D               	movwf	collect_column@column,c
 11887                           
 11888                           ;cmd_consol.c: 59: printf("strlen = %d, i=%d, col.. = %d\r\n", strlen(str), i, column);
 11889  002486  0EF6               	movlw	low STR_18
 11890  002488  6E24               	movwf	printf@f,c
 11891  00248A  0EFC               	movlw	high STR_18
 11892  00248C  6E25               	movwf	printf@f+1,c
 11893  00248E  C036  F01E         	movff	collect_column@str,strlen@s
 11894  002492  C037  F01F         	movff	collect_column@str+1,strlen@s+1
 11895  002496  EC3E  F018         	call	_strlen	;wreg free
 11896  00249A  C01E  F026         	movff	?_strlen,?_printf+2
 11897  00249E  C01F  F027         	movff	?_strlen+1,?_printf+3
 11898  0024A2  C03E  F028         	movff	collect_column@i,?_printf+4
 11899  0024A6  C03F  F029         	movff	collect_column@i+1,?_printf+5
 11900  0024AA  C03D  F02A         	movff	collect_column@column,?_printf+6
 11901  0024AE  6A2B               	clrf	?_printf+7,c
 11902  0024B0  EC09  F011         	call	_printf	;wreg free
 11903                           
 11904                           ;cmd_consol.c: 60: printf("str[%d] = %d\r\n", i, str[i]);
 11905  0024B4  0E5A               	movlw	low STR_19
 11906  0024B6  6E24               	movwf	printf@f,c
 11907  0024B8  0EFE               	movlw	high STR_19
 11908  0024BA  6E25               	movwf	printf@f+1,c
 11909  0024BC  C03E  F026         	movff	collect_column@i,?_printf+2
 11910  0024C0  C03F  F027         	movff	collect_column@i+1,?_printf+3
 11911  0024C4  503E               	movf	collect_column@i,w,c
 11912  0024C6  2436               	addwf	collect_column@str,w,c
 11913  0024C8  6E3A               	movwf	??_collect_column& (0+255),c
 11914  0024CA  503F               	movf	collect_column@i+1,w,c
 11915  0024CC  2037               	addwfc	collect_column@str+1,w,c
 11916  0024CE  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11917  0024D0  C03A  FFF6         	movff	??_collect_column,tblptrl
 11918  0024D4  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11919  0024D8  0E00               	movlw	low (__mediumconst shr (0+16))
 11920  0024DA  6EF8               	movwf	tblptru,c
 11921  0024DC  0E0F               	movlw	(high __ramtop+-1)
 11922  0024DE  64F7               	cpfsgt	tblptrh,c
 11923  0024E0  D003               	bra	u6507
 11924  0024E2  0008               	tblrd		*
 11925  0024E4  50F5               	movf	tablat,w,c
 11926  0024E6  D005               	bra	u6500
 11927  0024E8                     u6507:
 11928  0024E8  CFF6 FFE9          	movff	tblptrl,fsr0l
 11929  0024EC  CFF7 FFEA          	movff	tblptrh,fsr0h
 11930  0024F0  50EF               	movf	indf0,w,c
 11931  0024F2                     u6500:
 11932  0024F2  6E3C               	movwf	(??_collect_column+2)& (0+255),c
 11933  0024F4  503C               	movf	??_collect_column+2,w,c
 11934  0024F6  6E28               	movwf	?_printf+4,c
 11935  0024F8  6A29               	clrf	?_printf+5,c
 11936  0024FA  EC09  F011         	call	_printf	;wreg free
 11937                           
 11938                           ;cmd_consol.c: 61: } else {
 11939  0024FE  D034               	goto	l6509
 11940  002500                     l6505:
 11941                           
 11942                           ;cmd_consol.c: 62: printf("i = %d, col..2 = %s\r\n", i, str);
 11943  002500  0ECC               	movlw	low STR_20
 11944  002502  6E24               	movwf	printf@f,c
 11945  002504  0EFD               	movlw	high STR_20
 11946  002506  6E25               	movwf	printf@f+1,c
 11947  002508  C03E  F026         	movff	collect_column@i,?_printf+2
 11948  00250C  C03F  F027         	movff	collect_column@i+1,?_printf+3
 11949  002510  C036  F028         	movff	collect_column@str,?_printf+4
 11950  002514  C037  F029         	movff	collect_column@str+1,?_printf+5
 11951  002518  EC09  F011         	call	_printf	;wreg free
 11952                           
 11953                           ;cmd_consol.c: 63: printf("str[%d] = %d\r\n", i, str[i]);
 11954  00251C  0E5A               	movlw	low STR_19
 11955  00251E  6E24               	movwf	printf@f,c
 11956  002520  0EFE               	movlw	high STR_19
 11957  002522  6E25               	movwf	printf@f+1,c
 11958  002524  C03E  F026         	movff	collect_column@i,?_printf+2
 11959  002528  C03F  F027         	movff	collect_column@i+1,?_printf+3
 11960  00252C  503E               	movf	collect_column@i,w,c
 11961  00252E  2436               	addwf	collect_column@str,w,c
 11962  002530  6E3A               	movwf	??_collect_column& (0+255),c
 11963  002532  503F               	movf	collect_column@i+1,w,c
 11964  002534  2037               	addwfc	collect_column@str+1,w,c
 11965  002536  6E3B               	movwf	(??_collect_column+1)& (0+255),c
 11966  002538  C03A  FFF6         	movff	??_collect_column,tblptrl
 11967  00253C  C03B  FFF7         	movff	??_collect_column+1,tblptrh
 11968  002540  0E00               	movlw	low (__mediumconst shr (0+16))
 11969  002542  6EF8               	movwf	tblptru,c
 11970  002544  0E0F               	movlw	(high __ramtop+-1)
 11971  002546  64F7               	cpfsgt	tblptrh,c
 11972  002548  D003               	bra	u6517
 11973  00254A  0008               	tblrd		*
 11974  00254C  50F5               	movf	tablat,w,c
 11975  00254E  D005               	bra	u6510
 11976  002550                     u6517:
 11977  002550  CFF6 FFE9          	movff	tblptrl,fsr0l
 11978  002554  CFF7 FFEA          	movff	tblptrh,fsr0h
 11979  002558  50EF               	movf	indf0,w,c
 11980  00255A                     u6510:
 11981  00255A  6E3C               	movwf	(??_collect_column+2)& (0+255),c
 11982  00255C  503C               	movf	??_collect_column+2,w,c
 11983  00255E  6E28               	movwf	?_printf+4,c
 11984  002560  6A29               	clrf	?_printf+5,c
 11985  002562  EC09  F011         	call	_printf	;wreg free
 11986                           
 11987                           ;cmd_consol.c: 64: return;
 11988  002566  0012               	return	
 11989  002568                     l6509:
 11990  002568  4A3E               	infsnz	collect_column@i,f,c
 11991  00256A  2A3F               	incf	collect_column@i+1,f,c
 11992  00256C                     l6511:
 11993  00256C  C036  F01E         	movff	collect_column@str,strlen@s
 11994  002570  C037  F01F         	movff	collect_column@str+1,strlen@s+1
 11995  002574  EC3E  F018         	call	_strlen	;wreg free
 11996  002578  501E               	movf	?_strlen,w,c
 11997  00257A  5C3E               	subwf	collect_column@i,w,c
 11998  00257C  501F               	movf	?_strlen+1,w,c
 11999  00257E  583F               	subwfb	collect_column@i+1,w,c
 12000  002580  A0D8               	btfss	status,0,c
 12001  002582  D748               	goto	l6497
 12002                           
 12003                           ;cmd_consol.c: 65: }
 12004                           ;cmd_consol.c: 67: }
 12005                           ;cmd_consol.c: 68: printf("Col = %d\r\n", column);
 12006  002584  0E00               	movlw	low STR_22
 12007  002586  6E24               	movwf	printf@f,c
 12008  002588  0EFF               	movlw	high STR_22
 12009  00258A  6E25               	movwf	printf@f+1,c
 12010  00258C  C03D  F026         	movff	collect_column@column,?_printf+2
 12011  002590  6A27               	clrf	?_printf+3,c
 12012  002592  EC09  F011         	call	_printf	;wreg free
 12013                           
 12014                           ;cmd_consol.c: 69: if (column >= clcd_config_data.clcd_max_col) {
 12015  002596  504B               	movf	_clcd_config_data+2,w,c
 12016  002598  5C3D               	subwf	collect_column@column,w,c
 12017  00259A  A0D8               	btfss	status,0,c
 12018  00259C  D007               	goto	l6519
 12019                           
 12020                           ;cmd_consol.c: 70: *data_column = -1;
 12021  00259E  C038  FFD9         	movff	collect_column@data_column,fsr2l
 12022  0025A2  C039  FFDA         	movff	collect_column@data_column+1,fsr2h
 12023  0025A6  0EFF               	movlw	255
 12024  0025A8  6EDF               	movwf	indf2,c
 12025                           
 12026                           ;cmd_consol.c: 71: } else {
 12027  0025AA  0012               	return	
 12028  0025AC                     l6519:
 12029                           
 12030                           ;cmd_consol.c: 72: *data_column = column;
 12031  0025AC  C038  FFD9         	movff	collect_column@data_column,fsr2l
 12032  0025B0  C039  FFDA         	movff	collect_column@data_column+1,fsr2h
 12033  0025B4  C03D  FFDF         	movff	collect_column@column,indf2
 12034  0025B8  0012               	return	
 12035  0025BA                     __end_of_collect_column:
 12036                           	opt stack 0
 12037                           tblptru	equ	0xFF8
 12038                           tblptrh	equ	0xFF7
 12039                           tblptrl	equ	0xFF6
 12040                           tablat	equ	0xFF5
 12041                           prodh	equ	0xFF4
 12042                           prodl	equ	0xFF3
 12043                           intcon	equ	0xFF2
 12044                           indf0	equ	0xFEF
 12045                           postinc0	equ	0xFEE
 12046                           fsr0h	equ	0xFEA
 12047                           fsr0l	equ	0xFE9
 12048                           wreg	equ	0xFE8
 12049                           indf1	equ	0xFE7
 12050                           postdec1	equ	0xFE5
 12051                           fsr1h	equ	0xFE2
 12052                           fsr1l	equ	0xFE1
 12053                           indf2	equ	0xFDF
 12054                           postinc2	equ	0xFDE
 12055                           fsr2h	equ	0xFDA
 12056                           fsr2l	equ	0xFD9
 12057                           status	equ	0xFD8
 12058                           
 12059 ;; *************** function _strlen *****************
 12060 ;; Defined at:
 12061 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strlen.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;  s               2   29[COMRAM] PTR const unsigned char 
 12064 ;;		 -> uart_str(150), STR_72(4), STR_71(7), STR_70(7), 
 12065 ;;		 -> STR_69(9), STR_68(11), STR_65(7), STR_63(7), 
 12066 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 12067 ;;		 -> STR_55(11), STR_52(7), STR_49(7), STR_48(7), 
 12068 ;;		 -> STR_46(12), STR_44(2), STR_41(7), STR_39(7), 
 12069 ;;		 -> STR_38(10), STR_37(7), STR_36(10), STR_35(7), 
 12070 ;;		 -> STR_33(7), STR_32(7), STR_31(9), STR_29(7), 
 12071 ;;		 -> RAM(3895), STR_28(10), STR_27(7), STR_26(8), 
 12072 ;;		 -> STR_25(7), STR_24(8), NULL(0), clcd_display_string_details.string(40), 
 12073 ;;		 -> clcd_display_string_details(1080), 
 12074 ;; Auto vars:     Size  Location     Type
 12075 ;;  cp              2   33[COMRAM] PTR const unsigned char 
 12076 ;;		 -> uart_str(150), STR_72(4), STR_71(7), STR_70(7), 
 12077 ;;		 -> STR_69(9), STR_68(11), STR_65(7), STR_63(7), 
 12078 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 12079 ;;		 -> STR_55(11), STR_52(7), STR_49(7), STR_48(7), 
 12080 ;;		 -> STR_46(12), STR_44(2), STR_41(7), STR_39(7), 
 12081 ;;		 -> STR_38(10), STR_37(7), STR_36(10), STR_35(7), 
 12082 ;;		 -> STR_33(7), STR_32(7), STR_31(9), STR_29(7), 
 12083 ;;		 -> RAM(3895), STR_28(10), STR_27(7), STR_26(8), 
 12084 ;;		 -> STR_25(7), STR_24(8), NULL(0), clcd_display_string_details.string(40), 
 12085 ;;		 -> clcd_display_string_details(1080), 
 12086 ;; Return value:  Size  Location     Type
 12087 ;;                  2   29[COMRAM] unsigned int 
 12088 ;; Registers used:
 12089 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 12090 ;; Tracked objects:
 12091 ;;		On entry : 0/0
 12092 ;;		On exit  : 0/0
 12093 ;;		Unchanged: 0/0
 12094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12095 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12096 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12097 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;Total ram usage:        6 bytes
 12100 ;; Hardware stack levels used:    1
 12101 ;; Hardware stack levels required when called:    5
 12102 ;; This function calls:
 12103 ;;		Nothing
 12104 ;; This function is called by:
 12105 ;;		_copy_data
 12106 ;;		_scroll_off
 12107 ;;		_make_display
 12108 ;;		_collect_row
 12109 ;;		_collect_column
 12110 ;;		_parse_cmd_str
 12111 ;;		_strstr
 12112 ;;		_put_string
 12113 ;;		_display_string
 12114 ;;		_get_str
 12115 ;; This function uses a non-reentrant model
 12116 ;;
 12117                           
 12118                           	psect	text53
 12119  00307C                     __ptext53:
 12120                           	opt stack 0
 12121  00307C                     _strlen:
 12122                           	opt stack 24
 12123                           
 12124                           ;incstack = 0
 12125  00307C  C01E  F022         	movff	strlen@s,strlen@cp
 12126  003080  C01F  F023         	movff	strlen@s+1,strlen@cp+1
 12127  003084  D002               	goto	l5819
 12128  003086                     l5817:
 12129  003086  4A22               	infsnz	strlen@cp,f,c
 12130  003088  2A23               	incf	strlen@cp+1,f,c
 12131  00308A                     l5819:
 12132  00308A  C022  FFF6         	movff	strlen@cp,tblptrl
 12133  00308E  C023  FFF7         	movff	strlen@cp+1,tblptrh
 12134  003092  0E00               	movlw	low (__mediumconst shr (0+16))
 12135  003094  6EF8               	movwf	tblptru,c
 12136  003096  0E0F               	movlw	(high __ramtop+-1)
 12137  003098  64F7               	cpfsgt	tblptrh,c
 12138  00309A  D003               	bra	u5547
 12139  00309C  0008               	tblrd		*
 12140  00309E  50F5               	movf	tablat,w,c
 12141  0030A0  D005               	bra	u5540
 12142  0030A2                     u5547:
 12143  0030A2  CFF6 FFE9          	movff	tblptrl,fsr0l
 12144  0030A6  CFF7 FFEA          	movff	tblptrh,fsr0h
 12145  0030AA  50EF               	movf	indf0,w,c
 12146  0030AC                     u5540:
 12147  0030AC  0900               	iorlw	0
 12148  0030AE  A4D8               	btfss	status,2,c
 12149  0030B0  D7EA               	goto	l5817
 12150  0030B2  C01E  F020         	movff	strlen@s,??_strlen
 12151  0030B6  C01F  F021         	movff	strlen@s+1,??_strlen+1
 12152  0030BA  1E20               	comf	??_strlen,f,c
 12153  0030BC  1E21               	comf	??_strlen+1,f,c
 12154  0030BE  4A20               	infsnz	??_strlen,f,c
 12155  0030C0  2A21               	incf	??_strlen+1,f,c
 12156  0030C2  5022               	movf	strlen@cp,w,c
 12157  0030C4  2420               	addwf	??_strlen,w,c
 12158  0030C6  6E1E               	movwf	?_strlen,c
 12159  0030C8  5023               	movf	strlen@cp+1,w,c
 12160  0030CA  2021               	addwfc	??_strlen+1,w,c
 12161  0030CC  6E1F               	movwf	?_strlen+1,c
 12162  0030CE  0012               	return	
 12163  0030D0                     __end_of_strlen:
 12164                           	opt stack 0
 12165                           tblptru	equ	0xFF8
 12166                           tblptrh	equ	0xFF7
 12167                           tblptrl	equ	0xFF6
 12168                           tablat	equ	0xFF5
 12169                           prodh	equ	0xFF4
 12170                           prodl	equ	0xFF3
 12171                           intcon	equ	0xFF2
 12172                           indf0	equ	0xFEF
 12173                           postinc0	equ	0xFEE
 12174                           fsr0h	equ	0xFEA
 12175                           fsr0l	equ	0xFE9
 12176                           wreg	equ	0xFE8
 12177                           indf1	equ	0xFE7
 12178                           postdec1	equ	0xFE5
 12179                           fsr1h	equ	0xFE2
 12180                           fsr1l	equ	0xFE1
 12181                           indf2	equ	0xFDF
 12182                           postinc2	equ	0xFDE
 12183                           fsr2h	equ	0xFDA
 12184                           fsr2l	equ	0xFD9
 12185                           status	equ	0xFD8
 12186                           
 12187 ;; *************** function _printf *****************
 12188 ;; Defined at:
 12189 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12190 ;; Parameters:    Size  Location     Type
 12191 ;;  f               2   35[COMRAM] PTR const unsigned char 
 12192 ;;		 -> STR_122(18), STR_120(5), STR_117(3), STR_116(3), 
 12193 ;;		 -> STR_115(3), STR_113(7), STR_111(7), STR_109(7), 
 12194 ;;		 -> STR_107(13), STR_105(5), STR_102(13), STR_99(13), 
 12195 ;;		 -> STR_96(13), STR_93(13), STR_92(5), STR_91(11), 
 12196 ;;		 -> STR_88(13), STR_85(13), STR_84(5), STR_81(13), 
 12197 ;;		 -> STR_80(5), STR_77(13), STR_76(5), STR_67(25), 
 12198 ;;		 -> STR_66(11), STR_64(25), STR_62(27), STR_60(27), 
 12199 ;;		 -> STR_58(12), STR_54(14), STR_53(9), STR_51(11), 
 12200 ;;		 -> STR_50(9), STR_47(9), STR_45(11), STR_43(11), 
 12201 ;;		 -> STR_42(12), STR_40(12), STR_34(7), STR_30(8), 
 12202 ;;		 -> STR_23(8), STR_22(11), STR_21(15), STR_20(22), 
 12203 ;;		 -> STR_19(15), STR_18(32), STR_17(14), STR_16(11), 
 12204 ;;		 -> STR_15(16), STR_14(16), STR_13(19), STR_12(3), 
 12205 ;;		 -> STR_11(5), STR_10(16), STR_9(39), STR_8(26), 
 12206 ;;		 -> STR_7(26), STR_6(26), STR_4(17), STR_3(18), 
 12207 ;;		 -> STR_2(9), STR_1(9), 
 12208 ;; Auto vars:     Size  Location     Type
 12209 ;;  tmpval          4    0        struct .
 12210 ;;  val             2   50[COMRAM] unsigned int 
 12211 ;;  ap              2   48[COMRAM] PTR void [1]
 12212 ;;		 -> ?_printf(2), 
 12213 ;;  cp              2   46[COMRAM] PTR const unsigned char 
 12214 ;;		 -> STR_123(7), STR_121(6), uart_str(150), STR_114(15), 
 12215 ;;		 -> STR_112(12), STR_110(12), STR_108(11), STR_106(6), 
 12216 ;;		 -> STR_103(11), STR_100(12), STR_97(10), STR_94(10), 
 12217 ;;		 -> STR_89(9), STR_86(8), STR_82(8), STR_78(10), 
 12218 ;;		 -> STR_71(7), STR_70(7), STR_65(7), STR_63(7), 
 12219 ;;		 -> STR_61(7), STR_59(7), STR_57(7), STR_56(7), 
 12220 ;;		 -> STR_52(7), STR_49(7), STR_48(7), STR_44(2), 
 12221 ;;		 -> STR_41(7), STR_39(7), STR_37(7), STR_35(7), 
 12222 ;;		 -> STR_33(7), STR_32(7), STR_29(7), RAM(3895), 
 12223 ;;		 -> STR_27(7), STR_25(7), NULL(0), STR_5(5), 
 12224 ;;  len             2    0        unsigned int 
 12225 ;;  c               1   52[COMRAM] char 
 12226 ;;  prec            1   45[COMRAM] char 
 12227 ;;  flag            1   44[COMRAM] unsigned char 
 12228 ;; Return value:  Size  Location     Type
 12229 ;;                  2   35[COMRAM] int 
 12230 ;; Registers used:
 12231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12232 ;; Tracked objects:
 12233 ;;		On entry : 0/0
 12234 ;;		On exit  : 0/0
 12235 ;;		Unchanged: 0/0
 12236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12237 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12238 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12239 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12240 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12241 ;;Total ram usage:       18 bytes
 12242 ;; Hardware stack levels used:    1
 12243 ;; Hardware stack levels required when called:    7
 12244 ;; This function calls:
 12245 ;;		___lwdiv
 12246 ;;		___lwmod
 12247 ;;		_putch
 12248 ;; This function is called by:
 12249 ;;		_init_clcd_cusotom_lcd
 12250 ;;		_copy_data
 12251 ;;		_conflict_check
 12252 ;;		_update_string_data
 12253 ;;		_clcd_display_string_config
 12254 ;;		_collect_row
 12255 ;;		_collect_column
 12256 ;;		_parse_cmd_str
 12257 ;;		_reply_to_host
 12258 ;;		_cmd_consol_task
 12259 ;;		_main
 12260 ;;		_display_string
 12261 ;; This function uses a non-reentrant model
 12262 ;;
 12263                           
 12264                           	psect	text54
 12265  002212                     __ptext54:
 12266                           	opt stack 0
 12267  002212                     _printf:
 12268                           	opt stack 23
 12269                           
 12270                           ;doprnt.c: 466: va_list ap;
 12271                           ;doprnt.c: 499: signed char c;
 12272                           ;doprnt.c: 506: signed char prec;
 12273                           ;doprnt.c: 508: unsigned char flag;
 12274                           ;doprnt.c: 523: union {
 12275                           ;doprnt.c: 524: unsigned long vd;
 12276                           ;doprnt.c: 525: double integ;
 12277                           ;doprnt.c: 526: } tmpval;
 12278                           ;doprnt.c: 528: unsigned int val;
 12279                           ;doprnt.c: 529: unsigned len;
 12280                           ;doprnt.c: 530: const char * cp;
 12281                           ;doprnt.c: 533: *ap = __va_start();
 12282                           
 12283                           ;incstack = 0
 12284  002212  0E26               	movlw	low (?_printf+2)
 12285  002214  6E31               	movwf	printf@ap,c
 12286  002216  0E00               	movlw	high (?_printf+2)
 12287  002218  6E32               	movwf	printf@ap+1,c
 12288                           
 12289                           ;doprnt.c: 536: while(c = *f++) {
 12290  00221A  D0D9               	goto	l5813
 12291  00221C                     l5747:
 12292                           
 12293                           ;doprnt.c: 538: if(c != '%')
 12294  00221C  0E25               	movlw	37
 12295  00221E  1835               	xorwf	printf@c,w,c
 12296  002220  B4D8               	btfsc	status,2,c
 12297  002222  D004               	goto	l5751
 12298                           
 12299                           ;doprnt.c: 540: {
 12300                           ;doprnt.c: 541: (putch(c) );
 12301  002224  5035               	movf	printf@c,w,c
 12302  002226  ECFB  F01B         	call	_putch
 12303                           
 12304                           ;doprnt.c: 542: continue;
 12305  00222A  D0D1               	goto	l5813
 12306  00222C                     l5751:
 12307                           
 12308                           ;doprnt.c: 543: }
 12309                           ;doprnt.c: 548: flag = 0;
 12310  00222C  0E00               	movlw	0
 12311  00222E  6E2D               	movwf	printf@flag,c
 12312                           
 12313                           ;doprnt.c: 635: switch(c = *f++) {
 12314  002230  D04D               	goto	l5775
 12315  002232                     l5753:
 12316                           
 12317                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12318  002232  C031  FFD9         	movff	printf@ap,fsr2l
 12319  002236  C032  FFDA         	movff	printf@ap+1,fsr2h
 12320  00223A  CFDE F02F          	movff	postinc2,printf@cp
 12321  00223E  CFDD F030          	movff	postdec2,printf@cp+1
 12322  002242  0E02               	movlw	2
 12323  002244  2631               	addwf	printf@ap,f,c
 12324  002246  0E00               	movlw	0
 12325  002248  2232               	addwfc	printf@ap+1,f,c
 12326                           
 12327                           ;doprnt.c: 740: if(!cp)
 12328  00224A  502F               	movf	printf@cp,w,c
 12329  00224C  1030               	iorwf	printf@cp+1,w,c
 12330  00224E  A4D8               	btfss	status,2,c
 12331  002250  D01A               	goto	l5765
 12332                           
 12333                           ;doprnt.c: 741: cp = "(null)";
 12334  002252  0ECA               	movlw	low STR_123
 12335  002254  6E2F               	movwf	printf@cp,c
 12336  002256  0EFF               	movlw	high STR_123
 12337  002258  6E30               	movwf	printf@cp+1,c
 12338                           
 12339                           ;doprnt.c: 777: while(*cp)
 12340  00225A  D015               	goto	l5765
 12341  00225C                     l5761:
 12342                           
 12343                           ;doprnt.c: 778: (putch(*cp++) );
 12344  00225C  C02F  FFF6         	movff	printf@cp,tblptrl
 12345  002260  C030  FFF7         	movff	printf@cp+1,tblptrh
 12346  002264  0E00               	movlw	low (__mediumconst shr (0+16))
 12347  002266  6EF8               	movwf	tblptru,c
 12348  002268  0E0F               	movlw	(high __ramtop+-1)
 12349  00226A  64F7               	cpfsgt	tblptrh,c
 12350  00226C  D003               	bra	u5447
 12351  00226E  0008               	tblrd		*
 12352  002270  50F5               	movf	tablat,w,c
 12353  002272  D005               	bra	u5440
 12354  002274                     u5447:
 12355  002274  CFF6 FFE9          	movff	tblptrl,fsr0l
 12356  002278  CFF7 FFEA          	movff	tblptrh,fsr0h
 12357  00227C  50EF               	movf	indf0,w,c
 12358  00227E                     u5440:
 12359  00227E  ECFB  F01B         	call	_putch
 12360  002282  4A2F               	infsnz	printf@cp,f,c
 12361  002284  2A30               	incf	printf@cp+1,f,c
 12362  002286                     l5765:
 12363  002286  C02F  FFF6         	movff	printf@cp,tblptrl
 12364  00228A  C030  FFF7         	movff	printf@cp+1,tblptrh
 12365  00228E  0E00               	movlw	low (__mediumconst shr (0+16))
 12366  002290  6EF8               	movwf	tblptru,c
 12367  002292  0E0F               	movlw	(high __ramtop+-1)
 12368  002294  64F7               	cpfsgt	tblptrh,c
 12369  002296  D003               	bra	u5457
 12370  002298  0008               	tblrd		*
 12371  00229A  50F5               	movf	tablat,w,c
 12372  00229C  D005               	bra	u5450
 12373  00229E                     u5457:
 12374  00229E  CFF6 FFE9          	movff	tblptrl,fsr0l
 12375  0022A2  CFF7 FFEA          	movff	tblptrh,fsr0h
 12376  0022A6  50EF               	movf	indf0,w,c
 12377  0022A8                     u5450:
 12378  0022A8  0900               	iorlw	0
 12379  0022AA  B4D8               	btfsc	status,2,c
 12380  0022AC  D090               	goto	l5813
 12381  0022AE  D7D6               	goto	l5761
 12382  0022B0                     l5767:
 12383                           
 12384                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 12385  0022B0  C031  FFD9         	movff	printf@ap,fsr2l
 12386  0022B4  C032  FFDA         	movff	printf@ap+1,fsr2h
 12387  0022B8  50DF               	movf	indf2,w,c
 12388  0022BA  6E35               	movwf	printf@c,c
 12389  0022BC  0E02               	movlw	2
 12390  0022BE  2631               	addwf	printf@ap,f,c
 12391  0022C0  0E00               	movlw	0
 12392  0022C2  2232               	addwfc	printf@ap+1,f,c
 12393  0022C4                     l5771:
 12394                           
 12395                           ;doprnt.c: 809: (putch(c) );
 12396  0022C4  5035               	movf	printf@c,w,c
 12397  0022C6  ECFB  F01B         	call	_putch
 12398                           
 12399                           ;doprnt.c: 810: continue;
 12400  0022CA  D081               	goto	l5813
 12401  0022CC                     l5775:
 12402  0022CC  C024  FFF6         	movff	printf@f,tblptrl
 12403  0022D0  C025  FFF7         	movff	printf@f+1,tblptrh
 12404  0022D4  4A24               	infsnz	printf@f,f,c
 12405  0022D6  2A25               	incf	printf@f+1,f,c
 12406  0022D8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12407  0022D8  6AF8               	clrf	tblptru,c
 12408  0022DA                     	endif
 12409  0022DA                     	if	0	;tblptru may be non-zero
 12410  0022DA                     	endif
 12411  0022DA  0008               	tblrd		*
 12412  0022DC  CFF5 F035          	movff	tablat,printf@c
 12413  0022E0  5035               	movf	printf@c,w,c
 12414                           
 12415                           ; Switch size 1, requested type "space"
 12416                           ; Number of cases is 5, Range of values is 0 to 115
 12417                           ; switch strategies available:
 12418                           ; Name         Instructions Cycles
 12419                           ; simple_byte           16     9 (average)
 12420                           ;	Chosen strategy is simple_byte
 12421  0022E2  0A00               	xorlw	0	; case 0
 12422  0022E4  B4D8               	btfsc	status,2,c
 12423  0022E6  0012               	return	
 12424  0022E8  0A63               	xorlw	99	; case 99
 12425  0022EA  B4D8               	btfsc	status,2,c
 12426  0022EC  D7E1               	goto	l5767
 12427  0022EE  0A07               	xorlw	7	; case 100
 12428  0022F0  B4D8               	btfsc	status,2,c
 12429  0022F2  D007               	goto	l5777
 12430  0022F4  0A0D               	xorlw	13	; case 105
 12431  0022F6  B4D8               	btfsc	status,2,c
 12432  0022F8  D004               	goto	l5777
 12433  0022FA  0A1A               	xorlw	26	; case 115
 12434  0022FC  B4D8               	btfsc	status,2,c
 12435  0022FE  D799               	goto	l5753
 12436  002300  D7E1               	goto	l5771
 12437  002302                     l5777:
 12438                           
 12439                           ;doprnt.c: 1253: {
 12440                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12441  002302  C031  FFD9         	movff	printf@ap,fsr2l
 12442  002306  C032  FFDA         	movff	printf@ap+1,fsr2h
 12443  00230A  CFDE F033          	movff	postinc2,printf@val
 12444  00230E  CFDD F034          	movff	postdec2,printf@val+1
 12445  002312  0E02               	movlw	2
 12446  002314  2631               	addwf	printf@ap,f,c
 12447  002316  0E00               	movlw	0
 12448  002318  2232               	addwfc	printf@ap+1,f,c
 12449                           
 12450                           ;doprnt.c: 1261: if((int)val < 0) {
 12451  00231A  AE34               	btfss	printf@val+1,7,c
 12452  00231C  D006               	goto	l5787
 12453                           
 12454                           ;doprnt.c: 1262: flag |= 0x03;
 12455  00231E  0E03               	movlw	3
 12456  002320  122D               	iorwf	printf@flag,f,c
 12457                           
 12458                           ;doprnt.c: 1263: val = -val;
 12459  002322  6C33               	negf	printf@val,c
 12460  002324  1E34               	comf	printf@val+1,f,c
 12461  002326  B0D8               	btfsc	status,0,c
 12462  002328  2A34               	incf	printf@val+1,f,c
 12463  00232A                     l5787:
 12464                           
 12465                           ;doprnt.c: 1264: }
 12466                           ;doprnt.c: 1266: }
 12467                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12468  00232A  0E01               	movlw	1
 12469  00232C  6E35               	movwf	printf@c,c
 12470  00232E                     l5789:
 12471  00232E  0E05               	movlw	5
 12472  002330  1835               	xorwf	printf@c,w,c
 12473  002332  B4D8               	btfsc	status,2,c
 12474  002334  D015               	goto	l5801
 12475                           
 12476                           ;doprnt.c: 1306: if(val < dpowers[c])
 12477  002336  5035               	movf	printf@c,w,c
 12478  002338  0D02               	mullw	2
 12479  00233A  0EC5               	movlw	low _dpowers
 12480  00233C  24F3               	addwf	prodl,w,c
 12481  00233E  6EF6               	movwf	tblptrl,c
 12482  002340  0EFC               	movlw	high _dpowers
 12483  002342  20F4               	addwfc	prodh,w,c
 12484  002344  6EF7               	movwf	tblptrh,c
 12485  002346                     	if	1	;There are 3 active tblptr bytes
 12486  002346  6AF8               	clrf	tblptru,c
 12487  002348  0E00               	movlw	low (__mediumconst shr (0+16))
 12488  00234A  22F8               	addwfc	tblptru,f,c
 12489  00234C                     	endif
 12490  00234C  0009               	tblrd		*+
 12491  00234E  50F5               	movf	tablat,w,c
 12492  002350  5C33               	subwf	printf@val,w,c
 12493  002352  0009               	tblrd		*+
 12494  002354  50F5               	movf	tablat,w,c
 12495  002356  5834               	subwfb	printf@val+1,w,c
 12496  002358  A0D8               	btfss	status,0,c
 12497  00235A  D002               	goto	l5801
 12498                           
 12499                           ;doprnt.c: 1307: break;
 12500  00235C  2A35               	incf	printf@c,f,c
 12501  00235E  D7E7               	goto	l5789
 12502  002360                     l5801:
 12503                           
 12504                           ;doprnt.c: 1422: {
 12505                           ;doprnt.c: 1438: if(flag & 0x03)
 12506  002360  C02D  F02C         	movff	printf@flag,??_printf
 12507  002364  0E03               	movlw	3
 12508  002366  162C               	andwf	??_printf,f,c
 12509  002368  B4D8               	btfsc	status,2,c
 12510  00236A  D003               	goto	l5805
 12511                           
 12512                           ;doprnt.c: 1439: (putch('-') );
 12513  00236C  0E2D               	movlw	45
 12514  00236E  ECFB  F01B         	call	_putch
 12515  002372                     l5805:
 12516                           
 12517                           ;doprnt.c: 1469: }
 12518                           ;doprnt.c: 1472: prec = c;
 12519  002372  C035  F02E         	movff	printf@c,printf@prec
 12520                           
 12521                           ;doprnt.c: 1474: while(prec--) {
 12522  002376  D027               	goto	l5811
 12523  002378                     l5807:
 12524                           
 12525                           ;doprnt.c: 1478: {
 12526                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12527  002378  502E               	movf	printf@prec,w,c
 12528  00237A  0D02               	mullw	2
 12529  00237C  0EC5               	movlw	low _dpowers
 12530  00237E  24F3               	addwf	prodl,w,c
 12531  002380  6EF6               	movwf	tblptrl,c
 12532  002382  0EFC               	movlw	high _dpowers
 12533  002384  20F4               	addwfc	prodh,w,c
 12534  002386  6EF7               	movwf	tblptrh,c
 12535  002388                     	if	1	;There are 3 active tblptr bytes
 12536  002388  6AF8               	clrf	tblptru,c
 12537  00238A  0E00               	movlw	low (__mediumconst shr (0+16))
 12538  00238C  22F8               	addwfc	tblptru,f,c
 12539  00238E                     	endif
 12540  00238E  0009               	tblrd		*+
 12541  002390  CFF5 F012          	movff	tablat,___lwdiv@divisor
 12542  002394  000A               	tblrd		*-
 12543  002396  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
 12544  00239A  C033  F010         	movff	printf@val,___lwdiv@dividend
 12545  00239E  C034  F011         	movff	printf@val+1,___lwdiv@dividend+1
 12546  0023A2  EC68  F018         	call	___lwdiv	;wreg free
 12547  0023A6  C010  F017         	movff	?___lwdiv,___lwmod@dividend
 12548  0023AA  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
 12549  0023AE  0E00               	movlw	0
 12550  0023B0  6E1A               	movwf	___lwmod@divisor+1,c
 12551  0023B2  0E0A               	movlw	10
 12552  0023B4  6E19               	movwf	___lwmod@divisor,c
 12553  0023B6  EC95  F019         	call	___lwmod	;wreg free
 12554  0023BA  5017               	movf	?___lwmod,w,c
 12555  0023BC  0F30               	addlw	48
 12556  0023BE  6E35               	movwf	printf@c,c
 12557                           
 12558                           ;doprnt.c: 1523: }
 12559                           ;doprnt.c: 1524: (putch(c) );
 12560  0023C0  5035               	movf	printf@c,w,c
 12561  0023C2  ECFB  F01B         	call	_putch
 12562  0023C6                     l5811:
 12563  0023C6  062E               	decf	printf@prec,f,c
 12564  0023C8  282E               	incf	printf@prec,w,c
 12565  0023CA  A4D8               	btfss	status,2,c
 12566  0023CC  D7D5               	goto	l5807
 12567  0023CE                     l5813:
 12568  0023CE  C024  FFF6         	movff	printf@f,tblptrl
 12569  0023D2  C025  FFF7         	movff	printf@f+1,tblptrh
 12570  0023D6  4A24               	infsnz	printf@f,f,c
 12571  0023D8  2A25               	incf	printf@f+1,f,c
 12572  0023DA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12573  0023DA  6AF8               	clrf	tblptru,c
 12574  0023DC                     	endif
 12575  0023DC                     	if	0	;tblptru may be non-zero
 12576  0023DC                     	endif
 12577  0023DC  0008               	tblrd		*
 12578  0023DE  CFF5 F035          	movff	tablat,printf@c
 12579  0023E2  5035               	movf	printf@c,w,c
 12580  0023E4  B4D8               	btfsc	status,2,c
 12581  0023E6  0012               	return	
 12582  0023E8  D719               	goto	l5747
 12583  0023EA                     __end_of_printf:
 12584                           	opt stack 0
 12585                           tblptru	equ	0xFF8
 12586                           tblptrh	equ	0xFF7
 12587                           tblptrl	equ	0xFF6
 12588                           tablat	equ	0xFF5
 12589                           prodh	equ	0xFF4
 12590                           prodl	equ	0xFF3
 12591                           intcon	equ	0xFF2
 12592                           indf0	equ	0xFEF
 12593                           postinc0	equ	0xFEE
 12594                           fsr0h	equ	0xFEA
 12595                           fsr0l	equ	0xFE9
 12596                           wreg	equ	0xFE8
 12597                           indf1	equ	0xFE7
 12598                           postdec1	equ	0xFE5
 12599                           fsr1h	equ	0xFE2
 12600                           fsr1l	equ	0xFE1
 12601                           indf2	equ	0xFDF
 12602                           postinc2	equ	0xFDE
 12603                           postdec2	equ	0xFDD
 12604                           fsr2h	equ	0xFDA
 12605                           fsr2l	equ	0xFD9
 12606                           status	equ	0xFD8
 12607                           
 12608 ;; *************** function _putch *****************
 12609 ;; Defined at:
 12610 ;;		line 160 in file "mcc_generated_files/eusart1.c"
 12611 ;; Parameters:    Size  Location     Type
 12612 ;;  txData          1    wreg     unsigned char 
 12613 ;; Auto vars:     Size  Location     Type
 12614 ;;  txData          1   16[COMRAM] unsigned char 
 12615 ;; Return value:  Size  Location     Type
 12616 ;;                  1    wreg      void 
 12617 ;; Registers used:
 12618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12619 ;; Tracked objects:
 12620 ;;		On entry : 0/0
 12621 ;;		On exit  : 0/0
 12622 ;;		Unchanged: 0/0
 12623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12627 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12628 ;;Total ram usage:        1 bytes
 12629 ;; Hardware stack levels used:    1
 12630 ;; Hardware stack levels required when called:    6
 12631 ;; This function calls:
 12632 ;;		_EUSART1_Write
 12633 ;; This function is called by:
 12634 ;;		_printf
 12635 ;;		_puts
 12636 ;;		_cputs
 12637 ;; This function uses a non-reentrant model
 12638 ;;
 12639                           
 12640                           	psect	text55
 12641  0037F6                     __ptext55:
 12642                           	opt stack 0
 12643  0037F6                     _putch:
 12644                           	opt stack 23
 12645                           
 12646                           ;incstack = 0
 12647                           ;putch@txData stored from wreg
 12648  0037F6  6E11               	movwf	putch@txData,c
 12649                           
 12650                           ;eusart1.c: 162: EUSART1_Write(txData);
 12651  0037F8  5011               	movf	putch@txData,w,c
 12652  0037FA  ECD6  F019         	call	_EUSART1_Write
 12653  0037FE  0012               	return		;funcret
 12654  003800                     __end_of_putch:
 12655                           	opt stack 0
 12656                           tblptru	equ	0xFF8
 12657                           tblptrh	equ	0xFF7
 12658                           tblptrl	equ	0xFF6
 12659                           tablat	equ	0xFF5
 12660                           prodh	equ	0xFF4
 12661                           prodl	equ	0xFF3
 12662                           intcon	equ	0xFF2
 12663                           indf0	equ	0xFEF
 12664                           postinc0	equ	0xFEE
 12665                           fsr0h	equ	0xFEA
 12666                           fsr0l	equ	0xFE9
 12667                           wreg	equ	0xFE8
 12668                           indf1	equ	0xFE7
 12669                           postdec1	equ	0xFE5
 12670                           fsr1h	equ	0xFE2
 12671                           fsr1l	equ	0xFE1
 12672                           indf2	equ	0xFDF
 12673                           postinc2	equ	0xFDE
 12674                           postdec2	equ	0xFDD
 12675                           fsr2h	equ	0xFDA
 12676                           fsr2l	equ	0xFD9
 12677                           status	equ	0xFD8
 12678                           
 12679 ;; *************** function _EUSART1_Write *****************
 12680 ;; Defined at:
 12681 ;;		line 132 in file "mcc_generated_files/eusart1.c"
 12682 ;; Parameters:    Size  Location     Type
 12683 ;;  txData          1    wreg     unsigned char 
 12684 ;; Auto vars:     Size  Location     Type
 12685 ;;  txData          1   15[COMRAM] unsigned char 
 12686 ;; Return value:  Size  Location     Type
 12687 ;;                  1    wreg      void 
 12688 ;; Registers used:
 12689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12690 ;; Tracked objects:
 12691 ;;		On entry : 0/0
 12692 ;;		On exit  : 0/0
 12693 ;;		Unchanged: 0/0
 12694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12698 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12699 ;;Total ram usage:        1 bytes
 12700 ;; Hardware stack levels used:    1
 12701 ;; Hardware stack levels required when called:    5
 12702 ;; This function calls:
 12703 ;;		Nothing
 12704 ;; This function is called by:
 12705 ;;		_putch
 12706 ;; This function uses a non-reentrant model
 12707 ;;
 12708                           
 12709                           	psect	text56
 12710  0033AC                     __ptext56:
 12711                           	opt stack 0
 12712  0033AC                     _EUSART1_Write:
 12713                           	opt stack 23
 12714                           
 12715                           ;incstack = 0
 12716                           ;EUSART1_Write@txData stored from wreg
 12717  0033AC  6E10               	movwf	EUSART1_Write@txData,c
 12718  0033AE                     l5631:
 12719  0033AE  0100               	movlb	0	; () banked
 12720  0033B0  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 12721  0033B2  B4D8               	btfsc	status,2,c
 12722  0033B4  D7FC               	goto	l5631
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;eusart1.c: 136: }
 12726                           ;eusart1.c: 138: if(0 == PIE1bits.TX1IE)
 12727  0033B6  B89D               	btfsc	3997,4,c	;volatile
 12728  0033B8  D003               	goto	l193
 12729                           
 12730                           ; BSR set to: 0
 12731                           ;eusart1.c: 139: {
 12732                           ;eusart1.c: 140: TXREG1 = txData;
 12733  0033BA  C010  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 12734                           
 12735                           ;eusart1.c: 141: }
 12736  0033BE  D013               	goto	l5645
 12737  0033C0                     l193:
 12738                           
 12739                           ; BSR set to: 0
 12740                           ;eusart1.c: 142: else
 12741                           ;eusart1.c: 143: {
 12742                           ;eusart1.c: 144: PIE1bits.TX1IE = 0;
 12743  0033C0  989D               	bcf	3997,4,c	;volatile
 12744                           
 12745                           ; BSR set to: 0
 12746                           ;eusart1.c: 145: eusart1TxBuffer[eusart1TxHead++] = txData;
 12747  0033C2  5046               	movf	_eusart1TxHead,w,c	;volatile
 12748  0033C4  0D01               	mullw	1
 12749  0033C6  0E68               	movlw	low _eusart1TxBuffer
 12750  0033C8  24F3               	addwf	prodl,w,c
 12751  0033CA  6ED9               	movwf	fsr2l,c
 12752  0033CC  0E00               	movlw	high _eusart1TxBuffer
 12753  0033CE  20F4               	addwfc	prodh,w,c
 12754  0033D0  6EDA               	movwf	fsr2h,c
 12755  0033D2  C010  FFDF         	movff	EUSART1_Write@txData,indf2
 12756                           
 12757                           ; BSR set to: 0
 12758  0033D6  2A46               	incf	_eusart1TxHead,f,c	;volatile
 12759                           
 12760                           ; BSR set to: 0
 12761                           ;eusart1.c: 146: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 12762  0033D8  0E07               	movlw	7
 12763  0033DA  6446               	cpfsgt	_eusart1TxHead,c	;volatile
 12764  0033DC  D002               	goto	l5643
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;eusart1.c: 147: {
 12768                           ;eusart1.c: 148: eusart1TxHead = 0;
 12769  0033DE  0E00               	movlw	0
 12770  0033E0  6E46               	movwf	_eusart1TxHead,c	;volatile
 12771  0033E2                     l5643:
 12772                           
 12773                           ; BSR set to: 0
 12774                           ;eusart1.c: 149: }
 12775                           ;eusart1.c: 150: eusart1TxBufferRemaining--;
 12776  0033E2  0100               	movlb	0	; () banked
 12777  0033E4  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 12778  0033E6                     l5645:
 12779                           
 12780                           ; BSR set to: 0
 12781                           ;eusart1.c: 151: }
 12782                           ;eusart1.c: 152: PIE1bits.TX1IE = 1;
 12783  0033E6  889D               	bsf	3997,4,c	;volatile
 12784                           
 12785                           ; BSR set to: 0
 12786  0033E8  0012               	return		;funcret
 12787  0033EA                     __end_of_EUSART1_Write:
 12788                           	opt stack 0
 12789                           tblptru	equ	0xFF8
 12790                           tblptrh	equ	0xFF7
 12791                           tblptrl	equ	0xFF6
 12792                           tablat	equ	0xFF5
 12793                           prodh	equ	0xFF4
 12794                           prodl	equ	0xFF3
 12795                           intcon	equ	0xFF2
 12796                           indf0	equ	0xFEF
 12797                           postinc0	equ	0xFEE
 12798                           fsr0h	equ	0xFEA
 12799                           fsr0l	equ	0xFE9
 12800                           wreg	equ	0xFE8
 12801                           indf1	equ	0xFE7
 12802                           postdec1	equ	0xFE5
 12803                           fsr1h	equ	0xFE2
 12804                           fsr1l	equ	0xFE1
 12805                           indf2	equ	0xFDF
 12806                           postinc2	equ	0xFDE
 12807                           postdec2	equ	0xFDD
 12808                           fsr2h	equ	0xFDA
 12809                           fsr2l	equ	0xFD9
 12810                           status	equ	0xFD8
 12811                           
 12812 ;; *************** function ___lwmod *****************
 12813 ;; Defined at:
 12814 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12815 ;; Parameters:    Size  Location     Type
 12816 ;;  dividend        2   22[COMRAM] unsigned int 
 12817 ;;  divisor         2   24[COMRAM] unsigned int 
 12818 ;; Auto vars:     Size  Location     Type
 12819 ;;  counter         1   26[COMRAM] unsigned char 
 12820 ;; Return value:  Size  Location     Type
 12821 ;;                  2   22[COMRAM] unsigned int 
 12822 ;; Registers used:
 12823 ;;		wreg, status,2, status,0
 12824 ;; Tracked objects:
 12825 ;;		On entry : 0/0
 12826 ;;		On exit  : 0/0
 12827 ;;		Unchanged: 0/0
 12828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12829 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12830 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12832 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12833 ;;Total ram usage:        5 bytes
 12834 ;; Hardware stack levels used:    1
 12835 ;; Hardware stack levels required when called:    5
 12836 ;; This function calls:
 12837 ;;		Nothing
 12838 ;; This function is called by:
 12839 ;;		_printf
 12840 ;; This function uses a non-reentrant model
 12841 ;;
 12842                           
 12843                           	psect	text57
 12844  00332A                     __ptext57:
 12845                           	opt stack 0
 12846  00332A                     ___lwmod:
 12847                           	opt stack 24
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;incstack = 0
 12851  00332A  5019               	movf	___lwmod@divisor,w,c
 12852  00332C  101A               	iorwf	___lwmod@divisor+1,w,c
 12853  00332E  B4D8               	btfsc	status,2,c
 12854  003330  D018               	goto	l1447
 12855  003332  0E01               	movlw	1
 12856  003334  6E1B               	movwf	___lwmod@counter,c
 12857  003336  D004               	goto	l5721
 12858  003338                     l5719:
 12859  003338  90D8               	bcf	status,0,c
 12860  00333A  3619               	rlcf	___lwmod@divisor,f,c
 12861  00333C  361A               	rlcf	___lwmod@divisor+1,f,c
 12862  00333E  2A1B               	incf	___lwmod@counter,f,c
 12863  003340                     l5721:
 12864  003340  AE1A               	btfss	___lwmod@divisor+1,7,c
 12865  003342  D7FA               	goto	l5719
 12866  003344                     l5723:
 12867  003344  5019               	movf	___lwmod@divisor,w,c
 12868  003346  5C17               	subwf	___lwmod@dividend,w,c
 12869  003348  501A               	movf	___lwmod@divisor+1,w,c
 12870  00334A  5818               	subwfb	___lwmod@dividend+1,w,c
 12871  00334C  A0D8               	btfss	status,0,c
 12872  00334E  D004               	goto	l5727
 12873  003350  5019               	movf	___lwmod@divisor,w,c
 12874  003352  5E17               	subwf	___lwmod@dividend,f,c
 12875  003354  501A               	movf	___lwmod@divisor+1,w,c
 12876  003356  5A18               	subwfb	___lwmod@dividend+1,f,c
 12877  003358                     l5727:
 12878  003358  90D8               	bcf	status,0,c
 12879  00335A  321A               	rrcf	___lwmod@divisor+1,f,c
 12880  00335C  3219               	rrcf	___lwmod@divisor,f,c
 12881  00335E  2E1B               	decfsz	___lwmod@counter,f,c
 12882  003360  D7F1               	goto	l5723
 12883  003362                     l1447:
 12884  003362  C017  F017         	movff	___lwmod@dividend,?___lwmod
 12885  003366  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
 12886  00336A  0012               	return		;funcret
 12887  00336C                     __end_of___lwmod:
 12888                           	opt stack 0
 12889                           tblptru	equ	0xFF8
 12890                           tblptrh	equ	0xFF7
 12891                           tblptrl	equ	0xFF6
 12892                           tablat	equ	0xFF5
 12893                           prodh	equ	0xFF4
 12894                           prodl	equ	0xFF3
 12895                           intcon	equ	0xFF2
 12896                           indf0	equ	0xFEF
 12897                           postinc0	equ	0xFEE
 12898                           fsr0h	equ	0xFEA
 12899                           fsr0l	equ	0xFE9
 12900                           wreg	equ	0xFE8
 12901                           indf1	equ	0xFE7
 12902                           postdec1	equ	0xFE5
 12903                           fsr1h	equ	0xFE2
 12904                           fsr1l	equ	0xFE1
 12905                           indf2	equ	0xFDF
 12906                           postinc2	equ	0xFDE
 12907                           postdec2	equ	0xFDD
 12908                           fsr2h	equ	0xFDA
 12909                           fsr2l	equ	0xFD9
 12910                           status	equ	0xFD8
 12911                           
 12912 ;; *************** function ___lwdiv *****************
 12913 ;; Defined at:
 12914 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12915 ;; Parameters:    Size  Location     Type
 12916 ;;  dividend        2   15[COMRAM] unsigned int 
 12917 ;;  divisor         2   17[COMRAM] unsigned int 
 12918 ;; Auto vars:     Size  Location     Type
 12919 ;;  quotient        2   20[COMRAM] unsigned int 
 12920 ;;  counter         1   19[COMRAM] unsigned char 
 12921 ;; Return value:  Size  Location     Type
 12922 ;;                  2   15[COMRAM] unsigned int 
 12923 ;; Registers used:
 12924 ;;		wreg, status,2, status,0
 12925 ;; Tracked objects:
 12926 ;;		On entry : 0/0
 12927 ;;		On exit  : 0/0
 12928 ;;		Unchanged: 0/0
 12929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12930 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12931 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12933 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12934 ;;Total ram usage:        7 bytes
 12935 ;; Hardware stack levels used:    1
 12936 ;; Hardware stack levels required when called:    5
 12937 ;; This function calls:
 12938 ;;		Nothing
 12939 ;; This function is called by:
 12940 ;;		_printf
 12941 ;; This function uses a non-reentrant model
 12942 ;;
 12943                           
 12944                           	psect	text58
 12945  0030D0                     __ptext58:
 12946                           	opt stack 0
 12947  0030D0                     ___lwdiv:
 12948                           	opt stack 24
 12949                           
 12950                           ;incstack = 0
 12951  0030D0  0E00               	movlw	0
 12952  0030D2  6E16               	movwf	___lwdiv@quotient+1,c
 12953  0030D4  0E00               	movlw	0
 12954  0030D6  6E15               	movwf	___lwdiv@quotient,c
 12955  0030D8  5012               	movf	___lwdiv@divisor,w,c
 12956  0030DA  1013               	iorwf	___lwdiv@divisor+1,w,c
 12957  0030DC  B4D8               	btfsc	status,2,c
 12958  0030DE  D01C               	goto	l1437
 12959  0030E0  0E01               	movlw	1
 12960  0030E2  6E14               	movwf	___lwdiv@counter,c
 12961  0030E4  D004               	goto	l5701
 12962  0030E6                     l5699:
 12963  0030E6  90D8               	bcf	status,0,c
 12964  0030E8  3612               	rlcf	___lwdiv@divisor,f,c
 12965  0030EA  3613               	rlcf	___lwdiv@divisor+1,f,c
 12966  0030EC  2A14               	incf	___lwdiv@counter,f,c
 12967  0030EE                     l5701:
 12968  0030EE  AE13               	btfss	___lwdiv@divisor+1,7,c
 12969  0030F0  D7FA               	goto	l5699
 12970  0030F2                     l5703:
 12971  0030F2  90D8               	bcf	status,0,c
 12972  0030F4  3615               	rlcf	___lwdiv@quotient,f,c
 12973  0030F6  3616               	rlcf	___lwdiv@quotient+1,f,c
 12974  0030F8  5012               	movf	___lwdiv@divisor,w,c
 12975  0030FA  5C10               	subwf	___lwdiv@dividend,w,c
 12976  0030FC  5013               	movf	___lwdiv@divisor+1,w,c
 12977  0030FE  5811               	subwfb	___lwdiv@dividend+1,w,c
 12978  003100  A0D8               	btfss	status,0,c
 12979  003102  D005               	goto	l5711
 12980  003104  5012               	movf	___lwdiv@divisor,w,c
 12981  003106  5E10               	subwf	___lwdiv@dividend,f,c
 12982  003108  5013               	movf	___lwdiv@divisor+1,w,c
 12983  00310A  5A11               	subwfb	___lwdiv@dividend+1,f,c
 12984  00310C  8015               	bsf	___lwdiv@quotient,0,c
 12985  00310E                     l5711:
 12986  00310E  90D8               	bcf	status,0,c
 12987  003110  3213               	rrcf	___lwdiv@divisor+1,f,c
 12988  003112  3212               	rrcf	___lwdiv@divisor,f,c
 12989  003114  2E14               	decfsz	___lwdiv@counter,f,c
 12990  003116  D7ED               	goto	l5703
 12991  003118                     l1437:
 12992  003118  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
 12993  00311C  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12994  003120  0012               	return		;funcret
 12995  003122                     __end_of___lwdiv:
 12996                           	opt stack 0
 12997                           tblptru	equ	0xFF8
 12998                           tblptrh	equ	0xFF7
 12999                           tblptrl	equ	0xFF6
 13000                           tablat	equ	0xFF5
 13001                           prodh	equ	0xFF4
 13002                           prodl	equ	0xFF3
 13003                           intcon	equ	0xFF2
 13004                           indf0	equ	0xFEF
 13005                           postinc0	equ	0xFEE
 13006                           fsr0h	equ	0xFEA
 13007                           fsr0l	equ	0xFE9
 13008                           wreg	equ	0xFE8
 13009                           indf1	equ	0xFE7
 13010                           postdec1	equ	0xFE5
 13011                           fsr1h	equ	0xFE2
 13012                           fsr1l	equ	0xFE1
 13013                           indf2	equ	0xFDF
 13014                           postinc2	equ	0xFDE
 13015                           postdec2	equ	0xFDD
 13016                           fsr2h	equ	0xFDA
 13017                           fsr2l	equ	0xFD9
 13018                           status	equ	0xFD8
 13019                           
 13020 ;; *************** function _atoi *****************
 13021 ;; Defined at:
 13022 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
 13023 ;; Parameters:    Size  Location     Type
 13024 ;;  s               2   29[COMRAM] PTR const unsigned char 
 13025 ;;		 -> uart_str(150), STR_71(7), STR_70(7), STR_65(7), 
 13026 ;;		 -> STR_63(7), STR_61(7), STR_59(7), STR_57(7), 
 13027 ;;		 -> STR_56(7), STR_52(7), STR_49(7), STR_48(7), 
 13028 ;;		 -> STR_44(2), STR_41(7), STR_39(7), STR_37(7), 
 13029 ;;		 -> STR_35(7), STR_33(7), STR_32(7), STR_29(7), 
 13030 ;;		 -> RAM(3895), STR_27(7), STR_25(7), NULL(0), 
 13031 ;; Auto vars:     Size  Location     Type
 13032 ;;  a               2   34[COMRAM] int 
 13033 ;;  sign            1   33[COMRAM] unsigned char 
 13034 ;; Return value:  Size  Location     Type
 13035 ;;                  2   29[COMRAM] int 
 13036 ;; Registers used:
 13037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13038 ;; Tracked objects:
 13039 ;;		On entry : 0/0
 13040 ;;		On exit  : 0/0
 13041 ;;		Unchanged: 0/0
 13042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13043 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13044 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13045 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13046 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13047 ;;Total ram usage:        7 bytes
 13048 ;; Hardware stack levels used:    1
 13049 ;; Hardware stack levels required when called:    6
 13050 ;; This function calls:
 13051 ;;		___wmul
 13052 ;;		_isdigit
 13053 ;; This function is called by:
 13054 ;;		_parse_cmd_str
 13055 ;; This function uses a non-reentrant model
 13056 ;;
 13057                           
 13058                           	psect	text59
 13059  0025BA                     __ptext59:
 13060                           	opt stack 0
 13061  0025BA                     _atoi:
 13062                           	opt stack 22
 13063                           
 13064                           ;incstack = 0
 13065  0025BA  D002               	goto	l6571
 13066  0025BC                     l6569:
 13067  0025BC  4A1E               	infsnz	atoi@s,f,c
 13068  0025BE  2A1F               	incf	atoi@s+1,f,c
 13069  0025C0                     l6571:
 13070  0025C0  C01E  FFF6         	movff	atoi@s,tblptrl
 13071  0025C4  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13072  0025C8  0E00               	movlw	low (__mediumconst shr (0+16))
 13073  0025CA  6EF8               	movwf	tblptru,c
 13074  0025CC  0E0F               	movlw	(high __ramtop+-1)
 13075  0025CE  64F7               	cpfsgt	tblptrh,c
 13076  0025D0  D003               	bra	u6627
 13077  0025D2  0008               	tblrd		*
 13078  0025D4  50F5               	movf	tablat,w,c
 13079  0025D6  D005               	bra	u6620
 13080  0025D8                     u6627:
 13081  0025D8  CFF6 FFE9          	movff	tblptrl,fsr0l
 13082  0025DC  CFF7 FFEA          	movff	tblptrh,fsr0h
 13083  0025E0  50EF               	movf	indf0,w,c
 13084  0025E2                     u6620:
 13085  0025E2  0A20               	xorlw	32
 13086  0025E4  B4D8               	btfsc	status,2,c
 13087  0025E6  D7EA               	goto	l6569
 13088  0025E8  C01E  FFF6         	movff	atoi@s,tblptrl
 13089  0025EC  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13090  0025F0  0E00               	movlw	low (__mediumconst shr (0+16))
 13091  0025F2  6EF8               	movwf	tblptru,c
 13092  0025F4  0E0F               	movlw	(high __ramtop+-1)
 13093  0025F6  64F7               	cpfsgt	tblptrh,c
 13094  0025F8  D003               	bra	u6647
 13095  0025FA  0008               	tblrd		*
 13096  0025FC  50F5               	movf	tablat,w,c
 13097  0025FE  D005               	bra	u6640
 13098  002600                     u6647:
 13099  002600  CFF6 FFE9          	movff	tblptrl,fsr0l
 13100  002604  CFF7 FFEA          	movff	tblptrh,fsr0h
 13101  002608  50EF               	movf	indf0,w,c
 13102  00260A                     u6640:
 13103  00260A  0A09               	xorlw	9
 13104  00260C  B4D8               	btfsc	status,2,c
 13105  00260E  D7D6               	goto	l6569
 13106  002610  0E00               	movlw	0
 13107  002612  6E24               	movwf	atoi@a+1,c
 13108  002614  0E00               	movlw	0
 13109  002616  6E23               	movwf	atoi@a,c
 13110  002618  0E00               	movlw	0
 13111  00261A  6E22               	movwf	atoi@sign,c
 13112  00261C  C01E  FFF6         	movff	atoi@s,tblptrl
 13113  002620  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13114  002624  0E00               	movlw	low (__mediumconst shr (0+16))
 13115  002626  6EF8               	movwf	tblptru,c
 13116  002628  0E0F               	movlw	(high __ramtop+-1)
 13117  00262A  64F7               	cpfsgt	tblptrh,c
 13118  00262C  D003               	bra	u6667
 13119  00262E  0008               	tblrd		*
 13120  002630  50F5               	movf	tablat,w,c
 13121  002632  D005               	bra	u6660
 13122  002634                     u6667:
 13123  002634  CFF6 FFE9          	movff	tblptrl,fsr0l
 13124  002638  CFF7 FFEA          	movff	tblptrh,fsr0h
 13125  00263C  50EF               	movf	indf0,w,c
 13126  00263E                     u6660:
 13127  00263E  0A2D               	xorlw	45
 13128  002640  A4D8               	btfss	status,2,c
 13129  002642  D002               	goto	l6581
 13130  002644  2A22               	incf	atoi@sign,f,c
 13131  002646  D03C               	goto	l6587
 13132  002648                     l6581:
 13133  002648  C01E  FFF6         	movff	atoi@s,tblptrl
 13134  00264C  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13135  002650  0E00               	movlw	low (__mediumconst shr (0+16))
 13136  002652  6EF8               	movwf	tblptru,c
 13137  002654  0E0F               	movlw	(high __ramtop+-1)
 13138  002656  64F7               	cpfsgt	tblptrh,c
 13139  002658  D003               	bra	u6687
 13140  00265A  0008               	tblrd		*
 13141  00265C  50F5               	movf	tablat,w,c
 13142  00265E  D005               	bra	u6680
 13143  002660                     u6687:
 13144  002660  CFF6 FFE9          	movff	tblptrl,fsr0l
 13145  002664  CFF7 FFEA          	movff	tblptrh,fsr0h
 13146  002668  50EF               	movf	indf0,w,c
 13147  00266A                     u6680:
 13148  00266A  0A2B               	xorlw	43
 13149  00266C  A4D8               	btfss	status,2,c
 13150  00266E  D02A               	goto	l6589
 13151  002670  D027               	goto	l6587
 13152  002672                     l6585:
 13153  002672  C023  F018         	movff	atoi@a,___wmul@multiplier
 13154  002676  C024  F019         	movff	atoi@a+1,___wmul@multiplier+1
 13155  00267A  0E00               	movlw	0
 13156  00267C  6E1B               	movwf	___wmul@multiplicand+1,c
 13157  00267E  0E0A               	movlw	10
 13158  002680  6E1A               	movwf	___wmul@multiplicand,c
 13159  002682  ECD8  F01A         	call	___wmul	;wreg free
 13160  002686  C01E  FFF6         	movff	atoi@s,tblptrl
 13161  00268A  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13162  00268E  0E00               	movlw	low (__mediumconst shr (0+16))
 13163  002690  6EF8               	movwf	tblptru,c
 13164  002692  0E0F               	movlw	(high __ramtop+-1)
 13165  002694  64F7               	cpfsgt	tblptrh,c
 13166  002696  D003               	bra	u6707
 13167  002698  0008               	tblrd		*
 13168  00269A  50F5               	movf	tablat,w,c
 13169  00269C  D005               	bra	u6700
 13170  00269E                     u6707:
 13171  00269E  CFF6 FFE9          	movff	tblptrl,fsr0l
 13172  0026A2  CFF7 FFEA          	movff	tblptrh,fsr0h
 13173  0026A6  50EF               	movf	indf0,w,c
 13174  0026A8                     u6700:
 13175  0026A8  6E20               	movwf	??_atoi& (0+255),c
 13176  0026AA  6A21               	clrf	(??_atoi+1)& (0+255),c
 13177  0026AC  5018               	movf	?___wmul,w,c
 13178  0026AE  2620               	addwf	??_atoi,f,c
 13179  0026B0  5019               	movf	?___wmul+1,w,c
 13180  0026B2  2221               	addwfc	??_atoi+1,f,c
 13181  0026B4  0ED0               	movlw	208
 13182  0026B6  2420               	addwf	??_atoi,w,c
 13183  0026B8  6E23               	movwf	atoi@a,c
 13184  0026BA  0EFF               	movlw	255
 13185  0026BC  2021               	addwfc	??_atoi+1,w,c
 13186  0026BE  6E24               	movwf	atoi@a+1,c
 13187  0026C0                     l6587:
 13188  0026C0  4A1E               	infsnz	atoi@s,f,c
 13189  0026C2  2A1F               	incf	atoi@s+1,f,c
 13190  0026C4                     l6589:
 13191  0026C4  C01E  FFF6         	movff	atoi@s,tblptrl
 13192  0026C8  C01F  FFF7         	movff	atoi@s+1,tblptrh
 13193  0026CC  0E00               	movlw	low (__mediumconst shr (0+16))
 13194  0026CE  6EF8               	movwf	tblptru,c
 13195  0026D0  0E0F               	movlw	(high __ramtop+-1)
 13196  0026D2  64F7               	cpfsgt	tblptrh,c
 13197  0026D4  D003               	bra	u6717
 13198  0026D6  0008               	tblrd		*
 13199  0026D8  50F5               	movf	tablat,w,c
 13200  0026DA  D005               	bra	u6710
 13201  0026DC                     u6717:
 13202  0026DC  CFF6 FFE9          	movff	tblptrl,fsr0l
 13203  0026E0  CFF7 FFEA          	movff	tblptrh,fsr0h
 13204  0026E4  50EF               	movf	indf0,w,c
 13205  0026E6                     u6710:
 13206  0026E6  EC40  F01B         	call	_isdigit
 13207  0026EA  B0D8               	btfsc	status,0,c
 13208  0026EC  D7C2               	goto	l6585
 13209  0026EE  5022               	movf	atoi@sign,w,c
 13210  0026F0  B4D8               	btfsc	status,2,c
 13211  0026F2  D00D               	goto	l1187
 13212  0026F4  C023  F020         	movff	atoi@a,??_atoi
 13213  0026F8  C024  F021         	movff	atoi@a+1,??_atoi+1
 13214  0026FC  1E20               	comf	??_atoi,f,c
 13215  0026FE  1E21               	comf	??_atoi+1,f,c
 13216  002700  4A20               	infsnz	??_atoi,f,c
 13217  002702  2A21               	incf	??_atoi+1,f,c
 13218  002704  C020  F01E         	movff	??_atoi,?_atoi
 13219  002708  C021  F01F         	movff	??_atoi+1,?_atoi+1
 13220  00270C  0012               	return	
 13221  00270E                     l1187:
 13222  00270E  C023  F01E         	movff	atoi@a,?_atoi
 13223  002712  C024  F01F         	movff	atoi@a+1,?_atoi+1
 13224  002716  0012               	return		;funcret
 13225  002718                     __end_of_atoi:
 13226                           	opt stack 0
 13227                           tblptru	equ	0xFF8
 13228                           tblptrh	equ	0xFF7
 13229                           tblptrl	equ	0xFF6
 13230                           tablat	equ	0xFF5
 13231                           prodh	equ	0xFF4
 13232                           prodl	equ	0xFF3
 13233                           intcon	equ	0xFF2
 13234                           indf0	equ	0xFEF
 13235                           postinc0	equ	0xFEE
 13236                           fsr0h	equ	0xFEA
 13237                           fsr0l	equ	0xFE9
 13238                           wreg	equ	0xFE8
 13239                           indf1	equ	0xFE7
 13240                           postdec1	equ	0xFE5
 13241                           fsr1h	equ	0xFE2
 13242                           fsr1l	equ	0xFE1
 13243                           indf2	equ	0xFDF
 13244                           postinc2	equ	0xFDE
 13245                           postdec2	equ	0xFDD
 13246                           fsr2h	equ	0xFDA
 13247                           fsr2l	equ	0xFD9
 13248                           status	equ	0xFD8
 13249                           
 13250 ;; *************** function _isdigit *****************
 13251 ;; Defined at:
 13252 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13253 ;; Parameters:    Size  Location     Type
 13254 ;;  c               1    wreg     unsigned char 
 13255 ;; Auto vars:     Size  Location     Type
 13256 ;;  c               1   17[COMRAM] unsigned char 
 13257 ;; Return value:  Size  Location     Type
 13258 ;;		None               void
 13259 ;; Registers used:
 13260 ;;		wreg, status,2, status,0
 13261 ;; Tracked objects:
 13262 ;;		On entry : 0/0
 13263 ;;		On exit  : 0/0
 13264 ;;		Unchanged: 0/0
 13265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13267 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;Total ram usage:        3 bytes
 13271 ;; Hardware stack levels used:    1
 13272 ;; Hardware stack levels required when called:    5
 13273 ;; This function calls:
 13274 ;;		Nothing
 13275 ;; This function is called by:
 13276 ;;		_collect_row
 13277 ;;		_collect_column
 13278 ;;		_parse_cmd_str
 13279 ;;		_atoi
 13280 ;; This function uses a non-reentrant model
 13281 ;;
 13282                           
 13283                           	psect	text60
 13284  003680                     __ptext60:
 13285                           	opt stack 0
 13286  003680                     _isdigit:
 13287                           	opt stack 23
 13288                           
 13289                           ;incstack = 0
 13290                           ;isdigit@c stored from wreg
 13291  003680  6E12               	movwf	isdigit@c,c
 13292  003682  0E00               	movlw	0
 13293  003684  6E11               	movwf	_isdigit$2188,c
 13294  003686  0E3A               	movlw	58
 13295  003688  6012               	cpfslt	isdigit@c,c
 13296  00368A  D005               	goto	l6201
 13297  00368C  0E2F               	movlw	47
 13298  00368E  6412               	cpfsgt	isdigit@c,c
 13299  003690  D002               	goto	l6201
 13300  003692  0E01               	movlw	1
 13301  003694  6E11               	movwf	_isdigit$2188,c
 13302  003696                     l6201:
 13303  003696  C011  F010         	movff	_isdigit$2188,??_isdigit
 13304  00369A  3010               	rrcf	??_isdigit,w,c
 13305  00369C  0012               	return	
 13306  00369E                     __end_of_isdigit:
 13307                           	opt stack 0
 13308                           tblptru	equ	0xFF8
 13309                           tblptrh	equ	0xFF7
 13310                           tblptrl	equ	0xFF6
 13311                           tablat	equ	0xFF5
 13312                           prodh	equ	0xFF4
 13313                           prodl	equ	0xFF3
 13314                           intcon	equ	0xFF2
 13315                           indf0	equ	0xFEF
 13316                           postinc0	equ	0xFEE
 13317                           fsr0h	equ	0xFEA
 13318                           fsr0l	equ	0xFE9
 13319                           wreg	equ	0xFE8
 13320                           indf1	equ	0xFE7
 13321                           postdec1	equ	0xFE5
 13322                           fsr1h	equ	0xFE2
 13323                           fsr1l	equ	0xFE1
 13324                           indf2	equ	0xFDF
 13325                           postinc2	equ	0xFDE
 13326                           postdec2	equ	0xFDD
 13327                           fsr2h	equ	0xFDA
 13328                           fsr2l	equ	0xFD9
 13329                           status	equ	0xFD8
 13330                           
 13331 ;; *************** function ___wmul *****************
 13332 ;; Defined at:
 13333 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13334 ;; Parameters:    Size  Location     Type
 13335 ;;  multiplier      2   23[COMRAM] unsigned int 
 13336 ;;  multiplicand    2   25[COMRAM] unsigned int 
 13337 ;; Auto vars:     Size  Location     Type
 13338 ;;  product         2   27[COMRAM] unsigned int 
 13339 ;; Return value:  Size  Location     Type
 13340 ;;                  2   23[COMRAM] unsigned int 
 13341 ;; Registers used:
 13342 ;;		wreg, status,2, status,0, prodl, prodh
 13343 ;; Tracked objects:
 13344 ;;		On entry : 0/0
 13345 ;;		On exit  : 0/0
 13346 ;;		Unchanged: 0/0
 13347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13348 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13349 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13351 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13352 ;;Total ram usage:        6 bytes
 13353 ;; Hardware stack levels used:    1
 13354 ;; Hardware stack levels required when called:    5
 13355 ;; This function calls:
 13356 ;;		Nothing
 13357 ;; This function is called by:
 13358 ;;		_init_clcd_cusotom_lcd
 13359 ;;		_conflict_check
 13360 ;;		_update_string_data
 13361 ;;		_make_display
 13362 ;;		_atoi
 13363 ;; This function uses a non-reentrant model
 13364 ;;
 13365                           
 13366                           	psect	text61
 13367  0035B0                     __ptext61:
 13368                           	opt stack 0
 13369  0035B0                     ___wmul:
 13370                           	opt stack 24
 13371                           
 13372                           ;incstack = 0
 13373  0035B0  5018               	movf	___wmul@multiplier,w,c
 13374  0035B2  021A               	mulwf	___wmul@multiplicand,c
 13375  0035B4  CFF3 F01C          	movff	prodl,___wmul@product
 13376  0035B8  CFF4 F01D          	movff	prodh,___wmul@product+1
 13377  0035BC  5018               	movf	___wmul@multiplier,w,c
 13378  0035BE  021B               	mulwf	___wmul@multiplicand+1,c
 13379  0035C0  50F3               	movf	prodl,w,c
 13380  0035C2  261D               	addwf	___wmul@product+1,f,c
 13381  0035C4  5019               	movf	___wmul@multiplier+1,w,c
 13382  0035C6  021A               	mulwf	___wmul@multiplicand,c
 13383  0035C8  50F3               	movf	prodl,w,c
 13384  0035CA  261D               	addwf	___wmul@product+1,f,c
 13385  0035CC  C01C  F018         	movff	___wmul@product,?___wmul
 13386  0035D0  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 13387  0035D4  0012               	return	
 13388  0035D6                     __end_of___wmul:
 13389                           	opt stack 0
 13390                           tblptru	equ	0xFF8
 13391                           tblptrh	equ	0xFF7
 13392                           tblptrl	equ	0xFF6
 13393                           tablat	equ	0xFF5
 13394                           prodh	equ	0xFF4
 13395                           prodl	equ	0xFF3
 13396                           intcon	equ	0xFF2
 13397                           indf0	equ	0xFEF
 13398                           postinc0	equ	0xFEE
 13399                           fsr0h	equ	0xFEA
 13400                           fsr0l	equ	0xFE9
 13401                           wreg	equ	0xFE8
 13402                           indf1	equ	0xFE7
 13403                           postdec1	equ	0xFE5
 13404                           fsr1h	equ	0xFE2
 13405                           fsr1l	equ	0xFE1
 13406                           indf2	equ	0xFDF
 13407                           postinc2	equ	0xFDE
 13408                           postdec2	equ	0xFDD
 13409                           fsr2h	equ	0xFDA
 13410                           fsr2l	equ	0xFD9
 13411                           status	equ	0xFD8
 13412                           
 13413 ;; *************** function _getch *****************
 13414 ;; Defined at:
 13415 ;;		line 155 in file "mcc_generated_files/eusart1.c"
 13416 ;; Parameters:    Size  Location     Type
 13417 ;;		None
 13418 ;; Auto vars:     Size  Location     Type
 13419 ;;		None
 13420 ;; Return value:  Size  Location     Type
 13421 ;;                  1    wreg      unsigned char 
 13422 ;; Registers used:
 13423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13424 ;; Tracked objects:
 13425 ;;		On entry : 0/0
 13426 ;;		On exit  : 0/0
 13427 ;;		Unchanged: 0/0
 13428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13433 ;;Total ram usage:        0 bytes
 13434 ;; Hardware stack levels used:    1
 13435 ;; Hardware stack levels required when called:    6
 13436 ;; This function calls:
 13437 ;;		_EUSART1_Read
 13438 ;; This function is called by:
 13439 ;;		_cmd_consol_task
 13440 ;; This function uses a non-reentrant model
 13441 ;;
 13442                           
 13443                           	psect	text62
 13444  003812                     __ptext62:
 13445                           	opt stack 0
 13446  003812                     _getch:
 13447                           	opt stack 23
 13448                           
 13449                           ;eusart1.c: 157: return EUSART1_Read();
 13450                           
 13451                           ;incstack = 0
 13452  003812  EC49  F01A         	call	_EUSART1_Read	;wreg free
 13453  003816  0012               	return	
 13454  003818                     __end_of_getch:
 13455                           	opt stack 0
 13456                           tblptru	equ	0xFF8
 13457                           tblptrh	equ	0xFF7
 13458                           tblptrl	equ	0xFF6
 13459                           tablat	equ	0xFF5
 13460                           prodh	equ	0xFF4
 13461                           prodl	equ	0xFF3
 13462                           intcon	equ	0xFF2
 13463                           indf0	equ	0xFEF
 13464                           postinc0	equ	0xFEE
 13465                           fsr0h	equ	0xFEA
 13466                           fsr0l	equ	0xFE9
 13467                           wreg	equ	0xFE8
 13468                           indf1	equ	0xFE7
 13469                           postdec1	equ	0xFE5
 13470                           fsr1h	equ	0xFE2
 13471                           fsr1l	equ	0xFE1
 13472                           indf2	equ	0xFDF
 13473                           postinc2	equ	0xFDE
 13474                           postdec2	equ	0xFDD
 13475                           fsr2h	equ	0xFDA
 13476                           fsr2l	equ	0xFD9
 13477                           status	equ	0xFD8
 13478                           
 13479 ;; *************** function _EUSART1_Read *****************
 13480 ;; Defined at:
 13481 ;;		line 112 in file "mcc_generated_files/eusart1.c"
 13482 ;; Parameters:    Size  Location     Type
 13483 ;;		None
 13484 ;; Auto vars:     Size  Location     Type
 13485 ;;  readValue       1   15[COMRAM] unsigned char 
 13486 ;; Return value:  Size  Location     Type
 13487 ;;                  1    wreg      unsigned char 
 13488 ;; Registers used:
 13489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13490 ;; Tracked objects:
 13491 ;;		On entry : 0/0
 13492 ;;		On exit  : 0/0
 13493 ;;		Unchanged: 0/0
 13494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13496 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13498 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13499 ;;Total ram usage:        1 bytes
 13500 ;; Hardware stack levels used:    1
 13501 ;; Hardware stack levels required when called:    5
 13502 ;; This function calls:
 13503 ;;		Nothing
 13504 ;; This function is called by:
 13505 ;;		_getch
 13506 ;; This function uses a non-reentrant model
 13507 ;;
 13508                           
 13509                           	psect	text63
 13510  003492                     __ptext63:
 13511                           	opt stack 0
 13512  003492                     _EUSART1_Read:
 13513                           	opt stack 23
 13514                           
 13515                           ;eusart1.c: 114: uint8_t readValue = 0;
 13516                           
 13517                           ;incstack = 0
 13518  003492  0E00               	movlw	0
 13519  003494  6E10               	movwf	EUSART1_Read@readValue,c
 13520  003496                     l6293:
 13521  003496  5043               	movf	_eusart1RxCount,w,c	;volatile
 13522  003498  B4D8               	btfsc	status,2,c
 13523  00349A  D7FD               	goto	l6293
 13524                           
 13525                           ;eusart1.c: 118: }
 13526                           ;eusart1.c: 120: readValue = eusart1RxBuffer[eusart1RxTail++];
 13527  00349C  5045               	movf	_eusart1RxTail,w,c	;volatile
 13528  00349E  0D01               	mullw	1
 13529  0034A0  0E60               	movlw	low _eusart1RxBuffer
 13530  0034A2  24F3               	addwf	prodl,w,c
 13531  0034A4  6ED9               	movwf	fsr2l,c
 13532  0034A6  0E00               	movlw	high _eusart1RxBuffer
 13533  0034A8  20F4               	addwfc	prodh,w,c
 13534  0034AA  6EDA               	movwf	fsr2h,c
 13535  0034AC  50DF               	movf	indf2,w,c
 13536  0034AE  6E10               	movwf	EUSART1_Read@readValue,c
 13537  0034B0  2A45               	incf	_eusart1RxTail,f,c	;volatile
 13538                           
 13539                           ;eusart1.c: 121: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 13540  0034B2  0E07               	movlw	7
 13541  0034B4  6445               	cpfsgt	_eusart1RxTail,c	;volatile
 13542  0034B6  D002               	goto	l6303
 13543                           
 13544                           ;eusart1.c: 122: {
 13545                           ;eusart1.c: 123: eusart1RxTail = 0;
 13546  0034B8  0E00               	movlw	0
 13547  0034BA  6E45               	movwf	_eusart1RxTail,c	;volatile
 13548  0034BC                     l6303:
 13549                           
 13550                           ;eusart1.c: 124: }
 13551                           ;eusart1.c: 125: PIE1bits.RC1IE = 0;
 13552  0034BC  9A9D               	bcf	3997,5,c	;volatile
 13553                           
 13554                           ;eusart1.c: 126: eusart1RxCount--;
 13555  0034BE  0643               	decf	_eusart1RxCount,f,c	;volatile
 13556                           
 13557                           ;eusart1.c: 127: PIE1bits.RC1IE = 1;
 13558  0034C0  8A9D               	bsf	3997,5,c	;volatile
 13559                           
 13560                           ;eusart1.c: 129: return readValue;
 13561  0034C2  5010               	movf	EUSART1_Read@readValue,w,c
 13562  0034C4  0012               	return	
 13563  0034C6                     __end_of_EUSART1_Read:
 13564                           	opt stack 0
 13565                           tblptru	equ	0xFF8
 13566                           tblptrh	equ	0xFF7
 13567                           tblptrl	equ	0xFF6
 13568                           tablat	equ	0xFF5
 13569                           prodh	equ	0xFF4
 13570                           prodl	equ	0xFF3
 13571                           intcon	equ	0xFF2
 13572                           indf0	equ	0xFEF
 13573                           postinc0	equ	0xFEE
 13574                           fsr0h	equ	0xFEA
 13575                           fsr0l	equ	0xFE9
 13576                           wreg	equ	0xFE8
 13577                           indf1	equ	0xFE7
 13578                           postdec1	equ	0xFE5
 13579                           fsr1h	equ	0xFE2
 13580                           fsr1l	equ	0xFE1
 13581                           indf2	equ	0xFDF
 13582                           postinc2	equ	0xFDE
 13583                           postdec2	equ	0xFDD
 13584                           fsr2h	equ	0xFDA
 13585                           fsr2l	equ	0xFD9
 13586                           status	equ	0xFD8
 13587                           
 13588 ;; *************** function _TMR5_StopTimer *****************
 13589 ;; Defined at:
 13590 ;;		line 94 in file "mcc_generated_files/tmr5.c"
 13591 ;; Parameters:    Size  Location     Type
 13592 ;;		None
 13593 ;; Auto vars:     Size  Location     Type
 13594 ;;		None
 13595 ;; Return value:  Size  Location     Type
 13596 ;;                  1    wreg      void 
 13597 ;; Registers used:
 13598 ;;		None
 13599 ;; Tracked objects:
 13600 ;;		On entry : 0/0
 13601 ;;		On exit  : 0/0
 13602 ;;		Unchanged: 0/0
 13603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13608 ;;Total ram usage:        0 bytes
 13609 ;; Hardware stack levels used:    1
 13610 ;; Hardware stack levels required when called:    5
 13611 ;; This function calls:
 13612 ;;		Nothing
 13613 ;; This function is called by:
 13614 ;;		_main
 13615 ;;		__delay_10uS
 13616 ;; This function uses a non-reentrant model
 13617 ;;
 13618                           
 13619                           	psect	text64
 13620  003818                     __ptext64:
 13621                           	opt stack 0
 13622  003818                     _TMR5_StopTimer:
 13623                           	opt stack 25
 13624                           
 13625                           ;tmr5.c: 97: T5CONbits.TMR5ON = 0;
 13626                           
 13627                           ;incstack = 0
 13628  003818  010F               	movlb	15	; () banked
 13629  00381A  914E               	bcf	78,0,b	;volatile
 13630                           
 13631                           ; BSR set to: 15
 13632  00381C  0012               	return		;funcret
 13633  00381E                     __end_of_TMR5_StopTimer:
 13634                           	opt stack 0
 13635                           tblptru	equ	0xFF8
 13636                           tblptrh	equ	0xFF7
 13637                           tblptrl	equ	0xFF6
 13638                           tablat	equ	0xFF5
 13639                           prodh	equ	0xFF4
 13640                           prodl	equ	0xFF3
 13641                           intcon	equ	0xFF2
 13642                           indf0	equ	0xFEF
 13643                           postinc0	equ	0xFEE
 13644                           fsr0h	equ	0xFEA
 13645                           fsr0l	equ	0xFE9
 13646                           wreg	equ	0xFE8
 13647                           indf1	equ	0xFE7
 13648                           postdec1	equ	0xFE5
 13649                           fsr1h	equ	0xFE2
 13650                           fsr1l	equ	0xFE1
 13651                           indf2	equ	0xFDF
 13652                           postinc2	equ	0xFDE
 13653                           postdec2	equ	0xFDD
 13654                           fsr2h	equ	0xFDA
 13655                           fsr2l	equ	0xFD9
 13656                           status	equ	0xFD8
 13657                           
 13658 ;; *************** function _TMR0_StopTimer *****************
 13659 ;; Defined at:
 13660 ;;		line 101 in file "mcc_generated_files/tmr0.c"
 13661 ;; Parameters:    Size  Location     Type
 13662 ;;		None
 13663 ;; Auto vars:     Size  Location     Type
 13664 ;;		None
 13665 ;; Return value:  Size  Location     Type
 13666 ;;                  1    wreg      void 
 13667 ;; Registers used:
 13668 ;;		None
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 0/0
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;Total ram usage:        0 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; Hardware stack levels required when called:    5
 13681 ;; This function calls:
 13682 ;;		Nothing
 13683 ;; This function is called by:
 13684 ;;		_main
 13685 ;; This function uses a non-reentrant model
 13686 ;;
 13687                           
 13688                           	psect	text65
 13689  003828                     __ptext65:
 13690                           	opt stack 0
 13691  003828                     _TMR0_StopTimer:
 13692                           	opt stack 25
 13693                           
 13694                           ;tmr0.c: 104: T0CONbits.TMR0ON = 0;
 13695                           
 13696                           ; BSR set to: 15
 13697                           ;incstack = 0
 13698  003828  9ED5               	bcf	4053,7,c	;volatile
 13699  00382A  0012               	return		;funcret
 13700  00382C                     __end_of_TMR0_StopTimer:
 13701                           	opt stack 0
 13702                           tblptru	equ	0xFF8
 13703                           tblptrh	equ	0xFF7
 13704                           tblptrl	equ	0xFF6
 13705                           tablat	equ	0xFF5
 13706                           prodh	equ	0xFF4
 13707                           prodl	equ	0xFF3
 13708                           intcon	equ	0xFF2
 13709                           indf0	equ	0xFEF
 13710                           postinc0	equ	0xFEE
 13711                           fsr0h	equ	0xFEA
 13712                           fsr0l	equ	0xFE9
 13713                           wreg	equ	0xFE8
 13714                           indf1	equ	0xFE7
 13715                           postdec1	equ	0xFE5
 13716                           fsr1h	equ	0xFE2
 13717                           fsr1l	equ	0xFE1
 13718                           indf2	equ	0xFDF
 13719                           postinc2	equ	0xFDE
 13720                           postdec2	equ	0xFDD
 13721                           fsr2h	equ	0xFDA
 13722                           fsr2l	equ	0xFD9
 13723                           status	equ	0xFD8
 13724                           
 13725 ;; *************** function _SYSTEM_Initialize *****************
 13726 ;; Defined at:
 13727 ;;		line 111 in file "mcc_generated_files/mcc.c"
 13728 ;; Parameters:    Size  Location     Type
 13729 ;;		None
 13730 ;; Auto vars:     Size  Location     Type
 13731 ;;		None
 13732 ;; Return value:  Size  Location     Type
 13733 ;;                  1    wreg      void 
 13734 ;; Registers used:
 13735 ;;		wreg, status,2, status,0, cstack
 13736 ;; Tracked objects:
 13737 ;;		On entry : 0/0
 13738 ;;		On exit  : 0/0
 13739 ;;		Unchanged: 0/0
 13740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13745 ;;Total ram usage:        0 bytes
 13746 ;; Hardware stack levels used:    1
 13747 ;; Hardware stack levels required when called:    7
 13748 ;; This function calls:
 13749 ;;		_EUSART1_Initialize
 13750 ;;		_INTERRUPT_Initialize
 13751 ;;		_OSCILLATOR_Initialize
 13752 ;;		_PIN_MANAGER_Initialize
 13753 ;;		_TMR0_Initialize
 13754 ;;		_TMR1_Initialize
 13755 ;;		_TMR5_Initialize
 13756 ;; This function is called by:
 13757 ;;		_main
 13758 ;; This function uses a non-reentrant model
 13759 ;;
 13760                           
 13761                           	psect	text66
 13762  00369E                     __ptext66:
 13763                           	opt stack 0
 13764  00369E                     _SYSTEM_Initialize:
 13765                           	opt stack 23
 13766                           
 13767                           ;mcc.c: 114: INTERRUPT_Initialize();
 13768                           
 13769                           ;incstack = 0
 13770  00369E  EC1A  F01C         	call	_INTERRUPT_Initialize	;wreg free
 13771                           
 13772                           ;mcc.c: 115: PIN_MANAGER_Initialize();
 13773  0036A2  EC2B  F019         	call	_PIN_MANAGER_Initialize	;wreg free
 13774                           
 13775                           ;mcc.c: 116: OSCILLATOR_Initialize();
 13776  0036A6  ECD1  F01B         	call	_OSCILLATOR_Initialize	;wreg free
 13777                           
 13778                           ;mcc.c: 117: TMR5_Initialize();
 13779  0036AA  ECEB  F01A         	call	_TMR5_Initialize	;wreg free
 13780                           
 13781                           ;mcc.c: 118: TMR1_Initialize();
 13782  0036AE  EC21  F01B         	call	_TMR1_Initialize	;wreg free
 13783                           
 13784                           ;mcc.c: 119: TMR0_Initialize();
 13785  0036B2  EC12  F01A         	call	_TMR0_Initialize	;wreg free
 13786                           
 13787                           ;mcc.c: 120: EUSART1_Initialize();
 13788  0036B6  EC2E  F01A         	call	_EUSART1_Initialize	;wreg free
 13789  0036BA  0012               	return		;funcret
 13790  0036BC                     __end_of_SYSTEM_Initialize:
 13791                           	opt stack 0
 13792                           tblptru	equ	0xFF8
 13793                           tblptrh	equ	0xFF7
 13794                           tblptrl	equ	0xFF6
 13795                           tablat	equ	0xFF5
 13796                           prodh	equ	0xFF4
 13797                           prodl	equ	0xFF3
 13798                           intcon	equ	0xFF2
 13799                           indf0	equ	0xFEF
 13800                           postinc0	equ	0xFEE
 13801                           fsr0h	equ	0xFEA
 13802                           fsr0l	equ	0xFE9
 13803                           wreg	equ	0xFE8
 13804                           indf1	equ	0xFE7
 13805                           postdec1	equ	0xFE5
 13806                           fsr1h	equ	0xFE2
 13807                           fsr1l	equ	0xFE1
 13808                           indf2	equ	0xFDF
 13809                           postinc2	equ	0xFDE
 13810                           postdec2	equ	0xFDD
 13811                           fsr2h	equ	0xFDA
 13812                           fsr2l	equ	0xFD9
 13813                           status	equ	0xFD8
 13814                           
 13815 ;; *************** function _TMR5_Initialize *****************
 13816 ;; Defined at:
 13817 ;;		line 62 in file "mcc_generated_files/tmr5.c"
 13818 ;; Parameters:    Size  Location     Type
 13819 ;;		None
 13820 ;; Auto vars:     Size  Location     Type
 13821 ;;		None
 13822 ;; Return value:  Size  Location     Type
 13823 ;;                  1    wreg      void 
 13824 ;; Registers used:
 13825 ;;		wreg, status,2, cstack
 13826 ;; Tracked objects:
 13827 ;;		On entry : 0/0
 13828 ;;		On exit  : 0/0
 13829 ;;		Unchanged: 0/0
 13830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13835 ;;Total ram usage:        0 bytes
 13836 ;; Hardware stack levels used:    1
 13837 ;; Hardware stack levels required when called:    6
 13838 ;; This function calls:
 13839 ;;		_TMR5_StartTimer
 13840 ;; This function is called by:
 13841 ;;		_SYSTEM_Initialize
 13842 ;; This function uses a non-reentrant model
 13843 ;;
 13844                           
 13845                           	psect	text67
 13846  0035D6                     __ptext67:
 13847                           	opt stack 0
 13848  0035D6                     _TMR5_Initialize:
 13849                           	opt stack 23
 13850                           
 13851                           ;tmr5.c: 67: T5CON = 0x12;
 13852                           
 13853                           ;incstack = 0
 13854  0035D6  0E12               	movlw	18
 13855  0035D8  010F               	movlb	15	; () banked
 13856  0035DA  6F4E               	movwf	78,b	;volatile
 13857                           
 13858                           ;tmr5.c: 70: T5GCON = 0x00;
 13859  0035DC  0E00               	movlw	0
 13860  0035DE  010F               	movlb	15	; () banked
 13861  0035E0  6F4D               	movwf	77,b	;volatile
 13862                           
 13863                           ; BSR set to: 15
 13864                           ;tmr5.c: 73: TMR5H = 0xFF;
 13865  0035E2  010F               	movlb	15	; () banked
 13866  0035E4  6950               	setf	80,b	;volatile
 13867                           
 13868                           ;tmr5.c: 76: TMR5L = 0xEC;
 13869  0035E6  0EEC               	movlw	236
 13870  0035E8  010F               	movlb	15	; () banked
 13871  0035EA  6F4F               	movwf	79,b	;volatile
 13872                           
 13873                           ; BSR set to: 15
 13874                           ;tmr5.c: 79: timer5ReloadVal=TMR5;
 13875  0035EC  CF4F F0FD          	movff	3919,_timer5ReloadVal	;volatile
 13876  0035F0  CF50 F0FE          	movff	3920,_timer5ReloadVal+1	;volatile
 13877                           
 13878                           ; BSR set to: 15
 13879                           ;tmr5.c: 82: PIR5bits.TMR5IF = 0;
 13880  0035F4  927E               	bcf	3966,1,c	;volatile
 13881                           
 13882                           ; BSR set to: 15
 13883                           ;tmr5.c: 85: TMR5_StartTimer();
 13884  0035F6  EC0F  F01C         	call	_TMR5_StartTimer	;wreg free
 13885  0035FA  0012               	return		;funcret
 13886  0035FC                     __end_of_TMR5_Initialize:
 13887                           	opt stack 0
 13888                           tblptru	equ	0xFF8
 13889                           tblptrh	equ	0xFF7
 13890                           tblptrl	equ	0xFF6
 13891                           tablat	equ	0xFF5
 13892                           prodh	equ	0xFF4
 13893                           prodl	equ	0xFF3
 13894                           intcon	equ	0xFF2
 13895                           indf0	equ	0xFEF
 13896                           postinc0	equ	0xFEE
 13897                           fsr0h	equ	0xFEA
 13898                           fsr0l	equ	0xFE9
 13899                           wreg	equ	0xFE8
 13900                           indf1	equ	0xFE7
 13901                           postdec1	equ	0xFE5
 13902                           fsr1h	equ	0xFE2
 13903                           fsr1l	equ	0xFE1
 13904                           indf2	equ	0xFDF
 13905                           postinc2	equ	0xFDE
 13906                           postdec2	equ	0xFDD
 13907                           fsr2h	equ	0xFDA
 13908                           fsr2l	equ	0xFD9
 13909                           status	equ	0xFD8
 13910                           
 13911 ;; *************** function _TMR5_StartTimer *****************
 13912 ;; Defined at:
 13913 ;;		line 88 in file "mcc_generated_files/tmr5.c"
 13914 ;; Parameters:    Size  Location     Type
 13915 ;;		None
 13916 ;; Auto vars:     Size  Location     Type
 13917 ;;		None
 13918 ;; Return value:  Size  Location     Type
 13919 ;;                  1    wreg      void 
 13920 ;; Registers used:
 13921 ;;		None
 13922 ;; Tracked objects:
 13923 ;;		On entry : 0/0
 13924 ;;		On exit  : 0/0
 13925 ;;		Unchanged: 0/0
 13926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13931 ;;Total ram usage:        0 bytes
 13932 ;; Hardware stack levels used:    1
 13933 ;; Hardware stack levels required when called:    5
 13934 ;; This function calls:
 13935 ;;		Nothing
 13936 ;; This function is called by:
 13937 ;;		_TMR5_Initialize
 13938 ;;		__delay_10uS
 13939 ;; This function uses a non-reentrant model
 13940 ;;
 13941                           
 13942                           	psect	text68
 13943  00381E                     __ptext68:
 13944                           	opt stack 0
 13945  00381E                     _TMR5_StartTimer:
 13946                           	opt stack 23
 13947                           
 13948                           ;tmr5.c: 91: T5CONbits.TMR5ON = 1;
 13949                           
 13950                           ;incstack = 0
 13951  00381E  010F               	movlb	15	; () banked
 13952  003820  814E               	bsf	78,0,b	;volatile
 13953                           
 13954                           ; BSR set to: 15
 13955  003822  0012               	return		;funcret
 13956  003824                     __end_of_TMR5_StartTimer:
 13957                           	opt stack 0
 13958                           tblptru	equ	0xFF8
 13959                           tblptrh	equ	0xFF7
 13960                           tblptrl	equ	0xFF6
 13961                           tablat	equ	0xFF5
 13962                           prodh	equ	0xFF4
 13963                           prodl	equ	0xFF3
 13964                           intcon	equ	0xFF2
 13965                           indf0	equ	0xFEF
 13966                           postinc0	equ	0xFEE
 13967                           fsr0h	equ	0xFEA
 13968                           fsr0l	equ	0xFE9
 13969                           wreg	equ	0xFE8
 13970                           indf1	equ	0xFE7
 13971                           postdec1	equ	0xFE5
 13972                           fsr1h	equ	0xFE2
 13973                           fsr1l	equ	0xFE1
 13974                           indf2	equ	0xFDF
 13975                           postinc2	equ	0xFDE
 13976                           postdec2	equ	0xFDD
 13977                           fsr2h	equ	0xFDA
 13978                           fsr2l	equ	0xFD9
 13979                           status	equ	0xFD8
 13980                           
 13981 ;; *************** function _TMR1_Initialize *****************
 13982 ;; Defined at:
 13983 ;;		line 62 in file "mcc_generated_files/tmr1.c"
 13984 ;; Parameters:    Size  Location     Type
 13985 ;;		None
 13986 ;; Auto vars:     Size  Location     Type
 13987 ;;		None
 13988 ;; Return value:  Size  Location     Type
 13989 ;;                  1    wreg      void 
 13990 ;; Registers used:
 13991 ;;		wreg, status,2, cstack
 13992 ;; Tracked objects:
 13993 ;;		On entry : 0/0
 13994 ;;		On exit  : 0/0
 13995 ;;		Unchanged: 0/0
 13996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14001 ;;Total ram usage:        0 bytes
 14002 ;; Hardware stack levels used:    1
 14003 ;; Hardware stack levels required when called:    6
 14004 ;; This function calls:
 14005 ;;		_TMR1_StartTimer
 14006 ;; This function is called by:
 14007 ;;		_SYSTEM_Initialize
 14008 ;; This function uses a non-reentrant model
 14009 ;;
 14010                           
 14011                           	psect	text69
 14012  003642                     __ptext69:
 14013                           	opt stack 0
 14014  003642                     _TMR1_Initialize:
 14015                           	opt stack 23
 14016                           
 14017                           ;tmr1.c: 67: T1CON = 0x32;
 14018                           
 14019                           ; BSR set to: 15
 14020                           ;incstack = 0
 14021  003642  0E32               	movlw	50
 14022  003644  6ECD               	movwf	4045,c	;volatile
 14023                           
 14024                           ;tmr1.c: 70: T1GCON = 0x00;
 14025  003646  0E00               	movlw	0
 14026  003648  6ECC               	movwf	4044,c	;volatile
 14027                           
 14028                           ;tmr1.c: 73: TMR1H = 0xFE;
 14029  00364A  0EFE               	movlw	254
 14030  00364C  6ECF               	movwf	4047,c	;volatile
 14031                           
 14032                           ;tmr1.c: 76: TMR1L = 0x0C;
 14033  00364E  0E0C               	movlw	12
 14034  003650  6ECE               	movwf	4046,c	;volatile
 14035                           
 14036                           ;tmr1.c: 79: timer1ReloadVal=TMR1;
 14037  003652  CFCE F0FB          	movff	4046,_timer1ReloadVal	;volatile
 14038  003656  CFCF F0FC          	movff	4047,_timer1ReloadVal+1	;volatile
 14039                           
 14040                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
 14041  00365A  909E               	bcf	3998,0,c	;volatile
 14042                           
 14043                           ;tmr1.c: 85: TMR1_StartTimer();
 14044  00365C  EC16  F01C         	call	_TMR1_StartTimer	;wreg free
 14045  003660  0012               	return		;funcret
 14046  003662                     __end_of_TMR1_Initialize:
 14047                           	opt stack 0
 14048                           tblptru	equ	0xFF8
 14049                           tblptrh	equ	0xFF7
 14050                           tblptrl	equ	0xFF6
 14051                           tablat	equ	0xFF5
 14052                           prodh	equ	0xFF4
 14053                           prodl	equ	0xFF3
 14054                           intcon	equ	0xFF2
 14055                           indf0	equ	0xFEF
 14056                           postinc0	equ	0xFEE
 14057                           fsr0h	equ	0xFEA
 14058                           fsr0l	equ	0xFE9
 14059                           wreg	equ	0xFE8
 14060                           indf1	equ	0xFE7
 14061                           postdec1	equ	0xFE5
 14062                           fsr1h	equ	0xFE2
 14063                           fsr1l	equ	0xFE1
 14064                           indf2	equ	0xFDF
 14065                           postinc2	equ	0xFDE
 14066                           postdec2	equ	0xFDD
 14067                           fsr2h	equ	0xFDA
 14068                           fsr2l	equ	0xFD9
 14069                           status	equ	0xFD8
 14070                           
 14071 ;; *************** function _TMR1_StartTimer *****************
 14072 ;; Defined at:
 14073 ;;		line 88 in file "mcc_generated_files/tmr1.c"
 14074 ;; Parameters:    Size  Location     Type
 14075 ;;		None
 14076 ;; Auto vars:     Size  Location     Type
 14077 ;;		None
 14078 ;; Return value:  Size  Location     Type
 14079 ;;                  1    wreg      void 
 14080 ;; Registers used:
 14081 ;;		None
 14082 ;; Tracked objects:
 14083 ;;		On entry : 0/0
 14084 ;;		On exit  : 0/0
 14085 ;;		Unchanged: 0/0
 14086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14091 ;;Total ram usage:        0 bytes
 14092 ;; Hardware stack levels used:    1
 14093 ;; Hardware stack levels required when called:    5
 14094 ;; This function calls:
 14095 ;;		Nothing
 14096 ;; This function is called by:
 14097 ;;		_TMR1_Initialize
 14098 ;;		__delay_MS
 14099 ;; This function uses a non-reentrant model
 14100 ;;
 14101                           
 14102                           	psect	text70
 14103  00382C                     __ptext70:
 14104                           	opt stack 0
 14105  00382C                     _TMR1_StartTimer:
 14106                           	opt stack 20
 14107                           
 14108                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
 14109                           
 14110                           ;incstack = 0
 14111  00382C  80CD               	bsf	4045,0,c	;volatile
 14112  00382E  0012               	return		;funcret
 14113  003830                     __end_of_TMR1_StartTimer:
 14114                           	opt stack 0
 14115                           tblptru	equ	0xFF8
 14116                           tblptrh	equ	0xFF7
 14117                           tblptrl	equ	0xFF6
 14118                           tablat	equ	0xFF5
 14119                           prodh	equ	0xFF4
 14120                           prodl	equ	0xFF3
 14121                           intcon	equ	0xFF2
 14122                           indf0	equ	0xFEF
 14123                           postinc0	equ	0xFEE
 14124                           fsr0h	equ	0xFEA
 14125                           fsr0l	equ	0xFE9
 14126                           wreg	equ	0xFE8
 14127                           indf1	equ	0xFE7
 14128                           postdec1	equ	0xFE5
 14129                           fsr1h	equ	0xFE2
 14130                           fsr1l	equ	0xFE1
 14131                           indf2	equ	0xFDF
 14132                           postinc2	equ	0xFDE
 14133                           postdec2	equ	0xFDD
 14134                           fsr2h	equ	0xFDA
 14135                           fsr2l	equ	0xFD9
 14136                           status	equ	0xFD8
 14137                           
 14138 ;; *************** function _TMR0_Initialize *****************
 14139 ;; Defined at:
 14140 ;;		line 66 in file "mcc_generated_files/tmr0.c"
 14141 ;; Parameters:    Size  Location     Type
 14142 ;;		None
 14143 ;; Auto vars:     Size  Location     Type
 14144 ;;		None
 14145 ;; Return value:  Size  Location     Type
 14146 ;;                  1    wreg      void 
 14147 ;; Registers used:
 14148 ;;		wreg, status,2, status,0, cstack
 14149 ;; Tracked objects:
 14150 ;;		On entry : 0/0
 14151 ;;		On exit  : 0/0
 14152 ;;		Unchanged: 0/0
 14153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14156 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14158 ;;Total ram usage:        2 bytes
 14159 ;; Hardware stack levels used:    1
 14160 ;; Hardware stack levels required when called:    6
 14161 ;; This function calls:
 14162 ;;		_TMR0_SetInterruptHandler
 14163 ;;		_TMR0_StartTimer
 14164 ;; This function is called by:
 14165 ;;		_SYSTEM_Initialize
 14166 ;; This function uses a non-reentrant model
 14167 ;;
 14168                           
 14169                           	psect	text71
 14170  003424                     __ptext71:
 14171                           	opt stack 0
 14172  003424                     _TMR0_Initialize:
 14173                           	opt stack 23
 14174                           
 14175                           ;tmr0.c: 71: T0CON = 0x17;
 14176                           
 14177                           ;incstack = 0
 14178  003424  0E17               	movlw	23
 14179  003426  6ED5               	movwf	4053,c	;volatile
 14180                           
 14181                           ;tmr0.c: 74: TMR0H = 0xC2;
 14182  003428  0EC2               	movlw	194
 14183  00342A  6ED7               	movwf	4055,c	;volatile
 14184                           
 14185                           ;tmr0.c: 77: TMR0L = 0xF6;
 14186  00342C  0EF6               	movlw	246
 14187  00342E  6ED6               	movwf	4054,c	;volatile
 14188                           
 14189                           ;tmr0.c: 80: timer0ReloadVal = (TMR0H << 8) | TMR0L;
 14190  003430  50D6               	movf	4054,w,c	;volatile
 14191  003432  CFD7 F012          	movff	4055,??_TMR0_Initialize	;volatile
 14192  003436  6A13               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 14193  003438  C012  F013         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 14194  00343C  6A12               	clrf	??_TMR0_Initialize,c
 14195  00343E  1012               	iorwf	??_TMR0_Initialize,w,c
 14196  003440  6E4E               	movwf	_timer0ReloadVal,c	;volatile
 14197  003442  5013               	movf	??_TMR0_Initialize+1,w,c
 14198  003444  6E4F               	movwf	_timer0ReloadVal+1,c	;volatile
 14199                           
 14200                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
 14201  003446  94F2               	bcf	intcon,2,c	;volatile
 14202                           
 14203                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
 14204  003448  8AF2               	bsf	intcon,5,c	;volatile
 14205                           
 14206                           ;tmr0.c: 89: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 14207  00344A  0E38               	movlw	low _TMR0_DefaultInterruptHandler
 14208  00344C  6E10               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
 14209  00344E  0E38               	movlw	high _TMR0_DefaultInterruptHandler
 14210  003450  6E11               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
 14211  003452  EC00  F01C         	call	_TMR0_SetInterruptHandler	;wreg free
 14212                           
 14213                           ;tmr0.c: 92: TMR0_StartTimer();
 14214  003456  EC18  F01C         	call	_TMR0_StartTimer	;wreg free
 14215  00345A  0012               	return		;funcret
 14216  00345C                     __end_of_TMR0_Initialize:
 14217                           	opt stack 0
 14218                           tblptru	equ	0xFF8
 14219                           tblptrh	equ	0xFF7
 14220                           tblptrl	equ	0xFF6
 14221                           tablat	equ	0xFF5
 14222                           prodh	equ	0xFF4
 14223                           prodl	equ	0xFF3
 14224                           intcon	equ	0xFF2
 14225                           indf0	equ	0xFEF
 14226                           postinc0	equ	0xFEE
 14227                           fsr0h	equ	0xFEA
 14228                           fsr0l	equ	0xFE9
 14229                           wreg	equ	0xFE8
 14230                           indf1	equ	0xFE7
 14231                           postdec1	equ	0xFE5
 14232                           fsr1h	equ	0xFE2
 14233                           fsr1l	equ	0xFE1
 14234                           indf2	equ	0xFDF
 14235                           postinc2	equ	0xFDE
 14236                           postdec2	equ	0xFDD
 14237                           fsr2h	equ	0xFDA
 14238                           fsr2l	equ	0xFD9
 14239                           status	equ	0xFD8
 14240                           
 14241 ;; *************** function _TMR0_StartTimer *****************
 14242 ;; Defined at:
 14243 ;;		line 95 in file "mcc_generated_files/tmr0.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;		None
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;		None
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  1    wreg      void 
 14250 ;; Registers used:
 14251 ;;		None
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14261 ;;Total ram usage:        0 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:    5
 14264 ;; This function calls:
 14265 ;;		Nothing
 14266 ;; This function is called by:
 14267 ;;		_TMR0_Initialize
 14268 ;;		_main
 14269 ;; This function uses a non-reentrant model
 14270 ;;
 14271                           
 14272                           	psect	text72
 14273  003830                     __ptext72:
 14274                           	opt stack 0
 14275  003830                     _TMR0_StartTimer:
 14276                           	opt stack 25
 14277                           
 14278                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
 14279                           
 14280                           ;incstack = 0
 14281  003830  8ED5               	bsf	4053,7,c	;volatile
 14282  003832  0012               	return		;funcret
 14283  003834                     __end_of_TMR0_StartTimer:
 14284                           	opt stack 0
 14285                           tblptru	equ	0xFF8
 14286                           tblptrh	equ	0xFF7
 14287                           tblptrl	equ	0xFF6
 14288                           tablat	equ	0xFF5
 14289                           prodh	equ	0xFF4
 14290                           prodl	equ	0xFF3
 14291                           intcon	equ	0xFF2
 14292                           indf0	equ	0xFEF
 14293                           postinc0	equ	0xFEE
 14294                           fsr0h	equ	0xFEA
 14295                           fsr0l	equ	0xFE9
 14296                           wreg	equ	0xFE8
 14297                           indf1	equ	0xFE7
 14298                           postdec1	equ	0xFE5
 14299                           fsr1h	equ	0xFE2
 14300                           fsr1l	equ	0xFE1
 14301                           indf2	equ	0xFDF
 14302                           postinc2	equ	0xFDE
 14303                           postdec2	equ	0xFDD
 14304                           fsr2h	equ	0xFDA
 14305                           fsr2l	equ	0xFD9
 14306                           status	equ	0xFD8
 14307                           
 14308 ;; *************** function _TMR0_SetInterruptHandler *****************
 14309 ;; Defined at:
 14310 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 14311 ;; Parameters:    Size  Location     Type
 14312 ;;  InterruptHan    2   15[COMRAM] PTR void 
 14313 ;;		 -> make_array(1), TMR0_DefaultInterruptHandler(1), 
 14314 ;; Auto vars:     Size  Location     Type
 14315 ;;		None
 14316 ;; Return value:  Size  Location     Type
 14317 ;;                  1    wreg      void 
 14318 ;; Registers used:
 14319 ;;		wreg, status,2, status,0
 14320 ;; Tracked objects:
 14321 ;;		On entry : 0/0
 14322 ;;		On exit  : 0/0
 14323 ;;		Unchanged: 0/0
 14324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14325 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14329 ;;Total ram usage:        2 bytes
 14330 ;; Hardware stack levels used:    1
 14331 ;; Hardware stack levels required when called:    5
 14332 ;; This function calls:
 14333 ;;		Nothing
 14334 ;; This function is called by:
 14335 ;;		_TMR0_Initialize
 14336 ;;		_main
 14337 ;; This function uses a non-reentrant model
 14338 ;;
 14339                           
 14340                           	psect	text73
 14341  003800                     __ptext73:
 14342                           	opt stack 0
 14343  003800                     _TMR0_SetInterruptHandler:
 14344                           	opt stack 25
 14345                           
 14346                           ;tmr0.c: 163: TMR0_InterruptHandler = InterruptHandler;
 14347                           
 14348                           ;incstack = 0
 14349  003800  C010  F0F9         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
 14350  003804  C011  F0FA         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
 14351  003808  0012               	return		;funcret
 14352  00380A                     __end_of_TMR0_SetInterruptHandler:
 14353                           	opt stack 0
 14354                           tblptru	equ	0xFF8
 14355                           tblptrh	equ	0xFF7
 14356                           tblptrl	equ	0xFF6
 14357                           tablat	equ	0xFF5
 14358                           prodh	equ	0xFF4
 14359                           prodl	equ	0xFF3
 14360                           intcon	equ	0xFF2
 14361                           indf0	equ	0xFEF
 14362                           postinc0	equ	0xFEE
 14363                           fsr0h	equ	0xFEA
 14364                           fsr0l	equ	0xFE9
 14365                           wreg	equ	0xFE8
 14366                           indf1	equ	0xFE7
 14367                           postdec1	equ	0xFE5
 14368                           fsr1h	equ	0xFE2
 14369                           fsr1l	equ	0xFE1
 14370                           indf2	equ	0xFDF
 14371                           postinc2	equ	0xFDE
 14372                           postdec2	equ	0xFDD
 14373                           fsr2h	equ	0xFDA
 14374                           fsr2l	equ	0xFD9
 14375                           status	equ	0xFD8
 14376                           
 14377 ;; *************** function _PIN_MANAGER_Initialize *****************
 14378 ;; Defined at:
 14379 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14380 ;; Parameters:    Size  Location     Type
 14381 ;;		None
 14382 ;; Auto vars:     Size  Location     Type
 14383 ;;		None
 14384 ;; Return value:  Size  Location     Type
 14385 ;;                  1    wreg      void 
 14386 ;; Registers used:
 14387 ;;		wreg, status,2
 14388 ;; Tracked objects:
 14389 ;;		On entry : 0/0
 14390 ;;		On exit  : 0/0
 14391 ;;		Unchanged: 0/0
 14392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14397 ;;Total ram usage:        0 bytes
 14398 ;; Hardware stack levels used:    1
 14399 ;; Hardware stack levels required when called:    5
 14400 ;; This function calls:
 14401 ;;		Nothing
 14402 ;; This function is called by:
 14403 ;;		_SYSTEM_Initialize
 14404 ;; This function uses a non-reentrant model
 14405 ;;
 14406                           
 14407                           	psect	text74
 14408  003256                     __ptext74:
 14409                           	opt stack 0
 14410  003256                     _PIN_MANAGER_Initialize:
 14411                           	opt stack 24
 14412                           
 14413                           ;pin_manager.c: 56: LATE = 0x00;
 14414                           
 14415                           ;incstack = 0
 14416  003256  0E00               	movlw	0
 14417  003258  6E8D               	movwf	3981,c	;volatile
 14418                           
 14419                           ;pin_manager.c: 57: LATD = 0x00;
 14420  00325A  0E00               	movlw	0
 14421  00325C  6E8C               	movwf	3980,c	;volatile
 14422                           
 14423                           ;pin_manager.c: 58: LATA = 0x00;
 14424  00325E  0E00               	movlw	0
 14425  003260  6E89               	movwf	3977,c	;volatile
 14426                           
 14427                           ;pin_manager.c: 59: LATB = 0x00;
 14428  003262  0E00               	movlw	0
 14429  003264  6E8A               	movwf	3978,c	;volatile
 14430                           
 14431                           ;pin_manager.c: 60: LATC = 0x00;
 14432  003266  0E00               	movlw	0
 14433  003268  6E8B               	movwf	3979,c	;volatile
 14434                           
 14435                           ;pin_manager.c: 65: TRISE = 0x03;
 14436  00326A  0E03               	movlw	3
 14437  00326C  6E96               	movwf	3990,c	;volatile
 14438                           
 14439                           ;pin_manager.c: 66: TRISA = 0xF8;
 14440  00326E  0EF8               	movlw	248
 14441  003270  6E92               	movwf	3986,c	;volatile
 14442                           
 14443                           ;pin_manager.c: 67: TRISB = 0xFF;
 14444  003272  6893               	setf	3987,c	;volatile
 14445                           
 14446                           ;pin_manager.c: 68: TRISC = 0xBF;
 14447  003274  0EBF               	movlw	191
 14448  003276  6E94               	movwf	3988,c	;volatile
 14449                           
 14450                           ;pin_manager.c: 69: TRISD = 0x00;
 14451  003278  0E00               	movlw	0
 14452  00327A  6E95               	movwf	3989,c	;volatile
 14453                           
 14454                           ;pin_manager.c: 74: ANSELC = 0x3C;
 14455  00327C  0E3C               	movlw	60
 14456  00327E  010F               	movlb	15	; () banked
 14457  003280  6F3A               	movwf	58,b	;volatile
 14458                           
 14459                           ;pin_manager.c: 75: ANSELB = 0x3F;
 14460  003282  0E3F               	movlw	63
 14461  003284  010F               	movlb	15	; () banked
 14462  003286  6F39               	movwf	57,b	;volatile
 14463                           
 14464                           ;pin_manager.c: 76: ANSELD = 0x00;
 14465  003288  0E00               	movlw	0
 14466  00328A  010F               	movlb	15	; () banked
 14467  00328C  6F3B               	movwf	59,b	;volatile
 14468                           
 14469                           ;pin_manager.c: 77: ANSELE = 0x03;
 14470  00328E  0E03               	movlw	3
 14471  003290  010F               	movlb	15	; () banked
 14472  003292  6F3C               	movwf	60,b	;volatile
 14473                           
 14474                           ;pin_manager.c: 78: ANSELA = 0x28;
 14475  003294  0E28               	movlw	40
 14476  003296  010F               	movlb	15	; () banked
 14477  003298  6F38               	movwf	56,b	;volatile
 14478                           
 14479                           ; BSR set to: 15
 14480                           ;pin_manager.c: 83: WPUB = 0xFF;
 14481  00329A  6861               	setf	3937,c	;volatile
 14482                           
 14483                           ; BSR set to: 15
 14484                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
 14485  00329C  9EF1               	bcf	intcon2,7,c	;volatile
 14486                           
 14487                           ; BSR set to: 15
 14488  00329E  0012               	return		;funcret
 14489  0032A0                     __end_of_PIN_MANAGER_Initialize:
 14490                           	opt stack 0
 14491                           tblptru	equ	0xFF8
 14492                           tblptrh	equ	0xFF7
 14493                           tblptrl	equ	0xFF6
 14494                           tablat	equ	0xFF5
 14495                           prodh	equ	0xFF4
 14496                           prodl	equ	0xFF3
 14497                           intcon	equ	0xFF2
 14498                           intcon2	equ	0xFF1
 14499                           indf0	equ	0xFEF
 14500                           postinc0	equ	0xFEE
 14501                           fsr0h	equ	0xFEA
 14502                           fsr0l	equ	0xFE9
 14503                           wreg	equ	0xFE8
 14504                           indf1	equ	0xFE7
 14505                           postdec1	equ	0xFE5
 14506                           fsr1h	equ	0xFE2
 14507                           fsr1l	equ	0xFE1
 14508                           indf2	equ	0xFDF
 14509                           postinc2	equ	0xFDE
 14510                           postdec2	equ	0xFDD
 14511                           fsr2h	equ	0xFDA
 14512                           fsr2l	equ	0xFD9
 14513                           status	equ	0xFD8
 14514                           
 14515 ;; *************** function _OSCILLATOR_Initialize *****************
 14516 ;; Defined at:
 14517 ;;		line 123 in file "mcc_generated_files/mcc.c"
 14518 ;; Parameters:    Size  Location     Type
 14519 ;;		None
 14520 ;; Auto vars:     Size  Location     Type
 14521 ;;		None
 14522 ;; Return value:  Size  Location     Type
 14523 ;;                  1    wreg      void 
 14524 ;; Registers used:
 14525 ;;		wreg, status,2
 14526 ;; Tracked objects:
 14527 ;;		On entry : 0/0
 14528 ;;		On exit  : 0/0
 14529 ;;		Unchanged: 0/0
 14530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14535 ;;Total ram usage:        0 bytes
 14536 ;; Hardware stack levels used:    1
 14537 ;; Hardware stack levels required when called:    5
 14538 ;; This function calls:
 14539 ;;		Nothing
 14540 ;; This function is called by:
 14541 ;;		_SYSTEM_Initialize
 14542 ;; This function uses a non-reentrant model
 14543 ;;
 14544                           
 14545                           	psect	text75
 14546  0037A2                     __ptext75:
 14547                           	opt stack 0
 14548  0037A2                     _OSCILLATOR_Initialize:
 14549                           	opt stack 24
 14550                           
 14551                           ;mcc.c: 126: OSCCON = 0x70;
 14552                           
 14553                           ; BSR set to: 15
 14554                           ;incstack = 0
 14555  0037A2  0E70               	movlw	112
 14556  0037A4  6ED3               	movwf	4051,c	;volatile
 14557                           
 14558                           ;mcc.c: 128: OSCCON2 = 0x04;
 14559  0037A6  0E04               	movlw	4
 14560  0037A8  6ED2               	movwf	4050,c	;volatile
 14561                           
 14562                           ;mcc.c: 130: OSCTUNE = 0x80;
 14563  0037AA  0E80               	movlw	128
 14564  0037AC  6E9B               	movwf	3995,c	;volatile
 14565  0037AE  0012               	return		;funcret
 14566  0037B0                     __end_of_OSCILLATOR_Initialize:
 14567                           	opt stack 0
 14568                           tblptru	equ	0xFF8
 14569                           tblptrh	equ	0xFF7
 14570                           tblptrl	equ	0xFF6
 14571                           tablat	equ	0xFF5
 14572                           prodh	equ	0xFF4
 14573                           prodl	equ	0xFF3
 14574                           intcon	equ	0xFF2
 14575                           intcon2	equ	0xFF1
 14576                           indf0	equ	0xFEF
 14577                           postinc0	equ	0xFEE
 14578                           fsr0h	equ	0xFEA
 14579                           fsr0l	equ	0xFE9
 14580                           wreg	equ	0xFE8
 14581                           indf1	equ	0xFE7
 14582                           postdec1	equ	0xFE5
 14583                           fsr1h	equ	0xFE2
 14584                           fsr1l	equ	0xFE1
 14585                           indf2	equ	0xFDF
 14586                           postinc2	equ	0xFDE
 14587                           postdec2	equ	0xFDD
 14588                           fsr2h	equ	0xFDA
 14589                           fsr2l	equ	0xFD9
 14590                           status	equ	0xFD8
 14591                           
 14592 ;; *************** function _INTERRUPT_Initialize *****************
 14593 ;; Defined at:
 14594 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 14595 ;; Parameters:    Size  Location     Type
 14596 ;;		None
 14597 ;; Auto vars:     Size  Location     Type
 14598 ;;		None
 14599 ;; Return value:  Size  Location     Type
 14600 ;;                  1    wreg      void 
 14601 ;; Registers used:
 14602 ;;		None
 14603 ;; Tracked objects:
 14604 ;;		On entry : 0/0
 14605 ;;		On exit  : 0/0
 14606 ;;		Unchanged: 0/0
 14607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14612 ;;Total ram usage:        0 bytes
 14613 ;; Hardware stack levels used:    1
 14614 ;; Hardware stack levels required when called:    5
 14615 ;; This function calls:
 14616 ;;		Nothing
 14617 ;; This function is called by:
 14618 ;;		_SYSTEM_Initialize
 14619 ;; This function uses a non-reentrant model
 14620 ;;
 14621                           
 14622                           	psect	text76
 14623  003834                     __ptext76:
 14624                           	opt stack 0
 14625  003834                     _INTERRUPT_Initialize:
 14626                           	opt stack 24
 14627                           
 14628                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
 14629                           
 14630                           ;incstack = 0
 14631  003834  9ED0               	bcf	4048,7,c	;volatile
 14632  003836  0012               	return		;funcret
 14633  003838                     __end_of_INTERRUPT_Initialize:
 14634                           	opt stack 0
 14635                           tblptru	equ	0xFF8
 14636                           tblptrh	equ	0xFF7
 14637                           tblptrl	equ	0xFF6
 14638                           tablat	equ	0xFF5
 14639                           prodh	equ	0xFF4
 14640                           prodl	equ	0xFF3
 14641                           intcon	equ	0xFF2
 14642                           intcon2	equ	0xFF1
 14643                           indf0	equ	0xFEF
 14644                           postinc0	equ	0xFEE
 14645                           fsr0h	equ	0xFEA
 14646                           fsr0l	equ	0xFE9
 14647                           wreg	equ	0xFE8
 14648                           indf1	equ	0xFE7
 14649                           postdec1	equ	0xFE5
 14650                           fsr1h	equ	0xFE2
 14651                           fsr1l	equ	0xFE1
 14652                           indf2	equ	0xFDF
 14653                           postinc2	equ	0xFDE
 14654                           postdec2	equ	0xFDD
 14655                           fsr2h	equ	0xFDA
 14656                           fsr2l	equ	0xFD9
 14657                           status	equ	0xFD8
 14658                           
 14659 ;; *************** function _EUSART1_Initialize *****************
 14660 ;; Defined at:
 14661 ;;		line 75 in file "mcc_generated_files/eusart1.c"
 14662 ;; Parameters:    Size  Location     Type
 14663 ;;		None
 14664 ;; Auto vars:     Size  Location     Type
 14665 ;;		None
 14666 ;; Return value:  Size  Location     Type
 14667 ;;                  1    wreg      void 
 14668 ;; Registers used:
 14669 ;;		wreg, status,2
 14670 ;; Tracked objects:
 14671 ;;		On entry : 0/0
 14672 ;;		On exit  : 0/0
 14673 ;;		Unchanged: 0/0
 14674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14679 ;;Total ram usage:        0 bytes
 14680 ;; Hardware stack levels used:    1
 14681 ;; Hardware stack levels required when called:    5
 14682 ;; This function calls:
 14683 ;;		Nothing
 14684 ;; This function is called by:
 14685 ;;		_SYSTEM_Initialize
 14686 ;; This function uses a non-reentrant model
 14687 ;;
 14688                           
 14689                           	psect	text77
 14690  00345C                     __ptext77:
 14691                           	opt stack 0
 14692  00345C                     _EUSART1_Initialize:
 14693                           	opt stack 24
 14694                           
 14695                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
 14696                           
 14697                           ;incstack = 0
 14698  00345C  9A9D               	bcf	3997,5,c	;volatile
 14699                           
 14700                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
 14701  00345E  989D               	bcf	3997,4,c	;volatile
 14702                           
 14703                           ;eusart1.c: 84: BAUDCON1 = 0x08;
 14704  003460  0E08               	movlw	8
 14705  003462  6EB8               	movwf	4024,c	;volatile
 14706                           
 14707                           ;eusart1.c: 87: RCSTA1 = 0x90;
 14708  003464  0E90               	movlw	144
 14709  003466  6EAB               	movwf	4011,c	;volatile
 14710                           
 14711                           ;eusart1.c: 90: TXSTA1 = 0x24;
 14712  003468  0E24               	movlw	36
 14713  00346A  6EAC               	movwf	4012,c	;volatile
 14714                           
 14715                           ;eusart1.c: 93: SPBRG1 = 0xA0;
 14716  00346C  0EA0               	movlw	160
 14717  00346E  6EAF               	movwf	4015,c	;volatile
 14718                           
 14719                           ;eusart1.c: 96: SPBRGH1 = 0x01;
 14720  003470  0E01               	movlw	1
 14721  003472  6EB0               	movwf	4016,c	;volatile
 14722                           
 14723                           ;eusart1.c: 100: eusart1TxHead = 0;
 14724  003474  0E00               	movlw	0
 14725  003476  6E46               	movwf	_eusart1TxHead,c	;volatile
 14726                           
 14727                           ;eusart1.c: 101: eusart1TxTail = 0;
 14728  003478  0E00               	movlw	0
 14729  00347A  6E47               	movwf	_eusart1TxTail,c	;volatile
 14730                           
 14731                           ;eusart1.c: 102: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 14732  00347C  0E08               	movlw	8
 14733  00347E  0100               	movlb	0	; () banked
 14734  003480  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
 14735                           
 14736                           ;eusart1.c: 104: eusart1RxHead = 0;
 14737  003482  0E00               	movlw	0
 14738  003484  6E44               	movwf	_eusart1RxHead,c	;volatile
 14739                           
 14740                           ;eusart1.c: 105: eusart1RxTail = 0;
 14741  003486  0E00               	movlw	0
 14742  003488  6E45               	movwf	_eusart1RxTail,c	;volatile
 14743                           
 14744                           ;eusart1.c: 106: eusart1RxCount = 0;
 14745  00348A  0E00               	movlw	0
 14746  00348C  6E43               	movwf	_eusart1RxCount,c	;volatile
 14747                           
 14748                           ; BSR set to: 0
 14749                           ;eusart1.c: 109: PIE1bits.RC1IE = 1;
 14750  00348E  8A9D               	bsf	3997,5,c	;volatile
 14751                           
 14752                           ; BSR set to: 0
 14753  003490  0012               	return		;funcret
 14754  003492                     __end_of_EUSART1_Initialize:
 14755                           	opt stack 0
 14756                           tblptru	equ	0xFF8
 14757                           tblptrh	equ	0xFF7
 14758                           tblptrl	equ	0xFF6
 14759                           tablat	equ	0xFF5
 14760                           prodh	equ	0xFF4
 14761                           prodl	equ	0xFF3
 14762                           intcon	equ	0xFF2
 14763                           intcon2	equ	0xFF1
 14764                           indf0	equ	0xFEF
 14765                           postinc0	equ	0xFEE
 14766                           fsr0h	equ	0xFEA
 14767                           fsr0l	equ	0xFE9
 14768                           wreg	equ	0xFE8
 14769                           indf1	equ	0xFE7
 14770                           postdec1	equ	0xFE5
 14771                           fsr1h	equ	0xFE2
 14772                           fsr1l	equ	0xFE1
 14773                           indf2	equ	0xFDF
 14774                           postinc2	equ	0xFDE
 14775                           postdec2	equ	0xFDD
 14776                           fsr2h	equ	0xFDA
 14777                           fsr2l	equ	0xFD9
 14778                           status	equ	0xFD8
 14779                           
 14780 ;; *************** function _INTERRUPT_InterruptManager *****************
 14781 ;; Defined at:
 14782 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 14783 ;; Parameters:    Size  Location     Type
 14784 ;;		None
 14785 ;; Auto vars:     Size  Location     Type
 14786 ;;		None
 14787 ;; Return value:  Size  Location     Type
 14788 ;;                  1    wreg      void 
 14789 ;; Registers used:
 14790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 14791 ;; Tracked objects:
 14792 ;;		On entry : 0/0
 14793 ;;		On exit  : 0/0
 14794 ;;		Unchanged: 0/0
 14795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14798 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14799 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14800 ;;Total ram usage:       14 bytes
 14801 ;; Hardware stack levels used:    1
 14802 ;; Hardware stack levels required when called:    4
 14803 ;; This function calls:
 14804 ;;		_EUSART1_Receive_ISR
 14805 ;;		_EUSART1_Transmit_ISR
 14806 ;;		_TMR0_ISR
 14807 ;; This function is called by:
 14808 ;;		Interrupt level 2
 14809 ;; This function uses a non-reentrant model
 14810 ;;
 14811                           
 14812                           	psect	intcode
 14813  000008                     __pintcode:
 14814                           	opt stack 0
 14815  000008                     _INTERRUPT_InterruptManager:
 14816                           	opt stack 17
 14817                           
 14818                           ; BSR set to: 0
 14819                           ;incstack = 0
 14820  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14821  00000A  CFFA F002          	movff	pclath,??_INTERRUPT_InterruptManager
 14822  00000E  CFFB F003          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 14823  000012  CFE9 F004          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 14824  000016  CFEA F005          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 14825  00001A  CFE1 F006          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 14826  00001E  CFE2 F007          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 14827  000022  CFD9 F008          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 14828  000026  CFDA F009          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 14829  00002A  CFF3 F00A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 14830  00002E  CFF4 F00B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 14831  000032  CFF6 F00C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 14832  000036  CFF7 F00D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 14833  00003A  CFF8 F00E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 14834  00003E  CFF5 F00F          	movff	tablat,??_INTERRUPT_InterruptManager+13
 14835                           
 14836                           ;interrupt_manager.c: 60: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 14837  000042  BAF2               	btfsc	intcon,5,c	;volatile
 14838  000044  A4F2               	btfss	intcon,2,c	;volatile
 14839  000046  D003               	goto	i2l60
 14840                           
 14841                           ;interrupt_manager.c: 61: {
 14842                           ;interrupt_manager.c: 62: TMR0_ISR();
 14843  000048  ECA6  F01B         	call	_TMR0_ISR	;wreg free
 14844                           
 14845                           ;interrupt_manager.c: 63: }
 14846  00004C  D00E               	goto	i2l66
 14847  00004E                     i2l60:
 14848                           
 14849                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 14850  00004E  BCF2               	btfsc	intcon,6,c	;volatile
 14851  000050  A89D               	btfss	3997,4,c	;volatile
 14852  000052  D005               	goto	i2l62
 14853  000054  A89E               	btfss	3998,4,c	;volatile
 14854  000056  D003               	goto	i2l62
 14855                           
 14856                           ;interrupt_manager.c: 65: {
 14857                           ;interrupt_manager.c: 66: EUSART1_Transmit_ISR();
 14858  000058  EC7C  F01A         	call	_EUSART1_Transmit_ISR	;wreg free
 14859                           
 14860                           ;interrupt_manager.c: 67: }
 14861  00005C  D006               	goto	i2l66
 14862  00005E                     i2l62:
 14863                           
 14864                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 14865  00005E  BCF2               	btfsc	intcon,6,c	;volatile
 14866  000060  AA9D               	btfss	3997,5,c	;volatile
 14867  000062  D003               	goto	i2l66
 14868  000064  BA9E               	btfsc	3998,5,c	;volatile
 14869                           
 14870                           ;interrupt_manager.c: 69: {
 14871                           ;interrupt_manager.c: 70: EUSART1_Receive_ISR();
 14872  000066  ECC2  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 14873  00006A                     i2l66:
 14874  00006A  C00F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 14875  00006E  C00E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 14876  000072  C00D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 14877  000076  C00C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 14878  00007A  C00B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 14879  00007E  C00A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 14880  000082  C009  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 14881  000086  C008  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 14882  00008A  C007  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 14883  00008E  C006  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 14884  000092  C005  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 14885  000096  C004  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 14886  00009A  C003  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 14887  00009E  C002  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 14888  0000A2  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14889  0000A4  0011               	retfie		f
 14890  0000A6                     __end_of_INTERRUPT_InterruptManager:
 14891                           	opt stack 0
 14892                           pclatu	equ	0xFFB
 14893                           pclath	equ	0xFFA
 14894                           tblptru	equ	0xFF8
 14895                           tblptrh	equ	0xFF7
 14896                           tblptrl	equ	0xFF6
 14897                           tablat	equ	0xFF5
 14898                           prodh	equ	0xFF4
 14899                           prodl	equ	0xFF3
 14900                           intcon	equ	0xFF2
 14901                           intcon2	equ	0xFF1
 14902                           indf0	equ	0xFEF
 14903                           postinc0	equ	0xFEE
 14904                           fsr0h	equ	0xFEA
 14905                           fsr0l	equ	0xFE9
 14906                           wreg	equ	0xFE8
 14907                           indf1	equ	0xFE7
 14908                           postdec1	equ	0xFE5
 14909                           fsr1h	equ	0xFE2
 14910                           fsr1l	equ	0xFE1
 14911                           indf2	equ	0xFDF
 14912                           postinc2	equ	0xFDE
 14913                           postdec2	equ	0xFDD
 14914                           fsr2h	equ	0xFDA
 14915                           fsr2l	equ	0xFD9
 14916                           status	equ	0xFD8
 14917                           
 14918 ;; *************** function _TMR0_ISR *****************
 14919 ;; Defined at:
 14920 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 14921 ;; Parameters:    Size  Location     Type
 14922 ;;		None
 14923 ;; Auto vars:     Size  Location     Type
 14924 ;;		None
 14925 ;; Return value:  Size  Location     Type
 14926 ;;                  1    wreg      void 
 14927 ;; Registers used:
 14928 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 14929 ;; Tracked objects:
 14930 ;;		On entry : 0/0
 14931 ;;		On exit  : 0/0
 14932 ;;		Unchanged: 0/0
 14933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14938 ;;Total ram usage:        0 bytes
 14939 ;; Hardware stack levels used:    1
 14940 ;; Hardware stack levels required when called:    3
 14941 ;; This function calls:
 14942 ;;		_TMR0_CallBack
 14943 ;; This function is called by:
 14944 ;;		_INTERRUPT_InterruptManager
 14945 ;; This function uses a non-reentrant model
 14946 ;;
 14947                           
 14948                           	psect	text79
 14949  00374C                     __ptext79:
 14950                           	opt stack 0
 14951  00374C                     _TMR0_ISR:
 14952                           	opt stack 17
 14953                           
 14954                           ;tmr0.c: 138: INTCONbits.TMR0IF = 0;
 14955                           
 14956                           ;incstack = 0
 14957  00374C  94F2               	bcf	intcon,2,c	;volatile
 14958                           
 14959                           ;tmr0.c: 142: TMR0H = timer0ReloadVal >> 8;
 14960  00374E  504F               	movf	_timer0ReloadVal+1,w,c	;volatile
 14961  003750  6ED7               	movwf	4055,c	;volatile
 14962                           
 14963                           ;tmr0.c: 143: TMR0L = (uint8_t) timer0ReloadVal;
 14964  003752  C04E  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 14965                           
 14966                           ;tmr0.c: 147: TMR0_CallBack();
 14967  003756  ECFE  F01A         	call	_TMR0_CallBack	;wreg free
 14968  00375A  0012               	return		;funcret
 14969  00375C                     __end_of_TMR0_ISR:
 14970                           	opt stack 0
 14971                           pclatu	equ	0xFFB
 14972                           pclath	equ	0xFFA
 14973                           tblptru	equ	0xFF8
 14974                           tblptrh	equ	0xFF7
 14975                           tblptrl	equ	0xFF6
 14976                           tablat	equ	0xFF5
 14977                           prodh	equ	0xFF4
 14978                           prodl	equ	0xFF3
 14979                           intcon	equ	0xFF2
 14980                           intcon2	equ	0xFF1
 14981                           indf0	equ	0xFEF
 14982                           postinc0	equ	0xFEE
 14983                           fsr0h	equ	0xFEA
 14984                           fsr0l	equ	0xFE9
 14985                           wreg	equ	0xFE8
 14986                           indf1	equ	0xFE7
 14987                           postdec1	equ	0xFE5
 14988                           fsr1h	equ	0xFE2
 14989                           fsr1l	equ	0xFE1
 14990                           indf2	equ	0xFDF
 14991                           postinc2	equ	0xFDE
 14992                           postdec2	equ	0xFDD
 14993                           fsr2h	equ	0xFDA
 14994                           fsr2l	equ	0xFD9
 14995                           status	equ	0xFD8
 14996                           
 14997 ;; *************** function _TMR0_CallBack *****************
 14998 ;; Defined at:
 14999 ;;		line 152 in file "mcc_generated_files/tmr0.c"
 15000 ;; Parameters:    Size  Location     Type
 15001 ;;		None
 15002 ;; Auto vars:     Size  Location     Type
 15003 ;;		None
 15004 ;; Return value:  Size  Location     Type
 15005 ;;                  1    wreg      void 
 15006 ;; Registers used:
 15007 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 15008 ;; Tracked objects:
 15009 ;;		On entry : 0/0
 15010 ;;		On exit  : 0/0
 15011 ;;		Unchanged: 0/0
 15012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15017 ;;Total ram usage:        0 bytes
 15018 ;; Hardware stack levels used:    1
 15019 ;; Hardware stack levels required when called:    2
 15020 ;; This function calls:
 15021 ;;		Absolute function
 15022 ;;		_TMR0_DefaultInterruptHandler
 15023 ;;		_make_array
 15024 ;; This function is called by:
 15025 ;;		_TMR0_ISR
 15026 ;; This function uses a non-reentrant model
 15027 ;;
 15028                           
 15029                           	psect	text80
 15030  0035FC                     __ptext80:
 15031                           	opt stack 0
 15032  0035FC                     _TMR0_CallBack:
 15033                           	opt stack 17
 15034                           
 15035                           ;tmr0.c: 156: if(TMR0_InterruptHandler)
 15036                           
 15037                           ;incstack = 0
 15038  0035FC  0100               	movlb	0	; () banked
 15039  0035FE  51F9               	movf	_TMR0_InterruptHandler& (0+255),w,b
 15040  003600  0100               	movlb	0	; () banked
 15041  003602  11FA               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 15042  003604  B4D8               	btfsc	status,2,c
 15043  003606  0012               	return	
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;tmr0.c: 157: {
 15047                           ;tmr0.c: 158: TMR0_InterruptHandler();
 15048  003608  D801               	call	i2u416_48
 15049  00360A  0012               	return	
 15050  00360C                     i2u416_48:
 15051  00360C  0005               	push	
 15052  00360E  6EFA               	movwf	pclath,c
 15053  003610  0100               	movlb	0	; () banked
 15054  003612  51F9               	movf	_TMR0_InterruptHandler& (0+255),w,b
 15055  003614  6EFD               	movwf	tosl,c
 15056  003616  51FA               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 15057  003618  6EFE               	movwf	tosh,c
 15058  00361A  6AFF               	clrf	tosu,c
 15059  00361C  50FA               	movf	pclath,w,c
 15060  00361E  0012               	return		;indir
 15061  003620                     __end_of_TMR0_CallBack:
 15062                           	opt stack 0
 15063                           tosu	equ	0xFFF
 15064                           tosh	equ	0xFFE
 15065                           tosl	equ	0xFFD
 15066                           pclatu	equ	0xFFB
 15067                           pclath	equ	0xFFA
 15068                           tblptru	equ	0xFF8
 15069                           tblptrh	equ	0xFF7
 15070                           tblptrl	equ	0xFF6
 15071                           tablat	equ	0xFF5
 15072                           prodh	equ	0xFF4
 15073                           prodl	equ	0xFF3
 15074                           intcon	equ	0xFF2
 15075                           intcon2	equ	0xFF1
 15076                           indf0	equ	0xFEF
 15077                           postinc0	equ	0xFEE
 15078                           fsr0h	equ	0xFEA
 15079                           fsr0l	equ	0xFE9
 15080                           wreg	equ	0xFE8
 15081                           indf1	equ	0xFE7
 15082                           postdec1	equ	0xFE5
 15083                           fsr1h	equ	0xFE2
 15084                           fsr1l	equ	0xFE1
 15085                           indf2	equ	0xFDF
 15086                           postinc2	equ	0xFDE
 15087                           postdec2	equ	0xFDD
 15088                           fsr2h	equ	0xFDA
 15089                           fsr2l	equ	0xFD9
 15090                           status	equ	0xFD8
 15091                           
 15092 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 15093 ;; Defined at:
 15094 ;;		line 166 in file "mcc_generated_files/tmr0.c"
 15095 ;; Parameters:    Size  Location     Type
 15096 ;;		None
 15097 ;; Auto vars:     Size  Location     Type
 15098 ;;		None
 15099 ;; Return value:  Size  Location     Type
 15100 ;;                  1    wreg      void 
 15101 ;; Registers used:
 15102 ;;		None
 15103 ;; Tracked objects:
 15104 ;;		On entry : 0/0
 15105 ;;		On exit  : 0/0
 15106 ;;		Unchanged: 0/0
 15107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15112 ;;Total ram usage:        0 bytes
 15113 ;; Hardware stack levels used:    1
 15114 ;; This function calls:
 15115 ;;		Nothing
 15116 ;; This function is called by:
 15117 ;;		_TMR0_Initialize
 15118 ;;		_TMR0_CallBack
 15119 ;; This function uses a non-reentrant model
 15120 ;;
 15121                           
 15122                           	psect	text81
 15123  003838                     __ptext81:
 15124                           	opt stack 0
 15125  003838                     _TMR0_DefaultInterruptHandler:
 15126                           	opt stack 18
 15127                           
 15128                           ;incstack = 0
 15129  003838  0012               	return		;funcret
 15130  00383A                     __end_of_TMR0_DefaultInterruptHandler:
 15131                           	opt stack 0
 15132                           tosu	equ	0xFFF
 15133                           tosh	equ	0xFFE
 15134                           tosl	equ	0xFFD
 15135                           pclatu	equ	0xFFB
 15136                           pclath	equ	0xFFA
 15137                           tblptru	equ	0xFF8
 15138                           tblptrh	equ	0xFF7
 15139                           tblptrl	equ	0xFF6
 15140                           tablat	equ	0xFF5
 15141                           prodh	equ	0xFF4
 15142                           prodl	equ	0xFF3
 15143                           intcon	equ	0xFF2
 15144                           intcon2	equ	0xFF1
 15145                           indf0	equ	0xFEF
 15146                           postinc0	equ	0xFEE
 15147                           fsr0h	equ	0xFEA
 15148                           fsr0l	equ	0xFE9
 15149                           wreg	equ	0xFE8
 15150                           indf1	equ	0xFE7
 15151                           postdec1	equ	0xFE5
 15152                           fsr1h	equ	0xFE2
 15153                           fsr1l	equ	0xFE1
 15154                           indf2	equ	0xFDF
 15155                           postinc2	equ	0xFDE
 15156                           postdec2	equ	0xFDD
 15157                           fsr2h	equ	0xFDA
 15158                           fsr2l	equ	0xFD9
 15159                           status	equ	0xFD8
 15160                           
 15161 ;; *************** function _make_array *****************
 15162 ;; Defined at:
 15163 ;;		line 59 in file "main.c"
 15164 ;; Parameters:    Size  Location     Type
 15165 ;;		None
 15166 ;; Auto vars:     Size  Location     Type
 15167 ;;		None
 15168 ;; Return value:  Size  Location     Type
 15169 ;;                  1    wreg      void 
 15170 ;; Registers used:
 15171 ;;		wreg, status,2, status,0, cstack
 15172 ;; Tracked objects:
 15173 ;;		On entry : 0/0
 15174 ;;		On exit  : 0/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;Total ram usage:        0 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:    1
 15184 ;; This function calls:
 15185 ;;		_heart_beat
 15186 ;; This function is called by:
 15187 ;;		_main
 15188 ;;		_TMR0_CallBack
 15189 ;; This function uses a non-reentrant model
 15190 ;;
 15191                           
 15192                           	psect	text82
 15193  0037D6                     __ptext82:
 15194                           	opt stack 0
 15195  0037D6                     _make_array:
 15196                           	opt stack 17
 15197                           
 15198                           ;main.c: 61: static char i=0;
 15199                           ;main.c: 62: heart_beat();
 15200                           
 15201                           ;incstack = 0
 15202  0037D6  EC5E  F01B         	call	_heart_beat	;wreg free
 15203                           
 15204                           ;main.c: 65: display = 1;
 15205  0037DA  0E01               	movlw	1
 15206  0037DC  0100               	movlb	0	; () banked
 15207  0037DE  6F84               	movwf	_display& (0+255),b
 15208                           
 15209                           ; BSR set to: 0
 15210  0037E0  0012               	return		;funcret
 15211  0037E2                     __end_of_make_array:
 15212                           	opt stack 0
 15213                           tosu	equ	0xFFF
 15214                           tosh	equ	0xFFE
 15215                           tosl	equ	0xFFD
 15216                           pclatu	equ	0xFFB
 15217                           pclath	equ	0xFFA
 15218                           tblptru	equ	0xFF8
 15219                           tblptrh	equ	0xFF7
 15220                           tblptrl	equ	0xFF6
 15221                           tablat	equ	0xFF5
 15222                           prodh	equ	0xFF4
 15223                           prodl	equ	0xFF3
 15224                           intcon	equ	0xFF2
 15225                           intcon2	equ	0xFF1
 15226                           indf0	equ	0xFEF
 15227                           postinc0	equ	0xFEE
 15228                           fsr0h	equ	0xFEA
 15229                           fsr0l	equ	0xFE9
 15230                           wreg	equ	0xFE8
 15231                           indf1	equ	0xFE7
 15232                           postdec1	equ	0xFE5
 15233                           fsr1h	equ	0xFE2
 15234                           fsr1l	equ	0xFE1
 15235                           indf2	equ	0xFDF
 15236                           postinc2	equ	0xFDE
 15237                           postdec2	equ	0xFDD
 15238                           fsr2h	equ	0xFDA
 15239                           fsr2l	equ	0xFD9
 15240                           status	equ	0xFD8
 15241                           
 15242 ;; *************** function _heart_beat *****************
 15243 ;; Defined at:
 15244 ;;		line 54 in file "main.c"
 15245 ;; Parameters:    Size  Location     Type
 15246 ;;		None
 15247 ;; Auto vars:     Size  Location     Type
 15248 ;;		None
 15249 ;; Return value:  Size  Location     Type
 15250 ;;                  1    wreg      void 
 15251 ;; Registers used:
 15252 ;;		wreg, status,2, status,0
 15253 ;; Tracked objects:
 15254 ;;		On entry : 0/0
 15255 ;;		On exit  : 0/0
 15256 ;;		Unchanged: 0/0
 15257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15260 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15261 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;Total ram usage:        1 bytes
 15263 ;; Hardware stack levels used:    1
 15264 ;; This function calls:
 15265 ;;		Nothing
 15266 ;; This function is called by:
 15267 ;;		_make_array
 15268 ;; This function uses a non-reentrant model
 15269 ;;
 15270                           
 15271                           	psect	text83
 15272  0036BC                     __ptext83:
 15273                           	opt stack 0
 15274  0036BC                     _heart_beat:
 15275                           	opt stack 17
 15276                           
 15277                           ; BSR set to: 0
 15278                           ;incstack = 0
 15279                           ;main.c: 56: do { LATEbits.LATE2 = ~LATEbits.LATE2; } while(0);
 15280  0036BC  A48D               	btfss	3981,2,c	;volatile
 15281  0036BE  D002               	goto	i2u352_40
 15282  0036C0  0E01               	movlw	1
 15283  0036C2  D001               	goto	i2u352_46
 15284  0036C4                     i2u352_40:
 15285  0036C4  0E00               	movlw	0
 15286  0036C6                     i2u352_46:
 15287  0036C6  0AFF               	xorlw	255
 15288  0036C8  6E01               	movwf	??_heart_beat& (0+255),c
 15289  0036CA  4601               	rlncf	??_heart_beat,f,c
 15290  0036CC  4601               	rlncf	??_heart_beat,f,c
 15291  0036CE  508D               	movf	3981,w,c	;volatile
 15292  0036D0  1801               	xorwf	??_heart_beat,w,c
 15293  0036D2  0BFB               	andlw	-5
 15294  0036D4  1801               	xorwf	??_heart_beat,w,c
 15295  0036D6  6E8D               	movwf	3981,c	;volatile
 15296  0036D8  0012               	return	
 15297  0036DA                     __end_of_heart_beat:
 15298                           	opt stack 0
 15299                           tosu	equ	0xFFF
 15300                           tosh	equ	0xFFE
 15301                           tosl	equ	0xFFD
 15302                           pclatu	equ	0xFFB
 15303                           pclath	equ	0xFFA
 15304                           tblptru	equ	0xFF8
 15305                           tblptrh	equ	0xFF7
 15306                           tblptrl	equ	0xFF6
 15307                           tablat	equ	0xFF5
 15308                           prodh	equ	0xFF4
 15309                           prodl	equ	0xFF3
 15310                           intcon	equ	0xFF2
 15311                           intcon2	equ	0xFF1
 15312                           indf0	equ	0xFEF
 15313                           postinc0	equ	0xFEE
 15314                           fsr0h	equ	0xFEA
 15315                           fsr0l	equ	0xFE9
 15316                           wreg	equ	0xFE8
 15317                           indf1	equ	0xFE7
 15318                           postdec1	equ	0xFE5
 15319                           fsr1h	equ	0xFE2
 15320                           fsr1l	equ	0xFE1
 15321                           indf2	equ	0xFDF
 15322                           postinc2	equ	0xFDE
 15323                           postdec2	equ	0xFDD
 15324                           fsr2h	equ	0xFDA
 15325                           fsr2l	equ	0xFD9
 15326                           status	equ	0xFD8
 15327                           
 15328 ;; *************** function _EUSART1_Transmit_ISR *****************
 15329 ;; Defined at:
 15330 ;;		line 165 in file "mcc_generated_files/eusart1.c"
 15331 ;; Parameters:    Size  Location     Type
 15332 ;;		None
 15333 ;; Auto vars:     Size  Location     Type
 15334 ;;		None
 15335 ;; Return value:  Size  Location     Type
 15336 ;;                  1    wreg      void 
 15337 ;; Registers used:
 15338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15339 ;; Tracked objects:
 15340 ;;		On entry : 0/0
 15341 ;;		On exit  : 0/0
 15342 ;;		Unchanged: 0/0
 15343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15348 ;;Total ram usage:        0 bytes
 15349 ;; Hardware stack levels used:    1
 15350 ;; This function calls:
 15351 ;;		Nothing
 15352 ;; This function is called by:
 15353 ;;		_INTERRUPT_InterruptManager
 15354 ;; This function uses a non-reentrant model
 15355 ;;
 15356                           
 15357                           	psect	text84
 15358  0034F8                     __ptext84:
 15359                           	opt stack 0
 15360  0034F8                     _EUSART1_Transmit_ISR:
 15361                           	opt stack 20
 15362                           
 15363                           ;eusart1.c: 169: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 15364                           
 15365                           ;incstack = 0
 15366  0034F8  0E08               	movlw	8
 15367  0034FA  0100               	movlb	0	; () banked
 15368  0034FC  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15369  0034FE  D013               	goto	i2l205
 15370                           
 15371                           ; BSR set to: 0
 15372                           ;eusart1.c: 170: {
 15373                           ;eusart1.c: 171: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 15374  003500  5047               	movf	_eusart1TxTail,w,c	;volatile
 15375  003502  0D01               	mullw	1
 15376  003504  0E68               	movlw	low _eusart1TxBuffer
 15377  003506  24F3               	addwf	prodl,w,c
 15378  003508  6ED9               	movwf	fsr2l,c
 15379  00350A  0E00               	movlw	high _eusart1TxBuffer
 15380  00350C  20F4               	addwfc	prodh,w,c
 15381  00350E  6EDA               	movwf	fsr2h,c
 15382  003510  50DF               	movf	indf2,w,c
 15383  003512  6EAD               	movwf	4013,c	;volatile
 15384                           
 15385                           ; BSR set to: 0
 15386  003514  2A47               	incf	_eusart1TxTail,f,c	;volatile
 15387                           
 15388                           ; BSR set to: 0
 15389                           ;eusart1.c: 172: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 15390  003516  0E07               	movlw	7
 15391  003518  6447               	cpfsgt	_eusart1TxTail,c	;volatile
 15392  00351A  D002               	goto	i2l5309
 15393                           
 15394                           ; BSR set to: 0
 15395                           ;eusart1.c: 173: {
 15396                           ;eusart1.c: 174: eusart1TxTail = 0;
 15397  00351C  0E00               	movlw	0
 15398  00351E  6E47               	movwf	_eusart1TxTail,c	;volatile
 15399  003520                     i2l5309:
 15400                           
 15401                           ; BSR set to: 0
 15402                           ;eusart1.c: 175: }
 15403                           ;eusart1.c: 176: eusart1TxBufferRemaining++;
 15404  003520  0100               	movlb	0	; () banked
 15405  003522  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 15406                           
 15407                           ;eusart1.c: 177: }
 15408  003524  0012               	return	
 15409  003526                     i2l205:
 15410                           
 15411                           ; BSR set to: 0
 15412                           ;eusart1.c: 178: else
 15413                           ;eusart1.c: 179: {
 15414                           ;eusart1.c: 180: PIE1bits.TX1IE = 0;
 15415  003526  989D               	bcf	3997,4,c	;volatile
 15416  003528  0012               	return	
 15417  00352A                     __end_of_EUSART1_Transmit_ISR:
 15418                           	opt stack 0
 15419                           tosu	equ	0xFFF
 15420                           tosh	equ	0xFFE
 15421                           tosl	equ	0xFFD
 15422                           pclatu	equ	0xFFB
 15423                           pclath	equ	0xFFA
 15424                           tblptru	equ	0xFF8
 15425                           tblptrh	equ	0xFF7
 15426                           tblptrl	equ	0xFF6
 15427                           tablat	equ	0xFF5
 15428                           prodh	equ	0xFF4
 15429                           prodl	equ	0xFF3
 15430                           intcon	equ	0xFF2
 15431                           intcon2	equ	0xFF1
 15432                           indf0	equ	0xFEF
 15433                           postinc0	equ	0xFEE
 15434                           fsr0h	equ	0xFEA
 15435                           fsr0l	equ	0xFE9
 15436                           wreg	equ	0xFE8
 15437                           indf1	equ	0xFE7
 15438                           postdec1	equ	0xFE5
 15439                           fsr1h	equ	0xFE2
 15440                           fsr1l	equ	0xFE1
 15441                           indf2	equ	0xFDF
 15442                           postinc2	equ	0xFDE
 15443                           postdec2	equ	0xFDD
 15444                           fsr2h	equ	0xFDA
 15445                           fsr2l	equ	0xFD9
 15446                           status	equ	0xFD8
 15447                           
 15448 ;; *************** function _EUSART1_Receive_ISR *****************
 15449 ;; Defined at:
 15450 ;;		line 184 in file "mcc_generated_files/eusart1.c"
 15451 ;; Parameters:    Size  Location     Type
 15452 ;;		None
 15453 ;; Auto vars:     Size  Location     Type
 15454 ;;		None
 15455 ;; Return value:  Size  Location     Type
 15456 ;;                  1    wreg      void 
 15457 ;; Registers used:
 15458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15459 ;; Tracked objects:
 15460 ;;		On entry : 0/0
 15461 ;;		On exit  : 0/0
 15462 ;;		Unchanged: 0/0
 15463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15468 ;;Total ram usage:        0 bytes
 15469 ;; Hardware stack levels used:    1
 15470 ;; This function calls:
 15471 ;;		Nothing
 15472 ;; This function is called by:
 15473 ;;		_INTERRUPT_InterruptManager
 15474 ;; This function uses a non-reentrant model
 15475 ;;
 15476                           
 15477                           	psect	text85
 15478  003584                     __ptext85:
 15479                           	opt stack 0
 15480  003584                     _EUSART1_Receive_ISR:
 15481                           	opt stack 20
 15482                           
 15483                           ;eusart1.c: 187: if(1 == RCSTA1bits.OERR)
 15484                           
 15485                           ; BSR set to: 0
 15486                           ;incstack = 0
 15487  003584  A2AB               	btfss	4011,1,c	;volatile
 15488  003586  D002               	goto	i2l5315
 15489                           
 15490                           ;eusart1.c: 188: {
 15491                           ;eusart1.c: 191: RCSTA1bits.CREN = 0;
 15492  003588  98AB               	bcf	4011,4,c	;volatile
 15493                           
 15494                           ;eusart1.c: 192: RCSTA1bits.CREN = 1;
 15495  00358A  88AB               	bsf	4011,4,c	;volatile
 15496  00358C                     i2l5315:
 15497                           
 15498                           ;eusart1.c: 193: }
 15499                           ;eusart1.c: 196: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15500  00358C  5044               	movf	_eusart1RxHead,w,c	;volatile
 15501  00358E  0D01               	mullw	1
 15502  003590  0E60               	movlw	low _eusart1RxBuffer
 15503  003592  24F3               	addwf	prodl,w,c
 15504  003594  6ED9               	movwf	fsr2l,c
 15505  003596  0E00               	movlw	high _eusart1RxBuffer
 15506  003598  20F4               	addwfc	prodh,w,c
 15507  00359A  6EDA               	movwf	fsr2h,c
 15508  00359C  CFAE FFDF          	movff	4014,indf2	;volatile
 15509  0035A0  2A44               	incf	_eusart1RxHead,f,c	;volatile
 15510                           
 15511                           ;eusart1.c: 197: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 15512  0035A2  0E07               	movlw	7
 15513  0035A4  6444               	cpfsgt	_eusart1RxHead,c	;volatile
 15514  0035A6  D002               	goto	i2l5323
 15515                           
 15516                           ;eusart1.c: 198: {
 15517                           ;eusart1.c: 199: eusart1RxHead = 0;
 15518  0035A8  0E00               	movlw	0
 15519  0035AA  6E44               	movwf	_eusart1RxHead,c	;volatile
 15520  0035AC                     i2l5323:
 15521                           
 15522                           ;eusart1.c: 200: }
 15523                           ;eusart1.c: 201: eusart1RxCount++;
 15524  0035AC  2A43               	incf	_eusart1RxCount,f,c	;volatile
 15525  0035AE  0012               	return		;funcret
 15526  0035B0                     __end_of_EUSART1_Receive_ISR:
 15527                           	opt stack 0
 15528                           tosu	equ	0xFFF
 15529                           tosh	equ	0xFFE
 15530                           tosl	equ	0xFFD
 15531                           pclatu	equ	0xFFB
 15532                           pclath	equ	0xFFA
 15533                           tblptru	equ	0xFF8
 15534                           tblptrh	equ	0xFF7
 15535                           tblptrl	equ	0xFF6
 15536                           tablat	equ	0xFF5
 15537                           prodh	equ	0xFF4
 15538                           prodl	equ	0xFF3
 15539                           intcon	equ	0xFF2
 15540                           intcon2	equ	0xFF1
 15541                           indf0	equ	0xFEF
 15542                           postinc0	equ	0xFEE
 15543                           fsr0h	equ	0xFEA
 15544                           fsr0l	equ	0xFE9
 15545                           wreg	equ	0xFE8
 15546                           indf1	equ	0xFE7
 15547                           postdec1	equ	0xFE5
 15548                           fsr1h	equ	0xFE2
 15549                           fsr1l	equ	0xFE1
 15550                           indf2	equ	0xFDF
 15551                           postinc2	equ	0xFDE
 15552                           postdec2	equ	0xFDD
 15553                           fsr2h	equ	0xFDA
 15554                           fsr2l	equ	0xFD9
 15555                           status	equ	0xFD8
 15556                           tosu	equ	0xFFF
 15557                           tosh	equ	0xFFE
 15558                           tosl	equ	0xFFD
 15559                           pclatu	equ	0xFFB
 15560                           pclath	equ	0xFFA
 15561                           tblptru	equ	0xFF8
 15562                           tblptrh	equ	0xFF7
 15563                           tblptrl	equ	0xFF6
 15564                           tablat	equ	0xFF5
 15565                           prodh	equ	0xFF4
 15566                           prodl	equ	0xFF3
 15567                           intcon	equ	0xFF2
 15568                           intcon2	equ	0xFF1
 15569                           indf0	equ	0xFEF
 15570                           postinc0	equ	0xFEE
 15571                           fsr0h	equ	0xFEA
 15572                           fsr0l	equ	0xFE9
 15573                           wreg	equ	0xFE8
 15574                           indf1	equ	0xFE7
 15575                           postdec1	equ	0xFE5
 15576                           fsr1h	equ	0xFE2
 15577                           fsr1l	equ	0xFE1
 15578                           indf2	equ	0xFDF
 15579                           postinc2	equ	0xFDE
 15580                           postdec2	equ	0xFDD
 15581                           fsr2h	equ	0xFDA
 15582                           fsr2l	equ	0xFD9
 15583                           status	equ	0xFD8
 15584                           
 15585                           	psect	text86
 15586  000000                     __ptext86:
 15587                           	opt stack 0
 15588                           tosu	equ	0xFFF
 15589                           tosh	equ	0xFFE
 15590                           tosl	equ	0xFFD
 15591                           pclatu	equ	0xFFB
 15592                           pclath	equ	0xFFA
 15593                           tblptru	equ	0xFF8
 15594                           tblptrh	equ	0xFF7
 15595                           tblptrl	equ	0xFF6
 15596                           tablat	equ	0xFF5
 15597                           prodh	equ	0xFF4
 15598                           prodl	equ	0xFF3
 15599                           intcon	equ	0xFF2
 15600                           intcon2	equ	0xFF1
 15601                           indf0	equ	0xFEF
 15602                           postinc0	equ	0xFEE
 15603                           fsr0h	equ	0xFEA
 15604                           fsr0l	equ	0xFE9
 15605                           wreg	equ	0xFE8
 15606                           indf1	equ	0xFE7
 15607                           postdec1	equ	0xFE5
 15608                           fsr1h	equ	0xFE2
 15609                           fsr1l	equ	0xFE1
 15610                           indf2	equ	0xFDF
 15611                           postinc2	equ	0xFDE
 15612                           postdec2	equ	0xFDD
 15613                           fsr2h	equ	0xFDA
 15614                           fsr2l	equ	0xFD9
 15615                           status	equ	0xFD8
 15616                           
 15617                           	psect	rparam
 15618  0000                     tosu	equ	0xFFF
 15619                           tosh	equ	0xFFE
 15620                           tosl	equ	0xFFD
 15621                           pclatu	equ	0xFFB
 15622                           pclath	equ	0xFFA
 15623                           tblptru	equ	0xFF8
 15624                           tblptrh	equ	0xFF7
 15625                           tblptrl	equ	0xFF6
 15626                           tablat	equ	0xFF5
 15627                           prodh	equ	0xFF4
 15628                           prodl	equ	0xFF3
 15629                           intcon	equ	0xFF2
 15630                           intcon2	equ	0xFF1
 15631                           indf0	equ	0xFEF
 15632                           postinc0	equ	0xFEE
 15633                           fsr0h	equ	0xFEA
 15634                           fsr0l	equ	0xFE9
 15635                           wreg	equ	0xFE8
 15636                           indf1	equ	0xFE7
 15637                           postdec1	equ	0xFE5
 15638                           fsr1h	equ	0xFE2
 15639                           fsr1l	equ	0xFE1
 15640                           indf2	equ	0xFDF
 15641                           postinc2	equ	0xFDE
 15642                           postdec2	equ	0xFDD
 15643                           fsr2h	equ	0xFDA
 15644                           fsr2l	equ	0xFD9
 15645                           status	equ	0xFD8
 15646                           
 15647                           	psect	temp
 15648  000050                     btemp:
 15649                           	opt stack 0
 15650  000050                     	ds	1
 15651  0000                     int$flags	set	btemp
 15652                           tosu	equ	0xFFF
 15653                           tosh	equ	0xFFE
 15654                           tosl	equ	0xFFD
 15655                           pclatu	equ	0xFFB
 15656                           pclath	equ	0xFFA
 15657                           tblptru	equ	0xFF8
 15658                           tblptrh	equ	0xFF7
 15659                           tblptrl	equ	0xFF6
 15660                           tablat	equ	0xFF5
 15661                           prodh	equ	0xFF4
 15662                           prodl	equ	0xFF3
 15663                           intcon	equ	0xFF2
 15664                           intcon2	equ	0xFF1
 15665                           indf0	equ	0xFEF
 15666                           postinc0	equ	0xFEE
 15667                           fsr0h	equ	0xFEA
 15668                           fsr0l	equ	0xFE9
 15669                           wreg	equ	0xFE8
 15670                           indf1	equ	0xFE7
 15671                           postdec1	equ	0xFE5
 15672                           fsr1h	equ	0xFE2
 15673                           fsr1l	equ	0xFE1
 15674                           indf2	equ	0xFDF
 15675                           postinc2	equ	0xFDE
 15676                           postdec2	equ	0xFDD
 15677                           fsr2h	equ	0xFDA
 15678                           fsr2l	equ	0xFD9
 15679                           status	equ	0xFD8


Data Sizes:
    Strings     816
    Constant    10
    Data        13
    BSS         1485
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      79
    BANK0           160     18     160
    BANK1           256     15     135
    BANK2           256      0     150
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), STR_44(CODE[2]), 
		 -> STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), STR_27(CODE[7]), 
		 -> STR_25(CODE[7]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_72(CODE[4]), STR_69(CODE[9]), STR_68(CODE[11]), STR_55(CODE[11]), 
		 -> STR_46(CODE[12]), STR_38(CODE[10]), STR_36(CODE[10]), STR_31(CODE[9]), 
		 -> STR_28(CODE[10]), STR_26(CODE[8]), STR_24(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), STR_44(CODE[2]), 
		 -> STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), STR_27(CODE[7]), 
		 -> STR_25(CODE[7]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    cputs@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_119(CODE[12]), STR_118(CODE[12]), STR_74(CODE[5]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), STR_44(CODE[2]), 
		 -> STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), STR_27(CODE[7]), 
		 -> STR_25(CODE[7]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_72(CODE[4]), STR_69(CODE[9]), STR_68(CODE[11]), STR_55(CODE[11]), 
		 -> STR_46(CODE[12]), STR_38(CODE[10]), STR_36(CODE[10]), STR_31(CODE[9]), 
		 -> STR_28(CODE[10]), STR_26(CODE[8]), STR_24(CODE[8]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    strncpy@from	PTR const unsigned char  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), clcd_display_string_details(BIGRAM[1080]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_72(CODE[4]), STR_71(CODE[7]), STR_70(CODE[7]), 
		 -> STR_69(CODE[9]), STR_68(CODE[11]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_55(CODE[11]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_46(CODE[12]), STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_38(CODE[10]), STR_37(CODE[7]), STR_36(CODE[10]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_31(CODE[9]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_28(CODE[10]), STR_27(CODE[7]), STR_26(CODE[8]), 
		 -> STR_25(CODE[7]), STR_24(CODE[8]), NULL(NULL[0]), clcd_display_string_details.string(BIGRAM[40]), 
		 -> clcd_display_string_details(BIGRAM[1080]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_72(CODE[4]), STR_71(CODE[7]), STR_70(CODE[7]), 
		 -> STR_69(CODE[9]), STR_68(CODE[11]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_55(CODE[11]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_46(CODE[12]), STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), 
		 -> STR_38(CODE[10]), STR_37(CODE[7]), STR_36(CODE[10]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_31(CODE[9]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_28(CODE[10]), STR_27(CODE[7]), STR_26(CODE[8]), 
		 -> STR_25(CODE[7]), STR_24(CODE[8]), NULL(NULL[0]), clcd_display_string_details.string(BIGRAM[40]), 
		 -> clcd_display_string_details(BIGRAM[1080]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 
		 -> cmd_data.data(BANK0[40]), cmd_data(BANK0[49]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[49]), clcd_display_string_details(BIGRAM[1080]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[49]), clcd_display_string_details(BIGRAM[1080]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_104(CODE[11]), STR_101(CODE[11]), STR_98(CODE[12]), STR_95(CODE[10]), 
		 -> STR_90(CODE[10]), STR_87(CODE[9]), STR_83(CODE[8]), STR_79(CODE[8]), 
		 -> STR_75(CODE[10]), STR_73(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 15
		 -> CMD(BANK0[15]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_119(CODE[12]), STR_118(CODE[12]), STR_74(CODE[5]), 

    memset@p1	PTR void  size(2) Largest target is 1080
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), cmd_data(BANK0[49]), 
		 -> conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    memset@p	PTR unsigned char  size(2) Largest target is 1080
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), cmd_data(BANK0[49]), 
		 -> conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1080]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 1080
		 -> clcd_display_string_details.string(BIGRAM[40]), str(BANK0[13]), clcd_display_string_details(BIGRAM[1080]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_122(CODE[18]), STR_120(CODE[5]), STR_117(CODE[3]), STR_116(CODE[3]), 
		 -> STR_115(CODE[3]), STR_113(CODE[7]), STR_111(CODE[7]), STR_109(CODE[7]), 
		 -> STR_107(CODE[13]), STR_105(CODE[5]), STR_102(CODE[13]), STR_99(CODE[13]), 
		 -> STR_96(CODE[13]), STR_93(CODE[13]), STR_92(CODE[5]), STR_91(CODE[11]), 
		 -> STR_88(CODE[13]), STR_85(CODE[13]), STR_84(CODE[5]), STR_81(CODE[13]), 
		 -> STR_80(CODE[5]), STR_77(CODE[13]), STR_76(CODE[5]), STR_67(CODE[25]), 
		 -> STR_66(CODE[11]), STR_64(CODE[25]), STR_62(CODE[27]), STR_60(CODE[27]), 
		 -> STR_58(CODE[12]), STR_54(CODE[14]), STR_53(CODE[9]), STR_51(CODE[11]), 
		 -> STR_50(CODE[9]), STR_47(CODE[9]), STR_45(CODE[11]), STR_43(CODE[11]), 
		 -> STR_42(CODE[12]), STR_40(CODE[12]), STR_34(CODE[7]), STR_30(CODE[8]), 
		 -> STR_23(CODE[8]), STR_22(CODE[11]), STR_21(CODE[15]), STR_20(CODE[22]), 
		 -> STR_19(CODE[15]), STR_18(CODE[32]), STR_17(CODE[14]), STR_16(CODE[11]), 
		 -> STR_15(CODE[16]), STR_14(CODE[16]), STR_13(CODE[19]), STR_12(CODE[3]), 
		 -> STR_11(CODE[5]), STR_10(CODE[16]), STR_9(CODE[39]), STR_8(CODE[26]), 
		 -> STR_7(CODE[26]), STR_6(CODE[26]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[9]), STR_1(CODE[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 3895
		 -> STR_123(CODE[7]), STR_121(CODE[6]), uart_str(BANK2[150]), STR_114(CODE[15]), 
		 -> STR_112(CODE[12]), STR_110(CODE[12]), STR_108(CODE[11]), STR_106(CODE[6]), 
		 -> STR_103(CODE[11]), STR_100(CODE[12]), STR_97(CODE[10]), STR_94(CODE[10]), 
		 -> STR_89(CODE[9]), STR_86(CODE[8]), STR_82(CODE[8]), STR_78(CODE[10]), 
		 -> STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), STR_63(CODE[7]), 
		 -> STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), STR_56(CODE[7]), 
		 -> STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), STR_44(CODE[2]), 
		 -> STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), STR_35(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), RAM(DATA[3895]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), STR_5(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), NULL(NULL[0]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    parse_cmd_str@temp	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    parse_cmd_str@ptr	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    parse_cmd_str@str	PTR unsigned char  size(2) Largest target is 150
		 -> uart_str(BANK2[150]), 

    collect_column@data_column	PTR unsigned char  size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    collect_column@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    sp__get_str	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    collect_row@data_row	PTR unsigned char  size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    collect_row@str	PTR unsigned char  size(2) Largest target is 3895
		 -> uart_str(BANK2[150]), STR_71(CODE[7]), STR_70(CODE[7]), STR_65(CODE[7]), 
		 -> STR_63(CODE[7]), STR_61(CODE[7]), STR_59(CODE[7]), STR_57(CODE[7]), 
		 -> STR_56(CODE[7]), STR_52(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_44(CODE[2]), STR_41(CODE[7]), STR_39(CODE[7]), STR_37(CODE[7]), 
		 -> STR_35(CODE[7]), STR_33(CODE[7]), STR_32(CODE[7]), STR_29(CODE[7]), 
		 -> RAM(DATA[3895]), STR_27(CODE[7]), STR_25(CODE[7]), NULL(NULL[0]), 

    scroll_off@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    scroll_right_to_left@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    scroll_left_to_right@clcd_display_string_details	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    write_str@str	PTR const unsigned char  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> lcd_display_array(BANK1[80]), 

    update_string_data@data	PTR struct . size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 1080
		 -> CMD(BANK0[15]), cmd_data(BANK0[49]), clcd_display_string_details(BIGRAM[1080]), 

    copy_data@data	PTR struct . size(2) Largest target is 49
		 -> cmd_data(BANK0[49]), 

    copy_data@clcd_str_data	PTR struct . size(2) Largest target is 1080
		 -> clcd_display_string_details(BIGRAM[1080]), 

    sp__max_display_support	PTR unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), 

    sp__memset	PTR void  size(2) Largest target is 1080
		 -> uart_str(BANK2[150]), str_data(BANK1[40]), CMD(BANK0[15]), cmd_data(BANK0[49]), 
		 -> conflict_arr(BANK0[20]), clcd_display_string_details(BIGRAM[1080]), lcd_display_array(BANK1[80]), clcd_config_data(COMRAM[5]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> make_array(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> make_array(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_make_display
    _console_init->_memset
    _clear_cmd_data->_memset
    _update_string_data->_make_display
    _make_display->_scroll_right_to_left
    _scroll_right_to_left->_memset
    _scroll_off->_strlen
    _scroll_left_to_right->_memset
    _display_text->_write_str
    _set_cursor->_write_lcd_cmd
    _char_enter_mode_left_to_right->_write_lcd_cmd
    _copy_data->_printf
    _conflict_check->_printf
    _puts->_cputs
    _cputs->_putch
    _init_clcd_cusotom_lcd->_printf
    _write_lcd_cmd->_delay
    _clear_display_array->_memset
    _clear_display_structure->_memset
    _clcd_display_string_config->_printf
    _write_str->_write_lcd_data
    _write_lcd_data->_delay
    _parse_cmd_str->_collect_column
    _parse_cmd_str->_collect_row
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _strstr->_strncmp
    _strncmp->_strlen
    _memset->_strlen
    _collect_row->_printf
    _collect_column->_printf
    _strlen->___wmul
    _printf->_strlen
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    ___wmul->___awdiv
    _getch->_EUSART1_Read
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _make_array->_heart_beat

Critical Paths under _main in BANK0

    _main->_cmd_consol_task
    _cmd_consol_task->_reply_to_host
    _reply_to_host->_update_string_data

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_cmd_consol_task
    _cmd_consol_task->_parse_cmd_str

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  265912
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                     _TMR1_StopTimer
                     _TMR5_StopTimer
                          __delay_MS
                    _cmd_consol_task
                       _console_init
                       _make_display
                             _printf
 ---------------------------------------------------------------------------------
 (1) _console_init                                         0     0      0   14134
                     _clear_cmd_data
                             _memset
 ---------------------------------------------------------------------------------
 (2) _clear_cmd_data                                       0     0      0    7067
                             _memset
 ---------------------------------------------------------------------------------
 (1) _cmd_consol_task                                      5     5      0  213780
                                             14 BANK0      4     4      0
                                             14 BANK1      1     1      0
                              _getch
                             _memset
                      _parse_cmd_str
                             _printf
                               _puts
                      _reply_to_host
 ---------------------------------------------------------------------------------
 (2) _reply_to_host                                        4     4      0  143627
                                             10 BANK0      4     4      0
                       _clcd_max_col
                       _clcd_max_row
              _init_clcd_cusotom_lcd
                    _max_display_str
                _max_display_support
                      _max_uid_range
                      _min_uid_range
                             _printf
                               _puts
                             _strcmp
                 _update_string_data
 ---------------------------------------------------------------------------------
 (3) _update_string_data                                  10     8      2   71526
                                              0 BANK0     10     8      2
                             ___wmul
                     _conflict_check
                          _copy_data
                       _make_display
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (1) _make_display                                         5     5      0   30596
                                             59 COMRAM     5     5      0
                             ___wmul
                       _display_text
               _scroll_left_to_right
                         _scroll_off
               _scroll_right_to_left
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_right_to_left                                16    14      2    9713
                                             43 COMRAM    16    14      2
                             ___wmul (ARG)
                             _memcpy
                             _memset
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              8     2      6     433
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _scroll_off                                          15    13      2    2806
                                             35 COMRAM    15    13      2
                             ___wmul (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _scroll_left_to_right                                11     9      2    9280
                                             43 COMRAM    11     9      2
                             ___wmul (ARG)
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _display_text                                         0     0      0    2572
      _char_enter_mode_left_to_right
                         _set_cursor
                      _write_lcd_cmd
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _set_cursor                                           2     1      1     805
                                             23 COMRAM     2     1      1
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _char_enter_mode_left_to_right                        0     0      0     401
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (4) _copy_data                                           10     6      4   11772
                                             53 COMRAM     6     2      4
                             _printf
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _conflict_check                                       9     7      2   11147
                                             53 COMRAM     9     7      2
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               6     2      4    1673
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _puts                                                 2     0      2     590
                                             19 COMRAM     2     0      2
                              _cputs
                              _putch
 ---------------------------------------------------------------------------------
 (4) _cputs                                                2     0      2     235
                                             17 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _min_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_uid_range                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _max_display_support                                  2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _max_display_str                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_clcd_cusotom_lcd                                2     1      1   63389
                                             53 COMRAM     2     1      1
                            ___awdiv
                             ___wmul
                   _init_CLCD_config
                             _memset
                             _printf
 ---------------------------------------------------------------------------------
 (4) _init_CLCD_config                                     0     0      0   44901
                          __delay_MS
         _clcd_display_string_config
                             _memset
                         _reset_clcd
                      _write_lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _write_lcd_cmd                                        1     1      0     401
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _reset_clcd                                           0     0      0   21201
                _clear_display_array
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _clear_display_array                                  0     0      0   14134
                             _memset
      _reset_display_structure_count
 ---------------------------------------------------------------------------------
 (6) _reset_display_structure_count                        0     0      0    7067
            _clear_display_structure
 ---------------------------------------------------------------------------------
 (7) _clear_display_structure                              0     0      0    7067
                             _memset
 ---------------------------------------------------------------------------------
 (5) _clcd_display_string_config                           0     0      0   15545
                             _memcpy
                             _memset
                             _printf
                          _write_str
 ---------------------------------------------------------------------------------
 (3) _write_str                                            3     1      2     965
                                             23 COMRAM     3     1      2
                     _write_lcd_data
 ---------------------------------------------------------------------------------
 (4) _write_lcd_data                                       1     1      0     401
                                             22 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                7     5      2     370
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     4      6    1098
                                             15 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) __delay_MS                                            5     3      2     687
                                             15 COMRAM     5     3      2
            _TMR1_HasOverflowOccured
                        _TMR1_Reload
                    _TMR1_StartTimer
                     _TMR1_StopTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     907
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _clcd_max_row                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clcd_max_col                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _parse_cmd_str                                       19    17      2   55883
                                              0 BANK0      5     3      2
                                              0 BANK1     14    14      0
                               _atoi
                     _collect_column
                        _collect_row
                            _isdigit
                             _memset
                             _printf
                             _strcpy
                             _strlen
                             _strstr
                             _strtok
 ---------------------------------------------------------------------------------
 (3) _strtok                                               4     0      4    5265
                                             28 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (4) _strspn                                               7     3      4     873
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strcspn                                              7     3      4     873
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    5086
                                             44 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     423
                                             35 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) _strchr                                               6     2      4     586
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    2265
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6    7067
                                             35 COMRAM     8     2      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _collect_row                                         10     6      4    9341
                                             53 COMRAM    10     6      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _collect_column                                      10     6      4    9713
                                             53 COMRAM    10     6      4
                            _isdigit
                             _printf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2    2132
                                             29 COMRAM     6     4      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _printf                                              24    16      8    6415
                                             35 COMRAM    18    10      8
                            ___awdiv (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                       _clcd_max_col (ARG)
                       _clcd_max_row (ARG)
                    _max_display_str (ARG)
                _max_display_support (ARG)
                      _max_uid_range (ARG)
                      _min_uid_range (ARG)
                              _putch
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             16 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    4361
                                             29 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3774
                                             23 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getch                                                0     0      0      37
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         1     1      0      37
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     150
                                             17 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     150
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         14    14      0       0
                                              1 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (12) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                         _make_array *
 ---------------------------------------------------------------------------------
 (13) _make_array                                          0     0      0       0
                         _heart_beat
 ---------------------------------------------------------------------------------
 (14) _heart_beat                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR5_Initialize
       _TMR5_StartTimer
   _TMR0_SetInterruptHandler
   _TMR0_StartTimer
   _TMR0_StopTimer
   _TMR1_StopTimer
   _TMR5_StopTimer
   __delay_MS
     _TMR1_HasOverflowOccured
     _TMR1_Reload
     _TMR1_StartTimer
     _TMR1_StopTimer
   _cmd_consol_task
     _getch
       _EUSART1_Read
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _parse_cmd_str
       _atoi
         ___wmul
           ___awdiv (ARG)
         _isdigit
       _collect_column
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _collect_row
         _isdigit
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
       _isdigit
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strcpy
       _strlen
         ___wmul (ARG)
           ___awdiv (ARG)
       _strstr
         _strchr
         _strlen
           ___wmul (ARG)
             ___awdiv (ARG)
         _strncmp
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
       _strtok
         _strcspn
           _strchr
         _strspn
           _strchr
     _printf
       ___awdiv (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _clcd_max_col (ARG)
       _clcd_max_row (ARG)
       _max_display_str (ARG)
       _max_display_support (ARG)
       _max_uid_range (ARG)
       _min_uid_range (ARG)
       _putch (ARG)
         _EUSART1_Write
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _puts
       _cputs
         _putch
           _EUSART1_Write
       _putch
         _EUSART1_Write
     _reply_to_host
       _clcd_max_col
       _clcd_max_row
       _init_clcd_cusotom_lcd
         ___awdiv
         ___wmul
           ___awdiv (ARG)
         _init_CLCD_config
           __delay_MS
             _TMR1_HasOverflowOccured
             _TMR1_Reload
             _TMR1_StartTimer
             _TMR1_StopTimer
           _clcd_display_string_config
             _memcpy
             _memset
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _printf
               ___awdiv (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
               _clcd_max_col (ARG)
               _clcd_max_row (ARG)
               _max_display_str (ARG)
               _max_display_support (ARG)
               _max_uid_range (ARG)
               _min_uid_range (ARG)
               _putch (ARG)
                 _EUSART1_Write
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _write_str
               _write_lcd_data
                 _delay
           _memset
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _reset_clcd
             _clear_display_array
               _memset
                 _strlen (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
               _reset_display_structure_count
                 _clear_display_structure
                   _memset
                     _strlen (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
             _reset_display_structure_count
               _clear_display_structure
                 _memset
                   _strlen (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
           _write_lcd_cmd
             _delay
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
       _max_display_str
       _max_display_support
       _max_uid_range
       _min_uid_range
       _printf
         ___awdiv (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _clcd_max_col (ARG)
         _clcd_max_row (ARG)
         _max_display_str (ARG)
         _max_display_support (ARG)
         _max_uid_range (ARG)
         _min_uid_range (ARG)
         _putch (ARG)
           _EUSART1_Write
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _puts
         _cputs
           _putch
             _EUSART1_Write
         _putch
           _EUSART1_Write
       _strcmp
       _update_string_data
         ___wmul
           ___awdiv (ARG)
         _conflict_check
           ___wmul
             ___awdiv (ARG)
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
         _copy_data
           _printf
             ___awdiv (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _clcd_max_col (ARG)
             _clcd_max_row (ARG)
             _max_display_str (ARG)
             _max_display_support (ARG)
             _max_uid_range (ARG)
             _min_uid_range (ARG)
             _putch (ARG)
               _EUSART1_Write
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _strcpy
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _make_display
           ___wmul
             ___awdiv (ARG)
           _display_text
             _char_enter_mode_left_to_right
               _write_lcd_cmd
                 _delay
             _set_cursor
               _write_lcd_cmd
                 _delay
             _write_lcd_cmd
               _delay
             _write_str
               _write_lcd_data
                 _delay
           _scroll_left_to_right
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
           _scroll_off
             ___wmul (ARG)
               ___awdiv (ARG)
             _strlen (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
           _scroll_right_to_left
             ___wmul (ARG)
               ___awdiv (ARG)
             _memcpy (ARG)
             _memset (ARG)
               _strlen (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
             _strncpy (ARG)
           _strlen
             ___wmul (ARG)
               ___awdiv (ARG)
         _memset
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
         _printf
           ___awdiv (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _clcd_max_col (ARG)
           _clcd_max_row (ARG)
           _max_display_str (ARG)
           _max_display_support (ARG)
           _max_uid_range (ARG)
           _min_uid_range (ARG)
           _putch (ARG)
             _EUSART1_Write
           _strlen (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
   _console_init
     _clear_cmd_data
       _memset
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _memset
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _make_display
     ___wmul
       ___awdiv (ARG)
     _display_text
       _char_enter_mode_left_to_right
         _write_lcd_cmd
           _delay
       _set_cursor
         _write_lcd_cmd
           _delay
       _write_lcd_cmd
         _delay
       _write_str
         _write_lcd_data
           _delay
     _scroll_left_to_right
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
     _scroll_off
       ___wmul (ARG)
         ___awdiv (ARG)
       _strlen (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
     _scroll_right_to_left
       ___wmul (ARG)
         ___awdiv (ARG)
       _memcpy (ARG)
       _memset (ARG)
         _strlen (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
       _strncpy (ARG)
     _strlen
       ___wmul (ARG)
         ___awdiv (ARG)
   _printf
     ___awdiv (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
     _clcd_max_col (ARG)
     _clcd_max_row (ARG)
     _max_display_str (ARG)
     _max_display_support (ARG)
     _max_uid_range (ARG)
     _min_uid_range (ARG)
     _putch (ARG)
       _EUSART1_Write
     _strlen (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _make_array *
         _heart_beat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     438      37       27.7%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      F      87       7       52.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4F       1       84.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     20C      12        0.0%
DATA                 0      0     644       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Oct 28 19:12:39 2017

                       _eusart1TxBufferRemaining 00FF                            __end_of_parse_cmd_str 0D56  
                                   ___awdiv@sign 0015                            _init_clcd_cusotom_lcd 2874  
                            ___wmul@multiplicand 001A                                  _timer0ReloadVal 004E  
                                   __CFG_CP0$OFF 000000                                     __CFG_CP1$OFF 000000  
                                   __CFG_CP2$OFF 000000                                     __CFG_CP3$OFF 000000  
                                    __CFG_LVP$ON 000000                                              l193 33C0  
                                            l804 128E                                              _CMD 00CB  
                                   __CFG_CPB$OFF 000000                                     __CFG_CPD$OFF 000000  
                                ?_conflict_check 0036                                    ?_display_text 0001  
                                _timer1ReloadVal 00FB                                              _str 00EC  
                      collect_column@data_column 0038                                              prod 000FF3  
                               _LCD_16x2_DISPLAY 007E                                              tosl 000FFD  
                                            wreg 000FE8                                             l1187 270E  
                                           l1437 3118                                             l1447 3362  
                                           l1652 2B0C                                             l1718 3168  
                                           l1657 2BB0                                             l6013 281A  
                                           l6015 2834                                             l6023 2858  
                                           l6201 3696                                             l6113 1760  
                                           l6041 2D88                                             l1699 31B8  
                                           l6131 1854                                             l6213 2DA8  
                                           l7101 13D4                                             l6303 34BC  
                                           l6055 2EC0                                             l7023 0CBE  
                                           l6143 1906                                             l6049 2E8E  
                                           l7033 0D2A                                             l6225 2DCE  
                                           l6241 2E00                                             l6153 19B0  
                                           l6145 190C                                             l7105 13F2  
                                           l7201 1DAA                                             l7027 0D22  
                                           l6227 2DD6                                             l6219 2DB8  
                                           l6251 352C                                             l7051 1182  
                                           l7043 10EA                                             l7211 1DF2  
                                           l5701 30EE                                             l6245 2E0E  
                                           l6237 2DF6                                             l6229 2DDA  
                                           l6157 19B6                                             l6173 20CE  
                                           l6421 1AA6                                             l7061 120E  
                                           l7213 1E08                                             l5711 310E  
                                           l5703 30F2                                             l5631 33AE  
                                           l6511 256C                                             l5623 3562  
                                           l6263 2A8E                                             l6255 3542  
                                           l6159 19BA                                             l6167 2042  
                                           l6431 1B2C                                             l7055 11D0  
                                           l7047 1134                                             l7223 1E1E  
                                           l5721 3340                                             l5801 2360  
                                           l6505 2500                                             l6185 21E4  
                                           l7081 133A                                             l7073 12D6  
                                           l5723 3344                                             l5643 33E2  
                                           l5811 23C6                                             l5627 3572  
                                           l6267 2ADA                                             l6259 2A2E  
                                           l6523 2C70                                             l6531 2CD4  
                                           l5651 3226                                             l6347 3782  
                                           l6371 3774                                             l6603 3200  
                                           l6179 215A                                             l6187 21E8  
                                           l6443 1B5E                                             l7067 1272  
                                           l7219 1E16                                             l7163 1C66  
                                           l6293 3496                                             l5645 33E6  
                                           l5805 2372                                             l5813 23CE  
                                           l6509 2568                                             l5901 32AA  
                                           l6269 2AE2                                             l6285 317C  
                                           l6277 312C                                             l5661 3240  
                                           l6437 1B30                                             l7077 1308  
                                           l7069 12A4                                             l7157 1C4A  
                                           l5727 3358                                             l5719 3338  
                                           l5807 2378                                             l5751 222C  
                                           l6519 25AC                                             l5903 32B2  
                                           l6535 2D04                                             l6287 3184  
                                           l6279 3134                                             l5655 3236  
                                           l6359 3766                                             l5911 142C  
                                           l6447 1B8E                                             l6455 1BC4  
                                           l7095 13A0                                             l5761 225C  
                                           l5753 2232                                             l5817 3086  
                                           l6473 2968                                             l6529 2CAA  
                                           l5833 339A                                             l5649 321E  
                                           l6457 1BCA                                             l7097 13B6  
                                           l7193 1D5A                                             l7169 1C84  
                                           l7185 1D26                                             l6571 25C0  
                                           l5771 22C4                                             l5747 221C  
                                           l5819 308A                                             l6563 2BA4  
                                           l6555 2B5E                                             l6547 2B1E  
                                           l6811 063E                                             l6387 3790  
                                           l5827 337E                                             l5659 323C  
                                           l5843 3412                                             l5931 15A0  
                                           l5923 147A                                             l5915 1446  
                                           l6467 1C38                                             l7179 1CE2  
                                           l7187 1D2C                                             l7355 3064  
                                           l6581 2648                                             l5765 2286  
                                           l5845 3418                                             l5837 33F0  
                                           l5853 371E                                             l5767 22B0  
                                           l5775 22CC                                             l6487 2A1E  
                                           l6479 29DE                                             l6807 063A  
                                           l6815 0642                                             l6751 047C  
                                           l6735 03E8                                             l6663 015C  
                                           l6399 379E                                             l5847 341A  
                                           l5935 164E                                             l5919 1460  
                                           l5871 2FB8                                             l5951 0D72  
                                           l6585 2672                                             l6569 25BC  
                                           l5777 2302                                             l6497 2414  
                                           l5881 3300                                             l5865 2F9E  
                                           l6587 26C0                                             l5699 30E6  
                                           l5787 232A                                             l6659 0158  
                                           l5939 169A                                             l5867 2FA8  
                                           l5859 2F76                                             l5963 0DC0  
                                           l5955 0D8C                                             l6589 26C4  
                                           l5789 232E                                             l5877 32F8  
                                           l6597 31C4                                             l5973 0FC6  
                                           l6863 084A                                             l6679 01F0  
                                           l6599 31CC                                             l5959 0DA6  
                                           l6697 029C                                             l5889 3314  
                                           l5977 1018                                             l5969 0F1C  
                                           l6971 0B72                                             l6867 084E  
                                           l6859 07B2                                             l6869 0852  
                                           l6893 08CE                                             l6967 0B6E  
                                           l6975 0B76                                             l6983 0B7E  
                                           l5999 27A2                                             l6889 08CA  
                                           l6897 08D2                                             l6979 0B7A  
                                           l6987 0B82                                             l6999 0BE8  
               __size_of_clear_display_structure 001E                                             STR_1 FFA1  
                                           STR_2 FF98                                             STR_3 FE07  
                                           STR_4 FE19                                             STR_5 FFF1  
                                           STR_6 FD4C                                             STR_7 FD80  
                                           STR_8 FD66                                             STR_9 FCCF  
                                           _LATA 000F89                                             _LATB 000F8A  
                                           _LATC 000F8B                                             _LATD 000F8C  
                                           _LATE 000F8D                                             u6210 2A50  
                                           u5410 37D2                                             u7110 07EE  
                                           u5440 227E                                             u6240 2ACA  
                                           u7200 0998                                             u6217 2A46  
                                           u5450 22A8                                             u7130 0832  
                                           u6235 2A88                                             u5540 30AC  
                                           u6500 24F2                                             u6420 2996  
                                           u7060 0736                                             u6237 2A7E  
                                           u7117 07E4                                             u6510 255A  
                                           u5447 2274                                             u6247 2AC0  
                                           u7207 098E                                             u6440 29CC  
                                           u5457 229E                                             u7137 0828  
                                           u5650 32DC                                             u5547 30A2  
                                           u6507 24E8                                             u6427 298C  
                                           u7067 072C                                             i2l60 004E  
                                           u6700 26A8                                             u6620 25E2  
                                           u6517 2550                                             i2l62 005E  
                                           u6710 26E6                                             u6470 2442  
                                           u6447 29C2                                             u6640 260A  
                                           u5920 2EB0                                             u6560 2CFE  
                                           u5657 32D2                                             i2l66 006A  
                                           u6490 2478                                             u7370 0CA2  
                                           u6810 0210                          _TMR1_HasOverflowOccured 37CA  
                                           u6707 269E                                             u6627 25D8  
                                           u6660 263E                                             u5940 2EEE  
                                           u6820 0212                                             u6717 26DC  
                                           u6477 2438                                             u6647 2600  
                                           u5927 2EA6                                             u6567 2CF4  
                                           u6680 266A                                             u5960 1774  
                                           u7640 1D42                                             u6497 246E  
                                           u7377 0C98                                             u6667 2634  
                                           u5947 2EE4                                             u6687 2660  
                                           u6970 0572                                             u6977 0568  
                                           _TMR1 000FCE                                             _TMR5 000F4F  
                                           _WPUB 000F61                                    _EUSART1_Write 33AC  
                                  ?_make_display 0001                                             _atoi 25BA  
                                           _main 3024                                    ?_EUSART1_Read 0001  
                                _TMR0_StartTimer 3830                                             fsr0h 000FEA  
                                           fsr1h 000FE2                                             indf0 000FEF  
                                           fsr2h 000FDA                                             fsr0l 000FE9  
                                           indf1 000FE7                                             indf2 000FDF  
                                           fsr1l 000FE1                                             fsr2l 000FD9  
                                           btemp 0050                                             _puts 3728  
                                  __CFG_BORV$190 000000                                             prodh 000FF4  
                                           prodl 000FF3                                             start 00A6  
                                _timer5ReloadVal 00FD                                    __CFG_IESO$OFF 000000  
                           __end_of_clcd_max_col 37A2                             __end_of_clcd_max_row 3794  
                                  ?_console_init 0001                                     ___param_bank 000000  
                                   collect_row@i 003D                          __end_of_TMR0_Initialize 345C  
                 ??_TMR0_DefaultInterruptHandler 0001                   __size_of_OSCILLATOR_Initialize 000E  
                  __end_of_OSCILLATOR_Initialize 37B0                                      make_array@i 0085  
                                          ?_atoi 001E                                            ?_main 0001  
                                __end_of___awdiv 2E18                                   ??_display_text 001B  
                                          STR_10 FE4A                                            STR_11 FFEC  
                                          STR_12 FEAA                                            STR_20 FDCC  
                                          STR_21 FE5A                                            STR_13 FDE2  
                                          STR_30 FFAA                                            STR_22 FF00  
                                          STR_14 FE3A                                            STR_23 FFB2  
                                          STR_31 FF8F                                            STR_15 FE2A  
                                          STR_32 FFDF                                            STR_24 FFBA  
                                          STR_16 FF0B                                            STR_40 FEB9  
                                          STR_41 FFDF                                            STR_33 FFDF  
                                          STR_25 FFDF                                            STR_17 FE78  
                                          STR_42 FEB9                                            STR_34 FFD1  
                                          STR_26 FFC2                                            STR_50 FF74  
                                          STR_18 FCF6                                            STR_51 FF2C  
                                          STR_35 FFDF                                            STR_27 FFDF  
                                          STR_43 FF2C                                            STR_19 FE5A  
                                          STR_52 FFDF                                            STR_44 FFFD  
                                          STR_36 FF57                                            STR_28 FF4D  
                                          STR_60 FD31                                            STR_61 FFDF  
                                          STR_37 FFDF                                            STR_29 FFDF  
                                          STR_53 FF7D                                            STR_45 FF21  
                                          STR_70 FFDF                                            STR_38 FF61  
                                          STR_46 FED1                                            STR_54 FE86  
                                          STR_62 FD16                                            STR_71 FFDF  
                                          STR_63 FFDF                                            STR_39 FFDF  
                                          STR_47 FF6B                                            STR_55 FF37  
                                          STR_80 FDF0                                            STR_56 FFDF  
                                          STR_48 FFDF                                            STR_72 FFF6  
                                          STR_64 FDB3                                            STR_81 FE94  
                                          STR_65 FFDF                                            STR_57 FFDF  
                                          STR_49 FFDF                                            STR_73 FFF6  
                                          STR_74 FE9C                                            STR_82 FFBA  
                                          STR_90 FF57                                            STR_66 FF16  
                                          STR_58 FEA1                                            STR_59 FFDF  
                                          STR_83 FFC2                                            STR_75 FF4D  
                                          STR_91 FEF5                                            STR_67 FD9A  
                                          STR_92 FDF0                                            STR_84 FDF0  
                                          STR_76 FFDA                                            STR_68 FF42  
                                          STR_93 FE94                                            STR_85 FE94  
                                          STR_69 FF86                                            STR_77 FE94  
                                          STR_86 FFC2                                            STR_78 FF4D  
                                          STR_94 FF57                                            STR_79 FFBA  
                                          STR_95 FF61                                            STR_87 FF8F  
                                          STR_96 FE94                                            STR_88 FE94  
                                          STR_97 FF61                                            STR_89 FF8F  
                                          STR_98 FED1                                            STR_99 FE94  
                                _TMR1_StartTimer 382C                                            ?_puts 0014  
                                          _T0CON 000FD5                                  ___awdiv@divisor 0012  
                                          _T1CON 000FCD                                            _T5CON 000F4E  
                                 __CFG_DEBUG$OFF 000000                                  __end_of___lwdiv 3122  
                                __end_of___lwmod 336C                                            i2l205 3526  
                                ___awdiv@counter 0014                                            _TMR0H 000FD7  
                                          _TMR1H 000FCF                                            _TMR0L 000FD6  
                                          _TMR1L 000FCE                                            _TMR5H 000F50  
                                          _TMR5L 000F4F                                            _PORTD 000F83  
                                          _TRISA 000F92                                            _TRISB 000F93  
                                          _TRISC 000F94                                            _TRISD 000F95  
                                          _TRISE 000F96                        __size_of_init_CLCD_config 00B4  
              __size_of_TMR0_SetInterruptHandler 000A                                    __CFG_WRT0$OFF 000000  
                                  __CFG_WRT1$OFF 000000                                    __CFG_WRT2$OFF 000000  
                      ?_TMR0_SetInterruptHandler 0010                                    __CFG_WRT3$OFF 000000  
                           _EUSART1_Transmit_ISR 34F8                                   __CFG_EBTR0$OFF 000000  
                                 __CFG_FCMEN$OFF 000000                                   __CFG_EBTR1$OFF 000000  
                                 __CFG_EBTR2$OFF 000000                                   __CFG_EBTR3$OFF 000000  
                               __end_of_TMR0_ISR 375C                                    __CFG_WRTB$OFF 000000  
                                  __CFG_WRTC$OFF 000000                                    __CFG_WRTD$OFF 000000  
                                          _check 0080                                   __CFG_EBTRB$OFF 000000  
                                          _delay 320C                                            _getch 3812  
                                __end_of_dpowers FCCF                          __end_of_max_display_str 3786  
                                          _cputs 352A                                  __end_of_isdigit 369E  
                             __CFG_MCLRE$EXTMCLR 000000                                            atoi@a 0023  
                                          atoi@s 001E                                            _putch 37F6  
                        __size_of_clear_cmd_data 0032                                   ?_EUSART1_Write 0001  
                        __end_of_TMR1_Initialize 3662                                            pclath 000FFA  
                                 ??_make_display 003C                                            tablat 000FF5  
                                 ??_EUSART1_Read 0010                                            puts@s 0014  
                                          status 000FD8                                   __CFG_HFOFST$ON 000000  
                                __end_of_strcspn 31C2                                  __end_of_strncmp 2AFC  
                                __end_of_strncpy 2FCA                             _scroll_right_to_left 0D56  
                                 __CFG_PBADEN$ON 000000                         scroll_right_to_left@line 003B  
                                _TMR5_Initialize 35D6                                   ??_console_init 002C  
                                __initialization 2EFE                                     __end_of_atoi 2718  
                     __end_of_EUSART1_Initialize 3492                                     __end_of_main 307C  
                                   __end_of_puts 373C                           ?_init_clcd_cusotom_lcd 0036  
                    ?_INTERRUPT_InterruptManager 0001                    __size_of_scroll_left_to_right 0338  
                               _cmd_consol_state 0083                                           ??_atoi 0020  
                                         ??_main 0041                                           ??_puts 0016  
                               ??_write_lcd_data 0017                                    __activetblptr 000003  
                                 __CFG_PLLCFG$ON 000000                              collect_row@data_row 0038  
                                  __delay_MS@val 0013                            ?_EUSART1_Transmit_ISR 0001  
                      ??_TMR1_HasOverflowOccured 0010                                  reply_to_host@ch 00E7  
                                         ?_delay 0010                          __end_of_TMR0_StartTimer 3834  
                                         ?_getch 0001                                           ?_cputs 0012  
                                         STR_100 FED1                                           STR_101 FF37  
                                         STR_102 FE94                                           STR_110 FEE9  
                                         STR_111 FFD8                                           STR_103 FF37  
                                         STR_120 FFDA                                           STR_104 FF42  
                                         STR_112 FEC5                                           STR_105 FFDA  
                                         STR_113 FFD8                                           STR_121 FFE6  
                                         STR_106 FFE6                                           STR_114 FE69  
                                         STR_122 FDF5                                           STR_115 FEAA  
                                         STR_107 FE94                                           STR_123 FFCA  
                                         STR_108 FF42                                           STR_116 FFFA  
                                         STR_117 FFFA                                           STR_109 FFD8  
                                         STR_118 FEDD                                           STR_119 FEAD  
                               ___awdiv@dividend 0010                                           _ANSELA 000F38  
                                         ?_putch 0001                                           _ANSELB 000F39  
                                         _ANSELC 000F3A                                           _ANSELD 000F3B  
                                         _ANSELE 000F3C                                           _T1GCON 000FCC  
                                         _T5GCON 000F4D                         __size_of_cmd_consol_task 01FA  
                                 __CFG_WDTEN$OFF 000000                                           i2l5323 35AC  
                                         i2l5315 358C                                           i2l5309 3520  
                                         _RCREG1 000FAE                                           _RCSTA1 000FAB  
                                         _OSCCON 000FD3                                           _SPBRG1 000FAF  
                                         _TXREG1 000FAD                            ?_scroll_right_to_left 002C  
                                         _TXSTA1 000FAC                           __size_of_max_uid_range 000E  
                            _clear_display_array 3620                                   __CFG_XINST$OFF 000000  
                              collect_column@str 0036                          __end_of_TMR1_StartTimer 3830  
                                   ?_TMR1_Reload 0001                                           ___wmul 35B0  
                                      ??___awdiv 0014                                   __CFG_STVREN$ON 000000  
                                      ??___lwdiv 0014                             __size_of_collect_row 00DA  
                                      ??___lwmod 001B                                           _memcpy 336C  
                               ?_TMR0_Initialize 0001                                           _memset 3558  
                                         delay@i 0015                                           clear_0 2F26  
                                         clear_1 2F38                                           clear_2 2F44  
                                         clear_3 2F50                                           clear_4 2F5C  
                               ___awdiv@quotient 0016                                           _printf 2212  
                                         _strchr 2E8E                                           _strcmp 31C2  
                   scroll_off@display_char_count 002D                                           _strcpy 32A0  
                                         _strlen 307C                                           _strtok 2AFC  
                                         _strspn 3122                                           _strstr 2C6E  
                                _TMR5_StartTimer 381E                                           cputs@s 0012  
                                      ??_isdigit 0010                             ?_clear_display_array 0001  
                                   __mediumconst FCC4                                           tblptrh 000FF7  
                                         tblptrl 000FF6                                           tblptru 000FF8  
                          __end_of_TMR0_CallBack 3620                                  ??_EUSART1_Write 0010  
                        _clear_display_structure 3662         TMR0_SetInterruptHandler@InterruptHandler 0010  
                               ?_max_display_str 0001                                        ??_strcspn 001A  
                                _eusart1RxBuffer 0060                      __end_of_max_display_support 37EC  
                                      ??_strncmp 002A                                        ??_strncpy 0016  
                  __size_of_INTERRUPT_Initialize 0004                                 ??_collect_column 003A  
                                _eusart1TxBuffer 0068                                 ?_TMR1_Initialize 0001  
                        __end_of_TMR5_Initialize 35FC                  ??_reset_display_structure_count 002C  
                              _SYSTEM_Initialize 369E                            __size_of_clcd_max_col 000E  
                                     __accesstop 0060                            __size_of_clcd_max_row 000E  
                        __end_of__initialization 2F62                               __size_of__delay_MS 0044  
scroll_left_to_right@clcd_display_string_details 002C                               ?_SYSTEM_Initialize 0001  
                           __end_of_display_text 2D94                                    ___rparam_used 000001  
            __size_of_clcd_display_string_config 005A                                   __pcstackCOMRAM 0001  
                                   __pidataBANK0 37B0                              ??_SYSTEM_Initialize 0014  
                                      ?_TMR0_ISR 0001                                    __end_of_delay 3256  
                                  __end_of_getch 3818                                 ??_conflict_check 0038  
                                  __end_of_cputs 3558                             _display_struct_count 0074  
                           cmd_consol_task@_1778 0078                                    __end_of_putch 3800  
                           __end_of_make_display 2212                             __end_of_EUSART1_Read 34C6  
                                 collect_row@row 003F                                   collect_row@str 0036  
                     __end_of_update_string_data 1C3C                           __size_of_write_lcd_cmd 001C  
                         ??_EUSART1_Transmit_ISR 0001                            __end_of_reply_to_host 1410  
                          ??_clear_display_array 002C                  update_string_data@exist_uid_idx 00DF  
                               _init_CLCD_config 2BBA                                    _max_uid_range 376A  
                         __size_of_min_uid_range 000E                      __end_of_EUSART1_Receive_ISR 35B0  
                                   _clcd_max_col 3794                                     _clcd_max_row 3786  
                           __end_of_console_init 2E8E                                          ??_delay 0012  
                                        ??_getch 0011                                 ?_TMR0_StartTimer 0001  
                                        ??_cputs 0014                        __end_of_SYSTEM_Initialize 36BC  
                                 _clear_cmd_data 34C6                                          ??_putch 0011  
                                  _eusart1RxHead 0044                                    _eusart1TxHead 0046  
                             __size_of_copy_data 01FA                                    _eusart1RxTail 0045  
                                     __pbssBANK0 0060                                       __pbssBANK1 0100  
                                     __pbssBANK2 0200                                    _eusart1TxTail 0047  
                         ??_scroll_right_to_left 002E                                       _data_count 0042  
                                     __pnvCOMRAM 004E            scroll_off@clcd_display_string_details 0024  
                              ??_cmd_consol_task 00E8                               __CFG_CCP2MX$PORTC1 000000  
               __end_of_TMR0_SetInterruptHandler 380A                          __size_of_TMR0_StopTimer 0004  
                                        ?___wmul 0018                                 ?_TMR1_StartTimer 0001  
                                     ??_TMR0_ISR 0002                          __end_of_TMR5_StartTimer 3824  
                             __CFG_CCP3MX$PORTB5 000000                  ??_char_enter_mode_left_to_right 0018  
                                        ?_memcpy 0010                                          ?_memset 0024  
                                        ?_printf 0024                                          ?_strchr 0010  
                                        ?_strcmp 0010                                          ?_strcpy 0010  
                                        ?_strlen 001E                                       _heart_beat 36BC  
                        __size_of_TMR1_StopTimer 0004                                          ?_strtok 001D  
                                        ?_strspn 0016                                          ?_strstr 002D  
                              __end_of__delay_MS 332A                                   ?_max_uid_range 0001  
                      ??_clear_display_structure 002C                                          _OSCCON2 000FD2  
                         __end_of_clear_cmd_data 34F8                                          _OSCTUNE 000F9B  
                                        _SPBRGH1 000FB0                           copy_data@clcd_str_data 0036  
                               write_lcd_cmd@cmd 0017                                 _print_data_ready 0076  
                                     _make_array 37D6                           __size_of_parse_cmd_str 0CAC  
                               ?_TMR5_Initialize 0001                                    _write_lcd_cmd 36DA  
                                __CFG_PWRTEN$OFF 000000                               __size_of_write_str 003A  
          __end_of_reset_display_structure_count 374C           __size_of_reset_display_structure_count 0010  
                  _reset_display_structure_count 373C                                          __Hparam 0000  
                        ??_init_clcd_cusotom_lcd 0037                                    _min_uid_range 375C  
                                        __Lparam 0000  scroll_right_to_left@clcd_display_string_details 002C  
                                        ___awdiv 2D94                                  __size_of___wmul 0026  
                                        ___lwdiv 30D0                                          ___lwmod 332A  
             __end_of_clcd_display_string_config 3024                       _clcd_display_string_config 2FCA  
                                  copy_data@data 0038                                __end_of_copy_data 2030  
                           __size_of_TMR1_Reload 000C                                          __pcinit 2EFE  
                                __size_of_memcpy 0040                                  __size_of_memset 002C  
                                        __ramtop 1000                                          __ptext0 3024  
                                        __ptext1 2E18                                          __ptext2 34C6  
                                        __ptext3 1C3C                                          __ptext4 10C0  
                                        __ptext5 19D8                                          __ptext6 2030  
                                        __ptext7 0D56                                          __ptext8 2F6C  
                                        __ptext9 2718                                  __size_of_printf 01D8  
                                        _display 0084                                        _T0CONbits 000FD5  
                        __size_of_TMR5_StopTimer 0006                                  __size_of_strchr 0070  
                                __size_of_strcmp 004A                                  __size_of_strcpy 0046  
                                __size_of_strlen 0054                                        _T1CONbits 000FCD  
                                __size_of_strtok 00BE                                  __size_of_strspn 0050  
                                __size_of_strstr 00A0                                          _dpowers FCC5  
                          _OSCILLATOR_Initialize 37A2                                       delay@delay 0010  
                                        _isdigit 3680                               _EUSART1_Initialize 345C  
                       ??_PIN_MANAGER_Initialize 0010                                        _T5CONbits 000F4E  
                                ?_clear_cmd_data 0001                       __size_of_SYSTEM_Initialize 001E  
                                        _strcspn 3172                                          _strncmp 2A2C  
                                        _strncpy 2F6C                            __size_of_display_text 0086  
                           end_of_initialization 2F62                     __end_of_scroll_left_to_right 1748  
                            ?_EUSART1_Initialize 0001                                          memcpy@d 0016  
                                        memcpy@n 0014                                          memcpy@s 0018  
                                 ?_write_lcd_cmd 0001                                      scroll_off@i 0031  
                                    scroll_off@j 002F                                      scroll_off@k 002A  
                                        memset@c 0026                                          memset@n 0028  
                                        memset@p 002A                                 cmd_consol_task@i 007A  
                                 ?_min_uid_range 0001                  __end_of_clear_display_structure 3680  
                                 parse_cmd_str@i 0178                                       _reset_clcd 37EC  
                                     _set_cursor 3712                                          printf@c 0035  
                                        printf@f 0024                            __size_of_make_display 01E2  
                                     _scroll_off 2718                                          postdec1 000FE5  
                                        postdec2 000FDD                                          postinc0 000FEE  
                                        postinc2 000FDE                            __size_of_EUSART1_Read 0034  
                                   _conflict_arr 00B7                                 ?_TMR5_StartTimer 0001  
                           ??_EUSART1_Initialize 0010                                          strcmp@r 0015  
                                  _parse_cmd_str 00AA                                          strlen@s 001E  
                                ??_max_uid_range 0010                                          strspn@i 001B  
                       _TMR0_SetInterruptHandler 3800                                        _PORTAbits 000F80  
                                      _PORTDbits 000F83                            __size_of_console_init 0076  
                                    ?_heart_beat 0001                            _TMR5_InterruptHandler 0072  
          __end_of_char_enter_mode_left_to_right 3812           __size_of_char_enter_mode_left_to_right 0008  
                  _char_enter_mode_left_to_right 380A                                     _display_text 2D0E  
                              __end_of_write_str 3424               init_clcd_cusotom_lcd@clcd_init_col 0036  
                             write_lcd_data@data 0017               init_clcd_cusotom_lcd@clcd_init_row 0037  
                            EUSART1_Write@txData 0010                                      ?_make_array 0001  
                                   _make_display 2030                                     _EUSART1_Read 3492  
                       __end_of_init_CLCD_config 2C6E                                    ??_collect_row 003A  
                              _lcd_display_array 0100                                   _TMR0_StopTimer 3828  
                                   _console_init 2E18                                make_display@count 003F  
                   __end_of_INTERRUPT_Initialize 3838                                     write_str@str 0018  
                                 ?_parse_cmd_str 00DA                   ?_reset_display_structure_count 0001  
                                 __end_of___wmul 35D6                                  collect_column@i 003E  
                              __size_of_TMR0_ISR 0010                                   _TMR1_StopTimer 3824  
                                 __end_of_memcpy 33AC                           ?_OSCILLATOR_Initialize 0001  
                                 __end_of_memset 3584                         ?_TMR1_HasOverflowOccured 0001  
                                 __end_of_printf 23EA                           conflict_check@conflict 003C  
                                 __end_of_strchr 2EFE                                   __end_of_strcmp 320C  
                                 __end_of_strcpy 32E6                                   __end_of_strlen 30D0  
                                 __end_of_strtok 2BBA                                   __end_of_strspn 3172  
                                 __end_of_strstr 2D0E                              start_initialization 2EFE  
                           set_cursor@col_number 0018                         __size_of_TMR0_Initialize 0038  
                __size_of_PIN_MANAGER_Initialize 004A                                  _cmd_consol_task 1C3C  
                                    putch@txData 0011                                  ??_write_lcd_cmd 0017  
                          __end_of_EUSART1_Write 33EA                          __size_of_write_lcd_data 001C  
                           collect_column@column 003D                               _update_string_data 19D8  
                                ??_min_uid_range 0010                              __size_of_heart_beat 001E  
                         __end_of_TMR0_StopTimer 382C                     __size_of_max_display_support 000A  
                       __size_of_max_display_str 000E                                      ?_reset_clcd 0001  
                            ?_update_string_data 00DA                                    _clcd_init_col 0081  
                       __size_of_TMR1_Initialize 0020                                      ?_set_cursor 0018  
                                  _clcd_init_row 0082                                      ?_scroll_off 0024  
                                       ??___wmul 001C                           __size_of_TMR0_CallBack 0024  
                         __end_of_TMR1_StopTimer 3828                                      __pdataBANK0 00EC  
                    __end_of_clear_display_array 3642                                         ??_memcpy 0016  
                                       ??_memset 002A                              update_string_data@i 00E2  
                           _scroll_left_to_right 1410                                   scroll_off@line 002C  
                            __end_of_collect_row 2A2C                              __size_of_make_array 000C  
                                       ??_printf 002C                                   _TMR5_StopTimer 3818  
                                       ??_strchr 0014                                         ??_strcmp 0014  
                                       ??_strcpy 0014                                         ??_strlen 0020  
                                       ??_strtok 0021                                         ??_strspn 001A  
                                 _eusart1RxCount 0043                                         ??_strstr 0031  
                   ??_clcd_display_string_config 0036                                      __pbssBIGRAM 0296  
                                    __pbssCOMRAM 0041                             ??_update_string_data 00DC  
                  __size_of_EUSART1_Transmit_ISR 0032                                    __pcstackBANK0 00DA  
                                  __pcstackBANK1 0178                                  __delay_MS@delay 0010  
                                      __delay_MS 32E6                   ?_char_enter_mode_left_to_right 0001  
                                   _isdigit$2188 0011                     __size_of_EUSART1_Receive_ISR 002C  
                          _TMR0_InterruptHandler 00F9                                        __pnvBANK0 00F9  
                  __size_of_scroll_right_to_left 036A                         __size_of_TMR0_StartTimer 0004  
                                ?_TMR0_StopTimer 0001                           __size_of_reply_to_host 0350  
                               ___lwdiv@dividend 0010                           _PIN_MANAGER_Initialize 3256  
                                conflict_check@i 003D                                  ??_parse_cmd_str 00DC  
                 __size_of_init_clcd_cusotom_lcd 00DE                                        __pintcode 0008  
                        __size_of_collect_column 01D0                    __end_of_init_clcd_cusotom_lcd 2952  
                                  __pmediumconst FCC4                                         ?___awdiv 0010  
                                       ?___lwdiv 0010                                         ?___lwmod 0017  
                __end_of_TMR1_HasOverflowOccured 37D6                                  ?_TMR1_StopTimer 0001  
                         __end_of_TMR5_StopTimer 381E                      update_string_data@end_point 00E1  
                          ?_scroll_left_to_right 002C                      ?_clcd_display_string_config 0001  
                   ??_INTERRUPT_InterruptManager 0002                                 __CFG_PRICLKEN$ON 000000  
                               ??_clear_cmd_data 002C                                parse_cmd_str@temp 0184  
                        __end_of_cmd_consol_task 1E36                                        _copy_data 1E36  
                                       _BAUDCON1 000FB8                         __size_of_TMR1_StartTimer 0004  
                                       ?_isdigit 0001                          __size_of_conflict_check 0290  
                            __size_of_reset_clcd 000A                                       ?__delay_MS 0010  
                               ___lwdiv@quotient 0015                                 _clcd_config_data 0049  
                                 __size_of_delay 004A                              __size_of_set_cursor 0016  
                                 __size_of_getch 0006                                   __size_of_cputs 002E  
                                  _TMR0_CallBack 35FC                                         ?_strcspn 0016  
                                       ?_strncmp 0024                              __size_of_scroll_off 015C  
                                       ?_strncpy 0010                                   __size_of_putch 000A  
                           _INTERRUPT_Initialize 3834                    conflict_check@new_start_point 0036  
                           set_cursor@row_number 0019                                ??_TMR0_Initialize 0012  
                            _conflict_data_count 0041                                   ___wmul@product 001C  
                                       _LATEbits 000F8D                              parse_cmd_str@i_1688 017D  
                            parse_cmd_str@i_1697 0179                                      strncpy@from 0012  
                                       _PIE1bits 000F9D                                      strncpy@size 0014  
            __size_of_INTERRUPT_InterruptManager 009E                                        _valid_cmd 0048  
                     ??_TMR0_SetInterruptHandler 0012                                         i2u352_40 36C4  
                                       i2u352_46 36C6                                         i2u416_48 360C  
                                       _PIR1bits 000F9E                                         _PIR5bits 000F7E  
                                    _collect_row 2952                         __size_of_TMR5_Initialize 0026  
                                       _RCONbits 000FD0                                    ??_TMR1_Reload 0010  
                               __CFG_WDTPS$32768 000000                              parse_cmd_str@column 017B  
                                       _TMR0_ISR 374C                                ??_max_display_str 0010  
                            parse_cmd_str@scroll 017F                                  ?_TMR5_StopTimer 0001  
                       ?_clear_display_structure 0001                                ??_TMR1_Initialize 0010  
                                   ??_heart_beat 0001                                ___wmul@multiplier 0018  
                                     printf@flag 002D                                       ?_copy_data 0036  
                                     printf@prec 002E                                    _reply_to_host 10C0  
                                 ?_TMR0_CallBack 0001                                      _INTCON2bits 000FF1  
                                      copy_data0 2F12                                        _write_str 33EA  
                          ?_INTERRUPT_Initialize 0001                                   _write_lcd_data 36F6  
                                   ??_make_array 0002                            EUSART1_Read@readValue 0010  
                             __end_of_heart_beat 36DA                                         __Hrparam 0000  
                       scroll_left_to_right@line 0036                                ?_init_CLCD_config 0001  
                  update_string_data@start_point 00E0                                         __Lrparam 0000  
                             __CFG_BOREN$SBORDIS 000000                               ??_init_CLCD_config 0036  
                              __CFG_P2BMX$PORTD2 000000                           ??_scroll_left_to_right 002E  
                        ??_OSCILLATOR_Initialize 0010                                ??_TMR0_StartTimer 0010  
                               __size_of___awdiv 0084                      __size_of_EUSART1_Initialize 0036  
                               __size_of___lwdiv 0052                                 __size_of___lwmod 0042  
                    _clcd_display_string_details 0296                               __end_of_make_array 37E2  
                            __end_of_TMR1_Reload 37CA                            _TMR1_InterruptHandler 0070  
                          __end_of_max_uid_range 3778                                   ?_reply_to_host 0001  
                               ?_cmd_consol_task 0001                              _max_display_support 37E2  
                       __size_of_TMR5_StartTimer 0006                                    ?_clcd_max_col 0001  
                                       _cmd_data 0086                                    ?_clcd_max_row 0001  
                               __size_of_isdigit 001E                                  ___lwdiv@divisor 0012  
                                    ??__delay_MS 0012                           __end_of_write_lcd_data 3712  
                                ___lwdiv@counter 0014                                         __ptext10 1410  
                                       __ptext11 2D0E                                         __ptext20 376A  
                                       __ptext12 3712                                         __ptext21 37E2  
                                       __ptext13 380A                                       _T1GCONbits 000FCC  
                                       __ptext30 2FCA                                         __ptext22 3778  
                                       __ptext14 1E36                                         __ptext31 33EA  
                                       __ptext23 2874                                         __ptext15 1748  
                                       __ptext40 3786                                         __ptext32 36F6  
                                       __ptext24 2BBA                                         __ptext16 31C2  
                                       __ptext41 3794                                         __ptext33 320C  
                                       __ptext25 36DA                                         __ptext17 3728  
                                       __ptext50 3558                                         __ptext42 00AA  
                                       __ptext34 336C                                         __ptext26 37EC  
                                       __ptext18 352A                                         __ptext51 2952  
                                       __ptext43 2AFC                                         __ptext35 32E6  
                                       __ptext27 3620                                         __ptext19 375C  
                                       __ptext60 3680                                         __ptext52 23EA  
                                       __ptext44 3122                                         __ptext36 3824  
                                       __ptext28 373C                                         __ptext61 35B0  
                                       __ptext53 307C                                         __ptext45 3172  
                                       __ptext37 37BE                                         __ptext29 3662  
                                       __ptext70 382C                                         __ptext62 3812  
                                       __ptext54 2212                                         __ptext46 2C6E  
                                       __ptext38 37CA                                         __ptext71 3424  
                                       __ptext63 3492                                         __ptext55 37F6  
                                       __ptext47 2A2C                                         __ptext39 2D94  
                                       __ptext80 35FC                                         __ptext72 3830  
                                       __ptext64 3818                                         __ptext56 33AC  
                                       __ptext48 2E8E                                         __ptext81 3838  
                                       __ptext73 3800                                         __ptext65 3828  
                                       __ptext57 332A                                         __ptext49 32A0  
                                       __ptext82 37D6                                         __ptext74 3256  
                                       __ptext66 369E                                         __ptext58 30D0  
                                       __ptext83 36BC                                         __ptext75 37A2  
                                       __ptext67 35D6                                         __ptext59 25BA  
                                       __ptext84 34F8                                         __ptext76 3834  
                                       __ptext68 381E                                         __ptext85 3584  
                                       __ptext77 345C                                         __ptext69 3642  
                                       __ptext86 0000                                         __ptext79 374C  
                                     ?_write_str 0018                                 parse_cmd_str@uid 017E  
                               parse_cmd_str@ptr 0182                                 parse_cmd_str@row 017A  
                               parse_cmd_str@str 00DA                                ??_TMR1_StartTimer 0010  
                               __size_of_strcspn 0050                                 __size_of_strncmp 00D0  
                               __size_of_strncpy 005E                                       strcpy@from 0012  
               __size_of_TMR1_HasOverflowOccured 000C                                    __size_of_atoi 015E  
                                  __size_of_main 0058                                       _T5GCONbits 000F4D  
                                  __size_of_puts 0014                                         delay@val 0013  
                                     strncmp@len 0028             __end_of_TMR0_DefaultInterruptHandler 383A  
          __size_of_TMR0_DefaultInterruptHandler 0002                     _TMR0_DefaultInterruptHandler 3838  
                           ?_max_display_support 0010                                     ??_reset_clcd 002C  
                                   ??_set_cursor 0019                                   _collect_column 23EA  
                                   ??_scroll_off 0026                                         _uart_str 0200  
                                       int$flags 0050                                         atoi@sign 0022  
             __end_of_INTERRUPT_InterruptManager 00A6                       _INTERRUPT_InterruptManager 0008  
                                      printf@val 0033                                         _str_data 0150  
                            _EUSART1_Receive_ISR 3584                                       write_str@i 001A  
                              ??_TMR5_Initialize 0010                                      ??_copy_data 003A  
                                 ??_clcd_max_col 0010                                       _INTCONbits 000FF2  
                                 ??_clcd_max_row 0010                                  ??_TMR0_CallBack 0002  
                                 _conflict_check 1748                                         memcpy@d1 0010  
                                       memcpy@s1 0012                                         isdigit@c 0012  
                                ?_write_lcd_data 0001                           ??_INTERRUPT_Initialize 0010  
                                       memset@p1 0024                               __end_of_reset_clcd 37F6  
                             __end_of_set_cursor 3728                           update_string_data@data 00DA  
                              cmd_consol_task@ch 0186                                         intlevel2 0000  
                             __end_of_scroll_off 2874                                 ??_TMR0_StopTimer 0010  
                           ?_EUSART1_Receive_ISR 0001                                        strchr@chr 0012  
                          __end_of_write_lcd_cmd 36F6                                 ___lwmod@dividend 0017  
                                      strchr@ptr 0010                          ?_PIN_MANAGER_Initialize 0001  
                          ??_max_display_support 0012                                       _RCSTA1bits 000FAB  
                                      strcspn@s1 0016                                        strcspn@s2 0018  
                          __end_of_min_uid_range 376A                           __end_of_collect_column 25BA  
                   __end_of_EUSART1_Transmit_ISR 352A                                        strncmp@s1 0024  
                                      strncmp@s2 0026                                 ??_TMR1_StopTimer 0010  
                                      strncpy@cp 0016                                        strncpy@to 0010  
                  ?_TMR0_DefaultInterruptHandler 0001                                      _TMR1_Reload 37BE  
                                       printf@ap 0031                                         printf@cp 002F  
                              scroll_off@str_len 002E                           __size_of_EUSART1_Write 003E  
                                ??_reply_to_host 00E4                      conflict_check@new_end_point 0037  
                   __end_of_scroll_right_to_left 10C0                           __end_of_conflict_check 19D8  
                                       strcmp@s1 0010                                         strcmp@s2 0012  
                                ___lwmod@divisor 0019                                  _TMR0_Initialize 3424  
                                       strcpy@cp 0014                                         strlen@cp 0022  
                                       strcpy@to 0010                                  ___lwmod@counter 001B  
                                       strcspn@i 001B                     __size_of_clear_display_array 0022  
                          parse_cmd_str@uid_1713 017C                            parse_cmd_str@uid_1685 0180  
                          parse_cmd_str@uid_1696 0181                      __size_of_update_string_data 0264  
                              __CFG_T3CMX$PORTC0 000000                      conflict_check@exist_uid_idx 003B  
                                       strtok@s1 001D                                         strtok@s2 001F  
                                       strspn@s1 0016                                         strspn@s2 0018  
                                       strtok@sp 007C                                         strstr@s1 002D  
                                       strstr@s2 002F                                 _LCD_20x4_DISPLAY 007F  
                                    ??_write_str 001A                                ??_TMR5_StartTimer 0010  
                          ??_EUSART1_Receive_ISR 0001                   __end_of_PIN_MANAGER_Initialize 32A0  
                              __CFG_FOSC$INTIO67 000000                                  _max_display_str 3778  
                                ?_collect_column 0036                                  _TMR1_Initialize 3642  
                               ??_TMR5_StopTimer 0010                                     ?_collect_row 0036  
